record_number,buggy_code,fixed_code,code_similarity
134001,"@SuppressWarnings(""String_Node_Str"") public static void handlePassive(){
  for (  Player player : Bukkit.getServer().getOnlinePlayers()) {
    String ability=GeneralMethods.getBoundAbility(player);
    if (GeneralMethods.canBendPassive(player.getName(),Element.Water)) {
      if (WaterSpout.instances.containsKey(player) || EarthArmor.instances.containsKey(player)) {
        continue;
      }
 else       if (ability == null || !AbilityModuleManager.shiftabilities.contains(ability)) {
        if (player.isSneaking() && WaterMethods.isWater(player.getLocation().getBlock())) {
          player.setVelocity(player.getEyeLocation().getDirection().clone().normalize().multiply(swimFactor));
        }
      }
    }
  }
}","public static void handlePassive(){
  for (  Player player : Bukkit.getServer().getOnlinePlayers()) {
    String ability=GeneralMethods.getBoundAbility(player);
    if (GeneralMethods.canBendPassive(player.getName(),Element.Water)) {
      if (WaterSpout.instances.containsKey(player) || EarthArmor.instances.containsKey(player)) {
        continue;
      }
 else       if (ability == null || !AbilityModuleManager.shiftabilities.contains(ability)) {
        if (player.isSneaking() && WaterMethods.isWater(player.getLocation().getBlock())) {
          player.setVelocity(player.getEyeLocation().getDirection().clone().normalize().multiply(swimFactor));
        }
      }
    }
  }
}",0.9736279401282965
134002,"public WaterSpout(Player player){
  if (instances.containsKey(player)) {
    instances.get(player).remove();
    return;
  }
  this.player=player;
  WaterWave wwave=new WaterWave(player,WaterWave.AbilityType.CLICK);
  if (WaterWave.instances.contains(wwave))   return;
  Block topBlock=GeneralMethods.getTopBlock(player.getLocation(),0,-50);
  if (topBlock == null)   topBlock=player.getLocation().getBlock();
  Material mat=topBlock.getType();
  if (mat != Material.WATER && mat != Material.STATIONARY_WATER && mat != Material.ICE && mat != Material.PACKED_ICE && mat != Material.SNOW && mat != Material.SNOW_BLOCK)   return;
  new Flight(player);
  player.setAllowFlight(true);
  instances.put(player,this);
  spout(player);
}","public WaterSpout(Player player){
  if (instances.containsKey(player)) {
    instances.get(player).remove();
    return;
  }
  this.player=player;
  this.canBendOnPackedIce=ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"");
  WaterWave wwave=new WaterWave(player,WaterWave.AbilityType.CLICK);
  if (WaterWave.instances.contains(wwave))   return;
  Block topBlock=GeneralMethods.getTopBlock(player.getLocation(),0,-50);
  if (topBlock == null)   topBlock=player.getLocation().getBlock();
  Material mat=topBlock.getType();
  if (mat != Material.WATER && mat != Material.STATIONARY_WATER && mat != Material.ICE && mat != Material.PACKED_ICE && mat != Material.SNOW && mat != Material.SNOW_BLOCK)   return;
  if (mat == Material.PACKED_ICE && !canBendOnPackedIce)   return;
  new Flight(player);
  player.setAllowFlight(true);
  instances.put(player,this);
  spout(player);
}",0.9032258064516128
134003,"private static int spoutableWaterHeight(Location location,Player player){
  WaterSpout spout=instances.get(player);
  int height=spout.defaultheight;
  if (WaterMethods.isNight(player.getWorld()))   height=(int)WaterMethods.waterbendingNightAugment((double)height,player.getWorld());
  int maxheight=(int)((double)spout.defaultheight * ProjectKorra.plugin.getConfig().getDouble(""String_Node_Str"")) + 5;
  Block blocki;
  for (int i=0; i < maxheight; i++) {
    blocki=location.clone().add(0,-i,0).getBlock();
    if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",blocki.getLocation()))     return -1;
    if (!affectedblocks.contains(blocki)) {
      if (blocki.getType() == Material.WATER || blocki.getType() == Material.STATIONARY_WATER) {
        if (!TempBlock.isTempBlock(blocki)) {
          revertBaseBlock(player);
        }
        spout.base=blocki;
        if (i > height)         return height;
        return i;
      }
      if (blocki.getType() == Material.ICE || blocki.getType() == Material.SNOW || blocki.getType() == Material.SNOW_BLOCK) {
        if (!TempBlock.isTempBlock(blocki)) {
          revertBaseBlock(player);
          instances.get(player).baseblock=new TempBlock(blocki,Material.STATIONARY_WATER,(byte)8);
        }
        spout.base=blocki;
        if (i > height)         return height;
        return i;
      }
      if ((blocki.getType() != Material.AIR && (!WaterMethods.isPlant(blocki) || !WaterMethods.canPlantbend(player)))) {
        revertBaseBlock(player);
        return -1;
      }
    }
  }
  revertBaseBlock(player);
  return -1;
}","private static int spoutableWaterHeight(Location location,Player player){
  WaterSpout spout=instances.get(player);
  int height=spout.defaultheight;
  if (WaterMethods.isNight(player.getWorld()))   height=(int)WaterMethods.waterbendingNightAugment((double)height,player.getWorld());
  int maxheight=(int)((double)spout.defaultheight * ProjectKorra.plugin.getConfig().getDouble(""String_Node_Str"")) + 5;
  Block blocki;
  for (int i=0; i < maxheight; i++) {
    blocki=location.clone().add(0,-i,0).getBlock();
    if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",blocki.getLocation()))     return -1;
    if (!affectedblocks.contains(blocki)) {
      if (blocki.getType() == Material.WATER || blocki.getType() == Material.STATIONARY_WATER) {
        if (!TempBlock.isTempBlock(blocki)) {
          revertBaseBlock(player);
        }
        spout.base=blocki;
        if (i > height)         return height;
        return i;
      }
      if (blocki.getType() == Material.ICE || blocki.getType() == Material.SNOW || blocki.getType() == Material.SNOW_BLOCK || (blocki.getType() == Material.PACKED_ICE && spout.canBendOnPackedIce)) {
        if (!TempBlock.isTempBlock(blocki)) {
          revertBaseBlock(player);
          instances.get(player).baseblock=new TempBlock(blocki,Material.STATIONARY_WATER,(byte)8);
        }
        spout.base=blocki;
        if (i > height)         return height;
        return i;
      }
      if ((blocki.getType() != Material.AIR && (!WaterMethods.isPlant(blocki) || !WaterMethods.canPlantbend(player)))) {
        revertBaseBlock(player);
        return -1;
      }
    }
  }
  revertBaseBlock(player);
  return -1;
}",0.9777235276167228
134004,"public void progress(){
  progressCounter++;
  if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (type != AbilityType.RELEASE) {
    if (!GeneralMethods.canBend(player.getName(),""String_Node_Str"") || !player.hasPermission(""String_Node_Str"")) {
      remove();
      return;
    }
    String ability=GeneralMethods.getBoundAbility(player);
    if (ability == null || !ability.equalsIgnoreCase(""String_Node_Str"")) {
      remove();
      return;
    }
  }
  if (type == AbilityType.CLICK) {
    if (origin == null) {
      removeType(player,AbilityType.CLICK);
      Block block=BlockSource.getWaterSourceBlock(player,range,ClickType.LEFT_CLICK,true,true,WaterMethods.canPlantbend(player));
      if (block == null) {
        if (instances.contains(this)) {
          remove();
        }
        return;
      }
      instances.add(this);
      Block blockAbove=block.getRelative(BlockFace.UP);
      if (blockAbove.getType() != Material.AIR && !WaterMethods.isWaterbendable(blockAbove,player)) {
        remove();
        return;
      }
      origin=block.getLocation();
      if (!WaterMethods.isWaterbendable(block,player) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",origin)) {
        remove();
        return;
      }
      if (ICE_ONLY && !(block.getType() == Material.ICE || block.getType() == Material.SNOW || block.getType() == Material.PACKED_ICE)) {
        remove();
        return;
      }
    }
    if (player.getLocation().distance(origin) > range) {
      remove();
      return;
    }
 else     if (player.isSneaking()) {
      new WaterWave(player,AbilityType.SHIFT);
      return;
    }
    WaterMethods.playFocusWaterEffect(origin.getBlock());
  }
 else   if (type == AbilityType.SHIFT) {
    if (direction == null) {
      direction=player.getEyeLocation().getDirection();
    }
    if (!charging) {
      if (!containsType(player,AbilityType.SHIFT)) {
        removeType(player,AbilityType.CLICK);
        remove();
        return;
      }
      charging=true;
      anim=AnimateState.RISE;
      if (!getType(player,AbilityType.CLICK).isEmpty()) {
        WaterWave clickSpear=getType(player,AbilityType.CLICK).get(0);
        origin=clickSpear.origin.clone();
        currentLoc=origin.clone();
        if (WaterMethods.isPlant(origin.getBlock()))         new Plantbending(origin.getBlock());
      }
    }
    removeType(player,AbilityType.CLICK);
    if (!player.isSneaking()) {
      if (System.currentTimeMillis() - time > chargeTime) {
        WaterWave wwave=new WaterWave(player,AbilityType.RELEASE);
        wwave.anim=AnimateState.SHRINK;
        wwave.direction=direction;
      }
      remove();
      return;
    }
    double animSpeed=1.2;
    if (anim == AnimateState.RISE && currentLoc != null) {
      revertBlocks();
      currentLoc.add(0,animSpeed,0);
      Block block=currentLoc.getBlock();
      if (!(WaterMethods.isWaterbendable(block,player) || block.getType() == Material.AIR) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
        remove();
        return;
      }
      createBlock(block,Material.STATIONARY_WATER);
      if (currentLoc.distance(origin) > 2)       anim=AnimateState.TOWARDPLAYER;
    }
 else     if (anim == AnimateState.TOWARDPLAYER) {
      revertBlocks();
      Location eyeLoc=player.getTargetBlock((HashSet<Material>)null,2).getLocation();
      eyeLoc.setY(player.getEyeLocation().getY());
      Vector vec=GeneralMethods.getDirection(currentLoc,eyeLoc);
      currentLoc.add(vec.normalize().multiply(animSpeed));
      Block block=currentLoc.getBlock();
      if (!(WaterMethods.isWaterbendable(block,player) || block.getType() == Material.AIR) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
        remove();
        return;
      }
      createBlock(block,Material.STATIONARY_WATER);
      if (currentLoc.distance(eyeLoc) < 1.3) {
        anim=AnimateState.CIRCLE;
        Vector tempDir=player.getLocation().getDirection();
        tempDir.setY(0);
        direction=tempDir.normalize();
        revertBlocks();
      }
    }
 else     if (anim == AnimateState.CIRCLE) {
      drawCircle(120,5);
    }
  }
 else   if (type == AbilityType.RELEASE) {
    if (anim == AnimateState.SHRINK) {
      radius-=0.20;
      drawCircle(360,15);
      if (radius < 1) {
        revertBlocks();
        time=System.currentTimeMillis();
        anim=null;
      }
    }
 else {
      if ((System.currentTimeMillis() - time > flightTime && !AvatarState.isAvatarState(player)) || player.isSneaking()) {
        remove();
        return;
      }
      player.setFallDistance(0f);
      double currentSpeed=speed - (speed * (double)(System.currentTimeMillis() - time) / (double)flightTime);
      double nightSpeed=WaterMethods.waterbendingNightAugment(currentSpeed * 0.9,player.getWorld());
      currentSpeed=nightSpeed > currentSpeed ? nightSpeed : currentSpeed;
      if (AvatarState.isAvatarState(player))       currentSpeed=WaterMethods.waterbendingNightAugment(speed,player.getWorld());
      player.setVelocity(player.getEyeLocation().getDirection().normalize().multiply(currentSpeed));
      for (      Block block : GeneralMethods.getBlocksAroundPoint(player.getLocation().add(0,-1,0),waveRadius))       if (block.getType() == Material.AIR && !GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
        if (iceWave)         createBlockDelay(block,Material.ICE,(byte)0,2L);
 else         createBlock(block,Material.STATIONARY_WATER,(byte)0);
      }
      revertBlocksDelay(20L);
      if (iceWave && progressCounter % 3 == 0) {
        for (        Entity entity : GeneralMethods.getEntitiesAroundPoint(player.getLocation().add(0,-1,0),waveRadius * 1.5)) {
          if (entity != this.player && entity instanceof LivingEntity && !affectedEntities.contains(entity)) {
            affectedEntities.add(entity);
            final double aug=WaterMethods.getWaterbendingNightAugment(player.getWorld());
            GeneralMethods.damageEntity(player,entity,aug * damage,Element.Water,""String_Node_Str"");
            final Player fplayer=this.player;
            final Entity fent=entity;
            new BukkitRunnable(){
              public void run(){
                createIceSphere(fplayer,fent,aug * 2.5);
              }
            }
.runTaskLater(ProjectKorra.plugin,6);
          }
        }
      }
    }
  }
}","public void progress(){
  progressCounter++;
  if (player.isDead() || !player.isOnline() || !origin.getWorld().equals(player.getWorld())) {
    remove();
    return;
  }
  if (type != AbilityType.RELEASE) {
    if (!GeneralMethods.canBend(player.getName(),""String_Node_Str"") || !player.hasPermission(""String_Node_Str"")) {
      remove();
      return;
    }
    String ability=GeneralMethods.getBoundAbility(player);
    if (ability == null || !ability.equalsIgnoreCase(""String_Node_Str"")) {
      remove();
      return;
    }
  }
  if (type == AbilityType.CLICK) {
    if (origin == null) {
      removeType(player,AbilityType.CLICK);
      Block block=BlockSource.getWaterSourceBlock(player,range,ClickType.LEFT_CLICK,true,true,WaterMethods.canPlantbend(player));
      if (block == null) {
        if (instances.contains(this)) {
          remove();
        }
        return;
      }
      instances.add(this);
      Block blockAbove=block.getRelative(BlockFace.UP);
      if (blockAbove.getType() != Material.AIR && !WaterMethods.isWaterbendable(blockAbove,player)) {
        remove();
        return;
      }
      origin=block.getLocation();
      if (!WaterMethods.isWaterbendable(block,player) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",origin)) {
        remove();
        return;
      }
      if (ICE_ONLY && !(block.getType() == Material.ICE || block.getType() == Material.SNOW || block.getType() == Material.PACKED_ICE)) {
        remove();
        return;
      }
    }
    if (player.getLocation().distance(origin) > range) {
      remove();
      return;
    }
 else     if (player.isSneaking()) {
      new WaterWave(player,AbilityType.SHIFT);
      return;
    }
    WaterMethods.playFocusWaterEffect(origin.getBlock());
  }
 else   if (type == AbilityType.SHIFT) {
    if (direction == null) {
      direction=player.getEyeLocation().getDirection();
    }
    if (!charging) {
      if (!containsType(player,AbilityType.SHIFT)) {
        removeType(player,AbilityType.CLICK);
        remove();
        return;
      }
      charging=true;
      anim=AnimateState.RISE;
      if (!getType(player,AbilityType.CLICK).isEmpty()) {
        WaterWave clickSpear=getType(player,AbilityType.CLICK).get(0);
        origin=clickSpear.origin.clone();
        currentLoc=origin.clone();
        if (WaterMethods.isPlant(origin.getBlock()))         new Plantbending(origin.getBlock());
      }
    }
    removeType(player,AbilityType.CLICK);
    if (!player.isSneaking()) {
      if (System.currentTimeMillis() - time > chargeTime) {
        WaterWave wwave=new WaterWave(player,AbilityType.RELEASE);
        wwave.anim=AnimateState.SHRINK;
        wwave.direction=direction;
      }
      remove();
      return;
    }
    double animSpeed=1.2;
    if (anim == AnimateState.RISE && currentLoc != null) {
      revertBlocks();
      currentLoc.add(0,animSpeed,0);
      Block block=currentLoc.getBlock();
      if (!(WaterMethods.isWaterbendable(block,player) || block.getType() == Material.AIR) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
        remove();
        return;
      }
      createBlock(block,Material.STATIONARY_WATER);
      if (currentLoc.distance(origin) > 2)       anim=AnimateState.TOWARDPLAYER;
    }
 else     if (anim == AnimateState.TOWARDPLAYER) {
      revertBlocks();
      Location eyeLoc=player.getTargetBlock((HashSet<Material>)null,2).getLocation();
      eyeLoc.setY(player.getEyeLocation().getY());
      Vector vec=GeneralMethods.getDirection(currentLoc,eyeLoc);
      currentLoc.add(vec.normalize().multiply(animSpeed));
      Block block=currentLoc.getBlock();
      if (!(WaterMethods.isWaterbendable(block,player) || block.getType() == Material.AIR) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
        remove();
        return;
      }
      createBlock(block,Material.STATIONARY_WATER);
      if (currentLoc.distance(eyeLoc) < 1.3) {
        anim=AnimateState.CIRCLE;
        Vector tempDir=player.getLocation().getDirection();
        tempDir.setY(0);
        direction=tempDir.normalize();
        revertBlocks();
      }
    }
 else     if (anim == AnimateState.CIRCLE) {
      drawCircle(120,5);
    }
  }
 else   if (type == AbilityType.RELEASE) {
    if (anim == AnimateState.SHRINK) {
      radius-=0.20;
      drawCircle(360,15);
      if (radius < 1) {
        revertBlocks();
        time=System.currentTimeMillis();
        anim=null;
      }
    }
 else {
      if ((System.currentTimeMillis() - time > flightTime && !AvatarState.isAvatarState(player)) || player.isSneaking()) {
        remove();
        return;
      }
      player.setFallDistance(0f);
      double currentSpeed=speed - (speed * (double)(System.currentTimeMillis() - time) / (double)flightTime);
      double nightSpeed=WaterMethods.waterbendingNightAugment(currentSpeed * 0.9,player.getWorld());
      currentSpeed=nightSpeed > currentSpeed ? nightSpeed : currentSpeed;
      if (AvatarState.isAvatarState(player))       currentSpeed=WaterMethods.waterbendingNightAugment(speed,player.getWorld());
      player.setVelocity(player.getEyeLocation().getDirection().normalize().multiply(currentSpeed));
      for (      Block block : GeneralMethods.getBlocksAroundPoint(player.getLocation().add(0,-1,0),waveRadius))       if (block.getType() == Material.AIR && !GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
        if (iceWave)         createBlockDelay(block,Material.ICE,(byte)0,2L);
 else         createBlock(block,Material.STATIONARY_WATER,(byte)0);
      }
      revertBlocksDelay(20L);
      if (iceWave && progressCounter % 3 == 0) {
        for (        Entity entity : GeneralMethods.getEntitiesAroundPoint(player.getLocation().add(0,-1,0),waveRadius * 1.5)) {
          if (entity != this.player && entity instanceof LivingEntity && !affectedEntities.contains(entity)) {
            affectedEntities.add(entity);
            final double aug=WaterMethods.getWaterbendingNightAugment(player.getWorld());
            GeneralMethods.damageEntity(player,entity,aug * damage,Element.Water,""String_Node_Str"");
            final Player fplayer=this.player;
            final Entity fent=entity;
            new BukkitRunnable(){
              public void run(){
                createIceSphere(fplayer,fent,aug * 2.5);
              }
            }
.runTaskLater(ProjectKorra.plugin,6);
          }
        }
      }
    }
  }
}",0.9963088280529068
134005,"private void fill(){
  for (  StockAbility a : StockAbility.values()) {
    if (StockAbility.isAirbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        airbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.AirScooter)         harmlessabilities.add(a.name());
        if (a == StockAbility.AirSpout)         harmlessabilities.add(a.name());
        if (a == StockAbility.Tornado)         shiftabilities.add(a.name());
        if (a == StockAbility.AirSuction)         shiftabilities.add(a.name());
        if (a == StockAbility.AirSwipe)         shiftabilities.add(a.name());
        if (a == StockAbility.AirBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.AirBurst)         shiftabilities.add(a.name());
        if (a == StockAbility.AirShield)         shiftabilities.add(a.name());
        if (a == StockAbility.Flight)         shiftabilities.add(a.name());
        if (a == StockAbility.Flight)         subabilities.add(a.name());
        if (a == StockAbility.Flight)         flightabilities.add(a.name());
      }
    }
 else     if (StockAbility.isWaterbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        waterbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.WaterSpout)         harmlessabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         harmlessabilities.add(a.name());
        if (a == StockAbility.Surge)         shiftabilities.add(a.name());
        if (a == StockAbility.Bloodbending)         shiftabilities.add(a.name());
        if (a == StockAbility.PhaseChange)         shiftabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         shiftabilities.add(a.name());
        if (a == StockAbility.OctopusForm)         shiftabilities.add(a.name());
        if (a == StockAbility.Torrent)         shiftabilities.add(a.name());
        if (a == StockAbility.WaterManipulation)         shiftabilities.add(a.name());
        if (a == StockAbility.IceSpike)         shiftabilities.add(a.name());
        if (a == StockAbility.IceBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.WaterArms)         shiftabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         subabilities.add(a.name());
        if (a == StockAbility.Bloodbending)         subabilities.add(a.name());
        if (a == StockAbility.PhaseChange)         subabilities.add(a.name());
        if (a == StockAbility.IceSpike)         subabilities.add(a.name());
        if (a == StockAbility.IceBlast)         subabilities.add(a.name());
        if (a == StockAbility.PlantArmor)         subabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         healingabilities.add(a.name());
        if (a == StockAbility.Bloodbending)         bloodabilities.add(a.name());
        if (a == StockAbility.PhaseChange)         iceabilities.add(a.name());
        if (a == StockAbility.IceSpike)         iceabilities.add(a.name());
        if (a == StockAbility.IceBlast)         iceabilities.add(a.name());
        if (a == StockAbility.PlantArmor)         plantabilities.add(a.name());
      }
    }
 else     if (StockAbility.isEarthbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        earthbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.Tremorsense)         harmlessabilities.add(a.name());
        if (a == StockAbility.RaiseEarth)         shiftabilities.add(a.name());
        if (a == StockAbility.Collapse)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.Shockwave)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthTunnel)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthGrab)         shiftabilities.add(a.name());
        if (a == StockAbility.LavaFlow)         shiftabilities.add(a.name());
        if (a == StockAbility.MetalClips)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthSmash)         shiftabilities.add(a.name());
        if (a == StockAbility.SandSpout)         shiftabilities.add(a.name());
        if (a == StockAbility.MetalClips)         subabilities.add(a.name());
        if (a == StockAbility.Extraction)         subabilities.add(a.name());
        if (a == StockAbility.LavaFlow)         subabilities.add(a.name());
        if (a == StockAbility.SandSpout)         subabilities.add(a.name());
        if (a == StockAbility.MetalClips)         metalabilities.add(a.name());
        if (a == StockAbility.Extraction)         metalabilities.add(a.name());
        if (a == StockAbility.LavaFlow)         lavaabilities.add(a.name());
        if (a == StockAbility.SandSpout)         sandabilities.add(a.name());
      }
    }
 else     if (StockAbility.isFirebending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        firebendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.Illumination)         harmlessabilities.add(a.name());
        if (a == StockAbility.Blaze)         igniteabilities.add(a.name());
        if (a == StockAbility.FireBlast)         explodeabilities.add(a.name());
        if (a == StockAbility.Lightning)         explodeabilities.add(a.name());
        if (a == StockAbility.Combustion)         explodeabilities.add(a.name());
        if (a == StockAbility.HeatControl)         shiftabilities.add(a.name());
        if (a == StockAbility.Lightning)         shiftabilities.add(a.name());
        if (a == StockAbility.FireBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.Blaze)         shiftabilities.add(a.name());
        if (a == StockAbility.FireBurst)         shiftabilities.add(a.name());
        if (a == StockAbility.Lightning)         subabilities.add(a.name());
        if (a == StockAbility.Combustion)         subabilities.add(a.name());
        if (a == StockAbility.Lightning)         lightningabilities.add(a.name());
        if (a == StockAbility.Combustion)         combustionabilities.add(a.name());
      }
    }
 else     if (StockAbility.isChiBlocking(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        chiabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.HighJump)         harmlessabilities.add(a.name());
      }
    }
 else {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
      }
    }
  }
  for (  AbilityModule ab : ability) {
    try {
      boolean succes=true;
      for (      String enabledAbility : abilities) {
        if (enabledAbility.equalsIgnoreCase(ab.getName())) {
          succes=false;
        }
      }
      if (!succes)       continue;
      ab.onThisLoad();
      abilities.add(ab.getName());
      for (      StockAbility a : StockAbility.values()) {
        if (a.name().equalsIgnoreCase(ab.getName())) {
          disabledStockAbilities.add(a.name());
        }
      }
      if (ab.getElement() == Element.Air.toString())       airbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Water.toString())       waterbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Earth.toString())       earthbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Fire.toString())       firebendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Chi.toString())       chiabilities.add(ab.getName());
      if (ab.isShiftAbility())       shiftabilities.add(ab.getName());
      if (ab.isHarmlessAbility())       harmlessabilities.add(ab.getName());
      if (ab.getSubElement() != null) {
        subabilities.add(ab.getName());
switch (ab.getSubElement()) {
case Bloodbending:
          bloodabilities.add(ab.getName());
        break;
case Combustion:
      combustionabilities.add(ab.getName());
    break;
case Flight:
  flightabilities.add(ab.getName());
break;
case Healing:
healingabilities.add(ab.getName());
break;
case Icebending:
iceabilities.add(ab.getName());
break;
case Lavabending:
lavaabilities.add(ab.getName());
break;
case Lightning:
lightningabilities.add(ab.getName());
break;
case Metalbending:
metalabilities.add(ab.getName());
break;
case Plantbending:
plantabilities.add(ab.getName());
break;
case Sandbending:
sandabilities.add(ab.getName());
break;
case SpiritualProjection:
spiritualprojectionabilities.add(ab.getName());
break;
}
}
descriptions.put(ab.getName(),ab.getDescription());
authors.put(ab.getName(),ab.getAuthor());
}
 catch (Exception e) {
ProjectKorra.log.warning(""String_Node_Str"" + ab.getName() + ""String_Node_Str"");
e.printStackTrace();
ab.stop();
abilities.remove(ab.getName());
final AbilityModule skill=ab;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
public void run(){
ability.remove(skill);
}
}
,10);
continue;
}
}
for (Field field : this.getClass().getDeclaredFields()) {
if (List.class.isAssignableFrom(field.getType())) {
try {
Collections.sort((List)field.get(this));
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
}","private void fill(){
  for (  StockAbility a : StockAbility.values()) {
    if (StockAbility.isAirbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        airbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.AirScooter)         harmlessabilities.add(a.name());
        if (a == StockAbility.AirSpout)         harmlessabilities.add(a.name());
        if (a == StockAbility.Tornado)         shiftabilities.add(a.name());
        if (a == StockAbility.AirSuction)         shiftabilities.add(a.name());
        if (a == StockAbility.AirSwipe)         shiftabilities.add(a.name());
        if (a == StockAbility.AirBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.AirBurst)         shiftabilities.add(a.name());
        if (a == StockAbility.AirShield)         shiftabilities.add(a.name());
        if (a == StockAbility.Flight)         shiftabilities.add(a.name());
        if (a == StockAbility.Flight)         subabilities.add(a.name());
        if (a == StockAbility.Flight)         flightabilities.add(a.name());
      }
    }
 else     if (StockAbility.isWaterbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        waterbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.WaterSpout)         harmlessabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         harmlessabilities.add(a.name());
        if (a == StockAbility.Surge)         shiftabilities.add(a.name());
        if (a == StockAbility.Bloodbending)         shiftabilities.add(a.name());
        if (a == StockAbility.PhaseChange)         shiftabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         shiftabilities.add(a.name());
        if (a == StockAbility.OctopusForm)         shiftabilities.add(a.name());
        if (a == StockAbility.Torrent)         shiftabilities.add(a.name());
        if (a == StockAbility.WaterManipulation)         shiftabilities.add(a.name());
        if (a == StockAbility.IceSpike)         shiftabilities.add(a.name());
        if (a == StockAbility.IceBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.WaterArms)         shiftabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         subabilities.add(a.name());
        if (a == StockAbility.Bloodbending)         subabilities.add(a.name());
        if (a == StockAbility.PhaseChange)         subabilities.add(a.name());
        if (a == StockAbility.IceSpike)         subabilities.add(a.name());
        if (a == StockAbility.IceBlast)         subabilities.add(a.name());
        if (a == StockAbility.PlantArmor)         subabilities.add(a.name());
        if (a == StockAbility.HealingWaters)         healingabilities.add(a.name());
        if (a == StockAbility.Bloodbending)         bloodabilities.add(a.name());
        if (a == StockAbility.PhaseChange)         iceabilities.add(a.name());
        if (a == StockAbility.IceSpike)         iceabilities.add(a.name());
        if (a == StockAbility.IceBlast)         iceabilities.add(a.name());
        if (a == StockAbility.PlantArmor)         plantabilities.add(a.name());
      }
    }
 else     if (StockAbility.isEarthbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        earthbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.Tremorsense)         harmlessabilities.add(a.name());
        if (a == StockAbility.RaiseEarth)         shiftabilities.add(a.name());
        if (a == StockAbility.Collapse)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.Shockwave)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthTunnel)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthGrab)         shiftabilities.add(a.name());
        if (a == StockAbility.LavaFlow)         shiftabilities.add(a.name());
        if (a == StockAbility.MetalClips)         shiftabilities.add(a.name());
        if (a == StockAbility.EarthSmash)         shiftabilities.add(a.name());
        if (a == StockAbility.SandSpout)         shiftabilities.add(a.name());
        if (a == StockAbility.MetalClips)         subabilities.add(a.name());
        if (a == StockAbility.Extraction)         subabilities.add(a.name());
        if (a == StockAbility.LavaFlow)         subabilities.add(a.name());
        if (a == StockAbility.SandSpout)         subabilities.add(a.name());
        if (a == StockAbility.MetalClips)         metalabilities.add(a.name());
        if (a == StockAbility.Extraction)         metalabilities.add(a.name());
        if (a == StockAbility.LavaFlow)         lavaabilities.add(a.name());
        if (a == StockAbility.SandSpout)         sandabilities.add(a.name());
      }
    }
 else     if (StockAbility.isFirebending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        firebendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.Illumination)         harmlessabilities.add(a.name());
        if (a == StockAbility.Blaze)         igniteabilities.add(a.name());
        if (a == StockAbility.FireBlast)         explodeabilities.add(a.name());
        if (a == StockAbility.Lightning)         explodeabilities.add(a.name());
        if (a == StockAbility.Combustion)         explodeabilities.add(a.name());
        if (a == StockAbility.HeatControl)         shiftabilities.add(a.name());
        if (a == StockAbility.Lightning)         shiftabilities.add(a.name());
        if (a == StockAbility.FireBlast)         shiftabilities.add(a.name());
        if (a == StockAbility.Blaze)         shiftabilities.add(a.name());
        if (a == StockAbility.FireBurst)         shiftabilities.add(a.name());
        if (a == StockAbility.Lightning)         subabilities.add(a.name());
        if (a == StockAbility.Combustion)         subabilities.add(a.name());
        if (a == StockAbility.Lightning)         lightningabilities.add(a.name());
        if (a == StockAbility.Combustion)         combustionabilities.add(a.name());
      }
    }
 else     if (StockAbility.isChiBlocking(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        chiabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbility.HighJump)         harmlessabilities.add(a.name());
      }
    }
 else {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
      }
    }
  }
  for (  AbilityModule ab : ability) {
    try {
      boolean succes=true;
      for (      String enabledAbility : abilities) {
        if (enabledAbility.equalsIgnoreCase(ab.getName())) {
          succes=false;
        }
      }
      if (!succes)       continue;
      ab.onThisLoad();
      abilities.add(ab.getName());
      for (      StockAbility a : StockAbility.values()) {
        if (a.name().equalsIgnoreCase(ab.getName())) {
          disabledStockAbilities.add(a.name());
        }
      }
      if (ab.getElement() == Element.Air.toString())       airbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Water.toString())       waterbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Earth.toString())       earthbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Fire.toString())       firebendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Chi.toString())       chiabilities.add(ab.getName());
      if (ab.isShiftAbility())       shiftabilities.add(ab.getName());
      if (ab.isHarmlessAbility())       harmlessabilities.add(ab.getName());
      if (ab.getSubElement() != null) {
        subabilities.add(ab.getName());
switch (ab.getSubElement()) {
case Bloodbending:
          bloodabilities.add(ab.getName());
        break;
case Combustion:
      combustionabilities.add(ab.getName());
    break;
case Flight:
  flightabilities.add(ab.getName());
break;
case Healing:
healingabilities.add(ab.getName());
break;
case Icebending:
iceabilities.add(ab.getName());
break;
case Lavabending:
lavaabilities.add(ab.getName());
break;
case Lightning:
lightningabilities.add(ab.getName());
break;
case Metalbending:
metalabilities.add(ab.getName());
break;
case Plantbending:
plantabilities.add(ab.getName());
break;
case Sandbending:
sandabilities.add(ab.getName());
break;
case SpiritualProjection:
spiritualprojectionabilities.add(ab.getName());
break;
}
}
descriptions.put(ab.getName(),ab.getDescription());
authors.put(ab.getName(),ab.getAuthor());
}
 catch (Exception|Error e) {
ProjectKorra.log.warning(""String_Node_Str"" + ab.getName() + ""String_Node_Str"");
e.printStackTrace();
ab.stop();
abilities.remove(ab.getName());
final AbilityModule skill=ab;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
public void run(){
ability.remove(skill);
}
}
,10);
continue;
}
}
for (Field field : this.getClass().getDeclaredFields()) {
if (List.class.isAssignableFrom(field.getType())) {
try {
Collections.sort((List)field.get(this));
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
}",0.999708992142788
134006,"public Catapult(Player player,Catapult source){
  this.player=player;
  flying=true;
  moving=false;
  location=source.location.clone();
  direction=source.direction.clone();
  distance=source.distance;
  putInstance(player,this);
  EarthMethods.playEarthbendingSound(player.getLocation());
  fly();
}","public Catapult(Player player,Catapult source){
  this.player=player;
  reloadVariables();
  flying=true;
  moving=false;
  location=source.location.clone();
  direction=source.direction.clone();
  distance=source.distance;
  putInstance(player,this);
  EarthMethods.playEarthbendingSound(player.getLocation());
  fly();
}",0.9662921348314608
134007,"public boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    remove();
    return false;
  }
  if (moving)   if (!moveEarth()) {
    moving=false;
  }
  if (flying)   fly();
  if (!flying && !moving)   remove();
  return true;
}","@Override public boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    remove();
    return false;
  }
  if (moving)   if (!moveEarth()) {
    moving=false;
  }
  if (flying)   fly();
  if (!flying && !moving)   remove();
  return true;
}",0.98
134008,"/** 
 * Gets latest plugin version.
 * @return Latest plugin version, or null if it cannot connect
 */
public String getUpdateVersion(){
  if (document != null) {
    Node latestFile=document.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList children=latestFile.getChildNodes();
    String version=children.item(1).getTextContent();
    return version;
  }
  return null;
}","/** 
 * Gets latest plugin version.
 * @return Latest plugin version, or null if it cannot connect
 */
public String getUpdateVersion(){
  if (document != null) {
    Node latestFile=document.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList children=latestFile.getChildNodes();
    String version=children.item(1).getTextContent();
    return version.toUpperCase();
  }
  return null;
}",0.9821428571428572
134009,"/** 
 * Adds the ability to bend the given element to the specified Player.
 * @param sender The CommandSender who issued the command
 * @param target The Player to add the element to
 * @param element The element to add to the Player
 */
private void add(CommandSender sender,Player target,String element){
  element=getElement(element);
  Element e=Element.getType(element);
  BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(target);
  bPlayer.setElement(e);
  ChatColor color=GeneralMethods.getElementColor(e);
  if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') {
    target.sendMessage(color + ""String_Node_Str"" + Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
  }
 else   if (element.charAt(0) == 'e' || element.charAt(0) == 'a') {
    target.sendMessage(color + ""String_Node_Str"" + Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
  }
  if (!(sender instanceof Player) || !((Player)sender).equals(target)) {
    if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') {
      sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color+ ""String_Node_Str""+ Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
    }
 else     if (element.charAt(0) == 'e' || element.charAt(0) == 'a') {
      sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color+ ""String_Node_Str""+ Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
    }
  }
  GeneralMethods.removeUnusableAbilities(sender.getName());
  GeneralMethods.saveElements(bPlayer);
  Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(sender,target,e,Result.CHOOSE));
}","/** 
 * Adds the ability to bend the given element to the specified Player.
 * @param sender The CommandSender who issued the command
 * @param target The Player to add the element to
 * @param element The element to add to the Player
 */
private void add(CommandSender sender,Player target,String element){
  element=getElement(element);
  Element e=Element.getType(element);
  BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(target);
  bPlayer.setElement(e);
  ChatColor color=GeneralMethods.getElementColor(e);
  if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') {
    target.sendMessage(color + ""String_Node_Str"" + Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
  }
 else   if (element.charAt(0) == 'e' || element.charAt(0) == 'a') {
    target.sendMessage(color + ""String_Node_Str"" + Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
  }
  if (!(sender instanceof Player) || !((Player)sender).equals(target)) {
    if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') {
      sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color+ ""String_Node_Str""+ Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
    }
 else     if (element.charAt(0) == 'e' || element.charAt(0) == 'a') {
      sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color+ ""String_Node_Str""+ Character.toString(element.charAt(0)).toUpperCase()+ element.substring(1)+ ""String_Node_Str"");
    }
  }
  GeneralMethods.removeUnusableAbilities(target.getName());
  GeneralMethods.saveElements(bPlayer);
  Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(sender,target,e,Result.CHOOSE));
}",0.9966960352422908
134010,"@Override public void execute(CommandSender sender,List<String> args){
  if (!correctLength(sender,args.size(),1,2)) {
    return;
  }
 else   if (args.size() == 1) {
    if (!hasPermission(sender) || !isPlayer(sender)) {
      return;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(sender.getName());
    if (bPlayer == null) {
      GeneralMethods.createBendingPlayer(((Player)sender).getUniqueId(),sender.getName());
      bPlayer=GeneralMethods.getBendingPlayer(sender.getName());
    }
    if (bPlayer.isPermaRemoved()) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!bPlayer.getElements().isEmpty() && !sender.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String element=args.get(0);
    if (Arrays.asList(Commands.elementaliases).contains(element)) {
      if (!hasPermission(sender,element)) {
        return;
      }
      add(sender,(Player)sender,element);
      return;
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 else   if (args.size() == 2) {
    if (!sender.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Player target=ProjectKorra.plugin.getServer().getPlayer(args.get(1));
    if (!target.isOnline()) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String element=args.get(0);
    if (Arrays.asList(Commands.elementaliases).contains(element)) {
      add(sender,target,element);
      return;
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","@Override public void execute(CommandSender sender,List<String> args){
  if (!correctLength(sender,args.size(),1,2)) {
    return;
  }
 else   if (args.size() == 1) {
    if (!hasPermission(sender) || !isPlayer(sender)) {
      return;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(sender.getName());
    if (bPlayer == null) {
      GeneralMethods.createBendingPlayer(((Player)sender).getUniqueId(),sender.getName());
      bPlayer=GeneralMethods.getBendingPlayer(sender.getName());
    }
    if (bPlayer.isPermaRemoved()) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!bPlayer.getElements().isEmpty() && !sender.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String element=args.get(0);
    if (Arrays.asList(Commands.elementaliases).contains(element)) {
      if (!hasPermission(sender,element)) {
        return;
      }
      add(sender,(Player)sender,element);
      return;
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 else   if (args.size() == 2) {
    if (!sender.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Player target=ProjectKorra.plugin.getServer().getPlayer(args.get(1));
    if (target == null || !target.isOnline()) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String element=args.get(0);
    if (Arrays.asList(Commands.elementaliases).contains(element)) {
      add(sender,target,element);
      return;
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.9947368421052633
134011,"/** 
 * Sets the   {@link BendingPlayer}'s abilities. This method also saves the abilities to the database.
 * @param abilities The abilities to set/save
 */
public void setAbilities(HashMap<Integer,String> abilities){
  this.abilities=abilities;
  for (int i=1; i <= 9; i++) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + i + ""String_Node_Str""+ (abilities.get(i) == null ? null : abilities.get(i))+ ""String_Node_Str""+ uuid+ ""String_Node_Str"");
  }
}","/** 
 * Sets the   {@link BendingPlayer}'s abilities. This method also saves the abilities to the database.
 * @param abilities The abilities to set/save
 */
public void setAbilities(HashMap<Integer,String> abilities){
  this.abilities=abilities;
  for (int i=1; i <= 9; i++) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + i + ""String_Node_Str""+ abilities.get(i)+ ""String_Node_Str""+ uuid+ ""String_Node_Str"");
  }
}",0.9272727272727272
134012,"private static void createBendingPlayerAsynchronously(final UUID uuid,final String player){
  ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str"");
  try {
    if (!rs2.next()) {
      new BendingPlayer(uuid,player,new ArrayList<Element>(),new HashMap<Integer,String>(),false);
      DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ player+ ""String_Node_Str"");
      ProjectKorra.log.info(""String_Node_Str"" + player);
    }
 else {
      String player2=rs2.getString(""String_Node_Str"");
      if (!player.equalsIgnoreCase(player2)) {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + player + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str"");
        ProjectKorra.log.info(""String_Node_Str"" + player);
      }
      String element=rs2.getString(""String_Node_Str"");
      String permaremoved=rs2.getString(""String_Node_Str"");
      boolean p=false;
      final ArrayList<Element> elements=new ArrayList<Element>();
      if (element != null) {
        if (element.contains(""String_Node_Str""))         elements.add(Element.Air);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Water);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Earth);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Fire);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Chi);
      }
      final HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      for (int i=1; i <= 9; i++) {
        String slot=rs2.getString(""String_Node_Str"" + i);
        if (slot != null) {
          abilities.put(i,slot);
        }
      }
      p=(permaremoved != null && (permaremoved.equals(""String_Node_Str"")));
      final boolean boolean_p=p;
      new BukkitRunnable(){
        @Override public void run(){
          new BendingPlayer(uuid,player,elements,abilities,boolean_p);
        }
      }
.runTask(ProjectKorra.plugin);
    }
  }
 catch (  SQLException ex) {
    ex.printStackTrace();
  }
}","private static void createBendingPlayerAsynchronously(final UUID uuid,final String player){
  ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str"");
  try {
    if (!rs2.next()) {
      new BendingPlayer(uuid,player,new ArrayList<Element>(),new HashMap<Integer,String>(),false);
      DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ player+ ""String_Node_Str"");
      ProjectKorra.log.info(""String_Node_Str"" + player);
    }
 else {
      String player2=rs2.getString(""String_Node_Str"");
      if (!player.equalsIgnoreCase(player2)) {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + player + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str"");
        ProjectKorra.log.info(""String_Node_Str"" + player);
      }
      String element=rs2.getString(""String_Node_Str"");
      String permaremoved=rs2.getString(""String_Node_Str"");
      boolean p=false;
      final ArrayList<Element> elements=new ArrayList<Element>();
      if (element != null) {
        if (element.contains(""String_Node_Str""))         elements.add(Element.Air);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Water);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Earth);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Fire);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Chi);
      }
      final HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      for (int i=1; i <= 9; i++) {
        String slot=rs2.getString(""String_Node_Str"" + i);
        if (slot != null && !slot.equalsIgnoreCase(""String_Node_Str"")) {
          abilities.put(i,slot);
        }
      }
      p=(permaremoved != null && (permaremoved.equals(""String_Node_Str"")));
      final boolean boolean_p=p;
      new BukkitRunnable(){
        @Override public void run(){
          new BendingPlayer(uuid,player,elements,abilities,boolean_p);
        }
      }
.runTask(ProjectKorra.plugin);
    }
  }
 catch (  SQLException ex) {
    ex.printStackTrace();
  }
}",0.9893187752195584
134013,"public static void reloadPlugin(){
  ProjectKorra.log.info(""String_Node_Str"");
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  if (DBConnection.isOpen) {
    DBConnection.sql.close();
  }
  GeneralMethods.stopBending();
  ConfigManager.defaultConfig.reload();
  ConfigManager.deathMsgConfig.reload();
  BendingManager.getInstance().reloadVariables();
  new AbilityModuleManager(plugin);
  new ComboManager();
  new MultiAbilityModuleManager();
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (!DBConnection.isOpen()) {
    ProjectKorra.log.severe(""String_Node_Str"");
    stopPlugin();
  }
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  plugin.updater.checkUpdate();
  ProjectKorra.log.info(""String_Node_Str"");
}","public static void reloadPlugin(){
  ProjectKorra.log.info(""String_Node_Str"");
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  if (DBConnection.isOpen) {
    DBConnection.sql.close();
  }
  GeneralMethods.stopBending();
  ConfigManager.defaultConfig.reload();
  ConfigManager.deathMsgConfig.reload();
  BendingManager.getInstance().reloadVariables();
  new AbilityModuleManager(plugin);
  new ComboManager();
  new MultiAbilityModuleManager();
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (!DBConnection.isOpen()) {
    ProjectKorra.log.severe(""String_Node_Str"");
    stopPlugin();
  }
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
  }
  plugin.updater.checkUpdate();
  ProjectKorra.log.info(""String_Node_Str"");
}",0.9867109634551496
134014,"@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    File logFolder=new File(getDataFolder(),""String_Node_Str"");
    if (!logFolder.exists()) {
      logFolder.mkdirs();
    }
    handler=new PKLogHandler(logFolder + File.separator + ""String_Node_Str"");
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  abManager=new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}","@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    File logFolder=new File(getDataFolder(),""String_Node_Str"");
    if (!logFolder.exists()) {
      logFolder.mkdirs();
    }
    handler=new PKLogHandler(logFolder + File.separator + ""String_Node_Str"");
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  abManager=new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}",0.9928251121076234
134015,"@Override public void execute(CommandSender sender,List<String> args){
  if (!hasPermission(sender)) {
    return;
  }
 else   if (args.size() > 0) {
    help(sender,false);
    return;
  }
  if (ProjectKorra.plugin.updater.updateAvailable()) {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ ProjectKorra.plugin.updater.getCurrentVersion());
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ProjectKorra.plugin.updater.getCurrentVersion());
  }
 else {
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  }
}","@Override public void execute(CommandSender sender,List<String> args){
  if (!hasPermission(sender)) {
    return;
  }
 else   if (args.size() > 0) {
    help(sender,false);
    return;
  }
  if (ProjectKorra.plugin.updater.updateAvailable()) {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ ProjectKorra.plugin.updater.getCurrentVersion());
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ProjectKorra.plugin.updater.getUpdateVersion());
  }
 else {
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  }
}",0.991304347826087
134016,"public void run(){
  int i=0;
  if (i >= 10) {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
    return;
  }
  while (i < 10) {
    if (bPlayers.isEmpty()) {
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
      ProjectKorra.plugin.getConfig().set(""String_Node_Str"",false);
      ProjectKorra.plugin.saveConfig();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
      }
      return;
    }
    StringBuilder elements=new StringBuilder();
    BendingPlayer bPlayer=bPlayers.pop();
    if (bPlayer.hasElement(Element.Air))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Water))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Earth))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Fire))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Chi))     elements.append(""String_Node_Str"");
    HashMap<Integer,String> abilities=bPlayer.getAbilities();
    ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str"");
    try {
      if (rs2.next()) {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayer.getUUIDString());
        DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.getUUIDString());
        DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.getUUIDString());
        for (int slot=1; slot < 10; slot++) {
          DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
        }
      }
 else {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
        for (int slot=1; slot < 10; slot++) {
          DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
        }
      }
    }
 catch (    SQLException ex) {
      ex.printStackTrace();
    }
    i++;
    if (debugEnabled) {
      System.out.println(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
    }
  }
}","public void run(){
  int i=0;
  if (i >= 10) {
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
    return;
  }
  while (i < 10) {
    if (bPlayers.isEmpty()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
      ProjectKorra.plugin.getConfig().set(""String_Node_Str"",false);
      ProjectKorra.plugin.saveConfig();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
      }
      return;
    }
    StringBuilder elements=new StringBuilder();
    BendingPlayer bPlayer=bPlayers.pop();
    if (bPlayer.hasElement(Element.Air))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Water))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Earth))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Fire))     elements.append(""String_Node_Str"");
    if (bPlayer.hasElement(Element.Chi))     elements.append(""String_Node_Str"");
    HashMap<Integer,String> abilities=bPlayer.getAbilities();
    ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str"");
    try {
      if (rs2.next()) {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayer.getUUIDString());
        DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.getUUIDString());
        DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.getUUIDString());
        for (int slot=1; slot < 10; slot++) {
          DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
        }
      }
 else {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
        for (int slot=1; slot < 10; slot++) {
          DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
        }
      }
    }
 catch (    SQLException ex) {
      ex.printStackTrace();
    }
    i++;
    if (debugEnabled) {
      System.out.println(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
    }
  }
}",0.998077662437524
134017,"@Override public void execute(CommandSender sender,List<String> args){
  if (!hasPermission(sender) || !correctLength(sender,args.size(),0,0)) {
    return;
  }
 else   if (!GeneralMethods.isImportEnabled()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
  FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
  final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
  for (  String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    if (string.equalsIgnoreCase(""String_Node_Str""))     continue;
    String playername=string;
    UUID uuid=ProjectKorra.plugin.getServer().getOfflinePlayer(playername).getUniqueId();
    ArrayList<Element> element=new ArrayList<Element>();
    List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
    HashMap<Integer,String> abilities=new HashMap<Integer,String>();
    List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
    boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
    int slot=1;
    for (    int i : oa) {
      if (StockAbility.getAbility(i) != null) {
        abilities.put(slot,StockAbility.getAbility(i).toString());
        slot++;
      }
 else {
        abilities.put(slot,null);
        slot++;
      }
    }
    for (    int i : oe) {
      if (Element.getType(i) != null) {
        element.add(Element.getType(i));
      }
    }
    BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
    bPlayers.add(bPlayer);
  }
  final int total=bPlayers.size();
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  if (debugEnabled) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(ProjectKorra.plugin,new Runnable(){
    public void run(){
      int i=0;
      if (i >= 10) {
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
        return;
      }
      while (i < 10) {
        if (bPlayers.isEmpty()) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
          ProjectKorra.plugin.getConfig().set(""String_Node_Str"",false);
          ProjectKorra.plugin.saveConfig();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
          }
          return;
        }
        StringBuilder elements=new StringBuilder();
        BendingPlayer bPlayer=bPlayers.pop();
        if (bPlayer.hasElement(Element.Air))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Water))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Earth))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Fire))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Chi))         elements.append(""String_Node_Str"");
        HashMap<Integer,String> abilities=bPlayer.getAbilities();
        ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str"");
        try {
          if (rs2.next()) {
            DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayer.getUUIDString());
            DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.getUUIDString());
            DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.getUUIDString());
            for (int slot=1; slot < 10; slot++) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
            }
          }
 else {
            DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
            for (int slot=1; slot < 10; slot++) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
            }
          }
        }
 catch (        SQLException ex) {
          ex.printStackTrace();
        }
        i++;
        if (debugEnabled) {
          System.out.println(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
        }
      }
    }
  }
,0,40);
}","@Override public void execute(CommandSender sender,List<String> args){
  if (!hasPermission(sender) || !correctLength(sender,args.size(),0,0)) {
    return;
  }
 else   if (!GeneralMethods.isImportEnabled()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
  FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
  final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
  for (  String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    if (string.equalsIgnoreCase(""String_Node_Str""))     continue;
    String playername=string;
    UUID uuid=ProjectKorra.plugin.getServer().getOfflinePlayer(playername).getUniqueId();
    ArrayList<Element> element=new ArrayList<Element>();
    List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
    HashMap<Integer,String> abilities=new HashMap<Integer,String>();
    List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
    boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
    int slot=1;
    for (    int i : oa) {
      if (StockAbility.getAbility(i) != null) {
        abilities.put(slot,StockAbility.getAbility(i).toString());
        slot++;
      }
 else {
        abilities.put(slot,null);
        slot++;
      }
    }
    for (    int i : oe) {
      if (Element.getType(i) != null) {
        element.add(Element.getType(i));
      }
    }
    BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
    bPlayers.add(bPlayer);
  }
  final CommandSender s=sender;
  final int total=bPlayers.size();
  sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  if (debugEnabled) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(ProjectKorra.plugin,new Runnable(){
    public void run(){
      int i=0;
      if (i >= 10) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
        return;
      }
      while (i < 10) {
        if (bPlayers.isEmpty()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
          ProjectKorra.plugin.getConfig().set(""String_Node_Str"",false);
          ProjectKorra.plugin.saveConfig();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
          }
          return;
        }
        StringBuilder elements=new StringBuilder();
        BendingPlayer bPlayer=bPlayers.pop();
        if (bPlayer.hasElement(Element.Air))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Water))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Earth))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Fire))         elements.append(""String_Node_Str"");
        if (bPlayer.hasElement(Element.Chi))         elements.append(""String_Node_Str"");
        HashMap<Integer,String> abilities=bPlayer.getAbilities();
        ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str"");
        try {
          if (rs2.next()) {
            DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayer.getUUIDString());
            DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.getUUIDString());
            DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.getUUIDString());
            for (int slot=1; slot < 10; slot++) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
            }
          }
 else {
            DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.getUUIDString() + ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
            for (int slot=1; slot < 10; slot++) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getName()+ ""String_Node_Str"");
            }
          }
        }
 catch (        SQLException ex) {
          ex.printStackTrace();
        }
        i++;
        if (debugEnabled) {
          System.out.println(""String_Node_Str"" + bPlayer.getName() + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
        }
      }
    }
  }
,0,40);
}",0.9956984842277756
134018,"/** 
 * Checks if the CommandSender is an instance of a Player. If not, it tells them they must be a Player to use the command.
 * @param sender The CommandSender to check
 * @return True if sender instanceof Player, false otherwise
 */
protected boolean isPlayer(CommandSender sender){
  if (sender instanceof Player)   return true;
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}","/** 
 * Checks if the CommandSender is an instance of a Player. If not, it tells them they must be a Player to use the command.
 * @param sender The CommandSender to check
 * @return True if sender instanceof Player, false otherwise
 */
protected boolean isPlayer(CommandSender sender){
  if (sender instanceof Player) {
    return true;
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}",0.9906542056074766
134019,"public void help(CommandSender sender,boolean description){
  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ properUse);
  if (description)   sender.sendMessage(ChatColor.YELLOW + this.description);
}","public void help(CommandSender sender,boolean description){
  sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ properUse);
  if (description) {
    sender.sendMessage(ChatColor.YELLOW + this.description);
  }
}",0.9829059829059827
134020,"/** 
 * Checks if the   {@link CommandSender} has permission to execute thecommand. The permission is in the format 'bending.command. {@link PKCommand#name name}.extra'. If not, they are told so.
 * @param sender The CommandSender to check
 * @param extra The additional node to check
 * @return True if they have permission, false otherwise
 */
protected boolean hasPermission(CommandSender sender,String extra){
  if (sender.hasPermission(""String_Node_Str"" + name + ""String_Node_Str""+ extra))   return true;
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}","/** 
 * Checks if the   {@link CommandSender} has permission to execute thecommand. The permission is in the format 'bending.command. {@link PKCommand#name name}.extra'. If not, they are told so.
 * @param sender The CommandSender to check
 * @param extra The additional node to check
 * @return True if they have permission, false otherwise
 */
protected boolean hasPermission(CommandSender sender,String extra){
  if (sender.hasPermission(""String_Node_Str"" + name + ""String_Node_Str""+ extra)) {
    return true;
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}",0.9933774834437086
134021,"/** 
 * Checks if the argument length is within certain parameters, and if not, informs the CommandSender of how to correctly use the command.
 * @param sender The CommandSender who issued the command
 * @param size The length of the arguments list
 * @param min The minimum acceptable number of arguments
 * @param max The maximum acceptable number of arguments
 * @return True if min < size < max, false otherwise
 */
protected boolean correctLength(CommandSender sender,int size,int min,int max){
  if (size < min || size > max) {
    help(sender,false);
    return false;
  }
 else   return true;
}","/** 
 * Checks if the argument length is within certain parameters, and if not, informs the CommandSender of how to correctly use the command.
 * @param sender The CommandSender who issued the command
 * @param size The length of the arguments list
 * @param min The minimum acceptable number of arguments
 * @param max The maximum acceptable number of arguments
 * @return True if min < size < max, false otherwise
 */
protected boolean correctLength(CommandSender sender,int size,int min,int max){
  if (size < min || size > max) {
    help(sender,false);
    return false;
  }
 else {
    return true;
  }
}",0.9933993399339934
134022,"/** 
 * Sends information on the given player to the CommandSender.
 * @param sender The CommandSender to display the information to
 * @param playerName The Player to look up
 */
private void whoPlayer(CommandSender sender,String playerName){
  Player player=Bukkit.getPlayer(playerName);
  if (player != null) {
    sender.sendMessage(playerName + ""String_Node_Str"");
    if (GeneralMethods.isBender(playerName,Element.Air)) {
      sender.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
      if (AirMethods.canAirFlight(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
      }
      if (AirMethods.canUseSpiritualProjection(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Water)) {
      sender.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
      if (WaterMethods.canPlantbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
      }
      if (WaterMethods.canBloodbend(player)) {
        if (WaterMethods.canBloodbendAtAnytime(player)) {
          sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
 else {
          sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (WaterMethods.canIcebend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
      }
      if (WaterMethods.canWaterHeal(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Earth)) {
      sender.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
      if (EarthMethods.canMetalbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
      }
      if (EarthMethods.canLavabend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
      }
      if (EarthMethods.canSandbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Fire)) {
      sender.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
      if (FireMethods.canCombustionbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
      }
      if (FireMethods.canLightningbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Chi)) {
      sender.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(playerName);
    UUID uuid=player.getUniqueId();
    if (bPlayer != null) {
      sender.sendMessage(""String_Node_Str"");
      for (int i=1; i <= 9; i++) {
        String ability=bPlayer.getAbilities().get(i);
        if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
          continue;
        }
 else {
          sender.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
        }
      }
    }
    if (GeneralMethods.hasRPG()) {
      if (RPGMethods.isCurrentAvatar(player.getUniqueId())) {
        sender.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
      }
 else       if (RPGMethods.hasBeenAvatar(player.getUniqueId())) {
        sender.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
      }
    }
    if (staff.containsKey(uuid.toString())) {
      sender.sendMessage(staff.get(uuid.toString()));
    }
  }
 else {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    new BukkitRunnable(){
      @Override public void run(){
        ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + playerName + ""String_Node_Str"");
        try {
          final List<String> messages=new ArrayList<String>();
          if (rs2.next()) {
            UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
            String element=rs2.getString(""String_Node_Str"");
            messages.add(playerName + ""String_Node_Str"");
            if (element == null) {
              messages.add(""String_Node_Str"");
            }
 else {
              if (element.contains(""String_Node_Str""))               messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
            }
            if (GeneralMethods.hasRPG()) {
              if (RPGMethods.isCurrentAvatar(uuid)) {
                messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
              }
 else               if (RPGMethods.hasBeenAvatar(uuid)) {
                messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
              }
            }
            if (staff.containsKey(uuid)) {
              messages.add(staff.get(uuid));
            }
          }
 else {
            messages.add(ChatColor.RED + ""String_Node_Str"");
          }
          new BukkitRunnable(){
            @Override public void run(){
              for (              String message : messages) {
                sender.sendMessage(message);
              }
            }
          }
.runTask(ProjectKorra.plugin);
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
.runTaskAsynchronously(ProjectKorra.plugin);
  }
}","/** 
 * Sends information on the given player to the CommandSender.
 * @param sender The CommandSender to display the information to
 * @param playerName The Player to look up
 */
private void whoPlayer(final CommandSender sender,final String playerName){
  Player player=Bukkit.getPlayer(playerName);
  if (player != null) {
    sender.sendMessage(playerName + ""String_Node_Str"");
    if (GeneralMethods.isBender(playerName,Element.Air)) {
      sender.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
      if (AirMethods.canAirFlight(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
      }
      if (AirMethods.canUseSpiritualProjection(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Water)) {
      sender.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
      if (WaterMethods.canPlantbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
      }
      if (WaterMethods.canBloodbend(player)) {
        if (WaterMethods.canBloodbendAtAnytime(player)) {
          sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
 else {
          sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (WaterMethods.canIcebend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
      }
      if (WaterMethods.canWaterHeal(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Earth)) {
      sender.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
      if (EarthMethods.canMetalbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
      }
      if (EarthMethods.canLavabend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
      }
      if (EarthMethods.canSandbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Fire)) {
      sender.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
      if (FireMethods.canCombustionbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
      }
      if (FireMethods.canLightningbend(player)) {
        sender.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
      }
    }
    if (GeneralMethods.isBender(playerName,Element.Chi)) {
      sender.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(playerName);
    UUID uuid=player.getUniqueId();
    if (bPlayer != null) {
      sender.sendMessage(""String_Node_Str"");
      for (int i=1; i <= 9; i++) {
        String ability=bPlayer.getAbilities().get(i);
        if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
          continue;
        }
 else {
          sender.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
        }
      }
    }
    if (GeneralMethods.hasRPG()) {
      if (RPGMethods.isCurrentAvatar(player.getUniqueId())) {
        sender.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
      }
 else       if (RPGMethods.hasBeenAvatar(player.getUniqueId())) {
        sender.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
      }
    }
    if (staff.containsKey(uuid.toString())) {
      sender.sendMessage(staff.get(uuid.toString()));
    }
  }
 else {
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    new BukkitRunnable(){
      @Override public void run(){
        ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + playerName + ""String_Node_Str"");
        try {
          final List<String> messages=new ArrayList<String>();
          if (rs2.next()) {
            UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
            String element=rs2.getString(""String_Node_Str"");
            messages.add(playerName + ""String_Node_Str"");
            if (element == null) {
              messages.add(""String_Node_Str"");
            }
 else {
              if (element.contains(""String_Node_Str""))               messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
              if (element.contains(""String_Node_Str""))               messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
            }
            if (GeneralMethods.hasRPG()) {
              if (RPGMethods.isCurrentAvatar(uuid)) {
                messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
              }
 else               if (RPGMethods.hasBeenAvatar(uuid)) {
                messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
              }
            }
            if (staff.containsKey(uuid)) {
              messages.add(staff.get(uuid));
            }
          }
 else {
            messages.add(ChatColor.RED + ""String_Node_Str"");
          }
          new BukkitRunnable(){
            @Override public void run(){
              for (              String message : messages) {
                sender.sendMessage(message);
              }
            }
          }
.runTask(ProjectKorra.plugin);
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
.runTaskAsynchronously(ProjectKorra.plugin);
  }
}",0.9990303813833226
134023,"/** 
 * Saves the Preset to the database.
 */
public void save(){
  try {
    PreparedStatement ps=DBConnection.sql.getConnection().prepareStatement(loadNameQuery);
    ps.setString(1,uuid.toString());
    ps.setString(2,name);
    ResultSet rs=ps.executeQuery();
    if (!rs.next()) {
      ps=DBConnection.sql.getConnection().prepareStatement(insertQuery);
      ps.setString(1,uuid.toString());
      ps.setString(2,name);
      ps.execute();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  for (  Integer i : abilities.keySet()) {
    new BukkitRunnable(){
      PreparedStatement ps;
      @Override public void run(){
        try {
          ps=DBConnection.sql.getConnection().prepareStatement(updateQuery1 + i + updateQuery2);
          ps.setString(1,abilities.get(i));
          ps.setString(2,uuid.toString());
          ps.setString(3,name);
          ps.execute();
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
.runTaskAsynchronously(ProjectKorra.plugin);
  }
}","/** 
 * Saves the Preset to the database.
 */
public void save(){
  try {
    PreparedStatement ps=DBConnection.sql.getConnection().prepareStatement(loadNameQuery);
    ps.setString(1,uuid.toString());
    ps.setString(2,name);
    ResultSet rs=ps.executeQuery();
    if (!rs.next()) {
      ps=DBConnection.sql.getConnection().prepareStatement(insertQuery);
      ps.setString(1,uuid.toString());
      ps.setString(2,name);
      ps.execute();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  for (  final Integer i : abilities.keySet()) {
    new BukkitRunnable(){
      PreparedStatement ps;
      @Override public void run(){
        try {
          ps=DBConnection.sql.getConnection().prepareStatement(updateQuery1 + i + updateQuery2);
          ps.setString(1,abilities.get(i));
          ps.setString(2,uuid.toString());
          ps.setString(3,name);
          ps.execute();
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
.runTaskAsynchronously(ProjectKorra.plugin);
  }
}",0.9971455756422456
134024,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.get();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.save();
break;
case DEFAULT:
config=defaultConfig.get();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.save();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.get();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.save();
break;
case DEFAULT:
config=defaultConfig.get();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.save();
break;
}
}",0.9993159728298044
134025,"/** 
 * Logs and update message in console.  Displays different messages dependent on   {@link #updateAvailable()}
 */
public void checkUpdate(){
  if (getUpdateVersion() == null)   return;
 else   if (updateAvailable()) {
    plugin.getLogger().info(""String_Node_Str"");
    plugin.getLogger().info(""String_Node_Str"" + getCurrentVersion());
    plugin.getLogger().info(""String_Node_Str"" + getUpdateVersion());
  }
 else {
    plugin.getLogger().info(""String_Node_Str"" + pluginName);
  }
}","/** 
 * Logs and update message in console.  Displays different messages dependent on   {@link #updateAvailable()}
 */
public void checkUpdate(){
  if (getUpdateVersion() == null) {
    return;
  }
 else   if (updateAvailable()) {
    plugin.getLogger().info(""String_Node_Str"");
    plugin.getLogger().info(""String_Node_Str"" + getCurrentVersion());
    plugin.getLogger().info(""String_Node_Str"" + getUpdateVersion());
  }
 else {
    plugin.getLogger().info(""String_Node_Str"" + pluginName);
  }
}",0.991869918699187
134026,"/** 
 * Checks to see if an update is available.
 * @return true If there is an update
 */
public boolean updateAvailable(){
  String updateVersion=getUpdateVersion();
  if (updateVersion == null || currentVersion.equalsIgnoreCase(getUpdateVersion())) {
    return false;
  }
  return true;
}","/** 
 * Checks to see if an update is available.
 * @return true If there is an update
 */
public boolean updateAvailable(){
  String updateVersion=getUpdateVersion();
  if (updateVersion == null) {
    return false;
  }
  int currentNumber=Integer.parseInt(currentVersion.substring(0,5).replaceAll(""String_Node_Str"",""String_Node_Str""));
  int updateNumber=Integer.parseInt(updateVersion.substring(0,5).replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (updateNumber == currentNumber) {
    if (currentVersion.contains(""String_Node_Str"") && updateVersion.contains(""String_Node_Str"")) {
      int currentBeta=Integer.parseInt(currentVersion.substring(currentVersion.lastIndexOf(""String_Node_Str"") + 1));
      int updateBeta=Integer.parseInt(updateVersion.substring(updateVersion.lastIndexOf(""String_Node_Str"") + 1));
      if (currentBeta == updateBeta || currentBeta > updateBeta) {
        return false;
      }
    }
 else     if (!currentVersion.contains(""String_Node_Str"") && updateVersion.contains(""String_Node_Str"")) {
      return false;
    }
  }
 else   if (currentVersion.equalsIgnoreCase(updateVersion) || currentNumber > updateNumber) {
    return false;
  }
  return true;
}",0.3676767676767676
134027,"/** 
 * Adds an   {@link AbilityInformation} to the player's {@link ComboManager#recentlyUsedAbilities recentlyUsedAbilities}.
 * @param player The player to add the AbilityInformation for
 * @param info The AbilityInformation to add
 */
public static void addRecentAbility(Player player,AbilityInformation info){
  ArrayList<AbilityInformation> list;
  String name=player.getName();
  if (recentlyUsedAbilities.containsKey(name))   list=recentlyUsedAbilities.get(name);
 else   list=new ArrayList<AbilityInformation>();
  list.add(info);
  recentlyUsedAbilities.put(name,list);
}","/** 
 * Adds an   {@link AbilityInformation} to the player's{@link ComboManager#recentlyUsedAbilities recentlyUsedAbilities}.
 * @param player The player to add the AbilityInformation for
 * @param info The AbilityInformation to add
 */
public static void addRecentAbility(Player player,AbilityInformation info){
  ArrayList<AbilityInformation> list;
  String name=player.getName();
  if (recentlyUsedAbilities.containsKey(name))   list=recentlyUsedAbilities.get(name);
 else   list=new ArrayList<AbilityInformation>();
  list.add(info);
  recentlyUsedAbilities.put(name,list);
}",0.999137187230371
134028,"/** 
 * Gets the player's most recently used abilities, up to a maximum of 10.
 * @param player The player to get recent abilities for
 * @param amount The amount of recent abilities to get, starting from most recent and getting older
 * @return An ArrayList<{@link AbilityInformation}> of the player's recently used abilities
 */
public static ArrayList<AbilityInformation> getRecentlyUsedAbilities(Player player,int amount){
  String name=player.getName();
  if (!recentlyUsedAbilities.containsKey(name))   return new ArrayList<AbilityInformation>();
  ArrayList<AbilityInformation> list=recentlyUsedAbilities.get(name);
  if (list.size() < amount)   return new ArrayList<AbilityInformation>(list);
  ArrayList<AbilityInformation> tempList=new ArrayList<AbilityInformation>();
  for (int i=0; i < amount; i++)   tempList.add(0,list.get(list.size() - 1 - i));
  return tempList;
}","/** 
 * Gets the player's most recently used abilities, up to a maximum of 10.
 * @param player The player to get recent abilities for
 * @param amount The amount of recent abilities to get, starting from mostrecent and getting older
 * @return An ArrayList<{@link AbilityInformation}> of the player's recently used abilities
 */
public static ArrayList<AbilityInformation> getRecentlyUsedAbilities(Player player,int amount){
  String name=player.getName();
  if (!recentlyUsedAbilities.containsKey(name))   return new ArrayList<AbilityInformation>();
  ArrayList<AbilityInformation> list=recentlyUsedAbilities.get(name);
  if (list.size() < amount)   return new ArrayList<AbilityInformation>(list);
  ArrayList<AbilityInformation> tempList=new ArrayList<AbilityInformation>();
  for (int i=0; i < amount; i++)   tempList.add(0,list.get(list.size() - 1 - i));
  return tempList;
}",0.9994321408290744
134029,"public static void cleanupOldCombos(){
  Enumeration<String> keys=recentlyUsedAbilities.keys();
  while (keys.hasMoreElements()) {
    String name=keys.nextElement();
    ArrayList<AbilityInformation> usedAbilities=recentlyUsedAbilities.get(name);
    ArrayList<AbilityInformation> stillValidAbilities=new ArrayList<AbilityInformation>();
    recentlyUsedAbilities.remove(name);
    for (    AbilityInformation info : usedAbilities) {
      if (System.currentTimeMillis() - info.getTime() <= CLEANUP_DELAY) {
        stillValidAbilities.add(info);
      }
    }
    if (stillValidAbilities.size() > 0)     recentlyUsedAbilities.put(name,stillValidAbilities);
  }
}","public static void cleanupOldCombos(){
  Enumeration<String> keys=recentlyUsedAbilities.keys();
  while (keys.hasMoreElements()) {
    String name=keys.nextElement();
    ArrayList<AbilityInformation> usedAbilities=recentlyUsedAbilities.get(name);
    usedAbilities.clear();
  }
}",0.5444915254237288
134030,"public static void startCleanupTask(){
  new BukkitRunnable(){
    public void run(){
      cleanupOldCombos();
    }
  }
.runTaskTimer(ProjectKorra.plugin,0,CLEANUP_DELAY / 1000 * 20);
}","public static void startCleanupTask(){
  new BukkitRunnable(){
    public void run(){
      cleanupOldCombos();
    }
  }
.runTaskTimer(ProjectKorra.plugin,0,CLEANUP_DELAY);
}",0.9668508287292816
134031,"/** 
 * Checks if a Player's   {@link ComboManager#recentlyUsedAbilities recentlyUsedAbilities}contains a valid set of moves to perform any combos. If it does, it returns the valid combo.
 * @param player The player for whom to check if a valid combo has been performed
 * @return The ComboAbility of the combo that has been performed, or null if no valid combo was found
 */
public static ComboAbility checkForValidCombo(Player player){
  ArrayList<AbilityInformation> playerCombo=getRecentlyUsedAbilities(player,8);
  for (  ComboAbility customAbility : comboAbilityList) {
    ArrayList<AbilityInformation> abilityCombo=customAbility.getAbilities();
    int size=abilityCombo.size();
    if (playerCombo.size() < size)     continue;
    boolean isValid=true;
    for (int i=1; i <= size; i++) {
      if (!playerCombo.get(playerCombo.size() - i).equalsWithoutTime(abilityCombo.get(abilityCombo.size() - i))) {
        isValid=false;
        break;
      }
    }
    if (isValid)     return customAbility;
  }
  return null;
}","/** 
 * Checks if a Player's   {@link ComboManager#recentlyUsedAbilities recentlyUsedAbilities} contains a valid set of moves to perform anycombos. If it does, it returns the valid combo.
 * @param player The player for whom to check if a valid combo has beenperformed
 * @return The ComboAbility of the combo that has been performed, or null ifno valid combo was found
 */
public static ComboAbility checkForValidCombo(Player player){
  ArrayList<AbilityInformation> playerCombo=getRecentlyUsedAbilities(player,8);
  for (  ComboAbility customAbility : comboAbilityList) {
    ArrayList<AbilityInformation> abilityCombo=customAbility.getAbilities();
    int size=abilityCombo.size();
    if (playerCombo.size() < size)     continue;
    boolean isValid=true;
    for (int i=1; i <= size; i++) {
      if (!playerCombo.get(playerCombo.size() - i).equalsWithoutTime(abilityCombo.get(abilityCombo.size() - i))) {
        isValid=false;
        break;
      }
    }
    if (isValid)     return customAbility;
  }
  return null;
}",0.9980525803310614
134032,"/** 
 * Gets latest plugin version.
 * @return Latest plugin version
 */
public String getUpdateVersion(){
  Node latestFile=document.getElementsByTagName(""String_Node_Str"").item(0);
  NodeList children=latestFile.getChildNodes();
  String version=children.item(1).getTextContent();
  return version;
}","/** 
 * Gets latest plugin version.
 * @return Latest plugin version, or null if it cannot connect
 */
public String getUpdateVersion(){
  if (document != null) {
    Node latestFile=document.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList children=latestFile.getChildNodes();
    String version=children.item(1).getTextContent();
    return version;
  }
  return null;
}",0.8791848617176128
134033,"/** 
 * Creates a new instance of Updater. This constructor should only be called inside of   {@code plugin.onEnable()} or called after the plugin is loaded.<br><br> This constructor should NEVER be called to initiate a field. If called to initiate a field, Updater will throw NullPointerExceptions
 * @param plugin Plugin to check updates for
 * @param URL RSS feed URL link to check for updates on.
 */
public Updater(Plugin plugin,String URL){
  this.plugin=plugin;
  try {
    url=new URL(URL);
    urlc=url.openConnection();
    urlc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(urlc.getInputStream());
  }
 catch (  IOException|SAXException|ParserConfigurationException e) {
    e.printStackTrace();
  }
  this.currentVersion=plugin.getDescription().getVersion();
  this.pluginName=plugin.getDescription().getName();
}","/** 
 * Creates a new instance of Updater. This constructor should only be called inside of   {@code plugin.onEnable()} or called after the plugin is loaded.<br><br> This constructor should NEVER be called to initiate a field. If called to initiate a field, Updater will throw NullPointerExceptions
 * @param plugin Plugin to check updates for
 * @param URL RSS feed URL link to check for updates on.
 */
public Updater(Plugin plugin,String URL){
  this.plugin=plugin;
  try {
    url=new URL(URL);
    urlc=url.openConnection();
    urlc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(urlc.getInputStream());
  }
 catch (  UnknownHostException e) {
    plugin.getLogger().info(""String_Node_Str"");
  }
catch (  IOException|SAXException|ParserConfigurationException e) {
    e.printStackTrace();
  }
  this.currentVersion=plugin.getDescription().getVersion();
  this.pluginName=plugin.getDescription().getName();
}",0.9545216936748564
134034,"/** 
 * Logs and update message in console.  Displays different messages dependent on   {@link #updateAvailable()}
 */
public void checkUpdate(){
  if (updateAvailable()) {
    plugin.getLogger().info(""String_Node_Str"");
    plugin.getLogger().info(""String_Node_Str"" + getCurrentVersion());
    plugin.getLogger().info(""String_Node_Str"" + getUpdateVersion());
  }
 else {
    plugin.getLogger().info(""String_Node_Str"" + pluginName);
  }
}","/** 
 * Logs and update message in console.  Displays different messages dependent on   {@link #updateAvailable()}
 */
public void checkUpdate(){
  if (getUpdateVersion() == null)   return;
 else   if (updateAvailable()) {
    plugin.getLogger().info(""String_Node_Str"");
    plugin.getLogger().info(""String_Node_Str"" + getCurrentVersion());
    plugin.getLogger().info(""String_Node_Str"" + getUpdateVersion());
  }
 else {
    plugin.getLogger().info(""String_Node_Str"" + pluginName);
  }
}",0.9460043196544276
134035,"/** 
 * Checks to see if an update is available.
 * @return true If there is an update
 */
public boolean updateAvailable(){
  if (currentVersion.equalsIgnoreCase(getUpdateVersion())) {
    return false;
  }
  return true;
}","/** 
 * Checks to see if an update is available.
 * @return true If there is an update
 */
public boolean updateAvailable(){
  String updateVersion=getUpdateVersion();
  if (updateVersion == null || currentVersion.equalsIgnoreCase(getUpdateVersion())) {
    return false;
  }
  return true;
}",0.8527131782945736
134036,"public static boolean isSolid(Block block){
  return Arrays.asList(nonOpaque).contains(block.getTypeId());
}","public static boolean isSolid(Block block){
  return !Arrays.asList(nonOpaque).contains(block.getTypeId());
}",0.9953917050691244
134037,"@SuppressWarnings(""String_Node_Str"") public boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    remove();
    return false;
  }
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",location)) {
    remove();
    return false;
  }
  speedfactor=speed * (ProjectKorra.time_step / 1000.);
  ticks++;
  if (ticks > maxticks) {
    remove();
    return false;
  }
  Block block=location.getBlock();
  for (  Block testblock : GeneralMethods.getBlocksAroundPoint(location,affectingradius)) {
    if (testblock.getType() == Material.FIRE) {
      testblock.setType(Material.AIR);
      testblock.getWorld().playEffect(testblock.getLocation(),Effect.EXTINGUISH,0);
    }
    Material doorTypes[]={Material.WOODEN_DOOR,Material.SPRUCE_DOOR,Material.BIRCH_DOOR,Material.JUNGLE_DOOR,Material.ACACIA_DOOR,Material.DARK_OAK_DOOR};
    if (Arrays.asList(doorTypes).contains(block.getType())) {
      if (block.getData() >= 8) {
        block=block.getRelative(BlockFace.DOWN);
      }
      if (block.getData() < 4) {
        block.setData((byte)(block.getData() + 4));
        block.getWorld().playSound(block.getLocation(),Sound.DOOR_CLOSE,10,1);
      }
 else {
        block.setData((byte)(block.getData() - 4));
        block.getWorld().playSound(block.getLocation(),Sound.DOOR_OPEN,10,1);
      }
    }
    if ((block.getType() == Material.LEVER) && !affectedlevers.contains(block)) {
      Lever lever=new Lever(Material.LEVER,block.getData());
      lever.setPowered(!lever.isPowered());
      block.setData(lever.getData());
      Block supportBlock=block.getRelative(lever.getAttachedFace());
      if (supportBlock != null && supportBlock.getType() != Material.AIR) {
        BlockState initialSupportState=supportBlock.getState();
        BlockState supportState=supportBlock.getState();
        supportState.setType(Material.AIR);
        supportState.update(true,false);
        initialSupportState.update(true);
      }
      affectedlevers.add(block);
    }
 else     if ((block.getType() == Material.STONE_BUTTON) && !affectedlevers.contains(block)) {
      final Button button=new Button(Material.STONE_BUTTON,block.getData());
      button.setPowered(!button.isPowered());
      block.setData(button.getData());
      Block supportBlock=block.getRelative(button.getAttachedFace());
      if (supportBlock != null && supportBlock.getType() != Material.AIR) {
        BlockState initialSupportState=supportBlock.getState();
        BlockState supportState=supportBlock.getState();
        supportState.setType(Material.AIR);
        supportState.update(true,false);
        initialSupportState.update(true);
      }
      final Block btBlock=block;
      new BukkitRunnable(){
        public void run(){
          button.setPowered(!button.isPowered());
          btBlock.setData(button.getData());
          Block supportBlock=btBlock.getRelative(button.getAttachedFace());
          if (supportBlock != null && supportBlock.getType() != Material.AIR) {
            BlockState initialSupportState=supportBlock.getState();
            BlockState supportState=supportBlock.getState();
            supportState.setType(Material.AIR);
            supportState.update(true,false);
            initialSupportState.update(true);
          }
        }
      }
.runTaskLater(ProjectKorra.plugin,10);
      affectedlevers.add(block);
    }
 else     if ((block.getType() == Material.WOOD_BUTTON) && !affectedlevers.contains(block)) {
      final Button button=new Button(Material.WOOD_BUTTON,block.getData());
      button.setPowered(!button.isPowered());
      block.setData(button.getData());
      Block supportBlock=block.getRelative(button.getAttachedFace());
      if (supportBlock != null && supportBlock.getType() != Material.AIR) {
        BlockState initialSupportState=supportBlock.getState();
        BlockState supportState=supportBlock.getState();
        supportState.setType(Material.AIR);
        supportState.update(true,false);
        initialSupportState.update(true);
      }
      final Block btBlock=block;
      new BukkitRunnable(){
        public void run(){
          button.setPowered(!button.isPowered());
          btBlock.setData(button.getData());
          Block supportBlock=btBlock.getRelative(button.getAttachedFace());
          if (supportBlock != null && supportBlock.getType() != Material.AIR) {
            BlockState initialSupportState=supportBlock.getState();
            BlockState supportState=supportBlock.getState();
            supportState.setType(Material.AIR);
            supportState.update(true,false);
            initialSupportState.update(true);
          }
        }
      }
.runTaskLater(ProjectKorra.plugin,15);
      affectedlevers.add(block);
    }
  }
  if ((GeneralMethods.isSolid(block) || block.isLiquid()) && !affectedlevers.contains(block)) {
    if (block.getType() == Material.LAVA || block.getType() == Material.STATIONARY_LAVA) {
      if (block.getData() == full) {
        block.setType(Material.OBSIDIAN);
      }
 else {
        block.setType(Material.COBBLESTONE);
      }
    }
    remove();
    return false;
  }
  double dist=location.distance(origin);
  if (Double.isNaN(dist) || dist > range) {
    remove();
    return false;
  }
  for (  Entity entity : GeneralMethods.getEntitiesAroundPoint(location,affectingradius)) {
    affect(entity);
  }
  advanceLocation();
  return true;
}","@SuppressWarnings(""String_Node_Str"") public boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    remove();
    return false;
  }
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",location)) {
    remove();
    return false;
  }
  speedfactor=speed * (ProjectKorra.time_step / 1000.);
  ticks++;
  if (ticks > maxticks) {
    remove();
    return false;
  }
  Block block=location.getBlock();
  for (  Block testblock : GeneralMethods.getBlocksAroundPoint(location,affectingradius)) {
    if (testblock.getType() == Material.FIRE) {
      testblock.setType(Material.AIR);
      testblock.getWorld().playEffect(testblock.getLocation(),Effect.EXTINGUISH,0);
    }
    if (GeneralMethods.isRegionProtectedFromBuild(getPlayer(),""String_Node_Str"",block.getLocation()))     continue;
    Material doorTypes[]={Material.WOODEN_DOOR,Material.SPRUCE_DOOR,Material.BIRCH_DOOR,Material.JUNGLE_DOOR,Material.ACACIA_DOOR,Material.DARK_OAK_DOOR};
    if (Arrays.asList(doorTypes).contains(block.getType()) && openDoors) {
      if (block.getData() >= 8) {
        block=block.getRelative(BlockFace.DOWN);
      }
      if (block.getData() < 4) {
        block.setData((byte)(block.getData() + 4));
        block.getWorld().playSound(block.getLocation(),Sound.DOOR_CLOSE,10,1);
      }
 else {
        block.setData((byte)(block.getData() - 4));
        block.getWorld().playSound(block.getLocation(),Sound.DOOR_OPEN,10,1);
      }
    }
    if ((block.getType() == Material.LEVER) && !affectedlevers.contains(block) && flickLevers) {
      Lever lever=new Lever(Material.LEVER,block.getData());
      lever.setPowered(!lever.isPowered());
      block.setData(lever.getData());
      Block supportBlock=block.getRelative(lever.getAttachedFace());
      if (supportBlock != null && supportBlock.getType() != Material.AIR) {
        BlockState initialSupportState=supportBlock.getState();
        BlockState supportState=supportBlock.getState();
        supportState.setType(Material.AIR);
        supportState.update(true,false);
        initialSupportState.update(true);
      }
      affectedlevers.add(block);
    }
 else     if ((block.getType() == Material.STONE_BUTTON) && !affectedlevers.contains(block) && pressButtons) {
      final Button button=new Button(Material.STONE_BUTTON,block.getData());
      button.setPowered(!button.isPowered());
      block.setData(button.getData());
      Block supportBlock=block.getRelative(button.getAttachedFace());
      if (supportBlock != null && supportBlock.getType() != Material.AIR) {
        BlockState initialSupportState=supportBlock.getState();
        BlockState supportState=supportBlock.getState();
        supportState.setType(Material.AIR);
        supportState.update(true,false);
        initialSupportState.update(true);
      }
      final Block btBlock=block;
      new BukkitRunnable(){
        public void run(){
          button.setPowered(!button.isPowered());
          btBlock.setData(button.getData());
          Block supportBlock=btBlock.getRelative(button.getAttachedFace());
          if (supportBlock != null && supportBlock.getType() != Material.AIR) {
            BlockState initialSupportState=supportBlock.getState();
            BlockState supportState=supportBlock.getState();
            supportState.setType(Material.AIR);
            supportState.update(true,false);
            initialSupportState.update(true);
          }
        }
      }
.runTaskLater(ProjectKorra.plugin,10);
      affectedlevers.add(block);
    }
 else     if ((block.getType() == Material.WOOD_BUTTON) && !affectedlevers.contains(block) && pressButtons) {
      final Button button=new Button(Material.WOOD_BUTTON,block.getData());
      button.setPowered(!button.isPowered());
      block.setData(button.getData());
      Block supportBlock=block.getRelative(button.getAttachedFace());
      if (supportBlock != null && supportBlock.getType() != Material.AIR) {
        BlockState initialSupportState=supportBlock.getState();
        BlockState supportState=supportBlock.getState();
        supportState.setType(Material.AIR);
        supportState.update(true,false);
        initialSupportState.update(true);
      }
      final Block btBlock=block;
      new BukkitRunnable(){
        public void run(){
          button.setPowered(!button.isPowered());
          btBlock.setData(button.getData());
          Block supportBlock=btBlock.getRelative(button.getAttachedFace());
          if (supportBlock != null && supportBlock.getType() != Material.AIR) {
            BlockState initialSupportState=supportBlock.getState();
            BlockState supportState=supportBlock.getState();
            supportState.setType(Material.AIR);
            supportState.update(true,false);
            initialSupportState.update(true);
          }
        }
      }
.runTaskLater(ProjectKorra.plugin,15);
      affectedlevers.add(block);
    }
  }
  if ((GeneralMethods.isSolid(block) || block.isLiquid()) && !affectedlevers.contains(block) && coolLava) {
    if (block.getType() == Material.LAVA || block.getType() == Material.STATIONARY_LAVA) {
      if (block.getData() == full) {
        block.setType(Material.OBSIDIAN);
      }
 else {
        block.setType(Material.COBBLESTONE);
      }
    }
    remove();
    return false;
  }
  double dist=location.distance(origin);
  if (Double.isNaN(dist) || dist > range) {
    remove();
    return false;
  }
  for (  Entity entity : GeneralMethods.getEntitiesAroundPoint(location,affectingradius)) {
    affect(entity);
  }
  advanceLocation();
  return true;
}",0.9828904259191844
134038,"@Override public void reloadVariables(){
  speed=config.get().getDouble(""String_Node_Str"");
  defaultrange=config.get().getDouble(""String_Node_Str"");
  affectingradius=config.get().getDouble(""String_Node_Str"");
  defaultpushfactor=config.get().getDouble(""String_Node_Str"");
  maxspeed=1. / defaultpushfactor;
  range=defaultrange;
  pushfactor=defaultpushfactor;
}","@Override public void reloadVariables(){
  speed=config.get().getDouble(""String_Node_Str"");
  defaultrange=config.get().getDouble(""String_Node_Str"");
  affectingradius=config.get().getDouble(""String_Node_Str"");
  defaultpushfactor=config.get().getDouble(""String_Node_Str"");
  flickLevers=config.get().getBoolean(""String_Node_Str"");
  openDoors=config.get().getBoolean(""String_Node_Str"");
  pressButtons=config.get().getBoolean(""String_Node_Str"");
  coolLava=config.get().getBoolean(""String_Node_Str"");
  maxspeed=1. / defaultpushfactor;
  range=defaultrange;
  pushfactor=defaultpushfactor;
}",0.7615062761506276
134039,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.get();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.save();
break;
case DEFAULT:
config=defaultConfig.get();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.save();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.get();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.save();
break;
case DEFAULT:
config=defaultConfig.get();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.save();
break;
}
}",0.9972506393861892
134040,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.get();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.save();
break;
case DEFAULT:
config=defaultConfig.get();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.save();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.get();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.save();
break;
case DEFAULT:
config=defaultConfig.get();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.save();
break;
}
}",0.9993102895180046
134041,"public void dealDamage(Entity entity){
  if (explosion == null)   return;
  double distance=entity.getLocation().distance(explosion.getLocation());
  if (distance > explosionradius)   return;
  if (distance < innerradius) {
    GeneralMethods.damageEntity(player,entity,maxdamage);
    return;
  }
  double slope=-(maxdamage * .5) / (explosionradius - innerradius);
  double damage=slope * (distance - innerradius) + maxdamage;
  GeneralMethods.damageEntity(player,entity,damage);
  AirMethods.breakBreathbendingHold(entity);
}","public void dealDamage(Entity entity){
  if (explosion == null)   return;
  double distance=entity.getLocation().distance(explosion.getLocation());
  if (distance > damageradius)   return;
  if (distance < innerradius) {
    GeneralMethods.damageEntity(player,entity,maxdamage);
    return;
  }
  double slope=-(maxdamage * .5) / (damageradius - innerradius);
  double damage=slope * (distance - innerradius) + maxdamage;
  GeneralMethods.damageEntity(player,entity,damage);
  AirMethods.breakBreathbendingHold(entity);
}",0.9713740458015268
134042,"public void explode(){
  boolean explode=true;
  for (  Block block : GeneralMethods.getBlocksAroundPoint(location,3)) {
    if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
      explode=false;
      break;
    }
  }
  if (explode) {
    explosion=player.getWorld().spawn(location,TNTPrimed.class);
    explosion.setFuseTicks(0);
    float yield=(float)power;
    if (!AvatarState.isAvatarState(player)) {
      if (FireMethods.isDay(player.getWorld())) {
        FireMethods.getFirebendingDayAugment(yield,player.getWorld());
      }
 else {
        yield*=1.;
      }
    }
 else {
      yield*=AvatarState.factor;
    }
    explosion.setYield(yield);
    explosions.put(explosion,this);
  }
  ignite(location);
  remove();
}","public void explode(){
  boolean explode=true;
  for (  Block block : GeneralMethods.getBlocksAroundPoint(location,3)) {
    if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
      explode=false;
      break;
    }
  }
  if (explode) {
    if (damage_blocks && explosionradius > 0) {
      explosion=player.getWorld().spawn(location,TNTPrimed.class);
      explosion.setFuseTicks(0);
      float yield=(float)explosionradius;
      if (!AvatarState.isAvatarState(player)) {
        if (FireMethods.isDay(player.getWorld())) {
          yield=(float)FireMethods.getFirebendingDayAugment(yield,player.getWorld());
        }
      }
 else {
        yield*=AvatarState.factor;
      }
      explosion.setYield(yield);
      explosions.put(explosion,this);
    }
 else {
      List<Entity> l=GeneralMethods.getEntitiesAroundPoint(location,damageradius);
      for (      Entity e : l) {
        if (e instanceof LivingEntity) {
          double slope=-(maxdamage * .5) / (damageradius - innerradius);
          double damage=slope * (e.getLocation().distance(location) - innerradius) + maxdamage;
          GeneralMethods.damageEntity(getPlayer(),e,damage);
        }
      }
      location.getWorld().playSound(location,Sound.EXPLODE,5,1);
      ParticleEffect.EXPLOSION_HUGE.display(new Vector(0,0,0),0,location,256);
    }
  }
  ignite(location);
  remove();
}",0.6421681212677998
134043,"private void fireball(){
  for (  Block block : GeneralMethods.getBlocksAroundPoint(location,radius)) {
    ParticleEffect.FLAME.display(block.getLocation(),0.6F,0.6F,0.6F,0,5);
    ParticleEffect.SMOKE.display(block.getLocation(),0.6F,0.6F,0.6F,0,2);
    if (GeneralMethods.rand.nextInt(4) == 0) {
      FireMethods.playFirebendingSound(location);
    }
  }
  for (  Entity entity : GeneralMethods.getEntitiesAroundPoint(location,2 * radius)) {
    if (entity.getEntityId() == player.getEntityId())     continue;
    entity.setFireTicks((int)(fireticks * 20));
    if (entity instanceof LivingEntity) {
      explode();
      dealDamage(entity);
      return;
    }
  }
}","private void fireball(){
  for (  Block block : GeneralMethods.getBlocksAroundPoint(location,radius)) {
    ParticleEffect.FLAME.display(block.getLocation(),0.6F,0.6F,0.6F,0,5);
    ParticleEffect.SMOKE.display(block.getLocation(),0.6F,0.6F,0.6F,0,2);
    if (GeneralMethods.rand.nextInt(4) == 0) {
      FireMethods.playFirebendingSound(location);
    }
  }
  boolean exploded=false;
  for (  Entity entity : GeneralMethods.getEntitiesAroundPoint(location,2 * radius)) {
    if (entity.getEntityId() == player.getEntityId())     continue;
    entity.setFireTicks((int)(fireticks * 20));
    if (entity instanceof LivingEntity) {
      if (!exploded) {
        explode();
        exploded=true;
      }
      dealDamage(entity);
    }
  }
}",0.9277620396600568
134044,"@Override public void reloadVariables(){
  defaultchargetime=config.get().getLong(""String_Node_Str"");
  interval=25;
  radius=1.5;
  MAX_DAMAGE=config.get().getDouble(""String_Node_Str"");
  DAMAGE_RADIUS=config.get().getDouble(""String_Node_Str"");
  RANGE=config.get().getDouble(""String_Node_Str"");
  POWER=config.get().getDouble(""String_Node_Str"");
  fireticks=config.get().getDouble(""String_Node_Str"");
  maxdamage=MAX_DAMAGE;
  range=RANGE;
  explosionradius=DAMAGE_RADIUS;
  power=POWER;
  chargetime=defaultchargetime;
}","@Override public void reloadVariables(){
  defaultchargetime=config.get().getLong(""String_Node_Str"");
  interval=25;
  radius=1.5;
  MAX_DAMAGE=config.get().getDouble(""String_Node_Str"");
  DAMAGE_RADIUS=config.get().getDouble(""String_Node_Str"");
  RANGE=config.get().getDouble(""String_Node_Str"");
  DAMAGEBLOCKS=config.get().getBoolean(""String_Node_Str"");
  EXPLOSIONRADIUS=config.get().getDouble(""String_Node_Str"");
  fireticks=config.get().getDouble(""String_Node_Str"");
  maxdamage=MAX_DAMAGE;
  range=RANGE;
  damageradius=DAMAGE_RADIUS;
  explosionradius=EXPLOSIONRADIUS;
  damage_blocks=DAMAGEBLOCKS;
  chargetime=defaultchargetime;
}",0.8674698795180723
134045,"/** 
 * Creates a LavaBlock and also accounts for melting over plants by creating new Plantbending() objects. It also appends the TempBlock to our arraylist called TEMP_LAVA_BLOCKS. If ALLOW_NATURAL_FLOW is turned on then this method will remove the block from TempBlock.instances, which will allow the lava to flow naturally.
 * @param block the block that will be turned to lava
 */
public void createLava(Block block){
  boolean valid=false;
  if (!isEarthbendableMaterial(block.getType(),player) && WaterMethods.isPlant(block)) {
    new Plantbending(block);
    block.setType(Material.AIR);
    valid=true;
  }
 else   if (isEarthbendableMaterial(block.getType(),player))   valid=true;
  if (valid) {
    TempBlock tblock=new TempBlock(block,Material.STATIONARY_LAVA,(byte)0);
    TEMP_LAVA_BLOCKS.add(tblock);
    affectedBlocks.add(tblock);
    if (allowNaturalFlow)     TempBlock.instances.remove(block);
  }
}","/** 
 * Creates a LavaBlock and appends the TempBlock to our arraylist called TEMP_LAVA_BLOCKS. If ALLOW_NATURAL_FLOW is turned on then this method will remove the block from TempBlock.instances, which will allow the lava to flow naturally.
 * @param block the block that will be turned to lava
 */
public void createLava(Block block){
  if (isEarthbendableMaterial(block.getType(),player)) {
    TempBlock tblock=new TempBlock(block,Material.STATIONARY_LAVA,(byte)0);
    TEMP_LAVA_BLOCKS.add(tblock);
    affectedBlocks.add(tblock);
    if (allowNaturalFlow)     TempBlock.instances.remove(block);
  }
}",0.7905449770190414
134046,"/** 
 * Damages an Entity by amount of damage specified. Starts a  {@link EntityDamageByEntityEvent}.
 * @param player The player dealing the damage
 * @param entity The entity that is receiving the damage
 * @param damage The amount of damage to deal
 * @param ability The ability that is used to damage the entity
 */
public static void damageEntity(Player player,Entity entity,double damage,String ability){
  if (entity instanceof LivingEntity) {
    if (entity instanceof Player) {
      if (Commands.invincible.contains(((Player)entity).getName()))       return;
    }
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.exemptPermanently(player,CheckType.FIGHT_REACH);
    }
    if (((LivingEntity)entity).getHealth() - damage <= 0 && entity instanceof Player && !entity.isDead()) {
      PlayerBendingDeathEvent event=new PlayerBendingDeathEvent((Player)entity,player,ability,damage);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
    ((LivingEntity)entity).damage(damage,player);
    ((LivingEntity)entity).setLastDamageCause(new EntityDamageByEntityEvent(player,entity,DamageCause.CUSTOM,damage));
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.unexempt(player);
    }
  }
}","/** 
 * Damages an Entity by amount of damage specified. Starts a  {@link EntityDamageByEntityEvent}.
 * @param player The player dealing the damage
 * @param entity The entity that is receiving the damage
 * @param damage The amount of damage to deal
 * @param ability The ability that is used to damage the entity
 */
public static void damageEntity(Player player,Entity entity,double damage,String ability){
  if (entity instanceof LivingEntity) {
    if (entity instanceof Player) {
      if (Commands.invincible.contains(entity.getName()))       return;
    }
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.exemptPermanently(player,CheckType.FIGHT_REACH);
    }
    if (((LivingEntity)entity).getHealth() - damage <= 0 && entity instanceof Player && !entity.isDead()) {
      PlayerBendingDeathEvent event=new PlayerBendingDeathEvent((Player)entity,player,ability,damage);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
    ((LivingEntity)entity).damage(damage,player);
    entity.setLastDamageCause(new EntityDamageByEntityEvent(player,entity,DamageCause.CUSTOM,damage));
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.unexempt(player);
    }
  }
}",0.9806201550387597
134047,"/** 
 * Returns the top block based around loc. PositiveY is the maximum amount of distance it will check upward. Similarly, negativeY is for downward.
 */
public static Block getTopBlock(Location loc,int positiveY,int negativeY){
  Block block=loc.getBlock();
  Block blockHolder=block;
  int y=0;
  while (blockHolder.getType() != Material.AIR && Math.abs(y) < Math.abs(positiveY)) {
    y++;
    Block tempBlock=loc.clone().add(0,y,0).getBlock();
    if (tempBlock.getType() == Material.AIR)     return blockHolder;
    blockHolder=tempBlock;
  }
  while (blockHolder.getType() == Material.AIR && Math.abs(y) < Math.abs(negativeY)) {
    y--;
    blockHolder=loc.clone().add(0,y,0).getBlock();
    if (blockHolder.getType() != Material.AIR)     return blockHolder;
  }
  return null;
}","/** 
 * Returns the top block based around loc. PositiveY is the maximum amount of distance it will check upward. Similarly, negativeY is for downward.
 */
public static Block getTopBlock(Location loc,int positiveY,int negativeY){
  Block blockHolder=loc.getBlock();
  int y=0;
  while (blockHolder.getType() != Material.AIR && Math.abs(y) < Math.abs(positiveY)) {
    y++;
    Block tempBlock=loc.clone().add(0,y,0).getBlock();
    if (tempBlock.getType() == Material.AIR)     return blockHolder;
    blockHolder=tempBlock;
  }
  while (blockHolder.getType() == Material.AIR && Math.abs(y) < Math.abs(negativeY)) {
    y--;
    blockHolder=loc.clone().add(0,y,0).getBlock();
    if (blockHolder.getType() != Material.AIR)     return blockHolder;
  }
  return null;
}",0.9684887459807074
134048,"public static boolean isAdjacentToThreeOrMoreSources(Block block){
  if (TempBlock.isTempBlock(block))   return false;
  int sources=0;
  byte full=0x0;
  BlockFace[] faces={BlockFace.EAST,BlockFace.WEST,BlockFace.NORTH,BlockFace.SOUTH};
  for (  BlockFace face : faces) {
    Block blocki=block.getRelative(face);
    if ((blocki.getType() == Material.LAVA || blocki.getType() == Material.STATIONARY_LAVA) && blocki.getData() == full && EarthPassive.canPhysicsChange(blocki))     sources++;
    if ((blocki.getType() == Material.WATER || blocki.getType() == Material.STATIONARY_WATER) && blocki.getData() == full && WaterManipulation.canPhysicsChange(blocki))     sources++;
    if (FreezeMelt.frozenblocks.containsKey(blocki)) {
    }
 else     if (blocki.getType() == Material.ICE) {
    }
  }
  if (sources >= 2)   return true;
  return false;
}","public static boolean isAdjacentToThreeOrMoreSources(Block block){
  if (TempBlock.isTempBlock(block))   return false;
  int sources=0;
  byte full=0x0;
  BlockFace[] faces={BlockFace.EAST,BlockFace.WEST,BlockFace.NORTH,BlockFace.SOUTH};
  for (  BlockFace face : faces) {
    Block blocki=block.getRelative(face);
    if ((blocki.getType() == Material.LAVA || blocki.getType() == Material.STATIONARY_LAVA) && blocki.getData() == full && EarthPassive.canPhysicsChange(blocki))     sources++;
    if ((blocki.getType() == Material.WATER || blocki.getType() == Material.STATIONARY_WATER) && blocki.getData() == full && WaterManipulation.canPhysicsChange(blocki))     sources++;
    if (FreezeMelt.frozenblocks.containsKey(blocki)) {
    }
 else     if (blocki.getType() == Material.ICE) {
    }
  }
  return sources >= 2;
}",0.9748502994011976
134049,"private static void createBendingPlayerAsynchronously(final UUID uuid,final String player){
  ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str"");
  try {
    if (!rs2.next()) {
      new BendingPlayer(uuid,player,new ArrayList<Element>(),new HashMap<Integer,String>(),false);
      DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ player+ ""String_Node_Str"");
      ProjectKorra.log.info(""String_Node_Str"" + player);
    }
 else {
      String player2=rs2.getString(""String_Node_Str"");
      if (!player.equalsIgnoreCase(player2)) {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + player + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str"");
        ProjectKorra.log.info(""String_Node_Str"" + player);
      }
      String element=rs2.getString(""String_Node_Str"");
      String permaremoved=rs2.getString(""String_Node_Str"");
      boolean p=false;
      final ArrayList<Element> elements=new ArrayList<Element>();
      if (element != null) {
        if (element.contains(""String_Node_Str""))         elements.add(Element.Air);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Water);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Earth);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Fire);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Chi);
      }
      final HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      for (int i=1; i <= 9; i++) {
        String slot=rs2.getString(""String_Node_Str"" + i);
        if (slot != null) {
          abilities.put(i,slot);
        }
      }
      p=(permaremoved == null ? false : (permaremoved.equals(""String_Node_Str"") ? true : (permaremoved.equals(""String_Node_Str"") ? false : p)));
      final boolean boolean_p=p;
      new BukkitRunnable(){
        @Override public void run(){
          new BendingPlayer(uuid,player,elements,abilities,boolean_p);
        }
      }
.runTask(ProjectKorra.plugin);
    }
  }
 catch (  SQLException ex) {
    ex.printStackTrace();
  }
}","private static void createBendingPlayerAsynchronously(final UUID uuid,final String player){
  ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str"");
  try {
    if (!rs2.next()) {
      new BendingPlayer(uuid,player,new ArrayList<Element>(),new HashMap<Integer,String>(),false);
      DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ player+ ""String_Node_Str"");
      ProjectKorra.log.info(""String_Node_Str"" + player);
    }
 else {
      String player2=rs2.getString(""String_Node_Str"");
      if (!player.equalsIgnoreCase(player2)) {
        DBConnection.sql.modifyQuery(""String_Node_Str"" + player + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str"");
        ProjectKorra.log.info(""String_Node_Str"" + player);
      }
      String element=rs2.getString(""String_Node_Str"");
      String permaremoved=rs2.getString(""String_Node_Str"");
      boolean p=false;
      final ArrayList<Element> elements=new ArrayList<Element>();
      if (element != null) {
        if (element.contains(""String_Node_Str""))         elements.add(Element.Air);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Water);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Earth);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Fire);
        if (element.contains(""String_Node_Str""))         elements.add(Element.Chi);
      }
      final HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      for (int i=1; i <= 9; i++) {
        String slot=rs2.getString(""String_Node_Str"" + i);
        if (slot != null) {
          abilities.put(i,slot);
        }
      }
      p=(permaremoved != null && (permaremoved.equals(""String_Node_Str"")));
      final boolean boolean_p=p;
      new BukkitRunnable(){
        @Override public void run(){
          new BendingPlayer(uuid,player,elements,abilities,boolean_p);
        }
      }
.runTask(ProjectKorra.plugin);
    }
  }
 catch (  SQLException ex) {
    ex.printStackTrace();
  }
}",0.9794666037290536
134050,"public static boolean isSubAbility(String ability){
  if (AbilityModuleManager.subabilities.contains(ability))   return true;
  return false;
}","public static boolean isSubAbility(String ability){
  return AbilityModuleManager.subabilities.contains(ability);
}",0.8449612403100775
134051,"public static boolean isWeapon(Material mat){
  if (mat == null)   return false;
  if (mat == Material.WOOD_AXE || mat == Material.WOOD_PICKAXE || mat == Material.WOOD_SPADE || mat == Material.WOOD_SWORD || mat == Material.STONE_AXE || mat == Material.STONE_PICKAXE || mat == Material.STONE_SPADE || mat == Material.STONE_SWORD || mat == Material.IRON_AXE || mat == Material.IRON_PICKAXE || mat == Material.IRON_SWORD || mat == Material.IRON_SPADE || mat == Material.DIAMOND_AXE || mat == Material.DIAMOND_PICKAXE || mat == Material.DIAMOND_SWORD || mat == Material.DIAMOND_SPADE)   return true;
  return false;
}","public static boolean isWeapon(Material mat){
  return mat != null && (mat == Material.WOOD_AXE || mat == Material.WOOD_PICKAXE || mat == Material.WOOD_SPADE || mat == Material.WOOD_SWORD || mat == Material.STONE_AXE || mat == Material.STONE_PICKAXE || mat == Material.STONE_SPADE || mat == Material.STONE_SWORD || mat == Material.IRON_AXE || mat == Material.IRON_PICKAXE || mat == Material.IRON_SWORD || mat == Material.IRON_SPADE || mat == Material.DIAMOND_AXE || mat == Material.DIAMOND_PICKAXE || mat == Material.DIAMOND_SWORD || mat == Material.DIAMOND_SPADE);
}",0.9355932203389832
134052,"public static boolean hasPermission(Player player,String ability){
  if (player.hasPermission(""String_Node_Str"" + ability) && canBind(player.getName(),ability))   return true;
  return false;
}","public static boolean hasPermission(Player player,String ability){
  return player.hasPermission(""String_Node_Str"" + ability) && canBind(player.getName(),ability);
}",0.888268156424581
134053,"public static void reloadPlugin(){
  ProjectKorra.log.info(""String_Node_Str"");
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  if (DBConnection.isOpen != false) {
    DBConnection.sql.close();
  }
  GeneralMethods.stopBending();
  ConfigManager.defaultConfig.reload();
  ConfigManager.deathMsgConfig.reload();
  BendingManager.getInstance().reloadVariables();
  new AbilityModuleManager(plugin);
  new MultiAbilityModuleManager();
  new CraftingRecipes(plugin);
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    ProjectKorra.log.severe(""String_Node_Str"");
    stopPlugin();
  }
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  plugin.updater.checkUpdate();
  ProjectKorra.log.info(""String_Node_Str"");
}","public static void reloadPlugin(){
  ProjectKorra.log.info(""String_Node_Str"");
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  if (DBConnection.isOpen) {
    DBConnection.sql.close();
  }
  GeneralMethods.stopBending();
  ConfigManager.defaultConfig.reload();
  ConfigManager.deathMsgConfig.reload();
  BendingManager.getInstance().reloadVariables();
  new AbilityModuleManager(plugin);
  new ComboManager();
  new MultiAbilityModuleManager();
  new CraftingRecipes(plugin);
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (!DBConnection.isOpen()) {
    ProjectKorra.log.severe(""String_Node_Str"");
    stopPlugin();
  }
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  plugin.updater.checkUpdate();
  ProjectKorra.log.info(""String_Node_Str"");
}",0.9835802963556268
134054,"public static boolean canView(Player player,String ability){
  if (player.hasPermission(""String_Node_Str"" + ability))   return true;
  return false;
}","public static boolean canView(Player player,String ability){
  return player.hasPermission(""String_Node_Str"" + ability);
}",0.8529411764705882
134055,"public static boolean isSolid(Block block){
  if (Arrays.asList(nonOpaque).contains(block.getTypeId()))   return false;
  return true;
}","public static boolean isSolid(Block block){
  return Arrays.asList(nonOpaque).contains(block.getTypeId());
}",0.8360655737704918
134056,"/** 
 * Checks if an entity is Undead 
 */
public static boolean isUndead(Entity entity){
  if (entity == null)   return false;
  if (entity.getType() == EntityType.ZOMBIE || entity.getType() == EntityType.BLAZE || entity.getType() == EntityType.GIANT || entity.getType() == EntityType.IRON_GOLEM || entity.getType() == EntityType.MAGMA_CUBE || entity.getType() == EntityType.PIG_ZOMBIE || entity.getType() == EntityType.SKELETON || entity.getType() == EntityType.SLIME || entity.getType() == EntityType.SNOWMAN || entity.getType() == EntityType.ZOMBIE) {
    return true;
  }
  return false;
}","/** 
 * Checks if an entity is Undead 
 */
public static boolean isUndead(Entity entity){
  return entity != null && (entity.getType() == EntityType.ZOMBIE || entity.getType() == EntityType.BLAZE || entity.getType() == EntityType.GIANT || entity.getType() == EntityType.IRON_GOLEM || entity.getType() == EntityType.MAGMA_CUBE || entity.getType() == EntityType.PIG_ZOMBIE || entity.getType() == EntityType.SKELETON || entity.getType() == EntityType.SLIME || entity.getType() == EntityType.SNOWMAN || entity.getType() == EntityType.ZOMBIE);
}",0.9206349206349206
134057,"public static boolean isBender(String player,Element element){
  BendingPlayer bPlayer=getBendingPlayer(player);
  if (bPlayer == null)   return false;
  if (bPlayer.hasElement(element))   return true;
  return false;
}","public static boolean isBender(String player,Element element){
  BendingPlayer bPlayer=getBendingPlayer(player);
  return bPlayer != null && bPlayer.hasElement(element);
}",0.8307692307692308
134058,"public static boolean isRegionProtectedFromBuildPostCache(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    World world=location.getWorld();
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard && !player.hasPermission(""String_Node_Str"" + world.getName())) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(world).blockLighter)           return true;
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
        if (!wg.getRegionContainer().createQuery().testBuild(location,player,DefaultFlag.TNT))         return true;
      }
      if (!wg.canBuild(player,location.getBlock())) {
        return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (!PreciousStones.API().canBreak(player,location)) {
        return true;
      }
    }
    if (fcp != null && massivecore != null && respectFactions) {
      if (!EngineMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false)) {
        return true;
      }
 else {
        return false;
      }
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld tWorld=TownyUniverse.getDataSource().getWorld(world.getName());
        worldCoord=new WorldCoord(tWorld.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      Material type=player.getWorld().getBlockAt(location).getType();
      if (type == null)       type=Material.AIR;
      String reason=GriefPrevention.instance.allowBuild(player,location);
      Claim claim=GriefPrevention.instance.dataStore.getClaimAt(loc,true,null);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null && claim.siegeData != null)       return true;
    }
  }
  return false;
}","public static boolean isRegionProtectedFromBuildPostCache(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    World world=location.getWorld();
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard && !player.hasPermission(""String_Node_Str"" + world.getName())) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(world).blockLighter)           return true;
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
        if (!wg.getRegionContainer().createQuery().testBuild(location,player,DefaultFlag.TNT))         return true;
      }
      if (!wg.canBuild(player,location.getBlock())) {
        return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (!PreciousStones.API().canBreak(player,location)) {
        return true;
      }
    }
    if (fcp != null && massivecore != null && respectFactions) {
      return !EngineMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false);
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld tWorld=TownyUniverse.getDataSource().getWorld(world.getName());
        worldCoord=new WorldCoord(tWorld.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      Material type=player.getWorld().getBlockAt(location).getType();
      if (type == null)       type=Material.AIR;
      String reason=GriefPrevention.instance.allowBuild(player,location);
      Claim claim=GriefPrevention.instance.dataStore.getClaimAt(loc,true,null);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null && claim.siegeData != null)       return true;
    }
  }
  return false;
}",0.9919323101141284
134059,"public static boolean hasItems(){
  if (Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null)   return true;
  return false;
}","public static boolean hasItems(){
  return Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null;
}",0.8507462686567164
134060,"public static boolean hasRPG(){
  if (Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null)   return true;
  return false;
}","public static boolean hasRPG(){
  return Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null;
}",0.8484848484848485
134061,"public static boolean isAbilityInstalled(String name,String author){
  String ability=getAbility(name);
  if (ability == null)   return false;
  if (AbilityModuleManager.authors.get(name).equalsIgnoreCase(author))   return true;
  return false;
}","public static boolean isAbilityInstalled(String name,String author){
  String ability=getAbility(name);
  return ability != null && AbilityModuleManager.authors.get(name).equalsIgnoreCase(author);
}",0.8513513513513513
134062,"public static void displayParticleVector(Location loc,ParticleEffect type,float xTrans,float yTrans,float zTrans){
  if (type == ParticleEffect.FIREWORKS_SPARK)   ParticleEffect.FIREWORKS_SPARK.display((float)xTrans,(float)yTrans,(float)zTrans,0.09F,0,loc,257D);
 else   if (type == ParticleEffect.SMOKE || type == ParticleEffect.SMOKE_NORMAL)   ParticleEffect.SMOKE.display((float)xTrans,(float)yTrans,(float)zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.LARGE_SMOKE || type == ParticleEffect.SMOKE_LARGE)   ParticleEffect.LARGE_SMOKE.display((float)xTrans,(float)yTrans,(float)zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.ENCHANTMENT_TABLE)   ParticleEffect.ENCHANTMENT_TABLE.display((float)xTrans,(float)yTrans,(float)zTrans,0.5F,0,loc,257D);
 else   if (type == ParticleEffect.PORTAL)   ParticleEffect.PORTAL.display((float)xTrans,(float)yTrans,(float)zTrans,0.5F,0,loc,257D);
 else   if (type == ParticleEffect.FLAME)   ParticleEffect.FLAME.display((float)xTrans,(float)yTrans,(float)zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.CLOUD)   ParticleEffect.CLOUD.display((float)xTrans,(float)yTrans,(float)zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.SNOW_SHOVEL)   ParticleEffect.SNOW_SHOVEL.display((float)xTrans,(float)yTrans,(float)zTrans,0.2F,0,loc,257D);
 else   ParticleEffect.RED_DUST.display((float)0,(float)0,(float)0,0.004F,0,loc,257D);
}","public static void displayParticleVector(Location loc,ParticleEffect type,float xTrans,float yTrans,float zTrans){
  if (type == ParticleEffect.FIREWORKS_SPARK)   ParticleEffect.FIREWORKS_SPARK.display(xTrans,yTrans,zTrans,0.09F,0,loc,257D);
 else   if (type == ParticleEffect.SMOKE || type == ParticleEffect.SMOKE_NORMAL)   ParticleEffect.SMOKE.display(xTrans,yTrans,zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.LARGE_SMOKE || type == ParticleEffect.SMOKE_LARGE)   ParticleEffect.LARGE_SMOKE.display(xTrans,yTrans,zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.ENCHANTMENT_TABLE)   ParticleEffect.ENCHANTMENT_TABLE.display(xTrans,yTrans,zTrans,0.5F,0,loc,257D);
 else   if (type == ParticleEffect.PORTAL)   ParticleEffect.PORTAL.display(xTrans,yTrans,zTrans,0.5F,0,loc,257D);
 else   if (type == ParticleEffect.FLAME)   ParticleEffect.FLAME.display(xTrans,yTrans,zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.CLOUD)   ParticleEffect.CLOUD.display(xTrans,yTrans,zTrans,0.04F,0,loc,257D);
 else   if (type == ParticleEffect.SNOW_SHOVEL)   ParticleEffect.SNOW_SHOVEL.display(xTrans,yTrans,zTrans,0.2F,0,loc,257D);
 else   ParticleEffect.RED_DUST.display((float)0,(float)0,(float)0,0.004F,0,loc,257D);
}",0.8946576373212942
134063,"/** 
 * An access method to get an the instances of a   {@link CoreAbility} by itsclass.
 * @param ability The instances map to get
 * @return a map of instances from the specified class
 * @see #getInstances(StockAbility)
 */
public final static ConcurrentHashMap<Integer,CoreAbility> getInstances(Class<? extends CoreAbility> ability){
  ConcurrentHashMap<Integer,CoreAbility> instanceMap=new ConcurrentHashMap<>();
  for (  Integer id : instances.keySet()) {
    if (ability.isInstance(instances.get(id))) {
      instanceMap.put(id,instances.get(id));
    }
  }
  return instanceMap;
}","/** 
 * An access method to get an the instances of a   {@link CoreAbility} by itsclass. <b>IMPORTANT: </b> If this is used in a for each loop use {@link #getAbility(int)} to get the ability. Incorrect usage maycause over looping and is capable of hanging the thead.
 * @param ability The instances map to get
 * @return a map of instances from the specified class
 * @see #getInstances(StockAbility)
 */
public final static ConcurrentHashMap<Integer,CoreAbility> getInstances(Class<? extends CoreAbility> ability){
  ConcurrentHashMap<Integer,CoreAbility> instanceMap=new ConcurrentHashMap<>();
  for (  Integer id : instances.keySet()) {
    if (ability.isInstance(instances.get(id))) {
      instanceMap.put(id,instances.get(id));
    }
  }
  return instanceMap;
}",0.8687315634218289
134064,"public static boolean canFlowTo(Block block){
  for (  Integer id : getInstances(StockAbility.AirBubble).keySet()) {
    if (((AirBubble)getInstances(StockAbility.AirBubble).get(id)).blockInBubble(block)) {
      return false;
    }
  }
  return true;
}","public static boolean canFlowTo(Block block){
  for (  Integer id : getInstances(StockAbility.AirBubble).keySet()) {
    if (((AirBubble)getAbility(id)).blockInBubble(block)) {
      return false;
    }
  }
  return true;
}",0.8613445378151261
134065,"@Override public void reloadVariables(){
  speed=config.get().getDouble(""String_Node_Str"");
}","@Override public void reloadVariables(){
  configSpeed=config.get().getDouble(""String_Node_Str"");
  this.speed=configSpeed;
}",0.8440366972477065
134066,"public static ArrayList<Player> getPlayers(){
  ArrayList<Player> players=new ArrayList<Player>();
  for (  Integer id : getInstances(StockAbility.AirScooter).keySet()) {
    players.add(getInstances(StockAbility.AirScooter).get(id).getPlayer());
  }
  return players;
}","public static ArrayList<Player> getPlayers(){
  ArrayList<Player> players=new ArrayList<Player>();
  for (  Integer id : getInstances(StockAbility.AirScooter).keySet()) {
    players.add(getAbility(id).getPlayer());
  }
  return players;
}",0.9390962671905696
134067,"public static boolean isWithinShield(Location loc){
  for (  Integer id : getInstances(StockAbility.AirShield).keySet()) {
    AirShield ashield=(AirShield)getInstances(StockAbility.AirShield).get(id);
    if (ashield.player.getLocation().getWorld() != loc.getWorld())     return false;
    if (ashield.player.getLocation().distance(loc) <= ashield.radius)     return true;
  }
  return false;
}","public static boolean isWithinShield(Location loc){
  for (  Integer id : getInstances(StockAbility.AirShield).keySet()) {
    AirShield ashield=(AirShield)getAbility(id);
    if (ashield.player.getLocation().getWorld() != loc.getWorld())     return false;
    if (ashield.player.getLocation().distance(loc) <= ashield.radius)     return true;
  }
  return false;
}",0.9605263157894736
134068,"public static boolean removeSpouts(Location loc0,double radius,Player sourceplayer){
  boolean removed=false;
  for (  Integer id : getInstances(StockAbility.AirSpout).keySet()) {
    Player player=getInstances(StockAbility.AirSpout).get(id).getPlayer();
    if (!player.equals(sourceplayer)) {
      Location loc1=player.getLocation().getBlock().getLocation();
      loc0=loc0.getBlock().getLocation();
      double dx=loc1.getX() - loc0.getX();
      double dy=loc1.getY() - loc0.getY();
      double dz=loc1.getZ() - loc0.getZ();
      double distance=Math.sqrt(dx * dx + dz * dz);
      if (distance <= radius && dy > 0 && dy < HEIGHT) {
        getInstances(StockAbility.AirSpout).get(id).remove();
        removed=true;
      }
    }
  }
  return removed;
}","public static boolean removeSpouts(Location loc0,double radius,Player sourceplayer){
  boolean removed=false;
  for (  Integer id : getInstances(StockAbility.AirSpout).keySet()) {
    Player player=getAbility(id).getPlayer();
    if (!player.equals(sourceplayer)) {
      Location loc1=player.getLocation().getBlock().getLocation();
      loc0=loc0.getBlock().getLocation();
      double dx=loc1.getX() - loc0.getX();
      double dy=loc1.getY() - loc0.getY();
      double dz=loc1.getZ() - loc0.getZ();
      double distance=Math.sqrt(dx * dx + dz * dz);
      if (distance <= radius && dy > 0 && dy < HEIGHT) {
        getAbility(id).remove();
        removed=true;
      }
    }
  }
  return removed;
}",0.9604904632152588
134069,"public static ArrayList<Player> getPlayers(){
  ArrayList<Player> players=new ArrayList<Player>();
  for (  Integer id : getInstances(StockAbility.AirSpout).keySet()) {
    players.add(getInstances(StockAbility.AirSpout).get(id).getPlayer());
  }
  return players;
}","public static ArrayList<Player> getPlayers(){
  ArrayList<Player> players=new ArrayList<Player>();
  for (  Integer id : getInstances(StockAbility.AirSpout).keySet()) {
    players.add(getAbility(id).getPlayer());
  }
  return players;
}",0.7912524850894632
134070,"public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  Integer id : getInstances(StockAbility.AirSwipe).keySet()) {
    AirSwipe aswipe=(AirSwipe)getInstances(StockAbility.AirSwipe).get(id);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && vectorLoc.getWorld().equals(loc.getWorld())) {
        if (vectorLoc.distance(loc) <= radius) {
          aswipe.remove();
          removed=true;
        }
      }
    }
  }
  return removed;
}","public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  Integer id : getInstances(StockAbility.AirSwipe).keySet()) {
    AirSwipe aswipe=(AirSwipe)getAbility(id);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && vectorLoc.getWorld().equals(loc.getWorld())) {
        if (vectorLoc.distance(loc) <= radius) {
          aswipe.remove();
          removed=true;
        }
      }
    }
  }
  return removed;
}",0.9741302408563782
134071,"public static void init(){
  if (ProjectKorra.plugin.getConfig().getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    sql=new MySQL(ProjectKorra.log,""String_Node_Str"",host,port,user,pass,db);
    if (((MySQL)sql).open() == null) {
      ProjectKorra.log.severe(""String_Node_Str"");
      ProjectKorra.plugin.stopPlugin();
      return;
    }
    isOpen=true;
    ProjectKorra.log.info(""String_Node_Str"");
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
 else {
    sql=new SQLite(ProjectKorra.log,""String_Node_Str"",""String_Node_Str"",ProjectKorra.plugin.getDataFolder().getAbsolutePath());
    if (((SQLite)sql).open() == null) {
      ProjectKorra.log.severe(""String_Node_Str"");
      ProjectKorra.plugin.stopPlugin();
      return;
    }
    isOpen=true;
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
}","public static void init(){
  if (ProjectKorra.plugin.getConfig().getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    sql=new MySQL(ProjectKorra.log,""String_Node_Str"",host,port,user,pass,db);
    if (((MySQL)sql).open() == null) {
      ProjectKorra.log.severe(""String_Node_Str"");
      GeneralMethods.stopPlugin();
      return;
    }
    isOpen=true;
    ProjectKorra.log.info(""String_Node_Str"");
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
 else {
    sql=new SQLite(ProjectKorra.log,""String_Node_Str"",""String_Node_Str"",ProjectKorra.plugin.getDataFolder().getAbsolutePath());
    if (((SQLite)sql).open() == null) {
      ProjectKorra.log.severe(""String_Node_Str"");
      GeneralMethods.stopPlugin();
      return;
    }
    isOpen=true;
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
}",0.9881147540983608
134072,"public static void reloadPlugin(){
  DBConnection.sql.close();
  ConfigManager.defaultConfig.reloadConfig();
  ConfigManager.deathMsgConfig.reloadConfig();
  GeneralMethods.stopBending();
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  new AbilityModuleManager(plugin);
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
  }
}","public static void reloadPlugin(){
  ProjectKorra.log.info(""String_Node_Str"");
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  if (DBConnection.isOpen != false) {
    DBConnection.sql.close();
  }
  GeneralMethods.stopBending();
  ConfigManager.defaultConfig.reloadConfig();
  ConfigManager.deathMsgConfig.reloadConfig();
  new AbilityModuleManager(plugin);
  new MultiAbilityModuleManager();
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    ProjectKorra.log.severe(""String_Node_Str"");
    stopPlugin();
  }
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  plugin.updater.checkUpdate();
  ProjectKorra.log.info(""String_Node_Str"");
}",0.1997019374068554
134073,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=defaultConfig.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
defaultConfig.saveConfig();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=defaultConfig.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.saveConfig();
break;
}
}",0.9982488001037748
134074,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=defaultConfig.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
defaultConfig.saveConfig();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=defaultConfig.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
defaultConfig.saveConfig();
break;
}
}",0.9982488001037748
134075,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=defaultConfig.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",WaterMethods.getWaterColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",WaterMethods.getWaterColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",WaterMethods.getWaterColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",WaterMethods.getWaterColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",FireMethods.getFireColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",FireMethods.getFireColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",FireMethods.getFireColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",FireMethods.getFireColor() + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
defaultConfig.saveConfig();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=defaultConfig.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1.3);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.8);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",11000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",5500);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",4500);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
defaultConfig.saveConfig();
break;
}
}",0.2853135260926392
134076,"@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    File logFolder=new File(getDataFolder(),""String_Node_Str"");
    if (!logFolder.exists()) {
      logFolder.mkdirs();
    }
    handler=new PKLogHandler(getDataFolder() + File.separator + ""String_Node_Str"");
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  new ChiComboManager();
  new CraftingRecipes(this);
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}","@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    File logFolder=new File(getDataFolder(),""String_Node_Str"");
    if (!logFolder.exists()) {
      logFolder.mkdirs();
    }
    handler=new PKLogHandler(logFolder + File.separator + ""String_Node_Str"");
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  new ChiComboManager();
  new CraftingRecipes(this);
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}",0.9973878972572922
134077,"public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    AirCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (int j=0; j < combo.tasks.size(); j++) {
        FireComboStream fs=(FireComboStream)combo.tasks.get(j);
        if (fs.getLocation() != null && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
  }
  return removed;
}","public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    AirCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (int j=0; j < combo.tasks.size(); j++) {
        FireComboStream fs=(FireComboStream)combo.tasks.get(j);
        if (fs.getLocation() != null && fs.getLocation().getWorld().equals(loc.getWorld()) && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
  }
  return removed;
}",0.978382706164932
134078,"public void remove(){
  instances.remove(this);
  GeneralMethods.getBendingPlayer(player.getName()).addCooldown(""String_Node_Str"",cooldown);
  revertBlocks();
  for (  BukkitRunnable task : tasks)   task.cancel();
}","public void remove(){
  instances.remove(this);
  BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
  if (bPlayer != null) {
    bPlayer.addCooldown(""String_Node_Str"",cooldown);
  }
  revertBlocks();
  for (  BukkitRunnable task : tasks)   task.cancel();
}",0.8704453441295547
134079,"private boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    instances.remove(player);
  }
  if (!GeneralMethods.canBend(player.getName(),StockAbilities.AvatarState.name())) {
    instances.remove(player);
    if (GeneralMethods.getBendingPlayer(player.getName()).isOnCooldown(""String_Node_Str"")) {
      GeneralMethods.getBendingPlayer(player.getName()).removeCooldown(""String_Node_Str"");
    }
    return false;
  }
  if (startTimes.containsKey(player.getName())) {
    if (startTimes.get(player.getName()) + duration < System.currentTimeMillis()) {
      startTimes.remove(player.getName());
      instances.remove(player);
    }
  }
  addPotionEffects();
  return true;
}","private boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    instances.remove(player);
  }
  if (!GeneralMethods.canBend(player.getName(),StockAbilities.AvatarState.name())) {
    instances.remove(player);
    if (player != null) {
      if (GeneralMethods.getBendingPlayer(player.getName()).isOnCooldown(""String_Node_Str"")) {
        GeneralMethods.getBendingPlayer(player.getName()).removeCooldown(""String_Node_Str"");
      }
      return false;
    }
  }
  if (startTimes.containsKey(player.getName())) {
    if (startTimes.get(player.getName()) + duration < System.currentTimeMillis()) {
      startTimes.remove(player.getName());
      instances.remove(player);
    }
  }
  addPotionEffects();
  return true;
}",0.9719495091164096
134080,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=ProjectKorra.plugin.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
plugin.saveConfig();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=ProjectKorra.plugin.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
plugin.saveConfig();
break;
}
}",0.9970882680102074
134081,"public void remove(){
  instances.remove(player);
}","public void remove(){
  if (player == null) {
    for (    Player player : instances.keySet()) {
      if (instances.get(player).equals(this)) {
        instances.remove(player);
      }
    }
    return;
  }
  instances.remove(player);
}",0.3460207612456747
134082,"@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    handler=new PKLogHandler(getDataFolder() + File.separator + ""String_Node_Str"");
    log.getParent().setFilter(new LogFilter());
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  new ChiComboManager();
  new CraftingRecipes(this);
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}","@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    File logFolder=new File(getDataFolder(),""String_Node_Str"");
    if (!logFolder.exists()) {
      logFolder.mkdirs();
    }
    handler=new PKLogHandler(getDataFolder() + File.separator + ""String_Node_Str"");
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  new ChiComboManager();
  new CraftingRecipes(this);
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}",0.9612917496129176
134083,"/** 
 * Attempts to access a Earth bendable block that was recently shifted or clicked on by the player.
 * @param player the player that is trying to bend.
 * @param range the maximum range to access the block.
 * @param clickType the action that was performed to access the source, eitherClickType.SHIFT_DOWN or ClickType.LEFT_CLICK.
 * @param allowNearbySubstitute if a valid earth source could not be found then this method willattempt to find a nearby valid earth block.
 * @return a valid Earth bendable block, or null if none was found.
 */
public static Block getEarthSourceBlock(Player player,double range,ClickType clickType,boolean allowNearbySubstitute){
  Block sourceBlock=getSourceBlock(player,range,BlockSourceType.EARTH,clickType);
  if (sourceBlock == null && allowNearbySubstitute) {
    BlockSourceInformation blockInfo=getBlockSourceInformation(player,BlockSourceType.EARTH,clickType);
    if (blockInfo == null) {
      return null;
    }
    Block tempBlock=blockInfo.getBlock();
    if (tempBlock == null) {
      return null;
    }
    Location loc=tempBlock.getLocation();
    sourceBlock=EarthMethods.getNearbyEarthBlock(loc,3,3);
    if (sourceBlock == null || Math.abs(sourceBlock.getLocation().distance(player.getEyeLocation())) > range || !EarthMethods.isEarthbendable(player,sourceBlock)) {
      return null;
    }
  }
  return sourceBlock;
}","/** 
 * Attempts to access a Earth bendable block that was recently shifted or clicked on by the player.
 * @param player the player that is trying to bend.
 * @param range the maximum range to access the block.
 * @param clickType the action that was performed to access the source, eitherClickType.SHIFT_DOWN or ClickType.LEFT_CLICK.
 * @param allowNearbySubstitute if a valid earth source could not be found then this method willattempt to find a nearby valid earth block.
 * @return a valid Earth bendable block, or null if none was found.
 */
public static Block getEarthSourceBlock(Player player,double range,ClickType clickType,boolean allowNearbySubstitute){
  Block sourceBlock=getSourceBlock(player,range,BlockSourceType.EARTH,clickType);
  if (sourceBlock == null && allowNearbySubstitute) {
    BlockSourceInformation blockInfo=getBlockSourceInformation(player,BlockSourceType.EARTH,clickType);
    if (blockInfo == null) {
      return null;
    }
    Block tempBlock=blockInfo.getBlock();
    if (tempBlock == null) {
      return null;
    }
    Location loc=tempBlock.getLocation();
    sourceBlock=EarthMethods.getNearbyEarthBlock(loc,3,3);
    if (sourceBlock == null || !sourceBlock.getLocation().getWorld().equals(player.getWorld()) || Math.abs(sourceBlock.getLocation().distance(player.getEyeLocation())) > range || !EarthMethods.isEarthbendable(player,sourceBlock)) {
      return null;
    }
  }
  return sourceBlock;
}",0.9400070997515086
134084,"@Override public boolean isLoggable(LogRecord record){
  if (record.getLevel() == Level.SEVERE && record.getMessage().contains(""String_Node_Str"") && record.getThrown() != null) {
    for (    String line : consoleError) {
      ProjectKorra.log.severe(line);
    }
    ProjectKorra.handler.publish(record);
    ProjectKorra.handler.flush();
    return false;
  }
  return true;
}","@Override public boolean isLoggable(LogRecord record){
  if (record.getMessage() == null && record.getThrown() == null) {
    return false;
  }
  String recordString=""String_Node_Str"";
  if (record.getMessage() != null) {
    if (!record.getMessage().contains(""String_Node_Str"")) {
      if (record.getThrown() == null) {
        return false;
      }
      if (record.getThrown().getMessage() == null) {
        return false;
      }
      if (!record.getThrown().getMessage().contains(""String_Node_Str"")) {
        return false;
      }
    }
    recordString=buildString(record);
  }
 else {
    if (record.getThrown() != null) {
      if (record.getThrown().getMessage() == null) {
        return false;
      }
      if (!record.getThrown().getMessage().contains(""String_Node_Str"")) {
        return false;
      }
      recordString=buildString(record);
    }
  }
  if (loggedRecords.contains(recordString)) {
    return false;
  }
  final String toRecord=recordString;
  Bukkit.getScheduler().runTaskLater(ProjectKorra.plugin,new Runnable(){
    public void run(){
      loggedRecords.add(toRecord);
    }
  }
,10);
  return true;
}",0.1791831357048748
134085,"public PKLogHandler(String filename) throws IOException {
  super(filename,true);
  this.setLevel(Level.WARNING);
  this.setFilter(new ErrorLogFilter());
  this.setFormatter(new LogFormatter());
}","public PKLogHandler(String filename) throws IOException {
  super(filename,500 * 1024,20,true);
  this.setLevel(Level.WARNING);
  this.setFilter(new LogFilter());
  this.setFormatter(new LogFormatter());
}",0.9526184538653366
134086,"public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    FireCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && fs.getLocation().getWorld() == loc.getWorld() && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
  }
  return removed;
}","public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    FireCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && fs.getLocation().getWorld() == loc.getWorld() && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && fs.getLocation().getWorld().equals(loc.getWorld())) {
          if (Math.abs(fs.getLocation().distance(loc)) <= radius) {
            fs.remove();
            removed=true;
          }
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
  }
  return removed;
}",0.9679144385026738
134087,"private void cancel(){
  if (progressing) {
    if (source != null)     source.revertBlock();
    progressing=false;
  }
  BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
  bPlayer.addCooldown(""String_Node_Str"",cooldown);
  instances.remove(id);
}","private void cancel(){
  if (progressing) {
    if (source != null)     source.revertBlock();
    progressing=false;
  }
  BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
  if (bPlayer != null) {
    bPlayer.addCooldown(""String_Node_Str"",cooldown);
  }
  instances.remove(id);
}",0.9460869565217392
134088,"private void progress(){
  if (!GeneralMethods.canBend(player.getName(),""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (GeneralMethods.getBoundAbility(player) == null) {
    remove();
    returnWater();
    return;
  }
  if ((!player.isSneaking() && !sourceselected) || !GeneralMethods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (!sourceblock.getWorld().equals(player.getWorld())) {
    remove();
    return;
  }
  if (sourceblock.getLocation().distance(player.getLocation()) > range && sourceselected) {
    remove();
    return;
  }
  if (System.currentTimeMillis() > time + interval) {
    time=System.currentTimeMillis();
    Location location=player.getLocation();
    if (sourceselected) {
      WaterMethods.playFocusWaterEffect(sourceblock);
    }
 else     if (settingup) {
      if (sourceblock.getY() < location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.UP);
        sourcelocation=newblock.getLocation();
        if (!GeneralMethods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourceblock.getY() > location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.DOWN);
        sourcelocation=newblock.getLocation();
        if (!GeneralMethods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourcelocation.distance(location) > radius) {
        Vector vector=GeneralMethods.getDirection(sourcelocation,location.getBlock().getLocation()).normalize();
        sourcelocation.add(vector);
        Block newblock=sourcelocation.getBlock();
        if (!newblock.equals(sourceblock)) {
          source.revertBlock();
          source=null;
          if (!GeneralMethods.isSolid(newblock)) {
            source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
            sourceblock=newblock;
          }
        }
      }
 else {
        incrementStep();
        if (source != null)         source.revertBlock();
        source=null;
        Vector vector=new Vector(1,0,0);
        startangle=vector.angle(GeneralMethods.getDirection(sourceblock.getLocation(),location));
        angle=startangle;
      }
    }
 else     if (forming) {
      if (angle - startangle >= 360) {
        y+=1;
      }
 else {
        angle+=20;
      }
      if (GeneralMethods.rand.nextInt(4) == 0) {
        WaterMethods.playWaterbendingSound(player.getLocation());
      }
      formOctopus();
      if (y == 2) {
        incrementStep();
      }
    }
 else     if (formed) {
      if (GeneralMethods.rand.nextInt(7) == 0) {
        WaterMethods.playWaterbendingSound(player.getLocation());
      }
      step+=1;
      if (step % inc == 0)       animstep+=1;
      if (animstep > 8)       animstep=1;
      formOctopus();
    }
 else {
      remove();
    }
  }
}","private void progress(){
  if (!GeneralMethods.canBend(player.getName(),""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (GeneralMethods.getBoundAbility(player) == null) {
    remove();
    returnWater();
    return;
  }
  if ((!player.isSneaking() && !sourceselected) || !GeneralMethods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (!sourceblock.getWorld().equals(player.getWorld())) {
    remove();
    return;
  }
  if (sourceblock.getLocation().distance(player.getLocation()) > range && sourceselected) {
    remove();
    return;
  }
  if (System.currentTimeMillis() > time + interval) {
    time=System.currentTimeMillis();
    Location location=player.getLocation();
    if (sourceselected) {
      WaterMethods.playFocusWaterEffect(sourceblock);
    }
 else     if (settingup) {
      if (sourceblock.getY() < location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.UP);
        sourcelocation=newblock.getLocation();
        if (!GeneralMethods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourceblock.getY() > location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.DOWN);
        sourcelocation=newblock.getLocation();
        if (!GeneralMethods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourcelocation.distance(location) > radius) {
        Vector vector=GeneralMethods.getDirection(sourcelocation,location.getBlock().getLocation()).normalize();
        sourcelocation.add(vector);
        Block newblock=sourcelocation.getBlock();
        if (!newblock.equals(sourceblock)) {
          if (source != null) {
            source.revertBlock();
          }
          if (!GeneralMethods.isSolid(newblock)) {
            source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
            sourceblock=newblock;
          }
        }
      }
 else {
        incrementStep();
        if (source != null)         source.revertBlock();
        source=null;
        Vector vector=new Vector(1,0,0);
        startangle=vector.angle(GeneralMethods.getDirection(sourceblock.getLocation(),location));
        angle=startangle;
      }
    }
 else     if (forming) {
      if (angle - startangle >= 360) {
        y+=1;
      }
 else {
        angle+=20;
      }
      if (GeneralMethods.rand.nextInt(4) == 0) {
        WaterMethods.playWaterbendingSound(player.getLocation());
      }
      formOctopus();
      if (y == 2) {
        incrementStep();
      }
    }
 else     if (formed) {
      if (GeneralMethods.rand.nextInt(7) == 0) {
        WaterMethods.playWaterbendingSound(player.getLocation());
      }
      step+=1;
      if (step % inc == 0)       animstep+=1;
      if (animstep > 8)       animstep=1;
      formOctopus();
    }
 else {
      remove();
    }
  }
}",0.9928625664388764
134089,"@SuppressWarnings(""String_Node_Str"") public static boolean isPlant(Block block){
  if (Arrays.asList(plantIds).contains(block.getTypeId()))   return true;
  return false;
}","@SuppressWarnings(""String_Node_Str"") public static boolean isPlant(Block block){
  if (block == null) {
    return false;
  }
  if (Arrays.asList(plantIds).contains(block.getTypeId())) {
    return true;
  }
  return false;
}",0.8664987405541562
134090,"/** 
 * Attempts to access a Earth bendable block that was recently shifted or clicked on by the player.
 * @param player the player that is trying to bend.
 * @param range the maximum range to access the block.
 * @param clickType the action that was performed to access the source, eitherClickType.SHIFT_DOWN or ClickType.LEFT_CLICK.
 * @param allowNearbySubstitute if a valid earth source could not be found then this method willattempt to find a nearby valid earth block.
 * @return a valid Earth bendable block, or null if none was found.
 */
public static Block getEarthSourceBlock(Player player,double range,ClickType clickType,boolean allowNearbySubstitute){
  Block sourceBlock=getSourceBlock(player,range,BlockSourceType.EARTH,clickType);
  if (sourceBlock == null && allowNearbySubstitute) {
    BlockSourceInformation blockInfo=getBlockSourceInformation(player,BlockSourceType.EARTH,clickType);
    if (blockInfo == null) {
      return null;
    }
    Block tempBlock=blockInfo.getBlock();
    if (tempBlock == null) {
      return null;
    }
    Location loc=tempBlock.getLocation();
    sourceBlock=EarthMethods.getNearbyEarthBlock(loc,3,3);
    if (sourceBlock == null || Math.abs(sourceBlock.getLocation().distance(player.getEyeLocation())) > range || !EarthMethods.isEarthbendable(player,sourceBlock)) {
      return null;
    }
  }
  return sourceBlock;
}","/** 
 * Attempts to access a Earth bendable block that was recently shifted or clicked on by the player.
 * @param player the player that is trying to bend.
 * @param range the maximum range to access the block.
 * @param clickType the action that was performed to access the source, eitherClickType.SHIFT_DOWN or ClickType.LEFT_CLICK.
 * @param allowNearbySubstitute if a valid earth source could not be found then this method willattempt to find a nearby valid earth block.
 * @return a valid Earth bendable block, or null if none was found.
 */
public static Block getEarthSourceBlock(Player player,double range,ClickType clickType,boolean allowNearbySubstitute){
  Block sourceBlock=getSourceBlock(player,range,BlockSourceType.EARTH,clickType);
  if (sourceBlock == null && allowNearbySubstitute) {
    BlockSourceInformation blockInfo=getBlockSourceInformation(player,BlockSourceType.EARTH,clickType);
    if (blockInfo == null) {
      return null;
    }
    Block tempBlock=blockInfo.getBlock();
    if (tempBlock == null) {
      return null;
    }
    Location loc=tempBlock.getLocation();
    sourceBlock=EarthMethods.getNearbyEarthBlock(loc,3,3);
    if (sourceBlock == null || !sourceBlock.getLocation().getWorld().equals(player.getWorld()) || Math.abs(sourceBlock.getLocation().distance(player.getEyeLocation())) > range || !EarthMethods.isEarthbendable(player,sourceBlock)) {
      return null;
    }
  }
  return sourceBlock;
}",0.9400070997515086
134091,"@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    File logFolder=new File(getDataFolder(),""String_Node_Str"");
    if (!logFolder.exists()) {
      logFolder.mkdirs();
    }
    handler=new PKLogHandler(getDataFolder() + File.separator + ""String_Node_Str"");
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  new ChiComboManager();
  new CraftingRecipes(this);
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}","@Override public void onEnable(){
  plugin=this;
  ProjectKorra.log=this.getLogger();
  try {
    File logFolder=new File(getDataFolder(),""String_Node_Str"");
    if (!logFolder.exists()) {
      logFolder.mkdirs();
    }
    handler=new PKLogHandler(logFolder + File.separator + ""String_Node_Str"");
    log.getParent().addHandler(handler);
  }
 catch (  SecurityException|IOException e) {
    e.printStackTrace();
  }
  new ConfigManager(this);
  new GeneralMethods(this);
  updater=new Updater(this,""String_Node_Str"");
  new Commands(this);
  new AbilityModuleManager(this);
  new MultiAbilityModuleManager();
  new MultiAbilityManager();
  new ComboModuleManager();
  new ComboManager();
  new ChiComboManager();
  new CraftingRecipes(this);
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  if (DBConnection.isOpen() == false) {
    return;
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  GeneralMethods.deserializeFile();
  GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME);
  updater.checkUpdate();
}",0.9973878972572922
134092,"public Bloodbending(Player player){
  if (instances.containsKey(player)) {
    remove(player);
    return;
  }
  if (onlyUsableAtNight && !WaterMethods.isNight(player.getWorld()) && !WaterMethods.canBloodbendAtAnytime(player)) {
    return;
  }
  if (onlyUsableDuringMoon && !WaterMethods.isFullMoon(player.getWorld()) && !WaterMethods.canBloodbendAtAnytime(player)) {
    return;
  }
  BendingPlayer bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
    return;
  }
  range=(int)WaterMethods.waterbendingNightAugment(range,player.getWorld());
  if (AvatarState.isAvatarState(player)) {
    range=AvatarState.getValue(range);
    for (    Entity entity : GeneralMethods.getEntitiesAroundPoint(player.getLocation(),range)) {
      if (entity instanceof LivingEntity) {
        if (entity instanceof Player) {
          if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()) || (AvatarState.isAvatarState((Player)entity) || entity.getEntityId() == player.getEntityId() || GeneralMethods.canBend(((Player)entity).getName(),""String_Node_Str"")))           continue;
        }
        GeneralMethods.damageEntity(player,entity,0);
        AirMethods.breakBreathbendingHold(entity);
        targetentities.put(entity,entity.getLocation().clone());
      }
    }
  }
 else {
    Entity target=GeneralMethods.getTargetedEntity(player,range,new ArrayList<Entity>());
    if (target == null)     return;
    if (!(target instanceof LivingEntity) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",target.getLocation()))     return;
    if (target instanceof Player) {
      if (GeneralMethods.canBend(((Player)target).getName(),""String_Node_Str"") || AvatarState.isAvatarState((Player)target))       if (!FireMethods.isDay(target.getWorld()) || WaterMethods.canBloodbendAtAnytime((Player)target))       return;
    }
    if (!canBeUsedOnUndead && isUndead(target)) {
      return;
    }
    GeneralMethods.damageEntity(player,target,0);
    HorizontalVelocityTracker.remove(target);
    AirMethods.breakBreathbendingHold(target);
    targetentities.put(target,target.getLocation().clone());
  }
  if (targetentities.size() > 0) {
    bplayer.addCooldown(""String_Node_Str"",cooldown);
  }
  this.player=player;
  this.time=System.currentTimeMillis();
  instances.put(player,this);
}","public Bloodbending(Player player){
  if (instances.containsKey(player)) {
    remove(player);
    return;
  }
  if (onlyUsableAtNight && !WaterMethods.isNight(player.getWorld()) && !WaterMethods.canBloodbendAtAnytime(player)) {
    return;
  }
  if (onlyUsableDuringMoon && !WaterMethods.isFullMoon(player.getWorld()) && !WaterMethods.canBloodbendAtAnytime(player)) {
    return;
  }
  BendingPlayer bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
    return;
  }
  range=(int)WaterMethods.waterbendingNightAugment(range,player.getWorld());
  if (AvatarState.isAvatarState(player)) {
    range=AvatarState.getValue(range);
    for (    Entity entity : GeneralMethods.getEntitiesAroundPoint(player.getLocation(),range)) {
      if (entity instanceof LivingEntity) {
        if (entity instanceof Player) {
          if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()) || (AvatarState.isAvatarState((Player)entity) || entity.getEntityId() != player.getEntityId() || GeneralMethods.canBend(((Player)entity).getName(),""String_Node_Str"")))           continue;
        }
        GeneralMethods.damageEntity(player,entity,0);
        AirMethods.breakBreathbendingHold(entity);
        targetentities.put(entity,entity.getLocation().clone());
      }
    }
  }
 else {
    Entity target=GeneralMethods.getTargetedEntity(player,range,new ArrayList<Entity>());
    if (target == null)     return;
    if (!(target instanceof LivingEntity) || GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",target.getLocation()))     return;
    if (target instanceof Player) {
      if (GeneralMethods.canBend(((Player)target).getName(),""String_Node_Str"") || AvatarState.isAvatarState((Player)target))       if (!FireMethods.isDay(target.getWorld()) || WaterMethods.canBloodbendAtAnytime((Player)target))       return;
    }
    if (!canBeUsedOnUndead && isUndead(target)) {
      return;
    }
    GeneralMethods.damageEntity(player,target,0);
    HorizontalVelocityTracker.remove(target);
    AirMethods.breakBreathbendingHold(target);
    targetentities.put(target,target.getLocation().clone());
  }
  if (targetentities.size() > 0) {
    bplayer.addCooldown(""String_Node_Str"",cooldown);
  }
  this.player=player;
  this.time=System.currentTimeMillis();
  instances.put(player,this);
}",0.999586947542338
134093,"@Override public boolean isLoggable(LogRecord record){
  if (consoleError.contains(record.getMessage().replace(""String_Node_Str"",""String_Node_Str""))) {
    return false;
  }
 else   if (!record.getMessage().contains(""String_Node_Str"")) {
    if (record.getThrown() != null && record.getThrown().getMessage() != null) {
      if (record.getThrown().getMessage().contains(""String_Node_Str"")) {
        return true;
      }
    }
    return false;
  }
  return true;
}","@Override public boolean isLoggable(LogRecord record){
  if (consoleError.contains(record.getMessage().replace(""String_Node_Str"",""String_Node_Str""))) {
    return false;
  }
 else   if (!record.getMessage().contains(""String_Node_Str"")) {
    if (record.getThrown() != null) {
      if (record.getThrown().getMessage() != null) {
        if (record.getThrown().getMessage().contains(""String_Node_Str"")) {
          return true;
        }
      }
    }
    return false;
  }
  return true;
}",0.9664570230607966
134094,"public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    AirCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (int j=0; j < combo.tasks.size(); j++) {
        FireComboStream fs=(FireComboStream)combo.tasks.get(j);
        if (fs.getLocation() != null && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
  }
  return removed;
}","public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    AirCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (int j=0; j < combo.tasks.size(); j++) {
        FireComboStream fs=(FireComboStream)combo.tasks.get(j);
        if (fs.getLocation() != null && fs.getLocation().getWorld().equals(loc.getWorld()) && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
  }
  return removed;
}",0.978382706164932
134095,"public static void reloadPlugin(){
  DBConnection.sql.close();
  plugin.reloadConfig();
  ConfigManager.deathMsgConfig.reloadConfig();
  GeneralMethods.stopBending();
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  new AbilityModuleManager(plugin);
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
  }
}","public static void reloadPlugin(){
  DBConnection.sql.close();
  ConfigManager.defaultConfig.reloadConfig();
  ConfigManager.deathMsgConfig.reloadConfig();
  GeneralMethods.stopBending();
  BendingReloadEvent event=new BendingReloadEvent();
  Bukkit.getServer().getPluginManager().callEvent(event);
  new AbilityModuleManager(plugin);
  DBConnection.host=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.port=plugin.getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.db=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.user=plugin.getConfig().getString(""String_Node_Str"");
  DBConnection.init();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
  }
}",0.9800121138703816
134096,"public AirCombo(Player player,String ability){
  if (!enabled)   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).hasElement(Element.Air))   return;
  if (Commands.isToggledForAll)   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",player.getLocation()))   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled())   return;
  time=System.currentTimeMillis();
  this.player=player;
  this.ability=ability;
  this.bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (ChiMethods.isChiBlocked(player.getName()) || Bloodbending.isBloodbended(player) || Paralyze.isParalyzed(player)) {
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=0;
    range=TWISTER_RANGE;
    speed=TWISTER_SPEED;
    cooldown=TWISTER_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=0;
    range=AIR_STREAM_RANGE;
    speed=AIR_STREAM_SPEED;
    cooldown=AIR_STREAM_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=AIR_SLICE_DAMAGE;
    range=AIR_SLICE_RANGE;
    speed=AIR_SLICE_SPEED;
    cooldown=AIR_SLICE_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=AIR_SWEEP_DAMAGE;
    range=AIR_SWEEP_RANGE;
    speed=AIR_SWEEP_SPEED;
    knockback=AIR_SWEEP_KNOCKBACK;
    cooldown=AIR_SWEEP_COOLDOWN;
  }
  if (AvatarState.isAvatarState(player)) {
    cooldown=0;
    damage=AvatarState.getValue(damage);
    range=AvatarState.getValue(range);
    knockback=knockback * 1.4;
  }
  instances.add(this);
}","public AirCombo(Player player,String ability){
  if (!enabled)   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).hasElement(Element.Air))   return;
  if (Commands.isToggledForAll)   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",player.getLocation()))   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled())   return;
  time=System.currentTimeMillis();
  this.player=player;
  this.ability=ability;
  this.bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (GeneralMethods.canBend(player.getDisplayName(),ability)) {
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=0;
    range=TWISTER_RANGE;
    speed=TWISTER_SPEED;
    cooldown=TWISTER_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=0;
    range=AIR_STREAM_RANGE;
    speed=AIR_STREAM_SPEED;
    cooldown=AIR_STREAM_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=AIR_SLICE_DAMAGE;
    range=AIR_SLICE_RANGE;
    speed=AIR_SLICE_SPEED;
    cooldown=AIR_SLICE_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=AIR_SWEEP_DAMAGE;
    range=AIR_SWEEP_RANGE;
    speed=AIR_SWEEP_SPEED;
    knockback=AIR_SWEEP_KNOCKBACK;
    cooldown=AIR_SWEEP_COOLDOWN;
  }
  if (AvatarState.isAvatarState(player)) {
    cooldown=0;
    damage=AvatarState.getValue(damage);
    range=AvatarState.getValue(range);
    knockback=knockback * 1.4;
  }
  instances.add(this);
}",0.949326491340603
134097,"public static boolean checkForValidCombo(Player player){
  List<ChiCombo> combo=instances.get(player);
  for (  List<ChiCombo> knownCombo : knownCombos) {
    int size=knownCombo.size();
    if (combo.size() < size)     continue;
    boolean isValid=true;
    for (int i=1; i <= size; i++) {
      if (combo.get(combo.size() - i) != (knownCombo.get(knownCombo.size() - i))) {
        isValid=false;
        break;
      }
    }
    if (isValid) {
      if (combo.size() == 4 && combo.get(0) == ChiCombo.QuickStrike && combo.get(1) == ChiCombo.SwiftKick && combo.get(2) == ChiCombo.QuickStrike && combo.get(3) == ChiCombo.QuickStrike) {
        if (!GeneralMethods.getBendingPlayer(player.getName()).isOnCooldown(""String_Node_Str"")) {
          GeneralMethods.getBendingPlayer(player.getName()).addCooldown(""String_Node_Str"",cooldown);
          paralyzeTarget(player,paralysisDuration);
        }
      }
      instances.remove(player);
      return true;
    }
  }
  return false;
}","public static boolean checkForValidCombo(Player player){
  List<ChiCombo> combo=instances.get(player);
  for (  List<ChiCombo> knownCombo : knownCombos) {
    int size=knownCombo.size();
    if (combo.size() < size)     continue;
    boolean isValid=true;
    for (int i=1; i <= size; i++) {
      if (combo.get(combo.size() - i) != (knownCombo.get(knownCombo.size() - i))) {
        isValid=false;
        break;
      }
    }
    if (isValid) {
      if (combo.size() == 4 && combo.get(0) == ChiCombo.QuickStrike && combo.get(1) == ChiCombo.SwiftKick && combo.get(2) == ChiCombo.QuickStrike && combo.get(3) == ChiCombo.QuickStrike) {
        if (!GeneralMethods.getBendingPlayer(player.getName()).isOnCooldown(""String_Node_Str"") && GeneralMethods.canBend(player.getDisplayName(),""String_Node_Str"")) {
          GeneralMethods.getBendingPlayer(player.getName()).addCooldown(""String_Node_Str"",cooldown);
          paralyzeTarget(player,paralysisDuration);
        }
      }
      instances.remove(player);
      return true;
    }
  }
  return false;
}",0.9277641277641278
134098,"public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=ProjectKorra.plugin.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
plugin.saveConfig();
break;
}
}","public static void configCheck(ConfigType type){
  FileConfiguration config;
switch (type) {
case DEATH_MESSAGE:
    config=deathMsgConfig.getConfig();
  config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.options().copyDefaults(true);
deathMsgConfig.saveConfig();
break;
case DEFAULT:
config=defaultConfig.getConfig();
ArrayList<String> earthbendable=new ArrayList<String>();
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
earthbendable.add(""String_Node_Str"");
ArrayList<String> metals=new ArrayList<String>();
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
metals.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",62);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",300000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",earthbendable);
config.addDefault(""String_Node_Str"",metals);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
ArrayList<String> disabledWorlds=new ArrayList<String>();
disabledWorlds.add(""String_Node_Str"");
disabledWorlds.add(""String_Node_Str"");
config.addDefault(""String_Node_Str"",disabledWorlds);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7200000);
config.addDefault(""String_Node_Str"",480000);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1750);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",.675);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2.0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",0.35);
config.addDefault(""String_Node_Str"",16);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1.25);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",4000);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.4);
config.addDefault(""String_Node_Str"",14);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",750);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.75);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",0.2);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",180000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",50);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",Double.valueOf(10.0));
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",24);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",Double.valueOf(0.15));
config.addDefault(""String_Node_Str"",Double.valueOf(3.0));
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",11);
config.addDefault(""String_Node_Str"",13);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",Double.valueOf(2.0));
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",Double.valueOf(4.0));
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",18);
config.addDefault(""String_Node_Str"",45);
config.addDefault(""String_Node_Str"",60);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",12000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",12);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",8);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",17500);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",35);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",0.25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",40);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",16000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",7000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",10.0);
config.addDefault(""String_Node_Str"",8.0);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",5.0);
config.addDefault(""String_Node_Str"",0.05);
config.addDefault(""String_Node_Str"",0.10);
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",0.33);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1200);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",3.5);
config.addDefault(""String_Node_Str"",0.15);
config.addDefault(""String_Node_Str"",0.72);
config.addDefault(""String_Node_Str"",3000);
config.addDefault(""String_Node_Str"",30000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",0.6);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",9);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",1.0);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",0.3);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.7);
config.addDefault(""String_Node_Str"",1500);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",1.5);
config.addDefault(""String_Node_Str"",1000);
config.addDefault(""String_Node_Str"",6);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",10);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
config.addDefault(""String_Node_Str"",5);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",13.0);
config.addDefault(""String_Node_Str"",3500);
config.addDefault(""String_Node_Str"",0);
config.addDefault(""String_Node_Str"",0.20);
config.addDefault(""String_Node_Str"",30.0);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",0.025);
config.addDefault(""String_Node_Str"",6.0);
config.addDefault(""String_Node_Str"",0.50);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",12.0);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",false);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",5000);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",7500);
config.addDefault(""String_Node_Str"",500);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",7.0);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",7);
config.addDefault(""String_Node_Str"",3.0);
config.addDefault(""String_Node_Str"",3.2);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",20.0);
config.addDefault(""String_Node_Str"",4.0);
config.addDefault(""String_Node_Str"",0.55);
config.addDefault(""String_Node_Str"",200);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",1.2);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",1.1);
config.addDefault(""String_Node_Str"",3);
config.addDefault(""String_Node_Str"",6000);
config.addDefault(""String_Node_Str"",2.5);
config.addDefault(""String_Node_Str"",0.5);
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",2500);
config.addDefault(""String_Node_Str"",25);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",20000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",0.1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",10000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",2000);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",50000);
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",15);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",1);
config.addDefault(""String_Node_Str"",-1);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",2);
config.addDefault(""String_Node_Str"",20);
config.addDefault(""String_Node_Str"",true);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",4);
config.addDefault(""String_Node_Str"",30);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",3306);
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",""String_Node_Str"");
config.addDefault(""String_Node_Str"",false);
config.options().copyDefaults(true);
defaultConfig.saveConfig();
break;
}
}",0.9985577000988544
134099,"public ConfigManager(ProjectKorra plugin){
  ConfigManager.plugin=plugin;
  deathMsgConfig=new Config(new File(""String_Node_Str""));
  configCheck(ConfigType.DEFAULT);
  configCheck(ConfigType.DEATH_MESSAGE);
}","public ConfigManager(ProjectKorra plugin){
  ConfigManager.plugin=plugin;
  deathMsgConfig=new Config(new File(""String_Node_Str""));
  defaultConfig=new Config(new File(""String_Node_Str""));
  configCheck(ConfigType.DEFAULT);
  configCheck(ConfigType.DEATH_MESSAGE);
}",0.88
134100,"public FireCombo(Player player,String ability){
  if (!enabled)   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).hasElement(Element.Fire))   return;
  if (Commands.isToggledForAll)   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",player.getLocation()))   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled())   return;
  time=System.currentTimeMillis();
  this.player=player;
  this.ability=ability;
  this.bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (ChiMethods.isChiBlocked(player.getName()) || Bloodbending.isBloodbended(player) || Paralyze.isParalyzed(player)) {
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=FIRE_KICK_DAMAGE;
    range=FIRE_KICK_RANGE;
    speed=1;
    cooldown=FIRE_KICK_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=FIRE_SPIN_DAMAGE;
    range=FIRE_SPIN_RANGE;
    speed=0.3;
    cooldown=FIRE_SPIN_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=FIRE_WHEEL_DAMAGE;
    range=FIRE_WHEEL_RANGE;
    speed=FIRE_WHEEL_SPEED;
    cooldown=FIRE_WHEEL_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    speed=JET_BLAST_SPEED;
    cooldown=JET_BLAST_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=JET_BLAZE_DAMAGE;
    speed=JET_BLAZE_SPEED;
    cooldown=JET_BLAZE_COOLDOWN;
  }
  if (AvatarState.isAvatarState(player)) {
    cooldown=0;
    damage=AvatarState.getValue(damage);
    range=AvatarState.getValue(range);
  }
  instances.add(this);
}","public FireCombo(Player player,String ability){
  if (!enabled)   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).hasElement(Element.Fire))   return;
  if (Commands.isToggledForAll)   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",player.getLocation()))   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled())   return;
  time=System.currentTimeMillis();
  this.player=player;
  this.ability=ability;
  this.bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (GeneralMethods.canBend(player.getDisplayName(),ability)) {
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=FIRE_KICK_DAMAGE;
    range=FIRE_KICK_RANGE;
    speed=1;
    cooldown=FIRE_KICK_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=FIRE_SPIN_DAMAGE;
    range=FIRE_SPIN_RANGE;
    speed=0.3;
    cooldown=FIRE_SPIN_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=FIRE_WHEEL_DAMAGE;
    range=FIRE_WHEEL_RANGE;
    speed=FIRE_WHEEL_SPEED;
    cooldown=FIRE_WHEEL_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    speed=JET_BLAST_SPEED;
    cooldown=JET_BLAST_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=JET_BLAZE_DAMAGE;
    speed=JET_BLAZE_SPEED;
    cooldown=JET_BLAZE_COOLDOWN;
  }
  if (AvatarState.isAvatarState(player)) {
    cooldown=0;
    damage=AvatarState.getValue(damage);
    range=AvatarState.getValue(range);
  }
  instances.add(this);
}",0.9506866416978776
134101,"public WaterCombo(Player player,String ability){
  if (!enabled)   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).hasElement(Element.Water))   return;
  if (Commands.isToggledForAll)   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",player.getLocation()))   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled())   return;
  time=System.currentTimeMillis();
  this.player=player;
  this.ability=ability;
  this.bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (ChiMethods.isChiBlocked(player.getName()) || Bloodbending.isBloodbended(player) || Paralyze.isParalyzed(player)) {
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    cooldown=ICE_WAVE_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=ICE_PILLAR_DAMAGE;
    range=ICE_PILLAR_RANGE;
    radius=ICE_PILLAR_RADIUS;
    cooldown=ICE_WAVE_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=ICE_BULLET_DAMAGE;
    range=ICE_BULLET_RANGE;
    radius=ICE_BULLET_RADIUS;
    cooldown=ICE_BULLET_COOLDOWN;
    shootTime=ICE_BULLET_SHOOT_TIME;
    maxShots=ICE_BULLET_MAX_SHOTS;
    speed=1;
  }
  double aug=WaterMethods.getWaterbendingNightAugment(player.getWorld());
  if (aug > 1)   aug=1 + (aug - 1) / 3;
  damage*=aug;
  range*=aug;
  shootTime*=aug;
  maxShots*=aug;
  radius*=aug;
  if (AvatarState.isAvatarState(player)) {
    cooldown=0;
    damage=AvatarState.getValue(damage);
    range=AvatarState.getValue(range);
    shootTime=AvatarState.getValue(shootTime);
    maxShots=AvatarState.getValue(maxShots);
    knockback=knockback * 1.3;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"") || ability.equalsIgnoreCase(""String_Node_Str"")) {
    ArrayList<WaterCombo> bullets=getWaterCombo(player,""String_Node_Str"");
    if (bullets.size() == 0)     return;
    for (    WaterCombo bullet : bullets) {
      if (ability.equalsIgnoreCase(""String_Node_Str"")) {
        if (bullet.leftClicks <= bullet.rightClicks)         bullet.leftClicks+=1;
      }
 else       if (bullet.leftClicks >= bullet.rightClicks)       bullet.rightClicks+=1;
    }
  }
  instances.add(this);
}","public WaterCombo(Player player,String ability){
  if (!enabled)   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).hasElement(Element.Water))   return;
  if (Commands.isToggledForAll)   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",player.getLocation()))   return;
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled())   return;
  time=System.currentTimeMillis();
  this.player=player;
  this.ability=ability;
  this.bplayer=GeneralMethods.getBendingPlayer(player.getName());
  if (GeneralMethods.canBend(player.getDisplayName(),ability)) {
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    cooldown=ICE_WAVE_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=ICE_PILLAR_DAMAGE;
    range=ICE_PILLAR_RANGE;
    radius=ICE_PILLAR_RADIUS;
    cooldown=ICE_WAVE_COOLDOWN;
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    damage=ICE_BULLET_DAMAGE;
    range=ICE_BULLET_RANGE;
    radius=ICE_BULLET_RADIUS;
    cooldown=ICE_BULLET_COOLDOWN;
    shootTime=ICE_BULLET_SHOOT_TIME;
    maxShots=ICE_BULLET_MAX_SHOTS;
    speed=1;
  }
  double aug=WaterMethods.getWaterbendingNightAugment(player.getWorld());
  if (aug > 1)   aug=1 + (aug - 1) / 3;
  damage*=aug;
  range*=aug;
  shootTime*=aug;
  maxShots*=aug;
  radius*=aug;
  if (AvatarState.isAvatarState(player)) {
    cooldown=0;
    damage=AvatarState.getValue(damage);
    range=AvatarState.getValue(range);
    shootTime=AvatarState.getValue(shootTime);
    maxShots=AvatarState.getValue(maxShots);
    knockback=knockback * 1.3;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"") || ability.equalsIgnoreCase(""String_Node_Str"")) {
    ArrayList<WaterCombo> bullets=getWaterCombo(player,""String_Node_Str"");
    if (bullets.size() == 0)     return;
    for (    WaterCombo bullet : bullets) {
      if (ability.equalsIgnoreCase(""String_Node_Str"")) {
        if (bullet.leftClicks <= bullet.rightClicks)         bullet.leftClicks+=1;
      }
 else       if (bullet.leftClicks >= bullet.rightClicks)       bullet.rightClicks+=1;
    }
  }
  instances.add(this);
}",0.9747937671860678
134102,"private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      for (int i=0; i < args.length; i++) {
        args[i]=args[i].toLowerCase();
      }
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0])) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2])) {
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2])) {
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2])) {
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2])) {
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(avataraliases).contains(args[0])) {
        if (!GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        UUID uuid=player.getUniqueId();
        if (RPGMethods.hasBeenAvatar(uuid)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        RPGMethods.setAvatar(uuid);
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(bindaliases).contains(args[0])) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(checkaliases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (s instanceof Player) {
          if (plugin.updater.updateAvailable()) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
          }
 else {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
          }
        }
 else         if (s instanceof ConsoleCommandSender) {
          plugin.updater.checkUpdate();
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0])) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Air);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Water);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Earth);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Fire);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Chi);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            GeneralMethods.removeUnusableAbilities(target.getName());
            GeneralMethods.saveElements(bTarget);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
            return true;
          }
        }
      }
      if (Arrays.asList(clearaliases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.getAbilities().clear();
          for (int i=1; i <= 9; i++) {
            GeneralMethods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          try {
            int slot=Integer.parseInt(args[1]);
            if (slot < 1 || slot > 9) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            if (bPlayer.getAbilities().get(slot) != null) {
              bPlayer.getAbilities().remove(slot);
              GeneralMethods.saveAbility(bPlayer,slot,null);
            }
            s.sendMessage(""String_Node_Str"" + slot);
            return true;
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.runDebug();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(airaliases).contains(args[1])) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(AirMethods.getAirColor() + st);
              }
            }
            if (!AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(flightaliases).contains(args[1])) {
            if (AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.flightabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(spiritualprojectionaliases).contains(args[1])) {
            if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.spiritualprojectionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1])) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(WaterMethods.getWaterColor() + st);
              }
            }
            if (!AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(bloodaliases).contains(args[1])) {
            if (AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.bloodabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(healingaliases).contains(args[1])) {
            if (AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.healingabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(icealiases).contains(args[1])) {
            if (AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.iceabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(plantaliases).contains(args[1])) {
            if (AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.plantabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1])) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(EarthMethods.getEarthColor() + st);
              }
            }
            if (!AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lavabendingaliases).contains(args[1])) {
            if (AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lavaabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(metalbendingaliases).contains(args[1])) {
            if (AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.metalabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(sandbendingaliases).contains(args[1])) {
            if (AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.sandabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1])) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(FireMethods.getFireColor() + st);
              }
            }
            if (!AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lightningaliases).contains(args[1])) {
            if (AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lightningabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
          }
          if (Arrays.asList(combustionaliases).contains(args[1])) {
            if (AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.combustionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
          }
          if (Arrays.asList(chialiases).contains(args[1])) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(ChiMethods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          if (abilities.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null && !ability.equalsIgnoreCase(""String_Node_Str""))             s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(givealiases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length < 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(grapplinghookaliases).contains(args[2])) {
          if (args.length != 4) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          int uses;
          try {
            uses=Integer.parseInt(args[3]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
            return true;
          }
          ItemStack hook=GrapplingHookAPI.createHook(uses);
          player.getInventory().addItem(hook);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
          return true;
        }
 else {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!GeneralMethods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.getAbilities();
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!invincible.contains(s.getName())) {
          invincible.add(s.getName());
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
 else {
          invincible.remove(s.getName());
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(permaremovealiases).contains(args[0])) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          GeneralMethods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        GeneralMethods.removeUnusableAbilities(player.getName());
        GeneralMethods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        GeneralMethods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
        return true;
      }
      if (Arrays.asList(presetaliases).contains(args[0])) {
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=(Player)s;
        String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] listaliases={""String_Node_Str"",""String_Node_Str""};
        if (args.length == 2 && Arrays.asList(listaliases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          List<Preset> presets=Preset.presets.get(player.getUniqueId());
          List<String> presetNames=new ArrayList<String>();
          if (presets == null || presets.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          for (          Preset preset : presets) {
            presetNames.add(preset.getName());
          }
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ presetNames.toString());
          return true;
        }
 else         if (args.length != 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        String name=args[2];
        if (Arrays.asList(deletealiases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset preset=Preset.getPreset(player,name);
          preset.delete();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
        }
        if (Arrays.asList(bindaliases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset.bindPreset(player,name);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name+ ChatColor.GREEN+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(createaliases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          int limit=GeneralMethods.getMaxPresets(player);
          if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (bPlayer == null)           return true;
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          Preset preset=new Preset(player.getUniqueId(),name,abilities);
          preset.save();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
          return true;
        }
      }
      if (Arrays.asList(reloadaliases).contains(args[0])) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0])) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        GeneralMethods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
        return true;
      }
      if (Arrays.asList(versionaliases).contains(args[0])) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
        if (GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
        }
        if (GeneralMethods.hasItems()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(togglealiases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            final String player=args[1];
            final CommandSender sender=s;
            new BukkitRunnable(){
              @Override public void run(){
                ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
                try {
                  final List<String> messages=new ArrayList<String>();
                  if (rs2.next()) {
                    UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                    String element=rs2.getString(""String_Node_Str"");
                    messages.add(player + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                    if (GeneralMethods.hasRPG()) {
                      if (RPGMethods.isCurrentAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else                       if (RPGMethods.hasBeenAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else {
                      }
                    }
                  }
 else {
                    messages.add(ChatColor.RED + ""String_Node_Str"");
                  }
                  new BukkitRunnable(){
                    @Override public void run(){
                      for (                      String message : messages) {
                        sender.sendMessage(message);
                      }
                    }
                  }
.runTask(ProjectKorra.plugin);
                }
 catch (                SQLException e) {
                  e.printStackTrace();
                }
              }
            }
.runTaskAsynchronously(ProjectKorra.plugin);
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (GeneralMethods.isBender(un,Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            if (AirMethods.canAirFlight(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (AirMethods.canUseSpiritualProjection(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            if (WaterMethods.canPlantbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canBloodbend(p)) {
              if (WaterMethods.canBloodbendAtAnytime(p)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              }
 else {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              }
            }
            if (WaterMethods.canIcebend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canWaterHeal(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            if (EarthMethods.canMetalbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canLavabend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canSandbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            if (FireMethods.canCombustionbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (FireMethods.canLightningbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
          UUID uuid2=bPlayer.uuid;
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (GeneralMethods.hasRPG()) {
            if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
 else             if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.BLUE + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(GeneralMethods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Air)) {
              players.add(AirMethods.getAirColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Water)) {
              players.add(WaterMethods.getWaterColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Earth)) {
              players.add(EarthMethods.getEarthColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Chi)) {
              players.add(ChiMethods.getChiColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Fire)) {
              players.add(FireMethods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1])) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1])) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1])) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1])) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1])) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(invinciblealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(givealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Fire.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=FireMethods.getFireColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.Fire);
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Air.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=AirMethods.getAirColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Water.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=WaterMethods.getWaterColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Earth.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=EarthMethods.getEarthColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Chi.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=ChiMethods.getChiColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (GeneralMethods.abilityExists(args[1])) {
          String ability=GeneralMethods.getAbility(args[1]);
          if (AirMethods.isAirAbility(ability)) {
            s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (WaterMethods.isWaterAbility(ability)) {
            s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (EarthMethods.isEarthAbility(ability)) {
            if (EarthMethods.isMetalbendingAbility(ability)) {
              s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (FireMethods.isFireAbility(ability)) {
            s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (ChiMethods.isChiAbility(ability)) {
            s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}","private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      for (int i=0; i < args.length; i++) {
        args[i]=args[i].toLowerCase();
      }
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0])) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2])) {
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2])) {
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2])) {
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2])) {
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(avataraliases).contains(args[0])) {
        if (!GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        UUID uuid=player.getUniqueId();
        if (RPGMethods.hasBeenAvatar(uuid)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        RPGMethods.setAvatar(uuid);
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(bindaliases).contains(args[0])) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(checkaliases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (s instanceof Player) {
          if (plugin.updater.updateAvailable()) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
          }
 else {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
          }
        }
 else         if (s instanceof ConsoleCommandSender) {
          plugin.updater.checkUpdate();
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0])) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Air);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Water);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Earth);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Fire);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1])) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Chi);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            GeneralMethods.removeUnusableAbilities(target.getName());
            GeneralMethods.saveElements(bTarget);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
            return true;
          }
        }
      }
      if (Arrays.asList(clearaliases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.getAbilities().clear();
          for (int i=1; i <= 9; i++) {
            GeneralMethods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          try {
            int slot=Integer.parseInt(args[1]);
            if (slot < 1 || slot > 9) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            if (bPlayer.getAbilities().get(slot) != null) {
              bPlayer.getAbilities().remove(slot);
              GeneralMethods.saveAbility(bPlayer,slot,null);
            }
            s.sendMessage(""String_Node_Str"" + slot);
            return true;
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.runDebug();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(airaliases).contains(args[1])) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(AirMethods.getAirColor() + st);
              }
            }
            if (!AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(flightaliases).contains(args[1])) {
            if (AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.flightabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(spiritualprojectionaliases).contains(args[1])) {
            if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.spiritualprojectionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1])) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(WaterMethods.getWaterColor() + st);
              }
            }
            if (!AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(bloodaliases).contains(args[1])) {
            if (AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.bloodabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(healingaliases).contains(args[1])) {
            if (AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.healingabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(icealiases).contains(args[1])) {
            if (AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.iceabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(plantaliases).contains(args[1])) {
            if (AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.plantabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1])) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(EarthMethods.getEarthColor() + st);
              }
            }
            if (!AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lavabendingaliases).contains(args[1])) {
            if (AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lavaabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(metalbendingaliases).contains(args[1])) {
            if (AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.metalabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(sandbendingaliases).contains(args[1])) {
            if (AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.sandabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1])) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(FireMethods.getFireColor() + st);
              }
            }
            if (!AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lightningaliases).contains(args[1])) {
            if (AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lightningabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(combustionaliases).contains(args[1])) {
            if (AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.combustionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1])) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(ChiMethods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          if (abilities.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null && !ability.equalsIgnoreCase(""String_Node_Str""))             s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(givealiases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length < 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(grapplinghookaliases).contains(args[2])) {
          if (args.length != 4) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          int uses;
          try {
            uses=Integer.parseInt(args[3]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
            return true;
          }
          ItemStack hook=GrapplingHookAPI.createHook(uses);
          player.getInventory().addItem(hook);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
          return true;
        }
 else {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!GeneralMethods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.getAbilities();
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!invincible.contains(s.getName())) {
          invincible.add(s.getName());
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
 else {
          invincible.remove(s.getName());
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(permaremovealiases).contains(args[0])) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          GeneralMethods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        GeneralMethods.removeUnusableAbilities(player.getName());
        GeneralMethods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        GeneralMethods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
        return true;
      }
      if (Arrays.asList(presetaliases).contains(args[0])) {
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=(Player)s;
        String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] listaliases={""String_Node_Str"",""String_Node_Str""};
        if (args.length == 2 && Arrays.asList(listaliases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          List<Preset> presets=Preset.presets.get(player.getUniqueId());
          List<String> presetNames=new ArrayList<String>();
          if (presets == null || presets.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          for (          Preset preset : presets) {
            presetNames.add(preset.getName());
          }
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ presetNames.toString());
          return true;
        }
 else         if (args.length != 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        String name=args[2];
        if (Arrays.asList(deletealiases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset preset=Preset.getPreset(player,name);
          preset.delete();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
        }
        if (Arrays.asList(bindaliases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset.bindPreset(player,name);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name+ ChatColor.GREEN+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(createaliases).contains(args[1])) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          int limit=GeneralMethods.getMaxPresets(player);
          if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (bPlayer == null)           return true;
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          Preset preset=new Preset(player.getUniqueId(),name,abilities);
          preset.save();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
          return true;
        }
      }
      if (Arrays.asList(reloadaliases).contains(args[0])) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0])) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        GeneralMethods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
        return true;
      }
      if (Arrays.asList(versionaliases).contains(args[0])) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
        if (GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
        }
        if (GeneralMethods.hasItems()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(togglealiases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0])) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            final String player=args[1];
            final CommandSender sender=s;
            new BukkitRunnable(){
              @Override public void run(){
                ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
                try {
                  final List<String> messages=new ArrayList<String>();
                  if (rs2.next()) {
                    UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                    String element=rs2.getString(""String_Node_Str"");
                    messages.add(player + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                    if (GeneralMethods.hasRPG()) {
                      if (RPGMethods.isCurrentAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else                       if (RPGMethods.hasBeenAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else {
                      }
                    }
                  }
 else {
                    messages.add(ChatColor.RED + ""String_Node_Str"");
                  }
                  new BukkitRunnable(){
                    @Override public void run(){
                      for (                      String message : messages) {
                        sender.sendMessage(message);
                      }
                    }
                  }
.runTask(ProjectKorra.plugin);
                }
 catch (                SQLException e) {
                  e.printStackTrace();
                }
              }
            }
.runTaskAsynchronously(ProjectKorra.plugin);
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (GeneralMethods.isBender(un,Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            if (AirMethods.canAirFlight(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (AirMethods.canUseSpiritualProjection(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            if (WaterMethods.canPlantbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canBloodbend(p)) {
              if (WaterMethods.canBloodbendAtAnytime(p)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              }
 else {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              }
            }
            if (WaterMethods.canIcebend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canWaterHeal(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            if (EarthMethods.canMetalbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canLavabend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canSandbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            if (FireMethods.canCombustionbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (FireMethods.canLightningbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
          UUID uuid2=bPlayer.uuid;
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (GeneralMethods.hasRPG()) {
            if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
 else             if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.BLUE + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(GeneralMethods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Air)) {
              players.add(AirMethods.getAirColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Water)) {
              players.add(WaterMethods.getWaterColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Earth)) {
              players.add(EarthMethods.getEarthColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Chi)) {
              players.add(ChiMethods.getChiColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Fire)) {
              players.add(FireMethods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1])) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1])) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1])) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1])) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1])) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(invinciblealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(givealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1])) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Fire.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=FireMethods.getFireColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.Fire);
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Air.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=AirMethods.getAirColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Water.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=WaterMethods.getWaterColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Earth.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=EarthMethods.getEarthColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Chi.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null) {
                color=ChiMethods.getChiColor();
              }
 else {
                color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              }
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (GeneralMethods.abilityExists(args[1])) {
          String ability=GeneralMethods.getAbility(args[1]);
          if (AirMethods.isAirAbility(ability)) {
            s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (WaterMethods.isWaterAbility(ability)) {
            s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (EarthMethods.isEarthAbility(ability)) {
            if (EarthMethods.isMetalbendingAbility(ability)) {
              s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (FireMethods.isFireAbility(ability)) {
            s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (ChiMethods.isChiAbility(ability)) {
            s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}",0.9996775899201712
134103,"@SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  for (int i=0; i < args.length; i++) {
    args[i]=args[i].toLowerCase();
  }
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0])) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2])) {
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2])) {
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2])) {
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2])) {
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(avataraliases).contains(args[0])) {
    if (!GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    UUID uuid=player.getUniqueId();
    if (RPGMethods.hasBeenAvatar(uuid)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    RPGMethods.setAvatar(uuid);
    s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(bindaliases).contains(args[0])) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(checkaliases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (s instanceof Player) {
      if (plugin.updater.updateAvailable()) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
      }
 else {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
      }
    }
 else     if (s instanceof ConsoleCommandSender) {
      plugin.updater.checkUpdate();
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0])) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Air);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Water);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Earth);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Fire);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Chi);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        GeneralMethods.removeUnusableAbilities(target.getName());
        GeneralMethods.saveElements(bTarget);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
        return true;
      }
    }
  }
  if (Arrays.asList(clearaliases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.getAbilities().clear();
      for (int i=1; i <= 9; i++) {
        GeneralMethods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      try {
        int slot=Integer.parseInt(args[1]);
        if (slot < 1 || slot > 9) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (bPlayer.getAbilities().get(slot) != null) {
          bPlayer.getAbilities().remove(slot);
          GeneralMethods.saveAbility(bPlayer,slot,null);
        }
        s.sendMessage(""String_Node_Str"" + slot);
        return true;
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.runDebug();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(airaliases).contains(args[1])) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(AirMethods.getAirColor() + st);
          }
        }
        if (!AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(flightaliases).contains(args[1])) {
        if (AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.flightabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(spiritualprojectionaliases).contains(args[1])) {
        if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.spiritualprojectionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1])) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(WaterMethods.getWaterColor() + st);
          }
        }
        if (!AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(bloodaliases).contains(args[1])) {
        if (AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.bloodabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(healingaliases).contains(args[1])) {
        if (AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.healingabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(icealiases).contains(args[1])) {
        if (AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.iceabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(plantaliases).contains(args[1])) {
        if (AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.plantabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1])) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(EarthMethods.getEarthColor() + st);
          }
        }
        if (!AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lavabendingaliases).contains(args[1])) {
        if (AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lavaabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(metalbendingaliases).contains(args[1])) {
        if (AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.metalabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(sandbendingaliases).contains(args[1])) {
        if (AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.sandabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1])) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(FireMethods.getFireColor() + st);
          }
        }
        if (!AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lightningaliases).contains(args[1])) {
        if (AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lightningabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
      }
      if (Arrays.asList(combustionaliases).contains(args[1])) {
        if (AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.combustionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
      }
      if (Arrays.asList(chialiases).contains(args[1])) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(ChiMethods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      if (abilities.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null && !ability.equalsIgnoreCase(""String_Node_Str""))         s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(givealiases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length < 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(grapplinghookaliases).contains(args[2])) {
      if (args.length != 4) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      int uses;
      try {
        uses=Integer.parseInt(args[3]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
        return true;
      }
      ItemStack hook=GrapplingHookAPI.createHook(uses);
      player.getInventory().addItem(hook);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
      return true;
    }
 else {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!GeneralMethods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!invincible.contains(s.getName())) {
      invincible.add(s.getName());
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else {
      invincible.remove(s.getName());
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(permaremovealiases).contains(args[0])) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      GeneralMethods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    GeneralMethods.removeUnusableAbilities(player.getName());
    GeneralMethods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    GeneralMethods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
    return true;
  }
  if (Arrays.asList(presetaliases).contains(args[0])) {
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=(Player)s;
    String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] listaliases={""String_Node_Str"",""String_Node_Str""};
    if (args.length == 2 && Arrays.asList(listaliases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      List<Preset> presets=Preset.presets.get(player.getUniqueId());
      List<String> presetNames=new ArrayList<String>();
      if (presets == null || presets.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      for (      Preset preset : presets) {
        presetNames.add(preset.getName());
      }
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ presetNames.toString());
      return true;
    }
 else     if (args.length != 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    String name=args[2];
    if (Arrays.asList(deletealiases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset preset=Preset.getPreset(player,name);
      preset.delete();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
    }
    if (Arrays.asList(bindaliases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset.bindPreset(player,name);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name+ ChatColor.GREEN+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(createaliases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      int limit=GeneralMethods.getMaxPresets(player);
      if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (bPlayer == null)       return true;
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      Preset preset=new Preset(player.getUniqueId(),name,abilities);
      preset.save();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
      return true;
    }
  }
  if (Arrays.asList(reloadaliases).contains(args[0])) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0])) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    GeneralMethods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    GeneralMethods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
    return true;
  }
  if (Arrays.asList(versionaliases).contains(args[0])) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
    if (GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
    }
    if (GeneralMethods.hasItems()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(togglealiases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        final String player=args[1];
        final CommandSender sender=s;
        new BukkitRunnable(){
          @Override public void run(){
            ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
            try {
              final List<String> messages=new ArrayList<String>();
              if (rs2.next()) {
                UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                String element=rs2.getString(""String_Node_Str"");
                messages.add(player + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                if (GeneralMethods.hasRPG()) {
                  if (RPGMethods.isCurrentAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else                   if (RPGMethods.hasBeenAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else {
                  }
                }
              }
 else {
                messages.add(ChatColor.RED + ""String_Node_Str"");
              }
              new BukkitRunnable(){
                @Override public void run(){
                  for (                  String message : messages) {
                    sender.sendMessage(message);
                  }
                }
              }
.runTask(ProjectKorra.plugin);
            }
 catch (            SQLException e) {
              e.printStackTrace();
            }
          }
        }
.runTaskAsynchronously(ProjectKorra.plugin);
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (GeneralMethods.isBender(un,Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        if (AirMethods.canAirFlight(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (AirMethods.canUseSpiritualProjection(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        if (WaterMethods.canPlantbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canBloodbend(p)) {
          if (WaterMethods.canBloodbendAtAnytime(p)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          }
 else {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          }
        }
        if (WaterMethods.canIcebend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canWaterHeal(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        if (EarthMethods.canMetalbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canLavabend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canSandbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        if (FireMethods.canCombustionbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (FireMethods.canLightningbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
      UUID uuid2=bPlayer.uuid;
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (GeneralMethods.hasRPG()) {
        if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
 else         if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.BLUE + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(GeneralMethods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Air)) {
          players.add(AirMethods.getAirColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Water)) {
          players.add(WaterMethods.getWaterColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Earth)) {
          players.add(EarthMethods.getEarthColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Chi)) {
          players.add(ChiMethods.getChiColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Fire)) {
          players.add(FireMethods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1])) {
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1])) {
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1])) {
      s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1])) {
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1])) {
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(invinciblealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(givealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Fire.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=FireMethods.getFireColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.Fire);
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Air.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=AirMethods.getAirColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Water.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=WaterMethods.getWaterColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Earth.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=EarthMethods.getEarthColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Chi.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=ChiMethods.getChiColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (GeneralMethods.abilityExists(args[1])) {
      String ability=GeneralMethods.getAbility(args[1]);
      if (AirMethods.isAirAbility(ability)) {
        s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (WaterMethods.isWaterAbility(ability)) {
        s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (EarthMethods.isEarthAbility(ability)) {
        if (EarthMethods.isMetalbendingAbility(ability)) {
          s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (FireMethods.isFireAbility(ability)) {
        s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (ChiMethods.isChiAbility(ability)) {
        s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  for (int i=0; i < args.length; i++) {
    args[i]=args[i].toLowerCase();
  }
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0])) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2])) {
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2])) {
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2])) {
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2])) {
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(avataraliases).contains(args[0])) {
    if (!GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    UUID uuid=player.getUniqueId();
    if (RPGMethods.hasBeenAvatar(uuid)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    RPGMethods.setAvatar(uuid);
    s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(bindaliases).contains(args[0])) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(checkaliases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (s instanceof Player) {
      if (plugin.updater.updateAvailable()) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
      }
 else {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
      }
    }
 else     if (s instanceof ConsoleCommandSender) {
      plugin.updater.checkUpdate();
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0])) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Air);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Water);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Earth);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Fire);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1])) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Chi);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        GeneralMethods.removeUnusableAbilities(target.getName());
        GeneralMethods.saveElements(bTarget);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
        return true;
      }
    }
  }
  if (Arrays.asList(clearaliases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.getAbilities().clear();
      for (int i=1; i <= 9; i++) {
        GeneralMethods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      try {
        int slot=Integer.parseInt(args[1]);
        if (slot < 1 || slot > 9) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (bPlayer.getAbilities().get(slot) != null) {
          bPlayer.getAbilities().remove(slot);
          GeneralMethods.saveAbility(bPlayer,slot,null);
        }
        s.sendMessage(""String_Node_Str"" + slot);
        return true;
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.runDebug();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(airaliases).contains(args[1])) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(AirMethods.getAirColor() + st);
          }
        }
        if (!AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(flightaliases).contains(args[1])) {
        if (AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.flightabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(spiritualprojectionaliases).contains(args[1])) {
        if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.spiritualprojectionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1])) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(WaterMethods.getWaterColor() + st);
          }
        }
        if (!AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(bloodaliases).contains(args[1])) {
        if (AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.bloodabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(healingaliases).contains(args[1])) {
        if (AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.healingabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(icealiases).contains(args[1])) {
        if (AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.iceabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(plantaliases).contains(args[1])) {
        if (AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.plantabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1])) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(EarthMethods.getEarthColor() + st);
          }
        }
        if (!AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lavabendingaliases).contains(args[1])) {
        if (AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lavaabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(metalbendingaliases).contains(args[1])) {
        if (AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.metalabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(sandbendingaliases).contains(args[1])) {
        if (AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.sandabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1])) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(FireMethods.getFireColor() + st);
          }
        }
        if (!AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lightningaliases).contains(args[1])) {
        if (AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lightningabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(combustionaliases).contains(args[1])) {
        if (AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.combustionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1])) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(ChiMethods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      if (abilities.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null && !ability.equalsIgnoreCase(""String_Node_Str""))         s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(givealiases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length < 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(grapplinghookaliases).contains(args[2])) {
      if (args.length != 4) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      int uses;
      try {
        uses=Integer.parseInt(args[3]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
        return true;
      }
      ItemStack hook=GrapplingHookAPI.createHook(uses);
      player.getInventory().addItem(hook);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
      return true;
    }
 else {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!GeneralMethods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!invincible.contains(s.getName())) {
      invincible.add(s.getName());
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else {
      invincible.remove(s.getName());
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(permaremovealiases).contains(args[0])) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      GeneralMethods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    GeneralMethods.removeUnusableAbilities(player.getName());
    GeneralMethods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    GeneralMethods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
    return true;
  }
  if (Arrays.asList(presetaliases).contains(args[0])) {
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=(Player)s;
    String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] listaliases={""String_Node_Str"",""String_Node_Str""};
    if (args.length == 2 && Arrays.asList(listaliases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      List<Preset> presets=Preset.presets.get(player.getUniqueId());
      List<String> presetNames=new ArrayList<String>();
      if (presets == null || presets.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      for (      Preset preset : presets) {
        presetNames.add(preset.getName());
      }
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ presetNames.toString());
      return true;
    }
 else     if (args.length != 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    String name=args[2];
    if (Arrays.asList(deletealiases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset preset=Preset.getPreset(player,name);
      preset.delete();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
    }
    if (Arrays.asList(bindaliases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset.bindPreset(player,name);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name+ ChatColor.GREEN+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(createaliases).contains(args[1])) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      int limit=GeneralMethods.getMaxPresets(player);
      if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (bPlayer == null)       return true;
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      Preset preset=new Preset(player.getUniqueId(),name,abilities);
      preset.save();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
      return true;
    }
  }
  if (Arrays.asList(reloadaliases).contains(args[0])) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0])) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    GeneralMethods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    GeneralMethods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
    return true;
  }
  if (Arrays.asList(versionaliases).contains(args[0])) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
    if (GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
    }
    if (GeneralMethods.hasItems()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(togglealiases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0])) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        final String player=args[1];
        final CommandSender sender=s;
        new BukkitRunnable(){
          @Override public void run(){
            ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
            try {
              final List<String> messages=new ArrayList<String>();
              if (rs2.next()) {
                UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                String element=rs2.getString(""String_Node_Str"");
                messages.add(player + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                if (GeneralMethods.hasRPG()) {
                  if (RPGMethods.isCurrentAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else                   if (RPGMethods.hasBeenAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else {
                  }
                }
              }
 else {
                messages.add(ChatColor.RED + ""String_Node_Str"");
              }
              new BukkitRunnable(){
                @Override public void run(){
                  for (                  String message : messages) {
                    sender.sendMessage(message);
                  }
                }
              }
.runTask(ProjectKorra.plugin);
            }
 catch (            SQLException e) {
              e.printStackTrace();
            }
          }
        }
.runTaskAsynchronously(ProjectKorra.plugin);
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (GeneralMethods.isBender(un,Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        if (AirMethods.canAirFlight(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (AirMethods.canUseSpiritualProjection(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        if (WaterMethods.canPlantbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canBloodbend(p)) {
          if (WaterMethods.canBloodbendAtAnytime(p)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          }
 else {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          }
        }
        if (WaterMethods.canIcebend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canWaterHeal(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        if (EarthMethods.canMetalbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canLavabend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canSandbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        if (FireMethods.canCombustionbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (FireMethods.canLightningbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
      UUID uuid2=bPlayer.uuid;
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (GeneralMethods.hasRPG()) {
        if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
 else         if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.BLUE + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(GeneralMethods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Air)) {
          players.add(AirMethods.getAirColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Water)) {
          players.add(WaterMethods.getWaterColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Earth)) {
          players.add(EarthMethods.getEarthColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Chi)) {
          players.add(ChiMethods.getChiColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Fire)) {
          players.add(FireMethods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0])) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1])) {
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1])) {
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1])) {
      s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1])) {
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1])) {
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(invinciblealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(givealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1])) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Fire.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=FireMethods.getFireColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.Fire);
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Air.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=AirMethods.getAirColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Water.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=WaterMethods.getWaterColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Earth.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=EarthMethods.getEarthColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Chi.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null) {
            color=ChiMethods.getChiColor();
          }
 else {
            color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          }
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (GeneralMethods.abilityExists(args[1])) {
      String ability=GeneralMethods.getAbility(args[1]);
      if (AirMethods.isAirAbility(ability)) {
        s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (WaterMethods.isWaterAbility(ability)) {
        s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (EarthMethods.isEarthAbility(ability)) {
        if (EarthMethods.isMetalbendingAbility(ability)) {
          s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (FireMethods.isFireAbility(ability)) {
        s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (ChiMethods.isChiAbility(ability)) {
        s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}",0.9997039084090013
134104,"public static boolean isObstructed(Location location1,Location location2){
  Vector loc1=location1.toVector();
  Vector loc2=location2.toVector();
  Vector direction=loc2.subtract(loc1);
  direction.normalize();
  Location loc;
  double max=location1.distance(location2);
  for (double i=0; i <= max; i++) {
    loc=location1.clone().add(direction.clone().multiply(i));
    Material type=loc.getBlock().getType();
    if (type != Material.AIR && !Arrays.asList(EarthMethods.getTransparentEarthbending()).contains(type.getId()))     return true;
  }
  return false;
}","public static boolean isObstructed(Location location1,Location location2){
  Vector loc1=location1.toVector();
  Vector loc2=location2.toVector();
  Vector direction=loc2.subtract(loc1);
  direction.normalize();
  Location loc;
  double max=location1.distance(location2);
  for (double i=0; i <= max; i++) {
    loc=location1.clone().add(direction.clone().multiply(i));
    Material type=loc.getBlock().getType();
    if (type != Material.AIR && !(Arrays.asList(EarthMethods.getTransparentEarthbending()).contains(type.getId()) || WaterMethods.isWater(loc.getBlock())))     return true;
  }
  return false;
}",0.9642248722316864
134105,"public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    FireCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && fs.getLocation().getWorld() == loc.getWorld() && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
  }
  return removed;
}","public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    FireCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && fs.getLocation().getWorld() == loc.getWorld() && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && fs.getLocation().getWorld().equals(loc.getWorld())) {
          if (Math.abs(fs.getLocation().distance(loc)) <= radius) {
            fs.remove();
            removed=true;
          }
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
  }
  return removed;
}",0.9679144385026738
134106,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){
  if (EarthArmor.instances.containsKey(event.getEntity())) {
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.LEATHER_BOOTS || drops.get(i).getType() == Material.LEATHER_CHESTPLATE || drops.get(i).getType() == Material.LEATHER_HELMET || drops.get(i).getType() == Material.LEATHER_LEGGINGS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    if (EarthArmor.instances.get(event.getEntity()).oldarmor != null) {
      for (      ItemStack is : EarthArmor.instances.get(event.getEntity()).oldarmor) {
        if (!(is.getType() == Material.AIR))         newdrops.add(is);
      }
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
    EarthArmor.removeEffect(event.getEntity());
  }
  if (MetalClips.instances.containsKey(event.getEntity())) {
    MetalClips.instances.get(event.getEntity()).remove();
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.IRON_HELMET || drops.get(i).getType() == Material.IRON_CHESTPLATE || drops.get(i).getType() == Material.IRON_LEGGINGS || drops.get(i).getType() == Material.IRON_BOOTS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
  }
  if (bendingDeathPlayer.containsKey(event.getEntity())) {
    String message=ConfigManager.deathMsgConfig.getConfig().getString(""String_Node_Str"");
    String ability=bendingDeathPlayer.get(event.getEntity());
    String element=null;
    if (GeneralMethods.abilityExists(ability)) {
      element=GeneralMethods.getAbilityElement(ability).name();
    }
    if (ComboManager.checkForValidCombo(event.getEntity().getKiller()).getName().equalsIgnoreCase(ability)) {
      element=GeneralMethods.getAbilityElement(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)).name();
      ability=element + ""String_Node_Str"";
    }
    if (ConfigManager.deathMsgConfig.getConfig().contains(element + ""String_Node_Str"" + ability)) {
      message=ConfigManager.deathMsgConfig.getConfig().getString(element + ""String_Node_Str"" + ability);
    }
    message=message.replace(""String_Node_Str"",event.getEntity().getName()).replace(""String_Node_Str"",event.getEntity().getKiller().getName()).replace(""String_Node_Str"",GeneralMethods.getAbilityColor(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)) + ability);
    event.setDeathMessage(message);
    bendingDeathPlayer.remove(event.getEntity());
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){
  if (event.getEntity().getKiller() == null) {
    return;
  }
  if (EarthArmor.instances.containsKey(event.getEntity())) {
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.LEATHER_BOOTS || drops.get(i).getType() == Material.LEATHER_CHESTPLATE || drops.get(i).getType() == Material.LEATHER_HELMET || drops.get(i).getType() == Material.LEATHER_LEGGINGS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    if (EarthArmor.instances.get(event.getEntity()).oldarmor != null) {
      for (      ItemStack is : EarthArmor.instances.get(event.getEntity()).oldarmor) {
        if (!(is.getType() == Material.AIR))         newdrops.add(is);
      }
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
    EarthArmor.removeEffect(event.getEntity());
  }
  if (MetalClips.instances.containsKey(event.getEntity())) {
    MetalClips.instances.get(event.getEntity()).remove();
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.IRON_HELMET || drops.get(i).getType() == Material.IRON_CHESTPLATE || drops.get(i).getType() == Material.IRON_LEGGINGS || drops.get(i).getType() == Material.IRON_BOOTS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
  }
  if (bendingDeathPlayer.containsKey(event.getEntity())) {
    String message=ConfigManager.deathMsgConfig.getConfig().getString(""String_Node_Str"");
    String ability=bendingDeathPlayer.get(event.getEntity());
    String element=null;
    if (GeneralMethods.abilityExists(ability)) {
      element=GeneralMethods.getAbilityElement(ability).name();
    }
    if (ComboManager.checkForValidCombo(event.getEntity().getKiller()).getName().equalsIgnoreCase(ability)) {
      element=GeneralMethods.getAbilityElement(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)).name();
      ability=element + ""String_Node_Str"";
    }
    if (ConfigManager.deathMsgConfig.getConfig().contains(element + ""String_Node_Str"" + ability)) {
      message=ConfigManager.deathMsgConfig.getConfig().getString(element + ""String_Node_Str"" + ability);
    }
    message=message.replace(""String_Node_Str"",event.getEntity().getName()).replace(""String_Node_Str"",event.getEntity().getKiller().getName()).replace(""String_Node_Str"",GeneralMethods.getAbilityColor(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)) + ability);
    event.setDeathMessage(message);
    bendingDeathPlayer.remove(event.getEntity());
  }
}",0.989113530326594
134107,"public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && !vectorLoc.getWorld().equals(loc.getWorld())) {
        if (vectorLoc.distance(loc) <= radius) {
          instances.remove(aswipe.id);
          removed=true;
        }
      }
    }
  }
  return removed;
}","public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && vectorLoc.getWorld().equals(loc.getWorld())) {
        if (vectorLoc.distance(loc) <= radius) {
          instances.remove(aswipe.id);
          removed=true;
        }
      }
    }
  }
  return removed;
}",0.9990412272291468
134108,"public void revert(){
  if (player == null) {
    instances.remove(player);
    return;
  }
  player.setAllowFlight(couldFly);
  player.setFlying(wasFlying);
}","public void revert(){
  if (player == null) {
    return;
  }
  player.setAllowFlight(couldFly);
  player.setFlying(wasFlying);
}",0.8958333333333334
134109,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){
  if (event.getEntity().getKiller() == null) {
    return;
  }
  if (EarthArmor.instances.containsKey(event.getEntity())) {
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.LEATHER_BOOTS || drops.get(i).getType() == Material.LEATHER_CHESTPLATE || drops.get(i).getType() == Material.LEATHER_HELMET || drops.get(i).getType() == Material.LEATHER_LEGGINGS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    if (EarthArmor.instances.get(event.getEntity()).oldarmor != null) {
      for (      ItemStack is : EarthArmor.instances.get(event.getEntity()).oldarmor) {
        if (!(is.getType() == Material.AIR))         newdrops.add(is);
      }
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
    EarthArmor.removeEffect(event.getEntity());
  }
  if (MetalClips.instances.containsKey(event.getEntity())) {
    MetalClips.instances.get(event.getEntity()).remove();
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.IRON_HELMET || drops.get(i).getType() == Material.IRON_CHESTPLATE || drops.get(i).getType() == Material.IRON_LEGGINGS || drops.get(i).getType() == Material.IRON_BOOTS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
  }
  if (bendingDeathPlayer.containsKey(event.getEntity())) {
    String message=ConfigManager.deathMsgConfig.getConfig().getString(""String_Node_Str"");
    String ability=bendingDeathPlayer.get(event.getEntity());
    String element=null;
    if (GeneralMethods.abilityExists(ability)) {
      element=GeneralMethods.getAbilityElement(ability).name();
    }
    if (ComboManager.checkForValidCombo(event.getEntity().getKiller()).getName().equalsIgnoreCase(ability)) {
      element=GeneralMethods.getAbilityElement(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)).name();
      ability=element + ""String_Node_Str"";
    }
    if (ConfigManager.deathMsgConfig.getConfig().contains(element + ""String_Node_Str"" + ability)) {
      message=ConfigManager.deathMsgConfig.getConfig().getString(element + ""String_Node_Str"" + ability);
    }
    message=message.replace(""String_Node_Str"",event.getEntity().getName()).replace(""String_Node_Str"",event.getEntity().getKiller().getName()).replace(""String_Node_Str"",GeneralMethods.getAbilityColor(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)) + ability);
    event.setDeathMessage(message);
    bendingDeathPlayer.remove(event.getEntity());
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){
  if (event.getEntity().getKiller() == null) {
    return;
  }
  if (EarthArmor.instances.containsKey(event.getEntity())) {
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.LEATHER_BOOTS || drops.get(i).getType() == Material.LEATHER_CHESTPLATE || drops.get(i).getType() == Material.LEATHER_HELMET || drops.get(i).getType() == Material.LEATHER_LEGGINGS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    if (EarthArmor.instances.get(event.getEntity()).oldarmor != null) {
      for (      ItemStack is : EarthArmor.instances.get(event.getEntity()).oldarmor) {
        if (!(is.getType() == Material.AIR))         newdrops.add(is);
      }
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
    EarthArmor.removeEffect(event.getEntity());
  }
  if (MetalClips.instances.containsKey(event.getEntity())) {
    MetalClips.instances.get(event.getEntity()).remove();
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.IRON_HELMET || drops.get(i).getType() == Material.IRON_CHESTPLATE || drops.get(i).getType() == Material.IRON_LEGGINGS || drops.get(i).getType() == Material.IRON_BOOTS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
  }
  if (bendingDeathPlayer.containsKey(event.getEntity())) {
    String message=ConfigManager.deathMsgConfig.getConfig().getString(""String_Node_Str"");
    String ability=bendingDeathPlayer.get(event.getEntity());
    String element=null;
    if (GeneralMethods.abilityExists(ability)) {
      element=GeneralMethods.getAbilityElement(ability).name();
    }
    if (ComboManager.checkForValidCombo(event.getEntity().getKiller()) != null) {
      String combo=ComboManager.checkForValidCombo(event.getEntity().getKiller()).getName();
      if (combo != null && !combo.isEmpty() && combo.equalsIgnoreCase(ability)) {
        element=GeneralMethods.getAbilityElement(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)).name();
        ability=element + ""String_Node_Str"";
      }
    }
    if (ConfigManager.deathMsgConfig.getConfig().contains(element + ""String_Node_Str"" + ability)) {
      message=ConfigManager.deathMsgConfig.getConfig().getString(element + ""String_Node_Str"" + ability);
    }
    message=message.replace(""String_Node_Str"",event.getEntity().getName()).replace(""String_Node_Str"",event.getEntity().getKiller().getName()).replace(""String_Node_Str"",GeneralMethods.getAbilityColor(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)) + ability);
    event.setDeathMessage(message);
    bendingDeathPlayer.remove(event.getEntity());
  }
}",0.9735396904643036
134110,"public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && !vectorLoc.getWorld().equals(loc.getWorld())) {
        if (vectorLoc.distance(loc) <= radius) {
          instances.remove(aswipe.id);
          removed=true;
        }
      }
    }
  }
  return removed;
}","public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && vectorLoc.getWorld().equals(loc.getWorld())) {
        if (vectorLoc.distance(loc) <= radius) {
          instances.remove(aswipe.id);
          removed=true;
        }
      }
    }
  }
  return removed;
}",0.9990412272291468
134111,"/** 
 * Damages an Entity by amount of damage specified. Starts a   {@link EntityDamageByEntityEvent}.
 * @param player The player dealing the damage
 * @param entity The entity that is receiving the damage
 * @param damage The amount of damage to deal
 * @param ability The ability that is used to damage the entity
 */
public static void damageEntity(Player player,Entity entity,double damage,String ability){
  if (entity instanceof LivingEntity) {
    if (entity instanceof Player) {
      if (Commands.invincible.contains(((Player)entity).getName()))       return;
    }
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.exemptPermanently(player,CheckType.FIGHT_REACH);
    }
    if (((LivingEntity)entity).getHealth() - damage <= 0 && entity instanceof Player && !entity.isDead()) {
      if (ability == null) {
        ability=getLastUsedAbility(player,true);
      }
      if (ability != null && !ability.isEmpty()) {
        PlayerBendingDeathEvent event=new PlayerBendingDeathEvent((Player)entity,player,ability,damage);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
    }
    ((LivingEntity)entity).damage(damage,player);
    ((LivingEntity)entity).setLastDamageCause(new EntityDamageByEntityEvent(player,entity,DamageCause.CUSTOM,damage));
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.unexempt(player);
    }
  }
}","/** 
 * Damages an Entity by amount of damage specified. Starts a   {@link EntityDamageByEntityEvent}.
 * @param player The player dealing the damage
 * @param entity The entity that is receiving the damage
 * @param damage The amount of damage to deal
 * @param ability The ability that is used to damage the entity
 */
public static void damageEntity(Player player,Entity entity,double damage,String ability){
  if (entity instanceof LivingEntity) {
    if (entity instanceof Player) {
      if (Commands.invincible.contains(((Player)entity).getName()))       return;
    }
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.exemptPermanently(player,CheckType.FIGHT_REACH);
    }
    if (((LivingEntity)entity).getHealth() - damage <= 0 && entity instanceof Player && !entity.isDead()) {
      PlayerBendingDeathEvent event=new PlayerBendingDeathEvent((Player)entity,player,ability,damage);
      Bukkit.getServer().getPluginManager().callEvent(event);
    }
    ((LivingEntity)entity).damage(damage,player);
    ((LivingEntity)entity).setLastDamageCause(new EntityDamageByEntityEvent(player,entity,DamageCause.CUSTOM,damage));
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.unexempt(player);
    }
  }
}",0.8842945230322815
134112,"private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      for (int i=0; i < args.length; i++) {
        args[i]=args[i].toLowerCase();
      }
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
        if (!GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        UUID uuid=player.getUniqueId();
        if (RPGMethods.hasBeenAvatar(uuid)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        RPGMethods.setAvatar(uuid);
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        return true;
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.runDebug();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=(Player)s;
        String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] listaliases={""String_Node_Str"",""String_Node_Str""};
        if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          List<Preset> listnames=Preset.presets.get(player.getUniqueId());
          List<String> ln2=new ArrayList<String>();
          if (listnames == null || listnames.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          for (          Preset preset : listnames) {
            ln2.add(preset.getName());
          }
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
          return true;
        }
 else         if (args.length != 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        String name=args[2];
        if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset preset=Preset.getPreset(player,name);
          preset.delete();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset.bindPreset(player,name);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          int limit=GeneralMethods.getMaxPresets(player);
          if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (bPlayer == null)           return true;
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          Preset preset=new Preset(player.getUniqueId(),name,abilities);
          preset.save();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
          return true;
        }
      }
      if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!invincible.contains(s.getName())) {
          invincible.add(s.getName());
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
 else {
          invincible.remove(s.getName());
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length < 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
          if (args.length != 4) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          int uses;
          try {
            uses=Integer.parseInt(args[3]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
            return true;
          }
          ItemStack hook=GrapplingHookAPI.createHook(uses);
          player.getInventory().addItem(hook);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
          return true;
        }
 else {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.getAbilities().clear();
          for (int i=1; i <= 9; i++) {
            GeneralMethods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          try {
            int slot=Integer.parseInt(args[1]);
            if (slot < 1 || slot > 9) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            if (bPlayer.getAbilities().get(slot) != null) {
              bPlayer.getAbilities().remove(slot);
              GeneralMethods.saveAbility(bPlayer,slot,null);
            }
            s.sendMessage(""String_Node_Str"" + slot);
            return true;
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!GeneralMethods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.getAbilities();
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
                GeneralMethods.logError(ex);
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(AirMethods.getAirColor() + st);
              }
            }
            if (!AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(flightaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.flightabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(spiritualprojectionaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.spiritualprojectionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(WaterMethods.getWaterColor() + st);
              }
            }
            if (!AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(bloodaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.bloodabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(healingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.healingabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(icealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.iceabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(plantaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.plantabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(EarthMethods.getEarthColor() + st);
              }
            }
            if (!AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lavabendingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lavaabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(metalbendingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.metalabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(sandbendingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.sandabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(FireMethods.getFireColor() + st);
              }
            }
            if (!AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lightningaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lightningabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
          }
          if (Arrays.asList(combustionaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.combustionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(ChiMethods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          if (abilities.isEmpty()) {
            s.sendMessage(""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null)             s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            final String player=args[1];
            final CommandSender sender=s;
            new BukkitRunnable(){
              @Override public void run(){
                ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
                try {
                  final List<String> messages=new ArrayList<String>();
                  if (rs2.next()) {
                    UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                    String element=rs2.getString(""String_Node_Str"");
                    messages.add(player + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                    if (GeneralMethods.hasRPG()) {
                      if (RPGMethods.isCurrentAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else                       if (RPGMethods.hasBeenAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else {
                      }
                    }
                  }
 else {
                    messages.add(ChatColor.RED + ""String_Node_Str"");
                  }
                  new BukkitRunnable(){
                    @Override public void run(){
                      for (                      String message : messages) {
                        sender.sendMessage(message);
                      }
                    }
                  }
.runTask(ProjectKorra.plugin);
                }
 catch (                SQLException e) {
                  e.printStackTrace();
                  GeneralMethods.logError(e);
                }
              }
            }
.runTaskAsynchronously(ProjectKorra.plugin);
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (GeneralMethods.isBender(un,Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            if (AirMethods.canAirFlight(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (AirMethods.canUseSpiritualProjection(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            if (WaterMethods.canPlantbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canBloodbend(p)) {
              if (WaterMethods.canBloodbendAtAnytime(p))               s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
 else               s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canIcebend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canWaterHeal(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            if (EarthMethods.canMetalbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canLavabend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canSandbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            if (FireMethods.canCombustionbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (FireMethods.canLightningbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
          UUID uuid2=bPlayer.uuid;
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (GeneralMethods.hasRPG()) {
            if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
 else             if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(GeneralMethods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Air)) {
              players.add(AirMethods.getAirColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Water)) {
              players.add(WaterMethods.getWaterColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Earth)) {
              players.add(EarthMethods.getEarthColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Chi)) {
              players.add(ChiMethods.getChiColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Fire)) {
              players.add(FireMethods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
        if (GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
        }
        if (GeneralMethods.hasItems()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        GeneralMethods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          GeneralMethods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        GeneralMethods.removeUnusableAbilities(player.getName());
        GeneralMethods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        GeneralMethods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Air);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Water);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Earth);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Fire);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Chi);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            GeneralMethods.removeUnusableAbilities(target.getName());
            GeneralMethods.saveElements(bTarget);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Fire.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=FireMethods.getFireColor();
 else               color=GeneralMethods.getSubBendingColor(Element.Fire);
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Air.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=AirMethods.getAirColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Water.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=WaterMethods.getWaterColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Earth.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=EarthMethods.getEarthColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Chi.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=ChiMethods.getChiColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (GeneralMethods.abilityExists(args[1])) {
          String ability=GeneralMethods.getAbility(args[1]);
          if (AirMethods.isAirAbility(ability)) {
            s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (WaterMethods.isWaterAbility(ability)) {
            s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (EarthMethods.isEarthAbility(ability)) {
            if (EarthMethods.isMetalbendingAbility(ability)) {
              s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (FireMethods.isFireAbility(ability)) {
            s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (ChiMethods.isChiAbility(ability)) {
            s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      if (Arrays.asList(checkaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (s instanceof Player) {
          if (plugin.updater.updateAvalible()) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
          }
 else {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
          }
        }
 else         if (s instanceof ConsoleCommandSender) {
          plugin.updater.checkUpdate();
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}","private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      for (int i=0; i < args.length; i++) {
        args[i]=args[i].toLowerCase();
      }
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
        if (!GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        UUID uuid=player.getUniqueId();
        if (RPGMethods.hasBeenAvatar(uuid)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        RPGMethods.setAvatar(uuid);
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        return true;
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.runDebug();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=(Player)s;
        String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] listaliases={""String_Node_Str"",""String_Node_Str""};
        if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          List<Preset> listnames=Preset.presets.get(player.getUniqueId());
          List<String> ln2=new ArrayList<String>();
          if (listnames == null || listnames.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          for (          Preset preset : listnames) {
            ln2.add(preset.getName());
          }
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
          return true;
        }
 else         if (args.length != 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        String name=args[2];
        if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset preset=Preset.getPreset(player,name);
          preset.delete();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset.bindPreset(player,name);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name+ ChatColor.GREEN+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          int limit=GeneralMethods.getMaxPresets(player);
          if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (bPlayer == null)           return true;
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          Preset preset=new Preset(player.getUniqueId(),name,abilities);
          preset.save();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
          return true;
        }
      }
      if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!invincible.contains(s.getName())) {
          invincible.add(s.getName());
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
 else {
          invincible.remove(s.getName());
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length < 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
          if (args.length != 4) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          int uses;
          try {
            uses=Integer.parseInt(args[3]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
            return true;
          }
          ItemStack hook=GrapplingHookAPI.createHook(uses);
          player.getInventory().addItem(hook);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
          return true;
        }
 else {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        GeneralMethods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.getAbilities().clear();
          for (int i=1; i <= 9; i++) {
            GeneralMethods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          try {
            int slot=Integer.parseInt(args[1]);
            if (slot < 1 || slot > 9) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            if (bPlayer.getAbilities().get(slot) != null) {
              bPlayer.getAbilities().remove(slot);
              GeneralMethods.saveAbility(bPlayer,slot,null);
            }
            s.sendMessage(""String_Node_Str"" + slot);
            return true;
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!GeneralMethods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=GeneralMethods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          GeneralMethods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!GeneralMethods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.getAbilities();
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
                GeneralMethods.logError(ex);
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(AirMethods.getAirColor() + st);
              }
            }
            if (!AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(flightaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.flightabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.flightabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(spiritualprojectionaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.spiritualprojectionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(WaterMethods.getWaterColor() + st);
              }
            }
            if (!AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(bloodaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.bloodabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.bloodabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(healingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.healingabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.healingabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(icealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.iceabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.iceabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(plantaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.plantabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.plantabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(EarthMethods.getEarthColor() + st);
              }
            }
            if (!AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lavabendingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.lavaabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lavaabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(metalbendingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.metalabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.metalabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(sandbendingaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.sandabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.sandabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (GeneralMethods.isSubAbility(st))               continue;
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(FireMethods.getFireColor() + st);
              }
            }
            if (!AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (!AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            return true;
          }
          if (Arrays.asList(lightningaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.lightningabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.lightningabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
          }
          if (Arrays.asList(combustionaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.combustionabilities.isEmpty()) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.combustionabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
              }
            }
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (GeneralMethods.canView((Player)s,st)) {
                s.sendMessage(ChiMethods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          if (abilities.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null && !ability.equalsIgnoreCase(""String_Node_Str""))             s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            final String player=args[1];
            final CommandSender sender=s;
            new BukkitRunnable(){
              @Override public void run(){
                ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
                try {
                  final List<String> messages=new ArrayList<String>();
                  if (rs2.next()) {
                    UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                    String element=rs2.getString(""String_Node_Str"");
                    messages.add(player + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                    if (element.contains(""String_Node_Str""))                     messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                    if (GeneralMethods.hasRPG()) {
                      if (RPGMethods.isCurrentAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else                       if (RPGMethods.hasBeenAvatar(uuid)) {
                        messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                      }
 else {
                      }
                    }
                  }
 else {
                    messages.add(ChatColor.RED + ""String_Node_Str"");
                  }
                  new BukkitRunnable(){
                    @Override public void run(){
                      for (                      String message : messages) {
                        sender.sendMessage(message);
                      }
                    }
                  }
.runTask(ProjectKorra.plugin);
                }
 catch (                SQLException e) {
                  e.printStackTrace();
                  GeneralMethods.logError(e);
                }
              }
            }
.runTaskAsynchronously(ProjectKorra.plugin);
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (GeneralMethods.isBender(un,Element.Air)) {
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            if (AirMethods.canAirFlight(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (AirMethods.canUseSpiritualProjection(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Water)) {
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            if (WaterMethods.canPlantbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canBloodbend(p)) {
              if (WaterMethods.canBloodbendAtAnytime(p))               s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
 else               s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canIcebend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (WaterMethods.canWaterHeal(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Earth)) {
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            if (EarthMethods.canMetalbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canLavabend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (EarthMethods.canSandbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Fire)) {
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            if (FireMethods.canCombustionbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (FireMethods.canLightningbend(p)) {
              s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
          }
          if (GeneralMethods.isBender(un,Element.Chi)) {
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
          UUID uuid2=bPlayer.uuid;
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (GeneralMethods.hasRPG()) {
            if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
 else             if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
              s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
            }
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (uuid2.toString().equals(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(GeneralMethods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Air)) {
              players.add(AirMethods.getAirColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Water)) {
              players.add(WaterMethods.getWaterColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Earth)) {
              players.add(EarthMethods.getEarthColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Chi)) {
              players.add(ChiMethods.getChiColor() + un);
              continue;
            }
            if (GeneralMethods.isBender(un,Element.Fire)) {
              players.add(FireMethods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
        if (GeneralMethods.hasRPG()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
        }
        if (GeneralMethods.hasItems()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        GeneralMethods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          GeneralMethods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        GeneralMethods.removeUnusableAbilities(player.getName());
        GeneralMethods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        GeneralMethods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Air);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Water);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Earth);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Fire);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.addElement(Element.Chi);
            GeneralMethods.saveElements(bPlayer);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Air);
            s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Water);
            s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Earth);
            s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Fire);
            s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
              return true;
            }
            bPlayer.setElement(Element.Chi);
            s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
            GeneralMethods.removeUnusableAbilities(s.getName());
            GeneralMethods.saveElements(bPlayer);
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            GeneralMethods.removeUnusableAbilities(target.getName());
            GeneralMethods.saveElements(bTarget);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Fire.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=FireMethods.getFireColor();
 else               color=GeneralMethods.getSubBendingColor(Element.Fire);
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Air.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=AirMethods.getAirColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Water.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=WaterMethods.getWaterColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Earth.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=EarthMethods.getEarthColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          for (          ComboAbilityModule cam : ComboModuleManager.combo) {
            if (cam.getElement().equals(Element.Chi.toString())) {
              ChatColor color=GeneralMethods.getAvatarColor();
              if (cam.getSubElement() == null)               color=ChiMethods.getChiColor();
 else               color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
              s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
              s.sendMessage(ChatColor.GOLD + cam.getInstructions());
            }
          }
        }
        if (GeneralMethods.abilityExists(args[1])) {
          String ability=GeneralMethods.getAbility(args[1]);
          if (AirMethods.isAirAbility(ability)) {
            s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (WaterMethods.isWaterAbility(ability)) {
            s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (EarthMethods.isEarthAbility(ability)) {
            if (EarthMethods.isMetalbendingAbility(ability)) {
              s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (FireMethods.isFireAbility(ability)) {
            s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (ChiMethods.isChiAbility(ability)) {
            s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      if (Arrays.asList(checkaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (s instanceof Player) {
          if (plugin.updater.updateAvalible()) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
          }
 else {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
          }
        }
 else         if (s instanceof ConsoleCommandSender) {
          plugin.updater.checkUpdate();
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}",0.1865585093772626
134113,"@SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  for (int i=0; i < args.length; i++) {
    args[i]=args[i].toLowerCase();
  }
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
    if (!GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    UUID uuid=player.getUniqueId();
    if (RPGMethods.hasBeenAvatar(uuid)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    RPGMethods.setAvatar(uuid);
    s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.runDebug();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=(Player)s;
    String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] listaliases={""String_Node_Str"",""String_Node_Str""};
    if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      List<Preset> listnames=Preset.presets.get(player.getUniqueId());
      List<String> ln2=new ArrayList<String>();
      if (listnames == null || listnames.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      for (      Preset preset : listnames) {
        ln2.add(preset.getName());
      }
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
      return true;
    }
 else     if (args.length != 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    String name=args[2];
    if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset preset=Preset.getPreset(player,name);
      preset.delete();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset.bindPreset(player,name);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      int limit=GeneralMethods.getMaxPresets(player);
      if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (bPlayer == null)       return true;
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      Preset preset=new Preset(player.getUniqueId(),name,abilities);
      preset.save();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
      return true;
    }
  }
  if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!invincible.contains(s.getName())) {
      invincible.add(s.getName());
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else {
      invincible.remove(s.getName());
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length < 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
      if (args.length != 4) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      int uses;
      try {
        uses=Integer.parseInt(args[3]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
        return true;
      }
      ItemStack hook=GrapplingHookAPI.createHook(uses);
      player.getInventory().addItem(hook);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
      return true;
    }
 else {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.getAbilities().clear();
      for (int i=1; i <= 9; i++) {
        GeneralMethods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      try {
        int slot=Integer.parseInt(args[1]);
        if (slot < 1 || slot > 9) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (bPlayer.getAbilities().get(slot) != null) {
          bPlayer.getAbilities().remove(slot);
          GeneralMethods.saveAbility(bPlayer,slot,null);
        }
        s.sendMessage(""String_Node_Str"" + slot);
        return true;
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!GeneralMethods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
            GeneralMethods.logError(ex);
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(AirMethods.getAirColor() + st);
          }
        }
        if (!AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(flightaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.flightabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(spiritualprojectionaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.spiritualprojectionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(WaterMethods.getWaterColor() + st);
          }
        }
        if (!AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(bloodaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.bloodabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(healingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.healingabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(icealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.iceabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(plantaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.plantabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(EarthMethods.getEarthColor() + st);
          }
        }
        if (!AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lavabendingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lavaabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(metalbendingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.metalabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(sandbendingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.sandabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(FireMethods.getFireColor() + st);
          }
        }
        if (!AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lightningaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lightningabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
      }
      if (Arrays.asList(combustionaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.combustionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(ChiMethods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      if (abilities.isEmpty()) {
        s.sendMessage(""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null)         s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        final String player=args[1];
        final CommandSender sender=s;
        new BukkitRunnable(){
          @Override public void run(){
            ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
            try {
              final List<String> messages=new ArrayList<String>();
              if (rs2.next()) {
                UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                String element=rs2.getString(""String_Node_Str"");
                messages.add(player + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                if (GeneralMethods.hasRPG()) {
                  if (RPGMethods.isCurrentAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else                   if (RPGMethods.hasBeenAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else {
                  }
                }
              }
 else {
                messages.add(ChatColor.RED + ""String_Node_Str"");
              }
              new BukkitRunnable(){
                @Override public void run(){
                  for (                  String message : messages) {
                    sender.sendMessage(message);
                  }
                }
              }
.runTask(ProjectKorra.plugin);
            }
 catch (            SQLException e) {
              e.printStackTrace();
              GeneralMethods.logError(e);
            }
          }
        }
.runTaskAsynchronously(ProjectKorra.plugin);
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (GeneralMethods.isBender(un,Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        if (AirMethods.canAirFlight(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (AirMethods.canUseSpiritualProjection(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        if (WaterMethods.canPlantbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canBloodbend(p)) {
          if (WaterMethods.canBloodbendAtAnytime(p))           s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
 else           s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canIcebend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canWaterHeal(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        if (EarthMethods.canMetalbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canLavabend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canSandbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        if (FireMethods.canCombustionbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (FireMethods.canLightningbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
      UUID uuid2=bPlayer.uuid;
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (GeneralMethods.hasRPG()) {
        if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
 else         if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(GeneralMethods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Air)) {
          players.add(AirMethods.getAirColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Water)) {
          players.add(WaterMethods.getWaterColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Earth)) {
          players.add(EarthMethods.getEarthColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Chi)) {
          players.add(ChiMethods.getChiColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Fire)) {
          players.add(FireMethods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
    if (GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
    }
    if (GeneralMethods.hasItems()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    GeneralMethods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    GeneralMethods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      GeneralMethods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    GeneralMethods.removeUnusableAbilities(player.getName());
    GeneralMethods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    GeneralMethods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Air);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Water);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Earth);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Fire);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Chi);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        GeneralMethods.removeUnusableAbilities(target.getName());
        GeneralMethods.saveElements(bTarget);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Fire.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=FireMethods.getFireColor();
 else           color=GeneralMethods.getSubBendingColor(Element.Fire);
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Air.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=AirMethods.getAirColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Water.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=WaterMethods.getWaterColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Earth.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=EarthMethods.getEarthColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Chi.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=ChiMethods.getChiColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (GeneralMethods.abilityExists(args[1])) {
      String ability=GeneralMethods.getAbility(args[1]);
      if (AirMethods.isAirAbility(ability)) {
        s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (WaterMethods.isWaterAbility(ability)) {
        s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (EarthMethods.isEarthAbility(ability)) {
        if (EarthMethods.isMetalbendingAbility(ability)) {
          s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (FireMethods.isFireAbility(ability)) {
        s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (ChiMethods.isChiAbility(ability)) {
        s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  if (Arrays.asList(checkaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (s instanceof Player) {
      if (plugin.updater.updateAvalible()) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
      }
 else {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
      }
    }
 else     if (s instanceof ConsoleCommandSender) {
      plugin.updater.checkUpdate();
    }
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  for (int i=0; i < args.length; i++) {
    args[i]=args[i].toLowerCase();
  }
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
    if (!GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    UUID uuid=player.getUniqueId();
    if (RPGMethods.hasBeenAvatar(uuid)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    RPGMethods.setAvatar(uuid);
    s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.runDebug();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=(Player)s;
    String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] listaliases={""String_Node_Str"",""String_Node_Str""};
    if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      List<Preset> listnames=Preset.presets.get(player.getUniqueId());
      List<String> ln2=new ArrayList<String>();
      if (listnames == null || listnames.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      for (      Preset preset : listnames) {
        ln2.add(preset.getName());
      }
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
      return true;
    }
 else     if (args.length != 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    String name=args[2];
    if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset preset=Preset.getPreset(player,name);
      preset.delete();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset.bindPreset(player,name);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name+ ChatColor.GREEN+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      int limit=GeneralMethods.getMaxPresets(player);
      if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (bPlayer == null)       return true;
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      Preset preset=new Preset(player.getUniqueId(),name,abilities);
      preset.save();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ name);
      return true;
    }
  }
  if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!invincible.contains(s.getName())) {
      invincible.add(s.getName());
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else {
      invincible.remove(s.getName());
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length < 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
      if (args.length != 4) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      int uses;
      try {
        uses=Integer.parseInt(args[3]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
        return true;
      }
      ItemStack hook=GrapplingHookAPI.createHook(uses);
      player.getInventory().addItem(hook);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
      return true;
    }
 else {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    GeneralMethods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (MultiAbilityManager.hasMultiAbilityBound((Player)s)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.getAbilities().clear();
      for (int i=1; i <= 9; i++) {
        GeneralMethods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      try {
        int slot=Integer.parseInt(args[1]);
        if (slot < 1 || slot > 9) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (bPlayer.getAbilities().get(slot) != null) {
          bPlayer.getAbilities().remove(slot);
          GeneralMethods.saveAbility(bPlayer,slot,null);
        }
        s.sendMessage(""String_Node_Str"" + slot);
        return true;
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!GeneralMethods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=GeneralMethods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!GeneralMethods.canBind(((Player)s).getName(),ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (AirMethods.isAirAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (WaterMethods.isWaterAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (EarthMethods.isEarthAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (FireMethods.isFireAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (ChiMethods.isChiAbility(ability) && !GeneralMethods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      GeneralMethods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!GeneralMethods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              GeneralMethods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
            GeneralMethods.logError(ex);
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(AirMethods.getAirColor() + st);
          }
        }
        if (!AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(flightaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.flightabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.flightabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(spiritualprojectionaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.spiritualprojectionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.spiritualprojectionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(WaterMethods.getWaterColor() + st);
          }
        }
        if (!AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(bloodaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.bloodabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.bloodabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(healingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.healingabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.healingabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(icealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.iceabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.iceabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(plantaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.plantabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.plantabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(EarthMethods.getEarthColor() + st);
          }
        }
        if (!AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lavabendingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.lavaabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lavaabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(metalbendingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.metalabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.metalabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(sandbendingaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.sandabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.sandabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + st);
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (GeneralMethods.isSubAbility(st))           continue;
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(FireMethods.getFireColor() + st);
          }
        }
        if (!AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (!AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        return true;
      }
      if (Arrays.asList(lightningaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.lightningabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.lightningabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
      }
      if (Arrays.asList(combustionaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.combustionabilities.isEmpty()) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.combustionabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + st);
          }
        }
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (GeneralMethods.canView((Player)s,st)) {
            s.sendMessage(ChiMethods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ AirMethods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ WaterMethods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ EarthMethods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChiMethods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      if (abilities.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null && !ability.equalsIgnoreCase(""String_Node_Str""))         s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        final String player=args[1];
        final CommandSender sender=s;
        new BukkitRunnable(){
          @Override public void run(){
            ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + player + ""String_Node_Str"");
            try {
              final List<String> messages=new ArrayList<String>();
              if (rs2.next()) {
                UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
                String element=rs2.getString(""String_Node_Str"");
                messages.add(player + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(AirMethods.getAirColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(WaterMethods.getWaterColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(EarthMethods.getEarthColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(FireMethods.getFireColor() + ""String_Node_Str"");
                if (element.contains(""String_Node_Str""))                 messages.add(ChiMethods.getChiColor() + ""String_Node_Str"");
                if (GeneralMethods.hasRPG()) {
                  if (RPGMethods.isCurrentAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else                   if (RPGMethods.hasBeenAvatar(uuid)) {
                    messages.add(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
                  }
 else {
                  }
                }
              }
 else {
                messages.add(ChatColor.RED + ""String_Node_Str"");
              }
              new BukkitRunnable(){
                @Override public void run(){
                  for (                  String message : messages) {
                    sender.sendMessage(message);
                  }
                }
              }
.runTask(ProjectKorra.plugin);
            }
 catch (            SQLException e) {
              e.printStackTrace();
              GeneralMethods.logError(e);
            }
          }
        }
.runTaskAsynchronously(ProjectKorra.plugin);
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (GeneralMethods.isBender(un,Element.Air)) {
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        if (AirMethods.canAirFlight(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (AirMethods.canUseSpiritualProjection(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Water)) {
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        if (WaterMethods.canPlantbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canBloodbend(p)) {
          if (WaterMethods.canBloodbendAtAnytime(p))           s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
 else           s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canIcebend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (WaterMethods.canWaterHeal(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Earth)) {
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        if (EarthMethods.canMetalbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canLavabend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (EarthMethods.canSandbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Fire)) {
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        if (FireMethods.canCombustionbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (FireMethods.canLightningbend(p)) {
          s.sendMessage(GeneralMethods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
      }
      if (GeneralMethods.isBender(un,Element.Chi)) {
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(un);
      UUID uuid2=bPlayer.uuid;
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + GeneralMethods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (GeneralMethods.hasRPG()) {
        if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
 else         if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
          s.sendMessage(GeneralMethods.getAvatarColor() + ""String_Node_Str"");
        }
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str"")|| uuid2.toString().equals(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"") || uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (uuid2.toString().equals(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=GeneralMethods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(GeneralMethods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Air)) {
          players.add(AirMethods.getAirColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Water)) {
          players.add(WaterMethods.getWaterColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Earth)) {
          players.add(EarthMethods.getEarthColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Chi)) {
          players.add(ChiMethods.getChiColor() + un);
          continue;
        }
        if (GeneralMethods.isBender(un,Element.Fire)) {
          players.add(FireMethods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
    if (GeneralMethods.hasRPG()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getRPG().getDescription().getVersion());
    }
    if (GeneralMethods.hasItems()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ GeneralMethods.getItems().getDescription().getVersion());
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    GeneralMethods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    GeneralMethods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.REMOVE));
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      GeneralMethods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    GeneralMethods.removeUnusableAbilities(player.getName());
    GeneralMethods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    GeneralMethods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,null,Result.PERMAREMOVE));
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + AirMethods.getAirColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + WaterMethods.getWaterColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + EarthMethods.getEarthColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + FireMethods.getFireColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        player.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChiMethods.getChiColor()+ ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,player,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Air);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.ADD));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Water);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.ADD));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Earth);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.ADD));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Fire);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.ADD));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.addElement(Element.Chi);
        GeneralMethods.saveElements(bPlayer);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.ADD));
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=GeneralMethods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + AirMethods.getAirColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Air);
        s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Air,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + WaterMethods.getWaterColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Water);
        s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Water,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + EarthMethods.getEarthColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Earth);
        s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Earth,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Fire);
        s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Fire,Result.CHOOSE));
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChiMethods.getChiColor()+ ""String_Node_Str"");
          return true;
        }
        bPlayer.setElement(Element.Chi);
        s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"");
        GeneralMethods.removeUnusableAbilities(s.getName());
        GeneralMethods.saveElements(bPlayer);
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,(Player)s,Element.Chi,Result.CHOOSE));
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=GeneralMethods.getBendingPlayer(target.getName());
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        GeneralMethods.removeUnusableAbilities(target.getName());
        GeneralMethods.saveElements(bTarget);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(s,target,e,Result.CHOOSE));
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(EarthMethods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + FireMethods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(FireMethods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Fire.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=FireMethods.getFireColor();
 else           color=GeneralMethods.getSubBendingColor(Element.Fire);
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(AirMethods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Air.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=AirMethods.getAirColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(WaterMethods.getWaterColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Water.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=WaterMethods.getWaterColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Earth.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=EarthMethods.getEarthColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(ChiMethods.getChiColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      for (      ComboAbilityModule cam : ComboModuleManager.combo) {
        if (cam.getElement().equals(Element.Chi.toString())) {
          ChatColor color=GeneralMethods.getAvatarColor();
          if (cam.getSubElement() == null)           color=ChiMethods.getChiColor();
 else           color=GeneralMethods.getSubBendingColor(Element.valueOf(cam.getElement()));
          s.sendMessage(color + cam.getName() + ChatColor.WHITE+ ""String_Node_Str""+ cam.getDescription());
          s.sendMessage(ChatColor.GOLD + cam.getInstructions());
        }
      }
    }
    if (GeneralMethods.abilityExists(args[1])) {
      String ability=GeneralMethods.getAbility(args[1]);
      if (AirMethods.isAirAbility(ability)) {
        s.sendMessage(AirMethods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(AirMethods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (WaterMethods.isWaterAbility(ability)) {
        s.sendMessage(WaterMethods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(WaterMethods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (EarthMethods.isEarthAbility(ability)) {
        if (EarthMethods.isMetalbendingAbility(ability)) {
          s.sendMessage(EarthMethods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(EarthMethods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(EarthMethods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (FireMethods.isFireAbility(ability)) {
        s.sendMessage(FireMethods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(FireMethods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (ChiMethods.isChiAbility(ability)) {
        s.sendMessage(ChiMethods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(ChiMethods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(GeneralMethods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(GeneralMethods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  if (Arrays.asList(checkaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (s instanceof Player) {
      if (plugin.updater.updateAvalible()) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.RED+ plugin.updater.getCurrentVersion());
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ plugin.updater.getCurrentVersion());
      }
 else {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
      }
    }
 else     if (s instanceof ConsoleCommandSender) {
      plugin.updater.checkUpdate();
    }
  }
  return true;
}",0.1859850154252975
134114,"public static Collection<Player> getPlayersAroundPoint(Location location,double distance){
  Collection<Player> players=new HashSet<Player>();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    if (player.getLocation().distance(location) <= distance) {
      players.add(player);
    }
  }
  return players;
}","public static Collection<Player> getPlayersAroundPoint(Location location,double distance){
  Collection<Player> players=new HashSet<Player>();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    if (player.getLocation().getWorld().equals(location.getWorld())) {
      if (player.getLocation().distance(location) <= distance) {
        players.add(player);
      }
    }
  }
  return players;
}",0.8839160839160839
134115,"public static void saveAbility(BendingPlayer bPlayer,int slot,String ability){
  if (bPlayer == null)   return;
  String uuid=bPlayer.uuid.toString();
  if (MultiAbilityManager.playerAbilities.containsKey(Bukkit.getPlayer(bPlayer.getPlayerName())))   return;
  HashMap<Integer,String> abilities=bPlayer.getAbilities();
  DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ (abilities.get(slot) == null ? null : abilities.get(slot))+ ""String_Node_Str""+ uuid+ ""String_Node_Str"");
}","public static void saveAbility(BendingPlayer bPlayer,int slot,String ability){
  if (bPlayer == null)   return;
  String uuid=bPlayer.uuid.toString();
  if (MultiAbilityManager.playerAbilities.containsKey(Bukkit.getPlayer(bPlayer.uuid)))   return;
  HashMap<Integer,String> abilities=bPlayer.getAbilities();
  DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ (abilities.get(slot) == null ? null : abilities.get(slot))+ ""String_Node_Str""+ uuid+ ""String_Node_Str"");
}",0.9808660624370594
134116,"public void save(){
  DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(1) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(2) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(3) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(4) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(5) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(6) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(7) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(8) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(9) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
}","public void save(){
  if (ProjectKorra.plugin.getConfig().getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
  for (int i=1; i <= 9; i++) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + i + ""String_Node_Str""+ (abilities.get(i) == null ? null : abilities.get(i))+ ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
}",0.316776007497657
134117,"public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && vectorLoc.getWorld() != loc.getWorld() && vectorLoc.distance(loc) <= radius) {
        instances.remove(aswipe.id);
        removed=true;
      }
    }
  }
  return removed;
}","public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && !vectorLoc.getWorld().equals(loc.getWorld())) {
        if (vectorLoc.distance(loc) <= radius) {
          instances.remove(aswipe.id);
          removed=true;
        }
      }
    }
  }
  return removed;
}",0.9525691699604744
134118,"private void fly(){
  if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (player.getWorld() != location.getWorld()) {
    remove();
    return;
  }
  if (player.getLocation().distance(location) < 3) {
    if (!moving && System.currentTimeMillis() > starttime + 1000)     flying=false;
    return;
  }
  for (  Block block : GeneralMethods.getBlocksAroundPoint(player.getLocation(),1.5)) {
    if ((GeneralMethods.isSolid(block) || block.isLiquid())) {
      flying=false;
      return;
    }
  }
  Vector vector=direction.clone().multiply(push * distance / length);
  vector.setY(player.getVelocity().getY());
  player.setVelocity(vector);
}","private void fly(){
  if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (!player.getWorld().equals(location.getWorld())) {
    remove();
    return;
  }
  if (player.getLocation().distance(location) < 3) {
    if (!moving && System.currentTimeMillis() > starttime + 1000)     flying=false;
    return;
  }
  for (  Block block : GeneralMethods.getBlocksAroundPoint(player.getLocation(),1.5)) {
    if ((GeneralMethods.isSolid(block) || block.isLiquid())) {
      flying=false;
      return;
    }
  }
  Vector vector=direction.clone().multiply(push * distance / length);
  vector.setY(player.getVelocity().getY());
  player.setVelocity(vector);
}",0.9895988112927192
134119,"private boolean moveBlocks(){
  if (player.getWorld() != headblock.getWorld()) {
    cancel();
    return false;
  }
  Location headlocation=player.getEyeLocation();
  Location legslocation=player.getLocation();
  Vector headdirection=headlocation.toVector().subtract(headblocklocation.toVector()).normalize().multiply(.5);
  Vector legsdirection=legslocation.toVector().subtract(legsblocklocation.toVector()).normalize().multiply(.5);
  Block newheadblock=headblock;
  Block newlegsblock=legsblock;
  if (!headlocation.getBlock().equals(headblock)) {
    headblocklocation=headblocklocation.clone().add(headdirection);
    newheadblock=headblocklocation.getBlock();
  }
  if (!legslocation.getBlock().equals(legsblock)) {
    legsblocklocation=legsblocklocation.clone().add(legsdirection);
    newlegsblock=legsblocklocation.getBlock();
  }
  if (EarthMethods.isTransparentToEarthbending(player,newheadblock) && !newheadblock.isLiquid()) {
    GeneralMethods.breakBlock(newheadblock);
  }
 else   if (!EarthMethods.isEarthbendable(player,newheadblock) && !newheadblock.isLiquid() && newheadblock.getType() != Material.AIR) {
    cancel();
    return false;
  }
  if (EarthMethods.isTransparentToEarthbending(player,newlegsblock) && !newlegsblock.isLiquid()) {
    GeneralMethods.breakBlock(newlegsblock);
  }
 else   if (!EarthMethods.isEarthbendable(player,newlegsblock) && !newlegsblock.isLiquid() && newlegsblock.getType() != Material.AIR) {
    cancel();
    return false;
  }
  if (headblock.getLocation().distance(player.getEyeLocation()) > range || legsblock.getLocation().distance(player.getLocation()) > range) {
    cancel();
    return false;
  }
  if (!newheadblock.equals(headblock)) {
    new TempBlock(newheadblock,headtype,headdata);
    if (TempBlock.isTempBlock(headblock))     TempBlock.revertBlock(headblock,Material.AIR);
  }
  if (!newlegsblock.equals(legsblock)) {
    new TempBlock(newlegsblock,legstype,legsdata);
    if (TempBlock.isTempBlock(legsblock))     TempBlock.revertBlock(legsblock,Material.AIR);
  }
  headblock=newheadblock;
  legsblock=newlegsblock;
  return true;
}","private boolean moveBlocks(){
  if (!player.getWorld().equals(headblock.getWorld())) {
    cancel();
    return false;
  }
  Location headlocation=player.getEyeLocation();
  Location legslocation=player.getLocation();
  Vector headdirection=headlocation.toVector().subtract(headblocklocation.toVector()).normalize().multiply(.5);
  Vector legsdirection=legslocation.toVector().subtract(legsblocklocation.toVector()).normalize().multiply(.5);
  Block newheadblock=headblock;
  Block newlegsblock=legsblock;
  if (!headlocation.getBlock().equals(headblock)) {
    headblocklocation=headblocklocation.clone().add(headdirection);
    newheadblock=headblocklocation.getBlock();
  }
  if (!legslocation.getBlock().equals(legsblock)) {
    legsblocklocation=legsblocklocation.clone().add(legsdirection);
    newlegsblock=legsblocklocation.getBlock();
  }
  if (EarthMethods.isTransparentToEarthbending(player,newheadblock) && !newheadblock.isLiquid()) {
    GeneralMethods.breakBlock(newheadblock);
  }
 else   if (!EarthMethods.isEarthbendable(player,newheadblock) && !newheadblock.isLiquid() && newheadblock.getType() != Material.AIR) {
    cancel();
    return false;
  }
  if (EarthMethods.isTransparentToEarthbending(player,newlegsblock) && !newlegsblock.isLiquid()) {
    GeneralMethods.breakBlock(newlegsblock);
  }
 else   if (!EarthMethods.isEarthbendable(player,newlegsblock) && !newlegsblock.isLiquid() && newlegsblock.getType() != Material.AIR) {
    cancel();
    return false;
  }
  if (headblock.getLocation().distance(player.getEyeLocation()) > range || legsblock.getLocation().distance(player.getLocation()) > range) {
    cancel();
    return false;
  }
  if (!newheadblock.equals(headblock)) {
    new TempBlock(newheadblock,headtype,headdata);
    if (TempBlock.isTempBlock(headblock))     TempBlock.revertBlock(headblock,Material.AIR);
  }
  if (!newlegsblock.equals(legsblock)) {
    new TempBlock(newlegsblock,legstype,legsdata);
    if (TempBlock.isTempBlock(legsblock))     TempBlock.revertBlock(legsblock,Material.AIR);
  }
  headblock=newheadblock;
  legsblock=newlegsblock;
  return true;
}",0.9966793168880456
134120,"private boolean progress(){
  if (player.isDead() || !player.isOnline() || !GeneralMethods.canBend(player.getName(),""String_Node_Str"")) {
    breakBlock();
    return false;
  }
  if (System.currentTimeMillis() - time >= interval) {
    time=System.currentTimeMillis();
    if (falling) {
      breakBlock();
      return false;
    }
    if (!EarthMethods.isEarthbendable(player,sourceblock) && sourceblock.getType() != Material.COBBLESTONE) {
      instances.remove(id);
      return false;
    }
    if (!progressing && !falling) {
      if (GeneralMethods.getBoundAbility(player) == null) {
        unfocusBlock();
        return false;
      }
      if (!GeneralMethods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
        unfocusBlock();
        return false;
      }
      if (sourceblock == null) {
        instances.remove(id);
        return false;
      }
      if (player.getWorld() != sourceblock.getWorld()) {
        unfocusBlock();
        return false;
      }
      if (sourceblock.getLocation().distance(player.getLocation()) > preparerange) {
        unfocusBlock();
        return false;
      }
    }
    if (falling) {
      breakBlock();
    }
 else {
      if (!progressing) {
        return false;
      }
      if (sourceblock.getY() == firstdestination.getBlockY())       settingup=false;
      Vector direction;
      if (settingup) {
        direction=GeneralMethods.getDirection(location,firstdestination).normalize();
      }
 else {
        direction=GeneralMethods.getDirection(location,destination).normalize();
      }
      location=location.clone().add(direction);
      WaterMethods.removeWaterSpouts(location,player);
      AirMethods.removeAirSpouts(location,player);
      Block block=location.getBlock();
      if (block.getLocation().equals(sourceblock.getLocation())) {
        location=location.clone().add(direction);
        block=location.getBlock();
      }
      if (EarthMethods.isTransparentToEarthbending(player,block) && !block.isLiquid()) {
        GeneralMethods.breakBlock(block);
      }
 else       if (!settingup) {
        breakBlock();
        return false;
      }
 else {
        location=location.clone().subtract(direction);
        direction=GeneralMethods.getDirection(location,destination).normalize();
        location=location.clone().add(direction);
        WaterMethods.removeWaterSpouts(location,player);
        AirMethods.removeAirSpouts(location,player);
        double radius=FireBlast.AFFECTING_RADIUS;
        Player source=player;
        if (EarthBlast.annihilateBlasts(location,radius,source) || WaterManipulation.annihilateBlasts(location,radius,source) || FireBlast.annihilateBlasts(location,radius,source)) {
          breakBlock();
          return false;
        }
        Combustion.removeAroundPoint(location,radius);
        Block block2=location.getBlock();
        if (block2.getLocation().equals(sourceblock.getLocation())) {
          location=location.clone().add(direction);
          block2=location.getBlock();
        }
        if (EarthMethods.isTransparentToEarthbending(player,block) && !block.isLiquid()) {
          GeneralMethods.breakBlock(block);
        }
 else {
          breakBlock();
          return false;
        }
      }
      for (      Entity entity : GeneralMethods.getEntitiesAroundPoint(location,FireBlast.AFFECTING_RADIUS)) {
        if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()))         continue;
        if (entity instanceof LivingEntity && (entity.getEntityId() != player.getEntityId() || hitself)) {
          AirMethods.breakBreathbendingHold(entity);
          Location location=player.getEyeLocation();
          Vector vector=location.getDirection();
          entity.setVelocity(vector.normalize().multiply(pushfactor));
          double damage=this.damage;
          if (EarthMethods.isMetal(sourceblock) && EarthMethods.canMetalbend(player)) {
            damage=EarthMethods.getMetalAugment(this.damage);
          }
          GeneralMethods.damageEntity(player,entity,damage);
          progressing=false;
        }
      }
      if (!progressing) {
        breakBlock();
        return false;
      }
      if (revert) {
        sourceblock.setType(sourcetype);
        EarthMethods.moveEarthBlock(sourceblock,block);
        if (block.getType() == Material.SAND)         block.setType(Material.SANDSTONE);
        if (block.getType() == Material.GRAVEL)         block.setType(Material.STONE);
      }
 else {
        block.setType(sourceblock.getType());
        sourceblock.setType(Material.AIR);
      }
      sourceblock=block;
      if (location.distance(destination) < 1) {
        if (sourcetype == Material.SAND || sourcetype == Material.GRAVEL) {
          progressing=false;
          sourceblock.setType(sourcetype);
        }
        falling=true;
        progressing=false;
      }
      return true;
    }
  }
  return false;
}","private boolean progress(){
  if (player.isDead() || !player.isOnline() || !GeneralMethods.canBend(player.getName(),""String_Node_Str"")) {
    breakBlock();
    return false;
  }
  if (System.currentTimeMillis() - time >= interval) {
    time=System.currentTimeMillis();
    if (falling) {
      breakBlock();
      return false;
    }
    if (!EarthMethods.isEarthbendable(player,sourceblock) && sourceblock.getType() != Material.COBBLESTONE) {
      instances.remove(id);
      return false;
    }
    if (!progressing && !falling) {
      if (GeneralMethods.getBoundAbility(player) == null) {
        unfocusBlock();
        return false;
      }
      if (!GeneralMethods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
        unfocusBlock();
        return false;
      }
      if (sourceblock == null) {
        instances.remove(id);
        return false;
      }
      if (!player.getWorld().equals(sourceblock.getWorld())) {
        unfocusBlock();
        return false;
      }
      if (sourceblock.getLocation().distance(player.getLocation()) > preparerange) {
        unfocusBlock();
        return false;
      }
    }
    if (falling) {
      breakBlock();
    }
 else {
      if (!progressing) {
        return false;
      }
      if (sourceblock.getY() == firstdestination.getBlockY())       settingup=false;
      Vector direction;
      if (settingup) {
        direction=GeneralMethods.getDirection(location,firstdestination).normalize();
      }
 else {
        direction=GeneralMethods.getDirection(location,destination).normalize();
      }
      location=location.clone().add(direction);
      WaterMethods.removeWaterSpouts(location,player);
      AirMethods.removeAirSpouts(location,player);
      Block block=location.getBlock();
      if (block.getLocation().equals(sourceblock.getLocation())) {
        location=location.clone().add(direction);
        block=location.getBlock();
      }
      if (EarthMethods.isTransparentToEarthbending(player,block) && !block.isLiquid()) {
        GeneralMethods.breakBlock(block);
      }
 else       if (!settingup) {
        breakBlock();
        return false;
      }
 else {
        location=location.clone().subtract(direction);
        direction=GeneralMethods.getDirection(location,destination).normalize();
        location=location.clone().add(direction);
        WaterMethods.removeWaterSpouts(location,player);
        AirMethods.removeAirSpouts(location,player);
        double radius=FireBlast.AFFECTING_RADIUS;
        Player source=player;
        if (EarthBlast.annihilateBlasts(location,radius,source) || WaterManipulation.annihilateBlasts(location,radius,source) || FireBlast.annihilateBlasts(location,radius,source)) {
          breakBlock();
          return false;
        }
        Combustion.removeAroundPoint(location,radius);
        Block block2=location.getBlock();
        if (block2.getLocation().equals(sourceblock.getLocation())) {
          location=location.clone().add(direction);
          block2=location.getBlock();
        }
        if (EarthMethods.isTransparentToEarthbending(player,block) && !block.isLiquid()) {
          GeneralMethods.breakBlock(block);
        }
 else {
          breakBlock();
          return false;
        }
      }
      for (      Entity entity : GeneralMethods.getEntitiesAroundPoint(location,FireBlast.AFFECTING_RADIUS)) {
        if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()))         continue;
        if (entity instanceof LivingEntity && (entity.getEntityId() != player.getEntityId() || hitself)) {
          AirMethods.breakBreathbendingHold(entity);
          Location location=player.getEyeLocation();
          Vector vector=location.getDirection();
          entity.setVelocity(vector.normalize().multiply(pushfactor));
          double damage=this.damage;
          if (EarthMethods.isMetal(sourceblock) && EarthMethods.canMetalbend(player)) {
            damage=EarthMethods.getMetalAugment(this.damage);
          }
          GeneralMethods.damageEntity(player,entity,damage);
          progressing=false;
        }
      }
      if (!progressing) {
        breakBlock();
        return false;
      }
      if (revert) {
        sourceblock.setType(sourcetype);
        EarthMethods.moveEarthBlock(sourceblock,block);
        if (block.getType() == Material.SAND)         block.setType(Material.SANDSTONE);
        if (block.getType() == Material.GRAVEL)         block.setType(Material.STONE);
      }
 else {
        block.setType(sourceblock.getType());
        sourceblock.setType(Material.AIR);
      }
      sourceblock=block;
      if (location.distance(destination) < 1) {
        if (sourcetype == Material.SAND || sourcetype == Material.GRAVEL) {
          progressing=false;
          sourceblock.setType(sourcetype);
        }
        falling=true;
        progressing=false;
      }
      return true;
    }
  }
  return false;
}",0.9985858585858586
134121,"@SuppressWarnings(""String_Node_Str"") private void set(){
  Block standblock=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  BendingPlayer bp=GeneralMethods.getBendingPlayer(player.getName());
  if (!bp.isTremorsensing()) {
    if (block != null)     revert();
    return;
  }
  if (EarthMethods.isEarthbendable(player,standblock) && block == null) {
    block=standblock;
    player.sendBlockChange(block.getLocation(),89,(byte)1);
    instances.put(player,this);
  }
 else   if (EarthMethods.isEarthbendable(player,standblock) && !block.equals(standblock)) {
    revert();
    block=standblock;
    player.sendBlockChange(block.getLocation(),89,(byte)1);
    instances.put(player,this);
  }
 else   if (block == null) {
    return;
  }
 else   if (player.getWorld() != block.getWorld()) {
    revert();
  }
 else   if (!EarthMethods.isEarthbendable(player,standblock)) {
    revert();
  }
}","@SuppressWarnings(""String_Node_Str"") private void set(){
  Block standblock=player.getLocation().getBlock().getRelative(BlockFace.DOWN);
  BendingPlayer bp=GeneralMethods.getBendingPlayer(player.getName());
  if (!bp.isTremorsensing()) {
    if (block != null)     revert();
    return;
  }
  if (EarthMethods.isEarthbendable(player,standblock) && block == null) {
    block=standblock;
    player.sendBlockChange(block.getLocation(),89,(byte)1);
    instances.put(player,this);
  }
 else   if (EarthMethods.isEarthbendable(player,standblock) && !block.equals(standblock)) {
    revert();
    block=standblock;
    player.sendBlockChange(block.getLocation(),89,(byte)1);
    instances.put(player,this);
  }
 else   if (block == null) {
    return;
  }
 else   if (!player.getWorld().equals(block.getWorld())) {
    revert();
  }
 else   if (!EarthMethods.isEarthbendable(player,standblock)) {
    revert();
  }
}",0.9922992299229924
134122,"public static boolean isWithinShield(Location loc){
  for (  Player player : instances.keySet()) {
    FireShield fshield=instances.get(player);
    Location playerLoc=fshield.player.getLocation();
    if (fshield.shield) {
      if (playerLoc.getWorld() != loc.getWorld())       return false;
      if (playerLoc.distance(loc) <= fshield.radius)       return true;
    }
 else {
      Location tempLoc=playerLoc.clone().add(playerLoc.multiply(fshield.discradius));
      if (tempLoc.getWorld() != loc.getWorld())       return false;
      if (tempLoc.distance(loc) <= fshield.discradius)       return true;
    }
  }
  return false;
}","public static boolean isWithinShield(Location loc){
  for (  Player player : instances.keySet()) {
    FireShield fshield=instances.get(player);
    Location playerLoc=fshield.player.getLocation();
    if (fshield.shield) {
      if (!playerLoc.getWorld().equals(loc.getWorld()))       return false;
      if (playerLoc.distance(loc) <= fshield.radius)       return true;
    }
 else {
      Location tempLoc=playerLoc.clone().add(playerLoc.multiply(fshield.discradius));
      if (!tempLoc.getWorld().equals(loc.getWorld()))       return false;
      if (tempLoc.distance(loc) <= fshield.discradius)       return true;
    }
  }
  return false;
}",0.9781591263650546
134123,"@SuppressWarnings(""String_Node_Str"") private void set(){
  Block standingblock=player.getLocation().getBlock();
  Block standblock=standingblock.getRelative(BlockFace.DOWN);
  if (standblock.getType() == Material.GLOWSTONE) {
    revert();
  }
 else   if ((FireStream.isIgnitable(player,standingblock) && standblock.getType() != Material.LEAVES) && block == null && !blocks.containsKey(standblock)) {
    block=standingblock;
    normaltype=block.getType();
    normaldata=block.getData();
    block.setType(Material.TORCH);
    blocks.put(block,player);
  }
 else   if ((FireStream.isIgnitable(player,standingblock) && standblock.getType() != Material.LEAVES) && !block.equals(standblock) && !blocks.containsKey(standblock)&& GeneralMethods.isSolid(standblock)) {
    revert();
    block=standingblock;
    normaltype=block.getType();
    normaldata=block.getData();
    block.setType(Material.TORCH);
    blocks.put(block,player);
  }
 else   if (block == null) {
    return;
  }
 else   if (player.getWorld() != block.getWorld()) {
    revert();
  }
 else   if (player.getLocation().distance(block.getLocation()) > FireMethods.getFirebendingDayAugment(range,player.getWorld())) {
    revert();
  }
}","@SuppressWarnings(""String_Node_Str"") private void set(){
  Block standingblock=player.getLocation().getBlock();
  Block standblock=standingblock.getRelative(BlockFace.DOWN);
  if (standblock.getType() == Material.GLOWSTONE) {
    revert();
  }
 else   if ((FireStream.isIgnitable(player,standingblock) && standblock.getType() != Material.LEAVES && standblock.getType() != Material.LEAVES_2) && block == null && !blocks.containsKey(standblock)) {
    block=standingblock;
    normaltype=block.getType();
    normaldata=block.getData();
    block.setType(Material.TORCH);
    blocks.put(block,player);
  }
 else   if ((FireStream.isIgnitable(player,standingblock) && standblock.getType() != Material.LEAVES && standblock.getType() != Material.LEAVES_2) && !block.equals(standblock) && !blocks.containsKey(standblock)&& GeneralMethods.isSolid(standblock)) {
    revert();
    block=standingblock;
    normaltype=block.getType();
    normaldata=block.getData();
    block.setType(Material.TORCH);
    blocks.put(block,player);
  }
 else   if (block == null) {
    return;
  }
 else   if (!player.getWorld().equals(block.getWorld())) {
    revert();
  }
 else   if (player.getLocation().distance(block.getLocation()) > FireMethods.getFirebendingDayAugment(range,player.getWorld())) {
    revert();
  }
}",0.664
134124,"private void progress(){
  if (!instances.containsKey(player)) {
    return;
  }
  if (player.isDead() || !player.isOnline() || world != player.getWorld()) {
    remove();
    return;
  }
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled()) {
    remove();
    return;
  }
  if (!MultiAbilityManager.hasMultiAbilityBound(player,""String_Node_Str"")) {
    remove();
    return;
  }
  if (maxPunches == 0 || maxUses == 0 || maxIceBlasts == 0 || (leftArmConsumed && rightArmConsumed)) {
    remove();
    return;
  }
  selectedSlot=player.getInventory().getHeldItemSlot();
  displayRightArm();
  displayLeftArm();
  if (lightningEnabled)   checkIfZapped();
}","private void progress(){
  if (!instances.containsKey(player)) {
    return;
  }
  if (player.isDead() || !player.isOnline() || !world.equals(player.getWorld())) {
    remove();
    return;
  }
  if (!GeneralMethods.getBendingPlayer(player.getName()).isToggled()) {
    remove();
    return;
  }
  if (!MultiAbilityManager.hasMultiAbilityBound(player,""String_Node_Str"")) {
    remove();
    return;
  }
  if (maxPunches == 0 || maxUses == 0 || maxIceBlasts == 0 || (leftArmConsumed && rightArmConsumed)) {
    remove();
    return;
  }
  selectedSlot=player.getInventory().getHeldItemSlot();
  displayRightArm();
  displayLeftArm();
  if (lightningEnabled)   checkIfZapped();
}",0.9896142433234422
134125,"private void progress(){
  if (!hasEmptyWaterBottle()) {
    remove();
    return;
  }
  if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (player.getWorld() != location.getWorld()) {
    remove();
    return;
  }
  if (System.currentTimeMillis() < time + interval)   return;
  time=System.currentTimeMillis();
  Vector direction=GeneralMethods.getDirection(location,player.getEyeLocation()).normalize();
  location=location.clone().add(direction);
  if (location == null || block == null) {
    remove();
    return;
  }
  if (location.getBlock().equals(block.getLocation().getBlock()))   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",location)) {
    remove();
    return;
  }
  if (location.distance(player.getEyeLocation()) > WaterMethods.waterbendingNightAugment(range,player.getWorld())) {
    remove();
    return;
  }
  if (location.distance(player.getEyeLocation()) <= 1.5) {
    fillBottle();
    return;
  }
  Block newblock=location.getBlock();
  if (EarthMethods.isTransparentToEarthbending(player,newblock) && !newblock.isLiquid()) {
    block.revertBlock();
    block=new TempBlock(newblock,Material.WATER,full);
  }
 else {
    remove();
    return;
  }
}","private void progress(){
  if (!hasEmptyWaterBottle()) {
    remove();
    return;
  }
  if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (!player.getWorld().equals(location.getWorld())) {
    remove();
    return;
  }
  if (System.currentTimeMillis() < time + interval)   return;
  time=System.currentTimeMillis();
  Vector direction=GeneralMethods.getDirection(location,player.getEyeLocation()).normalize();
  location=location.clone().add(direction);
  if (location == null || block == null) {
    remove();
    return;
  }
  if (location.getBlock().equals(block.getLocation().getBlock()))   return;
  if (GeneralMethods.isRegionProtectedFromBuild(player,""String_Node_Str"",location)) {
    remove();
    return;
  }
  if (location.distance(player.getEyeLocation()) > WaterMethods.waterbendingNightAugment(range,player.getWorld())) {
    remove();
    return;
  }
  if (location.distance(player.getEyeLocation()) <= 1.5) {
    fillBottle();
    return;
  }
  Block newblock=location.getBlock();
  if (EarthMethods.isTransparentToEarthbending(player,newblock) && !newblock.isLiquid()) {
    block.revertBlock();
    block=new TempBlock(newblock,Material.WATER,full);
  }
 else {
    remove();
    return;
  }
}",0.9943502824858758
134126,"public void save(){
  DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(1) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(2) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(3) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(4) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(5) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(6) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(7) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(8) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  DBConnection.sql.modifyQuery(""String_Node_Str"" + abilities.get(9) + ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
}","public void save(){
  DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
  for (int i=1; i <= 9; i++) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + i + ""String_Node_Str""+ abilities.get(i)+ ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name);
  }
}",0.2923076923076923
134127,"public void save(){
  DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
  for (int i=1; i <= 9; i++) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + i + ""String_Node_Str""+ abilities.get(i)+ ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
}","public void save(){
  if (ProjectKorra.plugin.getConfig().getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + uuid.toString() + ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
  for (int i=1; i <= 9; i++) {
    DBConnection.sql.modifyQuery(""String_Node_Str"" + i + ""String_Node_Str""+ (abilities.get(i) == null ? null : abilities.get(i))+ ""String_Node_Str""+ uuid.toString()+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
}",0.700507614213198
134128,"/** 
 * Damages an Entity by amount of damage specified. Starts a   {@link EntityDamageByEntityEvent}.
 * @param player The player dealing the damage
 * @param entity The entity that is receiving the damage
 * @param damage The amount of damage to deal
 * @param ability The ability that is used to damage the entity
 */
public static void damageEntity(Player player,Entity entity,double damage,String ability){
  if (entity instanceof LivingEntity) {
    if (entity instanceof Player) {
      if (Commands.invincible.contains(((Player)entity).getName()))       return;
    }
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.exemptPermanently(player,CheckType.FIGHT_REACH);
    }
    if (((LivingEntity)entity).getHealth() - damage <= 0 && entity instanceof Player && !entity.isDead()) {
      if (ability == null) {
        ability=getLastUsedAbility(player);
      }
      if (ability != null && !ability.isEmpty()) {
        PlayerBendingDeathEvent event=new PlayerBendingDeathEvent((Player)entity,player,ability,damage);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
    }
    ((LivingEntity)entity).damage(damage,player);
    ((LivingEntity)entity).setLastDamageCause(new EntityDamageByEntityEvent(player,entity,DamageCause.CUSTOM,damage));
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.unexempt(player);
    }
  }
}","/** 
 * Damages an Entity by amount of damage specified. Starts a   {@link EntityDamageByEntityEvent}.
 * @param player The player dealing the damage
 * @param entity The entity that is receiving the damage
 * @param damage The amount of damage to deal
 * @param ability The ability that is used to damage the entity
 */
public static void damageEntity(Player player,Entity entity,double damage,String ability){
  if (entity instanceof LivingEntity) {
    if (entity instanceof Player) {
      if (Commands.invincible.contains(((Player)entity).getName()))       return;
    }
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.exemptPermanently(player,CheckType.FIGHT_REACH);
    }
    if (((LivingEntity)entity).getHealth() - damage <= 0 && entity instanceof Player && !entity.isDead()) {
      if (ability == null) {
        ability=getLastUsedAbility(player,true);
      }
      if (ability != null && !ability.isEmpty()) {
        PlayerBendingDeathEvent event=new PlayerBendingDeathEvent((Player)entity,player,ability,damage);
        Bukkit.getServer().getPluginManager().callEvent(event);
      }
    }
    ((LivingEntity)entity).damage(damage,player);
    ((LivingEntity)entity).setLastDamageCause(new EntityDamageByEntityEvent(player,entity,DamageCause.CUSTOM,damage));
    if (Bukkit.getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      NCPExemptionManager.unexempt(player);
    }
  }
}",0.9982764563943468
134129,"/** 
 * Returns the last ability used by a player. Also checks if a combo was used.
 * @param player
 * @return
 */
public static String getLastUsedAbility(Player player){
  List<AbilityInformation> lastUsedAbility=ComboManager.getRecentlyUsedAbilities(player,1);
  if (!lastUsedAbility.isEmpty()) {
    if (ComboManager.checkForValidCombo(player) != null) {
      return ComboManager.checkForValidCombo(player).getName();
    }
 else {
      return lastUsedAbility.get(0).getAbilityName();
    }
  }
  return null;
}","/** 
 * Returns the last ability used by a player. Also checks if a combo was used.
 * @param player
 * @return
 */
public static String getLastUsedAbility(Player player,boolean checkCombos){
  List<AbilityInformation> lastUsedAbility=ComboManager.getRecentlyUsedAbilities(player,1);
  if (!lastUsedAbility.isEmpty()) {
    if (ComboManager.checkForValidCombo(player) != null && checkCombos) {
      return ComboManager.checkForValidCombo(player).getName();
    }
 else {
      return lastUsedAbility.get(0).getAbilityName();
    }
  }
  return null;
}",0.9672591206735268
134130,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){
  if (EarthArmor.instances.containsKey(event.getEntity())) {
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.LEATHER_BOOTS || drops.get(i).getType() == Material.LEATHER_CHESTPLATE || drops.get(i).getType() == Material.LEATHER_HELMET || drops.get(i).getType() == Material.LEATHER_LEGGINGS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    if (EarthArmor.instances.get(event.getEntity()).oldarmor != null) {
      for (      ItemStack is : EarthArmor.instances.get(event.getEntity()).oldarmor) {
        if (!(is.getType() == Material.AIR))         newdrops.add(is);
      }
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
    EarthArmor.removeEffect(event.getEntity());
  }
  if (MetalClips.instances.containsKey(event.getEntity())) {
    MetalClips.instances.get(event.getEntity()).remove();
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.IRON_HELMET || drops.get(i).getType() == Material.IRON_CHESTPLATE || drops.get(i).getType() == Material.IRON_LEGGINGS || drops.get(i).getType() == Material.IRON_BOOTS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
  }
  if (bendingDeathPlayer.containsKey(event.getEntity())) {
    String message=ConfigManager.deathMsgConfig.getConfig().getString(""String_Node_Str"");
    String ability=bendingDeathPlayer.get(event.getEntity());
    String element=GeneralMethods.getAbilityElement(ability).name();
    if (ConfigManager.deathMsgConfig.getConfig().contains(element + ""String_Node_Str"" + ability)) {
      message=ConfigManager.deathMsgConfig.getConfig().getString(element + ""String_Node_Str"" + ability);
    }
    message=message.replace(""String_Node_Str"",event.getEntity().getName()).replace(""String_Node_Str"",event.getEntity().getKiller().getName()).replace(""String_Node_Str"",GeneralMethods.getAbilityColor(ability) + ability);
    event.setDeathMessage(message);
    bendingDeathPlayer.remove(event.getEntity());
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){
  if (EarthArmor.instances.containsKey(event.getEntity())) {
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.LEATHER_BOOTS || drops.get(i).getType() == Material.LEATHER_CHESTPLATE || drops.get(i).getType() == Material.LEATHER_HELMET || drops.get(i).getType() == Material.LEATHER_LEGGINGS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    if (EarthArmor.instances.get(event.getEntity()).oldarmor != null) {
      for (      ItemStack is : EarthArmor.instances.get(event.getEntity()).oldarmor) {
        if (!(is.getType() == Material.AIR))         newdrops.add(is);
      }
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
    EarthArmor.removeEffect(event.getEntity());
  }
  if (MetalClips.instances.containsKey(event.getEntity())) {
    MetalClips.instances.get(event.getEntity()).remove();
    List<ItemStack> drops=event.getDrops();
    List<ItemStack> newdrops=new ArrayList<ItemStack>();
    for (int i=0; i < drops.size(); i++) {
      if (!(drops.get(i).getType() == Material.IRON_HELMET || drops.get(i).getType() == Material.IRON_CHESTPLATE || drops.get(i).getType() == Material.IRON_LEGGINGS || drops.get(i).getType() == Material.IRON_BOOTS || drops.get(i).getType() == Material.AIR))       newdrops.add((drops.get(i)));
    }
    event.getDrops().clear();
    event.getDrops().addAll(newdrops);
  }
  if (bendingDeathPlayer.containsKey(event.getEntity())) {
    String message=ConfigManager.deathMsgConfig.getConfig().getString(""String_Node_Str"");
    String ability=bendingDeathPlayer.get(event.getEntity());
    String element=null;
    if (GeneralMethods.abilityExists(ability)) {
      element=GeneralMethods.getAbilityElement(ability).name();
    }
    if (ComboManager.checkForValidCombo(event.getEntity().getKiller()).getName().equalsIgnoreCase(ability)) {
      element=GeneralMethods.getAbilityElement(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)).name();
      ability=element + ""String_Node_Str"";
    }
    if (ConfigManager.deathMsgConfig.getConfig().contains(element + ""String_Node_Str"" + ability)) {
      message=ConfigManager.deathMsgConfig.getConfig().getString(element + ""String_Node_Str"" + ability);
    }
    message=message.replace(""String_Node_Str"",event.getEntity().getName()).replace(""String_Node_Str"",event.getEntity().getKiller().getName()).replace(""String_Node_Str"",GeneralMethods.getAbilityColor(GeneralMethods.getLastUsedAbility(event.getEntity().getKiller(),false)) + ability);
    event.setDeathMessage(message);
    bendingDeathPlayer.remove(event.getEntity());
  }
}",0.919622641509434
134131,"/** 
 * Determines if a BlockSourceInformation is valid, depending on the players range from the source, and if the source has not been modified since the time that it was first created.
 * @param info the source information.
 * @param range the maximum bending range.
 * @return true if it is valid.
 */
private static boolean isStillAValidSource(BlockSourceInformation info,double range,ClickType clickType){
  if (info == null || info.getBlock() == null) {
    return false;
  }
 else   if (info.getClickType() != clickType) {
    return false;
  }
 else   if (info.getPlayer().getWorld() != info.getBlock().getWorld()) {
    return false;
  }
 else   if (Math.abs(info.getPlayer().getLocation().distance(info.getBlock().getLocation())) > range) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.WATER && !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.ICE && !WaterMethods.isIcebendable(info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.PLANT && (!WaterMethods.isPlant(info.getBlock()) || !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.EARTH && !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.METAL && (!EarthMethods.isMetal(info.getBlock()) || !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.LAVA && (!EarthMethods.isLava(info.getBlock()) || !EarthMethods.isLavabendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
  return true;
}","/** 
 * Determines if a BlockSourceInformation is valid, depending on the players range from the source, and if the source has not been modified since the time that it was first created.
 * @param info the source information.
 * @param range the maximum bending range.
 * @return true if it is valid.
 */
private static boolean isStillAValidSource(BlockSourceInformation info,double range,ClickType clickType){
  if (info == null || info.getBlock() == null) {
    return false;
  }
 else   if (info.getClickType() != clickType) {
    return false;
  }
 else   if (!info.getPlayer().getWorld().equals(info.getBlock().getWorld())) {
    return false;
  }
 else   if (Math.abs(info.getPlayer().getLocation().distance(info.getBlock().getLocation())) > range) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.WATER && !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.ICE && !WaterMethods.isIcebendable(info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.PLANT && (!WaterMethods.isPlant(info.getBlock()) || !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.EARTH && !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.METAL && (!EarthMethods.isMetal(info.getBlock()) || !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.LAVA && (!EarthMethods.isLava(info.getBlock()) || !EarthMethods.isLavabendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
  return true;
}",0.9961111111111112
134132,"/** 
 * Determines if a BlockSourceInformation is valid, depending on the players range from the source, and if the source has not been modified since the time that it was first created.
 * @param info the source information.
 * @param range the maximum bending range.
 * @return true if it is valid.
 */
private static boolean isStillAValidSource(BlockSourceInformation info,double range,ClickType clickType){
  if (info == null || info.getBlock() == null) {
    return false;
  }
 else   if (info.getClickType() != clickType) {
    return false;
  }
 else   if (Math.abs(info.getPlayer().getLocation().distance(info.getBlock().getLocation())) > range) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.WATER && !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.ICE && !WaterMethods.isIcebendable(info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.PLANT && (!WaterMethods.isPlant(info.getBlock()) || !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.EARTH && !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.METAL && (!EarthMethods.isMetal(info.getBlock()) || !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.LAVA && (!EarthMethods.isLava(info.getBlock()) || !EarthMethods.isLavabendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
  return true;
}","/** 
 * Determines if a BlockSourceInformation is valid, depending on the players range from the source, and if the source has not been modified since the time that it was first created.
 * @param info the source information.
 * @param range the maximum bending range.
 * @return true if it is valid.
 */
private static boolean isStillAValidSource(BlockSourceInformation info,double range,ClickType clickType){
  if (info == null || info.getBlock() == null) {
    return false;
  }
 else   if (info.getClickType() != clickType) {
    return false;
  }
 else   if (info.getPlayer().getWorld() != info.getBlock().getWorld()) {
    return false;
  }
 else   if (Math.abs(info.getPlayer().getLocation().distance(info.getBlock().getLocation())) > range) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.WATER && !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.ICE && !WaterMethods.isIcebendable(info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.PLANT && (!WaterMethods.isPlant(info.getBlock()) || !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.EARTH && !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.METAL && (!EarthMethods.isMetal(info.getBlock()) || !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.LAVA && (!EarthMethods.isLava(info.getBlock()) || !EarthMethods.isLavabendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
  return true;
}",0.9728493855387254
134133,"/** 
 * Determines if a BlockSourceInformation is valid, depending on the players range from the source, and if the source has not been modified since the time that it was first created.
 * @param info the source information.
 * @param range the maximum bending range.
 * @return true if it is valid.
 */
private static boolean isStillAValidSource(BlockSourceInformation info,double range,ClickType clickType){
  if (info == null || info.getBlock() == null) {
    return false;
  }
 else   if (info.getClickType() != clickType) {
    return false;
  }
 else   if (Math.abs(info.getPlayer().getLocation().distance(info.getBlock().getLocation())) > range) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.WATER && !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.ICE && !WaterMethods.isIcebendable(info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.PLANT && (!WaterMethods.isPlant(info.getBlock()) || !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.EARTH && !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.METAL && (!EarthMethods.isMetal(info.getBlock()) || !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.LAVA && (!EarthMethods.isLava(info.getBlock()) || !EarthMethods.isLavabendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
  return true;
}","/** 
 * Determines if a BlockSourceInformation is valid, depending on the players range from the source, and if the source has not been modified since the time that it was first created.
 * @param info the source information.
 * @param range the maximum bending range.
 * @return true if it is valid.
 */
private static boolean isStillAValidSource(BlockSourceInformation info,double range,ClickType clickType){
  if (info == null || info.getBlock() == null) {
    return false;
  }
 else   if (info.getClickType() != clickType) {
    return false;
  }
 else   if (info.getPlayer().getWorld() != info.getBlock().getWorld()) {
    return false;
  }
 else   if (Math.abs(info.getPlayer().getLocation().distance(info.getBlock().getLocation())) > range) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.WATER && !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.ICE && !WaterMethods.isIcebendable(info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.PLANT && (!WaterMethods.isPlant(info.getBlock()) || !WaterMethods.isWaterbendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.EARTH && !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock())) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.METAL && (!EarthMethods.isMetal(info.getBlock()) || !EarthMethods.isEarthbendable(info.getPlayer(),info.getBlock()))) {
    return false;
  }
 else   if (info.getSourceType() == BlockSourceType.LAVA && (!EarthMethods.isLava(info.getBlock()) || !EarthMethods.isLavabendable(info.getBlock(),info.getPlayer()))) {
    return false;
  }
  return true;
}",0.9728493855387254
134134,"public static void removeAll(){
  for (  Player player : instances.keySet()) {
    Flight flight=instances.get(player);
    flight.revert();
    flight.remove();
  }
}","public static void removeAll(){
  for (  Player player : instances.keySet()) {
    Flight flight=instances.get(player);
    if (player == null || flight == null) {
      instances.remove(player);
      continue;
    }
    flight.revert();
    flight.remove();
  }
}",0.6342592592592593
134135,"public void revert(){
  player.setAllowFlight(couldFly);
  player.setFlying(wasFlying);
}","public void revert(){
  if (player == null) {
    instances.remove(player);
    return;
  }
  player.setAllowFlight(couldFly);
  player.setFlying(wasFlying);
}",0.717741935483871
134136,"public static boolean isChiBlocked(String player){
  return Methods.getBendingPlayer(player).isChiBlocked();
}","public static boolean isChiBlocked(String player){
  if (Methods.getBendingPlayer(player) != null) {
    return Methods.getBendingPlayer(player).isChiBlocked();
  }
  return false;
}",0.7534246575342466
134137,"public static boolean isWithinShield(Location loc){
  for (  int ID : instances.keySet()) {
    AirShield ashield=instances.get(ID);
    if (ashield.player.getLocation().distance(loc) <= ashield.radius)     return true;
  }
  return false;
}","public static boolean isWithinShield(Location loc){
  for (  int ID : instances.keySet()) {
    AirShield ashield=instances.get(ID);
    if (ashield.player.getLocation().getWorld() != loc.getWorld())     return false;
    if (ashield.player.getLocation().distance(loc) <= ashield.radius)     return true;
  }
  return false;
}",0.8500881834215167
134138,"public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && vectorLoc.distance(loc) <= radius) {
        instances.remove(aswipe.id);
        removed=true;
      }
    }
  }
  return removed;
}","public static boolean removeSwipesAroundPoint(Location loc,double radius){
  boolean removed=false;
  for (  int ID : instances.keySet()) {
    AirSwipe aswipe=instances.get(ID);
    for (    Vector vec : aswipe.elements.keySet()) {
      Location vectorLoc=aswipe.elements.get(vec);
      if (vectorLoc != null && vectorLoc.getWorld() != loc.getWorld() && vectorLoc.distance(loc) <= radius) {
        instances.remove(aswipe.id);
        removed=true;
      }
    }
  }
  return removed;
}",0.9552238805970148
134139,"public void smashToSmashCollisionDetection(){
  for (int i=0; i < instances.size(); i++) {
    EarthSmash smash=instances.get(i);
    if (smash.loc != null) {
      if (smash != this && smash.loc.distanceSquared(loc) < Math.pow(FLIGHT_DETECTION_RADIUS,2)) {
        smash.remove();
        remove();
        i-=2;
        return;
      }
    }
  }
}","public void smashToSmashCollisionDetection(){
  for (int i=0; i < instances.size(); i++) {
    EarthSmash smash=instances.get(i);
    if (smash.loc != null) {
      if (smash != this && smash.loc.getWorld() == loc.getWorld() && smash.loc.distanceSquared(loc) < Math.pow(FLIGHT_DETECTION_RADIUS,2)) {
        smash.remove();
        remove();
        i-=2;
        return;
      }
    }
  }
}",0.9432432432432432
134140,"private EarthSmash aimingAtSmashCheck(Player player,State reqState){
  if (!ALLOW_GRAB)   return null;
  @SuppressWarnings(""String_Node_Str"") List<Block> blocks=player.getLineOfSight(Methods.getTransparentEarthbending(),(int)Math.round(grabRange));
  for (  EarthSmash smash : instances) {
    if (reqState == null || smash.state == reqState)     for (    Block block : blocks)     if (block.getLocation().distanceSquared(smash.loc) <= Math.pow(GRAB_DETECTION_RADIUS,2))     return smash;
  }
  return null;
}","private EarthSmash aimingAtSmashCheck(Player player,State reqState){
  if (!ALLOW_GRAB)   return null;
  @SuppressWarnings(""String_Node_Str"") List<Block> blocks=player.getLineOfSight(Methods.getTransparentEarthbending(),(int)Math.round(grabRange));
  for (  EarthSmash smash : instances) {
    if (reqState == null || smash.state == reqState)     for (    Block block : blocks)     if (block.getLocation().getWorld() == smash.loc.getWorld() && block.getLocation().distanceSquared(smash.loc) <= Math.pow(GRAB_DETECTION_RADIUS,2))     return smash;
  }
  return null;
}",0.9460966542750928
134141,"public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    FireCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
  }
  return removed;
}","public static boolean removeAroundPoint(Player player,String ability,Location loc,double radius){
  boolean removed=false;
  for (int i=0; i < instances.size(); i++) {
    FireCombo combo=instances.get(i);
    if (combo.getPlayer().equals(player))     continue;
    if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && fs.getLocation().getWorld() == loc.getWorld() && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      for (      FireComboStream fs : combo.tasks) {
        if (fs.getLocation() != null && Math.abs(fs.getLocation().distance(loc)) <= radius) {
          fs.remove();
          removed=true;
        }
      }
    }
 else     if (ability.equalsIgnoreCase(""String_Node_Str"") && combo.ability.equalsIgnoreCase(""String_Node_Str"")) {
      if (combo.currentLoc != null && Math.abs(combo.currentLoc.distance(loc)) <= radius) {
        instances.remove(combo);
        removed=true;
      }
    }
  }
  return removed;
}",0.9802816901408452
134142,"public void progress(){
  progressCounter++;
  for (int i=0; i < tasks.size(); i++) {
    BukkitRunnable br=tasks.get(i);
    if (br instanceof FireComboStream) {
      FireComboStream fs=(FireComboStream)br;
      if (fs.isCancelled())       tasks.remove(fs);
    }
  }
  if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (destination == null) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      Vector eyeDir=player.getEyeLocation().getDirection().normalize().multiply(range);
      destination=player.getEyeLocation().add(eyeDir);
      player.getWorld().playSound(player.getLocation(),Sound.HORSE_JUMP,0.5f,0f);
      player.getWorld().playSound(player.getLocation(),Sound.FIZZ,0.5f,1f);
      for (int i=-30; i <= 30; i+=5) {
        Vector vec=Methods.getDirection(player.getLocation(),destination.clone());
        vec=Methods.rotateXZ(vec,i);
        FireComboStream fs=new FireComboStream(this,vec,player.getLocation(),range,speed);
        fs.setSpread(0.2F);
        fs.setDensity(5);
        fs.setUseNewParticles(true);
        if (tasks.size() % 3 != 0)         fs.setCollides(false);
        fs.runTaskTimer(ProjectKorra.plugin,0,1L);
        tasks.add(fs);
        player.getWorld().playSound(player.getLocation(),Sound.FIRE_IGNITE,0.5f,1f);
      }
      currentLoc=((FireComboStream)tasks.get(0)).getLocation();
      for (      FireComboStream stream : tasks)       if (Methods.blockAbilities(player,abilitiesToBlock,stream.currentLoc,2))       stream.remove();
    }
 else     if (tasks.size() == 0) {
      remove();
      return;
    }
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (destination == null) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      destination=player.getEyeLocation().add(range,0,range);
      player.getWorld().playSound(player.getLocation(),Sound.FIZZ,0.5f,0.5f);
      for (int i=0; i <= 360; i+=5) {
        Vector vec=Methods.getDirection(player.getLocation(),destination.clone());
        vec=Methods.rotateXZ(vec,i - 180);
        vec.setY(0);
        FireComboStream fs=new FireComboStream(this,vec,player.getLocation().clone().add(0,1,0),range,speed);
        fs.setSpread(0.0F);
        fs.setDensity(1);
        fs.setUseNewParticles(true);
        if (tasks.size() % 10 != 0)         fs.setCollides(false);
        fs.runTaskTimer(ProjectKorra.plugin,0,1L);
        tasks.add(fs);
      }
    }
    if (tasks.size() == 0) {
      remove();
      return;
    }
    for (    FireComboStream stream : tasks)     if (Methods.isWithinShields(stream.getLocation()))     stream.remove();
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (System.currentTimeMillis() - time > 5000) {
      remove();
      return;
    }
 else     if (FireJet.instances.containsKey(player)) {
      if (firstTime) {
        if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
          remove();
          return;
        }
        bplayer.addCooldown(""String_Node_Str"",cooldown);
        firstTime=false;
        float spread=0F;
        ParticleEffect.LARGE_EXPLODE.display(player.getLocation(),spread,spread,spread,0,1);
        player.getWorld().playSound(player.getLocation(),Sound.EXPLODE,15,0F);
      }
      player.setVelocity(player.getVelocity().normalize().multiply(speed));
      FireComboStream fs=new FireComboStream(this,player.getVelocity().clone().multiply(-1),player.getLocation(),3,0.5);
      fs.setDensity(1);
      fs.setSpread(0.9F);
      fs.setUseNewParticles(true);
      fs.setCollides(false);
      fs.runTaskTimer(ProjectKorra.plugin,0,1L);
      tasks.add(fs);
    }
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (firstTime) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      firstTime=false;
    }
 else     if (System.currentTimeMillis() - time > 5000) {
      remove();
      return;
    }
 else     if (FireJet.instances.containsKey(player)) {
      direction=player.getVelocity().clone().multiply(-1);
      player.setVelocity(player.getVelocity().normalize().multiply(speed));
      FireComboStream fs=new FireComboStream(this,direction,player.getLocation(),5,1);
      fs.setDensity(8);
      fs.setSpread(1.0F);
      fs.setUseNewParticles(true);
      fs.setCollisionRadius(3);
      fs.setParticleEffect(ParticleEffect.LARGE_SMOKE);
      if (progressCounter % 5 != 0)       fs.setCollides(false);
      fs.runTaskTimer(ProjectKorra.plugin,0,1L);
      tasks.add(fs);
      if (progressCounter % 4 == 0)       player.getWorld().playSound(player.getLocation(),Sound.FIZZ,1,0F);
    }
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (currentLoc == null) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      origin=player.getLocation();
      currentLoc=Methods.getTopBlock(player.getLocation(),3,3).getLocation();
      if (currentLoc == null) {
        remove();
        return;
      }
      currentLoc=player.getLocation();
      direction=player.getEyeLocation().getDirection().clone().normalize();
      direction.setY(0);
    }
 else     if (currentLoc.distance(origin) > range) {
      remove();
      return;
    }
    Block topBlock=Methods.getTopBlock(currentLoc,2,-4);
    if (topBlock == null || (Methods.isWaterbendable(topBlock,player) && !Methods.isPlant(topBlock))) {
      remove();
      return;
    }
    if (topBlock.getType() == Material.FIRE || Methods.isPlant(topBlock))     topBlock=topBlock.getLocation().add(0,-1,0).getBlock();
    currentLoc.setY(topBlock.getY() + FIRE_WHEEL_STARTING_HEIGHT);
    FireComboStream fs=new FireComboStream(this,direction,currentLoc.clone().add(0,-1,0),5,1);
    fs.setDensity(0);
    fs.setSinglePoint(true);
    fs.setCollisionRadius(1.5);
    fs.setCollides(true);
    fs.runTaskTimer(ProjectKorra.plugin,0,1L);
    tasks.add(fs);
    for (double i=-180; i <= 180; i+=3) {
      Location tempLoc=currentLoc.clone();
      Vector newDir=direction.clone().multiply(FIRE_WHEEL_RADIUS * Math.cos(Math.toRadians(i)));
      tempLoc.add(newDir);
      tempLoc.setY(tempLoc.getY() + (FIRE_WHEEL_RADIUS * Math.sin(Math.toRadians(i))));
      ParticleEffect.FLAME.display(tempLoc,0,0,0,0,1);
    }
    currentLoc=currentLoc.add(direction.clone().multiply(speed));
    currentLoc.getWorld().playSound(currentLoc,Sound.FIRE,1,1);
    if (Methods.blockAbilities(player,abilitiesToBlock,currentLoc,2)) {
      remove();
      return;
    }
    ;
  }
  if (progressCounter % 3 == 0)   checkSafeZone();
}","public void progress(){
  progressCounter++;
  for (int i=0; i < tasks.size(); i++) {
    BukkitRunnable br=tasks.get(i);
    if (br instanceof FireComboStream) {
      FireComboStream fs=(FireComboStream)br;
      if (fs.isCancelled())       tasks.remove(fs);
    }
  }
  if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (destination == null) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      Vector eyeDir=player.getEyeLocation().getDirection().normalize().multiply(range);
      destination=player.getEyeLocation().add(eyeDir);
      player.getWorld().playSound(player.getLocation(),Sound.HORSE_JUMP,0.5f,0f);
      player.getWorld().playSound(player.getLocation(),Sound.FIZZ,0.5f,1f);
      for (int i=-30; i <= 30; i+=5) {
        Vector vec=Methods.getDirection(player.getLocation(),destination.clone());
        vec=Methods.rotateXZ(vec,i);
        FireComboStream fs=new FireComboStream(this,vec,player.getLocation(),range,speed);
        fs.setSpread(0.2F);
        fs.setDensity(5);
        fs.setUseNewParticles(true);
        if (tasks.size() % 3 != 0)         fs.setCollides(false);
        fs.runTaskTimer(ProjectKorra.plugin,0,1L);
        tasks.add(fs);
        player.getWorld().playSound(player.getLocation(),Sound.FIRE_IGNITE,0.5f,1f);
      }
      currentLoc=((FireComboStream)tasks.get(0)).getLocation();
      for (      FireComboStream stream : tasks)       if (Methods.blockAbilities(player,abilitiesToBlock,stream.currentLoc,2))       stream.remove();
    }
 else     if (tasks.size() == 0) {
      remove();
      return;
    }
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (destination == null) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      destination=player.getEyeLocation().add(range,0,range);
      player.getWorld().playSound(player.getLocation(),Sound.FIZZ,0.5f,0.5f);
      for (int i=0; i <= 360; i+=5) {
        Vector vec=Methods.getDirection(player.getLocation(),destination.clone());
        vec=Methods.rotateXZ(vec,i - 180);
        vec.setY(0);
        FireComboStream fs=new FireComboStream(this,vec,player.getLocation().clone().add(0,1,0),range,speed);
        fs.setSpread(0.0F);
        fs.setDensity(1);
        fs.setUseNewParticles(true);
        if (tasks.size() % 10 != 0)         fs.setCollides(false);
        fs.runTaskTimer(ProjectKorra.plugin,0,1L);
        tasks.add(fs);
      }
    }
    if (tasks.size() == 0) {
      remove();
      return;
    }
    for (    FireComboStream stream : tasks)     if (Methods.isWithinShields(stream.getLocation()))     stream.remove();
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (System.currentTimeMillis() - time > 5000) {
      remove();
      return;
    }
 else     if (FireJet.instances.containsKey(player)) {
      if (firstTime) {
        if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
          remove();
          return;
        }
        bplayer.addCooldown(""String_Node_Str"",cooldown);
        firstTime=false;
        float spread=0F;
        ParticleEffect.LARGE_EXPLODE.display(player.getLocation(),spread,spread,spread,0,1);
        player.getWorld().playSound(player.getLocation(),Sound.EXPLODE,15,0F);
      }
      player.setVelocity(player.getVelocity().normalize().multiply(speed));
      FireComboStream fs=new FireComboStream(this,player.getVelocity().clone().multiply(-1),player.getLocation(),3,0.5);
      fs.setDensity(1);
      fs.setSpread(0.9F);
      fs.setUseNewParticles(true);
      fs.setCollides(false);
      fs.runTaskTimer(ProjectKorra.plugin,0,1L);
      tasks.add(fs);
    }
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (firstTime) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      firstTime=false;
    }
 else     if (System.currentTimeMillis() - time > 5000) {
      remove();
      return;
    }
 else     if (FireJet.instances.containsKey(player)) {
      direction=player.getVelocity().clone().multiply(-1);
      player.setVelocity(player.getVelocity().normalize().multiply(speed));
      FireComboStream fs=new FireComboStream(this,direction,player.getLocation(),5,1);
      fs.setDensity(8);
      fs.setSpread(1.0F);
      fs.setUseNewParticles(true);
      fs.setCollisionRadius(3);
      fs.setParticleEffect(ParticleEffect.LARGE_SMOKE);
      if (progressCounter % 5 != 0)       fs.setCollides(false);
      fs.runTaskTimer(ProjectKorra.plugin,0,1L);
      tasks.add(fs);
      if (progressCounter % 4 == 0)       player.getWorld().playSound(player.getLocation(),Sound.FIZZ,1,0F);
    }
  }
 else   if (ability.equalsIgnoreCase(""String_Node_Str"")) {
    if (currentLoc == null) {
      if (bplayer.isOnCooldown(""String_Node_Str"") && !AvatarState.isAvatarState(player)) {
        remove();
        return;
      }
      bplayer.addCooldown(""String_Node_Str"",cooldown);
      origin=player.getLocation();
      if (Methods.getTopBlock(player.getLocation(),3,3) == null) {
        remove();
        return;
      }
      currentLoc=player.getLocation();
      direction=player.getEyeLocation().getDirection().clone().normalize();
      direction.setY(0);
    }
 else     if (currentLoc.distance(origin) > range) {
      remove();
      return;
    }
    Block topBlock=Methods.getTopBlock(currentLoc,2,-4);
    if (topBlock == null || (Methods.isWaterbendable(topBlock,player) && !Methods.isPlant(topBlock))) {
      remove();
      return;
    }
    if (topBlock.getType() == Material.FIRE || Methods.isPlant(topBlock))     topBlock=topBlock.getLocation().add(0,-1,0).getBlock();
    currentLoc.setY(topBlock.getY() + FIRE_WHEEL_STARTING_HEIGHT);
    FireComboStream fs=new FireComboStream(this,direction,currentLoc.clone().add(0,-1,0),5,1);
    fs.setDensity(0);
    fs.setSinglePoint(true);
    fs.setCollisionRadius(1.5);
    fs.setCollides(true);
    fs.runTaskTimer(ProjectKorra.plugin,0,1L);
    tasks.add(fs);
    for (double i=-180; i <= 180; i+=3) {
      Location tempLoc=currentLoc.clone();
      Vector newDir=direction.clone().multiply(FIRE_WHEEL_RADIUS * Math.cos(Math.toRadians(i)));
      tempLoc.add(newDir);
      tempLoc.setY(tempLoc.getY() + (FIRE_WHEEL_RADIUS * Math.sin(Math.toRadians(i))));
      ParticleEffect.FLAME.display(tempLoc,0,0,0,0,1);
    }
    currentLoc=currentLoc.add(direction.clone().multiply(speed));
    currentLoc.getWorld().playSound(currentLoc,Sound.FIRE,1,1);
    if (Methods.blockAbilities(player,abilitiesToBlock,currentLoc,2)) {
      remove();
      return;
    }
    ;
  }
  if (progressCounter % 3 == 0)   checkSafeZone();
}",0.9923049770561244
134143,"public static boolean isWithinShield(Location loc){
  for (  Player player : instances.keySet()) {
    FireShield fshield=instances.get(player);
    Location playerLoc=fshield.player.getLocation();
    if (fshield.shield) {
      if (playerLoc.distance(loc) <= fshield.radius)       return true;
    }
 else {
      Location tempLoc=playerLoc.clone().add(playerLoc.multiply(fshield.discradius));
      if (tempLoc.distance(loc) <= fshield.discradius)       return true;
    }
  }
  return false;
}","public static boolean isWithinShield(Location loc){
  for (  Player player : instances.keySet()) {
    FireShield fshield=instances.get(player);
    Location playerLoc=fshield.player.getLocation();
    if (fshield.shield) {
      if (playerLoc.getWorld() != loc.getWorld())       return false;
      if (playerLoc.distance(loc) <= fshield.radius)       return true;
    }
 else {
      Location tempLoc=playerLoc.clone().add(playerLoc.multiply(fshield.discradius));
      if (tempLoc.getWorld() != loc.getWorld())       return false;
      if (tempLoc.distance(loc) <= fshield.discradius)       return true;
    }
  }
  return false;
}",0.8780918727915195
134144,"private void progress(){
  if (!Methods.canBend(player.getName(),""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (Methods.getBoundAbility(player) == null) {
    remove();
    returnWater();
    return;
  }
  if ((!player.isSneaking() && !sourceselected) || !Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (!sourceblock.getWorld().equals(player.getWorld())) {
    remove();
    return;
  }
  if (sourceblock.getLocation().distance(player.getLocation()) > range && sourceselected) {
    remove();
    return;
  }
  if (System.currentTimeMillis() > time + interval) {
    time=System.currentTimeMillis();
    Location location=player.getLocation();
    if (sourceselected) {
      Methods.playFocusWaterEffect(sourceblock);
    }
 else     if (settingup) {
      if (sourceblock.getY() < location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.UP);
        sourcelocation=newblock.getLocation();
        if (!Methods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourceblock.getY() > location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.DOWN);
        sourcelocation=newblock.getLocation();
        if (!Methods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourcelocation.distance(location) > radius) {
        Vector vector=Methods.getDirection(sourcelocation,location.getBlock().getLocation()).normalize();
        sourcelocation.add(vector);
        Block newblock=sourcelocation.getBlock();
        if (!newblock.equals(sourceblock)) {
          source.revertBlock();
          source=null;
          if (!Methods.isSolid(newblock)) {
            source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
            sourceblock=newblock;
          }
        }
      }
 else {
        incrementStep();
        source.revertBlock();
        source=null;
        Vector vector=new Vector(1,0,0);
        startangle=vector.angle(Methods.getDirection(sourceblock.getLocation(),location));
        angle=startangle;
      }
    }
 else     if (forming) {
      if (angle - startangle >= 360) {
        y+=1;
      }
 else {
        angle+=20;
      }
      if (Methods.rand.nextInt(4) == 0) {
        Methods.playWaterbendingSound(player.getLocation());
      }
      formOctopus();
      if (y == 2) {
        incrementStep();
      }
    }
 else     if (formed) {
      if (Methods.rand.nextInt(7) == 0) {
        Methods.playWaterbendingSound(player.getLocation());
      }
      step+=1;
      if (step % inc == 0)       animstep+=1;
      if (animstep > 8)       animstep=1;
      formOctopus();
    }
 else {
      remove();
    }
  }
}","private void progress(){
  if (!Methods.canBend(player.getName(),""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (Methods.getBoundAbility(player) == null) {
    remove();
    returnWater();
    return;
  }
  if ((!player.isSneaking() && !sourceselected) || !Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    returnWater();
    return;
  }
  if (!sourceblock.getWorld().equals(player.getWorld())) {
    remove();
    return;
  }
  if (sourceblock.getLocation().distance(player.getLocation()) > range && sourceselected) {
    remove();
    return;
  }
  if (System.currentTimeMillis() > time + interval) {
    time=System.currentTimeMillis();
    Location location=player.getLocation();
    if (sourceselected) {
      Methods.playFocusWaterEffect(sourceblock);
    }
 else     if (settingup) {
      if (sourceblock.getY() < location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.UP);
        sourcelocation=newblock.getLocation();
        if (!Methods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourceblock.getY() > location.getBlockY()) {
        source.revertBlock();
        source=null;
        Block newblock=sourceblock.getRelative(BlockFace.DOWN);
        sourcelocation=newblock.getLocation();
        if (!Methods.isSolid(newblock)) {
          source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
          sourceblock=newblock;
        }
 else {
          remove();
          returnWater();
        }
      }
 else       if (sourcelocation.distance(location) > radius) {
        Vector vector=Methods.getDirection(sourcelocation,location.getBlock().getLocation()).normalize();
        sourcelocation.add(vector);
        Block newblock=sourcelocation.getBlock();
        if (!newblock.equals(sourceblock)) {
          source.revertBlock();
          source=null;
          if (!Methods.isSolid(newblock)) {
            source=new TempBlock(newblock,Material.STATIONARY_WATER,(byte)8);
            sourceblock=newblock;
          }
        }
      }
 else {
        incrementStep();
        if (source != null)         source.revertBlock();
        source=null;
        Vector vector=new Vector(1,0,0);
        startangle=vector.angle(Methods.getDirection(sourceblock.getLocation(),location));
        angle=startangle;
      }
    }
 else     if (forming) {
      if (angle - startangle >= 360) {
        y+=1;
      }
 else {
        angle+=20;
      }
      if (Methods.rand.nextInt(4) == 0) {
        Methods.playWaterbendingSound(player.getLocation());
      }
      formOctopus();
      if (y == 2) {
        incrementStep();
      }
    }
 else     if (formed) {
      if (Methods.rand.nextInt(7) == 0) {
        Methods.playWaterbendingSound(player.getLocation());
      }
      step+=1;
      if (step % inc == 0)       animstep+=1;
      if (animstep > 8)       animstep=1;
      formOctopus();
    }
 else {
      remove();
    }
  }
}",0.9956002514142048
134145,"public static void progressAll(){
  for (  int ID : instances.keySet()) {
    instances.get(ID).progress();
  }
}","public static void progressAll(){
  for (  int ID : instances.keySet()) {
    if (instances.get(ID) == null) {
      instances.remove(ID);
      continue;
    }
    instances.get(ID).progress();
  }
}",0.7220447284345048
134146,"public void update(){
  if (System.currentTimeMillis() < fireTime + delay)   return;
  lastVelocity=thisVelocity.clone();
  thisVelocity=entity.getVelocity().clone();
  Vector diff=thisVelocity.subtract(lastVelocity);
  if (entity.isOnGround())   remove();
  if (thisVelocity.length() < lastVelocity.length()) {
    if ((diff.getX() > 1 || diff.getX() < -1) || (diff.getZ() > 1 || diff.getZ() < -1)) {
      for (      Block b : Methods.getBlocksAroundPoint(entity.getLocation(),2)) {
        if (b.getType() != Material.AIR) {
          ProjectKorra.plugin.getServer().getPluginManager().callEvent(new HorizontalVelocityChangeEvent(entity,instigator,lastVelocity,thisVelocity,diff));
          remove();
          return;
        }
      }
    }
  }
}","public void update(){
  if (System.currentTimeMillis() < fireTime + delay)   return;
  lastVelocity=thisVelocity.clone();
  thisVelocity=entity.getVelocity().clone();
  Vector diff=thisVelocity.subtract(lastVelocity);
  if (entity.isOnGround())   remove();
  if (thisVelocity.length() < lastVelocity.length()) {
    if ((diff.getX() > 1 || diff.getX() < -1) || (diff.getZ() > 1 || diff.getZ() < -1)) {
      for (      Block b : Methods.getBlocksAroundPoint(entity.getLocation(),2)) {
        if (!Methods.isTransparentToEarthbending(instigator,b)) {
          ProjectKorra.plugin.getServer().getPluginManager().callEvent(new HorizontalVelocityChangeEvent(entity,instigator,lastVelocity,thisVelocity,diff));
          remove();
          return;
        }
      }
    }
  }
}",0.950884086444008
134147,"public HorizontalVelocityTracker(Entity e,Entity instigator,long delay){
  entity=e;
  this.instigator=instigator;
  fireTime=System.currentTimeMillis();
  this.delay=delay;
  thisVelocity=e.getVelocity();
  this.delay=delay;
  update();
  instances.put(entity,this);
}","public HorizontalVelocityTracker(Entity e,Player instigator,long delay){
  entity=e;
  this.instigator=instigator;
  fireTime=System.currentTimeMillis();
  this.delay=delay;
  thisVelocity=e.getVelocity();
  this.delay=delay;
  update();
  instances.put(entity,this);
}",0.9776951672862454
134148,"@EventHandler public void onHorizontalCollision(HorizontalVelocityChangeEvent e){
  if (e.getEntity() instanceof LivingEntity) {
    ((LivingEntity)e.getEntity()).damage(e.getDifference().length() * 2,e.getInstigator());
  }
}","@EventHandler public void onHorizontalCollision(HorizontalVelocityChangeEvent e){
  if (e.getEntity() instanceof LivingEntity) {
    Methods.damageEntity(e.getInstigator(),e.getEntity(),e.getDifference().length() * 2);
  }
}",0.7911111111111111
134149,"public Entity getInstigator(){
  return instigator;
}","public Player getInstigator(){
  return instigator;
}",0.9056603773584906
134150,"public HorizontalVelocityChangeEvent(Entity entity,Entity instigator,Vector from,Vector to,Vector difference){
  this.entity=entity;
  this.instigator=instigator;
  this.from=from;
  this.to=to;
  this.difference=difference;
}","public HorizontalVelocityChangeEvent(Entity entity,Player instigator,Vector from,Vector to,Vector difference){
  this.entity=entity;
  this.instigator=instigator;
  this.from=from;
  this.to=to;
  this.difference=difference;
}",0.9734513274336284
134151,"public void update(){
  if (System.currentTimeMillis() < fireTime + delay)   return;
  lastVelocity=thisVelocity.clone();
  thisVelocity=entity.getVelocity().clone();
  Vector diff=thisVelocity.subtract(lastVelocity);
  if (entity.isOnGround())   remove();
  if ((diff.getX() > 1 || diff.getX() < -1) || (diff.getZ() > 1 || diff.getZ() < -1)) {
    ProjectKorra.plugin.getServer().getPluginManager().callEvent(new HorizontalVelocityChangeEvent(entity,instigator,lastVelocity,thisVelocity,diff));
    remove();
    return;
  }
}","public void update(){
  if (System.currentTimeMillis() < fireTime + delay)   return;
  lastVelocity=thisVelocity.clone();
  thisVelocity=entity.getVelocity().clone();
  Vector diff=thisVelocity.subtract(lastVelocity);
  if (entity.isOnGround())   remove();
  if (thisVelocity.length() < lastVelocity.length()) {
    if ((diff.getX() > 1 || diff.getX() < -1) || (diff.getZ() > 1 || diff.getZ() < -1)) {
      for (      Block b : Methods.getBlocksAroundPoint(entity.getLocation(),2)) {
        if (b.getType() != Material.AIR) {
          ProjectKorra.plugin.getServer().getPluginManager().callEvent(new HorizontalVelocityChangeEvent(entity,instigator,lastVelocity,thisVelocity,diff));
          remove();
          return;
        }
      }
    }
  }
}",0.8240813135261923
134152,"private static EarthSmash flyingInSmashCheck(Player player){
  if (!ALLOW_FLIGHT)   return null;
  for (  EarthSmash smash : instances) {
    if (smash.state == State.LIFTED)     if (smash.loc.clone().add(0,2,0).distanceSquared(player.getLocation()) <= Math.pow(FLIGHT_DETECTION_RADIUS,2))     return smash;
  }
  return null;
}","private static EarthSmash flyingInSmashCheck(Player player){
  if (!ALLOW_FLIGHT)   return null;
  for (  EarthSmash smash : instances) {
    if (smash.state == State.LIFTED) {
      if (smash.loc.getWorld().equals(player.getWorld()) && smash.loc.clone().add(0,2,0).distanceSquared(player.getLocation()) <= Math.pow(FLIGHT_DETECTION_RADIUS,2)) {
        return smash;
      }
    }
  }
  return null;
}",0.8986301369863013
134153,"@Override public void run(){
  for (  Player player : Bukkit.getOnlinePlayers()) {
    ChiPassive.handlePassive();
    Smokescreen.removeFromHashMap(player);
    WarriorStance.progressAll();
    AcrobatStance.progressAll();
  }
}","@Override public void run(){
  ChiPassive.handlePassive();
  WarriorStance.progressAll();
  AcrobatStance.progressAll();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    Smokescreen.removeFromHashMap(player);
  }
}",0.5796460176991151
134154,"public FireBurst(Player player){
  BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
  if (bPlayer.isOnCooldown(""String_Node_Str""))   return;
  if (instances.containsKey(player))   return;
  starttime=System.currentTimeMillis();
  if (Methods.isDay(player.getWorld())) {
    chargetime/=ProjectKorra.plugin.getConfig().getDouble(""String_Node_Str"");
  }
  if (AvatarState.isAvatarState(player))   chargetime=0;
  if (BendingManager.events.get(player.getWorld()).equalsIgnoreCase(""String_Node_Str""))   chargetime=0;
  this.player=player;
  instances.put(player,this);
}","public FireBurst(Player player){
  BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
  if (bPlayer.isOnCooldown(""String_Node_Str""))   return;
  if (instances.containsKey(player))   return;
  starttime=System.currentTimeMillis();
  if (Methods.isDay(player.getWorld())) {
    chargetime/=ProjectKorra.plugin.getConfig().getDouble(""String_Node_Str"");
  }
  if (AvatarState.isAvatarState(player))   chargetime=0;
  if (BendingManager.events.containsKey(player.getWorld())) {
    if (BendingManager.events.get(player.getWorld()).equalsIgnoreCase(""String_Node_Str""))     chargetime=0;
  }
  this.player=player;
  instances.put(player,this);
}",0.9433656957928802
134155,"public Lightning(Player player){
  this.player=player;
  bplayer=Methods.getBendingPlayer(player.getName());
  charged=false;
  hitWater=false;
  hitIce=false;
  time=System.currentTimeMillis();
  range=Methods.getFirebendingDayAugment(RANGE,player.getWorld());
  subArcChance=Methods.getFirebendingDayAugment(SUB_ARC_CHANCE,player.getWorld());
  damage=Methods.getFirebendingDayAugment(DAMAGE,player.getWorld());
  chainArcs=Methods.getFirebendingDayAugment(MAX_CHAIN_ARCS,player.getWorld());
  chainArcChance=Methods.getFirebendingDayAugment(CHAIN_ARC_CHANCE,player.getWorld());
  chainRange=Methods.getFirebendingDayAugment(CHAIN_ARC_RANGE,player.getWorld());
  waterRange=Methods.getFirebendingDayAugment(WATER_ARC_RANGE,player.getWorld());
  stunChance=Methods.getFirebendingDayAugment(STUN_CHANCE,player.getWorld());
  stunDuration=Methods.getFirebendingDayAugment(STUN_DURATION,player.getWorld());
  chargeTime=CHARGETIME;
  cooldown=COOLDOWN;
  if (AvatarState.isAvatarState(player)) {
    chargeTime=0;
    cooldown=0;
    damage=AvatarState.getValue(damage);
    chainArcs=AvatarState.getValue(chainArcs);
    chainArcChance=AvatarState.getValue(chainArcChance);
    chainRange=AvatarState.getValue(chainRange);
    stunChance=AvatarState.getValue(stunChance);
  }
 else   if (BendingManager.events.get(player.getWorld()).equalsIgnoreCase(""String_Node_Str"")) {
    chargeTime=0;
    cooldown=0;
  }
  instances.add(this);
}","public Lightning(Player player){
  this.player=player;
  bplayer=Methods.getBendingPlayer(player.getName());
  charged=false;
  hitWater=false;
  hitIce=false;
  time=System.currentTimeMillis();
  range=Methods.getFirebendingDayAugment(RANGE,player.getWorld());
  subArcChance=Methods.getFirebendingDayAugment(SUB_ARC_CHANCE,player.getWorld());
  damage=Methods.getFirebendingDayAugment(DAMAGE,player.getWorld());
  chainArcs=Methods.getFirebendingDayAugment(MAX_CHAIN_ARCS,player.getWorld());
  chainArcChance=Methods.getFirebendingDayAugment(CHAIN_ARC_CHANCE,player.getWorld());
  chainRange=Methods.getFirebendingDayAugment(CHAIN_ARC_RANGE,player.getWorld());
  waterRange=Methods.getFirebendingDayAugment(WATER_ARC_RANGE,player.getWorld());
  stunChance=Methods.getFirebendingDayAugment(STUN_CHANCE,player.getWorld());
  stunDuration=Methods.getFirebendingDayAugment(STUN_DURATION,player.getWorld());
  chargeTime=CHARGETIME;
  cooldown=COOLDOWN;
  if (AvatarState.isAvatarState(player)) {
    chargeTime=0;
    cooldown=0;
    damage=AvatarState.getValue(damage);
    chainArcs=AvatarState.getValue(chainArcs);
    chainArcChance=AvatarState.getValue(chainArcChance);
    chainRange=AvatarState.getValue(chainRange);
    stunChance=AvatarState.getValue(stunChance);
  }
 else   if (BendingManager.events.containsKey(player.getWorld())) {
    if (BendingManager.events.get(player.getWorld()).equalsIgnoreCase(""String_Node_Str"")) {
      chargeTime=0;
      cooldown=0;
    }
  }
  instances.add(this);
}",0.9605442176870748
134156,"public static boolean isLavabendable(Block block,Player player){
  byte full=0x0;
  if (TempBlock.isTempBlock(block)) {
    TempBlock tblock=TempBlock.instances.get(block);
    if (tblock == null || !LavaFlow.totalBlocks.contains(tblock))     return false;
  }
  if ((block.getType() == Material.LAVA || block.getType() == Material.STATIONARY_LAVA) && block.getData() == full)   return true;
  return false;
}","public static boolean isLavabendable(Block block,Player player){
  byte full=0x0;
  if (TempBlock.isTempBlock(block)) {
    TempBlock tblock=TempBlock.instances.get(block);
    if (tblock == null || !LavaFlow.TEMP_LAVA_BLOCKS.contains(tblock))     return false;
  }
  if ((block.getType() == Material.LAVA || block.getType() == Material.STATIONARY_LAVA) && block.getData() == full)   return true;
  return false;
}",0.9671931956257594
134157,"public Extraction(Player player){
  BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
  if (bPlayer.isOnCooldown(""String_Node_Str""))   return;
  Block block=player.getTargetBlock(null,5);
  if (block == null) {
    return;
  }
  if (!Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
    if (Methods.canMetalbend(player) && Methods.canBend(player.getName(),""String_Node_Str"")) {
switch (block.getType()) {
case IRON_ORE:
        block.setType(Material.STONE);
      player.getWorld().dropItem(player.getLocation(),new ItemStack(Material.IRON_INGOT,getAmount()));
    break;
case GOLD_ORE:
  block.setType(Material.STONE);
player.getWorld().dropItem(player.getLocation(),new ItemStack(Material.GOLD_INGOT,getAmount()));
break;
case QUARTZ_ORE:
block.setType(Material.NETHERRACK);
player.getWorld().dropItem(player.getLocation(),new ItemStack(Material.QUARTZ,getAmount()));
break;
default :
break;
}
Methods.playMetalbendingSound(block.getLocation());
bPlayer.addCooldown(""String_Node_Str"",cooldown);
}
}
}","public Extraction(Player player){
  BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
  if (bPlayer.isOnCooldown(""String_Node_Str""))   return;
  Block block=player.getTargetBlock(null,5);
  if (block == null) {
    return;
  }
  if (!Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
    if (Methods.canMetalbend(player) && Methods.canBend(player.getName(),""String_Node_Str"")) {
      Material type=null;
switch (block.getType()) {
case IRON_ORE:
        block.setType(Material.STONE);
      player.getWorld().dropItem(player.getLocation(),new ItemStack(Material.IRON_INGOT,getAmount()));
    type=Material.STONE;
  break;
case GOLD_ORE:
block.setType(Material.STONE);
player.getWorld().dropItem(player.getLocation(),new ItemStack(Material.GOLD_INGOT,getAmount()));
type=Material.STONE;
break;
case QUARTZ_ORE:
block.setType(Material.NETHERRACK);
player.getWorld().dropItem(player.getLocation(),new ItemStack(Material.QUARTZ,getAmount()));
type=Material.NETHERRACK;
break;
default :
break;
}
if (type != null) {
if (Methods.movedearth.containsKey(block)) {
Methods.movedearth.remove(block);
}
}
Methods.playMetalbendingSound(block.getLocation());
bPlayer.addCooldown(""String_Node_Str"",cooldown);
}
}
}",0.9127982646420824
134158,"private void fill(){
  for (  StockAbilities a : StockAbilities.values()) {
    if (StockAbilities.isAirbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        airbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.AirScooter)         harmlessabilities.add(a.name());
        if (a == StockAbilities.AirSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Tornado)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSuction)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSwipe)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirShield)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         subabilities.add(a.name());
        if (a == StockAbilities.Flight)         flightabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isWaterbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        waterbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.WaterSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Surge)         shiftabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         shiftabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         shiftabilities.add(a.name());
        if (a == StockAbilities.OctopusForm)         shiftabilities.add(a.name());
        if (a == StockAbilities.Torrent)         shiftabilities.add(a.name());
        if (a == StockAbilities.WaterManipulation)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         subabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         subabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         subabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         subabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         subabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         healingabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         bloodabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         iceabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         iceabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         iceabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isEarthbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        earthbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Tremorsense)         harmlessabilities.add(a.name());
        if (a == StockAbilities.RaiseEarth)         shiftabilities.add(a.name());
        if (a == StockAbilities.Collapse)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Shockwave)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthTunnel)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthGrab)         shiftabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthSmash)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         subabilities.add(a.name());
        if (a == StockAbilities.Extraction)         subabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         subabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         metalabilities.add(a.name());
        if (a == StockAbilities.Extraction)         metalabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         lavaabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isFirebending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        firebendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Illumination)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Blaze)         igniteabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         explodeabilities.add(a.name());
        if (a == StockAbilities.Lightning)         explodeabilities.add(a.name());
        if (a == StockAbilities.Combustion)         explodeabilities.add(a.name());
        if (a == StockAbilities.HeatControl)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Blaze)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         subabilities.add(a.name());
        if (a == StockAbilities.Combustion)         subabilities.add(a.name());
        if (a == StockAbilities.Lightning)         lightningabilities.add(a.name());
        if (a == StockAbilities.Combustion)         combustionabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isChiBlocking(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        chiabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.HighJump)         harmlessabilities.add(a.name());
      }
    }
 else {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
      }
    }
  }
  for (  AbilityModule ab : ability) {
    boolean succes=true;
    for (    String enabledAbility : abilities) {
      if (enabledAbility.equalsIgnoreCase(ab.getName())) {
        succes=false;
      }
    }
    if (!succes)     continue;
    ab.onThisLoad();
    abilities.add(ab.getName());
    for (    StockAbilities a : StockAbilities.values()) {
      if (a.name().equalsIgnoreCase(ab.getName())) {
        disabledStockAbilities.add(a.name());
      }
    }
    if (ab.getElement() == Element.Air.toString())     airbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Water.toString())     waterbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Earth.toString())     earthbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Fire.toString())     firebendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Chi.toString())     chiabilities.add(ab.getName());
    if (ab.isShiftAbility())     shiftabilities.add(ab.getName());
    if (ab.isHarmlessAbility())     harmlessabilities.add(ab.getName());
    if (ab.getSubElement() != null) {
      subabilities.add(ab.getName());
switch (ab.getSubElement()) {
case Bloodbending:
        bloodabilities.add(ab.getName());
      break;
case Combustion:
    combustionabilities.add(ab.getName());
  break;
case Flight:
flightabilities.add(ab.getName());
break;
case Healing:
healingabilities.add(ab.getName());
break;
case Icebending:
iceabilities.add(ab.getName());
break;
case Lavabending:
lavaabilities.add(ab.getName());
break;
case Lightning:
lightningabilities.add(ab.getName());
break;
case Metalbending:
metalabilities.add(ab.getName());
break;
case Plantbending:
plantabilities.add(ab.getName());
break;
case Sandbending:
sandabilities.add(ab.getName());
break;
case SpiritualProjection:
spiritualprojectionabilities.add(ab.getName());
break;
}
}
descriptions.put(ab.getName(),ab.getDescription());
authors.put(ab.getName(),ab.getAuthor());
}
Collections.sort(airbendingabilities);
Collections.sort(waterbendingabilities);
Collections.sort(earthbendingabilities);
Collections.sort(firebendingabilities);
Collections.sort(chiabilities);
}","private void fill(){
  for (  StockAbilities a : StockAbilities.values()) {
    if (StockAbilities.isAirbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        airbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.AirScooter)         harmlessabilities.add(a.name());
        if (a == StockAbilities.AirSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Tornado)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSuction)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSwipe)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirShield)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         subabilities.add(a.name());
        if (a == StockAbilities.Flight)         flightabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isWaterbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        waterbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.WaterSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Surge)         shiftabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         shiftabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         shiftabilities.add(a.name());
        if (a == StockAbilities.OctopusForm)         shiftabilities.add(a.name());
        if (a == StockAbilities.Torrent)         shiftabilities.add(a.name());
        if (a == StockAbilities.WaterManipulation)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         subabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         subabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         subabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         subabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         subabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         healingabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         bloodabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         iceabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         iceabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         iceabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isEarthbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        earthbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Tremorsense)         harmlessabilities.add(a.name());
        if (a == StockAbilities.RaiseEarth)         shiftabilities.add(a.name());
        if (a == StockAbilities.Collapse)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Shockwave)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthTunnel)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthGrab)         shiftabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthSmash)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         subabilities.add(a.name());
        if (a == StockAbilities.Extraction)         subabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         subabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         metalabilities.add(a.name());
        if (a == StockAbilities.Extraction)         metalabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         lavaabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isFirebending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        firebendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Illumination)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Blaze)         igniteabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         explodeabilities.add(a.name());
        if (a == StockAbilities.Lightning)         explodeabilities.add(a.name());
        if (a == StockAbilities.Combustion)         explodeabilities.add(a.name());
        if (a == StockAbilities.HeatControl)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Blaze)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         subabilities.add(a.name());
        if (a == StockAbilities.Combustion)         subabilities.add(a.name());
        if (a == StockAbilities.Lightning)         lightningabilities.add(a.name());
        if (a == StockAbilities.Combustion)         combustionabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isChiBlocking(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        chiabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.HighJump)         harmlessabilities.add(a.name());
      }
    }
 else {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
      }
    }
  }
  for (  AbilityModule ab : ability) {
    try {
      boolean succes=true;
      for (      String enabledAbility : abilities) {
        if (enabledAbility.equalsIgnoreCase(ab.getName())) {
          succes=false;
        }
      }
      if (!succes)       continue;
      ab.onThisLoad();
      abilities.add(ab.getName());
      for (      StockAbilities a : StockAbilities.values()) {
        if (a.name().equalsIgnoreCase(ab.getName())) {
          disabledStockAbilities.add(a.name());
        }
      }
      if (ab.getElement() == Element.Air.toString())       airbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Water.toString())       waterbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Earth.toString())       earthbendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Fire.toString())       firebendingabilities.add(ab.getName());
      if (ab.getElement() == Element.Chi.toString())       chiabilities.add(ab.getName());
      if (ab.isShiftAbility())       shiftabilities.add(ab.getName());
      if (ab.isHarmlessAbility())       harmlessabilities.add(ab.getName());
      if (ab.getSubElement() != null) {
        subabilities.add(ab.getName());
switch (ab.getSubElement()) {
case Bloodbending:
          bloodabilities.add(ab.getName());
        break;
case Combustion:
      combustionabilities.add(ab.getName());
    break;
case Flight:
  flightabilities.add(ab.getName());
break;
case Healing:
healingabilities.add(ab.getName());
break;
case Icebending:
iceabilities.add(ab.getName());
break;
case Lavabending:
lavaabilities.add(ab.getName());
break;
case Lightning:
lightningabilities.add(ab.getName());
break;
case Metalbending:
metalabilities.add(ab.getName());
break;
case Plantbending:
plantabilities.add(ab.getName());
break;
case Sandbending:
sandabilities.add(ab.getName());
break;
case SpiritualProjection:
spiritualprojectionabilities.add(ab.getName());
break;
}
}
descriptions.put(ab.getName(),ab.getDescription());
authors.put(ab.getName(),ab.getAuthor());
}
 catch (AbstractMethodError e) {
ProjectKorra.log.warning(""String_Node_Str"" + ab.getName() + ""String_Node_Str"");
e.printStackTrace();
ab.stop();
abilities.remove(ab.getName());
final AbilityModule skill=ab;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
public void run(){
ability.remove(skill);
}
}
,10);
continue;
}
}
Collections.sort(airbendingabilities);
Collections.sort(waterbendingabilities);
Collections.sort(earthbendingabilities);
Collections.sort(firebendingabilities);
Collections.sort(chiabilities);
}",0.976417512560238
134159,"public AbilityModuleManager(final ProjectKorra plugin){
  AbilityModuleManager.plugin=plugin;
  final File path=new File(plugin.getDataFolder().toString() + ""String_Node_Str"");
  if (!path.exists()) {
    path.mkdir();
  }
  loader=new AbilityLoader<AbilityModule>(plugin,path,new Object[]{});
  abilities=new HashSet<String>();
  waterbendingabilities=new ArrayList<String>();
  airbendingabilities=new ArrayList<String>();
  earthbendingabilities=new ArrayList<String>();
  firebendingabilities=new ArrayList<String>();
  chiabilities=new ArrayList<String>();
  shiftabilities=new HashSet<String>();
  descriptions=new HashMap<String,String>();
  authors=new HashMap<String,String>();
  harmlessabilities=new HashSet<String>();
  explodeabilities=new HashSet<String>();
  igniteabilities=new HashSet<String>();
  metalbendingabilities=new HashSet<String>();
  earthsubabilities=new HashSet<String>();
  subabilities=new HashSet<String>();
  ability=loader.load(AbilityModule.class);
  disabledStockAbilities=new HashSet<String>();
  fill();
}","public AbilityModuleManager(final ProjectKorra plugin){
  AbilityModuleManager.plugin=plugin;
  final File path=new File(plugin.getDataFolder().toString() + ""String_Node_Str"");
  if (!path.exists()) {
    path.mkdir();
  }
  loader=new AbilityLoader<AbilityModule>(plugin,path,new Object[]{});
  abilities=new HashSet<String>();
  waterbendingabilities=new ArrayList<String>();
  airbendingabilities=new ArrayList<String>();
  earthbendingabilities=new ArrayList<String>();
  firebendingabilities=new ArrayList<String>();
  chiabilities=new ArrayList<String>();
  shiftabilities=new HashSet<String>();
  descriptions=new HashMap<String,String>();
  authors=new HashMap<String,String>();
  harmlessabilities=new HashSet<String>();
  explodeabilities=new HashSet<String>();
  igniteabilities=new HashSet<String>();
  metalbendingabilities=new HashSet<String>();
  earthsubabilities=new HashSet<String>();
  subabilities=new HashSet<String>();
  ability=loader.load(AbilityModule.class);
  disabledStockAbilities=new HashSet<String>();
  lightningabilities=new HashSet<String>();
  combustionabilities=new HashSet<String>();
  flightabilities=new HashSet<String>();
  spiritualprojectionabilities=new HashSet<String>();
  metalabilities=new HashSet<String>();
  sandabilities=new HashSet<String>();
  lavaabilities=new HashSet<String>();
  healingabilities=new HashSet<String>();
  plantabilities=new HashSet<String>();
  iceabilities=new HashSet<String>();
  bloodabilities=new HashSet<String>();
  fill();
}",0.8188235294117647
134160,"private void fill(){
  for (  StockAbilities a : StockAbilities.values()) {
    if (StockAbilities.isAirbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        airbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.AirScooter)         harmlessabilities.add(a.name());
        if (a == StockAbilities.AirSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Tornado)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSuction)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSwipe)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirShield)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         subabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isWaterbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        waterbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.WaterSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Surge)         shiftabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         shiftabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         shiftabilities.add(a.name());
        if (a == StockAbilities.OctopusForm)         shiftabilities.add(a.name());
        if (a == StockAbilities.Torrent)         shiftabilities.add(a.name());
        if (a == StockAbilities.WaterManipulation)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         subabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         subabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         subabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         subabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         subabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isEarthbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        earthbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Tremorsense)         harmlessabilities.add(a.name());
        if (a == StockAbilities.RaiseEarth)         shiftabilities.add(a.name());
        if (a == StockAbilities.Collapse)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Shockwave)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthTunnel)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthGrab)         shiftabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthSmash)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         subabilities.add(a.name());
        if (a == StockAbilities.Extraction)         subabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         subabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isFirebending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        firebendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Illumination)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Blaze)         igniteabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         explodeabilities.add(a.name());
        if (a == StockAbilities.Lightning)         explodeabilities.add(a.name());
        if (a == StockAbilities.Combustion)         explodeabilities.add(a.name());
        if (a == StockAbilities.HeatControl)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Blaze)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         subabilities.add(a.name());
        if (a == StockAbilities.Combustion)         subabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isChiBlocking(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        chiabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.HighJump)         harmlessabilities.add(a.name());
      }
    }
 else {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
      }
    }
  }
  for (  AbilityModule ab : ability) {
    boolean succes=true;
    for (    String enabledAbility : abilities) {
      if (enabledAbility.equalsIgnoreCase(ab.getName())) {
        succes=false;
      }
    }
    if (!succes)     continue;
    ab.onThisLoad();
    abilities.add(ab.getName());
    for (    StockAbilities a : StockAbilities.values()) {
      if (a.name().equalsIgnoreCase(ab.getName())) {
        disabledStockAbilities.add(a.name());
      }
    }
    if (ab.getElement() == Element.Air.toString())     airbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Water.toString())     waterbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Earth.toString())     earthbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Fire.toString())     firebendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Chi.toString())     chiabilities.add(ab.getName());
    if (ab.isShiftAbility())     shiftabilities.add(ab.getName());
    if (ab.isHarmlessAbility())     harmlessabilities.add(ab.getName());
    if (ab.isSubAbility())     subabilities.add(ab.getName());
    descriptions.put(ab.getName(),ab.getDescription());
    authors.put(ab.getName(),ab.getAuthor());
  }
  Collections.sort(airbendingabilities);
  Collections.sort(waterbendingabilities);
  Collections.sort(earthbendingabilities);
  Collections.sort(firebendingabilities);
  Collections.sort(chiabilities);
}","private void fill(){
  for (  StockAbilities a : StockAbilities.values()) {
    if (StockAbilities.isAirbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        airbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.AirScooter)         harmlessabilities.add(a.name());
        if (a == StockAbilities.AirSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Tornado)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSuction)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirSwipe)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.AirShield)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         shiftabilities.add(a.name());
        if (a == StockAbilities.Flight)         subabilities.add(a.name());
        if (a == StockAbilities.Flight)         flightabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isWaterbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        waterbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.WaterSpout)         harmlessabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Surge)         shiftabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         shiftabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         shiftabilities.add(a.name());
        if (a == StockAbilities.OctopusForm)         shiftabilities.add(a.name());
        if (a == StockAbilities.Torrent)         shiftabilities.add(a.name());
        if (a == StockAbilities.WaterManipulation)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         shiftabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         subabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         subabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         subabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         subabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         subabilities.add(a.name());
        if (a == StockAbilities.HealingWaters)         healingabilities.add(a.name());
        if (a == StockAbilities.Bloodbending)         bloodabilities.add(a.name());
        if (a == StockAbilities.PhaseChange)         iceabilities.add(a.name());
        if (a == StockAbilities.IceSpike)         iceabilities.add(a.name());
        if (a == StockAbilities.IceBlast)         iceabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isEarthbending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        earthbendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Tremorsense)         harmlessabilities.add(a.name());
        if (a == StockAbilities.RaiseEarth)         shiftabilities.add(a.name());
        if (a == StockAbilities.Collapse)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Shockwave)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthTunnel)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthGrab)         shiftabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         shiftabilities.add(a.name());
        if (a == StockAbilities.EarthSmash)         shiftabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         subabilities.add(a.name());
        if (a == StockAbilities.Extraction)         subabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         subabilities.add(a.name());
        if (a == StockAbilities.MetalClips)         metalabilities.add(a.name());
        if (a == StockAbilities.Extraction)         metalabilities.add(a.name());
        if (a == StockAbilities.LavaFlow)         lavaabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isFirebending(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        firebendingabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.Illumination)         harmlessabilities.add(a.name());
        if (a == StockAbilities.Blaze)         igniteabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         explodeabilities.add(a.name());
        if (a == StockAbilities.Lightning)         explodeabilities.add(a.name());
        if (a == StockAbilities.Combustion)         explodeabilities.add(a.name());
        if (a == StockAbilities.HeatControl)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBlast)         shiftabilities.add(a.name());
        if (a == StockAbilities.Blaze)         shiftabilities.add(a.name());
        if (a == StockAbilities.FireBurst)         shiftabilities.add(a.name());
        if (a == StockAbilities.Lightning)         subabilities.add(a.name());
        if (a == StockAbilities.Combustion)         subabilities.add(a.name());
        if (a == StockAbilities.Lightning)         lightningabilities.add(a.name());
        if (a == StockAbilities.Combustion)         combustionabilities.add(a.name());
      }
    }
 else     if (StockAbilities.isChiBlocking(a)) {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        chiabilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
        if (a == StockAbilities.HighJump)         harmlessabilities.add(a.name());
      }
    }
 else {
      if (ProjectKorra.plugin.getConfig().getBoolean(""String_Node_Str"" + a.name() + ""String_Node_Str"")) {
        abilities.add(a.name());
        descriptions.put(a.name(),ProjectKorra.plugin.getConfig().getString(""String_Node_Str"" + a.name() + ""String_Node_Str""));
      }
    }
  }
  for (  AbilityModule ab : ability) {
    boolean succes=true;
    for (    String enabledAbility : abilities) {
      if (enabledAbility.equalsIgnoreCase(ab.getName())) {
        succes=false;
      }
    }
    if (!succes)     continue;
    ab.onThisLoad();
    abilities.add(ab.getName());
    for (    StockAbilities a : StockAbilities.values()) {
      if (a.name().equalsIgnoreCase(ab.getName())) {
        disabledStockAbilities.add(a.name());
      }
    }
    if (ab.getElement() == Element.Air.toString())     airbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Water.toString())     waterbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Earth.toString())     earthbendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Fire.toString())     firebendingabilities.add(ab.getName());
    if (ab.getElement() == Element.Chi.toString())     chiabilities.add(ab.getName());
    if (ab.isShiftAbility())     shiftabilities.add(ab.getName());
    if (ab.isHarmlessAbility())     harmlessabilities.add(ab.getName());
    if (ab.getSubElement() != null) {
      subabilities.add(ab.getName());
switch (ab.getSubElement()) {
case Bloodbending:
        bloodabilities.add(ab.getName());
      break;
case Combustion:
    combustionabilities.add(ab.getName());
  break;
case Flight:
flightabilities.add(ab.getName());
break;
case Healing:
healingabilities.add(ab.getName());
break;
case Icebending:
iceabilities.add(ab.getName());
break;
case Lavabending:
lavaabilities.add(ab.getName());
break;
case Lightning:
lightningabilities.add(ab.getName());
break;
case Metalbending:
metalabilities.add(ab.getName());
break;
case Plantbending:
plantabilities.add(ab.getName());
break;
case Sandbending:
sandabilities.add(ab.getName());
break;
case SpiritualProjection:
spiritualprojectionabilities.add(ab.getName());
break;
}
}
descriptions.put(ab.getName(),ab.getDescription());
authors.put(ab.getName(),ab.getAuthor());
}
Collections.sort(airbendingabilities);
Collections.sort(waterbendingabilities);
Collections.sort(earthbendingabilities);
Collections.sort(firebendingabilities);
Collections.sort(chiabilities);
}",0.8978679504814305
134161,"public static boolean isMetalbendingAbility(String ability){
  if (AbilityModuleManager.metalbendingabilities.contains(ability))   return true;
  return false;
}","public static boolean isMetalbendingAbility(String ability){
  return AbilityModuleManager.metalabilities.contains(ability);
}",0.8362369337979094
134162,"/** 
 * Checks to see if a Player can bend a specific Ability.
 * @param player The player name to check
 * @param ability The Ability name to check
 * @return true If player can bend specified ability and has the permissions to do so
 */
@SuppressWarnings(""String_Node_Str"") public static boolean canBend(String player,String ability){
  BendingPlayer bPlayer=getBendingPlayer(player);
  Player p=Bukkit.getPlayer(player);
  if (bPlayer == null)   return false;
  if (plugin.getConfig().getStringList(""String_Node_Str"") != null && plugin.getConfig().getStringList(""String_Node_Str"").contains(p.getWorld().getName()))   return false;
  if (Commands.isToggledForAll)   return false;
  if (!bPlayer.isToggled)   return false;
  if (p == null)   return false;
  if (cooldowns.containsKey(p.getName())) {
    if (cooldowns.get(p.getName()) + ProjectKorra.plugin.getConfig().getLong(""String_Node_Str"") >= System.currentTimeMillis()) {
      return false;
    }
    cooldowns.remove(p.getName());
  }
  if (bPlayer.blockedChi)   return false;
  if (!p.hasPermission(""String_Node_Str"" + ability))   return false;
  if (isAirAbility(ability) && !isBender(player,Element.Air))   return false;
  if (isWaterAbility(ability) && !isBender(player,Element.Water))   return false;
  if (isEarthAbility(ability) && !isBender(player,Element.Earth))   return false;
  if (isFireAbility(ability) && !isBender(player,Element.Fire))   return false;
  if (isChiAbility(ability) && !isBender(player,Element.Chi))   return false;
  if (StockAbilities.isFlightAbility(ability) && !canAirFlight(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isSpiritualProjectionAbility(ability) && !canUseSpiritualProjection(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isCombustionbendingAbility(ability) && !canCombustionbend(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isLightningbendingAbility(ability) && !canLightningbend(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isSandbendingAbility(ability) && !canSandbend(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isMetalbendingAbility(ability) && !canMetalbend(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isLavabendingAbility(ability) && !canLavabend(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isIcebendingAbility(ability) && !canIcebend(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isHealingAbility(ability) && !canWaterHeal(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isPlantbendingAbility(ability) && !canPlantbend(plugin.getServer().getPlayer(player)))   return false;
  if (StockAbilities.isBloodbendingAbility(ability) && !canBloodbend(plugin.getServer().getPlayer(player)))   return false;
  if (isRegionProtectedFromBuild(p,ability,p.getLocation()))   return false;
  if (Paralyze.isParalyzed(p) || Bloodbending.isBloodbended(p))   return false;
  if (MetalClips.isControlled(p))   return false;
  if (BendingManager.events.get(p.getWorld()) != null && BendingManager.events.get(p.getWorld()).equalsIgnoreCase(""String_Node_Str"") && isFireAbility(ability))   return false;
  if (BendingManager.events.get(p.getWorld()) != null && BendingManager.events.get(p.getWorld()).equalsIgnoreCase(""String_Node_Str"") && isWaterAbility(ability))   return false;
  return true;
}","/** 
 * Checks to see if a Player can bend a specific Ability.
 * @param player The player name to check
 * @param ability The Ability name to check
 * @return true If player can bend specified ability and has the permissions to do so
 */
@SuppressWarnings(""String_Node_Str"") public static boolean canBend(String player,String ability){
  BendingPlayer bPlayer=getBendingPlayer(player);
  Player p=Bukkit.getPlayer(player);
  if (bPlayer == null)   return false;
  if (plugin.getConfig().getStringList(""String_Node_Str"") != null && plugin.getConfig().getStringList(""String_Node_Str"").contains(p.getWorld().getName()))   return false;
  if (Commands.isToggledForAll)   return false;
  if (!bPlayer.isToggled)   return false;
  if (p == null)   return false;
  if (cooldowns.containsKey(p.getName())) {
    if (cooldowns.get(p.getName()) + ProjectKorra.plugin.getConfig().getLong(""String_Node_Str"") >= System.currentTimeMillis()) {
      return false;
    }
    cooldowns.remove(p.getName());
  }
  if (bPlayer.blockedChi)   return false;
  if (!p.hasPermission(""String_Node_Str"" + ability))   return false;
  if (isAirAbility(ability) && !isBender(player,Element.Air))   return false;
  if (isWaterAbility(ability) && !isBender(player,Element.Water))   return false;
  if (isEarthAbility(ability) && !isBender(player,Element.Earth))   return false;
  if (isFireAbility(ability) && !isBender(player,Element.Fire))   return false;
  if (isChiAbility(ability) && !isBender(player,Element.Chi))   return false;
  if (isFlightAbility(ability) && !canAirFlight(plugin.getServer().getPlayer(player)))   return false;
  if (isSpiritualProjectionAbility(ability) && !canUseSpiritualProjection(plugin.getServer().getPlayer(player)))   return false;
  if (isCombustionbendingAbility(ability) && !canCombustionbend(plugin.getServer().getPlayer(player)))   return false;
  if (isLightningbendingAbility(ability) && !canLightningbend(plugin.getServer().getPlayer(player)))   return false;
  if (isSandbendingAbility(ability) && !canSandbend(plugin.getServer().getPlayer(player)))   return false;
  if (isMetalbendingAbility(ability) && !canMetalbend(plugin.getServer().getPlayer(player)))   return false;
  if (isLavabendingAbility(ability) && !canLavabend(plugin.getServer().getPlayer(player)))   return false;
  if (isIcebendingAbility(ability) && !canIcebend(plugin.getServer().getPlayer(player)))   return false;
  if (isHealingAbility(ability) && !canWaterHeal(plugin.getServer().getPlayer(player)))   return false;
  if (isPlantbendingAbility(ability) && !canPlantbend(plugin.getServer().getPlayer(player)))   return false;
  if (isBloodbendingAbility(ability) && !canBloodbend(plugin.getServer().getPlayer(player)))   return false;
  if (isRegionProtectedFromBuild(p,ability,p.getLocation()))   return false;
  if (Paralyze.isParalyzed(p) || Bloodbending.isBloodbended(p))   return false;
  if (MetalClips.isControlled(p))   return false;
  if (BendingManager.events.get(p.getWorld()) != null && BendingManager.events.get(p.getWorld()).equalsIgnoreCase(""String_Node_Str"") && isFireAbility(ability))   return false;
  if (BendingManager.events.get(p.getWorld()) != null && BendingManager.events.get(p.getWorld()).equalsIgnoreCase(""String_Node_Str"") && isWaterAbility(ability))   return false;
  return true;
}",0.7565410199556541
134163,"public static boolean hasPermission(Player player,String ability){
  if (player.hasPermission(""String_Node_Str"" + ability))   return true;
  return false;
}","public static boolean hasPermission(Player player,String ability){
  if (player.hasPermission(""String_Node_Str"" + ability) && canBind(player.getName(),ability))   return true;
  return false;
}",0.8939828080229226
134164,"public static boolean isRegionProtectedFromBuild(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    World world=location.getWorld();
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard && !player.hasPermission(""String_Node_Str"" + world.getName())) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(world).blockLighter)           return true;
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
      }
      if (!wg.canBuild(player,location.getBlock())) {
        return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_PLACE))       return true;
    }
    if (fcp != null && massivecore != null && respectFactions) {
      if (!EngineMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false)) {
        return true;
      }
 else {
        return false;
      }
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld tWorld=TownyUniverse.getDataSource().getWorld(world.getName());
        worldCoord=new WorldCoord(tWorld.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      Material type=player.getWorld().getBlockAt(location).getType();
      if (type == null)       type=Material.AIR;
      String reason=GriefPrevention.instance.allowBuild(player,location,null);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null)       return true;
    }
  }
  return false;
}","public static boolean isRegionProtectedFromBuild(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    World world=location.getWorld();
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard && !player.hasPermission(""String_Node_Str"" + world.getName())) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(world).blockLighter)           return true;
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
      }
      if (!wg.canBuild(player,location.getBlock())) {
        return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_PLACE))       return true;
    }
    if (fcp != null && massivecore != null && respectFactions) {
      if (!EngineMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false)) {
        return true;
      }
 else {
        return false;
      }
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld tWorld=TownyUniverse.getDataSource().getWorld(world.getName());
        worldCoord=new WorldCoord(tWorld.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      Material type=player.getWorld().getBlockAt(location).getType();
      if (type == null)       type=Material.AIR;
      String reason=GriefPrevention.instance.allowBuild(player,location);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null)       return true;
    }
  }
  return false;
}",0.9994898479746964
134165,"private void affect(Entity entity){
  boolean isUser=entity.getEntityId() == player.getEntityId();
  if (!isUser || otherorigin) {
    Vector velocity=entity.getVelocity();
    double max=maxspeed;
    double factor=pushfactor;
    if (AvatarState.isAvatarState(player)) {
      max=AvatarState.getValue(maxspeed);
      factor=AvatarState.getValue(factor);
    }
    Vector push=direction.clone();
    if (Math.abs(push.getY()) > max && !isUser) {
      if (push.getY() < 0)       push.setY(-max);
 else       push.setY(max);
    }
    factor*=1 - location.distance(origin) / (2 * range);
    if (isUser && Methods.isSolid(player.getLocation().add(0,-.5,0).getBlock())) {
      factor*=.5;
    }
    double comp=velocity.dot(push.clone().normalize());
    if (comp > factor) {
      velocity.multiply(.5);
      velocity.add(push.clone().normalize().multiply(velocity.clone().dot(push.clone().normalize())));
    }
 else     if (comp + factor * .5 > factor) {
      velocity.add(push.clone().multiply(factor - comp));
    }
 else {
      velocity.add(push.clone().multiply(factor * .5));
    }
    if (entity instanceof Player) {
      if (Commands.invincible.contains(((Player)entity).getName()))       return;
    }
    Methods.setVelocity(entity,velocity);
    entity.setFallDistance(0);
    if (!isUser && entity instanceof Player) {
      new Flight((Player)entity,player);
    }
    if (entity.getFireTicks() > 0)     entity.getWorld().playEffect(entity.getLocation(),Effect.EXTINGUISH,0);
    entity.setFireTicks(0);
    Methods.breakBreathbendingHold(entity);
    if (damage > 0 && entity instanceof LivingEntity && !entity.equals(player) && !affectedentities.contains(entity)) {
      Methods.damageEntity(player,entity,damage);
      affectedentities.add(entity);
    }
  }
}","private void affect(Entity entity){
  boolean isUser=entity.getEntityId() == player.getEntityId();
  if (!isUser || otherorigin) {
    Vector velocity=entity.getVelocity();
    double max=maxspeed;
    double factor=pushfactor;
    if (AvatarState.isAvatarState(player)) {
      max=AvatarState.getValue(maxspeed);
      factor=AvatarState.getValue(factor);
    }
    Vector push=direction.clone();
    if (Math.abs(push.getY()) > max && !isUser) {
      if (push.getY() < 0)       push.setY(-max);
 else       push.setY(max);
    }
    factor*=1 - location.distance(origin) / (2 * range);
    if (isUser && Methods.isSolid(player.getLocation().add(0,-.5,0).getBlock())) {
      factor*=.5;
    }
    double comp=velocity.dot(push.clone().normalize());
    if (comp > factor) {
      velocity.multiply(.5);
      velocity.add(push.clone().normalize().multiply(velocity.clone().dot(push.clone().normalize())));
    }
 else     if (comp + factor * .5 > factor) {
      velocity.add(push.clone().multiply(factor - comp));
    }
 else {
      velocity.add(push.clone().multiply(factor * .5));
    }
    if (entity instanceof Player) {
      if (Commands.invincible.contains(((Player)entity).getName()))       return;
    }
    if (Double.isNaN(velocity.length()))     return;
    Methods.setVelocity(entity,velocity);
    entity.setFallDistance(0);
    if (!isUser && entity instanceof Player) {
      new Flight((Player)entity,player);
    }
    if (entity.getFireTicks() > 0)     entity.getWorld().playEffect(entity.getLocation(),Effect.EXTINGUISH,0);
    entity.setFireTicks(0);
    Methods.breakBreathbendingHold(entity);
    if (damage > 0 && entity instanceof LivingEntity && !entity.equals(player) && !affectedentities.contains(entity)) {
      Methods.damageEntity(player,entity,damage);
      affectedentities.add(entity);
    }
  }
}",0.9853793103448276
134166,"public boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    instances.remove(id);
    return false;
  }
  if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",location)) {
    instances.remove(id);
    return false;
  }
  speedfactor=speed * (ProjectKorra.time_step / 1000.);
  ticks++;
  if (ticks > maxticks) {
    instances.remove(id);
    return false;
  }
  Block block=location.getBlock();
  for (  Block testblock : Methods.getBlocksAroundPoint(location,affectingradius)) {
    if (testblock.getType() == Material.FIRE) {
      testblock.setType(Material.AIR);
      testblock.getWorld().playEffect(testblock.getLocation(),Effect.EXTINGUISH,0);
    }
    if (((block.getType() == Material.LEVER) || (block.getType() == Material.STONE_BUTTON)) && !affectedlevers.contains(block)) {
      affectedlevers.add(block);
    }
  }
  if ((Methods.isSolid(block) || block.isLiquid()) && !affectedlevers.contains(block)) {
    if (block.getType() == Material.LAVA || block.getType() == Material.STATIONARY_LAVA) {
      if (block.getData() == full) {
        block.setType(Material.OBSIDIAN);
      }
 else {
        block.setType(Material.COBBLESTONE);
      }
    }
    instances.remove(id);
    return false;
  }
  if (location.distance(origin) > range) {
    instances.remove(id);
    return false;
  }
  for (  Entity entity : Methods.getEntitiesAroundPoint(location,affectingradius)) {
    affect(entity);
  }
  advanceLocation();
  return true;
}","public boolean progress(){
  if (player.isDead() || !player.isOnline()) {
    instances.remove(id);
    return false;
  }
  if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",location)) {
    instances.remove(id);
    return false;
  }
  speedfactor=speed * (ProjectKorra.time_step / 1000.);
  ticks++;
  if (ticks > maxticks) {
    instances.remove(id);
    return false;
  }
  Block block=location.getBlock();
  for (  Block testblock : Methods.getBlocksAroundPoint(location,affectingradius)) {
    if (testblock.getType() == Material.FIRE) {
      testblock.setType(Material.AIR);
      testblock.getWorld().playEffect(testblock.getLocation(),Effect.EXTINGUISH,0);
    }
    if (((block.getType() == Material.LEVER) || (block.getType() == Material.STONE_BUTTON)) && !affectedlevers.contains(block)) {
      affectedlevers.add(block);
    }
  }
  if ((Methods.isSolid(block) || block.isLiquid()) && !affectedlevers.contains(block)) {
    if (block.getType() == Material.LAVA || block.getType() == Material.STATIONARY_LAVA) {
      if (block.getData() == full) {
        block.setType(Material.OBSIDIAN);
      }
 else {
        block.setType(Material.COBBLESTONE);
      }
    }
    instances.remove(id);
    return false;
  }
  double dist=location.distance(origin);
  if (Double.isNaN(dist) || dist > range) {
    instances.remove(id);
    return false;
  }
  for (  Entity entity : Methods.getEntitiesAroundPoint(location,affectingradius)) {
    affect(entity);
  }
  advanceLocation();
  return true;
}",0.9666666666666668
134167,"public static void init(){
  if (ProjectKorra.plugin.getConfig().getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    sql=new MySQL(ProjectKorra.log,""String_Node_Str"",host,port,user,pass,db);
    ((MySQL)sql).open();
    ProjectKorra.log.info(""String_Node_Str"");
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
 else {
    sql=new SQLite(ProjectKorra.log,""String_Node_Str"",""String_Node_Str"",ProjectKorra.plugin.getDataFolder().getAbsolutePath());
    ((SQLite)sql).open();
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
}","public static void init(){
  if (ProjectKorra.plugin.getConfig().getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    sql=new MySQL(ProjectKorra.log,""String_Node_Str"",host,port,user,pass,db);
    if (((MySQL)sql).open() == null) {
      ProjectKorra.log.severe(""String_Node_Str"");
      ProjectKorra.plugin.stopPlugin();
      return;
    }
    isOpen=true;
    ProjectKorra.log.info(""String_Node_Str"");
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
 else {
    sql=new SQLite(ProjectKorra.log,""String_Node_Str"",""String_Node_Str"",ProjectKorra.plugin.getDataFolder().getAbsolutePath());
    if (((SQLite)sql).open() == null) {
      ProjectKorra.log.severe(""String_Node_Str"");
      ProjectKorra.plugin.stopPlugin();
      return;
    }
    isOpen=true;
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
    if (!sql.tableExists(""String_Node_Str"")) {
      ProjectKorra.log.info(""String_Node_Str"");
      String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      sql.modifyQuery(query);
    }
  }
}",0.9388020833333334
134168,"public static boolean isRegionProtectedFromBuild(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    World world=location.getWorld();
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard && !player.hasPermission(""String_Node_Str"" + world.getName())) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(world).blockLighter)           return true;
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
      }
      if (!wg.canBuild(player,location.getBlock())) {
        return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_PLACE))       return true;
    }
    if (fcp != null && massivecore != null && respectFactions) {
      if (!EngineMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false)) {
        return true;
      }
 else {
        return false;
      }
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld tWorld=TownyUniverse.getDataSource().getWorld(world.getName());
        worldCoord=new WorldCoord(tWorld.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      Material type=player.getWorld().getBlockAt(location).getType();
      if (type == null)       type=Material.AIR;
      String reason=GriefPrevention.instance.allowBuild(player,location);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null)       return true;
    }
  }
  return false;
}","public static boolean isRegionProtectedFromBuild(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    World world=location.getWorld();
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard && !player.hasPermission(""String_Node_Str"" + world.getName())) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(world).blockLighter)           return true;
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
        if (wg.getRegionContainer().createQuery().testBuild(location,player,DefaultFlag.TNT))         return true;
      }
      if (!wg.canBuild(player,location.getBlock())) {
        return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_PLACE))       return true;
    }
    if (fcp != null && massivecore != null && respectFactions) {
      if (!EngineMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false)) {
        return true;
      }
 else {
        return false;
      }
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld tWorld=TownyUniverse.getDataSource().getWorld(world.getName());
        worldCoord=new WorldCoord(tWorld.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      Material type=player.getWorld().getBlockAt(location).getType();
      if (type == null)       type=Material.AIR;
      String reason=GriefPrevention.instance.allowBuild(player,location);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null)       return true;
    }
  }
  return false;
}",0.988396730905055
134169,"@Override public void onEnable(){
  ProjectKorra.log=this.getLogger();
  plugin=this;
  new ConfigManager(this);
  new Methods(this);
  new Commands(this);
  new AbilityModuleManager(this);
  new ComboManager();
  new ChiComboManager();
  ConfigManager.configCheck();
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  DBConnection.init();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    Methods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Methods.deserializeFile();
  new CraftingRecipes(this);
}","@Override public void onEnable(){
  ProjectKorra.log=this.getLogger();
  plugin=this;
  new ConfigManager(this);
  new Methods(this);
  new Commands(this);
  new AbilityModuleManager(this);
  new ComboManager();
  new ChiComboManager();
  ConfigManager.configCheck();
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  DBConnection.init();
  if (DBConnection.isOpen() == false)   return;
  for (  Player player : Bukkit.getOnlinePlayers()) {
    Methods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Methods.deserializeFile();
  new CraftingRecipes(this);
}",0.9859894921190894
134170,"@Override public void onDisable(){
  Methods.stopBending();
  DBConnection.sql.close();
}","@Override public void onDisable(){
  Methods.stopBending();
  if (DBConnection.isOpen == false)   return;
  DBConnection.sql.close();
}",0.7946428571428571
134171,"@Override public Connection open(){
  try {
    Class.forName(""String_Node_Str"");
    String url=""String_Node_Str"" + this.host + ""String_Node_Str""+ this.port+ ""String_Node_Str""+ this.database;
    this.connection=DriverManager.getConnection(url,this.user,this.pass);
    this.printInfo(""String_Node_Str"");
    return this.connection;
  }
 catch (  ClassNotFoundException e) {
    this.printErr(""String_Node_Str"",true);
    return null;
  }
catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
}","@Override public Connection open(){
  try {
    Class.forName(""String_Node_Str"");
    String url=""String_Node_Str"" + this.host + ""String_Node_Str""+ this.port+ ""String_Node_Str""+ this.database;
    this.connection=DriverManager.getConnection(url,this.user,this.pass);
    this.printInfo(""String_Node_Str"");
    return this.connection;
  }
 catch (  ClassNotFoundException e) {
    this.printErr(""String_Node_Str"",true);
    return null;
  }
catch (  SQLException e) {
    e.printStackTrace();
    this.printErr(""String_Node_Str"",true);
    return null;
  }
}",0.9598506069094304
134172,"public static boolean isIgnitable(Player player,Block block){
  Material[] overwriteable={Material.SAPLING,Material.LONG_GRASS,Material.DEAD_BUSH,Material.YELLOW_FLOWER,Material.RED_ROSE,Material.BROWN_MUSHROOM,Material.RED_MUSHROOM,Material.FIRE,Material.SNOW,Material.TORCH};
  if (Arrays.asList(overwriteable).contains(block.getType())) {
    return true;
  }
 else   if (block.getType() != Material.AIR) {
    return false;
  }
  Material[] ignitable={Material.BEDROCK,Material.BOOKSHELF,Material.BRICK,Material.CLAY,Material.CLAY_BRICK,Material.COAL_ORE,Material.COBBLESTONE,Material.DIAMOND_ORE,Material.DIAMOND_BLOCK,Material.DIRT,Material.ENDER_STONE,Material.GLOWING_REDSTONE_ORE,Material.GOLD_BLOCK,Material.GRAVEL,Material.GRASS,Material.HUGE_MUSHROOM_1,Material.HUGE_MUSHROOM_2,Material.LAPIS_BLOCK,Material.LAPIS_ORE,Material.LOG,Material.MOSSY_COBBLESTONE,Material.MYCEL,Material.NETHER_BRICK,Material.NETHERRACK,Material.OBSIDIAN,Material.REDSTONE_ORE,Material.SAND,Material.SANDSTONE,Material.SMOOTH_BRICK,Material.STONE,Material.SOUL_SAND,Material.WOOD,Material.WOOL,Material.LEAVES,Material.MELON_BLOCK,Material.PUMPKIN,Material.JACK_O_LANTERN,Material.NOTE_BLOCK,Material.GLOWSTONE,Material.IRON_BLOCK,Material.DISPENSER,Material.SPONGE,Material.IRON_ORE,Material.GOLD_ORE,Material.COAL_BLOCK,Material.WORKBENCH,Material.HAY_BLOCK,Material.REDSTONE_LAMP_OFF,Material.REDSTONE_LAMP_ON,Material.EMERALD_ORE,Material.EMERALD_BLOCK,Material.REDSTONE_BLOCK,Material.QUARTZ_BLOCK,Material.QUARTZ_ORE,Material.STAINED_CLAY,Material.HARD_CLAY};
  Block belowblock=block.getRelative(BlockFace.DOWN);
  if (Arrays.asList(ignitable).contains(belowblock.getType())) {
    return true;
  }
  return false;
}","public static boolean isIgnitable(Player player,Block block){
  Material[] overwriteable={Material.SAPLING,Material.LONG_GRASS,Material.THIN_GLASS,Material.DEAD_BUSH,Material.YELLOW_FLOWER,Material.RED_ROSE,Material.BROWN_MUSHROOM,Material.RED_MUSHROOM,Material.FIRE,Material.SNOW,Material.TORCH};
  if (Arrays.asList(overwriteable).contains(block.getType())) {
    return true;
  }
 else   if (block.getType() != Material.AIR) {
    return false;
  }
  Material[] ignitable={Material.BEDROCK,Material.BOOKSHELF,Material.BRICK,Material.CLAY,Material.CLAY_BRICK,Material.COAL_ORE,Material.COBBLESTONE,Material.DIAMOND_ORE,Material.DIAMOND_BLOCK,Material.DIRT,Material.ENDER_STONE,Material.GLOWING_REDSTONE_ORE,Material.GOLD_BLOCK,Material.GRAVEL,Material.GRASS,Material.HUGE_MUSHROOM_1,Material.HUGE_MUSHROOM_2,Material.LAPIS_BLOCK,Material.LAPIS_ORE,Material.LOG,Material.MOSSY_COBBLESTONE,Material.MYCEL,Material.NETHER_BRICK,Material.NETHERRACK,Material.OBSIDIAN,Material.REDSTONE_ORE,Material.SAND,Material.SANDSTONE,Material.SMOOTH_BRICK,Material.STONE,Material.SOUL_SAND,Material.WOOD,Material.WOOL,Material.LEAVES,Material.LEAVES_2,Material.MELON_BLOCK,Material.PUMPKIN,Material.JACK_O_LANTERN,Material.NOTE_BLOCK,Material.GLOWSTONE,Material.IRON_BLOCK,Material.DISPENSER,Material.SPONGE,Material.IRON_ORE,Material.GOLD_ORE,Material.COAL_BLOCK,Material.WORKBENCH,Material.HAY_BLOCK,Material.REDSTONE_LAMP_OFF,Material.REDSTONE_LAMP_ON,Material.EMERALD_ORE,Material.EMERALD_BLOCK,Material.REDSTONE_BLOCK,Material.QUARTZ_BLOCK,Material.QUARTZ_ORE,Material.STAINED_CLAY,Material.HARD_CLAY};
  Block belowblock=block.getRelative(BlockFace.DOWN);
  if (Arrays.asList(ignitable).contains(belowblock.getType())) {
    return true;
  }
  return false;
}",0.9890300230946882
134173,"public void electrocute(LivingEntity lent){
  lent.getWorld().playSound(lent.getLocation(),Sound.CREEPER_HISS,1,0);
  player.getWorld().playSound(player.getLocation(),Sound.CREEPER_HISS,1,0);
  Methods.damageEntity(player,lent,damage);
  if (Math.random() < stunChance) {
    final Location lentLoc=lent.getLocation();
    final LivingEntity flent=lent;
    new BukkitRunnable(){
      int count=0;
      public void run(){
        Location tempLoc=lentLoc.clone();
        Vector tempVel=flent.getVelocity();
        tempVel.setY(Math.min(0,tempVel.getY()));
        tempLoc.setY(flent.getLocation().getY());
        flent.teleport(tempLoc);
        flent.setVelocity(tempVel);
        count++;
        if (count > stunDuration)         cancel();
      }
    }
.runTaskTimer(ProjectKorra.plugin,0,1);
  }
}","public void electrocute(LivingEntity lent){
  lent.getWorld().playSound(lent.getLocation(),Sound.CREEPER_HISS,1,0);
  player.getWorld().playSound(player.getLocation(),Sound.CREEPER_HISS,1,0);
  Methods.damageEntity(player,lent,damage);
  if (Math.random() < stunChance) {
    final Location lentLoc=lent.getLocation();
    final LivingEntity flent=lent;
    new BukkitRunnable(){
      int count=0;
      public void run(){
        if (flent.isDead() || (flent instanceof Player && !((Player)flent).isOnline())) {
          cancel();
          return;
        }
        Location tempLoc=lentLoc.clone();
        Vector tempVel=flent.getVelocity();
        tempVel.setY(Math.min(0,tempVel.getY()));
        tempLoc.setY(flent.getLocation().getY());
        flent.teleport(tempLoc);
        flent.setVelocity(tempVel);
        count++;
        if (count > stunDuration)         cancel();
      }
    }
.runTaskTimer(ProjectKorra.plugin,0,1);
  }
}",0.9212328767123288
134174,"public static boolean isTransparent(Player player,Block block){
  if (!Arrays.asList(Methods.transparentToEarthbending).contains(block.getTypeId())) {
    if (isWater(block.getLocation()))     return true;
 else     if (isIce(block.getLocation()))     return ARC_ON_ICE;
  }
  return !Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation());
}","public static boolean isTransparent(Player player,Block block){
  if (Arrays.asList(Methods.transparentToEarthbending).contains(block.getTypeId())) {
    if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation()))     return false;
 else     if (isIce(block.getLocation()))     return ARC_ON_ICE;
    return true;
  }
  return false;
}",0.7544581618655692
134175,"public void removeWithTasks(){
  for (  BukkitRunnable task : tasks)   task.cancel();
  remove();
}","public void removeWithTasks(){
  for (int i=0; i < tasks.size(); i++) {
    tasks.get(i).cancel();
    i--;
  }
  remove();
}",0.7142857142857143
134176,"public Lightning(Player player){
  this.player=player;
  bplayer=Methods.getBendingPlayer(player.getName());
  charged=false;
  hitWater=false;
  hitIce=false;
  time=System.currentTimeMillis();
  range=Methods.getFirebendingDayAugment(RANGE,player.getWorld());
  subArcChance=Methods.getFirebendingDayAugment(SUB_ARC_CHANCE,player.getWorld());
  damage=Methods.getFirebendingDayAugment(DAMAGE,player.getWorld());
  chainArcs=Methods.getFirebendingDayAugment(MAX_CHAIN_ARCS,player.getWorld());
  chainArcChance=Methods.getFirebendingDayAugment(CHAIN_ARC_CHANCE,player.getWorld());
  chainRange=Methods.getFirebendingDayAugment(CHAIN_ARC_RANGE,player.getWorld());
  waterRange=Methods.getFirebendingDayAugment(WATER_ARC_RANGE,player.getWorld());
  stunChance=Methods.getFirebendingDayAugment(STUN_CHANCE,player.getWorld());
  stunDuration=Methods.getFirebendingDayAugment(STUN_DURATION,player.getWorld());
  chargeTime=CHARGETIME;
  cooldown=COOLDOWN;
  if (AvatarState.isAvatarState(player)) {
    range=AvatarState.getValue(range);
    chargeTime=0;
    cooldown=0;
    subArcChance=AvatarState.getValue(subArcChance);
    damage=AvatarState.getValue(damage);
    chainArcs=AvatarState.getValue(chainArcs);
    chainArcChance=AvatarState.getValue(chainArcChance);
    chainRange=AvatarState.getValue(chainRange);
    waterRange=AvatarState.getValue(waterRange);
    stunChance=AvatarState.getValue(stunChance);
    stunDuration=AvatarState.getValue(stunDuration);
  }
 else   if (BendingManager.events.get(player.getWorld()).equalsIgnoreCase(""String_Node_Str"")) {
    chargeTime=0;
    cooldown=0;
  }
  instances.add(this);
}","public Lightning(Player player){
  this.player=player;
  bplayer=Methods.getBendingPlayer(player.getName());
  charged=false;
  hitWater=false;
  hitIce=false;
  time=System.currentTimeMillis();
  range=Methods.getFirebendingDayAugment(RANGE,player.getWorld());
  subArcChance=Methods.getFirebendingDayAugment(SUB_ARC_CHANCE,player.getWorld());
  damage=Methods.getFirebendingDayAugment(DAMAGE,player.getWorld());
  chainArcs=Methods.getFirebendingDayAugment(MAX_CHAIN_ARCS,player.getWorld());
  chainArcChance=Methods.getFirebendingDayAugment(CHAIN_ARC_CHANCE,player.getWorld());
  chainRange=Methods.getFirebendingDayAugment(CHAIN_ARC_RANGE,player.getWorld());
  waterRange=Methods.getFirebendingDayAugment(WATER_ARC_RANGE,player.getWorld());
  stunChance=Methods.getFirebendingDayAugment(STUN_CHANCE,player.getWorld());
  stunDuration=Methods.getFirebendingDayAugment(STUN_DURATION,player.getWorld());
  chargeTime=CHARGETIME;
  cooldown=COOLDOWN;
  if (AvatarState.isAvatarState(player)) {
    chargeTime=0;
    cooldown=0;
    damage=AvatarState.getValue(damage);
    chainArcs=AvatarState.getValue(chainArcs);
    chainArcChance=AvatarState.getValue(chainArcChance);
    chainRange=AvatarState.getValue(chainRange);
    stunChance=AvatarState.getValue(stunChance);
  }
 else   if (BendingManager.events.get(player.getWorld()).equalsIgnoreCase(""String_Node_Str"")) {
    chargeTime=0;
    cooldown=0;
  }
  instances.add(this);
}",0.8411764705882353
134177,"private void progress(){
  if (player.isDead() || !player.isOnline()) {
    removeWithTasks();
    return;
  }
 else   if (Methods.getBoundAbility(player) == null || !Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    return;
  }
  if (state == State.START) {
    if (bplayer.isOnCooldown(""String_Node_Str"")) {
      remove();
      return;
    }
    if (System.currentTimeMillis() - time > chargeTime)     charged=true;
    if (charged) {
      if (player.isSneaking()) {
        Location loc=player.getEyeLocation().add(player.getEyeLocation().getDirection().normalize().multiply(1.2));
        loc.add(0,0.3,0);
        ParticleEffect.MAGIC_CRIT.display(loc,0.3F,0.1F,0.3F,0,4);
      }
 else {
        state=State.MAINBOLT;
        bplayer.addCooldown(""String_Node_Str"",(long)cooldown);
        Entity target=Methods.getTargetedEntity(player,range,new ArrayList<Entity>());
        origin=player.getEyeLocation();
        if (target != null)         destination=target.getLocation();
 else         destination=player.getEyeLocation().add(player.getEyeLocation().getDirection().normalize().multiply(range));
      }
    }
 else     if (!player.isSneaking()) {
      remove();
      return;
    }
  }
 else   if (state == State.MAINBOLT) {
    Arc mainArc=new Arc(origin,destination);
    mainArc.generatePoints(POINT_GENERATION);
    arcs.add(mainArc);
    ArrayList<Arc> subArcs=mainArc.generateArcs(subArcChance,range / 2.0);
    arcs.addAll(subArcs);
    state=State.STRIKE;
  }
 else   if (state == State.STRIKE) {
    Arc mainArc=null;
    if (arcs.size() > 0)     mainArc=arcs.get(0);
    for (int i=0; i < arcs.size(); i++) {
      Arc arc=arcs.get(i);
      for (int j=0; j < arc.getAnimLocs().size() - 1; j++) {
        final Location iterLoc=arc.getAnimLocs().get(j).getLoc().clone();
        final Location dest=arc.getAnimLocs().get(j + 1).getLoc().clone();
        if (!isTransparent(player,iterLoc.getBlock())) {
          if (SELF_HIT_CLOSE && player.getLocation().distance(iterLoc) < 3) {
            if (!affectedEntities.contains(player)) {
              affectedEntities.add(player);
              electrocute(player);
            }
          }
          if (arcs.get(i) == mainArc) {
            remove();
            return;
          }
          break;
        }
        while (iterLoc.distance(dest) > 0.15) {
          BukkitRunnable task=new LightningParticle(arc,iterLoc.clone());
          double timer=arc.getAnimLocs().get(j).getAnimCounter() / 2;
          task.runTaskTimer(ProjectKorra.plugin,(long)timer,1);
          tasks.add(task);
          iterLoc.add(Methods.getDirection(iterLoc,dest).normalize().multiply(0.15));
        }
      }
      arcs.remove(i);
      i--;
    }
    if (tasks.size() == 0) {
      remove();
      return;
    }
  }
}","private void progress(){
  if (player.isDead() || !player.isOnline()) {
    removeWithTasks();
    return;
  }
 else   if (Methods.getBoundAbility(player) == null || !Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    return;
  }
  if (state == State.START) {
    if (bplayer.isOnCooldown(""String_Node_Str"")) {
      remove();
      return;
    }
    if (System.currentTimeMillis() - time > chargeTime)     charged=true;
    if (charged) {
      if (player.isSneaking()) {
        Location loc=player.getEyeLocation().add(player.getEyeLocation().getDirection().normalize().multiply(1.2));
        loc.add(0,0.3,0);
        ParticleEffect.MAGIC_CRIT.display(loc,0.3F,0.1F,0.3F,0,4);
      }
 else {
        state=State.MAINBOLT;
        bplayer.addCooldown(""String_Node_Str"",(long)cooldown);
        Entity target=Methods.getTargetedEntity(player,range,new ArrayList<Entity>());
        origin=player.getEyeLocation();
        if (target != null)         destination=target.getLocation();
 else         destination=player.getEyeLocation().add(player.getEyeLocation().getDirection().normalize().multiply(range));
      }
    }
 else     if (!player.isSneaking()) {
      remove();
      return;
    }
  }
 else   if (state == State.MAINBOLT) {
    Arc mainArc=new Arc(origin,destination);
    mainArc.generatePoints(POINT_GENERATION);
    arcs.add(mainArc);
    ArrayList<Arc> subArcs=mainArc.generateArcs(subArcChance,range / 2.0);
    arcs.addAll(subArcs);
    state=State.STRIKE;
  }
 else   if (state == State.STRIKE) {
    for (int i=0; i < arcs.size(); i++) {
      Arc arc=arcs.get(i);
      for (int j=0; j < arc.getAnimLocs().size() - 1; j++) {
        final Location iterLoc=arc.getAnimLocs().get(j).getLoc().clone();
        final Location dest=arc.getAnimLocs().get(j + 1).getLoc().clone();
        if (!isTransparent(player,iterLoc.getBlock())) {
          if (SELF_HIT_CLOSE && player.getLocation().distance(iterLoc) < 3) {
            if (!affectedEntities.contains(player)) {
              affectedEntities.add(player);
              electrocute(player);
            }
          }
          break;
        }
        while (iterLoc.distance(dest) > 0.15) {
          BukkitRunnable task=new LightningParticle(arc,iterLoc.clone());
          double timer=arc.getAnimLocs().get(j).getAnimCounter() / 2;
          task.runTaskTimer(ProjectKorra.plugin,(long)timer,1);
          tasks.add(task);
          iterLoc.add(Methods.getDirection(iterLoc,dest).normalize().multiply(0.15));
        }
      }
      arcs.remove(i);
      i--;
    }
    if (tasks.size() == 0) {
      remove();
      return;
    }
  }
}",0.9696969696969696
134178,"private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      for (int i=0; i < args.length; i++) {
        args[i]=args[i].toLowerCase();
      }
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
        if (!Methods.hasRPG()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        UUID uuid=player.getUniqueId();
        if (RPGMethods.hasBeenAvatar(uuid)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        RPGMethods.setAvatar(uuid);
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        return true;
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Methods.runDebug();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=(Player)s;
        String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] listaliases={""String_Node_Str"",""String_Node_Str""};
        if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          List<Preset> listnames=Preset.presets.get(player.getUniqueId());
          List<String> ln2=new ArrayList<String>();
          if (listnames == null || listnames.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          for (          Preset preset : listnames) {
            ln2.add(preset.getName());
          }
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
          return true;
        }
 else         if (args.length != 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        String name=args[2];
        if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset preset=Preset.getPreset(player,name);
          preset.delete();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset.bindPreset(player,name);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          int limit=Methods.getMaxPresets(player);
          if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (bPlayer == null)           return true;
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          Preset preset=new Preset(player.getUniqueId(),name,abilities);
          preset.save();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
          return true;
        }
      }
      if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!invincible.contains(s.getName())) {
          invincible.add(s.getName());
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
 else {
          invincible.remove(s.getName());
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length < 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
          if (args.length != 4) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          int uses;
          try {
            uses=Integer.parseInt(args[3]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
            return true;
          }
          ItemStack hook=GrapplingHookAPI.createHook(uses);
          player.getInventory().addItem(hook);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
          return true;
        }
 else {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Methods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.getAbilities().clear();
          for (int i=1; i <= 9; i++) {
            Methods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          try {
            int slot=Integer.parseInt(args[1]);
            if (slot < 1 || slot > 9) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            if (bPlayer.getAbilities().get(slot) != null) {
              bPlayer.getAbilities().remove(slot);
              Methods.saveAbility(bPlayer,slot,null);
            }
            s.sendMessage(""String_Node_Str"" + slot);
            return true;
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!Methods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  Methods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.getAbilities();
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Air) + st);
                }
 else {
                  s.sendMessage(Methods.getAirColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Water) + st);
                }
 else {
                  s.sendMessage(Methods.getWaterColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Earth) + st);
                }
 else {
                  s.sendMessage(Methods.getEarthColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Fire) + st);
                }
 else {
                  s.sendMessage(Methods.getFireColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          if (abilities.isEmpty()) {
            s.sendMessage(""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null)             s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + args[1] + ""String_Node_Str"");
            try {
              UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
              if (rs2.next()) {
                String element=rs2.getString(""String_Node_Str"");
                s.sendMessage(args[1] + ""String_Node_Str"");
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
                }
                if (Methods.hasRPG()) {
                  if (RPGMethods.isCurrentAvatar(uuid)) {
                    s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
                  }
 else                   if (RPGMethods.hasBeenAvatar(uuid)) {
                    s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
                  }
 else {
                  }
                }
              }
 else {
                s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              }
            }
 catch (            SQLException e) {
              e.printStackTrace();
            }
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (Methods.isBender(un,Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            if (Methods.canAirFlight(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (Methods.canUseSpiritualProjection(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            if (Methods.canPlantbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (Methods.canBloodbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (Methods.canIcebend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            if (Methods.canMetalbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (Methods.canLavabend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (Methods.canSandbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            if (Methods.canCombustionbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (Methods.canLightningbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(un);
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (Methods.hasRPG()) {
            if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
              s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
            }
 else             if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
              s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
            }
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=Methods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(Methods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (Methods.isBender(un,Element.Air)) {
              players.add(Methods.getAirColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Water)) {
              players.add(Methods.getWaterColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Earth)) {
              players.add(Methods.getEarthColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Chi)) {
              players.add(Methods.getChiColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Fire)) {
              players.add(Methods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
        if (Methods.hasRPG()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ Methods.getRPG().getDescription().getVersion());
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        Methods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        Methods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          Methods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        Methods.removeUnusableAbilities(player.getName());
        Methods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        Methods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Air);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Water);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Earth);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Fire);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Chi);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
          if (bTarget.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            Methods.removeUnusableAbilities(target.getName());
            Methods.saveElements(bTarget);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (Methods.abilityExists(args[1])) {
          String ability=Methods.getAbility(args[1]);
          if (Methods.isAirAbility(ability)) {
            s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isWaterAbility(ability)) {
            s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isEarthAbility(ability)) {
            if (Methods.isMetalbendingAbility(ability)) {
              s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (Methods.isFireAbility(ability)) {
            s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isChiAbility(ability)) {
            s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}","private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      for (int i=0; i < args.length; i++) {
        args[i]=args[i].toLowerCase();
      }
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
        if (!Methods.hasRPG()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        UUID uuid=player.getUniqueId();
        if (RPGMethods.hasBeenAvatar(uuid)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        RPGMethods.setAvatar(uuid);
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        return true;
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Methods.runDebug();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=(Player)s;
        String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String[] listaliases={""String_Node_Str"",""String_Node_Str""};
        if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          List<Preset> listnames=Preset.presets.get(player.getUniqueId());
          List<String> ln2=new ArrayList<String>();
          if (listnames == null || listnames.isEmpty()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          for (          Preset preset : listnames) {
            ln2.add(preset.getName());
          }
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
          return true;
        }
 else         if (args.length != 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        String name=args[2];
        if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset preset=Preset.getPreset(player,name);
          preset.delete();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Preset.bindPreset(player,name);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          int limit=Methods.getMaxPresets(player);
          if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Preset.presetExists(player,name)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (bPlayer == null)           return true;
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          Preset preset=new Preset(player.getUniqueId(),name,abilities);
          preset.save();
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
          return true;
        }
      }
      if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!invincible.contains(s.getName())) {
          invincible.add(s.getName());
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
 else {
          invincible.remove(s.getName());
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length < 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
          if (args.length != 4) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          int uses;
          try {
            uses=Integer.parseInt(args[3]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
            return true;
          }
          ItemStack hook=GrapplingHookAPI.createHook(uses);
          player.getInventory().addItem(hook);
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
          return true;
        }
 else {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Methods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.getAbilities().clear();
          for (int i=1; i <= 9; i++) {
            Methods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          try {
            int slot=Integer.parseInt(args[1]);
            if (slot < 1 || slot > 9) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            if (bPlayer.getAbilities().get(slot) != null) {
              bPlayer.getAbilities().remove(slot);
              Methods.saveAbility(bPlayer,slot,null);
            }
            s.sendMessage(""String_Node_Str"" + slot);
            return true;
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!Methods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  Methods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.getAbilities();
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Air) + st);
                }
 else {
                  s.sendMessage(Methods.getAirColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Water) + st);
                }
 else {
                  s.sendMessage(Methods.getWaterColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Earth) + st);
                }
 else {
                  s.sendMessage(Methods.getEarthColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isSubAbility(st)) {
                  s.sendMessage(Methods.getSubBendingColor(Element.Fire) + st);
                }
 else {
                  s.sendMessage(Methods.getFireColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          if (abilities.isEmpty()) {
            s.sendMessage(""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null)             s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + args[1] + ""String_Node_Str"");
            try {
              UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
              if (rs2.next()) {
                String element=rs2.getString(""String_Node_Str"");
                s.sendMessage(args[1] + ""String_Node_Str"");
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
                }
                if (element.contains(""String_Node_Str"")) {
                  s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
                }
                if (Methods.hasRPG()) {
                  if (RPGMethods.isCurrentAvatar(uuid)) {
                    s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
                  }
 else                   if (RPGMethods.hasBeenAvatar(uuid)) {
                    s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
                  }
 else {
                  }
                }
              }
 else {
                s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              }
            }
 catch (            SQLException e) {
              e.printStackTrace();
            }
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (Methods.isBender(un,Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            if (Methods.canAirFlight(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
            if (Methods.canUseSpiritualProjection(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            if (Methods.canPlantbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (Methods.canBloodbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (Methods.canIcebend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
            if (Methods.canWaterHeal(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            if (Methods.canMetalbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (Methods.canLavabend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
            if (Methods.canSandbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            if (Methods.canCombustionbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
            if (Methods.canLightningbend(p)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(un);
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (Methods.hasRPG()) {
            if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
              s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
            }
 else             if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
              s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
            }
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=Methods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(Methods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (Methods.isBender(un,Element.Air)) {
              players.add(Methods.getAirColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Water)) {
              players.add(Methods.getWaterColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Earth)) {
              players.add(Methods.getEarthColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Chi)) {
              players.add(Methods.getChiColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Fire)) {
              players.add(Methods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
        if (Methods.hasRPG()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ Methods.getRPG().getDescription().getVersion());
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        Methods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        Methods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          Methods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        Methods.removeUnusableAbilities(player.getName());
        Methods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        Methods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Air);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Water);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Earth);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Fire);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Chi);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
          if (bTarget.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            Methods.removeUnusableAbilities(target.getName());
            Methods.saveElements(bTarget);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          if (s.hasPermission(""String_Node_Str""))           s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (Methods.abilityExists(args[1])) {
          String ability=Methods.getAbility(args[1]);
          if (Methods.isAirAbility(ability)) {
            s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isWaterAbility(ability)) {
            s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isEarthAbility(ability)) {
            if (Methods.isMetalbendingAbility(ability)) {
              s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (Methods.isFireAbility(ability)) {
            s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isChiAbility(ability)) {
            s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}",0.9987282674564496
134179,"@Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  for (int i=0; i < args.length; i++) {
    args[i]=args[i].toLowerCase();
  }
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
    if (!Methods.hasRPG()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    UUID uuid=player.getUniqueId();
    if (RPGMethods.hasBeenAvatar(uuid)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    RPGMethods.setAvatar(uuid);
    s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Methods.runDebug();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=(Player)s;
    String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] listaliases={""String_Node_Str"",""String_Node_Str""};
    if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      List<Preset> listnames=Preset.presets.get(player.getUniqueId());
      List<String> ln2=new ArrayList<String>();
      if (listnames == null || listnames.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      for (      Preset preset : listnames) {
        ln2.add(preset.getName());
      }
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
      return true;
    }
 else     if (args.length != 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    String name=args[2];
    if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset preset=Preset.getPreset(player,name);
      preset.delete();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset.bindPreset(player,name);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      int limit=Methods.getMaxPresets(player);
      if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (bPlayer == null)       return true;
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      Preset preset=new Preset(player.getUniqueId(),name,abilities);
      preset.save();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
      return true;
    }
  }
  if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!invincible.contains(s.getName())) {
      invincible.add(s.getName());
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else {
      invincible.remove(s.getName());
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length < 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
      if (args.length != 4) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      int uses;
      try {
        uses=Integer.parseInt(args[3]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
        return true;
      }
      ItemStack hook=GrapplingHookAPI.createHook(uses);
      player.getInventory().addItem(hook);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
      return true;
    }
 else {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Methods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.getAbilities().clear();
      for (int i=1; i <= 9; i++) {
        Methods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      try {
        int slot=Integer.parseInt(args[1]);
        if (slot < 1 || slot > 9) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (bPlayer.getAbilities().get(slot) != null) {
          bPlayer.getAbilities().remove(slot);
          Methods.saveAbility(bPlayer,slot,null);
        }
        s.sendMessage(""String_Node_Str"" + slot);
        return true;
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!Methods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              Methods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Air) + st);
            }
 else {
              s.sendMessage(Methods.getAirColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + st);
            }
 else {
              s.sendMessage(Methods.getWaterColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + st);
            }
 else {
              s.sendMessage(Methods.getEarthColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Fire) + st);
            }
 else {
              s.sendMessage(Methods.getFireColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      if (abilities.isEmpty()) {
        s.sendMessage(""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null)         s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + args[1] + ""String_Node_Str"");
        try {
          UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
          if (rs2.next()) {
            String element=rs2.getString(""String_Node_Str"");
            s.sendMessage(args[1] + ""String_Node_Str"");
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            }
            if (Methods.hasRPG()) {
              if (RPGMethods.isCurrentAvatar(uuid)) {
                s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
              }
 else               if (RPGMethods.hasBeenAvatar(uuid)) {
                s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
              }
 else {
              }
            }
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (Methods.isBender(un,Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        if (Methods.canAirFlight(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (Methods.canUseSpiritualProjection(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        if (Methods.canPlantbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (Methods.canBloodbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (Methods.canIcebend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        if (Methods.canMetalbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (Methods.canLavabend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (Methods.canSandbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        if (Methods.canCombustionbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (Methods.canLightningbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(un);
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (Methods.hasRPG()) {
        if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
          s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
        }
 else         if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
          s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
        }
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=Methods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(Methods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (Methods.isBender(un,Element.Air)) {
          players.add(Methods.getAirColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Water)) {
          players.add(Methods.getWaterColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Earth)) {
          players.add(Methods.getEarthColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Chi)) {
          players.add(Methods.getChiColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Fire)) {
          players.add(Methods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
    if (Methods.hasRPG()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ Methods.getRPG().getDescription().getVersion());
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    Methods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    Methods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      Methods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    Methods.removeUnusableAbilities(player.getName());
    Methods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    Methods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Air);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Water);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Earth);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Fire);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Chi);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
      if (bTarget.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        Methods.removeUnusableAbilities(target.getName());
        Methods.saveElements(bTarget);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    if (Methods.abilityExists(args[1])) {
      String ability=Methods.getAbility(args[1]);
      if (Methods.isAirAbility(ability)) {
        s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isWaterAbility(ability)) {
        s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isEarthAbility(ability)) {
        if (Methods.isMetalbendingAbility(ability)) {
          s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (Methods.isFireAbility(ability)) {
        s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isChiAbility(ability)) {
        s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  for (int i=0; i < args.length; i++) {
    args[i]=args[i].toLowerCase();
  }
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(avataraliases).contains(args[0].toLowerCase())) {
    if (!Methods.hasRPG()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    UUID uuid=player.getUniqueId();
    if (RPGMethods.hasBeenAvatar(uuid)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    RPGMethods.setAvatar(uuid);
    s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Methods.runDebug();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(presetaliases).contains(args[0].toLowerCase())) {
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=(Player)s;
    String[] deletealiases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] createaliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] listaliases={""String_Node_Str"",""String_Node_Str""};
    if (args.length == 2 && Arrays.asList(listaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      List<Preset> listnames=Preset.presets.get(player.getUniqueId());
      List<String> ln2=new ArrayList<String>();
      if (listnames == null || listnames.isEmpty()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      for (      Preset preset : listnames) {
        ln2.add(preset.getName());
      }
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ln2.toString());
      return true;
    }
 else     if (args.length != 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    String name=args[2];
    if (Arrays.asList(deletealiases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset preset=Preset.getPreset(player,name);
      preset.delete();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Preset.bindPreset(player,name);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(createaliases).contains(args[1].toLowerCase())) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      int limit=Methods.getMaxPresets(player);
      if (Preset.presets.get(player) != null && Preset.presets.get(player).size() >= limit) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Preset.presetExists(player,name)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (bPlayer == null)       return true;
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      Preset preset=new Preset(player.getUniqueId(),name,abilities);
      preset.save();
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + name);
      return true;
    }
  }
  if (Arrays.asList(invinciblealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!invincible.contains(s.getName())) {
      invincible.add(s.getName());
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 else {
      invincible.remove(s.getName());
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(givealiases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length < 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(grapplinghookaliases).contains(args[2].toLowerCase())) {
      if (args.length != 4) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      int uses;
      try {
        uses=Integer.parseInt(args[3]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + s.getName()+ ""String_Node_Str"");
        return true;
      }
      ItemStack hook=GrapplingHookAPI.createHook(uses);
      player.getInventory().addItem(hook);
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + uses+ ""String_Node_Str"");
      return true;
    }
 else {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Methods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.getAbilities().clear();
      for (int i=1; i <= 9; i++) {
        Methods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      try {
        int slot=Integer.parseInt(args[1]);
        if (slot < 1 || slot > 9) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (bPlayer.getAbilities().get(slot) != null) {
          bPlayer.getAbilities().remove(slot);
          Methods.saveAbility(bPlayer,slot,null);
        }
        s.sendMessage(""String_Node_Str"" + slot);
        return true;
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!Methods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              Methods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.getAbilities();
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Air) + st);
            }
 else {
              s.sendMessage(Methods.getAirColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Water) + st);
            }
 else {
              s.sendMessage(Methods.getWaterColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Earth) + st);
            }
 else {
              s.sendMessage(Methods.getEarthColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isSubAbility(st)) {
              s.sendMessage(Methods.getSubBendingColor(Element.Fire) + st);
            }
 else {
              s.sendMessage(Methods.getFireColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.getAbilities();
      if (abilities.isEmpty()) {
        s.sendMessage(""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null)         s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + args[1] + ""String_Node_Str"");
        try {
          UUID uuid=UUID.fromString(rs2.getString(""String_Node_Str""));
          if (rs2.next()) {
            String element=rs2.getString(""String_Node_Str"");
            s.sendMessage(args[1] + ""String_Node_Str"");
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            }
            if (element.contains(""String_Node_Str"")) {
              s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            }
            if (Methods.hasRPG()) {
              if (RPGMethods.isCurrentAvatar(uuid)) {
                s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
              }
 else               if (RPGMethods.hasBeenAvatar(uuid)) {
                s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
              }
 else {
              }
            }
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (Methods.isBender(un,Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        if (Methods.canAirFlight(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
        if (Methods.canUseSpiritualProjection(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Air) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        if (Methods.canPlantbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (Methods.canBloodbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (Methods.canIcebend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
        if (Methods.canWaterHeal(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Water) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        if (Methods.canMetalbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (Methods.canLavabend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
        if (Methods.canSandbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Earth) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        if (Methods.canCombustionbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
        if (Methods.canLightningbend(p)) {
          s.sendMessage(Methods.getSubBendingColor(Element.Fire) + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(un);
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (Methods.hasRPG()) {
        if (RPGMethods.isCurrentAvatar(p.getUniqueId())) {
          s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
        }
 else         if (RPGMethods.hasBeenAvatar(p.getUniqueId())) {
          s.sendMessage(Methods.getAvatarColor() + ""String_Node_Str"");
        }
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=Methods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(Methods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (Methods.isBender(un,Element.Air)) {
          players.add(Methods.getAirColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Water)) {
          players.add(Methods.getWaterColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Earth)) {
          players.add(Methods.getEarthColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Chi)) {
          players.add(Methods.getChiColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Fire)) {
          players.add(Methods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ plugin.getDescription().getVersion());
    if (Methods.hasRPG()) {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ Methods.getRPG().getDescription().getVersion());
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    Methods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    Methods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      Methods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    Methods.removeUnusableAbilities(player.getName());
    Methods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    Methods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Air);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Water);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Earth);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Fire);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Chi);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
      if (bTarget.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        Methods.removeUnusableAbilities(target.getName());
        Methods.saveElements(bTarget);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str"");
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      if (s.hasPermission(""String_Node_Str""))       s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(invinciblealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(givealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
    if (Methods.abilityExists(args[1])) {
      String ability=Methods.getAbility(args[1]);
      if (Methods.isAirAbility(ability)) {
        s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isWaterAbility(ability)) {
        s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isEarthAbility(ability)) {
        if (Methods.isMetalbendingAbility(ability)) {
          s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (Methods.isFireAbility(ability)) {
        s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isChiAbility(ability)) {
        s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}",0.9987164232243074
134180,"/** 
 * Gets the Element color from the Ability name specified.
 * @param ability The ability name<p>
 * @return {@link #getChiColor()} <br />{@link #getAirColor()} <br />{@link #getWaterColor()} <br />{@link #getEarthColor()} <br />{@link #getFireColor()} <br />else  {@link #getAvatarColor()}</p>
 */
public static ChatColor getAbilityColor(String ability){
  if (AbilityModuleManager.chiabilities.contains(ability))   return getChiColor();
  if (AbilityModuleManager.airbendingabilities.contains(ability))   return getAirColor();
  if (AbilityModuleManager.waterbendingabilities.contains(ability))   return getWaterColor();
  if (AbilityModuleManager.earthbendingabilities.contains(ability))   return getEarthColor();
  if (AbilityModuleManager.firebendingabilities.contains(ability))   return getFireColor();
 else   return getAvatarColor();
}","/** 
 * Gets the Element color from the Ability name specified.
 * @param ability The ability name<p>
 * @return {@link #getChiColor()} <br />{@link #getAirColor()} <br />{@link #getWaterColor()} <br />{@link #getEarthColor()} <br />{@link #getFireColor()} <br />else  {@link #getAvatarColor()}</p>
 */
public static ChatColor getAbilityColor(String ability){
  if (AbilityModuleManager.chiabilities.contains(ability))   return getChiColor();
  if (AbilityModuleManager.airbendingabilities.contains(ability)) {
    if (AbilityModuleManager.subabilities.contains(ability))     return getSubBendingColor(Element.Air);
    return getAirColor();
  }
  if (AbilityModuleManager.waterbendingabilities.contains(ability)) {
    if (AbilityModuleManager.subabilities.contains(ability))     return getSubBendingColor(Element.Water);
    return getWaterColor();
  }
  if (AbilityModuleManager.earthbendingabilities.contains(ability)) {
    if (AbilityModuleManager.subabilities.contains(ability))     return getSubBendingColor(Element.Earth);
    return getEarthColor();
  }
  if (AbilityModuleManager.firebendingabilities.contains(ability)) {
    if (AbilityModuleManager.subabilities.contains(ability))     return getSubBendingColor(Element.Fire);
    return getFireColor();
  }
 else   return getAvatarColor();
}",0.7178056717805672
134181,"public static boolean hasPermission(Player player,String ability){
  if (player.hasPermission(""String_Node_Str"" + ability))   return true;
  return false;
}","public static boolean hasPermission(Player player,String ability){
  if (player.hasPermission(""String_Node_Str"" + ability) && Methods.canBend(player.getName(),ability))   return true;
  return false;
}",0.8739495798319328
134182,"private void freeze(){
  if (!Methods.canIcebend(player))   return;
  clearWave();
  double freezeradius=radius;
  if (freezeradius > maxfreezeradius) {
    freezeradius=maxfreezeradius;
  }
  for (  Block block : Methods.getBlocksAroundPoint(frozenlocation,freezeradius)) {
    if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation()) || Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation()))     continue;
    if (TempBlock.isTempBlock(block))     continue;
    if (block.getType() == Material.AIR || block.getType() == Material.SNOW) {
      new TempBlock(block,Material.ICE,(byte)0);
      frozenblocks.put(block,block);
    }
    if (Methods.isWater(block)) {
      FreezeMelt.freeze(player,block);
    }
    if (Methods.isPlant(block) && block.getType() != Material.LEAVES) {
      block.breakNaturally();
      new TempBlock(block,Material.ICE,(byte)0);
      frozenblocks.put(block,block);
    }
    for (    Block sound : frozenblocks.keySet()) {
      if (Methods.rand.nextInt(4) == 0) {
        Methods.playWaterbendingSound(sound.getLocation());
      }
    }
  }
}","private void freeze(){
  clearWave();
  if (!Methods.canIcebend(player))   return;
  double freezeradius=radius;
  if (freezeradius > maxfreezeradius) {
    freezeradius=maxfreezeradius;
  }
  for (  Block block : Methods.getBlocksAroundPoint(frozenlocation,freezeradius)) {
    if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation()) || Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation()))     continue;
    if (TempBlock.isTempBlock(block))     continue;
    if (block.getType() == Material.AIR || block.getType() == Material.SNOW) {
      new TempBlock(block,Material.ICE,(byte)0);
      frozenblocks.put(block,block);
    }
    if (Methods.isWater(block)) {
      FreezeMelt.freeze(player,block);
    }
    if (Methods.isPlant(block) && block.getType() != Material.LEAVES) {
      block.breakNaturally();
      new TempBlock(block,Material.ICE,(byte)0);
      frozenblocks.put(block,block);
    }
    for (    Block sound : frozenblocks.keySet()) {
      if (Methods.rand.nextInt(4) == 0) {
        Methods.playWaterbendingSound(sound.getLocation());
      }
    }
  }
}",0.986749116607774
134183,"public static Entity getTargetedEntity(Player player,double range,List<Entity> avoid){
  double longestr=range + 1;
  Entity target=null;
  Location origin=player.getEyeLocation();
  Vector direction=player.getEyeLocation().getDirection().normalize();
  for (  Entity entity : origin.getWorld().getEntities()) {
    if (avoid.contains(entity))     continue;
    if (entity.getLocation().distance(origin) < longestr && getDistanceFromLine(direction,origin,entity.getLocation()) < 2 && (entity instanceof LivingEntity) && entity.getEntityId() != player.getEntityId() && entity.getLocation().distance(origin.clone().add(direction)) < entity.getLocation().distance(origin.clone().add(direction.clone().multiply(-1)))) {
      target=entity;
      longestr=entity.getLocation().distance(origin);
    }
  }
  if (target != null) {
    List<Block> blklist=new ArrayList();
    blklist=Methods.getBlocksAlongLine(player.getLocation(),target.getLocation(),player.getWorld());
    for (    Block isair : blklist) {
      if (Methods.isObstructed(origin,target.getLocation())) {
        target=null;
        break;
      }
    }
  }
  return target;
}","public static Entity getTargetedEntity(Player player,double range,List<Entity> avoid){
  double longestr=range + 1;
  Entity target=null;
  Location origin=player.getEyeLocation();
  Vector direction=player.getEyeLocation().getDirection().normalize();
  for (  Entity entity : origin.getWorld().getEntities()) {
    if (avoid.contains(entity))     continue;
    if (entity.getLocation().distance(origin) < longestr && getDistanceFromLine(direction,origin,entity.getLocation()) < 2 && (entity instanceof LivingEntity) && entity.getEntityId() != player.getEntityId() && entity.getLocation().distance(origin.clone().add(direction)) < entity.getLocation().distance(origin.clone().add(direction.clone().multiply(-1)))) {
      target=entity;
      longestr=entity.getLocation().distance(origin);
    }
  }
  if (target != null) {
    List<Block> blklist=new ArrayList<Block>();
    blklist=Methods.getBlocksAlongLine(player.getLocation(),target.getLocation(),player.getWorld());
    for (    Block isair : blklist) {
      if (Methods.isObstructed(origin,target.getLocation())) {
        target=null;
        break;
      }
    }
  }
  return target;
}",0.9969392216878006
134184,"/** 
 * Deserializes the configuration file ""bendingPlayers.yml"" of the old BendingPlugin and creates a converted.yml ready for conversion.
 * @throws IOException If the ""bendingPlayers.yml"" file is not found
 */
public static void deserializeFile(){
  File readFile=new File(""String_Node_Str"",""String_Node_Str"");
  File writeFile=new File(""String_Node_Str"",""String_Node_Str"");
  if (readFile.exists()) {
    try {
      DataInputStream input=new DataInputStream(new FileInputStream(readFile));
      BufferedReader reader=new BufferedReader(new InputStreamReader(input));
      DataOutputStream output=new DataOutputStream(new FileOutputStream(writeFile));
      BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output));
      String line;
      while ((line=reader.readLine()) != null) {
        if (!line.trim().contains(""String_Node_Str"")) {
          writer.write(line + ""String_Node_Str"");
        }
      }
      reader.close();
      input.close();
      writer.close();
      output.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Deserializes the configuration file ""bendingPlayers.yml"" of the old BendingPlugin and creates a converted.yml ready for conversion.
 * @throws IOException If the ""bendingPlayers.yml"" file is not found
 */
public static void deserializeFile(){
  File readFile=new File(""String_Node_Str"",""String_Node_Str"");
  File writeFile=new File(""String_Node_Str"",""String_Node_Str"");
  if (readFile.exists()) {
    try (DataInputStream input=new DataInputStream(new FileInputStream(readFile));BufferedReader reader=new BufferedReader(new InputStreamReader(input));DataOutputStream output=new DataOutputStream(new FileOutputStream(writeFile));BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output))){
      String line;
      while ((line=reader.readLine()) != null) {
        if (!line.trim().contains(""String_Node_Str"")) {
          writer.write(line + ""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.6582768635043562
134185,"public static void writeToDebug(String message){
  try {
    File dataFolder=plugin.getDataFolder();
    if (!dataFolder.exists()) {
      dataFolder.mkdir();
    }
    File saveTo=new File(plugin.getDataFolder(),""String_Node_Str"");
    if (!saveTo.exists()) {
      saveTo.createNewFile();
    }
    FileWriter fw=new FileWriter(saveTo,true);
    PrintWriter pw=new PrintWriter(fw);
    pw.println(message);
    pw.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void writeToDebug(String message){
  try {
    File dataFolder=plugin.getDataFolder();
    if (!dataFolder.exists()) {
      dataFolder.mkdir();
    }
    File saveTo=new File(plugin.getDataFolder(),""String_Node_Str"");
    if (!saveTo.exists()) {
      saveTo.createNewFile();
    }
    FileWriter fw=new FileWriter(saveTo,true);
    PrintWriter pw=new PrintWriter(fw);
    pw.println(message);
    pw.flush();
    pw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9838056680161944
134186,"@Override public void onEnable(){
  ProjectKorra.log=this.getLogger();
  plugin=this;
  new ConfigManager(this);
  new Methods(this);
  new Commands(this);
  new AbilityModuleManager(this);
  new ComboManager();
  ConfigManager.configCheck();
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  DBConnection.init();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    Methods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  if (getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    getServer().getPluginManager().registerEvents(new TagAPIListener(this),this);
  }
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
  }
  Methods.deserializeFile();
  new CraftingRecipes(this);
}","@Override public void onEnable(){
  ProjectKorra.log=this.getLogger();
  plugin=this;
  new ConfigManager(this);
  new Methods(this);
  new Commands(this);
  new AbilityModuleManager(this);
  new ComboManager();
  ConfigManager.configCheck();
  DBConnection.host=getConfig().getString(""String_Node_Str"");
  DBConnection.port=getConfig().getInt(""String_Node_Str"");
  DBConnection.pass=getConfig().getString(""String_Node_Str"");
  DBConnection.db=getConfig().getString(""String_Node_Str"");
  DBConnection.user=getConfig().getString(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new BendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new AirbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new WaterbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EarthbendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new FirebendingManager(this),0,1);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new ChiblockingManager(this),0,1);
  DBConnection.init();
  for (  Player player : Bukkit.getOnlinePlayers()) {
    Methods.createBendingPlayer(player.getUniqueId(),player.getName());
    Preset.loadPresets(player);
  }
  getServer().getPluginManager().registerEvents(new PKListener(this),this);
  if (getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    getServer().getPluginManager().registerEvents(new TagAPIListener(this),this);
  }
  getServer().getScheduler().runTaskTimerAsynchronously(this,new RevertChecker(this),0,200);
  try {
    MetricsLite metrics=new MetricsLite(this);
    metrics.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Methods.deserializeFile();
  new CraftingRecipes(this);
}",0.9931110498759989
134187,"public final List<T> load(Class<? extends AbilityLoadable> classType){
  for (  File file : files) {
    try {
      final JarFile jarFile=new JarFile(file);
      String mainClass=null;
      if (jarFile.getEntry(""String_Node_Str"") != null) {
        JarEntry element=jarFile.getJarEntry(""String_Node_Str"");
        BufferedReader reader=new BufferedReader(new InputStreamReader(jarFile.getInputStream(element)));
        mainClass=reader.readLine().substring(12);
      }
      if (mainClass != null) {
        Class<?> clazz=Class.forName(mainClass,true,loader);
        if (clazz != null) {
          Class<? extends AbilityLoadable> loadableClass=clazz.asSubclass(classType);
          Constructor<? extends AbilityLoadable> ctor=loadableClass.getConstructor(ctorParams);
          T loadable=(T)ctor.newInstance(paramTypes);
          LoadResult result=loadable.init();
          if (result.getResult().equals(Result.SUCCESS)) {
            loadables.add(loadable);
            AbilityLoadEvent<T> event=new AbilityLoadEvent<T>(plugin,loadable,jarFile);
            plugin.getServer().getPluginManager().callEvent(event);
            continue;
          }
          String reason=result.getReason();
          if (reason != null && !reason.isEmpty()) {
            getLogger().log(Level.INFO,""String_Node_Str"" + file.getName() + ""String_Node_Str""+ reason);
          }
        }
 else {
          jarFile.close();
          throw new ClassNotFoundException();
        }
      }
 else {
        jarFile.close();
        throw new ClassNotFoundException();
      }
    }
 catch (    ClassCastException e) {
      e.printStackTrace();
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getPath() + ""String_Node_Str"");
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
catch (    ClassNotFoundException e) {
      e.printStackTrace();
      getLogger().log(Level.WARNING,""String_Node_Str"");
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
catch (    Exception e) {
      e.printStackTrace();
      getLogger().log(Level.WARNING,""String_Node_Str"");
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
  }
  return loadables;
}","public final List<T> load(Class<? extends AbilityLoadable> classType){
  for (  File file : files) {
    try (final JarFile jarFile=new JarFile(file)){
      String mainClass=null;
      if (jarFile.getEntry(""String_Node_Str"") != null) {
        JarEntry element=jarFile.getJarEntry(""String_Node_Str"");
        BufferedReader reader=new BufferedReader(new InputStreamReader(jarFile.getInputStream(element)));
        mainClass=reader.readLine().substring(12);
      }
      if (mainClass != null) {
        Class<?> clazz=Class.forName(mainClass,true,loader);
        if (clazz != null) {
          Class<? extends AbilityLoadable> loadableClass=clazz.asSubclass(classType);
          Constructor<? extends AbilityLoadable> ctor=loadableClass.getConstructor(ctorParams);
          T loadable=(T)ctor.newInstance(paramTypes);
          LoadResult result=loadable.init();
          if (result.getResult().equals(Result.SUCCESS)) {
            loadables.add(loadable);
            AbilityLoadEvent<T> event=new AbilityLoadEvent<T>(plugin,loadable,jarFile);
            plugin.getServer().getPluginManager().callEvent(event);
            continue;
          }
          String reason=result.getReason();
          if (reason != null && !reason.isEmpty()) {
            getLogger().log(Level.INFO,""String_Node_Str"" + file.getName() + ""String_Node_Str""+ reason);
          }
        }
 else {
          jarFile.close();
          throw new ClassNotFoundException();
        }
      }
 else {
        jarFile.close();
        throw new ClassNotFoundException();
      }
    }
 catch (    ClassCastException e) {
      e.printStackTrace();
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getPath() + ""String_Node_Str"");
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
catch (    ClassNotFoundException e) {
      e.printStackTrace();
      getLogger().log(Level.WARNING,""String_Node_Str"");
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
catch (    Exception e) {
      e.printStackTrace();
      getLogger().log(Level.WARNING,""String_Node_Str"");
      getLogger().log(Level.WARNING,""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
  }
  return loadables;
}",0.9807102148180622
134188,"public static void progressAll(){
  for (  Player player : instances.keySet())   instances.get(player).progress();
  for (  TempBlock block : frozenblocks.keySet()) {
    Player player=frozenblocks.get(block);
    if (block.getBlock().getType() != Material.ICE) {
      frozenblocks.remove(block);
      continue;
    }
    if (block.getBlock().getWorld() != player.getWorld()) {
      thaw(block);
      continue;
    }
    if (block.getLocation().distance(player.getLocation()) > instances.get(player).range || !Methods.canBend(player.getName(),""String_Node_Str"")) {
      thaw(block);
    }
  }
}","public static void progressAll(){
  for (  Player player : instances.keySet())   instances.get(player).progress();
  for (  TempBlock block : frozenblocks.keySet()) {
    Player player=frozenblocks.get(block);
    if (block.getBlock().getType() != Material.ICE) {
      frozenblocks.remove(block);
      continue;
    }
    if (block.getBlock().getWorld() != player.getWorld()) {
      thaw(block);
      continue;
    }
    if (block.getLocation().distance(player.getLocation()) > RANGE || !Methods.canBend(player.getName(),""String_Node_Str"")) {
      thaw(block);
    }
  }
}",0.9727891156462584
134189,"public Lightning(Player player){
  this.player=player;
  bplayer=Methods.getBendingPlayer(player.getName());
  charged=false;
  hitWater=false;
  hitIce=false;
  time=System.currentTimeMillis();
  range=Methods.getFirebendingDayAugment(RANGE,player.getWorld());
  subArcChance=Methods.getFirebendingDayAugment(SUB_ARC_CHANCE,player.getWorld());
  damage=Methods.getFirebendingDayAugment(DAMAGE,player.getWorld());
  chainArcs=Methods.getFirebendingDayAugment(MAX_CHAIN_ARCS,player.getWorld());
  chainArcChance=Methods.getFirebendingDayAugment(CHAIN_ARC_CHANCE,player.getWorld());
  chainRange=Methods.getFirebendingDayAugment(CHAIN_ARC_RANGE,player.getWorld());
  waterRange=Methods.getFirebendingDayAugment(WATER_ARC_RANGE,player.getWorld());
  stunChance=Methods.getFirebendingDayAugment(STUN_CHANCE,player.getWorld());
  stunDuration=Methods.getFirebendingDayAugment(STUN_DURATION,player.getWorld());
  chargeTime=CHARGETIME;
  cooldown=COOLDOWN;
  if (AvatarState.isAvatarState(player)) {
    range=AvatarState.getValue(range);
    chargeTime=0;
    cooldown=0;
    subArcChance=AvatarState.getValue(subArcChance);
    damage=AvatarState.getValue(damage);
    chainArcs=AvatarState.getValue(chainArcs);
    chainArcChance=AvatarState.getValue(chainArcChance);
    chainRange=AvatarState.getValue(chainRange);
    waterRange=AvatarState.getValue(waterRange);
    stunChance=AvatarState.getValue(stunChance);
    stunDuration=AvatarState.getValue(stunDuration);
  }
 else   if (RPGMethods.isSozinsComet(player.getWorld())) {
    chargeTime=0;
    cooldown=0;
  }
  instances.add(this);
}","public Lightning(Player player){
  this.player=player;
  bplayer=Methods.getBendingPlayer(player.getName());
  charged=false;
  hitWater=false;
  hitIce=false;
  time=System.currentTimeMillis();
  range=Methods.getFirebendingDayAugment(RANGE,player.getWorld());
  subArcChance=Methods.getFirebendingDayAugment(SUB_ARC_CHANCE,player.getWorld());
  damage=Methods.getFirebendingDayAugment(DAMAGE,player.getWorld());
  chainArcs=Methods.getFirebendingDayAugment(MAX_CHAIN_ARCS,player.getWorld());
  chainArcChance=Methods.getFirebendingDayAugment(CHAIN_ARC_CHANCE,player.getWorld());
  chainRange=Methods.getFirebendingDayAugment(CHAIN_ARC_RANGE,player.getWorld());
  waterRange=Methods.getFirebendingDayAugment(WATER_ARC_RANGE,player.getWorld());
  stunChance=Methods.getFirebendingDayAugment(STUN_CHANCE,player.getWorld());
  stunDuration=Methods.getFirebendingDayAugment(STUN_DURATION,player.getWorld());
  chargeTime=CHARGETIME;
  cooldown=COOLDOWN;
  if (AvatarState.isAvatarState(player)) {
    range=AvatarState.getValue(range);
    chargeTime=0;
    cooldown=0;
    subArcChance=AvatarState.getValue(subArcChance);
    damage=AvatarState.getValue(damage);
    chainArcs=AvatarState.getValue(chainArcs);
    chainArcChance=AvatarState.getValue(chainArcChance);
    chainRange=AvatarState.getValue(chainRange);
    waterRange=AvatarState.getValue(waterRange);
    stunChance=AvatarState.getValue(stunChance);
    stunDuration=AvatarState.getValue(stunDuration);
  }
  instances.add(this);
}",0.9542653259811872
134190,"public void progress(){
  if (!player.isOnline() || player.isDead()) {
    remove();
    return;
  }
  if (!Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    return;
  }
  if (target != null) {
    if ((target instanceof Player && !((Player)target).isOnline()) || target.isDead()) {
      remove();
      return;
    }
  }
  if (!player.isSneaking()) {
    isControlling=false;
    magnetized=false;
  }
  if (magnetized) {
    if (Methods.getEntitiesAroundPoint(player.getLocation(),magnetRange).size() == 0) {
      remove();
      return;
    }
    for (    Entity e : Methods.getEntitiesAroundPoint(player.getLocation(),magnetRange)) {
      Vector v=Methods.getDirection(e.getLocation(),player.getLocation());
      if (e instanceof Player && player.hasPermission(""String_Node_Str"") && player.getInventory().getItemInHand().getType() == Material.IRON_INGOT && player.getInventory().getItemInHand().getItemMeta().getDisplayName().equalsIgnoreCase(""String_Node_Str"")) {
        Player p=(Player)e;
        if (p.getEntityId() == player.getEntityId())         continue;
        ItemStack[] inventory=p.getInventory().getContents();
        for (        ItemStack is : inventory) {
          if (is == null)           continue;
          if (Arrays.asList(metalItems).contains(is.getType())) {
            p.getWorld().dropItem(p.getLocation(),is);
            is.setType(Material.AIR);
            is.setAmount(0);
          }
        }
        p.getInventory().setContents(inventory);
        ItemStack[] armor=p.getInventory().getArmorContents();
        for (        ItemStack is : armor) {
          if (Arrays.asList(metalItems).contains(is.getType())) {
            p.getWorld().dropItem(p.getLocation(),is);
            is.setType(Material.AIR);
            ;
          }
        }
        p.getInventory().setArmorContents(armor);
        if (Arrays.asList(metalItems).contains(p.getInventory().getItemInHand().getType())) {
          p.getWorld().dropItem(p.getLocation(),p.getEquipment().getItemInHand());
          p.getEquipment().setItemInHand(new ItemStack(Material.AIR,1));
        }
      }
      if ((e instanceof Zombie || e instanceof Skeleton) && player.hasPermission(""String_Node_Str"") && player.getInventory().getItemInHand().getType() == Material.IRON_INGOT && player.getInventory().getItemInHand().getItemMeta().getDisplayName().equalsIgnoreCase(""String_Node_Str"")) {
        LivingEntity le=(LivingEntity)e;
        ItemStack[] armor=le.getEquipment().getArmorContents();
        for (        ItemStack is : armor) {
          if (Arrays.asList(metalItems).contains(is.getType())) {
            le.getWorld().dropItem(le.getLocation(),is);
            is.setType(Material.AIR);
          }
        }
        le.getEquipment().setArmorContents(armor);
        if (Arrays.asList(metalItems).contains(le.getEquipment().getItemInHand().getType())) {
          le.getWorld().dropItem(le.getLocation(),le.getEquipment().getItemInHand());
          le.getEquipment().setItemInHand(new ItemStack(Material.AIR,1));
        }
      }
      if (e instanceof Item) {
        Item iron=(Item)e;
        if (Arrays.asList(metalItems).contains(iron.getItemStack().getType())) {
          iron.setVelocity(v.normalize().multiply(magnetPower));
        }
      }
    }
  }
  if (isBeingWorn && System.currentTimeMillis() > startTime + armorTime) {
    remove();
    return;
  }
  if (isControlling && player.isSneaking()) {
    if (metalclips == 1) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),player.getLocation());
      if (distance > .5)       target.setVelocity(v.normalize().multiply(0.2));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips == 2) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),Methods.getTargetedLocation(player,10));
      if (distance > 1.2)       target.setVelocity(v.normalize().multiply(0.2));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips >= 3) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(oldLocation,Methods.getTargetedLocation(player,10));
      if (distance > 1.2)       target.setVelocity(v.normalize().multiply(.5));
 else       target.setVelocity(new Vector(0,0,0));
      target.setFallDistance(0);
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips == 4) {
      if (System.currentTimeMillis() > time + crushInterval) {
        time=System.currentTimeMillis();
        Methods.damageEntity(player,target,0);
        target.setHealth((target.getHealth() - crushDamage < 0) ? 0 : target.getHealth() - crushDamage);
      }
    }
  }
  for (int i=0; i < trackedIngots.size(); i++) {
    Item ii=trackedIngots.get(i);
    if (ii.isOnGround()) {
      trackedIngots.remove(i);
      continue;
    }
    if (ii.getItemStack().getType() == Material.IRON_INGOT) {
      if (Methods.getEntitiesAroundPoint(ii.getLocation(),2).size() == 0) {
        remove();
        return;
      }
      for (      Entity e : Methods.getEntitiesAroundPoint(ii.getLocation(),2)) {
        if (e instanceof LivingEntity && e.getEntityId() != player.getEntityId()) {
          if (e instanceof Player || e instanceof Zombie || e instanceof Skeleton) {
            if (target == null)             target=(LivingEntity)e;
            formArmor();
          }
 else {
            Methods.damageEntity(player,e,5);
            ii.getWorld().dropItem(ii.getLocation(),ii.getItemStack());
            remove();
          }
          ii.remove();
        }
      }
    }
  }
  removeDeadIngots();
}","public void progress(){
  if (!player.isOnline() || player.isDead()) {
    remove();
    return;
  }
  if (Methods.getBoundAbility(player) == null || !Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove();
    return;
  }
  if (target != null) {
    if ((target instanceof Player && !((Player)target).isOnline()) || target.isDead()) {
      remove();
      return;
    }
  }
  if (!player.isSneaking()) {
    isControlling=false;
    magnetized=false;
  }
  if (magnetized) {
    if (Methods.getEntitiesAroundPoint(player.getLocation(),magnetRange).size() == 0) {
      remove();
      return;
    }
    for (    Entity e : Methods.getEntitiesAroundPoint(player.getLocation(),magnetRange)) {
      Vector v=Methods.getDirection(e.getLocation(),player.getLocation());
      if (e instanceof Player && player.hasPermission(""String_Node_Str"") && player.getInventory().getItemInHand().getType() == Material.IRON_INGOT && player.getInventory().getItemInHand().getItemMeta().getDisplayName().equalsIgnoreCase(""String_Node_Str"")) {
        Player p=(Player)e;
        if (p.getEntityId() == player.getEntityId())         continue;
        ItemStack[] inventory=p.getInventory().getContents();
        for (        ItemStack is : inventory) {
          if (is == null)           continue;
          if (Arrays.asList(metalItems).contains(is.getType())) {
            p.getWorld().dropItem(p.getLocation(),is);
            is.setType(Material.AIR);
            is.setAmount(0);
          }
        }
        p.getInventory().setContents(inventory);
        ItemStack[] armor=p.getInventory().getArmorContents();
        for (        ItemStack is : armor) {
          if (Arrays.asList(metalItems).contains(is.getType())) {
            p.getWorld().dropItem(p.getLocation(),is);
            is.setType(Material.AIR);
            ;
          }
        }
        p.getInventory().setArmorContents(armor);
        if (Arrays.asList(metalItems).contains(p.getInventory().getItemInHand().getType())) {
          p.getWorld().dropItem(p.getLocation(),p.getEquipment().getItemInHand());
          p.getEquipment().setItemInHand(new ItemStack(Material.AIR,1));
        }
      }
      if ((e instanceof Zombie || e instanceof Skeleton) && player.hasPermission(""String_Node_Str"") && player.getInventory().getItemInHand().getType() == Material.IRON_INGOT && player.getInventory().getItemInHand().getItemMeta().getDisplayName().equalsIgnoreCase(""String_Node_Str"")) {
        LivingEntity le=(LivingEntity)e;
        ItemStack[] armor=le.getEquipment().getArmorContents();
        for (        ItemStack is : armor) {
          if (Arrays.asList(metalItems).contains(is.getType())) {
            le.getWorld().dropItem(le.getLocation(),is);
            is.setType(Material.AIR);
          }
        }
        le.getEquipment().setArmorContents(armor);
        if (Arrays.asList(metalItems).contains(le.getEquipment().getItemInHand().getType())) {
          le.getWorld().dropItem(le.getLocation(),le.getEquipment().getItemInHand());
          le.getEquipment().setItemInHand(new ItemStack(Material.AIR,1));
        }
      }
      if (e instanceof Item) {
        Item iron=(Item)e;
        if (Arrays.asList(metalItems).contains(iron.getItemStack().getType())) {
          iron.setVelocity(v.normalize().multiply(magnetPower));
        }
      }
    }
  }
  if (isBeingWorn && System.currentTimeMillis() > startTime + armorTime) {
    remove();
    return;
  }
  if (isControlling && player.isSneaking()) {
    if (metalclips == 1) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),player.getLocation());
      if (distance > .5)       target.setVelocity(v.normalize().multiply(0.2));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips == 2) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),Methods.getTargetedLocation(player,10));
      if (distance > 1.2)       target.setVelocity(v.normalize().multiply(0.2));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips >= 3) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(oldLocation,Methods.getTargetedLocation(player,10));
      if (distance > 1.2)       target.setVelocity(v.normalize().multiply(.5));
 else       target.setVelocity(new Vector(0,0,0));
      target.setFallDistance(0);
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips == 4) {
      if (System.currentTimeMillis() > time + crushInterval) {
        time=System.currentTimeMillis();
        Methods.damageEntity(player,target,0);
        target.setHealth((target.getHealth() - crushDamage < 0) ? 0 : target.getHealth() - crushDamage);
      }
    }
  }
  for (int i=0; i < trackedIngots.size(); i++) {
    Item ii=trackedIngots.get(i);
    if (ii.isOnGround()) {
      trackedIngots.remove(i);
      continue;
    }
    if (ii.getItemStack().getType() == Material.IRON_INGOT) {
      if (Methods.getEntitiesAroundPoint(ii.getLocation(),2).size() == 0) {
        remove();
        return;
      }
      for (      Entity e : Methods.getEntitiesAroundPoint(ii.getLocation(),2)) {
        if (e instanceof LivingEntity && e.getEntityId() != player.getEntityId()) {
          if (e instanceof Player || e instanceof Zombie || e instanceof Skeleton) {
            if (target == null)             target=(LivingEntity)e;
            formArmor();
          }
 else {
            Methods.damageEntity(player,e,5);
            ii.getWorld().dropItem(ii.getLocation(),ii.getItemStack());
            remove();
          }
          ii.remove();
        }
      }
    }
  }
  removeDeadIngots();
}",0.9965117222357428
134191,"public static void bindPreset(Player player,String name){
  BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
  if (bPlayer == null)   return;
  if (!presets.containsKey(player.getUniqueId()))   return;
  for (  Preset preset : presets.get(player.getUniqueId())) {
    if (preset.name.equalsIgnoreCase(name)) {
      bPlayer.setAbilities(preset.abilities);
    }
  }
}","public static void bindPreset(Player player,String name){
  BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
  if (bPlayer == null)   return;
  if (!presets.containsKey(player.getUniqueId()))   return;
  for (  Preset preset : presets.get(player.getUniqueId())) {
    if (preset.name.equalsIgnoreCase(name)) {
      bPlayer.setAbilities((HashMap<Integer,String>)preset.abilities.clone());
    }
  }
}",0.9188514357053684
134192,"public static void configCheck(){
  FileConfiguration config=ProjectKorra.plugin.getConfig();
  ArrayList<String> earthbendable=new ArrayList<String>();
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  ArrayList<String> metals=new ArrayList<String>();
  metals.add(""String_Node_Str"");
  metals.add(""String_Node_Str"");
  metals.add(""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.0);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.0);
  config.addDefault(""String_Node_Str"",500);
  config.addDefault(""String_Node_Str"",62);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",50);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",300000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",earthbendable);
  config.addDefault(""String_Node_Str"",metals);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  ArrayList<String> disabledWorlds=new ArrayList<String>();
  disabledWorlds.add(""String_Node_Str"");
  disabledWorlds.add(""String_Node_Str"");
  config.addDefault(""String_Node_Str"",disabledWorlds);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7200000);
  config.addDefault(""String_Node_Str"",480000);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",1750);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",.675);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",16);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",0.5);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",0.35);
  config.addDefault(""String_Node_Str"",16);
  config.addDefault(""String_Node_Str"",8);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",0.5);
  config.addDefault(""String_Node_Str"",40);
  config.addDefault(""String_Node_Str"",4000);
  config.addDefault(""String_Node_Str"",14);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",1.4);
  config.addDefault(""String_Node_Str"",14);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",5000);
  config.addDefault(""String_Node_Str"",0.7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",750);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",0.7);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",50);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",0.2);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",180000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",35);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",1.2);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",2.5);
  config.addDefault(""String_Node_Str"",12);
  config.addDefault(""String_Node_Str"",30);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",5000);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",12);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",8);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",17500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",35);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",0.25);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",30);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",40);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",16000);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",500);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",7000);
  config.addDefault(""String_Node_Str"",20000);
  config.addDefault(""String_Node_Str"",10.0);
  config.addDefault(""String_Node_Str"",8.0);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",5.0);
  config.addDefault(""String_Node_Str"",0.05);
  config.addDefault(""String_Node_Str"",0.10);
  config.addDefault(""String_Node_Str"",0.1);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",0);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",0.33);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",1400);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",9);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15000);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",1.0);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",0.7);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",3500);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",5000);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",7500);
  config.addDefault(""String_Node_Str"",500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",7.0);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",3.2);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",20.0);
  config.addDefault(""String_Node_Str"",4.0);
  config.addDefault(""String_Node_Str"",0.55);
  config.addDefault(""String_Node_Str"",200);
  config.addDefault(""String_Node_Str"",1.2);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",1.1);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",0.5);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15000);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",15000);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",50000);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3306);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",false);
  config.options().copyDefaults(true);
  plugin.saveConfig();
}","public static void configCheck(){
  FileConfiguration config=ProjectKorra.plugin.getConfig();
  ArrayList<String> earthbendable=new ArrayList<String>();
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  earthbendable.add(""String_Node_Str"");
  ArrayList<String> metals=new ArrayList<String>();
  metals.add(""String_Node_Str"");
  metals.add(""String_Node_Str"");
  metals.add(""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.0);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.0);
  config.addDefault(""String_Node_Str"",500);
  config.addDefault(""String_Node_Str"",62);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",50);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",300000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",earthbendable);
  config.addDefault(""String_Node_Str"",metals);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  ArrayList<String> disabledWorlds=new ArrayList<String>();
  disabledWorlds.add(""String_Node_Str"");
  disabledWorlds.add(""String_Node_Str"");
  config.addDefault(""String_Node_Str"",disabledWorlds);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7200000);
  config.addDefault(""String_Node_Str"",480000);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",1750);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",.675);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",16);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",0.5);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",0.35);
  config.addDefault(""String_Node_Str"",16);
  config.addDefault(""String_Node_Str"",8);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",0.5);
  config.addDefault(""String_Node_Str"",40);
  config.addDefault(""String_Node_Str"",4000);
  config.addDefault(""String_Node_Str"",14);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",1.4);
  config.addDefault(""String_Node_Str"",14);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",3.5);
  config.addDefault(""String_Node_Str"",5000);
  config.addDefault(""String_Node_Str"",0.7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",750);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",0.7);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",50);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",0.2);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",180000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",35);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",1.2);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",2.5);
  config.addDefault(""String_Node_Str"",12);
  config.addDefault(""String_Node_Str"",30);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",5000);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",12);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",8);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",17500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",35);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",0.25);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",30);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",40);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",16000);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",500);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",7000);
  config.addDefault(""String_Node_Str"",20000);
  config.addDefault(""String_Node_Str"",10.0);
  config.addDefault(""String_Node_Str"",8.0);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",5.0);
  config.addDefault(""String_Node_Str"",0.05);
  config.addDefault(""String_Node_Str"",0.10);
  config.addDefault(""String_Node_Str"",0.1);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",0);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",0.33);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",6);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",9);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15000);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",1.0);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",0.3);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",false);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",0.7);
  config.addDefault(""String_Node_Str"",1500);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",1.5);
  config.addDefault(""String_Node_Str"",1000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",20);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",5);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",3500);
  config.addDefault(""String_Node_Str"",10);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",5000);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",7500);
  config.addDefault(""String_Node_Str"",500);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",7.0);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",7);
  config.addDefault(""String_Node_Str"",3.0);
  config.addDefault(""String_Node_Str"",3.2);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",20.0);
  config.addDefault(""String_Node_Str"",4.0);
  config.addDefault(""String_Node_Str"",0.55);
  config.addDefault(""String_Node_Str"",200);
  config.addDefault(""String_Node_Str"",1.2);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",1.1);
  config.addDefault(""String_Node_Str"",3);
  config.addDefault(""String_Node_Str"",6000);
  config.addDefault(""String_Node_Str"",0.5);
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",2500);
  config.addDefault(""String_Node_Str"",25);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",10000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  config.addDefault(""String_Node_Str"",15000);
  config.addDefault(""String_Node_Str"",2000);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",1);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",15000);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",true);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",50000);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",15);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",3306);
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",""String_Node_Str"");
  config.addDefault(""String_Node_Str"",false);
  config.options().copyDefaults(true);
  plugin.saveConfig();
}",0.9981047249647392
134193,"public static boolean isControlled(Player player){
  for (  Player p : instances.keySet()) {
    if (instances.get(p).getTarget().getEntityId() == player.getEntityId()) {
      return true;
    }
  }
  return false;
}","public static boolean isControlled(Player player){
  for (  Player p : instances.keySet()) {
    if (instances.get(p).getTarget() != null && instances.get(p).getTarget().getEntityId() == player.getEntityId()) {
      return true;
    }
  }
  return false;
}",0.9156118143459916
134194,"public void progress(){
  if (!player.isOnline() || player.isDead()) {
    remove();
    return;
  }
  if (target != null) {
    if ((target instanceof Player && !((Player)target).isOnline()) || target.isDead()) {
      remove();
      return;
    }
  }
  if (!player.isSneaking()) {
    isControlling=false;
  }
  if (isBeingWorn && System.currentTimeMillis() > startTime + armorTime) {
    remove();
    return;
  }
  if (isControlling && player.isSneaking()) {
    if (metalclips >= 1) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),player.getLocation());
      if (distance > 2.5)       target.setVelocity(v.normalize().multiply(0.1));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips >= 2) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),player.getLocation());
      if (distance > 2.5)       target.setVelocity(v.normalize().multiply(0.2));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips >= 3) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      double dx=loc.getX() - oldLocation.getX();
      double dy=loc.getY() - oldLocation.getY();
      double dz=loc.getZ() - oldLocation.getZ();
      Vector v=new Vector(dx,dy,dz);
      if (distance > .5)       target.setVelocity(v.normalize().multiply(.5));
 else       target.setVelocity(new Vector(0,0,0));
      target.setFallDistance(0);
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips == 4) {
      if (System.currentTimeMillis() > time + crushInterval) {
        time=System.currentTimeMillis();
        Methods.damageEntity(player,target,crushDamage);
      }
    }
  }
  for (int i=0; i < trackedIngots.size(); i++) {
    Item ii=trackedIngots.get(i);
    if (ii.getItemStack().getType() == Material.IRON_INGOT) {
      for (      Entity e : Methods.getEntitiesAroundPoint(ii.getLocation(),2)) {
        if (e instanceof LivingEntity && e.getEntityId() != player.getEntityId()) {
          Methods.damageEntity(player,e,0.5);
          if (e instanceof Player || e instanceof Zombie || e instanceof Skeleton) {
            if (target == null)             target=(LivingEntity)e;
            formArmor();
          }
 else {
            ii.getWorld().dropItem(ii.getLocation(),ii.getItemStack());
            remove();
          }
          ii.remove();
        }
      }
    }
  }
  removeDeadIngots();
}","public void progress(){
  if (!player.isOnline() || player.isDead()) {
    remove();
    return;
  }
  if (target != null) {
    if ((target instanceof Player && !((Player)target).isOnline()) || target.isDead()) {
      remove();
      return;
    }
  }
  if (!player.isSneaking()) {
    isControlling=false;
  }
  if (isBeingWorn && System.currentTimeMillis() > startTime + armorTime) {
    remove();
    return;
  }
  if (isControlling && player.isSneaking()) {
    if (metalclips >= 1) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),player.getLocation());
      if (distance > .5)       target.setVelocity(v.normalize().multiply(0.1));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips >= 2) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      Vector v=Methods.getDirection(target.getLocation(),player.getLocation());
      if (distance > .5)       target.setVelocity(v.normalize().multiply(0.2));
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips >= 3) {
      Location oldLocation=target.getLocation();
      Location loc=Methods.getTargetedLocation(player,(int)player.getLocation().distance(oldLocation));
      double distance=loc.distance(oldLocation);
      double dx=loc.getX() - oldLocation.getX();
      double dy=loc.getY() - oldLocation.getY();
      double dz=loc.getZ() - oldLocation.getZ();
      Vector v=new Vector(dx,dy,dz);
      if (distance > .5)       target.setVelocity(v.normalize().multiply(.5));
 else       target.setVelocity(new Vector(0,0,0));
      target.setFallDistance(0);
      Methods.breakBreathbendingHold(target);
    }
    if (metalclips == 4) {
      if (System.currentTimeMillis() > time + crushInterval) {
        time=System.currentTimeMillis();
        Methods.damageEntity(player,target,crushDamage);
      }
    }
  }
  for (int i=0; i < trackedIngots.size(); i++) {
    Item ii=trackedIngots.get(i);
    if (ii.getItemStack().getType() == Material.IRON_INGOT) {
      for (      Entity e : Methods.getEntitiesAroundPoint(ii.getLocation(),2)) {
        if (e instanceof LivingEntity && e.getEntityId() != player.getEntityId()) {
          Methods.damageEntity(player,e,0.5);
          if (e instanceof Player || e instanceof Zombie || e instanceof Skeleton) {
            if (target == null)             target=(LivingEntity)e;
            formArmor();
          }
 else {
            ii.getWorld().dropItem(ii.getLocation(),ii.getItemStack());
            remove();
          }
          ii.remove();
        }
      }
    }
  }
  removeDeadIngots();
}",0.9996570644718792
134195,"public void progress(){
  if (shiftCounter > 0 && type == AbilityType.SHIFT) {
    remove();
    return;
  }
 else   if (removing)   return;
 else   if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  double removeDelay=AvatarState.isAvatarState(player) ? AS_SHIFT_REMOVE_DELAY : SHIFT_REMOVE_DELAY;
  if (System.currentTimeMillis() - time > removeDelay) {
    remove();
    return;
  }
  if (type == AbilityType.SHIFT) {
    if (!player.isSneaking() && !removing) {
      if (affectedBlocks.size() > 0) {
        removeOnDelay();
        removing=true;
        long cooldown=AvatarState.isAvatarState(player) ? AS_SHIFT_COOLDOWN : SHIFT_COOLDOWN;
        bplayer.addCooldown(""String_Node_Str"",cooldown);
      }
 else       remove();
      return;
    }
    String ability=Methods.getBoundAbility(player);
    if (ability == null) {
      remove();
      return;
    }
 else     if (!ability.equalsIgnoreCase(""String_Node_Str"") || !Methods.canBend(player.getName(),""String_Node_Str"")) {
      remove();
      return;
    }
 else     if (origin == null) {
      origin=player.getLocation().clone().add(0,-1,0);
      if (!Methods.isEarthbendable(player,origin.getBlock()) && origin.getBlock().getType() != Material.GLOWSTONE) {
        remove();
        return;
      }
    }
    double platformRadius=AvatarState.isAvatarState(player) ? AS_SHIFT_PLATFORM_RADIUS : SHIFT_PLATFORM_RADIUS;
    double maxRadius=AvatarState.isAvatarState(player) ? AS_SHIFT_MAX_RADIUS : SHIFT_MAX_RADIUS;
    double flowSpeed=AvatarState.isAvatarState(player) ? AS_SHIFT_FLOW_SPEED : SHIFT_FLOW_SPEED;
    for (double x=-currentRadius; x <= currentRadius + PARTICLE_OFFSET; x++)     for (double z=-currentRadius; z < currentRadius + PARTICLE_OFFSET; z++) {
      Location loc=origin.clone().add(x,0,z);
      Block block=getTopBlock(loc,UPWARD_FLOW,DOWNWARD_FLOW);
      if (block == null)       continue;
      double dSquared=distanceSquaredXZ(block.getLocation(),origin);
      if (!isLava(block) && dSquared > Math.pow(platformRadius,2)) {
        if (dSquared < Math.pow(currentRadius,2) && !Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
          if (dSquared < platformRadius * 4 || getAdjacentLavaBlocks(block.getLocation()).size() > 0)           createLava(block);
        }
 else         if (Math.random() < PARTICLE_DENSITY && dSquared < Math.pow(currentRadius + PARTICLE_OFFSET,2) && currentRadius + PARTICLE_OFFSET < maxRadius)         ParticleEffect.LAVA.display(loc,(float)Math.random(),(float)Math.random(),(float)Math.random(),0,1);
      }
    }
    currentRadius+=flowSpeed;
    if (currentRadius > maxRadius)     currentRadius=maxRadius;
  }
 else   if (type == AbilityType.CLICK) {
    long curTime=System.currentTimeMillis() - time;
    double delay;
    if (AvatarState.isAvatarState(player))     delay=makeLava ? AS_CLICK_LAVA_DELAY : AS_CLICK_LAND_DELAY;
 else     delay=makeLava ? CLICK_LAVA_DELAY : CLICK_LAND_DELAY;
    if (makeLava && curTime > CLICK_LAVA_CLEANUP_DELAY) {
      remove();
      return;
    }
 else     if (!makeLava && curTime > CLICK_LAND_CLEANUP_DELAY) {
      remove();
      return;
    }
 else     if (!makeLava && curTime < delay)     return;
 else     if (makeLava && curTime < delay) {
      double radius=AvatarState.isAvatarState(player) ? AS_CLICK_RADIUS : CLICK_LAVA_RADIUS;
      for (double x=-radius; x <= radius; x++)       for (double z=-radius; z <= radius; z++) {
        Location loc=origin.clone().add(x,0,z);
        Block tempBlock=getTopBlock(loc,UPWARD_FLOW,DOWNWARD_FLOW);
        if (tempBlock != null && !isLava(tempBlock) && Math.random() < PARTICLE_DENSITY && tempBlock.getLocation().distanceSquared(origin) <= Math.pow(radius,2))         ParticleEffect.LAVA.display(loc,0,0,0,0,1);
      }
      return;
    }
    if (!clickIsFinished) {
      clickIsFinished=true;
      double radius=makeLava ? CLICK_LAVA_RADIUS : CLICK_LAND_RADIUS;
      radius=AvatarState.isAvatarState(player) ? AS_CLICK_RADIUS : radius;
      for (double x=-radius; x <= radius; x++)       for (double z=-radius; z <= radius; z++) {
        Location loc=origin.clone().add(x,0,z);
        Block tempBlock=getTopBlock(loc,UPWARD_FLOW,DOWNWARD_FLOW);
        if (tempBlock == null)         continue;
        double dSquared=distanceSquaredXZ(tempBlock.getLocation(),origin);
        if (dSquared < Math.pow(radius,2) && !Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",loc)) {
          if (makeLava && !isLava(tempBlock)) {
            clickIsFinished=false;
            if (Math.random() < LAVA_CREATE_SPEED)             createLava(tempBlock);
 else             ParticleEffect.LAVA.display(loc,0,0,0,0,1);
          }
 else           if (!makeLava && isLava(tempBlock)) {
            clickIsFinished=false;
            if (Math.random() < LAND_CREATE_SPEED)             removeLava(tempBlock);
          }
        }
      }
      return;
    }
  }
}","public void progress(){
  if (shiftCounter > 0 && type == AbilityType.SHIFT) {
    remove();
    return;
  }
 else   if (removing)   return;
 else   if (player.isDead() || !player.isOnline()) {
    remove();
    return;
  }
  if (type == AbilityType.SHIFT) {
    double removeDelay=AvatarState.isAvatarState(player) ? AS_SHIFT_REMOVE_DELAY : SHIFT_REMOVE_DELAY;
    if (System.currentTimeMillis() - time > removeDelay) {
      remove();
      return;
    }
    if (!player.isSneaking() && !removing) {
      if (affectedBlocks.size() > 0) {
        removeOnDelay();
        removing=true;
        long cooldown=AvatarState.isAvatarState(player) ? AS_SHIFT_COOLDOWN : SHIFT_COOLDOWN;
        bplayer.addCooldown(""String_Node_Str"",cooldown);
      }
 else       remove();
      return;
    }
    String ability=Methods.getBoundAbility(player);
    if (ability == null) {
      remove();
      return;
    }
 else     if (!ability.equalsIgnoreCase(""String_Node_Str"") || !Methods.canBend(player.getName(),""String_Node_Str"")) {
      remove();
      return;
    }
 else     if (origin == null) {
      origin=player.getLocation().clone().add(0,-1,0);
      if (!Methods.isEarthbendable(player,origin.getBlock()) && origin.getBlock().getType() != Material.GLOWSTONE) {
        remove();
        return;
      }
    }
    double platformRadius=AvatarState.isAvatarState(player) ? AS_SHIFT_PLATFORM_RADIUS : SHIFT_PLATFORM_RADIUS;
    double maxRadius=AvatarState.isAvatarState(player) ? AS_SHIFT_MAX_RADIUS : SHIFT_MAX_RADIUS;
    double flowSpeed=AvatarState.isAvatarState(player) ? AS_SHIFT_FLOW_SPEED : SHIFT_FLOW_SPEED;
    for (double x=-currentRadius; x <= currentRadius + PARTICLE_OFFSET; x++)     for (double z=-currentRadius; z < currentRadius + PARTICLE_OFFSET; z++) {
      Location loc=origin.clone().add(x,0,z);
      Block block=getTopBlock(loc,UPWARD_FLOW,DOWNWARD_FLOW);
      if (block == null)       continue;
      double dSquared=distanceSquaredXZ(block.getLocation(),origin);
      if (!isLava(block) && dSquared > Math.pow(platformRadius,2)) {
        if (dSquared < Math.pow(currentRadius,2) && !Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
          if (dSquared < platformRadius * 4 || getAdjacentLavaBlocks(block.getLocation()).size() > 0)           createLava(block);
        }
 else         if (Math.random() < PARTICLE_DENSITY && dSquared < Math.pow(currentRadius + PARTICLE_OFFSET,2) && currentRadius + PARTICLE_OFFSET < maxRadius)         ParticleEffect.LAVA.display(loc,(float)Math.random(),(float)Math.random(),(float)Math.random(),0,1);
      }
    }
    currentRadius+=flowSpeed;
    if (currentRadius > maxRadius)     currentRadius=maxRadius;
  }
 else   if (type == AbilityType.CLICK) {
    long curTime=System.currentTimeMillis() - time;
    double delay;
    if (AvatarState.isAvatarState(player))     delay=makeLava ? AS_CLICK_LAVA_DELAY : AS_CLICK_LAND_DELAY;
 else     delay=makeLava ? CLICK_LAVA_DELAY : CLICK_LAND_DELAY;
    if (makeLava && curTime > CLICK_LAVA_CLEANUP_DELAY) {
      remove();
      return;
    }
 else     if (!makeLava && curTime > CLICK_LAND_CLEANUP_DELAY) {
      remove();
      return;
    }
 else     if (!makeLava && curTime < delay)     return;
 else     if (makeLava && curTime < delay) {
      double radius=AvatarState.isAvatarState(player) ? AS_CLICK_RADIUS : CLICK_LAVA_RADIUS;
      for (double x=-radius; x <= radius; x++)       for (double z=-radius; z <= radius; z++) {
        Location loc=origin.clone().add(x,0,z);
        Block tempBlock=getTopBlock(loc,UPWARD_FLOW,DOWNWARD_FLOW);
        if (tempBlock != null && !isLava(tempBlock) && Math.random() < PARTICLE_DENSITY && tempBlock.getLocation().distanceSquared(origin) <= Math.pow(radius,2))         ParticleEffect.LAVA.display(loc,0,0,0,0,1);
      }
      return;
    }
    if (!clickIsFinished) {
      clickIsFinished=true;
      double radius=makeLava ? CLICK_LAVA_RADIUS : CLICK_LAND_RADIUS;
      radius=AvatarState.isAvatarState(player) ? AS_CLICK_RADIUS : radius;
      for (double x=-radius; x <= radius; x++)       for (double z=-radius; z <= radius; z++) {
        Location loc=origin.clone().add(x,0,z);
        Block tempBlock=getTopBlock(loc,UPWARD_FLOW,DOWNWARD_FLOW);
        if (tempBlock == null)         continue;
        double dSquared=distanceSquaredXZ(tempBlock.getLocation(),origin);
        if (dSquared < Math.pow(radius,2) && !Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",loc)) {
          if (makeLava && !isLava(tempBlock)) {
            clickIsFinished=false;
            if (Math.random() < LAVA_CREATE_SPEED)             createLava(tempBlock);
 else             ParticleEffect.LAVA.display(loc,0,0,0,0,1);
          }
 else           if (!makeLava && isLava(tempBlock)) {
            clickIsFinished=false;
            if (Math.random() < LAND_CREATE_SPEED)             removeLava(tempBlock);
          }
        }
      }
      return;
    }
  }
}",0.9903206291591048
134196,"private void remove(){
  instances.remove(player);
}","private void remove(){
  instances.remove(player);
  player.setFlying(false);
  player.setAllowFlight(false);
  player.setSprinting(false);
}",0.538860103626943
134197,"public static boolean isRegionProtectedFromBuild(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(location.getWorld()).blockLighter)           return true;
          if (!wg.getGlobalRegionManager().hasBypass(player,location.getWorld()) && !wg.getGlobalRegionManager().get(location.getWorld()).getApplicableRegions(location).allows(DefaultFlag.LIGHTER,wg.wrapPlayer(player)))           return true;
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
        if (!wg.getGlobalRegionManager().get(location.getWorld()).getApplicableRegions(location).allows(DefaultFlag.TNT))         return true;
      }
      if ((!(wg.getGlobalRegionManager().canBuild(player,location)) || !(wg.getGlobalRegionManager().canConstruct(player,location)))) {
        return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_PLACE))       return true;
    }
    if (fcp != null && massivecore != null && respectFactions) {
      if (!FactionsListenerMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false)) {
        return true;
      }
 else {
        return false;
      }
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld world=TownyUniverse.getDataSource().getWorld(location.getWorld().getName());
        worldCoord=new WorldCoord(world.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      String reason=GriefPrevention.instance.allowBuild(player,location);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null)       return true;
    }
  }
  return false;
}","public static boolean isRegionProtectedFromBuild(Player player,String ability,Location loc){
  boolean allowharmless=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectWorldGuard=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectPreciousStones=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectFactions=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectTowny=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectGriefPrevention=plugin.getConfig().getBoolean(""String_Node_Str"");
  boolean respectLWC=plugin.getConfig().getBoolean(""String_Node_Str"");
  Set<String> ignite=AbilityModuleManager.igniteabilities;
  Set<String> explode=AbilityModuleManager.explodeabilities;
  if (ability == null && allowharmless)   return false;
  if (isHarmlessAbility(ability) && allowharmless)   return false;
  PluginManager pm=Bukkit.getPluginManager();
  Plugin wgp=pm.getPlugin(""String_Node_Str"");
  Plugin psp=pm.getPlugin(""String_Node_Str"");
  Plugin fcp=pm.getPlugin(""String_Node_Str"");
  Plugin twnp=pm.getPlugin(""String_Node_Str"");
  Plugin gpp=pm.getPlugin(""String_Node_Str"");
  Plugin massivecore=pm.getPlugin(""String_Node_Str"");
  Plugin lwc=pm.getPlugin(""String_Node_Str"");
  for (  Location location : new Location[]{loc,player.getLocation()}) {
    World world=location.getWorld();
    if (lwc != null && respectLWC) {
      LWCPlugin lwcp=(LWCPlugin)lwc;
      LWC lwc2=lwcp.getLWC();
      Protection protection=lwc2.getProtectionCache().getProtection(location.getBlock());
      if (protection != null) {
        if (!lwc2.canAccessProtection(player,protection)) {
          return true;
        }
      }
    }
    if (wgp != null && respectWorldGuard) {
      WorldGuardPlugin wg=(WorldGuardPlugin)Bukkit.getPluginManager().getPlugin(""String_Node_Str"");
      if (!player.isOnline())       return true;
      if (ignite.contains(ability)) {
        if (!wg.hasPermission(player,""String_Node_Str"")) {
          if (wg.getGlobalStateManager().get(world).blockLighter)           return true;
          if (wg.getDescription().getVersion().startsWith(""String_Node_Str"")) {
            if (!wg.getGlobalRegionManager().hasBypass(player,world) && !wg.getGlobalRegionManager().get(world).getApplicableRegions(location).allows(DefaultFlag.LIGHTER,wg.wrapPlayer(player)))             return true;
          }
 else {
            if (player.hasPermission(""String_Node_Str"" + world.getName()) && wg.getRegionContainer().get(world).getApplicableRegions(location).queryState(wg.wrapPlayer(player),DefaultFlag.LIGHTER).equals(State.DENY))             return true;
          }
        }
      }
      if (explode.contains(ability)) {
        if (wg.getGlobalStateManager().get(location.getWorld()).blockTNTExplosions)         return true;
        if (wg.getDescription().getVersion().startsWith(""String_Node_Str"")) {
          if (!wg.getGlobalRegionManager().get(world).getApplicableRegions(location).allows(DefaultFlag.TNT))           return true;
        }
 else {
          if (wg.getRegionContainer().get(world).getApplicableRegions(location).queryState(null,DefaultFlag.TNT).equals(State.DENY))           return true;
        }
      }
      if (wg.getDescription().getVersion().startsWith(""String_Node_Str"")) {
        if ((!(wg.getGlobalRegionManager().canBuild(player,location)) || !(wg.getGlobalRegionManager().canConstruct(player,location)))) {
          return true;
        }
      }
 else {
        if (!wg.getRegionContainer().createQuery().testBuild(location,player,(StateFlag[])null))         return true;
      }
    }
    if (psp != null && respectPreciousStones) {
      PreciousStones ps=(PreciousStones)psp;
      if (ignite.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_FIRE))         return true;
      }
      if (explode.contains(ability)) {
        if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_EXPLOSIONS))         return true;
      }
      if (ps.getForceFieldManager().hasSourceField(location,FieldFlag.PREVENT_PLACE))       return true;
    }
    if (fcp != null && massivecore != null && respectFactions) {
      if (!FactionsListenerMain.canPlayerBuildAt(player,PS.valueOf(loc.getBlock()),false)) {
        return true;
      }
 else {
        return false;
      }
    }
    if (twnp != null && respectTowny) {
      Towny twn=(Towny)twnp;
      WorldCoord worldCoord;
      try {
        TownyWorld tWorld=TownyUniverse.getDataSource().getWorld(world.getName());
        worldCoord=new WorldCoord(tWorld.getName(),Coord.parseCoord(location));
        boolean bBuild=PlayerCacheUtil.getCachePermission(player,location,3,(byte)0,TownyPermission.ActionType.BUILD);
        if (ignite.contains(ability)) {
        }
        if (explode.contains(ability)) {
        }
        if (!bBuild) {
          PlayerCache cache=twn.getCache(player);
          TownBlockStatus status=cache.getStatus();
          if (((status == TownBlockStatus.ENEMY) && TownyWarConfig.isAllowingAttacks())) {
            try {
              TownyWar.callAttackCellEvent(twn,player,location.getBlock(),worldCoord);
            }
 catch (            Exception e) {
              TownyMessaging.sendErrorMsg(player,e.getMessage());
            }
            return true;
          }
 else           if (status == TownBlockStatus.WARZONE) {
          }
 else {
            return true;
          }
          if ((cache.hasBlockErrMsg()))           TownyMessaging.sendErrorMsg(player,cache.getBlockErrMsg());
        }
      }
 catch (      Exception e1) {
        TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(""String_Node_Str""));
      }
    }
    if (gpp != null && respectGriefPrevention) {
      String reason=GriefPrevention.instance.allowBuild(player,location);
      if (ignite.contains(ability)) {
      }
      if (explode.contains(ability)) {
      }
      if (reason != null)       return true;
    }
  }
  return false;
}",0.90317389360751
134198,"private void throwIce(){
  if (!prepared)   return;
  LivingEntity target=(LivingEntity)Methods.getTargetedEntity(player,range,new ArrayList<Entity>());
  if (target == null) {
    destination=Methods.getTargetedLocation(player,range,Methods.transparentToEarthbending);
  }
 else {
    destination=target.getEyeLocation();
  }
  location=sourceblock.getLocation();
  if (destination.distance(location) < 1)   return;
  firstdestination=location.clone();
  if (destination.getY() - location.getY() > 2) {
    firstdestination.setY(destination.getY() - 1);
  }
 else {
    firstdestination.add(0,2,0);
  }
  destination=Methods.getPointOnLine(firstdestination,destination,range);
  progressing=true;
  settingup=true;
  prepared=false;
  sourceblock.setType(Material.AIR);
  source=new TempBlock(sourceblock,Material.PACKED_ICE,data);
}","private void throwIce(){
  if (!prepared)   return;
  LivingEntity target=(LivingEntity)Methods.getTargetedEntity(player,range,new ArrayList<Entity>());
  if (target == null) {
    destination=Methods.getTargetedLocation(player,range,Methods.transparentToEarthbending);
  }
 else {
    destination=target.getEyeLocation();
  }
  location=sourceblock.getLocation();
  if (destination.distance(location) < 1)   return;
  firstdestination=location.clone();
  if (destination.getY() - location.getY() > 2) {
    firstdestination.setY(destination.getY() - 1);
  }
 else {
    firstdestination.add(0,2,0);
  }
  destination=Methods.getPointOnLine(firstdestination,destination,range);
  progressing=true;
  settingup=true;
  prepared=false;
  new TempBlock(sourceblock,Material.AIR,(byte)0);
  source=new TempBlock(sourceblock,Material.PACKED_ICE,data);
}",0.980975029726516
134199,"public static void revertBlock(Block block,Material defaulttype){
  if (instances.containsKey(block)) {
    instances.get(block).revertBlock();
  }
 else {
    if ((defaulttype == Material.LAVA || defaulttype == Material.STATIONARY_LAVA || defaulttype == Material.AIR) && Methods.isAdjacentToThreeOrMoreSources(block)) {
      block.setType(Material.LAVA);
      block.setData((byte)0x0);
    }
 else     if ((defaulttype == Material.WATER || defaulttype == Material.STATIONARY_WATER || defaulttype == Material.AIR) && Methods.isAdjacentToThreeOrMoreSources(block)) {
      block.setType(Material.WATER);
      block.setData((byte)0x0);
    }
 else {
      block.setType(defaulttype);
    }
  }
}","public static void revertBlock(Block block,Material defaulttype){
  if (instances.containsKey(block)) {
    instances.get(block).revertBlock();
  }
 else {
    if ((defaulttype == Material.LAVA || defaulttype == Material.STATIONARY_LAVA) && Methods.isAdjacentToThreeOrMoreSources(block)) {
      block.setType(Material.LAVA);
      block.setData((byte)0x0);
    }
 else     if ((defaulttype == Material.WATER || defaulttype == Material.STATIONARY_WATER) && Methods.isAdjacentToThreeOrMoreSources(block)) {
      block.setType(Material.WATER);
      block.setData((byte)0x0);
    }
 else {
      block.setType(defaulttype);
    }
  }
}",0.9533834586466166
134200,"public void startPunch(Player p){
  if (numpunches >= punches)   instances.remove(p);
  if (target instanceof LivingEntity && target != null) {
    LivingEntity lt=(LivingEntity)target;
    Methods.damageEntity(p,target,damage);
    if (target instanceof Player)     if (ChiPassive.willChiBlock((Player)target)) {
      ChiPassive.blockChi((Player)target);
    }
    if (Suffocate.isChannelingSphere((Player)target)) {
      Suffocate.remove((Player)target);
    }
    lt.setNoDamageTicks(0);
  }
  cooldowns.put(p.getName(),System.currentTimeMillis());
  swing(p);
  numpunches++;
}","public void startPunch(Player p){
  if (numpunches >= punches)   instances.remove(p);
  if (target instanceof LivingEntity && target != null) {
    LivingEntity lt=(LivingEntity)target;
    Methods.damageEntity(p,target,damage);
    if (target instanceof Player) {
      if (ChiPassive.willChiBlock((Player)target)) {
        ChiPassive.blockChi((Player)target);
      }
      if (Suffocate.isChannelingSphere((Player)target)) {
        Suffocate.remove((Player)target);
      }
    }
    lt.setNoDamageTicks(0);
  }
  cooldowns.put(p.getName(),System.currentTimeMillis());
  swing(p);
  numpunches++;
}",0.9831365935919056
134201,"private int getAmount(){
  Random rand=new Random();
  return rand.nextInt(99) + 1 <= triplechance ? 3 : rand.nextInt(99) + 1 <= doublechance ? 2 : 0;
}","private int getAmount(){
  Random rand=new Random();
  return rand.nextInt(99) + 1 <= triplechance ? 3 : rand.nextInt(99) + 1 <= doublechance ? 2 : 1;
}",0.993421052631579
134202,"private void progress(){
  PotionEffect effect=new PotionEffect(PotionEffectType.SLOW,60,1);
  if (!player.isSneaking()) {
    remove(player);
    return;
  }
  if (!canBeUsedOnUndead) {
    for (    Entity entity : targetentities.keySet()) {
      if (isUndead(entity)) {
        targetentities.remove(entity);
      }
    }
  }
  if (onlyUsableAtNight && !Methods.isNight(player.getWorld())) {
    remove(player);
    return;
  }
  if (!Methods.canBend(player.getName(),""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (Methods.getBoundAbility(player) == null) {
    remove(player);
    return;
  }
  if (!Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (AvatarState.isAvatarState(player)) {
    ArrayList<Entity> entities=new ArrayList<Entity>();
    for (    Entity entity : Methods.getEntitiesAroundPoint(player.getLocation(),range)) {
      if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()))       continue;
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity))         continue;
      }
      entities.add(entity);
      if (!targetentities.containsKey(entity) && entity instanceof LivingEntity) {
        Methods.damageEntity(player,entity,0);
        targetentities.put(entity,entity.getLocation().clone());
      }
      if (entity instanceof LivingEntity) {
        Location newlocation=entity.getLocation().clone();
        Location location=targetentities.get(entity);
        double distance=location.distance(newlocation);
        double dx, dy, dz;
        dx=location.getX() - newlocation.getX();
        dy=location.getY() - newlocation.getY();
        dz=location.getZ() - newlocation.getZ();
        Vector vector=new Vector(dx,dy,dz);
        if (distance > .5) {
          entity.setVelocity(vector.normalize().multiply(.5));
        }
 else {
          entity.setVelocity(new Vector(0,0,0));
        }
        new TempPotionEffect((LivingEntity)entity,effect);
        entity.setFallDistance(0);
        if (entity instanceof Creature) {
          ((Creature)entity).setTarget(null);
        }
        Methods.breakBreathbendingHold(entity);
      }
    }
    for (    Entity entity : targetentities.keySet()) {
      if (!entities.contains(entity))       targetentities.remove(entity);
    }
  }
 else {
    for (    Entity entity : targetentities.keySet()) {
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity)) {
          targetentities.remove(entity);
          continue;
        }
      }
      Location newlocation=entity.getLocation();
      Location location=Methods.getTargetedLocation(player,(int)targetentities.get(entity).distance(player.getLocation()));
      double distance=location.distance(newlocation);
      double dx, dy, dz;
      dx=location.getX() - newlocation.getX();
      dy=location.getY() - newlocation.getY();
      dz=location.getZ() - newlocation.getZ();
      Vector vector=new Vector(dx,dy,dz);
      if (distance > .5) {
        entity.setVelocity(vector.normalize().multiply(.5));
      }
 else {
        entity.setVelocity(new Vector(0,0,0));
      }
      new TempPotionEffect((LivingEntity)entity,effect);
      entity.setFallDistance(0);
      if (entity instanceof Creature) {
        ((Creature)entity).setTarget(null);
      }
      Methods.breakBreathbendingHold(entity);
    }
  }
}","private void progress(){
  PotionEffect effect=new PotionEffect(PotionEffectType.SLOW,60,1);
  if (!player.isSneaking()) {
    remove(player);
    return;
  }
  if (!canBeUsedOnUndead) {
    for (    Entity entity : targetentities.keySet()) {
      if (isUndead(entity)) {
        targetentities.remove(entity);
      }
    }
  }
  if (onlyUsableAtNight && !Methods.isNight(player.getWorld())) {
    remove(player);
    return;
  }
  if (!Methods.canBend(player.getName(),""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (Methods.getBoundAbility(player) == null) {
    remove(player);
    return;
  }
  if (!Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (AvatarState.isAvatarState(player)) {
    ArrayList<Entity> entities=new ArrayList<Entity>();
    for (    Entity entity : Methods.getEntitiesAroundPoint(player.getLocation(),range)) {
      if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()))       continue;
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity))         continue;
      }
      entities.add(entity);
      if (!targetentities.containsKey(entity) && entity instanceof LivingEntity) {
        Methods.damageEntity(player,entity,0);
        targetentities.put(entity,entity.getLocation().clone());
      }
      if (entity instanceof LivingEntity) {
        Location newlocation=entity.getLocation().clone();
        Location location=targetentities.get(entity);
        double distance=location.distance(newlocation);
        double dx, dy, dz;
        dx=location.getX() - newlocation.getX();
        dy=location.getY() - newlocation.getY();
        dz=location.getZ() - newlocation.getZ();
        Vector vector=new Vector(dx,dy,dz);
        if (distance > .5) {
          entity.setVelocity(vector.normalize().multiply(.5));
        }
 else {
          entity.setVelocity(new Vector(0,0,0));
        }
        new TempPotionEffect((LivingEntity)entity,effect);
        entity.setFallDistance(0);
        if (entity instanceof Creature) {
          ((Creature)entity).setTarget(null);
        }
        Methods.breakBreathbendingHold(entity);
      }
    }
    for (    Entity entity : targetentities.keySet()) {
      if (!entities.contains(entity))       targetentities.remove(entity);
    }
  }
 else {
    for (    Entity entity : targetentities.keySet()) {
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity)) {
          targetentities.remove(entity);
          continue;
        }
      }
      Location newlocation=entity.getLocation();
      if (player.getWorld() != newlocation.getWorld()) {
        targetentities.remove(entity);
        continue;
      }
      Location location=Methods.getTargetedLocation(player,(int)targetentities.get(entity).distance(player.getLocation()));
      double distance=location.distance(newlocation);
      double dx, dy, dz;
      dx=location.getX() - newlocation.getX();
      dy=location.getY() - newlocation.getY();
      dz=location.getZ() - newlocation.getZ();
      Vector vector=new Vector(dx,dy,dz);
      if (distance > .5) {
        entity.setVelocity(vector.normalize().multiply(.5));
      }
 else {
        entity.setVelocity(new Vector(0,0,0));
      }
      new TempPotionEffect((LivingEntity)entity,effect);
      entity.setFallDistance(0);
      if (entity instanceof Creature) {
        ((Creature)entity).setTarget(null);
      }
      Methods.breakBreathbendingHold(entity);
    }
  }
}",0.9825764067409312
134203,"private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Methods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.abilities.clear();
          for (int i=1; i <= 9; i++) {
            Methods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          int slot=Integer.parseInt(args[1]);
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (bPlayer.abilities.get(slot) != null) {
            bPlayer.abilities.remove(slot);
            Methods.saveAbility(bPlayer,slot,null);
          }
          s.sendMessage(""String_Node_Str"" + slot);
          return true;
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!Methods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  Methods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.abilities;
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getAirColor() + st);
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getWaterColor() + st);
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isMetalbendingAbility(st)) {
                  s.sendMessage(Methods.getMetalbendingColor() + st);
                }
 else {
                  s.sendMessage(Methods.getEarthColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getFireColor() + st);
              }
            }
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.abilities;
          if (abilities.isEmpty()) {
            s.sendMessage(""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null)             s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (Methods.isBender(un,Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            if (Methods.canPlantbend(p)) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            }
            if (Methods.canBloodbend(p)) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Earth)) {
            if (Methods.canMetalbend(p)) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + Methods.getMetalbendingColor()+ ""String_Node_Str"");
            }
 else {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(un);
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=Methods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(Methods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (Methods.isBender(un,Element.Air)) {
              players.add(Methods.getAirColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Water)) {
              players.add(Methods.getWaterColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Earth)) {
              players.add(Methods.getEarthColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Chi)) {
              players.add(Methods.getChiColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Fire)) {
              players.add(Methods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        Methods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        Methods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          Methods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        Methods.removeUnusableAbilities(player.getName());
        Methods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        Methods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Air);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Water);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Earth);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Fire);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Chi);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
          if (bTarget.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            Methods.removeUnusableAbilities(target.getName());
            Methods.saveElements(bTarget);
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Methods.abilityExists(args[1])) {
          String ability=Methods.getAbility(args[1]);
          if (Methods.isAirAbility(ability)) {
            s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isWaterAbility(ability)) {
            s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isEarthAbility(ability)) {
            if (Methods.isMetalbendingAbility(ability)) {
              s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (Methods.isFireAbility(ability)) {
            s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isChiAbility(ability)) {
            s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}","private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Methods.reloadPlugin();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.abilities.clear();
          for (int i=1; i <= 9; i++) {
            Methods.saveAbility(bPlayer,i,null);
          }
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          try {
            int slot=Integer.parseInt(args[1]);
            if (slot < 1 || slot > 9) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            if (bPlayer.abilities.get(slot) != null) {
              bPlayer.abilities.remove(slot);
              Methods.saveAbility(bPlayer,slot,null);
            }
            s.sendMessage(""String_Node_Str"" + slot);
            return true;
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability);
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          int slot=0;
          try {
            slot=Integer.parseInt(args[2]);
          }
 catch (          NumberFormatException e) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!Methods.hasPermission((Player)s,ability)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability,slot);
          return true;
        }
      }
      if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!Methods.isImportEnabled()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
        FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
        final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
        for (        String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
          if (string.equalsIgnoreCase(""String_Node_Str""))           continue;
          String playername=string;
          UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
          ArrayList<Element> element=new ArrayList<Element>();
          List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          HashMap<Integer,String> abilities=new HashMap<Integer,String>();
          List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
          boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
          int slot=1;
          for (          int i : oa) {
            if (StockAbilities.getAbility(i) != null) {
              abilities.put(slot,StockAbilities.getAbility(i).toString());
              slot++;
            }
 else {
              abilities.put(slot,null);
              slot++;
            }
          }
          for (          int i : oe) {
            if (Element.getType(i) != null) {
              element.add(Element.getType(i));
            }
          }
          BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
          bPlayers.add(bPlayer);
        }
        final int total=bPlayers.size();
        final CommandSender sender=s;
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        if (debug) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
          public void run(){
            int i=0;
            if (i >= 10) {
              sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
              return;
            }
            while (i < 10) {
              if (bPlayers.isEmpty()) {
                sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
                Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
                plugin.getConfig().set(""String_Node_Str"",false);
                plugin.saveConfig();
                for (                Player player : Bukkit.getOnlinePlayers()) {
                  Methods.createBendingPlayer(player.getUniqueId(),player.getName());
                }
                return;
              }
              StringBuilder elements=new StringBuilder();
              BendingPlayer bPlayer=bPlayers.pop();
              if (bPlayer.hasElement(Element.Air))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Water))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Earth))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Fire))               elements.append(""String_Node_Str"");
              if (bPlayer.hasElement(Element.Chi))               elements.append(""String_Node_Str"");
              HashMap<Integer,String> abilities=bPlayer.abilities;
              ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
              try {
                if (rs2.next()) {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
 else {
                  DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
                  for (int slot=1; slot < 10; slot++) {
                    DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
                  }
                }
              }
 catch (              SQLException ex) {
                ex.printStackTrace();
              }
              i++;
              if (debug) {
                System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
              }
            }
          }
        }
,0,40);
        return true;
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getAirColor() + st);
              }
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getWaterColor() + st);
              }
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                if (Methods.isMetalbendingAbility(st)) {
                  s.sendMessage(Methods.getMetalbendingColor() + st);
                }
 else {
                  s.sendMessage(Methods.getEarthColor() + st);
                }
              }
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getFireColor() + st);
              }
            }
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              if (Methods.hasPermission((Player)s,st)) {
                s.sendMessage(Methods.getChiColor() + st);
              }
            }
            return true;
          }
 else {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.abilities;
          if (abilities.isEmpty()) {
            s.sendMessage(""String_Node_Str"");
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null)             s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (args.length == 1) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isToggled) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            bPlayer.isToggled=false;
            return true;
          }
 else {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            bPlayer.isToggled=true;
            return true;
          }
        }
 else         if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (isToggledForAll) {
            isToggledForAll=false;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
          }
 else {
            isToggledForAll=true;
            for (            Player player : Bukkit.getOnlinePlayers()) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
        }
 else {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (Methods.isBender(un,Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            if (Methods.canPlantbend(p)) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            }
            if (Methods.canBloodbend(p)) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Earth)) {
            if (Methods.canMetalbend(p)) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + Methods.getMetalbendingColor()+ ""String_Node_Str"");
            }
 else {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            }
          }
          if (Methods.isBender(un,Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(un);
          if (bPlayer != null) {
            s.sendMessage(""String_Node_Str"");
            for (int i=1; i <= 9; i++) {
              String ability=bPlayer.getAbilities().get(i);
              if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
                continue;
              }
 else {
                s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
              }
            }
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
            s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=Methods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(Methods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (Methods.isBender(un,Element.Air)) {
              players.add(Methods.getAirColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Water)) {
              players.add(Methods.getWaterColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Earth)) {
              players.add(Methods.getEarthColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Chi)) {
              players.add(Methods.getChiColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Fire)) {
              players.add(Methods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        Methods.removeUnusableAbilities(player.getName());
        bPlayer.elements.clear();
        Methods.saveElements(bPlayer);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        if (bPlayer.isPermaRemoved()) {
          bPlayer.permaRemoved=false;
          Methods.savePermaRemoved(bPlayer);
          s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
          return true;
        }
        bPlayer.elements.clear();
        Methods.removeUnusableAbilities(player.getName());
        Methods.saveElements(bPlayer);
        bPlayer.permaRemoved=true;
        Methods.savePermaRemoved(bPlayer);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        return true;
      }
      if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            Methods.saveElements(bPlayer);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Air);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Water);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Earth);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Fire);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Chi);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            Methods.removeUnusableAbilities(s.getName());
            Methods.saveElements(bPlayer);
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
          if (bTarget.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            Methods.removeUnusableAbilities(target.getName());
            Methods.saveElements(bTarget);
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Methods.abilityExists(args[1])) {
          String ability=Methods.getAbility(args[1]);
          if (Methods.isAirAbility(ability)) {
            s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isWaterAbility(ability)) {
            s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isEarthAbility(ability)) {
            if (Methods.isMetalbendingAbility(ability)) {
              s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
            }
 else {
              s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
              s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
            }
          }
 else           if (Methods.isFireAbility(ability)) {
            s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isChiAbility(ability)) {
            s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}",0.9980155701419632
134204,"@Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Methods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.abilities.clear();
      for (int i=1; i <= 9; i++) {
        Methods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      int slot=Integer.parseInt(args[1]);
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (bPlayer.abilities.get(slot) != null) {
        bPlayer.abilities.remove(slot);
        Methods.saveAbility(bPlayer,slot,null);
      }
      s.sendMessage(""String_Node_Str"" + slot);
      return true;
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!Methods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              Methods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.abilities;
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getAirColor() + st);
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getWaterColor() + st);
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isMetalbendingAbility(st)) {
              s.sendMessage(Methods.getMetalbendingColor() + st);
            }
 else {
              s.sendMessage(Methods.getEarthColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getFireColor() + st);
          }
        }
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.abilities;
      if (abilities.isEmpty()) {
        s.sendMessage(""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null)         s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (Methods.isBender(un,Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        if (Methods.canPlantbend(p)) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        }
        if (Methods.canBloodbend(p)) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Earth)) {
        if (Methods.canMetalbend(p)) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + Methods.getMetalbendingColor()+ ""String_Node_Str"");
        }
 else {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(un);
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=Methods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(Methods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (Methods.isBender(un,Element.Air)) {
          players.add(Methods.getAirColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Water)) {
          players.add(Methods.getWaterColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Earth)) {
          players.add(Methods.getEarthColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Chi)) {
          players.add(Methods.getChiColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Fire)) {
          players.add(Methods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    Methods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    Methods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      Methods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    Methods.removeUnusableAbilities(player.getName());
    Methods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    Methods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Air);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Water);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Earth);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Fire);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Chi);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
      if (bTarget.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        Methods.removeUnusableAbilities(target.getName());
        Methods.saveElements(bTarget);
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Methods.abilityExists(args[1])) {
      String ability=Methods.getAbility(args[1]);
      if (Methods.isAirAbility(ability)) {
        s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isWaterAbility(ability)) {
        s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isEarthAbility(ability)) {
        if (Methods.isMetalbendingAbility(ability)) {
          s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (Methods.isFireAbility(ability)) {
        s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isChiAbility(ability)) {
        s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Methods.reloadPlugin();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.abilities.clear();
      for (int i=1; i <= 9; i++) {
        Methods.saveAbility(bPlayer,i,null);
      }
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      try {
        int slot=Integer.parseInt(args[1]);
        if (slot < 1 || slot > 9) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (bPlayer.abilities.get(slot) != null) {
          bPlayer.abilities.remove(slot);
          Methods.saveAbility(bPlayer,slot,null);
        }
        s.sendMessage(""String_Node_Str"" + slot);
        return true;
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability);
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      int slot=0;
      try {
        slot=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!Methods.hasPermission((Player)s,ability)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability,slot);
      return true;
    }
  }
  if (Arrays.asList(importaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!Methods.isImportEnabled()) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    File bendingPlayersFile=new File(""String_Node_Str"",""String_Node_Str"");
    FileConfiguration bendingPlayers=YamlConfiguration.loadConfiguration(bendingPlayersFile);
    final LinkedList<BendingPlayer> bPlayers=new LinkedList<BendingPlayer>();
    for (    String string : bendingPlayers.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      if (string.equalsIgnoreCase(""String_Node_Str""))       continue;
      String playername=string;
      UUID uuid=Bukkit.getOfflinePlayer(playername).getUniqueId();
      ArrayList<Element> element=new ArrayList<Element>();
      List<Integer> oe=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      HashMap<Integer,String> abilities=new HashMap<Integer,String>();
      List<Integer> oa=bendingPlayers.getIntegerList(string + ""String_Node_Str"");
      boolean permaremoved=bendingPlayers.getBoolean(string + ""String_Node_Str"");
      int slot=1;
      for (      int i : oa) {
        if (StockAbilities.getAbility(i) != null) {
          abilities.put(slot,StockAbilities.getAbility(i).toString());
          slot++;
        }
 else {
          abilities.put(slot,null);
          slot++;
        }
      }
      for (      int i : oe) {
        if (Element.getType(i) != null) {
          element.add(Element.getType(i));
        }
      }
      BendingPlayer bPlayer=new BendingPlayer(uuid,playername,element,abilities,permaremoved);
      bPlayers.add(bPlayer);
    }
    final int total=bPlayers.size();
    final CommandSender sender=s;
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    if (debug) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    importTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(plugin,new Runnable(){
      public void run(){
        int i=0;
        if (i >= 10) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + total+ ""String_Node_Str"");
          return;
        }
        while (i < 10) {
          if (bPlayers.isEmpty()) {
            sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Bukkit.getServer().getScheduler().cancelTask(importTask.getTaskId());
            plugin.getConfig().set(""String_Node_Str"",false);
            plugin.saveConfig();
            for (            Player player : Bukkit.getOnlinePlayers()) {
              Methods.createBendingPlayer(player.getUniqueId(),player.getName());
            }
            return;
          }
          StringBuilder elements=new StringBuilder();
          BendingPlayer bPlayer=bPlayers.pop();
          if (bPlayer.hasElement(Element.Air))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Water))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Earth))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Fire))           elements.append(""String_Node_Str"");
          if (bPlayer.hasElement(Element.Chi))           elements.append(""String_Node_Str"");
          HashMap<Integer,String> abilities=bPlayer.abilities;
          ResultSet rs2=DBConnection.sql.readQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str"");
          try {
            if (rs2.next()) {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + elements + ""String_Node_Str""+ bPlayer.uuid.toString());
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.isPermaRemoved() + ""String_Node_Str""+ bPlayer.uuid.toString());
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
 else {
              DBConnection.sql.modifyQuery(""String_Node_Str"" + bPlayer.uuid.toString() + ""String_Node_Str""+ bPlayer.player+ ""String_Node_Str""+ elements+ ""String_Node_Str""+ bPlayer.isPermaRemoved()+ ""String_Node_Str"");
              for (int slot=1; slot < 10; slot++) {
                DBConnection.sql.modifyQuery(""String_Node_Str"" + slot + ""String_Node_Str""+ abilities.get(slot)+ ""String_Node_Str""+ bPlayer.getPlayerName()+ ""String_Node_Str"");
              }
            }
          }
 catch (          SQLException ex) {
            ex.printStackTrace();
          }
          i++;
          if (debug) {
            System.out.println(""String_Node_Str"" + bPlayer.player + ""String_Node_Str""+ bPlayers.size()+ ""String_Node_Str"");
          }
        }
      }
    }
,0,40);
    return true;
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getAirColor() + st);
          }
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getWaterColor() + st);
          }
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            if (Methods.isMetalbendingAbility(st)) {
              s.sendMessage(Methods.getMetalbendingColor() + st);
            }
 else {
              s.sendMessage(Methods.getEarthColor() + st);
            }
          }
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getFireColor() + st);
          }
        }
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          if (Methods.hasPermission((Player)s,st)) {
            s.sendMessage(Methods.getChiColor() + st);
          }
        }
        return true;
      }
 else {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ Methods.getAirColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getWaterColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getEarthColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getFireColor()+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ Methods.getChiColor()+ ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.abilities;
      if (abilities.isEmpty()) {
        s.sendMessage(""String_Node_Str"");
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null)         s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (args.length == 1) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isToggled) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        bPlayer.isToggled=false;
        return true;
      }
 else {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        bPlayer.isToggled=true;
        return true;
      }
    }
 else     if (args.length == 2 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (isToggledForAll) {
        isToggledForAll=false;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
      }
 else {
        isToggledForAll=true;
        for (        Player player : Bukkit.getOnlinePlayers()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
    }
 else {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(whoaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (Methods.isBender(un,Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        if (Methods.canPlantbend(p)) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        }
        if (Methods.canBloodbend(p)) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Earth)) {
        if (Methods.canMetalbend(p)) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + Methods.getMetalbendingColor()+ ""String_Node_Str"");
        }
 else {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        }
      }
      if (Methods.isBender(un,Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(un);
      if (bPlayer != null) {
        s.sendMessage(""String_Node_Str"");
        for (int i=1; i <= 9; i++) {
          String ability=bPlayer.getAbilities().get(i);
          if (ability == null || ability.equalsIgnoreCase(""String_Node_Str"")) {
            continue;
          }
 else {
            s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
        }
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      if (p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"") || p.getName().equalsIgnoreCase(""String_Node_Str"")|| p.getName().equalsIgnoreCase(""String_Node_Str"")) {
        s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=Methods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(Methods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (Methods.isBender(un,Element.Air)) {
          players.add(Methods.getAirColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Water)) {
          players.add(Methods.getWaterColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Earth)) {
          players.add(Methods.getEarthColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Chi)) {
          players.add(Methods.getChiColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Fire)) {
          players.add(Methods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    Methods.removeUnusableAbilities(player.getName());
    bPlayer.elements.clear();
    Methods.saveElements(bPlayer);
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    if (bPlayer.isPermaRemoved()) {
      bPlayer.permaRemoved=false;
      Methods.savePermaRemoved(bPlayer);
      s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
      return true;
    }
    bPlayer.elements.clear();
    Methods.removeUnusableAbilities(player.getName());
    Methods.saveElements(bPlayer);
    bPlayer.permaRemoved=true;
    Methods.savePermaRemoved(bPlayer);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    return true;
  }
  if (Arrays.asList(addaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[2].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        Methods.saveElements(bPlayer);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Air);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Water);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Earth);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Fire);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Chi);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        Methods.removeUnusableAbilities(s.getName());
        Methods.saveElements(bPlayer);
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
      if (bTarget.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        Methods.removeUnusableAbilities(target.getName());
        Methods.saveElements(bTarget);
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getAirColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getFireColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
      s.sendMessage(Methods.getChiColor() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
    }
    if (Arrays.asList(importaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Methods.abilityExists(args[1])) {
      String ability=Methods.getAbility(args[1]);
      if (Methods.isAirAbility(ability)) {
        s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isWaterAbility(ability)) {
        s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isEarthAbility(ability)) {
        if (Methods.isMetalbendingAbility(ability)) {
          s.sendMessage(Methods.getMetalbendingColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getMetalbendingColor() + AbilityModuleManager.descriptions.get(ability));
        }
 else {
          s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
          s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
        }
      }
 else       if (Methods.isFireAbility(ability)) {
        s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isChiAbility(ability)) {
        s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}",0.996216669894764
134205,"public static void progressAll(){
  for (  LivingEntity entity : instances.keySet())   instances.get(entity).progress();
}","public static void progressAll(){
  for (  LivingEntity entity : instances.keySet()) {
    if (instances.get(entity) == null)     continue;
    instances.get(entity).progress();
  }
}",0.8
134206,"public static void removeAroundPoint(Location loc,double radius){
  for (  Player player : instances.keySet()) {
    Combustion combustion=instances.get(player);
    if (combustion.location.distance(loc) <= radius) {
      explode(player);
      instances.remove(player);
    }
  }
}","public static void removeAroundPoint(Location loc,double radius){
  for (  Player player : instances.keySet()) {
    Combustion combustion=instances.get(player);
    if (combustion.location.getWorld() == loc.getWorld()) {
      if (combustion.location.distance(loc) <= radius) {
        explode(player);
        instances.remove(player);
      }
    }
  }
}",0.884375
134207,"private void progress(){
  PotionEffect effect=new PotionEffect(PotionEffectType.SLOW,60,1);
  if (!player.isSneaking()) {
    remove(player);
    return;
  }
  if (!canBeUsedOnUndead) {
    for (    Entity entity : targetentities.keySet()) {
      if (isUndead(entity)) {
        targetentities.remove(entity);
      }
    }
  }
  if (onlyUsableAtNight && !Methods.isNight(player.getWorld())) {
    remove(player);
    return;
  }
  if (!Methods.canBend(player.getName(),""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (Methods.getBoundAbility(player) == null) {
    remove(player);
    return;
  }
  if (!Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (AvatarState.isAvatarState(player)) {
    ArrayList<Entity> entities=new ArrayList<Entity>();
    for (    Entity entity : Methods.getEntitiesAroundPoint(player.getLocation(),range)) {
      if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()))       continue;
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity))         continue;
      }
      entities.add(entity);
      if (!targetentities.containsKey(entity) && entity instanceof LivingEntity) {
        Methods.damageEntity(player,entity,0);
        targetentities.put(entity,entity.getLocation().clone());
      }
      if (entity instanceof LivingEntity) {
        Location newlocation=entity.getLocation().clone();
        Location location=targetentities.get(entity);
        double distance=location.distance(newlocation);
        double dx, dy, dz;
        dx=location.getX() - newlocation.getX();
        dy=location.getY() - newlocation.getY();
        dz=location.getZ() - newlocation.getZ();
        Vector vector=new Vector(dx,dy,dz);
        if (distance > .5) {
          entity.setVelocity(vector.normalize().multiply(.5));
        }
 else {
          entity.setVelocity(new Vector(0,0,0));
        }
        new TempPotionEffect((LivingEntity)entity,effect);
        entity.setFallDistance(0);
        if (entity instanceof Creature) {
          ((Creature)entity).setTarget(null);
        }
        Methods.breakBreathbendingHold(entity);
      }
    }
    for (    Entity entity : targetentities.keySet()) {
      if (!entities.contains(entity))       targetentities.remove(entity);
    }
  }
 else {
    for (    Entity entity : targetentities.keySet()) {
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity)) {
          targetentities.remove(entity);
          continue;
        }
      }
      Location newlocation=entity.getLocation();
      Location location=Methods.getTargetedLocation(player,(int)targetentities.get(entity).distance(player.getLocation()));
      double distance=location.distance(newlocation);
      double dx, dy, dz;
      dx=location.getX() - newlocation.getX();
      dy=location.getY() - newlocation.getY();
      dz=location.getZ() - newlocation.getZ();
      Vector vector=new Vector(dx,dy,dz);
      if (distance > .5) {
        entity.setVelocity(vector.normalize().multiply(.5));
      }
 else {
        entity.setVelocity(new Vector(0,0,0));
      }
      new TempPotionEffect((LivingEntity)entity,effect);
      entity.setFallDistance(0);
      if (entity instanceof Creature) {
        ((Creature)entity).setTarget(null);
      }
      Methods.breakBreathbendingHold(entity);
    }
  }
}","private void progress(){
  PotionEffect effect=new PotionEffect(PotionEffectType.SLOW,60,1);
  if (!player.isSneaking()) {
    remove(player);
    return;
  }
  if (!canBeUsedOnUndead) {
    for (    Entity entity : targetentities.keySet()) {
      if (isUndead(entity)) {
        targetentities.remove(entity);
      }
    }
  }
  if (onlyUsableAtNight && !Methods.isNight(player.getWorld())) {
    remove(player);
    return;
  }
  if (!Methods.canBend(player.getName(),""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (Methods.getBoundAbility(player) == null) {
    remove(player);
    return;
  }
  if (!Methods.getBoundAbility(player).equalsIgnoreCase(""String_Node_Str"")) {
    remove(player);
    return;
  }
  if (AvatarState.isAvatarState(player)) {
    ArrayList<Entity> entities=new ArrayList<Entity>();
    for (    Entity entity : Methods.getEntitiesAroundPoint(player.getLocation(),range)) {
      if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",entity.getLocation()))       continue;
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity))         continue;
      }
      entities.add(entity);
      if (!targetentities.containsKey(entity) && entity instanceof LivingEntity) {
        Methods.damageEntity(player,entity,0);
        targetentities.put(entity,entity.getLocation().clone());
      }
      if (entity instanceof LivingEntity) {
        Location newlocation=entity.getLocation().clone();
        Location location=targetentities.get(entity);
        double distance=location.distance(newlocation);
        double dx, dy, dz;
        dx=location.getX() - newlocation.getX();
        dy=location.getY() - newlocation.getY();
        dz=location.getZ() - newlocation.getZ();
        Vector vector=new Vector(dx,dy,dz);
        if (distance > .5) {
          entity.setVelocity(vector.normalize().multiply(.5));
        }
 else {
          entity.setVelocity(new Vector(0,0,0));
        }
        new TempPotionEffect((LivingEntity)entity,effect);
        entity.setFallDistance(0);
        if (entity instanceof Creature) {
          ((Creature)entity).setTarget(null);
        }
        Methods.breakBreathbendingHold(entity);
      }
    }
    for (    Entity entity : targetentities.keySet()) {
      if (!entities.contains(entity))       targetentities.remove(entity);
    }
  }
 else {
    for (    Entity entity : targetentities.keySet()) {
      if (entity instanceof Player) {
        if (!Methods.canBeBloodbent((Player)entity)) {
          targetentities.remove(entity);
          continue;
        }
      }
      Location newlocation=entity.getLocation();
      if (player.getWorld() != newlocation.getWorld()) {
        targetentities.remove(entity);
        continue;
      }
      Location location=Methods.getTargetedLocation(player,(int)targetentities.get(entity).distance(player.getLocation()));
      double distance=location.distance(newlocation);
      double dx, dy, dz;
      dx=location.getX() - newlocation.getX();
      dy=location.getY() - newlocation.getY();
      dz=location.getZ() - newlocation.getZ();
      Vector vector=new Vector(dx,dy,dz);
      if (distance > .5) {
        entity.setVelocity(vector.normalize().multiply(.5));
      }
 else {
        entity.setVelocity(new Vector(0,0,0));
      }
      new TempPotionEffect((LivingEntity)entity,effect);
      entity.setFallDistance(0);
      if (entity instanceof Creature) {
        ((Creature)entity).setTarget(null);
      }
      Methods.breakBreathbendingHold(entity);
    }
  }
}",0.9825764067409312
134208,"public boolean progress(){
  if (System.currentTimeMillis() - time >= interval) {
    time=System.currentTimeMillis();
    if (progress < height) {
      moveEarth();
      removeTimers.put(player,System.currentTimeMillis());
    }
 else {
      if (removeTimers.get(player) + removeTimer <= System.currentTimeMillis()) {
        baseblocks.put(location.clone().add(direction.clone().multiply(-1 * (height))).getBlock(),(height - 1));
        if (!revertblocks()) {
          instances.remove(id);
        }
      }
      return false;
    }
  }
  return true;
}","public boolean progress(){
  if (System.currentTimeMillis() - time >= interval) {
    time=System.currentTimeMillis();
    if (progress < height) {
      moveEarth();
      removeTimers.put(player,System.currentTimeMillis());
    }
 else {
      if (removeTimers.contains(player)) {
        if (removeTimers.get(player) + removeTimer <= System.currentTimeMillis()) {
          baseblocks.put(location.clone().add(direction.clone().multiply(-1 * (height))).getBlock(),(height - 1));
          if (!revertblocks()) {
            instances.remove(id);
          }
        }
      }
      return false;
    }
  }
  return true;
}",0.9469250210614996
134209,"private int getAmount(){
  Random rand=new Random();
  return rand.nextInt(99) + 1 <= triplechance ? 3 : rand.nextInt(99) + 1 <= doublechance ? 2 : 0;
}","private int getAmount(){
  Random rand=new Random();
  return rand.nextInt(99) + 1 <= triplechance ? 3 : rand.nextInt(99) + 1 <= doublechance ? 2 : 1;
}",0.993421052631579
134210,"public void run(){
  try {
    interval=System.currentTimeMillis() - time;
    time=System.currentTimeMillis();
    ProjectKorra.time_step=interval;
    AvatarState.manageAvatarStates();
    ChiPassive.handlePassive();
    TempPotionEffect.progressAll();
    handleDayNight();
    Flight.handle();
    for (    Player p : RapidPunch.instance.keySet())     RapidPunch.instance.get(p).startPunch(p);
    for (    int i : RevertChecker.airRevertQueue.keySet()) {
      Methods.revertAirBlock(i);
      RevertChecker.airRevertQueue.remove(i);
    }
  }
 catch (  Exception e) {
    Methods.stopBending();
    e.printStackTrace();
  }
}","public void run(){
  try {
    interval=System.currentTimeMillis() - time;
    time=System.currentTimeMillis();
    ProjectKorra.time_step=interval;
    AvatarState.manageAvatarStates();
    ChiPassive.handlePassive();
    TempPotionEffect.progressAll();
    handleDayNight();
    Flight.handle();
    for (    Player p : RapidPunch.instances.keySet()) {
      if (p == null)       continue;
      RapidPunch.instances.get(p).startPunch(p);
    }
    for (    int i : RevertChecker.airRevertQueue.keySet()) {
      Methods.revertAirBlock(i);
      RevertChecker.airRevertQueue.remove(i);
    }
  }
 catch (  Exception e) {
    Methods.stopBending();
    e.printStackTrace();
  }
}",0.9626239511823036
134211,"public static void stopBending(){
  List<AbilityModule> abilities=AbilityModuleManager.ability;
  for (  AbilityModule ab : abilities) {
    ab.stop();
  }
  AirBlast.removeAll();
  AirBubble.removeAll();
  AirShield.instances.clear();
  AirSuction.instances.clear();
  AirScooter.removeAll();
  AirSpout.removeAll();
  AirSwipe.instances.clear();
  Tornado.instances.clear();
  AirBurst.removeAll();
  Catapult.removeAll();
  CompactColumn.removeAll();
  EarthBlast.removeAll();
  EarthColumn.removeAll();
  EarthPassive.removeAll();
  EarthArmor.removeAll();
  EarthTunnel.instances.clear();
  Shockwave.removeAll();
  Tremorsense.removeAll();
  FreezeMelt.removeAll();
  IceSpike.removeAll();
  IceSpike2.removeAll();
  WaterManipulation.removeAll();
  WaterSpout.removeAll();
  WaterWall.removeAll();
  Wave.removeAll();
  Plantbending.regrowAll();
  OctopusForm.removeAll();
  Bloodbending.instances.clear();
  FireStream.removeAll();
  Fireball.removeAll();
  WallOfFire.instances.clear();
  Lightning.instances.clear();
  FireShield.removeAll();
  FireBlast.removeAll();
  FireBurst.removeAll();
  FireJet.instances.clear();
  Cook.removeAll();
  Illumination.removeAll();
  RapidPunch.instance.clear();
  Flight.removeAll();
  WaterReturn.removeAll();
  TempBlock.removeAll();
  removeAllEarthbendedBlocks();
  EarthPassive.removeAll();
}","public static void stopBending(){
  List<AbilityModule> abilities=AbilityModuleManager.ability;
  for (  AbilityModule ab : abilities) {
    ab.stop();
  }
  AirBlast.removeAll();
  AirBubble.removeAll();
  AirShield.instances.clear();
  AirSuction.instances.clear();
  AirScooter.removeAll();
  AirSpout.removeAll();
  AirSwipe.instances.clear();
  Tornado.instances.clear();
  AirBurst.removeAll();
  Catapult.removeAll();
  CompactColumn.removeAll();
  EarthBlast.removeAll();
  EarthColumn.removeAll();
  EarthPassive.removeAll();
  EarthArmor.removeAll();
  EarthTunnel.instances.clear();
  Shockwave.removeAll();
  Tremorsense.removeAll();
  FreezeMelt.removeAll();
  IceSpike.removeAll();
  IceSpike2.removeAll();
  WaterManipulation.removeAll();
  WaterSpout.removeAll();
  WaterWall.removeAll();
  Wave.removeAll();
  Plantbending.regrowAll();
  OctopusForm.removeAll();
  Bloodbending.instances.clear();
  FireStream.removeAll();
  Fireball.removeAll();
  WallOfFire.instances.clear();
  Lightning.instances.clear();
  FireShield.removeAll();
  FireBlast.removeAll();
  FireBurst.removeAll();
  FireJet.instances.clear();
  Cook.removeAll();
  Illumination.removeAll();
  RapidPunch.instances.clear();
  Flight.removeAll();
  WaterReturn.removeAll();
  TempBlock.removeAll();
  removeAllEarthbendedBlocks();
  EarthPassive.removeAll();
}",0.999628666914222
134212,"@EventHandler public void onNameTag(AsyncPlayerReceiveNameTagEvent e){
  List<Element> elements=Methods.getBendingPlayer(e.getNamedPlayer().getName()).getElements();
  if (elements != null && plugin.getConfig().getBoolean(""String_Node_Str"")) {
    if (elements.size() > 1)     e.setTag(ChatColor.LIGHT_PURPLE + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Earth))     e.setTag(ChatColor.GREEN + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Air))     e.setTag(ChatColor.GRAY + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Water))     e.setTag(ChatColor.AQUA + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Fire))     e.setTag(ChatColor.RED + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Chi))     e.setTag(ChatColor.GOLD + e.getNamedPlayer().getName());
  }
}","@EventHandler public void onNameTag(AsyncPlayerReceiveNameTagEvent e){
  List<Element> elements=Methods.getBendingPlayer(e.getNamedPlayer().getName()).getElements();
  if (elements != null && plugin.getConfig().getBoolean(""String_Node_Str"")) {
    if (elements.size() < 1)     e.setTag(ChatColor.LIGHT_PURPLE + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Earth))     e.setTag(ChatColor.GREEN + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Air))     e.setTag(ChatColor.GRAY + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Water))     e.setTag(ChatColor.AQUA + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Fire))     e.setTag(ChatColor.RED + e.getNamedPlayer().getName());
 else     if (elements.get(0).equals(Element.Chi))     e.setTag(ChatColor.GOLD + e.getNamedPlayer().getName());
  }
}",0.9989035087719298
134213,"public void startPunch(Player p){
  if (numpunches >= punches)   instance.remove(p);
  if (target instanceof LivingEntity && target != null) {
    LivingEntity lt=(LivingEntity)target;
    Methods.damageEntity(p,target,damage);
    if (target instanceof Player)     if (ChiPassive.willChiBlock((Player)target)) {
      ChiPassive.blockChi((Player)target);
    }
    lt.setNoDamageTicks(0);
  }
  cooldowns.put(p.getName(),System.currentTimeMillis());
  swing(p);
  numpunches++;
}","public void startPunch(Player p){
  if (numpunches >= punches)   instances.remove(p);
  if (target instanceof LivingEntity && target != null) {
    LivingEntity lt=(LivingEntity)target;
    Methods.damageEntity(p,target,damage);
    if (target instanceof Player)     if (ChiPassive.willChiBlock((Player)target)) {
      ChiPassive.blockChi((Player)target);
    }
    lt.setNoDamageTicks(0);
  }
  cooldowns.put(p.getName(),System.currentTimeMillis());
  swing(p);
  numpunches++;
}",0.9989594172736732
134214,"public RapidPunch(Player p){
  if (instance.containsKey(p))   return;
  if (cooldowns.containsKey(p.getName())) {
    if (cooldowns.get(p.getName()) + cooldown >= System.currentTimeMillis()) {
      return;
    }
 else {
      cooldowns.remove(p.getName());
    }
  }
  Entity t=Methods.getTargetedEntity(p,distance,new ArrayList<Entity>());
  if (t == null)   return;
  target=t;
  numpunches=0;
  instance.put(p,this);
}","public RapidPunch(Player p){
  if (instances.containsKey(p))   return;
  if (cooldowns.containsKey(p.getName())) {
    if (cooldowns.get(p.getName()) + cooldown >= System.currentTimeMillis()) {
      return;
    }
 else {
      cooldowns.remove(p.getName());
    }
  }
  Entity t=Methods.getTargetedEntity(p,distance,new ArrayList<Entity>());
  if (t == null)   return;
  target=t;
  numpunches=0;
  instances.put(p,this);
}",0.9976359338061466
134215,"private void explode(){
  boolean explode=true;
  for (  Block block : Methods.getBlocksAroundPoint(location,3)) {
    if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
      explode=false;
      break;
    }
  }
  if (explode) {
    explosion=player.getWorld().spawn(location,TNTPrimed.class);
    explosion.setFuseTicks(0);
    float yield=1;
switch (player.getWorld().getDifficulty()) {
case PEACEFUL:
      yield*=2.;
    break;
case EASY:
  yield*=2.;
break;
case NORMAL:
yield*=1.;
break;
case HARD:
yield*=3. / 4.;
break;
}
explosion.setYield(yield);
explosions.put(explosion,this);
}
ignite(location);
remove();
}","private void explode(){
  boolean explode=true;
  for (  Block block : Methods.getBlocksAroundPoint(location,3)) {
    if (Methods.isRegionProtectedFromBuild(player,""String_Node_Str"",block.getLocation())) {
      explode=false;
      break;
    }
  }
  if (explode) {
    explosion=player.getWorld().spawn(location,TNTPrimed.class);
    explosion.setFuseTicks(0);
    float yield=1;
    if (!AvatarState.isAvatarState(player)) {
      if (Methods.isDay(player.getWorld())) {
        Methods.firebendingDayAugment(yield,player.getWorld());
      }
 else {
        yield*=1.;
      }
    }
 else {
      yield*=AvatarState.factor;
    }
    explosion.setYield(yield);
    explosions.put(explosion,this);
  }
  ignite(location);
  remove();
}",0.7138769670958512
134216,"private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        plugin.reloadConfig();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.abilities.clear();
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          int slot=Integer.parseInt(args[1]);
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (bPlayer.abilities.get(slot) != null) {
            bPlayer.abilities.remove(slot);
          }
          s.sendMessage(""String_Node_Str"" + slot);
          return true;
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability);
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          int slot=Integer.parseInt(args[2]);
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability,slot);
          s.sendMessage(""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              s.sendMessage(ChatColor.GRAY + st);
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              s.sendMessage(ChatColor.AQUA + st);
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              s.sendMessage(ChatColor.GREEN + st);
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              s.sendMessage(ChatColor.RED + st);
            }
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              s.sendMessage(ChatColor.GOLD + st);
            }
            return true;
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.abilities;
          if (abilities.isEmpty()) {
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null)             s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (bPlayer.isToggled) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          bPlayer.isToggled=false;
          return true;
        }
 else {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          bPlayer.isToggled=true;
          return true;
        }
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (Methods.isBender(un,Element.Air)) {
            s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Water)) {
            s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Earth)) {
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Fire)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Chi)) {
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=Methods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(ChatColor.DARK_PURPLE + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (Methods.isBender(un,Element.Air)) {
              players.add(ChatColor.GRAY + un);
              continue;
            }
            if (Methods.isBender(un,Element.Water)) {
              players.add(ChatColor.AQUA + un);
              continue;
            }
            if (Methods.isBender(un,Element.Earth)) {
              players.add(ChatColor.GREEN + un);
              continue;
            }
            if (Methods.isBender(un,Element.Chi)) {
              players.add(ChatColor.GOLD + un);
              continue;
            }
            if (Methods.isBender(un,Element.Fire)) {
              players.add(ChatColor.RED + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        bPlayer.elements.clear();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        bPlayer.elements.clear();
        bPlayer.permaRemoved=true;
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        return true;
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GRAY+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.AQUA+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.RED+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GOLD+ ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Air);
            s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Water);
            s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Earth);
            s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Fire);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Chi);
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
          if (bTarget.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Methods.abilityExists(args[1])) {
          String ability=Methods.getAbility(args[1]);
          if (Methods.isAirAbility(ability)) {
            s.sendMessage(ChatColor.GRAY + ability + ""String_Node_Str"");
            s.sendMessage(ChatColor.GRAY + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isWaterAbility(ability)) {
            s.sendMessage(ChatColor.AQUA + ability + ""String_Node_Str"");
            s.sendMessage(ChatColor.AQUA + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isEarthAbility(ability)) {
            s.sendMessage(ChatColor.GREEN + ability + ""String_Node_Str"");
            s.sendMessage(ChatColor.GREEN + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isFireAbility(ability)) {
            s.sendMessage(ChatColor.RED + ability + ""String_Node_Str"");
            s.sendMessage(ChatColor.RED + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isChiAbility(ability)) {
            s.sendMessage(ChatColor.GOLD + ability + ""String_Node_Str"");
            s.sendMessage(ChatColor.GOLD + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(ChatColor.DARK_PURPLE + ability + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_PURPLE + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}","private void init(){
  PluginCommand projectkorra=plugin.getCommand(""String_Node_Str"");
  CommandExecutor exe;
  exe=new CommandExecutor(){
    @Override public boolean onCommand(    CommandSender s,    Command c,    String label,    String[] args){
      if (args.length == 0) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        plugin.reloadConfig();
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (args.length == 1) {
          bPlayer.abilities.clear();
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          int slot=Integer.parseInt(args[1]);
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (bPlayer.abilities.get(slot) != null) {
            bPlayer.abilities.remove(slot);
          }
          s.sendMessage(""String_Node_Str"" + slot);
          return true;
        }
      }
      if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
        if (args.length > 3 || args.length == 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability);
          s.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          String abil=args[1];
          if (!Methods.abilityExists(abil)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String ability=Methods.getAbility(abil);
          int slot=Integer.parseInt(args[2]);
          if (slot < 1 || slot > 9) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          Methods.bindAbility((Player)s,ability,slot);
          s.sendMessage(""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.airbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.airbendingabilities) {
              s.sendMessage(Methods.getAirColor() + st);
            }
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.waterbendingabilities) {
              s.sendMessage(Methods.getWaterColor() + st);
            }
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
              s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.earthbendingabilities) {
              s.sendMessage(Methods.getEarthColor() + st);
            }
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.firebendingabilities.isEmpty()) {
              s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.firebendingabilities) {
              s.sendMessage(Methods.getFireColor() + st);
            }
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            if (AbilityModuleManager.chiabilities.isEmpty()) {
              s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
              return true;
            }
            for (            String st : AbilityModuleManager.chiabilities) {
              s.sendMessage(Methods.getChiColor() + st);
            }
            return true;
          }
        }
        if (args.length == 1) {
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          HashMap<Integer,String> abilities=bPlayer.abilities;
          if (abilities.isEmpty()) {
            s.sendMessage(""String_Node_Str"");
            return true;
          }
          for (int i=1; i <= 9; i++) {
            String ability=abilities.get(i);
            if (ability != null)             s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
          }
          return true;
        }
      }
      if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (!(s instanceof Player)) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
        if (bPlayer.isToggled) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          bPlayer.isToggled=false;
          return true;
        }
 else {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          bPlayer.isToggled=true;
          return true;
        }
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length > 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          Player p=Bukkit.getPlayer(args[1]);
          if (p == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          String un=p.getName();
          s.sendMessage(un + ""String_Node_Str"");
          if (Methods.isBender(un,Element.Air)) {
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Water)) {
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Earth)) {
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Fire)) {
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          }
          if (Methods.isBender(un,Element.Chi)) {
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          }
          return true;
        }
        if (args.length == 1) {
          List<String> players=new ArrayList<String>();
          for (          Player player : Bukkit.getOnlinePlayers()) {
            String un=player.getName();
            BendingPlayer bp=Methods.getBendingPlayer(un);
            if (bp.elements.size() > 1) {
              players.add(Methods.getAvatarColor() + un);
              continue;
            }
            if (bp.elements.size() == 0) {
              players.add(un);
              continue;
            }
            if (Methods.isBender(un,Element.Air)) {
              players.add(Methods.getAirColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Water)) {
              players.add(Methods.getWaterColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Earth)) {
              players.add(Methods.getEarthColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Chi)) {
              players.add(Methods.getChiColor() + un);
              continue;
            }
            if (Methods.isBender(un,Element.Fire)) {
              players.add(Methods.getFireColor() + un);
              continue;
            }
          }
          for (          String st : players) {
            s.sendMessage(st);
          }
          return true;
        }
      }
      if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
        if (args.length != 1) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
        return true;
      }
      if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        bPlayer.elements.clear();
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
      if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        Player player=Bukkit.getPlayer(args[1]);
        if (player == null) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
        bPlayer.elements.clear();
        bPlayer.permaRemoved=true;
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
        return true;
      }
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player player=Bukkit.getPlayer(args[1]);
          if (player == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Air);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Water);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Earth);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Fire);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.addElement(Element.Chi);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
        if (args.length > 3) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 2) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!(s instanceof Player)) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
          if (bPlayer.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          if (!bPlayer.getElements().isEmpty()) {
            if (!s.hasPermission(""String_Node_Str"")) {
              s.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
          }
          if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Air);
            s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Water);
            s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Earth);
            s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Fire);
            s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
            return true;
          }
          if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
            bPlayer.setElement(Element.Chi);
            s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
            return true;
          }
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          return true;
        }
        if (args.length == 3) {
          if (!s.hasPermission(""String_Node_Str"")) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Player target=Bukkit.getPlayer(args[1]);
          if (target == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
          if (bTarget.isPermaRemoved()) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          Element e=null;
          if (Arrays.asList(airaliases).contains(args[2]))           e=Element.Air;
          if (Arrays.asList(wateraliases).contains(args[2]))           e=Element.Water;
          if (Arrays.asList(earthaliases).contains(args[2]))           e=Element.Earth;
          if (Arrays.asList(firealiases).contains(args[2]))           e=Element.Fire;
          if (Arrays.asList(chialiases).contains(args[2]))           e=Element.Chi;
          if (e == null) {
            s.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else {
            bTarget.setElement(e);
            target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
            return true;
          }
        }
      }
      if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
        if (args.length != 2) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        }
        if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return true;
        }
        if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
          s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
        }
        if (Methods.abilityExists(args[1])) {
          String ability=Methods.getAbility(args[1]);
          if (Methods.isAirAbility(ability)) {
            s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isWaterAbility(ability)) {
            s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isEarthAbility(ability)) {
            s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isFireAbility(ability)) {
            s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else           if (Methods.isChiAbility(ability)) {
            s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
          }
 else {
            s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
            s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
          }
        }
      }
      return true;
    }
  }
;
  projectkorra.setExecutor(exe);
}",0.4359322518402058
134217,"@Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    plugin.reloadConfig();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.abilities.clear();
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      int slot=Integer.parseInt(args[1]);
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (bPlayer.abilities.get(slot) != null) {
        bPlayer.abilities.remove(slot);
      }
      s.sendMessage(""String_Node_Str"" + slot);
      return true;
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability);
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      int slot=Integer.parseInt(args[2]);
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability,slot);
      s.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          s.sendMessage(ChatColor.GRAY + st);
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          s.sendMessage(ChatColor.AQUA + st);
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          s.sendMessage(ChatColor.GREEN + st);
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          s.sendMessage(ChatColor.RED + st);
        }
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          s.sendMessage(ChatColor.GOLD + st);
        }
        return true;
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.abilities;
      if (abilities.isEmpty()) {
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null)         s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (bPlayer.isToggled) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      bPlayer.isToggled=false;
      return true;
    }
 else {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      bPlayer.isToggled=true;
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (Methods.isBender(un,Element.Air)) {
        s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Water)) {
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Earth)) {
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Fire)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Chi)) {
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=Methods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(ChatColor.DARK_PURPLE + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (Methods.isBender(un,Element.Air)) {
          players.add(ChatColor.GRAY + un);
          continue;
        }
        if (Methods.isBender(un,Element.Water)) {
          players.add(ChatColor.AQUA + un);
          continue;
        }
        if (Methods.isBender(un,Element.Earth)) {
          players.add(ChatColor.GREEN + un);
          continue;
        }
        if (Methods.isBender(un,Element.Chi)) {
          players.add(ChatColor.GOLD + un);
          continue;
        }
        if (Methods.isBender(un,Element.Fire)) {
          players.add(ChatColor.RED + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    bPlayer.elements.clear();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    bPlayer.elements.clear();
    bPlayer.permaRemoved=true;
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GRAY+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.AQUA+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GREEN+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.RED+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + ChatColor.GOLD+ ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Air);
        s.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Water);
        s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Earth);
        s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Fire);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Chi);
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
      if (bTarget.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Methods.abilityExists(args[1])) {
      String ability=Methods.getAbility(args[1]);
      if (Methods.isAirAbility(ability)) {
        s.sendMessage(ChatColor.GRAY + ability + ""String_Node_Str"");
        s.sendMessage(ChatColor.GRAY + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isWaterAbility(ability)) {
        s.sendMessage(ChatColor.AQUA + ability + ""String_Node_Str"");
        s.sendMessage(ChatColor.AQUA + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isEarthAbility(ability)) {
        s.sendMessage(ChatColor.GREEN + ability + ""String_Node_Str"");
        s.sendMessage(ChatColor.GREEN + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isFireAbility(ability)) {
        s.sendMessage(ChatColor.RED + ability + ""String_Node_Str"");
        s.sendMessage(ChatColor.RED + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isChiAbility(ability)) {
        s.sendMessage(ChatColor.GOLD + ability + ""String_Node_Str"");
        s.sendMessage(ChatColor.GOLD + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(ChatColor.DARK_PURPLE + ability + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_PURPLE + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender s,Command c,String label,String[] args){
  if (args.length == 0) {
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(reloadaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    plugin.reloadConfig();
    s.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    return true;
  }
  if (Arrays.asList(clearaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (args.length == 1) {
      bPlayer.abilities.clear();
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      int slot=Integer.parseInt(args[1]);
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (bPlayer.abilities.get(slot) != null) {
        bPlayer.abilities.remove(slot);
      }
      s.sendMessage(""String_Node_Str"" + slot);
      return true;
    }
  }
  if (Arrays.asList(bindaliases).contains(args[0].toLowerCase())) {
    if (args.length > 3 || args.length == 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability);
      s.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      String abil=args[1];
      if (!Methods.abilityExists(abil)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String ability=Methods.getAbility(abil);
      int slot=Integer.parseInt(args[2]);
      if (slot < 1 || slot > 9) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (Methods.isAirAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isWaterAbility(ability) && !Methods.isBender(s.getName(),Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isEarthAbility(ability) && !Methods.isBender(s.getName(),Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isFireAbility(ability) && !Methods.isBender(s.getName(),Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Methods.isChiAbility(ability) && !Methods.isBender(s.getName(),Element.Air)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      Methods.bindAbility((Player)s,ability,slot);
      s.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  if (Arrays.asList(displayaliases).contains(args[0].toLowerCase())) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.airbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.airbendingabilities) {
          s.sendMessage(Methods.getAirColor() + st);
        }
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.waterbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.waterbendingabilities) {
          s.sendMessage(Methods.getWaterColor() + st);
        }
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.earthbendingabilities.isEmpty()) {
          s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.earthbendingabilities) {
          s.sendMessage(Methods.getEarthColor() + st);
        }
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.firebendingabilities.isEmpty()) {
          s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.firebendingabilities) {
          s.sendMessage(Methods.getFireColor() + st);
        }
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        if (AbilityModuleManager.chiabilities.isEmpty()) {
          s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
          return true;
        }
        for (        String st : AbilityModuleManager.chiabilities) {
          s.sendMessage(Methods.getChiColor() + st);
        }
        return true;
      }
    }
    if (args.length == 1) {
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      HashMap<Integer,String> abilities=bPlayer.abilities;
      if (abilities.isEmpty()) {
        s.sendMessage(""String_Node_Str"");
        return true;
      }
      for (int i=1; i <= 9; i++) {
        String ability=abilities.get(i);
        if (ability != null)         s.sendMessage(i + ""String_Node_Str"" + Methods.getAbilityColor(ability)+ ability);
      }
      return true;
    }
  }
  if (Arrays.asList(togglealiases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (!(s instanceof Player)) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
    if (bPlayer.isToggled) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      bPlayer.isToggled=false;
      return true;
    }
 else {
      s.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      bPlayer.isToggled=true;
      return true;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      Player p=Bukkit.getPlayer(args[1]);
      if (p == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String un=p.getName();
      s.sendMessage(un + ""String_Node_Str"");
      if (Methods.isBender(un,Element.Air)) {
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Water)) {
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Earth)) {
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Fire)) {
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
      }
      if (Methods.isBender(un,Element.Chi)) {
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
      }
      return true;
    }
    if (args.length == 1) {
      List<String> players=new ArrayList<String>();
      for (      Player player : Bukkit.getOnlinePlayers()) {
        String un=player.getName();
        BendingPlayer bp=Methods.getBendingPlayer(un);
        if (bp.elements.size() > 1) {
          players.add(Methods.getAvatarColor() + un);
          continue;
        }
        if (bp.elements.size() == 0) {
          players.add(un);
          continue;
        }
        if (Methods.isBender(un,Element.Air)) {
          players.add(Methods.getAirColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Water)) {
          players.add(Methods.getWaterColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Earth)) {
          players.add(Methods.getEarthColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Chi)) {
          players.add(Methods.getChiColor() + un);
          continue;
        }
        if (Methods.isBender(un,Element.Fire)) {
          players.add(Methods.getFireColor() + un);
          continue;
        }
      }
      for (      String st : players) {
        s.sendMessage(st);
      }
      return true;
    }
  }
  if (Arrays.asList(versionaliases).contains(args[0].toLowerCase())) {
    if (args.length != 1) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ plugin.getDescription().getVersion());
    return true;
  }
  if (Arrays.asList(removealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    bPlayer.elements.clear();
    s.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ s.getName());
    return true;
  }
  if (Arrays.asList(permaremovealiases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player player=Bukkit.getPlayer(args[1]);
    if (player == null) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
    bPlayer.elements.clear();
    bPlayer.permaRemoved=true;
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    s.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ player.getName());
    return true;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player player=Bukkit.getPlayer(args[1]);
      if (player == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(player.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        player.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getAirColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        player.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getWaterColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        player.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getEarthColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        player.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getFireColor()+ ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        player.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        s.sendMessage(ChatColor.DARK_AQUA + player.getName() + Methods.getChiColor()+ ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Air);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Water);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Earth);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Fire);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.addElement(Element.Chi);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (Arrays.asList(choosealiases).contains(args[0].toLowerCase())) {
    if (args.length > 3) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 2) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!(s instanceof Player)) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bPlayer=Methods.getBendingPlayer(s.getName());
      if (bPlayer.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      if (!bPlayer.getElements().isEmpty()) {
        if (!s.hasPermission(""String_Node_Str"")) {
          s.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
      }
      if (Arrays.asList(airaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Air);
        s.sendMessage(Methods.getAirColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(wateraliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Water);
        s.sendMessage(Methods.getWaterColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(earthaliases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Earth);
        s.sendMessage(Methods.getEarthColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(firealiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Fire);
        s.sendMessage(Methods.getFireColor() + ""String_Node_Str"");
        return true;
      }
      if (Arrays.asList(chialiases).contains(args[1].toLowerCase())) {
        bPlayer.setElement(Element.Chi);
        s.sendMessage(Methods.getChiColor() + ""String_Node_Str"");
        return true;
      }
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
    if (args.length == 3) {
      if (!s.hasPermission(""String_Node_Str"")) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Player target=Bukkit.getPlayer(args[1]);
      if (target == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      BendingPlayer bTarget=Methods.getBendingPlayer(target.getName());
      if (bTarget.isPermaRemoved()) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      Element e=null;
      if (Arrays.asList(airaliases).contains(args[2]))       e=Element.Air;
      if (Arrays.asList(wateraliases).contains(args[2]))       e=Element.Water;
      if (Arrays.asList(earthaliases).contains(args[2]))       e=Element.Earth;
      if (Arrays.asList(firealiases).contains(args[2]))       e=Element.Fire;
      if (Arrays.asList(chialiases).contains(args[2]))       e=Element.Chi;
      if (e == null) {
        s.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        bTarget.setElement(e);
        target.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ e.toString()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ s.getName());
        return true;
      }
    }
  }
  if (Arrays.asList(helpaliases).contains(args[0].toLowerCase())) {
    if (args.length != 2) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      return true;
    }
    if (!s.hasPermission(""String_Node_Str"")) {
      s.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(displayaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (Arrays.asList(choosealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(permaremovealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(versionaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(removealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(togglealiases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(clearaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Arrays.asList(reloadaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return true;
    }
    if (Arrays.asList(bindaliases).contains(args[1].toLowerCase())) {
      s.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      s.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (Methods.abilityExists(args[1])) {
      String ability=Methods.getAbility(args[1]);
      if (Methods.isAirAbility(ability)) {
        s.sendMessage(Methods.getAirColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAirColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isWaterAbility(ability)) {
        s.sendMessage(Methods.getWaterColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getWaterColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isEarthAbility(ability)) {
        s.sendMessage(Methods.getEarthColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getEarthColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isFireAbility(ability)) {
        s.sendMessage(Methods.getFireColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getFireColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else       if (Methods.isChiAbility(ability)) {
        s.sendMessage(Methods.getChiColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getChiColor() + AbilityModuleManager.descriptions.get(ability));
      }
 else {
        s.sendMessage(Methods.getAvatarColor() + ability + ""String_Node_Str"");
        s.sendMessage(Methods.getAvatarColor() + AbilityModuleManager.descriptions.get(ability));
      }
    }
  }
  return true;
}",0.4336465643709607
134218,"public static ITextComponent chunkPos(ChunkPos pos){
  return pos != null ? RecurrentComplex.translations.format(""String_Node_Str"",pos.chunkXPos,pos.chunkZPos) : RecurrentComplex.translations.format(""String_Node_Str"");
}","public static ITextComponent chunkPos(ChunkPos pos){
  return pos != null ? RecurrentComplex.translations.format(""String_Node_Str"",pos.x,pos.z) : RecurrentComplex.translations.format(""String_Node_Str"");
}",0.9528301886792452
134219,"public static void setSubtypes(BiomeDictionary.Type type,List<BiomeDictionary.Type> types){
  SafeReflector.of(BiomeDictionary.Type.class,""String_Node_Str"",field -> field.set(type,types));
}","public static void setSubtypes(BiomeDictionary.Type type,List<BiomeDictionary.Type> types){
  SafeReflector.of(BiomeDictionary.Type.class,field -> field.set(type,types),""String_Node_Str"");
}",0.9052631578947368
134220,"public static Map<String,BiomeDictionary.Type> getMap(){
  return SafeReflector.get(BiomeDictionary.Type.class,""String_Node_Str"",null);
}","public static Map<String,BiomeDictionary.Type> getMap(){
  return SafeReflector.get(BiomeDictionary.Type.class,null,""String_Node_Str"");
}",0.9635036496350364
134221,"public static List<BiomeDictionary.Type> getSubtypes(BiomeDictionary.Type type){
  return SafeReflector.get(BiomeDictionary.Type.class,""String_Node_Str"",type,new ArrayList<>());
}","public static List<BiomeDictionary.Type> getSubtypes(BiomeDictionary.Type type){
  return SafeReflector.get(BiomeDictionary.Type.class,type,new ArrayList<>(),""String_Node_Str"");
}",0.8994413407821229
134222,"@Override void execute(MockWorld world,ICommandSender commandSender,String[] args) throws CommandException {
  RCEntityInfo RCEntityInfo=RCCommands.getStructureEntityInfo(commandSender,null);
  SelectionOwner selectionOwner=RCCommands.getSelectionOwner(commandSender,null,true);
  RCCommands.assertSize(commandSender,selectionOwner);
  BlockArea area=selectionOwner.getSelection();
  IvWorldData worldData=IvWorldData.capture(world,area,true);
  BlockPos lowerCorner=area.getLowerCorner();
  BlockPos higherCorner=area.getHigherCorner();
  RCEntityInfo.setWorldDataClipboard(worldData.createTagCompound());
  commandSender.sendMessage(ServerTranslations.format(""String_Node_Str"",String.valueOf(lowerCorner.getX()),String.valueOf(lowerCorner.getY()),String.valueOf(lowerCorner.getZ()),String.valueOf(higherCorner.getX()),String.valueOf(higherCorner.getY()),String.valueOf(higherCorner.getZ())));
}","@Override public void execute(MockWorld world,ICommandSender commandSender,String[] args) throws CommandException {
  RCEntityInfo RCEntityInfo=RCCommands.getStructureEntityInfo(commandSender,null);
  SelectionOwner selectionOwner=RCCommands.getSelectionOwner(commandSender,null,true);
  RCCommands.assertSize(commandSender,selectionOwner);
  BlockArea area=selectionOwner.getSelection();
  IvWorldData worldData=IvWorldData.capture(world,area,true);
  BlockPos lowerCorner=area.getLowerCorner();
  BlockPos higherCorner=area.getHigherCorner();
  RCEntityInfo.setWorldDataClipboard(worldData.createTagCompound());
  commandSender.sendMessage(ServerTranslations.format(""String_Node_Str"",String.valueOf(lowerCorner.getX()),String.valueOf(lowerCorner.getY()),String.valueOf(lowerCorner.getZ()),String.valueOf(higherCorner.getX()),String.valueOf(higherCorner.getY()),String.valueOf(higherCorner.getZ())));
}",0.9961089494163424
134223,"@Override void execute(MockWorld world,ICommandSender commandSender,String[] args) throws CommandException {
  RCParameters parameters=RCParameters.of(args);
  SelectionOwner selectionOwner=RCCommands.getSelectionOwner(commandSender,null,true);
  RCCommands.assertSize(commandSender,selectionOwner);
  BlockArea area=selectionOwner.getSelection();
  double expandFloor=parameters.get().doubleAt(0).optional().orElse(1.);
  CommandSelectFloor.placeNaturalFloor(world,area,expandFloor);
  CommandSelectSpace.placeNaturalAir(world,area,3,3);
}","@Override public void execute(MockWorld world,ICommandSender commandSender,String[] args) throws CommandException {
  RCParameters parameters=RCParameters.of(args);
  SelectionOwner selectionOwner=RCCommands.getSelectionOwner(commandSender,null,true);
  RCCommands.assertSize(commandSender,selectionOwner);
  BlockArea area=selectionOwner.getSelection();
  double expandFloor=parameters.get().doubleAt(0).optional().orElse(1.);
  CommandSelectFloor.placeNaturalFloor(world,area,expandFloor);
  CommandSelectSpace.placeNaturalAir(world,area,3,3);
}",0.9935602575896963
134224,"@Override void execute(MockWorld world,ICommandSender commandSender,String[] args) throws CommandException {
  SelectionOwner selectionOwner=RCCommands.getSelectionOwner(commandSender,null,true);
  RCCommands.assertSize(commandSender,selectionOwner);
  BlockArea area=selectionOwner.getSelection();
  RCParameters parameters=RCParameters.of(args);
  int floorDistance=parameters.get().intAt(0).optional().orElse(0) + 1;
  int maxClosedSides=parameters.get().intAt(1).optional().orElse(3);
  placeNaturalAir(world,area,floorDistance,maxClosedSides);
}","@Override public void execute(MockWorld world,ICommandSender commandSender,String[] args) throws CommandException {
  SelectionOwner selectionOwner=RCCommands.getSelectionOwner(commandSender,null,true);
  RCCommands.assertSize(commandSender,selectionOwner);
  BlockArea area=selectionOwner.getSelection();
  RCParameters parameters=RCParameters.of(args);
  int floorDistance=parameters.get().intAt(0).optional().orElse(0) + 1;
  int maxClosedSides=parameters.get().intAt(1).optional().orElse(3);
  placeNaturalAir(world,area,floorDistance,maxClosedSides);
}",0.993676603432701
134225,"@Override public List<String> getTabCompletions(MinecraftServer server,ICommandSender sender,String[] args,@Nullable BlockPos pos){
  RCParameters parameters=RCParameters.of(args);
  RCExpect<?> expect=RCExpect.startRC();
  expect.next(RecurrentComplex.saver.keySet());
  expect.next(args1 -> parameters.get().first().optional().map(RecurrentComplex.saver::get).map(a -> a.getRegistry().ids()).orElse(Collections.emptySet()));
  expect.named(""String_Node_Str"").resourceDirectory();
  return expect.get(server,sender,args,pos);
}","@Override public List<String> getTabCompletions(MinecraftServer server,ICommandSender sender,String[] args,@Nullable BlockPos pos){
  RCParameters parameters=RCParameters.of(args);
  RCExpect<?> expect=RCExpect.startRC();
  expect.next(RecurrentComplex.saver.keySet());
  expect.next(args1 -> parameters.get().first().tryGet().map(RecurrentComplex.saver::get).map(a -> a.getRegistry().ids()).orElse(Collections.emptySet()));
  expect.named(""String_Node_Str"").resourceDirectory();
  return expect.get(server,sender,args,pos);
}",0.986717267552182
134226,"@Override public void execute(MinecraftServer server,ICommandSender commandSender,String[] args) throws CommandException {
  if (StructureRegistry.INSTANCE.ids().isEmpty()) {
    commandSender.addChatMessage(new TextComponentString(""String_Node_Str""));
    return;
  }
  boolean sane=true;
  sane&=addStructureLog(commandSender,(s,structure) -> !structure.generationTypes(GenerationType.class).isEmpty(),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,NaturalGeneration.class,(structure,gen) -> Biome.REGISTRY.getKeys().stream().anyMatch(b -> StructureSelector.generationWeightInBiome(gen.biomeWeights,Biome.REGISTRY.getObject(b)) > 0),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,NaturalGeneration.class,(structure,gen) -> Stream.of(DimensionManager.getIDs()).anyMatch(d -> StructureSelector.generationWeightInDimension(gen.dimensionWeights,server.worldServerForDimension(d).provider) > 0),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,NaturalGeneration.class,(structure,gen) -> gen.getActiveGenerationWeight() > 0,""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaGeneration.class,(structure,gen) -> Biome.REGISTRY.getKeys().stream().anyMatch(b -> gen.biomeMatcher.test(Biome.REGISTRY.getObject(b))),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaGeneration.class,(structure,gen) -> gen.getActiveWeight() > 0,""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaDecorationGeneration.class,(structure,gen) -> Biome.REGISTRY.getKeys().stream().anyMatch(b -> StructureSelector.generationWeightInBiome(gen.biomeWeights,Biome.REGISTRY.getObject(b)) > 0),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaDecorationGeneration.class,(structure,gen) -> Stream.of(DimensionManager.getIDs()).anyMatch(d -> StructureSelector.generationWeightInDimension(gen.dimensionWeights,server.worldServerForDimension(d).provider) > 0),""String_Node_Str"");
  if (sane)   commandSender.addChatMessage(new TextComponentString(""String_Node_Str""));
}","@Override public void execute(MinecraftServer server,ICommandSender commandSender,String[] args) throws CommandException {
  if (StructureRegistry.INSTANCE.ids().isEmpty()) {
    commandSender.sendMessage(new TextComponentString(""String_Node_Str""));
    return;
  }
  boolean sane=true;
  sane&=addStructureLog(commandSender,(s,structure) -> !structure.generationTypes(GenerationType.class).isEmpty(),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,NaturalGeneration.class,(structure,gen) -> Biome.REGISTRY.getKeys().stream().anyMatch(b -> StructureSelector.generationWeightInBiome(gen.biomeWeights,Biome.REGISTRY.getObject(b)) > 0),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,NaturalGeneration.class,(structure,gen) -> Stream.of(DimensionManager.getIDs()).anyMatch(d -> StructureSelector.generationWeightInDimension(gen.dimensionWeights,server.worldServerForDimension(d).provider) > 0),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,NaturalGeneration.class,(structure,gen) -> gen.getActiveGenerationWeight() > 0,""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaGeneration.class,(structure,gen) -> Biome.REGISTRY.getKeys().stream().anyMatch(b -> gen.biomeMatcher.test(Biome.REGISTRY.getObject(b))),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaGeneration.class,(structure,gen) -> gen.getActiveWeight() > 0,""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaDecorationGeneration.class,(structure,gen) -> Biome.REGISTRY.getKeys().stream().anyMatch(b -> StructureSelector.generationWeightInBiome(gen.biomeWeights,Biome.REGISTRY.getObject(b)) > 0),""String_Node_Str"");
  sane&=addGenerationLog(commandSender,VanillaDecorationGeneration.class,(structure,gen) -> Stream.of(DimensionManager.getIDs()).anyMatch(d -> StructureSelector.generationWeightInDimension(gen.dimensionWeights,server.worldServerForDimension(d).provider) > 0),""String_Node_Str"");
  if (sane)   commandSender.sendMessage(new TextComponentString(""String_Node_Str""));
}",0.9945598417408508
134227,"protected boolean addStructureLog(ICommandSender commandSender,BiPredicate<String,Structure<?>> predicate,String msg){
  PriorityQueue<String> structures=CommandSearchStructure.search(StructureRegistry.INSTANCE.activeIDs(),(  String name) -> predicate.test(name,StructureRegistry.INSTANCE.get(name)) ? 0 : 1);
  if (structures.size() > 0) {
    commandSender.addChatMessage(new TextComponentString(msg + ""String_Node_Str""));
    CommandSearchStructure.postResultMessage(commandSender,RCTextStyle::structure,structures);
    return false;
  }
  return true;
}","protected boolean addStructureLog(ICommandSender commandSender,BiPredicate<String,Structure<?>> predicate,String msg){
  PriorityQueue<String> structures=CommandSearchStructure.search(StructureRegistry.INSTANCE.activeIDs(),(  String name) -> predicate.test(name,StructureRegistry.INSTANCE.get(name)) ? 0 : 1);
  if (structures.size() > 0) {
    commandSender.sendMessage(new TextComponentString(msg + ""String_Node_Str""));
    CommandSearchStructure.postResultMessage(commandSender,RCTextStyle::structure,structures);
    return false;
  }
  return true;
}",0.9901168014375562
134228,"@Override public void readUpdateData(ByteBuf buffer,String context){
  if (""String_Node_Str"".equals(context)) {
    previewType=Operation.PreviewType.findOrDefault(ByteBufUtils.readUTF8String(buffer),Operation.PreviewType.SHAPE);
  }
 else   if (""String_Node_Str"".equals(context)) {
    try {
      NBTTagCompound tag=ByteBufUtils.readTag(buffer);
      danglingOperation=tag != null ? OperationRegistry.readOperation(tag) : null;
    }
 catch (    Exception e) {
      RecurrentComplex.logger.warn(""String_Node_Str"",buffer);
    }
  }
 else   if (""String_Node_Str"".equals(context)) {
    showGrid=buffer.readBoolean();
  }
}","@Override public void readUpdateData(ByteBuf buffer,String context){
  if (""String_Node_Str"".equals(context)) {
    previewType=Operation.PreviewType.findOrDefault(ByteBufUtils.readUTF8String(buffer),Operation.PreviewType.SHAPE);
  }
 else   if (""String_Node_Str"".equals(context)) {
    try {
      NBTTagCompound tag=ByteBufUtils.readTag(buffer);
      danglingOperation=tag != null ? OperationRegistry.readOperation(tag) : null;
    }
 catch (    Exception e) {
      RecurrentComplex.logger.warn(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(context)) {
    showGrid=buffer.readBoolean();
  }
}",0.9943775100401606
134229,"public static SchematicFile loadSchematicFromFile(File file) throws SchematicFile.UnsupportedSchematicFormatException {
  NBTTagCompound compound=null;
  try (FileInputStream fileInputStream=new FileInputStream(file)){
    compound=CompressedStreamTools.readCompressed(fileInputStream);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (compound != null)   return new SchematicFile(compound);
  return null;
}","public static SchematicFile loadSchematicFromFile(File file) throws SchematicFile.UnsupportedSchematicFormatException {
  NBTTagCompound compound=null;
  try (FileInputStream fileInputStream=new FileInputStream(file)){
    compound=CompressedStreamTools.readCompressed(fileInputStream);
  }
 catch (  Exception e) {
    throw new SchematicFile.UnsupportedSchematicFormatException(""String_Node_Str"");
  }
  if (compound != null)   return new SchematicFile(compound);
  return null;
}",0.8974641675854466
134230,"public static int getRotations(EnumFacing front,boolean mirrorX,EnumFacing toFront){
  Integer rotations=Directions.getHorizontalClockwiseRotations(front,toFront,mirrorX);
  return rotations == null ? 0 : rotations;
}","public static int getRotations(EnumFacing front,boolean mirrorX,EnumFacing toFront){
  Integer rotations=RCDirections.getHorizontalClockwiseRotations(front,toFront,mirrorX);
  return rotations == null ? 0 : rotations;
}",0.9954128440366972
134231,"@Override public InstanceData prepareInstanceData(StructurePrepareContext context,BlockPos pos){
  WorldScriptStructureGenerator.InstanceData instanceData=null;
  Random random=context.random;
  AxisAlignedTransform2D transform=context.transform;
  if (simpleMode) {
    if (structureNames.size() > 0) {
      String structureID=structureNames.get(random.nextInt(structureNames.size()));
      StructureInfo<?> structureInfo=StructureRegistry.INSTANCE.get(structureID);
      if (structureInfo != null) {
        int rotations=structureInfo.isRotatable() ? (structureRotation != null ? transform.getRotation() + structureRotation : random.nextInt(4)) : 0;
        boolean mirrorX=structureInfo.isMirrorable() && (structureMirror != null ? transform.isMirrorX() != structureMirror : random.nextBoolean());
        AxisAlignedTransform2D strucTransform=AxisAlignedTransform2D.from(rotations,mirrorX);
        int[] strucSize=structureInfo.size();
        BlockPos strucCoord=transform.apply(structureShift,new int[]{1,1,1}).subtract(transform.apply(BlockPos.ORIGIN,strucSize)).add(pos);
        instanceData=new WorldScriptStructureGenerator.InstanceData(structureID,null,strucCoord,strucTransform,new StructureGenerator<>(structureInfo).random(random).environment(context.environment).transform(strucTransform).lowerCoord(strucCoord).asSource(context.generateAsSource).instanceData().orElse(null));
      }
    }
  }
 else {
    Collection<Pair<StructureInfo,ListGenerationInfo>> generationInfos=StructureRegistry.INSTANCE.getStructuresInList(structureListID,front);
    if (generationInfos.size() > 0) {
      Pair<StructureInfo,ListGenerationInfo> pair=WeightedSelector.select(random,generationInfos,item -> RCConfig.tweakedSpawnRate(StructureRegistry.INSTANCE.id(item.getLeft())) * item.getRight().getWeight());
      StructureInfo structureInfo=pair.getLeft();
      String structureID=StructureRegistry.INSTANCE.id(structureInfo);
      ListGenerationInfo generationInfo=pair.getRight();
      boolean mirrorX;
      int rotations;
      if (front != null) {
        EnumFacing curFront=Directions.rotate(front,transform);
        mirrorX=structureInfo.isMirrorable() && structureInfo.isRotatable() && random.nextBoolean();
        Integer neededRotations=Directions.getHorizontalClockwiseRotations(curFront,generationInfo.front,mirrorX);
        rotations=neededRotations != null ? neededRotations : 0;
      }
 else {
        mirrorX=structureInfo.isMirrorable() && random.nextBoolean();
        rotations=structureInfo.isRotatable() ? random.nextInt(4) : 0;
      }
      AxisAlignedTransform2D strucTransform=AxisAlignedTransform2D.from(rotations,mirrorX);
      int[] strucSize=structureInfo.size();
      BlockPos strucCoord=transform.apply(structureShift.add(generationInfo.shift),new int[]{1,1,1}).subtract(transform.apply(BlockPos.ORIGIN,strucSize)).add(pos);
      instanceData=new WorldScriptStructureGenerator.InstanceData(structureID,generationInfo.id(),strucCoord,strucTransform,(NBTStorable)new StructureGenerator<>(structureInfo).random(random).environment(context.environment).transform(strucTransform).asSource(context.generateAsSource).lowerCoord(strucCoord).instanceData().orElse(null));
    }
  }
  return instanceData != null ? instanceData : new WorldScriptStructureGenerator.InstanceData();
}","@Override public InstanceData prepareInstanceData(StructurePrepareContext context,BlockPos pos){
  WorldScriptStructureGenerator.InstanceData instanceData=null;
  Random random=context.random;
  AxisAlignedTransform2D transform=context.transform;
  if (simpleMode) {
    if (structureNames.size() > 0) {
      String structureID=structureNames.get(random.nextInt(structureNames.size()));
      StructureInfo<?> structureInfo=StructureRegistry.INSTANCE.get(structureID);
      if (structureInfo != null) {
        int rotations=structureInfo.isRotatable() ? (structureRotation != null ? transform.getRotation() + structureRotation : random.nextInt(4)) : 0;
        boolean mirrorX=structureInfo.isMirrorable() && (structureMirror != null ? transform.isMirrorX() != structureMirror : random.nextBoolean());
        AxisAlignedTransform2D strucTransform=AxisAlignedTransform2D.from(rotations,mirrorX);
        int[] strucSize=structureInfo.size();
        BlockPos strucCoord=transform.apply(structureShift,new int[]{1,1,1}).subtract(transform.apply(BlockPos.ORIGIN,strucSize)).add(pos);
        instanceData=new WorldScriptStructureGenerator.InstanceData(structureID,null,strucCoord,strucTransform,new StructureGenerator<>(structureInfo).random(random).environment(context.environment).transform(strucTransform).lowerCoord(strucCoord).asSource(context.generateAsSource).instanceData().orElse(null));
      }
    }
  }
 else {
    Collection<Pair<StructureInfo,ListGenerationInfo>> generationInfos=StructureRegistry.INSTANCE.getStructuresInList(structureListID,front);
    if (generationInfos.size() > 0) {
      Pair<StructureInfo,ListGenerationInfo> pair=WeightedSelector.select(random,generationInfos,item -> RCConfig.tweakedSpawnRate(StructureRegistry.INSTANCE.id(item.getLeft())) * item.getRight().getWeight());
      StructureInfo structureInfo=pair.getLeft();
      String structureID=StructureRegistry.INSTANCE.id(structureInfo);
      ListGenerationInfo generationInfo=pair.getRight();
      boolean mirrorX;
      int rotations;
      if (front != null) {
        EnumFacing curFront=Directions.rotate(front,transform);
        mirrorX=structureInfo.isMirrorable() && structureInfo.isRotatable() && random.nextBoolean();
        Integer neededRotations=RCDirections.getHorizontalClockwiseRotations(curFront,generationInfo.front,mirrorX);
        rotations=neededRotations != null ? neededRotations : 0;
      }
 else {
        mirrorX=structureInfo.isMirrorable() && random.nextBoolean();
        rotations=structureInfo.isRotatable() ? random.nextInt(4) : 0;
      }
      AxisAlignedTransform2D strucTransform=AxisAlignedTransform2D.from(rotations,mirrorX);
      int[] strucSize=structureInfo.size();
      BlockPos strucCoord=transform.apply(structureShift.add(generationInfo.shift),new int[]{1,1,1}).subtract(transform.apply(BlockPos.ORIGIN,strucSize)).add(pos);
      instanceData=new WorldScriptStructureGenerator.InstanceData(structureID,generationInfo.id(),strucCoord,strucTransform,(NBTStorable)new StructureGenerator<>(structureInfo).random(random).environment(context.environment).transform(strucTransform).asSource(context.generateAsSource).lowerCoord(strucCoord).instanceData().orElse(null));
    }
  }
  return instanceData != null ? instanceData : new WorldScriptStructureGenerator.InstanceData();
}",0.9996988858777476
134232,"@Override public void processServer(PacketSaveInvGenComponent message,MessageContext ctx,WorldServer server){
  NetHandlerPlayServer playServer=ctx.getServerHandler();
  EntityPlayerMP player=playServer.playerEntity;
  if (RecurrentComplex.checkPerms(player))   return;
  SaveDirectoryData.Result saveDirectoryDataResult=message.getSaveDirectoryDataResult();
  String path=saveDirectoryDataResult.directory.subDirectoryName() + ""String_Node_Str"";
  String id=message.getKey();
  GenericItemCollectionRegistry.INSTANCE.register(id,""String_Node_Str"",message.getInventoryGenerator(),saveDirectoryDataResult.directory.isActive(),LeveledRegistry.Level.CUSTOM);
  if (RCCommands.informSaveResult((message.getInventoryGenerator() != null && id != null) && RecurrentComplex.saver.trySave(saveDirectoryDataResult.directory.toPath(),RCFileSuffix.INVENTORY_GENERATION_COMPONENT,id),player,path,RCFileSaver.INVENTORY_GENERATION_COMPONENT,id)) {
    if (saveDirectoryDataResult.deleteOther)     RCCommands.informDeleteResult(RecurrentComplex.saver.tryDeleteWithID(saveDirectoryDataResult.directory.opposite().toPath(),id,RCFileSuffix.INVENTORY_GENERATION_COMPONENT),player,RCFileSaver.INVENTORY_GENERATION_COMPONENT,id,saveDirectoryDataResult.directory.opposite().subDirectoryName());
    ItemStack heldItem=playServer.playerEntity.getHeldItem(EnumHand.MAIN_HAND);
    if (heldItem != null && heldItem.getItem() instanceof ItemInventoryGenComponentTag)     ItemInventoryGenComponentTag.setComponentKey(heldItem,id);
    player.openContainer.detectAndSendChanges();
  }
}","@Override public void processServer(PacketSaveInvGenComponent message,MessageContext ctx,WorldServer server){
  NetHandlerPlayServer playServer=ctx.getServerHandler();
  EntityPlayerMP player=playServer.playerEntity;
  if (RecurrentComplex.checkPerms(player))   return;
  SaveDirectoryData.Result saveDirectoryDataResult=message.getSaveDirectoryDataResult();
  String id=message.getKey();
  ResourceDirectory saveDir=saveDirectoryDataResult.directory;
  ResourceDirectory delDir=saveDir.opposite();
  GenericItemCollectionRegistry.INSTANCE.register(id,""String_Node_Str"",message.getInventoryGenerator(),saveDir.isActive(),saveDir.getLevel());
  if (RCCommands.informSaveResult((message.getInventoryGenerator() != null && id != null) && RecurrentComplex.saver.trySave(saveDir.toPath(),RCFileSuffix.INVENTORY_GENERATION_COMPONENT,id),player,saveDir.subDirectoryName(),RCFileSaver.INVENTORY_GENERATION_COMPONENT,id)) {
    if (saveDirectoryDataResult.deleteOther)     RCCommands.informDeleteResult(RecurrentComplex.saver.tryDeleteWithID(delDir.toPath(),id,RCFileSuffix.INVENTORY_GENERATION_COMPONENT),player,RCFileSaver.INVENTORY_GENERATION_COMPONENT,id,delDir.subDirectoryName());
    ItemStack heldItem=playServer.playerEntity.getHeldItem(EnumHand.MAIN_HAND);
    if (heldItem != null && heldItem.getItem() instanceof ItemInventoryGenComponentTag)     ItemInventoryGenComponentTag.setComponentKey(heldItem,id);
    player.openContainer.detectAndSendChanges();
  }
}",0.8536423841059603
134233,"@Override public void processServer(PacketSaveStructure message,MessageContext ctx,WorldServer server){
  NetHandlerPlayServer netHandlerPlayServer=ctx.getServerHandler();
  EntityPlayerMP player=netHandlerPlayServer.playerEntity;
  if (RecurrentComplex.checkPerms(player))   return;
  StructureEntityInfo structureEntityInfo=StructureEntityInfo.get(player,null);
  GenericStructureInfo genericStructureInfo=message.getStructureInfo();
  if (structureEntityInfo != null)   genericStructureInfo.worldDataCompound=structureEntityInfo.getCachedExportStructureBlockDataNBT();
  SaveDirectoryData.Result saveDirectoryDataResult=message.getSaveDirectoryDataResult();
  String id=message.getStructureID();
  ResourceDirectory saveDir=saveDirectoryDataResult.directory;
  ResourceDirectory delDir=saveDir.opposite();
  StructureRegistry.INSTANCE.register(id,""String_Node_Str"",genericStructureInfo,saveDir.isActive(),LeveledRegistry.Level.CUSTOM);
  if (RCCommands.informSaveResult(RecurrentComplex.saver.trySave(saveDir.toPath(),RCFileSaver.STRUCTURE,id),player,saveDir.subDirectoryName(),RCFileSaver.STRUCTURE,id))   if (saveDirectoryDataResult.deleteOther)   RCCommands.informDeleteResult(RecurrentComplex.saver.tryDeleteWithID(delDir.toPath(),id,RCFileSaver.STRUCTURE),player,RCFileSaver.STRUCTURE,id,delDir.subDirectoryName());
}","@Override public void processServer(PacketSaveStructure message,MessageContext ctx,WorldServer server){
  NetHandlerPlayServer netHandlerPlayServer=ctx.getServerHandler();
  EntityPlayerMP player=netHandlerPlayServer.playerEntity;
  if (RecurrentComplex.checkPerms(player))   return;
  StructureEntityInfo structureEntityInfo=StructureEntityInfo.get(player,null);
  GenericStructureInfo genericStructureInfo=message.getStructureInfo();
  if (structureEntityInfo != null)   genericStructureInfo.worldDataCompound=structureEntityInfo.getCachedExportStructureBlockDataNBT();
  SaveDirectoryData.Result saveDirectoryDataResult=message.getSaveDirectoryDataResult();
  String id=message.getStructureID();
  ResourceDirectory saveDir=saveDirectoryDataResult.directory;
  ResourceDirectory delDir=saveDir.opposite();
  StructureRegistry.INSTANCE.register(id,""String_Node_Str"",genericStructureInfo,saveDir.isActive(),saveDir.getLevel());
  if (RCCommands.informSaveResult(RecurrentComplex.saver.trySave(saveDir.toPath(),RCFileSaver.STRUCTURE,id),player,saveDir.subDirectoryName(),RCFileSaver.STRUCTURE,id))   if (saveDirectoryDataResult.deleteOther)   RCCommands.informDeleteResult(RecurrentComplex.saver.tryDeleteWithID(delDir.toPath(),id,RCFileSaver.STRUCTURE),player,RCFileSaver.STRUCTURE,id,delDir.subDirectoryName());
}",0.9863636363636364
134234,"@Override public StructureInfo register(String id,String domain,StructureInfo structureInfo,boolean active,ILevel level){
  if (active && !(RCConfig.shouldStructureGenerate(id,domain) && structureInfo.areDependenciesResolved()))   active=false;
  clearCaches();
  return super.register(id,domain,structureInfo,active,level);
}","@Override public StructureInfo register(String id,String domain,StructureInfo structureInfo,boolean active,ILevel level){
  if (active && !(RCConfig.shouldStructureGenerate(id,domain) && structureInfo.areDependenciesResolved()))   active=false;
  StructureInfo prev=super.register(id,domain,structureInfo,active,level);
  clearCaches();
  return prev;
}",0.8070692194403535
134235,"@Override public GenericItemCollection.Component register(String id,String domain,GenericItemCollection.Component component,boolean active,ILevel level){
  if (component.inventoryGeneratorID == null || component.inventoryGeneratorID.length() == 0)   component.inventoryGeneratorID=id;
  if (active && !RCConfig.shouldInventoryGeneratorGenerate(id,domain))   active=false;
  Set<String> generating=activeIDs().stream().collect(Collectors.toSet());
  GenericItemCollection.Component register=super.register(id,domain,component,active,level);
  clearCaches(generating);
  return register;
}","@Override public GenericItemCollection.Component register(String id,String domain,GenericItemCollection.Component component,boolean active,ILevel level){
  if (component.inventoryGeneratorID == null || component.inventoryGeneratorID.length() == 0)   component.inventoryGeneratorID=id;
  if (active && !RCConfig.shouldInventoryGeneratorGenerate(id,domain))   active=false;
  Set<String> generating=activeIDs().stream().collect(Collectors.toSet());
  GenericItemCollection.Component prev=super.register(id,domain,component,active,level);
  clearCaches(generating);
  return prev;
}",0.9794168096054888
134236,"@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (isListSegment(segment)) {
    T t=list.get(index);
    TableCellButton[] cells=getEntryActions(index);
    for (    TableCellButton cell : cells) {
      cell.addAction(() -> {
        T entry=list.get(index);
        performEntryAction(cell.actionID,index,entry);
      }
);
      cell.id=""String_Node_Str"" + index;
    }
    return new TableElementCell(getDisplayString(t),new TableCellMulti(cells));
  }
  int addIndex=getAddIndex(segment);
  if (addIndex >= 0) {
    if (isUsesPresetActionForAdding()) {
      TableCellPresetAction cell=new TableCellPresetAction(""String_Node_Str"" + addIndex,getAddTitle(),getAddActions());
      cell.setActionButtonWidth(0.2f);
      cell.addAction(actionID -> createAddAction(addIndex,actionID).run());
      return new TableElementCell(cell);
    }
 else {
      TableCellButton[] cells=getAddActions();
      for (      TableCellButton cell : cells) {
        cell.addAction(createAddAction(addIndex,cell.actionID));
        cell.id=""String_Node_Str"" + addIndex;
      }
      return new TableElementCell(new TableCellMulti(cells));
    }
  }
  return null;
}","@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (isListSegment(segment)) {
    T t=list.get(index);
    TableCellButton[] cells=getEntryActions(index);
    for (    TableCellButton cell : cells) {
      cell.addAction(() -> {
        T entry=list.get(index);
        performEntryAction(cell.actionID,index,entry);
      }
);
      cell.setId(""String_Node_Str"" + index);
    }
    return new TableElementCell(getDisplayString(t),new TableCellMulti(cells));
  }
  int addIndex=getAddIndex(segment);
  if (addIndex >= 0) {
    if (isUsesPresetActionForAdding()) {
      TableCellPresetAction cell=new TableCellPresetAction(""String_Node_Str"" + addIndex,getAddTitle(),getAddActions());
      cell.setActionButtonWidth(0.2f);
      cell.addAction(actionID -> createAddAction(addIndex,actionID).run());
      return new TableElementCell(cell);
    }
 else {
      TableCellButton[] cells=getAddActions();
      for (      TableCellButton cell : cells) {
        cell.addAction(createAddAction(addIndex,cell.actionID));
        cell.setId(""String_Node_Str"" + addIndex);
      }
      return new TableElementCell(new TableCellMulti(cells));
    }
  }
  return null;
}",0.991701244813278
134237,"@Override public void execute(MinecraftServer server,ICommandSender commandSender,String[] args) throws CommandException {
  if (args.length <= 0) {
    throw ServerTranslations.wrongUsageException(""String_Node_Str"");
  }
  String structureID=args[0];
  StructureInfo<?> structureInfo=StructureRegistry.INSTANCE.getStructure(structureID);
  World world=commandSender.getEntityWorld();
  if (structureInfo == null) {
    throw ServerTranslations.commandException(""String_Node_Str"",structureID);
  }
  BlockPos coord;
  if (args.length >= 4)   coord=parseBlockPos(commandSender,args,1,false);
 else   coord=commandSender.getPosition();
  int rotation=args.length >= 5 ? parseInt(args[4]) : 0;
  boolean mirror=args.length >= 6 && parseBoolean(args[5]);
  AxisAlignedTransform2D transform=AxisAlignedTransform2D.from(rotation,mirror);
  if (structureInfo instanceof GenericStructureInfo)   OperationRegistry.queueOperation(new OperationGenerateStructure((GenericStructureInfo)structureInfo,null,transform,coord,true,structureID),commandSender);
 else {
    new StructureGenerator<>(structureInfo).world((WorldServer)world).transform(transform).lowerCoord(coord).asSource(true).generate();
  }
}","@Override public void execute(MinecraftServer server,ICommandSender commandSender,String[] args) throws CommandException {
  if (args.length <= 0) {
    throw ServerTranslations.wrongUsageException(""String_Node_Str"");
  }
  String structureID=args[0];
  StructureInfo<?> structureInfo=StructureRegistry.INSTANCE.getStructure(structureID);
  World world=commandSender.getEntityWorld();
  if (structureInfo == null) {
    throw ServerTranslations.commandException(""String_Node_Str"",structureID);
  }
  BlockPos coord;
  if (args.length >= 4)   coord=parseBlockPos(commandSender,args,1,false);
 else   coord=commandSender.getPosition();
  int rotation=args.length >= 5 ? parseInt(args[4]) : 0;
  boolean mirror=args.length >= 6 && parseBoolean(args[5]);
  AxisAlignedTransform2D transform=AxisAlignedTransform2D.from(rotation,mirror);
  if (structureInfo instanceof GenericStructureInfo)   OperationRegistry.queueOperation(new OperationGenerateStructure((GenericStructureInfo)structureInfo,structureID,transform,coord,true,structureID),commandSender);
 else {
    new StructureGenerator<>(structureInfo).world((WorldServer)world).transform(transform).lowerCoord(coord).asSource(true).generate();
  }
}",0.9937212222687316
134238,"@Nullable public StructureSpawnContext generate(){
  StructureSpawnContext context=spawn();
  StructureInfo<S> structureInfo=structure();
  String structureID=structureID();
  boolean firstTime=context.isFirstTime();
  WorldServer world=context.environment.world;
  int[] sizeInts=sizeInts(context.boundingBox);
  int[] coordInts=coordInts(context.boundingBox);
  if (maturity() != StructureSpawnContext.GenerateMaturity.SUGGEST || (context.boundingBox.minY >= MIN_DIST_TO_LIMIT && context.boundingBox.maxY <= world.getHeight() - 1 - MIN_DIST_TO_LIMIT && (!RCConfig.avoidOverlappingGeneration || !memorize || StructureGenerationData.get(world).getEntriesAt(context.boundingBox).size() == 0) && !RCEventBus.INSTANCE.post(new StructureGenerationEvent.Suggest(structureInfo,context)) && !MinecraftForge.EVENT_BUS.post(new StructureGenerationEventLite.Suggest(world,structureID,coordInts,sizeInts,context.generationLayer)))) {
    if (firstTime) {
      RCEventBus.INSTANCE.post(new StructureGenerationEvent.Pre(structureInfo,context));
      MinecraftForge.EVENT_BUS.post(new StructureGenerationEventLite.Pre(world,structureID,coordInts,sizeInts,context.generationLayer));
    }
    boolean success=structureInfo.generate(context,instanceData());
    if (firstTime && success) {
      RecurrentComplex.logger.trace(String.format(""String_Node_Str"",name(structureID),context.boundingBox));
      RCEventBus.INSTANCE.post(new StructureGenerationEvent.Post(structureInfo,context));
      MinecraftForge.EVENT_BUS.post(new StructureGenerationEventLite.Post(world,structureID,coordInts,sizeInts,context.generationLayer));
      if (structureID != null && memorize)       StructureGenerationData.get(world).addCompleteEntry(structureID,generationInfo.id(),context.lowerCoord(),context.transform);
    }
    return success ? context : null;
  }
 else   RecurrentComplex.logger.trace(String.format(""String_Node_Str"",structureID,context.boundingBox));
  return null;
}","@Nullable public StructureSpawnContext generate(){
  StructureSpawnContext context=spawn();
  StructureInfo<S> structureInfo=structure();
  String structureID=structureID();
  boolean firstTime=context.isFirstTime();
  WorldServer world=context.environment.world;
  int[] sizeInts=sizeInts(context.boundingBox);
  int[] coordInts=coordInts(context.boundingBox);
  if (maturity() != StructureSpawnContext.GenerateMaturity.SUGGEST || (context.boundingBox.minY >= MIN_DIST_TO_LIMIT && context.boundingBox.maxY <= world.getHeight() - 1 - MIN_DIST_TO_LIMIT && (!RCConfig.avoidOverlappingGeneration || !memorize || StructureGenerationData.get(world).getEntriesAt(context.boundingBox).size() == 0) && !RCEventBus.INSTANCE.post(new StructureGenerationEvent.Suggest(structureInfo,context)) && !MinecraftForge.EVENT_BUS.post(new StructureGenerationEventLite.Suggest(world,structureID,coordInts,sizeInts,context.generationLayer)))) {
    if (firstTime) {
      RCEventBus.INSTANCE.post(new StructureGenerationEvent.Pre(structureInfo,context));
      MinecraftForge.EVENT_BUS.post(new StructureGenerationEventLite.Pre(world,structureID,coordInts,sizeInts,context.generationLayer));
    }
    boolean success=structureInfo.generate(context,instanceData());
    if (firstTime && success) {
      RecurrentComplex.logger.trace(String.format(""String_Node_Str"",name(structureID),context.boundingBox));
      RCEventBus.INSTANCE.post(new StructureGenerationEvent.Post(structureInfo,context));
      MinecraftForge.EVENT_BUS.post(new StructureGenerationEventLite.Post(world,structureID,coordInts,sizeInts,context.generationLayer));
      if (structureID != null && memorize)       StructureGenerationData.get(world).addCompleteEntry(structureID,generationInfo != null ? generationInfo.id() : null,context.lowerCoord(),context.transform);
    }
    return success ? context : null;
  }
 else   RecurrentComplex.logger.trace(String.format(""String_Node_Str"",structureID,context.boundingBox));
  return null;
}",0.989345509893455
134239,"@Override public void transformBlock(InstanceData instanceData,Phase phase,StructureSpawnContext context,BlockPos sourcePos,BlockPos worldPos,IBlockState sourceState,double density){
  WorldServer world=context.environment.world;
  if (phase == Phase.AFTER) {
    Set<BlockPos> remove=new HashSet<>();
    if (visitRecursively(new BlockArea(worldPos.subtract(new Vec3i(2,2,2)),worldPos.add(new Vec3i(2,2,2))).stream().filter(pos -> !instanceData.cloud.containsKey(pos)).collect(Collectors.toCollection(HashSet::new)),(changed,pos) -> {
      IBlockState state=world.getBlockState(pos);
      boolean isFoliage=RCBlockLogic.isFoliage(state,world,pos);
      if (!RCBlockLogic.canStay(state,world,pos))       context.setBlock(pos,Blocks.AIR.getDefaultState(),2);
 else       if (!isFoliage && !state.getBlock().isReplaceable(world,pos))       return false;
 else       if (isFoliage && remove.size() < MAX_TREE_SIZE && remove.add(pos))       neighbors(pos).forEach(changed::add);
      return true;
    }
)) {
      remove.forEach(pos -> context.setBlock(pos,Blocks.AIR.getDefaultState(),2));
    }
  }
 else {
    context.setBlock(worldPos,Blocks.AIR.getDefaultState(),2);
  }
}","@Override public void transformBlock(InstanceData instanceData,Phase phase,StructureSpawnContext context,BlockPos sourcePos,BlockPos worldPos,IBlockState sourceState,double density){
  WorldServer world=context.environment.world;
  if (phase == Phase.AFTER) {
    Set<BlockPos> remove=new HashSet<>();
    HashSet<BlockPos> check=new BlockArea(worldPos.subtract(new Vec3i(2,2,2)),worldPos.add(new Vec3i(2,2,2))).stream().filter(pos -> !instanceData.cloud.containsKey(pos)).collect(Collectors.toCollection(HashSet::new));
    if (visitRecursively(check,(changed,pos) -> {
      IBlockState state=world.getBlockState(pos);
      boolean isFoliage=RCBlockLogic.isFoliage(state,world,pos);
      if (!RCBlockLogic.canStay(state,world,pos))       context.setBlock(pos,Blocks.AIR.getDefaultState(),2);
 else       if (!isFoliage && !state.getBlock().isReplaceable(world,pos))       return false;
 else       if (isFoliage && remove.size() < MAX_TREE_SIZE && remove.add(pos))       neighbors(pos).forEach(changed::add);
      return true;
    }
)) {
      remove.forEach(pos -> context.setBlock(pos,Blocks.AIR.getDefaultState(),2));
    }
  }
 else {
    context.setBlock(worldPos,Blocks.AIR.getDefaultState(),2);
  }
}",0.9677689409794892
134240,"@Nonnull @Override public <I extends StructureGenerationInfo>List<I> generationInfos(@Nonnull Class<I> clazz){
  return generationInfos.stream().filter(info -> clazz.isAssignableFrom(info.getClass())).map(info -> (I)info).collect(Collectors.toList());
}","@Nonnull @Override public <I extends StructureGenerationInfo>List<I> generationInfos(@Nonnull Class<? extends I> clazz){
  return generationInfos.stream().filter(info -> clazz.isAssignableFrom(info.getClass())).map(info -> (I)info).collect(Collectors.toList());
}",0.9806201550387597
134241,"private GuiValidityStateIndicator.State currentNameState(){
  if (StructureRegistry.INSTANCE.allStructureIDs().contains(structureKey))   return GuiValidityStateIndicator.State.SEMI_VALID;
  return structureKey.trim().length() > 0 && !structureKey.contains(""String_Node_Str"") ? GuiValidityStateIndicator.State.VALID : GuiValidityStateIndicator.State.INVALID;
}","private GuiValidityStateIndicator.State currentNameState(){
  return StructureInfos.isSimpleID(structureKey) ? StructureRegistry.INSTANCE.allStructureIDs().contains(structureKey) ? GuiValidityStateIndicator.State.SEMI_VALID : GuiValidityStateIndicator.State.VALID : GuiValidityStateIndicator.State.INVALID;
}",0.7706146926536732
134242,"@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 0) {
    TableCellString cell=new TableCellString(""String_Node_Str"",genInfo.id());
    cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
    cell.setShowsValidityState(true);
    cell.setValidityState(StructureInfos.isSimpleIDState(genInfo.id()));
    cell.addPropertyListener(cell1 -> {
      genInfo.setID((String)cell1.getPropertyValue());
      ((TableCellString)cell1).setValidityState(StructureInfos.isSimpleIDState(genInfo.id()));
    }
);
    return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
  }
  return super.elementForIndexInSegment(table,index,segment);
}","@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 0) {
    TableCellString cell=new TableCellString(""String_Node_Str"",genInfo.id());
    cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
    cell.setShowsValidityState(true);
    cell.setValidityState(currentIDState());
    cell.addPropertyListener(cell1 -> {
      genInfo.setID((String)cell1.getPropertyValue());
      ((TableCellString)cell1).setValidityState(currentIDState());
    }
);
    return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
  }
  return super.elementForIndexInSegment(table,index,segment);
}",0.938953488372093
134243,"@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
switch (segment) {
case 1:
{
      TableCellString cell=new TableCellString(""String_Node_Str"",generationInfo.listID);
      cell.addPropertyListener(this);
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
case 2:
  return RCGuiTables.defaultWeightElement(cell -> generationInfo.weight=TableElements.toDouble((Float)cell.getPropertyValue()),generationInfo.weight);
case 4:
{
  TableCellEnum cell=new TableCellEnum<>(""String_Node_Str"",generationInfo.front,TableDirections.getDirectionOptions(Directions.HORIZONTAL));
  cell.addPropertyListener(this);
  return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
}
return super.elementForIndexInSegment(table,index,segment);
}","@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
switch (segment) {
case 1:
{
      TableCellString cell=new TableCellString(""String_Node_Str"",generationInfo.listID);
      cell.setShowsValidityState(true);
      cell.setValidityState(currentStructureListIDState());
      cell.addPropertyListener(cell1 -> {
        generationInfo.listID=cell.getPropertyValue();
        cell.setValidityState(currentStructureListIDState());
      }
);
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
case 2:
  return RCGuiTables.defaultWeightElement(cell -> generationInfo.weight=TableElements.toDouble((Float)cell.getPropertyValue()),generationInfo.weight);
case 4:
{
  TableCellEnum cell=new TableCellEnum<>(""String_Node_Str"",generationInfo.front,TableDirections.getDirectionOptions(Directions.HORIZONTAL));
  cell.addPropertyListener(cell1 -> generationInfo.front=(EnumFacing)cell.getPropertyValue());
  return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
}
return super.elementForIndexInSegment(table,index,segment);
}",0.8399792853443812
134244,"@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 2) {
switch (index) {
case 0:
{
        TableCellFloatNullable cell=new TableCellFloatNullable(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionDistance),1.0f,0,40,""String_Node_Str"",""String_Node_Str"");
        cell.setScale(Scales.pow(5));
        cell.addPropertyListener(this);
        cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
        return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
      }
case 1:
{
      TableCellFloatNullable cell=new TableCellFloatNullable(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionRandomization),1.0f,0,40,""String_Node_Str"",""String_Node_Str"");
      cell.setScale(Scales.pow(5));
      cell.addPropertyListener(this);
      cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
}
}
return super.elementForIndexInSegment(table,index,segment);
}","@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 2) {
switch (index) {
case 0:
{
        TableCellFloat cell=new TableCellFloat(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionDistance),0,40);
        cell.setScale(Scales.pow(5));
        cell.addPropertyListener(this);
        cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
        return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
      }
case 1:
{
      TableCellFloat cell=new TableCellFloat(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionRandomization),0,40);
      cell.setScale(Scales.pow(5));
      cell.addPropertyListener(this);
      cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
}
}
return super.elementForIndexInSegment(table,index,segment);
}",0.9435643564356436
134245,"@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 2) {
switch (index) {
case 0:
{
        TableCellFloatNullable cell=new TableCellFloatNullable(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionDistance),1.0f,0,40,""String_Node_Str"",""String_Node_Str"");
        cell.setScale(Scales.pow(5));
        cell.addPropertyListener(this);
        cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
        return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
      }
case 1:
{
      TableCellFloatNullable cell=new TableCellFloatNullable(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionRandomization),1.0f,0,40,""String_Node_Str"",""String_Node_Str"");
      cell.setScale(Scales.pow(5));
      cell.addPropertyListener(this);
      cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
}
}
return super.elementForIndexInSegment(table,index,segment);
}","@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 2) {
switch (index) {
case 0:
{
        TableCellFloat cell=new TableCellFloat(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionDistance),0,40);
        cell.setScale(Scales.pow(5));
        cell.addPropertyListener(this);
        cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
        return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
      }
case 1:
{
      TableCellFloat cell=new TableCellFloat(""String_Node_Str"",TableElements.toFloat(transformer.naturalExpansionRandomization),0,40);
      cell.setScale(Scales.pow(5));
      cell.addPropertyListener(this);
      cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
}
}
return super.elementForIndexInSegment(table,index,segment);
}",0.9435643564356436
134246,"@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
switch (segment) {
case 1:
switch (index) {
case 0:
      return new TableElementCell(new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str"")));
case 1:
{
      TableCellFloatRange cell=new TableCellFloatRange(""String_Node_Str"",new FloatRange(transformer.minDecay,transformer.maxDecay),0.0f,1.0f,""String_Node_Str"");
      cell.setScale(Scales.pow(5));
      cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
      cell.addPropertyListener(this);
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
case 2:
{
    TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.decayChaos,0.0f,1.0f);
    cell.setScale(Scales.pow(3));
    cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
    cell.addPropertyListener(this);
    return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
  }
case 3:
{
  TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.decayValueDensity,0.0f,1.0f);
  cell.setScale(Scales.pow(3));
  cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
  cell.addPropertyListener(this);
  return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
case 4:
{
TableCellEnum cell=new TableCellEnum<>(""String_Node_Str"",transformer.decayDirection,TableDirections.getDirectionOptions(EnumFacing.VALUES));
cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
cell.addPropertyListener(this);
return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
}
break;
case 2:
switch (index) {
case 0:
return new TableElementCell(new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str"")));
case 1:
{
TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.blockErosion,0.0f,1.0f);
cell.setScale(Scales.pow(3));
cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
cell.addPropertyListener(this);
return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
case 2:
{
TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.vineGrowth,0.0f,1.0f);
cell.setScale(Scales.pow(3));
cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
cell.addPropertyListener(this);
return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
}
break;
}
return null;
}","@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
switch (segment) {
case 1:
switch (index) {
case 0:
      return new TableElementCell(new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str"")));
case 1:
{
      TableCellFloatRange cell=new TableCellFloatRange(""String_Node_Str"",new FloatRange(transformer.minDecay,transformer.maxDecay),0.0f,1.0f,""String_Node_Str"");
      cell.setScale(Scales.pow(5));
      cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
      cell.addPropertyListener(this);
      return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
    }
case 2:
{
    TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.decayChaos,0.0f,1.0f);
    cell.setScale(Scales.pow(3));
    cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
    cell.addPropertyListener(this);
    return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
  }
case 3:
{
  TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.decayValueDensity,0.0f,1.0f);
  cell.setScale(Scales.pow(3));
  cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
  cell.addPropertyListener(this);
  return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
case 4:
{
TableCellEnum cell=new TableCellEnum<>(""String_Node_Str"",transformer.decayDirection,TableDirections.getDirectionOptions(EnumFacing.VALUES));
cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
cell.addPropertyListener(this);
return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
}
break;
case 2:
switch (index) {
case 0:
return new TableElementCell(new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str"")));
case 1:
{
TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.blockErosion,0.0f,1.0f);
cell.setScale(Scales.pow(3));
cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
cell.addPropertyListener(this);
return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
case 2:
{
TableCellFloat cell=new TableCellFloat(""String_Node_Str"",transformer.vineGrowth,0.0f,1.0f);
cell.setScale(Scales.pow(3));
cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
cell.addPropertyListener(this);
return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
}
}
break;
}
return super.elementForIndexInSegment(table,index,segment);
}",0.989092405844824
134247,"@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 0) {
    TableCellString cell=new TableCellString(""String_Node_Str"",transformer.id());
    cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
    cell.setShowsValidityState(true);
    cell.setValidityState(StructureInfos.isSimpleIDState(transformer.id()));
    cell.addPropertyListener(cell1 -> {
      transformer.setID((String)cell1.getPropertyValue());
      ((TableCellString)cell1).setValidityState(StructureInfos.isSimpleIDState(transformer.id()));
    }
);
    return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
  }
  return super.elementForIndexInSegment(table,index,segment);
}","@Override public TableElement elementForIndexInSegment(GuiTable table,int index,int segment){
  if (segment == 0) {
    TableCellString cell=new TableCellString(""String_Node_Str"",transformer.id());
    cell.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
    cell.setShowsValidityState(true);
    cell.setValidityState(currentIDState());
    cell.addPropertyListener(cell1 -> {
      transformer.setID((String)cell1.getPropertyValue());
      ((TableCellString)cell1).setValidityState(currentIDState());
    }
);
    return new TableElementCell(IvTranslations.get(""String_Node_Str""),cell);
  }
  return super.elementForIndexInSegment(table,index,segment);
}",0.9342857142857144
134248,"public TableDataSourceMazeReachability(SavedMazeReachability reachability,TableDelegate tableDelegate,TableNavigator tableNavigator,Set<SavedMazePath> expected,List<IntegerRange> bounds){
  this.reachability=reachability;
  this.tableDelegate=tableDelegate;
  this.tableNavigator=tableNavigator;
  TableCellTitle groupTitle=new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str""));
  groupTitle.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
  addManagedSection(0,new TableDataSourcePreloaded(new TableElementCell(groupTitle)));
  addManagedSection(1,new TableDataSourceMazeReachabilityGroup(reachability.groups,expected,tableDelegate,tableNavigator));
  TableCellTitle crossConnectionsTitle=new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str""));
  crossConnectionsTitle.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
  addManagedSection(2,new TableDataSourcePreloaded(new TableElementCell(crossConnectionsTitle)));
  addManagedSection(3,new TableDataSourcePathConnectionList(reachability.crossConnections,tableDelegate,tableNavigator,bounds));
}","public TableDataSourceMazeReachability(SavedMazeReachability reachability,TableDelegate tableDelegate,TableNavigator tableNavigator,Set<SavedMazePath> expected,List<IntegerRange> bounds){
  this.reachability=reachability;
  this.tableDelegate=tableDelegate;
  this.tableNavigator=tableNavigator;
  TableCellTitle groupTitle=new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str""));
  groupTitle.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
  addManagedSection(0,new TableDataSourcePreloaded(new TableElementCell(groupTitle)));
  addManagedSection(1,new TableDataSourceMazeReachabilityGroups(reachability.groups,expected,tableDelegate,tableNavigator));
  TableCellTitle crossConnectionsTitle=new TableCellTitle(""String_Node_Str"",IvTranslations.get(""String_Node_Str""));
  crossConnectionsTitle.setTooltip(IvTranslations.formatLines(""String_Node_Str""));
  addManagedSection(2,new TableDataSourcePreloaded(new TableElementCell(crossConnectionsTitle)));
  addManagedSection(3,new TableDataSourcePathConnectionList(reachability.crossConnections,tableDelegate,tableNavigator,bounds));
}",0.9995501574448944
134249,"public static GuiValidityStateIndicator.State isSimpleIDState(String id){
  return isSimpleID(id) ? GuiValidityStateIndicator.State.INVALID : GuiValidityStateIndicator.State.VALID;
}","public static GuiValidityStateIndicator.State isSimpleIDState(String id){
  return isSimpleID(id) ? GuiValidityStateIndicator.State.VALID : GuiValidityStateIndicator.State.INVALID;
}",0.989010989010989
134250,"public static boolean isSimpleID(String id){
  return id.trim().isEmpty() || !id.chars().allMatch(Character::isJavaIdentifierPart);
}","public static boolean isSimpleID(String id){
  return !id.trim().isEmpty() && id.chars().allMatch(Character::isJavaIdentifierPart);
}",0.9774436090225564
134251,"public Collection<Pair<StructureInfo,StructureListGenerationInfo>> getStructuresInList(final String listID,final EnumFacing front){
  return getStructureGenerations(StructureListGenerationInfo.class,input -> listID.equals(input.getRight().listID) && (front == null || input.getLeft().isRotatable() || input.getRight().front == front));
}","public Collection<Pair<StructureInfo,StructureListGenerationInfo>> getStructuresInList(final String listID,@Nullable final EnumFacing front){
  return getStructureGenerations(StructureListGenerationInfo.class,input -> listID.equals(input.getRight().listID) && (front == null || input.getLeft().isRotatable() || input.getRight().front == front));
}",0.9853801169590644
134252,"@Override public void readFromNBT(NBTTagCompound compound){
  scripts.clear();
  scripts.addAll(NBTTagLists.compoundsFrom(compound,""String_Node_Str"").stream().map(WorldScriptRegistry.INSTANCE::read).collect(Collectors.toList()));
}","@Override public void readFromNBT(NBTTagCompound compound){
  scripts.clear();
  scripts.addAll(NBTTagLists.compoundsFrom(compound,""String_Node_Str"").stream().map(WorldScriptRegistry.INSTANCE::read).filter(Objects::nonNull).collect(Collectors.toList()));
}",0.9486652977412732
134253,"public MazeComponentStructure(double weight,String structureID,AxisAlignedTransform2D transform,ImmutableSet<MazeRoom> rooms,ImmutableMap<MazeRoomConnection,C> exits){
  this.weight=weight;
  this.structureID=structureID;
  this.transform=transform;
  this.rooms=rooms;
  this.exits=exits;
}","public MazeComponentStructure(double weight,String structureID,AxisAlignedTransform2D transform,ImmutableSet<MazeRoom> rooms,ImmutableMap<MazeRoomConnection,C> exits){
  this.weight=weight;
  this.structureID=structureID;
  this.transform=transform;
  this.rooms=rooms;
  this.exits=exits;
  ImmutableSet.Builder<Pair<MazeRoom,MazeRoom>> builder=ImmutableSet.builder();
  for (  MazeRoom left : rooms)   for (  MazeRoom right : rooms)   builder.add(Pair.of(left,right));
  this.reachability=builder.build();
}",0.7275
134254,"@Override public void processCommand(ICommandSender commandSender,String[] args){
  EntityPlayerMP entityPlayerMP=getCommandSenderAsPlayer(commandSender);
  StructureEntityInfo structureEntityInfo=RCCommands.getStructureEntityInfo(entityPlayerMP);
  if (args.length >= 1) {
switch (args[0]) {
case ""String_Node_Str"":
      structureEntityInfo.selectedPoint1=null;
    structureEntityInfo.selectedPoint2=null;
  structureEntityInfo.sendSelectionToClients(entityPlayerMP);
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
if (args.length >= 4) {
if (!args[0].equals(""String_Node_Str"")) {
  structureEntityInfo.selectedPoint1=new BlockCoord(MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint1.x,args[1])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint1.y,args[2])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint1.z,args[3])));
}
if (!args[0].equals(""String_Node_Str"")) {
  structureEntityInfo.selectedPoint2=new BlockCoord(MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint2.x,args[1])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint2.y,args[2])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint2.z,args[3])));
}
structureEntityInfo.sendSelectionToClients(entityPlayerMP);
}
 else {
throw new WrongUsageException(""String_Node_Str"");
}
break;
default :
throw new WrongUsageException(""String_Node_Str"");
}
}
 else {
throw new WrongUsageException(""String_Node_Str"");
}
}","@Override public void processCommand(ICommandSender commandSender,String[] args){
  EntityPlayerMP entityPlayerMP=getCommandSenderAsPlayer(commandSender);
  StructureEntityInfo structureEntityInfo=RCCommands.getStructureEntityInfo(entityPlayerMP);
  if (args.length >= 1) {
switch (args[0]) {
case ""String_Node_Str"":
      structureEntityInfo.selectedPoint1=null;
    structureEntityInfo.selectedPoint2=null;
  structureEntityInfo.sendSelectionToClients(entityPlayerMP);
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
if (args.length >= 4) {
if (!args[0].equals(""String_Node_Str"")) {
  if (structureEntityInfo.selectedPoint1 == null)   structureEntityInfo.selectedPoint1=new BlockCoord(MathHelper.floor_double(entityPlayerMP.posX),MathHelper.floor_double(entityPlayerMP.posY),MathHelper.floor_double(entityPlayerMP.posZ));
  structureEntityInfo.selectedPoint1=new BlockCoord(MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint1.x,args[1])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint1.y,args[2])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint1.z,args[3])));
}
if (!args[0].equals(""String_Node_Str"")) {
  if (structureEntityInfo.selectedPoint2 == null)   structureEntityInfo.selectedPoint2=new BlockCoord(MathHelper.floor_double(entityPlayerMP.posX),MathHelper.floor_double(entityPlayerMP.posY),MathHelper.floor_double(entityPlayerMP.posZ));
  structureEntityInfo.selectedPoint2=new BlockCoord(MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint2.x,args[1])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint2.y,args[2])),MathHelper.floor_double(func_110666_a(commandSender,structureEntityInfo.selectedPoint2.z,args[3])));
}
structureEntityInfo.sendSelectionToClients(entityPlayerMP);
}
 else {
throw new WrongUsageException(""String_Node_Str"");
}
break;
default :
throw new WrongUsageException(""String_Node_Str"");
}
}
 else {
throw new WrongUsageException(""String_Node_Str"");
}
}",0.8712977921378567
134255,"@Override protected boolean handleMessage(FMLInterModComms.IMCMessage message,boolean server,boolean runtime){
  if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String structurePath=cmp.getString(""String_Node_Str"");
    String structureID=cmp.getString(""String_Node_Str"");
    boolean generates=cmp.getBoolean(""String_Node_Str"");
    if (!StructureRegistry.registerStructure(new ResourceLocation(structurePath),structureID,generates))     getLogger().warn(String.format(""String_Node_Str"",structurePath,structureID));
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String genPath=cmp.getString(""String_Node_Str"");
    String genID=cmp.getString(""String_Node_Str"");
    if (!GenericItemCollectionRegistry.register(new ResourceLocation(genPath),genID))     getLogger().warn(String.format(""String_Node_Str"",genPath,genID));
  }
 else   if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    int dimensionID=cmp.getInteger(""String_Node_Str"");
    String[] types=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (types != null)     DimensionDictionary.registerDimensionTypes(dimensionID,Arrays.asList(types));
 else     getLogger().warn(""String_Node_Str"" + message.key + ""String_Node_Str"");
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    int dimensionID=cmp.getInteger(""String_Node_Str"");
    String[] types=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (types != null)     DimensionDictionary.unregisterDimensionTypes(dimensionID,Arrays.asList(types));
 else     DimensionDictionary.unregisterDimensionTypes(dimensionID,null);
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,String.class)) {
    DimensionDictionary.registerType(message.getStringValue());
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,String.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String type=cmp.getString(""String_Node_Str"");
    String[] subtypes=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (type != null)     DimensionDictionary.registerSubtypes(type,Arrays.asList(subtypes));
 else     getLogger().warn(""String_Node_Str"" + message.key + ""String_Node_Str"");
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,String.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String type=cmp.getString(""String_Node_Str"");
    String[] subtypes=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (type != null)     DimensionDictionary.registerSupertypes(type,Arrays.asList(subtypes));
 else     getLogger().warn(""String_Node_Str"" + message.key + ""String_Node_Str"");
    return true;
  }
  return false;
}","@Override protected boolean handleMessage(FMLInterModComms.IMCMessage message,boolean server,boolean runtime){
  if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String structurePath=cmp.getString(""String_Node_Str"");
    String structureID=cmp.getString(""String_Node_Str"");
    boolean generates=cmp.getBoolean(""String_Node_Str"");
    if (!StructureRegistry.registerStructure(new ResourceLocation(structurePath),structureID,generates))     getLogger().warn(String.format(""String_Node_Str"",structurePath,structureID));
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String genPath=cmp.getString(""String_Node_Str"");
    String genID=cmp.getString(""String_Node_Str"");
    if (!GenericItemCollectionRegistry.register(new ResourceLocation(genPath),genID))     getLogger().warn(String.format(""String_Node_Str"",genPath,genID));
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    int dimensionID=cmp.getInteger(""String_Node_Str"");
    String[] types=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (types != null)     DimensionDictionary.registerDimensionTypes(dimensionID,Arrays.asList(types));
 else     getLogger().warn(""String_Node_Str"" + message.key + ""String_Node_Str"");
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,NBTTagCompound.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    int dimensionID=cmp.getInteger(""String_Node_Str"");
    String[] types=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (types != null)     DimensionDictionary.unregisterDimensionTypes(dimensionID,Arrays.asList(types));
 else     DimensionDictionary.unregisterDimensionTypes(dimensionID,null);
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,String.class)) {
    DimensionDictionary.registerType(message.getStringValue());
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,String.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String type=cmp.getString(""String_Node_Str"");
    String[] subtypes=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (type != null)     DimensionDictionary.registerSubtypes(type,Arrays.asList(subtypes));
 else     getLogger().warn(""String_Node_Str"" + message.key + ""String_Node_Str"");
    return true;
  }
 else   if (isMessage(""String_Node_Str"",message,String.class)) {
    NBTTagCompound cmp=message.getNBTValue();
    String type=cmp.getString(""String_Node_Str"");
    String[] subtypes=IvNBTHelper.readNBTStrings(""String_Node_Str"",cmp);
    if (type != null)     DimensionDictionary.registerSupertypes(type,Arrays.asList(subtypes));
 else     getLogger().warn(""String_Node_Str"" + message.key + ""String_Node_Str"");
    return true;
  }
  return false;
}",0.9970915312232678
134256,"@Override public void transformBlock(World world,Random random,Phase phase,BlockCoord coord,Block sourceBlock,int sourceMetadata){
  BiomeGenBase biome=world.getBiomeGenForCoords(coord.x,coord.z);
  Block topBlock=biome.topBlock;
  Block fillerBlock=biome.fillerBlock;
  Block mainBlock=world.provider.dimensionId == -1 ? Blocks.netherrack : (world.provider.dimensionId == 1 ? Blocks.end_stone : Blocks.stone);
  boolean useStoneBlock=hasBlockAbove(world,coord.x,coord.y,coord.z,mainBlock);
  if (phase == Phase.BEFORE) {
    int currentY=coord.y;
    List<int[]> currentList=new ArrayList<>();
    List<int[]> nextList=new ArrayList<>();
    nextList.add(new int[]{coord.x,coord.z});
    while (nextList.size() > 0 && currentY > 1) {
      List<int[]> cachedList=currentList;
      currentList=nextList;
      nextList=cachedList;
      while (currentList.size() > 0) {
        int[] currentPos=currentList.remove(0);
        int currentX=currentPos[0];
        int currentZ=currentPos[1];
        Block curBlock=world.getBlock(currentX,currentY,currentZ);
        boolean replaceable=currentY == coord.y || curBlock.isReplaceable(world,currentX,currentY,currentZ);
        if (replaceable) {
          Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,currentX,currentY,currentZ) ? topBlock : fillerBlock);
          world.setBlock(currentX,currentY,currentZ,setBlock);
        }
        if (replaceable) {
          double yForDistance=coord.y * 0.3 + currentY * 0.7;
          double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{coord.x,coord.y,coord.z},new double[]{currentX,yForDistance,currentZ});
          double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
          distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
          if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
            addIfNew(nextList,currentX,currentZ);
            addIfNew(nextList,currentX - 1,currentZ);
            addIfNew(nextList,currentX + 1,currentZ);
            addIfNew(nextList,currentX,currentZ - 1);
            addIfNew(nextList,currentX,currentZ + 1);
          }
        }
      }
      currentY--;
    }
  }
 else {
    Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,coord.x,coord.y,coord.z) ? topBlock : fillerBlock);
    world.setBlock(coord.x,coord.y,coord.z,setBlock);
  }
}","@Override public void transformBlock(World world,Random random,Phase phase,BlockCoord coord,Block sourceBlock,int sourceMetadata){
  BiomeGenBase biome=world.getBiomeGenForCoords(coord.x,coord.z);
  Block topBlock=biome.topBlock != null ? biome.topBlock : Blocks.air;
  Block fillerBlock=biome.fillerBlock != null ? biome.fillerBlock : Blocks.air;
  Block mainBlock=world.provider.dimensionId == -1 ? Blocks.netherrack : (world.provider.dimensionId == 1 ? Blocks.end_stone : Blocks.stone);
  boolean useStoneBlock=hasBlockAbove(world,coord.x,coord.y,coord.z,mainBlock);
  if (phase == Phase.BEFORE) {
    int currentY=coord.y;
    List<int[]> currentList=new ArrayList<>();
    List<int[]> nextList=new ArrayList<>();
    nextList.add(new int[]{coord.x,coord.z});
    while (nextList.size() > 0 && currentY > 1) {
      List<int[]> cachedList=currentList;
      currentList=nextList;
      nextList=cachedList;
      while (currentList.size() > 0) {
        int[] currentPos=currentList.remove(0);
        int currentX=currentPos[0];
        int currentZ=currentPos[1];
        Block curBlock=world.getBlock(currentX,currentY,currentZ);
        boolean replaceable=currentY == coord.y || curBlock.isReplaceable(world,currentX,currentY,currentZ);
        if (replaceable) {
          Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,currentX,currentY,currentZ) ? topBlock : fillerBlock);
          world.setBlock(currentX,currentY,currentZ,setBlock);
        }
        if (replaceable) {
          double yForDistance=coord.y * 0.3 + currentY * 0.7;
          double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{coord.x,coord.y,coord.z},new double[]{currentX,yForDistance,currentZ});
          double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
          distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
          if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
            addIfNew(nextList,currentX,currentZ);
            addIfNew(nextList,currentX - 1,currentZ);
            addIfNew(nextList,currentX + 1,currentZ);
            addIfNew(nextList,currentX,currentZ - 1);
            addIfNew(nextList,currentX,currentZ + 1);
          }
        }
      }
      currentY--;
    }
  }
 else {
    Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,coord.x,coord.y,coord.z) ? topBlock : fillerBlock);
    world.setBlock(coord.x,coord.y,coord.z,setBlock);
  }
}",0.9836810576327204
134257,"@Override public void transformBlock(World world,Random random,Phase phase,BlockCoord coord,Block sourceBlock,int sourceMetadata){
  BiomeGenBase biome=world.getBiomeGenForCoords(coord.x,coord.z);
  Block topBlock=biome.topBlock;
  Block fillerBlock=biome.fillerBlock;
  coord=coord.subtract(0,4,0);
  int currentY=coord.y;
  List<int[]> currentList=new ArrayList<>();
  List<int[]> nextList=new ArrayList<>();
  nextList.add(new int[]{coord.x,coord.z});
  int worldHeight=world.getHeight();
  while (nextList.size() > 0 && currentY < worldHeight) {
    List<int[]> cachedList=currentList;
    currentList=nextList;
    nextList=cachedList;
    while (currentList.size() > 0) {
      int[] currentPos=currentList.remove(0);
      int currentX=currentPos[0];
      int currentZ=currentPos[1];
      Block curBlock=world.getBlock(currentX,currentY,currentZ);
      boolean isFoliage=curBlock.isFoliage(world,currentX,currentY,currentZ) || curBlock.getMaterial() == Material.leaves || curBlock.getMaterial() == Material.plants || curBlock.getMaterial() == Material.wood;
      boolean isCommon=curBlock == Blocks.stone || curBlock == Blocks.dirt || curBlock == Blocks.sand || curBlock == Blocks.stained_hardened_clay || curBlock == Blocks.gravel;
      boolean replaceable=currentY == coord.y || curBlock == topBlock || curBlock == fillerBlock || curBlock.isReplaceable(world,currentX,currentY,currentZ) || isCommon || isFoliage;
      if (replaceable) {
        world.setBlockToAir(currentX,currentY,currentZ);
      }
      if (replaceable || curBlock.getMaterial() == Material.air) {
        double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{coord.x,coord.y,coord.z},new double[]{currentX,currentY,currentZ});
        double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
        distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
        if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
          addIfNew(nextList,currentX,currentZ);
          addIfNew(nextList,currentX - 1,currentZ);
          addIfNew(nextList,currentX + 1,currentZ);
          addIfNew(nextList,currentX,currentZ - 1);
          addIfNew(nextList,currentX,currentZ + 1);
        }
      }
    }
    currentY++;
  }
}","@Override public void transformBlock(World world,Random random,Phase phase,BlockCoord coord,Block sourceBlock,int sourceMetadata){
  BiomeGenBase biome=world.getBiomeGenForCoords(coord.x,coord.z);
  Block topBlock=biome.topBlock != null ? biome.topBlock : Blocks.air;
  Block fillerBlock=biome.fillerBlock != null ? biome.fillerBlock : Blocks.air;
  coord=coord.subtract(0,4,0);
  int currentY=coord.y;
  List<int[]> currentList=new ArrayList<>();
  List<int[]> nextList=new ArrayList<>();
  nextList.add(new int[]{coord.x,coord.z});
  int worldHeight=world.getHeight();
  while (nextList.size() > 0 && currentY < worldHeight) {
    List<int[]> cachedList=currentList;
    currentList=nextList;
    nextList=cachedList;
    while (currentList.size() > 0) {
      int[] currentPos=currentList.remove(0);
      int currentX=currentPos[0];
      int currentZ=currentPos[1];
      Block curBlock=world.getBlock(currentX,currentY,currentZ);
      boolean isFoliage=curBlock.isFoliage(world,currentX,currentY,currentZ) || curBlock.getMaterial() == Material.leaves || curBlock.getMaterial() == Material.plants || curBlock.getMaterial() == Material.wood;
      boolean isCommon=curBlock == Blocks.stone || curBlock == Blocks.dirt || curBlock == Blocks.sand || curBlock == Blocks.stained_hardened_clay || curBlock == Blocks.gravel;
      boolean replaceable=currentY == coord.y || curBlock == topBlock || curBlock == fillerBlock || curBlock.isReplaceable(world,currentX,currentY,currentZ) || isCommon || isFoliage;
      if (replaceable) {
        world.setBlockToAir(currentX,currentY,currentZ);
      }
      if (replaceable || curBlock.getMaterial() == Material.air) {
        double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{coord.x,coord.y,coord.z},new double[]{currentX,currentY,currentZ});
        double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
        distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
        if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
          addIfNew(nextList,currentX,currentZ);
          addIfNew(nextList,currentX - 1,currentZ);
          addIfNew(nextList,currentX + 1,currentZ);
          addIfNew(nextList,currentX,currentZ - 1);
          addIfNew(nextList,currentX,currentZ + 1);
        }
      }
    }
    currentY++;
  }
}",0.9828521814629912
134258,"@Override public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length < 2)   throw new WrongUsageException(""String_Node_Str"");
  if (args[0].equals(""String_Node_Str"")) {
    Set<BiomeGenBase> biomes=BiomeSelector.gatherAllBiomes();
    boolean didFindBiome=false;
    String[] biomeNameArgs=new String[args.length - 1];
    System.arraycopy(args,1,biomeNameArgs,0,biomeNameArgs.length);
    String biomeName=Strings.join(biomeNameArgs,""String_Node_Str"");
    for (    BiomeGenBase biomeGenBase : biomes) {
      if (biomeGenBase.biomeName.equals(biomeName)) {
        BiomeDictionary.Type[] types=BiomeDictionary.getTypesForBiome(biomeGenBase);
        String[] typeNames=new String[types.length];
        for (int i=0; i < types.length; i++)         typeNames[i]=IvGsonHelper.serializedName(types[i]);
        commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",biomeName,Strings.join(typeNames,""String_Node_Str"")));
        didFindBiome=true;
        break;
      }
    }
    if (!didFindBiome)     commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",biomeName));
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    BiomeDictionary.Type type=IvGsonHelper.enumForNameIgnoreCase(args[1],BiomeDictionary.Type.values());
    if (type != null) {
      BiomeGenBase[] biomes=BiomeDictionary.getBiomesForType(type);
      String[] biomeNames=new String[biomes.length];
      for (int i=0; i < biomes.length; i++)       biomeNames[i]=biomes[i].biomeName;
      commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",args[1],Strings.join(biomeNames,""String_Node_Str"")));
    }
 else     commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",args[1]));
  }
 else   throw new WrongUsageException(""String_Node_Str"");
}","@Override public void processCommand(ICommandSender commandSender,String[] args){
  if (args.length < 2)   throw new WrongUsageException(""String_Node_Str"");
  if (args[0].equals(""String_Node_Str"")) {
    Set<BiomeGenBase> biomes=BiomeSelector.gatherAllBiomes();
    boolean didFindBiome=false;
    String[] biomeNameArgs=new String[args.length - 1];
    System.arraycopy(args,1,biomeNameArgs,0,biomeNameArgs.length);
    String biomeName=Strings.join(biomeNameArgs,""String_Node_Str"");
    for (    BiomeGenBase biomeGenBase : biomes) {
      if (biomeGenBase.biomeName.equals(biomeName)) {
        BiomeDictionary.Type[] types=BiomeDictionary.getTypesForBiome(biomeGenBase);
        String[] typeNames=new String[types.length];
        for (int i=0; i < types.length; i++)         typeNames[i]=IvGsonHelper.serializedName(types[i]);
        commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",biomeName,Strings.join(typeNames,""String_Node_Str"")));
        didFindBiome=true;
        break;
      }
    }
    if (!didFindBiome)     commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",biomeName));
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    BiomeDictionary.Type type=RCGsonHelper.enumForNameIgnoreCase(args[1],BiomeDictionary.Type.values());
    if (type != null) {
      BiomeGenBase[] biomes=BiomeDictionary.getBiomesForType(type);
      String[] biomeNames=new String[biomes.length];
      for (int i=0; i < biomes.length; i++)       biomeNames[i]=biomes[i].biomeName;
      commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",args[1],Strings.join(biomeNames,""String_Node_Str"")));
    }
 else     commandSender.addChatMessage(new ChatComponentTranslation(""String_Node_Str"",args[1]));
  }
 else   throw new WrongUsageException(""String_Node_Str"");
}",0.9989094874591058
134259,"@Override public void writeUpdateData(ByteBuf buffer,String context){
  if (""String_Node_Str"".equals(context)) {
    BlockCoord.writeCoordToBuffer(selectedPoint1,buffer);
    BlockCoord.writeCoordToBuffer(selectedPoint2,buffer);
  }
}","@Override public void writeUpdateData(ByteBuf buffer,String context,Object... params){
  if (""String_Node_Str"".equals(context)) {
    BlockCoord.writeCoordToBuffer(selectedPoint1,buffer);
    BlockCoord.writeCoordToBuffer(selectedPoint2,buffer);
  }
}",0.9649484536082474
134260,"public void sendSelectionChangesToClients(Entity entity){
  IvNetworkHelperServer.sendEEPUpdatePacket(entity,""String_Node_Str"",""String_Node_Str"",RecurrentComplex.network);
}","public void sendSelectionChangesToClients(Entity entity){
  RCNetworkHelperServer.sendEEPUpdatePacket(entity,""String_Node_Str"",""String_Node_Str"",RecurrentComplex.network);
}",0.9884393063583816
134261,"public List<BiomeDictionary.Type> getBiomeTypes(){
  if (biomeID.startsWith(""String_Node_Str"")) {
    String[] typeIDs=biomeID.substring(5).split(""String_Node_Str"");
    List<BiomeDictionary.Type> types=new ArrayList<>(typeIDs.length);
    for (    String typeID : typeIDs) {
      BiomeDictionary.Type type=IvGsonHelper.enumForNameIgnoreCase(typeID,BiomeDictionary.Type.values());
      if (type == null)       return null;
      types.add(type);
    }
    return types;
  }
  return null;
}","public List<BiomeDictionary.Type> getBiomeTypes(){
  if (biomeID.startsWith(""String_Node_Str"")) {
    String[] typeIDs=biomeID.substring(5).split(""String_Node_Str"");
    List<BiomeDictionary.Type> types=new ArrayList<>(typeIDs.length);
    for (    String typeID : typeIDs) {
      BiomeDictionary.Type type=RCGsonHelper.enumForNameIgnoreCase(typeID,BiomeDictionary.Type.values());
      if (type == null)       return null;
      types.add(type);
    }
    return types;
  }
  return null;
}",0.9959349593495936
134262,"@Override public void fromBytes(ByteBuf buf){
  key=ByteBufUtils.readUTF8String(buf);
  String json=ByteBufUtils.readUTF8String(buf);
  inventoryGenerator=InventoryGenerationHandler.createInventoryGeneratorFromJSON(json);
}","@Override public void fromBytes(ByteBuf buf){
  key=ByteBufUtils.readUTF8String(buf);
  String json=ByteBufUtils.readUTF8String(buf);
  try {
    inventoryGenerator=InventoryGenerationHandler.createInventoryGeneratorFromJSON(json);
  }
 catch (  InventoryLoadException e) {
    e.printStackTrace();
  }
}",0.8462998102466793
134263,"@Override public GenericInventoryGenerator copyAsGenericInventoryGenerator(){
  return (GenericInventoryGenerator)clone();
}","@Override public GenericInventoryGenerator copyAsGenericInventoryGenerator(){
  return copy();
}",0.8636363636363636
134264,"@Override public GenericInventoryGenerator copyAsGenericInventoryGenerator(){
  return (GenericInventoryGenerator)genericInventoryGenerator.clone();
}","@Override public GenericInventoryGenerator copyAsGenericInventoryGenerator(){
  return genericInventoryGenerator.copy();
}",0.8823529411764706
134265,"void apply(World world,Random random,boolean beforeGeneration,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData);","void apply(World world,Random random,Phase phase,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData);",0.8913857677902621
134266,"@Override public void apply(World world,Random random,boolean beforeGeneration,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  BiomeGenBase biome=world.getBiomeGenForCoords(x,z);
  Block topBlock=biome.topBlock;
  Block fillerBlock=biome.fillerBlock;
  Block mainBlock=world.provider.dimensionId == -1 ? Blocks.netherrack : (world.provider.dimensionId == 1 ? Blocks.end_stone : Blocks.stone);
  boolean useStoneBlock=hasBlockAbove(world,x,y,z,mainBlock);
  if (beforeGeneration) {
    int currentY=y;
    List<int[]> currentList=new ArrayList<>();
    List<int[]> nextList=new ArrayList<>();
    nextList.add(new int[]{x,z});
    while (nextList.size() > 0 && currentY > 1) {
      List<int[]> cachedList=currentList;
      currentList=nextList;
      nextList=cachedList;
      while (currentList.size() > 0) {
        int[] currentPos=currentList.remove(0);
        int currentX=currentPos[0];
        int currentZ=currentPos[1];
        Block curBlock=world.getBlock(currentX,currentY,currentZ);
        boolean replaceable=currentY == y || curBlock.isReplaceable(world,currentX,currentY,currentZ);
        if (replaceable) {
          Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,currentX,currentY,currentZ) ? topBlock : fillerBlock);
          world.setBlock(currentX,currentY,currentZ,setBlock);
        }
        if (replaceable) {
          double yForDistance=y * 0.3 + currentY * 0.7;
          double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{x,y,z},new double[]{currentX,yForDistance,currentZ});
          double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
          distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
          if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
            addIfNew(nextList,currentX,currentZ);
            addIfNew(nextList,currentX - 1,currentZ);
            addIfNew(nextList,currentX + 1,currentZ);
            addIfNew(nextList,currentX,currentZ - 1);
            addIfNew(nextList,currentX,currentZ + 1);
          }
        }
      }
      currentY--;
    }
  }
 else {
    Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,x,y,z) ? topBlock : fillerBlock);
    world.setBlock(x,y,z,setBlock);
  }
}","@Override public void apply(World world,Random random,Phase phase,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  BiomeGenBase biome=world.getBiomeGenForCoords(x,z);
  Block topBlock=biome.topBlock;
  Block fillerBlock=biome.fillerBlock;
  Block mainBlock=world.provider.dimensionId == -1 ? Blocks.netherrack : (world.provider.dimensionId == 1 ? Blocks.end_stone : Blocks.stone);
  boolean useStoneBlock=hasBlockAbove(world,x,y,z,mainBlock);
  if (phase == Phase.BEFORE) {
    int currentY=y;
    List<int[]> currentList=new ArrayList<>();
    List<int[]> nextList=new ArrayList<>();
    nextList.add(new int[]{x,z});
    while (nextList.size() > 0 && currentY > 1) {
      List<int[]> cachedList=currentList;
      currentList=nextList;
      nextList=cachedList;
      while (currentList.size() > 0) {
        int[] currentPos=currentList.remove(0);
        int currentX=currentPos[0];
        int currentZ=currentPos[1];
        Block curBlock=world.getBlock(currentX,currentY,currentZ);
        boolean replaceable=currentY == y || curBlock.isReplaceable(world,currentX,currentY,currentZ);
        if (replaceable) {
          Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,currentX,currentY,currentZ) ? topBlock : fillerBlock);
          world.setBlock(currentX,currentY,currentZ,setBlock);
        }
        if (replaceable) {
          double yForDistance=y * 0.3 + currentY * 0.7;
          double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{x,y,z},new double[]{currentX,yForDistance,currentZ});
          double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
          distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
          if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
            addIfNew(nextList,currentX,currentZ);
            addIfNew(nextList,currentX - 1,currentZ);
            addIfNew(nextList,currentX + 1,currentZ);
            addIfNew(nextList,currentX,currentZ - 1);
            addIfNew(nextList,currentX,currentZ + 1);
          }
        }
      }
      currentY--;
    }
  }
 else {
    Block setBlock=useStoneBlock ? mainBlock : (isTopBlock(world,x,y,z) ? topBlock : fillerBlock);
    world.setBlock(x,y,z,setBlock);
  }
}",0.9842450765864332
134267,"@Override public void apply(World world,Random random,boolean beforeGeneration,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  BiomeGenBase biome=world.getBiomeGenForCoords(x,z);
  Block topBlock=biome.topBlock;
  Block fillerBlock=biome.fillerBlock;
  int currentY=y;
  List<int[]> currentList=new ArrayList<>();
  List<int[]> nextList=new ArrayList<>();
  nextList.add(new int[]{x,z});
  int worldHeight=world.getHeight();
  while (nextList.size() > 0 && currentY < worldHeight) {
    List<int[]> cachedList=currentList;
    currentList=nextList;
    nextList=cachedList;
    while (currentList.size() > 0) {
      int[] currentPos=currentList.remove(0);
      int currentX=currentPos[0];
      int currentZ=currentPos[1];
      Block curBlock=world.getBlock(currentX,currentY,currentZ);
      boolean isFoliage=curBlock.isFoliage(world,currentX,currentY,currentZ) || curBlock.getMaterial() == Material.leaves || curBlock.getMaterial() == Material.plants || curBlock.getMaterial() == Material.wood;
      boolean isCommon=curBlock == Blocks.stone || curBlock == Blocks.dirt || curBlock == Blocks.sand || curBlock == Blocks.stained_hardened_clay || curBlock == Blocks.gravel;
      boolean replaceable=currentY == y || curBlock == topBlock || curBlock == fillerBlock || curBlock.isReplaceable(world,currentX,currentY,currentZ) || isCommon || isFoliage;
      if (replaceable) {
        world.setBlockToAir(currentX,currentY,currentZ);
      }
      if (replaceable || curBlock.getMaterial() == Material.air) {
        double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{x,y,z},new double[]{currentX,currentY,currentZ});
        double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
        distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
        if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
          addIfNew(nextList,currentX,currentZ);
          addIfNew(nextList,currentX - 1,currentZ);
          addIfNew(nextList,currentX + 1,currentZ);
          addIfNew(nextList,currentX,currentZ - 1);
          addIfNew(nextList,currentX,currentZ + 1);
        }
      }
    }
    currentY++;
  }
}","@Override public void apply(World world,Random random,Phase phase,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  BiomeGenBase biome=world.getBiomeGenForCoords(x,z);
  Block topBlock=biome.topBlock;
  Block fillerBlock=biome.fillerBlock;
  int currentY=y;
  List<int[]> currentList=new ArrayList<>();
  List<int[]> nextList=new ArrayList<>();
  nextList.add(new int[]{x,z});
  int worldHeight=world.getHeight();
  while (nextList.size() > 0 && currentY < worldHeight) {
    List<int[]> cachedList=currentList;
    currentList=nextList;
    nextList=cachedList;
    while (currentList.size() > 0) {
      int[] currentPos=currentList.remove(0);
      int currentX=currentPos[0];
      int currentZ=currentPos[1];
      Block curBlock=world.getBlock(currentX,currentY,currentZ);
      boolean isFoliage=curBlock.isFoliage(world,currentX,currentY,currentZ) || curBlock.getMaterial() == Material.leaves || curBlock.getMaterial() == Material.plants || curBlock.getMaterial() == Material.wood;
      boolean isCommon=curBlock == Blocks.stone || curBlock == Blocks.dirt || curBlock == Blocks.sand || curBlock == Blocks.stained_hardened_clay || curBlock == Blocks.gravel;
      boolean replaceable=currentY == y || curBlock == topBlock || curBlock == fillerBlock || curBlock.isReplaceable(world,currentX,currentY,currentZ) || isCommon || isFoliage;
      if (replaceable) {
        world.setBlockToAir(currentX,currentY,currentZ);
      }
      if (replaceable || curBlock.getMaterial() == Material.air) {
        double distToOrigSQ=IvVecMathHelper.distanceSQ(new double[]{x,y,z},new double[]{currentX,currentY,currentZ});
        double add=(random.nextDouble() - random.nextDouble()) * NATURAL_DISTANCE_RANDOMIZATION;
        distToOrigSQ+=add < 0 ? -(add * add) : (add * add);
        if (distToOrigSQ < NATURAL_EXPANSION_DISTANCE * NATURAL_EXPANSION_DISTANCE) {
          addIfNew(nextList,currentX,currentZ);
          addIfNew(nextList,currentX - 1,currentZ);
          addIfNew(nextList,currentX + 1,currentZ);
          addIfNew(nextList,currentX,currentZ - 1);
          addIfNew(nextList,currentX,currentZ + 1);
        }
      }
    }
    currentY++;
  }
}",0.992043646283246
134268,"@Override public void apply(World world,Random random,boolean beforeGeneration,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
}","@Override public void apply(World world,Random random,Phase phase,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
}",0.9049180327868852
134269,"@Override public void apply(World world,Random random,boolean beforeGeneration,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  world.setBlock(x,y,z,destBlock,destMetadata,3);
  y--;
  while (y > 0) {
    Block block=world.getBlock(x,y,z);
    if (!(block.isReplaceable(world,x,y,z) || block.getMaterial() == Material.leaves || block.isFoliage(world,x,y,z))) {
      return;
    }
    world.setBlock(x,y,z,destBlock,destMetadata,3);
    y--;
  }
}","@Override public void apply(World world,Random random,Phase phase,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  world.setBlock(x,y,z,destBlock,destMetadata,3);
  y--;
  while (y > 0) {
    Block block=world.getBlock(x,y,z);
    if (!(block.isReplaceable(world,x,y,z) || block.getMaterial() == Material.leaves || block.isFoliage(world,x,y,z))) {
      return;
    }
    world.setBlock(x,y,z,destBlock,destMetadata,3);
    y--;
  }
}",0.9629629629629628
134270,"@Override public void apply(World world,Random random,boolean beforeGeneration,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  world.setBlock(x,y,z,destBlock,destMetadata[random.nextInt(destMetadata.length)],3);
}","@Override public void apply(World world,Random random,Phase phase,int x,int y,int z,Block sourceBlock,int sourceMetadata,IvWorldData worldData){
  world.setBlock(x,y,z,destBlock,destMetadata[random.nextInt(destMetadata.length)],3);
}",0.9269311064718164
134271,"private void generate(World world,Random random,BlockCoord origin,int layer,AxisAlignedTransform2D transform,boolean asSource){
  IvWorldData worldData=new IvWorldData(worldDataCompound,world,MCRegistrySpecial.INSTANCE);
  IvBlockCollection blockCollection=worldData.blockCollection;
  int[] size=new int[]{blockCollection.width,blockCollection.height,blockCollection.length};
  List<GeneratingTileEntity> generatingTileEntities=new ArrayList<>();
  Map<BlockCoord,TileEntity> tileEntities=new HashMap<>();
  for (  TileEntity tileEntity : worldData.tileEntities) {
    tileEntities.put(new BlockCoord(tileEntity),tileEntity);
  }
  if (!asSource) {
    for (    BlockTransformer transformer : blockTransformers) {
      if (transformer.generatesBefore()) {
        for (        BlockCoord sourceCoord : blockCollection) {
          BlockCoord worldCoord=transform.apply(sourceCoord,size).add(origin);
          Block block=blockCollection.getBlock(sourceCoord);
          int meta=blockCollection.getMetadata(sourceCoord);
          if (transformer.matches(block,meta)) {
            transformer.apply(world,random,true,worldCoord.x,worldCoord.y,worldCoord.z,block,meta,worldData);
          }
        }
      }
    }
  }
  for (int pass=0; pass < 2; pass++) {
    for (    BlockCoord sourceCoord : blockCollection) {
      Block block=blockCollection.getBlock(sourceCoord);
      int meta=blockCollection.getMetadata(sourceCoord);
      BlockCoord worldPos=transform.apply(sourceCoord,size).add(origin);
      if (pass == getPass(block,meta) && (asSource || transformer(block,meta) == null)) {
        world.setBlock(worldPos.x,worldPos.y,worldPos.z,block,meta,2);
        TileEntity tileEntity=tileEntities.get(sourceCoord);
        if (tileEntity != null) {
          world.setBlockMetadataWithNotify(worldPos.x,worldPos.y,worldPos.z,meta,2);
          tileEntity.xCoord=worldPos.x;
          tileEntity.yCoord=worldPos.y;
          tileEntity.zCoord=worldPos.z;
          world.setTileEntity(worldPos.x,worldPos.y,worldPos.z,tileEntity);
          tileEntity.updateContainingBlockInfo();
          if (!asSource) {
            if (tileEntity instanceof IInventory) {
              IInventory inventory=(IInventory)tileEntity;
              InventoryGenerationHandler.generateAllTags(inventory,random);
            }
            if (tileEntity instanceof GeneratingTileEntity) {
              generatingTileEntities.add((GeneratingTileEntity)tileEntity);
            }
          }
        }
        transform.rotateBlock(world,worldPos,block);
      }
    }
  }
  if (!asSource) {
    for (    BlockTransformer transformer : blockTransformers) {
      if (transformer.generatesAfter()) {
        for (        BlockCoord sourceCoord : blockCollection) {
          BlockCoord worldCoord=transform.apply(sourceCoord,size).add(origin);
          Block block=blockCollection.getBlock(sourceCoord);
          int meta=blockCollection.getMetadata(sourceCoord);
          if (transformer.matches(block,meta)) {
            transformer.apply(world,random,false,worldCoord.x,worldCoord.y,worldCoord.z,block,meta,worldData);
          }
        }
      }
    }
  }
  List<Entity> entities=worldData.entities;
  for (  Entity entity : entities) {
    entity.resetEntityId();
    RecurrentComplexEntityAccessor.resetEntityUUID(entity);
    double[] newEntityPos=transform.apply(new double[]{entity.posX,entity.posY,entity.posZ},size);
    entity.setPosition(newEntityPos[0] + origin.x,newEntityPos[1] + origin.y,newEntityPos[2] + origin.z);
    world.spawnEntityInWorld(entity);
  }
  if (layer < MAX_GENERATING_LAYERS) {
    for (    GeneratingTileEntity generatingTileEntity : generatingTileEntities) {
      generatingTileEntity.generate(world,random,transform,layer + 1);
    }
  }
 else {
    RecurrentComplex.logger.warn(""String_Node_Str"" + MAX_GENERATING_LAYERS + ""String_Node_Str"");
  }
}","private void generate(World world,Random random,BlockCoord origin,int layer,AxisAlignedTransform2D transform,boolean asSource){
  IvWorldData worldData=new IvWorldData(worldDataCompound,world,MCRegistrySpecial.INSTANCE);
  IvBlockCollection blockCollection=worldData.blockCollection;
  int[] size=new int[]{blockCollection.width,blockCollection.height,blockCollection.length};
  List<GeneratingTileEntity> generatingTileEntities=new ArrayList<>();
  Map<BlockCoord,TileEntity> tileEntities=new HashMap<>();
  for (  TileEntity tileEntity : worldData.tileEntities) {
    tileEntities.put(new BlockCoord(tileEntity),tileEntity);
  }
  if (!asSource) {
    for (    BlockTransformer transformer : blockTransformers) {
      if (transformer.generatesInPhase(BlockTransformer.Phase.BEFORE)) {
        for (        BlockCoord sourceCoord : blockCollection) {
          BlockCoord worldCoord=transform.apply(sourceCoord,size).add(origin);
          Block block=blockCollection.getBlock(sourceCoord);
          int meta=blockCollection.getMetadata(sourceCoord);
          if (transformer.matches(block,meta)) {
            transformer.apply(world,random,BlockTransformer.Phase.BEFORE,worldCoord.x,worldCoord.y,worldCoord.z,block,meta,worldData);
          }
        }
      }
    }
  }
  for (int pass=0; pass < 2; pass++) {
    for (    BlockCoord sourceCoord : blockCollection) {
      Block block=blockCollection.getBlock(sourceCoord);
      int meta=blockCollection.getMetadata(sourceCoord);
      BlockCoord worldPos=transform.apply(sourceCoord,size).add(origin);
      if (pass == getPass(block,meta) && (asSource || transformer(block,meta) == null)) {
        world.setBlock(worldPos.x,worldPos.y,worldPos.z,block,meta,2);
        TileEntity tileEntity=tileEntities.get(sourceCoord);
        if (tileEntity != null) {
          world.setBlockMetadataWithNotify(worldPos.x,worldPos.y,worldPos.z,meta,2);
          tileEntity.xCoord=worldPos.x;
          tileEntity.yCoord=worldPos.y;
          tileEntity.zCoord=worldPos.z;
          world.setTileEntity(worldPos.x,worldPos.y,worldPos.z,tileEntity);
          tileEntity.updateContainingBlockInfo();
          if (!asSource) {
            if (tileEntity instanceof IInventory) {
              IInventory inventory=(IInventory)tileEntity;
              InventoryGenerationHandler.generateAllTags(inventory,random);
            }
            if (tileEntity instanceof GeneratingTileEntity) {
              generatingTileEntities.add((GeneratingTileEntity)tileEntity);
            }
          }
        }
        transform.rotateBlock(world,worldPos,block);
      }
    }
  }
  if (!asSource) {
    for (    BlockTransformer transformer : blockTransformers) {
      if (transformer.generatesInPhase(BlockTransformer.Phase.AFTER)) {
        for (        BlockCoord sourceCoord : blockCollection) {
          BlockCoord worldCoord=transform.apply(sourceCoord,size).add(origin);
          Block block=blockCollection.getBlock(sourceCoord);
          int meta=blockCollection.getMetadata(sourceCoord);
          if (transformer.matches(block,meta)) {
            transformer.apply(world,random,BlockTransformer.Phase.AFTER,worldCoord.x,worldCoord.y,worldCoord.z,block,meta,worldData);
          }
        }
      }
    }
  }
  List<Entity> entities=worldData.entities;
  for (  Entity entity : entities) {
    entity.resetEntityId();
    RecurrentComplexEntityAccessor.resetEntityUUID(entity);
    double[] newEntityPos=transform.apply(new double[]{entity.posX,entity.posY,entity.posZ},size);
    entity.setPosition(newEntityPos[0] + origin.x,newEntityPos[1] + origin.y,newEntityPos[2] + origin.z);
    world.spawnEntityInWorld(entity);
  }
  if (layer < MAX_GENERATING_LAYERS) {
    for (    GeneratingTileEntity generatingTileEntity : generatingTileEntities) {
      generatingTileEntity.generate(world,random,transform,layer + 1);
    }
  }
 else {
    RecurrentComplex.logger.warn(""String_Node_Str"" + MAX_GENERATING_LAYERS + ""String_Node_Str"");
  }
}",0.9812230398376046
134272,"public static boolean generateMaze(World world,Random random,BlockCoord coord,List<MazeComponentPosition> placedComponents,int[] roomSize,int layer){
  int[] pathLengths=new int[]{0,0,0};
  for (  MazeComponentPosition position : placedComponents) {
    String identifier=position.getComponent().getIdentifier();
    int splitIndex0=identifier.lastIndexOf(""String_Node_Str"");
    boolean mirror=Boolean.valueOf(identifier.substring(splitIndex0 + 1));
    int splitIndex1=identifier.lastIndexOf(""String_Node_Str"",splitIndex0 - 1);
    String structure=identifier.substring(0,splitIndex1);
    int rotations=Integer.valueOf(identifier.substring(splitIndex1 + 1,splitIndex0));
    MazeRoom mazePosition=position.getPositionInMaze();
    int[] scaledCompMazePosition=Maze.getRoomPosition(mazePosition,pathLengths,roomSize);
    AxisAlignedTransform2D componentTransform=AxisAlignedTransform2D.transform(rotations,mirror);
    StructureInfo compStructureInfo=StructureHandler.getStructure(structure);
    if (compStructureInfo != null) {
      int[] compSize=compStructureInfo.structureBoundingBox();
      int[] sizeDependentShift=new int[]{(roomSize[0] - compSize[0]) / 2};
      BlockCoord compMazeCoordLower=coord.add(scaledCompMazePosition[0] + sizeDependentShift[0],scaledCompMazePosition[1] + sizeDependentShift[1],scaledCompMazePosition[2] + +sizeDependentShift[2]);
      compStructureInfo.generate(world,random,compMazeCoordLower,componentTransform,layer + 1);
    }
 else {
      StructureGen.logger.error(""String_Node_Str"" + structure + ""String_Node_Str"");
    }
  }
  return true;
}","public static boolean generateMaze(World world,Random random,BlockCoord coord,List<MazeComponentPosition> placedComponents,int[] roomSize,int layer){
  int[] pathLengths=new int[]{0,0,0};
  for (  MazeComponentPosition position : placedComponents) {
    String identifier=position.getComponent().getIdentifier();
    int splitIndex0=identifier.lastIndexOf(""String_Node_Str"");
    boolean mirror=Boolean.valueOf(identifier.substring(splitIndex0 + 1));
    int splitIndex1=identifier.lastIndexOf(""String_Node_Str"",splitIndex0 - 1);
    String structure=identifier.substring(0,splitIndex1);
    int rotations=Integer.valueOf(identifier.substring(splitIndex1 + 1,splitIndex0));
    MazeRoom mazePosition=position.getPositionInMaze();
    int[] scaledCompMazePosition=Maze.getRoomPosition(mazePosition,pathLengths,roomSize);
    AxisAlignedTransform2D componentTransform=AxisAlignedTransform2D.transform(rotations,mirror);
    StructureInfo compStructureInfo=StructureHandler.getStructure(structure);
    if (compStructureInfo != null) {
      int[] compSize=compStructureInfo.structureBoundingBox();
      int[] sizeDependentShift=new int[]{(roomSize[0] - compSize[0]) / 2,(roomSize[1] - compSize[1]) / 2,(roomSize[2] - compSize[2]) / 2};
      BlockCoord compMazeCoordLower=coord.add(scaledCompMazePosition[0] + sizeDependentShift[0],scaledCompMazePosition[1] + sizeDependentShift[1],scaledCompMazePosition[2] + +sizeDependentShift[2]);
      compStructureInfo.generate(world,random,compMazeCoordLower,componentTransform,layer + 1);
    }
 else {
      StructureGen.logger.error(""String_Node_Str"" + structure + ""String_Node_Str"");
    }
  }
  return true;
}",0.9802712700369912
134273,"@Override public void processCommand(ICommandSender commandSender,String[] args){
  int x, y, z;
  if (args.length <= 0) {
    throw new WrongUsageException(""String_Node_Str"");
  }
  String structureName=args[0];
  StructureInfo structureInfo=StructureHandler.getStructure(structureName);
  World world=commandSender.getEntityWorld();
  if (structureInfo == null) {
    throw new WrongUsageException(""String_Node_Str"",structureName);
  }
  x=commandSender.getPlayerCoordinates().posX;
  z=commandSender.getPlayerCoordinates().posZ;
  if (args.length >= 3) {
    x=MathHelper.floor_double(func_110666_a(commandSender,(double)x,args[1]));
    z=MathHelper.floor_double(func_110666_a(commandSender,(double)z,args[2]));
  }
  WorldGenStructures.generateStructureRandomly(world,world.rand,structureInfo,x,z);
}","@Override public void processCommand(ICommandSender commandSender,String[] args){
  int x, z;
  if (args.length <= 0) {
    throw new WrongUsageException(""String_Node_Str"");
  }
  String structureName=args[0];
  StructureInfo structureInfo=StructureHandler.getStructure(structureName);
  World world=commandSender.getEntityWorld();
  if (structureInfo == null) {
    throw new WrongUsageException(""String_Node_Str"",structureName);
  }
  x=commandSender.getPlayerCoordinates().posX;
  z=commandSender.getPlayerCoordinates().posZ;
  if (args.length >= 3) {
    x=MathHelper.floor_double(func_110666_a(commandSender,(double)x,args[1]));
    z=MathHelper.floor_double(func_110666_a(commandSender,(double)z,args[2]));
  }
  WorldGenStructures.generateStructureRandomly(world,world.rand,structureInfo,x,z);
}",0.9981331673926572
134274,"@Override public void processCommand(ICommandSender commandSender,String[] args){
  EntityPlayerMP entityPlayerMP=getCommandSenderAsPlayer(commandSender);
  if (entityPlayerMP != null) {
    StructureEntityInfo structureEntityInfo=StructureEntityInfo.getStructureEntityInfo(entityPlayerMP);
    if (structureEntityInfo != null) {
      if (args.length >= 1) {
        if (""String_Node_Str"".equals(args[0])) {
          structureEntityInfo.selectedPoint1=null;
          structureEntityInfo.selectedPoint2=null;
          structureEntityInfo.sendSelectionChangesToClients(entityPlayerMP);
        }
 else         if (""String_Node_Str"".equals(args[0]) || ""String_Node_Str"".equals(args[0])) {
          if (args.length >= 4) {
            int x=commandSender.getPlayerCoordinates().posX;
            int y=commandSender.getPlayerCoordinates().posY;
            int z=commandSender.getPlayerCoordinates().posZ;
            x=MathHelper.floor_double(func_110666_a(commandSender,(double)x,args[1]));
            y=MathHelper.floor_double(func_110666_a(commandSender,(double)y,args[2]));
            z=MathHelper.floor_double(func_110666_a(commandSender,(double)z,args[3]));
            if (""String_Node_Str"".equals(args[0]))             structureEntityInfo.selectedPoint1=new BlockCoord(x,y,z);
 else             structureEntityInfo.selectedPoint2=new BlockCoord(x,y,z);
            structureEntityInfo.sendSelectionChangesToClients(entityPlayerMP);
          }
 else {
            throw new WrongUsageException(""String_Node_Str"");
          }
        }
 else {
          throw new WrongUsageException(""String_Node_Str"");
        }
      }
 else {
        throw new WrongUsageException(""String_Node_Str"");
      }
    }
  }
 else {
    throw new WrongUsageException(""String_Node_Str"");
  }
}","@Override public void processCommand(ICommandSender commandSender,String[] args){
  EntityPlayerMP entityPlayerMP=getCommandSenderAsPlayer(commandSender);
  if (entityPlayerMP != null) {
    StructureEntityInfo structureEntityInfo=StructureEntityInfo.getStructureEntityInfo(entityPlayerMP);
    if (structureEntityInfo != null) {
      if (args.length >= 1) {
switch (args[0]) {
case ""String_Node_Str"":
          structureEntityInfo.selectedPoint1=null;
        structureEntityInfo.selectedPoint2=null;
      structureEntityInfo.sendSelectionChangesToClients(entityPlayerMP);
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  if (args.length >= 4) {
    int x=commandSender.getPlayerCoordinates().posX;
    int y=commandSender.getPlayerCoordinates().posY;
    int z=commandSender.getPlayerCoordinates().posZ;
    x=MathHelper.floor_double(func_110666_a(commandSender,(double)x,args[1]));
    y=MathHelper.floor_double(func_110666_a(commandSender,(double)y,args[2]));
    z=MathHelper.floor_double(func_110666_a(commandSender,(double)z,args[3]));
    if (""String_Node_Str"".equals(args[0])) {
      structureEntityInfo.selectedPoint1=new BlockCoord(x,y,z);
    }
 else {
      structureEntityInfo.selectedPoint2=new BlockCoord(x,y,z);
    }
    structureEntityInfo.sendSelectionChangesToClients(entityPlayerMP);
  }
 else {
    throw new WrongUsageException(""String_Node_Str"");
  }
break;
default :
throw new WrongUsageException(""String_Node_Str"");
}
}
 else {
throw new WrongUsageException(""String_Node_Str"");
}
}
}
 else {
throw new WrongUsageException(""String_Node_Str"");
}
}",0.8908659549228944
134275,"@Override protected void mouseDragged(Minecraft mc,int x,int y){
  if (this.visible) {
    if (this.mousePressedInsideIndex >= 0) {
      values[mousePressedInsideIndex]=(float)(x - (this.xPosition + 4)) / (float)(this.width - 8);
      values[mousePressedInsideIndex]=(values[mousePressedInsideIndex]) * (maxValue - minValue) + minValue;
      if (values[mousePressedInsideIndex] < minValue) {
        values[mousePressedInsideIndex]=minValue;
      }
      if (values[mousePressedInsideIndex] > maxValue) {
        values[mousePressedInsideIndex]=maxValue;
      }
      notifyOfChanges();
    }
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    for (int i=0; i < values.length; i++) {
      float drawVal=(values[i] - this.minValue) / (this.maxValue - this.minValue);
      this.drawTexturedModalRect(this.xPosition + (int)(drawVal * (float)(this.width - 8)),this.yPosition,0,66,4,20);
      this.drawTexturedModalRect(this.xPosition + (int)(drawVal * (float)(this.width - 8)) + 4,this.yPosition,196,66,4,20);
    }
  }
}","@Override protected void mouseDragged(Minecraft mc,int x,int y){
  if (this.visible) {
    if (this.mousePressedInsideIndex >= 0) {
      values[mousePressedInsideIndex]=(float)(x - (this.xPosition + 4)) / (float)(this.width - 8);
      values[mousePressedInsideIndex]=(values[mousePressedInsideIndex]) * (maxValue - minValue) + minValue;
      if (values[mousePressedInsideIndex] < minValue) {
        values[mousePressedInsideIndex]=minValue;
      }
      if (values[mousePressedInsideIndex] > maxValue) {
        values[mousePressedInsideIndex]=maxValue;
      }
      notifyOfChanges();
    }
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    for (    float value : values) {
      float drawVal=(value - this.minValue) / (this.maxValue - this.minValue);
      this.drawTexturedModalRect(this.xPosition + (int)(drawVal * (float)(this.width - 8)),this.yPosition,0,66,4,20);
      this.drawTexturedModalRect(this.xPosition + (int)(drawVal * (float)(this.width - 8)) + 4,this.yPosition,196,66,4,20);
    }
  }
}",0.9422792303897384
134276,"@Override public void markDirty(){
  for (int i=0; i < this.watchers.size(); ++i) {
    this.watchers.get(i).inventoryChanged(this);
  }
}","@Override public void markDirty(){
  for (  InventoryWatcher watcher : this.watchers) {
    watcher.inventoryChanged(this);
  }
}",0.7865168539325843
134277,"private GuiValidityStateIndicator.State currentBiomeIDState(){
  if (generationInfo.getBiomeTypes() != null)   return GuiValidityStateIndicator.State.VALID;
  String biomeID=generationInfo.getBiomeID();
  BiomeGenBase[] biomes=BiomeGenBase.getBiomeGenArray();
  for (int i=0; i < biomes.length; i++) {
    if (biomes[i] != null && biomes[i].biomeName.equals(biomeID))     return GuiValidityStateIndicator.State.VALID;
  }
  return biomeID.trim().length() > 0 ? GuiValidityStateIndicator.State.SEMI_VALID : GuiValidityStateIndicator.State.INVALID;
}","private GuiValidityStateIndicator.State currentBiomeIDState(){
  if (generationInfo.getBiomeTypes() != null) {
    return GuiValidityStateIndicator.State.VALID;
  }
  String biomeID=generationInfo.getBiomeID();
  BiomeGenBase[] biomes=BiomeGenBase.getBiomeGenArray();
  for (  BiomeGenBase biome : biomes) {
    if (biome != null && biome.biomeName.equals(biomeID)) {
      return GuiValidityStateIndicator.State.VALID;
    }
  }
  return biomeID.trim().length() > 0 ? GuiValidityStateIndicator.State.SEMI_VALID : GuiValidityStateIndicator.State.INVALID;
}",0.9221014492753624
134278,"@Override public void actionPerformed(TableElementPresetAction tableElementButton,String actionID){
  if (tableElementButton.getID().equals(""String_Node_Str"")) {
    if (actionID.equals(""String_Node_Str"")) {
      biomeGenerationInfoList.clear();
      biomeGenerationInfoList.addAll(BiomeGenerationInfo.defaultBiomeGenerationList());
    }
 else     if (actionID.equals(""String_Node_Str"")) {
      biomeGenerationInfoList.clear();
      biomeGenerationInfoList.addAll(BiomeGenerationInfo.oceanBiomeGenerationList());
    }
 else     if (actionID.equals(""String_Node_Str"")) {
      biomeGenerationInfoList.clear();
    }
    tableDelegate.reloadData();
  }
}","@Override public void actionPerformed(TableElementPresetAction tableElementButton,String actionID){
  if (tableElementButton.getID().equals(""String_Node_Str"")) {
switch (actionID) {
case ""String_Node_Str"":
      biomeGenerationInfoList.clear();
    biomeGenerationInfoList.addAll(BiomeGenerationInfo.defaultBiomeGenerationList());
  break;
case ""String_Node_Str"":
biomeGenerationInfoList.clear();
biomeGenerationInfoList.addAll(BiomeGenerationInfo.oceanBiomeGenerationList());
break;
case ""String_Node_Str"":
biomeGenerationInfoList.clear();
break;
}
tableDelegate.reloadData();
}
}",0.4374495560936239
134279,"@Override public void actionPerformed(TableElementButton tableElementButton,String actionID){
  if (actionID.equals(""String_Node_Str"")) {
    int index=Integer.valueOf(tableElementButton.getID().substring(3));
    BlockTransformerProvider provider=StructureHandler.blockTransformerProviderForID(currentTransformerType);
    BlockTransformer blockTransformer=provider.defaultTransformer();
    TableDataSource tableDataSource=provider.tableDataSource(blockTransformer);
    blockTransformerList.add(index,blockTransformer);
    navigator.pushTable(new GuiTable(tableDelegate,tableDataSource));
  }
 else   if (actionID.equals(""String_Node_Str"")) {
    currentTransformerType=nextTransformerID(currentTransformerType);
    tableDelegate.reloadData();
  }
 else   if (tableElementButton.getID().startsWith(""String_Node_Str"")) {
    int index=Integer.valueOf(tableElementButton.getID().substring(11));
    BlockTransformer blockTransformer=blockTransformerList.get(index);
    BlockTransformerProvider provider=StructureHandler.blockTransformerProviderForID(StructureHandler.blockTransformerIDForType(blockTransformer.getClass()));
    if (actionID.equals(""String_Node_Str"")) {
      navigator.pushTable(new GuiTable(tableDelegate,provider.tableDataSource(blockTransformer)));
    }
 else     if (actionID.equals(""String_Node_Str"")) {
      blockTransformerList.remove(blockTransformer);
      tableDelegate.reloadData();
    }
 else     if (actionID.equals(""String_Node_Str"")) {
      blockTransformerList.remove(index);
      blockTransformerList.add(index - 1,blockTransformer);
      tableDelegate.reloadData();
    }
 else     if (actionID.equals(""String_Node_Str"")) {
      blockTransformerList.remove(index);
      blockTransformerList.add(index + 1,blockTransformer);
      tableDelegate.reloadData();
    }
  }
}","@Override public void actionPerformed(TableElementButton tableElementButton,String actionID){
  if (actionID.equals(""String_Node_Str"")) {
    int index=Integer.valueOf(tableElementButton.getID().substring(3));
    BlockTransformerProvider provider=StructureHandler.blockTransformerProviderForID(currentTransformerType);
    BlockTransformer blockTransformer=provider.defaultTransformer();
    TableDataSource tableDataSource=provider.tableDataSource(blockTransformer);
    blockTransformerList.add(index,blockTransformer);
    navigator.pushTable(new GuiTable(tableDelegate,tableDataSource));
  }
 else   if (actionID.equals(""String_Node_Str"")) {
    currentTransformerType=nextTransformerID(currentTransformerType);
    tableDelegate.reloadData();
  }
 else   if (tableElementButton.getID().startsWith(""String_Node_Str"")) {
    int index=Integer.valueOf(tableElementButton.getID().substring(11));
    BlockTransformer blockTransformer=blockTransformerList.get(index);
    BlockTransformerProvider provider=StructureHandler.blockTransformerProviderForID(StructureHandler.blockTransformerIDForType(blockTransformer.getClass()));
switch (actionID) {
case ""String_Node_Str"":
      navigator.pushTable(new GuiTable(tableDelegate,provider.tableDataSource(blockTransformer)));
    break;
case ""String_Node_Str"":
  blockTransformerList.remove(blockTransformer);
tableDelegate.reloadData();
break;
case ""String_Node_Str"":
blockTransformerList.remove(index);
blockTransformerList.add(index - 1,blockTransformer);
tableDelegate.reloadData();
break;
case ""String_Node_Str"":
blockTransformerList.remove(index);
blockTransformerList.add(index + 1,blockTransformer);
tableDelegate.reloadData();
break;
}
}
}",0.8797720797720797
134280,"public static String[] getLines(String content,FontRenderer fontRenderer,int maxStringWidth,int maxCharacters){
  ArrayList<String> returnList=new ArrayList<String>();
  int lastCut=0;
  for (int i=0; i < content.length(); ) {
    int wordEndIndex=i + 1;
    if (content.substring(i).indexOf(""String_Node_Str"") == -1) {
      wordEndIndex=content.length();
    }
 else {
      wordEndIndex=i + content.substring(i).indexOf(""String_Node_Str"");
    }
    String currentPageString=content.substring(lastCut,wordEndIndex);
    int realLength=fontRenderer.getStringWidth(currentPageString);
    if (!(realLength <= maxStringWidth && currentPageString.length() < maxCharacters)) {
      returnList.add(content.substring(lastCut,i));
      lastCut=i;
    }
    i=wordEndIndex + 1;
  }
  if (lastCut < content.length()) {
    returnList.add(content.substring(lastCut,content.length()));
  }
  String[] returnArray=new String[returnList.size()];
  for (int i=0; i < returnList.size(); i++) {
    returnArray[i]=returnList.get(i);
  }
  return returnArray;
}","public static String[] getLines(String content,FontRenderer fontRenderer,int maxStringWidth,int maxCharacters){
  ArrayList<String> returnList=new ArrayList<>();
  int lastCut=0;
  for (int i=0; i < content.length(); ) {
    int wordEndIndex=i + 1;
    if (content.substring(i).indexOf(""String_Node_Str"") == -1) {
      wordEndIndex=content.length();
    }
 else {
      wordEndIndex=i + content.substring(i).indexOf(""String_Node_Str"");
    }
    String currentPageString=content.substring(lastCut,wordEndIndex);
    int realLength=fontRenderer.getStringWidth(currentPageString);
    if (!(realLength <= maxStringWidth && currentPageString.length() < maxCharacters)) {
      returnList.add(content.substring(lastCut,i));
      lastCut=i;
    }
    i=wordEndIndex + 1;
  }
  if (lastCut < content.length()) {
    returnList.add(content.substring(lastCut,content.length()));
  }
  String[] returnArray=new String[returnList.size()];
  for (int i=0; i < returnList.size(); i++) {
    returnArray[i]=returnList.get(i);
  }
  return returnArray;
}",0.9971291866028708
134281,"public static String[] getPages(String content,FontRenderer fontRenderer,int maxStringWidth,int maxCharacters){
  ArrayList<String> returnList=new ArrayList<String>();
  int lastCut=0;
  for (int i=0; i < content.length(); ) {
    int wordEndIndex=i + 1;
    if (content.substring(i).indexOf(""String_Node_Str"") == -1) {
      wordEndIndex=content.length();
    }
 else {
      wordEndIndex=i + content.substring(i).indexOf(""String_Node_Str"");
    }
    String currentPageString=content.substring(lastCut,wordEndIndex);
    int realLength=fontRenderer.splitStringWidth(currentPageString,maxStringWidth);
    if (!(realLength <= maxStringWidth && currentPageString.length() < maxCharacters)) {
      returnList.add(content.substring(lastCut,i));
      lastCut=i;
    }
    i=wordEndIndex + 1;
  }
  if (lastCut < content.length()) {
    returnList.add(content.substring(lastCut,content.length()));
  }
  String[] returnArray=new String[returnList.size()];
  for (int i=0; i < returnList.size(); i++) {
    returnArray[i]=returnList.get(i);
  }
  return returnArray;
}","public static String[] getPages(String content,FontRenderer fontRenderer,int maxStringWidth,int maxCharacters){
  ArrayList<String> returnList=new ArrayList<>();
  int lastCut=0;
  for (int i=0; i < content.length(); ) {
    int wordEndIndex=!content.substring(i).contains(""String_Node_Str"") ? content.length() : i + content.substring(i).indexOf(""String_Node_Str"");
    String currentPageString=content.substring(lastCut,wordEndIndex);
    int realLength=fontRenderer.splitStringWidth(currentPageString,maxStringWidth);
    if (!(realLength <= maxStringWidth && currentPageString.length() < maxCharacters)) {
      returnList.add(content.substring(lastCut,i));
      lastCut=i;
    }
    i=wordEndIndex + 1;
  }
  if (lastCut < content.length()) {
    returnList.add(content.substring(lastCut,content.length()));
  }
  String[] returnArray=new String[returnList.size()];
  for (int i=0; i < returnList.size(); i++) {
    returnArray[i]=returnList.get(i);
  }
  return returnArray;
}",0.8891060087933561
134282,"public IvBezierPath3D(List<IvBezierPoint3D> bezierPoints){
  cachedProgresses=new ArrayList<Double>();
  cachedDistances=new ArrayList<Double>();
  setBezierPoints(bezierPoints);
}","public IvBezierPath3D(List<IvBezierPoint3D> bezierPoints){
  cachedProgresses=new ArrayList<>();
  cachedDistances=new ArrayList<>();
  setBezierPoints(bezierPoints);
}",0.9655172413793104
134283,"public void setBezierPoints(List<IvBezierPoint3D> points){
  this.bezierPoints=new ArrayList<IvBezierPoint3D>();
  this.bezierPoints.addAll(points);
  markDirty();
}","public void setBezierPoints(List<IvBezierPoint3D> points){
  this.bezierPoints=new ArrayList<>();
  this.bezierPoints.addAll(points);
  markDirty();
}",0.9523809523809524
134284,"public List<IvBezierPoint3D> getBezierPoints(){
  List<IvBezierPoint3D> l=new ArrayList<IvBezierPoint3D>(bezierPoints.size());
  l.addAll(bezierPoints);
  return l;
}","public List<IvBezierPoint3D> getBezierPoints(){
  List<IvBezierPoint3D> l=new ArrayList<>(bezierPoints.size());
  l.addAll(bezierPoints);
  return l;
}",0.9526813880126184
134285,"public static IvBezierPath3D createQuickBezierPath(IvBezierPoint3D[] points){
  ArrayList<IvBezierPoint3D> bezierPoints=new ArrayList<IvBezierPoint3D>();
  Collections.addAll(bezierPoints,points);
  return new IvBezierPath3D(bezierPoints);
}","public static IvBezierPath3D createQuickBezierPath(IvBezierPoint3D[] points){
  ArrayList<IvBezierPoint3D> bezierPoints=new ArrayList<>();
  Collections.addAll(bezierPoints,points);
  return new IvBezierPath3D(bezierPoints);
}",0.9678800856531048
134286,"public static IvBezierPath3D createSpiraledSphere(double radius,double spirals,double fontSize){
  ArrayList<IvBezierPoint3D> bezierPoints=new ArrayList<IvBezierPoint3D>();
  double centerYShift=-radius * 0.5;
  for (double height=0; height <= radius; height+=radius / spirals) {
    double height0=height;
    double height1=height + (radius / spirals) * 0.25;
    double height2=height + (radius / spirals) * 0.5;
    double height3=height + (radius / spirals) * 0.75;
    double distance0=MathHelper.cos((float)(height0 / radius - 0.5) * 3.1415926f);
    double distance1=MathHelper.cos((float)(height1 / radius - 0.5) * 3.1415926f);
    double distance2=MathHelper.cos((float)(height2 / radius - 0.5) * 3.1415926f);
    double distance3=MathHelper.cos((float)(height3 / radius - 0.5) * 3.1415926f);
    bezierPoints.add(new IvBezierPoint3D(new double[]{distance0,height0 + centerYShift,-distance0},new double[]{-0.5 * distance0,0.0,-0.5 * distance0},0xffffffff,0.0,fontSize));
    if (height1 <= radius) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance1,height1 + centerYShift,-distance1},new double[]{-0.5 * distance1,0.0,0.5 * distance1},0xffffffff,0.0,fontSize));
    }
    if (height2 <= radius) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance2,height2 + centerYShift,distance2},new double[]{0.5 * distance2,0.0,0.5 * distance2},0xffffffff,0.0,fontSize));
    }
    if (height3 <= radius) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{distance3,height3 + centerYShift,distance3},new double[]{0.5 * distance3,0.0,-0.5 * distance3},0xffffffff,0.0,fontSize));
    }
  }
  return new IvBezierPath3D(bezierPoints);
}","public static IvBezierPath3D createSpiraledSphere(double radius,double spirals,double fontSize){
  ArrayList<IvBezierPoint3D> bezierPoints=new ArrayList<>();
  double centerYShift=-radius * 0.5;
  for (double height=0; height <= radius; height+=radius / spirals) {
    double height0=height;
    double height1=height + (radius / spirals) * 0.25;
    double height2=height + (radius / spirals) * 0.5;
    double height3=height + (radius / spirals) * 0.75;
    double distance0=MathHelper.cos((float)(height0 / radius - 0.5) * 3.1415926f);
    double distance1=MathHelper.cos((float)(height1 / radius - 0.5) * 3.1415926f);
    double distance2=MathHelper.cos((float)(height2 / radius - 0.5) * 3.1415926f);
    double distance3=MathHelper.cos((float)(height3 / radius - 0.5) * 3.1415926f);
    bezierPoints.add(new IvBezierPoint3D(new double[]{distance0,height0 + centerYShift,-distance0},new double[]{-0.5 * distance0,0.0,-0.5 * distance0},0xffffffff,0.0,fontSize));
    if (height1 <= radius) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance1,height1 + centerYShift,-distance1},new double[]{-0.5 * distance1,0.0,0.5 * distance1},0xffffffff,0.0,fontSize));
    }
    if (height2 <= radius) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance2,height2 + centerYShift,distance2},new double[]{0.5 * distance2,0.0,0.5 * distance2},0xffffffff,0.0,fontSize));
    }
    if (height3 <= radius) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{distance3,height3 + centerYShift,distance3},new double[]{0.5 * distance3,0.0,-0.5 * distance3},0xffffffff,0.0,fontSize));
    }
  }
  return new IvBezierPath3D(bezierPoints);
}",0.9954887218045112
134287,"public static IvBezierPath3D createSpiraledBezierPath(double distCenter,double heightDistInf,double spirals,double[] endPos,double fontSize,double heightFontInf,boolean staged){
  ArrayList<IvBezierPoint3D> bezierPoints=new ArrayList<IvBezierPoint3D>();
  for (double height=0; height <= endPos[1]; height+=endPos[1] / spirals) {
    double height0=height;
    double height1=height + (endPos[1] / spirals) * 0.25;
    double height2=height + (endPos[1] / spirals) * 0.5;
    double height3=height + (endPos[1] / spirals) * 0.75;
    double x0=height0 / endPos[1] * endPos[0];
    double x1=height1 / endPos[1] * endPos[0];
    double x2=height2 / endPos[1] * endPos[0];
    double x3=height3 / endPos[1] * endPos[0];
    double z0=height0 / endPos[1] * endPos[2];
    double z1=height1 / endPos[1] * endPos[2];
    double z2=height2 / endPos[1] * endPos[2];
    double z3=height3 / endPos[1] * endPos[2];
    double distance0=distCenter * (1.0 + (staged ? height : height0) * heightDistInf);
    double distance1=distCenter * (1.0 + (staged ? height : height1) * heightDistInf);
    double distance2=distCenter * (1.0 + (staged ? height : height2) * heightDistInf);
    double distance3=distCenter * (1.0 + (staged ? height : height3) * heightDistInf);
    bezierPoints.add(new IvBezierPoint3D(new double[]{distance0 + x0,height0,-distance0 + z0},new double[]{-0.5 * distance0,0.0,-0.5 * distance0},0xffffffff,0.0,fontSize + height0 / endPos[1] * heightFontInf));
    if (height1 <= endPos[1]) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance1 + x1,height1,-distance1 + z1},new double[]{-0.5 * distance1,0.0,0.5 * distance1},0xffffffff,0.0,fontSize + height1 / endPos[1] * heightFontInf));
    }
    if (height2 <= endPos[1]) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance2 + x2,height2,distance2 + z2},new double[]{0.5 * distance2,0.0,0.5 * distance2},0xffffffff,0.0,fontSize + height2 / endPos[1] * heightFontInf));
    }
    if (height3 <= endPos[1]) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{distance3 + x3,height3,distance3 + z3},new double[]{0.5 * distance3,0.0,-0.5 * distance3},0xffffffff,0.0,fontSize + height3 / endPos[1] * heightFontInf));
    }
  }
  return new IvBezierPath3D(bezierPoints);
}","public static IvBezierPath3D createSpiraledBezierPath(double distCenter,double heightDistInf,double spirals,double[] endPos,double fontSize,double heightFontInf,boolean staged){
  ArrayList<IvBezierPoint3D> bezierPoints=new ArrayList<>();
  for (double height=0; height <= endPos[1]; height+=endPos[1] / spirals) {
    double height0=height;
    double height1=height + (endPos[1] / spirals) * 0.25;
    double height2=height + (endPos[1] / spirals) * 0.5;
    double height3=height + (endPos[1] / spirals) * 0.75;
    double x0=height0 / endPos[1] * endPos[0];
    double x1=height1 / endPos[1] * endPos[0];
    double x2=height2 / endPos[1] * endPos[0];
    double x3=height3 / endPos[1] * endPos[0];
    double z0=height0 / endPos[1] * endPos[2];
    double z1=height1 / endPos[1] * endPos[2];
    double z2=height2 / endPos[1] * endPos[2];
    double z3=height3 / endPos[1] * endPos[2];
    double distance0=distCenter * (1.0 + (staged ? height : height0) * heightDistInf);
    double distance1=distCenter * (1.0 + (staged ? height : height1) * heightDistInf);
    double distance2=distCenter * (1.0 + (staged ? height : height2) * heightDistInf);
    double distance3=distCenter * (1.0 + (staged ? height : height3) * heightDistInf);
    bezierPoints.add(new IvBezierPoint3D(new double[]{distance0 + x0,height0,-distance0 + z0},new double[]{-0.5 * distance0,0.0,-0.5 * distance0},0xffffffff,0.0,fontSize + height0 / endPos[1] * heightFontInf));
    if (height1 <= endPos[1]) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance1 + x1,height1,-distance1 + z1},new double[]{-0.5 * distance1,0.0,0.5 * distance1},0xffffffff,0.0,fontSize + height1 / endPos[1] * heightFontInf));
    }
    if (height2 <= endPos[1]) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{-distance2 + x2,height2,distance2 + z2},new double[]{0.5 * distance2,0.0,0.5 * distance2},0xffffffff,0.0,fontSize + height2 / endPos[1] * heightFontInf));
    }
    if (height3 <= endPos[1]) {
      bezierPoints.add(new IvBezierPoint3D(new double[]{distance3 + x3,height3,distance3 + z3},new double[]{0.5 * distance3,0.0,-0.5 * distance3},0xffffffff,0.0,fontSize + height3 / endPos[1] * heightFontInf));
    }
  }
  return new IvBezierPath3D(bezierPoints);
}",0.35395874916833
134288,"public void render(IvBezierPath3D path){
  if (path.isDirty()) {
    path.buildDistances();
  }
  GL11.glEnable(GL11.GL_BLEND);
  OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
  String plainText=""String_Node_Str"";
  ArrayList<String> modifiers=new ArrayList<String>();
  modifiers.add(""String_Node_Str"");
  for (int i=0; i < text.length(); i++) {
    char character=text.charAt(i);
    if (character == '\u00A7' && i + 1 < text.length()) {
      modifiers.set(modifiers.size() - 1,modifiers.get(modifiers.size() - 1) + text.substring(i,i + 2));
      i++;
    }
 else {
      plainText=plainText + character;
      modifiers.add(modifiers.get(modifiers.size() - 1));
    }
  }
  for (int i=0; i < plainText.length(); i++) {
    int charIndex=inwards ? i : plainText.length() - i - 1;
    char character=plainText.charAt(charIndex);
    if (character != ' ') {
      double totalProgress=(spreadToFill ? ((double)i / (double)text.length()) : (i * 0.5)) + shift;
      double finalProgress=((totalProgress % 1.0) + 1.0) % 1.0;
      if (finalProgress >= capBottom && finalProgress <= capTop) {
        IvBezierPoint3DCachedStep cachedStep=path.getCachedStep(finalProgress);
        double[] position=cachedStep.getPosition();
        double[] rotation=path.getNaturalRotation(cachedStep,0.01);
        double red=IvMathHelper.mix(cachedStep.getLeftPoint().getRed(),cachedStep.getRightPoint().getRed(),cachedStep.getInnerProgress());
        double green=IvMathHelper.mix(cachedStep.getLeftPoint().getGreen(),cachedStep.getRightPoint().getGreen(),cachedStep.getInnerProgress());
        double blue=IvMathHelper.mix(cachedStep.getLeftPoint().getBlue(),cachedStep.getRightPoint().getBlue(),cachedStep.getInnerProgress());
        double alpha=IvMathHelper.mix(cachedStep.getLeftPoint().getAlpha(),cachedStep.getRightPoint().getAlpha(),cachedStep.getInnerProgress());
        double textSize=IvMathHelper.mix(cachedStep.getLeftPoint().getFontSize(),cachedStep.getRightPoint().getFontSize(),cachedStep.getInnerProgress());
        GL11.glPushMatrix();
        GL11.glTranslated(position[0],position[1],position[2]);
        GL11.glScaled(-textSize / 12.0,-textSize / 12.0,-textSize / 12.0);
        GL11.glRotatef((float)rotation[0] + (inwards ? 0.0f : 180.0f),0.0f,1.0f,0.0f);
        GL11.glRotatef((float)rotation[1],1.0f,0.0f,0.0f);
        fontRenderer.drawString(modifiers.get(charIndex) + character,0,0,((int)(red * 255.0) << 16) + ((int)(green * 255.0) << 8) + ((int)(blue * 255.0)));
        GL11.glPopMatrix();
      }
    }
  }
  GL11.glDisable(GL11.GL_BLEND);
}","public void render(IvBezierPath3D path){
  if (path.isDirty()) {
    path.buildDistances();
  }
  GL11.glEnable(GL11.GL_BLEND);
  OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
  String plainText=""String_Node_Str"";
  ArrayList<String> modifiers=new ArrayList<>();
  modifiers.add(""String_Node_Str"");
  for (int i=0; i < text.length(); i++) {
    char character=text.charAt(i);
    if (character == '\u00A7' && i + 1 < text.length()) {
      modifiers.set(modifiers.size() - 1,modifiers.get(modifiers.size() - 1) + text.substring(i,i + 2));
      i++;
    }
 else {
      plainText=plainText + character;
      modifiers.add(modifiers.get(modifiers.size() - 1));
    }
  }
  for (int i=0; i < plainText.length(); i++) {
    int charIndex=inwards ? i : plainText.length() - i - 1;
    char character=plainText.charAt(charIndex);
    if (character != ' ') {
      double totalProgress=(spreadToFill ? ((double)i / (double)text.length()) : (i * 0.5)) + shift;
      double finalProgress=((totalProgress % 1.0) + 1.0) % 1.0;
      if (finalProgress >= capBottom && finalProgress <= capTop) {
        IvBezierPoint3DCachedStep cachedStep=path.getCachedStep(finalProgress);
        double[] position=cachedStep.getPosition();
        double[] rotation=path.getNaturalRotation(cachedStep,0.01);
        double red=IvMathHelper.mix(cachedStep.getLeftPoint().getRed(),cachedStep.getRightPoint().getRed(),cachedStep.getInnerProgress());
        double green=IvMathHelper.mix(cachedStep.getLeftPoint().getGreen(),cachedStep.getRightPoint().getGreen(),cachedStep.getInnerProgress());
        double blue=IvMathHelper.mix(cachedStep.getLeftPoint().getBlue(),cachedStep.getRightPoint().getBlue(),cachedStep.getInnerProgress());
        double alpha=IvMathHelper.mix(cachedStep.getLeftPoint().getAlpha(),cachedStep.getRightPoint().getAlpha(),cachedStep.getInnerProgress());
        double textSize=IvMathHelper.mix(cachedStep.getLeftPoint().getFontSize(),cachedStep.getRightPoint().getFontSize(),cachedStep.getInnerProgress());
        GL11.glPushMatrix();
        GL11.glTranslated(position[0],position[1],position[2]);
        GL11.glScaled(-textSize / 12.0,-textSize / 12.0,-textSize / 12.0);
        GL11.glRotatef((float)rotation[0] + (inwards ? 0.0f : 180.0f),0.0f,1.0f,0.0f);
        GL11.glRotatef((float)rotation[1],1.0f,0.0f,0.0f);
        fontRenderer.drawString(modifiers.get(charIndex) + character,0,0,((int)(red * 255.0) << 16) + ((int)(green * 255.0) << 8) + ((int)(blue * 255.0)));
        GL11.glPopMatrix();
      }
    }
  }
  GL11.glDisable(GL11.GL_BLEND);
}",0.9988532110091743
134289,"public static List<List<int[]>> getValidPlacements(List<int[]> positions,World world,int x,int y,int z,int blockSide,ItemStack itemStack,EntityPlayer player,Block block){
  Block var11=world.getBlock(x,y,z);
  if (var11 == Blocks.snow_layer && (world.getBlockMetadata(x,y,z) & 7) < 1) {
    blockSide=1;
  }
 else   if (var11 != Blocks.vine && var11 != Blocks.tallgrass && var11 != Blocks.deadbush && !var11.isReplaceable(world,x,y,z)) {
    if (blockSide == 0) {
      --y;
    }
 else     if (blockSide == 1) {
      ++y;
    }
 else     if (blockSide == 2) {
      --z;
    }
 else     if (blockSide == 3) {
      ++z;
    }
 else     if (blockSide == 4) {
      --x;
    }
 else     if (blockSide == 5) {
      ++x;
    }
  }
  if (!player.canPlayerEdit(x,y,z,blockSide,itemStack)) {
    return new ArrayList<List<int[]>>();
  }
 else   if (y == world.getHeight() && block.getMaterial().isSolid()) {
    return new ArrayList<List<int[]>>();
  }
 else {
    int[] lengths=getLengths(positions);
    int[] min=getExtremeCoords(positions,true);
    ArrayList<List<int[]>> validPlacements=new ArrayList<List<int[]>>();
    for (int xShift=min[0] - lengths[0]; xShift <= min[0]; xShift++) {
      for (int yShift=min[0] - lengths[1]; yShift <= min[1]; yShift++) {
        for (int zShift=min[0] - lengths[2]; zShift <= min[2]; zShift++) {
          ArrayList<int[]> validPositions=new ArrayList<int[]>();
          for (          int[] position : positions) {
            validPositions.add(new int[]{position[0] + x + xShift,position[1] + y + yShift,position[2] + z + zShift});
          }
          if (canPlace(world,block,validPositions,null,itemStack)) {
            validPlacements.add(validPositions);
          }
        }
      }
    }
    return validPlacements;
  }
}","public static List<List<int[]>> getValidPlacements(List<int[]> positions,World world,int x,int y,int z,int blockSide,ItemStack itemStack,EntityPlayer player,Block block){
  Block var11=world.getBlock(x,y,z);
  if (var11 == Blocks.snow_layer && (world.getBlockMetadata(x,y,z) & 7) < 1) {
    blockSide=1;
  }
 else   if (var11 != Blocks.vine && var11 != Blocks.tallgrass && var11 != Blocks.deadbush && !var11.isReplaceable(world,x,y,z)) {
    if (blockSide == 0) {
      --y;
    }
 else     if (blockSide == 1) {
      ++y;
    }
 else     if (blockSide == 2) {
      --z;
    }
 else     if (blockSide == 3) {
      ++z;
    }
 else     if (blockSide == 4) {
      --x;
    }
 else     if (blockSide == 5) {
      ++x;
    }
  }
  if (!player.canPlayerEdit(x,y,z,blockSide,itemStack)) {
    return new ArrayList<>();
  }
 else   if (y == world.getHeight() && block.getMaterial().isSolid()) {
    return new ArrayList<>();
  }
 else {
    int[] lengths=getLengths(positions);
    int[] min=getExtremeCoords(positions,true);
    ArrayList<List<int[]>> validPlacements=new ArrayList<>();
    for (int xShift=min[0] - lengths[0]; xShift <= min[0]; xShift++) {
      for (int yShift=min[0] - lengths[1]; yShift <= min[1]; yShift++) {
        for (int zShift=min[0] - lengths[2]; zShift <= min[2]; zShift++) {
          ArrayList<int[]> validPositions=new ArrayList<>();
          for (          int[] position : positions) {
            validPositions.add(new int[]{position[0] + x + xShift,position[1] + y + yShift,position[2] + z + zShift});
          }
          if (canPlace(world,block,validPositions,null,itemStack)) {
            validPlacements.add(validPositions);
          }
        }
      }
    }
    return validPlacements;
  }
}",0.8503981797497155
134290,"public static List<int[]> getPositions(int width,int height,int length){
  ArrayList<int[]> positions=new ArrayList<int[]>();
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      for (int z=0; z < length; z++) {
        positions.add(new int[]{x,y,z});
      }
    }
  }
  return positions;
}","public static List<int[]> getPositions(int width,int height,int length){
  ArrayList<int[]> positions=new ArrayList<>();
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      for (int z=0; z < length; z++) {
        positions.add(new int[]{x,y,z});
      }
    }
  }
  return positions;
}",0.9920255183413078
134291,"public static List<EntityPlayerMP> getPlayersWatchingChunk(World world,int chunkX,int chunkZ){
  if (world.isRemote || !(world instanceof WorldServer)) {
    return new ArrayList<EntityPlayerMP>(0);
  }
  ArrayList<EntityPlayerMP> playersWatching=new ArrayList<EntityPlayerMP>();
  WorldServer server=(WorldServer)world;
  PlayerManager playerManager=server.getPlayerManager();
  List<EntityPlayerMP> players=server.playerEntities;
  for (  EntityPlayerMP player : players) {
    if (playerManager.isPlayerWatchingChunk(player,chunkX,chunkZ)) {
      playersWatching.add(player);
    }
  }
  return playersWatching;
}","public static List<EntityPlayerMP> getPlayersWatchingChunk(World world,int chunkX,int chunkZ){
  if (world.isRemote || !(world instanceof WorldServer)) {
    return new ArrayList<>(0);
  }
  ArrayList<EntityPlayerMP> playersWatching=new ArrayList<>();
  WorldServer server=(WorldServer)world;
  PlayerManager playerManager=server.getPlayerManager();
  List<EntityPlayerMP> players=server.playerEntities;
  for (  EntityPlayerMP player : players) {
    if (playerManager.isPlayerWatchingChunk(player,chunkX,chunkZ)) {
      playersWatching.add(player);
    }
  }
  return playersWatching;
}",0.976782752902156
134292,"@Override public boolean execute() throws Exception {
  if (crawler.getImageUrl() != null) {
    try (InputStream is=getConnection().getInputStream();ByteArrayOutputStream os=new ByteArrayOutputStream()){
      transfer(is,os);
      BufferedImage img=ImageIO.read(new ByteArrayInputStream(os.toByteArray()));
      img=imageManager.resizeImage(img,imageManager.scaleToFit(img,Mod.MAX_IMAGE_SIZE));
      mod.setImage(img);
    }
   }
  return true;
}","@Override public boolean execute() throws Exception {
  if (crawler.getImageUrl() != null) {
    try (InputStream is=getConnection().getInputStream();ByteArrayOutputStream os=new ByteArrayOutputStream()){
      transfer(is,os);
      BufferedImage img=ImageIO.read(new ByteArrayInputStream(os.toByteArray()));
      if (img != null) {
        img=imageManager.resizeImage(img,imageManager.scaleToFit(img,Mod.MAX_IMAGE_SIZE));
        mod.setImage(img);
      }
    }
   }
  return true;
}",0.9329073482428116
134293,"@Override protected Mod getMod() throws IOException {
  crawler.updateMod();
  return crawler.getMod();
}","@Override protected Mod getMod() throws IOException {
  crawler.updateMod();
  crawler.getMod().setUpdateAvailable(false);
  return crawler.getMod();
}",0.8203125
134294,"public Mod get(int id){
  try {
    return modDao.queryForId(id);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","@Override public Mod get(int id){
  try {
    return modDao.queryForId(id);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.965034965034965
134295,"@Override public void updateMod(Mod mod){
  try {
    modDao.createOrUpdate(mod);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","@Override public void updateMod(Mod mod){
  try {
    Installation installation=mod.getInstallation();
    if (installation.addMod(mod)) {
      installationDao.update(installation);
    }
    modDao.createOrUpdate(mod);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.6890380313199105
134296,"@Override public String toString(){
  return name;
}","@Override public String toString(){
  return getName();
}",0.9357798165137616
134297,"@Override public int hashCode(){
  return Integer.hashCode(id);
}","@Override public int hashCode(){
  return new Integer(id).hashCode();
}",0.9264705882352942
134298,"public static TinkerConfig create(){
  ConfigBuilder builder=new ConfigBuilder();
  builder.addBooleanProperty(AUTO_CHECK_FOR_MOD_UPDATES,false,false,false);
  builder.addBooleanProperty(STARTUP_CHECK_MM_UPDATES,true,false,false);
  builder.addPathProperty(GAMEDATA_PATH,JFileChooser.DIRECTORIES_ONLY,null,false,false);
  builder.addIntProperty(NUM_CONCURRENT_DOWNLOADS,4,1,null,false,false);
  builder.addStringProperty(KSP_WIN_LAUNCH_ARGS,null,true,false);
  builder.addStringProperty(WIN_64,null,true,true);
  Config config=builder.createConfigInDocuments(String.format(""String_Node_Str"",TinkerTime.SAFE_NAME),TinkerTime.NAME,""String_Node_Str"");
  try {
    config.reload();
  }
 catch (  InvalidInputException|IOException e) {
    new OptionsWindow(config).toDialog();
    try {
      config.reload();
    }
 catch (    IOException|InvalidInputException e1) {
      throw new RuntimeException(e);
    }
  }
  return new TinkerConfig(config);
}","public static TinkerConfig create(){
  ConfigBuilder builder=new ConfigBuilder();
  builder.addBooleanProperty(AUTO_CHECK_FOR_MOD_UPDATES,false,false,false);
  builder.addBooleanProperty(STARTUP_CHECK_MM_UPDATES,true,false,false);
  builder.addPathProperty(GAMEDATA_PATH,JFileChooser.DIRECTORIES_ONLY,null,false,false);
  builder.addIntProperty(NUM_CONCURRENT_DOWNLOADS,4,1,null,false,false);
  builder.addStringProperty(KSP_WIN_LAUNCH_ARGS,null,true,false);
  Config config=builder.createConfigInDocuments(String.format(""String_Node_Str"",TinkerTime.SAFE_NAME),TinkerTime.NAME,""String_Node_Str"");
  try {
    config.reload();
    if (config.getProperty(GAMEDATA_PATH).getValueAsString() == null) {
      throw new IllegalStateException();
    }
  }
 catch (  InvalidInputException|IOException|IllegalStateException e) {
    new OptionsWindow(config).toDialog();
    try {
      config.reload();
    }
 catch (    IOException|InvalidInputException e1) {
      throw new RuntimeException(e);
    }
  }
  return new TinkerConfig(config);
}",0.902672718103883
134299,"public void updateMods() throws ModUpdateFailedError, ModNotDownloadedException {
  for (  Mod mod : modLoader.getMods()) {
    updateMod(mod,false);
  }
}","public void updateMods() throws ModUpdateFailedError, ModNotDownloadedException {
  for (  Mod mod : modLoader.getMods()) {
    if (mod.isUpdateable()) {
      updateMod(mod,false);
    }
  }
}",0.8908045977011494
134300,"public void downloadMod(URL url) throws UnsupportedHostException {
  ModWorkflowBuilder builder=new ModWorkflowBuilder(Mod.newTempMod(url),crawlerFactory);
  builder.downloadNewMod(config,modLoader);
  submitDownloadWorkflow(builder);
}","public void downloadMod(URL url) throws UnsupportedHostException, MalformedURLException {
  ModWorkflowBuilder builder=new ModWorkflowBuilder(Mod.newTempMod(crawlerFactory.getCrawler(url)),crawlerFactory);
  builder.downloadNewMod(config,modLoader);
  submitDownloadWorkflow(builder);
}",0.89272030651341
134301,"/** 
 * Loads the mods from the given file and returns them.
 * @param path file to get mods from
 * @param mm ModManager reference
 * @return set of mods loaded from the file
 */
private Set<Mod> loadMods(Path path,ModManager mm){
  Set<Mod> mods=new HashSet<>();
  try (FileReader reader=new FileReader(path.toFile())){
    Set<Mod> newMods=gson.fromJson(reader,modsType);
    for (    Mod newMod : newMods) {
      if (newMod.isUpdateable() || isDownloaded(newMod) || trySatisfyLocalFiles(newMod,mm)) {
        mods.add(newMod);
      }
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  DefaultMods.ensureDefaults(mods);
  return mods;
}","/** 
 * Loads the mods from the given file and returns them.
 * @param path file to get mods from
 * @param mm ModManager reference
 * @return set of mods loaded from the file
 */
private Set<Mod> loadMods(Path path,ModManager mm){
  Set<Mod> mods=new HashSet<>();
  try (FileReader reader=new FileReader(path.toFile())){
    Set<Mod> newMods=gson.fromJson(reader,MODS_TYPE);
    for (    Mod newMod : newMods) {
      if (newMod.isUpdateable() || isDownloaded(newMod) || trySatisfyLocalFiles(newMod,mm)) {
        mods.add(newMod);
      }
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  DefaultMods.ensureDefaults(mods);
  return mods;
}",0.9892933618843684
134302,"public synchronized boolean isEnabled(Mod mod) throws ModNotDownloadedException {
  for (  Path filePath : getModFileDestPaths(mod)) {
    if (!filePath.toFile().exists()) {
      return false;
    }
  }
  return true;
}","public synchronized boolean isEnabled(Mod mod) throws ModNotDownloadedException {
  for (  Path filePath : getModFileDestPaths(mod)) {
    if (filePath.getFileName().toString().contains(""String_Node_Str"") && !filePath.toFile().exists()) {
      return false;
    }
  }
  return true;
}",0.8712871287128713
134303,"private void saveMods(Set<Mod> mods,Path path){
  try (FileWriter writer=new FileWriter(path.toFile())){
    gson.toJson(mods,modsType,writer);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void saveMods(Set<Mod> mods,Path path){
  try (FileWriter writer=new FileWriter(path.toFile())){
    gson.toJson(mods,MODS_TYPE,writer);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9635036496350364
134304,"public void addModZip(Path zipPath){
  ModWorkflowBuilder builder=new ModWorkflowBuilder(""String_Node_Str"" + zipPath);
  builder.addLocalMod(zipPath,config,loader);
  builder.addListener(new TaskCallback.WorkflowCompleteCallback(){
    @Override protected void processTaskEvent(    TaskEvent event){
      Mod mod=(Mod)event.data;
      loader.modUpdated(mod);
    }
  }
);
  submitDownloadWorkflow(builder);
}","public void addModZip(Path zipPath){
  ModWorkflowBuilder builder=new ModWorkflowBuilder(""String_Node_Str"" + zipPath);
  final Mod futureMod=builder.addLocalMod(zipPath,config,loader);
  builder.refreshModAfterWorkflowComplete(futureMod,loader);
  submitDownloadWorkflow(builder);
}",0.5173410404624278
134305,"public void toggleMod(final Mod mod) throws IOException {
  if (!mod.isDownloaded(config)) {
    throw new ModNotDownloadedError(mod,""String_Node_Str"");
  }
  ModWorkflowBuilder builder=new ModWorkflowBuilder(""String_Node_Str"" + mod);
  if (mod.isEnabled(config)) {
    builder.disableMod(mod,config,loader);
  }
 else {
    builder.enableMod(mod,config,loader,cr);
  }
  builder.addListener(new TaskCallback.WorkflowCompleteCallback(){
    @Override protected void processTaskEvent(    TaskEvent event){
      loader.modUpdated(mod);
    }
  }
);
  submitEnablerWorkflow(builder);
}","public void toggleMod(final Mod mod) throws IOException {
  if (!mod.isDownloaded(config)) {
    throw new ModNotDownloadedError(mod,""String_Node_Str"");
  }
  ModWorkflowBuilder builder=new ModWorkflowBuilder(""String_Node_Str"" + mod);
  if (mod.isEnabled(config)) {
    builder.disableMod(mod,config,loader);
  }
 else {
    builder.enableMod(mod,config,loader,cr);
  }
  builder.refreshModAfterWorkflowComplete(mod,loader);
  submitEnablerWorkflow(builder);
}",0.7363374880153404
134306,"public void addLocalMod(Path zipPath,TinkerConfig config,ModLoader sm){
  String fileName=zipPath.getFileName().toString();
  String prettyName=fileName;
  if (prettyName.indexOf(""String_Node_Str"") > 0) {
    prettyName=prettyName.substring(0,prettyName.lastIndexOf(""String_Node_Str""));
  }
  Mod newMod=new Mod(fileName,prettyName,fileName,null,null,Calendar.getInstance().getTime(),null);
  copy(zipPath,newMod.getCachedZipPath(config));
}","public Mod addLocalMod(Path zipPath,TinkerConfig config,ModLoader sm){
  String fileName=zipPath.getFileName().toString();
  String prettyName=fileName;
  if (prettyName.indexOf(""String_Node_Str"") > 0) {
    prettyName=prettyName.substring(0,prettyName.lastIndexOf(""String_Node_Str""));
  }
  Mod newMod=new Mod(fileName,prettyName,fileName,null,null,Calendar.getInstance().getTime(),null);
  copy(zipPath,newMod.getCachedZipPath(config));
  return newMod;
}",0.975501113585746
134307,"public synchronized void init(ModManager mm){
  for (  SelectorInterface<Mod> l : getListeners()) {
    l.clear();
  }
  importMods(config.getModsListPath(),mm);
}","public synchronized void init(ModManager mm){
  for (  SelectorInterface<Mod> l : getListeners()) {
    l.clear();
  }
  modCache.clear();
  importMods(config.getModsListPath(),mm);
}",0.9421965317919077
134308,"@Override public JsonElement getPage(URL url) throws IOException {
  List<String> paths=Arrays.asList(url.getPath().split(""String_Node_Str""));
  if (paths.contains(RELEASES)) {
    if (!paths.get(paths.size() - 1).equals(RELEASES)) {
      url=new URL(url.toString().split(RELEASES)[0]);
    }
  }
 else {
    url=new URL(url.toString() + ""String_Node_Str"" + RELEASES);
  }
  return super.getPage(url);
}","@Override public JsonElement getPage(URL url) throws IOException {
  List<String> paths=Arrays.asList(url.getPath().split(""String_Node_Str""));
  if (paths.contains(RELEASES)) {
    if (!paths.get(paths.size() - 1).equals(RELEASES)) {
      url=new URL(url.toString().split(RELEASES)[0]);
    }
  }
 else {
    url=new URL(String.format(""String_Node_Str"",url,RELEASES));
  }
  return super.getPage(url);
}",0.9504950495049505
134309,"public Mod createMod() throws IOException {
  if (cachedMod != null) {
    cachedMod=new Mod(crawler.generateId(),crawler.getName(),crawler.getNewestFileName(),crawler.getCreator(),crawler.getImageUrl(),crawler.getPageUrl(),crawler.getUpdatedOn() != null ? crawler.getUpdatedOn() : Calendar.getInstance().getTime(),crawler.getSupportedVersion());
  }
  return cachedMod;
}","public Mod createMod() throws IOException {
  if (cachedMod == null) {
    cachedMod=new Mod(crawler.generateId(),crawler.getName(),crawler.getNewestFileName(),crawler.getCreator(),crawler.getImageUrl(),crawler.getPageUrl(),crawler.getUpdatedOn() != null ? crawler.getUpdatedOn() : Calendar.getInstance().getTime(),crawler.getSupportedVersion());
  }
  return cachedMod;
}",0.2150537634408602
134310,"@Override public URL getImageUrl() throws IOException {
  JsonElement bgElement=getPage(getApiUrl()).get(""String_Node_Str"");
  if (!bgElement.isJsonNull()) {
    return new URL(""String_Node_Str"",""String_Node_Str"",bgElement.getAsString());
  }
  return null;
}","@Override public URL getImageUrl() throws IOException {
  JsonElement bgElement=getPage(getApiUrl()).get(""String_Node_Str"");
  if (!bgElement.isJsonNull()) {
    return new URL(""String_Node_Str"",getApiUrl().getHost(),bgElement.getAsString());
  }
  return null;
}",0.9272030651340996
134311,"public void modDeleted(Mod mod){
  modCache.remove(mod);
  for (  SelectorInterface<Mod> l : getListeners()) {
    l.removeElement(mod);
  }
  saveMods(modCache,config.getModsListPath());
}","public synchronized void modDeleted(Mod mod){
  modCache.remove(mod);
  for (  SelectorInterface<Mod> l : getListeners()) {
    l.removeElement(mod);
  }
  saveMods(modCache,config.getModsListPath());
}",0.9667519181585678
134312,"private static String getReadmeText(final ZipFile zipFile){
  for (  ZipEntry entry : new HashSet<ZipEntry>(Collections.list(zipFile.entries()))) {
    if (!entry.isDirectory() && entry.getName().toLowerCase().contains(""String_Node_Str"")) {
      try (StringWriter writer=new StringWriter()){
        IOUtils.copy(zipFile.getInputStream(entry),writer);
        return writer.toString();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}","private static String getReadmeText(final ZipFile zipFile){
  for (  ZipEntry entry : new HashSet<ZipEntry>(Collections.list(zipFile.entries()))) {
    if (!entry.isDirectory() && entry.getName().toLowerCase().contains(""String_Node_Str"")) {
      try (StringWriter writer=new StringWriter();InputStream is=zipFile.getInputStream(entry)){
        IOUtils.copy(is,writer);
        return writer.toString();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}",0.9189765458422174
134313,"@Override public URL getImageUrl() throws IOException {
  String imagePath=getPage(getApiUrl()).get(""String_Node_Str"").getAsString();
  return new URL(""String_Node_Str"",""String_Node_Str"",imagePath);
}","@Override public URL getImageUrl() throws IOException {
  JsonElement bgElement=getPage(getApiUrl()).get(""String_Node_Str"");
  if (!bgElement.isJsonNull()) {
    return new URL(""String_Node_Str"",""String_Node_Str"",bgElement.getAsString());
  }
  return null;
}",0.6797385620915033
134314,"private static URLGen modImageLinkGen(final ModCrawler<?> crawler){
  return new URLGen(){
    @Override public URI getURI() throws URISyntaxException {
      return getURL().toURI();
    }
    @Override public URL getURL(){
      try {
        return crawler.getImageUrl();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}","private static URLGen modImageLinkGen(final ModCrawler<?> crawler){
  return new URLGen(){
    @Override public URI getURI() throws URISyntaxException {
      URL url=getURL();
      return url != null ? url.toURI() : null;
    }
    @Override public URL getURL(){
      try {
        return crawler.getImageUrl();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}",0.9111675126903552
134315,"public void enableMod(Mod mod,TinkerConfig config,ModStateManager sm,ConflictResolver cr) throws IOException {
  if (mod.getNewestFileName().toLowerCase().endsWith(""String_Node_Str"")) {
    ModStructure structure=ModStructure.inspectArchive(config,mod);
    for (    ZipNode module : structure.getModules()) {
      addTask(new UnzipTask(config.getGameDataPath(),module,cr));
    }
  }
 else {
    copy(mod.getCachedZipPath(config),config.getGameDataPath());
  }
  addTask(new MarkModEnabledTask(mod,sm,true));
}","public void enableMod(Mod mod,TinkerConfig config,ModStateManager sm,ConflictResolver cr) throws IOException {
  if (modHasArchive(mod)) {
    ModStructure structure=ModStructure.inspectArchive(config,mod);
    for (    ZipNode module : structure.getModules()) {
      addTask(new UnzipTask(config.getGameDataPath(),module,cr));
    }
  }
 else {
    copy(mod.getCachedZipPath(config),config.getGameDataPath());
  }
  addTask(new MarkModEnabledTask(mod,sm,true));
}",0.2661207778915046
134316,"public void disableMod(Mod mod,TinkerConfig config,ModStateManager sm) throws IOException {
  if (mod.getNewestFileName().toLowerCase().endsWith(""String_Node_Str"")) {
    for (    ZipNode module : ModStructure.inspectArchive(config,mod).getModules()) {
      if (!isDependency(module,config,sm)) {
        delete(config.getGameDataPath().resolve(module.getName()));
      }
    }
  }
 else {
    delete(config.getGameDataPath().resolve(mod.getNewestFileName()));
  }
  addTask(new MarkModEnabledTask(mod,sm,false));
}","public void disableMod(Mod mod,TinkerConfig config,ModStateManager sm) throws IOException {
  if (modHasArchive(mod)) {
    for (    ZipNode module : ModStructure.inspectArchive(config,mod).getModules()) {
      if (!isDependency(module,config,sm)) {
        delete(config.getGameDataPath().resolve(module.getName()));
      }
    }
  }
 else {
    delete(config.getGameDataPath().resolve(mod.getNewestFileName()));
  }
  addTask(new MarkModEnabledTask(mod,sm,false));
}",0.9260385005065856
134317,"private boolean isDependency(ZipNode module,TinkerConfig config,ModStateManager sm) throws IOException {
  int numDependencies=0;
  for (  Mod mod : sm.getMods()) {
    try {
      if (ModStructure.inspectArchive(config,mod).usesModule(module)) {
        numDependencies++;
      }
    }
 catch (    FileNotFoundException ex) {
    }
  }
  return numDependencies > 1;
}","private boolean isDependency(ZipNode module,TinkerConfig config,ModStateManager sm) throws IOException {
  int numDependencies=0;
  for (  Mod mod : sm.getMods()) {
    try {
      if (modHasArchive(mod) && ModStructure.inspectArchive(config,mod).usesModule(module)) {
        numDependencies++;
      }
    }
 catch (    FileNotFoundException ex) {
    }
  }
  return numDependencies > 1;
}",0.9710526315789474
134318,"@Override public URL getImageUrl() throws IOException {
  String imagePath=getPage(getApiUrl()).get(""String_Node_Str"").getAsString();
  return new URL(""String_Node_Str"",""String_Node_Str"",imagePath);
}","@Override public URL getImageUrl() throws IOException {
  JsonElement bgElement=getPage(getApiUrl()).get(""String_Node_Str"");
  if (!bgElement.isJsonNull()) {
    return new URL(""String_Node_Str"",""String_Node_Str"",bgElement.getAsString());
  }
  return null;
}",0.6797385620915033
134319,"private static URLGen modImageLinkGen(final ModCrawler<?> crawler){
  return new URLGen(){
    @Override public URI getURI() throws URISyntaxException {
      return getURL().toURI();
    }
    @Override public URL getURL(){
      try {
        return crawler.getImageUrl();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}","private static URLGen modImageLinkGen(final ModCrawler<?> crawler){
  return new URLGen(){
    @Override public URI getURI() throws URISyntaxException {
      URL url=getURL();
      return url != null ? url.toURI() : null;
    }
    @Override public URL getURL(){
      try {
        return crawler.getImageUrl();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}",0.9111675126903552
134320,"private static Path getGameDataPath(Collection<ZipEntry> entries){
  int shortestLength=Integer.MAX_VALUE;
  ZipEntry gameDataEntry=null;
  for (  ZipEntry entry : entries) {
    if (entry.isDirectory()) {
      if (entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        int pathLength=Paths.get(entry.getName()).getNameCount();
        if (pathLength < shortestLength) {
          shortestLength=pathLength;
          gameDataEntry=entry;
        }
      }
    }
  }
  return gameDataEntry != null ? Paths.get(gameDataEntry.getName()) : null;
}","private static Path getGameDataPath(Collection<ZipEntry> entries){
  int shortestLength=Integer.MAX_VALUE;
  Path gameDataPath=null;
  for (  ZipEntry entry : entries) {
    Path path=Paths.get(entry.getName());
    if (entry.isDirectory() && entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
      int pathLength=path.getNameCount();
      if (pathLength < shortestLength) {
        shortestLength=pathLength;
        gameDataPath=path;
      }
    }
 else     if (entry.getName().toLowerCase().startsWith(""String_Node_Str"")) {
      gameDataPath=path.getName(0);
    }
  }
  return gameDataPath;
}",0.5115483319076134
134321,"@Override public void display(Mod element){
  if (element != null) {
    try {
      super.display(element);
      Image cachedImage=ImageIO.read(element.getCachedImagePath(config).toFile());
      label.setIcon(cachedImage != null ? new ImageIcon(cachedImage) : null);
    }
 catch (    IOException ex) {
    }
  }
}","@Override public void display(Mod element){
  if (element != null) {
    try {
      super.display(element);
      BufferedImage image=imageManager.getImage(element.getCachedImagePath(config));
      if (image != null) {
        Dimension size=imageManager.scaleToFit(image,new Dimension(panel.getWidth(),panel.getWidth()));
        label.setIcon(new ImageIcon(imageManager.resizeImage(image,size)));
      }
 else {
        label.setIcon(null);
      }
    }
 catch (    IOException ex) {
    }
  }
}",0.5232273838630807
134322,"@Override public void display(Mod mod){
  this.mod=mod;
  panel.removeAll();
  if (mod != null) {
    panel.setBorder(BorderFactory.createTitledBorder(mod.getName() + ""String_Node_Str"" + mod.getCreator()));
    JLabel updatedLabel=new JLabel();
    updatedLabel.setText(""String_Node_Str"" + DATE_FORMAT.format(mod.getUpdatedOn()));
    panel.add(updatedLabel);
    panel.add(new UrlPanel(""String_Node_Str"",mod.getPageUrl()).getComponent());
    Config config=new Config();
    if (mod.getCachedZipPath(config).toFile().exists()) {
      String readmeText=ArchiveInspector.getReadmeText(config,mod);
      if (readmeText != null && !readmeText.trim().isEmpty()) {
        panel.add(new JLabel(""String_Node_Str""));
        JTextArea readmeArea=new JTextArea(readmeText);
        readmeArea.setLineWrap(true);
        readmeArea.setWrapStyleWord(true);
        readmeArea.setEditable(false);
        panel.add(readmeArea);
      }
    }
  }
}","@Override public void display(Mod mod){
  this.mod=mod;
  panel.removeAll();
  if (mod != null) {
    panel.setBorder(BorderFactory.createTitledBorder(mod.getName() + ""String_Node_Str"" + mod.getCreator()));
    JLabel updatedLabel=new JLabel();
    Date updatedOn=mod.getUpdatedOn();
    updatedLabel.setText(""String_Node_Str"" + (updatedOn != null ? DATE_FORMAT.format(updatedOn) : ""String_Node_Str""));
    panel.add(updatedLabel);
    panel.add(new UrlPanel(""String_Node_Str"",mod.getPageUrl()).getComponent());
    Config config=new Config();
    if (mod.getCachedZipPath(config).toFile().exists()) {
      String readmeText=ArchiveInspector.getReadmeText(config,mod);
      if (readmeText != null && !readmeText.trim().isEmpty()) {
        panel.add(new JLabel(""String_Node_Str""));
        JTextArea readmeArea=new JTextArea(readmeText);
        readmeArea.setLineWrap(true);
        readmeArea.setWrapStyleWord(true);
        readmeArea.setEditable(false);
        panel.add(readmeArea);
      }
    }
  }
}",0.891170431211499
134323,"public synchronized Set<Mod> getMods(){
  if (modCache.isEmpty()) {
    modCache.addAll(loadMods());
  }
  return new HashSet<Mod>(modCache);
}","public synchronized Set<Mod> getMods(){
  if (modCache.isEmpty()) {
    modCache.addAll(loadMods());
    for (    SelectorInterface<Mod> l : getListeners()) {
      l.clear();
      for (      Mod mod : modCache) {
        l.addElement(mod);
      }
    }
  }
  return new HashSet<Mod>(modCache);
}",0.6485260770975056
134324,"private synchronized Set<Mod> loadMods(){
  try (FileReader reader=new FileReader(config.getModsListPath().toFile())){
    Set<Mod> mods=gson.fromJson(reader,modsType);
    if (mods != null) {
      updateListeners(mods);
      return mods;
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  return new HashSet<Mod>();
}","private synchronized Set<Mod> loadMods(){
  try (FileReader reader=new FileReader(config.getModsListPath().toFile())){
    Set<Mod> mods=gson.fromJson(reader,modsType);
    if (mods != null) {
      return mods;
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  return new HashSet<Mod>();
}",0.9602194787379972
134325,"@Override public void setUpdateAvailable(URL pageUrl,String newestFileName){
  for (  Mod mod : getMods()) {
    if (mod.getPageUrl().equals(pageUrl)) {
      modUpdated(mod,false);
      break;
    }
  }
}","@Override public synchronized void setUpdateAvailable(URL pageUrl,String newestFileName){
  for (  Mod mod : getMods()) {
    if (mod.getPageUrl().equals(pageUrl)) {
      modUpdated(mod,false);
      break;
    }
  }
}",0.9694117647058824
134326,"@Override public synchronized void modUpdated(Mod mod,boolean deleted){
  modCache.clear();
  Set<Mod> mods=loadMods();
  Set<Mod> toRemove=new HashSet<>();
  for (  Mod m : mods) {
    if (m.getName().equals(mod.getName())) {
      toRemove.add(m);
    }
  }
  mods.removeAll(toRemove);
  if (!deleted) {
    mods.add(mod);
  }
  saveMods(mods);
}","@Override public synchronized void modUpdated(Mod mod,boolean deleted){
  Set<Mod> toRemove=new HashSet<>();
  for (  Mod m : modCache) {
    if (m.equals(mod)) {
      toRemove.add(mod);
      for (      SelectorInterface<Mod> l : getListeners()) {
        l.removeElement(mod);
      }
    }
  }
  modCache.removeAll(toRemove);
  if (!deleted) {
    modCache.add(mod);
    for (    SelectorInterface<Mod> l : getListeners()) {
      l.addElement(mod);
    }
  }
  try (FileWriter writer=new FileWriter(config.getModsListPath().toFile())){
    gson.toJson(modCache,modsType,writer);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.2235649546827794
134327,"public void updateConfig(boolean restartOnSuccess,boolean exitOnCancel){
  Set<OptionInput> optionInputs=new HashSet<>();
  Option option=new Option(""String_Node_Str"",getGameDataPath().toString(),new OptionSaveStrategy.ConfigStrategy(this,GAMEDATA_PATH));
  optionInputs.add(new OptionInput.FileChooserInput(option,JFileChooser.DIRECTORIES_ONLY));
  option=new Option(""String_Node_Str"",Boolean.toString(autoUpdateModuleManager()),new OptionSaveStrategy.ConfigStrategy(this,AUTO_UPDATE_MM));
  optionInputs.add(new OptionInput.TrueFalseInput(option));
  option=new Option(""String_Node_Str"",Boolean.toString(autoCheckForModUpdates()),new OptionSaveStrategy.ConfigStrategy(this,AUTO_CHECK_FOR_MOD_UPDATES));
  optionInputs.add(new OptionInput.TrueFalseInput(option));
  new OptionsWindow(""String_Node_Str"",optionInputs,restartOnSuccess,exitOnCancel).toDialog();
}","public void updateConfig(boolean restartOnSuccess,boolean exitOnCancel){
  Set<OptionInput> optionInputs=new HashSet<>();
  Option option=new Option(""String_Node_Str"",hasProperty(GAMEDATA_PATH) ? getGameDataPath().toString() : null,new OptionSaveStrategy.ConfigStrategy(this,GAMEDATA_PATH));
  option.addConstraint(new Constraints.NotNull(option));
  option.addConstraint(new Constraints.EnsurePathExists(option,true));
  optionInputs.add(new OptionInput.FileChooserInput(option,JFileChooser.DIRECTORIES_ONLY));
  option=new Option(""String_Node_Str"",Boolean.toString(autoUpdateModuleManager()),new OptionSaveStrategy.ConfigStrategy(this,AUTO_UPDATE_MM));
  optionInputs.add(new OptionInput.TrueFalseInput(option));
  option=new Option(""String_Node_Str"",Boolean.toString(autoCheckForModUpdates()),new OptionSaveStrategy.ConfigStrategy(this,AUTO_CHECK_FOR_MOD_UPDATES));
  optionInputs.add(new OptionInput.TrueFalseInput(option));
  new OptionsWindow(""String_Node_Str"",optionInputs,restartOnSuccess,exitOnCancel).toDialog();
}",0.8386411889596603
134328,"@Override public void verifyConfig(){
  if (!hasProperty(AUTO_UPDATE_MM)) {
    setProperty(AUTO_UPDATE_MM,Boolean.toString(true));
  }
  if (!hasProperty(AUTO_CHECK_FOR_MOD_UPDATES)) {
    setProperty(AUTO_CHECK_FOR_MOD_UPDATES,Boolean.toString(true));
  }
  if (!hasProperty(GAMEDATA_PATH)) {
    updateConfig(true,true);
  }
}","@Override public void verifyConfig(){
  if (!hasProperty(AUTO_UPDATE_MM)) {
    setProperty(AUTO_UPDATE_MM,Boolean.toString(true));
  }
  if (!hasProperty(AUTO_CHECK_FOR_MOD_UPDATES)) {
    setProperty(AUTO_CHECK_FOR_MOD_UPDATES,Boolean.toString(true));
  }
  if (!hasProperty(GAMEDATA_PATH) || getProperty(GAMEDATA_PATH) == null || getProperty(GAMEDATA_PATH).isEmpty()) {
    updateConfig(true,true);
  }
}",0.8940217391304348
134329,"@Override public Path getCurrentPath(){
  for (  File file : destFolder.toFile().listFiles()) {
    if (file.getName().toLowerCase().startsWith(MODULE_MANAGER.toLowerCase())) {
      return file.toPath();
    }
  }
  return null;
}","@Override public Path getCurrentPath(){
  if (destFolder != null && destFolder.toFile().isDirectory()) {
    for (    File file : destFolder.toFile().listFiles()) {
      if (file.getName().toLowerCase().startsWith(MODULE_MANAGER.toLowerCase())) {
        return file.toPath();
      }
    }
  }
  return null;
}",0.8324125230202578
134330,"@Override public void buildWorkflowTask(Workflow workflow,final Crawler<?> crawler,boolean downloadOnlyIfNewer) throws IOException {
  if (currentlyExists()) {
    getCurrentPath().toFile().delete();
  }
  PathGen destGen=new PathGen(){
    @Override public URI getURI() throws URISyntaxException {
      return getPath().toUri();
    }
    @Override public Path getPath(){
      try {
        return destFolder.resolve(crawler.getNewestFileName());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  if (downloadOnlyIfNewer) {
    ModWorkflowBuilder.downloadFile(workflow,crawler,destGen);
  }
 else {
    try {
      ModWorkflowBuilder.downloadFileIfNewer(workflow,new UpdateableFile(getCurrentVersion(),null,crawler.url),destGen);
    }
 catch (    UnsupportedHostException e) {
      throw new RuntimeException(e);
    }
  }
}","@Override public void buildWorkflowTask(Workflow workflow,final Crawler<?> crawler,boolean downloadOnlyIfNewer) throws IOException {
  if (getCurrentPath() != null) {
    getCurrentPath().toFile().delete();
  }
  PathGen destGen=new PathGen(){
    @Override public URI getURI() throws URISyntaxException {
      return getPath().toUri();
    }
    @Override public Path getPath(){
      try {
        return destFolder.resolve(crawler.getNewestFileName());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  if (downloadOnlyIfNewer) {
    ModWorkflowBuilder.downloadFile(workflow,crawler,destGen);
  }
 else {
    try {
      ModWorkflowBuilder.downloadFileIfNewer(workflow,new UpdateableFile(getCurrentVersion(),null,crawler.url),destGen);
    }
 catch (    UnsupportedHostException e) {
      throw new RuntimeException(e);
    }
  }
}",0.976770538243626
134331,"public void checkForModUpdates() throws ModUpdateFailedException {
  for (  Mod mod : sm.getMods()) {
    submitDownloadWorkflow(CheckForUpdateWorkflow.forExistingFile(mod,sm));
  }
}","public void checkForModUpdates() throws ModUpdateFailedException {
  for (  Mod mod : sm.getMods()) {
    submitDownloadWorkflow(CheckForUpdateWorkflow.forExistingFile(mod,true,sm));
  }
}",0.9865229110512128
134332,"@Override public void actionPerformed(ActionEvent e){
  try {
    Workflow workflow=Workflows.tempDownload(latestPage.getDownloadLink(),config.getGameDataPath().resolve(latestPage.getNewestFileName()));
    workflow.queueDelete(getCurrentFile().toPath());
    workflow.addListener(this);
    mm.submitDownloadWorkflow(workflow);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
}","@Override public void actionPerformed(ActionEvent e){
  try {
    String latestFileName=latestPage.getNewestFileName();
    Workflow workflow=Workflows.tempDownload(latestPage.getDownloadLink(),config.getGameDataPath().resolve(latestFileName));
    File currentFile=getCurrentFile();
    if (currentFile != null && !currentFile.getName().equals(latestFileName)) {
      workflow.queueDelete(currentFile.toPath());
    }
    workflow.addListener(this);
    mm.submitDownloadWorkflow(workflow);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
}",0.6751054852320675
134333,"public void updateCurrentVersion(){
  currentVersionLabel.setText(""String_Node_Str"" + getCurrentFile().getName());
}","public void updateCurrentVersion(){
  File currentFile=getCurrentFile();
  currentVersionLabel.setText(String.format(""String_Node_Str"",currentFile != null ? currentFile.getName() : ""String_Node_Str""));
}",0.6081504702194357
134334,"@Override public void setUpdateAvailable(FilePage latestPage){
  this.latestPage=latestPage;
  String latestVersion=latestPage != null ? latestPage.getNewestFileName() : ""String_Node_Str"";
  latestVersionLabel.setText(String.format(""String_Node_Str"",latestVersion));
  if (latestPage != null) {
    this.latestPage=latestPage;
    updateButton.setEnabled(true);
  }
}","@Override public void setUpdateAvailable(FilePage latestPage){
  this.latestPage=latestPage;
  String latestVersion=latestPage != null ? latestPage.getNewestFileName() : ""String_Node_Str"";
  latestVersionLabel.setText(String.format(""String_Node_Str"",latestVersion));
  File currentFile=getCurrentFile();
  if (latestPage != null && (currentFile == null || !latestPage.getNewestFileName().equals(currentFile.getName()))) {
    this.latestPage=latestPage;
    updateButton.setEnabled(true);
  }
}",0.8524970963995354
134335,"public static CheckForUpdateWorkflow forExistingFile(DownloadedFile existing,UpdateListener... listeners){
  ArrayList<UpdateListener> listenerList=new ArrayList<>();
  listenerList.add(existing);
  for (  UpdateListener l : listeners) {
    listenerList.add(l);
  }
  return new CheckForUpdateWorkflow(existing.getNewestFileName(),existing.getPageUrl(),existing.getUpdatedOn(),existing.getNewestFileName(),listenerList.toArray(new UpdateListener[listenerList.size()]));
}","public static CheckForUpdateWorkflow forExistingFile(DownloadedFile existing,boolean onlyUpdateIfNewer,UpdateListener... listeners){
  ArrayList<UpdateListener> listenerList=new ArrayList<>();
  listenerList.add(existing);
  for (  UpdateListener l : listeners) {
    listenerList.add(l);
  }
  return new CheckForUpdateWorkflow(existing.getNewestFileName(),existing.getPageUrl(),existing.getUpdatedOn(),existing.getNewestFileName(),onlyUpdateIfNewer,listenerList.toArray(new UpdateListener[listenerList.size()]));
}",0.9554655870445344
134336,"public CheckForUpdateWorkflow(String label,URL pageUrl,Date lastUpdated,String lastFileName,UpdateListener... listeners){
  super(""String_Node_Str"" + label);
  try {
    newPagePath=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
    newPagePath.toFile().deleteOnExit();
    queueDownload(pageUrl,newPagePath);
    addTask(new CheckForUpdateTask(this,newPagePath,pageUrl,lastUpdated,lastFileName));
    addTask(new NotfiyUpdateAvailableTask(this,newPagePath,pageUrl,listeners));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public CheckForUpdateWorkflow(String label,URL pageUrl,Date lastUpdated,String lastFileName,boolean onlyUpdateIfNewer,UpdateListener... listeners){
  super(""String_Node_Str"" + label);
  try {
    newPagePath=Files.createTempFile(""String_Node_Str"",""String_Node_Str"");
    newPagePath.toFile().deleteOnExit();
    queueDownload(pageUrl,newPagePath);
    if (onlyUpdateIfNewer) {
      addTask(new CheckForUpdateTask(this,newPagePath,pageUrl,lastUpdated,lastFileName));
    }
    addTask(new NotfiyUpdateAvailableTask(this,newPagePath,pageUrl,listeners));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9468354430379748
134337,"@Override public int getTargetProgress() throws InvalidContentException {
  return 0;
}","@Override public int getTargetProgress() throws InvalidContentException {
  return 1;
}",0.9885057471264368
134338,"private void forceDisableModule(ModEnableContext context,Module module) throws CannotDisableModException {
  try {
    FileUtils.deleteDirectory(getDestPath(context,module).toFile());
  }
 catch (  IOException e) {
    throw new CannotDisableModException();
  }
}","private void forceDisableModule(ModEnableContext context,Module module) throws CannotDisableModException {
  FileUtils.deleteQuietly(getDestPath(context,module).toFile());
}",0.7798165137614679
134339,"@Override public Resolution getResolution(Module module,Mod mod){
  return (Resolution)JOptionPane.showInputDialog(null,String.format(""String_Node_Str"" + ""String_Node_Str"",module,mod),""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,Resolution.values(),Resolution.Overwrite);
}","@Override public Resolution getResolution(Module module,Mod mod){
  return (Resolution)JOptionPane.showInputDialog(null,String.format(""String_Node_Str"" + ""String_Node_Str"",module.getName(),mod.getName()),""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,Resolution.values(),Resolution.Overwrite);
}",0.9517241379310344
134340,"public Set<ZipEntry> getZipEntries(){
synchronized (zipPath) {
    Set<ZipEntry> set=new HashSet<>();
    try (ZipFile zipFile=new ZipFile(zipPath.toFile())){
      Enumeration<? extends ZipEntry> entries=zipFile.entries();
      while (entries.hasMoreElements()) {
        set.add(entries.nextElement());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    return set;
  }
}","public Set<ZipEntry> getZipEntries(){
synchronized (zipPath) {
    Set<ZipEntry> set=new HashSet<>();
    try (ZipFile zipFile=new ZipFile(zipPath.toFile())){
      set.addAll(Collections.list(zipFile.entries()));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    return set;
  }
}",0.7507082152974505
134341,"public ModStructure(Path zipPath){
  this.zipPath=zipPath;
  zipManager=new ZipManager(zipPath);
  Path gameDataPath=null;
  Set<ZipEntry> entries=getZipManager().getZipEntries();
  for (  ZipEntry entry : entries) {
    if (!entry.isDirectory() && entry.getName().toLowerCase().contains(""String_Node_Str"")) {
      readmeName=entry.getName();
    }
    if (entry.isDirectory()) {
      if (entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        gameDataPath=Paths.get(entry.getName());
      }
    }
  }
  for (  ZipEntry entry : entries) {
    if (entry.isDirectory()) {
      Path entryPath=toPath(entry);
      if (!entryPath.equals(gameDataPath)) {
        Path rel=gameDataPath != null ? gameDataPath.relativize(entryPath) : entryPath;
        if (rel.getNameCount() == 1) {
          modules.add(new Module(zipPath,entryPath));
        }
      }
    }
  }
}","public ModStructure(Path zipPath){
  this.zipPath=zipPath;
  zipManager=new ZipManager(zipPath);
  Path gameDataPath=null;
  Set<ZipEntry> entries=getZipManager().getZipEntries();
  for (  ZipEntry entry : entries) {
    if (!entry.isDirectory() && entry.getName().toLowerCase().contains(""String_Node_Str"")) {
      readmeName=entry.getName();
    }
    if (entry.isDirectory()) {
      if (entry.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        gameDataPath=Paths.get(entry.getName());
      }
    }
  }
  Set<Path> modulePaths=new HashSet<>();
  for (  ZipEntry entry : entries) {
    if (entry.isDirectory()) {
      Path entryPath=toPath(entry);
      if (gameDataPath == null) {
        modulePaths.add(entryPath.subpath(0,1));
      }
 else       if (entryPath.startsWith(gameDataPath) && !entryPath.equals(gameDataPath)) {
        Path rel=gameDataPath.relativize(entryPath);
        if (rel.getNameCount() == 1) {
          modulePaths.add(rel);
        }
      }
    }
  }
  for (  Path modulePath : modulePaths) {
    modules.add(new Module(zipPath,modulePath));
  }
}",0.7776649746192893
134342,"public TinkerMenuBar(ModManager mm){
  this.mm=mm;
  JMenu fileMenu=new JMenu(""String_Node_Str"");
  fileMenu.add(new JMenuItem(new UpdatePathsAction()));
  fileMenu.add(new JMenuItem(new ExitAction()));
  add(fileMenu);
  JMenu modMenu=new JMenu(""String_Node_Str"");
  modMenu.add(new JMenuItem(new AddModAction()));
  modMenu.add(new JMenuItem(new DeleteModAction()));
  add(modMenu);
  JMenu updateMenu=new JMenu(""String_Node_Str"");
  updateMenu.add(new JMenuItem(new UpdateModAction()));
  updateMenu.add(new JMenuItem(new UpdateAllAction()));
  updateMenu.add(new JMenuItem(new CheckforUpdatesAction()));
  add(updateMenu);
  JMenu helpMenu=new JMenu(""String_Node_Str"");
  helpMenu.add(new JMenuItem(new AboutAction()));
  helpMenu.add(new JMenuItem(new HelpAction()));
  add(helpMenu);
  popupMenu=new JPopupMenu();
  popupMenu.add(new EnableDisableModAction());
  popupMenu.add(new DeleteModAction());
}","public TinkerMenuBar(ModManager mm){
  this.mm=mm;
  JMenu fileMenu=new JMenu(""String_Node_Str"");
  fileMenu.add(new JMenuItem(new UpdatePathsAction()));
  fileMenu.add(new JMenuItem(new ExitAction()));
  add(fileMenu);
  JMenu modMenu=new JMenu(""String_Node_Str"");
  modMenu.add(new JMenuItem(new AddModAction()));
  modMenu.add(new JMenuItem(new EnableDisableModAction()));
  modMenu.add(new JMenuItem(new DeleteModAction()));
  add(modMenu);
  JMenu updateMenu=new JMenu(""String_Node_Str"");
  updateMenu.add(new JMenuItem(new UpdateModAction()));
  updateMenu.add(new JMenuItem(new UpdateAllAction()));
  updateMenu.add(new JMenuItem(new CheckforUpdatesAction()));
  add(updateMenu);
  JMenu helpMenu=new JMenu(""String_Node_Str"");
  helpMenu.add(new JMenuItem(new AboutAction()));
  helpMenu.add(new JMenuItem(new HelpAction()));
  add(helpMenu);
  popupMenu=new JPopupMenu();
  popupMenu.add(new EnableDisableModAction());
  popupMenu.add(new DeleteModAction());
}",0.9680170575692963
134343,"public EnableModWorkflow(Mod mod,Config config,ModStateManager sm,ConflictResolver cr){
  super(""String_Node_Str"" + mod.getName());
  ModStructure structure=new ModStructure(mod,config);
  for (  Module module : structure.getModules()) {
    addTask(new UnzipTask(this,structure.zipPath,config.getGameDataPath().resolve(module.getName()),module.getOutput(),cr));
  }
  addTask(new MarkModEnabledTask(this,mod,sm,true));
}","public EnableModWorkflow(Mod mod,Config config,ModStateManager sm,ConflictResolver cr){
  super(""String_Node_Str"" + mod.getName());
  ModStructure structure=new ModStructure(mod,config);
  for (  Module module : structure.getModules()) {
    addTask(new UnzipTask(this,structure.zipPath,config.getGameDataPath(),module.getOutput(),cr));
  }
  addTask(new MarkModEnabledTask(this,mod,sm,true));
}",0.9681372549019608
134344,"@Override public URL getDownloadLink(){
  Element ele=doc.select(""String_Node_Str"").first();
  Matcher m=ID_PATTERN.matcher(ele.attr(""String_Node_Str""));
  m.find();
  try {
    return new URL(String.format(""String_Node_Str"",m.group(1),m.group(2),getNewestFile().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 catch (  MalformedURLException|IndexOutOfBoundsException e) {
    e.printStackTrace();
    return null;
  }
}","@Override public URL getDownloadLink(){
  Element ele=doc.select(""String_Node_Str"").first();
  Matcher m=ID_PATTERN.matcher(ele.attr(""String_Node_Str""));
  m.find();
  int id1=Integer.parseInt(m.group(1));
  int id2=Integer.parseInt(m.group(2));
  try {
    return new URL(String.format(""String_Node_Str"",id1,id2,getNewestFile().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 catch (  MalformedURLException|IndexOutOfBoundsException e) {
    e.printStackTrace();
    return null;
  }
}",0.899803536345776
134345,"public ModManager(ModStateManager sm,Config config,Downloader pageDownloader,Downloader modDownloader,ModEnabler enabler){
  this.sm=sm;
  this.config=config;
  this.pageDownloader=pageDownloader;
  this.modDownloader=modDownloader;
  this.enabler=enabler;
  this.addListener(sm);
  enabler.addListener(this);
  pageDownloader.addListener(this);
}","public ModManager(ModStateManager sm,Config config,Downloader pageDownloader,Downloader modDownloader,ModEnabler enabler){
  this.sm=sm;
  this.config=config;
  this.pageDownloader=pageDownloader;
  this.modDownloader=modDownloader;
  this.enabler=enabler;
  this.addListener(sm);
  enabler.addListener(this);
  pageDownloader.addListener(this);
  modDownloader.addListener(this);
}",0.9519890260631
134346,"@Before public void setUp() throws Throwable {
  manager=new ModManager(sm=mock(ModStateManager.class),config=MockConfig.getSpy(),cr=spy(new MockCR(config,sm)),downloader=mock(Downloader.class));
  mod=ModLoader.addMod(ModLoader.MECHJEB,config);
  testMod1=ModLoader.addMod(ModLoader.TESTMOD1,config);
  testMod2=ModLoader.addMod(ModLoader.TESTMOD2,config);
}","@Before public void setUp() throws Throwable {
  manager=new ModManager(sm=mock(ModStateManager.class),config=MockConfig.getSpy(),downloader=mock(Downloader.class),mock(ModEnabler.class));
  mod=ModLoader.addMod(ModLoader.MECHJEB,config);
  testMod1=ModLoader.addMod(ModLoader.TESTMOD1,config);
  testMod2=ModLoader.addMod(ModLoader.TESTMOD2,config);
}",0.8804500703234881
134347,"void segment(){
  segmentDir(this.sourceDir,this.targetDir);
}","public void segment(){
  segmentDir(this.sourceDir,this.targetDir);
}",0.9465648854961832
134348,"public ArrayList<ResultModel> getResultSet(String key){
  int pos=key.indexOf(""String_Node_Str"");
  if (pos > 0) {
    symbol=1;
    String keyBefore=key.substring(0,pos);
    String keyAfter=key.substring(pos + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyBefore,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new sortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyAfter,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new sortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modList.add(modListBefore.get(j));
          }
        }
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  int posDiff=key.indexOf(""String_Node_Str"");
  if (posDiff > 0) {
    symbol=1;
    String keyBefore=key.substring(0,posDiff);
    String keyAfter=key.substring(posDiff + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyBefore,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new sortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyAfter,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new sortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modListBefore.remove(j);
          }
        }
      }
      for (int i=0; i < modListBefore.size(); i++) {
        modList.add(modListBefore.get(i));
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
  if (this.hashWord.size() > 0) {
    long begin=System.currentTimeMillis();
    ResultModel[] modArray=null;
    IKSegmenter iksegmentation=new IKSegmenter(new StringReader(key),true);
    Lexeme lexeme=null;
    try {
      while ((lexeme=iksegmentation.next()) != null) {
        System.out.println(lexeme.getLexemeText());
        vecKey.add(lexeme.getLexemeText());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    for (    String strKey : vecKey) {
      String result=this.hashWord.get(strKey);
      if (result != null) {
        String[] array=result.split(""String_Node_Str"");
        modArray=new ResultModel[array.length];
        for (int i=0; i < array.length; i++)         modArray[i]=new ResultModel(key,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modList.add(modArray[i]);
        }
        this.ResultMerger(modList);
        Collections.sort(modList,new sortByWordNum());
      }
    }
    long end=System.currentTimeMillis();
    this.time+=(end - begin);
  }
  return modList;
}","public ArrayList<ResultModel> getResultSet(String key){
  int pos=key.indexOf(""String_Node_Str"");
  if (pos > 0) {
    symbol=1;
    String keyBefore=key.substring(0,pos);
    String keyAfter=key.substring(pos + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyBefore,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyAfter,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modList.add(modListBefore.get(j));
          }
        }
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  int posDiff=key.indexOf(""String_Node_Str"");
  if (posDiff > 0) {
    symbol=1;
    String keyBefore=key.substring(0,posDiff);
    String keyAfter=key.substring(posDiff + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyBefore,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++)       modArray[i]=new ResultModel(keyAfter,array[i]);
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modListBefore.remove(j);
          }
        }
      }
      for (int i=0; i < modListBefore.size(); i++) {
        modList.add(modListBefore.get(i));
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
  if (this.hashWord.size() > 0) {
    long begin=System.currentTimeMillis();
    ResultModel[] modArray=null;
    IKSegmenter iksegmentation=new IKSegmenter(new StringReader(key),true);
    Lexeme lexeme=null;
    try {
      while ((lexeme=iksegmentation.next()) != null) {
        System.out.println(lexeme.getLexemeText());
        vecKey.add(lexeme.getLexemeText());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    for (    String strKey : vecKey) {
      String result=this.hashWord.get(strKey);
      if (result != null) {
        String[] array=result.split(""String_Node_Str"");
        modArray=new ResultModel[array.length];
        for (int i=0; i < array.length; i++)         modArray[i]=new ResultModel(key,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modList.add(modArray[i]);
        }
        this.ResultMerger(modList);
        Collections.sort(modList,new SortByWordNum());
      }
    }
    long end=System.currentTimeMillis();
    this.time+=(end - begin);
  }
  return modList;
}",0.9990247708211428
134349,"public static void writeFileByChars(String fileName,String value){
  ByteBuffer byteBuffer=ByteBuffer.wrap(value.getBytes());
  FileChannel fileChannel=null;
  try {
    FileOutputStream fos=new FileOutputStream(fileName);
    fileChannel=fos.getChannel();
    FileLock fileLock=fileChannel.tryLock();
    fileChannel.write(byteBuffer);
    fileLock.release();
    fileChannel.close();
    fos.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void writeFileByChars(String fileName,String value){
  ByteBuffer byteBuffer=ByteBuffer.wrap(value.getBytes());
  FileChannel fileChannel=null;
  try {
    File file=new File(fileName);
    if (!file.getParentFile().exists()) {
      file.getParentFile().mkdirs();
    }
    FileOutputStream fos=new FileOutputStream(fileName);
    fileChannel=fos.getChannel();
    FileLock fileLock=fileChannel.tryLock();
    fileChannel.write(byteBuffer);
    fileLock.release();
    fileChannel.close();
    fos.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8988954970263382
134350,"public String downloadFile(String url){
  String filePath=null;
  HttpRequestRetryHandler myRetryHandler=new HttpRequestRetryHandler(){
    @Override public boolean retryRequest(    IOException arg0,    int executionCount,    HttpContext arg2){
      if (executionCount > 5) {
        return false;
      }
      return false;
    }
  }
;
  CloseableHttpClient httpClient=HttpClients.custom().setRetryHandler(myRetryHandler).build();
  RequestConfig requestConfig=RequestConfig.custom().setConnectTimeout(Constant.DEFAULT_CONNECT_TIMEOUT).setConnectionRequestTimeout(Constant.DEFAULT_CONNECTION_REQUEST_TIMEOUT).build();
  HttpGet httpGet=new HttpGet(url);
  httpGet.setConfig(requestConfig);
  CloseableHttpResponse response;
  try {
    response=httpClient.execute(httpGet);
    StatusLine statusLine=response.getStatusLine();
    if (statusLine.getStatusCode() != HttpStatus.SC_OK) {
      System.err.println(""String_Node_Str"" + statusLine);
      filePath=null;
    }
    HttpEntity entity=response.getEntity();
    if (entity != null) {
      InputStream entityContent=entity.getContent();
      filePath=""String_Node_Str"" + getFileNameByUrl(url);
      saveToLocal(entityContent,filePath);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + filePath + ""String_Node_Str"");
  return filePath;
}","public String downloadFile(String url){
  String filePath=null;
  HttpRequestRetryHandler myRetryHandler=new HttpRequestRetryHandler(){
    @Override public boolean retryRequest(    final IOException arg0,    int executionCount,    final HttpContext arg2){
      if (executionCount > 5) {
        return false;
      }
      return false;
    }
  }
;
  CloseableHttpClient httpClient=HttpClients.custom().setRetryHandler(myRetryHandler).build();
  RequestConfig requestConfig=RequestConfig.custom().setConnectTimeout(Constant.DEFAULT_CONNECT_TIMEOUT).setConnectionRequestTimeout(Constant.DEFAULT_CONNECTION_REQUEST_TIMEOUT).build();
  HttpGet httpGet=new HttpGet(url);
  httpGet.setConfig(requestConfig);
  CloseableHttpResponse response;
  try {
    response=httpClient.execute(httpGet);
    StatusLine statusLine=response.getStatusLine();
    if (statusLine.getStatusCode() != HttpStatus.SC_OK) {
      System.err.println(""String_Node_Str"" + statusLine);
      filePath=null;
    }
    HttpEntity entity=response.getEntity();
    if (entity != null) {
      InputStream entityContent=entity.getContent();
      filePath=""String_Node_Str"" + getFileNameByUrl(url);
      saveToLocal(entityContent,filePath);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + filePath + ""String_Node_Str"");
  return filePath;
}",0.9955882352941176
134351,"public String getFileNameByUrl(String url){
  StringUtils.removeStartIgnoreCase(url,""String_Node_Str"");
  StringUtils.removeStartIgnoreCase(url,""String_Node_Str"");
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return url;
}","public String getFileNameByUrl(String url){
  url=StringUtils.removeStartIgnoreCase(url,""String_Node_Str"");
  url=StringUtils.removeStartIgnoreCase(url,""String_Node_Str"");
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return url;
}",0.9834710743801652
134352,"@Override public boolean retryRequest(IOException arg0,int executionCount,HttpContext arg2){
  if (executionCount > 5) {
    return false;
  }
  return false;
}","@Override public boolean retryRequest(final IOException arg0,int executionCount,final HttpContext arg2){
  if (executionCount > 5) {
    return false;
  }
  return false;
}",0.963855421686747
134353,"public static Set<String> extracLinks(String url,LinkFilter filter){
  Set<String> links=new HashSet<String>();
  try {
    Parser parser=new Parser(url);
    NodeFilter frameFilter=new NodeFilter(){
      /** 
 */
      private static final long serialVersionUID=1L;
      public boolean accept(      Node node){
        if (node.getText().startsWith(""String_Node_Str"") && node.getText().contains(""String_Node_Str"")) {
          return true;
        }
 else {
          return false;
        }
      }
    }
;
    OrFilter linkFilter=new OrFilter(new NodeClassFilter(LinkTag.class),frameFilter);
    NodeList list=parser.extractAllNodesThatMatch(linkFilter);
    for (int i=0; i < list.size(); i++) {
      Node tag=list.elementAt(i);
      if (tag instanceof LinkTag) {
        LinkTag link=(LinkTag)tag;
        String linkUrl=link.getLink();
        if (filter.accept(linkUrl)) {
          links.add(linkUrl);
        }
      }
 else {
        String frame=tag.getText();
        int start=frame.indexOf(""String_Node_Str"");
        frame=frame.substring(start);
        int end=frame.indexOf(""String_Node_Str"");
        if (end == -1) {
          end=frame.indexOf(""String_Node_Str"");
        }
        String frameUrl=frame.substring(5,end - 1);
        if (filter.accept(frameUrl)) {
          links.add(frameUrl);
        }
      }
    }
  }
 catch (  ParserException e) {
    e.printStackTrace();
  }
  return links;
}","public static Set<String> extracLinks(String url,LinkFilter filter){
  Set<String> links=new HashSet<String>();
  try {
    Parser parser=new Parser(url);
    NodeFilter frameFilter=new NodeFilter(){
      /** 
 */
      private static final long serialVersionUID=1L;
      public boolean accept(      Node node){
        return node.getText().startsWith(""String_Node_Str"") && node.getText().contains(""String_Node_Str"");
      }
    }
;
    OrFilter linkFilter=new OrFilter(new NodeClassFilter(LinkTag.class),frameFilter);
    NodeList list=parser.extractAllNodesThatMatch(linkFilter);
    for (int i=0; i < list.size(); i++) {
      Node tag=list.elementAt(i);
      if (tag instanceof LinkTag) {
        LinkTag link=(LinkTag)tag;
        String linkUrl=link.getLink();
        if (filter.accept(linkUrl)) {
          links.add(linkUrl);
        }
      }
 else {
        String frame=tag.getText();
        int start=frame.indexOf(""String_Node_Str"");
        frame=frame.substring(start);
        int end=frame.indexOf(""String_Node_Str"");
        if (end == -1) {
          end=frame.indexOf(""String_Node_Str"");
        }
        String frameUrl=frame.substring(5,end - 1);
        if (filter.accept(frameUrl)) {
          links.add(frameUrl);
        }
      }
    }
  }
 catch (  ParserException e) {
    e.printStackTrace();
  }
  return links;
}",0.9676025917926566
134354,"public boolean accept(Node node){
  if (node.getText().startsWith(""String_Node_Str"") && node.getText().contains(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","public boolean accept(Node node){
  return node.getText().startsWith(""String_Node_Str"") && node.getText().contains(""String_Node_Str"");
}",0.8074534161490683
134355,"public CreateIndex(){
  HashMap<String,String> hashResult=new HashMap<String,String>();
  File dirFile=new File(""String_Node_Str"");
  File[] fileList=dirFile.listFiles();
  if (fileList != null) {
    System.out.println(""String_Node_Str"");
    start=System.currentTimeMillis();
    for (int i=0; i < fileList.length; i++) {
      String fileName=fileList[i].getName();
      System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
      HashMap<String,Integer> hashMap=new HashMap<String,Integer>();
      String content=ReadAndWrite.readFileByChars(""String_Node_Str"" + fileName,""String_Node_Str"");
      String[] wordArray=content.split(""String_Node_Str"");
      for (int j=0; j < wordArray.length; j++) {
        if (hashMap.keySet().contains(wordArray[j])) {
          Integer integer=(Integer)hashMap.get(wordArray[j]);
          int value=integer.intValue() + 1;
          hashMap.put(wordArray[j],new Integer(value));
        }
 else {
          hashMap.put(wordArray[j],new Integer(1));
        }
      }
      String title_origin=ReadAndWrite.readFileByChars(""String_Node_Str"" + fileName,""String_Node_Str"");
      String fullContent_origin=ReadAndWrite.readFileByChars(""String_Node_Str"" + fileName,""String_Node_Str"");
      for (      String str : hashMap.keySet()) {
        String title=title_origin;
        String fullContent=fullContent_origin;
        String partContent=""String_Node_Str"";
        int wordStart=fullContent.indexOf(str);
        while (wordStart > 0) {
          String strTmp;
          int s=0, e=fullContent.length();
          if (wordStart > 10) {
            s=wordStart - 10;
          }
 else {
            s=0;
          }
          if (e > (wordStart + 10)) {
            e=wordStart + 10;
          }
          strTmp=fullContent.substring(s,e);
          partContent+=(strTmp + ""String_Node_Str"");
          fullContent=fullContent.substring(e);
          wordStart=fullContent.indexOf(str);
        }
        String tmp=fileName + ""String_Node_Str"" + title+ ""String_Node_Str""+ partContent+ ""String_Node_Str""+ hashMap.get(str);
        if (hashResult.keySet().contains(str)) {
          String value=(String)hashResult.get(str);
          value+=(""String_Node_Str"" + tmp);
          hashResult.put(str,value);
        }
 else {
          hashResult.put(str,tmp);
        }
      }
    }
    end=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  }
  if (hashResult.size() > 0) {
    StringBuilder value=new StringBuilder(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    start=System.currentTimeMillis();
    for (    String str : hashResult.keySet()) {
      StringBuilder tmp=new StringBuilder(str).append(""String_Node_Str"").append(hashResult.get(str));
      value.append(tmp).append(""String_Node_Str"");
    }
    end=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    start=System.currentTimeMillis();
    this.writeFileByChars(""String_Node_Str"",value.toString());
    end=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  }
}","public CreateIndex() throws IOException {
  HashMap<String,String> hashResult=new HashMap<String,String>();
  File dirFile=new File(""String_Node_Str"");
  File[] fileList=dirFile.listFiles();
  if (fileList != null) {
    System.out.println(""String_Node_Str"");
    start=System.currentTimeMillis();
    for (int i=0; i < fileList.length; i++) {
      String fileName=fileList[i].getName();
      System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
      HashMap<String,Integer> hashMap=new HashMap<String,Integer>();
      String content=FileUtils.readFileToString(new File(""String_Node_Str"" + fileName),""String_Node_Str"");
      String[] wordArray=content.split(""String_Node_Str"");
      for (int j=0; j < wordArray.length; j++) {
        if (hashMap.keySet().contains(wordArray[j])) {
          Integer integer=(Integer)hashMap.get(wordArray[j]);
          int value=integer.intValue() + 1;
          hashMap.put(wordArray[j],new Integer(value));
        }
 else {
          hashMap.put(wordArray[j],new Integer(1));
        }
      }
      String titleOrigin=FileUtils.readFileToString(new File(""String_Node_Str"" + fileName),""String_Node_Str"");
      String fullContentOrigin=FileUtils.readFileToString(new File(""String_Node_Str"" + fileName),""String_Node_Str"");
      for (      String str : hashMap.keySet()) {
        String title=titleOrigin;
        String fullContent=fullContentOrigin;
        String partContent=""String_Node_Str"";
        int wordStart=fullContent.indexOf(str);
        while (wordStart > 0) {
          String strTmp;
          int s=0, e=fullContent.length();
          if (wordStart > 10) {
            s=wordStart - 10;
          }
 else {
            s=0;
          }
          if (e > (wordStart + 10)) {
            e=wordStart + 10;
          }
          strTmp=fullContent.substring(s,e);
          partContent+=(strTmp + ""String_Node_Str"");
          fullContent=fullContent.substring(e);
          wordStart=fullContent.indexOf(str);
        }
        String tmp=fileName + ""String_Node_Str"" + title+ ""String_Node_Str""+ partContent+ ""String_Node_Str""+ hashMap.get(str);
        if (hashResult.keySet().contains(str)) {
          String value=(String)hashResult.get(str);
          value+=(""String_Node_Str"" + tmp);
          hashResult.put(str,value);
        }
 else {
          hashResult.put(str,tmp);
        }
      }
    }
    end=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  }
  if (hashResult.size() > 0) {
    StringBuilder value=new StringBuilder(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    start=System.currentTimeMillis();
    for (    String str : hashResult.keySet()) {
      StringBuilder tmp=new StringBuilder(str).append(""String_Node_Str"").append(hashResult.get(str));
      value.append(tmp).append(""String_Node_Str"");
    }
    end=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    start=System.currentTimeMillis();
    this.writeFileByChars(""String_Node_Str"",value.toString());
    end=System.currentTimeMillis();
    System.out.println(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  }
}",0.3273736128236745
134356,"public ArrayList<ResultModel> getResultSet(String key){
  int pos=key.indexOf(""String_Node_Str"");
  if (pos > 0) {
    symbol=1;
    String keyBefore=key.substring(0,pos);
    String keyAfter=key.substring(pos + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyBefore,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyAfter,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modList.add(modListBefore.get(j));
          }
        }
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  int posDiff=key.indexOf(""String_Node_Str"");
  if (posDiff > 0) {
    symbol=1;
    String keyBefore=key.substring(0,posDiff);
    String keyAfter=key.substring(posDiff + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyBefore,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyAfter,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modListBefore.remove(j);
          }
        }
      }
      for (int i=0; i < modListBefore.size(); i++) {
        modList.add(modListBefore.get(i));
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
  if (this.hashWord.size() > 0) {
    long begin=System.currentTimeMillis();
    ResultModel[] modArray=null;
    IKSegmenter iksegmentation=new IKSegmenter(new StringReader(key),true);
    Lexeme lexeme=null;
    try {
      while ((lexeme=iksegmentation.next()) != null) {
        System.out.println(lexeme.getLexemeText());
        vecKey.add(lexeme.getLexemeText());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    for (    String strKey : vecKey) {
      String result=this.hashWord.get(strKey);
      if (result != null) {
        String[] array=result.split(""String_Node_Str"");
        modArray=new ResultModel[array.length];
        for (int i=0; i < array.length; i++) {
          modArray[i]=new ResultModel(key,array[i]);
        }
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modList.add(modArray[i]);
        }
        this.ResultMerger(modList);
        Collections.sort(modList,new SortByWordNum());
      }
    }
    long end=System.currentTimeMillis();
    this.time+=(end - begin);
  }
  return modList;
}","public ArrayList<ResultModel> getResultSet(String key){
  int pos=key.indexOf(""String_Node_Str"");
  if (pos > 0) {
    symbol=1;
    String keyBefore=key.substring(0,pos);
    String keyAfter=key.substring(pos + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyBefore,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyAfter,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modList.add(modListBefore.get(j));
          }
        }
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  int posDiff=key.indexOf(""String_Node_Str"");
  if (posDiff > 0) {
    symbol=1;
    String keyBefore=key.substring(0,posDiff);
    String keyAfter=key.substring(posDiff + 1,key.length());
    vecKey.add(keyBefore);
    vecKey.add(keyAfter);
    System.out.println(""String_Node_Str"" + keyBefore + ""String_Node_Str""+ keyAfter);
    ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListBefore=new ArrayList<ResultModel>();
    ArrayList<ResultModel> modListAfter=new ArrayList<ResultModel>();
    if (this.hashWord.size() > 0) {
      long begin=System.currentTimeMillis();
      ResultModel[] modArray=null;
      String resultBefore=this.hashWord.get(keyBefore);
      String resultAfter=this.hashWord.get(keyAfter);
      String[] array=resultBefore.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyBefore,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListBefore.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      array=resultAfter.split(""String_Node_Str"");
      modArray=new ResultModel[array.length];
      for (int i=0; i < array.length; i++) {
        modArray[i]=new ResultModel(keyAfter,array[i]);
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modListAfter.add(modArray[i]);
        }
        Collections.sort(modList,new SortByWordNum());
      }
      for (int i=0; i < modListAfter.size(); i++) {
        for (int j=0; j < modListBefore.size(); j++) {
          if (modListBefore.get(j).getUrl().equals(modListAfter.get(i).getUrl())) {
            modListBefore.remove(j);
          }
        }
      }
      for (int i=0; i < modListBefore.size(); i++) {
        modList.add(modListBefore.get(i));
      }
      long end=System.currentTimeMillis();
      this.time+=(end - begin);
    }
    return modList;
  }
  ArrayList<ResultModel> modList=new ArrayList<ResultModel>();
  if (this.hashWord.size() > 0) {
    long begin=System.currentTimeMillis();
    ResultModel[] modArray=null;
    IKSegmenter iksegmentation=new IKSegmenter(new StringReader(key),true);
    Lexeme lexeme=null;
    try {
      while ((lexeme=iksegmentation.next()) != null) {
        System.out.println(lexeme.getLexemeText());
        vecKey.add(lexeme.getLexemeText());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    for (    String strKey : vecKey) {
      String result=this.hashWord.get(strKey);
      if (result != null) {
        String[] array=result.split(""String_Node_Str"");
        modArray=new ResultModel[array.length];
        for (int i=0; i < array.length; i++) {
          modArray[i]=new ResultModel(key,array[i]);
        }
      }
      if (modArray != null) {
        for (int i=0; i < modArray.length; i++) {
          modList.add(modArray[i]);
        }
        this.resultMerger(modList);
        Collections.sort(modList,new SortByWordNum());
      }
    }
    long end=System.currentTimeMillis();
    this.time+=(end - begin);
  }
  return modList;
}",0.999807284640586
134357,"public static void main(String[] argv){
  MyEngine index=new MyEngine(""String_Node_Str"");
  ArrayList<ResultModel> testList=index.getResultSet(""String_Node_Str"");
  for (int i=0; i < testList.size(); i++) {
    testList.get(i).printInfo();
    System.out.println(i);
  }
}","public static void main(final String[] argv){
  MyEngine index=new MyEngine(""String_Node_Str"");
  ArrayList<ResultModel> testList=index.getResultSet(""String_Node_Str"");
  for (int i=0; i < testList.size(); i++) {
    testList.get(i).printInfo();
    System.out.println(i);
  }
}",0.9890909090909092
134358,"public Html2Text() throws IOException {
  File directory=new File(""String_Node_Str"");
  File[] fileList=directory.listFiles();
  if (fileList != null) {
    for (int i=0; i < fileList.length; i++) {
      String fileName=fileList[i].getName();
      StringBuilder content=new StringBuilder();
      String str=new String();
      BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(fileList[i]),""String_Node_Str""));
      while ((str=in.readLine()) != null) {
        content.append(str);
      }
      in.close();
      String result=this.DealHtml(content);
      ReadAndWrite.writeFileByChars(""String_Node_Str"" + fileName + ""String_Node_Str"",result);
      String titleResult=content.toString();
      int titleStart=titleResult.indexOf(""String_Node_Str"");
      if (titleStart > 0) {
        titleResult=titleResult.substring(titleStart);
      }
      int titleEnd=titleResult.indexOf(""String_Node_Str"");
      if (titleEnd > 0) {
        titleResult=titleResult.substring(0,titleEnd);
      }
      titleResult=this.DealHtml(titleResult);
      ReadAndWrite.writeFileByChars(""String_Node_Str"" + fileName + ""String_Node_Str"",titleResult);
      System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
    }
  }
}","public Html2Text() throws IOException {
  File directory=new File(""String_Node_Str"");
  File[] fileList=directory.listFiles();
  if (fileList != null) {
    for (int i=0; i < fileList.length; i++) {
      String fileName=fileList[i].getName();
      StringBuilder content=new StringBuilder();
      String str=new String();
      BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(fileList[i]),""String_Node_Str""));
      while ((str=in.readLine()) != null) {
        content.append(str);
      }
      in.close();
      String result=this.dealHtml(content);
      FileUtils.writeStringToFile(new File(""String_Node_Str"" + fileName + ""String_Node_Str""),result,""String_Node_Str"");
      String titleResult=content.toString();
      int titleStart=titleResult.indexOf(""String_Node_Str"");
      if (titleStart > 0) {
        titleResult=titleResult.substring(titleStart);
      }
      int titleEnd=titleResult.indexOf(""String_Node_Str"");
      if (titleEnd > 0) {
        titleResult=titleResult.substring(0,titleEnd);
      }
      titleResult=this.dealHtml(titleResult);
      FileUtils.writeStringToFile(new File(""String_Node_Str"" + fileName + ""String_Node_Str""),titleResult,""String_Node_Str"");
      System.out.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
    }
  }
}",0.8745128604832424
134359,"public void segmentDir(String source,String target){
  File[] file=new File(source).listFiles();
  if (file == null) {
    return;
  }
  for (int i=0; i < file.length; ++i) {
    if (file[i].isFile()) {
      segmentFile(file[i].getAbsolutePath(),target + File.separator + file[i].getName());
    }
    if (file[i].isDirectory()) {
      String _sourceDir=source + File.separator + file[i].getName();
      String _targetDir=target + File.separator + file[i].getName();
      new File(_targetDir).mkdirs();
      segmentDir(_sourceDir,_targetDir);
    }
  }
}","/** 
 * @param source source directory.
 * @param target target directory.
 */
public final void segmentDir(final String source,final String target){
  File[] file=new File(source).listFiles();
  if (file == null) {
    return;
  }
  for (int i=0; i < file.length; ++i) {
    if (file[i].isFile()) {
      segmentFile(file[i].getAbsolutePath(),target + File.separator + file[i].getName());
    }
    if (file[i].isDirectory()) {
      String sourceDirTmp=source + File.separator + file[i].getName();
      String targetDirTmp=target + File.separator + file[i].getName();
      new File(targetDirTmp).mkdirs();
      segmentDir(sourceDirTmp,targetDirTmp);
    }
  }
}",0.8310204081632653
134360,"public Spilt(String source,String target){
  this.sourceDir=source;
  this.targetDir=target;
}","/** 
 * @param source source directory.
 * @param target target directory.
 */
public Spilt(final String source,final String target){
  this.sourceDir=source;
  this.targetDir=target;
}",0.6738351254480287
134361,"public void segmentFile(String srcfilename,String resfilename){
  File filetemp=new File(resfilename);
  filetemp.getParentFile().mkdirs();
  if (!(filetemp.exists())) {
    try {
      filetemp.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  FileReader filereader=null;
  FileWriter filewriter=null;
  Lexeme lexeme=null;
  try {
    filereader=new FileReader(srcfilename);
  }
 catch (  FileNotFoundException e0) {
    e0.printStackTrace();
  }
  try {
    filewriter=new FileWriter(resfilename);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  IKSegmenter iksegmentation=new IKSegmenter(filereader,true);
  try {
    while ((lexeme=iksegmentation.next()) != null) {
      filewriter.write(lexeme.getLexemeText());
      filewriter.write(""String_Node_Str"");
    }
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
 finally {
    if (filewriter != null) {
      try {
        filewriter.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  System.out.println(""String_Node_Str"" + srcfilename + ""String_Node_Str"");
}","/** 
 * @param srcfilename srcfilename
 * @param resfilename resfilename
 */
public final void segmentFile(final String srcfilename,final String resfilename){
  File filetemp=new File(resfilename);
  filetemp.getParentFile().mkdirs();
  if (!(filetemp.exists())) {
    try {
      filetemp.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  FileReader filereader=null;
  FileWriter filewriter=null;
  Lexeme lexeme=null;
  try {
    filereader=new FileReader(srcfilename);
  }
 catch (  FileNotFoundException e0) {
    e0.printStackTrace();
  }
  try {
    filewriter=new FileWriter(resfilename);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  IKSegmenter iksegmentation=new IKSegmenter(filereader,true);
  try {
    while ((lexeme=iksegmentation.next()) != null) {
      filewriter.write(lexeme.getLexemeText());
      filewriter.write(""String_Node_Str"");
    }
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
 finally {
    if (filewriter != null) {
      try {
        filewriter.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  System.out.println(""String_Node_Str"" + srcfilename + ""String_Node_Str"");
}",0.9596602972399152
134362,"public void segment(){
  segmentDir(this.sourceDir,this.targetDir);
}","/** 
 */
public final void segment(){
  segmentDir(this.sourceDir,this.targetDir);
}",0.9019607843137256
134363,"public static void writeFileByChars(String fileName,String value){
  String path=fileName;
  ByteBuffer bb=ByteBuffer.wrap(value.getBytes());
  value=null;
  FileChannel out2;
  try {
    out2=new FileOutputStream(path).getChannel();
    out2.write(bb);
    bb.clear();
    bb=null;
    out2.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void writeFileByChars(String fileName,String value){
  String path=fileName;
  ByteBuffer bb=ByteBuffer.wrap(value.getBytes());
  value=null;
  FileChannel out2;
  try {
    FileOutputStream fos=new FileOutputStream(path);
    out2=fos.getChannel();
    out2.write(bb);
    bb.clear();
    bb=null;
    out2.close();
    fos.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7569367369589345
134364,"public static void writeFileByChars(String fileName,String value){
  ByteBuffer byteBuffer=ByteBuffer.wrap(value.getBytes());
  File filepath=new File(fileName);
  filepath.getParentFile().mkdirs();
  FileChannel out;
  try {
    out=new FileOutputStream(fileName).getChannel();
    out.write(byteBuffer);
    byteBuffer.clear();
    byteBuffer=null;
    out.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void writeFileByChars(String fileName,String value){
  ByteBuffer byteBuffer=ByteBuffer.wrap(value.getBytes());
  File filepath=new File(fileName);
  filepath.getParentFile().mkdirs();
  FileChannel out;
  try {
    FileOutputStream outputStream=new FileOutputStream(fileName);
    out=outputStream.getChannel();
    out.write(byteBuffer);
    byteBuffer.clear();
    byteBuffer=null;
    out.close();
    outputStream.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9246704331450094
134365,"synchronized public void execute(){
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.info(netLog.start(""String_Node_Str""));
  int schedJobCount=0;
  int totalJobCount=0;
  Connection conn=null;
  try {
    System.gc();
    MaDDashGlobals globals=MaDDashGlobals.getInstance();
    conn=globals.getDataSource().getConnection();
    long time=System.currentTimeMillis() / 1000;
    netlogger.debug(netLog.start(""String_Node_Str""));
    PreparedStatement selStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    selStmt.setLong(1,time);
    selStmt.setInt(2,CheckConstants.RESULT_MAINTENANCE);
    selStmt.setInt(3,globals.getJobBatchSize());
    selStmt.setMaxRows(globals.getJobBatchSize());
    ResultSet checksToRun=selStmt.executeQuery();
    netlogger.debug(netLog.end(""String_Node_Str""));
    while (checksToRun.next()) {
      totalJobCount++;
      if (globals.isCheckScheduled(checksToRun.getInt(1))) {
        continue;
      }
      String jobKey=UUID.randomUUID().toString();
      String triggerName=""String_Node_Str"" + jobKey;
      String jobName=""String_Node_Str"" + jobKey;
      Trigger trigger=newTrigger().withIdentity(triggerName).startNow().build();
      JobDataMap dataMap=new JobDataMap();
      dataMap.put(""String_Node_Str"",checksToRun.getInt(1));
      dataMap.put(""String_Node_Str"",checksToRun.getString(2));
      dataMap.put(""String_Node_Str"",checksToRun.getString(3));
      dataMap.put(""String_Node_Str"",checksToRun.getString(4));
      dataMap.put(""String_Node_Str"",globals.getCheckTypeClassMap().get(checksToRun.getString(5)));
      dataMap.put(""String_Node_Str"",checksToRun.getString(6));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(7));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(8));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(9));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(10));
      dataMap.put(""String_Node_Str"",checksToRun.getString(11));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(3),checksToRun.getString(4),conn));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(4),checksToRun.getString(3),conn));
      JobDetail jobDetail=newJob(RunCheckJob.class).withIdentity(jobName,""String_Node_Str"").usingJobData(dataMap).build();
      globals.updateScheduledChecks(checksToRun.getInt(1),true);
      globals.getScheduler().scheduleJob(jobDetail,trigger);
      schedJobCount++;
    }
    conn.close();
    netlogger.info(netLog.end(""String_Node_Str""));
    log.debug(""String_Node_Str"" + schedJobCount + ""String_Node_Str""+ totalJobCount+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    netlogger.info(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e.getMessage());
  }
}","synchronized public void execute(){
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.info(netLog.start(""String_Node_Str""));
  int schedJobCount=0;
  int totalJobCount=0;
  Connection conn=null;
  try {
    System.gc();
    MaDDashGlobals globals=MaDDashGlobals.getInstance();
    conn=globals.getDataSource().getConnection();
    long time=System.currentTimeMillis() / 1000;
    netlogger.debug(netLog.start(""String_Node_Str""));
    PreparedStatement selStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    selStmt.setLong(1,time);
    selStmt.setInt(2,CheckConstants.RESULT_MAINTENANCE);
    selStmt.setInt(3,globals.getJobBatchSize());
    ResultSet checksToRun=selStmt.executeQuery();
    netlogger.debug(netLog.end(""String_Node_Str""));
    while (checksToRun.next()) {
      totalJobCount++;
      if (globals.isCheckScheduled(checksToRun.getInt(1))) {
        continue;
      }
      String jobKey=UUID.randomUUID().toString();
      String triggerName=""String_Node_Str"" + jobKey;
      String jobName=""String_Node_Str"" + jobKey;
      Trigger trigger=newTrigger().withIdentity(triggerName).startNow().build();
      JobDataMap dataMap=new JobDataMap();
      dataMap.put(""String_Node_Str"",checksToRun.getInt(1));
      dataMap.put(""String_Node_Str"",checksToRun.getString(2));
      dataMap.put(""String_Node_Str"",checksToRun.getString(3));
      dataMap.put(""String_Node_Str"",checksToRun.getString(4));
      dataMap.put(""String_Node_Str"",globals.getCheckTypeClassMap().get(checksToRun.getString(5)));
      dataMap.put(""String_Node_Str"",checksToRun.getString(6));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(7));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(8));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(9));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(10));
      dataMap.put(""String_Node_Str"",checksToRun.getString(11));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(3),checksToRun.getString(4),conn));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(4),checksToRun.getString(3),conn));
      JobDetail jobDetail=newJob(RunCheckJob.class).withIdentity(jobName,""String_Node_Str"").usingJobData(dataMap).build();
      globals.updateScheduledChecks(checksToRun.getInt(1),true);
      globals.getScheduler().scheduleJob(jobDetail,trigger);
      schedJobCount++;
    }
    conn.close();
    netlogger.info(netLog.end(""String_Node_Str""));
    log.debug(""String_Node_Str"" + schedJobCount + ""String_Node_Str""+ totalJobCount+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    netlogger.info(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e.getMessage());
  }
}",0.9915240152900116
134366,"/** 
 * Called by the scheduler when it is time to run the check
 * @param gridName the name of the grid containing this check 
 * @param rowName the name of the row containing this check
 * @param colName the name of the column containing this check
 * @param params a map of check-specific parameters defined in the check configuration
 * @param timeout the maximum amount of time to wait for this check
 * @return the result of the check
 */
public CheckResult check(String gridName,String rowName,String colName,Map params,Map<String,String> rowVars,Map<String,String> colVars,int timeout);","/** 
 * Called by the scheduler when it is time to run the check
 * @param gridName the name of the grid containing this check 
 * @param rowName the name of the row containing this check
 * @param colName the name of the column containing this check
 * @param params a map of check-specific parameters defined in the check configuration
 * @param timeout the maximum amount of time to wait for this check
 * @return the result of the check
 */
public CheckResult check(String gridName,String rowName,String colName,Map params,TemplateVariableMap rowVars,TemplateVariableMap colVars,int timeout);",0.9478991596638656
134367,"public CheckResult check(String gridName,String rowName,String colName,Map params,Map<String,String> rowVars,Map<String,String> colVars,int timeout){
  if (!params.containsKey(PARAM_COMMAND) || params.get(PARAM_COMMAND) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  String command=(String)params.get(PARAM_COMMAND);
  for (  String rowVar : rowVars.keySet()) {
    command=command.replaceAll(""String_Node_Str"" + rowVar,rowVars.get(rowVar));
  }
  command=command.replaceAll(""String_Node_Str"",rowName);
  for (  String colVar : colVars.keySet()) {
    command=command.replaceAll(""String_Node_Str"" + colVar,rowVars.get(colVar));
  }
  command=command.replaceAll(""String_Node_Str"",colName);
  NetLogger netLog=NetLogger.getTlogger();
  CheckResult result=null;
  Runtime runtime=Runtime.getRuntime();
  Process process=null;
  try {
    netlogger.debug(netLog.start(""String_Node_Str""));
    log.debug(""String_Node_Str"" + command);
    process=runtime.exec(command);
    WatchDog watchdog=new WatchDog(process);
    watchdog.start();
    watchdog.join(timeout * 1000);
    if (watchdog.exit == null) {
      result=new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"" + timeout + ""String_Node_Str"",null);
    }
 else {
      int resultCode=process.exitValue();
      String outputLine=null;
      Map returnParams=null;
      if (resultCode < CheckConstants.RESULT_SUCCESS) {
        outputLine=""String_Node_Str"" + resultCode + ""String_Node_Str"";
        resultCode=CheckConstants.RESULT_UNKNOWN;
      }
 else {
        BufferedReader stdin=new BufferedReader(new InputStreamReader(process.getInputStream()));
        outputLine=stdin.readLine();
        returnParams=this.parseReturnParams(outputLine);
        outputLine=this.formatOutputLine(outputLine);
      }
      result=new CheckResult(resultCode,outputLine,returnParams);
    }
    netlogger.debug(netLog.end(""String_Node_Str""));
  }
 catch (  Exception e) {
    netlogger.debug(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    result=new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"" + e.getMessage(),null);
    e.printStackTrace();
  }
 finally {
    if (process != null) {
      process.destroy();
    }
  }
  return result;
}","public CheckResult check(String gridName,String rowName,String colName,Map params,TemplateVariableMap rowVars,TemplateVariableMap colVars,int timeout){
  if (!params.containsKey(PARAM_COMMAND) || params.get(PARAM_COMMAND) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  String command=(String)params.get(PARAM_COMMAND);
  for (  String rowVar : rowVars.keySet()) {
    command=command.replaceAll(""String_Node_Str"" + rowVar,rowVars.get(rowVar));
  }
  command=command.replaceAll(""String_Node_Str"",rowName);
  for (  String colVar : colVars.keySet()) {
    command=command.replaceAll(""String_Node_Str"" + colVar,rowVars.get(colVar));
  }
  command=command.replaceAll(""String_Node_Str"",colName);
  NetLogger netLog=NetLogger.getTlogger();
  CheckResult result=null;
  Runtime runtime=Runtime.getRuntime();
  Process process=null;
  try {
    netlogger.debug(netLog.start(""String_Node_Str""));
    log.debug(""String_Node_Str"" + command);
    process=runtime.exec(command);
    WatchDog watchdog=new WatchDog(process);
    watchdog.start();
    watchdog.join(timeout * 1000);
    if (watchdog.exit == null) {
      result=new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"" + timeout + ""String_Node_Str"",null);
    }
 else {
      int resultCode=process.exitValue();
      String outputLine=null;
      Map returnParams=null;
      if (resultCode < CheckConstants.RESULT_SUCCESS) {
        outputLine=""String_Node_Str"" + resultCode + ""String_Node_Str"";
        resultCode=CheckConstants.RESULT_UNKNOWN;
      }
 else {
        BufferedReader stdin=new BufferedReader(new InputStreamReader(process.getInputStream()));
        outputLine=stdin.readLine();
        returnParams=this.parseReturnParams(outputLine);
        outputLine=this.formatOutputLine(outputLine);
      }
      result=new CheckResult(resultCode,outputLine,returnParams);
    }
    netlogger.debug(netLog.end(""String_Node_Str""));
  }
 catch (  Exception e) {
    netlogger.debug(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    result=new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"" + e.getMessage(),null);
    e.printStackTrace();
  }
 finally {
    if (process != null) {
      process.destroy();
    }
  }
  return result;
}",0.9866379310344828
134368,"private String replaceVars(String param,Map<String,String> vars,Map<String,String> rowVars,Map<String,String> colVars){
  for (  String rowVar : rowVars.keySet()) {
    param=param.replaceAll(""String_Node_Str"" + rowVar,rowVars.get(rowVar));
  }
  for (  String colVar : colVars.keySet()) {
    param=param.replaceAll(""String_Node_Str"" + colVar,colVars.get(colVar));
  }
  for (  String var : vars.keySet()) {
    param=param.replaceAll(var,vars.get(var));
  }
  return param;
}","private String replaceVars(String param,TemplateVariableMap vars,TemplateVariableMap rowVars,TemplateVariableMap colVars){
  for (  String rowVar : rowVars.keySet()) {
    param=param.replaceAll(""String_Node_Str"" + rowVar,rowVars.get(rowVar));
  }
  for (  String colVar : colVars.keySet()) {
    param=param.replaceAll(""String_Node_Str"" + colVar,colVars.get(colVar));
  }
  for (  String var : vars.keySet()) {
    param=param.replaceAll(var,vars.get(var));
  }
  return param;
}",0.8714733542319749
134369,"public CheckResult check(String gridName,String rowName,String colName,Map params,Map<String,String> rowVars,Map<String,String> colVars,int timeout){
  HashMap<String,String> netLogParams=new HashMap<String,String>();
  NetLogger netLog=NetLogger.getTlogger();
  HashMap<String,String> vars=new HashMap<String,String>();
  vars.put(""String_Node_Str"",rowName);
  vars.put(""String_Node_Str"",colName);
  vars.putAll(eventTypes);
  if (!params.containsKey(PARAM_MAURL) || params.get(PARAM_MAURL) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,PARAM_MAURL + ""String_Node_Str"",null);
  }
  Map maUrlMap=(Map)params.get(PARAM_MAURL);
  String maUrl=null;
  if (maUrlMap.containsKey(rowName) && maUrlMap.get(rowName) != null) {
    Map<String,String> rowMaUrlMap=(Map<String,String>)maUrlMap.get(rowName);
    if (rowMaUrlMap.containsKey(colName) && rowMaUrlMap.get(colName) != null) {
      maUrl=(String)rowMaUrlMap.get(colName);
    }
 else     if (rowMaUrlMap.containsKey(PROP_MAURL_DEFAULT) && rowMaUrlMap.get(PROP_MAURL_DEFAULT) != null) {
      maUrl=(String)rowMaUrlMap.get(PROP_MAURL_DEFAULT);
    }
  }
  if (maUrl == null) {
    maUrl=(String)maUrlMap.get(PROP_MAURL_DEFAULT);
  }
  if (maUrl == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  maUrl=this.replaceVars(maUrl,vars,rowVars,colVars);
  vars.put(""String_Node_Str"",maUrl);
  String maUrlReverse=null;
  if (maUrlMap.containsKey(colName) && maUrlMap.get(colName) != null) {
    Map<String,String> colMaUrlMap=(Map<String,String>)maUrlMap.get(colName);
    if (colMaUrlMap.containsKey(rowName) && colMaUrlMap.get(rowName) != null) {
      maUrlReverse=(String)colMaUrlMap.get(rowName);
    }
 else     if (colMaUrlMap.containsKey(PROP_MAURL_DEFAULT) && colMaUrlMap.get(PROP_MAURL_DEFAULT) != null) {
      maUrlReverse=(String)colMaUrlMap.get(PROP_MAURL_DEFAULT);
    }
  }
  if (maUrlReverse == null) {
    maUrlReverse=(String)maUrlMap.get(PROP_MAURL_DEFAULT);
  }
  if (maUrlReverse == null) {
    maUrlReverse=maUrl;
  }
 else {
    HashMap<String,String> varsReverse=new HashMap<String,String>();
    varsReverse.put(""String_Node_Str"",colName);
    varsReverse.put(""String_Node_Str"",rowName);
    varsReverse.putAll(eventTypes);
    maUrlReverse=this.replaceVars(maUrlReverse,varsReverse,colVars,rowVars);
  }
  vars.put(""String_Node_Str"",maUrlReverse);
  String mdKeyLookupUrl=null;
  if (params.containsKey(PARAM_MD_KEY_LOOKUP) && params.get(PARAM_MD_KEY_LOOKUP) != null) {
    mdKeyLookupUrl=(String)params.get(PARAM_MD_KEY_LOOKUP);
    mdKeyLookupUrl=this.replaceVars(mdKeyLookupUrl,vars,rowVars,colVars);
  }
  if (!params.containsKey(PARAM_GRAPH_URL) || params.get(PARAM_GRAPH_URL) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,PARAM_GRAPH_URL + ""String_Node_Str"",null);
  }
  String graphUrl=null;
  try {
    graphUrl=(String)params.get(PARAM_GRAPH_URL);
  }
 catch (  Exception e) {
  }
  if (graphUrl == null) {
    Map graphUrlMap=(Map)params.get(PARAM_GRAPH_URL);
    if (graphUrlMap.containsKey(rowName) && graphUrlMap.get(rowName) != null) {
      Map<String,String> rowGraphUrlMap=(Map<String,String>)graphUrlMap.get(rowName);
      if (rowGraphUrlMap.containsKey(colName) && rowGraphUrlMap.get(colName) != null) {
        graphUrl=(String)rowGraphUrlMap.get(colName);
      }
 else       if (rowGraphUrlMap.containsKey(PROP_GRAPHURL_DEFAULT) && rowGraphUrlMap.get(PROP_GRAPHURL_DEFAULT) != null) {
        graphUrl=(String)rowGraphUrlMap.get(PROP_GRAPHURL_DEFAULT);
      }
    }
    if (graphUrl == null) {
      graphUrl=(String)graphUrlMap.get(PROP_GRAPHURL_DEFAULT);
    }
  }
  if (graphUrl == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  if (!params.containsKey(PARAM_COMMAND) || params.get(PARAM_COMMAND) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  String command=(String)params.get(PARAM_COMMAND);
  command=this.replaceVars(command,vars,rowVars,colVars);
  params.put(PARAM_COMMAND,command);
  CheckResult nagiosResult=super.check(gridName,rowName,colName,params,rowVars,colVars,timeout);
  if (nagiosResult.getStats() == null) {
    nagiosResult.setStats(new HashMap<String,String>());
  }
  nagiosResult.getStats().put(""String_Node_Str"",maUrl);
  String response=""String_Node_Str"";
  try {
    if (mdKeyLookupUrl != null) {
      netlogger.debug(netLog.start(""String_Node_Str"",null,mdKeyLookupUrl));
      URL url=new URL(mdKeyLookupUrl);
      HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();
      log.debug(""String_Node_Str"" + mdKeyLookupUrl);
      log.debug(""String_Node_Str"" + httpConn.getResponseCode());
      log.debug(""String_Node_Str"" + httpConn.getResponseMessage());
      netLogParams.put(""String_Node_Str"",httpConn.getResponseCode() + ""String_Node_Str"");
      if (httpConn.getResponseCode() / 200 != 1) {
        netlogger.debug(netLog.end(""String_Node_Str"",null,mdKeyLookupUrl,netLogParams));
        return nagiosResult;
      }
      BufferedReader responseReader=new BufferedReader(new InputStreamReader(httpConn.getInputStream()));
      String line=null;
      while ((line=responseReader.readLine()) != null) {
        response+=(line + '\n');
      }
      netlogger.debug(netLog.end(""String_Node_Str"",null,mdKeyLookupUrl,netLogParams));
      log.debug(""String_Node_Str"" + response);
      JSONObject responseJSON=JSONObject.fromObject(response);
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
    }
    graphUrl=this.replaceVars(graphUrl,vars,rowVars,colVars);
    nagiosResult.getStats().put(""String_Node_Str"",graphUrl);
  }
 catch (  Exception e) {
    netlogger.debug(netLog.error(""String_Node_Str"",null,mdKeyLookupUrl,netLogParams));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  return nagiosResult;
}","public CheckResult check(String gridName,String rowName,String colName,Map params,TemplateVariableMap rowVars,TemplateVariableMap colVars,int timeout){
  HashMap<String,String> netLogParams=new HashMap<String,String>();
  NetLogger netLog=NetLogger.getTlogger();
  TemplateVariableMap vars=new TemplateVariableMap();
  vars.put(""String_Node_Str"",rowName);
  vars.put(""String_Node_Str"",colName);
  vars.putAll(eventTypes);
  if (!params.containsKey(PARAM_MAURL) || params.get(PARAM_MAURL) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,PARAM_MAURL + ""String_Node_Str"",null);
  }
  Map maUrlMap=(Map)params.get(PARAM_MAURL);
  String maUrl=null;
  if (maUrlMap.containsKey(rowName) && maUrlMap.get(rowName) != null) {
    Map<String,String> rowMaUrlMap=(Map<String,String>)maUrlMap.get(rowName);
    if (rowMaUrlMap.containsKey(colName) && rowMaUrlMap.get(colName) != null) {
      maUrl=(String)rowMaUrlMap.get(colName);
    }
 else     if (rowMaUrlMap.containsKey(PROP_MAURL_DEFAULT) && rowMaUrlMap.get(PROP_MAURL_DEFAULT) != null) {
      maUrl=(String)rowMaUrlMap.get(PROP_MAURL_DEFAULT);
    }
  }
  if (maUrl == null) {
    maUrl=(String)maUrlMap.get(PROP_MAURL_DEFAULT);
  }
  if (maUrl == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  maUrl=this.replaceVars(maUrl,vars,rowVars,colVars);
  vars.put(""String_Node_Str"",maUrl);
  String maUrlReverse=null;
  if (maUrlMap.containsKey(colName) && maUrlMap.get(colName) != null) {
    Map<String,String> colMaUrlMap=(Map<String,String>)maUrlMap.get(colName);
    if (colMaUrlMap.containsKey(rowName) && colMaUrlMap.get(rowName) != null) {
      maUrlReverse=(String)colMaUrlMap.get(rowName);
    }
 else     if (colMaUrlMap.containsKey(PROP_MAURL_DEFAULT) && colMaUrlMap.get(PROP_MAURL_DEFAULT) != null) {
      maUrlReverse=(String)colMaUrlMap.get(PROP_MAURL_DEFAULT);
    }
  }
  if (maUrlReverse == null) {
    maUrlReverse=(String)maUrlMap.get(PROP_MAURL_DEFAULT);
  }
  if (maUrlReverse == null) {
    maUrlReverse=maUrl;
  }
 else {
    TemplateVariableMap varsReverse=new TemplateVariableMap();
    varsReverse.put(""String_Node_Str"",colName);
    varsReverse.put(""String_Node_Str"",rowName);
    varsReverse.putAll(eventTypes);
    maUrlReverse=this.replaceVars(maUrlReverse,varsReverse,colVars,rowVars);
  }
  vars.put(""String_Node_Str"",maUrlReverse);
  String mdKeyLookupUrl=null;
  if (params.containsKey(PARAM_MD_KEY_LOOKUP) && params.get(PARAM_MD_KEY_LOOKUP) != null) {
    mdKeyLookupUrl=(String)params.get(PARAM_MD_KEY_LOOKUP);
    mdKeyLookupUrl=this.replaceVars(mdKeyLookupUrl,vars,rowVars,colVars);
  }
  if (!params.containsKey(PARAM_GRAPH_URL) || params.get(PARAM_GRAPH_URL) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,PARAM_GRAPH_URL + ""String_Node_Str"",null);
  }
  String graphUrl=null;
  try {
    graphUrl=(String)params.get(PARAM_GRAPH_URL);
  }
 catch (  Exception e) {
  }
  if (graphUrl == null) {
    Map graphUrlMap=(Map)params.get(PARAM_GRAPH_URL);
    if (graphUrlMap.containsKey(rowName) && graphUrlMap.get(rowName) != null) {
      Map<String,String> rowGraphUrlMap=(Map<String,String>)graphUrlMap.get(rowName);
      if (rowGraphUrlMap.containsKey(colName) && rowGraphUrlMap.get(colName) != null) {
        graphUrl=(String)rowGraphUrlMap.get(colName);
      }
 else       if (rowGraphUrlMap.containsKey(PROP_GRAPHURL_DEFAULT) && rowGraphUrlMap.get(PROP_GRAPHURL_DEFAULT) != null) {
        graphUrl=(String)rowGraphUrlMap.get(PROP_GRAPHURL_DEFAULT);
      }
    }
    if (graphUrl == null) {
      graphUrl=(String)graphUrlMap.get(PROP_GRAPHURL_DEFAULT);
    }
  }
  if (graphUrl == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  if (!params.containsKey(PARAM_COMMAND) || params.get(PARAM_COMMAND) == null) {
    return new CheckResult(CheckConstants.RESULT_UNKNOWN,""String_Node_Str"",null);
  }
  String command=(String)params.get(PARAM_COMMAND);
  command=this.replaceVars(command,vars,rowVars,colVars);
  params.put(PARAM_COMMAND,command);
  CheckResult nagiosResult=super.check(gridName,rowName,colName,params,rowVars,colVars,timeout);
  if (nagiosResult.getStats() == null) {
    nagiosResult.setStats(new HashMap<String,String>());
  }
  nagiosResult.getStats().put(""String_Node_Str"",maUrl);
  String response=""String_Node_Str"";
  try {
    if (mdKeyLookupUrl != null) {
      netlogger.debug(netLog.start(""String_Node_Str"",null,mdKeyLookupUrl));
      URL url=new URL(mdKeyLookupUrl);
      HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();
      log.debug(""String_Node_Str"" + mdKeyLookupUrl);
      log.debug(""String_Node_Str"" + httpConn.getResponseCode());
      log.debug(""String_Node_Str"" + httpConn.getResponseMessage());
      netLogParams.put(""String_Node_Str"",httpConn.getResponseCode() + ""String_Node_Str"");
      if (httpConn.getResponseCode() / 200 != 1) {
        netlogger.debug(netLog.end(""String_Node_Str"",null,mdKeyLookupUrl,netLogParams));
        return nagiosResult;
      }
      BufferedReader responseReader=new BufferedReader(new InputStreamReader(httpConn.getInputStream()));
      String line=null;
      while ((line=responseReader.readLine()) != null) {
        response+=(line + '\n');
      }
      netlogger.debug(netLog.end(""String_Node_Str"",null,mdKeyLookupUrl,netLogParams));
      log.debug(""String_Node_Str"" + response);
      JSONObject responseJSON=JSONObject.fromObject(response);
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
      vars.put(""String_Node_Str"",""String_Node_Str"" + responseJSON.get(""String_Node_Str""));
    }
    graphUrl=this.replaceVars(graphUrl,vars,rowVars,colVars);
    nagiosResult.getStats().put(""String_Node_Str"",graphUrl);
  }
 catch (  Exception e) {
    netlogger.debug(netLog.error(""String_Node_Str"",null,mdKeyLookupUrl,netLogParams));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  return nagiosResult;
}",0.9634787991333952
134370,"public CheckResult check(String gridName,String rowName,String colName,Map params,Map rowVars,Map colVars,int timeout){
  Random rand=new Random();
  int resultCode=rand.nextInt(CheckConstants.RESULT_UNKNOWN + 1);
  return new CheckResult(resultCode,""String_Node_Str"",null);
}","public CheckResult check(String gridName,String rowName,String colName,Map params,TemplateVariableMap rowVars,TemplateVariableMap colVars,int timeout){
  Random rand=new Random();
  int resultCode=rand.nextInt(CheckConstants.RESULT_UNKNOWN + 1);
  return new CheckResult(resultCode,""String_Node_Str"",null);
}",0.9452054794520548
134371,"public void execute(JobExecutionContext context) throws JobExecutionException {
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.debug(netLog.start(""String_Node_Str""));
  MaDDashGlobals globals=null;
  try {
    globals=MaDDashGlobals.getInstance();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  JobDataMap dataMap=context.getJobDetail().getJobDataMap();
  int checkId=dataMap.getInt(""String_Node_Str"");
  String gridName=dataMap.getString(""String_Node_Str"");
  String rowName=dataMap.getString(""String_Node_Str"");
  String colName=dataMap.getString(""String_Node_Str"");
  Class checkClass=(Class)dataMap.get(""String_Node_Str"");
  String checkParams=dataMap.getString(""String_Node_Str"");
  Map<String,String> rowVars=(Map<String,String>)dataMap.get(""String_Node_Str"");
  Map<String,String> colVars=(Map<String,String>)dataMap.get(""String_Node_Str"");
  int timeout=dataMap.getInt(""String_Node_Str"");
  JSONObject paramJson=null;
  Check checkToRun=null;
  try {
    if (checkParams != null && !CheckConstants.EMPTY_PARAMS.equals(checkParams)) {
      paramJson=JSONObject.fromObject(checkParams);
    }
    checkToRun=(Check)checkClass.newInstance();
  }
 catch (  Exception e) {
    this.deactivateCheck(checkId,globals);
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  HashMap<String,String> netLogFields=new HashMap<String,String>();
  netLogFields.put(""String_Node_Str"",gridName);
  netLogFields.put(""String_Node_Str"",rowName);
  netLogFields.put(""String_Node_Str"",colName);
  CheckResult result=null;
  try {
    netlogger.info(netLog.start(""String_Node_Str"",null,null,netLogFields));
    result=checkToRun.check(gridName,rowName,colName,paramJson,rowVars,colVars,timeout);
    netLogFields.put(""String_Node_Str"",result.getResultCode() + ""String_Node_Str"");
    netLogFields.put(""String_Node_Str"",result.getMessage());
    netlogger.info(netLog.end(""String_Node_Str"",null,null,netLogFields));
    log.debug(""String_Node_Str"" + result.getResultCode());
    log.debug(""String_Node_Str"" + result.getMessage());
  }
 catch (  Exception e) {
    result=new CheckResult(CheckConstants.RESULT_UNKNOWN,e.getMessage(),null);
    netlogger.error(netLog.end(""String_Node_Str"",e.getMessage(),null,netLogFields));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  Connection conn=null;
  try {
    netlogger.debug(netLog.start(""String_Node_Str""));
    conn=globals.getDataSource().getConnection();
    this.updateDatabase(result,dataMap,conn);
    conn.close();
    netlogger.debug(netLog.end(""String_Node_Str""));
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e1) {
      }
    }
    netlogger.debug(netLog.error(""String_Node_Str"",e.getMessage()));
    e.printStackTrace();
  }
  globals.updateScheduledChecks(checkId,false);
  netlogger.debug(netLog.end(""String_Node_Str""));
}","public void execute(JobExecutionContext context) throws JobExecutionException {
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.debug(netLog.start(""String_Node_Str""));
  MaDDashGlobals globals=null;
  try {
    globals=MaDDashGlobals.getInstance();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  JobDataMap dataMap=context.getJobDetail().getJobDataMap();
  int checkId=dataMap.getInt(""String_Node_Str"");
  String gridName=dataMap.getString(""String_Node_Str"");
  String rowName=dataMap.getString(""String_Node_Str"");
  String colName=dataMap.getString(""String_Node_Str"");
  Class checkClass=(Class)dataMap.get(""String_Node_Str"");
  String checkParams=dataMap.getString(""String_Node_Str"");
  Map<String,String> rowVarsUnsorted=(Map<String,String>)dataMap.get(""String_Node_Str"");
  Map<String,String> colVarsUnsorted=(Map<String,String>)dataMap.get(""String_Node_Str"");
  TemplateVariableMap rowVars=new TemplateVariableMap();
  if (rowVarsUnsorted != null) {
    rowVars.putAll(rowVarsUnsorted);
  }
  TemplateVariableMap colVars=new TemplateVariableMap();
  if (colVarsUnsorted != null) {
    colVars.putAll(colVarsUnsorted);
  }
  int timeout=dataMap.getInt(""String_Node_Str"");
  JSONObject paramJson=null;
  Check checkToRun=null;
  try {
    if (checkParams != null && !CheckConstants.EMPTY_PARAMS.equals(checkParams)) {
      paramJson=JSONObject.fromObject(checkParams);
    }
    checkToRun=(Check)checkClass.newInstance();
  }
 catch (  Exception e) {
    this.deactivateCheck(checkId,globals);
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  HashMap<String,String> netLogFields=new HashMap<String,String>();
  netLogFields.put(""String_Node_Str"",gridName);
  netLogFields.put(""String_Node_Str"",rowName);
  netLogFields.put(""String_Node_Str"",colName);
  CheckResult result=null;
  try {
    netlogger.info(netLog.start(""String_Node_Str"",null,null,netLogFields));
    result=checkToRun.check(gridName,rowName,colName,paramJson,rowVars,colVars,timeout);
    netLogFields.put(""String_Node_Str"",result.getResultCode() + ""String_Node_Str"");
    netLogFields.put(""String_Node_Str"",result.getMessage());
    netlogger.info(netLog.end(""String_Node_Str"",null,null,netLogFields));
    log.debug(""String_Node_Str"" + result.getResultCode());
    log.debug(""String_Node_Str"" + result.getMessage());
  }
 catch (  Exception e) {
    result=new CheckResult(CheckConstants.RESULT_UNKNOWN,e.getMessage(),null);
    netlogger.error(netLog.end(""String_Node_Str"",e.getMessage(),null,netLogFields));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  Connection conn=null;
  try {
    netlogger.debug(netLog.start(""String_Node_Str""));
    conn=globals.getDataSource().getConnection();
    this.updateDatabase(result,dataMap,conn);
    conn.close();
    netlogger.debug(netLog.end(""String_Node_Str""));
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e1) {
      }
    }
    netlogger.debug(netLog.error(""String_Node_Str"",e.getMessage()));
    e.printStackTrace();
  }
  globals.updateScheduledChecks(checkId,false);
  netlogger.debug(netLog.end(""String_Node_Str""));
}",0.9556052379431492
134372,"static public String buildWhereClauseFromPost(String sql,JsonObject jsonCheckFilters,List<String> sqlParams){
  HashMap<String,List<String>> checkFilterDBMap=RESTUtil.createAdminFilterMap();
  for (  String jsonField : checkFilterDBMap.keySet()) {
    if (!""String_Node_Str"".equals(RESTUtil.checkField(jsonField,jsonCheckFilters,false,false,""String_Node_Str"") + ""String_Node_Str"")) {
      if (sqlParams.isEmpty()) {
        sql+=""String_Node_Str"";
      }
 else {
        sql+=""String_Node_Str"";
      }
      boolean openParen=false;
      for (int i=0; i < jsonCheckFilters.getJsonArray(jsonField).size(); i++) {
        if (i == 0) {
          sql+=""String_Node_Str"";
          openParen=true;
        }
 else {
          sql+=""String_Node_Str"";
        }
        for (int j=0; j < checkFilterDBMap.get(jsonField).size(); j++) {
          if (j > 0) {
            sql+=""String_Node_Str"";
          }
          sql+=""String_Node_Str"" + checkFilterDBMap.get(jsonField).get(j) + ""String_Node_Str"";
          sqlParams.add(jsonCheckFilters.getJsonArray(jsonField).getString(i));
        }
      }
      if (openParen) {
        sql+=""String_Node_Str"";
      }
    }
  }
  return sql;
}","static public String buildWhereClauseFromPost(String sql,JsonObject jsonCheckFilters,List<String> sqlParams){
  HashMap<String,List<String>> checkFilterDBMap=RESTUtil.createAdminFilterMap();
  for (  String jsonField : checkFilterDBMap.keySet()) {
    JsonArray fieldArray=null;
    if (!jsonCheckFilters.containsKey(jsonField) || jsonCheckFilters.isNull(jsonField)) {
      continue;
    }
 else     if (jsonCheckFilters.get(jsonField).getValueType().equals(ValueType.STRING)) {
      if (""String_Node_Str"".equals(jsonCheckFilters.getString(jsonField))) {
        continue;
      }
      fieldArray=Json.createArrayBuilder().add(jsonCheckFilters.getString(jsonField)).build();
    }
 else     if (jsonCheckFilters.get(jsonField).getValueType().equals(ValueType.ARRAY)) {
      fieldArray=jsonCheckFilters.getJsonArray(jsonField);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + jsonField + ""String_Node_Str""+ jsonCheckFilters.get(jsonField).getValueType());
    }
    if (sqlParams.isEmpty()) {
      sql+=""String_Node_Str"";
    }
 else {
      sql+=""String_Node_Str"";
    }
    boolean openParen=false;
    for (int i=0; i < fieldArray.size(); i++) {
      if (i == 0) {
        sql+=""String_Node_Str"";
        openParen=true;
      }
 else {
        sql+=""String_Node_Str"";
      }
      for (int j=0; j < checkFilterDBMap.get(jsonField).size(); j++) {
        if (j > 0) {
          sql+=""String_Node_Str"";
        }
        sql+=""String_Node_Str"" + checkFilterDBMap.get(jsonField).get(j) + ""String_Node_Str"";
        sqlParams.add(fieldArray.getString(i));
      }
    }
    if (openParen) {
      sql+=""String_Node_Str"";
    }
  }
  return sql;
}",0.6722689075630253
134373,"synchronized public void execute(){
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.info(netLog.start(""String_Node_Str""));
  int schedJobCount=0;
  int totalJobCount=0;
  Connection conn=null;
  try {
    System.gc();
    MaDDashGlobals globals=MaDDashGlobals.getInstance();
    conn=globals.getDataSource().getConnection();
    long time=System.currentTimeMillis() / 1000;
    netlogger.debug(netLog.start(""String_Node_Str""));
    PreparedStatement selStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    selStmt.setLong(1,time);
    selStmt.setInt(2,CheckConstants.RESULT_MAINTENANCE);
    selStmt.setMaxRows(globals.getJobBatchSize());
    ResultSet checksToRun=selStmt.executeQuery();
    netlogger.debug(netLog.end(""String_Node_Str""));
    while (checksToRun.next()) {
      totalJobCount++;
      if (globals.isCheckScheduled(checksToRun.getInt(1))) {
        continue;
      }
      String jobKey=UUID.randomUUID().toString();
      String triggerName=""String_Node_Str"" + jobKey;
      String jobName=""String_Node_Str"" + jobKey;
      SimpleTrigger trigger=new SimpleTrigger(triggerName,null,new Date(),null,0,0L);
      JobDetail jobDetail=new JobDetail(jobName,""String_Node_Str"",RunCheckJob.class);
      JobDataMap dataMap=new JobDataMap();
      dataMap.put(""String_Node_Str"",checksToRun.getInt(1));
      dataMap.put(""String_Node_Str"",checksToRun.getString(2));
      dataMap.put(""String_Node_Str"",checksToRun.getString(3));
      dataMap.put(""String_Node_Str"",checksToRun.getString(4));
      dataMap.put(""String_Node_Str"",globals.getCheckTypeClassMap().get(checksToRun.getString(5)));
      dataMap.put(""String_Node_Str"",checksToRun.getString(6));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(7));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(8));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(9));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(10));
      dataMap.put(""String_Node_Str"",checksToRun.getString(11));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(3),conn));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(4),conn));
      jobDetail.setJobDataMap(dataMap);
      globals.updateScheduledChecks(checksToRun.getInt(1),true);
      globals.getScheduler().scheduleJob(jobDetail,trigger);
      schedJobCount++;
    }
    conn.close();
    netlogger.info(netLog.end(""String_Node_Str""));
    log.debug(""String_Node_Str"" + schedJobCount + ""String_Node_Str""+ totalJobCount+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    netlogger.info(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e.getMessage());
  }
}","synchronized public void execute(){
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.info(netLog.start(""String_Node_Str""));
  int schedJobCount=0;
  int totalJobCount=0;
  Connection conn=null;
  try {
    System.gc();
    MaDDashGlobals globals=MaDDashGlobals.getInstance();
    conn=globals.getDataSource().getConnection();
    long time=System.currentTimeMillis() / 1000;
    netlogger.debug(netLog.start(""String_Node_Str""));
    PreparedStatement selStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    selStmt.setLong(1,time);
    selStmt.setInt(2,CheckConstants.RESULT_MAINTENANCE);
    selStmt.setInt(3,globals.getJobBatchSize());
    selStmt.setMaxRows(globals.getJobBatchSize());
    ResultSet checksToRun=selStmt.executeQuery();
    netlogger.debug(netLog.end(""String_Node_Str""));
    while (checksToRun.next()) {
      totalJobCount++;
      if (globals.isCheckScheduled(checksToRun.getInt(1))) {
        continue;
      }
      String jobKey=UUID.randomUUID().toString();
      String triggerName=""String_Node_Str"" + jobKey;
      String jobName=""String_Node_Str"" + jobKey;
      SimpleTrigger trigger=new SimpleTrigger(triggerName,null,new Date(),null,0,0L);
      JobDetail jobDetail=new JobDetail(jobName,""String_Node_Str"",RunCheckJob.class);
      JobDataMap dataMap=new JobDataMap();
      dataMap.put(""String_Node_Str"",checksToRun.getInt(1));
      dataMap.put(""String_Node_Str"",checksToRun.getString(2));
      dataMap.put(""String_Node_Str"",checksToRun.getString(3));
      dataMap.put(""String_Node_Str"",checksToRun.getString(4));
      dataMap.put(""String_Node_Str"",globals.getCheckTypeClassMap().get(checksToRun.getString(5)));
      dataMap.put(""String_Node_Str"",checksToRun.getString(6));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(7));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(8));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(9));
      dataMap.put(""String_Node_Str"",checksToRun.getInt(10));
      dataMap.put(""String_Node_Str"",checksToRun.getString(11));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(3),conn));
      dataMap.put(""String_Node_Str"",DimensionUtil.getParams(checksToRun.getString(4),conn));
      jobDetail.setJobDataMap(dataMap);
      globals.updateScheduledChecks(checksToRun.getInt(1),true);
      globals.getScheduler().scheduleJob(jobDetail,trigger);
      schedJobCount++;
    }
    conn.close();
    netlogger.info(netLog.end(""String_Node_Str""));
    log.debug(""String_Node_Str"" + schedJobCount + ""String_Node_Str""+ totalJobCount+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    netlogger.info(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e.getMessage());
  }
}",0.9917438921651222
134374,"/** 
 * Loads YAML properties into scheduler database
 * @param config Properties loaded from YAML file as a Map
 * @param dataSource the dataSource to use to access the database
 * @return a map of check Classes indexed by the class name
 * @throws ClassNotFoundException
 */
static public Map<String,Class> load(Map config,ComboPooledDataSource dataSource) throws ClassNotFoundException {
  checkRequiredProp(config,PROP_CHECKS);
  checkRequiredProp(config,PROP_GROUPS);
  checkRequiredProp(config,PROP_GRIDS);
  Map<String,Map> checkMap=(Map<String,Map>)config.get(PROP_CHECKS);
  Map groupMap=(Map)config.get(PROP_GROUPS);
  List<Map> gridList=(List<Map>)config.get(PROP_GRIDS);
  HashMap<String,Class> checkTypeClassMap=new HashMap<String,Class>();
  Connection conn=null;
  try {
    conn=dataSource.getConnection();
    conn.createStatement().executeUpdate(""String_Node_Str"");
    PreparedStatement insertDimension=conn.prepareStatement(""String_Node_Str"");
    if (config.containsKey(PROP_DIMENSIONS) && config.get(PROP_DIMENSIONS) != null) {
      int i=1;
      for (      Map<Object,Object> dimension : (List<Map<Object,Object>>)config.get(PROP_DIMENSIONS)) {
        if (!dimension.containsKey(PROP_DIMENSIONS_ID) || dimension.get(PROP_DIMENSIONS_ID) == null) {
          throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
        for (        Object dimensionParamObj : dimension.keySet()) {
          String dimensionParam=dimensionParamObj + ""String_Node_Str"";
          if (dimensionParam.equals(PROP_DIMENSIONS_ID)) {
            continue;
          }
          insertDimension.setString(1,dimension.get(PROP_DIMENSIONS_ID) + ""String_Node_Str"");
          insertDimension.setString(2,dimensionParam);
          insertDimension.setString(3,dimension.get(dimensionParam) + ""String_Node_Str"");
          insertDimension.executeUpdate();
        }
        i++;
      }
    }
    HashMap<String,Integer> templateIdMap=new HashMap<String,Integer>();
    PreparedStatement selTemplateStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    PreparedStatement insertTemplateStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"",Statement.RETURN_GENERATED_KEYS);
    PreparedStatement updateTemplateStmt=conn.prepareStatement(""String_Node_Str"");
    for (    String checkName : checkMap.keySet()) {
      selTemplateStmt.setString(1,checkName);
      insertTemplateStmt.setString(1,checkName);
      Map check=checkMap.get(checkName);
      checkRequiredProp(check,PROP_CHECKS_NAME);
      checkRequiredProp(check,PROP_CHECKS_DESCRIPTION);
      checkRequiredProp(check,PROP_CHECKS_TYPE);
      if (!checkTypeClassMap.containsKey(check.get(PROP_CHECKS_TYPE) + ""String_Node_Str"")) {
        checkTypeClassMap.put(check.get(PROP_CHECKS_TYPE) + ""String_Node_Str"",loadClass(check.get(PROP_CHECKS_TYPE) + ""String_Node_Str""));
      }
      selTemplateStmt.setString(2,(String)check.get(PROP_CHECKS_TYPE));
      insertTemplateStmt.setString(2,(String)check.get(PROP_CHECKS_TYPE));
      String jsonParamString=CheckConstants.EMPTY_PARAMS;
      if (check.containsKey(PROP_CHECKS_PARAMS) && check.get(PROP_CHECKS_PARAMS) != null) {
        jsonParamString=JSONObject.fromObject(check.get(PROP_CHECKS_PARAMS)).toString();
      }
      SerialClob jsonClob=new SerialClob(jsonParamString.toCharArray());
      updateTemplateStmt.setClob(1,jsonClob);
      insertTemplateStmt.setClob(3,jsonClob);
      checkRequiredProp(check,PROP_CHECKS_INTERVAL);
      selTemplateStmt.setInt(3,(Integer)check.get(PROP_CHECKS_INTERVAL));
      insertTemplateStmt.setInt(4,(Integer)check.get(PROP_CHECKS_INTERVAL));
      checkRequiredProp(check,PROP_CHECKS_RETRY_INT);
      selTemplateStmt.setInt(4,(Integer)check.get(PROP_CHECKS_RETRY_INT));
      insertTemplateStmt.setInt(5,(Integer)check.get(PROP_CHECKS_RETRY_INT));
      checkRequiredProp(check,PROP_CHECKS_RETRY_ATT);
      selTemplateStmt.setInt(5,(Integer)check.get(PROP_CHECKS_RETRY_ATT));
      insertTemplateStmt.setInt(6,(Integer)check.get(PROP_CHECKS_RETRY_ATT));
      checkRequiredProp(check,PROP_CHECKS_TIMEOUT);
      selTemplateStmt.setInt(6,(Integer)check.get(PROP_CHECKS_TIMEOUT));
      insertTemplateStmt.setInt(7,(Integer)check.get(PROP_CHECKS_TIMEOUT));
      ResultSet selResult=selTemplateStmt.executeQuery();
      if (selResult.next()) {
        updateTemplateStmt.setInt(2,selResult.getInt(1));
        updateTemplateStmt.execute();
        templateIdMap.put(checkName,selResult.getInt(1));
      }
 else {
        insertTemplateStmt.executeUpdate();
        ResultSet genKeys=insertTemplateStmt.getGeneratedKeys();
        if (!genKeys.next()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        templateIdMap.put(checkName,genKeys.getInt(1));
      }
    }
    conn.createStatement().executeUpdate(""String_Node_Str"");
    conn.createStatement().executeUpdate(""String_Node_Str"");
    PreparedStatement insertGridStmt=conn.prepareStatement(""String_Node_Str"");
    PreparedStatement selCheckStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    PreparedStatement updateCheckStmt=conn.prepareStatement(""String_Node_Str"");
    PreparedStatement insertCheckStmt=conn.prepareStatement(""String_Node_Str"" + CheckConstants.RESULT_NOTRUN + ""String_Node_Str""+ CheckConstants.RESULT_NOTRUN+ ""String_Node_Str"");
    for (    Map gridMap : gridList) {
      String rowOrder=(String)gridMap.get(PROP_GRIDS_ROW_ORDER);
      String colOrder=(String)gridMap.get(PROP_GRIDS_COL_ORDER);
      checkRequiredProp(gridMap,PROP_GRIDS_NAME);
      checkRequiredProp(gridMap,PROP_GRIDS_ROWS);
      checkRequiredProp(gridMap,PROP_GRIDS_EXCL_SELF);
      checkRequiredProp(gridMap,PROP_GRIDS_COL_ALG);
      checkRequiredProp(gridMap,PROP_GRIDS_COLS);
      checkRequiredProp(gridMap,PROP_GRIDS_CHECKS);
      checkRequiredProp(gridMap,PROP_GRIDS_STATUS_LABELS);
      String colAlg=((String)gridMap.get(PROP_GRIDS_COL_ALG)).toLowerCase();
      int exclSelf=(Integer)gridMap.get(PROP_GRIDS_EXCL_SELF);
      Map<String,List<String>> exclChecks=new HashMap<String,List<String>>();
      if (gridMap.containsKey(PROP_GRIDS_EXCL_CHECKS) && gridMap.get(PROP_GRIDS_EXCL_CHECKS) != null) {
        exclChecks=(Map<String,List<String>>)gridMap.get(PROP_GRIDS_EXCL_CHECKS);
      }
      checkRequiredProp(groupMap,(String)gridMap.get(PROP_GRIDS_ROWS));
      checkRequiredProp(groupMap,(String)gridMap.get(PROP_GRIDS_COLS));
      List<String> rows=new ArrayList<String>();
      for (      Object tmpRow : (List<Object>)groupMap.get(gridMap.get(PROP_GRIDS_ROWS))) {
        rows.add(tmpRow + ""String_Node_Str"");
      }
      if (ORDER_ALPHA.equals(rowOrder)) {
        Collections.sort(rows);
      }
      List<String> cols=new ArrayList<String>();
      List<String> tmpCols=new ArrayList<String>();
      for (      Object tmpCol : (List<Object>)groupMap.get(gridMap.get(PROP_GRIDS_COLS))) {
        cols.add(tmpCol + ""String_Node_Str"");
        tmpCols.add(tmpCol + ""String_Node_Str"");
      }
      if (ORDER_ALPHA.equals(colOrder)) {
        Collections.sort(tmpCols);
      }
      HashMap<String,Integer> colOrderMap=new HashMap<String,Integer>();
      for (int i=0; i < tmpCols.size(); i++) {
        colOrderMap.put(tmpCols.get(i),i);
      }
      Map<String,String> statusLabelMap=(Map<String,String>)gridMap.get(PROP_GRIDS_STATUS_LABELS);
      insertGridStmt.setString(1,(String)gridMap.get(PROP_GRIDS_NAME));
      insertGridStmt.setString(2,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_OK));
      insertGridStmt.setString(3,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_WARNING));
      insertGridStmt.setString(4,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_CRITICAL));
      insertGridStmt.setString(5,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_UNKNOWN));
      insertGridStmt.setString(6,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_NOTRUN));
      insertGridStmt.executeUpdate();
      selCheckStmt.setString(1,(String)gridMap.get(PROP_GRIDS_NAME));
      for (int ri=0; ri < rows.size(); ri++) {
        String row=rows.get(ri);
        boolean rowColFound=false;
        selCheckStmt.setString(2,row);
        for (        String col : cols) {
          if (col.equals(row) && exclSelf == 1) {
            rowColFound=true;
            continue;
          }
 else           if (col.equals(row)) {
            rowColFound=true;
          }
          if (exclChecks.containsKey(row) && exclChecks.get(row) != null) {
            if (exclChecks.get(row).contains(col) || exclChecks.get(row).contains(EXCL_CHECKS_ALL)) {
              continue;
            }
          }
 else           if (exclChecks.containsKey(EXCL_CHECKS_DEFAULT) && exclChecks.get(EXCL_CHECKS_DEFAULT) != null) {
            if (exclChecks.get(EXCL_CHECKS_DEFAULT).contains(col) || exclChecks.get(EXCL_CHECKS_DEFAULT).contains(EXCL_CHECKS_ALL)) {
              continue;
            }
          }
          if (colAlg.equals(ALG_AFTER) && !rowColFound) {
            continue;
          }
 else           if (colAlg.equals(ALG_BEFORE) && rowColFound) {
            break;
          }
          selCheckStmt.setString(3,col);
          for (          String checkName : (List<String>)gridMap.get(PROP_GRIDS_CHECKS)) {
            if (!checkMap.containsKey(checkName) || checkMap.get(checkName) == null) {
              throw new RuntimeException(""String_Node_Str"" + checkName + ""String_Node_Str"");
            }
            String checkNiceName=(String)checkMap.get(checkName).get(PROP_CHECKS_NAME);
            String checkDescrName=(String)checkMap.get(checkName).get(PROP_CHECKS_DESCRIPTION);
            checkRequiredProp(templateIdMap,checkName);
            selCheckStmt.setString(4,checkNiceName);
            selCheckStmt.setInt(5,templateIdMap.get(checkName));
            ResultSet selResult=selCheckStmt.executeQuery();
            if (selResult.next()) {
              log.debug(""String_Node_Str"" + checkName);
              updateCheckStmt.setString(1,formatCheckDescription(checkDescrName,row,col));
              updateCheckStmt.setInt(2,ri);
              updateCheckStmt.setInt(3,colOrderMap.get(col));
              updateCheckStmt.setInt(4,selResult.getInt(1));
              updateCheckStmt.executeUpdate();
            }
 else {
              log.debug(""String_Node_Str"" + checkName);
              insertCheckStmt.setInt(1,templateIdMap.get(checkName));
              insertCheckStmt.setString(2,(String)gridMap.get(PROP_GRIDS_NAME));
              insertCheckStmt.setString(3,row);
              insertCheckStmt.setString(4,col);
              insertCheckStmt.setString(5,checkNiceName);
              insertCheckStmt.setInt(6,ri);
              insertCheckStmt.setInt(7,colOrderMap.get(col));
              insertCheckStmt.setString(8,formatCheckDescription(checkDescrName,row,col));
              insertCheckStmt.executeUpdate();
            }
          }
        }
      }
    }
    conn.close();
  }
 catch (  SQLException e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return checkTypeClassMap;
}","/** 
 * Loads YAML properties into scheduler database
 * @param config Properties loaded from YAML file as a Map
 * @param dataSource the dataSource to use to access the database
 * @return a map of check Classes indexed by the class name
 * @throws ClassNotFoundException
 */
static public Map<String,Class> load(Map config,ComboPooledDataSource dataSource) throws ClassNotFoundException {
  checkRequiredProp(config,PROP_CHECKS);
  checkRequiredProp(config,PROP_GROUPS);
  checkRequiredProp(config,PROP_GRIDS);
  Map<String,Map> checkMap=(Map<String,Map>)config.get(PROP_CHECKS);
  Map groupMap=(Map)config.get(PROP_GROUPS);
  List<Map> gridList=(List<Map>)config.get(PROP_GRIDS);
  HashMap<String,Class> checkTypeClassMap=new HashMap<String,Class>();
  HashMap<String,String> dimensionLabelMap=new HashMap<String,String>();
  Connection conn=null;
  try {
    conn=dataSource.getConnection();
    conn.createStatement().executeUpdate(""String_Node_Str"");
    PreparedStatement insertDimension=conn.prepareStatement(""String_Node_Str"");
    if (config.containsKey(PROP_DIMENSIONS) && config.get(PROP_DIMENSIONS) != null) {
      int i=1;
      for (      Map<Object,Object> dimension : (List<Map<Object,Object>>)config.get(PROP_DIMENSIONS)) {
        if (!dimension.containsKey(PROP_DIMENSIONS_ID) || dimension.get(PROP_DIMENSIONS_ID) == null) {
          throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str"");
        }
        for (        Object dimensionParamObj : dimension.keySet()) {
          String dimensionParam=dimensionParamObj + ""String_Node_Str"";
          if (dimensionParam.equals(PROP_DIMENSIONS_ID)) {
            continue;
          }
          if (dimensionParam.equals(PROP_DIMENSIONS_LABEL)) {
            dimensionLabelMap.put(dimension.get(PROP_DIMENSIONS_ID) + ""String_Node_Str"",dimension.get(dimensionParam) + ""String_Node_Str"");
          }
          insertDimension.setString(1,dimension.get(PROP_DIMENSIONS_ID) + ""String_Node_Str"");
          insertDimension.setString(2,dimensionParam);
          insertDimension.setString(3,dimension.get(dimensionParam) + ""String_Node_Str"");
          insertDimension.executeUpdate();
        }
        i++;
      }
    }
    HashMap<String,Integer> templateIdMap=new HashMap<String,Integer>();
    PreparedStatement selTemplateStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    PreparedStatement insertTemplateStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"",Statement.RETURN_GENERATED_KEYS);
    PreparedStatement updateTemplateStmt=conn.prepareStatement(""String_Node_Str"");
    for (    String checkName : checkMap.keySet()) {
      selTemplateStmt.setString(1,checkName);
      insertTemplateStmt.setString(1,checkName);
      Map check=checkMap.get(checkName);
      checkRequiredProp(check,PROP_CHECKS_NAME);
      checkRequiredProp(check,PROP_CHECKS_DESCRIPTION);
      checkRequiredProp(check,PROP_CHECKS_TYPE);
      if (!checkTypeClassMap.containsKey(check.get(PROP_CHECKS_TYPE) + ""String_Node_Str"")) {
        checkTypeClassMap.put(check.get(PROP_CHECKS_TYPE) + ""String_Node_Str"",loadClass(check.get(PROP_CHECKS_TYPE) + ""String_Node_Str""));
      }
      selTemplateStmt.setString(2,(String)check.get(PROP_CHECKS_TYPE));
      insertTemplateStmt.setString(2,(String)check.get(PROP_CHECKS_TYPE));
      String jsonParamString=CheckConstants.EMPTY_PARAMS;
      if (check.containsKey(PROP_CHECKS_PARAMS) && check.get(PROP_CHECKS_PARAMS) != null) {
        jsonParamString=JSONObject.fromObject(check.get(PROP_CHECKS_PARAMS)).toString();
      }
      SerialClob jsonClob=new SerialClob(jsonParamString.toCharArray());
      updateTemplateStmt.setClob(1,jsonClob);
      insertTemplateStmt.setClob(3,jsonClob);
      checkRequiredProp(check,PROP_CHECKS_INTERVAL);
      selTemplateStmt.setInt(3,(Integer)check.get(PROP_CHECKS_INTERVAL));
      insertTemplateStmt.setInt(4,(Integer)check.get(PROP_CHECKS_INTERVAL));
      checkRequiredProp(check,PROP_CHECKS_RETRY_INT);
      selTemplateStmt.setInt(4,(Integer)check.get(PROP_CHECKS_RETRY_INT));
      insertTemplateStmt.setInt(5,(Integer)check.get(PROP_CHECKS_RETRY_INT));
      checkRequiredProp(check,PROP_CHECKS_RETRY_ATT);
      selTemplateStmt.setInt(5,(Integer)check.get(PROP_CHECKS_RETRY_ATT));
      insertTemplateStmt.setInt(6,(Integer)check.get(PROP_CHECKS_RETRY_ATT));
      checkRequiredProp(check,PROP_CHECKS_TIMEOUT);
      selTemplateStmt.setInt(6,(Integer)check.get(PROP_CHECKS_TIMEOUT));
      insertTemplateStmt.setInt(7,(Integer)check.get(PROP_CHECKS_TIMEOUT));
      ResultSet selResult=selTemplateStmt.executeQuery();
      if (selResult.next()) {
        updateTemplateStmt.setInt(2,selResult.getInt(1));
        updateTemplateStmt.execute();
        templateIdMap.put(checkName,selResult.getInt(1));
      }
 else {
        insertTemplateStmt.executeUpdate();
        ResultSet genKeys=insertTemplateStmt.getGeneratedKeys();
        if (!genKeys.next()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        templateIdMap.put(checkName,genKeys.getInt(1));
      }
    }
    conn.createStatement().executeUpdate(""String_Node_Str"");
    conn.createStatement().executeUpdate(""String_Node_Str"");
    PreparedStatement insertGridStmt=conn.prepareStatement(""String_Node_Str"");
    PreparedStatement selCheckStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    PreparedStatement updateCheckStmt=conn.prepareStatement(""String_Node_Str"");
    PreparedStatement insertCheckStmt=conn.prepareStatement(""String_Node_Str"" + CheckConstants.RESULT_NOTRUN + ""String_Node_Str""+ CheckConstants.RESULT_NOTRUN+ ""String_Node_Str"");
    for (    Map gridMap : gridList) {
      String rowOrder=(String)gridMap.get(PROP_GRIDS_ROW_ORDER);
      String colOrder=(String)gridMap.get(PROP_GRIDS_COL_ORDER);
      checkRequiredProp(gridMap,PROP_GRIDS_NAME);
      checkRequiredProp(gridMap,PROP_GRIDS_ROWS);
      checkRequiredProp(gridMap,PROP_GRIDS_EXCL_SELF);
      checkRequiredProp(gridMap,PROP_GRIDS_COL_ALG);
      checkRequiredProp(gridMap,PROP_GRIDS_COLS);
      checkRequiredProp(gridMap,PROP_GRIDS_CHECKS);
      checkRequiredProp(gridMap,PROP_GRIDS_STATUS_LABELS);
      String colAlg=((String)gridMap.get(PROP_GRIDS_COL_ALG)).toLowerCase();
      int exclSelf=(Integer)gridMap.get(PROP_GRIDS_EXCL_SELF);
      Map<String,List<String>> exclChecks=new HashMap<String,List<String>>();
      if (gridMap.containsKey(PROP_GRIDS_EXCL_CHECKS) && gridMap.get(PROP_GRIDS_EXCL_CHECKS) != null) {
        exclChecks=(Map<String,List<String>>)gridMap.get(PROP_GRIDS_EXCL_CHECKS);
      }
      checkRequiredProp(groupMap,(String)gridMap.get(PROP_GRIDS_ROWS));
      checkRequiredProp(groupMap,(String)gridMap.get(PROP_GRIDS_COLS));
      List<String> rows=new ArrayList<String>();
      for (      Object tmpRow : (List<Object>)groupMap.get(gridMap.get(PROP_GRIDS_ROWS))) {
        rows.add(tmpRow + ""String_Node_Str"");
      }
      if (ORDER_ALPHA.equals(rowOrder)) {
        rows=ConfigLoader.sortDimension(rows,dimensionLabelMap);
      }
      List<String> cols=new ArrayList<String>();
      List<String> tmpCols=new ArrayList<String>();
      for (      Object tmpCol : (List<Object>)groupMap.get(gridMap.get(PROP_GRIDS_COLS))) {
        cols.add(tmpCol + ""String_Node_Str"");
        tmpCols.add(tmpCol + ""String_Node_Str"");
      }
      if (ORDER_ALPHA.equals(colOrder)) {
        tmpCols=ConfigLoader.sortDimension(tmpCols,dimensionLabelMap);
      }
      HashMap<String,Integer> colOrderMap=new HashMap<String,Integer>();
      for (int i=0; i < tmpCols.size(); i++) {
        colOrderMap.put(tmpCols.get(i),i);
      }
      Map<String,String> statusLabelMap=(Map<String,String>)gridMap.get(PROP_GRIDS_STATUS_LABELS);
      insertGridStmt.setString(1,(String)gridMap.get(PROP_GRIDS_NAME));
      insertGridStmt.setString(2,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_OK));
      insertGridStmt.setString(3,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_WARNING));
      insertGridStmt.setString(4,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_CRITICAL));
      insertGridStmt.setString(5,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_UNKNOWN));
      insertGridStmt.setString(6,ConfigLoader.genStatusLabel(statusLabelMap,PROP_GRIDS_STATUS_LABELS_NOTRUN));
      insertGridStmt.executeUpdate();
      selCheckStmt.setString(1,(String)gridMap.get(PROP_GRIDS_NAME));
      for (int ri=0; ri < rows.size(); ri++) {
        String row=rows.get(ri);
        boolean rowColFound=false;
        selCheckStmt.setString(2,row);
        for (        String col : cols) {
          if (col.equals(row) && exclSelf == 1) {
            rowColFound=true;
            continue;
          }
 else           if (col.equals(row)) {
            rowColFound=true;
          }
          if (exclChecks.containsKey(row) && exclChecks.get(row) != null) {
            if (exclChecks.get(row).contains(col) || exclChecks.get(row).contains(EXCL_CHECKS_ALL)) {
              continue;
            }
          }
 else           if (exclChecks.containsKey(EXCL_CHECKS_DEFAULT) && exclChecks.get(EXCL_CHECKS_DEFAULT) != null) {
            if (exclChecks.get(EXCL_CHECKS_DEFAULT).contains(col) || exclChecks.get(EXCL_CHECKS_DEFAULT).contains(EXCL_CHECKS_ALL)) {
              continue;
            }
          }
          if (colAlg.equals(ALG_AFTER) && !rowColFound) {
            continue;
          }
 else           if (colAlg.equals(ALG_BEFORE) && rowColFound) {
            break;
          }
          selCheckStmt.setString(3,col);
          for (          String checkName : (List<String>)gridMap.get(PROP_GRIDS_CHECKS)) {
            if (!checkMap.containsKey(checkName) || checkMap.get(checkName) == null) {
              throw new RuntimeException(""String_Node_Str"" + checkName + ""String_Node_Str"");
            }
            String checkNiceName=(String)checkMap.get(checkName).get(PROP_CHECKS_NAME);
            String checkDescrName=(String)checkMap.get(checkName).get(PROP_CHECKS_DESCRIPTION);
            checkRequiredProp(templateIdMap,checkName);
            selCheckStmt.setString(4,checkNiceName);
            selCheckStmt.setInt(5,templateIdMap.get(checkName));
            ResultSet selResult=selCheckStmt.executeQuery();
            if (selResult.next()) {
              log.debug(""String_Node_Str"" + checkName);
              updateCheckStmt.setString(1,formatCheckDescription(checkDescrName,row,col));
              updateCheckStmt.setInt(2,ri);
              updateCheckStmt.setInt(3,colOrderMap.get(col));
              updateCheckStmt.setInt(4,selResult.getInt(1));
              updateCheckStmt.executeUpdate();
            }
 else {
              log.debug(""String_Node_Str"" + checkName);
              insertCheckStmt.setInt(1,templateIdMap.get(checkName));
              insertCheckStmt.setString(2,(String)gridMap.get(PROP_GRIDS_NAME));
              insertCheckStmt.setString(3,row);
              insertCheckStmt.setString(4,col);
              insertCheckStmt.setString(5,checkNiceName);
              insertCheckStmt.setInt(6,ri);
              insertCheckStmt.setInt(7,colOrderMap.get(col));
              insertCheckStmt.setString(8,formatCheckDescription(checkDescrName,row,col));
              insertCheckStmt.executeUpdate();
            }
          }
        }
      }
    }
    conn.close();
  }
 catch (  SQLException e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return checkTypeClassMap;
}",0.981009365244537
134375,"/** 
 * Generates a logging event automatically prefixed with the module name and with fields specified in the provided HashMap. It also sets the time  with the current time (in nanoseconds).
 * @param event the name of the event to occur.
 * @param entryFieldMap a HashMap with additional fields not defined by the other arguments. The HashMap key and value correspond  the key and value in the NetLogger field. If a field is  used frequently it is recommended that this class be  sub-classed as opposed to passing a HashMap.
 * @return a LogMessage from the NetLogger API that can be passed to a logging library.
 */
public LogMessage getMsg(String event,HashMap<String,String> entryFieldMap){
  LogMessage logMsg=new LogMessage(this.moduleName + ""String_Node_Str"" + event);
  for (  String field : fieldMap.keySet()) {
    if (fieldMap.get(field) != null) {
      this.addField(field,fieldMap.get(field),logMsg);
    }
  }
  for (  String field : entryFieldMap.keySet()) {
    if (entryFieldMap.get(field) != null) {
      this.addField(field,entryFieldMap.get(field),logMsg);
    }
  }
  logMsg.setTimeStampNanos(System.nanoTime());
  return logMsg;
}","/** 
 * Generates a logging event automatically prefixed with the module name and with fields specified in the provided HashMap. It also sets the time  with the current time (in nanoseconds).
 * @param event the name of the event to occur.
 * @param entryFieldMap a HashMap with additional fields not defined by the other arguments. The HashMap key and value correspond  the key and value in the NetLogger field. If a field is  used frequently it is recommended that this class be  sub-classed as opposed to passing a HashMap.
 * @return a LogMessage from the NetLogger API that can be passed to a logging library.
 */
public LogMessage getMsg(String event,HashMap<String,String> entryFieldMap){
  LogMessage logMsg=new LogMessage(event);
  for (  String field : fieldMap.keySet()) {
    if (fieldMap.get(field) != null) {
      this.addField(field,fieldMap.get(field),logMsg);
    }
  }
  for (  String field : entryFieldMap.keySet()) {
    if (entryFieldMap.get(field) != null) {
      this.addField(field,entryFieldMap.get(field),logMsg);
    }
  }
  logMsg.setTimeStampNanos(System.nanoTime());
  return logMsg;
}",0.983274647887324
134376,"public void execute(JobExecutionContext context) throws JobExecutionException {
  NetLogger netLog=NetLogger.getTlogger();
  Connection conn=null;
  try {
    netlogger.info(netLog.start(""String_Node_Str""));
    MaDDashGlobals globals=MaDDashGlobals.getInstance();
    conn=globals.getDataSource().getConnection();
    PreparedStatement selStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    long time=System.currentTimeMillis() / 1000;
    selStmt.setLong(1,time);
    selStmt.setMaxRows(globals.getJobBatchSize());
    ResultSet checksToRun=selStmt.executeQuery();
    int jobCount=0;
synchronized (CheckSchedulerJob.class) {
      while (checksToRun.next()) {
        if (globals.isCheckScheduled(checksToRun.getInt(1))) {
          continue;
        }
        String jobKey=UUID.randomUUID().toString();
        String triggerName=""String_Node_Str"" + jobKey;
        String jobName=""String_Node_Str"" + jobKey;
        SimpleTrigger trigger=new SimpleTrigger(triggerName,null,new Date(),null,0,0L);
        JobDetail jobDetail=new JobDetail(jobName,""String_Node_Str"",RunCheckJob.class);
        JobDataMap dataMap=new JobDataMap();
        dataMap.put(""String_Node_Str"",checksToRun.getInt(1));
        dataMap.put(""String_Node_Str"",checksToRun.getString(2));
        dataMap.put(""String_Node_Str"",checksToRun.getString(3));
        dataMap.put(""String_Node_Str"",checksToRun.getString(4));
        dataMap.put(""String_Node_Str"",globals.getCheckTypeClassMap().get(checksToRun.getString(5)));
        dataMap.put(""String_Node_Str"",checksToRun.getString(6));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(7));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(8));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(9));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(10));
        jobDetail.setJobDataMap(dataMap);
        globals.updateScheduledChecks(checksToRun.getInt(1),true);
        globals.getScheduler().scheduleJob(jobDetail,trigger);
        jobCount++;
      }
    }
    conn.close();
    netlogger.info(netLog.end(""String_Node_Str""));
    log.debug(""String_Node_Str"" + jobCount + ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    netlogger.info(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e.getMessage());
  }
}","public void execute(JobExecutionContext context) throws JobExecutionException {
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.info(netLog.start(""String_Node_Str""));
  int jobCount=0;
  Connection conn=null;
  try {
synchronized (CheckSchedulerJob.class) {
      MaDDashGlobals globals=MaDDashGlobals.getInstance();
      conn=globals.getDataSource().getConnection();
      long time=System.currentTimeMillis() / 1000;
      netlogger.debug(netLog.start(""String_Node_Str""));
      PreparedStatement selStmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      selStmt.setLong(1,time);
      selStmt.setMaxRows(globals.getJobBatchSize());
      ResultSet checksToRun=selStmt.executeQuery();
      netlogger.debug(netLog.end(""String_Node_Str""));
      while (checksToRun.next()) {
        if (globals.isCheckScheduled(checksToRun.getInt(1))) {
          continue;
        }
        String jobKey=UUID.randomUUID().toString();
        String triggerName=""String_Node_Str"" + jobKey;
        String jobName=""String_Node_Str"" + jobKey;
        SimpleTrigger trigger=new SimpleTrigger(triggerName,null,new Date(),null,0,0L);
        JobDetail jobDetail=new JobDetail(jobName,""String_Node_Str"",RunCheckJob.class);
        JobDataMap dataMap=new JobDataMap();
        dataMap.put(""String_Node_Str"",checksToRun.getInt(1));
        dataMap.put(""String_Node_Str"",checksToRun.getString(2));
        dataMap.put(""String_Node_Str"",checksToRun.getString(3));
        dataMap.put(""String_Node_Str"",checksToRun.getString(4));
        dataMap.put(""String_Node_Str"",globals.getCheckTypeClassMap().get(checksToRun.getString(5)));
        dataMap.put(""String_Node_Str"",checksToRun.getString(6));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(7));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(8));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(9));
        dataMap.put(""String_Node_Str"",checksToRun.getInt(10));
        jobDetail.setJobDataMap(dataMap);
        globals.updateScheduledChecks(checksToRun.getInt(1),true);
        globals.getScheduler().scheduleJob(jobDetail,trigger);
        jobCount++;
      }
    }
    conn.close();
    netlogger.info(netLog.end(""String_Node_Str""));
    log.debug(""String_Node_Str"" + jobCount + ""String_Node_Str"");
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e2) {
      }
    }
    netlogger.info(netLog.error(""String_Node_Str"",e.getMessage()));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e.getMessage());
  }
}",0.8741898589401449
134377,"public void execute(JobExecutionContext context) throws JobExecutionException {
  MaDDashGlobals globals=null;
  try {
    globals=MaDDashGlobals.getInstance();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  JobDataMap dataMap=context.getJobDetail().getJobDataMap();
  int checkId=dataMap.getInt(""String_Node_Str"");
  String gridName=dataMap.getString(""String_Node_Str"");
  String rowName=dataMap.getString(""String_Node_Str"");
  String colName=dataMap.getString(""String_Node_Str"");
  Class checkClass=(Class)dataMap.get(""String_Node_Str"");
  String checkParams=dataMap.getString(""String_Node_Str"");
  int timeout=dataMap.getInt(""String_Node_Str"");
  JSONObject paramJson=null;
  Check checkToRun=null;
  try {
    if (checkParams != null && !CheckConstants.EMPTY_PARAMS.equals(checkParams)) {
      paramJson=JSONObject.fromObject(checkParams);
    }
    checkToRun=(Check)checkClass.newInstance();
  }
 catch (  Exception e) {
    this.deactivateCheck(checkId,globals);
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  HashMap<String,String> netLogFields=new HashMap<String,String>();
  netLogFields.put(""String_Node_Str"",gridName);
  netLogFields.put(""String_Node_Str"",rowName);
  netLogFields.put(""String_Node_Str"",colName);
  NetLogger netLog=NetLogger.getTlogger();
  CheckResult result=null;
  try {
    netlogger.info(netLog.start(""String_Node_Str"",null,null,netLogFields));
    result=checkToRun.check(gridName,rowName,colName,paramJson,timeout);
    netLogFields.put(""String_Node_Str"",result.getResultCode() + ""String_Node_Str"");
    netLogFields.put(""String_Node_Str"",result.getMessage());
    netlogger.info(netLog.end(""String_Node_Str"",null,null,netLogFields));
    log.debug(""String_Node_Str"" + result.getResultCode());
    log.debug(""String_Node_Str"" + result.getMessage());
  }
 catch (  Exception e) {
    result=new CheckResult(CheckConstants.RESULT_UNKNOWN,e.getMessage(),null);
    netlogger.error(netLog.end(""String_Node_Str"",e.getMessage(),null,netLogFields));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  Connection conn=null;
  try {
    netlogger.debug(netLog.start(""String_Node_Str""));
synchronized (globals) {
      conn=globals.getDataSource().getConnection();
      this.updateDatabase(result,dataMap,conn);
      conn.close();
    }
    netlogger.debug(netLog.end(""String_Node_Str""));
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e1) {
      }
    }
    netlogger.debug(netLog.error(""String_Node_Str"",e.getMessage()));
    e.printStackTrace();
  }
  globals.updateScheduledChecks(checkId,false);
}","public void execute(JobExecutionContext context) throws JobExecutionException {
  NetLogger netLog=NetLogger.getTlogger();
  netlogger.debug(netLog.start(""String_Node_Str""));
  MaDDashGlobals globals=null;
  try {
    globals=MaDDashGlobals.getInstance();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  JobDataMap dataMap=context.getJobDetail().getJobDataMap();
  int checkId=dataMap.getInt(""String_Node_Str"");
  String gridName=dataMap.getString(""String_Node_Str"");
  String rowName=dataMap.getString(""String_Node_Str"");
  String colName=dataMap.getString(""String_Node_Str"");
  Class checkClass=(Class)dataMap.get(""String_Node_Str"");
  String checkParams=dataMap.getString(""String_Node_Str"");
  int timeout=dataMap.getInt(""String_Node_Str"");
  JSONObject paramJson=null;
  Check checkToRun=null;
  try {
    if (checkParams != null && !CheckConstants.EMPTY_PARAMS.equals(checkParams)) {
      paramJson=JSONObject.fromObject(checkParams);
    }
    checkToRun=(Check)checkClass.newInstance();
  }
 catch (  Exception e) {
    this.deactivateCheck(checkId,globals);
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  HashMap<String,String> netLogFields=new HashMap<String,String>();
  netLogFields.put(""String_Node_Str"",gridName);
  netLogFields.put(""String_Node_Str"",rowName);
  netLogFields.put(""String_Node_Str"",colName);
  CheckResult result=null;
  try {
    netlogger.info(netLog.start(""String_Node_Str"",null,null,netLogFields));
    result=checkToRun.check(gridName,rowName,colName,paramJson,timeout);
    netLogFields.put(""String_Node_Str"",result.getResultCode() + ""String_Node_Str"");
    netLogFields.put(""String_Node_Str"",result.getMessage());
    netlogger.info(netLog.end(""String_Node_Str"",null,null,netLogFields));
    log.debug(""String_Node_Str"" + result.getResultCode());
    log.debug(""String_Node_Str"" + result.getMessage());
  }
 catch (  Exception e) {
    result=new CheckResult(CheckConstants.RESULT_UNKNOWN,e.getMessage(),null);
    netlogger.error(netLog.end(""String_Node_Str"",e.getMessage(),null,netLogFields));
    log.error(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  Connection conn=null;
  try {
    netlogger.debug(netLog.start(""String_Node_Str""));
synchronized (globals) {
      conn=globals.getDataSource().getConnection();
      this.updateDatabase(result,dataMap,conn);
      conn.close();
    }
    netlogger.debug(netLog.end(""String_Node_Str""));
  }
 catch (  Exception e) {
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      SQLException e1) {
      }
    }
    netlogger.debug(netLog.error(""String_Node_Str"",e.getMessage()));
    e.printStackTrace();
  }
  globals.updateScheduledChecks(checkId,false);
  netlogger.debug(netLog.end(""String_Node_Str""));
}",0.9664285714285714
134378,"@Override public void onResponse(ImageLoader.ImageContainer response,boolean isImmediate){
  if (response.getBitmap() == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
  }
  TextView view=getView();
  if (view == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return;
  }
  int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
  if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
    maxWidth=mMaxSize;
  }
  Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
  remote.setRemoteDrawable(drawable,maxWidth);
  if (!isImmediate) {
    view.setText(view.getText());
  }
}","@Override public void onResponse(ImageLoader.ImageContainer response,boolean isImmediate){
  if (response.getBitmap() == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
  }
  TextView view=getView();
  if (view == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return;
  }
  int maxWidth=view.getWidth() - ViewCompat.getPaddingStart(view) - ViewCompat.getPaddingEnd(view);
  if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
    maxWidth=mMaxSize;
  }
  Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
  remote.setRemoteDrawable(drawable,maxWidth);
  if (!isImmediate) {
    view.setText(view.getText());
  }
}",0.9571106094808126
134379,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - ViewCompat.getPaddingStart(view) - ViewCompat.getPaddingEnd(view);
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9814634146341464
134380,"/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  File rotatedImageFile;
  FileOutputStream out;
  try {
    String prefix=FileUtils.getFileNameFromPath(fileName);
    if (TextUtils.isEmpty(prefix) || prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    rotatedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(rotatedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=rotatedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}","/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase(Locale.ROOT);
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  File rotatedImageFile;
  FileOutputStream out;
  try {
    String prefix=FileUtils.getFileNameFromPath(fileName);
    if (TextUtils.isEmpty(prefix) || prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    rotatedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(rotatedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=rotatedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}",0.9975517471622524
134381,"/** 
 * Given the path to an image, compress and resize it.
 * @param context the passed context
 * @param path the path to the original image
 * @param maxImageSize the maximum allowed width
 * @param quality the encoder quality
 * @return the path to the optimized image
 */
public static String optimizeImage(Context context,String path,int maxImageSize,int quality){
  if (context == null || TextUtils.isEmpty(path)) {
    return path;
  }
  File file=new File(path);
  if (!file.exists()) {
    return path;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return path;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return path;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int[] imageDimensions=getImageSize(srcImageUri,context);
  int selectedMaxSize=Math.max(imageDimensions[0],imageDimensions[1]);
  if (selectedMaxSize == 0) {
    return path;
  }
  if (maxImageSize == Integer.MAX_VALUE && quality == 100) {
    return path;
  }
  if (selectedMaxSize > maxImageSize) {
    selectedMaxSize=maxImageSize;
  }
  int orientation=getImageOrientation(context,path);
  File resizedImageFile;
  FileOutputStream out;
  try {
    String prefix=FileUtils.getFileNameFromPath(fileName);
    if (TextUtils.isEmpty(prefix) || prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    resizedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(resizedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedMaxSize,orientation,quality,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return path;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=resizedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return path;
}","/** 
 * Given the path to an image, compress and resize it.
 * @param context the passed context
 * @param path the path to the original image
 * @param maxImageSize the maximum allowed width
 * @param quality the encoder quality
 * @return the path to the optimized image
 */
public static String optimizeImage(Context context,String path,int maxImageSize,int quality){
  if (context == null || TextUtils.isEmpty(path)) {
    return path;
  }
  File file=new File(path);
  if (!file.exists()) {
    return path;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return path;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return path;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase(Locale.ROOT);
  int[] imageDimensions=getImageSize(srcImageUri,context);
  int selectedMaxSize=Math.max(imageDimensions[0],imageDimensions[1]);
  if (selectedMaxSize == 0) {
    return path;
  }
  if (maxImageSize == Integer.MAX_VALUE && quality == 100) {
    return path;
  }
  if (selectedMaxSize > maxImageSize) {
    selectedMaxSize=maxImageSize;
  }
  int orientation=getImageOrientation(context,path);
  File resizedImageFile;
  FileOutputStream out;
  try {
    String prefix=FileUtils.getFileNameFromPath(fileName);
    if (TextUtils.isEmpty(prefix) || prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    resizedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(resizedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedMaxSize,orientation,quality,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return path;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return path;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=resizedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return path;
}",0.997831657796176
134382,"public static boolean isSpreadsheet(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase();
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"");
}","public static boolean isSpreadsheet(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase(Locale.ROOT);
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"");
}",0.972568578553616
134383,"public static boolean isPowerpoint(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase();
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}","public static boolean isPowerpoint(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase(Locale.ROOT);
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}",0.9818181818181818
134384,"public static String getMediaFileName(File mediaFile,String mimeType){
  String originalFileName=mediaFile.getName().toLowerCase();
  String extension=MimeTypeMap.getFileExtensionFromUrl(originalFileName);
  if (!TextUtils.isEmpty(extension))   return originalFileName;
  if (!TextUtils.isEmpty(mimeType)) {
    String fileExtension=getExtensionForMimeType(mimeType);
    if (!TextUtils.isEmpty(fileExtension)) {
      originalFileName+=""String_Node_Str"" + fileExtension;
    }
  }
 else {
    AppLog.e(AppLog.T.API,""String_Node_Str"" + mediaFile.getPath());
  }
  return originalFileName;
}","public static String getMediaFileName(File mediaFile,String mimeType){
  String originalFileName=mediaFile.getName().toLowerCase(Locale.ROOT);
  String extension=MimeTypeMap.getFileExtensionFromUrl(originalFileName);
  if (!TextUtils.isEmpty(extension))   return originalFileName;
  if (!TextUtils.isEmpty(mimeType)) {
    String fileExtension=getExtensionForMimeType(mimeType);
    if (!TextUtils.isEmpty(fileExtension)) {
      originalFileName+=""String_Node_Str"" + fileExtension;
    }
  }
 else {
    AppLog.e(AppLog.T.API,""String_Node_Str"" + mediaFile.getPath());
  }
  return originalFileName;
}",0.9907640638119228
134385,"public static String getExtensionForMimeType(String mimeType){
  if (TextUtils.isEmpty(mimeType))   return ""String_Node_Str"";
  MimeTypeMap mimeTypeMap=MimeTypeMap.getSingleton();
  String fileExtensionFromMimeType=mimeTypeMap.getExtensionFromMimeType(mimeType);
  if (TextUtils.isEmpty(fileExtensionFromMimeType)) {
    String[] split=mimeType.split(""String_Node_Str"");
    fileExtensionFromMimeType=split.length > 1 ? split[1] : split[0];
  }
  return fileExtensionFromMimeType.toLowerCase();
}","public static String getExtensionForMimeType(String mimeType){
  if (TextUtils.isEmpty(mimeType))   return ""String_Node_Str"";
  MimeTypeMap mimeTypeMap=MimeTypeMap.getSingleton();
  String fileExtensionFromMimeType=mimeTypeMap.getExtensionFromMimeType(mimeType);
  if (TextUtils.isEmpty(fileExtensionFromMimeType)) {
    String[] split=mimeType.split(""String_Node_Str"");
    fileExtensionFromMimeType=split.length > 1 ? split[1] : split[0];
  }
  return fileExtensionFromMimeType.toLowerCase(Locale.ROOT);
}",0.9890329012961117
134386,"public static String getMediaFileMimeType(File mediaFile){
  String originalFileName=mediaFile.getName().toLowerCase();
  String mimeType=UrlUtils.getUrlMimeType(originalFileName);
  if (TextUtils.isEmpty(mimeType)) {
    try {
      String filePathForGuessingMime;
      if (mediaFile.getPath().contains(""String_Node_Str"")) {
        filePathForGuessingMime=Uri.encode(mediaFile.getPath(),""String_Node_Str"");
      }
 else {
        filePathForGuessingMime=""String_Node_Str"" + Uri.encode(mediaFile.getPath(),""String_Node_Str"");
      }
      URL urlForGuessingMime=new URL(filePathForGuessingMime);
      URLConnection uc=urlForGuessingMime.openConnection();
      String guessedContentType=null;
      try {
        guessedContentType=uc.getContentType();
      }
 catch (      StringIndexOutOfBoundsException e) {
        AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath() + ""String_Node_Str"",e);
      }
      if (!TextUtils.isEmpty(guessedContentType) && !guessedContentType.equals(""String_Node_Str"")) {
        mimeType=guessedContentType;
      }
    }
 catch (    MalformedURLException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath() + ""String_Node_Str"",e);
    }
catch (    IOException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath() + ""String_Node_Str"",e);
    }
  }
  if (TextUtils.isEmpty(mimeType)) {
    try {
      DataInputStream inputStream=new DataInputStream(new FileInputStream(mediaFile));
      String mimeTypeFromStream=getMimeTypeOfInputStream(inputStream);
      if (!TextUtils.isEmpty(mimeTypeFromStream)) {
        mimeType=mimeTypeFromStream;
      }
      inputStream.close();
    }
 catch (    FileNotFoundException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath(),e);
    }
catch (    IOException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath(),e);
    }
  }
  if (TextUtils.isEmpty(mimeType)) {
    mimeType=""String_Node_Str"";
  }
 else {
    if (mimeType.equalsIgnoreCase(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
  }
  return mimeType;
}","public static String getMediaFileMimeType(File mediaFile){
  String originalFileName=mediaFile.getName().toLowerCase(Locale.ROOT);
  String mimeType=UrlUtils.getUrlMimeType(originalFileName);
  if (TextUtils.isEmpty(mimeType)) {
    try {
      String filePathForGuessingMime;
      if (mediaFile.getPath().contains(""String_Node_Str"")) {
        filePathForGuessingMime=Uri.encode(mediaFile.getPath(),""String_Node_Str"");
      }
 else {
        filePathForGuessingMime=""String_Node_Str"" + Uri.encode(mediaFile.getPath(),""String_Node_Str"");
      }
      URL urlForGuessingMime=new URL(filePathForGuessingMime);
      URLConnection uc=urlForGuessingMime.openConnection();
      String guessedContentType=null;
      try {
        guessedContentType=uc.getContentType();
      }
 catch (      StringIndexOutOfBoundsException e) {
        AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath() + ""String_Node_Str"",e);
      }
      if (!TextUtils.isEmpty(guessedContentType) && !guessedContentType.equals(""String_Node_Str"")) {
        mimeType=guessedContentType;
      }
    }
 catch (    MalformedURLException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath() + ""String_Node_Str"",e);
    }
catch (    IOException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath() + ""String_Node_Str"",e);
    }
  }
  if (TextUtils.isEmpty(mimeType)) {
    try {
      DataInputStream inputStream=new DataInputStream(new FileInputStream(mediaFile));
      String mimeTypeFromStream=getMimeTypeOfInputStream(inputStream);
      if (!TextUtils.isEmpty(mimeTypeFromStream)) {
        mimeType=mimeTypeFromStream;
      }
      inputStream.close();
    }
 catch (    FileNotFoundException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath(),e);
    }
catch (    IOException e) {
      AppLog.e(AppLog.T.MEDIA,""String_Node_Str"" + mediaFile.getPath(),e);
    }
  }
  if (TextUtils.isEmpty(mimeType)) {
    mimeType=""String_Node_Str"";
  }
 else {
    if (mimeType.equalsIgnoreCase(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
  }
  return mimeType;
}",0.9974013701866288
134387,"public static boolean isVideo(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase();
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.contains(""String_Node_Str"");
}","public static boolean isVideo(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase(Locale.ROOT);
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.contains(""String_Node_Str"");
}",0.9882352941176472
134388,"public static boolean isDocument(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase();
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}","public static boolean isDocument(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase(Locale.ROOT);
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}",0.9793621013133208
134389,"public static boolean isValidImage(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase();
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}","public static boolean isValidImage(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase(Locale.ROOT);
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}",0.9795158286778398
134390,"public static boolean isAudio(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase();
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}","public static boolean isAudio(String url){
  if (url == null) {
    return false;
  }
  url=url.toLowerCase(Locale.ROOT);
  return url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"")|| url.endsWith(""String_Node_Str"");
}",0.986232790988736
134391,"public static boolean isImageUrl(String url){
  if (TextUtils.isEmpty(url))   return false;
  String cleanedUrl=removeQuery(url.toLowerCase());
  return cleanedUrl.endsWith(""String_Node_Str"") || cleanedUrl.endsWith(""String_Node_Str"") || cleanedUrl.endsWith(""String_Node_Str"")|| cleanedUrl.endsWith(""String_Node_Str"");
}","public static boolean isImageUrl(String url){
  if (TextUtils.isEmpty(url)) {
    return false;
  }
  String cleanedUrl=removeQuery(url.toLowerCase(Locale.ROOT));
  return cleanedUrl.endsWith(""String_Node_Str"") || cleanedUrl.endsWith(""String_Node_Str"") || cleanedUrl.endsWith(""String_Node_Str"")|| cleanedUrl.endsWith(""String_Node_Str"");
}",0.9710806697108066
134392,"public static String removeXmlrpcSuffix(String siteAddress){
  if (siteAddress.toLowerCase().endsWith(""String_Node_Str"")) {
    return siteAddress.substring(0,siteAddress.lastIndexOf(""String_Node_Str""));
  }
 else {
    return siteAddress;
  }
}","public static String removeXmlrpcSuffix(String siteAddress){
  if (siteAddress.toLowerCase(Locale.ROOT).endsWith(""String_Node_Str"")) {
    return siteAddress.substring(0,siteAddress.lastIndexOf(""String_Node_Str""));
  }
 else {
    return siteAddress;
  }
}",0.9780439121756488
134393,"public static boolean isHttps(URI uri){
  if (uri == null)   return false;
  String protocol=uri.getScheme();
  return protocol != null && protocol.equals(""String_Node_Str"");
}","public static boolean isHttps(URI uri){
  if (uri == null) {
    return false;
  }
  String protocol=uri.getScheme();
  return protocol != null && protocol.equals(""String_Node_Str"");
}",0.9777777777777776
134394,"/** 
 * Convert IDN names to punycode if necessary
 */
public static String convertUrlToPunycodeIfNeeded(String url){
  if (!Charset.forName(""String_Node_Str"").newEncoder().canEncode(url)) {
    if (url.toLowerCase().startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(7),IDN.ALLOW_UNASSIGNED);
    }
 else     if (url.toLowerCase().startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(8),IDN.ALLOW_UNASSIGNED);
    }
 else {
      url=IDN.toASCII(url,IDN.ALLOW_UNASSIGNED);
    }
  }
  return url;
}","/** 
 * Convert IDN names to punycode if necessary
 */
public static String convertUrlToPunycodeIfNeeded(String url){
  if (!Charset.forName(""String_Node_Str"").newEncoder().canEncode(url)) {
    if (url.toLowerCase(Locale.ROOT).startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(7),IDN.ALLOW_UNASSIGNED);
    }
 else     if (url.toLowerCase(Locale.ROOT).startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + IDN.toASCII(url.substring(8),IDN.ALLOW_UNASSIGNED);
    }
 else {
      url=IDN.toASCII(url,IDN.ALLOW_UNASSIGNED);
    }
  }
  return url;
}",0.9811643835616438
134395,"/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  File rotatedImageFile;
  FileOutputStream out;
  try {
    String prefix;
    int dotPos=fileName.indexOf('.');
    if (dotPos > 0) {
      prefix=fileName.substring(0,dotPos) + ""String_Node_Str"";
    }
 else {
      prefix=fileName + ""String_Node_Str"";
    }
    if (prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    rotatedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(rotatedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=rotatedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}","/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  File rotatedImageFile;
  FileOutputStream out;
  try {
    String prefix;
    int dotPos=fileName.indexOf('.');
    if (dotPos > 0) {
      prefix=fileName.substring(0,dotPos);
    }
 else {
      prefix=fileName;
    }
    if (prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    rotatedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(rotatedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=rotatedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}",0.9760479041916168
134396,"/** 
 * Used to convert a language code ([lc]_[rc] where lc is language code (en, fr, es, etc...) and rc is region code (zh-CN, zh-HK, zh-TW, etc...) to a displayable string with the languages name. <p/> The input string must be between 2 and 6 characters, inclusive. An empty string is returned if that is not the case. <p/> If the input string is recognized by   {@link Locale} the result of this method is the given
 * @return non-null
 */
public static String getLanguageString(String languagueCode,Locale displayLocale){
  if (languagueCode == null || languagueCode.length() < 2 || languagueCode.length() > 6) {
    return ""String_Node_Str"";
  }
  Locale languageLocale=new Locale(languagueCode.substring(0,2));
  return languageLocale.getDisplayLanguage(displayLocale) + languagueCode.substring(2);
}","/** 
 * Used to convert a language code ([lc]_[rc] where lc is language code (en, fr, es, etc...) and rc is region code (zh-CN, zh-HK, zh-TW, etc...) to a displayable string with the languages name. The input string must be between 2 and 6 characters, inclusive. An empty string is returned if that is not the case. If the input string is recognized by   {@link Locale} the result of this method is the given
 * @return non-null
 */
public static String getLanguageString(String languagueCode,Locale displayLocale){
  if (languagueCode == null || languagueCode.length() < 2 || languagueCode.length() > 6) {
    return ""String_Node_Str"";
  }
  Locale languageLocale=new Locale(languagueCode.substring(0,2));
  return languageLocale.getDisplayLanguage(displayLocale) + languagueCode.substring(2);
}",0.9937578027465668
134397,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134398,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134399,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134400,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134401,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134402,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134403,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134404,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134405,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134406,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134407,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134408,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134409,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134410,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134411,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    if (UrlUtils.isWPComUrl(source)) {
      Map<String,String> params=new ArrayMap<>();
      params.put(""String_Node_Str"",String.valueOf(mMaxSize));
      params.put(""String_Node_Str"",IMAGE_QUALITY);
      source=UrlUtils.appendUrlParameters(UrlUtils.removeQuery(source),params);
    }
 else {
      source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
    }
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9095238095238096
134412,"public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<TextView>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}","public WPImageGetter(TextView view,int maxSize,ImageLoader imageLoader,Drawable loadingDrawable,Drawable failedDrawable){
  mWeakView=new WeakReference<>(view);
  mMaxSize=maxSize;
  mImageLoader=imageLoader;
  mLoadingDrawable=loadingDrawable;
  mFailedDrawable=failedDrawable;
}",0.9859154929577464
134413,"/** 
 * returns true if airplane mode has been enabled
 */
public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}","/** 
 * returns true if airplane mode has been enabled
 */
@TargetApi(VERSION_CODES.JELLY_BEAN_MR1) @SuppressWarnings(""String_Node_Str"") public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}",0.9133333333333332
134414,"/** 
 * returns true if airplane mode has been enabled
 */
public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}","/** 
 * returns true if airplane mode has been enabled
 */
@TargetApi(VERSION_CODES.JELLY_BEAN_MR1) @SuppressWarnings(""String_Node_Str"") public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}",0.9133333333333332
134415,"/** 
 * returns true if airplane mode has been enabled
 */
public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}","/** 
 * returns true if airplane mode has been enabled
 */
@TargetApi(VERSION_CODES.JELLY_BEAN_MR1) @SuppressWarnings(""String_Node_Str"") public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}",0.9133333333333332
134416,"/** 
 * returns true if airplane mode has been enabled
 */
public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}","/** 
 * returns true if airplane mode has been enabled
 */
@TargetApi(VERSION_CODES.JELLY_BEAN_MR1) @SuppressWarnings(""String_Node_Str"") public static boolean isAirplaneModeOn(Context context){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    return Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) != 0;
  }
 else {
    return Settings.Global.getInt(context.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) != 0;
  }
}",0.9133333333333332
134417,"/** 
 * This constructor should present when an instance of the class is going to be got from the given browser window or mobile context.<br/> <br/> The described piece of UI is inside frame (it is actual for browser and mobile hybrid apps). Path to desired frame is specified by  {@link HowToGetByFrames} instance. <br/><br/> There is known root  {@link WebElement} defined {@link By} locatorstrategy
 * @param handle is the given browser window or mobile context
 * @param path is a path to frame which is specified by {@link HowToGetByFrames}
 * @param by It is  {@link By} strategy which is used to get the rootelement
 * @see Application
 * @see IHowToGetHandle
 * @see HowToGetPage
 * @see HowToGetMobileScreen
 * @see Handle
 * @see BrowserWindow
 * @see MobileScreen
 * @see HowToGetByFrames
 * @see By
 */
protected FunctionalPart(S handle){
  super(handle);
  timeOut=handle.driverEncapsulation.getTimeOut();
  long primaryTimeOut=timeOut.getImplicitlyWaitTimeOut();
  TimeUnit primaryTimeUnit=timeOut.getImplicitlyWaitTimeUnit();
  scriptExecutor=getComponent(ScriptExecutor.class);
  ime=getComponent(Ime.class);
  defaultFieldDecorator=new DefaultDecorator(handle,this,primaryTimeOut,primaryTimeUnit);
  load();
}","/** 
 * This constructor should present when an instance of the class is going to be got from the given browser window or mobile context.<br/> <br/> The described piece of UI is inside frame (it is actual for browser and mobile hybrid apps). Path to desired frame is specified by  {@link HowToGetByFrames} instance. <br/><br/> There is known root  {@link WebElement} defined {@link By} locatorstrategy
 * @param handle is the given browser window or mobile context
 * @param path is a path to frame which is specified by {@link HowToGetByFrames}
 * @param by It is  {@link By} strategy which is used to get the rootelement
 * @see Application
 * @see IHowToGetHandle
 * @see HowToGetPage
 * @see HowToGetMobileScreen
 * @see Handle
 * @see BrowserWindow
 * @see MobileScreen
 * @see HowToGetByFrames
 * @see By
 */
protected FunctionalPart(S handle){
  super(handle);
  timeOut=handle.driverEncapsulation.getTimeOut();
  long primaryTimeOut=timeOut.getImplicitlyWaitTimeOut();
  TimeUnit primaryTimeUnit=timeOut.getImplicitlyWaitTimeUnit();
  scriptExecutor=getComponent(ScriptExecutor.class);
  ime=getComponent(Ime.class);
  defaultFieldDecorator=new DefaultDecorator(handle.getSearchContext(),this,primaryTimeOut,primaryTimeUnit);
  load();
}",0.9923108053419668
134418,"/** 
 * Instantiates declared   {@link WebElement} fields using {@link PageFactory}and customized   {@link ElementLocatorFactory}
 * @param factoryis an instance of the customized  {@link ElementLocatorFactory}
 */
protected void load(ElementLocatorFactory factory){
  PageFactory.initElements(factory,this);
}","/** 
 * Instantiates declared   {@link WebElement} fields using {@link PageFactory}and customized   {@link ElementLocatorFactory}
 * @param factoryis an instance of the customized  {@link ElementLocatorFactory}
 */
protected void load(ElementLocatorFactory factory){
  PageFactory.initElements(factory,this);
  load();
}",0.9809523809523808
134419,"@Override public List<WebElement> findElements(By by){
  return driverEncapsulation.getWrappedDriver().findElements(returnBy(by));
}","@Override public List<WebElement> findElements(By by){
  return getSearchContext().findElements(by);
}",0.7777777777777778
134420,"@Override public WebElement findElement(By by){
  return driverEncapsulation.getWrappedDriver().findElement(returnBy(by));
}","@Override public WebElement findElement(By by){
  return getSearchContext().findElement(by);
}",0.7614678899082569
134421,"@Override public Object intercept(Object obj,Method method,Object[] args,MethodProxy proxy) throws Throwable {
  instantiateHandle();
  Class<?> declaringClass=method.getDeclaringClass();
  if (handle != null && !declaringClass.equals(Object.class)) {
    if (!declaringClass.equals(IDestroyable.class) && !declaringClass.equals(ISwitchesToItself.class)) {
      handle.switchToMe();
    }
    if (!declaringClass.equals(Object.class))     return method.invoke(handle,args);
  }
  return super.intercept(obj,method,args,proxy);
}","@Override public Object intercept(Object obj,Method method,Object[] args,MethodProxy proxy) throws Throwable {
  Class<?> declaringClass=method.getDeclaringClass();
  if (!classesThatDontRequireFocusOnTheHandle.contains(declaringClass)) {
    instantiateHandle();
  }
  if (handle != null && !classesThatDontRequireFocusOnTheHandle.contains(declaringClass) && !declaringClass.equals(ISwitchesToItself.class) && !declaringClass.equals(IDestroyable.class))   handle.switchToMe();
  if (!declaringClass.equals(Object.class) && handle != null)   return method.invoke(handle,args);
  return super.intercept(obj,method,args,proxy);
}",0.698961937716263
134422,"@Override public Object invoke(Object o,Method m,Object[] args) throws Throwable {
  Class<?> declaredBy=m.getDeclaringClass();
  if (declaredBy.equals(WrapsDriver.class))   return handle.driverEncapsulation.getWrappedDriver();
  if (declaredBy.equals(HasCapabilities.class))   return ((HasCapabilities)handle.driverEncapsulation.getWrappedDriver()).getCapabilities();
  if (declaredBy.equals(WebDriver.class) || declaredBy.equals(WebElement.class) || declaredBy.equals(WrapsElement.class)|| declaredBy.equals(SearchContext.class))   handle.switchToMe();
  Object webDriverOrElement=null;
  if (declaredBy.equals(WebDriver.class))   webDriverOrElement=handle.driverEncapsulation.getWrappedDriver();
  if (declaredBy.equals(WrapsElement.class))   return handle.driverEncapsulation.getWrappedDriver().findElement(handle.by);
  if (declaredBy.equals(WebElement.class))   webDriverOrElement=handle.driverEncapsulation.getWrappedDriver().findElement(handle.by);
  if (declaredBy.equals(SearchContext.class))   return m.invoke(handle.driverEncapsulation.getWrappedDriver(),new Object[]{handle.returnBy((By)args[0])});
  if (webDriverOrElement != null)   return m.invoke(webDriverOrElement,args);
  return m.invoke(o,args);
}","@Override public Object invoke(Object o,Method m,Object[] args) throws Throwable {
  Class<?> declaredBy=m.getDeclaringClass();
  WebDriver driver=handle.driverEncapsulation.getWrappedDriver();
  if (declaredBy.equals(WrapsDriver.class))   return driver;
  if (declaredBy.equals(HasCapabilities.class))   return ((HasCapabilities)driver).getCapabilities();
  if (classesThatRequireFocusOnTheHandle.contains(declaredBy))   handle.switchToMe();
  Object webDriverOrElement=null;
  if (declaredBy.equals(WebDriver.class))   webDriverOrElement=driver;
  if (declaredBy.equals(WrapsElement.class))   return driver.findElement(handle.by);
  if (declaredBy.equals(WebElement.class))   webDriverOrElement=driver.findElement(handle.by);
  if (declaredBy.equals(SearchContext.class))   return m.invoke(driver,new Object[]{handle.returnBy((By)args[0])});
  if (webDriverOrElement != null)   return m.invoke(webDriverOrElement,args);
  return m.invoke(o,args);
}",0.4215867158671587
134423,"private IDecomposable returnPart(Class<? extends IDecomposable> target){
  Object[] args=null;
  if (isInvokerApp) {
    args=clearArgs(new Object[]{target,howToGetHandlestrategy,howToGetByFrames,timeOutLong});
  }
 else {
    args=clearArgs(new Object[]{target,howToGetByFrames});
  }
  Method method=ExecutableUtil.getRelevantMethod(invoker.getClass(),DecompositionUtil.GET_PART,args);
  try {
    return (IDecomposable)method.invoke(invoker,args);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private IDecomposable returnPart(Class<? extends IDecomposable> target){
  Object[] args=null;
  if (isInvokerApp) {
    args=clearArgs(new Object[]{target,howToGetHandlestrategy,timeOutLong});
  }
 else {
    args=clearArgs(new Object[]{target});
  }
  Method method=ExecutableUtil.getRelevantMethod(invoker.getClass(),DecompositionUtil.GET_PART,args);
  try {
    return (IDecomposable)method.invoke(invoker,args);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9662027833001988
134424,"private List<IDecomposable> buildList(){
  ArrayList<IDecomposable> result=new ArrayList<>();
  if (by == null) {
    IDecomposable element=returnPart(required);
    result.add(element);
    return result;
  }
  FunctionalPart<?> mediator=(FunctionalPart<?>)returnPart(FunctionalPart.class);
  int totalElements=mediator.getHandle().findElements(by).size();
  IDecomposable target=invoker;
  if (isInvokerApp)   target=mediator;
  for (int i=0; i < totalElements; i++)   result.add(target.getPart(required,howToGetByFrames,new ByNumbered(by,i)));
  return result;
}","private List<IDecomposable> buildList(){
  ArrayList<IDecomposable> result=new ArrayList<>();
  FunctionalPart<?> mediator=null;
  mediator=(FunctionalPart<?>)returnPart(FunctionalPart.class);
  int totalElements=1;
  if (by != null) {
    try {
      totalElements=mediator.getHandle().findElements(by).size();
    }
 catch (    NoSuchWindowException|NoSuchContextException e) {
      return result;
    }
  }
  IDecomposable target=invoker;
  if (isInvokerApp)   target=mediator;
  if (by == null)   result.add(target.getPart(required,howToGetByFrames));
 else   for (int i=0; i < totalElements; i++)   result.add(target.getPart(required,howToGetByFrames,new ByNumbered(by,i)));
  return result;
}",0.7104430379746836
134425,"private <T extends IDecomposable>T get(Class<T> partClass,Handle handle){
  T part=DecompositionUtil.get(partClass,new Object[]{handle});
  ((FunctionalPart<?>)part).application=this;
  addChild((ModelObject<?>)part);
  return part;
}","private <T extends IDecomposable>T get(Class<T> partClass,Handle handle){
  T part=DecompositionUtil.get(partClass,new Object[]{handle});
  ((FunctionalPart<?>)part).application=this;
  this.addChild((ModelObject<?>)part);
  DecompositionUtil.populateFieldsWhichAreDecomposable((ModelObject<?>)part);
  return part;
}",0.838475499092559
134426,"private List<IDecomposable> buildList(){
  ArrayList<IDecomposable> result=new ArrayList<>();
  if (by == null) {
    IDecomposable element=returnPart(required);
    result.add(element);
    return result;
  }
  FunctionalPart<?> intermediate=(FunctionalPart<?>)returnPart(FunctionalPart.class);
  int totalElements=intermediate.getHandle().findElements(by).size();
  for (int i=0; i < totalElements; i++) {
    if (isInvokerApp) {
      result.add(DecompositionUtil.get(required,new Object[]{intermediate.getHandle(),howToGetByFrames,new ByNumbered(by,i)}));
    }
 else {
      result.add(DecompositionUtil.get(required,new Object[]{invoker,howToGetByFrames,new ByNumbered(by,i)}));
    }
  }
  return result;
}","private List<IDecomposable> buildList(){
  ArrayList<IDecomposable> result=new ArrayList<>();
  if (by == null) {
    IDecomposable element=returnPart(required);
    result.add(element);
    return result;
  }
  FunctionalPart<?> mediator=(FunctionalPart<?>)returnPart(FunctionalPart.class);
  int totalElements=mediator.getHandle().findElements(by).size();
  IDecomposable target=invoker;
  if (isInvokerApp)   target=mediator;
  for (int i=0; i < totalElements; i++)   result.add(target.getPart(required,howToGetByFrames,new ByNumbered(by,i)));
  return result;
}",0.6776212832550861
134427,"/** 
 * Creation of any decomposable part of application
 */
static <T extends IDecomposable>T get(Class<T> partClass,Object[] paramValues){
  try {
    Constructor<?> c=ExecutableUtil.getRelevantConstructor(partClass,paramValues);
    if (c == null) {
      throw new RuntimeException(new NoSuchMethodException(""String_Node_Str"" + Arrays.asList(paramValues).toString() + ""String_Node_Str""+ partClass.getName()));
    }
    T decomposable=EnhancedProxyFactory.getProxy(partClass,c.getParameterTypes(),paramValues,new InteractiveInterceptor(){
    }
);
    DecompositionUtil.populateFieldsWhichAreDecomposable((ModelObject<?>)decomposable);
    return decomposable;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Creation of any decomposable part of application
 */
static <T extends IDecomposable>T get(Class<T> partClass,Object[] paramValues){
  try {
    Constructor<?> c=ExecutableUtil.getRelevantConstructor(partClass,paramValues);
    if (c == null) {
      throw new RuntimeException(new NoSuchMethodException(""String_Node_Str"" + Arrays.asList(paramValues).toString() + ""String_Node_Str""+ partClass.getName()));
    }
    T decomposable=EnhancedProxyFactory.getProxy(partClass,c.getParameterTypes(),paramValues,new InteractiveInterceptor(){
    }
);
    return decomposable;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.8217391304347826
134428,"private <T extends IDecomposable>T get(Class<T> partClass,Handle h){
  T result=DecompositionUtil.get(partClass,new Object[]{h});
  return result;
}","private <T extends IDecomposable>T get(Class<T> partClass,Handle h){
  T result=DecompositionUtil.get(partClass,new Object[]{h});
  addChild((ModelObject<?>)result);
  DecompositionUtil.populateFieldsWhichAreDecomposable((ModelObject<?>)result);
  return result;
}",0.7184466019417476
134429,"/** 
 * Sets focus on window/mobile context by string  parameter
 * @param String window handle/context name
 */
synchronized void switchTo(String handle){
  if (handle.equals(currentHandle))   changeActive(handle);
}","/** 
 * Sets focus on window/mobile context by string  parameter
 * @param String window handle/context name
 */
synchronized void switchTo(String handle){
  if (!handle.equals(currentHandle))   changeActive(handle);
}",0.9977011494252872
134430,"@Override public Object invoke(Object o,Method m,Object[] args) throws Throwable {
  WebDriver driver=handle.driverEncapsulation.getWrappedDriver();
  if (MethodInheritanceUtil.isOverriddenFrom(m,WrapsDriver.class))   return driver;
  if (MethodInheritanceUtil.isOverriddenFrom(m,HasCapabilities.class))   return ((HasCapabilities)driver).getCapabilities();
  if (MethodInheritanceUtil.isOverriddenFromAny(m,classesThatRequireFocusOnTheHandle))   handle.switchToMe();
  Object webDriverOrElement=null;
  if (MethodInheritanceUtil.isOverriddenFrom(m,WebDriver.class))   webDriverOrElement=driver;
  if (MethodInheritanceUtil.isOverriddenFrom(m,WebElement.class))   webDriverOrElement=driver.findElement(handle.by);
  if (MethodInheritanceUtil.isOverriddenFrom(m,SearchContext.class)) {
    if (o instanceof WebDriver)     return m.invoke(driver,new Object[]{(By)args[0]});
    return m.invoke(driver.findElement(handle.by),new Object[]{(By)args[0]});
  }
  if (webDriverOrElement != null)   return m.invoke(webDriverOrElement,args);
  return m.invoke(o,args);
}","@Override public Object invoke(final Object o,final Method m,Object[] args) throws Throwable {
  final WebDriver driver=handle.driverEncapsulation.getWrappedDriver();
  if (MethodInheritanceUtil.isOverriddenFrom(m,WrapsDriver.class))   return driver;
  if (MethodInheritanceUtil.isOverriddenFrom(m,HasCapabilities.class))   return ((HasCapabilities)driver).getCapabilities();
  if (MethodInheritanceUtil.isOverriddenFromAny(m,classesThatRequireFocusOnTheHandle))   handle.switchToMe();
  if (MethodInheritanceUtil.isOverriddenFrom(m,WebElement.class)) {
    final List<WebElement> elements=new ArrayList<>();
    changeTimeOutAndRun(new Runnable(){
      @Override public void run(){
        elements.addAll(driver.findElements(handle.by));
      }
    }
);
    if (elements.size() == 0)     throw new NoSuchElementException(""String_Node_Str"" + handle.by.toString());
    return m.invoke(elements.get(0),args);
  }
  if (MethodInheritanceUtil.isOverriddenFrom(m,SearchContext.class)) {
    final List<Object> result=new ArrayList<>();
    changeTimeOutAndRun(new Runnable(){
      @Override public void run(){
        try {
          if (o instanceof WebDriver)           result.add(m.invoke(driver,new Object[]{(By)args[0]}));
          if (o instanceof WebElement)           result.add(m.invoke(driver.findElement(handle.by),new Object[]{(By)args[0]}));
        }
 catch (        InvocationTargetException|IllegalAccessException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    return result.get(0);
  }
  if (MethodInheritanceUtil.isOverriddenFrom(m,WebDriver.class))   return m.invoke(driver,args);
  return m.invoke(o,args);
}",0.6083118793674145
134431,"/** 
 * is handle known as instance of   {@link IHasHandle} 
 */
IHasHandle isInstantiated(String handle){
  return handleObjects.get(handle);
}","/** 
 * is handle known as instance of   {@link IHasHandle} 
 */
boolean isInstantiated(String handle){
  return handleObjects.contains(handle);
}",0.9241379310344828
134432,"/** 
 * adds a new handle that is instantiated as   {@link IHasHandle} object 
 */
void addKnown(IHasHandle handleObject){
  handleObjects.put(handleObject.getHandle(),handleObject);
}","/** 
 * adds a new handle that is instantiated as   {@link IHasHandle} object 
 */
void addKnown(IHasHandle handleObject){
  if (!handleObjects.contains(handleObject.getHandle()))   handleObjects.add(handleObject.getHandle());
  List<IHasHandle> value=instantiatedHandles.get(handleObject.getHandle());
  if (value == null) {
    value=new ArrayList<>();
  }
  value.add(handleObject);
  instantiatedHandles.put(handleObject.getHandle(),value);
}",0.5079365079365079
134433,"/** 
 * gets   {@link IHasHandle} objects 
 */
List<IHasHandle> getInstantiated(){
  return new ArrayList<>(handleObjects.values());
}","public List<IHasHandle> getInstantiated(){
  final List<IHasHandle> result=new ArrayList<>();
  handleObjects.forEach(handle -> {
    result.addAll(instantiatedHandles.get(handle));
  }
);
  return result;
}",0.4164222873900293
134434,"/** 
 * removes handle that is instantiated as   {@link IHasHandle} object 
 */
void remove(IHasHandle handle){
  handleObjects.remove(handle.getHandle());
}","/** 
 * removes handle that is instantiated as   {@link IHasHandle} object 
 */
void remove(IHasHandle handle){
  String stringHandle=handle.getHandle();
  List<IHasHandle> result=instantiatedHandles.get(stringHandle);
  if (result != null)   result.remove(handle);
  if (result == null || result.size() == 0) {
    handleObjects.remove(stringHandle);
    instantiatedHandles.remove(stringHandle);
  }
}",0.4964285714285714
134435,"/** 
 * Gets a new created listenable   {@link Handle} and notifies listenerthat there it is a new object
 * @param handle instantiated {@link Handle}
 * @param beanName Is a name of the {@link Bean}
 * @return listenable {@link Handle} instance
 */
@SuppressWarnings(""String_Node_Str"") <T extends Handle>T returnNewCreatedListenableHandle(Handle handle,String beanName){
  T result=(T)driverEncapsulation.context.getBean(beanName,handle);
  result.whenIsCreated();
  getHandleReceptionist().addKnown(result);
  return result;
}","/** 
 * Gets a new created listenable   {@link Handle} and notifies listenerthat there it is a new object
 * @param handle instantiated {@link Handle}
 * @param beanName Is a name of the {@link Bean}
 * @return listenable {@link Handle} instance
 */
@SuppressWarnings(""String_Node_Str"") <T extends Handle>T returnNewCreatedListenableHandle(Handle handle,String beanName){
  T result=(T)driverEncapsulation.context.getBean(beanName,handle);
  if (!getHandleReceptionist().isInstantiated(handle.getHandle()))   handle.whenIsCreated();
  getHandleReceptionist().addKnown(handle);
  return result;
}",0.918967052537845
134436,"private void prelaunch(){
  DesiredCapabilities dc=new DesiredCapabilities();
  dc.merge(supportedDriver.getDefaultCapabilities());
  Arrays.asList(paramValues).forEach(param -> {
    if (Capabilities.class.isAssignableFrom(param.getClass()))     dc.merge((Capabilities)param);
  }
);
  supportedDriver.launchRemoteServerLocallyIfWasDefined();
  if (config == null) {
    supportedDriver.setSystemProperty(Configuration.byDefault,dc);
    return;
  }
  supportedDriver.setSystemProperty(config,dc);
}","private void prelaunch(){
  DesiredCapabilities dc=new DesiredCapabilities();
  dc.merge(supportedDriver.getDefaultCapabilities());
  Arrays.asList(paramValues).forEach(param -> {
    if (param == null)     return;
    if (Capabilities.class.isAssignableFrom(param.getClass()))     dc.merge((Capabilities)param);
  }
);
  supportedDriver.launchRemoteServerLocallyIfWasDefined();
  if (config == null) {
    supportedDriver.setSystemProperty(Configuration.byDefault,dc);
    return;
  }
  supportedDriver.setSystemProperty(config,dc);
}",0.966183574879227
134437,"/** 
 * Allows to instantiate the selected   {@link WebDriver} by given parameters.These parameters should correspond existing  {@link WebDriver} constructors
 * @param supporteddriver the selected {@link WebDriver} representation
 * @param values they are used to launch {@link WebDriver}
 */
public WebDriverEncapsulation(ESupportedDrivers supporteddriver,Object... values){
  try {
    Class<? extends WebDriver> driverClass=supporteddriver.getUsingWebDriverClass();
    Constructor<?> c=ExecutableUtil.getRelevantConstructor(driverClass,values);
    if (c == null) {
      throw new NoSuchMethodException(driverClass.getName() + ""String_Node_Str"" + ""String_Node_Str""+ Arrays.asList(values).toString());
    }
    enclosedDriver=(RemoteWebDriver)context.getBean(MainBeanConfiguration.WEBDRIVER_BEAN,context,this,destroyableObjects,driverClass,c.getParameterTypes(),values);
    Log.message(""String_Node_Str"" + driverClass.getSimpleName());
    timeOut=getComponent(TimeOut.class);
    resetAccordingTo(configuration);
    this.instantiatedESupportedDriver=supporteddriver;
  }
 catch (  Exception e) {
    Log.error(""String_Node_Str"" + e.getMessage(),e);
    destroy();
    throw new RuntimeException(e);
  }
}","/** 
 * Allows to instantiate the selected   {@link WebDriver} by given parameters.These parameters should correspond existing  {@link WebDriver} constructors
 * @param supporteddriver the selected {@link WebDriver} representation
 * @param values they are used to launch {@link WebDriver}
 */
public WebDriverEncapsulation(ESupportedDrivers supporteddriver,Object... values){
  try {
    Class<? extends WebDriver> driverClass=supporteddriver.getUsingWebDriverClass();
    enclosedDriver=(RemoteWebDriver)context.getBean(MainBeanConfiguration.WEBDRIVER_BEAN,context,this,destroyableObjects,driverClass,values);
    Log.message(""String_Node_Str"" + driverClass.getSimpleName());
    timeOut=getComponent(TimeOut.class);
    resetAccordingTo(configuration);
    this.instantiatedESupportedDriver=supporteddriver;
  }
 catch (  Exception e) {
    Log.error(""String_Node_Str"" + e.getMessage(),e);
    destroy();
    throw new RuntimeException(e);
  }
}",0.8773715872281351
134438,"/** 
 * Creates   {@link WebDriver} instance and makes it listenable.
 * @param context instantiated {@link AbstractApplicationContext} which is used by  {@link AspectWebDriverEventListener}
 * @param configurationWrapper something that wraps {@link Configuration}{@link AspectWebDriverEventListener} needs it
 * @param destroyable Something that implements {@link IDestroyable}
 * @param required Class of {@link WebDriver} implementor
 * @param paramClasses  Are constructor parameters
 * @param paramValues Are constructor parameter values
 * @return A listenable {@link WebDriver} instance
 */
@SuppressWarnings(""String_Node_Str"") @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) @Bean(name=WEBDRIVER_BEAN) public <T extends WebDriver>T getWebdriver(AbstractApplicationContext context,IConfigurationWrapper configurationWrapper,IDestroyable destroyable,Class<T> required,Class<?>[] paramClasses,Object[] paramValues){
  try {
    Constructor<?> c=required.getConstructor(paramClasses);
    T result=(T)c.newInstance(paramValues);
    return (T)populate(context,configurationWrapper,destroyable,result);
  }
 catch (  NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Creates   {@link WebDriver} instance and makes it listenable.
 * @param context instantiated {@link AbstractApplicationContext} which is used by  {@link AspectWebDriverEventListener}
 * @param configurationWrapper something that wraps {@link Configuration}{@link AspectWebDriverEventListener} needs it
 * @param destroyable Something that implements {@link IDestroyable}
 * @param required Class of {@link WebDriver} implementor
 * @param paramClasses  Are constructor parameters
 * @param paramValues Are constructor parameter values
 * @return A listenable {@link WebDriver} instance
 */
@SuppressWarnings(""String_Node_Str"") @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) @Bean(name=WEBDRIVER_BEAN) public <T extends WebDriver>T getWebdriver(AbstractApplicationContext context,IConfigurationWrapper configurationWrapper,IDestroyable destroyable,Class<T> required,Object[] paramValues){
  try {
    Constructor<?> c=ExecutableUtil.getRelevantConstructor(required,paramValues);
    if (c == null) {
      throw new NoSuchMethodException(required.getName() + ""String_Node_Str"" + ""String_Node_Str""+ Arrays.asList(paramValues).toString());
    }
    T result=(T)c.newInstance(paramValues);
    return (T)populate(context,configurationWrapper,destroyable,result);
  }
 catch (  NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}",0.8780136739834473
134439,"/** 
 * This method is used by   {@link IDecomposable} method substitution mechanismIt takes into account situations when window/context should be found by some condition  
 * @param supportedDriver it is description of the supported {@link WebDriver} implementor
 * @param method Originally invoked method. It should be one of {@link IDecomposable} methods
 * @param args explicitly given arguments
 * @param annotatedElement is a {@link Field},   {@link Method} or {@link Class} which is supposed to be marked by  {@link Frame} and {@link RootElement}/  {@link RootAndroidElement}/  {@link RootIOSElement}
 * @return A new argument array
 * @throws Throwable
 */
static Object[] getRelevantArgs2(ESupportedDrivers supportedDriver,Method method,Object[] args,AnnotatedElement annotatedElement){
  IHowToGetHandle how=MethodReadingUtil.getDefinedParameter(method,IHowToGetHandle.class,args);
  if (how == null) {
    HowToGetMobileScreen howGetMobileScreen=null;
    HowToGetPage howToGetPage=getHowToGetHandleStrategy(DefaultPageIndex.class,ExpectedURL.class,ExpectedPageTitle.class,annotatedElement,HowToGetPage.class);
    if (supportedDriver.isForBrowser()) {
      how=howToGetPage;
    }
 else {
      howGetMobileScreen=getHowToGetHandleStrategy(DefaultContextIndex.class,ExpectedAndroidActivity.class,ExpectedContext.class,annotatedElement,HowToGetMobileScreen.class);
      howGetMobileScreen.defineHowToGetPageStrategy(howToGetPage);
      how=howGetMobileScreen;
    }
  }
  Integer index=MethodReadingUtil.getDefinedParameter(method,int.class,args);
  if (how != null && index != null) {
    how.setExpected(index.intValue());
  }
  Long timeOutLong=MethodReadingUtil.getDefinedParameter(method,long.class,args);
  if (timeOutLong == null)   timeOutLong=getTimeOut(annotatedElement);
  HowToGetByFrames howTo=MethodReadingUtil.getDefinedParameter(method,HowToGetByFrames.class,args);
  if (howTo == null)   howTo=getHowToGetByFramesStrategy(annotatedElement);
  By rootBy=MethodReadingUtil.getDefinedParameter(method,By.class,args);
  if (rootBy == null) {
    IRootElementReader rootElementReader=getRootElementReader(supportedDriver);
    rootBy=rootElementReader.readClassAndGetBy(annotatedElement,supportedDriver.getUsingWebDriverClass());
  }
  Object[] newArgs=new Object[]{extractTargetFromGetPart(method,args)};
  if (how != null) {
    newArgs=ArrayUtils.add(newArgs,how);
  }
 else   if (index != null) {
    newArgs=ArrayUtils.add(newArgs,index.intValue());
  }
  if (howTo != null) {
    newArgs=ArrayUtils.add(newArgs,howTo);
  }
  if (rootBy != null) {
    newArgs=ArrayUtils.add(newArgs,rootBy);
  }
  if (timeOutLong != null) {
    newArgs=ArrayUtils.add(newArgs,timeOutLong.longValue());
  }
  return newArgs;
}","/** 
 * This method is used by   {@link IDecomposable} method substitution mechanismIt takes into account situations when window/context should be found by some condition  
 * @param supportedDriver it is description of the supported {@link WebDriver} implementor
 * @param method Originally invoked method. It should be one of {@link IDecomposable} methods
 * @param args explicitly given arguments
 * @param annotatedElement is a {@link Field},   {@link Method} or {@link Class} which is supposed to be marked by  {@link Frame} and {@link RootElement}/  {@link RootAndroidElement}/  {@link RootIOSElement}
 * @return A new argument array
 * @throws Throwable
 */
static Object[] getRelevantArgs2(ESupportedDrivers supportedDriver,Method method,Object[] args,AnnotatedElement annotatedElement){
  IHowToGetHandle how=MethodReadingUtil.getDefinedParameter(method,IHowToGetHandle.class,args);
  if (how == null) {
    HowToGetMobileScreen howToGetMobileScreen=null;
    HowToGetPage howToGetPage=getHowToGetHandleStrategy(DefaultPageIndex.class,ExpectedURL.class,ExpectedPageTitle.class,annotatedElement,HowToGetPage.class);
    if (supportedDriver.isForBrowser()) {
      how=howToGetPage;
    }
 else {
      howToGetMobileScreen=getHowToGetHandleStrategy(DefaultContextIndex.class,ExpectedAndroidActivity.class,ExpectedContext.class,annotatedElement,HowToGetMobileScreen.class);
      if (howToGetMobileScreen != null)       howToGetMobileScreen.defineHowToGetPageStrategy(howToGetPage);
      how=howToGetMobileScreen;
    }
  }
  Integer index=MethodReadingUtil.getDefinedParameter(method,int.class,args);
  if (how != null && index != null) {
    how.setExpected(index.intValue());
  }
  Long timeOutLong=MethodReadingUtil.getDefinedParameter(method,long.class,args);
  if (timeOutLong == null)   timeOutLong=getTimeOut(annotatedElement);
  HowToGetByFrames howTo=MethodReadingUtil.getDefinedParameter(method,HowToGetByFrames.class,args);
  if (howTo == null)   howTo=getHowToGetByFramesStrategy(annotatedElement);
  By rootBy=MethodReadingUtil.getDefinedParameter(method,By.class,args);
  if (rootBy == null) {
    IRootElementReader rootElementReader=getRootElementReader(supportedDriver);
    rootBy=rootElementReader.readClassAndGetBy(annotatedElement,supportedDriver.getUsingWebDriverClass());
  }
  Object[] newArgs=new Object[]{extractTargetFromGetPart(method,args)};
  if (how != null) {
    newArgs=ArrayUtils.add(newArgs,how);
  }
 else   if (index != null) {
    newArgs=ArrayUtils.add(newArgs,index.intValue());
  }
  if (howTo != null) {
    newArgs=ArrayUtils.add(newArgs,howTo);
  }
  if (rootBy != null) {
    newArgs=ArrayUtils.add(newArgs,rootBy);
  }
  if (timeOutLong != null) {
    newArgs=ArrayUtils.add(newArgs,timeOutLong.longValue());
  }
  return newArgs;
}",0.9902315484804632
134440,"private static By getChainedBy(FunctionalPart<?> parent,HowToGetByFrames path,By by){
  if (by == null) {
    return null;
  }
  if (path.getFramePath().size() > 0) {
    return by;
  }
  if (parent.rootElement == null) {
    return by;
  }
  LinkedList<By> previuosChain=new LinkedList<>();
  previuosChain.addFirst(by);
  FunctionalPart<?> previousParent=parent.parent;
  while (previousParent != null) {
    if (previousParent.pathStrategy.getFramePath().size() > 0)     break;
    if (previousParent.rootElement == null)     break;
    previuosChain.addFirst(parent.rootElement.getTheGivenByStrategy());
    previousParent=previousParent.parent;
  }
  return new ByChained(previuosChain.toArray(new By[]{}));
}","private static By getChainedBy(FunctionalPart<?> parent,HowToGetByFrames path,By by){
  if (path.getFramePath().size() > 0) {
    return by;
  }
  if (parent.rootElement == null) {
    return by;
  }
  LinkedList<By> previuosChain=new LinkedList<>();
  previuosChain.addFirst(by);
  FunctionalPart<?> previousParent=parent.parent;
  while (previousParent != null) {
    if (previousParent.pathStrategy.getFramePath().size() > 0)     break;
    if (previousParent.rootElement == null)     break;
    previuosChain.addFirst(parent.rootElement.getTheGivenByStrategy());
    previousParent=previousParent.parent;
  }
  if (previuosChain.size() == 0) {
    return by;
  }
  if (by != null) {
    previuosChain.addLast(by);
  }
  return new ByChained(previuosChain.toArray(new By[]{}));
}",0.8997326203208557
134441,"private Function<By,WebElement> getWaitForTheRootElementFunction(){
  WebDriver driver=functionalPart.getWrappedDriver();
  return input -> {
    try {
      return driver.findElement(by);
    }
 catch (    StaleElementReferenceException|NoSuchElementException ignored) {
      return null;
    }
  }
;
}","private Function<By,WebElement> getWaitForTheRootElementFunction(){
  return input -> {
    try {
      return functionalPart.getWrappedDriver().findElement(by);
    }
 catch (    StaleElementReferenceException|NoSuchElementException ignored) {
      return null;
    }
  }
;
}",0.8123924268502581
134442,"@Override public WebElement getWrappedElement(){
  return EnhancedProxyFactory.getProxy(RemoteWebElement.class,new Class[]{},new Object[]{},getRotElementMethodInterceptor());
}","@Override public WebElement getWrappedElement(){
  functionalPart.switchToMe();
  return EnhancedProxyFactory.getProxy(RemoteWebElement.class,new Class[]{},new Object[]{},getRotElementMethodInterceptor());
}",0.9190600522193212
134443,"private MethodInterceptor getRotElementMethodInterceptor(){
  WebDriver driver=functionalPart.getWrappedDriver();
  functionalPart.switchToMe();
  return (obj,method,args,proxy) -> {
    driver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);
    WebElement root=null;
    try {
      FluentWait<By> wait=new FluentWait<By>(by);
      wait.withTimeout(timeValue,timeUnit);
      root=wait.until(getWaitForTheRootElementFunction());
    }
 catch (    TimeoutException e) {
      throw new NoSuchElementException(""String_Node_Str"" + by.toString(),e);
    }
 finally {
      driver.manage().timeouts().implicitlyWait(timeValue,timeUnit);
    }
    return method.invoke(root,args);
  }
;
}","private MethodInterceptor getRotElementMethodInterceptor(){
  return (obj,method,args,proxy) -> {
    Timeouts t=functionalPart.getWrappedDriver().manage().timeouts();
    t.implicitlyWait(0,TimeUnit.SECONDS);
    WebElement root=null;
    try {
      FluentWait<By> wait=new FluentWait<By>(by);
      wait.withTimeout(timeValue,timeUnit);
      wait.pollingEvery(POLLING_EVERY,TimeUnit.MILLISECONDS);
      root=wait.until(getWaitForTheRootElementFunction());
    }
 catch (    TimeoutException e) {
      throw new NoSuchElementException(""String_Node_Str"" + by.toString(),e);
    }
 finally {
      t.implicitlyWait(timeValue,timeUnit);
    }
    return method.invoke(root,args);
  }
;
}",0.6850108616944244
134444,"/** 
 * This is the general constructor.
 * @param handle is the given browser window or mobile context which currently present
 */
protected ModelObject(S handle){
  this.handle=handle;
  driverEncapsulation=handle.driverEncapsulation;
  awaiting=new Awaiting(getWrappedDriver());
  logs=driverEncapsulation.getComponent(DriverLogs.class);
  IDefaultAnnotationReader idar=new IDefaultAnnotationReader(){
  }
;
  UsedImplicitExceptionHandlers[] annotations=idar.getAnnotations(UsedImplicitExceptionHandlers.class,this.getClass());
  if (annotations.length != 0) {
    UsedImplicitExceptionHandlers ueh=annotations[0];
    List<Class<? extends ModelObjectExceptionHandler>> throwableHandlers=Arrays.asList(ueh.areUsed());
    throwableHandlers.forEach((handler) -> {
      try {
        checkInExceptionHandler(handler.newInstance());
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
);
  }
}","/** 
 * This is the general constructor.
 * @param handle is the given browser window or mobile context which currently present
 */
protected ModelObject(S handle){
  this.handle=handle;
  driverEncapsulation=handle.driverEncapsulation;
  awaiting=new Awaiting(driverEncapsulation.getWrappedDriver());
  logs=driverEncapsulation.getComponent(DriverLogs.class);
  IDefaultAnnotationReader idar=new IDefaultAnnotationReader(){
  }
;
  UsedImplicitExceptionHandlers[] annotations=idar.getAnnotations(UsedImplicitExceptionHandlers.class,this.getClass());
  if (annotations.length != 0) {
    UsedImplicitExceptionHandlers ueh=annotations[0];
    List<Class<? extends ModelObjectExceptionHandler>> throwableHandlers=Arrays.asList(ueh.areUsed());
    throwableHandlers.forEach((handler) -> {
      try {
        checkInExceptionHandler(handler.newInstance());
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
);
  }
}",0.989384288747346
134445,"/** 
 * This constructor should present when an instance of the class is going to be got from the given browser window or mobile context.<br/> <br/> The described piece of UI is inside frame (it is actual for browser and mobile hybrid apps). Path to desired frame is specified by  {@link HowToGetByFrames} instance. <br/><br/> There is known root  {@link WebElement} defined {@link By} locatorstrategy
 * @param handle is the given browser window or mobile context
 * @param path is a path to frame which is specified by {@link HowToGetByFrames}
 * @param by It is  {@link By} strategy which is used to get the rootelement
 * @see Application
 * @see IHowToGetHandle
 * @see HowToGetBrowserWindow
 * @see HowToGetMobileScreen
 * @see Handle
 * @see BrowserWindow
 * @see MobileScreen
 * @see HowToGetByFrames
 * @see By
 */
protected FunctionalPart(S handle,HowToGetByFrames path,By by){
  super(handle);
  this.pathStrategy=path;
  timeOut=getWebDriverEncapsulation().getTimeOut();
  long primaryTimeOut=timeOut.getImplicitlyWaitTimeOut();
  TimeUnit primaryTimeUnit=timeOut.getImplicitlyWaitTimeUnit();
  this.rootElement=new RootElement(this);
  this.rootElement.changeByStrategy(by);
  this.rootElement.setTimeValue(primaryTimeOut);
  this.rootElement.setTimeUnit(primaryTimeUnit);
  defaultFieldDecorator=new AppiumFieldDecorator(getCurrentSearcContext(),primaryTimeOut,primaryTimeUnit);
  ime=getComponent(Ime.class);
  scriptExecutor=getComponent(ScriptExecutor.class);
}","/** 
 * This constructor should present when an instance of the class is going to be got from the given browser window or mobile context.<br/> <br/> The described piece of UI is inside frame (it is actual for browser and mobile hybrid apps). Path to desired frame is specified by  {@link HowToGetByFrames} instance. <br/><br/> There is known root  {@link WebElement} defined {@link By} locatorstrategy
 * @param handle is the given browser window or mobile context
 * @param path is a path to frame which is specified by {@link HowToGetByFrames}
 * @param by It is  {@link By} strategy which is used to get the rootelement
 * @see Application
 * @see IHowToGetHandle
 * @see HowToGetBrowserWindow
 * @see HowToGetMobileScreen
 * @see Handle
 * @see BrowserWindow
 * @see MobileScreen
 * @see HowToGetByFrames
 * @see By
 */
protected FunctionalPart(S handle,HowToGetByFrames path,By by){
  super(handle);
  this.pathStrategy=path;
  timeOut=handle.driverEncapsulation.getTimeOut();
  long primaryTimeOut=timeOut.getImplicitlyWaitTimeOut();
  TimeUnit primaryTimeUnit=timeOut.getImplicitlyWaitTimeUnit();
  this.rootElement=new RootElement(this);
  this.rootElement.changeByStrategy(by);
  this.rootElement.setTimeValue(primaryTimeOut);
  this.rootElement.setTimeUnit(primaryTimeUnit);
  scriptExecutor=getComponent(ScriptExecutor.class);
  ime=getComponent(Ime.class);
  defaultFieldDecorator=new DefaultDecorator(getCurrentSearcContext(),this,primaryTimeOut,primaryTimeUnit);
  load();
}",0.930546190155091
134446,"private static void resetTimeOut(FunctionalPart<?> funcPart,long timeOutValue,TimeUnit timeUnit){
  funcPart.getTimeOut().implicitlyWait(timeOutValue,timeUnit);
  funcPart.getDefaultFieldDecorator().resetImplicitlyWaitTimeOut(timeOutValue,timeUnit);
}","private static void resetTimeOut(FunctionalPart<?> funcPart,long timeOutValue,TimeUnit timeUnit){
  funcPart.getTimeOut().implicitlyWait(timeOutValue,timeUnit);
  if (funcPart.defaultFieldDecorator != null)   funcPart.defaultFieldDecorator.resetImplicitlyWaitTimeOut(timeOutValue,timeUnit);
}",0.8729281767955801
134447,"@Override public synchronized Object intercept(Object object,Method method,Object[] args,MethodProxy methodProxy) throws Throwable {
  FunctionalPart<?> funcPart=(FunctionalPart<?>)object;
  long timeOut=0;
  TimeUnit timeUnit=null;
  boolean timeOutIsChanged=false;
  if (method.isAnnotationPresent(InteractiveMethod.class)) {
    funcPart.switchToMe();
    timeOut=funcPart.getTimeOut().getImplicitlyWaitTimeOut();
    timeUnit=funcPart.getTimeOut().getImplicitlyWaitTimeUnit();
    funcPart.getDefaultFieldDecorator().resetImplicitlyWaitTimeOut(timeOut,timeUnit);
    if (method.isAnnotationPresent(WithImplicitlyWait.class)) {
      WithImplicitlyWait withImplicitlyWait=method.getAnnotation(WithImplicitlyWait.class);
      long customTimeOut=withImplicitlyWait.timeOut();
      TimeUnit customTimeUnit=withImplicitlyWait.timeUnit();
      resetTimeOut(funcPart,customTimeOut,customTimeUnit);
      timeOutIsChanged=true;
    }
  }
  try {
    if (method.getName().equals(DecompositionUtil.GET_PART)) {
      Class<?> target=DecompositionUtil.extractTargetFromGetPart(method,args);
      ESupportedDrivers supportedDriver=funcPart.getWebDriverEncapsulation().getInstantiatedSupportedDriver();
      Object[] newArgs=DecompositionUtil.getRelevantArgs(supportedDriver,method,args,target);
      args=newArgs;
      method=MethodReadingUtil.getSuitableMethod(funcPart.getClass(),DecompositionUtil.GET_PART,args);
      methodProxy=MethodReadingUtil.getMethodProxy(funcPart.getClass(),method);
    }
    return super.intercept(funcPart,method,args,methodProxy);
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (timeOutIsChanged)     resetTimeOut(funcPart,timeOut,timeUnit);
  }
}","@Override public synchronized Object intercept(Object object,Method method,Object[] args,MethodProxy methodProxy) throws Throwable {
  FunctionalPart<?> funcPart=(FunctionalPart<?>)object;
  long timeOut=0;
  TimeUnit timeUnit=null;
  boolean timeOutIsChanged=false;
  if (method.isAnnotationPresent(InteractiveMethod.class)) {
    funcPart.switchToMe();
    timeOut=funcPart.getTimeOut().getImplicitlyWaitTimeOut();
    timeUnit=funcPart.getTimeOut().getImplicitlyWaitTimeUnit();
    if (funcPart.defaultFieldDecorator != null)     funcPart.defaultFieldDecorator.resetImplicitlyWaitTimeOut(timeOut,timeUnit);
    if (method.isAnnotationPresent(WithImplicitlyWait.class)) {
      WithImplicitlyWait withImplicitlyWait=method.getAnnotation(WithImplicitlyWait.class);
      long customTimeOut=withImplicitlyWait.timeOut();
      TimeUnit customTimeUnit=withImplicitlyWait.timeUnit();
      resetTimeOut(funcPart,customTimeOut,customTimeUnit);
      timeOutIsChanged=true;
    }
  }
  try {
    if (method.getName().equals(DecompositionUtil.GET_PART)) {
      Class<?> target=DecompositionUtil.extractTargetFromGetPart(method,args);
      ESupportedDrivers supportedDriver=funcPart.getWebDriverEncapsulation().getInstantiatedSupportedDriver();
      Object[] newArgs=DecompositionUtil.getRelevantArgs(supportedDriver,method,args,target);
      args=newArgs;
      method=MethodReadingUtil.getSuitableMethod(funcPart.getClass(),DecompositionUtil.GET_PART,args);
      methodProxy=MethodReadingUtil.getMethodProxy(funcPart.getClass(),method);
    }
    return super.intercept(funcPart,method,args,methodProxy);
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (timeOutIsChanged)     resetTimeOut(funcPart,timeOut,timeUnit);
  }
}",0.979330422125182
134448,"protected FakePageObject(S handle){
  super(handle);
  load();
}","protected FakePageObject(S handle){
  super(handle);
}",0.9152542372881356
134449,"private void test2(Google google){
  try {
    google.performSearch(""String_Node_Str"");
    Assert.assertNotSame(0,google.getLinkCount());
    google.close();
  }
  finally {
    google.quit();
  }
}","private void test2(Google google){
  try {
    google.close();
  }
  finally {
    google.quit();
  }
}",0.6821192052980133
134450,"private static <T extends Application<?,?>>T load(T instance,String urlToBeLoaded){
  instance.getWebDriverEncapsulation().getTo(urlToBeLoaded);
  return instance;
}","private static <T extends Application<?,?>>T load(T instance,String urlToBeLoaded){
  instance.getWebDriverEncapsulation().getWrappedDriver().navigate().to(urlToBeLoaded);
  return instance;
}",0.9187675070028012
134451,"@Override public abstract <T extends IDecomposable>T getPart(Class<T> partClass,FramePathStrategy pathStrategy);","@Override public abstract <T extends IDecomposable>T getPart(Class<T> partClass,HowToGetByFrames pathStrategy);",0.8968609865470852
134452,"protected BrowserApplication(SingleWindow window){
  super(window);
  cookies=driverEncapsulation.getComponent(Cookies.class);
}","protected BrowserApplication(BrowserWindow window){
  super(window);
  cookies=driverEncapsulation.getComponent(Cookies.class);
}",0.9571984435797666
134453,"@Override public void maximize(){
  ((SingleWindow)handle).maximize();
}","@Override public void maximize(){
  ((BrowserWindow)handle).maximize();
}",0.9241379310344828
134454,"@Override public Dimension getSize(){
  return ((SingleWindow)handle).getSize();
}","@Override public Dimension getSize(){
  return ((BrowserWindow)handle).getSize();
}",0.9333333333333332
134455,"protected BrowserPage(SingleWindow window,FramePathStrategy pathStrategy){
  super(window,pathStrategy);
}","protected BrowserPage(BrowserWindow window,HowToGetByFrames pathStrategy){
  super(window,pathStrategy);
}",0.839622641509434
134456,"@Override public Point getPosition(){
  return ((SingleWindow)handle).getPosition();
}","@Override public Point getPosition(){
  return ((BrowserWindow)handle).getPosition();
}",0.9364161849710982
134457,"@Override public void setSize(Dimension size){
  ((SingleWindow)handle).setSize(size);
}","@Override public void setSize(Dimension size){
  ((BrowserWindow)handle).setSize(size);
}",0.9378531073446328
134458,"@Override public void forward(){
  ((SingleWindow)handle).forward();
}","@Override public void forward(){
  ((BrowserWindow)handle).forward();
}",0.9219858156028368
134459,"@Override public void back(){
  ((SingleWindow)handle).back();
}","@Override public void back(){
  ((BrowserWindow)handle).back();
}",0.9147286821705426
134460,"@Override public void refresh(){
  ((SingleWindow)handle).refresh();
}","@Override public void refresh(){
  ((BrowserWindow)handle).refresh();
}",0.9219858156028368
134461,"@Override public void to(URL url){
  ((SingleWindow)handle).to(url);
}","@Override public void to(URL url){
  ((BrowserWindow)handle).to(url);
}",0.9219858156028368
134462,"/** 
 * Closes browser window and destroys all page objects that are placed on it
 */
public void close() throws UnclosedWindowException, NoSuchWindowException, UnhandledAlertException, UnreachableBrowserException {
  try {
    ((SingleWindow)handle).close();
    destroy();
  }
 catch (  UnclosedWindowException e) {
    throw e;
  }
catch (  NoSuchWindowException e) {
    destroy();
    throw e;
  }
catch (  UnreachableBrowserException e) {
    destroy();
    throw e;
  }
}","/** 
 * Closes browser window and destroys all page objects that are placed on it
 */
public void close() throws UnclosedWindowException, NoSuchWindowException, UnhandledAlertException, UnreachableBrowserException {
  try {
    ((BrowserWindow)handle).close();
    destroy();
  }
 catch (  UnclosedWindowException e) {
    throw e;
  }
catch (  NoSuchWindowException e) {
    destroy();
    throw e;
  }
catch (  UnreachableBrowserException e) {
    destroy();
    throw e;
  }
}",0.9864158829676072
134463,"@Override public void setPosition(Point point){
  ((SingleWindow)handle).setPosition(point);
}","@Override public void setPosition(Point point){
  ((BrowserWindow)handle).setPosition(point);
}",0.9417989417989416
134464,"@Override public Alert getAlert() throws NoAlertPresentException {
  ContextTimeOuts timeOuts=getContextTimeOuts();
  return ComponentFactory.getComponent(AlertHandler.class,getWrappedDriver(),new Class[]{long.class},new Object[]{getTimeOut(timeOuts.getSecsForAwaitinAlertPresent(),defaultTime)});
}","@Override public Alert getAlert() throws NoAlertPresentException {
  ContextTimeOuts timeOuts=getContextTimeOuts();
  return getWebDriverEncapsulation().getComponent(AlertHandler.class,new Class[]{long.class},new Object[]{getTimeOut(timeOuts.getSecsForAwaitinAlertPresent(),defaultTime)});
}",0.8949152542372881
134465,"public ContextManager(WebDriverEncapsulation initialDriverEncapsulation){
  super(initialDriverEncapsulation);
  fluent=getWebDriverEncapsulation().getComponent(FluentContextConditions.class);
  contextTool=ComponentFactory.getComponent(ContextTool.class,getWrappedDriver());
}","public ContextManager(WebDriverEncapsulation initialDriverEncapsulation){
  super(initialDriverEncapsulation);
  fluent=getWebDriverEncapsulation().getComponent(FluentContextConditions.class);
  contextTool=getWebDriverEncapsulation().getComponent(ContextTool.class);
}",0.8717948717948718
134466,"@Override public synchronized Alert getAlert() throws NoAlertPresentException {
  WindowsTimeOuts timeOuts=getWindowTimeOuts();
  return ComponentFactory.getComponent(AlertHandler.class,getWrappedDriver(),new Class[]{long.class},new Object[]{getTimeOut(timeOuts.getSecsForAwaitinAlertPresent(),defaultTime)});
}","@Override public synchronized Alert getAlert() throws NoAlertPresentException {
  WindowsTimeOuts timeOuts=getWindowTimeOuts();
  return getWebDriverEncapsulation().getComponent(AlertHandler.class,new Class[]{long.class},new Object[]{getTimeOut(timeOuts.getSecsForAwaitinAlertPresent(),defaultTime)});
}",0.8273615635179153
134467,"@Override protected Control createDialogArea(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(content);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(content);
  super.createDialogArea(content);
  Composite appendix=new Composite(content,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
  layout.numColumns=2;
  appendix.setLayout(layout);
  appendix.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  CLabel label=new CLabel(appendix,SWT.NONE);
  label.setText(""String_Node_Str"");
  prefix=new Text(appendix,SWT.BORDER);
  prefix.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (null != obj) {
    prefix.setText(obj.getPrefix());
    ElementIndexInfo info=find(obj);
    if (null != info) {
      setSelection(new Object[]{info});
    }
  }
  return content;
}","/** 
 * Creates an area and a text field to enter prefix of the imported module into
 */
@Override protected Control createDialogArea(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(content);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(content);
  super.createDialogArea(content);
  createPrefixArea(content);
  return content;
}",0.3529411764705882
134468,"public AddImportDialog(Shell parent,Module node,Import obj,IFile file){
  this(parent,node,file);
  this.obj=obj;
}","/** 
 * Creates a new   {@link AddImportDialog}
 * @param parent the parent shell
 * @param module the edited {@link Module}
 * @param file file to get an {@link IProject} from; the existing modules are taken from thisproject
 */
public AddImportDialog(Shell parent,Module module,IFile file){
  super(parent,new ModuleLabelProvider());
  setAllowDuplicates(false);
  List<Import> imports=getImports(module);
  importPrefixes=getImportData(imports,ModelPackage.Literals.IMPORT__PREFIX);
  setElements(getModuleList(module,file,imports));
  setTitle(""String_Node_Str"");
  setImage(GraphitiUi.getImageService().getImageForId(YangDiagramImageProvider.DIAGRAM_TYPE_PROVIDER_ID,YangDiagramImageProvider.IMG_IMPORT_PROPOSAL));
}",0.1578947368421052
134469,"protected void createImportButtonToolbar(Section section){
  ToolBarManager toolBarManager=new ToolBarManager(SWT.FLAT);
  ToolBar toolbar=toolBarManager.createControl(section);
  toolbar.setCursor(Display.getDefault().getSystemCursor(SWT.CURSOR_HAND));
  Action addButton=new Action(""String_Node_Str"",IAction.AS_CHECK_BOX){
    @Override public void run(){
      super.run();
      Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
      AddImportDialog dialog=new AddImportDialog(shell,module,file);
      if (0 <= dialog.open()) {
        refreshImportTable();
      }
      setChecked(false);
    }
  }
;
  addButton.setImageDescriptor(GraphitiUi.getImageService().getImageDescriptorForId(YangDiagramImageProvider.DIAGRAM_TYPE_PROVIDER_ID,YangDiagramImageProvider.IMG_ADD_TOOL_PROPOSAL));
  addButton.setEnabled(true);
  toolBarManager.add(addButton);
  Action deleteButton=new Action(""String_Node_Str"",IAction.AS_CHECK_BOX){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      super.run();
      if (importTable.getSelection() instanceof IStructuredSelection) {
        Iterator<Object> iter=((IStructuredSelection)importTable.getSelection()).iterator();
        while (iter.hasNext()) {
          module.getChildren().remove(iter.next());
        }
        refreshImportTable();
        setChecked(false);
      }
    }
  }
;
  deleteButton.setImageDescriptor(GraphitiUi.getImageService().getImageDescriptorForId(YangDiagramImageProvider.DIAGRAM_TYPE_PROVIDER_ID,YangDiagramImageProvider.IMG_DELETE_TOOL_PROPOSAL));
  deleteButton.setEnabled(true);
  toolBarManager.add(deleteButton);
  toolBarManager.update(true);
  section.setTextClient(toolbar);
}","protected void createImportButtonToolbar(Section section){
  ToolBarManager toolBarManager=new ToolBarManager(SWT.FLAT);
  ToolBar toolbar=toolBarManager.createControl(section);
  toolbar.setCursor(Display.getDefault().getSystemCursor(SWT.CURSOR_HAND));
  Action addButton=new Action(""String_Node_Str"",IAction.AS_CHECK_BOX){
    @Override public void run(){
      super.run();
      Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
      AddImportDialog dialog=new AddImportDialog(shell,module,file);
      if (0 <= dialog.open()) {
        YangModelUtil.add(module,dialog.getResultImport(),module.getChildren().size());
        refreshImportTable();
      }
      setChecked(false);
    }
  }
;
  addButton.setImageDescriptor(GraphitiUi.getImageService().getImageDescriptorForId(YangDiagramImageProvider.DIAGRAM_TYPE_PROVIDER_ID,YangDiagramImageProvider.IMG_ADD_TOOL_PROPOSAL));
  addButton.setEnabled(true);
  toolBarManager.add(addButton);
  Action deleteButton=new Action(""String_Node_Str"",IAction.AS_CHECK_BOX){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      super.run();
      if (importTable.getSelection() instanceof IStructuredSelection) {
        Iterator<Object> iter=((IStructuredSelection)importTable.getSelection()).iterator();
        while (iter.hasNext()) {
          module.getChildren().remove(iter.next());
        }
        refreshImportTable();
        setChecked(false);
      }
    }
  }
;
  deleteButton.setImageDescriptor(GraphitiUi.getImageService().getImageDescriptorForId(YangDiagramImageProvider.DIAGRAM_TYPE_PROVIDER_ID,YangDiagramImageProvider.IMG_DELETE_TOOL_PROPOSAL));
  deleteButton.setEnabled(true);
  toolBarManager.add(deleteButton);
  toolBarManager.update(true);
  section.setTextClient(toolbar);
}",0.9748858447488584
134470,"@Override public boolean consumes(ASTNode node){
  String thisModulePrefix=null;
  ASTNode thisModule=node.getModule();
  if (thisModule instanceof SubModule) {
    thisModulePrefix=null;
  }
 else {
    thisModulePrefix=((Module)thisModule).getPrefix().getValue();
  }
  if (node instanceof TypeReference) {
    String typeWholeName=((TypeReference)node).getName();
    String typePrefix=((TypeReference)node).getType().getPrefix();
    return !YangTypeUtil.isBuiltInType(typeWholeName) && !typePrefix.equals(thisModulePrefix);
  }
  if (node instanceof UsesNode) {
    String usesPrefix=((UsesNode)node).getGrouping().getPrefix();
    return !usesPrefix.equals(thisModulePrefix);
  }
  return false;
}","@Override public boolean consumes(ASTNode node){
  String thisModulePrefix=null;
  ASTNode thisModule=node.getModule();
  if (thisModule instanceof SubModule) {
    thisModulePrefix=null;
  }
 else {
    SimpleNode<String> prefixNode=((Module)thisModule).getPrefix();
    if (prefixNode != null) {
      thisModulePrefix=prefixNode.getValue();
    }
  }
  if (node instanceof TypeReference) {
    String typeWholeName=((TypeReference)node).getName();
    String typePrefix=((TypeReference)node).getType().getPrefix();
    return !YangTypeUtil.isBuiltInType(typeWholeName) && !typePrefix.equals(thisModulePrefix);
  }
  if (node instanceof UsesNode) {
    String usesPrefix=((UsesNode)node).getGrouping().getPrefix();
    if (usesPrefix != null) {
      return !usesPrefix.equals(thisModulePrefix);
    }
  }
  return false;
}",0.8298429319371727
134471,"private static FontData getDefaultFont(){
  FontData fontData=StringConverter.asFontData(Activator.getDefault().getPreferenceStore().getString(ModelEditorPreferences.DIAGRAM_EDITOR_FONT));
  if (fontData == null) {
    FontData fd=JFaceResources.getDefaultFont().getFontData()[0];
    if (""String_Node_Str"".equals(fd.getName()) && fd.getHeight() == 11) {
      fd.setName(""String_Node_Str"");
    }
    return fd;
  }
  return fontData;
}","private static FontData getDefaultFont(){
  FontData fontData=null;
  try {
    fontData=StringConverter.asFontData(Activator.getDefault().getPreferenceStore().getString(ModelEditorPreferences.DIAGRAM_EDITOR_FONT));
  }
 catch (  DataFormatException e) {
  }
  if (fontData == null) {
    FontData fd=JFaceResources.getDefaultFont().getFontData()[0];
    if (""String_Node_Str"".equals(fd.getName()) && fd.getHeight() == 11) {
      fd.setName(""String_Node_Str"");
    }
    return fd;
  }
  return fontData;
}",0.9258474576271186
134472,"@Override public void enterTypedef_stmt(Typedef_stmtContext ctx){
  TypeDefinition typeDefinition=new TypeDefinition(module);
  updateNamedNode(typeDefinition,ctx);
  module.getTypeDefinitions().add(typeDefinition);
  stack.push(typeDefinition);
}","@Override public void enterTypedef_stmt(Typedef_stmtContext ctx){
  ASTNode parent=stack.peek();
  TypeDefinition typeDefinition=new TypeDefinition(parent);
  updateNamedNode(typeDefinition,ctx);
  if (parent instanceof Module) {
    module.getTypeDefinitions().add(typeDefinition);
  }
  stack.push(typeDefinition);
}",0.6265486725663717
134473,"@Override public void enterBelongs_to_stmt(Belongs_to_stmtContext ctx){
  if (module instanceof SubModule) {
    String moduleName=stringFromNode(ctx);
    String prefix=null;
    for (int i=0; i < ctx.getChildCount(); ++i) {
      final ParseTree treeNode=ctx.getChild(i);
      if (treeNode instanceof Prefix_stmtContext) {
        prefix=stringFromNode(treeNode);
      }
    }
    ((SubModule)module).setParentModule(moduleName);
    ((SubModule)module).setParentPrefix(prefix);
  }
}","@Override public void enterBelongs_to_stmt(Belongs_to_stmtContext ctx){
  if (module instanceof SubModule) {
    String moduleName=stringFromNode(ctx);
    for (int i=0; i < ctx.getChildCount(); ++i) {
      final ParseTree treeNode=ctx.getChild(i);
      if (treeNode instanceof Prefix_stmtContext) {
        yangModelPrefix=stringFromNode(treeNode);
        SimpleNode<String> astNode=new SimpleNode<String>(module,((Prefix_stmtContext)treeNode).PREFIX_KEYWORD().getText(),yangModelPrefix);
        updateNodePosition(astNode,treeNode);
        module.setPrefix(astNode);
      }
    }
    ((SubModule)module).setParentModule(moduleName);
  }
}",0.691358024691358
134474,"@Override protected Control createDialogArea(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(content);
  super.createDialogArea(content);
  Composite appendix=new Composite(content,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
  layout.numColumns=2;
  appendix.setLayout(layout);
  appendix.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  CLabel label=new CLabel(appendix,SWT.NONE);
  label.setText(""String_Node_Str"");
  prefix=new Text(appendix,SWT.BORDER);
  prefix.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (null != obj) {
    prefix.setText(obj.getPrefix());
    ElementIndexInfo info=find(obj);
    if (null != info) {
      setSelection(new Object[]{info});
    }
  }
  return content;
}","@Override protected Control createDialogArea(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(content);
  GridLayoutFactory.fillDefaults().numColumns(1).applyTo(content);
  super.createDialogArea(content);
  Composite appendix=new Composite(content,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
  layout.numColumns=2;
  appendix.setLayout(layout);
  appendix.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  CLabel label=new CLabel(appendix,SWT.NONE);
  label.setText(""String_Node_Str"");
  prefix=new Text(appendix,SWT.BORDER);
  prefix.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (null != obj) {
    prefix.setText(obj.getPrefix());
    ElementIndexInfo info=find(obj);
    if (null != info) {
      setSelection(new Object[]{info});
    }
  }
  return content;
}",0.9719312945119396
134475,"public void dispose(){
  this.yangSourceEditor.removeReconcileHandler(this);
  DocumentUndoManagerRegistry.getDocumentUndoManager(yangSourceEditor.getDocument()).removeDocumentUndoListener(this);
}","public void dispose(){
  this.yangSourceEditor.removeReconcileHandler(this);
}",0.5672727272727273
134476,"private boolean processJavaDeltas(IJavaElementDelta[] affectedChildren){
  for (  IJavaElementDelta d : affectedChildren) {
    IJavaElement element=d.getElement();
    if (element instanceof IPackageFragmentRoot) {
      IClasspathEntry entry;
      try {
        entry=((IPackageFragmentRoot)element).getResolvedClasspathEntry();
        IPath path=entry.getPath();
        if (path != null && path.toFile().exists() && path.lastSegment().toLowerCase().endsWith(""String_Node_Str"")) {
switch (d.getKind()) {
case IJavaElementDelta.ADDED:
case IJavaElementDelta.CHANGED:
            this.manager.indexManager.addJarFile(element.getJavaProject().getProject(),path);
          break;
case IJavaElementDelta.REMOVED:
        this.manager.indexManager.indexAll(element.getJavaProject().getProject());
      return false;
  }
}
}
 catch (JavaModelException e) {
YangCorePlugin.log(e);
}
}
if (!processJavaDeltas(d.getAffectedChildren())) {
return false;
}
}
return true;
}","private boolean processJavaDeltas(IJavaElementDelta[] affectedChildren){
  for (  IJavaElementDelta d : affectedChildren) {
    IJavaElement element=d.getElement();
    if (element instanceof IPackageFragmentRoot) {
      IPath path=((IPackageFragmentRoot)element).getPath();
      if (path != null && path.toFile().exists() && path.lastSegment().toLowerCase().endsWith(""String_Node_Str"")) {
switch (d.getKind()) {
case IJavaElementDelta.ADDED:
case IJavaElementDelta.CHANGED:
          this.manager.indexManager.addJarFile(element.getJavaProject().getProject(),path);
        break;
case IJavaElementDelta.REMOVED:
      this.manager.indexManager.indexAll(element.getJavaProject().getProject());
    return false;
}
}
}
if (!processJavaDeltas(d.getAffectedChildren())) {
return false;
}
}
return true;
}",0.8977978543195935
134477,"@Override public String getName(){
  return entry;
}","@Override public String getName(){
  return new Path(entry).lastSegment();
}",0.8125
134478,"private Object resolveParent(IJarEntryResource parent,IPath path){
  if (path.segmentCount() > 0) {
    for (    IJarEntryResource element : parent.getChildren()) {
      if (path.segment(0).equals(element.getName())) {
        return resolveParent(element,path.removeFirstSegments(1));
      }
    }
  }
  return parent;
}","private Object resolveParent(IJarEntryResource parent,IPath path){
  if (path.segmentCount() > 0) {
    for (    IJarEntryResource element : parent.getChildren()) {
      if (path.segment(0).equals(element.getName())) {
        return resolveParent(element,path.removeFirstSegments(1));
      }
    }
  }
  return parent.getParent();
}",0.9817629179331308
134479,"private char[] getContent() throws YangModelException {
  try (JarFile file=new JarFile(getParent().getPath().toFile())){
    InputStreamReader in=new InputStreamReader(file.getInputStream(file.getEntry(path.toString())),""String_Node_Str"");
    CharArrayWriter out=new CharArrayWriter();
    char[] buff=new char[1024];
    int len=0;
    while ((len=in.read(buff)) > 0) {
      out.write(buff,0,len);
    }
    return out.toCharArray();
  }
 catch (  IOException e) {
    throw new YangModelException(e,0);
  }
}","private char[] getContent() throws YangModelException {
  try (JarFile file=new JarFile(getParent().getPath().toFile())){
    ZipEntry entry=file.getEntry(path.toString());
    InputStreamReader in=new InputStreamReader(file.getInputStream(entry),""String_Node_Str"");
    CharArrayWriter out=new CharArrayWriter();
    char[] buff=new char[1024];
    int len=0;
    while ((len=in.read(buff)) > 0) {
      out.write(buff,0,len);
    }
    return out.toCharArray();
  }
 catch (  IOException e) {
    throw new YangModelException(e,0);
  }
}",0.9182509505703422
134480,"@Override public Object getAdapter(Class key){
  if (projectionSupport != null) {
    Object adapter=projectionSupport.getAdapter(getSourceViewer(),key);
    if (adapter != null) {
      return adapter;
    }
  }
  return super.getAdapter(key);
}","@Override public Object getAdapter(@SuppressWarnings(""String_Node_Str"") Class key){
  if (projectionSupport != null) {
    Object adapter=projectionSupport.getAdapter(getSourceViewer(),key);
    if (adapter != null) {
      return adapter;
    }
  }
  return super.getAdapter(key);
}",0.9300567107750471
134481,"@Override public void projectionEnabled(){
  fFoldingStructureProvider=new YangFoldingStructureProvider(this);
  fFoldingStructureProvider.setDocument(getDocumentProvider().getDocument(getEditorInput()));
  Module module=YangParserUtil.parseYangFile(getDocumentProvider().getDocument(getEditorInput()).get().toCharArray());
  if (module != null)   fFoldingStructureProvider.updateFoldingRegions(module);
}","@Override public void projectionEnabled(){
  fFoldingStructureProvider=new YangFoldingStructureProvider(this);
  fFoldingStructureProvider.setDocument(getDocumentProvider().getDocument(getEditorInput()));
  Module module=YangParserUtil.parseYangFile(getDocumentProvider().getDocument(getEditorInput()).get().toCharArray());
  if (module != null) {
    fFoldingStructureProvider.updateFoldingRegions(module);
  }
}",0.9902200488997556
134482,"/** 
 * Returns whether <code>partType</code> is special, i.e. a YANG <code>String</code> or <code>Line End Comment</code> partition.
 * @param partType the partition type to check
 * @return <code>true</code> if <code>partType</code> is special, <code>false</code> otherwise
 */
private boolean isSpecialPartition(String partType){
  return partType == YangPartitionScanner.YANG_STRING;
}","/** 
 * Returns whether <code>partType</code> is special, i.e. a YANG <code>String</code> or <code>Line End Comment</code> partition.
 * @param partType the partition type to check
 * @return <code>true</code> if <code>partType</code> is special, <code>false</code> otherwise
 */
private boolean isSpecialPartition(String partType){
  return partType == YangPartitionScanner.YANG_STRING || partType == YangPartitionScanner.YANG_STRING_SQ;
}",0.9384800965018094
134483,"@Override public void projectionEnabled(){
  fFoldingStructureProvider=new YangFoldingStructureProvider(this);
  fFoldingStructureProvider.setDocument(getDocumentProvider().getDocument(getEditorInput()));
  Module module=YangParserUtil.parseYangFile(getDocumentProvider().getDocument(getEditorInput()).get().toCharArray());
  fFoldingStructureProvider.updateFoldingRegions(module);
}","@Override public void projectionEnabled(){
  fFoldingStructureProvider=new YangFoldingStructureProvider(this);
  fFoldingStructureProvider.setDocument(getDocumentProvider().getDocument(getEditorInput()));
  Module module=YangParserUtil.parseYangFile(getDocumentProvider().getDocument(getEditorInput()).get().toCharArray());
  if (module != null)   fFoldingStructureProvider.updateFoldingRegions(module);
}",0.9720812182741116
134484,"public void updateFoldingRegions(Module module){
  if (fFoldingStructureProvider != null) {
    fFoldingStructureProvider.updateFoldingRegions(module);
  }
}","public void updateFoldingRegions(Module module){
  if (fFoldingStructureProvider != null && module != null) {
    fFoldingStructureProvider.updateFoldingRegions(module);
  }
}",0.9457831325301204
134485,"public YangPartitionScanner(){
  List<IPredicateRule> rules=new ArrayList<IPredicateRule>();
  IToken comment=new Token(YANG_COMMENT);
  rules.add(new MultiLineRule(""String_Node_Str"",""String_Node_Str"",comment,(char)0,true));
  rules.add(new EndOfLineRule(""String_Node_Str"",comment));
  IToken multiLineString=new Token(YANG_STRING);
  rules.add(new MultiLineRule(""String_Node_Str"",""String_Node_Str"",multiLineString,'\\',true));
  rules.add(new MultiLineRule(""String_Node_Str"",""String_Node_Str"",multiLineString,'\\',true));
  IPredicateRule[] result=new IPredicateRule[rules.size()];
  rules.toArray(result);
  setPredicateRules(result);
}","public YangPartitionScanner(){
  List<IPredicateRule> rules=new ArrayList<IPredicateRule>();
  IToken comment=new Token(YANG_COMMENT);
  rules.add(new MultiLineRule(""String_Node_Str"",""String_Node_Str"",comment,(char)0,true));
  rules.add(new EndOfLineRule(""String_Node_Str"",comment));
  IToken multiLineString=new Token(YANG_STRING);
  rules.add(new MultiLineRule(""String_Node_Str"",""String_Node_Str"",multiLineString,'\\',true));
  IToken multiLineString_sq=new Token(YANG_STRING_SQ);
  rules.add(new MultiLineRule(""String_Node_Str"",""String_Node_Str"",multiLineString_sq,'\\',true));
  IPredicateRule[] result=new IPredicateRule[rules.size()];
  rules.toArray(result);
  setPredicateRules(result);
}",0.9565217391304348
134486,"/** 
 * XXX dirty
 */
private String determineProposalScopeKeyword(IDocument doc,int offset){
  try {
    YangHeuristicScanner yangHeuristicScanner=new YangHeuristicScanner(doc);
    int blockStartPosition=yangHeuristicScanner.findOpeningPeer(offset,'{','}');
    int curPos=yangHeuristicScanner.findNonWhitespaceBackward(blockStartPosition - 1,YangHeuristicScanner.UNBOUND);
    int currentToken=yangHeuristicScanner.previousToken(curPos,YangHeuristicScanner.UNBOUND);
    int keywordEndPos=yangHeuristicScanner.getPosition();
    int keywordStartPos=keywordEndPos;
    if (currentToken == Symbols.TokenIDENT) {
      yangHeuristicScanner.previousToken(keywordEndPos,YangHeuristicScanner.UNBOUND);
      keywordStartPos=yangHeuristicScanner.getPosition();
    }
    String keyword=doc.get(keywordStartPos,keywordEndPos - keywordStartPos).trim();
    return keyword;
  }
 catch (  Exception e) {
    return ""String_Node_Str"";
  }
}","/** 
 * FIXME dirty and ugly
 */
private String determineProposalScopeKeyword(IDocument doc,int offset){
  try {
    YangHeuristicScanner yangHeuristicScanner=new YangHeuristicScanner(doc);
    int blockStartPosition=yangHeuristicScanner.findOpeningPeer(offset,'{','}');
    int curPos=yangHeuristicScanner.findNonWhitespaceBackward(blockStartPosition - 1,YangHeuristicScanner.UNBOUND);
    int currentToken=yangHeuristicScanner.previousToken(curPos,YangHeuristicScanner.UNBOUND);
    int keywordEndPos=yangHeuristicScanner.getPosition();
    int keywordStartPos=keywordEndPos;
    if (currentToken == Symbols.TokenIDENT) {
      yangHeuristicScanner.previousToken(keywordEndPos,YangHeuristicScanner.UNBOUND);
      keywordStartPos=yangHeuristicScanner.getPosition();
    }
    if (currentToken == Symbols.TokenKEYWORD) {
      keywordEndPos=curPos + 1;
    }
    String keyword=doc.get(keywordStartPos,keywordEndPos - keywordStartPos).trim();
    return keyword;
  }
 catch (  Exception e) {
    return ""String_Node_Str"";
  }
}",0.9433384379785604
134487,"@Override public IPresentationReconciler getPresentationReconciler(ISourceViewer sourceViewer){
  PresentationReconciler reconciler=new PresentationReconciler();
  reconciler.setDocumentPartitioning(getConfiguredDocumentPartitioning(sourceViewer));
  DefaultDamagerRepairer dr=new DefaultDamagerRepairer(getYangScanner());
  reconciler.setDamager(dr,IDocument.DEFAULT_CONTENT_TYPE);
  reconciler.setRepairer(dr,IDocument.DEFAULT_CONTENT_TYPE);
  dr=new DefaultDamagerRepairer(getYangCommentScanner());
  reconciler.setDamager(dr,YangPartitionScanner.YANG_COMMENT);
  reconciler.setRepairer(dr,YangPartitionScanner.YANG_COMMENT);
  dr=new DefaultDamagerRepairer(getYangStringScanner());
  reconciler.setDamager(dr,YangPartitionScanner.YANG_STRING);
  reconciler.setRepairer(dr,YangPartitionScanner.YANG_STRING);
  return reconciler;
}","@Override public IPresentationReconciler getPresentationReconciler(ISourceViewer sourceViewer){
  PresentationReconciler reconciler=new PresentationReconciler();
  reconciler.setDocumentPartitioning(getConfiguredDocumentPartitioning(sourceViewer));
  DefaultDamagerRepairer dr=new DefaultDamagerRepairer(getYangScanner());
  reconciler.setDamager(dr,IDocument.DEFAULT_CONTENT_TYPE);
  reconciler.setRepairer(dr,IDocument.DEFAULT_CONTENT_TYPE);
  dr=new DefaultDamagerRepairer(getYangCommentScanner());
  reconciler.setDamager(dr,YangPartitionScanner.YANG_COMMENT);
  reconciler.setRepairer(dr,YangPartitionScanner.YANG_COMMENT);
  dr=new DefaultDamagerRepairer(getYangStringScanner());
  reconciler.setDamager(dr,YangPartitionScanner.YANG_STRING);
  reconciler.setRepairer(dr,YangPartitionScanner.YANG_STRING);
  dr=new DefaultDamagerRepairer(getYangStringScanner());
  reconciler.setDamager(dr,YangPartitionScanner.YANG_STRING_SQ);
  reconciler.setRepairer(dr,YangPartitionScanner.YANG_STRING_SQ);
  return reconciler;
}",0.8985976267529665
134488,"@Override public String[] getConfiguredContentTypes(ISourceViewer sourceViewer){
  return new String[]{IDocument.DEFAULT_CONTENT_TYPE,YangPartitionScanner.YANG_COMMENT,YangPartitionScanner.YANG_STRING};
}","@Override public String[] getConfiguredContentTypes(ISourceViewer sourceViewer){
  return new String[]{IDocument.DEFAULT_CONTENT_TYPE,YangPartitionScanner.YANG_COMMENT,YangPartitionScanner.YANG_STRING,YangPartitionScanner.YANG_STRING_SQ};
}",0.918918918918919
134489,"public void updateFoldingRegions(Module yangModule){
  fPositionToElement=new HashMap();
  try {
    ProjectionAnnotationModel model=(ProjectionAnnotationModel)fEditor.getAdapter(ProjectionAnnotationModel.class);
    if (model == null) {
      return;
    }
    final List root=new ArrayList();
    yangModule.accept(new ASTVisitor(){
      @Override public void preVisit(      ASTNode node){
        root.add(node);
      }
    }
);
    List currentRegions=new ArrayList<>();
    addFoldingNonASTregions(currentRegions);
    addFoldingRegions(currentRegions,root);
    updateFoldingRegions(model,currentRegions);
  }
 catch (  BadLocationException be) {
  }
}","public void updateFoldingRegions(Module yangModule){
  if (yangModule != null) {
    fPositionToElement=new HashMap();
    try {
      ProjectionAnnotationModel model=(ProjectionAnnotationModel)fEditor.getAdapter(ProjectionAnnotationModel.class);
      if (model == null) {
        return;
      }
      final List root=new ArrayList();
      yangModule.accept(new ASTVisitor(){
        @Override public void preVisit(        ASTNode node){
          root.add(node);
        }
      }
);
      List currentRegions=new ArrayList<>();
      addFoldingNonASTregions(currentRegions);
      addFoldingRegions(currentRegions,root);
      updateFoldingRegions(model,currentRegions);
    }
 catch (    BadLocationException be) {
    }
  }
}",0.9367816091954024
134490,"@Override public void reconcile(IRegion partition){
  if (editor == null || editor.getEditorInput() == null || !(editor.getEditorInput() instanceof IFileEditorInput)) {
    return;
  }
  IFile file=((IFileEditorInput)editor.getEditorInput()).getFile();
  final YangAnnotationModel annotationModel=(YangAnnotationModel)getAnnotationModel();
  YangFile yangFile=YangCorePlugin.createYangFile(file);
  try {
    final AtomicBoolean errors=new AtomicBoolean(false);
    annotationModel.init();
    Module module=YangParserUtil.parseYangFile(document.get().toCharArray(),file.getProject(),new IYangValidationListener(){
      @Override public void validationError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
      }
      @Override public void syntaxError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
      }
    }
);
    annotationModel.reportProblem();
    if (!errors.get()) {
      YangFileInfo fileInfo=(YangFileInfo)yangFile.getElementInfo(monitor);
      fileInfo.setModule(module);
      fileInfo.setIsStructureKnown(true);
      YangModelManager.getIndexManager().addWorkingCopy(file);
    }
    if (editor instanceof YangEditor) {
      ((YangEditor)editor).updateFoldingRegions(module);
    }
  }
 catch (  Exception e) {
  }
}","@Override public void reconcile(IRegion partition){
  if (editor == null || editor.getEditorInput() == null || !(editor.getEditorInput() instanceof IFileEditorInput)) {
    return;
  }
  IFile file=((IFileEditorInput)editor.getEditorInput()).getFile();
  final YangAnnotationModel annotationModel=(YangAnnotationModel)getAnnotationModel();
  YangFile yangFile=YangCorePlugin.createYangFile(file);
  try {
    final AtomicBoolean errors=new AtomicBoolean(false);
    annotationModel.init();
    Module module=YangParserUtil.parseYangFile(document.get().toCharArray(),file.getProject(),new IYangValidationListener(){
      @Override public void validationError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
      }
      @Override public void syntaxError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
      }
    }
);
    annotationModel.reportProblem();
    if (!errors.get()) {
      YangFileInfo fileInfo=(YangFileInfo)yangFile.getElementInfo(monitor);
      fileInfo.setModule(module);
      fileInfo.setIsStructureKnown(true);
      YangModelManager.getIndexManager().addWorkingCopy(file);
    }
    if (editor instanceof YangEditor && module != null)     ((YangEditor)editor).updateFoldingRegions(module);
  }
 catch (  Exception e) {
  }
}",0.9907063197026024
134491,"private IDocumentPartitioner createDocumentPartitioner(){
  return new FastPartitioner(new YangPartitionScanner(),new String[]{YangPartitionScanner.YANG_COMMENT,YangPartitionScanner.YANG_STRING});
}","private IDocumentPartitioner createDocumentPartitioner(){
  return new FastPartitioner(new YangPartitionScanner(),new String[]{YangPartitionScanner.YANG_COMMENT,YangPartitionScanner.YANG_STRING,YangPartitionScanner.YANG_STRING_SQ});
}",0.9166666666666666
134492,"@Override public ITextHover getTextHover(ISourceViewer sourceViewer,String contentType){
  YangTextHover yangTextHover=new YangTextHover();
  yangTextHover.setEditor(editor);
  return yangTextHover;
}","@Override public ITextHover getTextHover(ISourceViewer sourceViewer,String contentType){
  YangTextHover yangTextHover=new YangTextHover(sourceViewer);
  yangTextHover.setEditor(editor);
  return yangTextHover;
}",0.970873786407767
134493,"@Override public void reconcile(IRegion partition){
  if (editor == null || editor.getEditorInput() == null || !(editor.getEditorInput() instanceof IFileEditorInput)) {
    return;
  }
  IFile file=((IFileEditorInput)editor.getEditorInput()).getFile();
  final YangAnnotationModel annotationModel=(YangAnnotationModel)getAnnotationModel();
  YangFile yangFile=YangCorePlugin.createYangFile(file);
  try {
    final AtomicBoolean errors=new AtomicBoolean(false);
    annotationModel.init();
    Module module=YangParserUtil.parseYangFile(document.get().toCharArray(),file.getProject(),new IYangValidationListener(){
      @Override public void validationError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
      }
      @Override public void syntaxError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
      }
    }
);
    annotationModel.reportProblem();
    YangFileInfo fileInfo=(YangFileInfo)yangFile.getElementInfo(monitor);
    if (!errors.get()) {
      module.setFlags(ASTNode.VALID);
      fileInfo.setModule(module);
      fileInfo.setIsStructureKnown(true);
      YangModelManager.getIndexManager().addWorkingCopy(file);
    }
 else {
      module.setFlags(ASTNode.MALFORMED);
      fileInfo.setModule(module);
      fileInfo.setIsStructureKnown(false);
    }
    if (editor instanceof YangEditor) {
      ((YangEditor)editor).reconcile();
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (editor instanceof YangEditor) {
      ((YangEditor)editor).updateSemanticHigliting();
    }
  }
}","@Override public void reconcile(IRegion partition){
  if (editor == null || editor.getEditorInput() == null || !(editor.getEditorInput() instanceof IFileEditorInput)) {
    return;
  }
  IFile file=((IFileEditorInput)editor.getEditorInput()).getFile();
  final YangAnnotationModel annotationModel=(YangAnnotationModel)getAnnotationModel();
  YangFile yangFile=YangCorePlugin.createYangFile(file);
  try {
    final AtomicBoolean errors=new AtomicBoolean(false);
    annotationModel.init();
    Module module=YangParserUtil.parseYangFile(document.get().toCharArray(),file.getProject(),new IYangValidationListener(){
      @Override public void validationError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart)));
      }
      @Override public void syntaxError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart)));
      }
    }
);
    annotationModel.reportProblem();
    YangFileInfo fileInfo=(YangFileInfo)yangFile.getElementInfo(monitor);
    if (!errors.get()) {
      module.setFlags(ASTNode.VALID);
      fileInfo.setModule(module);
      fileInfo.setIsStructureKnown(true);
      YangModelManager.getIndexManager().addWorkingCopy(file);
    }
 else {
      module.setFlags(ASTNode.MALFORMED);
      fileInfo.setModule(module);
      fileInfo.setIsStructureKnown(false);
    }
    if (editor instanceof YangEditor) {
      ((YangEditor)editor).reconcile();
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (editor instanceof YangEditor) {
      ((YangEditor)editor).updateSemanticHigliting();
    }
  }
}",0.996268656716418
134494,"@Override public void syntaxError(String msg,int lineNumber,int charStart,int charEnd){
  errors.set(true);
  annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
}","@Override public void syntaxError(String msg,int lineNumber,int charStart,int charEnd){
  errors.set(true);
  annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart)));
}",0.9848812095032398
134495,"@Override public void validationError(String msg,int lineNumber,int charStart,int charEnd){
  errors.set(true);
  annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(null),new Position(charStart,charEnd - charStart)));
}","@Override public void validationError(String msg,int lineNumber,int charStart,int charEnd){
  errors.set(true);
  annotationModel.addProblem(new YangProblem(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart)));
}",0.9851380042462844
134496,"/** 
 * @param node
 * @return
 */
private String getIndexedInfo(ASTNode node){
  QName name=null;
  ElementIndexType indexType=null;
  if (node instanceof TypeReference) {
    name=((TypeReference)node).getType();
    indexType=ElementIndexType.TYPE;
  }
 else   if (node instanceof UsesNode) {
    name=((UsesNode)node).getGrouping();
    indexType=ElementIndexType.GROUPING;
  }
 else   if (node instanceof ModuleImport) {
    ModuleImport mImport=(ModuleImport)node;
    name=new QName(mImport.getName(),mImport.getPrefix(),mImport.getName(),mImport.getRevision());
    indexType=ElementIndexType.MODULE;
  }
 else   if (node instanceof SubModuleInclude) {
    SubModuleInclude include=(SubModuleInclude)node;
    name=new QName(null,null,include.getName(),include.getRevision());
    indexType=ElementIndexType.SUBMODULE;
  }
 else   if (node instanceof BaseReference) {
    name=((BaseReference)node).getType();
    indexType=ElementIndexType.IDENTITY;
  }
  if (name != null) {
    ElementIndexInfo[] search=YangModelManager.search(name.getModule(),name.getRevision(),name.getName(),indexType,null,null);
    if (indexType == ElementIndexType.TYPE && search.length == 0) {
      search=YangModelManager.search(name.getModule(),name.getRevision(),name.getName(),ElementIndexType.IDENTITY,null,null);
    }
    if (search.length > 0) {
      ElementIndexInfo info=search[0];
      StringBuffer buffer=new StringBuffer();
      HTMLPrinter.addSmallHeader(buffer,info.getName());
      if (info.getDescription() != null) {
        HTMLPrinter.addParagraph(buffer,formatValue(info.getDescription()));
      }
      buffer.append(""String_Node_Str"");
      if (info.getType() != ElementIndexType.MODULE && info.getType() != ElementIndexType.SUBMODULE) {
        addValue(buffer,""String_Node_Str"",info.getModule());
      }
      addValue(buffer,""String_Node_Str"",info.getReference());
      addValue(buffer,""String_Node_Str"",info.getStatus());
      addValue(buffer,""String_Node_Str"",info.getRevision());
      addValue(buffer,""String_Node_Str"",info.getNamespace());
      addValue(buffer,""String_Node_Str"",info.getOrganization());
      addValue(buffer,""String_Node_Str"",info.getContact());
      buffer.append(""String_Node_Str"");
      HTMLPrinter.insertPageProlog(buffer,0,getStyleSheet());
      HTMLPrinter.addPageEpilog(buffer);
      return buffer.toString();
    }
  }
  return null;
}","private String getIndexedInfo(ASTNode node){
  QName name=null;
  ElementIndexType indexType=null;
  if (node instanceof TypeReference) {
    name=((TypeReference)node).getType();
    indexType=ElementIndexType.TYPE;
  }
 else   if (node instanceof UsesNode) {
    name=((UsesNode)node).getGrouping();
    indexType=ElementIndexType.GROUPING;
  }
 else   if (node instanceof ModuleImport) {
    ModuleImport mImport=(ModuleImport)node;
    name=new QName(mImport.getName(),mImport.getPrefix(),mImport.getName(),mImport.getRevision());
    indexType=ElementIndexType.MODULE;
  }
 else   if (node instanceof SubModuleInclude) {
    SubModuleInclude include=(SubModuleInclude)node;
    name=new QName(null,null,include.getName(),include.getRevision());
    indexType=ElementIndexType.SUBMODULE;
  }
 else   if (node instanceof BaseReference) {
    name=((BaseReference)node).getType();
    indexType=ElementIndexType.IDENTITY;
  }
  if (name != null) {
    ElementIndexInfo[] search=YangModelManager.search(name.getModule(),name.getRevision(),name.getName(),indexType,null,null);
    if (indexType == ElementIndexType.TYPE && search.length == 0) {
      search=YangModelManager.search(name.getModule(),name.getRevision(),name.getName(),ElementIndexType.IDENTITY,null,null);
    }
    if (search.length > 0) {
      ElementIndexInfo info=search[0];
      StringBuffer buffer=new StringBuffer();
      HTMLPrinter.addSmallHeader(buffer,info.getName());
      if (info.getDescription() != null) {
        HTMLPrinter.addParagraph(buffer,formatValue(info.getDescription()));
      }
      buffer.append(""String_Node_Str"");
      if (info.getType() != ElementIndexType.MODULE && info.getType() != ElementIndexType.SUBMODULE) {
        addValue(buffer,""String_Node_Str"",info.getModule());
      }
      addValue(buffer,""String_Node_Str"",info.getReference());
      addValue(buffer,""String_Node_Str"",info.getStatus());
      addValue(buffer,""String_Node_Str"",info.getRevision());
      addValue(buffer,""String_Node_Str"",info.getNamespace());
      addValue(buffer,""String_Node_Str"",info.getOrganization());
      addValue(buffer,""String_Node_Str"",info.getContact());
      buffer.append(""String_Node_Str"");
      HTMLPrinter.insertPageProlog(buffer,0,getStyleSheet());
      HTMLPrinter.addPageEpilog(buffer);
      return buffer.toString();
    }
  }
  return null;
}",0.9926331298673964
134497,"/** 
 * @param node
 * @return
 */
private String getLocalHoverInfo(ASTNode node){
  StringBuffer buffer=new StringBuffer();
  String name=node.getNodeName();
  if (node instanceof ASTNamedNode) {
    name+=""String_Node_Str"" + ((ASTNamedNode)node).getName();
  }
  HTMLPrinter.addSmallHeader(buffer,name);
  HTMLPrinter.addParagraph(buffer,formatValue(node.getDescription()));
  buffer.append(""String_Node_Str"");
  if (node instanceof Module) {
    Module module=(Module)node;
    addValue(buffer,""String_Node_Str"",module.getNamespace() != null ? module.getNamespace().toASCIIString() : null);
    addValue(buffer,""String_Node_Str"",module.getOrganization() != null ? module.getOrganization().getValue() : null);
    addValue(buffer,""String_Node_Str"",module.getContact() != null ? module.getContact().getValue() : null);
  }
  addValue(buffer,""String_Node_Str"",node.getReference());
  addValue(buffer,""String_Node_Str"",node.getStatus());
  buffer.append(""String_Node_Str"");
  HTMLPrinter.insertPageProlog(buffer,0,getStyleSheet());
  HTMLPrinter.addPageEpilog(buffer);
  return buffer.toString();
}","private String getLocalHoverInfo(ASTNode node){
  StringBuffer buffer=new StringBuffer();
  String name=node.getNodeName();
  if (node instanceof ASTNamedNode) {
    name+=""String_Node_Str"" + ((ASTNamedNode)node).getName();
  }
  HTMLPrinter.addSmallHeader(buffer,name);
  HTMLPrinter.addParagraph(buffer,formatValue(node.getDescription()));
  buffer.append(""String_Node_Str"");
  if (node instanceof Module) {
    Module module=(Module)node;
    addValue(buffer,""String_Node_Str"",module.getNamespace() != null ? module.getNamespace().toASCIIString() : null);
    addValue(buffer,""String_Node_Str"",module.getOrganization() != null ? module.getOrganization().getValue() : null);
    addValue(buffer,""String_Node_Str"",module.getContact() != null ? module.getContact().getValue() : null);
  }
  addValue(buffer,""String_Node_Str"",node.getReference());
  addValue(buffer,""String_Node_Str"",node.getStatus());
  buffer.append(""String_Node_Str"");
  HTMLPrinter.insertPageProlog(buffer,0,getStyleSheet());
  HTMLPrinter.addPageEpilog(buffer);
  return buffer.toString();
}",0.983788791106994
134498,"@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  if (!this.project.isAccessible()) {
    return true;
  }
  final HashSet<IPath> ignoredPath=new HashSet<IPath>();
  final HashSet<IPath> externalJarsPath=new HashSet<IPath>();
  try {
    JavaProject proj=(JavaProject)JavaCore.create(project);
    if (proj != null) {
      IClasspathEntry[] classpath=proj.getResolvedClasspath();
      for (int i=0, length=classpath.length; i < length; i++) {
        IClasspathEntry entry=classpath[i];
        IPath entryPath=entry.getPath();
        IPath output=entry.getOutputLocation();
        if (output != null && !entryPath.equals(output)) {
          ignoredPath.add(output);
        }
      }
      IPackageFragmentRoot[] roots=proj.getAllPackageFragmentRoots();
      for (int i=0, length=roots.length; i < length; i++) {
        IPath entryPath=roots[i].getPath();
        if (entryPath != null && entryPath.toFile().exists() && entryPath.lastSegment().toLowerCase().endsWith(""String_Node_Str"")) {
          externalJarsPath.add(entryPath);
        }
      }
    }
  }
 catch (  JavaModelException e) {
  }
  for (  IPath iPath : externalJarsPath) {
    try (JarFile jarFile=new JarFile(iPath.toFile())){
      ZipEntry entry=jarFile.getEntry(""String_Node_Str"");
      if (entry != null) {
        this.manager.addJarFile(project,iPath);
      }
    }
 catch (    IOException e) {
      YangCorePlugin.log(e);
    }
  }
  try {
    final HashSet<IFile> indexedFiles=new HashSet<IFile>();
    project.accept(new IResourceProxyVisitor(){
      @Override public boolean visit(      IResourceProxy proxy){
        if (IndexAllProject.this.isCancelled) {
          return false;
        }
        if (!ignoredPath.isEmpty() && ignoredPath.contains(proxy.requestFullPath())) {
          return false;
        }
        if (proxy.getType() == IResource.FILE) {
          if (CoreUtil.isYangLikeFileName(proxy.getName())) {
            IFile file=(IFile)proxy.requestResource();
            indexedFiles.add(file);
          }
          return false;
        }
        return true;
      }
    }
,IResource.NONE);
    for (    IFile iFile : indexedFiles) {
      this.manager.addSource(iFile);
    }
  }
 catch (  CoreException e) {
    this.manager.removeIndex(this.containerPath);
    return false;
  }
  return true;
}","@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  if (!this.project.isAccessible()) {
    return true;
  }
  final HashSet<IPath> ignoredPath=new HashSet<IPath>();
  final HashSet<IPath> externalJarsPath=new HashSet<IPath>();
  try {
    JavaProject proj=(JavaProject)JavaCore.create(project);
    if (proj != null) {
      IClasspathEntry[] classpath=proj.getResolvedClasspath();
      for (int i=0, length=classpath.length; i < length; i++) {
        IClasspathEntry entry=classpath[i];
        IPath entryPath=entry.getPath();
        IPath output=entry.getOutputLocation();
        if (output != null && !entryPath.equals(output)) {
          ignoredPath.add(output);
        }
      }
      IPackageFragmentRoot[] roots=proj.getAllPackageFragmentRoots();
      for (int i=0, length=roots.length; i < length; i++) {
        IPath entryPath=roots[i].getPath();
        if (entryPath != null && entryPath.toFile().exists() && entryPath.lastSegment().toLowerCase().endsWith(""String_Node_Str"")) {
          externalJarsPath.add(entryPath);
        }
      }
    }
  }
 catch (  JavaModelException e) {
  }
  for (  IPath iPath : externalJarsPath) {
    try (JarFile jarFile=new JarFile(iPath.toFile())){
      ZipEntry entry=jarFile.getEntry(""String_Node_Str"");
      if (entry != null) {
        this.manager.addJarFile(project,iPath);
      }
    }
 catch (    IOException e) {
      YangCorePlugin.log(e);
    }
  }
  try {
    final HashSet<IFile> indexedFiles=new HashSet<IFile>();
    project.accept(new IResourceProxyVisitor(){
      @Override public boolean visit(      IResourceProxy proxy){
        if (IndexAllProject.this.isCancelled) {
          return false;
        }
        if (!ignoredPath.isEmpty() && ignoredPath.contains(proxy.requestFullPath())) {
          return false;
        }
        if (proxy.getType() == IResource.FILE) {
          if (CoreUtil.isYangLikeFileName(proxy.getName())) {
            IFile file=(IFile)proxy.requestResource();
            indexedFiles.add(file);
          }
          return false;
        }
        return true;
      }
    }
,IResource.NONE);
    for (    IFile iFile : indexedFiles) {
      this.manager.addSource(iFile);
    }
  }
 catch (  CoreException e) {
    this.manager.removeIndexFamily(project);
    return false;
  }
  return true;
}",0.99322521042907
134499,"@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try {
    manager.remove(file);
    System.err.println(toString());
    YangFileInfo info=(YangFileInfo)YangCorePlugin.createYangFile(file).getElementInfo(progressMonitor);
    manager.addModule(info.getModule(),file.getProject(),file.getFullPath(),""String_Node_Str"");
  }
 catch (  YangModelException e) {
  }
  return true;
}","@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try {
    manager.remove(file);
    YangFileInfo info=(YangFileInfo)YangCorePlugin.createYangFile(file).getElementInfo(progressMonitor);
    manager.addModule(info.getModule(),file.getProject(),file.getFullPath(),""String_Node_Str"");
    manager.fileAddedToIndex(file.getFullPath(),file.getModificationStamp());
  }
 catch (  YangModelException e) {
  }
  return true;
}",0.8912213740458015
134500,"@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try (JarFile jarFile=new JarFile(path.toFile())){
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      if (entry.getName().startsWith(""String_Node_Str"") && CoreUtil.isYangLikeFileName(entry.getName())) {
        IPath jarEntryPath=path.append(entry.getName());
        manager.removeIndex(jarEntryPath);
        YangJarEntry element=YangCorePlugin.createJarEntry(path,entry.getName());
        YangFileInfo info=(YangFileInfo)element.getElementInfo(progressMonitor);
        manager.addModule(info.getModule(),project,path,entry.getName());
      }
    }
  }
 catch (  IOException e) {
    YangCorePlugin.log(e);
  }
catch (  YangModelException e) {
    YangCorePlugin.log(e);
  }
  return true;
}","@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try (JarFile jarFile=new JarFile(path.toFile())){
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      if (entry.getName().startsWith(""String_Node_Str"") && CoreUtil.isYangLikeFileName(entry.getName())) {
        IPath jarEntryPath=path.append(entry.getName());
        manager.removeIndex(jarEntryPath);
        YangJarEntry element=YangCorePlugin.createJarEntry(path,entry.getName());
        YangFileInfo info=(YangFileInfo)element.getElementInfo(progressMonitor);
        manager.addModule(info.getModule(),project,path,entry.getName());
      }
    }
    manager.fileAddedToIndex(path,path.toFile().lastModified());
  }
 catch (  IOException e) {
    YangCorePlugin.log(e);
  }
catch (  YangModelException e) {
    YangCorePlugin.log(e);
  }
  return true;
}",0.9673530889000502
134501,"public void addJarFile(IProject project,IPath file){
  request(new IndexJarFileRequest(project,file,this));
}","public void addJarFile(IProject project,IPath file){
  if (idxResources.containsKey(file.toString()) && idxResources.get(file.toString()) == file.toFile().lastModified()) {
    System.err.println(""String_Node_Str"" + file);
    return;
  }
  request(new IndexJarFileRequest(project,file,this));
}",0.5396039603960396
134502,"public synchronized void removeIndex(IPath containerPath){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (containerPath.isPrefixOf(new Path(entry.e))) {
      iterator.remove();
    }
  }
}","public synchronized void removeIndex(IPath containerPath){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (containerPath.isPrefixOf(new Path(entry.e))) {
      iterator.remove();
    }
  }
  idxResources.remove(containerPath.toString());
}",0.9413173652694612
134503,"@Override public boolean accept(File dir,String name){
  return name.startsWith(""String_Node_Str"");
}","@Override public boolean accept(File dir,String name){
  return name.startsWith(""String_Node_Str"") && (cleanAll || !name.startsWith(""String_Node_Str"" + INDEX_VERSION));
}",0.7453874538745388
134504,"public IndexManager(){
  File indexFile=YangCorePlugin.getDefault().getStateLocation().append(""String_Node_Str"").toFile();
  try {
    this.db=DBMaker.newFileDB(indexFile).closeOnJvmShutdown().make();
    this.idxKeywords=db.getTreeSet(""String_Node_Str"");
    if (!idxKeywords.isEmpty() && !(idxKeywords.first() instanceof Fun.Tuple6)) {
      cleanDB(indexFile);
    }
  }
 catch (  Throwable e) {
    cleanDB(indexFile);
  }
}","public IndexManager(){
  File indexFile=YangCorePlugin.getDefault().getStateLocation().append(INDEX_PATH).toFile();
  try {
    initDB(indexFile,false);
    if (!idxKeywords.isEmpty() && !(idxKeywords.first() instanceof Fun.Tuple6)) {
      initDB(indexFile,true);
    }
  }
 catch (  Throwable e) {
    initDB(indexFile,true);
  }
}",0.6990801576872536
134505,"public synchronized void removeIndexFamily(IProject project){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (project.getFullPath().toString().equals(entry.f.getProject())) {
      iterator.remove();
    }
  }
}","public synchronized void removeIndexFamily(IProject project){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (project.getName().equals(entry.f.getProject())) {
      iterator.remove();
    }
  }
}",0.971709717097171
134506,"public synchronized ElementIndexInfo[] search(String module,String revision,String name,ElementIndexType type,IProject project,IPath scope){
  ArrayList<ElementIndexInfo> infos=null;
  for (  Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry : idxKeywords) {
    if (module != null && module.length() > 0 && !module.equals(entry.a)) {
      continue;
    }
    if (revision != null && revision.length() > 0 && !revision.equals(entry.b)) {
      continue;
    }
    if (type != null && type != entry.d) {
      continue;
    }
    if (name != null && name.length() > 0 && !entry.c.startsWith(name)) {
      continue;
    }
    if (project != null && !entry.f.getProject().equals(project.getName())) {
      continue;
    }
    if (scope != null && !scope.isPrefixOf(new Path(entry.e))) {
      continue;
    }
    if (infos == null) {
      infos=new ArrayList<ElementIndexInfo>();
    }
    infos.add(entry.f);
  }
  if (infos != null) {
    return infos.toArray(new ElementIndexInfo[infos.size()]);
  }
  return NO_ELEMENTS;
}","public synchronized ElementIndexInfo[] search(String module,String revision,String name,ElementIndexType type,IProject project,IPath scope){
  ArrayList<ElementIndexInfo> infos=null;
  for (  Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry : idxKeywords) {
    if (module != null && module.length() > 0 && !module.equals(entry.a)) {
      continue;
    }
    if (revision != null && revision.length() > 0 && !revision.equals(entry.b)) {
      continue;
    }
    if (type != null && type != entry.d) {
      continue;
    }
    if (name != null && name.length() > 0 && !entry.c.equals(name)) {
      continue;
    }
    if (project != null && !entry.f.getProject().equals(project.getName())) {
      continue;
    }
    if (scope != null && !scope.isPrefixOf(new Path(entry.e))) {
      continue;
    }
    if (infos == null) {
      infos=new ArrayList<ElementIndexInfo>();
    }
    infos.add(entry.f);
  }
  if (infos != null) {
    return infos.toArray(new ElementIndexInfo[infos.size()]);
  }
  return NO_ELEMENTS;
}",0.9923882017126546
134507,"public void addSource(IFile file){
  request(new IndexFileRequest(file,this));
}","public void addSource(IFile file){
  if (""String_Node_Str"".equals(file.getProjectRelativePath().segment(0))) {
    return;
  }
  String path=file.getFullPath().toString();
  if (idxResources.containsKey(path) && idxResources.get(path) == file.getModificationStamp()) {
    System.err.println(""String_Node_Str"" + file);
    return;
  }
  request(new IndexFileRequest(file,this));
}",0.3478260869565217
134508,"public Object getAdapter(Class key){
  if (projectionSupport != null) {
    Object adapter=projectionSupport.getAdapter(getSourceViewer(),key);
    if (adapter != null) {
      return adapter;
    }
  }
  return super.getAdapter(key);
}","@Override public Object getAdapter(Class key){
  if (projectionSupport != null) {
    Object adapter=projectionSupport.getAdapter(getSourceViewer(),key);
    if (adapter != null) {
      return adapter;
    }
  }
  return super.getAdapter(key);
}",0.979253112033195
134509,"public void projectionEnabled(){
  fFoldingStructureProvider=new YangFoldingStructureProvider(this);
  fFoldingStructureProvider.setDocument(getDocumentProvider().getDocument(getEditorInput()));
  Module module=YangParserUtil.parseYangFile(getDocumentProvider().getDocument(getEditorInput()).get().toCharArray());
  fFoldingStructureProvider.updateFoldingRegions(module);
}","@Override public void projectionEnabled(){
  fFoldingStructureProvider=new YangFoldingStructureProvider(this);
  fFoldingStructureProvider.setDocument(getDocumentProvider().getDocument(getEditorInput()));
  Module module=YangParserUtil.parseYangFile(getDocumentProvider().getDocument(getEditorInput()).get().toCharArray());
  fFoldingStructureProvider.updateFoldingRegions(module);
}",0.9867724867724867
134510,"@Override public void dispose(){
  colorManager.dispose();
  super.dispose();
  IEditorInput input=getEditorInput();
  if (input != null && input instanceof IFileEditorInput) {
    IFile file=((IFileEditorInput)input).getFile();
    if (file != null) {
      try {
        YangModelManager.getYangModelManager().removeInfoAndChildren(YangCorePlugin.createYangFile(file));
        YangModelManager.getIndexManager().addSource(file);
      }
 catch (      YangModelException e) {
      }
    }
  }
}","@Override public void dispose(){
  colorManager.dispose();
  super.dispose();
  IEditorInput input=getEditorInput();
  if (input != null && input instanceof IFileEditorInput) {
    IFile file=((IFileEditorInput)input).getFile();
    if (file != null) {
      try {
        YangModelManager.getYangModelManager().removeInfoAndChildren(YangCorePlugin.createYangFile(file));
        YangModelManager.getIndexManager().addWorkingCopy(file);
      }
 catch (      YangModelException e) {
      }
    }
  }
}",0.982982982982983
134511,"@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try {
    manager.remove(file);
    YangFileInfo info=(YangFileInfo)YangCorePlugin.createYangFile(file).getElementInfo(progressMonitor);
    manager.addModule(info.getModule(),file.getProject(),file.getFullPath(),""String_Node_Str"");
    manager.fileAddedToIndex(file.getFullPath(),file.getModificationStamp());
  }
 catch (  YangModelException e) {
  }
  return true;
}","@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try {
    manager.remove(file);
    YangFileInfo info=(YangFileInfo)YangCorePlugin.createYangFile(file).getElementInfo(progressMonitor);
    manager.addModule(info.getModule(),file.getProject(),file.getFullPath(),""String_Node_Str"");
    manager.fileAddedToIndex(file.getProject(),file.getFullPath(),file.getModificationStamp());
  }
 catch (  YangModelException e) {
  }
  return true;
}",0.983754512635379
134512,"@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try (JarFile jarFile=new JarFile(path.toFile())){
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      if (entry.getName().startsWith(""String_Node_Str"") && CoreUtil.isYangLikeFileName(entry.getName())) {
        IPath jarEntryPath=path.append(entry.getName());
        manager.removeIndex(jarEntryPath);
        YangJarEntry element=YangCorePlugin.createJarEntry(path,entry.getName());
        YangFileInfo info=(YangFileInfo)element.getElementInfo(progressMonitor);
        manager.addModule(info.getModule(),project,path,entry.getName());
      }
    }
    manager.fileAddedToIndex(path,path.toFile().lastModified());
  }
 catch (  IOException e) {
    YangCorePlugin.log(e);
  }
catch (  YangModelException e) {
    YangCorePlugin.log(e);
  }
  return true;
}","@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try (JarFile jarFile=new JarFile(path.toFile())){
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      if (entry.getName().startsWith(""String_Node_Str"") && CoreUtil.isYangLikeFileName(entry.getName())) {
        IPath jarEntryPath=path.append(entry.getName());
        manager.removeIndex(project,jarEntryPath);
        YangJarEntry element=YangCorePlugin.createJarEntry(path,entry.getName());
        YangFileInfo info=(YangFileInfo)element.getElementInfo(progressMonitor);
        manager.addModule(info.getModule(),project,path,entry.getName());
      }
    }
    manager.fileAddedToIndex(project,path,path.toFile().lastModified());
  }
 catch (  IOException e) {
    YangCorePlugin.log(e);
  }
catch (  YangModelException e) {
    YangCorePlugin.log(e);
  }
  return true;
}",0.9922779922779924
134513,"/** 
 * Inits database by cleans old version of DB and recreate current index file if necessary.
 * @param indexFile index file
 * @param cleanAll if <code>true</code> remove old version and current index also otherwiseremove only old version of index DB.
 */
private void initDB(File indexFile,final boolean cleanAll){
  if (this.db != null) {
    this.db.close();
  }
  File[] files=indexFile.getParentFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(""String_Node_Str"") && (cleanAll || !name.startsWith(""String_Node_Str"" + INDEX_VERSION));
    }
  }
);
  if (files != null) {
    for (    File file : files) {
      file.delete();
    }
  }
  this.db=DBMaker.newFileDB(indexFile).closeOnJvmShutdown().make();
  this.idxKeywords=db.getTreeSet(""String_Node_Str"");
  this.idxResources=db.getTreeMap(""String_Node_Str"");
  indexAllProjects();
}","/** 
 * Inits database by cleans old version of DB and recreate current index file if necessary.
 * @param indexFile index file
 * @param cleanAll if <code>true</code> remove old version and current index also otherwiseremove only old version of index DB.
 */
private void initDB(File indexFile,final boolean cleanAll){
  if (this.db != null) {
    this.db.close();
  }
  File[] files=indexFile.getParentFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(""String_Node_Str"") && (cleanAll || !name.startsWith(""String_Node_Str"" + INDEX_VERSION));
    }
  }
);
  if (files != null) {
    for (    File file : files) {
      file.delete();
    }
  }
  this.db=DBMaker.newFileDB(indexFile).closeOnJvmShutdown().make();
  this.idxKeywords=db.getTreeSet(""String_Node_Str"");
  this.idxResources=db.getTreeSet(""String_Node_Str"");
  indexAllProjects();
}",0.9967637540453076
134514,"public void addJarFile(IProject project,IPath file){
  if (idxResources.containsKey(file.toString()) && idxResources.get(file.toString()) == file.toFile().lastModified()) {
    System.err.println(""String_Node_Str"" + file);
    return;
  }
  request(new IndexJarFileRequest(project,file,this));
}","public void addJarFile(IProject project,IPath file){
  Iterable<Long> it=Fun.filter(idxResources,project.getName(),file.toString());
  for (  Long modStamp : it) {
    if (modStamp == file.toFile().lastModified()) {
      System.err.println(""String_Node_Str"" + file);
      return;
    }
  }
  request(new IndexJarFileRequest(project,file,this));
}",0.702954898911353
134515,"public synchronized void removeIndex(IPath containerPath){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (containerPath.isPrefixOf(new Path(entry.e))) {
      iterator.remove();
    }
  }
  idxResources.remove(containerPath.toString());
}","public synchronized void removeIndex(IProject project,IPath containerPath){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (project.getName().equals(entry.f.getProject()) && containerPath.isPrefixOf(new Path(entry.e))) {
      iterator.remove();
    }
  }
  Iterator<Tuple3<String,String,Long>> it=idxResources.iterator();
  while (it.hasNext()) {
    Tuple3<String,String,Long> idxr=it.next();
    if (project.getName().equals(idxr.a) && containerPath.isPrefixOf(new Path(idxr.b))) {
      it.remove();
    }
  }
}",0.7206896551724138
134516,"public synchronized void remove(IFile file){
  removeIndex(file.getFullPath());
}","public synchronized void remove(IFile file){
  removeIndex(file.getProject(),file.getFullPath());
}",0.9
134517,"protected void fileAddedToIndex(IPath path,long modificationStamp){
  idxResources.put(path.toString(),modificationStamp);
}","protected void fileAddedToIndex(IProject project,IPath path,long modificationStamp){
  idxResources.add(Fun.t3(project.getName(),path.toString(),modificationStamp));
}",0.845360824742268
134518,"public synchronized void removeIndexFamily(IProject project){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (project.getName().equals(entry.f.getProject())) {
      iterator.remove();
    }
  }
}","public synchronized void removeIndexFamily(IProject project){
  Iterator<Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo>> iterator=idxKeywords.iterator();
  while (iterator.hasNext()) {
    Tuple6<String,String,String,ElementIndexType,String,ElementIndexInfo> entry=iterator.next();
    if (project.getName().equals(entry.f.getProject())) {
      iterator.remove();
    }
  }
  Iterator<Long> it=Fun.filter(idxResources,project.getName(),null).iterator();
  while (it.hasNext()) {
    it.next();
    it.remove();
  }
}",0.8498402555910544
134519,"public void addSource(IFile file){
  if (""String_Node_Str"".equals(file.getProjectRelativePath().segment(0))) {
    return;
  }
  String path=file.getFullPath().toString();
  if (idxResources.containsKey(path) && idxResources.get(path) == file.getModificationStamp()) {
    System.err.println(""String_Node_Str"" + file);
    return;
  }
  request(new IndexFileRequest(file,this));
}","public void addSource(IFile file){
  if (""String_Node_Str"".equals(file.getProjectRelativePath().segment(0))) {
    return;
  }
  Iterable<Long> it=Fun.filter(idxResources,file.getProject().getName(),file.getFullPath().toString());
  for (  Long modStamp : it) {
    if (modStamp == file.getModificationStamp()) {
      System.err.println(""String_Node_Str"" + file);
      return;
    }
  }
  request(new IndexFileRequest(file,this));
}",0.7199017199017199
134520,"@Override public Set<IProject> build(int kind,IProgressMonitor monitor) throws Exception {
  IMaven maven=MavenPlugin.getMaven();
  BuildContext buildContext=getBuildContext();
  File source=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),YangM2EPlugin.YANG_FILES_ROOT_DIR,File.class,monitor);
  if (source == null) {
    source=new File(getSession().getCurrentProject().getBasedir(),YangM2EPlugin.YANG_FILES_ROOT_DIR_DEFAULT);
  }
  Scanner ds=buildContext.newScanner(source);
  ds.scan();
  String[] includedFiles=ds.getIncludedFiles();
  if (includedFiles == null || includedFiles.length <= 0) {
    return null;
  }
  getMavenProjectFacade().getProject().deleteMarkers(YangCorePlugin.YANGIDE_PROBLEM_MARKER,true,IResource.DEPTH_INFINITE);
  for (  String path : includedFiles) {
    final IFile ifile=YangCorePlugin.getIFileFromFile(new File(ds.getBasedir(),path));
    if (ifile != null) {
      YangParserUtil.validateYangFile(YangCorePlugin.createYangFile(ifile).getBuffer().getContents().toCharArray(),ifile.getProject(),new IYangValidationListener(){
        @Override public void validationError(        String msg,        int lineNumber,        int charStart,        int charEnd){
          YangCorePlugin.createProblemMarker(ifile,msg,lineNumber,charStart,charEnd);
        }
        @Override public void syntaxError(        String msg,        int lineNumber,        int charStart,        int charEnd){
          YangCorePlugin.createProblemMarker(ifile,msg,lineNumber,charStart,charEnd);
        }
      }
);
    }
  }
  Set<File> outputDirs=new HashSet<>();
  YangGeneratorConfiguration[] confs=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),YangM2EPlugin.YANG_CODE_GENERATORS,YangGeneratorConfiguration[].class,monitor);
  if (confs != null) {
    for (    YangGeneratorConfiguration conf : confs) {
      if (conf.getOutputBaseDir() != null) {
        outputDirs.add(conf.getOutputBaseDir());
      }
    }
  }
  boolean isCleanRequired=YangUIPlugin.getDefault().getPreferenceStore().getBoolean(YangPreferenceConstants.M2E_PLUGIN_CLEAN_TARGET);
  if (isCleanRequired) {
    for (    File outputDir : outputDirs) {
      IContainer[] containers=ResourcesPlugin.getWorkspace().getRoot().findContainersForLocationURI(URIUtil.toURI(outputDir.getAbsolutePath()));
      if (containers != null && containers.length > 0) {
        containers[0].delete(true,monitor);
      }
    }
  }
  Set<IProject> result=super.build(kind,monitor);
  for (  Throwable ex : getSession().getResult().getExceptions()) {
    YangCorePlugin.log(ex);
  }
  for (  File outputDir : outputDirs) {
    buildContext.refresh(outputDir);
  }
  return result;
}","@Override public Set<IProject> build(int kind,IProgressMonitor monitor) throws Exception {
  IMaven maven=MavenPlugin.getMaven();
  BuildContext buildContext=getBuildContext();
  File source=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),YangM2EPlugin.YANG_FILES_ROOT_DIR,File.class,monitor);
  if (source == null) {
    source=new File(getSession().getCurrentProject().getBasedir(),YangM2EPlugin.YANG_FILES_ROOT_DIR_DEFAULT);
  }
  Scanner ds=buildContext.newScanner(source);
  ds.scan();
  String[] includedFiles=ds.getIncludedFiles();
  if (includedFiles == null || includedFiles.length <= 0) {
    return null;
  }
  getMavenProjectFacade().getProject().deleteMarkers(YangCorePlugin.YANGIDE_PROBLEM_MARKER,true,IResource.DEPTH_INFINITE);
  if (kind == FULL_BUILD) {
    YangModelManager.getIndexManager().indexAll(getMavenProjectFacade().getProject());
    try {
      while (YangModelManager.getIndexManager().awaitingJobsCount() > 0) {
        Thread.sleep(100);
      }
    }
 catch (    InterruptedException e) {
    }
  }
  for (  String path : includedFiles) {
    final IFile ifile=YangCorePlugin.getIFileFromFile(new File(ds.getBasedir(),path));
    if (ifile != null) {
      YangParserUtil.validateYangFile(YangCorePlugin.createYangFile(ifile).getBuffer().getContents().toCharArray(),ifile.getProject(),new IYangValidationListener(){
        @Override public void validationError(        String msg,        int lineNumber,        int charStart,        int charEnd){
          YangCorePlugin.createProblemMarker(ifile,msg,lineNumber,charStart,charEnd);
        }
        @Override public void syntaxError(        String msg,        int lineNumber,        int charStart,        int charEnd){
          YangCorePlugin.createProblemMarker(ifile,msg,lineNumber,charStart,charEnd);
        }
      }
);
    }
  }
  Set<File> outputDirs=new HashSet<>();
  YangGeneratorConfiguration[] confs=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),YangM2EPlugin.YANG_CODE_GENERATORS,YangGeneratorConfiguration[].class,monitor);
  if (confs != null) {
    for (    YangGeneratorConfiguration conf : confs) {
      if (conf.getOutputBaseDir() != null) {
        outputDirs.add(conf.getOutputBaseDir());
      }
    }
  }
  boolean isCleanRequired=YangUIPlugin.getDefault().getPreferenceStore().getBoolean(YangPreferenceConstants.M2E_PLUGIN_CLEAN_TARGET);
  if (isCleanRequired) {
    for (    File outputDir : outputDirs) {
      IContainer[] containers=ResourcesPlugin.getWorkspace().getRoot().findContainersForLocationURI(URIUtil.toURI(outputDir.getAbsolutePath()));
      if (containers != null && containers.length > 0) {
        containers[0].delete(true,monitor);
      }
    }
  }
  Set<IProject> result=super.build(kind,monitor);
  for (  Throwable ex : getSession().getResult().getExceptions()) {
    YangCorePlugin.log(ex);
  }
  for (  File outputDir : outputDirs) {
    buildContext.refresh(outputDir);
  }
  return result;
}",0.9493604345540564
134521,"public boolean updateCurrentDeltaAndIndex(IResourceDelta delta){
  YangElement element;
switch (delta.getKind()) {
case IResourceDelta.ADDED:
    element=YangCorePlugin.create(delta.getResource());
  updateIndex(element,delta);
elementAdded(element,delta);
return false;
case IResourceDelta.REMOVED:
element=YangCorePlugin.create(delta.getResource());
updateIndex(element,delta);
elementRemoved(element,delta);
return false;
case IResourceDelta.CHANGED:
int flags=delta.getFlags();
if ((flags & IResourceDelta.CONTENT) != 0 || (flags & IResourceDelta.ENCODING) != 0) {
element=YangCorePlugin.create(delta.getResource());
if (element == null) {
return false;
}
updateIndex(element,delta);
contentChanged(element);
}
 else if (delta.getResource().getType() == IResource.PROJECT) {
if ((flags & IResourceDelta.OPEN) != 0) {
IProject res=(IProject)delta.getResource();
element=YangCorePlugin.create(res);
if (res.isOpen()) {
addToParentInfo(element);
this.manager.indexManager.indexAll(res);
}
 else {
close(element);
removeFromParentInfo(element);
this.manager.indexManager.discardJobs(element.getName());
this.manager.indexManager.removeIndexFamily(res);
}
return false;
}
}
return true;
}
return true;
}","public boolean updateCurrentDeltaAndIndex(IResourceDelta delta){
  YangElement element;
switch (delta.getKind()) {
case IResourceDelta.ADDED:
    element=YangCorePlugin.create(delta.getResource());
  updateIndex(element,delta);
elementAdded(element,delta);
return false;
case IResourceDelta.REMOVED:
element=YangCorePlugin.create(delta.getResource());
updateIndex(element,delta);
elementRemoved(element,delta);
return false;
case IResourceDelta.CHANGED:
int flags=delta.getFlags();
if ((flags & IResourceDelta.CONTENT) != 0 || (flags & IResourceDelta.ENCODING) != 0) {
element=YangCorePlugin.create(delta.getResource());
if (element == null) {
return false;
}
updateIndex(element,delta);
contentChanged(element);
}
 else if (delta.getResource().getType() == IResource.PROJECT) {
if ((flags & IResourceDelta.OPEN) != 0) {
IProject res=(IProject)delta.getResource();
element=YangCorePlugin.create(res);
if (res.isOpen()) {
addToParentInfo(element);
this.manager.indexManager.indexAll(res);
}
 else {
close(element);
removeFromParentInfo(element);
this.manager.indexManager.discardJobs(element.getName());
this.manager.indexManager.removeIndexFamily(res);
}
return false;
}
 else {
IJavaProject javaProject=JavaCore.create((IProject)delta.getResource());
if (javaProject.isOpen()) {
try {
IClasspathEntry[] classpath=javaProject.getRawClasspath();
YangProject yangProject=(YangProject)YangCorePlugin.create(delta.getResource());
if (yangProject.isClasspathChanged(classpath)) {
yangProject.makeConsistent(null);
this.manager.indexManager.indexAll((IProject)delta.getResource());
}
}
 catch (YangModelException|JavaModelException e) {
YangCorePlugin.log(e);
}
}
}
}
return true;
}
return true;
}",0.8143795368129969
134522,"@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try {
    manager.remove(file);
    System.err.println(toString());
    YangFileInfo info=(YangFileInfo)YangCorePlugin.createYangFile(file).getElementInfo(progressMonitor);
    manager.addModule(info.getModule(),file.getProject(),file.getFullPath(),""String_Node_Str"");
  }
 catch (  YangModelException e) {
    YangCorePlugin.log(e);
  }
  return true;
}","@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  try {
    manager.remove(file);
    System.err.println(toString());
    YangFileInfo info=(YangFileInfo)YangCorePlugin.createYangFile(file).getElementInfo(progressMonitor);
    manager.addModule(info.getModule(),file.getProject(),file.getFullPath(),""String_Node_Str"");
  }
 catch (  YangModelException e) {
  }
  return true;
}",0.9448209099709584
134523,"public void addModule(Module module,final IProject project,final IPath path,final String entry){
  if (module != null && module.getRevision() != null && module.getRevision() != null) {
    final String revision=module.getRevision();
    final String moduleName=module.getName();
    module.accept(new ASTVisitor(){
      @Override public boolean visit(      Module module){
        addElementIndexInfo(new ElementIndexInfo(module,moduleName,revision,ElementIndexType.MODULE,project,path,entry));
        return true;
      }
      @Override public boolean visit(      SubModule module){
        addElementIndexInfo(new ElementIndexInfo(module,moduleName,revision,ElementIndexType.SUBMODULE,project,path,entry));
        return true;
      }
      @Override public boolean visit(      TypeDefinition typeDefinition){
        addElementIndexInfo(new ElementIndexInfo(typeDefinition,moduleName,revision,ElementIndexType.TYPE,project,path,entry));
        return true;
      }
      @Override public boolean visit(      GroupingDefinition groupingDefinition){
        addElementIndexInfo(new ElementIndexInfo(groupingDefinition,moduleName,revision,ElementIndexType.GROUPING,project,path,entry));
        return true;
      }
    }
);
  }
}","public void addModule(Module module,final IProject project,final IPath path,final String entry){
  if (module != null && module.getRevision() != null && module.getRevision() != null) {
    final String revision=module.getRevision();
    final String moduleName=module.getName();
    module.accept(new ASTVisitor(){
      @Override public boolean visit(      Module module){
        addElementIndexInfo(new ElementIndexInfo(module,moduleName,revision,ElementIndexType.MODULE,project,path,entry));
        return true;
      }
      @Override public boolean visit(      SubModule module){
        addElementIndexInfo(new ElementIndexInfo(module,moduleName,revision,ElementIndexType.SUBMODULE,project,path,entry));
        return true;
      }
      @Override public boolean visit(      TypeDefinition typeDefinition){
        addElementIndexInfo(new ElementIndexInfo(typeDefinition,moduleName,revision,ElementIndexType.TYPE,project,path,entry));
        return true;
      }
      @Override public boolean visit(      GroupingDefinition groupingDefinition){
        addElementIndexInfo(new ElementIndexInfo(groupingDefinition,moduleName,revision,ElementIndexType.GROUPING,project,path,entry));
        return true;
      }
    }
);
    db.commit();
  }
}",0.9931644551668676
134524,"public synchronized void addElementIndexInfo(ElementIndexInfo info){
  System.err.println(""String_Node_Str"" + info.getModule() + ""String_Node_Str""+ info.getRevision()+ ""String_Node_Str""+ info.getName()+ ""String_Node_Str""+ info.getType());
  idxKeywords.add(Fun.t6(info.getModule(),info.getRevision(),info.getName(),info.getType(),info.getPath(),info));
  db.commit();
}","public synchronized void addElementIndexInfo(ElementIndexInfo info){
  System.err.println(""String_Node_Str"" + info.getModule() + ""String_Node_Str""+ info.getRevision()+ ""String_Node_Str""+ info.getName()+ ""String_Node_Str""+ info.getType());
  idxKeywords.add(Fun.t6(info.getModule(),info.getRevision(),info.getName(),info.getType(),info.getPath(),info));
}",0.979253112033195
134525,"public IResource getResource(){
  return null;
}","@Override public IResource getResource(){
  return null;
}",0.9056603773584906
134526,"public String getName(){
  return getPath().toString();
}","@Override public String getName(){
  return getPath().toString();
}",0.9193548387096774
134527,"public IBuffer getBuffer() throws YangModelException {
  if (hasBuffer()) {
    Object info=getElementInfo(null);
    IBuffer buffer=getBufferManager().getBuffer(this);
    if (buffer == null) {
      buffer=openBuffer(null,info);
    }
    if (buffer instanceof NullBuffer) {
      return null;
    }
    return buffer;
  }
 else {
    return null;
  }
}","@Override public IBuffer getBuffer() throws YangModelException {
  if (hasBuffer()) {
    Object info=getElementInfo(null);
    IBuffer buffer=getBufferManager().getBuffer(this);
    if (buffer == null) {
      buffer=openBuffer(null,info);
    }
    if (buffer instanceof NullBuffer) {
      return null;
    }
    return buffer;
  }
 else {
    return null;
  }
}",0.9861111111111112
134528,"public void save(IProgressMonitor progress,boolean force) throws YangModelException {
  if (isReadOnly()) {
    throw new YangModelException(""String_Node_Str"");
  }
  IBuffer buf=getBuffer();
  if (buf != null) {
    buf.save(progress,force);
    makeConsistent(progress);
  }
}","@Override public void save(IProgressMonitor progress,boolean force) throws YangModelException {
  if (isReadOnly()) {
    throw new YangModelException(""String_Node_Str"");
  }
  IBuffer buf=getBuffer();
  if (buf != null) {
    buf.save(progress,force);
    makeConsistent(progress);
  }
}",0.9823321554770318
134529,"public boolean isStructureKnown() throws YangModelException {
  return false;
}","@Override public boolean isStructureKnown() throws YangModelException {
  return false;
}",0.9404761904761904
134530,"public void bufferChanged(BufferChangedEvent event){
  if (event.getBuffer().isClosed()) {
    YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().remove(this);
    getBufferManager().removeBuffer(event.getBuffer());
  }
 else {
    YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().add(this);
  }
}","@Override public void bufferChanged(BufferChangedEvent event){
  if (event.getBuffer().isClosed()) {
    YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().remove(this);
    getBufferManager().removeBuffer(event.getBuffer());
  }
 else {
    YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().add(this);
  }
}",0.9857142857142858
134531,"public boolean isReadOnly(){
  return false;
}","@Override public boolean isReadOnly(){
  return false;
}",0.9019607843137256
134532,"public IPath getPath(){
  return null;
}","@Override public IPath getPath(){
  return null;
}",0.8888888888888888
134533,"public IOpenable getPrimaryElement(){
  return null;
}","@Override public IOpenable getPrimaryElement(){
  return null;
}",0.9152542372881356
134534,"public void close() throws YangModelException {
  if (hasBuffer()) {
    IBuffer buffer=getBufferManager().getBuffer(this);
    if (buffer != null) {
      buffer.close();
      buffer.removeBufferChangedListener(this);
    }
  }
  YangModelManager.getYangModelManager().removeInfoAndChildren(this);
}","@Override public void close() throws YangModelException {
  if (hasBuffer()) {
    IBuffer buffer=getBufferManager().getBuffer(this);
    if (buffer != null) {
      buffer.close();
      buffer.removeBufferChangedListener(this);
    }
  }
  YangModelManager.getYangModelManager().removeInfoAndChildren(this);
}",0.9836601307189542
134535,"public boolean hasUnsavedChanges() throws YangModelException {
  return false;
}","@Override public boolean hasUnsavedChanges() throws YangModelException {
  return false;
}",0.9411764705882352
134536,"public IOpenable getParent(){
  return this.parent;
}","@Override public IOpenable getParent(){
  return this.parent;
}",0.913793103448276
134537,"protected void generateInfos(OpenableElementInfo info,HashMap<IOpenable,OpenableElementInfo> newElements,IProgressMonitor monitor) throws YangModelException {
  openAncestors(newElements,monitor);
  IResource underlResource=getResource();
  IStatus status=validateExistence(underlResource);
  if (!status.isOK()) {
    throw new YangModelException(status.getException(),status.getCode());
  }
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  newElements.put(this,info);
  try {
    OpenableElementInfo openableElementInfo=(OpenableElementInfo)info;
    boolean isStructureKnown=buildStructure(openableElementInfo,monitor,newElements,underlResource);
    openableElementInfo.setIsStructureKnown(isStructureKnown);
  }
 catch (  YangModelException e) {
    newElements.remove(this);
    throw e;
  }
  YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().remove(this);
}","protected void generateInfos(OpenableElementInfo info,HashMap<IOpenable,OpenableElementInfo> newElements,IProgressMonitor monitor) throws YangModelException {
  openAncestors(newElements,monitor);
  IResource underlResource=getResource();
  IStatus status=validateExistence(underlResource);
  if (!status.isOK()) {
    if (status.getException() != null) {
      throw new YangModelException(status.getException(),status.getCode());
    }
 else {
      throw new YangModelException(status.getMessage());
    }
  }
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  newElements.put(this,info);
  try {
    OpenableElementInfo openableElementInfo=info;
    boolean isStructureKnown=buildStructure(openableElementInfo,monitor,newElements,underlResource);
    openableElementInfo.setIsStructureKnown(isStructureKnown);
  }
 catch (  YangModelException e) {
    newElements.remove(this);
    throw e;
  }
  YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().remove(this);
}",0.8507840161861406
134538,"public boolean isOpen(){
  return YangModelManager.getYangModelManager().getInfo(this) != null;
}","@Override public boolean isOpen(){
  return YangModelManager.getYangModelManager().getInfo(this) != null;
}",0.9509803921568628
134539,"public String toStringWithAncestors(){
  StringBuffer sb=new StringBuffer(getName());
  IOpenable p=getParent();
  if (p != null) {
    sb.append(""String_Node_Str"").append(p.toStringWithAncestors()).append(""String_Node_Str"");
  }
  return sb.toString();
}","@Override public String toStringWithAncestors(){
  StringBuffer sb=new StringBuffer(getName());
  IOpenable p=getParent();
  if (p != null) {
    sb.append(""String_Node_Str"").append(p.toStringWithAncestors()).append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9807692307692308
134540,"public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (this.parent == null) {
    return super.equals(o);
  }
  YangElement other=(YangElement)o;
  return getName().equals(other.getName()) && this.parent.equals(other.parent);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (this.parent == null) {
    return super.equals(o);
  }
  YangElement other=(YangElement)o;
  return getName().equals(other.getName()) && this.parent.equals(other.parent);
}",0.98046875
134541,"public boolean exists(){
  try {
    getElementInfo(null);
    return true;
  }
 catch (  YangModelException e) {
  }
  return false;
}","@Override public boolean exists(){
  try {
    getElementInfo(null);
    return true;
  }
 catch (  YangModelException e) {
  }
  return false;
}",0.9642857142857144
134542,"public void makeConsistent(IProgressMonitor progress) throws YangModelException {
}","@Override public void makeConsistent(IProgressMonitor progress) throws YangModelException {
}",0.9431818181818182
134543,"public void open(IProgressMonitor progress) throws YangModelException {
  getElementInfo(progress);
}","@Override public void open(IProgressMonitor progress) throws YangModelException {
  getElementInfo(progress);
}",0.9528301886792452
134544,"public boolean isConsistent() throws YangModelException {
  return !YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().contains(this);
}","@Override public boolean isConsistent() throws YangModelException {
  return !YangModelManager.getYangModelManager().getElementsOutOfSynchWithBuffers().contains(this);
}",0.9695121951219512
134545,"@Override protected boolean buildStructure(OpenableElementInfo info,IProgressMonitor pm,Map<IOpenable,OpenableElementInfo> newElements,IResource underlyingResource) throws YangModelException {
  final HashSet<IResource> resources=new HashSet<IResource>();
  final HashSet<IPath> externalJarsPath=new HashSet<IPath>();
  try {
    project.accept(new IResourceVisitor(){
      @Override public boolean visit(      IResource resource) throws CoreException {
        if (CoreUtil.isYangLikeFileName(resource.getName())) {
          resources.add(resource.getParent());
        }
        return true;
      }
    }
);
    IClasspathEntry[] classpath=JavaCore.create(project).getResolvedClasspath(true);
    for (int i=0, length=classpath.length; i < length; i++) {
      IClasspathEntry entry=classpath[i];
      IPath entryPath=entry.getPath();
      if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
        externalJarsPath.add(entryPath);
      }
    }
  }
 catch (  CoreException e) {
    throw new YangModelException(e);
  }
  ArrayList<IOpenable> result=new ArrayList<IOpenable>();
  for (  IResource resource : resources) {
    if (resource.getType() == IResource.FOLDER) {
      result.add(new YangFolder(resource,this));
    }
  }
  for (  IPath iPath : externalJarsPath) {
    try (JarFile jarFile=new JarFile(iPath.toFile())){
      ZipEntry entry=jarFile.getEntry(""String_Node_Str"");
      if (entry != null) {
        result.add(new YangJarFile(iPath,this));
      }
    }
 catch (    IOException e) {
      YangCorePlugin.log(e);
    }
  }
  info.setChildren(result.toArray(new IOpenable[result.size()]));
  return true;
}","@Override protected boolean buildStructure(OpenableElementInfo info,IProgressMonitor pm,Map<IOpenable,OpenableElementInfo> newElements,IResource underlyingResource) throws YangModelException {
  final HashSet<IResource> resources=new HashSet<IResource>();
  final HashSet<IPath> externalJarsPath=new HashSet<IPath>();
  IJavaProject javaProject=JavaCore.create(project);
  try {
    project.accept(new IResourceVisitor(){
      @Override public boolean visit(      IResource resource) throws CoreException {
        if (CoreUtil.isYangLikeFileName(resource.getName())) {
          resources.add(resource.getParent());
        }
        return true;
      }
    }
);
    if (javaProject.isOpen()) {
      ((YangProjectInfo)info).setClasspath(javaProject.getRawClasspath());
      IClasspathEntry[] classpath=javaProject.getResolvedClasspath(true);
      for (int i=0, length=classpath.length; i < length; i++) {
        IClasspathEntry entry=classpath[i];
        IPath entryPath=entry.getPath();
        if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
          externalJarsPath.add(entryPath);
        }
      }
    }
  }
 catch (  CoreException e) {
    throw new YangModelException(e);
  }
  ArrayList<IOpenable> result=new ArrayList<IOpenable>();
  for (  IResource resource : resources) {
    if (resource.getType() == IResource.FOLDER) {
      result.add(new YangFolder(resource,this));
    }
  }
  for (  IPath iPath : externalJarsPath) {
    try (JarFile jarFile=new JarFile(iPath.toFile())){
      ZipEntry entry=jarFile.getEntry(""String_Node_Str"");
      if (entry != null) {
        result.add(new YangJarFile(iPath,this));
      }
    }
 catch (    IOException e) {
      YangCorePlugin.log(e);
    }
  }
  info.setChildren(result.toArray(new IOpenable[result.size()]));
  return javaProject.isOpen();
}",0.9160657629074128
134546,"@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  if (!this.project.isAccessible()) {
    return true;
  }
  final HashSet<IPath> ignoredPath=new HashSet<IPath>();
  final HashSet<IPath> externalJarsPath=new HashSet<IPath>();
  try {
    JavaProject proj=(JavaProject)JavaCore.create(project);
    if (proj != null) {
      IClasspathEntry[] classpath=proj.getResolvedClasspath();
      for (int i=0, length=classpath.length; i < length; i++) {
        IClasspathEntry entry=classpath[i];
        IPath entryPath=entry.getPath();
        if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
          externalJarsPath.add(entryPath);
        }
        IPath output=entry.getOutputLocation();
        if (output != null && !entryPath.equals(output)) {
          ignoredPath.add(output);
        }
      }
    }
  }
 catch (  JavaModelException e) {
  }
  for (  IPath iPath : externalJarsPath) {
    try (JarFile jarFile=new JarFile(iPath.toFile())){
      ZipEntry entry=jarFile.getEntry(""String_Node_Str"");
      if (entry != null) {
        this.manager.addJarFile(project,iPath);
      }
    }
 catch (    IOException e) {
      YangCorePlugin.log(e);
    }
  }
  try {
    final HashSet<IFile> indexedFiles=new HashSet<IFile>();
    project.accept(new IResourceProxyVisitor(){
      @Override public boolean visit(      IResourceProxy proxy){
        if (IndexAllProject.this.isCancelled) {
          return false;
        }
        if (!ignoredPath.isEmpty() && ignoredPath.contains(proxy.requestFullPath())) {
          return false;
        }
        if (proxy.getType() == IResource.FILE) {
          if (CoreUtil.isYangLikeFileName(proxy.getName())) {
            IFile file=(IFile)proxy.requestResource();
            indexedFiles.add(file);
          }
          return false;
        }
        return true;
      }
    }
,IResource.NONE);
    for (    IFile iFile : indexedFiles) {
      this.manager.addSource(iFile);
    }
  }
 catch (  CoreException e) {
    this.manager.removeIndex(this.containerPath);
    return false;
  }
  return true;
}","@Override public boolean execute(IProgressMonitor progressMonitor){
  if (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) {
    return true;
  }
  if (!this.project.isAccessible()) {
    return true;
  }
  final HashSet<IPath> ignoredPath=new HashSet<IPath>();
  final HashSet<IPath> externalJarsPath=new HashSet<IPath>();
  try {
    JavaProject proj=(JavaProject)JavaCore.create(project);
    if (proj != null) {
      IClasspathEntry[] classpath=proj.getResolvedClasspath();
      for (int i=0, length=classpath.length; i < length; i++) {
        IClasspathEntry entry=classpath[i];
        IPath entryPath=entry.getPath();
        IPath output=entry.getOutputLocation();
        if (output != null && !entryPath.equals(output)) {
          ignoredPath.add(output);
        }
      }
      IPackageFragmentRoot[] roots=proj.getAllPackageFragmentRoots();
      for (int i=0, length=roots.length; i < length; i++) {
        IPath entryPath=roots[i].getPath();
        if (entryPath != null && entryPath.toFile().exists() && entryPath.lastSegment().toLowerCase().endsWith(""String_Node_Str"")) {
          externalJarsPath.add(entryPath);
        }
      }
    }
  }
 catch (  JavaModelException e) {
  }
  for (  IPath iPath : externalJarsPath) {
    try (JarFile jarFile=new JarFile(iPath.toFile())){
      ZipEntry entry=jarFile.getEntry(""String_Node_Str"");
      if (entry != null) {
        this.manager.addJarFile(project,iPath);
      }
    }
 catch (    IOException e) {
      YangCorePlugin.log(e);
    }
  }
  try {
    final HashSet<IFile> indexedFiles=new HashSet<IFile>();
    project.accept(new IResourceProxyVisitor(){
      @Override public boolean visit(      IResourceProxy proxy){
        if (IndexAllProject.this.isCancelled) {
          return false;
        }
        if (!ignoredPath.isEmpty() && ignoredPath.contains(proxy.requestFullPath())) {
          return false;
        }
        if (proxy.getType() == IResource.FILE) {
          if (CoreUtil.isYangLikeFileName(proxy.getName())) {
            IFile file=(IFile)proxy.requestResource();
            indexedFiles.add(file);
          }
          return false;
        }
        return true;
      }
    }
,IResource.NONE);
    for (    IFile iFile : indexedFiles) {
      this.manager.addSource(iFile);
    }
  }
 catch (  CoreException e) {
    this.manager.removeIndex(this.containerPath);
    return false;
  }
  return true;
}",0.8945548833189283
134547,"public void startup() throws CoreException {
  try {
    this.cache=new OpenableElementCache(5000);
    this.indexManager=new IndexManager();
    this.deltaProcessor=new DeltaProcessor(this);
    final IWorkspace workspace=ResourcesPlugin.getWorkspace();
    workspace.addResourceChangeListener(deltaProcessor,IResourceChangeEvent.PRE_BUILD | IResourceChangeEvent.POST_BUILD | IResourceChangeEvent.POST_CHANGE| IResourceChangeEvent.PRE_DELETE| IResourceChangeEvent.PRE_CLOSE| IResourceChangeEvent.PRE_REFRESH);
    if (this.indexManager != null) {
      this.indexManager.reset();
    }
    yangModel.getYangProjects();
    Job processSavedState=new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          workspace.run(new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor progress) throws CoreException {
              ISavedState savedState=workspace.addSaveParticipant(YangCorePlugin.PLUGIN_ID,YangModelManager.this);
              if (savedState != null) {
                YangModelManager.this.deltaProcessor.overridenEventType=IResourceChangeEvent.POST_CHANGE;
                savedState.processResourceChangeEvents(YangModelManager.this.deltaProcessor);
              }
            }
          }
,monitor);
        }
 catch (        CoreException e) {
          return e.getStatus();
        }
        return Status.OK_STATUS;
      }
    }
;
    processSavedState.setSystem(true);
    processSavedState.setPriority(Job.SHORT);
    processSavedState.schedule();
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
    shutdown();
    throw e;
  }
}","public void startup() throws CoreException {
  try {
    this.cache=new OpenableElementCache(5000);
    this.indexManager=new IndexManager();
    this.deltaProcessor=new DeltaProcessor(this);
    final IWorkspace workspace=ResourcesPlugin.getWorkspace();
    workspace.addResourceChangeListener(deltaProcessor,IResourceChangeEvent.PRE_BUILD | IResourceChangeEvent.POST_BUILD | IResourceChangeEvent.POST_CHANGE| IResourceChangeEvent.PRE_DELETE| IResourceChangeEvent.PRE_CLOSE| IResourceChangeEvent.PRE_REFRESH);
    JavaCore.addElementChangedListener(deltaProcessor);
    if (this.indexManager != null) {
      this.indexManager.reset();
    }
    yangModel.getYangProjects();
    Job processSavedState=new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          workspace.run(new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor progress) throws CoreException {
              ISavedState savedState=workspace.addSaveParticipant(YangCorePlugin.PLUGIN_ID,YangModelManager.this);
              if (savedState != null) {
                YangModelManager.this.deltaProcessor.overridenEventType=IResourceChangeEvent.POST_CHANGE;
                savedState.processResourceChangeEvents(YangModelManager.this.deltaProcessor);
              }
            }
          }
,monitor);
        }
 catch (        CoreException e) {
          return e.getStatus();
        }
        return Status.OK_STATUS;
      }
    }
;
    processSavedState.setSystem(true);
    processSavedState.setPriority(Job.SHORT);
    processSavedState.schedule();
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
    shutdown();
    throw e;
  }
}",0.983480825958702
134548,"@Override public void enterModule_header_stmts(Module_header_stmtsContext ctx){
  for (int i=0; i < ctx.getChildCount(); ++i) {
    final ParseTree treeNode=ctx.getChild(i);
    if (treeNode instanceof Namespace_stmtContext) {
      final String namespaceStr=stringFromNode(treeNode);
      namespace=URI.create(namespaceStr);
      SimpleNode<URI> astNode=new SimpleNode<URI>(module,((Namespace_stmtContext)treeNode).NAMESPACE_KEYWORD().getText(),namespace);
      updateNodePosition(astNode,treeNode);
      module.setNamespaceNode(astNode);
    }
 else     if (treeNode instanceof Prefix_stmtContext) {
      yangModelPrefix=stringFromNode(treeNode);
      SimpleNode<String> astNode=new SimpleNode<String>(module,((Prefix_stmtContext)treeNode).PREFIX_KEYWORD().getText(),yangModelPrefix);
      updateNodePosition(astNode,treeNode);
      module.setPrefix(astNode);
    }
 else     if (treeNode instanceof Yang_version_stmtContext) {
      SimpleNode<String> astNode=new SimpleNode<String>(module,((Yang_version_stmtContext)treeNode).YANG_VERSION_KEYWORD().getText(),stringFromNode(treeNode));
      updateNodePosition(astNode,treeNode);
      module.setYangVersion(astNode);
    }
  }
}","@Override public void enterModule_header_stmts(Module_header_stmtsContext ctx){
  for (int i=0; i < ctx.getChildCount(); ++i) {
    final ParseTree treeNode=ctx.getChild(i);
    if (treeNode instanceof Namespace_stmtContext) {
      final String namespaceStr=stringFromNode(treeNode);
      try {
        namespace=URI.create(namespaceStr);
      }
 catch (      Exception e) {
      }
      SimpleNode<URI> astNode=new SimpleNode<URI>(module,((Namespace_stmtContext)treeNode).NAMESPACE_KEYWORD().getText(),namespace);
      updateNodePosition(astNode,treeNode);
      module.setNamespaceNode(astNode);
    }
 else     if (treeNode instanceof Prefix_stmtContext) {
      yangModelPrefix=stringFromNode(treeNode);
      SimpleNode<String> astNode=new SimpleNode<String>(module,((Prefix_stmtContext)treeNode).PREFIX_KEYWORD().getText(),yangModelPrefix);
      updateNodePosition(astNode,treeNode);
      module.setPrefix(astNode);
    }
 else     if (treeNode instanceof Yang_version_stmtContext) {
      SimpleNode<String> astNode=new SimpleNode<String>(module,((Yang_version_stmtContext)treeNode).YANG_VERSION_KEYWORD().getText(),stringFromNode(treeNode));
      updateNodePosition(astNode,treeNode);
      module.setYangVersion(astNode);
    }
  }
}",0.9758295780417862
134549,"@Override public void dispose(){
  colorManager.dispose();
  super.dispose();
}","@Override public void dispose(){
  colorManager.dispose();
  super.dispose();
  IEditorInput input=getEditorInput();
  if (input != null && input instanceof IFileEditorInput) {
    IFile file=((IFileEditorInput)input).getFile();
    if (file != null) {
      try {
        YangModelManager.getYangModelManager().removeInfoAndChildren(YangCorePlugin.createYangFile(file));
        YangModelManager.getIndexManager().addSource(file);
      }
 catch (      YangModelException e) {
      }
    }
  }
}",0.2743055555555556
134550,"@Override public void reconcile(IRegion partition){
  if (editor == null || editor.getEditorInput() == null || !(editor.getEditorInput() instanceof IFileEditorInput)) {
    return;
  }
  IFile file=((IFileEditorInput)editor.getEditorInput()).getFile();
  final IAnnotationModel annotationModel=getAnnotationModel();
  ArrayList<Annotation> toRemove=new ArrayList<Annotation>();
  Iterator<?> it=annotationModel.getAnnotationIterator();
  while (it.hasNext()) {
    Annotation annotation=(Annotation)it.next();
    if (annotation.getType().equals(YangSyntaxAnnotation.TYPE)) {
      toRemove.add(annotation);
    }
  }
  for (  Annotation annotation : toRemove) {
    annotationModel.removeAnnotation(annotation);
  }
  YangFile yangFile=YangCorePlugin.createYangFile(file);
  Module module=YangParserUtil.parseYangFile(document.get().toCharArray(),new IYangValidationListener(){
    @Override public void validationError(    String msg,    int lineNumber,    int charStart,    int charEnd){
      annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
    }
    @Override public void syntaxError(    String msg,    int lineNumber,    int charStart,    int charEnd){
      annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
    }
  }
);
  try {
    YangFileInfo fileInfo=(YangFileInfo)yangFile.getElementInfo(monitor);
    fileInfo.setModule(module);
    fileInfo.setIsStructureKnown(true);
    YangModelManager.getIndexManager().addSource(file);
  }
 catch (  YangModelException e) {
  }
}","@Override public void reconcile(IRegion partition){
  if (editor == null || editor.getEditorInput() == null || !(editor.getEditorInput() instanceof IFileEditorInput)) {
    return;
  }
  IFile file=((IFileEditorInput)editor.getEditorInput()).getFile();
  final IAnnotationModel annotationModel=getAnnotationModel();
  ArrayList<Annotation> toRemove=new ArrayList<Annotation>();
  Iterator<?> it=annotationModel.getAnnotationIterator();
  while (it.hasNext()) {
    Annotation annotation=(Annotation)it.next();
    if (annotation.getType().equals(YangSyntaxAnnotation.TYPE)) {
      toRemove.add(annotation);
    }
  }
  for (  Annotation annotation : toRemove) {
    annotationModel.removeAnnotation(annotation);
  }
  YangFile yangFile=YangCorePlugin.createYangFile(file);
  try {
    final AtomicBoolean errors=new AtomicBoolean(false);
    Module module=YangParserUtil.parseYangFile(document.get().toCharArray(),new IYangValidationListener(){
      @Override public void validationError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
      }
      @Override public void syntaxError(      String msg,      int lineNumber,      int charStart,      int charEnd){
        errors.set(true);
        annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
      }
    }
);
    if (!errors.get()) {
      YangFileInfo fileInfo=(YangFileInfo)yangFile.getElementInfo(monitor);
      fileInfo.setModule(module);
      fileInfo.setIsStructureKnown(true);
      YangModelManager.getIndexManager().addSource(file);
    }
  }
 catch (  Exception e) {
  }
}",0.9163939303778638
134551,"@Override public void syntaxError(String msg,int lineNumber,int charStart,int charEnd){
  annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
}","@Override public void syntaxError(String msg,int lineNumber,int charStart,int charEnd){
  errors.set(true);
  annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
}",0.9516908212560388
134552,"@Override public void validationError(String msg,int lineNumber,int charStart,int charEnd){
  annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
}","@Override public void validationError(String msg,int lineNumber,int charStart,int charEnd){
  errors.set(true);
  annotationModel.addAnnotation(new YangSyntaxAnnotation(msg),new Position(charStart,charEnd - charStart));
}",0.95260663507109
134553,"@Override public boolean performFinish(){
  boolean res=super.performFinish();
  if (res) {
    IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(getModel().getArtifactId());
    IFolder folder=project.getFolder(yangPage.getRootDir());
    if (!folder.exists()) {
      try {
        folder.create(true,true,null);
        if (yangPage.createExampleFile()) {
          folder.getFile(""String_Node_Str"").create(FileLocator.openStream(YangUI.getDefault().getBundle(),new Path(""String_Node_Str""),false),true,null);
        }
      }
 catch (      CoreException|IOException e) {
        e.printStackTrace();
        return false;
      }
    }
  }
  return res;
}","@Override public boolean performFinish(){
  boolean res=super.performFinish();
  if (res) {
    IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(getModel().getArtifactId());
    IFolder folder=project.getFolder(yangPage.getRootDir());
    if (!folder.exists()) {
      try {
        folder.create(true,true,null);
        if (yangPage.createExampleFile()) {
          folder.getFile(""String_Node_Str"").create(FileLocator.openStream(YangUIPlugin.getDefault().getBundle(),new Path(""String_Node_Str""),false),true,null);
        }
      }
 catch (      CoreException e) {
        YangUIPlugin.log(e.getMessage(),e);
        e.printStackTrace();
        return false;
      }
catch (      IOException e) {
        YangUIPlugin.log(e.getMessage(),e);
        e.printStackTrace();
        return false;
      }
    }
  }
  return res;
}",0.8867059593975115
134554,"/** 
 * @param parent
 */
private void privateCreateGeneratorControls(Composite parent){
  Label label=new Label(parent,SWT.NONE);
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,true,2,1));
  label.setText(""String_Node_Str"");
  generatorsViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  generatorsTable=generatorsViewer.getTable();
  generatorsTable.setLinesVisible(true);
  generatorsTable.setHeaderVisible(true);
  generatorsTable.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  generatorsTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      validate();
    }
  }
);
  createTableColum(generatorsTable,""String_Node_Str"",120);
  createTableColum(generatorsTable,""String_Node_Str"",120);
  createTableColum(generatorsTable,""String_Node_Str"",100);
  createTableColum(generatorsTable,""String_Node_Str"",200);
  createTableColum(generatorsTable,""String_Node_Str"",200);
  generatorsViewer.setLabelProvider(new ITableLabelProvider(){
    @Override public void removeListener(    ILabelProviderListener listener){
    }
    @Override public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    @Override public void dispose(){
    }
    @Override public void addListener(    ILabelProviderListener listener){
    }
    @Override public String getColumnText(    Object element,    int columnIndex){
      if (element instanceof CodeGeneratorConfig) {
        CodeGeneratorConfig conf=(CodeGeneratorConfig)element;
        String txt=null;
switch (columnIndex) {
case 0:
          txt=conf.getGroupId();
        break;
case 1:
      txt=conf.getArtifactId();
    break;
case 2:
  txt=conf.getVersion();
break;
case 3:
txt=conf.getGenClassName();
break;
case 4:
txt=conf.getGenOutputDirectory();
break;
}
return txt != null ? txt : ""String_Node_Str"";
}
return ""String_Node_Str"";
}
@Override public Image getColumnImage(Object element,int columnIndex){
return null;
}
}
);
Composite group=new Composite(parent,SWT.NONE);
group.setLayout(new GridLayout(1,false));
group.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true));
addBtn=new Button(group,SWT.NONE);
addBtn.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false));
addBtn.setText(""String_Node_Str"");
addBtn.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
YangCodeGeneratorDialog dialog=new YangCodeGeneratorDialog(getShell());
if (dialog.open() == Window.OK) {
generatorsViewer.add(dialog.getConfig());
}
}
}
);
editBtn=new Button(group,SWT.NONE);
editBtn.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false));
editBtn.setText(""String_Node_Str"");
editBtn.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
CodeGeneratorConfig config=(CodeGeneratorConfig)generatorsViewer.getElementAt(generatorsTable.getSelectionIndex());
YangCodeGeneratorDialog dialog=new YangCodeGeneratorDialog(getShell(),config);
if (dialog.open() == Window.OK) {
generatorsViewer.update(dialog.getConfig(),null);
}
}
}
);
removeBtn=new Button(group,SWT.NONE);
removeBtn.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));
removeBtn.setText(""String_Node_Str"");
removeBtn.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
if (generatorsTable.getSelectionCount() > 1) {
generatorsTable.remove(generatorsTable.getSelectionIndices());
validate();
}
}
}
);
validate();
}","/** 
 * @param parent
 */
private void privateCreateGeneratorControls(Composite parent){
  Label label=new Label(parent,SWT.NONE);
  label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,true,2,1));
  label.setText(""String_Node_Str"");
  generatorsViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  generatorsTable=generatorsViewer.getTable();
  generatorsTable.setLinesVisible(true);
  generatorsTable.setHeaderVisible(true);
  generatorsTable.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  generatorsTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      validate();
    }
  }
);
  createTableColum(generatorsTable,""String_Node_Str"",120);
  createTableColum(generatorsTable,""String_Node_Str"",120);
  createTableColum(generatorsTable,""String_Node_Str"",100);
  createTableColum(generatorsTable,""String_Node_Str"",200);
  createTableColum(generatorsTable,""String_Node_Str"",200);
  generatorsViewer.setLabelProvider(new ITableLabelProvider(){
    public void removeListener(    ILabelProviderListener listener){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      if (element instanceof CodeGeneratorConfig) {
        CodeGeneratorConfig conf=(CodeGeneratorConfig)element;
        String txt=null;
switch (columnIndex) {
case 0:
          txt=conf.getGroupId();
        break;
case 1:
      txt=conf.getArtifactId();
    break;
case 2:
  txt=conf.getVersion();
break;
case 3:
txt=conf.getGenClassName();
break;
case 4:
txt=conf.getGenOutputDirectory();
break;
}
return txt != null ? txt : ""String_Node_Str"";
}
return ""String_Node_Str"";
}
public Image getColumnImage(Object element,int columnIndex){
return null;
}
}
);
Composite group=new Composite(parent,SWT.NONE);
group.setLayout(new GridLayout(1,false));
group.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true));
addBtn=new Button(group,SWT.NONE);
addBtn.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false));
addBtn.setText(""String_Node_Str"");
addBtn.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
YangCodeGeneratorDialog dialog=new YangCodeGeneratorDialog(getShell());
if (dialog.open() == Window.OK) {
generatorsViewer.add(dialog.getConfig());
}
}
}
);
editBtn=new Button(group,SWT.NONE);
editBtn.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false));
editBtn.setText(""String_Node_Str"");
editBtn.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
CodeGeneratorConfig config=(CodeGeneratorConfig)generatorsViewer.getElementAt(generatorsTable.getSelectionIndex());
YangCodeGeneratorDialog dialog=new YangCodeGeneratorDialog(getShell(),config);
if (dialog.open() == Window.OK) {
generatorsViewer.update(dialog.getConfig(),null);
}
}
}
);
removeBtn=new Button(group,SWT.NONE);
removeBtn.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));
removeBtn.setText(""String_Node_Str"");
removeBtn.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
if (generatorsTable.getSelectionCount() > 1) {
generatorsTable.remove(generatorsTable.getSelectionIndices());
validate();
}
}
}
);
validate();
}",0.924194016845774
134555,"@Override public void removeListener(ILabelProviderListener listener){
}","public void removeListener(ILabelProviderListener listener){
}",0.9253731343283582
134556,"@Override public Image getColumnImage(Object element,int columnIndex){
  return null;
}","public Image getColumnImage(Object element,int columnIndex){
  return null;
}",0.9390243902439024
134557,"public List<CodeGeneratorConfig> getCodeGenerators(){
  List<CodeGeneratorConfig> list=new ArrayList<>();
  for (  TableItem item : generatorsTable.getItems()) {
    list.add((CodeGeneratorConfig)item.getData());
  }
  return list;
}","public List<CodeGeneratorConfig> getCodeGenerators(){
  List<CodeGeneratorConfig> list=new ArrayList<CodeGeneratorConfig>();
  for (  TableItem item : generatorsTable.getItems()) {
    list.add((CodeGeneratorConfig)item.getData());
  }
  return list;
}",0.9608247422680412
134558,"@Override public String getColumnText(Object element,int columnIndex){
  if (element instanceof CodeGeneratorConfig) {
    CodeGeneratorConfig conf=(CodeGeneratorConfig)element;
    String txt=null;
switch (columnIndex) {
case 0:
      txt=conf.getGroupId();
    break;
case 1:
  txt=conf.getArtifactId();
break;
case 2:
txt=conf.getVersion();
break;
case 3:
txt=conf.getGenClassName();
break;
case 4:
txt=conf.getGenOutputDirectory();
break;
}
return txt != null ? txt : ""String_Node_Str"";
}
return ""String_Node_Str"";
}","public String getColumnText(Object element,int columnIndex){
  if (element instanceof CodeGeneratorConfig) {
    CodeGeneratorConfig conf=(CodeGeneratorConfig)element;
    String txt=null;
switch (columnIndex) {
case 0:
      txt=conf.getGroupId();
    break;
case 1:
  txt=conf.getArtifactId();
break;
case 2:
txt=conf.getVersion();
break;
case 3:
txt=conf.getGenClassName();
break;
case 4:
txt=conf.getGenOutputDirectory();
break;
}
return txt != null ? txt : ""String_Node_Str"";
}
return ""String_Node_Str"";
}",0.9902912621359224
134559,"@Override public void dispose(){
}","public void dispose(){
}",0.8275862068965517
134560,"@Override public boolean isLabelProperty(Object element,String property){
  return false;
}","public boolean isLabelProperty(Object element,String property){
  return false;
}",0.9418604651162792
134561,"@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  container.setLayout(new GridLayout(1,false));
  Composite group1=new Composite(container,SWT.NONE);
  group1.setLayout(new GridLayout(2,false));
  group1.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  new Label(group1,SWT.NONE).setText(""String_Node_Str"");
  yangVersion=new Combo(group1,SWT.BORDER | SWT.READ_ONLY);
  yangVersion.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  new Label(group1,SWT.NONE).setText(""String_Node_Str"");
  rootDirTxt=new Text(group1,SWT.BORDER);
  rootDirTxt.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  rootDirTxt.setText(YangProjectWizard.SRC_MAIN_YANG);
  Composite group2=new Composite(container,SWT.NONE);
  group2.setLayout(new GridLayout(2,false));
  group2.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true));
  privateCreateGeneratorControls(group2);
  exampleFileChk=new Button(group2,SWT.CHECK);
  exampleFileChk.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,2,1));
  exampleFileChk.setText(""String_Node_Str"");
  exampleFileChk.setSelection(true);
  setControl(container);
  yangVersion.add(""String_Node_Str"");
  yangVersion.add(""String_Node_Str"");
  yangVersion.add(""String_Node_Str"");
  yangVersion.add(""String_Node_Str"");
  yangVersion.select(0);
  CodeGeneratorConfig config=new CodeGeneratorConfig();
  config.setGroupId(""String_Node_Str"");
  config.setArtifactId(""String_Node_Str"");
  config.setVersion(yangVersion.getText());
  config.setGenClassName(""String_Node_Str"");
  config.setGenOutputDirectory(""String_Node_Str"");
  generatorsViewer.add(config);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  container.setLayout(new GridLayout(1,false));
  Composite group1=new Composite(container,SWT.NONE);
  group1.setLayout(new GridLayout(2,false));
  group1.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  new Label(group1,SWT.NONE).setText(""String_Node_Str"");
  yangVersion=new Combo(group1,SWT.BORDER | SWT.READ_ONLY);
  yangVersion.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  new Label(group1,SWT.NONE).setText(""String_Node_Str"");
  rootDirTxt=new Text(group1,SWT.BORDER);
  rootDirTxt.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  rootDirTxt.setText(YangProjectWizard.SRC_MAIN_YANG);
  Composite group2=new Composite(container,SWT.NONE);
  group2.setLayout(new GridLayout(2,false));
  group2.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true));
  privateCreateGeneratorControls(group2);
  exampleFileChk=new Button(group2,SWT.CHECK);
  exampleFileChk.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,2,1));
  exampleFileChk.setText(""String_Node_Str"");
  exampleFileChk.setSelection(true);
  setControl(container);
  yangVersion.add(""String_Node_Str"");
  yangVersion.add(""String_Node_Str"");
  yangVersion.add(""String_Node_Str"");
  yangVersion.add(""String_Node_Str"");
  yangVersion.select(0);
  CodeGeneratorConfig config=new CodeGeneratorConfig();
  config.setGroupId(""String_Node_Str"");
  config.setArtifactId(""String_Node_Str"");
  config.setVersion(yangVersion.getText());
  config.setGenClassName(""String_Node_Str"");
  config.setGenOutputDirectory(""String_Node_Str"");
  generatorsViewer.add(config);
}",0.997005988023952
134562,"@Override public void addListener(ILabelProviderListener listener){
}","public void addListener(ILabelProviderListener listener){
}",0.921875
134563,"@Override public Set<IProject> build(int kind,IProgressMonitor monitor) throws Exception {
  IMaven maven=MavenPlugin.getMaven();
  BuildContext buildContext=getBuildContext();
  File[] sources=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),""String_Node_Str"",File[].class,monitor);
  boolean changed=false;
  for (  File source : sources) {
    Scanner ds=buildContext.newScanner(source);
    ds.scan();
    String[] includedFiles=ds.getIncludedFiles();
    if (includedFiles != null && includedFiles.length > 0) {
      changed=true;
    }
  }
  if (!changed) {
    return null;
  }
  Set<IProject> result=super.build(kind,monitor);
  YangGeneratorConfiguration[] confs=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),""String_Node_Str"",YangGeneratorConfiguration[].class,monitor);
  if (confs != null) {
    for (    YangGeneratorConfiguration conf : confs) {
      if (conf.getOutputBaseDir() != null) {
        buildContext.refresh(conf.getOutputBaseDir());
      }
    }
  }
  return result;
}","@Override public Set<IProject> build(int kind,IProgressMonitor monitor) throws Exception {
  IMaven maven=MavenPlugin.getMaven();
  BuildContext buildContext=getBuildContext();
  File source=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),""String_Node_Str"",File.class,monitor);
  Scanner ds=buildContext.newScanner(source);
  ds.scan();
  String[] includedFiles=ds.getIncludedFiles();
  if (includedFiles == null || includedFiles.length <= 0) {
    return null;
  }
  Set<IProject> result=super.build(kind,monitor);
  YangGeneratorConfiguration[] confs=maven.getMojoParameterValue(getSession().getCurrentProject(),getMojoExecution(),""String_Node_Str"",YangGeneratorConfiguration[].class,monitor);
  if (confs != null) {
    for (    YangGeneratorConfiguration conf : confs) {
      if (conf.getOutputBaseDir() != null) {
        buildContext.refresh(conf.getOutputBaseDir());
      }
    }
  }
  return result;
}",0.7591022443890274
134564,"private static long getStatusID(Uri uri){
  String str=""String_Node_Str"";
  String[] arrayOfString=uri.toString().split(""String_Node_Str"");
  for (int i=0; i < arrayOfString.length; i++) {
    if (arrayOfString[i].startsWith(""String_Node_Str"")) {
      str=arrayOfString[(i + 1)];
      break;
    }
  }
  return Long.parseLong(str);
}","private static long getStatusID(Uri uri){
  String str=""String_Node_Str"";
  String[] arrayOfString=uri.getPath().toString().split(""String_Node_Str"");
  for (int i=0; i < arrayOfString.length; i++) {
    if (arrayOfString[i].startsWith(""String_Node_Str"")) {
      str=arrayOfString[(i + 1)];
      break;
    }
  }
  return Long.parseLong(str);
}",0.9852941176470588
134565,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View page=inflater.inflate(R.layout.fragment_search,container,false);
  int fragmentIndex=getAdapterIndex();
  PullToRefreshListView listView=getListView(page);
  SearchListAdapter adapter=(SearchListAdapter)getListAdapter(fragmentIndex);
  listView.setAdapter(adapter);
  listView.setOnScrollListener(this);
  listView.setOnRefreshListener(this);
  listView.setMode(getRefreshMode());
  ImageButton buttonQueries=getQueriesButton(page);
  buttonQueries.setOnClickListener(this);
  ImageButton buttonExecute=getExecuteButton(page);
  buttonExecute.setOnClickListener(this);
  ImageButton buttonSave=getSaveButton(page);
  buttonSave.setOnClickListener(this);
  editText=getEditText(page);
  editText.setOnFocusChangeListener(this);
  editText.setText(adapter.getQuery());
  adapter.setOnQueryChangeListener(this);
  return page;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View page=inflater.inflate(R.layout.fragment_search,container,false);
  int fragmentIndex=getAdapterIndex();
  PullToRefreshListView listView=getListView(page);
  SearchListAdapter adapter=(SearchListAdapter)getListAdapter(fragmentIndex);
  listView.setAdapter(adapter);
  listView.setOnScrollListener(this);
  listView.setOnRefreshListener(this);
  listView.setMode(getRefreshMode());
  ImageButton buttonQueries=getQueriesButton(page);
  buttonQueries.setOnClickListener(this);
  ImageButton buttonExecute=getExecuteButton(page);
  buttonExecute.setOnClickListener(this);
  ImageButton buttonSave=getSaveButton(page);
  buttonSave.setOnClickListener(this);
  editText=getEditText(page);
  editText.setOnFocusChangeListener(this);
  editText.setText(adapter.getQuery());
  editText.setMovementMethod(new ArrowKeyMovementMethod(){
    @Override protected boolean right(    TextView widget,    Spannable buffer){
      return widget.getSelectionEnd() == widget.length() || super.right(widget,buffer);
    }
    @Override protected boolean left(    TextView widget,    Spannable buffer){
      return widget.getSelectionStart() == 0 || super.left(widget,buffer);
    }
  }
);
  adapter.setOnQueryChangeListener(this);
  return page;
}",0.8236842105263158
134566,"@Override public void onPostStateChange(final PostState postState){
  Logger.debug(""String_Node_Str"");
  final MainActivity activity=(MainActivity)getActivity();
  if (editText != null) {
    editText.removeTextChangedListener(this);
    editText.setTextKeepState(postState.getText());
    editText.addTextChangedListener(this);
    updateTextCount(editText.getText());
    new UIHandler(){
      @Override public void run(){
        editText.setSelection(postState.getSelectionStart(),postState.getSelectionEnd());
      }
    }
.postAtFrontOfQueue();
  }
  if (viewGroupReply != null) {
    if (postState.getInReplyToStatusID() >= 0) {
      viewGroupReply.setVisibility(View.VISIBLE);
      final Account account=activity.getCurrentAccount();
      TwitterUtils.tryGetStatus(account,postState.getInReplyToStatusID(),new TwitterUtils.StatusCallback(){
        @Override public void onCallback(        Status status){
          View header=viewGroupReply.findViewById(R.id.layout_post_reply_status);
          header=new StatusViewModel(status,account).getView(activity,activity.getLayoutInflater(),header);
          header.setBackgroundColor(getResources().getColor(R.color.transparent));
          header.setClickable(false);
        }
      }
);
      ImageButton imageButtonDeleteReply=(ImageButton)viewGroupReply.findViewById(R.id.button_post_reply_delete);
      imageButtonDeleteReply.setOnClickListener(this);
    }
 else {
      viewGroupReply.setVisibility(View.GONE);
    }
  }
  if (viewGroupMedia != null) {
    ImageView imageViewMedia=(ImageView)viewGroupMedia.findViewById(R.id.image_post_media);
    if (TextUtils.isEmpty(postState.getMediaFilePath())) {
      viewGroupMedia.setVisibility(View.GONE);
    }
 else {
      viewGroupMedia.setVisibility(View.VISIBLE);
    }
    new BitmapThumbnailTask(activity,postState.getMediaFilePath(),imageViewMedia).execute();
  }
}","@Override public void onPostStateChange(final PostState postState){
  Logger.debug(""String_Node_Str"");
  final MainActivity activity=(MainActivity)getActivity();
  if (editText != null) {
    final int start=postState.getSelectionStart();
    final int end=postState.getSelectionEnd();
    editText.removeTextChangedListener(this);
    editText.setTextKeepState(postState.getText());
    editText.addTextChangedListener(this);
    updateTextCount(editText.getText());
    new UIHandler(){
      @Override public void run(){
        editText.setSelection(start,end);
      }
    }
.postAtFrontOfQueue();
  }
  if (viewGroupReply != null) {
    if (postState.getInReplyToStatusID() >= 0) {
      viewGroupReply.setVisibility(View.VISIBLE);
      final Account account=activity.getCurrentAccount();
      TwitterUtils.tryGetStatus(account,postState.getInReplyToStatusID(),new TwitterUtils.StatusCallback(){
        @Override public void onCallback(        Status status){
          View header=viewGroupReply.findViewById(R.id.layout_post_reply_status);
          header=new StatusViewModel(status,account).getView(activity,activity.getLayoutInflater(),header);
          header.setBackgroundColor(getResources().getColor(R.color.transparent));
          header.setClickable(false);
        }
      }
);
      ImageButton imageButtonDeleteReply=(ImageButton)viewGroupReply.findViewById(R.id.button_post_reply_delete);
      imageButtonDeleteReply.setOnClickListener(this);
    }
 else {
      viewGroupReply.setVisibility(View.GONE);
    }
  }
  if (viewGroupMedia != null) {
    ImageView imageViewMedia=(ImageView)viewGroupMedia.findViewById(R.id.image_post_media);
    if (TextUtils.isEmpty(postState.getMediaFilePath())) {
      viewGroupMedia.setVisibility(View.GONE);
    }
 else {
      viewGroupMedia.setVisibility(View.VISIBLE);
    }
    new BitmapThumbnailTask(activity,postState.getMediaFilePath(),imageViewMedia).execute();
  }
}",0.957680250783699
134567,"private boolean isNotRetweetable(Account account,Status status){
  User user=TwitterUtils.getOriginalStatus(status).getUser();
  return status.getUser().isProtected() || status.getUser().getId() == account.userID;
}","private boolean isNotRetweetable(Account account,Status status){
  User user=TwitterUtils.getOriginalStatus(status).getUser();
  return user.isProtected() || user.getId() == account.userID;
}",0.9408866995073892
134568,"private boolean isDeletable(Account account,Status status){
  boolean deletable=false;
  if (!status.isRetweet()) {
    deletable=status.getUser().getId() == account.userID;
  }
 else {
    deletable=status.getRetweetedStatus().getUser().getId() == account.userID;
  }
  return deletable;
}","private boolean isDeletable(Account account,Status status){
  boolean deletable;
  if (!status.isRetweet()) {
    deletable=status.getUser().getId() == account.userID;
  }
 else {
    deletable=status.getRetweetedStatus().getUser().getId() == account.userID;
  }
  return deletable;
}",0.9721254355400696
134569,"private void setStateFromView(){
  PostState state=PostState.getState();
  state.removeListener();
  state.beginTransaction().setText(editText.getText().toString()).setSelection(editText.getSelectionStart(),editText.getSelectionEnd()).commit();
  state.setListener(this);
}","private void setStateFromView(){
  PostState state=PostState.getState();
  state.removeListener();
  state.beginTransaction().setText(editText.getText().toString()).commit();
  state.setListener(this);
}",0.8529411764705882
134570,"private void handleError(SwitchListenerResult result){
  Log.d(getClass().getName(),""String_Node_Str"");
  if (result == null || result.isSuccess()) {
    if (!missingRequirement) {
      errorText.setVisibility(View.GONE);
      showLogsButton.setVisibility(View.GONE);
    }
  }
 else   if (result.getError() instanceof MissingRequirementException) {
    final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
    updateMissingRequirement(resId);
  }
 else {
    updateError(result.getError().getMessage(),result.getLogs());
  }
}","private void handleError(SwitchListenerResult result){
  Log.d(getClass().getName(),""String_Node_Str"");
  if (result == null || result.isSuccess()) {
    if (!missingRequirement) {
      errorText.setVisibility(View.GONE);
      showLogsButton.setVisibility(View.GONE);
    }
  }
 else   if (result.getError() instanceof MissingRequirementException) {
    final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
    updateMissingRequirement(resId);
  }
 else {
    updateError(result.getError().getMessage(),result);
  }
}",0.9912891986062716
134571,"public SwitchListenerFragment(){
  callbacks=new SwitchListenerTaskFragment.CallBacks(){
    @Override public void updateState(    ListenerState state,    SwitchListenerResult result){
      Log.d(getClass().getName(),""String_Node_Str"" + state);
      proxyStartedTextView.setVisibility(View.GONE);
      handleError(result);
      if (state != null) {
switch (state) {
case STARTING:
          listenerSwitch.setEnabled(false);
        forceToggledWithoutListener(true);
      break;
case STARTED:
    listenerSwitch.setEnabled(true);
  forceToggledWithoutListener(true);
listenerStatus.setText(generateStatusStartedText());
String proxyUrl=""String_Node_Str"";
final DefaultSharedPreferencesHelper prefHelper=new DefaultSharedPreferencesHelper(getActivity());
if (prefHelper.isListenerNonLocalEnabled()) {
final WifiHelper wifiHelper=new WifiHelper(getActivity());
proxyUrl=wifiHelper.getWifiIpAddress() + ""String_Node_Str"";
}
proxyStartedTextView.setText(getString(R.string.switch_listener_proxy_started,proxyUrl));
proxyStartedTextView.setVisibility(View.VISIBLE);
break;
case START_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_start_failed);
break;
case STOPPING:
listenerSwitch.setEnabled(false);
forceToggledWithoutListener(false);
break;
case STOPPED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
break;
case STOP_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(true);
listenerStatus.setText(R.string.switch_listener_status_stop_failed);
break;
default :
}
}
 else {
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
}
}
private void handleError(SwitchListenerResult result){
Log.d(getClass().getName(),""String_Node_Str"");
if (result == null || result.isSuccess()) {
if (!missingRequirement) {
errorText.setVisibility(View.GONE);
showLogsButton.setVisibility(View.GONE);
}
}
 else if (result.getError() instanceof MissingRequirementException) {
final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
updateMissingRequirement(resId);
}
 else {
updateError(result.getError().getMessage(),result.getLogs());
}
}
}
;
}","public SwitchListenerFragment(){
  callbacks=new SwitchListenerTaskFragment.CallBacks(){
    @Override public void updateState(    ListenerState state,    SwitchListenerResult result){
      Log.d(getClass().getName(),""String_Node_Str"" + state);
      proxyStartedTextView.setVisibility(View.GONE);
      handleError(result);
      if (state != null) {
switch (state) {
case STARTING:
          listenerSwitch.setEnabled(false);
        forceToggledWithoutListener(true);
      break;
case STARTED:
    listenerSwitch.setEnabled(true);
  forceToggledWithoutListener(true);
listenerStatus.setText(generateStatusStartedText());
String proxyUrl=""String_Node_Str"";
final DefaultSharedPreferencesHelper prefHelper=new DefaultSharedPreferencesHelper(getActivity());
if (prefHelper.isListenerNonLocalEnabled()) {
final WifiHelper wifiHelper=new WifiHelper(getActivity());
proxyUrl=wifiHelper.getWifiIpAddress() + ""String_Node_Str"";
}
proxyStartedTextView.setText(getString(R.string.switch_listener_proxy_started,proxyUrl));
proxyStartedTextView.setVisibility(View.VISIBLE);
break;
case START_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_start_failed);
break;
case STOPPING:
listenerSwitch.setEnabled(false);
forceToggledWithoutListener(false);
break;
case STOPPED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
break;
case STOP_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(true);
listenerStatus.setText(R.string.switch_listener_status_stop_failed);
break;
default :
}
}
 else {
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
}
}
private void handleError(SwitchListenerResult result){
Log.d(getClass().getName(),""String_Node_Str"");
if (result == null || result.isSuccess()) {
if (!missingRequirement) {
errorText.setVisibility(View.GONE);
showLogsButton.setVisibility(View.GONE);
}
}
 else if (result.getError() instanceof MissingRequirementException) {
final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
updateMissingRequirement(resId);
}
 else {
updateError(result.getError().getMessage(),result);
}
}
}
;
}",0.9978668941979524
134572,"private void updateError(String errorMessage,final List<String> logs){
  Log.d(getClass().getName(),""String_Node_Str"");
  listenerSwitch.setClickable(false);
  secondaryActionButton.setClickable(false);
  errorText.setTextColor(Color.RED);
  errorText.setVisibility(View.VISIBLE);
  errorText.setText(errorMessage);
  showLogsButton.setVisibility(View.VISIBLE);
  showLogsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      Log.d(getClass().getName(),""String_Node_Str"");
      AlertDialog.Builder alert=new AlertDialog.Builder(getActivity());
      alert.setTitle(R.string.switch_listener_show_logs_title);
      WebView wv=new WebView(getActivity());
      final StringBuilder dataBuilder=new StringBuilder();
      dataBuilder.append(""String_Node_Str"");
      for (      final String logLine : logs) {
        dataBuilder.append(""String_Node_Str"").append(logLine).append(""String_Node_Str"");
      }
      dataBuilder.append(""String_Node_Str"");
      wv.loadDataWithBaseURL(""String_Node_Str"",dataBuilder.toString(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      alert.setView(wv);
      alert.setNegativeButton(R.string.switch_listener_show_logs_close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.dismiss();
        }
      }
);
      alert.show();
    }
  }
);
}","private void updateError(String errorMessage,final SwitchListenerResult result){
  Log.d(getClass().getName(),""String_Node_Str"");
  listenerSwitch.setClickable(false);
  secondaryActionButton.setClickable(false);
  errorText.setTextColor(Color.RED);
  errorText.setVisibility(View.VISIBLE);
  errorText.setText(errorMessage);
  showLogsButton.setVisibility(View.VISIBLE);
  showLogsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      Log.d(getClass().getName(),""String_Node_Str"");
      final AlertDialog.Builder alert=new AlertDialog.Builder(getActivity());
      alert.setTitle(R.string.switch_listener_show_logs_title);
      final WebView wv=new WebView(getActivity());
      final StringBuilder dataBuilder=new StringBuilder();
      dataBuilder.append(""String_Node_Str"");
      if (result.getError() != null) {
        dataBuilder.append(""String_Node_Str"").append(result.getError().getMessage()).append(""String_Node_Str"");
        final StringWriter sw=new StringWriter();
        final PrintWriter pw=new PrintWriter(sw);
        result.getError().printStackTrace(pw);
        final String stackTrace=sw.toString();
        pw.close();
        dataBuilder.append(""String_Node_Str"");
        dataBuilder.append(""String_Node_Str"").append(stackTrace).append(""String_Node_Str"");
      }
      if (result.getLogs() != null) {
        dataBuilder.append(""String_Node_Str"");
        dataBuilder.append(""String_Node_Str"");
        for (        final String logLine : result.getLogs()) {
          dataBuilder.append(logLine).append(""String_Node_Str"");
        }
        dataBuilder.append(""String_Node_Str"");
      }
      dataBuilder.append(""String_Node_Str"");
      wv.loadDataWithBaseURL(""String_Node_Str"",dataBuilder.toString(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      alert.setView(wv);
      alert.setNegativeButton(R.string.switch_listener_show_logs_close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.dismiss();
        }
      }
);
      alert.show();
    }
  }
);
}",0.7769381472152252
134573,"private void handleError(SwitchListenerResult result){
  Log.d(getClass().getName(),""String_Node_Str"");
  if (result == null || result.isSuccess()) {
    errorText.setVisibility(View.GONE);
    showLogsButton.setVisibility(View.GONE);
  }
 else   if (result.getError() instanceof MissingRequirementException) {
    final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
    updateMissingRequirement(resId);
  }
 else {
    updateError(result.getError().getMessage(),result.getLogs());
  }
}","private void handleError(SwitchListenerResult result){
  Log.d(getClass().getName(),""String_Node_Str"");
  if (result == null || result.isSuccess()) {
    if (!missingRequirement) {
      errorText.setVisibility(View.GONE);
      showLogsButton.setVisibility(View.GONE);
    }
  }
 else   if (result.getError() instanceof MissingRequirementException) {
    final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
    updateMissingRequirement(resId);
  }
 else {
    updateError(result.getError().getMessage(),result.getLogs());
  }
}",0.963294538943599
134574,"public SwitchListenerFragment(){
  callbacks=new SwitchListenerTaskFragment.CallBacks(){
    @Override public void updateState(    ListenerState state,    SwitchListenerResult result){
      Log.d(getClass().getName(),""String_Node_Str"" + state);
      proxyStartedTextView.setVisibility(View.GONE);
      handleError(result);
      if (state != null) {
switch (state) {
case STARTING:
          listenerSwitch.setEnabled(false);
        forceToggledWithoutListener(true);
      break;
case STARTED:
    listenerSwitch.setEnabled(true);
  forceToggledWithoutListener(true);
listenerStatus.setText(generateStatusStartedText());
String proxyUrl=""String_Node_Str"";
final DefaultSharedPreferencesHelper prefHelper=new DefaultSharedPreferencesHelper(getActivity());
if (prefHelper.isListenerNonLocalEnabled()) {
final WifiHelper wifiHelper=new WifiHelper(getActivity());
proxyUrl=wifiHelper.getWifiIpAddress() + ""String_Node_Str"";
}
proxyStartedTextView.setText(getString(R.string.switch_listener_proxy_started,proxyUrl));
proxyStartedTextView.setVisibility(View.VISIBLE);
break;
case START_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_start_failed);
break;
case STOPPING:
listenerSwitch.setEnabled(false);
forceToggledWithoutListener(false);
break;
case STOPPED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
break;
case STOP_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(true);
listenerStatus.setText(R.string.switch_listener_status_stop_failed);
break;
default :
}
}
 else {
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
}
}
private void handleError(SwitchListenerResult result){
Log.d(getClass().getName(),""String_Node_Str"");
if (result == null || result.isSuccess()) {
errorText.setVisibility(View.GONE);
showLogsButton.setVisibility(View.GONE);
}
 else if (result.getError() instanceof MissingRequirementException) {
final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
updateMissingRequirement(resId);
}
 else {
updateError(result.getError().getMessage(),result.getLogs());
}
}
}
;
}","public SwitchListenerFragment(){
  callbacks=new SwitchListenerTaskFragment.CallBacks(){
    @Override public void updateState(    ListenerState state,    SwitchListenerResult result){
      Log.d(getClass().getName(),""String_Node_Str"" + state);
      proxyStartedTextView.setVisibility(View.GONE);
      handleError(result);
      if (state != null) {
switch (state) {
case STARTING:
          listenerSwitch.setEnabled(false);
        forceToggledWithoutListener(true);
      break;
case STARTED:
    listenerSwitch.setEnabled(true);
  forceToggledWithoutListener(true);
listenerStatus.setText(generateStatusStartedText());
String proxyUrl=""String_Node_Str"";
final DefaultSharedPreferencesHelper prefHelper=new DefaultSharedPreferencesHelper(getActivity());
if (prefHelper.isListenerNonLocalEnabled()) {
final WifiHelper wifiHelper=new WifiHelper(getActivity());
proxyUrl=wifiHelper.getWifiIpAddress() + ""String_Node_Str"";
}
proxyStartedTextView.setText(getString(R.string.switch_listener_proxy_started,proxyUrl));
proxyStartedTextView.setVisibility(View.VISIBLE);
break;
case START_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_start_failed);
break;
case STOPPING:
listenerSwitch.setEnabled(false);
forceToggledWithoutListener(false);
break;
case STOPPED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
break;
case STOP_FAILED:
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(true);
listenerStatus.setText(R.string.switch_listener_status_stop_failed);
break;
default :
}
}
 else {
listenerSwitch.setEnabled(true);
forceToggledWithoutListener(false);
listenerStatus.setText(R.string.switch_listener_status_stopped);
}
}
private void handleError(SwitchListenerResult result){
Log.d(getClass().getName(),""String_Node_Str"");
if (result == null || result.isSuccess()) {
if (!missingRequirement) {
errorText.setVisibility(View.GONE);
showLogsButton.setVisibility(View.GONE);
}
}
 else if (result.getError() instanceof MissingRequirementException) {
final int resId=((MissingRequirementException)result.getError()).getRequirement().getErrorTextResId();
updateMissingRequirement(resId);
}
 else {
updateError(result.getError().getMessage(),result.getLogs());
}
}
}
;
}",0.9937888198757764
134575,"private void updateMissingRequirement(int textResId){
  Log.d(getClass().getName(),""String_Node_Str"");
  listenerSwitch.setClickable(false);
  secondaryActionButton.setClickable(false);
  errorText.setTextColor(Color.RED);
  errorText.setVisibility(View.VISIBLE);
  errorText.setText(textResId);
}","private void updateMissingRequirement(int textResId){
  Log.d(getClass().getName(),""String_Node_Str"");
  missingRequirement=true;
  listenerSwitch.setClickable(false);
  secondaryActionButton.setClickable(false);
  errorText.setTextColor(Color.RED);
  errorText.setVisibility(View.VISIBLE);
  errorText.setText(textResId);
}",0.9565217391304348
134576,"@Override public void onClick(View v){
  Log.d(getClass().getName(),""String_Node_Str"");
  checkBox.setChecked(!checkBox.isChecked());
}","@Override public void onClick(View v){
  Log.d(getClass().getName(),""String_Node_Str"");
  item.setChoosen(!item.isChoosen());
  checkBox.setChecked(item.isChoosen());
}",0.8118811881188119
134577,"@Override public View getView(int position,View view,ViewGroup parent){
  Log.d(getClass().getName(),""String_Node_Str"");
  final ChooseSyncModelContainer<SyncedMaterialModel> item=super.getItem(position);
  if (view == null) {
    final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(layout,null);
    defaultTextColor=((TextView)view.findViewById(R.id.choose_sync_materials_item_quantities)).getTextColors().getDefaultColor();
  }
  final CheckBox checkBox=(CheckBox)view.findViewById(R.id.choose_sync_materials_item_checkbox);
  checkBox.setChecked(item.isChoosen());
  checkBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(isChecked);
    }
  }
);
  final ImageView image=(ImageView)view.findViewById(R.id.choose_sync_materials_item_image);
  try {
    final InputStream is=getContext().getContentResolver().openInputStream(MonsterInfoDescriptor.UriHelper.uriForImage(item.getSyncedModel().getMonsterInfo().getId()));
    final BitmapDrawable bm=new BitmapDrawable(null,is);
    image.setImageDrawable(bm);
  }
 catch (  final FileNotFoundException e) {
    image.setImageResource(R.drawable.no_monster_image);
  }
  image.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(getClass().getName(),""String_Node_Str"");
      checkBox.setChecked(!checkBox.isChecked());
    }
  }
);
  final TextView nameText=(TextView)view.findViewById(R.id.choose_sync_materials_item_name);
  nameText.setText(getContext().getString(R.string.choose_sync_materials_item_name,item.getSyncedModel().getMonsterInfo().getId(),item.getSyncedModel().getMonsterInfo().getName()));
  final TextView quantitiesText=(TextView)view.findViewById(R.id.choose_sync_materials_item_quantities);
  quantitiesText.setText(getContext().getString(R.string.choose_sync_materials_item_quantities,item.getSyncedModel().getPadherderInfo(),item.getSyncedModel().getCapturedInfo()));
  if (item.getSyncedModel().getPadherderInfo() < item.getSyncedModel().getCapturedInfo()) {
    quantitiesText.setTextColor(Color.GREEN);
  }
 else   if (item.getSyncedModel().getPadherderInfo() > item.getSyncedModel().getCapturedInfo()) {
    quantitiesText.setTextColor(Color.RED);
  }
 else {
    quantitiesText.setTextColor(defaultTextColor);
  }
  return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  Log.d(getClass().getName(),""String_Node_Str"");
  final ChooseSyncModelContainer<SyncedMaterialModel> item=super.getItem(position);
  if (view == null) {
    final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(layout,null);
    defaultTextColor=((TextView)view.findViewById(R.id.choose_sync_materials_item_quantities)).getTextColors().getDefaultColor();
  }
  final CheckBox checkBox=(CheckBox)view.findViewById(R.id.choose_sync_materials_item_checkbox);
  checkBox.setChecked(item.isChoosen());
  checkBox.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(!item.isChoosen());
    }
  }
);
  final ImageView image=(ImageView)view.findViewById(R.id.choose_sync_materials_item_image);
  try {
    final InputStream is=getContext().getContentResolver().openInputStream(MonsterInfoDescriptor.UriHelper.uriForImage(item.getSyncedModel().getMonsterInfo().getId()));
    final BitmapDrawable bm=new BitmapDrawable(null,is);
    image.setImageDrawable(bm);
  }
 catch (  final FileNotFoundException e) {
    image.setImageResource(R.drawable.no_monster_image);
  }
  image.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(!item.isChoosen());
      checkBox.setChecked(item.isChoosen());
    }
  }
);
  final TextView nameText=(TextView)view.findViewById(R.id.choose_sync_materials_item_name);
  nameText.setText(getContext().getString(R.string.choose_sync_materials_item_name,item.getSyncedModel().getMonsterInfo().getId(),item.getSyncedModel().getMonsterInfo().getName()));
  final TextView quantitiesText=(TextView)view.findViewById(R.id.choose_sync_materials_item_quantities);
  quantitiesText.setText(getContext().getString(R.string.choose_sync_materials_item_quantities,item.getSyncedModel().getPadherderInfo(),item.getSyncedModel().getCapturedInfo()));
  if (item.getSyncedModel().getPadherderInfo() < item.getSyncedModel().getCapturedInfo()) {
    quantitiesText.setTextColor(Color.GREEN);
  }
 else   if (item.getSyncedModel().getPadherderInfo() > item.getSyncedModel().getCapturedInfo()) {
    quantitiesText.setTextColor(Color.RED);
  }
 else {
    quantitiesText.setTextColor(defaultTextColor);
  }
  return view;
}",0.9616225889838934
134578,"@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View view,ViewGroup parent){
  Log.d(getClass().getName(),""String_Node_Str"");
  final ChooseSyncModelContainer<SyncedMonsterModel> item=getChild(groupPosition,childPosition);
  if (view == null) {
    final LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(R.layout.choose_sync_item_monsters_child,parent,false);
    defaultTextColor=((TextView)view.findViewById(R.id.choose_sync_monsters_item_padherder_exp)).getTextColors().getDefaultColor();
  }
  final CheckBox checkBox=(CheckBox)view.findViewById(R.id.choose_sync_monsters_item_checkbox);
  checkBox.setChecked(item.isChoosen());
  checkBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(isChecked);
    }
  }
);
  final BaseMonsterModel padherder=item.getSyncedModel().getPadherderInfo();
  final BaseMonsterModel captured=item.getSyncedModel().getCapturedInfo();
  if (padherder != null && captured != null) {
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp(),R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel(),R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings(),R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp(),R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk(),R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv(),R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
  }
 else   if (padherder != null) {
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_captured_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv);
  }
 else {
    fillOneText(view,R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv);
  }
  return view;
}","@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View view,ViewGroup parent){
  Log.d(getClass().getName(),""String_Node_Str"");
  final ChooseSyncModelContainer<SyncedMonsterModel> item=getChild(groupPosition,childPosition);
  if (view == null) {
    final LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(R.layout.choose_sync_item_monsters_child,parent,false);
    defaultTextColor=((TextView)view.findViewById(R.id.choose_sync_monsters_item_padherder_exp)).getTextColors().getDefaultColor();
  }
  final CheckBox checkBox=(CheckBox)view.findViewById(R.id.choose_sync_monsters_item_checkbox);
  checkBox.setChecked(item.isChoosen());
  checkBox.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(!item.isChoosen());
    }
  }
);
  final BaseMonsterModel padherder=item.getSyncedModel().getPadherderInfo();
  final BaseMonsterModel captured=item.getSyncedModel().getCapturedInfo();
  if (padherder != null && captured != null) {
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp(),R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel(),R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings(),R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp(),R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk(),R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv(),R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
  }
 else   if (padherder != null) {
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_captured_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv);
  }
 else {
    fillOneText(view,R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv);
  }
  return view;
}",0.9834554478846608
134579,"@Override public void onClick(View v){
  Log.d(getClass().getName(),""String_Node_Str"");
  checkBox.setChecked(!checkBox.isChecked());
}","@Override public void onClick(View v){
  Log.d(getClass().getName(),""String_Node_Str"");
  item.setChoosen(!item.isChoosen());
  checkBox.setChecked(item.isChoosen());
}",0.8118811881188119
134580,"@Override public View getView(int position,View view,ViewGroup parent){
  Log.d(getClass().getName(),""String_Node_Str"");
  final ChooseSyncModelContainer<SyncedMonsterModel> item=super.getItem(position);
  if (view == null) {
    final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(R.layout.choose_sync_item_monsters_simple,parent,false);
    defaultTextColor=((TextView)view.findViewById(R.id.choose_sync_monsters_item_padherder_exp)).getTextColors().getDefaultColor();
  }
  final CheckBox checkBox=(CheckBox)view.findViewById(R.id.choose_sync_monsters_item_checkbox);
  checkBox.setChecked(item.isChoosen());
  checkBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(isChecked);
    }
  }
);
  final ImageView image=(ImageView)view.findViewById(R.id.choose_sync_monsters_item_image);
  try {
    final InputStream is=getContext().getContentResolver().openInputStream(MonsterInfoDescriptor.UriHelper.uriForImage(item.getSyncedModel().getMonsterInfo().getId()));
    final BitmapDrawable bm=new BitmapDrawable(null,is);
    image.setImageDrawable(bm);
  }
 catch (  final FileNotFoundException e) {
    image.setImageResource(R.drawable.no_monster_image);
  }
  image.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(getClass().getName(),""String_Node_Str"");
      checkBox.setChecked(!checkBox.isChecked());
    }
  }
);
  final TextView nameText=(TextView)view.findViewById(R.id.choose_sync_monsters_item_name);
  nameText.setText(getContext().getString(R.string.choose_sync_monsters_item_name_simple,item.getSyncedModel().getMonsterInfo().getId(),item.getSyncedModel().getMonsterInfo().getName()));
  final BaseMonsterModel padherder=item.getSyncedModel().getPadherderInfo();
  final BaseMonsterModel captured=item.getSyncedModel().getCapturedInfo();
  if (padherder != null && captured != null) {
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp(),R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel(),R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings(),R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp(),R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk(),R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv(),R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
  }
 else   if (padherder != null) {
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_captured_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv);
  }
 else {
    fillOneText(view,R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv);
  }
  return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  Log.d(getClass().getName(),""String_Node_Str"");
  final ChooseSyncModelContainer<SyncedMonsterModel> item=super.getItem(position);
  if (view == null) {
    final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(R.layout.choose_sync_item_monsters_simple,parent,false);
    defaultTextColor=((TextView)view.findViewById(R.id.choose_sync_monsters_item_padherder_exp)).getTextColors().getDefaultColor();
  }
  final CheckBox checkBox=(CheckBox)view.findViewById(R.id.choose_sync_monsters_item_checkbox);
  checkBox.setChecked(item.isChoosen());
  checkBox.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(!item.isChoosen());
    }
  }
);
  final ImageView image=(ImageView)view.findViewById(R.id.choose_sync_monsters_item_image);
  try {
    final InputStream is=getContext().getContentResolver().openInputStream(MonsterInfoDescriptor.UriHelper.uriForImage(item.getSyncedModel().getMonsterInfo().getId()));
    final BitmapDrawable bm=new BitmapDrawable(null,is);
    image.setImageDrawable(bm);
  }
 catch (  final FileNotFoundException e) {
    image.setImageResource(R.drawable.no_monster_image);
  }
  image.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(getClass().getName(),""String_Node_Str"");
      item.setChoosen(!item.isChoosen());
      checkBox.setChecked(item.isChoosen());
    }
  }
);
  final TextView nameText=(TextView)view.findViewById(R.id.choose_sync_monsters_item_name);
  nameText.setText(getContext().getString(R.string.choose_sync_monsters_item_name_simple,item.getSyncedModel().getMonsterInfo().getId(),item.getSyncedModel().getMonsterInfo().getName()));
  final BaseMonsterModel padherder=item.getSyncedModel().getPadherderInfo();
  final BaseMonsterModel captured=item.getSyncedModel().getCapturedInfo();
  if (padherder != null && captured != null) {
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp(),R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel(),R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings(),R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp(),R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk(),R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillBothText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv(),R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
  }
 else   if (padherder != null) {
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_exp,padherder.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_skill,padherder.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings,padherder.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp,padherder.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk,padherder.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv,padherder.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_captured_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv);
  }
 else {
    fillOneText(view,R.id.choose_sync_monsters_item_captured_exp,captured.getExp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_skill,captured.getSkillLevel());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_awakenings,captured.getAwakenings());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusHp,captured.getPlusHp());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusAtk,captured.getPlusAtk());
    fillOneText(view,R.id.choose_sync_monsters_item_captured_plusRcv,captured.getPlusRcv());
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_exp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_skill);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_awakenings);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusHp);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusAtk);
    resetOneText(view,R.id.choose_sync_monsters_item_padherder_plusRcv);
  }
  return view;
}",0.980106744298884
134581,"private void changeParser(final TextParser parser){
  this.parser=parser;
  parserReceived=true;
  readable=parser.getReadable();
  wordList=readable.getWordList();
  emphasisList=readable.getEmphasisList();
  delayList=readable.getDelayList();
  if (isStorable(readable)) {
    bytePosition=((Storable)readable).getBytePosition();
  }
}","private void changeParser(final TextParser parser){
  parserReceived=true;
  readable=parser.getReadable();
  wordList=readable.getWordList();
  emphasisList=readable.getEmphasisList();
  delayList=readable.getDelayList();
  if (isStorable(readable)) {
    bytePosition=((Storable)readable).getBytePosition();
  }
}",0.9662576687116564
134582,"private int calcDelay(){
  return delayList.get(position) * Math.round(100 * 60 * 1f / settingsBundle.getWPM());
}","private int calcDelay(){
  return (delayList.isEmpty()) ? 10 * Math.round(100 * 60 * 1f / settingsBundle.getWPM()) : delayList.get(position) * Math.round(100 * 60 * 1f / settingsBundle.getWPM());
}",0.7331189710610932
134583,"@Override public void readData(){
  try {
    inputDataLength=fileInputStream.read(inputData);
    if (inputDataLength != -1) {
      setText(new StringBuilder((new String(inputData,encoding)).substring(0,(int)inputDataLength)));
    }
 else {
      setText(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void readData(){
  try {
    if ((inputDataLength=fileInputStream.read(inputData)) != -1) {
      String toSet=new String(inputData,encoding);
      if (inputDataLength < toSet.length())       toSet=toSet.substring(0,(int)inputDataLength);
      setText(new StringBuilder(toSet));
    }
 else {
      setText(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7203166226912929
134584,"@Override public void run(){
  while (reader == null || !reader.isCompleted()) {
    try {
synchronized (parserDeque) {
        if (!currentReadable.isProcessed()) {
          currentReadable.process(getActivity());
          if (isFileStorable=isFileStorable(readable)) {
            fileSize=((FileStorable)readable).getFileSize();
          }
          currentReadable.readData();
          TextParser toAdd=TextParser.newInstance(currentReadable,settingsBundle);
          toAdd.process();
          parserDeque.add(toAdd);
        }
        while (parserDeque.size() < DEQUE_SIZE_LIMIT && parserDeque.size() > 0 && !TextUtils.isEmpty(parserDeque.getLast().getReadable().getText())) {
          parserDeque.addLast(getNextParser(parserDeque.getLast()));
        }
      }
      if (reader == null) {
        startReader(removeDequeHead());
      }
      if (reader != null) {
        reader.setChunkReady(parserDeque.size() > 1);
        object.pauseTask();
      }
 else {
        break;
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  while (reader == null || !reader.isCompleted()) {
    try {
synchronized (parserDeque) {
        if (!currentReadable.isProcessed()) {
          currentReadable.process(getActivity());
          if (isFileStorable=isFileStorable(readable)) {
            fileSize=((FileStorable)readable).getFileSize();
          }
          currentReadable.readData();
          TextParser toAdd=TextParser.newInstance(currentReadable,settingsBundle);
          toAdd.process();
          parserDeque.add(toAdd);
        }
        while (parserDeque.size() < DEQUE_SIZE_LIMIT && parserDeque.size() > 0 && !TextUtils.isEmpty(parserDeque.getLast().getReadable().getText())) {
          parserDeque.addLast(getNextParser(parserDeque.getLast()));
        }
      }
      if (reader == null) {
        startReader(removeDequeHead());
      }
      if (reader != null) {
        reader.setChunkAvailable(isChunkAvailable());
        object.pauseTask();
      }
 else {
        break;
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.974145891043398
134585,"public void setPosition(int position){
  if (wordList != null && position < wordList.size() && position >= 0) {
    this.position=position;
    updateView(position);
    showInfo(this);
  }
}","public void setPosition(int position){
  if (wordList != null && emphasisList != null && delayList != null && position < wordList.size() && position >= 0) {
    this.position=position;
    updateView(position);
    showInfo(this);
  }
}",0.8946135831381733
134586,"private void changeParser(final TextParser parser){
  this.parser=parser;
  parserReceived=true;
  readable=parser.getReadable();
  wordList=readable.getWordList();
  emphasisList=readable.getEmphasisList();
  delayList=readable.getDelayList();
  if (isStorable=isStorable(readable)) {
    bytePosition=((Storable)readable).getBytePosition();
  }
}","private void changeParser(final TextParser parser){
  this.parser=parser;
  parserReceived=true;
  readable=parser.getReadable();
  wordList=readable.getWordList();
  emphasisList=readable.getEmphasisList();
  delayList=readable.getDelayList();
  if (isStorable(readable)) {
    bytePosition=((Storable)readable).getBytePosition();
  }
}",0.983941605839416
134587,"private void updateView(int pos){
  currentTextView.setText(getCurrentFormattedText(pos));
  leftTextView.setText(getLeftFormattedText(pos));
  rightTextView.setText(getRightFormattedText(pos));
  approxCharCount+=wordList.get(pos).length();
  progress=(isFileStorable) ? Math.min((int)(100f * (bytePosition + approxCharCount) / fileSize + .5f),99) : (int)(100f / wordList.size() * (pos + 1) + .5f);
  progressBar.setProgress(progress);
  hideNotification(false);
}","private void updateView(int pos){
  if (pos >= wordList.size())   return;
  currentTextView.setText(getCurrentFormattedText(pos));
  leftTextView.setText(getLeftFormattedText(pos));
  rightTextView.setText(getRightFormattedText(pos));
  approxCharCount+=wordList.get(pos).length();
  progress=(isFileStorable) ? Math.min((int)(100f * (bytePosition + approxCharCount) / fileSize + .5f),99) : (int)(100f / wordList.size() * (pos + 1) + .5f);
  progressBar.setProgress(progress);
  hideNotification(false);
}",0.9587628865979382
134588,"public void copyListPrefix(Readable next){
  List<String> nextWordList=next.getWordList();
  wordList.addAll(new ArrayList<String>(nextWordList.subList(0,Math.min(LAST_WORD_PREFIX_SIZE,nextWordList.size()))));
}","public void copyListPrefix(Readable next){
  List<String> nextWordList=next.getWordList();
  wordList.addAll(new ArrayList<String>(nextWordList.subList(0,Math.min(LAST_WORD_PREFIX_SIZE,nextWordList.size()))));
  List<Integer> nextEmphasisList=next.getEmphasisList();
  emphasisList.addAll(new ArrayList<Integer>(nextEmphasisList.subList(0,Math.min(LAST_WORD_PREFIX_SIZE,nextEmphasisList.size()))));
  List<Integer> nextDelayList=next.getDelayList();
  delayList.addAll(new ArrayList<Integer>(nextDelayList.subList(0,Math.min(LAST_WORD_PREFIX_SIZE,nextDelayList.size()))));
}",0.5375796178343949
134589,"public void checkResult(){
  int resultCode;
  if (readable != null) {
    if (TextUtils.isEmpty(readable.getText()) || readable.getWordList().isEmpty() || readable.getWordList().size() < 2 || readable.isProcessFailed()) {
switch (this.getReadable().getType()) {
case Readable.TYPE_CLIPBOARD:
        resultCode=RESULT_CODE_EMPTY_CLIPBOARD;
      break;
case Readable.TYPE_FILE:
    resultCode=RESULT_CODE_WRONG_EXT;
  break;
case Readable.TYPE_TXT:
resultCode=RESULT_CODE_WRONG_EXT;
break;
case Readable.TYPE_EPUB:
resultCode=RESULT_CODE_WRONG_EXT;
break;
case Readable.TYPE_NET:
resultCode=RESULT_CODE_CANT_FETCH;
break;
default :
resultCode=RESULT_CODE_WTF;
break;
}
}
 else {
resultCode=RESULT_CODE_OK;
}
}
 else {
resultCode=RESULT_CODE_WTF;
}
setResultCode(resultCode);
}","public void checkResult(){
  int resultCode;
  if (readable != null) {
    if (TextUtils.isEmpty(readable.getText()) || readable.getWordList().isEmpty() || readable.isProcessFailed()) {
switch (this.getReadable().getType()) {
case Readable.TYPE_CLIPBOARD:
        resultCode=RESULT_CODE_EMPTY_CLIPBOARD;
      break;
case Readable.TYPE_FILE:
    resultCode=RESULT_CODE_WRONG_EXT;
  break;
case Readable.TYPE_TXT:
resultCode=RESULT_CODE_WRONG_EXT;
break;
case Readable.TYPE_EPUB:
resultCode=RESULT_CODE_WRONG_EXT;
break;
case Readable.TYPE_NET:
resultCode=RESULT_CODE_CANT_FETCH;
break;
default :
resultCode=RESULT_CODE_WTF;
break;
}
}
 else {
resultCode=RESULT_CODE_OK;
}
}
 else {
resultCode=RESULT_CODE_WTF;
}
setResultCode(resultCode);
}",0.975609756097561
134590,"/** 
 * @return serialized instance
 */
@Override public String toString(){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ObjectOutputStream oos=null;
  try {
    oos=new ObjectOutputStream(baos);
    oos.writeObject(this);
    oos.close();
    return new String(Base64Coder.encode(baos.toByteArray()));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * @return serialized instance
 */
@Override public String toString(){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ObjectOutputStream oos;
  try {
    oos=new ObjectOutputStream(baos);
    oos.writeObject(this);
    oos.close();
    return new String(Base64Coder.encode(baos.toByteArray()));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}",0.9936143039591316
134591,"@Override public void readData(){
  try {
    if (fileReader.read(inputData) != -1) {
      setText(new StringBuilder(new String(inputData)));
    }
 else {
      setText(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void readData(){
  try {
    int inputDataLength=fileReader.read(inputData);
    if (inputDataLength != -1) {
      setText(new StringBuilder((new String(inputData)).substring(0,inputDataLength)));
    }
 else {
      setText(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7857142857142857
134592,"public void assignFields(){
  WPM=Integer.parseInt(sharedPreferences.getString(Constants.Preferences.WPM,Constants.DEFAULT_WPM));
  typeface=Integer.parseInt(sharedPreferences.getString(Constants.Preferences.TYPEFACE,""String_Node_Str""));
  swipesEnabled=sharedPreferences.getBoolean(Constants.Preferences.SWIPE,true);
  showingContextEnabled=sharedPreferences.getBoolean(Constants.Preferences.SHOW_CONTEXT,true);
  punctuationSpeedDiffers=sharedPreferences.getBoolean(Constants.Preferences.PUNCTUATION_DIFFERS,true);
  delayCoefficients=buildDelayListCoefficients();
}","public void assignFields(){
  WPM=Integer.parseInt(sharedPreferences.getString(Constants.Preferences.WPM,Constants.DEFAULT_WPM));
  typeface=Integer.parseInt(sharedPreferences.getString(Constants.Preferences.TYPEFACE,""String_Node_Str""));
  swipesEnabled=sharedPreferences.getBoolean(Constants.Preferences.SWIPE,false);
  showingContextEnabled=sharedPreferences.getBoolean(Constants.Preferences.SHOW_CONTEXT,true);
  punctuationSpeedDiffers=sharedPreferences.getBoolean(Constants.Preferences.PUNCTUATION_DIFFERS,true);
  delayCoefficients=buildDelayListCoefficients();
}",0.9938434476693052
134593,"private void inflateActionMenu(View v){
  View actionView=v.findViewById(R.id.action_view);
  View mainView=v.findViewById(R.id.main_view);
  int height=mainView.getLayoutParams().height;
  actionView.setMinimumHeight(height);
  YoYo.with(Techniques.SlideOutRight).duration(DURATION).playOn(mainView);
  actionView.setVisibility(View.VISIBLE);
  YoYo.with(Techniques.FadeIn).duration(DURATION).playOn(actionView);
}","private void inflateActionMenu(View v){
  View actionView=v.findViewById(R.id.action_view);
  View mainView=v.findViewById(R.id.main_view);
  int height=mainView.getHeight();
  actionView.setMinimumHeight(height);
  YoYo.with(Techniques.SlideOutRight).duration(DURATION).playOn(mainView);
  actionView.setVisibility(View.VISIBLE);
  YoYo.with(Techniques.FadeIn).duration(DURATION).playOn(actionView);
}",0.9645042839657284
134594,"@Override public View getView(final int position,View convertView,ViewGroup parent){
  final View view=(convertView == null) ? inflater.inflate(R.layout.list_element_main,parent,false) : convertView;
  final MiniReadable readable=getItem(position);
  final TextView textViewTitle=(TextView)view.findViewById(R.id.text_view_title);
  final TextView textViewFilename=(TextView)view.findViewById(R.id.text_view_filename);
  final TextView textViewPercent=(TextView)view.findViewById(R.id.text_view_percent);
  final String path=readable.getPath();
  String filename=path.substring(path.lastIndexOf('/') + 1);
  textViewTitle.setText(readable.getHeader());
  textViewFilename.setText(filename);
  textViewPercent.setText(readable.getPercent());
  view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(LOGTAG,""String_Node_Str"");
      if (usedPosition != position || usedView == null || !path.equals(((TextView)usedView.findViewById(R.id.text_view_filename)).getText().toString())) {
        hideActionView();
        Bundle args=new Bundle();
        args.putInt(Constants.EXTRA_TYPE,Storable.TYPE_FILE);
        args.putString(Constants.EXTRA_PATH,path);
        args.putString(Constants.EXTRA_HEADER,textViewTitle.getText().toString());
        ReceiverActivity.startReceiverActivity(CachedFilesAdapter.this.context,args);
      }
    }
  }
);
  view.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      Log.d(LOGTAG,""String_Node_Str"");
      if (usedPosition == position) {
        Log.d(LOGTAG,""String_Node_Str"");
      }
 else {
        hideActionView();
        inflateActionMenu(view);
        usedView=view;
        usedPosition=position;
        (view.findViewById(R.id.imageViewDelete)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            getConfirmation(path,position);
            hideActionView();
          }
        }
);
        (view.findViewById(R.id.imageViewEdit)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            buildEditorDialog(readable);
            hideActionView();
          }
        }
);
        (view.findViewById(R.id.imageViewBack)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            hideActionView();
          }
        }
);
        (view.findViewById(R.id.imageViewAbout)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            buildInfoDialog(readable);
            hideActionView();
          }
        }
);
        return true;
      }
      return false;
    }
  }
);
  return view;
}","@Override public View getView(final int position,View convertView,ViewGroup parent){
  final View view=(convertView == null) ? inflater.inflate(R.layout.list_element_main,parent,false) : convertView;
  final MiniReadable readable=getItem(position);
  final TextView textViewTitle=(TextView)view.findViewById(R.id.text_view_title);
  final TextView textViewFilename=(TextView)view.findViewById(R.id.text_view_filename);
  final TextView textViewPercent=(TextView)view.findViewById(R.id.text_view_percent);
  final String path=readable.getPath();
  String filename=path.substring(path.lastIndexOf('/') + 1);
  textViewTitle.setText(readable.getHeader());
  textViewFilename.setText(filename);
  textViewPercent.setText(readable.getPercent());
  view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Log.d(LOGTAG,""String_Node_Str"");
      if (usedPosition != position || usedView == null) {
        hideActionView();
        Bundle args=new Bundle();
        args.putInt(Constants.EXTRA_TYPE,Storable.TYPE_FILE);
        args.putString(Constants.EXTRA_PATH,path);
        args.putString(Constants.EXTRA_HEADER,textViewTitle.getText().toString());
        ReceiverActivity.startReceiverActivity(CachedFilesAdapter.this.context,args);
      }
    }
  }
);
  view.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      Log.d(LOGTAG,""String_Node_Str"");
      if (usedPosition == position) {
        Log.d(LOGTAG,""String_Node_Str"");
      }
 else {
        hideActionView();
        inflateActionMenu(view);
        usedView=view;
        usedPosition=position;
        (view.findViewById(R.id.imageViewDelete)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            getConfirmation(path,position);
            hideActionView();
          }
        }
);
        (view.findViewById(R.id.imageViewEdit)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            buildEditorDialog(readable);
            hideActionView();
          }
        }
);
        (view.findViewById(R.id.imageViewBack)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            hideActionView();
          }
        }
);
        (view.findViewById(R.id.imageViewAbout)).setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            buildInfoDialog(readable);
            hideActionView();
          }
        }
);
        return true;
      }
      return false;
    }
  }
);
  return view;
}",0.982392448720276
134595,"protected String insertSpacesAfterPunctuation(String text){
  StringBuilder res=new StringBuilder();
  String madeMeSpecial=makeMeSpecial.substring(1,9) + ""String_Node_Str"";
  for (int i=0; i < text.length(); ++i) {
    Character ch=text.charAt(i);
    res.append(ch);
    if (i < text.length() - 1) {
      Character nextCh=text.charAt(i + 1);
      if (madeMeSpecial.indexOf(ch) > -1 && Character.isLetter(nextCh))       res.append(""String_Node_Str"");
    }
  }
  for (  Character ch : text.toCharArray()) {
    res.append(ch);
    if (madeMeSpecial.indexOf(ch) > -1)     res.append(""String_Node_Str"");
  }
  return res.toString();
}","protected String insertSpacesAfterPunctuation(String text){
  StringBuilder res=new StringBuilder();
  String madeMeSpecial=makeMeSpecial.substring(1,9) + ""String_Node_Str"";
  for (int i=0; i < text.length(); ++i) {
    Character ch=text.charAt(i);
    res.append(ch);
    if (i < text.length() - 1) {
      Character nextCh=text.charAt(i + 1);
      if (madeMeSpecial.indexOf(ch) > -1 && Character.isLetter(nextCh))       res.append(""String_Node_Str"");
    }
  }
  return res.toString();
}",0.8302222222222222
134596,"protected String clearFromRepetitions(String text){
  StringBuilder result=new StringBuilder();
  int previousPosition=-1;
  for (  Character ch : text.toCharArray()) {
    int position=makeMeSpecial.indexOf(ch);
    if (position > -1 && position != previousPosition) {
      previousPosition=position;
      result.append(ch);
    }
 else     if (position < 0) {
      previousPosition=-1;
      result.append(ch);
    }
  }
  return result.toString();
}","protected String clearFromRepetitions(String text){
  StringBuilder res=new StringBuilder();
  int previousPosition=-1;
  for (  Character ch : text.toCharArray()) {
    int position=makeMeSpecial.indexOf(ch);
    if (position > -1 && position != previousPosition) {
      previousPosition=position;
      res.append(ch);
    }
 else     if (position < 0) {
      previousPosition=-1;
      res.append(ch);
    }
  }
  return res.toString();
}",0.9866369710467706
134597,"@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return new CursorLoader(getActivity(),LastReadContentProvider.CONTENT_URI,null,null,null,null);
}","@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  Log.d(LOGTAG,""String_Node_Str"");
  return new CursorLoader(getActivity(),LastReadContentProvider.CONTENT_URI,null,null,null,null);
}",0.9051490514905148
134598,"@Override public void onLoaderReset(Loader loader){
  objectsContainer=new ArrayList<MiniReadable>();
  adapter.updateAll(objectsContainer);
}","@Override public void onLoaderReset(Loader loader){
  Log.d(LOGTAG,""String_Node_Str"");
  objectsContainer=new ArrayList<MiniReadable>();
  adapter.updateAll(objectsContainer);
}",0.890282131661442
134599,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){
  objectsContainer=MiniReadable.getFromCursor(data);
  adapter.updateAll(objectsContainer);
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){
  Log.d(LOGTAG,""String_Node_Str"");
  objectsContainer=MiniReadable.getFromCursor(data);
  adapter.updateAll(objectsContainer);
}",0.904632152588556
134600,"public static ArrayList<MiniReadable> getFromCursor(Cursor cursor){
  ArrayList<MiniReadable> result=new ArrayList<MiniReadable>();
  if (cursor != null) {
    while (cursor.moveToNext())     result.add(new MiniReadable(cursor.getString(LastReadDBHelper.COLUMN_PATH),cursor.getString(LastReadDBHelper.COLUMN_HEADER),cursor.getString(LastReadDBHelper.COLUMN_PERCENT),cursor.getInt(LastReadDBHelper.COLUMN_POSITION)));
  }
  return result;
}","public static ArrayList<MiniReadable> getFromCursor(Cursor cursor){
  ArrayList<MiniReadable> result=new ArrayList<MiniReadable>();
  if (cursor != null && cursor.getCount() > 0) {
    cursor.moveToFirst();
    do {
      result.add(new MiniReadable(cursor.getString(LastReadDBHelper.COLUMN_PATH),cursor.getString(LastReadDBHelper.COLUMN_HEADER),cursor.getString(LastReadDBHelper.COLUMN_PERCENT),cursor.getInt(LastReadDBHelper.COLUMN_POSITION)));
    }
 while (cursor.moveToNext());
  }
  return result;
}",0.8707627118644068
134601,"@Override public Cursor queryRoots(final String[] projection) throws FileNotFoundException {
  final MatrixCursor result=new MatrixCursor(projection != null ? projection : DEFAULT_ROOT_PROJECTION);
  File homeDir=Environment.getExternalStorageDirectory();
  final MatrixCursor.RowBuilder row=result.newRow();
  row.add(Root.COLUMN_ROOT_ID,homeDir.getAbsolutePath());
  row.add(Root.COLUMN_DOCUMENT_ID,homeDir.getAbsolutePath());
  row.add(Root.COLUMN_TITLE,getContext().getString(R.string.internal_storage));
  row.add(Root.COLUMN_FLAGS,Root.FLAG_LOCAL_ONLY | Root.FLAG_SUPPORTS_CREATE);
  row.add(Root.COLUMN_ICON,R.drawable.ic_provider);
  row.add(Root.COLUMN_AVAILABLE_BYTES,homeDir.getFreeSpace());
  return result;
}","@Override public Cursor queryRoots(final String[] projection) throws FileNotFoundException {
  final MatrixCursor result=new MatrixCursor(projection != null ? projection : DEFAULT_ROOT_PROJECTION);
  File homeDir=Environment.getExternalStorageDirectory();
  final MatrixCursor.RowBuilder row=result.newRow();
  row.add(Root.COLUMN_ROOT_ID,homeDir.getParent());
  row.add(Root.COLUMN_DOCUMENT_ID,homeDir.getParent());
  row.add(Root.COLUMN_TITLE,getContext().getString(R.string.all_storage));
  row.add(Root.COLUMN_FLAGS,Root.FLAG_LOCAL_ONLY | Root.FLAG_SUPPORTS_CREATE);
  row.add(Root.COLUMN_ICON,R.drawable.ic_provider);
  row.add(Root.COLUMN_AVAILABLE_BYTES,homeDir.getFreeSpace());
  return result;
}",0.9740350877192984
134602,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case FILE_SELECT_CODE:
    if (resultCode == RESULT_OK)     ReceiverActivity.startReceiverActivity(this,Readable.TYPE_FILE,data.getData().toString());
  break;
}
super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case FILE_SELECT_CODE:
    String relativePath=data.getData().toString();
  if (resultCode == RESULT_OK) {
    if (FileStorable.isExtensionValid(FileStorable.getExtension(relativePath)))     ReceiverActivity.startReceiverActivity(this,Readable.TYPE_FILE,relativePath);
 else     Toast.makeText(this,R.string.wrong_ext,Toast.LENGTH_SHORT).show();
  }
break;
}
super.onActivityResult(requestCode,resultCode,data);
}",0.7161366313309776
134603,"public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileStorable.takePath(context,path);
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    Book book=(new EpubReader()).readEpub(new FileInputStream(path));
    for (    Resource res : book.getContents())     text.append(new String(res.getData()));
    text=new StringBuilder(parseEpub(text.toString()));
    createRowData(context);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
}","public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileStorable.takePath(context,path);
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    Book book=(new EpubReader()).readEpub(new FileInputStream(path));
    for (    Resource res : book.getContents())     text.append(new String(res.getData()));
    text=new StringBuilder(parseEpub(text.toString()));
    createRowData(context);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9434306569343066
134604,"public static String takePath(Context context,String s) throws URISyntaxException {
  if (""String_Node_Str"".equals(s.substring(0,7))) {
    return FileStorable.takePath(context,Uri.parse(s));
  }
 else   return s;
}","public static String takePath(Context context,String s){
  String candidate=FileStorable.takePath(context,Uri.parse(s));
  if (TextUtils.isEmpty(candidate))   return s;
  return candidate;
}",0.6567901234567901
134605,"public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileStorable.takePath(context,path);
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    FileReader fileReader=new FileReader(path);
    BufferedReader br=new BufferedReader(fileReader);
    String sCurrentLine;
    while ((sCurrentLine=br.readLine()) != null)     text.append(sCurrentLine).append('\n');
    br.close();
    createRowData(context);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
}","public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileStorable.takePath(context,path);
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    FileReader fileReader=new FileReader(path);
    BufferedReader br=new BufferedReader(fileReader);
    String sCurrentLine;
    while ((sCurrentLine=br.readLine()) != null)     text.append(sCurrentLine).append('\n');
    br.close();
    createRowData(context);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9452296819787986
134606,"@Override public void onStop(){
  Log.d(LOGTAG,""String_Node_Str"");
  Activity activity=getActivity();
  if (isStorable()) {
    Storable storable=(Storable)readable;
    if (reader.isCompleted()) {
      activity.startService(createLastReadServiceIntent(activity,storable,Constants.DB_OPERATION_DELETE));
    }
 else {
      activity.startService(createLastReadServiceIntent(activity,storable,Constants.DB_OPERATION_INSERT));
    }
  }
  settingsBundle.updatePreferences();
  manager.unregisterReceiver(textParserListener);
  activity.finish();
  super.onStop();
}","@Override public void onStop(){
  Log.d(LOGTAG,""String_Node_Str"");
  Activity activity=getActivity();
  if (isStorable() && reader != null) {
    Storable storable=(Storable)readable;
    int operation=(reader.isCompleted()) ? Constants.DB_OPERATION_DELETE : Constants.DB_OPERATION_INSERT;
    activity.startService(createLastReadServiceIntent(activity,storable,operation));
  }
  settingsBundle.updatePreferences();
  manager.unregisterReceiver(textParserListener);
  activity.finish();
  super.onStop();
}",0.7189542483660131
134607,"private Boolean isStorable(){
  return parserReceived && readable != null && settingsBundle != null && !TextUtils.isEmpty(readable.getPath()) && settingsBundle.isCachingEnabled();
}","private Boolean isStorable(){
  return parserReceived && readable != null && settingsBundle != null && settingsBundle.isCachingEnabled() && !TextUtils.isEmpty(readable.getPath());
}",0.7955801104972375
134608,"private void receiveParser(Context context,Intent intent){
  try {
    parser=TextParser.fromString(intent.getStringExtra(Constants.EXTRA_PARSER));
    parserReceived=true;
    readable=parser.getReadable();
    wordList=readable.getWordList();
    emphasisList=readable.getEmphasisList();
    delayList=readable.getDelayList();
    YoYo.with(Techniques.FadeOut).duration(Constants.SECOND / 2).playOn(parsingProgressBar);
    readerLayout.setVisibility(View.VISIBLE);
    YoYo.with(Techniques.BounceIn).duration(2 * Constants.SECOND).playOn(readerLayout);
    final Handler handler=new Handler();
    readable.setPosition(Math.max(readable.getPosition() - Constants.READER_START_OFFSET,0));
    reader=new Reader(handler,readable.getPosition());
    handler.postDelayed(reader,3 * Constants.SECOND);
    if (isStorable())     context.startService(createLastReadServiceIntent(context,(Storable)readable,Constants.DB_OPERATION_INSERT));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","private void receiveParser(Context context,Intent intent){
  try {
    int resultCode=intent.getIntExtra(Constants.EXTRA_PARSER_RESULT_CODE,TextParserService.RESULT_CODE_OK);
    if (resultCode == TextParserService.RESULT_CODE_OK) {
      parser=TextParser.fromString(intent.getStringExtra(Constants.EXTRA_PARSER));
      parserReceived=true;
      readable=parser.getReadable();
      wordList=readable.getWordList();
      emphasisList=readable.getEmphasisList();
      delayList=readable.getDelayList();
      YoYo.with(Techniques.FadeOut).duration(Constants.SECOND / 2).playOn(parsingProgressBar);
      readerLayout.setVisibility(View.VISIBLE);
      YoYo.with(Techniques.BounceIn).duration(2 * Constants.SECOND).playOn(readerLayout);
      final Handler handler=new Handler();
      readable.setPosition(Math.max(readable.getPosition() - Constants.READER_START_OFFSET,0));
      reader=new Reader(handler,readable.getPosition());
      handler.postDelayed(reader,3 * Constants.SECOND);
      if (isStorable()) {
        context.startService(createLastReadServiceIntent(context,(Storable)readable,Constants.DB_OPERATION_INSERT));
      }
    }
 else {
      int stringId;
switch (resultCode) {
case TextParserService.RESULT_CODE_WRONG_EXT:
        stringId=R.string.wrong_ext;
      break;
case TextParserService.RESULT_CODE_EMPTY_CLIPBOARD:
    stringId=R.string.clipboard_empty;
  break;
case TextParserService.RESULT_CODE_CANT_FETCH:
stringId=R.string.cant_fetch;
break;
default :
stringId=R.string.text_null;
break;
}
Toast.makeText(context,stringId,Toast.LENGTH_SHORT).show();
onStop();
}
}
 catch (IOException e) {
e.printStackTrace();
}
catch (ClassNotFoundException e) {
e.printStackTrace();
}
}",0.7155234657039711
134609,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_receiver);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  Bundle bundle=bundleReceivedData();
  startReaderFragment(bundle);
  startService(createParserServiceIntent(bundle));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_receiver);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  Bundle bundle=bundleReceivedData();
  startReaderFragment(bundle);
  startTextParserService(bundle);
}",0.9440242057488654
134610,"private void startReaderFragment(Bundle bundle){
  Fragment readerFragment=new ReaderFragment();
  readerFragment.setArguments(bundle);
  FragmentTransaction transaction=getFragmentManager().beginTransaction();
  transaction.replace(R.id.fragment_container,readerFragment);
  transaction.addToBackStack(null);
  transaction.commit();
}","private void startReaderFragment(Bundle bundle){
  if (bundle != null) {
    Fragment readerFragment=new ReaderFragment();
    readerFragment.setArguments(bundle);
    FragmentTransaction transaction=getFragmentManager().beginTransaction();
    transaction.replace(R.id.fragment_container,readerFragment);
    transaction.addToBackStack(null);
    transaction.commit();
  }
 else {
    Log.d(LOGTAG,""String_Node_Str"");
  }
}",0.764163372859025
134611,"private Bundle bundleReceivedData(){
  Bundle bundle=getIntent().getExtras();
  if (bundle != null && !bundle.containsKey(Intent.EXTRA_TEXT) && !bundle.containsKey(Constants.EXTRA_TYPE))   bundle.putInt(Constants.EXTRA_TYPE,Readable.TYPE_TEST);
  Log.d(LOGTAG,""String_Node_Str"" + ((bundle == null) ? ""String_Node_Str"" : bundle.toString()));
  return bundle;
}","private Bundle bundleReceivedData(){
  Bundle bundle=getIntent().getExtras();
  Log.d(LOGTAG,""String_Node_Str"" + ((bundle == null) ? ""String_Node_Str"" : bundle.toString()));
  return bundle;
}",0.6969147005444646
134612,"private Intent createParserServiceIntent(Bundle bundle){
  Intent intent=new Intent(this,TextParserService.class);
  if (bundle != null)   intent.putExtras(bundle);
  return intent;
}","private Intent createParserServiceIntent(Bundle bundle){
  if (bundle != null) {
    Intent intent=new Intent(this,TextParserService.class);
    intent.putExtras(bundle);
    return intent;
  }
 else {
    Log.d(LOGTAG,""String_Node_Str"");
    return null;
  }
}",0.6666666666666666
134613,"public void process(Context context){
  ClipboardManager clipboard=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
  if (processFailed=!clipboard.hasText())   Toast.makeText(context,context.getResources().getString(R.string.clipboard_empty),Toast.LENGTH_SHORT).show();
 else   text.append(paste(clipboard));
}","public void process(Context context){
  ClipboardManager clipboard=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
  if (processFailed=!clipboard.hasText()) {
    Log.d(LOGTAG,""String_Node_Str"");
  }
 else {
    text.append(paste(clipboard));
  }
}",0.7396351575456053
134614,"public EpubFileStorable(){
  extension=""String_Node_Str"";
  type=TYPE_EPUB;
}","public EpubFileStorable(String path){
  extension=""String_Node_Str"";
  type=TYPE_EPUB;
  this.path=path;
}",0.8415300546448088
134615,"public static FileStorable createFileStorable(String intentPath){
  FileStorable fileStorable;
switch (getIntentType(intentPath)) {
case Readable.TYPE_TXT:
    fileStorable=new TxtFileStorable();
  break;
case Readable.TYPE_EPUB:
fileStorable=new EpubFileStorable();
break;
default :
fileStorable=null;
}
return fileStorable;
}","public static FileStorable createFileStorable(String intentPath){
  FileStorable fileStorable;
switch (getIntentType(intentPath)) {
case Readable.TYPE_TXT:
    fileStorable=new TxtFileStorable(intentPath);
  break;
case Readable.TYPE_EPUB:
fileStorable=new EpubFileStorable(intentPath);
break;
default :
fileStorable=null;
}
return fileStorable;
}",0.9703264094955488
134616,"@Override public void process(Context context){
  if (!TextUtils.isEmpty(link)) {
    text=new StringBuilder(parseArticle(link));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  path=context.getFilesDir() + ""String_Node_Str"" + cleanFileName(title)+ ""String_Node_Str"";
  rowData=takeRowData(context);
  if (rowData != null)   position=rowData.getPosition();
 else   createStorageFile(context,path,text.toString());
}","@Override public void process(Context context){
  if (!TextUtils.isEmpty(link)) {
    if (isNetworkAvailable(context)) {
      text=new StringBuilder(parseArticle(link));
    }
 else {
      processFailed=true;
      return;
    }
  }
 else {
    processFailed=true;
    return;
  }
  path=context.getFilesDir() + ""String_Node_Str"" + cleanFileName(title)+ ""String_Node_Str"";
  rowData=takeRowData(context);
  if (rowData != null)   position=rowData.getPosition();
 else   createStorageFile(context,path,text.toString());
}",0.6832298136645962
134617,"public Reader(Handler handler,int position){
  this.handler=handler;
  this.position=position;
}","public Reader(Handler handler,int position){
  this.handler=handler;
  this.position=position;
  completed=false;
}",0.909952606635071
134618,"@Override public void run(){
  int wordLength=wordList.size();
  int i=position;
  if (i < wordLength) {
    completed=false;
    if (!isCancelled()) {
      updateView(i % wordLength);
      handler.postDelayed(this,calcDelay(wordLength));
    }
 else {
      handler.postDelayed(this,Constants.READER_SLEEP_IDLE);
    }
  }
 else {
    completed=true;
    cancelled=1;
  }
}","@Override public void run(){
  if (position < wordList.size()) {
    completed=false;
    if (!isCancelled()) {
      updateView(position);
      handler.postDelayed(this,calcDelay());
      position++;
    }
 else {
      handler.postDelayed(this,Constants.READER_SLEEP_IDLE);
    }
  }
 else {
    completed=true;
    cancelled=1;
  }
}",0.7282913165266106
134619,"@Override public void onStop(){
  Log.d(LOGTAG,""String_Node_Str"");
  Activity activity=getActivity();
  if (isSavable()) {
    Storable storable=(Storable)readable;
    if (reader.isCompleted()) {
      activity.startService(createLastReadServiceIntent(activity,storable,Constants.DB_OPERATION_DELETE));
    }
 else {
      activity.startService(createLastReadServiceIntent(activity,storable,Constants.DB_OPERATION_INSERT));
    }
  }
  settingsBundle.updatePreferences();
  manager.unregisterReceiver(textParserListener);
  activity.finish();
  super.onStop();
}","@Override public void onStop(){
  Log.d(LOGTAG,""String_Node_Str"");
  Activity activity=getActivity();
  if (isStorable()) {
    Storable storable=(Storable)readable;
    if (reader.isCompleted()) {
      activity.startService(createLastReadServiceIntent(activity,storable,Constants.DB_OPERATION_DELETE));
    }
 else {
      activity.startService(createLastReadServiceIntent(activity,storable,Constants.DB_OPERATION_INSERT));
    }
  }
  settingsBundle.updatePreferences();
  manager.unregisterReceiver(textParserListener);
  activity.finish();
  super.onStop();
}",0.9955634427684116
134620,"private int calcDelay(int wordLength){
  return delayList.get(position++ % wordLength) * Math.round(100 * 60 * 1f / settingsBundle.getWPM());
}","private int calcDelay(){
  return delayList.get(position) * Math.round(100 * 60 * 1f / settingsBundle.getWPM());
}",0.8871595330739299
134621,"public String getNextFormat(int pos){
  int charLen=0;
  int i=pos;
  StringBuilder format=new StringBuilder(""String_Node_Str"");
  while (charLen < 40 && i < wordList.size() - 1) {
    String word=wordList.get(++i);
    if (TextUtils.isEmpty(word)) {
      charLen+=word.length() + 1;
      format.append(word).append(""String_Node_Str"");
    }
  }
  format.append(""String_Node_Str"");
  return format.toString();
}","public String getNextFormat(int pos){
  int charLen=0;
  int i=pos;
  StringBuilder format=new StringBuilder(""String_Node_Str"");
  while (charLen < 40 && i < wordList.size() - 1) {
    String word=wordList.get(++i);
    if (!TextUtils.isEmpty(word)) {
      charLen+=word.length() + 1;
      format.append(word).append(""String_Node_Str"");
    }
  }
  format.append(""String_Node_Str"");
  return format.toString();
}",0.9987908101571948
134622,"private void receiveParser(Context context,Intent intent){
  try {
    parser=TextParser.fromString(intent.getStringExtra(Constants.EXTRA_PARSER));
    parserReceived=true;
    readable=parser.getReadable();
    wordList=readable.getWordList();
    emphasisList=readable.getEmphasisList();
    delayList=readable.getDelayList();
    YoYo.with(Techniques.FadeOut).duration(Constants.SECOND / 2).playOn(parsingProgressBar);
    readerLayout.setVisibility(View.VISIBLE);
    YoYo.with(Techniques.BounceIn).duration(2 * Constants.SECOND).playOn(readerLayout);
    final Handler handler=new Handler();
    reader=new Reader(handler,Math.max(readable.getPosition() - Constants.READER_START_OFFSET,0));
    handler.postDelayed(reader,3 * Constants.SECOND);
    if (isSavable())     context.startService(createLastReadServiceIntent(context,(Storable)readable,Constants.DB_OPERATION_INSERT));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","private void receiveParser(Context context,Intent intent){
  try {
    parser=TextParser.fromString(intent.getStringExtra(Constants.EXTRA_PARSER));
    parserReceived=true;
    readable=parser.getReadable();
    wordList=readable.getWordList();
    emphasisList=readable.getEmphasisList();
    delayList=readable.getDelayList();
    YoYo.with(Techniques.FadeOut).duration(Constants.SECOND / 2).playOn(parsingProgressBar);
    readerLayout.setVisibility(View.VISIBLE);
    YoYo.with(Techniques.BounceIn).duration(2 * Constants.SECOND).playOn(readerLayout);
    final Handler handler=new Handler();
    readable.setPosition(Math.max(readable.getPosition() - Constants.READER_START_OFFSET,0));
    reader=new Reader(handler,readable.getPosition());
    handler.postDelayed(reader,3 * Constants.SECOND);
    if (isStorable())     context.startService(createLastReadServiceIntent(context,(Storable)readable,Constants.DB_OPERATION_INSERT));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.9522431259044862
134623,"protected int measureWord(String word){
  if (word.length() == 0)   return delayCoefficients.get(0);
  int res=0;
  for (  char ch : word.toCharArray()) {
    int tempRes=delayCoefficients.get(0);
    if (ch == '-')     tempRes=delayCoefficients.get(1);
    if (ch == '\t')     tempRes=delayCoefficients.get(4);
switch (ch) {
case ',':
      tempRes=delayCoefficients.get(1);
    break;
case '.':
  tempRes=delayCoefficients.get(2);
break;
case '!':
tempRes=delayCoefficients.get(2);
break;
case '?':
tempRes=delayCoefficients.get(2);
break;
case '-':
tempRes=delayCoefficients.get(3);
break;
case '—':
tempRes=delayCoefficients.get(3);
break;
case ':':
tempRes=delayCoefficients.get(3);
break;
case ';':
tempRes=delayCoefficients.get(3);
break;
case '\n':
tempRes=delayCoefficients.get(4);
}
res=Math.max(res,tempRes);
}
return res;
}","protected int measureWord(String word){
  if (word.length() == 0)   return delayCoefficients.get(0);
  int res=0;
  for (  char ch : word.toCharArray()) {
    int tempRes=delayCoefficients.get(0);
    if (ch == '\t')     tempRes=delayCoefficients.get(4);
switch (ch) {
case ',':
      tempRes=delayCoefficients.get(1);
    break;
case '.':
  tempRes=delayCoefficients.get(2);
break;
case '!':
tempRes=delayCoefficients.get(2);
break;
case '?':
tempRes=delayCoefficients.get(2);
break;
case '-':
tempRes=delayCoefficients.get(3);
break;
case '—':
tempRes=delayCoefficients.get(3);
break;
case ':':
tempRes=delayCoefficients.get(3);
break;
case ';':
tempRes=delayCoefficients.get(3);
break;
case '\n':
tempRes=delayCoefficients.get(4);
}
res=Math.max(res,tempRes);
}
return res;
}",0.2802231866088034
134624,"public void process(){
  normalize(readable);
  cutLongWords(readable);
  buildDelayList(readable);
  cleanFromHyphens(readable);
  buildEmphasis(readable);
}","public void process(){
  normalize(readable);
  cutLongWords(readable);
  readable.setWordList(Arrays.asList(readable.getText().split(""String_Node_Str"")));
  cleanWordList(readable);
  buildDelayList(readable);
  buildEmphasis(readable);
}",0.6448362720403022
134625,"protected void cutLongWords(Readable readable){
  String text=readable.getText();
  List<String> res=new ArrayList<String>();
  for (  String word : text.split(""String_Node_Str"")) {
    boolean isComplex=false;
    while (word.length() - 1 > lengthPreference) {
      isComplex=true;
      String toAppend;
      int pos=word.length() - 3;
      while (pos > 1 && !Character.isLetter(word.charAt(pos)))       --pos;
      toAppend=word.substring(0,pos);
      word=word.substring(pos);
      res.add(""String_Node_Str"" + toAppend + ""String_Node_Str"");
    }
    if (isComplex)     res.add(""String_Node_Str"" + word);
 else     res.add(word);
  }
  StringBuilder sb=new StringBuilder();
  for (  String s : res)   sb.append(s).append(""String_Node_Str"");
  readable.setText(sb.toString());
}","protected void cutLongWords(Readable readable){
  String text=readable.getText();
  List<String> res=new ArrayList<String>();
  for (  String word : text.split(""String_Node_Str"")) {
    boolean isComplex=false;
    while (word.length() - 1 > lengthPreference) {
      isComplex=true;
      String toAppend;
      int pos=word.length() - 3;
      while (pos > 1 && !Character.isLetter(word.charAt(pos)))       --pos;
      toAppend=word.substring(0,pos);
      word=word.substring(pos);
      res.add(toAppend + ""String_Node_Str"");
    }
    if (isComplex)     res.add(word);
 else     res.add(word);
  }
  StringBuilder sb=new StringBuilder();
  for (  String s : res)   sb.append(s).append(""String_Node_Str"");
  readable.setText(sb.toString());
}",0.7040417209908736
134626,"protected void buildEmphasis(Readable readable){
  List<String> words=readable.getWordList();
  List<Integer> res=new ArrayList<Integer>();
  for (  String word : words) {
    Map<String,Pair<Integer,Integer>> priorities=new HashMap<String,Pair<Integer,Integer>>();
    int len=word.length();
    for (int i=0; i < len; ++i) {
      if (!Character.isLetter(word.charAt(i)))       continue;
      String ch=word.substring(i,i + 1).toLowerCase();
      if (PRIORITIES.get(ch) != null && (priorities.get(ch) == null || priorities.get(ch).first < PRIORITIES.get(ch) * 100 / Math.max(1,Math.abs(len / 2 - i)))) {
        priorities.put(ch,new Pair<Integer,Integer>(PRIORITIES.get(ch) * 100 / Math.max(1,Math.abs(len / 2 - i)),i));
      }
 else       priorities.put(ch,new Pair<Integer,Integer>(0,i));
      if (i + 1 < word.length() && word.charAt(i) == word.charAt(i + 1)) {
        priorities.put(ch,new Pair<Integer,Integer>(priorities.get(ch).first * 4,i));
      }
    }
    int resInd=word.length() / 2, mmax=0;
    for (    Map.Entry<String,Pair<Integer,Integer>> entry : priorities.entrySet()) {
      if (mmax < entry.getValue().first) {
        mmax=entry.getValue().first;
        resInd=entry.getValue().second;
      }
    }
    res.add(resInd);
  }
  readable.setEmphasisList(res);
}","protected void buildEmphasis(Readable readable){
  List<Integer> res=new ArrayList<Integer>();
  for (  String word : readable.getWordList()) {
    Map<String,Pair<Integer,Integer>> priorities=new HashMap<String,Pair<Integer,Integer>>();
    int len=word.length();
    for (int i=0; i < len; ++i) {
      if (!Character.isLetter(word.charAt(i)))       continue;
      String ch=word.substring(i,i + 1).toLowerCase();
      if (PRIORITIES.get(ch) != null && (priorities.get(ch) == null || priorities.get(ch).first < PRIORITIES.get(ch) * 100 / Math.max(1,Math.abs(len / 2 - i)))) {
        priorities.put(ch,new Pair<Integer,Integer>(PRIORITIES.get(ch) * 100 / Math.max(1,Math.abs(len / 2 - i)),i));
      }
 else       priorities.put(ch,new Pair<Integer,Integer>(0,i));
      if (i + 1 < word.length() && word.charAt(i) == word.charAt(i + 1)) {
        priorities.put(ch,new Pair<Integer,Integer>(priorities.get(ch).first * 4,i));
      }
    }
    int resInd=word.length() / 2, mmax=0;
    for (    Map.Entry<String,Pair<Integer,Integer>> entry : priorities.entrySet()) {
      if (mmax < entry.getValue().first) {
        mmax=entry.getValue().first;
        resInd=entry.getValue().second;
      }
    }
    res.add(resInd);
  }
  readable.setEmphasisList(res);
}",0.9718530101641908
134627,"protected String insertSpacesAfterPunctuation(String text){
  StringBuilder res=new StringBuilder();
  String madeMeSpecial=makeMeSpecial.substring(1,9) + ""String_Node_Str"";
  for (  Character ch : text.toCharArray()) {
    res.append(ch);
    if (madeMeSpecial.indexOf(ch) > -1)     res.append(""String_Node_Str"");
  }
  return res.toString();
}","protected String insertSpacesAfterPunctuation(String text){
  StringBuilder res=new StringBuilder();
  String madeMeSpecial=makeMeSpecial.substring(1,9) + ""String_Node_Str"";
  for (int i=0; i < text.length(); ++i) {
    Character ch=text.charAt(i);
    res.append(ch);
    if (i < text.length() - 1) {
      Character nextCh=text.charAt(i + 1);
      if (madeMeSpecial.indexOf(ch) > -1 && Character.isLetter(nextCh))       res.append(""String_Node_Str"");
    }
  }
  for (  Character ch : text.toCharArray()) {
    res.append(ch);
    if (madeMeSpecial.indexOf(ch) > -1)     res.append(""String_Node_Str"");
  }
  return res.toString();
}",0.6204081632653061
134628,"protected void buildDelayList(Readable readable){
  String text=readable.getText();
  List<Integer> res=new ArrayList<Integer>();
  String[] words=text.split(""String_Node_Str"");
  for (  String word : words)   res.add(measureWord(word));
  readable.setDelayList(res);
}","protected void buildDelayList(Readable readable){
  List<Integer> res=new ArrayList<Integer>();
  for (  String word : readable.getWordList())   res.add(measureWord(word));
  readable.setDelayList(res);
}",0.507399577167019
134629,"@Override public void onStop(){
  Log.d(LOGTAG,""String_Node_Str"");
  if (parserReceived && !TextUtils.isEmpty(readable.getPath()))   if (reader.isCompleted())   getActivity().startService(createLastReadServiceIntent((Storable)readable,Constants.DB_OPERATION_DELETE));
 else   getActivity().startService(createLastReadServiceIntent((Storable)readable,Constants.DB_OPERATION_INSERT));
  settingsBundle.updatePreferences();
  manager.unregisterReceiver(textParserListener);
  getActivity().finish();
  super.onStop();
}","@Override public void onStop(){
  Log.d(LOGTAG,""String_Node_Str"");
  if (parserReceived && !TextUtils.isEmpty(readable.getPath()) && settingsBundle.isCachingEnabled())   if (reader.isCompleted())   getActivity().startService(createLastReadServiceIntent((Storable)readable,Constants.DB_OPERATION_DELETE));
 else   getActivity().startService(createLastReadServiceIntent((Storable)readable,Constants.DB_OPERATION_INSERT));
  settingsBundle.updatePreferences();
  manager.unregisterReceiver(textParserListener);
  getActivity().finish();
  super.onStop();
}",0.9653882132834424
134630,"public static Readable newInstance(Context context,Integer intentType,String intentText,String intentPath){
  Readable readable;
  if (TextUtils.isEmpty(intentText)) {
    readable=new TestReadable();
    readable.setText(context.getResources().getString(R.string.sample_text));
  }
 else {
    if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean(Constants.PREF_CACHE,true))     intentPath=null;
switch (intentType) {
case TYPE_TEST:
      readable=new TestReadable();
    break;
case TYPE_CLIPBOARD:
  readable=new ClipboardReadable();
break;
case TYPE_FILE:
readable=new FileReadable();
break;
case TYPE_TXT:
readable=new FileReadable();
break;
case TYPE_EPUB:
readable=new FileReadable();
break;
default :
String link;
if (intentText.length() < Constants.NON_LINK_LENGTH && !TextUtils.isEmpty(link=TextParser.findLink(TextParser.compilePattern(),intentText))) {
readable=new NetReadable(link);
}
 else {
readable=new ClipboardReadable();
readable.setText(intentText);
}
}
readable.setPath(intentPath);
}
return readable;
}","public static Readable newInstance(Context context,Integer intentType,String intentText,String intentPath){
  Readable readable;
  if (TextUtils.isEmpty(intentText)) {
    readable=new TestReadable();
    readable.setText(context.getResources().getString(R.string.sample_text));
  }
 else {
switch (intentType) {
case TYPE_TEST:
      readable=new TestReadable();
    break;
case TYPE_CLIPBOARD:
  readable=new ClipboardReadable();
break;
case TYPE_FILE:
readable=new FileReadable();
break;
case TYPE_TXT:
readable=new FileReadable();
break;
case TYPE_EPUB:
readable=new FileReadable();
break;
default :
String link;
if (intentText.length() < Constants.NON_LINK_LENGTH && !TextUtils.isEmpty(link=TextParser.findLink(TextParser.compilePattern(),intentText))) {
readable=new NetReadable(link);
}
 else {
readable=new ClipboardReadable();
readable.setText(intentText);
}
}
readable.setPath(intentPath);
}
return readable;
}",0.9368635437881874
134631,"private void continueParserParty(){
  readable=parser.getReadable();
  wordList=readable.getWordList();
  emphasisList=readable.getEmphasisList();
  delayList=readable.getDelayList();
  YoYo.with(Techniques.FlipOutY).duration(Constants.SECOND).playOn(parsingProgressBar);
  readerLayout.setVisibility(View.VISIBLE);
  YoYo.with(Techniques.FadeIn).duration(2 * Constants.SECOND).playOn(readerLayout);
  if (isSavable())   getActivity().startService(createLastReadServiceIntent((Storable)readable,Constants.DB_OPERATION_INSERT));
  final Handler handler=new Handler();
  reader=new Reader(handler,Math.max(readable.getPosition() - Constants.READER_START_OFFSET,0));
  handler.postDelayed(reader,3 * Constants.SECOND);
}","private void continueParserParty(){
  readable=parser.getReadable();
  wordList=readable.getWordList();
  emphasisList=readable.getEmphasisList();
  delayList=readable.getDelayList();
  YoYo.with(Techniques.FlipOutY).duration(Constants.SECOND).playOn(parsingProgressBar);
  readerLayout.setVisibility(View.VISIBLE);
  YoYo.with(Techniques.FadeIn).duration(2 * Constants.SECOND).playOn(readerLayout);
  final Handler handler=new Handler();
  reader=new Reader(handler,Math.max(readable.getPosition() - Constants.READER_START_OFFSET,0));
  handler.postDelayed(reader,3 * Constants.SECOND);
  if (isSavable())   getActivity().startService(createLastReadServiceIntent((Storable)readable,Constants.DB_OPERATION_INSERT));
}",0.8214783821478382
134632,"private Bundle bundleReceivedData(){
  Bundle bundle=getIntent().getExtras();
  if (bundle != null && TextUtils.isEmpty(bundle.getString(Intent.EXTRA_TEXT)) && TextUtils.isEmpty(bundle.getString(Constants.EXTRA_TYPE)))   bundle.putInt(Constants.EXTRA_TYPE,Readable.TYPE_TEST);
  Log.d(LOGTAG,""String_Node_Str"" + ((bundle == null) ? ""String_Node_Str"" : bundle.toString()));
  return bundle;
}","private Bundle bundleReceivedData(){
  Bundle bundle=getIntent().getExtras();
  if (bundle != null && !bundle.containsKey(Intent.EXTRA_TEXT) && !bundle.containsKey(Constants.EXTRA_TYPE))   bundle.putInt(Constants.EXTRA_TYPE,Readable.TYPE_TEST);
  Log.d(LOGTAG,""String_Node_Str"" + ((bundle == null) ? ""String_Node_Str"" : bundle.toString()));
  return bundle;
}",0.8613333333333333
134633,"public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileReadable.takePath(context,path);
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    makeExtension();
    StringBuilder text=new StringBuilder();
    type=-1;
    if (""String_Node_Str"".equals(extension)) {
      FileReader fileReader=new FileReader(path);
      BufferedReader br=new BufferedReader(fileReader);
      String sCurrentLine;
      while ((sCurrentLine=br.readLine()) != null)       text.append(sCurrentLine).append('\n');
      br.close();
      type=TYPE_TXT;
      Log.d(LOGTAG,""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(extension)) {
      Book book=(new EpubReader()).readEpub(new FileInputStream(path));
      for (      Resource res : book.getContents())       text.append(new String(res.getData()));
      text=new StringBuilder(parseEpub(text.toString()));
      type=TYPE_EPUB;
      Log.d(LOGTAG,""String_Node_Str"");
    }
    this.text=text;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  if (processFailed=type == -1) {
    Toast.makeText(context,R.string.wrong_ext,Toast.LENGTH_SHORT).show();
  }
 else {
    rowData=takeRowData(context);
    if (rowData != null)     position=rowData.getPosition();
  }
}","public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileReadable.takePath(context,path);
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    makeExtension();
    StringBuilder text=new StringBuilder();
    type=-1;
    if (""String_Node_Str"".equals(extension))     processTxt();
    if (""String_Node_Str"".equals(extension))     processEpub();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  if (processFailed=type == -1) {
    Toast.makeText(context,R.string.wrong_ext,Toast.LENGTH_SHORT).show();
  }
 else {
    rowData=takeRowData(context);
    if (rowData != null)     position=rowData.getPosition();
  }
}",0.6642857142857143
134634,"public static Readable newInstance(Context context,Integer intentType,String intentText,String intentPath){
  Readable readable;
  if (TextUtils.isEmpty(intentText)) {
    readable=new TestReadable();
    readable.setText(context.getResources().getString(R.string.sample_text));
  }
 else {
switch (intentType) {
case TYPE_TEST:
      readable=new TestReadable();
    break;
case TYPE_CLIPBOARD:
  readable=new ClipboardReadable();
break;
case TYPE_FILE:
readable=new FileReadable();
break;
case TYPE_TXT:
readable=new FileReadable();
break;
case TYPE_EPUB:
readable=new FileReadable();
break;
default :
String link;
if (intentText.length() < Constants.NON_LINK_LENGTH && !TextUtils.isEmpty(link=TextParser.findLink(TextParser.compilePattern(),intentText))) {
readable=new NetReadable(link);
}
 else {
readable=new ClipboardReadable();
readable.setText(intentText);
}
}
readable.setPath(intentPath);
}
return readable;
}","public static Readable newInstance(Context context,Integer intentType,String intentText,String intentPath){
  Readable readable;
  if (TextUtils.isEmpty(intentText)) {
    readable=new TestReadable();
  }
 else {
switch (intentType) {
case TYPE_TEST:
      readable=new TestReadable();
    break;
case TYPE_CLIPBOARD:
  readable=new ClipboardReadable();
break;
case TYPE_FILE:
readable=new FileReadable();
break;
case TYPE_TXT:
readable=new FileReadable();
break;
case TYPE_EPUB:
readable=new FileReadable();
break;
default :
String link;
if (intentText.length() < Constants.NON_LINK_LENGTH && !TextUtils.isEmpty(link=TextParser.findLink(TextParser.compilePattern(),intentText))) {
readable=new NetReadable(link);
}
 else {
readable=new ClipboardReadable();
readable.setText(intentText);
}
}
readable.setPath(intentPath);
}
return readable;
}",0.9557321225879682
134635,"public TestReadable(){
  super();
  setPath(null);
}","public TestReadable(){
  super();
  path=null;
}",0.92
134636,"public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileReadable.uriToStringPath(context,Uri.parse(path));
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    extension=MimeTypeMap.getFileExtensionFromUrl(path);
    if (""String_Node_Str"".equals(extension)) {
      FileReader fileReader=new FileReader(path);
      BufferedReader br=new BufferedReader(fileReader);
      String sCurrentLine;
      while ((sCurrentLine=br.readLine()) != null)       text.append(sCurrentLine).append('\n');
      br.close();
      type=TYPE_TXT;
      textType=""String_Node_Str"";
      Log.d(LOGTAG,""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(extension)) {
      Book book=(new EpubReader()).readEpub(new FileInputStream(path));
      for (      Resource res : book.getContents())       text.append(new String(res.getData()));
      type=TYPE_EPUB;
      textType=""String_Node_Str"";
      Log.d(LOGTAG,""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  if (processFailed=type == -1)   Toast.makeText(context,R.string.wrong_ext,Toast.LENGTH_SHORT).show();
 else {
    rowData=Readable.getRowData(context.getContentResolver().query(LastReadContentProvider.CONTENT_URI,null,null,null,null),path);
    if (rowData != null)     position=rowData.getPosition();
  }
}","public void process(Context context){
  Log.d(LOGTAG,""String_Node_Str"");
  try {
    path=FileReadable.takePath(context,path);
    if (path == null) {
      Log.d(LOGTAG,""String_Node_Str"");
      return;
    }
    extension=MimeTypeMap.getFileExtensionFromUrl(path);
    StringBuilder text=new StringBuilder();
    type=-1;
    if (""String_Node_Str"".equals(extension)) {
      FileReader fileReader=new FileReader(path);
      BufferedReader br=new BufferedReader(fileReader);
      String sCurrentLine;
      while ((sCurrentLine=br.readLine()) != null)       text.append(sCurrentLine).append('\n');
      br.close();
      type=TYPE_TXT;
      Log.d(LOGTAG,""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(extension)) {
      Book book=(new EpubReader()).readEpub(new FileInputStream(path));
      for (      Resource res : book.getContents())       text.append(new String(res.getData()));
      text=new StringBuilder(parseEpub(text.toString()));
      type=TYPE_EPUB;
      Log.d(LOGTAG,""String_Node_Str"");
    }
    this.text=text;
    textType=""String_Node_Str"";
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  if (processFailed=type == -1)   Toast.makeText(context,R.string.wrong_ext,Toast.LENGTH_SHORT).show();
 else {
    rowData=takeRowData(context);
    if (rowData != null)     position=rowData.getPosition();
  }
}",0.8768506056527591
134637,"public static Readable newInstance(Context context,Integer intentType,String intentText,String intentPath){
  Readable readable;
  if (TextUtils.isEmpty(intentText)) {
    readable=new TestSettingsText();
    readable.setText(context.getResources().getString(R.string.sample_text));
  }
 else {
    if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean(Constants.PREF_CACHE,true))     intentPath=null;
switch (intentType) {
case TYPE_CLIPBOARD:
      readable=new ClipboardReadable();
    break;
case TYPE_FILE:
  readable=new FileReadable();
break;
case TYPE_TXT:
readable=new FileReadable();
break;
case TYPE_EPUB:
readable=new FileReadable();
break;
default :
String link;
if (intentText.length() < Constants.NON_LINK_LENGTH && !TextUtils.isEmpty(link=TextParser.findLink(TextParser.compilePattern(),intentText))) readable=new HtmlReadable(link);
 else throw new IllegalArgumentException(""String_Node_Str"");
}
readable.setPath(intentPath);
}
return readable;
}","public static Readable newInstance(Context context,Integer intentType,String intentText,String intentPath){
  Readable readable;
  if (TextUtils.isEmpty(intentText)) {
    readable=new TestSettingsText();
    readable.setText(context.getResources().getString(R.string.sample_text));
  }
 else {
    if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean(Constants.PREF_CACHE,true))     intentPath=null;
switch (intentType) {
case TYPE_CLIPBOARD:
      readable=new ClipboardReadable();
    break;
case TYPE_FILE:
  readable=new FileReadable();
break;
case TYPE_TXT:
readable=new FileReadable();
break;
case TYPE_EPUB:
readable=new FileReadable();
break;
default :
String link;
if (intentText.length() < Constants.NON_LINK_LENGTH && !TextUtils.isEmpty(link=TextParser.findLink(TextParser.compilePattern(),intentText))) readable=new NetReadable(link);
 else throw new IllegalArgumentException(""String_Node_Str"");
}
readable.setPath(intentPath);
}
return readable;
}",0.9964267483409904
134638,"public Readable(){
  text=new StringBuilder();
  wordList=new ArrayList<String>();
  delayList=new ArrayList<Integer>();
  emphasisList=new ArrayList<Integer>();
  timeSuffixSum=new ArrayList<Integer>();
}","public Readable(){
  text=new StringBuilder();
  wordList=new ArrayList<String>();
  delayList=new ArrayList<Integer>();
  emphasisList=new ArrayList<Integer>();
  timeSuffixSum=new ArrayList<Integer>();
  rowData=new DataBundle();
  processFailed=false;
}",0.8893709327548807
134639,"/** 
 * Processes requests for HTTP <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String responseStr;
  String resourcePath=(String)request.getAttribute(""String_Node_Str"");
  String userId=processUserId(this.getXRdHeader(request,Constants.XRD_HEADER_USER_ID));
  String messageId=processMessageId(this.getXRdHeader(request,Constants.XRD_HEADER_MESSAGE_ID));
  String namespace=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_SERIALIZE);
  String prefix=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_PREFIX_SERIALIZE);
  String contentType=request.getHeader(Constants.HTTP_HEADER_CONTENT_TYPE);
  String acceptHeader=this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT) == null ? Constants.TEXT_XML : this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT);
  logger.info(""String_Node_Str"",request.getMethod(),resourcePath);
  String accept=processAcceptHeader(acceptHeader);
  response.setContentType(accept);
  boolean omitNamespace=accept.startsWith(Constants.APPLICATION_JSON);
  response.addHeader(Constants.XRD_HEADER_USER_ID,userId);
  response.addHeader(Constants.XRD_HEADER_MESSAGE_ID,messageId);
  if (resourcePath == null) {
    responseStr=this.generateError(Constants.ERROR_404,accept);
    response.setStatus(404);
    this.writeResponse(response,responseStr);
    return;
  }
  String serviceId=request.getMethod() + ""String_Node_Str"" + resourcePath;
  logger.debug(""String_Node_Str"",serviceId);
  ConsumerEndpoint endpoint=ConsumerGatewayUtil.findMatch(serviceId,endpoints);
  if (endpoint == null) {
    if (this.serviceCallsByXRdServiceId) {
      logger.info(""String_Node_Str"",resourcePath);
      endpoint=ConsumerGatewayUtil.createUnconfiguredEndpoint(this.props,resourcePath);
    }
 else {
      logger.info(""String_Node_Str"");
    }
  }
  if (endpoint == null) {
    responseStr=this.generateError(Constants.ERROR_404,accept);
    response.setStatus(404);
    this.writeResponse(response,responseStr);
    return;
  }
  processNamespaceAndPrefix(endpoint,namespace,prefix);
  logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
  try {
    ServiceRequest<Map<String,String[]>> serviceRequest=new ServiceRequest<>(endpoint.getConsumer(),endpoint.getProducer(),messageId);
    serviceRequest.setUserId(userId);
    serviceRequest.setRequestData(this.filterRequestParameters(request.getParameterMap()));
    if (endpoint.isProcessingWrappers() != null) {
      serviceRequest.setProcessingWrappers(endpoint.isProcessingWrappers());
    }
    String requestBody=this.readRequestBody(request);
    ServiceRequestSerializer serializer;
    if (endpoint.isRequestEncrypted()) {
      logger.debug(""String_Node_Str"");
      Encrypter asymmetricEncrypter=RESTGatewayUtil.getEncrypter(this.publicKeyFile,this.publicKeyFilePassword,endpoint.getProducer().toString());
      if (asymmetricEncrypter == null) {
        throw new Exception(""String_Node_Str"");
      }
      serializer=new EncryptingRequestSerializer(endpoint.getResourceId(),requestBody,contentType,asymmetricEncrypter,this.keyLength);
    }
 else {
      serializer=new RequestSerializer(endpoint.getResourceId(),requestBody,contentType);
    }
    ServiceResponseDeserializer deserializer;
    if (endpoint.isResponseEncrypted()) {
      if (this.asymmetricDecrypter == null) {
        throw new Exception(""String_Node_Str"");
      }
      deserializer=new EncryptingResponseDeserializer(omitNamespace,this.asymmetricDecrypter);
    }
 else {
      deserializer=new ResponseDeserializer(omitNamespace);
    }
    SOAPClient client=new SOAPClientImpl();
    logger.info(""String_Node_Str"",messageId,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL));
    ServiceResponse serviceResponse=client.send(serviceRequest,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL),serializer,deserializer);
    logger.info(""String_Node_Str"",messageId);
    if (endpoint.isProcessingWrappers() != null) {
      serviceResponse.setProcessingWrappers(endpoint.isProcessingWrappers());
    }
    responseStr=handleResponse(response,serviceResponse);
    if (endpoint.isModifyUrl()) {
      String servletUrl=this.getServletUrl(request);
      responseStr=ConsumerGatewayUtil.rewriteUrl(servletUrl,resourcePath,responseStr);
    }
    logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
    logger.error(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
    responseStr=this.generateError(Constants.ERROR_500,accept);
    response.setStatus(500);
  }
  this.writeResponse(response,responseStr);
}","/** 
 * Processes requests for HTTP <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String responseStr;
  String resourcePath=(String)request.getAttribute(""String_Node_Str"");
  String userId=processUserId(this.getXRdHeader(request,Constants.XRD_HEADER_USER_ID));
  String messageId=processMessageId(this.getXRdHeader(request,Constants.XRD_HEADER_MESSAGE_ID));
  String namespace=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_SERIALIZE);
  String prefix=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_PREFIX_SERIALIZE);
  String contentType=request.getHeader(Constants.HTTP_HEADER_CONTENT_TYPE);
  String acceptHeader=this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT) == null ? Constants.TEXT_XML : this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT);
  logger.info(""String_Node_Str"",request.getMethod(),resourcePath);
  String accept=processAcceptHeader(acceptHeader);
  response.setContentType(accept);
  boolean omitNamespace=accept.startsWith(Constants.APPLICATION_JSON);
  response.addHeader(Constants.XRD_HEADER_USER_ID,userId);
  response.addHeader(Constants.XRD_HEADER_MESSAGE_ID,messageId);
  if (resourcePath == null) {
    responseStr=this.generateError(Constants.ERROR_404,accept);
    response.setStatus(404);
    this.writeResponse(response,responseStr);
    return;
  }
  String serviceId=request.getMethod() + ""String_Node_Str"" + resourcePath;
  logger.debug(""String_Node_Str"",serviceId);
  ConsumerEndpoint endpoint=ConsumerGatewayUtil.findMatch(serviceId,endpoints);
  if (endpoint == null) {
    if (this.serviceCallsByXRdServiceId) {
      logger.info(""String_Node_Str"",resourcePath);
      endpoint=ConsumerGatewayUtil.createUnconfiguredEndpoint(this.props,resourcePath);
    }
 else {
      logger.info(""String_Node_Str"");
    }
  }
  if (endpoint == null) {
    responseStr=this.generateError(Constants.ERROR_404,accept);
    response.setStatus(404);
    this.writeResponse(response,responseStr);
    return;
  }
  processNamespaceAndPrefix(endpoint,namespace,prefix);
  logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
  try {
    ServiceRequest<Map<String,String[]>> serviceRequest=new ServiceRequest<>(endpoint.getConsumer(),endpoint.getProducer(),messageId);
    serviceRequest.setUserId(userId);
    serviceRequest.setRequestData(this.filterRequestParameters(request.getParameterMap()));
    if (endpoint.isProcessingWrappers() != null) {
      serviceRequest.setProcessingWrappers(endpoint.isProcessingWrappers());
    }
    String requestBody=this.readRequestBody(request);
    ServiceRequestSerializer serializer;
    if (endpoint.isRequestEncrypted()) {
      logger.debug(""String_Node_Str"");
      Encrypter asymmetricEncrypter=RESTGatewayUtil.getEncrypter(this.publicKeyFile,this.publicKeyFilePassword,endpoint.getProducer().toString());
      if (asymmetricEncrypter == null) {
        throw new XRd4JException(""String_Node_Str"");
      }
      serializer=new EncryptingRequestSerializer(endpoint.getResourceId(),requestBody,contentType,asymmetricEncrypter,this.keyLength);
    }
 else {
      serializer=new RequestSerializer(endpoint.getResourceId(),requestBody,contentType);
    }
    ServiceResponseDeserializer deserializer;
    if (endpoint.isResponseEncrypted()) {
      if (this.asymmetricDecrypter == null) {
        throw new XRd4JException(""String_Node_Str"");
      }
      deserializer=new EncryptingResponseDeserializer(omitNamespace,this.asymmetricDecrypter);
    }
 else {
      deserializer=new ResponseDeserializer(omitNamespace);
    }
    SOAPClient client=new SOAPClientImpl();
    logger.info(""String_Node_Str"",messageId,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL));
    ServiceResponse serviceResponse=client.send(serviceRequest,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL),serializer,deserializer);
    logger.info(""String_Node_Str"",messageId);
    if (endpoint.isProcessingWrappers() != null) {
      serviceResponse.setProcessingWrappers(endpoint.isProcessingWrappers());
    }
    responseStr=handleResponse(response,serviceResponse);
    if (endpoint.isModifyUrl()) {
      String servletUrl=this.getServletUrl(request);
      responseStr=ConsumerGatewayUtil.rewriteUrl(servletUrl,resourcePath,responseStr);
    }
    logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
    logger.error(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
    responseStr=this.generateError(Constants.ERROR_500,accept);
    response.setStatus(500);
  }
  this.writeResponse(response,responseStr);
}",0.9989975942261428
134640,"@Override protected void serializeRequest(ServiceRequest request,SOAPElement soapRequest,SOAPEnvelope envelope) throws SOAPException {
  SOAPElement soapRequestOrg=soapRequest;
  soapRequest=SOAPHelper.xmlStrToSOAPElement(""String_Node_Str"" + Constants.PARAM_ENCRYPTION_WRAPPER + ""String_Node_Str"");
  try {
    Encrypter symmetricEncrypter=RESTGatewayUtil.createSymmetricEncrypter(this.keyLength);
    handleBody(request,soapRequest);
    if (this.requestBody != null && !this.requestBody.isEmpty()) {
      handleAttachment(request,soapRequest,envelope,symmetricEncrypter.encrypt(this.requestBody));
    }
    String encryptedData=symmetricEncrypter.encrypt(SOAPHelper.toString(soapRequest));
    RESTGatewayUtil.buildEncryptedBody(symmetricEncrypter,asymmetricEncrypter,soapRequestOrg,encryptedData);
  }
 catch (  NoSuchAlgorithmException ex) {
    logger.error(ex.getMessage(),ex);
    throw new SOAPException(""String_Node_Str"",ex);
  }
}","@Override protected void serializeRequest(ServiceRequest request,SOAPElement soapRequest,SOAPEnvelope envelope) throws SOAPException {
  SOAPElement payload=SOAPHelper.xmlStrToSOAPElement(""String_Node_Str"" + Constants.PARAM_ENCRYPTION_WRAPPER + ""String_Node_Str"");
  try {
    Encrypter symmetricEncrypter=RESTGatewayUtil.createSymmetricEncrypter(this.keyLength);
    handleBody(request,payload);
    if (this.requestBody != null && !this.requestBody.isEmpty()) {
      handleAttachment(request,payload,envelope,symmetricEncrypter.encrypt(this.requestBody));
    }
    String encryptedData=symmetricEncrypter.encrypt(SOAPHelper.toString(payload));
    RESTGatewayUtil.buildEncryptedBody(symmetricEncrypter,asymmetricEncrypter,soapRequest,encryptedData);
  }
 catch (  NoSuchAlgorithmException ex) {
    logger.error(ex.getMessage(),ex);
    throw new SOAPException(""String_Node_Str"",ex);
  }
}",0.9427792915531336
134641,"@Override public void serializeResponse(ServiceResponse response,SOAPElement soapResponse,SOAPEnvelope envelope) throws SOAPException {
  SOAPElement soapResponseOrg=soapResponse;
  soapResponse=SOAPHelper.xmlStrToSOAPElement(""String_Node_Str"" + Constants.PARAM_ENCRYPTION_WRAPPER + ""String_Node_Str"");
  try {
    Encrypter symmetricEncrypter=RESTGatewayUtil.createSymmetricEncrypter(this.keyLength);
    if (this.contentType == null) {
      handleBody(response,soapResponse,envelope);
    }
 else {
      String plainText=(String)response.getResponseData();
      response.setResponseData(symmetricEncrypter.encrypt(plainText));
      handleAttachment(response,soapResponse,envelope);
    }
    logger.info(""String_Node_Str"",SOAPHelper.toString(soapResponse).hashCode());
    String encryptedData=symmetricEncrypter.encrypt(SOAPHelper.toString(soapResponse));
    logger.info(""String_Node_Str"",encryptedData.hashCode());
    RESTGatewayUtil.buildEncryptedBody(symmetricEncrypter,asymmetricEncrypter,soapResponseOrg,encryptedData);
  }
 catch (  NoSuchAlgorithmException ex) {
    logger.error(ex.getMessage(),ex);
    throw new SOAPException(""String_Node_Str"",ex);
  }
}","@Override public void serializeResponse(ServiceResponse response,SOAPElement soapResponse,SOAPEnvelope envelope) throws SOAPException {
  SOAPElement payload=SOAPHelper.xmlStrToSOAPElement(""String_Node_Str"" + Constants.PARAM_ENCRYPTION_WRAPPER + ""String_Node_Str"");
  try {
    Encrypter symmetricEncrypter=RESTGatewayUtil.createSymmetricEncrypter(this.keyLength);
    if (this.contentType == null) {
      handleBody(response,payload,envelope);
    }
 else {
      String plainText=(String)response.getResponseData();
      response.setResponseData(symmetricEncrypter.encrypt(plainText));
      handleAttachment(response,payload,envelope);
    }
    logger.info(""String_Node_Str"",SOAPHelper.toString(payload).hashCode());
    String encryptedData=symmetricEncrypter.encrypt(SOAPHelper.toString(payload));
    logger.info(""String_Node_Str"",encryptedData.hashCode());
    RESTGatewayUtil.buildEncryptedBody(symmetricEncrypter,asymmetricEncrypter,soapResponse,encryptedData);
  }
 catch (  NoSuchAlgorithmException ex) {
    logger.error(ex.getMessage(),ex);
    throw new SOAPException(""String_Node_Str"",ex);
  }
}",0.8075240594925635
134642,"/** 
 * Returns an encrypter using the public key matching the given service id.
 * @param publicKeyFile path to public key file
 * @param publicKeyFilePassword public key file password
 * @param serviceId unique ID of the service
 * @return public key matching the given service id
 */
public static Encrypter getEncrypter(String publicKeyFile,String publicKeyFilePassword,String serviceId){
  try {
    Encrypter encrypter=new AsymmetricEncrypter(publicKeyFile,publicKeyFilePassword,serviceId);
    logger.info(""String_Node_Str"",serviceId);
    return encrypter;
  }
 catch (  KeyStoreException|IOException|NoSuchAlgorithmException|CertificateException ex) {
    logger.error(ex.getMessage(),ex);
    logger.debug(Constants.LOG_STRING_FOR_SETTINGS,Constants.ENCRYPTION_PROPS_PUBLIC_KEY_FILE,publicKeyFile);
    logger.debug(Constants.LOG_STRING_FOR_SETTINGS,Constants.ENCRYPTION_PROPS_PUBLIC_KEY_FILE_PASSWORD,publicKeyFilePassword.replaceAll(""String_Node_Str"",""String_Node_Str""));
    logger.debug(""String_Node_Str"",serviceId);
    return null;
  }
catch (  java.lang.NullPointerException ex) {
    logger.error(""String_Node_Str"",serviceId);
    return null;
  }
}","/** 
 * Returns an encrypter using the public key matching the given service id.
 * @param publicKeyFile path to public key file
 * @param publicKeyFilePassword public key file password
 * @param serviceId unique ID of the service
 * @return public key matching the given service id
 */
public static Encrypter getEncrypter(String publicKeyFile,String publicKeyFilePassword,String serviceId){
  try {
    Encrypter encrypter=new AsymmetricEncrypter(publicKeyFile,publicKeyFilePassword,serviceId);
    logger.info(""String_Node_Str"",serviceId);
    return encrypter;
  }
 catch (  KeyStoreException|IOException|NoSuchAlgorithmException|CertificateException ex) {
    logger.error(ex.getMessage(),ex);
    logger.debug(Constants.LOG_STRING_FOR_SETTINGS,Constants.ENCRYPTION_PROPS_PUBLIC_KEY_FILE,publicKeyFile);
    logger.debug(Constants.LOG_STRING_FOR_SETTINGS,Constants.ENCRYPTION_PROPS_PUBLIC_KEY_FILE_PASSWORD,publicKeyFilePassword.replaceAll(""String_Node_Str"",""String_Node_Str""));
    logger.debug(""String_Node_Str"",serviceId);
    return null;
  }
catch (  java.lang.NullPointerException ex) {
    logger.error(""String_Node_Str"",serviceId);
    logger.error(ex.getMessage(),ex);
    return null;
  }
}",0.9747048903878583
134643,"/** 
 * Generates a unique identifier if the given message id is null. Otherwise returns the given message id.
 * @param messageId message id to be checked
 * @return unique identifier if the given message id is null; otherwisemessageId
 */
private String processMessageId(String messageId){
  if (messageId == null) {
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_MESSAGE_ID,messageId);
    return MessageHelper.generateId();
  }
  return messageId;
}","/** 
 * Generates a unique identifier if the given message id is null. Otherwise returns the given message id.
 * @param messageId message id to be checked
 * @return unique identifier if the given message id is null; otherwisemessageId
 */
private String processMessageId(String messageId){
  if (messageId == null) {
    String id=MessageHelper.generateId();
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_MESSAGE_ID,id);
    return id;
  }
  return messageId;
}",0.9155080213903743
134644,"@Override public void init() throws ServletException {
  super.init();
  logger.debug(""String_Node_Str"");
  logger.debug(""String_Node_Str"");
  String propertiesDirectoryParameter=System.getProperty(Constants.PROPERTIES_DIR_PARAM_NAME);
  Properties endpointProps;
  if (propertiesDirectoryParameter != null) {
    endpointProps=PropertiesUtil.getInstance().load(propertiesDirectoryParameter + Constants.PROPERTIES_FILE_CONSUMERS,false);
    this.props=PropertiesUtil.getInstance().load(propertiesDirectoryParameter + Constants.PROPERTIES_FILE_CONSUMER_GATEWAY,false);
  }
 else {
    endpointProps=PropertiesUtil.getInstance().load(Constants.PROPERTIES_FILE_CONSUMERS);
    this.props=PropertiesUtil.getInstance().load(Constants.PROPERTIES_FILE_CONSUMER_GATEWAY);
  }
  logger.debug(""String_Node_Str"");
  String serviceCallsByXRdServiceIdStr=this.props.getProperty(Constants.CONSUMER_PROPS_SVC_CALLS_BY_XRD_SVC_ID_ENABLED);
  this.serviceCallsByXRdServiceId=serviceCallsByXRdServiceIdStr == null ? false : serviceCallsByXRdServiceIdStr.equalsIgnoreCase(""String_Node_Str"");
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.CONSUMER_PROPS_ID_CLIENT));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE));
  logger.debug(""String_Node_Str"",this.serviceCallsByXRdServiceId);
  logger.debug(""String_Node_Str"");
  this.endpoints=ConsumerGatewayUtil.extractConsumers(endpointProps,this.props);
  logger.debug(""String_Node_Str"");
}","@Override public void init() throws ServletException {
  super.init();
  logger.debug(""String_Node_Str"");
  logger.debug(""String_Node_Str"");
  String propertiesDirectoryParameter=System.getProperty(Constants.PROPERTIES_DIR_PARAM_NAME);
  Properties endpointProps;
  if (propertiesDirectoryParameter != null) {
    endpointProps=PropertiesUtil.getInstance().load(propertiesDirectoryParameter + Constants.PROPERTIES_FILE_CONSUMERS,false);
    this.props=PropertiesUtil.getInstance().load(propertiesDirectoryParameter + Constants.PROPERTIES_FILE_CONSUMER_GATEWAY,false);
  }
 else {
    endpointProps=PropertiesUtil.getInstance().load(Constants.PROPERTIES_FILE_CONSUMERS);
    this.props=PropertiesUtil.getInstance().load(Constants.PROPERTIES_FILE_CONSUMER_GATEWAY);
  }
  logger.debug(""String_Node_Str"");
  String serviceCallsByXRdServiceIdStr=this.props.getProperty(Constants.CONSUMER_PROPS_SVC_CALLS_BY_XRD_SVC_ID_ENABLED);
  this.serviceCallsByXRdServiceId=serviceCallsByXRdServiceIdStr == null ? false : ""String_Node_Str"".equalsIgnoreCase(serviceCallsByXRdServiceIdStr);
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.CONSUMER_PROPS_ID_CLIENT));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE));
  logger.debug(""String_Node_Str"",this.props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE));
  logger.debug(""String_Node_Str"",this.serviceCallsByXRdServiceId);
  logger.debug(""String_Node_Str"");
  this.endpoints=ConsumerGatewayUtil.extractConsumers(endpointProps,this.props);
  logger.debug(""String_Node_Str"");
}",0.9809264305177112
134645,"@Override protected void serializeRequest(ServiceRequest request,SOAPElement soapRequest,SOAPEnvelope envelope) throws SOAPException {
  if (this.resourceId != null && !this.resourceId.isEmpty()) {
    logger.debug(""String_Node_Str"",this.resourceId);
    soapRequest.addChildElement(""String_Node_Str"").addTextNode(this.resourceId);
  }
  Map<String,String[]> params=(Map<String,String[]>)request.getRequestData();
  for (  String key : params.keySet()) {
    String[] arr=params.get(key);
    for (    String value : arr) {
      logger.debug(""String_Node_Str"",key,value);
      soapRequest.addChildElement(key).addTextNode(value);
    }
  }
  if (this.requestBody != null && !this.requestBody.isEmpty()) {
    logger.debug(""String_Node_Str"",this.contentType);
    SOAPElement data=soapRequest.addChildElement(envelope.createName(Constants.PARAM_REQUEST_BODY));
    data.addAttribute(envelope.createName(""String_Node_Str""),Constants.PARAM_REQUEST_BODY);
    AttachmentPart attachPart=request.getSoapMessage().createAttachmentPart(this.requestBody,this.contentType);
    attachPart.setContentId(Constants.PARAM_REQUEST_BODY);
    request.getSoapMessage().addAttachmentPart(attachPart);
  }
}","@Override protected void serializeRequest(ServiceRequest request,SOAPElement soapRequest,SOAPEnvelope envelope) throws SOAPException {
  if (this.resourceId != null && !this.resourceId.isEmpty()) {
    logger.debug(""String_Node_Str"",this.resourceId);
    soapRequest.addChildElement(""String_Node_Str"").addTextNode(this.resourceId);
  }
  Map<String,String[]> params=(Map<String,String[]>)request.getRequestData();
  for (  Map.Entry<String,String[]> entry : params.entrySet()) {
    String key=entry.getKey();
    String[] arr=entry.getValue();
    for (    String value : arr) {
      logger.debug(""String_Node_Str"",key,value);
      soapRequest.addChildElement(key).addTextNode(value);
    }
  }
  if (this.requestBody != null && !this.requestBody.isEmpty()) {
    logger.debug(""String_Node_Str"",this.contentType);
    SOAPElement data=soapRequest.addChildElement(envelope.createName(Constants.PARAM_REQUEST_BODY));
    data.addAttribute(envelope.createName(""String_Node_Str""),Constants.PARAM_REQUEST_BODY);
    AttachmentPart attachPart=request.getSoapMessage().createAttachmentPart(this.requestBody,this.contentType);
    attachPart.setContentId(Constants.PARAM_REQUEST_BODY);
    request.getSoapMessage().addAttachmentPart(attachPart);
  }
}",0.9326765188834154
134646,"/** 
 * Reads the request body from the request and returns it as a String.
 * @param request HttpServletRequest that contains the request body
 * @return request body as a String or null
 */
private String readRequestBody(HttpServletRequest request){
  try {
    StringBuilder buffer=new StringBuilder();
    BufferedReader reader=request.getReader();
    String line;
    while ((line=reader.readLine()) != null) {
      buffer.append(line);
    }
    return buffer.toString();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"");
  }
  return null;
}","/** 
 * Reads the request body from the request and returns it as a String.
 * @param request HttpServletRequest that contains the request body
 * @return request body as a String or null
 */
private String readRequestBody(HttpServletRequest request){
  try {
    StringBuilder buffer=new StringBuilder();
    BufferedReader reader=request.getReader();
    String line;
    while ((line=reader.readLine()) != null) {
      buffer.append(line);
    }
    return buffer.toString();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}",0.9982363315696648
134647,"/** 
 * Processes requests for HTTP <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String responseStr;
  boolean omitNamespace=false;
  String resourcePath=(String)request.getAttribute(""String_Node_Str"");
  String userId=this.getXRdHeader(request,Constants.XRD_HEADER_USER_ID);
  String messageId=this.getXRdHeader(request,Constants.XRD_HEADER_MESSAGE_ID);
  String namespace=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_SERIALIZE);
  String prefix=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_PREFIX_SERIALIZE);
  String contentType=request.getHeader(Constants.HTTP_HEADER_CONTENT_TYPE);
  String accept=this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT) == null ? Constants.TEXT_XML : this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT);
  logger.info(""String_Node_Str"",request.getMethod(),resourcePath);
  logger.debug(""String_Node_Str"",accept);
  if (!accept.startsWith(Constants.TEXT_XML) && !accept.startsWith(Constants.APPLICATION_JSON)) {
    accept=Constants.TEXT_XML + ""String_Node_Str"" + Constants.CHARSET_UTF8;
    logger.trace(""String_Node_Str"",Constants.TEXT_XML);
  }
  if (!accept.endsWith(""String_Node_Str"")) {
    accept+=""String_Node_Str"" + Constants.CHARSET_UTF8;
  }
  response.setContentType(accept);
  if (userId == null) {
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_USER_ID);
    userId=""String_Node_Str"";
  }
  if (messageId == null) {
    messageId=MessageHelper.generateId();
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_MESSAGE_ID,messageId);
  }
  if (accept.startsWith(Constants.APPLICATION_JSON)) {
    omitNamespace=true;
  }
  response.addHeader(Constants.XRD_HEADER_USER_ID,userId);
  response.addHeader(Constants.XRD_HEADER_MESSAGE_ID,messageId);
  if (resourcePath != null) {
    String serviceId=request.getMethod() + ""String_Node_Str"" + resourcePath;
    logger.debug(""String_Node_Str"",serviceId);
    ConsumerEndpoint endpoint=ConsumerGatewayUtil.findMatch(serviceId,endpoints);
    if (endpoint == null) {
      if (this.serviceCallsByXRdServiceId) {
        logger.info(""String_Node_Str"",resourcePath);
        endpoint=ConsumerGatewayUtil.createUnconfiguredEndpoint(this.props,resourcePath);
      }
 else {
        logger.info(""String_Node_Str"");
      }
    }
    if (endpoint != null) {
      if (namespace != null && !namespace.isEmpty()) {
        endpoint.getProducer().setNamespaceUrl(namespace);
        logger.debug(""String_Node_Str"",Constants.XRD_HEADER_NAMESPACE_SERIALIZE,namespace);
      }
      if (prefix != null && !prefix.isEmpty()) {
        endpoint.getProducer().setNamespacePrefix(prefix);
        logger.debug(""String_Node_Str"",Constants.XRD_HEADER_NAMESPACE_PREFIX_SERIALIZE,prefix);
      }
      logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
      try {
        ServiceRequest<Map<String,String[]>> serviceRequest=new ServiceRequest<Map<String,String[]>>(endpoint.getConsumer(),endpoint.getProducer(),messageId);
        serviceRequest.setUserId(userId);
        serviceRequest.setRequestData(this.filterRequestParameters(request.getParameterMap()));
        if (endpoint.isProcessingWrappers() != null) {
          serviceRequest.setProcessingWrappers(endpoint.isProcessingWrappers());
        }
        String requestBody=this.readRequestBody(request);
        ServiceRequestSerializer serializer=new RequestSerializer(endpoint.getResourceId(),requestBody,contentType);
        ServiceResponseDeserializer deserializer=new ResponseDeserializer(omitNamespace);
        SOAPClient client=new SOAPClientImpl();
        logger.info(""String_Node_Str"",messageId,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL));
        ServiceResponse serviceResponse=client.send(serviceRequest,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL),serializer,deserializer);
        logger.info(""String_Node_Str"",messageId);
        if (endpoint.isProcessingWrappers() != null) {
          serviceResponse.setProcessingWrappers(endpoint.isProcessingWrappers());
        }
        if (!serviceResponse.hasError()) {
          responseStr=(String)serviceResponse.getResponseData();
        }
 else {
          logger.debug(""String_Node_Str"");
          responseStr=this.generateFault(serviceResponse.getErrorMessage());
        }
        if (!SOAPHelper.hasAttachments(serviceResponse.getSoapMessage())) {
          if (response.getContentType().startsWith(Constants.APPLICATION_JSON)) {
            logger.debug(""String_Node_Str"");
            responseStr=ConsumerGatewayUtil.removeResponseTag(responseStr);
            responseStr=new XMLToJSONConverter().convert(responseStr);
          }
 else           if (response.getContentType().startsWith(Constants.TEXT_XML)) {
            String responseStrTemp=ConsumerGatewayUtil.removeResponseTag(responseStr);
            if (SOAPHelper.xmlStrToSOAPElement(responseStrTemp) != null) {
              responseStr=responseStrTemp;
              logger.debug(""String_Node_Str"");
            }
 else {
              logger.debug(""String_Node_Str"");
            }
          }
        }
 else {
          String attContentType=SOAPHelper.getAttachmentContentType(serviceResponse.getSoapMessage());
          response.setContentType(attContentType);
          logger.debug(""String_Node_Str"");
        }
        if (endpoint.isModifyUrl()) {
          String servletUrl=this.getServletUrl(request);
          responseStr=ConsumerGatewayUtil.rewriteUrl(servletUrl,resourcePath,responseStr);
        }
        logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
        logger.error(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
        responseStr=this.generateError(Constants.ERROR_500,accept);
        response.setStatus(500);
      }
    }
 else {
      responseStr=this.generateError(Constants.ERROR_404,accept);
      response.setStatus(404);
    }
  }
 else {
    responseStr=this.generateError(Constants.ERROR_404,accept);
    response.setStatus(404);
  }
  PrintWriter out=null;
  try {
    logger.debug(""String_Node_Str"");
    logger.debug(""String_Node_Str"",response.getContentType());
    out=response.getWriter();
    out.println(responseStr);
    logger.trace(""String_Node_Str"",responseStr);
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
  }
 finally {
    if (out != null) {
      out.close();
    }
    logger.debug(""String_Node_Str"");
  }
}","/** 
 * Processes requests for HTTP <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String responseStr;
  boolean omitNamespace=false;
  String resourcePath=(String)request.getAttribute(""String_Node_Str"");
  String userId=this.getXRdHeader(request,Constants.XRD_HEADER_USER_ID);
  String messageId=this.getXRdHeader(request,Constants.XRD_HEADER_MESSAGE_ID);
  String namespace=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_SERIALIZE);
  String prefix=this.getXRdHeader(request,Constants.XRD_HEADER_NAMESPACE_PREFIX_SERIALIZE);
  String contentType=request.getHeader(Constants.HTTP_HEADER_CONTENT_TYPE);
  String accept=this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT) == null ? Constants.TEXT_XML : this.getXRdHeader(request,Constants.HTTP_HEADER_ACCEPT);
  logger.info(""String_Node_Str"",request.getMethod(),resourcePath);
  logger.debug(""String_Node_Str"",accept);
  if (!accept.startsWith(Constants.TEXT_XML) && !accept.startsWith(Constants.APPLICATION_JSON)) {
    accept=Constants.TEXT_XML + ""String_Node_Str"" + Constants.CHARSET_UTF8;
    logger.trace(""String_Node_Str"",Constants.TEXT_XML);
  }
  if (!accept.endsWith(""String_Node_Str"")) {
    accept+=""String_Node_Str"" + Constants.CHARSET_UTF8;
  }
  response.setContentType(accept);
  if (userId == null) {
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_USER_ID);
    userId=""String_Node_Str"";
  }
  if (messageId == null) {
    messageId=MessageHelper.generateId();
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_MESSAGE_ID,messageId);
  }
  if (accept.startsWith(Constants.APPLICATION_JSON)) {
    omitNamespace=true;
  }
  response.addHeader(Constants.XRD_HEADER_USER_ID,userId);
  response.addHeader(Constants.XRD_HEADER_MESSAGE_ID,messageId);
  if (resourcePath != null) {
    String serviceId=request.getMethod() + ""String_Node_Str"" + resourcePath;
    logger.debug(""String_Node_Str"",serviceId);
    ConsumerEndpoint endpoint=ConsumerGatewayUtil.findMatch(serviceId,endpoints);
    if (endpoint == null) {
      if (this.serviceCallsByXRdServiceId) {
        logger.info(""String_Node_Str"",resourcePath);
        endpoint=ConsumerGatewayUtil.createUnconfiguredEndpoint(this.props,resourcePath);
      }
 else {
        logger.info(""String_Node_Str"");
      }
    }
    if (endpoint != null) {
      if (namespace != null && !namespace.isEmpty()) {
        endpoint.getProducer().setNamespaceUrl(namespace);
        logger.debug(""String_Node_Str"",Constants.XRD_HEADER_NAMESPACE_SERIALIZE,namespace);
      }
      if (prefix != null && !prefix.isEmpty()) {
        endpoint.getProducer().setNamespacePrefix(prefix);
        logger.debug(""String_Node_Str"",Constants.XRD_HEADER_NAMESPACE_PREFIX_SERIALIZE,prefix);
      }
      logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
      try {
        ServiceRequest<Map<String,String[]>> serviceRequest=new ServiceRequest<Map<String,String[]>>(endpoint.getConsumer(),endpoint.getProducer(),messageId);
        serviceRequest.setUserId(userId);
        serviceRequest.setRequestData(this.filterRequestParameters(request.getParameterMap()));
        if (endpoint.isProcessingWrappers() != null) {
          serviceRequest.setProcessingWrappers(endpoint.isProcessingWrappers());
        }
        String requestBody=this.readRequestBody(request);
        ServiceRequestSerializer serializer=new RequestSerializer(endpoint.getResourceId(),requestBody,contentType);
        ServiceResponseDeserializer deserializer=new ResponseDeserializer(omitNamespace);
        SOAPClient client=new SOAPClientImpl();
        logger.info(""String_Node_Str"",messageId,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL));
        ServiceResponse serviceResponse=client.send(serviceRequest,props.getProperty(Constants.CONSUMER_PROPS_SECURITY_SERVER_URL),serializer,deserializer);
        logger.info(""String_Node_Str"",messageId);
        if (endpoint.isProcessingWrappers() != null) {
          serviceResponse.setProcessingWrappers(endpoint.isProcessingWrappers());
        }
        if (!serviceResponse.hasError()) {
          responseStr=(String)serviceResponse.getResponseData();
        }
 else {
          logger.debug(""String_Node_Str"");
          responseStr=this.generateFault(serviceResponse.getErrorMessage());
        }
        if (!SOAPHelper.hasAttachments(serviceResponse.getSoapMessage())) {
          if (response.getContentType().startsWith(Constants.APPLICATION_JSON)) {
            logger.debug(""String_Node_Str"");
            responseStr=ConsumerGatewayUtil.removeResponseTag(responseStr);
            responseStr=new XMLToJSONConverter().convert(responseStr);
          }
 else           if (response.getContentType().startsWith(Constants.TEXT_XML)) {
            String responseStrTemp=ConsumerGatewayUtil.removeResponseTag(responseStr);
            if (SOAPHelper.xmlStrToSOAPElement(responseStrTemp) != null) {
              responseStr=responseStrTemp;
              logger.debug(""String_Node_Str"");
            }
 else {
              logger.debug(""String_Node_Str"");
            }
          }
        }
 else {
          String attContentType=SOAPHelper.getAttachmentContentType(serviceResponse.getSoapMessage());
          response.setContentType(attContentType);
          logger.debug(""String_Node_Str"");
        }
        if (endpoint.isModifyUrl()) {
          String servletUrl=this.getServletUrl(request);
          responseStr=ConsumerGatewayUtil.rewriteUrl(servletUrl,resourcePath,responseStr);
        }
        logger.info(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
        logger.error(""String_Node_Str"",serviceId,endpoint.getServiceId(),messageId);
        responseStr=this.generateError(Constants.ERROR_500,accept);
        response.setStatus(500);
      }
    }
 else {
      responseStr=this.generateError(Constants.ERROR_404,accept);
      response.setStatus(404);
    }
  }
 else {
    responseStr=this.generateError(Constants.ERROR_404,accept);
    response.setStatus(404);
  }
  PrintWriter out=null;
  try {
    logger.debug(""String_Node_Str"");
    logger.debug(""String_Node_Str"",response.getContentType());
    out=response.getWriter();
    out.println(responseStr);
    logger.trace(""String_Node_Str"",responseStr);
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
  }
 finally {
    if (out != null) {
      out.close();
    }
    logger.debug(""String_Node_Str"");
  }
}",0.999853886616014
134648,"@Override public void doFilter(ServletRequest req,ServletResponse res,FilterChain fc) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  String servletName=""String_Node_Str"";
  String oldURI=request.getRequestURI().substring(request.getContextPath().length() + 1);
  logger.debug(""String_Node_Str"",oldURI);
  if (oldURI.length() > servletName.length()) {
    String resourcePath=oldURI.substring(oldURI.indexOf(""String_Node_Str""));
    if (!resourcePath.equals(""String_Node_Str"")) {
      if (!resourcePath.endsWith(""String_Node_Str"")) {
        resourcePath+=""String_Node_Str"";
      }
      logger.debug(""String_Node_Str"",resourcePath);
      request.setAttribute(""String_Node_Str"",resourcePath);
    }
 else {
      logger.trace(""String_Node_Str"",resourcePath);
    }
  }
 else {
    logger.trace(""String_Node_Str"");
  }
  req.getRequestDispatcher(""String_Node_Str"").forward(req,res);
}","@Override public void doFilter(ServletRequest req,ServletResponse res,FilterChain fc) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  String servletName=""String_Node_Str"";
  String oldURI=request.getRequestURI().substring(request.getContextPath().length() + 1);
  logger.debug(""String_Node_Str"",oldURI);
  if (oldURI.length() > servletName.length()) {
    String resourcePath=oldURI.substring(oldURI.indexOf('/'));
    if (!""String_Node_Str"".equals(resourcePath)) {
      if (!resourcePath.endsWith(""String_Node_Str"")) {
        resourcePath+=""String_Node_Str"";
      }
      logger.debug(""String_Node_Str"",resourcePath);
      request.setAttribute(""String_Node_Str"",resourcePath);
    }
 else {
      logger.trace(""String_Node_Str"",resourcePath);
    }
  }
 else {
    logger.trace(""String_Node_Str"");
  }
  req.getRequestDispatcher(""String_Node_Str"").forward(req,res);
}",0.9622030237580994
134649,"/** 
 * Goes through the given endpoint and tries to find an endpoint which id matches the given service id. If no match is found, then tries to find a partial match.
 * @param serviceId service id to be looked for
 * @param endpoints list of endpoints
 * @return endpoint matching the given service id or null
 */
public static ConsumerEndpoint findMatch(String serviceId,Map<String,ConsumerEndpoint> endpoints){
  if (endpoints.containsKey(serviceId)) {
    logger.debug(""String_Node_Str"",serviceId);
    return endpoints.get(serviceId);
  }
  for (  String key : endpoints.keySet()) {
    String keyMod=key.replaceAll(""String_Node_Str"" + Constants.PARAM_RESOURCE_ID + ""String_Node_Str"",""String_Node_Str"");
    logger.trace(""String_Node_Str"",keyMod);
    if (serviceId.matches(keyMod)) {
      logger.debug(""String_Node_Str"",serviceId,key);
      ConsumerEndpoint endpoint=endpoints.get(key);
      int index=key.indexOf(""String_Node_Str"");
      if (index != -1) {
        String resourceId=serviceId.substring(index);
        if (resourceId.endsWith(""String_Node_Str"")) {
          resourceId=resourceId.substring(0,resourceId.length() - 1);
        }
        endpoint.setResourceId(resourceId);
        logger.trace(""String_Node_Str"",resourceId);
      }
      return endpoint;
    }
  }
  logger.debug(""String_Node_Str"",serviceId);
  return null;
}","/** 
 * Goes through the given endpoint and tries to find an endpoint which id matches the given service id. If no match is found, then tries to find a partial match.
 * @param serviceId service id to be looked for
 * @param endpoints list of endpoints
 * @return endpoint matching the given service id or null
 */
public static ConsumerEndpoint findMatch(String serviceId,Map<String,ConsumerEndpoint> endpoints){
  if (endpoints.containsKey(serviceId)) {
    logger.debug(""String_Node_Str"",serviceId);
    return endpoints.get(serviceId);
  }
  for (  Map.Entry<String,ConsumerEndpoint> entry : endpoints.entrySet()) {
    String key=entry.getKey();
    String keyMod=key.replaceAll(""String_Node_Str"" + Constants.PARAM_RESOURCE_ID + ""String_Node_Str"",""String_Node_Str"");
    logger.trace(""String_Node_Str"",keyMod);
    if (serviceId.matches(keyMod)) {
      logger.debug(""String_Node_Str"",serviceId,key);
      ConsumerEndpoint endpoint=entry.getValue();
      int index=key.indexOf('{');
      if (index != -1) {
        String resourceId=serviceId.substring(index);
        if (resourceId.endsWith(""String_Node_Str"")) {
          resourceId=resourceId.substring(0,resourceId.length() - 1);
        }
        endpoint.setResourceId(resourceId);
        logger.trace(""String_Node_Str"",resourceId);
      }
      return endpoint;
    }
  }
  logger.debug(""String_Node_Str"",serviceId);
  return null;
}",0.943738656987296
134650,"/** 
 * Rewrites all the URLs in the responseStr that are matching the resourcePath to point the Consumer Gateway servlet.
 * @param servletUrl URL of Consumer Gateway serlvet
 * @param resourcePath path that's rewritten to point the Consumer Gateway
 * @param responseStr response to be modified
 * @return modified response
 */
public static String rewriteUrl(String servletUrl,String resourcePath,String responseStr){
  logger.debug(""String_Node_Str"");
  logger.debug(""String_Node_Str"",servletUrl);
  try {
    resourcePath=resourcePath.substring(1,resourcePath.length() - 1).replaceAll(""String_Node_Str"" + Constants.PARAM_RESOURCE_ID + ""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"",resourcePath);
    logger.debug(""String_Node_Str"",servletUrl,resourcePath);
    return responseStr.replaceAll(""String_Node_Str"" + resourcePath,servletUrl + resourcePath);
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"");
    logger.error(ex.getMessage(),ex);
    return responseStr;
  }
}","/** 
 * Rewrites all the URLs in the responseStr that are matching the resourcePath to point the Consumer Gateway servlet.
 * @param servletUrl URL of Consumer Gateway serlvet
 * @param pathToResource path that's rewritten to point the Consumer Gateway
 * @param responseStr response to be modified
 * @return modified response
 */
public static String rewriteUrl(String servletUrl,String pathToResource,String responseStr){
  logger.debug(""String_Node_Str"");
  logger.debug(""String_Node_Str"",servletUrl);
  try {
    String resourcePath=pathToResource.substring(1,pathToResource.length() - 1).replaceAll(""String_Node_Str"" + Constants.PARAM_RESOURCE_ID + ""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"",resourcePath);
    logger.debug(""String_Node_Str"",servletUrl,resourcePath);
    return responseStr.replaceAll(""String_Node_Str"" + resourcePath,servletUrl + resourcePath);
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"");
    logger.error(ex.getMessage(),ex);
    return responseStr;
  }
}",0.8337396392003901
134651,"/** 
 * Removes response tag and its namespace prefixes from the given response message. All the response tag's namespace prefixes are removed from the children. Response tag can be simple <response> or prefixed with service name <serviceNameResponse>.
 * @param message response message
 * @return children of the response tag
 */
public static String removeResponseTag(String message){
  String responsePrefix=""String_Node_Str"";
  String regex=""String_Node_Str"";
  Pattern pattern=Pattern.compile(regex);
  Matcher matcher=pattern.matcher(message);
  if (matcher.find()) {
    if (matcher.group(1) != null) {
      responsePrefix=matcher.group(1);
      logger.debug(""String_Node_Str"",responsePrefix);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  String response=message.replaceAll(""String_Node_Str"" + responsePrefix + ""String_Node_Str"",""String_Node_Str"");
  if (!responsePrefix.isEmpty()) {
    response=response.replaceAll(""String_Node_Str"" + responsePrefix,""String_Node_Str"");
  }
  return response;
}","/** 
 * Removes response tag and its namespace prefixes from the given response message. All the response tag's namespace prefixes are removed from the children. Response tag can be simple \<response\> or prefixed with service name \<serviceNameResponse\>.
 * @param message response message
 * @return children of the response tag
 */
public static String removeResponseTag(String message){
  String responsePrefix=""String_Node_Str"";
  String regex=""String_Node_Str"";
  Pattern pattern=Pattern.compile(regex);
  Matcher matcher=pattern.matcher(message);
  if (matcher.find()) {
    if (matcher.group(1) != null) {
      responsePrefix=matcher.group(1);
      logger.debug(""String_Node_Str"",responsePrefix);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
  String response=message.replaceAll(""String_Node_Str"" + responsePrefix + ""String_Node_Str"",""String_Node_Str"");
  if (!responsePrefix.isEmpty()) {
    response=response.replaceAll(""String_Node_Str"" + responsePrefix,""String_Node_Str"");
  }
  return response;
}",0.9980544747081712
134652,"/** 
 * Creates a ConsumerEndpoint that points to a service which configuration information is not in the configuration file. Resource path is used as service id.
 * @param props consumer gateway properties that contain default namespaceand prefix
 * @param resourcePath resource path that was called, used as service id
 * @return ConsumerEndpoint object
 */
public static ConsumerEndpoint createUnconfiguredEndpoint(Properties props,String resourcePath){
  logger.debug(""String_Node_Str"");
  String resourceId=null;
  String pattern=""String_Node_Str"";
  Pattern regex=Pattern.compile(pattern);
  Matcher m=regex.matcher(resourcePath);
  if (m.find()) {
    resourcePath=m.group(1);
    resourceId=m.group(2).substring(0,m.group(2).length() - 1);
    logger.info(""String_Node_Str"",resourcePath,resourceId);
  }
 else {
    resourcePath=resourcePath.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String clientId=props.getProperty(Constants.CONSUMER_PROPS_ID_CLIENT);
  ConsumerEndpoint endpoint=new ConsumerEndpoint(resourcePath,clientId,""String_Node_Str"");
  endpoint.setResourceId(resourceId);
  if (!ConsumerGatewayUtil.setConsumerMember(endpoint) || !ConsumerGatewayUtil.setProducerMember(endpoint)) {
    endpoint=null;
  }
 else {
    String ns=props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE);
    String prefix=props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE);
    endpoint.getProducer().setNamespaceUrl(ns);
    endpoint.getProducer().setNamespacePrefix(prefix);
  }
  return endpoint;
}","/** 
 * Creates a ConsumerEndpoint that points to a service which configuration information is not in the configuration file. Resource path is used as service id.
 * @param props consumer gateway properties that contain default namespaceand prefix
 * @param pathToResource resource path that was called, used as service id
 * @return ConsumerEndpoint object
 */
public static ConsumerEndpoint createUnconfiguredEndpoint(Properties props,String pathToResource){
  logger.debug(""String_Node_Str"");
  String resourceId=null;
  String resourcePath;
  String pattern=""String_Node_Str"";
  Pattern regex=Pattern.compile(pattern);
  Matcher m=regex.matcher(pathToResource);
  if (m.find()) {
    resourcePath=m.group(1);
    resourceId=m.group(2).substring(0,m.group(2).length() - 1);
    logger.info(""String_Node_Str"",resourcePath,resourceId);
  }
 else {
    resourcePath=pathToResource.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String clientId=props.getProperty(Constants.CONSUMER_PROPS_ID_CLIENT);
  ConsumerEndpoint endpoint=new ConsumerEndpoint(resourcePath,clientId,""String_Node_Str"");
  endpoint.setResourceId(resourceId);
  if (!ConsumerGatewayUtil.setConsumerMember(endpoint) || !ConsumerGatewayUtil.setProducerMember(endpoint)) {
    endpoint=null;
  }
 else {
    String ns=props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE);
    String prefix=props.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE);
    endpoint.getProducer().setNamespaceUrl(ns);
    endpoint.getProducer().setNamespacePrefix(prefix);
  }
  return endpoint;
}",0.9596441054972992
134653,"/** 
 * Generates a Map containing HTTP headers that are sent to the service endpoint.
 * @param request ServiceRequest holding X-Road specific headers
 * @param endpoint ProviderEndpoint holding standard HTTP headers
 * @return Map containing HTTP headers
 */
public static Map<String,String> generateHttpHeaders(ServiceRequest request,ProviderEndpoint endpoint){
  logger.info(""String_Node_Str"");
  Map<String,String> headers=new HashMap<String,String>();
  if (endpoint.isSendXrdHeaders()) {
    logger.debug(""String_Node_Str"");
    headers.put(Constants.XRD_HEADER_CLIENT,request.getConsumer().toString());
    headers.put(Constants.XRD_HEADER_SERVICE,request.getProducer().toString());
    headers.put(Constants.XRD_HEADER_MESSAGE_ID,request.getId());
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_CLIENT,request.getConsumer().toString());
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_SERVICE,request.getProducer().toString());
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_MESSAGE_ID,request.getId());
    if (request.getUserId() != null && !request.getUserId().isEmpty()) {
      logger.debug(""String_Node_Str"",Constants.XRD_HEADER_USER_ID,request.getUserId());
      headers.put(Constants.XRD_HEADER_USER_ID,request.getUserId());
    }
  }
 else {
    logger.debug(""String_Node_Str"");
  }
  if (endpoint.getContentType() != null && !endpoint.getContentType().isEmpty()) {
    logger.debug(""String_Node_Str"",Constants.HTTP_HEADER_CONTENT_TYPE,endpoint.getContentType());
    headers.put(Constants.HTTP_HEADER_CONTENT_TYPE,endpoint.getContentType());
  }
  if (endpoint.getAccept() != null && !endpoint.getAccept().isEmpty()) {
    logger.debug(""String_Node_Str"",Constants.HTTP_HEADER_ACCEPT,endpoint.getAccept());
    headers.put(Constants.HTTP_HEADER_ACCEPT,endpoint.getAccept());
  }
  logger.info(""String_Node_Str"");
  return headers;
}","/** 
 * Generates a Map containing HTTP headers that are sent to the service endpoint.
 * @param request ServiceRequest holding X-Road specific headers
 * @param endpoint ProviderEndpoint holding standard HTTP headers
 * @return Map containing HTTP headers
 */
public static Map<String,String> generateHttpHeaders(ServiceRequest request,ProviderEndpoint endpoint){
  logger.info(""String_Node_Str"");
  Map<String,String> headers=new HashMap<>();
  if (endpoint.isSendXrdHeaders()) {
    logger.debug(""String_Node_Str"");
    headers.put(Constants.XRD_HEADER_CLIENT,request.getConsumer().toString());
    headers.put(Constants.XRD_HEADER_SERVICE,request.getProducer().toString());
    headers.put(Constants.XRD_HEADER_MESSAGE_ID,request.getId());
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_CLIENT,request.getConsumer().toString());
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_SERVICE,request.getProducer().toString());
    logger.debug(""String_Node_Str"",Constants.XRD_HEADER_MESSAGE_ID,request.getId());
    if (request.getUserId() != null && !request.getUserId().isEmpty()) {
      logger.debug(""String_Node_Str"",Constants.XRD_HEADER_USER_ID,request.getUserId());
      headers.put(Constants.XRD_HEADER_USER_ID,request.getUserId());
    }
  }
 else {
    logger.debug(""String_Node_Str"");
  }
  if (endpoint.getContentType() != null && !endpoint.getContentType().isEmpty()) {
    logger.debug(""String_Node_Str"",Constants.HTTP_HEADER_CONTENT_TYPE,endpoint.getContentType());
    headers.put(Constants.HTTP_HEADER_CONTENT_TYPE,endpoint.getContentType());
  }
  if (endpoint.getAccept() != null && !endpoint.getAccept().isEmpty()) {
    logger.debug(""String_Node_Str"",Constants.HTTP_HEADER_ACCEPT,endpoint.getAccept());
    headers.put(Constants.HTTP_HEADER_ACCEPT,endpoint.getAccept());
  }
  logger.info(""String_Node_Str"");
  return headers;
}",0.9965249933172948
134654,"/** 
 * Goes through the given properties and extracts all the defined provider endpoints. Returns a map containing service id - provider endpoint key-value pairs.
 * @param endpoints endpoint properties
 * @param gatewayProperties REST Provider Gateway general properties
 * @return map containing service id - provider endpoint key-value pairs
 */
public static Map<String,ProviderEndpoint> extractProviders(Properties endpoints,Properties gatewayProperties){
  Map<String,ProviderEndpoint> results=new HashMap<String,ProviderEndpoint>();
  logger.info(""String_Node_Str"");
  if (endpoints == null || endpoints.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return results;
  }
  int i=0;
  String key=Integer.toString(i);
  while (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_ID)) {
    String id=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_ID);
    String url=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_URL);
    if (id == null || id.isEmpty() || url == null || url.isEmpty()) {
      logger.warn(""String_Node_Str"");
      i++;
      key=Integer.toString(i);
      continue;
    }
    ProviderEndpoint endpoint=new ProviderEndpoint(id,url);
    endpoint.setHttpVerb(""String_Node_Str"");
    endpoint.setNamespaceDeserialize(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE));
    endpoint.setNamespaceSerialize(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE));
    endpoint.setPrefix(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE));
    if (gatewayProperties.containsKey(Constants.ENDPOINT_PROPS_WRAPPERS)) {
      endpoint.setProcessingWrappers(MessageHelper.strToBool(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_WRAPPERS)));
    }
    logger.info(""String_Node_Str"",id,url);
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_VERB)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_VERB);
      endpoint.setHttpVerb(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_VERB,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_CONTENT_TYPE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_CONTENT_TYPE);
      endpoint.setContentType(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_CONTENT_TYPE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ACCEPT)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ACCEPT);
      endpoint.setAccept(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_ACCEPT,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ATTACHMENT)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ATTACHMENT);
      endpoint.setAttachment(MessageHelper.strToBool(value));
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_ATTACHMENT,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_SEND_XRD_HEADERS)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_SEND_XRD_HEADERS);
      endpoint.setSendXrdHeaders(MessageHelper.strToBool(value));
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_SEND_XRD_HEADERS,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_WRAPPERS)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_WRAPPERS);
      endpoint.setProcessingWrappers(MessageHelper.strToBool(value));
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_WRAPPERS,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE);
      endpoint.setNamespaceDeserialize(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE);
      endpoint.setNamespaceSerialize(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE);
      endpoint.setPrefix(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_CONDITION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_CONDITION);
      endpoint.setReqParamNameFilterCondition(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_CONDITION,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_OPERATION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_OPERATION);
      endpoint.setReqParamNameFilterOperation(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_OPERATION,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_CONDITION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_CONDITION);
      endpoint.setReqParamValueFilterCondition(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_CONDITION,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_OPERATION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_OPERATION);
      endpoint.setReqParamValueFilterOperation(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_OPERATION,value);
    }
    results.put(id,endpoint);
    i++;
    key=Integer.toString(i);
  }
  logger.info(""String_Node_Str"",results.size());
  return results;
}","/** 
 * Goes through the given properties and extracts all the defined provider endpoints. Returns a map containing service id - provider endpoint key-value pairs.
 * @param endpoints endpoint properties
 * @param gatewayProperties REST Provider Gateway general properties
 * @return map containing service id - provider endpoint key-value pairs
 */
public static Map<String,ProviderEndpoint> extractProviders(Properties endpoints,Properties gatewayProperties){
  Map<String,ProviderEndpoint> results=new HashMap<>();
  logger.info(""String_Node_Str"");
  if (endpoints == null || endpoints.isEmpty()) {
    logger.warn(""String_Node_Str"");
    return results;
  }
  int i=0;
  String key=Integer.toString(i);
  while (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_ID)) {
    String id=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_ID);
    String url=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_URL);
    if (id == null || id.isEmpty() || url == null || url.isEmpty()) {
      logger.warn(""String_Node_Str"");
      i++;
      key=Integer.toString(i);
      continue;
    }
    ProviderEndpoint endpoint=new ProviderEndpoint(id,url);
    endpoint.setHttpVerb(""String_Node_Str"");
    endpoint.setNamespaceDeserialize(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE));
    endpoint.setNamespaceSerialize(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE));
    endpoint.setPrefix(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE));
    if (gatewayProperties.containsKey(Constants.ENDPOINT_PROPS_WRAPPERS)) {
      endpoint.setProcessingWrappers(MessageHelper.strToBool(gatewayProperties.getProperty(Constants.ENDPOINT_PROPS_WRAPPERS)));
    }
    logger.info(""String_Node_Str"",id,url);
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_VERB)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_VERB);
      endpoint.setHttpVerb(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_VERB,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_CONTENT_TYPE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_CONTENT_TYPE);
      endpoint.setContentType(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_CONTENT_TYPE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ACCEPT)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ACCEPT);
      endpoint.setAccept(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_ACCEPT,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ATTACHMENT)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_ATTACHMENT);
      endpoint.setAttachment(MessageHelper.strToBool(value));
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_ATTACHMENT,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_SEND_XRD_HEADERS)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_SEND_XRD_HEADERS);
      endpoint.setSendXrdHeaders(MessageHelper.strToBool(value));
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_SEND_XRD_HEADERS,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_WRAPPERS)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_WRAPPERS);
      endpoint.setProcessingWrappers(MessageHelper.strToBool(value));
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_WRAPPERS,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE);
      endpoint.setNamespaceDeserialize(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_DESERIALIZE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE);
      endpoint.setNamespaceSerialize(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_SERIALIZE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE);
      endpoint.setPrefix(value);
      logger.info(""String_Node_Str"",Constants.ENDPOINT_PROPS_SERVICE_NAMESPACE_PREFIX_SERIALIZE,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_CONDITION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_CONDITION);
      endpoint.setReqParamNameFilterCondition(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_CONDITION,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_OPERATION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_OPERATION);
      endpoint.setReqParamNameFilterOperation(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_NAME_FILTER_OPERATION,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_CONDITION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_CONDITION);
      endpoint.setReqParamValueFilterCondition(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_CONDITION,value);
    }
    if (endpoints.containsKey(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_OPERATION)) {
      String value=endpoints.getProperty(key + ""String_Node_Str"" + Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_OPERATION);
      endpoint.setReqParamValueFilterOperation(value);
      logger.info(""String_Node_Str"",Constants.PROVIDER_PROPS_REQUEST_PARAM_VALUE_FILTER_OPERATION,value);
    }
    results.put(id,endpoint);
    i++;
    key=Integer.toString(i);
  }
  logger.info(""String_Node_Str"",results.size());
  return results;
}",0.9983281238642144
134655,"/** 
 * Converts JSON string to XML string. XML string is wrapped inside <response> wrapper element. The wrapper must be added, because otherwise it's not possible to convert the XML to SOAP element. JSON string does not likely have a root element that SOAP requires. <response> is used as a temporary root element and will be omitted by ProviderGateway when SOAP response is serialized as XML.
 * @param data JSON string to be converted
 * @return XML string
 */
public static String fromJSONToXML(String data){
  String wrapper=""String_Node_Str"";
  data=new JSONToXMLConverter().convert(data);
  return ""String_Node_Str"" + wrapper + ""String_Node_Str""+ data+ ""String_Node_Str""+ wrapper+ ""String_Node_Str"";
}","/** 
 * Converts JSON string to XML string. XML string is wrapped inside \<response\> wrapper element. The wrapper must be added, because otherwise it's not possible to convert the XML to SOAP element. JSON string does not likely have a root element that SOAP requires. \<response\> is used as a temporary root element and will be omitted by ProviderGateway when SOAP response is serialized as XML.
 * @param data JSON string to be converted
 * @return XML string
 */
public static String fromJSONToXML(String data){
  String wrapper=""String_Node_Str"";
  String dataXml=new JSONToXMLConverter().convert(data);
  return ""String_Node_Str"" + wrapper + ""String_Node_Str""+ dataXml+ ""String_Node_Str""+ wrapper+ ""String_Node_Str"";
}",0.9825540823447312
134656,"/** 
 * Filters request parameter names and values according to the rules defined by the ProviderEndpoint. Filter can be applied to only parameter name or value or both of them. Filter condition and operation are defined individually for parameter name and value.
 * @param request request which parameters are filtered
 * @param endpoint endpoint that contains the rules for filtering
 */
public static void filterRequestParameters(ServiceRequest request,ProviderEndpoint endpoint){
  logger.debug(""String_Node_Str"");
  List<String> keys=new ArrayList<>(((Map<String,String>)request.getRequestData()).keySet());
  for (  String orgKey : keys) {
    if (!orgKey.equals(Constants.PARAM_REQUEST_BODY) && !orgKey.equals(Constants.PARAM_RESOURCE_ID)) {
      boolean update=false;
      String key=orgKey;
      List<String> values=((Map<String,List<String>>)request.getRequestData()).get(orgKey);
      if (endpoint.getReqParamNameFilterCondition() != null && endpoint.getReqParamNameFilterOperation() != null) {
        logger.trace(""String_Node_Str"",orgKey,endpoint.getReqParamNameFilterCondition());
        Pattern regex=Pattern.compile(endpoint.getReqParamNameFilterCondition());
        Matcher m=regex.matcher(orgKey);
        if (m.find()) {
          key=m.replaceAll(endpoint.getReqParamNameFilterOperation());
          logger.trace(""String_Node_Str"",endpoint.getReqParamNameFilterOperation(),orgKey,key);
          update=true;
        }
      }
      if (endpoint.getReqParamValueFilterCondition() != null && endpoint.getReqParamValueFilterOperation() != null) {
        for (int i=0; i < values.size(); i++) {
          String orgValue=values.get(i);
          String value=orgValue;
          logger.trace(""String_Node_Str"",orgValue,endpoint.getReqParamValueFilterCondition());
          Pattern regex=Pattern.compile(endpoint.getReqParamValueFilterCondition());
          Matcher m=regex.matcher(orgValue);
          if (m.find()) {
            value=m.replaceAll(endpoint.getReqParamValueFilterOperation());
            logger.trace(""String_Node_Str"",endpoint.getReqParamValueFilterOperation(),orgValue,value);
            values.set(i,value);
            update=true;
          }
        }
      }
      if (update) {
        ((Map<String,List<String>>)request.getRequestData()).remove(orgKey);
        ((Map<String,List<String>>)request.getRequestData()).put(key,values);
      }
    }
 else {
      logger.trace(""String_Node_Str"",Constants.PARAM_REQUEST_BODY,Constants.PARAM_RESOURCE_ID);
    }
  }
  logger.debug(""String_Node_Str"");
}","/** 
 * Filters request parameter names and values according to the rules defined by the ProviderEndpoint. Filter can be applied to only parameter name or value or both of them. Filter condition and operation are defined individually for parameter name and value.
 * @param request request which parameters are filtered
 * @param endpoint endpoint that contains the rules for filtering
 */
public static void filterRequestParameters(ServiceRequest request,ProviderEndpoint endpoint){
  logger.debug(""String_Node_Str"");
  List<String> keys=new ArrayList<>(((Map<String,String>)request.getRequestData()).keySet());
  for (  String orgKey : keys) {
    if (!orgKey.equals(Constants.PARAM_REQUEST_BODY) && !orgKey.equals(Constants.PARAM_RESOURCE_ID)) {
      boolean update=false;
      String key=orgKey;
      List<String> values=((Map<String,List<String>>)request.getRequestData()).get(orgKey);
      if (endpoint.getReqParamNameFilterCondition() != null && endpoint.getReqParamNameFilterOperation() != null) {
        logger.trace(""String_Node_Str"",orgKey,endpoint.getReqParamNameFilterCondition());
        Pattern regex=Pattern.compile(endpoint.getReqParamNameFilterCondition());
        Matcher m=regex.matcher(orgKey);
        if (m.find()) {
          key=m.replaceAll(endpoint.getReqParamNameFilterOperation());
          logger.trace(""String_Node_Str"",endpoint.getReqParamNameFilterOperation(),orgKey,key);
          update=true;
        }
      }
      if (endpoint.getReqParamValueFilterCondition() != null && endpoint.getReqParamValueFilterOperation() != null) {
        for (int i=0; i < values.size(); i++) {
          String orgValue=values.get(i);
          logger.trace(""String_Node_Str"",orgValue,endpoint.getReqParamValueFilterCondition());
          Pattern regex=Pattern.compile(endpoint.getReqParamValueFilterCondition());
          Matcher m=regex.matcher(orgValue);
          if (m.find()) {
            String value=m.replaceAll(endpoint.getReqParamValueFilterOperation());
            logger.trace(""String_Node_Str"",endpoint.getReqParamValueFilterOperation(),orgValue,value);
            values.set(i,value);
            update=true;
          }
        }
      }
      if (update) {
        ((Map<String,List<String>>)request.getRequestData()).remove(orgKey);
        ((Map<String,List<String>>)request.getRequestData()).put(key,values);
      }
    }
 else {
      logger.trace(""String_Node_Str"",Constants.PARAM_REQUEST_BODY,Constants.PARAM_RESOURCE_ID);
    }
  }
  logger.debug(""String_Node_Str"");
}",0.9921228830248128
134657,"@Override public void cape(){
  try {
    DevCapes.getInstance().registerConfig(new URL(""String_Node_Str""));
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
}","@Override public void cape(){
  try {
    DevCapes.getInstance().registerConfig(new URL(""String_Node_Str""));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9655172413793104
134658,"private void loadConfiguration(){
  try {
    IC2NuclearControl.instance.alarmRange=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",64).getInt();
    IC2NuclearControl.instance.maxAlarmRange=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",128).getInt();
    IC2NuclearControl.instance.allowedAlarms=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",""String_Node_Str"").getString().replaceAll(""String_Node_Str"",""String_Node_Str"");
    IC2NuclearControl.instance.remoteThermalMonitorEnergyConsumption=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",1).getInt();
    IC2NuclearControl.instance.screenRefreshPeriod=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",20).getInt();
    IC2NuclearControl.instance.rangeTriggerRefreshPeriod=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",20).getInt();
    IC2NuclearControl.instance.SMPMaxAlarmRange=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",256).getInt();
    IC2NuclearControl.instance.recipes=configuration.getString(""String_Node_Str"",Configuration.CATEGORY_GENERAL,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    IC2NuclearControl.logger.error(""String_Node_Str"",e);
  }
 finally {
    if (configuration.hasChanged()) {
      configuration.save();
    }
  }
}","private void loadConfiguration(){
  try {
    IC2NuclearControl.instance.alarmRange=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",64).getInt();
    IC2NuclearControl.instance.maxAlarmRange=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",128).getInt();
    IC2NuclearControl.instance.allowedAlarms=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",""String_Node_Str"").getString().replaceAll(""String_Node_Str"",""String_Node_Str"");
    IC2NuclearControl.instance.remoteThermalMonitorEnergyConsumption=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",1).getInt();
    IC2NuclearControl.instance.screenRefreshPeriod=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",20).getInt();
    IC2NuclearControl.instance.rangeTriggerRefreshPeriod=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",20).getInt();
    IC2NuclearControl.instance.SMPMaxAlarmRange=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",256).getInt();
    IC2NuclearControl.instance.disableCapes=configuration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",false).getBoolean(false);
    IC2NuclearControl.instance.recipes=configuration.getString(""String_Node_Str"",Configuration.CATEGORY_GENERAL,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    IC2NuclearControl.logger.error(""String_Node_Str"",e);
  }
 finally {
    if (configuration.hasChanged()) {
      configuration.save();
    }
  }
}",0.919902063658622
134659,"@EventHandler public void postInit(FMLPostInitializationEvent event){
  proxy.cape();
  CrossModLoader.postinit();
  crossBC=new CrossBuildcraft();
  crossRailcraft=new CrossRailcraft();
  crossRF=new CrossRF();
  crossIc2=IC2Cross.getIC2Cross();
  if (crossIc2.getType() == IC2Type.SPEIGER) {
    if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      RecipesNew.addRecipes();
    }
 else     if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      GregtechRecipes.addRecipes();
    }
 else {
      RecipesOld.addOldRecipes();
    }
  }
 else   if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
    RecipesOld.addOldRecipes();
  }
 else   if (recipes.equalsIgnoreCase(""String_Node_Str"") || recipes.equalsIgnoreCase(""String_Node_Str"")) {
    GregtechRecipes.addRecipes();
    logger.info(""String_Node_Str"");
  }
 else {
    RecipesNew.addRecipes();
  }
}","@EventHandler public void postInit(FMLPostInitializationEvent event){
  if (!disableCapes) {
    proxy.cape();
  }
  CrossModLoader.postinit();
  crossBC=new CrossBuildcraft();
  crossRailcraft=new CrossRailcraft();
  crossRF=new CrossRF();
  crossIc2=IC2Cross.getIC2Cross();
  if (crossIc2.getType() == IC2Type.SPEIGER) {
    if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      RecipesNew.addRecipes();
    }
 else     if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      GregtechRecipes.addRecipes();
    }
 else {
      RecipesOld.addOldRecipes();
    }
  }
 else   if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
    RecipesOld.addOldRecipes();
  }
 else   if (recipes.equalsIgnoreCase(""String_Node_Str"") || recipes.equalsIgnoreCase(""String_Node_Str"")) {
    GregtechRecipes.addRecipes();
    logger.info(""String_Node_Str"");
  }
 else {
    RecipesNew.addRecipes();
  }
}",0.9847127042699
134660,"@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double PerOut=card.getDouble(""String_Node_Str"");
  double energyStored=card.getDouble(""String_Node_Str"");
  double outputlvl=card.getDouble(""String_Node_Str"");
  double coreTemp=card.getDouble(""String_Node_Str"");
  int ioutputlvl=(int)outputlvl;
  int ienergyStored=(int)energyStored;
  if ((displaySettings & DISPLAY_TEMP) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",coreTemp,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_ENERGY) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",ienergyStored,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_OUTPUT) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",ioutputlvl,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_PERCENTAGE) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",PerOut,showLabels);
    result.add(line);
  }
  int txtColor=0;
  String text;
  if ((displaySettings & DISPLAY_ON) > 0) {
    boolean reactorPowered=card.getBoolean(""String_Node_Str"");
    if (reactorPowered) {
      txtColor=0x00ff00;
      text=LangHelper.translate(""String_Node_Str"");
    }
 else {
      txtColor=0xff0000;
      text=LangHelper.translate(""String_Node_Str"");
    }
    if (result.size() > 0) {
      PanelString firstLine=result.get(0);
      firstLine.textRight=text;
      firstLine.colorRight=txtColor;
    }
 else {
      line=new PanelString();
      line.textLeft=text;
      line.colorLeft=txtColor;
      result.add(line);
    }
  }
  return result;
}","@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double PerOut=card.getDouble(""String_Node_Str"");
  double energyStored=card.getDouble(""String_Node_Str"");
  double outputlvl=card.getDouble(""String_Node_Str"");
  double coreTemp=card.getDouble(""String_Node_Str"");
  int ioutputlvl=(int)outputlvl;
  int ienergyStored=(int)energyStored;
  boolean passive=card.getBoolean(""String_Node_Str"");
  if (passive) {
    if ((displaySettings & DISPLAY_TEMP) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",coreTemp,showLabels);
      result.add(line);
    }
    if ((displaySettings & DISPLAY_ENERGY) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",ienergyStored,showLabels);
      result.add(line);
    }
    if ((displaySettings & DISPLAY_OUTPUT) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",ioutputlvl,showLabels);
      result.add(line);
    }
    if ((displaySettings & DISPLAY_PERCENTAGE) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",PerOut,showLabels);
      result.add(line);
    }
    int txtColor=0;
    String text;
    if ((displaySettings & DISPLAY_ON) > 0) {
      boolean reactorPowered=card.getBoolean(""String_Node_Str"");
      if (reactorPowered) {
        txtColor=0x00ff00;
        text=LangHelper.translate(""String_Node_Str"");
      }
 else {
        txtColor=0xff0000;
        text=LangHelper.translate(""String_Node_Str"");
      }
      if (result.size() > 0) {
        PanelString firstLine=result.get(0);
        firstLine.textRight=text;
        firstLine.colorRight=txtColor;
      }
 else {
        line=new PanelString();
        line.textLeft=text;
        line.colorLeft=txtColor;
        result.add(line);
      }
    }
  }
 else {
    if ((displaySettings & DISPLAY_TEMP) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",coreTemp,showLabels);
      result.add(line);
    }
    if ((displaySettings & DISPLAY_OUTPUT) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",ioutputlvl,showLabels);
      result.add(line);
    }
    if ((displaySettings & DISPLAY_ENERGY) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",card.getString(""String_Node_Str""),card.getInt(""String_Node_Str""));
      result.add(line);
    }
    if ((displaySettings & DISPLAY_PERCENTAGE) > 0) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",card.getString(""String_Node_Str""),card.getInt(""String_Node_Str""));
      result.add(line);
    }
    int txtColor=0;
    String text;
    if ((displaySettings & DISPLAY_ON) > 0) {
      boolean reactorPowered=card.getBoolean(""String_Node_Str"");
      if (reactorPowered) {
        txtColor=0x00ff00;
        text=LangHelper.translate(""String_Node_Str"");
      }
 else {
        txtColor=0xff0000;
        text=LangHelper.translate(""String_Node_Str"");
      }
      if (result.size() > 0) {
        PanelString firstLine=result.get(0);
        firstLine.textRight=text;
        firstLine.colorRight=txtColor;
      }
 else {
        line=new PanelString();
        line.textLeft=text;
        line.colorLeft=txtColor;
        result.add(line);
      }
    }
  }
  return result;
}",0.6455065510241742
134661,"@Override public CardState update(World world,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  TileEntity check=world.getTileEntity(target.posX,target.posY,target.posZ);
  if (check instanceof TileEntityBlockFetcher) {
    TileEntityBlockFetcher BF=(TileEntityBlockFetcher)check;
    card.setBoolean(""String_Node_Str"",BF.isReactorOnline());
    card.setDouble(""String_Node_Str"",(double)BF.getEnergyStored());
    card.setDouble(""String_Node_Str"",(double)BF.getEnergyGenerated());
    card.setInt(""String_Node_Str"",BF.getTemp());
    card.setDouble(""String_Node_Str"",(double)BF.getEnergyOutPercent());
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}","@Override public CardState update(World world,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  TileEntity check=world.getTileEntity(target.posX,target.posY,target.posZ);
  if (check instanceof TileEntityBlockFetcher) {
    TileEntityBlockFetcher BF=(TileEntityBlockFetcher)check;
    card.setBoolean(""String_Node_Str"",BF.isReactorOnline());
    card.setDouble(""String_Node_Str"",(double)BF.getEnergyStored());
    card.setDouble(""String_Node_Str"",(double)BF.getEnergyGenerated());
    card.setInt(""String_Node_Str"",BF.getTemp());
    card.setDouble(""String_Node_Str"",(double)BF.getEnergyOutPercent());
    card.setBoolean(""String_Node_Str"",BF.getReactorController().isPassivelyCooled());
    if (!BF.getReactorController().isPassivelyCooled()) {
      if (BF.getReactorController().getCoolantContainer().getVaporType() != null) {
        card.setString(""String_Node_Str"",BF.getReactorController().getCoolantContainer().getVaporType().getLocalizedName());
        card.setInt(""String_Node_Str"",BF.getReactorController().getCoolantContainer().getVaporAmount());
      }
 else {
        card.setString(""String_Node_Str"",""String_Node_Str"");
        card.setInt(""String_Node_Str"",0);
      }
      if (BF.getReactorController().getCoolantContainer().getCoolantType() != null) {
        card.setString(""String_Node_Str"",new FluidStack(BF.getReactorController().getCoolantContainer().getCoolantType(),1).getLocalizedName());
        card.setInt(""String_Node_Str"",BF.getReactorController().getCoolantContainer().getCoolantAmount());
      }
 else {
        card.setString(""String_Node_Str"",""String_Node_Str"");
        card.setInt(""String_Node_Str"",0);
      }
    }
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}",0.5707317073170731
134662,"@Override public void cape(){
  DevCapes.getInstance().registerConfig(""String_Node_Str"");
}","@Override public void cape(){
  try {
    DevCapes.getInstance().registerConfig(new URL(""String_Node_Str""));
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
}",0.6715867158671587
134663,"@Override protected void actionPerformed(GuiButton par1GuiButton){
  if (textArea != null && wrapper != null) {
    String[] lines=textArea.getText();
    if (lines != null) {
      for (int i=0; i < lines.length; i++) {
        wrapper.setString(""String_Node_Str"" + i,lines[i]);
      }
    }
  }
  wrapper.commit();
  wrapper.closeGui();
}","@Override protected void actionPerformed(GuiButton par1GuiButton){
  if (textArea != null && wrapper != null) {
    String[] lines=textArea.getText();
    if (lines != null)     for (int i=0; i < lines.length; i++)     wrapper.setString(""String_Node_Str"" + i,lines[i]);
  }
  wrapper.commit();
  wrapper.closeGui();
}",0.9635258358662614
134664,"@SuppressWarnings(""String_Node_Str"") private void initControls(){
  buttonList.clear();
  buttonList.add(new GuiButton(1,guiLeft + xSize - 60 - 8,guiTop + 120,60,20,""String_Node_Str""));
  textArea=new GuiTextArea(fontRendererObj,guiLeft + 8,guiTop + 5,xSize - 16,ySize - 35,lineCount);
  textArea.setFocused(true);
  String[] data=textArea.getText();
  for (int i=0; i < lineCount; i++) {
    data[i]=helper.getString(""String_Node_Str"" + i);
  }
}","@SuppressWarnings(""String_Node_Str"") private void initControls(){
  buttonList.clear();
  buttonList.add(new GuiButton(1,guiLeft + xSize - 60 - 8,guiTop + 120,60,20,""String_Node_Str""));
  textArea=new GuiTextArea(fontRendererObj,guiLeft + 8,guiTop + 5,xSize - 16,ySize - 35,lineCount);
  textArea.setFocused(true);
  String[] data=textArea.getText();
  for (int i=0; i < lineCount; i++)   data[i]=helper.getString(""String_Node_Str"" + i);
}",0.9909706546275396
134665,"@Override protected void keyTyped(char par1,int par2){
  if (par2 == 1 || (par2 == this.mc.gameSettings.keyBindInventory.getKeyCode() && (textArea == null || !textArea.isFocused()))) {
    actionPerformed(null);
  }
 else   if (textArea != null && textArea.isFocused()) {
    textArea.textAreaKeyTyped(par1,par2);
  }
 else {
    super.keyTyped(par1,par2);
  }
}","@Override protected void keyTyped(char par1,int par2){
  if (par2 == 1 || (par2 == this.mc.gameSettings.keyBindInventory.getKeyCode() && (textArea == null || !textArea.isFocused())))   actionPerformed(null);
 else   if (textArea != null && textArea.isFocused())   textArea.textAreaKeyTyped(par1,par2);
 else   super.keyTyped(par1,par2);
}",0.9542857142857144
134666,"@SuppressWarnings(""String_Node_Str"") @Override public void initGui(){
  super.initGui();
  guiLeft=(this.width - xSize) / 2;
  guiTop=(this.height - ySize) / 2;
  buttonList.clear();
  slider=new GuiHowlerAlarmSlider(3,guiLeft + 12,guiTop + 33,StatCollector.translateToLocal(""String_Node_Str""),alarm);
  List<String> items;
  if (alarm.getWorldObj().isRemote) {
    items=new ArrayList<String>(IC2NuclearControl.instance.availableAlarms);
    items.retainAll(IC2NuclearControl.instance.serverAllowedAlarms);
  }
 else {
    items=IC2NuclearControl.instance.availableAlarms;
  }
  listBox=new GuiHowlerAlarmListBox(4,guiLeft + 13,guiTop + 63,105,65,items,alarm);
  buttonList.add(slider);
  buttonList.add(listBox);
}","@SuppressWarnings(""String_Node_Str"") @Override public void initGui(){
  super.initGui();
  guiLeft=(this.width - xSize) / 2;
  guiTop=(this.height - ySize) / 2;
  buttonList.clear();
  slider=new GuiHowlerAlarmSlider(3,guiLeft + 12,guiTop + 33,StatCollector.translateToLocal(""String_Node_Str""),alarm);
  List<String> items;
  if (alarm.getWorldObj().isRemote) {
    items=new ArrayList<String>(IC2NuclearControl.instance.availableAlarms);
    items.retainAll(IC2NuclearControl.instance.serverAllowedAlarms);
  }
 else   items=IC2NuclearControl.instance.availableAlarms;
  listBox=new GuiHowlerAlarmListBox(4,guiLeft + 13,guiTop + 63,105,65,items,alarm);
  buttonList.add(slider);
  buttonList.add(listBox);
}",0.99438202247191
134667,"@Override protected void keyTyped(char par1,int par2){
  if (par2 == 1) {
    mc.thePlayer.closeScreen();
  }
 else   if (par1 == 13) {
    updateHeat(0);
  }
 else   if (textboxHeat != null && textboxHeat.isFocused() && (Character.isDigit(par1) || par1 == 0 || par1 == 8)) {
    textboxHeat.textboxKeyTyped(par1,par2);
  }
}","@Override protected void keyTyped(char par1,int par2){
  if (par2 == 1)   mc.thePlayer.closeScreen();
 else   if (par1 == 13)   updateHeat(0);
 else   if (textboxHeat != null && textboxHeat.isFocused() && (Character.isDigit(par1) || par1 == 0 || par1 == 8))   textboxHeat.textboxKeyTyped(par1,par2);
}",0.9616613418530352
134668,"private void updateHeat(int delta){
  if (textboxHeat != null) {
    int heat=0;
    try {
      String value=textboxHeat.getText();
      if (!""String_Node_Str"".equals(value))       heat=Integer.parseInt(value);
    }
 catch (    NumberFormatException e) {
    }
    heat+=delta;
    if (heat < 0)     heat=0;
    if (heat >= 1000000)     heat=1000000;
    if (thermo.getHeatLevel().intValue() != heat) {
      thermo.setHeatLevel(heat);
      ((NetworkManager)IC2.network.get()).initiateClientTileEntityEvent(thermo,heat);
    }
    textboxHeat.setText(new Integer(heat).toString());
  }
}","private void updateHeat(int delta){
  if (textboxHeat != null) {
    int heat=0;
    try {
      String value=textboxHeat.getText();
      if (!""String_Node_Str"".equals(value))       heat=Integer.parseInt(value);
    }
 catch (    NumberFormatException e) {
    }
    heat+=delta;
    if (heat < 0)     heat=0;
    if (heat >= 1000000)     heat=1000000;
    if (thermo.getHeatLevel().intValue() != heat) {
      ((NetworkManager)IC2.network.get()).initiateClientTileEntityEvent(thermo,heat);
    }
    textboxHeat.setText(new Integer(heat).toString());
  }
}",0.9712793733681462
134669,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float f1,float f2,float f3){
  int blockType=world.getBlockMetadata(x,y,z);
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityHowlerAlarm) {
    if (player.getCurrentEquippedItem() != null && DyeUtil.isADye(player.getCurrentEquippedItem())) {
      ((TileEntityHowlerAlarm)tileEntity).setColor(ItemDye.field_150922_c[DyeUtil.getDyeId(player.getCurrentEquippedItem())]);
      world.markBlockForUpdate(x,y,z);
      if (!player.capabilities.isCreativeMode) {
        if (player.inventory.getCurrentItem().stackSize == 1) {
          player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
        }
 else {
          player.inventory.getCurrentItem().stackSize--;
        }
      }
      return true;
    }
  }
  if (WrenchHelper.isWrenchClicked(tileEntity,player,side)) {
    return true;
  }
  if (player != null && player.isSneaking()) {
    return false;
  }
  if (subblocks.containsKey(blockType) && subblocks.get(blockType).hasGui()) {
    if (player instanceof EntityPlayerMP)     player.openGui(IC2NuclearControl.instance,blockType,world,x,y,z);
    return true;
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float f1,float f2,float f3){
  int blockType=world.getBlockMetadata(x,y,z);
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityHowlerAlarm) {
    if (player.getCurrentEquippedItem() != null && DyeUtil.isADye(player.getCurrentEquippedItem())) {
      ((TileEntityHowlerAlarm)tileEntity).setColor(ItemDye.field_150922_c[DyeUtil.getDyeId(player.getCurrentEquippedItem())]);
      world.markBlockForUpdate(x,y,z);
      if (!player.capabilities.isCreativeMode) {
        if (player.inventory.getCurrentItem().stackSize == 1) {
          player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
        }
 else {
          player.inventory.getCurrentItem().stackSize--;
        }
      }
      return true;
    }
 else     if (player.getCurrentEquippedItem() != null && Loader.isModLoaded(""String_Node_Str"")) {
      if (player.getCurrentEquippedItem().getItem() instanceof ItemToolPainter) {
        ItemToolPainter p=(ItemToolPainter)player.getCurrentEquippedItem().getItem();
        ((TileEntityHowlerAlarm)tileEntity).setColor(ItemDye.field_150922_c[p.color]);
        world.markBlockForUpdate(x,y,z);
        p.setDamage(player.getCurrentEquippedItem(),player.getCurrentEquippedItem().getItemDamage() - 1);
        return true;
      }
    }
  }
  if (WrenchHelper.isWrenchClicked(tileEntity,player,side)) {
    return true;
  }
  if (player != null && player.isSneaking()) {
    return false;
  }
  if (subblocks.containsKey(blockType) && subblocks.get(blockType).hasGui()) {
    if (player instanceof EntityPlayerMP)     player.openGui(IC2NuclearControl.instance,blockType,world,x,y,z);
    return true;
  }
  return false;
}",0.8241866579033849
134670,"private Dye(String name,int id){
  this.name=name;
  this.id=id;
}","private Dye(String name,int id){
  this.name=name;
  this.id=id;
  DYES=setDyes();
}",0.88
134671,"public static boolean isADye(ItemStack itemstack){
  itemstack.stackSize=0;
  return Arrays.asList(ALL_DYES).contains(itemstack);
}","public static boolean isADye(ItemStack itemstack){
  Item toFind=itemstack.getItem();
  for (int s=0; s < ALL_DYES_DYE.length; s++) {
    for (int z=0; z < ALL_DYES_DYE[s].setDyes().length; z++) {
      if (ALL_DYES_DYE[s].setDyes()[z].getItem().equals(toFind)) {
        return true;
      }
    }
  }
  return false;
}",0.3503325942350332
134672,"public static void addRecipes(){
  ItemStack thermalMonitor=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_THERMAL_MONITOR);
  Recipes.advRecipes.addRecipe(thermalMonitor,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'R',""String_Node_Str"",'C',""String_Node_Str""});
  ItemStack lampWhite=new ItemStack(IC2NuclearControl.blockNuclearControlLight,1,LightDamages.DAMAGE_WHITE_OFF);
  Recipes.advRecipes.addRecipe(lampWhite,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'L',Blocks.redstone_lamp});
  ItemStack lampOrange=new ItemStack(IC2NuclearControl.blockNuclearControlLight,1,LightDamages.DAMAGE_ORANGE_OFF);
  Recipes.advRecipes.addRecipe(lampOrange,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'L',Blocks.redstone_lamp});
  ItemStack howler=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_HOWLER_ALARM);
  Recipes.advRecipes.addRecipe(howler,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'N',Blocks.noteblock,'C',""String_Node_Str""});
  ItemStack industrialAlarm=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INDUSTRIAL_ALARM);
  Recipes.advRecipes.addRecipe(industrialAlarm,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'L',lampOrange,'H',howler});
  ItemStack remoteThermo=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_REMOTE_THERMO);
  Recipes.advRecipes.addRecipe(remoteThermo,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'T',thermalMonitor,'M',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str""});
  ItemStack infoPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL);
  Recipes.advRecipes.addRecipe(infoPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'I',""String_Node_Str"",'R',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str"")});
  ItemStack infoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL_EXTENDER);
  Recipes.advRecipes.addRecipe(infoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'R',""String_Node_Str"",'W',""String_Node_Str""});
  ItemStack infoPanelAdvanced=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_PANEL);
  Recipes.advRecipes.addRecipe(infoPanelAdvanced,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'I',infoPanel,'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),'A',""String_Node_Str"",'C',IC2Items.getItem(""String_Node_Str"")});
  ItemStack infoPanelExtenderAdvanced=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_EXTENDER);
  Recipes.advRecipes.addRecipe(infoPanelExtenderAdvanced,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'E',infoPanelExtender,'C',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemToolThermometer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'W',IC2Items.getItem(""String_Node_Str"")});
  ItemStack digitalThermometer=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer);
  Recipes.advRecipes.addRecipe(digitalThermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'T',IC2NuclearControl.itemToolThermometer,'I',""String_Node_Str"",'P',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemRemoteSensorKit),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'D',StackUtil.copyWithWildCard(digitalThermometer),'F',IC2Items.getItem(""String_Node_Str""),'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemEnergySensorKit),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'R',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'O',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),new Object[]{""String_Node_Str"",""String_Node_Str"",'I',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'C',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'Y',""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str"",'A',""String_Node_Str"",'B',""String_Node_Str""});
  ItemStack energyCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ENERGY_COUNTER);
  Recipes.advRecipes.addRecipe(energyCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'T',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str""});
  ItemStack averageCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_AVERAGE_COUNTER);
  Recipes.advRecipes.addRecipe(averageCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'T',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  ItemStack rangeTrigger=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_RANGE_TRIGGER);
  Recipes.advRecipes.addRecipe(rangeTrigger,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'A',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_COUNTER),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_LIQUID),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',Items.bucket,'F',IC2Items.getItem(""String_Node_Str""),'B',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTextCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTimeCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Items.clock,'P',Items.paper,'W',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_GENERATOR),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemSensorLocationCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.item55ReactorCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemEnergySensorLocationCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemTextCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemTimeCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemMultipleSensorLocationCard);
  CraftingManager.getInstance().getRecipeList().add(new StorageArrayRecipe());
}","public static void addRecipes(){
  ItemStack thermalMonitor=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_THERMAL_MONITOR);
  Recipes.advRecipes.addRecipe(thermalMonitor,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'R',""String_Node_Str"",'C',""String_Node_Str""});
  ItemStack lampWhite=new ItemStack(IC2NuclearControl.blockNuclearControlLight,1,LightDamages.DAMAGE_WHITE_OFF);
  Recipes.advRecipes.addRecipe(lampWhite,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'L',Blocks.redstone_lamp});
  ItemStack lampOrange=new ItemStack(IC2NuclearControl.blockNuclearControlLight,1,LightDamages.DAMAGE_ORANGE_OFF);
  Recipes.advRecipes.addRecipe(lampOrange,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'L',Blocks.redstone_lamp});
  ItemStack howler=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_HOWLER_ALARM);
  Recipes.advRecipes.addRecipe(howler,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'N',Blocks.noteblock,'C',""String_Node_Str""});
  ItemStack industrialAlarm=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INDUSTRIAL_ALARM);
  Recipes.advRecipes.addRecipe(industrialAlarm,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'L',lampOrange,'H',howler});
  ItemStack remoteThermo=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_REMOTE_THERMO);
  Recipes.advRecipes.addRecipe(remoteThermo,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'T',thermalMonitor,'M',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str""});
  ItemStack infoPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL);
  Recipes.advRecipes.addRecipe(infoPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'I',""String_Node_Str"",'R',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str"")});
  ItemStack infoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL_EXTENDER);
  Recipes.advRecipes.addRecipe(infoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'R',""String_Node_Str"",'W',""String_Node_Str""});
  ItemStack infoPanelAdvanced=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_PANEL);
  Recipes.advRecipes.addRecipe(infoPanelAdvanced,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'I',infoPanel,'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),'A',""String_Node_Str"",'C',IC2Items.getItem(""String_Node_Str"")});
  ItemStack infoPanelExtenderAdvanced=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_EXTENDER);
  Recipes.advRecipes.addRecipe(infoPanelExtenderAdvanced,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'E',infoPanelExtender,'C',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemToolThermometer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'I',""String_Node_Str"",'W',IC2Items.getItem(""String_Node_Str"")});
  ItemStack digitalThermometer=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer);
  Recipes.advRecipes.addRecipe(digitalThermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'T',IC2NuclearControl.itemToolThermometer,'I',""String_Node_Str"",'P',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemRemoteSensorKit),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'D',StackUtil.copyWithWildCard(digitalThermometer),'F',IC2Items.getItem(""String_Node_Str""),'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemEnergySensorKit),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'R',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'O',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),new Object[]{""String_Node_Str"",""String_Node_Str"",'I',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'C',new ItemStack(IC2Items.getItem(""String_Node_Str"").getItem(),1,1)});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'Y',""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str"",'A',""String_Node_Str"",'B',""String_Node_Str""});
  ItemStack energyCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ENERGY_COUNTER);
  Recipes.advRecipes.addRecipe(energyCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'T',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str""});
  ItemStack averageCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_AVERAGE_COUNTER);
  Recipes.advRecipes.addRecipe(averageCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'T',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  ItemStack rangeTrigger=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_RANGE_TRIGGER);
  Recipes.advRecipes.addRecipe(rangeTrigger,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'A',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_COUNTER),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_LIQUID),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',Items.bucket,'F',IC2Items.getItem(""String_Node_Str""),'B',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTextCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTimeCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Items.clock,'P',Items.paper,'W',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_GENERATOR),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemSensorLocationCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.item55ReactorCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemEnergySensorLocationCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemTextCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemTimeCard);
  Recipes.advRecipes.addShapelessRecipe(IC2Items.getItem(""String_Node_Str""),IC2NuclearControl.itemMultipleSensorLocationCard);
  CraftingManager.getInstance().getRecipeList().add(new StorageArrayRecipe());
}",0.9982558489204306
134673,"@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GuiRemoteMonitor.REMOTEMONITOR_GUI) {
    return new GuiRemoteMonitor(player.inventory,player.getCurrentEquippedItem(),new InventoryItem(player.getHeldItem()),player,new TileEntityInfoPanel());
  }
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  Subblock block=IC2NuclearControl.blockNuclearControlMain.getSubblock(ID);
  if (block == null)   return null;
  return block.getClientGuiElement(tileEntity,player);
}","@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GuiRemoteMonitor.REMOTEMONITOR_GUI) {
    return new GuiRemoteMonitor(player.inventory,player.getCurrentEquippedItem(),new InventoryItem(player.getHeldItem()),player,new TileEntityInfoPanel(),world);
  }
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  Subblock block=IC2NuclearControl.blockNuclearControlMain.getSubblock(ID);
  if (block == null)   return null;
  return block.getClientGuiElement(tileEntity,player);
}",0.9944029850746268
134674,"@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GuiRemoteMonitor.REMOTEMONITOR_GUI) {
    return new ContainerRemoteMonitor(player.inventory,player.getHeldItem(),new InventoryItem(player.getHeldItem()),new TileEntityInfoPanel());
  }
  Subblock block=IC2NuclearControl.blockNuclearControlMain.getSubblock(ID);
  if (block == null)   return null;
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  return block.getServerGuiElement(tileEntity,player);
}","@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GuiRemoteMonitor.REMOTEMONITOR_GUI) {
    return new ContainerRemoteMonitor(player.inventory,player.getHeldItem(),new InventoryItem(player.getHeldItem()),new TileEntityInfoPanel(),world);
  }
  Subblock block=IC2NuclearControl.blockNuclearControlMain.getSubblock(ID);
  if (block == null)   return null;
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  return block.getServerGuiElement(tileEntity,player);
}",0.9942748091603052
134675,"public ContainerRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem iItem,TileEntityInfoPanel tile){
  this.is=stack;
  this.item=iItem;
  this.panel=tile;
  this.panel.setWorldObj(MinecraftServer.getServer().getEntityWorld());
  this.addSlotToContainer(new SlotFilter(this.item,0,177,21));
  bindPlayerInventory(inv);
}","public ContainerRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem iItem,TileEntityInfoPanel tile,World world){
  this.is=stack;
  this.item=iItem;
  this.panel=tile;
  if (IC2NuclearControl.isServer) {
    this.panel.setWorldObj(world);
  }
 else {
    this.panel.setWorldObj(MinecraftServer.getServer().getEntityWorld());
  }
  this.addSlotToContainer(new SlotFilter(this.item,0,177,21));
  bindPlayerInventory(inv);
}",0.8679738562091504
134676,"public GuiRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem inventoryItem,EntityPlayer player,TileEntityInfoPanel panel){
  super(new ContainerRemoteMonitor(inv,stack,inventoryItem,panel));
  this.inv=inventoryItem;
  this.e=player;
  this.panel=panel;
}","public GuiRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem inventoryItem,EntityPlayer player,TileEntityInfoPanel panel,World world){
  super(new ContainerRemoteMonitor(inv,stack,inventoryItem,panel,world));
  this.inv=inventoryItem;
  this.e=player;
  this.panel=panel;
}",0.967509025270758
134677,"@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  List<PanelString> joinedData=new LinkedList<PanelString>();
  boolean anyCardFound=false;
  if (inv.getStackInSlot(0) != null) {
    inv.markDirty();
    panel.updateEntity();
    ItemStack card=inv.getStackInSlot(0);
    ChannelHandler.network.sendToServer(new PacketServerUpdate(card));
    this.processCard(card,10,0,panel);
    if (card == null || !(card.getItem() instanceof IPanelDataSource)) {
      drawCardStuff(anyCardFound,joinedData);
    }
    int displaySettings=panel.getDisplaySettingsByCard(card);
    if (displaySettings == 0) {
      drawCardStuff(anyCardFound,joinedData);
    }
    CardWrapperImpl helper=new CardWrapperImpl(card,-1);
    CardState state=helper.getState();
    List<PanelString> data;
    if (state != CardState.OK && state != CardState.CUSTOM_ERROR) {
      data=StringUtils.getStateMessage(state);
    }
 else {
      data=panel.getCardData(displaySettings,card,helper);
    }
    if (data == null) {
      drawCardStuff(anyCardFound,joinedData);
    }
    joinedData.addAll(data);
    anyCardFound=true;
    drawCardStuff(anyCardFound,joinedData);
  }
 else {
    inv.markDirty();
    anyCardFound=false;
  }
}","@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  List<PanelString> joinedData=new LinkedList<PanelString>();
  boolean anyCardFound=false;
  if (inv.getStackInSlot(0) != null) {
    inv.markDirty();
    ContainerRemoteMonitor.updateTile();
    ItemStack card=inv.getStackInSlot(0);
    ChannelHandler.network.sendToServer(new PacketServerUpdate(card));
    this.processCard(card,10,0,panel);
    if (card == null || !(card.getItem() instanceof IPanelDataSource)) {
      drawCardStuff(anyCardFound,joinedData);
    }
    int displaySettings=panel.getDisplaySettingsByCard(card);
    if (displaySettings == 0) {
      drawCardStuff(anyCardFound,joinedData);
    }
    CardWrapperImpl helper=new CardWrapperImpl(card,-1);
    CardState state=helper.getState();
    List<PanelString> data;
    if (state != CardState.OK && state != CardState.CUSTOM_ERROR) {
      data=StringUtils.getStateMessage(state);
    }
 else {
      data=panel.getCardData(displaySettings,card,helper);
    }
    if (data == null) {
      drawCardStuff(anyCardFound,joinedData);
    }
    joinedData.addAll(data);
    anyCardFound=true;
    drawCardStuff(anyCardFound,joinedData);
  }
 else {
    inv.markDirty();
    anyCardFound=false;
  }
}",0.9793939393939394
134678,"public static void init(){
  network.registerMessage(PacketAlarm.class,PacketAlarm.class,1,Side.CLIENT);
  network.registerMessage(PacketSensor.class,PacketSensor.class,2,Side.CLIENT);
  network.registerMessage(PacketSensorTitle.class,PacketSensorTitle.class,3,Side.CLIENT);
  network.registerMessage(PacketChat.class,PacketChat.class,4,Side.CLIENT);
  network.registerMessage(PacketEncounter.class,PacketEncounter.class,5,Side.CLIENT);
  network.registerMessage(PacketAcounter.class,PacketAcounter.class,6,Side.CLIENT);
  network.registerMessage(PacketClientSound.class,PacketClientSound.class,7,Side.SERVER);
  network.registerMessage(PacketClientRequest.class,PacketClientRequest.class,8,Side.SERVER);
  network.registerMessage(PacketClientRangeTrigger.class,PacketClientRangeTrigger.class,11,Side.SERVER);
  network.registerMessage(PacketClientSensor.class,PacketClientSensor.class,12,Side.SERVER);
  network.registerMessage(PacketClientColor.class,PacketClientColor.class,13,Side.SERVER);
  network.registerMessage(PacketClientDisplaySettings.class,PacketClientDisplaySettings.class,14,Side.SERVER);
  network.registerMessage(PacketDispSettingsAll.class,PacketDispSettingsAll.class,9,Side.CLIENT);
  network.registerMessage(PacketDispSettingsUpdate.class,PacketDispSettingsUpdate.class,10,Side.CLIENT);
  network.registerMessage(PacketServerUpdate.Handler.class,PacketServerUpdate.class,11,Side.SERVER);
  network.registerMessage(PacketClientRemoteMonitor.Handler.class,PacketClientRemoteMonitor.class,12,Side.CLIENT);
}","public static void init(){
  network.registerMessage(PacketAlarm.class,PacketAlarm.class,1,Side.CLIENT);
  network.registerMessage(PacketSensor.class,PacketSensor.class,2,Side.CLIENT);
  network.registerMessage(PacketSensorTitle.class,PacketSensorTitle.class,3,Side.CLIENT);
  network.registerMessage(PacketChat.class,PacketChat.class,4,Side.CLIENT);
  network.registerMessage(PacketEncounter.class,PacketEncounter.class,5,Side.CLIENT);
  network.registerMessage(PacketAcounter.class,PacketAcounter.class,6,Side.CLIENT);
  network.registerMessage(PacketClientSound.class,PacketClientSound.class,7,Side.SERVER);
  network.registerMessage(PacketClientRequest.class,PacketClientRequest.class,8,Side.SERVER);
  network.registerMessage(PacketDispSettingsAll.class,PacketDispSettingsAll.class,9,Side.CLIENT);
  network.registerMessage(PacketDispSettingsUpdate.class,PacketDispSettingsUpdate.class,10,Side.CLIENT);
  network.registerMessage(PacketClientRangeTrigger.class,PacketClientRangeTrigger.class,11,Side.SERVER);
  network.registerMessage(PacketClientSensor.class,PacketClientSensor.class,12,Side.SERVER);
  network.registerMessage(PacketClientColor.class,PacketClientColor.class,13,Side.SERVER);
  network.registerMessage(PacketClientDisplaySettings.class,PacketClientDisplaySettings.class,14,Side.SERVER);
  network.registerMessage(PacketServerUpdate.Handler.class,PacketServerUpdate.class,15,Side.SERVER);
  network.registerMessage(PacketClientRemoteMonitor.Handler.class,PacketClientRemoteMonitor.class,16,Side.CLIENT);
}",0.7573770491803279
134679,"@Override public IMessage onMessage(PacketClientRemoteMonitor message,MessageContext ctx){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player.getHeldItem().getItem() == IC2NuclearControl.itemRemoteMonitor) {
    InventoryItem itemInv=new InventoryItem(player.getHeldItem());
    if (itemInv.getStackInSlot(0) == null || !(itemInv.getStackInSlot(0).getItem() instanceof IPanelDataSource)) {
      return null;
    }
    CardWrapperImpl helper=new CardWrapperImpl(itemInv.getStackInSlot(0),0);
    for (    Map.Entry<String,Object> entry : message.fields.entrySet()) {
      String name=entry.getKey();
      Object value=entry.getValue();
      if (value instanceof Long) {
        helper.setLong(name,(Long)value);
      }
 else       if (value instanceof Double) {
        helper.setDouble(name,(Double)value);
      }
 else       if (value instanceof Integer) {
        helper.setInt(name,(Integer)value);
      }
 else       if (value instanceof String) {
        helper.setString(name,(String)value);
      }
 else       if (value instanceof Boolean) {
        helper.setBoolean(name,(Boolean)value);
      }
 else       if (value instanceof NBTTagCompound) {
        helper.setTag(name,(NBTTagCompound)value);
      }
 else       if (value == null) {
        helper.clearField(name);
      }
    }
  }
  return null;
}","@Override @SideOnly(Side.CLIENT) public IMessage onMessage(PacketClientRemoteMonitor message,MessageContext ctx){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player.getHeldItem().getItem() == IC2NuclearControl.itemRemoteMonitor) {
    InventoryItem itemInv=new InventoryItem(player.getHeldItem());
    if (itemInv.getStackInSlot(0) == null || !(itemInv.getStackInSlot(0).getItem() instanceof IPanelDataSource)) {
      return null;
    }
    CardWrapperImpl helper=new CardWrapperImpl(itemInv.getStackInSlot(0),0);
    for (    Map.Entry<String,Object> entry : message.fields.entrySet()) {
      String name=entry.getKey();
      Object value=entry.getValue();
      if (value instanceof Long) {
        helper.setLong(name,(Long)value);
      }
 else       if (value instanceof Double) {
        helper.setDouble(name,(Double)value);
      }
 else       if (value instanceof Integer) {
        helper.setInt(name,(Integer)value);
      }
 else       if (value instanceof String) {
        helper.setString(name,(String)value);
      }
 else       if (value instanceof Boolean) {
        helper.setBoolean(name,(Boolean)value);
      }
 else       if (value instanceof NBTTagCompound) {
        helper.setTag(name,(NBTTagCompound)value);
      }
 else       if (value == null) {
        helper.clearField(name);
      }
    }
  }
  return null;
}",0.9915097822074568
134680,"@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GuiRemoteMonitor.REMOTEMONITOR_GUI) {
    return new ContainerRemoteMonitor(player.inventory,player.getHeldItem(),new InventoryItem(player.getHeldItem()),new TileEntityInfoPanel());
  }
  Subblock block=IC2NuclearControl.blockNuclearControlMain.getSubblock(ID);
  if (block == null)   return null;
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  return block.getServerGuiElement(tileEntity,player);
}","@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GuiRemoteMonitor.REMOTEMONITOR_GUI) {
    return new ContainerRemoteMonitor(player.inventory,player.getHeldItem(),new InventoryItem(player.getHeldItem()),new TileEntityInfoPanel(),world);
  }
  Subblock block=IC2NuclearControl.blockNuclearControlMain.getSubblock(ID);
  if (block == null)   return null;
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  return block.getServerGuiElement(tileEntity,player);
}",0.9942748091603052
134681,"public ContainerRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem iItem,TileEntityInfoPanel tile){
  this.is=stack;
  this.item=iItem;
  this.panel=tile;
  this.panel.setWorldObj(MinecraftServer.getServer().getEntityWorld());
  this.addSlotToContainer(new SlotFilter(this.item,0,177,21));
  bindPlayerInventory(inv);
}","public ContainerRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem iItem,TileEntityInfoPanel tile,World world){
  this.is=stack;
  this.item=iItem;
  this.panel=tile;
  if (world.isRemote) {
    if (MinecraftServer.getServer() != null && MinecraftServer.getServer().worldServers != null) {
      this.panel.setWorldObj(MinecraftServer.getServer().getEntityWorld());
    }
 else {
      NCLog.error(FMLClientHandler.instance().getServer().worldServers.length);
    }
  }
 else {
    this.panel.setWorldObj(world);
  }
  this.addSlotToContainer(new SlotFilter(this.item,0,177,21));
  bindPlayerInventory(inv);
}",0.6960167714884696
134682,"private void drawCardStuff(Boolean anyCardFound,List<PanelString> joinedData){
  if (!anyCardFound) {
    NCLog.fatal(""String_Node_Str"");
    return;
  }
  int maxWidth=1;
  float displayWidth=1 - 2F / 16;
  float displayHeight=1 - 2F / 16;
  for (  PanelString panelString : joinedData) {
    String currentString=implodeArray(new String[]{panelString.textLeft,panelString.textCenter,panelString.textRight},""String_Node_Str"");
    maxWidth=Math.max(fontRendererObj.getStringWidth(currentString),maxWidth);
  }
  maxWidth+=4;
  int lineHeight=fontRendererObj.FONT_HEIGHT + 2;
  int requiredHeight=lineHeight * joinedData.size();
  float scaleX=displayWidth / maxWidth;
  float scaleY=displayHeight / requiredHeight;
  float scale=Math.min(scaleX,scaleY);
  int offsetX;
  int offsetY;
  int realHeight=(int)Math.floor(displayHeight / scale);
  int realWidth=(int)Math.floor(displayWidth / scale);
  if (scaleX < scaleY) {
    offsetX=2;
    offsetY=(realHeight - requiredHeight) / 2;
  }
 else {
    offsetX=(realWidth - maxWidth) / 2 + 2;
    offsetY=0;
  }
  int row=0;
  for (  PanelString panelString : joinedData) {
    if (panelString.textLeft != null) {
      fontRendererObj.drawString(panelString.textLeft,(offsetX - realWidth / 2) + 53,(1 + offsetY - realHeight / 2 + row * lineHeight) + 30,0x06aee4);
    }
    if (panelString.textCenter != null) {
      fontRendererObj.drawString(panelString.textCenter,-fontRendererObj.getStringWidth(panelString.textCenter) / 2,offsetY - realHeight / 2 + row * lineHeight,0x06aee4);
    }
    if (panelString.textRight != null) {
      this.fontRendererObj.drawString(panelString.textRight,(offsetX - realWidth / 2) + 120,(1 + offsetY - realHeight / 2 + row * lineHeight) + 20,0x06aee4);
    }
    row++;
  }
}","private void drawCardStuff(Boolean anyCardFound,List<PanelString> joinedData){
  if (!anyCardFound) {
    NCLog.fatal(""String_Node_Str"");
    return;
  }
  int maxWidth=40;
  float displayWidth=this.width;
  float displayHeight=this.height;
  for (  PanelString panelString : joinedData) {
    String currentString=implodeArray(new String[]{panelString.textLeft,panelString.textCenter,panelString.textRight},""String_Node_Str"");
    maxWidth=Math.max(fontRendererObj.getStringWidth(currentString),maxWidth);
  }
  maxWidth+=4;
  int lineHeight=fontRendererObj.FONT_HEIGHT + 2;
  int requiredHeight=lineHeight * joinedData.size();
  float scaleX=displayWidth / maxWidth;
  float scaleY=displayHeight / requiredHeight;
  float scale=Math.min(scaleX,scaleY);
  int offsetX;
  int offsetY;
  int realHeight=(int)Math.floor(displayHeight / scale);
  int realWidth=(int)Math.floor(displayWidth / scale);
  if (scaleX < scaleY) {
    offsetX=2;
    offsetY=(realHeight - requiredHeight) / 2;
  }
 else {
    offsetX=(realWidth - maxWidth) / 2 + 2;
    offsetY=0;
  }
  int row=0;
  for (  PanelString panelString : joinedData) {
    if (panelString.textLeft != null) {
      fontRendererObj.drawString(panelString.textLeft,(offsetX - realWidth / 2) + 53,(1 + offsetY - realHeight / 2 + row * lineHeight) + 30,0x06aee4);
    }
    if (panelString.textCenter != null) {
      fontRendererObj.drawString(panelString.textCenter,-fontRendererObj.getStringWidth(panelString.textCenter) / 2,offsetY - realHeight / 2 + row * lineHeight,0x06aee4);
    }
    if (panelString.textRight != null) {
      this.fontRendererObj.drawString(panelString.textRight,(offsetX - realWidth / 2) + 120,(1 + offsetY - realHeight / 2 + row * lineHeight) + 20,0x06aee4);
    }
    row++;
  }
}",0.9869169510807736
134683,"public GuiRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem inventoryItem,EntityPlayer player,TileEntityInfoPanel panel){
  super(new ContainerRemoteMonitor(inv,stack,inventoryItem,panel));
  this.inv=inventoryItem;
  this.e=player;
  this.panel=panel;
}","public GuiRemoteMonitor(InventoryPlayer inv,ItemStack stack,InventoryItem inventoryItem,EntityPlayer player,TileEntityInfoPanel panel){
  super(new ContainerRemoteMonitor(inv,stack,inventoryItem,panel,Minecraft.getMinecraft().theWorld));
  this.inv=inventoryItem;
  this.e=player;
  this.panel=panel;
}",0.9403508771929824
134684,"@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  List<PanelString> joinedData=new LinkedList<PanelString>();
  boolean anyCardFound=false;
  if (inv.getStackInSlot(0) != null) {
    inv.markDirty();
    panel.updateEntity();
    ItemStack card=inv.getStackInSlot(0);
    ChannelHandler.network.sendToServer(new PacketServerUpdate(card));
    this.processCard(card,10,0,panel);
    if (card == null || !(card.getItem() instanceof IPanelDataSource)) {
      drawCardStuff(anyCardFound,joinedData);
    }
    int displaySettings=panel.getDisplaySettingsByCard(card);
    if (displaySettings == 0) {
      drawCardStuff(anyCardFound,joinedData);
    }
    CardWrapperImpl helper=new CardWrapperImpl(card,-1);
    CardState state=helper.getState();
    List<PanelString> data;
    if (state != CardState.OK && state != CardState.CUSTOM_ERROR) {
      data=StringUtils.getStateMessage(state);
    }
 else {
      data=panel.getCardData(displaySettings,card,helper);
    }
    if (data == null) {
      drawCardStuff(anyCardFound,joinedData);
    }
    joinedData.addAll(data);
    anyCardFound=true;
    drawCardStuff(anyCardFound,joinedData);
  }
 else {
    inv.markDirty();
    anyCardFound=false;
  }
}","@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  List<PanelString> joinedData=new LinkedList<PanelString>();
  boolean anyCardFound=true;
  if (inv.getStackInSlot(0) != null) {
    if (inv.getStackInSlot(0).getItem().equals(IC2NuclearControl.itemEnergySensorLocationCard)) {
      ItemCardEnergySensorLocation card=(ItemCardEnergySensorLocation)inv.getStackInSlot(0).getItem();
      CardWrapperImpl helper=new CardWrapperImpl(inv.getStackInSlot(0),-1);
      ChunkCoordinates target=helper.getTarget();
      joinedData.clear();
      World world=MinecraftServer.getServer().worldServers[0];
      TileEntity tile=world.getTileEntity(target.posX,target.posY,target.posZ);
      tile.getDescriptionPacket();
      tile.markDirty();
      card.update(e.worldObj,helper,8 * (int)Math.pow(2,7));
      joinedData=card.getStringData(Integer.MAX_VALUE,helper,true);
      drawCardStuff(anyCardFound,joinedData);
    }
  }
}",0.2956841138659321
134685,"@Override public CardState update(TileEntity panel,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  int targetType=card.getInt(""String_Node_Str"");
  EnergyStorageData storage=EnergyStorageHelper.getStorageAt(panel.getWorldObj(),target.posX,target.posY,target.posZ,targetType);
  if (storage != null) {
    card.setDouble(""String_Node_Str"",storage.stored);
    card.setDouble(""String_Node_Str"",storage.capacity);
    card.setDouble(""String_Node_Str"",storage.stored);
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}","public CardState update(World world,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  int targetType=card.getInt(""String_Node_Str"");
  EnergyStorageData storage=EnergyStorageHelper.getStorageAt(world,target.posX,target.posY,target.posZ,targetType);
  if (storage != null) {
    card.setDouble(""String_Node_Str"",storage.stored);
    card.setDouble(""String_Node_Str"",storage.capacity);
    card.setDouble(""String_Node_Str"",storage.stored);
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}",0.9447963800904976
134686,"@Override public IMessage onMessage(PacketClientRemoteMonitor message,MessageContext ctx){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player.getHeldItem().getItem() == IC2NuclearControl.itemRemoteMonitor) {
    InventoryItem itemInv=new InventoryItem(player.getHeldItem());
    if (itemInv.getStackInSlot(0) == null || !(itemInv.getStackInSlot(0).getItem() instanceof IPanelDataSource)) {
      return null;
    }
    CardWrapperImpl helper=new CardWrapperImpl(itemInv.getStackInSlot(0),0);
    for (    Map.Entry<String,Object> entry : message.fields.entrySet()) {
      String name=entry.getKey();
      Object value=entry.getValue();
      if (value instanceof Long) {
        helper.setLong(name,(Long)value);
      }
 else       if (value instanceof Double) {
        helper.setDouble(name,(Double)value);
      }
 else       if (value instanceof Integer) {
        helper.setInt(name,(Integer)value);
      }
 else       if (value instanceof String) {
        helper.setString(name,(String)value);
      }
 else       if (value instanceof Boolean) {
        helper.setBoolean(name,(Boolean)value);
      }
 else       if (value instanceof NBTTagCompound) {
        helper.setTag(name,(NBTTagCompound)value);
      }
 else       if (value == null) {
        helper.clearField(name);
      }
    }
  }
  return null;
}","@Override @SideOnly(Side.CLIENT) public IMessage onMessage(PacketClientRemoteMonitor message,MessageContext ctx){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player.getHeldItem().getItem() == IC2NuclearControl.itemRemoteMonitor) {
    InventoryItem itemInv=new InventoryItem(player.getHeldItem());
    if (itemInv.getStackInSlot(0) == null || !(itemInv.getStackInSlot(0).getItem() instanceof IPanelDataSource)) {
      return null;
    }
    CardWrapperImpl helper=new CardWrapperImpl(itemInv.getStackInSlot(0),0);
    for (    Map.Entry<String,Object> entry : message.fields.entrySet()) {
      String name=entry.getKey();
      Object value=entry.getValue();
      if (value instanceof Long) {
        helper.setLong(name,(Long)value);
      }
 else       if (value instanceof Double) {
        helper.setDouble(name,(Double)value);
      }
 else       if (value instanceof Integer) {
        helper.setInt(name,(Integer)value);
      }
 else       if (value instanceof String) {
        helper.setString(name,(String)value);
      }
 else       if (value instanceof Boolean) {
        helper.setBoolean(name,(Boolean)value);
      }
 else       if (value instanceof NBTTagCompound) {
        helper.setTag(name,(NBTTagCompound)value);
      }
 else       if (value == null) {
        helper.clearField(name);
      }
    }
  }
  return null;
}",0.9915097822074568
134687,"@Override public void updateEntity(){
  if (!init) {
    initData();
    markDirty();
  }
  if (FMLCommonHandler.instance().getEffectiveSide().isClient())   return;
  if (!worldObj.isRemote) {
    if (!addedToEnergyNet) {
      EnergyTileLoadEvent event=new EnergyTileLoadEvent(this);
      MinecraftForge.EVENT_BUS.post(event);
      addedToEnergyNet=true;
    }
    index=(index + 1) % DATA_POINTS;
    data[index]=0;
    this.getAverage();
    double total=EnergyNet.instance.getTotalEnergyEmitted(this);
    data[index]=total;
    this.setPowerType((byte)EnergyStorageData.TARGET_TYPE_IC2);
  }
  super.updateEntity();
}","@Override public void updateEntity(){
  if (!init) {
    initData();
    markDirty();
  }
  if (FMLCommonHandler.instance().getEffectiveSide().isClient())   return;
  if (!worldObj.isRemote) {
    if (!addedToEnergyNet) {
      EnergyTileLoadEvent event=new EnergyTileLoadEvent(this);
      MinecraftForge.EVENT_BUS.post(event);
      addedToEnergyNet=true;
    }
    index=(index + 1) % DATA_POINTS;
    data[index]=0;
    this.getAverage();
    double total=EnergyNet.instance.getTotalEnergyEmitted(this);
    if (IC2NuclearControl.instance.crossClassic.getClassicType() == IC2ClassicType.SPEIGER) {
      double realTotal=total - lastReceivedPower;
      lastReceivedPower=total;
      data[index]=realTotal;
    }
 else     data[index]=total;
    this.setPowerType((byte)EnergyStorageData.TARGET_TYPE_IC2);
  }
  super.updateEntity();
}",0.8524590163934426
134688,"@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double totalEnergy=0;
  double totalStorage=0;
  boolean showEach=(displaySettings & DISPLAY_EACH) > 0;
  boolean showSummary=(displaySettings & DISPLAY_TOTAL) > 0;
  boolean showEnergy=(displaySettings & DISPLAY_ENERGY) > 0;
  boolean showFree=(displaySettings & DISPLAY_FREE) > 0;
  boolean showStorage=(displaySettings & DISPLAY_STORAGE) > 0;
  boolean showPercentage=(displaySettings & DISPLAY_PERCENTAGE) > 0;
  int cardCount=getCardCount(card);
  for (int i=0; i < cardCount; i++) {
    int energy=card.getInt(String.format(""String_Node_Str"",i));
    int storage=card.getInt(String.format(""String_Node_Str"",i));
    boolean isOutOfRange=energy == STATUS_OUT_OF_RANGE;
    boolean isNotFound=energy == STATUS_NOT_FOUND;
    if (showSummary && !isOutOfRange && !isNotFound) {
      totalEnergy+=energy;
      totalStorage+=storage;
    }
    if (showEach) {
      if (isOutOfRange) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else       if (isNotFound) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else {
        if (showEnergy) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",energy,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",energy,false);
          result.add(line);
        }
        if (showFree) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",storage - energy,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage - energy,false);
          result.add(line);
        }
        if (showStorage) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",storage,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage,false);
          result.add(line);
        }
        if (showPercentage) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",storage == 0 ? 100 : (((double)energy) * 100L / storage),false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage == 0 ? 100 : (((double)energy) * 100L / storage),false);
          result.add(line);
        }
      }
    }
  }
  if (showSummary) {
    if (showEnergy) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalEnergy,showLabels);
      result.add(line);
    }
    if (showFree) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalStorage - totalEnergy,showLabels);
      result.add(line);
    }
    if (showStorage) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalStorage,showLabels);
      result.add(line);
    }
    if (showPercentage) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalStorage == 0 ? 100 : (totalEnergy * 100 / totalStorage),showLabels);
      result.add(line);
    }
  }
  return result;
}","@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double totalEnergy=0;
  double totalStorage=0;
  boolean showEach=(displaySettings & DISPLAY_EACH) > 0;
  boolean showSummary=(displaySettings & DISPLAY_TOTAL) > 0;
  boolean showEnergy=(displaySettings & DISPLAY_ENERGY) > 0;
  boolean showFree=(displaySettings & DISPLAY_FREE) > 0;
  boolean showStorage=(displaySettings & DISPLAY_STORAGE) > 0;
  boolean showPercentage=(displaySettings & DISPLAY_PERCENTAGE) > 0;
  int cardCount=getCardCount(card);
  for (int i=0; i < cardCount; i++) {
    int energy=card.getInt(String.format(""String_Node_Str"",i));
    int storage=card.getInt(String.format(""String_Node_Str"",i));
    boolean isOutOfRange=energy == STATUS_OUT_OF_RANGE;
    boolean isNotFound=energy == STATUS_NOT_FOUND;
    if (showSummary && !isOutOfRange && !isNotFound) {
      totalEnergy+=energy;
      totalStorage+=storage;
    }
    if (showEach) {
      if (isOutOfRange) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else       if (isNotFound) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else {
        if (showEnergy) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",energy,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",energy,false);
          result.add(line);
        }
        if (showFree) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",storage - energy,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage - energy,false);
          result.add(line);
        }
        if (showStorage) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",storage,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage,false);
          result.add(line);
        }
        if (showPercentage) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",storage == 0 ? 100 : (int)(((double)energy / storage) * 100D),false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage == 0 ? 100 : (int)(((double)energy / storage) * 100D),false);
          result.add(line);
        }
      }
    }
  }
  if (showSummary) {
    if (showEnergy) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalEnergy,showLabels);
      result.add(line);
    }
    if (showFree) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalStorage - totalEnergy,showLabels);
      result.add(line);
    }
    if (showStorage) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalStorage,showLabels);
      result.add(line);
    }
    if (showPercentage) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalStorage == 0 ? 100 : ((totalEnergy / totalStorage) * 100),showLabels);
      result.add(line);
    }
  }
  return result;
}",0.9884594739667204
134689,"@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double energy=card.getDouble(""String_Node_Str"");
  double storage=card.getDouble(""String_Node_Str"");
  if ((displaySettings & DISPLAY_ENERGY) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",energy,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_FREE) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage - energy,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_STORAGE) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_PERCENTAGE) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage == 0 ? 100 : (energy * 100 / storage),showLabels);
    result.add(line);
  }
  return result;
}","@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double energy=card.getDouble(""String_Node_Str"");
  double storage=card.getDouble(""String_Node_Str"");
  if ((displaySettings & DISPLAY_ENERGY) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",energy,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_FREE) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage - energy,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_STORAGE) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage,showLabels);
    result.add(line);
  }
  if ((displaySettings & DISPLAY_PERCENTAGE) > 0) {
    line=new PanelString();
    line.textLeft=StringUtils.getFormatted(""String_Node_Str"",storage == 0 ? 100 : ((energy / storage) * 100),showLabels);
    result.add(line);
  }
  return result;
}",0.989935956084172
134690,"@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double totalAmount=0;
  double totalCapacity=0;
  boolean showEach=(displaySettings & DISPLAY_EACH) > 0;
  boolean showSummary=(displaySettings & DISPLAY_TOTAL) > 0;
  boolean showName=(displaySettings & DISPLAY_NAME) > 0;
  boolean showAmount=true;
  boolean showFree=(displaySettings & DISPLAY_FREE) > 0;
  boolean showCapacity=(displaySettings & DISPLAY_CAPACITY) > 0;
  boolean showPercentage=(displaySettings & DISPLAY_PERCENTAGE) > 0;
  int cardCount=getCardCount(card);
  for (int i=0; i < cardCount; i++) {
    int amount=card.getInt(String.format(""String_Node_Str"",i));
    int capacity=card.getInt(String.format(""String_Node_Str"",i));
    boolean isOutOfRange=amount == STATUS_OUT_OF_RANGE;
    boolean isNotFound=amount == STATUS_NOT_FOUND;
    if (showSummary && !isOutOfRange && !isNotFound) {
      totalAmount+=amount;
      totalCapacity+=capacity;
    }
    if (showEach) {
      if (isOutOfRange) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else       if (isNotFound) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else {
        if (showName) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,card.getString(String.format(""String_Node_Str"",i)));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",amount,false);
          result.add(line);
        }
        if (showAmount) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",amount,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",amount,false);
          result.add(line);
        }
        if (showFree) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",capacity - amount,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",capacity - amount,false);
          result.add(line);
        }
        if (showCapacity) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",capacity,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",capacity,false);
          result.add(line);
        }
        if (showPercentage) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",capacity == 0 ? 100 : (((double)amount) * 100L / capacity),false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",capacity == 0 ? 100 : (((double)amount) * 100L / capacity),false);
          result.add(line);
        }
      }
    }
  }
  if (showSummary) {
    if (showAmount) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalAmount,showLabels);
      result.add(line);
    }
    if (showFree) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalCapacity - totalAmount,showLabels);
      result.add(line);
    }
    if (showName) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalCapacity,showLabels);
      result.add(line);
    }
    if (showPercentage) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalCapacity == 0 ? 100 : (totalAmount * 100 / totalCapacity),showLabels);
      result.add(line);
    }
  }
  return result;
}","@Override public List<PanelString> getStringData(int displaySettings,ICardWrapper card,boolean showLabels){
  List<PanelString> result=new LinkedList<PanelString>();
  PanelString line;
  double totalAmount=0;
  double totalCapacity=0;
  boolean showEach=(displaySettings & DISPLAY_EACH) > 0;
  boolean showSummary=(displaySettings & DISPLAY_TOTAL) > 0;
  boolean showName=(displaySettings & DISPLAY_NAME) > 0;
  boolean showAmount=true;
  boolean showFree=(displaySettings & DISPLAY_FREE) > 0;
  boolean showCapacity=(displaySettings & DISPLAY_CAPACITY) > 0;
  boolean showPercentage=(displaySettings & DISPLAY_PERCENTAGE) > 0;
  int cardCount=getCardCount(card);
  for (int i=0; i < cardCount; i++) {
    int amount=card.getInt(String.format(""String_Node_Str"",i));
    int capacity=card.getInt(String.format(""String_Node_Str"",i));
    boolean isOutOfRange=amount == STATUS_OUT_OF_RANGE;
    boolean isNotFound=amount == STATUS_NOT_FOUND;
    if (showSummary && !isOutOfRange && !isNotFound) {
      totalAmount+=amount;
      totalCapacity+=capacity;
    }
    if (showEach) {
      if (isOutOfRange) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else       if (isNotFound) {
        line=new PanelString();
        line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1);
        result.add(line);
      }
 else {
        if (showName) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,card.getString(String.format(""String_Node_Str"",i)));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",amount,false);
          result.add(line);
        }
        if (showAmount) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",amount,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",amount,false);
          result.add(line);
        }
        if (showFree) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",capacity - amount,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",capacity - amount,false);
          result.add(line);
        }
        if (showCapacity) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",capacity,false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",capacity,false);
          result.add(line);
        }
        if (showPercentage) {
          line=new PanelString();
          if (showLabels)           line.textLeft=StringUtils.getFormattedKey(""String_Node_Str"",i + 1,StringUtils.getFormatted(""String_Node_Str"",capacity == 0 ? 100 : (((double)amount / capacity) * 100),false));
 else           line.textLeft=StringUtils.getFormatted(""String_Node_Str"",capacity == 0 ? 100 : (((double)amount / capacity) * 100),false);
          result.add(line);
        }
      }
    }
  }
  if (showSummary) {
    if (showAmount) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalAmount,showLabels);
      result.add(line);
    }
    if (showFree) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalCapacity - totalAmount,showLabels);
      result.add(line);
    }
    if (showName) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalCapacity,showLabels);
      result.add(line);
    }
    if (showPercentage) {
      line=new PanelString();
      line.textLeft=StringUtils.getFormatted(""String_Node_Str"",totalCapacity == 0 ? 100 : ((totalAmount / totalCapacity) * 100),showLabels);
      result.add(line);
    }
  }
  return result;
}",0.990239141044412
134691,"public CardState updateGenerator(TileEntity panel,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  TileEntity entity=panel.getWorldObj().getTileEntity(target.posX,target.posY,target.posZ);
  if (entity instanceof TileEntityBaseGenerator) {
    int production=(int)EnergyNet.instance.getTotalEnergyEmitted(entity);
    card.setInt(""String_Node_Str"",production);
    card.setDouble(""String_Node_Str"",(double)production);
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}","public CardState updateGenerator(TileEntity panel,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  TileEntity entity=panel.getWorldObj().getTileEntity(target.posX,target.posY,target.posZ);
  if (entity instanceof TileEntityBaseGenerator) {
    int production=(int)EnergyNet.instance.getNodeStats(entity).getEnergyOut();
    card.setInt(""String_Node_Str"",production);
    card.setDouble(""String_Node_Str"",(double)production);
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}",0.9464627151051626
134692,"public CardState updateLiquid(TileEntity panel,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  FluidTankInfo storage=LiquidStorageHelper.getStorageAt(panel.getWorldObj(),target.posX,target.posY,target.posZ);
  if (storage != null) {
    int capacity=storage.capacity;
    int amount=0;
    int liquidId=0;
    NBTTagCompound liquidTag=null;
    if (storage.fluid != null) {
      amount=storage.fluid.amount;
      if (storage.fluid.fluidID != 0 && amount > 0) {
        liquidId=storage.fluid.fluidID;
        liquidTag=storage.fluid.tag;
      }
    }
    card.setInt(""String_Node_Str"",capacity);
    card.setInt(""String_Node_Str"",amount);
    card.setInt(""String_Node_Str"",liquidId);
    card.setTag(""String_Node_Str"",liquidTag);
    card.setDouble(""String_Node_Str"",(double)amount);
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}","public CardState updateLiquid(TileEntity panel,ICardWrapper card,int range){
  ChunkCoordinates target=card.getTarget();
  FluidTankInfo storage=LiquidStorageHelper.getStorageAt(panel.getWorldObj(),target.posX,target.posY,target.posZ);
  if (storage != null) {
    int capacity=storage.capacity;
    int amount=0;
    int liquidId=0;
    NBTTagCompound liquidTag=null;
    if (storage.fluid != null) {
      amount=storage.fluid.amount;
      if (storage.fluid.getFluidID() != 0 && amount > 0) {
        liquidId=storage.fluid.getFluidID();
        liquidTag=storage.fluid.tag;
      }
    }
    card.setInt(""String_Node_Str"",capacity);
    card.setInt(""String_Node_Str"",amount);
    card.setInt(""String_Node_Str"",liquidId);
    card.setTag(""String_Node_Str"",liquidTag);
    card.setDouble(""String_Node_Str"",(double)amount);
    return CardState.OK;
  }
 else {
    return CardState.NO_TARGET;
  }
}",0.9921700223713646
134693,"@Override public CardState update(TileEntity panel,ICardWrapper card,int range){
  int cardCount=getCardCount(card);
  double totalAmount=0.0;
  if (cardCount == 0) {
    return CardState.INVALID_CARD;
  }
 else {
    boolean foundAny=false;
    boolean outOfRange=false;
    int liquidId=0;
    for (int i=0; i < cardCount; i++) {
      int[] coordinates=getCoordinates(card,i);
      int dx=coordinates[0] - panel.xCoord;
      int dy=coordinates[1] - panel.yCoord;
      int dz=coordinates[2] - panel.zCoord;
      if (Math.abs(dx) <= range && Math.abs(dy) <= range && Math.abs(dz) <= range) {
        FluidTankInfo storage=LiquidStorageHelper.getStorageAt(panel.getWorldObj(),coordinates[0],coordinates[1],coordinates[2]);
        if (storage != null) {
          if (storage.fluid != null) {
            totalAmount+=storage.fluid.amount;
            card.setInt(String.format(""String_Node_Str"",i),storage.fluid.amount);
            if (storage.fluid.fluidID != 0 && storage.fluid.amount > 0) {
              liquidId=storage.fluid.fluidID;
            }
            if (liquidId == 0)             card.setString(String.format(""String_Node_Str"",i),LangHelper.translate(""String_Node_Str""));
 else             card.setString(String.format(""String_Node_Str"",i),FluidRegistry.getFluidName(liquidId));
          }
          card.setInt(String.format(""String_Node_Str"",i),storage.capacity);
          foundAny=true;
        }
 else {
          card.setInt(String.format(""String_Node_Str"",i),STATUS_NOT_FOUND);
        }
      }
 else {
        card.setInt(String.format(""String_Node_Str"",i),STATUS_OUT_OF_RANGE);
        outOfRange=true;
      }
    }
    card.setDouble(""String_Node_Str"",totalAmount);
    if (!foundAny) {
      if (outOfRange)       return CardState.OUT_OF_RANGE;
 else       return CardState.NO_TARGET;
    }
    return CardState.OK;
  }
}","@Override public CardState update(TileEntity panel,ICardWrapper card,int range){
  int cardCount=getCardCount(card);
  double totalAmount=0.0;
  if (cardCount == 0) {
    return CardState.INVALID_CARD;
  }
 else {
    boolean foundAny=false;
    boolean outOfRange=false;
    int liquidId=0;
    for (int i=0; i < cardCount; i++) {
      int[] coordinates=getCoordinates(card,i);
      int dx=coordinates[0] - panel.xCoord;
      int dy=coordinates[1] - panel.yCoord;
      int dz=coordinates[2] - panel.zCoord;
      if (Math.abs(dx) <= range && Math.abs(dy) <= range && Math.abs(dz) <= range) {
        FluidTankInfo storage=LiquidStorageHelper.getStorageAt(panel.getWorldObj(),coordinates[0],coordinates[1],coordinates[2]);
        if (storage != null) {
          if (storage.fluid != null) {
            totalAmount+=storage.fluid.amount;
            card.setInt(String.format(""String_Node_Str"",i),storage.fluid.amount);
            if (storage.fluid.getFluidID() != 0 && storage.fluid.amount > 0) {
              liquidId=storage.fluid.getFluidID();
            }
            if (liquidId == 0)             card.setString(String.format(""String_Node_Str"",i),LangHelper.translate(""String_Node_Str""));
 else             card.setString(String.format(""String_Node_Str"",i),FluidRegistry.getFluidName(storage.fluid));
          }
          card.setInt(String.format(""String_Node_Str"",i),storage.capacity);
          foundAny=true;
        }
 else {
          card.setInt(String.format(""String_Node_Str"",i),STATUS_NOT_FOUND);
        }
      }
 else {
        card.setInt(String.format(""String_Node_Str"",i),STATUS_OUT_OF_RANGE);
        outOfRange=true;
      }
    }
    card.setDouble(""String_Node_Str"",totalAmount);
    if (!foundAny) {
      if (outOfRange)       return CardState.OUT_OF_RANGE;
 else       return CardState.NO_TARGET;
    }
    return CardState.OK;
  }
}",0.9911551862771376
134694,"@EventHandler public void init(FMLInitializationEvent event){
  IC2NuclearControl.instance.screenManager=new ScreenManager();
  initBlocks();
  registerBlocks();
  proxy.registerTileEntities();
  if (Loader.isModLoaded(""String_Node_Str""))   crossOC=new CrossOpenComputers();
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@EventHandler public void init(FMLInitializationEvent event){
  IC2NuclearControl.instance.screenManager=new ScreenManager();
  initBlocks();
  registerBlocks();
  proxy.registerTileEntities();
  if (Loader.isModLoaded(""String_Node_Str""))   crossOC=new CrossOpenComputers();
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  CrossBigReactors.doStuff();
}",0.9603174603174603
134695,"@EventHandler public void postInit(FMLPostInitializationEvent event){
  proxy.cape();
  crossBC=new CrossBuildcraft();
  CrossBigReactors.isRegistrationInOrder();
  crossIC2=new CrossIndustrialCraft2();
  crossRailcraft=new CrossRailcraft();
  crossRF=new CrossRF();
  if (recipes.toLowerCase().equals(""String_Node_Str"")) {
    RecipesNew.addRecipes();
  }
  if (recipes.toLowerCase().equals(""String_Node_Str"")) {
    logger.error(""String_Node_Str"");
    RecipesOld.addOldRecipes();
  }
  if (recipes.toLowerCase().equals(""String_Node_Str"")) {
    GregtechRecipes.addRecipes();
    logger.info(""String_Node_Str"");
  }
}","@EventHandler public void postInit(FMLPostInitializationEvent event){
  proxy.cape();
  crossBC=new CrossBuildcraft();
  crossIC2=new CrossIndustrialCraft2();
  crossRailcraft=new CrossRailcraft();
  crossRF=new CrossRF();
  if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
    RecipesNew.addRecipes();
  }
  if (recipes.equalsIgnoreCase(""String_Node_Str"")) {
    logger.error(""String_Node_Str"");
    RecipesOld.addOldRecipes();
  }
  if (recipes.equalsIgnoreCase(""String_Node_Str"") || recipes.equalsIgnoreCase(""String_Node_Str"")) {
    GregtechRecipes.addRecipes();
    logger.info(""String_Node_Str"");
  }
}",0.8673718470301057
134696,"public EnergyStorageData getStorageData(TileEntity target){
  if (!_RFModPresent || target == null)   return null;
  RFTileEntityAverageCounter tile=new RFTileEntityAverageCounter();
  if (tile.storage == null)   return null;
  EnergyStorageData result=new EnergyStorageData();
  result.capacity=tile.storage.getMaxEnergyStored();
  result.stored=tile.storage.getEnergyStored();
  result.units=""String_Node_Str"";
  result.type=EnergyStorageData.TARGET_TYPE_RF;
  return result;
}","public EnergyStorageData getStorageData(TileEntity target){
  if (!_RFModPresent || target == null)   return null;
  RFTileEntityAverageCounter tile=new RFTileEntityAverageCounter();
  if (tile.storage == null)   return null;
  EnergyStorageData result=new EnergyStorageData();
  result.capacity=tile.storage.getMaxEnergyStored();
  result.stored=tile.storage.getEnergyStored();
  result.units=EnergyStorageData.UNITS_RF;
  result.type=EnergyStorageData.TARGET_TYPE_RF;
  return result;
}",0.9576008273009308
134697,"public EnergyStorageData getStorageData(TileEntity target){
  if (!_isApiAvailable || target == null)   return null;
  if (target instanceof IEnergyStorage) {
    IEnergyStorage storage=(IEnergyStorage)target;
    EnergyStorageData result=new EnergyStorageData();
    result.capacity=storage.getCapacity();
    result.stored=storage.getStored();
    result.units=""String_Node_Str"";
    result.type=EnergyStorageData.TARGET_TYPE_IC2;
    return result;
  }
  return null;
}","public EnergyStorageData getStorageData(TileEntity target){
  if (!_isApiAvailable || target == null)   return null;
  if (target instanceof IEnergyStorage) {
    IEnergyStorage storage=(IEnergyStorage)target;
    EnergyStorageData result=new EnergyStorageData();
    result.capacity=storage.getCapacity();
    result.stored=storage.getStored();
    result.units=EnergyStorageData.UNITS_EU;
    result.type=EnergyStorageData.TARGET_TYPE_IC2;
    return result;
  }
  return null;
}",0.95697796432319
134698,"@SuppressWarnings(""String_Node_Str"") public CrossIndustrialCraft2(){
  try {
    Class.forName(""String_Node_Str"",false,this.getClass().getClassLoader());
    _gradItemInt=Class.forName(""String_Node_Str"",false,this.getClass().getClassLoader());
    _getMaxDamageEx=_gradItemInt.getMethod(""String_Node_Str"");
    _getDamageOfStack=_gradItemInt.getMethod(""String_Node_Str"",ItemStack.class);
    _isApiAvailable=true;
  }
 catch (  Exception e) {
    _isApiAvailable=false;
  }
}","@SuppressWarnings(""String_Node_Str"") public CrossIndustrialCraft2(){
  try {
    Class.forName(""String_Node_Str"",false,this.getClass().getClassLoader());
    _gradItemInt=Class.forName(""String_Node_Str"",false,this.getClass().getClassLoader());
    _getMaxDamageEx=_gradItemInt.getMethod(""String_Node_Str"",ItemStack.class);
    _getDamageOfStack=_gradItemInt.getMethod(""String_Node_Str"",ItemStack.class);
    _isApiAvailable=true;
  }
 catch (  Exception e) {
    _isApiAvailable=false;
  }
}",0.9834368530020704
134699,"@Override protected ItemStack getItemStackByDamage(int damage){
  return new ItemStack(IC2NuclearControl.itemEnergySensorLocationCard,1,0);
}","@Override protected ItemStack getItemStackByDamage(int damage){
  return new ItemStack(IC2NuclearControl.itemEnergySensorLocationCard);
}",0.9856115107913668
134700,"public static void addRecipes(){
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemToolThermometer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str""});
  ItemStack digitalThermometer=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'3',IC2NuclearControl.itemToolThermometer});
  ItemStack thermalMonitor=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_THERMAL_MONITOR);
  Recipes.advRecipes.addRecipe(thermalMonitor,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack howler=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_HOWLER_ALARM);
  Recipes.advRecipes.addRecipe(howler,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'N',Blocks.noteblock,'C',""String_Node_Str"",'R',IC2Items.getItem(""String_Node_Str""),'G',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str"")});
  ItemStack industrialAlarm=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INDUSTRIAL_ALARM);
  Recipes.advRecipes.addRecipe(industrialAlarm,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',IC2Items.getItem(""String_Node_Str""),'L',IC2NuclearControl.blockNuclearControlLight,'R',Items.repeater,'H',howler,'C',""String_Node_Str"",'M',""String_Node_Str""});
  ItemStack industrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL);
  Recipes.advRecipes.addRecipe(industrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str"",'W',""String_Node_Str""});
  ItemStack industrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL_EXTENDER);
  Recipes.advRecipes.addRecipe(industrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'W',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack energyCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ENERGY_COUNTER);
  Recipes.advRecipes.addRecipe(energyCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str""});
  ItemStack averageCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_AVERAGE_COUNTER);
  Recipes.advRecipes.addRecipe(averageCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'A',""String_Node_Str"",'W',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'C',""String_Node_Str""});
  ItemStack rangeTrigger=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_RANGE_TRIGGER);
  Recipes.advRecipes.addRecipe(rangeTrigger,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',""String_Node_Str"",'A',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str"",'I',IC2Items.getItem(""String_Node_Str"")});
  ItemStack advancedIndustrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_PANEL);
  Recipes.advRecipes.addRecipe(advancedIndustrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInformationPanel,""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'S',""String_Node_Str""});
  ItemStack advancedIndustrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_EXTENDER);
  Recipes.advRecipes.addRecipe(advancedIndustrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInfoPanelExtender,'A',""String_Node_Str"",'S',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'D',""String_Node_Str""});
  ItemStack whiteLamp=new ItemStack(IC2NuclearControl.blockNuclearControlLight);
  Recipes.advRecipes.addRecipe(whiteLamp,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_lamp,'W',""String_Node_Str""});
  ItemStack thermometer=new ItemStack(IC2NuclearControl.itemToolThermometer);
  Recipes.advRecipes.addRecipe(thermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'M',""String_Node_Str"",'G',""String_Node_Str""});
  ItemStack digitalThermo=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermo,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'T',thermometer,'G',""String_Node_Str"",'C',""String_Node_Str"",'A',""String_Node_Str"",'P',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemRemoteSensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'D',StackUtil.copyWithWildCard(digitalThermometer),'F',IC2Items.getItem(""String_Node_Str""),'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemEnergySensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'R',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'O',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),new Object[]{""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'C',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'Y',""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str"",'A',""String_Node_Str"",'B',""String_Node_Str""});
  if ((IC2NuclearControl.isHttpSensorAvailableClient && !IC2NuclearControl.isServer) || (IC2NuclearControl.isHttpSensorAvailableServer && IC2NuclearControl.isServer)) {
    Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_WEB),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),'A',""String_Node_Str"",'G',""String_Node_Str""});
  }
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_COUNTER),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_LIQUID),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',Items.bucket,'F',IC2Items.getItem(""String_Node_Str""),'B',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTextCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTimeCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Items.clock,'P',Items.paper,'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_GENERATOR),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  CraftingManager.getInstance().getRecipeList().add(new StorageArrayRecipe());
}","public static void addRecipes(){
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemToolThermometer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str""});
  ItemStack digitalThermometer=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'3',IC2NuclearControl.itemToolThermometer});
  ItemStack thermalMonitor=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_THERMAL_MONITOR);
  Recipes.advRecipes.addRecipe(thermalMonitor,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack howler=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_HOWLER_ALARM);
  Recipes.advRecipes.addRecipe(howler,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'N',Blocks.noteblock,'C',""String_Node_Str"",'R',IC2Items.getItem(""String_Node_Str""),'G',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str"")});
  ItemStack industrialAlarm=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INDUSTRIAL_ALARM);
  Recipes.advRecipes.addRecipe(industrialAlarm,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',IC2Items.getItem(""String_Node_Str""),'L',IC2NuclearControl.blockNuclearControlLight,'R',Items.repeater,'H',howler,'C',""String_Node_Str"",'M',""String_Node_Str""});
  ItemStack industrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL);
  Recipes.advRecipes.addRecipe(industrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str"",'W',""String_Node_Str""});
  ItemStack industrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL_EXTENDER);
  Recipes.advRecipes.addRecipe(industrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'W',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack energyCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ENERGY_COUNTER);
  Recipes.advRecipes.addRecipe(energyCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str""});
  ItemStack averageCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_AVERAGE_COUNTER);
  Recipes.advRecipes.addRecipe(averageCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'A',""String_Node_Str"",'W',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'C',""String_Node_Str""});
  ItemStack rangeTrigger=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_RANGE_TRIGGER);
  Recipes.advRecipes.addRecipe(rangeTrigger,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',""String_Node_Str"",'A',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str"",'I',IC2Items.getItem(""String_Node_Str"")});
  ItemStack advancedIndustrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_PANEL);
  Recipes.advRecipes.addRecipe(advancedIndustrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInformationPanel,'A',""String_Node_Str"",'C',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'S',""String_Node_Str""});
  ItemStack advancedIndustrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_EXTENDER);
  Recipes.advRecipes.addRecipe(advancedIndustrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInfoPanelExtender,'A',""String_Node_Str"",'S',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'D',""String_Node_Str""});
  ItemStack whiteLamp=new ItemStack(IC2NuclearControl.blockNuclearControlLight);
  Recipes.advRecipes.addRecipe(whiteLamp,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_lamp,'W',""String_Node_Str""});
  ItemStack thermometer=new ItemStack(IC2NuclearControl.itemToolThermometer);
  Recipes.advRecipes.addRecipe(thermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'M',""String_Node_Str"",'G',""String_Node_Str""});
  ItemStack digitalThermo=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermo,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'T',thermometer,'G',""String_Node_Str"",'C',""String_Node_Str"",'A',""String_Node_Str"",'P',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemRemoteSensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'D',StackUtil.copyWithWildCard(digitalThermometer),'F',IC2Items.getItem(""String_Node_Str""),'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemEnergySensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'R',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'O',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),new Object[]{""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'C',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'Y',""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str"",'A',""String_Node_Str"",'B',""String_Node_Str""});
  if ((IC2NuclearControl.isHttpSensorAvailableClient && !IC2NuclearControl.isServer) || (IC2NuclearControl.isHttpSensorAvailableServer && IC2NuclearControl.isServer)) {
    Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_WEB),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),'A',""String_Node_Str"",'G',""String_Node_Str""});
  }
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_COUNTER),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_LIQUID),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',Items.bucket,'F',IC2Items.getItem(""String_Node_Str""),'B',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTextCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTimeCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Items.clock,'P',Items.paper,'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_GENERATOR),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  CraftingManager.getInstance().getRecipeList().add(new StorageArrayRecipe());
}",0.9988188046302858
134701,"public static void addRecipes(){
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemToolThermometer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str""});
  ItemStack digitalThermometer=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str""});
  ItemStack thermalMonitor=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_THERMAL_MONITOR);
  Recipes.advRecipes.addRecipe(thermalMonitor,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack howler=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_HOWLER_ALARM);
  Recipes.advRecipes.addRecipe(howler,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'N',Blocks.noteblock,'C',""String_Node_Str"",'R',IC2Items.getItem(""String_Node_Str""),'G',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str"")});
  ItemStack industrialAlarm=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INDUSTRIAL_ALARM);
  Recipes.advRecipes.addRecipe(industrialAlarm,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',IC2Items.getItem(""String_Node_Str""),'L',IC2NuclearControl.blockNuclearControlLight,'R',Items.repeater,'H',howler,'C',""String_Node_Str"",'M',""String_Node_Str""});
  ItemStack industrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL);
  Recipes.advRecipes.addRecipe(industrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str"",'W',""String_Node_Str""});
  ItemStack industrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL_EXTENDER);
  Recipes.advRecipes.addRecipe(industrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'W',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack energyCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ENERGY_COUNTER);
  Recipes.advRecipes.addRecipe(energyCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str""});
  ItemStack averageCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_AVERAGE_COUNTER);
  Recipes.advRecipes.addRecipe(averageCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'A',""String_Node_Str"",'W',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'C',""String_Node_Str""});
  ItemStack rangeTrigger=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_RANGE_TRIGGER);
  Recipes.advRecipes.addRecipe(rangeTrigger,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',""String_Node_Str"",'A',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str"",'I',IC2Items.getItem(""String_Node_Str"")});
  ItemStack advancedIndustrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_PANEL);
  Recipes.advRecipes.addRecipe(advancedIndustrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInformationPanel,""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'S',""String_Node_Str""});
  ItemStack advancedIndustrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_EXTENDER);
  Recipes.advRecipes.addRecipe(advancedIndustrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInfoPanelExtender,'A',""String_Node_Str"",'S',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'D',""String_Node_Str""});
  ItemStack whiteLamp=new ItemStack(IC2NuclearControl.blockNuclearControlLight);
  Recipes.advRecipes.addRecipe(whiteLamp,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_lamp,'W',""String_Node_Str""});
  ItemStack thermometer=new ItemStack(IC2NuclearControl.itemToolThermometer);
  Recipes.advRecipes.addRecipe(thermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'M',""String_Node_Str"",'G',""String_Node_Str""});
  ItemStack digitalThermo=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermo,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'T',thermometer,'G',""String_Node_Str"",'C',""String_Node_Str"",'A',""String_Node_Str"",'P',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemRemoteSensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'D',StackUtil.copyWithWildCard(digitalThermometer),'F',IC2Items.getItem(""String_Node_Str""),'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemEnergySensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'R',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'O',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),new Object[]{""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'C',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'Y',""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str"",'A',""String_Node_Str"",'B',""String_Node_Str""});
  if ((IC2NuclearControl.isHttpSensorAvailableClient && !IC2NuclearControl.isServer) || (IC2NuclearControl.isHttpSensorAvailableServer && IC2NuclearControl.isServer)) {
    Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_WEB),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),'A',""String_Node_Str"",'G',""String_Node_Str""});
  }
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_COUNTER),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_LIQUID),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',Items.bucket,'F',IC2Items.getItem(""String_Node_Str""),'B',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTextCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTimeCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Items.clock,'P',Items.paper,'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_GENERATOR),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  CraftingManager.getInstance().getRecipeList().add(new StorageArrayRecipe());
}","public static void addRecipes(){
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemToolThermometer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str""});
  ItemStack digitalThermometer=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'3',IC2NuclearControl.itemToolThermometer});
  ItemStack thermalMonitor=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_THERMAL_MONITOR);
  Recipes.advRecipes.addRecipe(thermalMonitor,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack howler=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_HOWLER_ALARM);
  Recipes.advRecipes.addRecipe(howler,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'N',Blocks.noteblock,'C',""String_Node_Str"",'R',IC2Items.getItem(""String_Node_Str""),'G',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str"")});
  ItemStack industrialAlarm=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INDUSTRIAL_ALARM);
  Recipes.advRecipes.addRecipe(industrialAlarm,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',IC2Items.getItem(""String_Node_Str""),'L',IC2NuclearControl.blockNuclearControlLight,'R',Items.repeater,'H',howler,'C',""String_Node_Str"",'M',""String_Node_Str""});
  ItemStack industrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL);
  Recipes.advRecipes.addRecipe(industrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'I',""String_Node_Str"",'W',""String_Node_Str""});
  ItemStack industrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_INFO_PANEL_EXTENDER);
  Recipes.advRecipes.addRecipe(industrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'P',""String_Node_Str"",'W',""String_Node_Str"",'R',""String_Node_Str""});
  ItemStack energyCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ENERGY_COUNTER);
  Recipes.advRecipes.addRecipe(energyCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str""});
  ItemStack averageCounter=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_AVERAGE_COUNTER);
  Recipes.advRecipes.addRecipe(averageCounter,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',""String_Node_Str"",'A',""String_Node_Str"",'W',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'C',""String_Node_Str""});
  ItemStack rangeTrigger=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_RANGE_TRIGGER);
  Recipes.advRecipes.addRecipe(rangeTrigger,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'S',""String_Node_Str"",'A',""String_Node_Str"",'C',""String_Node_Str"",'M',IC2Items.getItem(""String_Node_Str""),'Z',""String_Node_Str"",'I',IC2Items.getItem(""String_Node_Str"")});
  ItemStack advancedIndustrialInformationPanel=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_PANEL);
  Recipes.advRecipes.addRecipe(advancedIndustrialInformationPanel,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInformationPanel,""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'S',""String_Node_Str""});
  ItemStack advancedIndustrialInfoPanelExtender=new ItemStack(IC2NuclearControl.blockNuclearControlMain,1,BlockDamages.DAMAGE_ADVANCED_EXTENDER);
  Recipes.advRecipes.addRecipe(advancedIndustrialInfoPanelExtender,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(IC2NuclearControl.itemUpgrade,1,0),'2',new ItemStack(IC2NuclearControl.itemUpgrade,1,1),'P',industrialInfoPanelExtender,'A',""String_Node_Str"",'S',""String_Node_Str"",'W',""String_Node_Str"",'H',""String_Node_Str"",'D',""String_Node_Str""});
  ItemStack whiteLamp=new ItemStack(IC2NuclearControl.blockNuclearControlLight);
  Recipes.advRecipes.addRecipe(whiteLamp,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_lamp,'W',""String_Node_Str""});
  ItemStack thermometer=new ItemStack(IC2NuclearControl.itemToolThermometer);
  Recipes.advRecipes.addRecipe(thermometer,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'M',""String_Node_Str"",'G',""String_Node_Str""});
  ItemStack digitalThermo=new ItemStack(IC2NuclearControl.itemToolDigitalThermometer,1);
  Recipes.advRecipes.addRecipe(digitalThermo,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'T',thermometer,'G',""String_Node_Str"",'C',""String_Node_Str"",'A',""String_Node_Str"",'P',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemRemoteSensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'D',StackUtil.copyWithWildCard(digitalThermometer),'F',IC2Items.getItem(""String_Node_Str""),'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemEnergySensorKit,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'R',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'O',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),new Object[]{""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'C',IC2Items.getItem(""String_Node_Str"")});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_COLOR),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',""String_Node_Str"",'Y',""String_Node_Str"",'G',""String_Node_Str"",'W',""String_Node_Str"",'C',""String_Node_Str"",'M',""String_Node_Str"",'I',""String_Node_Str"",'A',""String_Node_Str"",'B',""String_Node_Str""});
  if ((IC2NuclearControl.isHttpSensorAvailableClient && !IC2NuclearControl.isServer) || (IC2NuclearControl.isHttpSensorAvailableServer && IC2NuclearControl.isServer)) {
    Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_WEB),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',new ItemStack(IC2NuclearControl.itemUpgrade,1,ItemUpgrade.DAMAGE_RANGE),'A',""String_Node_Str"",'G',""String_Node_Str""});
  }
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_COUNTER),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',IC2Items.getItem(""String_Node_Str""),'R',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_LIQUID),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',Items.bucket,'F',IC2Items.getItem(""String_Node_Str""),'B',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTextCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',""String_Node_Str"",'F',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemTimeCard),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Items.clock,'P',Items.paper,'W',""String_Node_Str""});
  Recipes.advRecipes.addRecipe(new ItemStack(IC2NuclearControl.itemMultipleSensorKit,1,ItemKitMultipleSensor.TYPE_GENERATOR),new Object[]{""String_Node_Str"",""String_Node_Str"",'P',Items.paper,'C',IC2Items.getItem(""String_Node_Str""),'F',IC2Items.getItem(""String_Node_Str""),'L',""String_Node_Str""});
  CraftingManager.getInstance().getRecipeList().add(new StorageArrayRecipe());
}",0.9975153809749172
134702,"/** 
 * Debugs stuff.
 * @author xbony2
 */
public static void debug(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","/** 
 * Debugs stuff.
 * @author xbony2
 */
public static void debug(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}",0.9461235216819974
134703,"@Override public int damageDropped(int i){
  if (i > 0 && i <= BlockDamages.DAMAGE_MAX) {
    if (i == BlockDamages.DAMAGE_LIGHT_ON) {
      return BlockDamages.DAMAGE_LIGHT_OFF;
    }
    return i;
  }
 else {
    return 0;
  }
}","@Override public int damageDropped(int i){
  if (i > 0 && i <= BlockDamages.DAMAGE_MAX) {
    return i;
  }
 else {
    return 0;
  }
}",0.7397260273972602
134704,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block neighbor){
  int side=0;
  TileEntity tileentity=world.getTileEntity(x,y,z);
  if (tileentity instanceof IWrenchable) {
    side=Facing.oppositeSide[((IWrenchable)tileentity).getFacing()];
  }
  if (tileentity instanceof TileEntityLightOn) {
    if (!world.isRemote) {
      if (!world.isBlockIndirectlyGettingPowered(x,y,z)) {
        world.setBlock(x,y,z,this,BlockDamages.DAMAGE_LIGHT_OFF,2);
      }
    }
  }
  if (tileentity instanceof TileEntityLightOff) {
    if (!world.isRemote) {
      if (world.isBlockIndirectlyGettingPowered(x,y,z)) {
        world.setBlock(x,y,z,this,BlockDamages.DAMAGE_LIGHT_ON,2);
      }
    }
  }
  int metadata=world.getBlockMetadata(x,y,z);
  if (isSolidBlockRequired(metadata) && !world.isSideSolid(x + Facing.offsetsXForSide[side],y + Facing.offsetsYForSide[side],z + Facing.offsetsZForSide[side],ForgeDirection.getOrientation(side).getOpposite())) {
    if (!world.isRemote) {
      dropBlockAsItem(world,x,y,z,metadata,0);
    }
    world.setBlock(x,y,z,Blocks.air,0,3);
  }
 else {
    RedstoneHelper.checkPowered(world,tileentity);
  }
  super.onNeighborBlockChange(world,x,y,z,neighbor);
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block neighbor){
  int side=0;
  TileEntity tileentity=world.getTileEntity(x,y,z);
  if (tileentity instanceof IWrenchable) {
    side=Facing.oppositeSide[((IWrenchable)tileentity).getFacing()];
  }
  int metadata=world.getBlockMetadata(x,y,z);
  if (isSolidBlockRequired(metadata) && !world.isSideSolid(x + Facing.offsetsXForSide[side],y + Facing.offsetsYForSide[side],z + Facing.offsetsZForSide[side],ForgeDirection.getOrientation(side).getOpposite())) {
    if (!world.isRemote) {
      dropBlockAsItem(world,x,y,z,metadata,0);
    }
    world.setBlock(x,y,z,Blocks.air,0,3);
  }
 else {
    RedstoneHelper.checkPowered(world,tileentity);
  }
  super.onNeighborBlockChange(world,x,y,z,neighbor);
}",0.7782805429864253
134705,"/** 
 * Called whenever the block is added into the world.
 */
@Override public void onBlockAdded(World world,int x,int y,int z){
  super.onBlockAdded(world,x,y,z);
  int metadata=world.getBlockMetadata(x,y,z);
  if (metadata > BlockDamages.DAMAGE_MAX) {
    metadata=0;
  }
  if (metadata == BlockDamages.DAMAGE_LIGHT_ON) {
    if (!world.isRemote) {
      if (!world.isBlockIndirectlyGettingPowered(x,y,z)) {
        world.setBlock(x,y,z,this,BlockDamages.DAMAGE_LIGHT_OFF,2);
      }
    }
  }
  if (metadata == BlockDamages.DAMAGE_LIGHT_OFF) {
    if (!world.isRemote) {
      if (world.isBlockIndirectlyGettingPowered(x,y,z)) {
        world.setBlock(x,y,z,this,BlockDamages.DAMAGE_LIGHT_ON,2);
      }
    }
  }
  if (isSolidBlockRequired(metadata))   for (int face=0; face < 6; face++) {
    int side=Facing.oppositeSide[face];
    if (world.isSideSolid(x + Facing.offsetsXForSide[side],y + Facing.offsetsYForSide[side],z + Facing.offsetsZForSide[side],ForgeDirection.getOrientation(face))) {
      TileEntity tileentity=world.getTileEntity(x,y,z);
      if (tileentity instanceof IWrenchable) {
        ((IWrenchable)tileentity).setFacing((short)face);
      }
      break;
    }
  }
  dropBlockIfCantStay(world,x,y,z);
}","/** 
 * Called whenever the block is added into the world.
 */
@Override public void onBlockAdded(World world,int x,int y,int z){
  super.onBlockAdded(world,x,y,z);
  int metadata=world.getBlockMetadata(x,y,z);
  if (metadata > BlockDamages.DAMAGE_MAX) {
    metadata=0;
  }
  if (isSolidBlockRequired(metadata))   for (int face=0; face < 6; face++) {
    int side=Facing.oppositeSide[face];
    if (world.isSideSolid(x + Facing.offsetsXForSide[side],y + Facing.offsetsYForSide[side],z + Facing.offsetsZForSide[side],ForgeDirection.getOrientation(face))) {
      TileEntity tileentity=world.getTileEntity(x,y,z);
      if (tileentity instanceof IWrenchable) {
        ((IWrenchable)tileentity).setFacing((short)face);
      }
      break;
    }
  }
  dropBlockIfCantStay(world,x,y,z);
}",0.3037220843672457
134706,"public BlockNuclearControlMain(){
  super(Material.iron);
  setHardness(0.5F);
  setCreativeTab(IC2NuclearControl.tabIC2NC);
  subblocks=new HashMap<Integer,Subblock>();
  register(new ThermalMonitor());
  register(new IndustrialAlarm());
  register(new HowlerAlarm());
  register(new RemoteThermo());
  register(new InfoPanel());
  register(new InfoPanelExtender());
  register(new EnergyCounter());
  register(new AverageCounter());
  register(new RangeTrigger());
  register(new AdvancedInfoPanel());
  register(new AdvancedInfoPanelExtender());
  register(new Light(true));
  register(new Light(false));
}","public BlockNuclearControlMain(){
  super(Material.iron);
  setHardness(0.5F);
  setCreativeTab(IC2NuclearControl.tabIC2NC);
  subblocks=new HashMap<Integer,Subblock>();
  register(new ThermalMonitor());
  register(new IndustrialAlarm());
  register(new HowlerAlarm());
  register(new RemoteThermo());
  register(new InfoPanel());
  register(new InfoPanelExtender());
  register(new EnergyCounter());
  register(new AverageCounter());
  register(new RangeTrigger());
  register(new AdvancedInfoPanel());
  register(new AdvancedInfoPanelExtender());
}",0.9490940465918896
134707,"@EventHandler public void postInit(FMLPostInitializationEvent evt){
  crossBC=new CrossBuildcraft();
  crossIC2=new CrossIndustrialCraft2();
  crossRailcraft=new CrossRailcraft();
  crossThermalEx=new CrossRF();
  if (recipes.equals(""String_Node_Str"")) {
    RecipesNew.addRecipes();
  }
  if (recipes.equals(""String_Node_Str"")) {
    logger.error(""String_Node_Str"");
    RecipesOld.addOldRecipes();
  }
  if (recipes.equals(""String_Node_Str"")) {
    GregtechRecipes.addRecipes();
    logger.error(""String_Node_Str"");
  }
}","@EventHandler public void postInit(FMLPostInitializationEvent evt){
  crossBC=new CrossBuildcraft();
  crossIC2=new CrossIndustrialCraft2();
  crossRailcraft=new CrossRailcraft();
  crossRF=new CrossRF();
  if (recipes.equals(""String_Node_Str"")) {
    RecipesNew.addRecipes();
  }
  if (recipes.equals(""String_Node_Str"")) {
    logger.error(""String_Node_Str"");
    RecipesOld.addOldRecipes();
  }
  if (recipes.equals(""String_Node_Str"")) {
    GregtechRecipes.addRecipes();
    logger.error(""String_Node_Str"");
  }
}",0.989412897016362
134708,"@Override public ItemStack getCraftingResult(InventoryCrafting inventory){
  int inventoryLength=inventory.getSizeInventory();
  boolean fail=false;
  int cardCount=0;
  int arrayCount=0;
  int cardCountLiquid=0;
  int arrayCountLiquid=0;
  ItemStack array=null;
  Vector<ItemStack> cards=new Vector<ItemStack>();
  for (int i=0; i < inventoryLength; i++) {
    ItemStack itemStack=inventory.getStackInSlot(i);
    if (itemStack == null)     continue;
    if (itemStack.getItem() instanceof ItemCardEnergySensorLocation) {
      cards.add(itemStack);
      cardCount++;
    }
 else     if (itemStack.getItem() instanceof ItemCardMultipleSensorLocation && itemStack.getItemDamage() == ItemKitMultipleSensor.TYPE_LIQUID) {
      cards.add(itemStack);
      cardCountLiquid++;
    }
 else     if (itemStack.getItem() instanceof ItemCardEnergyArrayLocation) {
      array=itemStack;
      arrayCount++;
    }
 else     if (itemStack.getItem() instanceof ItemCardLiquidArrayLocation) {
      array=itemStack;
      arrayCountLiquid++;
    }
 else {
      fail=true;
      break;
    }
  }
  if (fail || (cardCount != 0 && cardCountLiquid != 0) || (arrayCount != 0 && arrayCountLiquid != 0)|| (cardCount != 0 && arrayCountLiquid != 0)|| (arrayCount != 0 && cardCountLiquid != 0)) {
    return null;
  }
  if (cardCount >= 2 && cardCount <= 6 && arrayCount == 0) {
    ItemStack itemStack=new ItemStack(IC2NuclearControl.itemEnergyArrayLocationCard,1,0);
    ItemCardEnergyArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
    return itemStack;
  }
 else   if (cardCount == 0 && arrayCount == 1) {
    int cnt=ItemCardEnergyArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt > 0) {
      return new ItemStack(IC2Items.getItem(""String_Node_Str"").getItem(),2 * cnt,0);
    }
  }
 else   if (arrayCount == 1 && cardCount > 0) {
    int cnt=ItemCardEnergyArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt + cardCount <= 6) {
      ItemStack itemStack=new ItemStack(IC2NuclearControl.itemEnergyArrayLocationCard,1,0);
      itemStack.setTagCompound((NBTTagCompound)array.getTagCompound().copy());
      ItemCardEnergyArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
      return itemStack;
    }
  }
  if (cardCountLiquid >= 2 && cardCountLiquid <= 6 && arrayCountLiquid == 0) {
    ItemStack itemStack=new ItemStack(IC2NuclearControl.itemLiquidArrayLocationCard,1,0);
    ItemCardLiquidArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
    return itemStack;
  }
 else   if (cardCountLiquid == 0 && arrayCountLiquid == 1) {
    int cnt=ItemCardLiquidArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt > 0) {
      return new ItemStack(IC2Items.getItem(""String_Node_Str"").getItem(),cnt,0);
    }
  }
 else   if (arrayCountLiquid == 1 && cardCountLiquid > 0) {
    int cnt=ItemCardLiquidArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt + cardCount <= 6) {
      ItemStack itemStack=new ItemStack(IC2NuclearControl.itemLiquidArrayLocationCard,1,0);
      itemStack.setTagCompound((NBTTagCompound)array.getTagCompound().copy());
      ItemCardLiquidArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
      return itemStack;
    }
  }
  return null;
}","@Override public ItemStack getCraftingResult(InventoryCrafting inventory){
  int inventoryLength=inventory.getSizeInventory();
  boolean fail=false;
  int cardCount=0;
  int arrayCount=0;
  int cardCountLiquid=0;
  int arrayCountLiquid=0;
  ItemStack array=null;
  Vector<ItemStack> cards=new Vector<ItemStack>();
  for (int i=0; i < inventoryLength; i++) {
    ItemStack itemStack=inventory.getStackInSlot(i);
    if (itemStack == null)     continue;
    if (itemStack.getItem() instanceof ItemCardEnergySensorLocation) {
      cards.add(itemStack);
      cardCount++;
    }
 else     if (itemStack.getItem() instanceof ItemCardMultipleSensorLocation && itemStack.getItemDamage() == ItemKitMultipleSensor.TYPE_LIQUID) {
      cards.add(itemStack);
      cardCountLiquid++;
    }
 else     if (itemStack.getItem() instanceof ItemCardEnergyArrayLocation) {
      array=itemStack;
      arrayCount++;
    }
 else     if (itemStack.getItem() instanceof ItemCardLiquidArrayLocation) {
      array=itemStack;
      arrayCountLiquid++;
    }
 else {
      fail=true;
      break;
    }
  }
  if (fail || (cardCount != 0 && cardCountLiquid != 0) || (arrayCount != 0 && arrayCountLiquid != 0)|| (cardCount != 0 && arrayCountLiquid != 0)|| (arrayCount != 0 && cardCountLiquid != 0)) {
    return null;
  }
  if (cardCount >= 2 && cardCount <= 6 && arrayCount == 0) {
    ItemStack itemStack=new ItemStack(IC2NuclearControl.itemEnergyArrayLocationCard,1,0);
    ItemCardEnergyArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
    return itemStack;
  }
 else   if (cardCount == 0 && arrayCount == 1) {
    int cnt=ItemCardEnergyArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt > 0) {
      return new ItemStack(IC2Items.getItem(""String_Node_Str"").getItem(),2 * cnt,0);
    }
  }
 else   if (arrayCount == 1 && cardCount > 0) {
    int cnt=ItemCardEnergyArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt + cardCount <= 6) {
      ItemStack itemStack=new ItemStack(IC2NuclearControl.itemEnergyArrayLocationCard,1,0);
      itemStack.setTagCompound((NBTTagCompound)array.getTagCompound().copy());
      ItemCardEnergyArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
      return itemStack;
    }
  }
  if (cardCountLiquid >= 2 && cardCountLiquid <= 6 && arrayCountLiquid == 0) {
    ItemStack itemStack=new ItemStack(IC2NuclearControl.itemLiquidArrayLocationCard,1,0);
    ItemCardLiquidArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
    return itemStack;
  }
 else   if (cardCountLiquid == 0 && arrayCountLiquid == 1) {
    int cnt=ItemCardLiquidArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt > 0) {
      return new ItemStack(IC2Items.getItem(""String_Node_Str"").getItem(),cnt,0);
    }
  }
 else   if (arrayCountLiquid == 1 && cardCountLiquid > 0) {
    int cnt=ItemCardLiquidArrayLocation.getCardCount(new CardWrapperImpl(array,-1));
    if (cnt + cardCount <= 6) {
      ItemStack itemStack=new ItemStack(IC2NuclearControl.itemLiquidArrayLocationCard);
      itemStack.setTagCompound((NBTTagCompound)array.getTagCompound().copy());
      ItemCardLiquidArrayLocation.initArray(new CardWrapperImpl(itemStack,-1),cards);
      return itemStack;
    }
  }
  return null;
}",0.9993900579444952
134709,"public BlockNuclearControlLight(){
  super(Material.redstoneLight);
  setHardness(0.3F);
  setStepSound(soundTypeGlass);
  setBlockName(""String_Node_Str"");
  setCreativeTab(IC2NuclearControl.tabIC2NC);
  register(LightDamages.DAMAGE_WHITE_OFF,false);
  register(LightDamages.DAMAGE_WHITE_ON,true);
}","public BlockNuclearControlLight(){
  super(Material.redstoneLight);
  setHardness(0.3F);
  setStepSound(soundTypeGlass);
  if (!isOn)   setCreativeTab(IC2NuclearControl.tabIC2NC);
  register(LightDamages.DAMAGE_WHITE_OFF,false);
  register(LightDamages.DAMAGE_WHITE_ON,true);
}",0.9236111111111112
134710,"@Override public int getLightValue(IBlockAccess world,int x,int y,int z){
  TileEntity entity=world.getTileEntity(x,y,z);
  if (entity instanceof TileEntityIndustrialAlarm) {
    return ((TileEntityIndustrialAlarm)entity).lightLevel;
  }
 else   if (entity instanceof TileEntityInfoPanel) {
    if (((TileEntityInfoPanel)entity).getPowered())     return 7;
 else     return 0;
  }
 else   if (entity instanceof TileEntityInfoPanelExtender) {
    TileEntityInfoPanelExtender extender=(TileEntityInfoPanelExtender)entity;
    if (extender.getScreen() != null) {
      TileEntityInfoPanel core=extender.getScreen().getCore(extender.getWorldObj());
      if (core != null && core.getPowered())       return 7;
 else       return 0;
    }
  }
 else   if (entity instanceof TileEntityLightOn) {
    return 15;
  }
  return getLightValue();
}","@Override public int getLightValue(IBlockAccess world,int x,int y,int z){
  TileEntity entity=world.getTileEntity(x,y,z);
  if (entity instanceof TileEntityIndustrialAlarm) {
    return ((TileEntityIndustrialAlarm)entity).lightLevel;
  }
 else   if (entity instanceof TileEntityInfoPanel) {
    if (((TileEntityInfoPanel)entity).getPowered())     return 7;
 else     return 0;
  }
 else   if (entity instanceof TileEntityInfoPanelExtender) {
    TileEntityInfoPanelExtender extender=(TileEntityInfoPanelExtender)entity;
    if (extender.getScreen() != null) {
      TileEntityInfoPanel core=extender.getScreen().getCore(extender.getWorldObj());
      if (core != null && core.getPowered())       return 7;
 else       return 0;
    }
  }
  return getLightValue();
}",0.93125
134711,"protected void registerBlocks(){
  GameRegistry.registerBlock(blockNuclearControlMain,ItemNuclearControlMain.class,""String_Node_Str"");
  GameRegistry.registerItem(itemToolThermometer,""String_Node_Str"");
  GameRegistry.registerItem(itemToolDigitalThermometer,""String_Node_Str"");
  GameRegistry.registerItem(itemRemoteSensorKit,""String_Node_Str"");
  GameRegistry.registerItem(itemEnergySensorKit,""String_Node_Str"");
  GameRegistry.registerItem(itemMultipleSensorKit,""String_Node_Str"");
  GameRegistry.registerItem(itemSensorLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemEnergySensorLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemMultipleSensorLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemEnergyArrayLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemTimeCard,""String_Node_Str"");
  GameRegistry.registerItem(itemUpgrade,""String_Node_Str"");
  GameRegistry.registerItem(itemTextCard,""String_Node_Str"");
  GameRegistry.registerItem(itemLiquidArrayLocationCard,""String_Node_Str"");
}","protected void registerBlocks(){
  GameRegistry.registerBlock(blockNuclearControlMain,ItemNuclearControlMain.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockNuclearControlLight,""String_Node_Str"");
  GameRegistry.registerItem(itemToolThermometer,""String_Node_Str"");
  GameRegistry.registerItem(itemToolDigitalThermometer,""String_Node_Str"");
  GameRegistry.registerItem(itemRemoteSensorKit,""String_Node_Str"");
  GameRegistry.registerItem(itemEnergySensorKit,""String_Node_Str"");
  GameRegistry.registerItem(itemMultipleSensorKit,""String_Node_Str"");
  GameRegistry.registerItem(itemSensorLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemEnergySensorLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemMultipleSensorLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemEnergyArrayLocationCard,""String_Node_Str"");
  GameRegistry.registerItem(itemTimeCard,""String_Node_Str"");
  GameRegistry.registerItem(itemUpgrade,""String_Node_Str"");
  GameRegistry.registerItem(itemTextCard,""String_Node_Str"");
  GameRegistry.registerItem(itemLiquidArrayLocationCard,""String_Node_Str"");
}",0.9658356417359188
134712,"protected void initBlocks(){
  blockNuclearControlMain=new BlockNuclearControlMain();
  itemToolThermometer=new ItemToolThermometer().setUnlocalizedName(""String_Node_Str"");
  itemToolDigitalThermometer=new ItemToolDigitalThermometer(1,80,80).setUnlocalizedName(""String_Node_Str"");
  itemSensorLocationCard=new ItemCardReactorSensorLocation().setUnlocalizedName(""String_Node_Str"");
  itemUpgrade=new ItemUpgrade();
  itemTimeCard=new ItemTimeCard().setUnlocalizedName(""String_Node_Str"");
  itemTextCard=new ItemCardText().setUnlocalizedName(""String_Node_Str"");
  itemEnergySensorLocationCard=new ItemCardEnergySensorLocation().setUnlocalizedName(""String_Node_Str"");
  itemEnergyArrayLocationCard=new ItemCardEnergyArrayLocation().setUnlocalizedName(""String_Node_Str"");
  itemMultipleSensorLocationCard=new ItemCardMultipleSensorLocation();
  itemMultipleSensorKit=new ItemKitMultipleSensor().setUnlocalizedName(""String_Node_Str"");
  itemEnergySensorKit=new ItemKitEnergySensor().setUnlocalizedName(""String_Node_Str"");
  itemRemoteSensorKit=new ItemKitReactorSensor().setUnlocalizedName(""String_Node_Str"");
  itemLiquidArrayLocationCard=new ItemCardLiquidArrayLocation().setUnlocalizedName(""String_Node_Str"");
}","protected void initBlocks(){
  blockNuclearControlMain=new BlockNuclearControlMain();
  blockNuclearControlLight=new BlockNuclearControlLight();
  itemToolThermometer=new ItemToolThermometer().setUnlocalizedName(""String_Node_Str"");
  itemToolDigitalThermometer=new ItemToolDigitalThermometer(1,80,80).setUnlocalizedName(""String_Node_Str"");
  itemSensorLocationCard=new ItemCardReactorSensorLocation().setUnlocalizedName(""String_Node_Str"");
  itemUpgrade=new ItemUpgrade();
  itemTimeCard=new ItemTimeCard().setUnlocalizedName(""String_Node_Str"");
  itemTextCard=new ItemCardText().setUnlocalizedName(""String_Node_Str"");
  itemEnergySensorLocationCard=new ItemCardEnergySensorLocation().setUnlocalizedName(""String_Node_Str"");
  itemEnergyArrayLocationCard=new ItemCardEnergyArrayLocation().setUnlocalizedName(""String_Node_Str"");
  itemMultipleSensorLocationCard=new ItemCardMultipleSensorLocation();
  itemMultipleSensorKit=new ItemKitMultipleSensor().setUnlocalizedName(""String_Node_Str"");
  itemEnergySensorKit=new ItemKitEnergySensor().setUnlocalizedName(""String_Node_Str"");
  itemRemoteSensorKit=new ItemKitReactorSensor().setUnlocalizedName(""String_Node_Str"");
  itemLiquidArrayLocationCard=new ItemCardLiquidArrayLocation().setUnlocalizedName(""String_Node_Str"");
}",0.9761808639483246
134713,"public BlockNuclearControlLight(Material material){
  super(material);
  setHardness(0.3F);
  setStepSound(soundTypeGlass);
  setBlockName(""String_Node_Str"");
  setCreativeTab(IC2NuclearControl.tabIC2NC);
}","public BlockNuclearControlLight(){
  super(Material.redstoneLight);
  setHardness(0.3F);
  setStepSound(soundTypeGlass);
  setBlockName(""String_Node_Str"");
  setCreativeTab(IC2NuclearControl.tabIC2NC);
  register(LightDamages.DAMAGE_WHITE_OFF,false);
  register(LightDamages.DAMAGE_WHITE_ON,true);
}",0.7049504950495049
134714,"public void register(int damage,boolean onOrOff){
  isOn=onOrOff;
  if (isOn)   damageOff=damage - 1;
 else   damageOff=damage;
}","public void register(int damage,boolean on){
  isOn=on;
  if (isOn)   damageOff=damage - 1;
 else   damageOff=damage;
}",0.9596774193548387
134715,"/** 
 * Downloads the file with passed URL to the passed folder
 * @param fileURL   URL of the file that should be downloaded
 * @param folderPath    The path to which this file should be saved
 * @return  The local full path of the downloaded file, empty string is returned if a problem occurs
 */
public static String downloadFile(String fileURL,String folderPath){
  URL u;
  InputStream is=null;
  DataInputStream dis;
  String fullFileName=""String_Node_Str"";
  FileOutputStream output=null;
  try {
    int lastSlashPos=fileURL.lastIndexOf(""String_Node_Str"");
    if (lastSlashPos < 0)     return ""String_Node_Str"";
    fullFileName=fileURL.substring(lastSlashPos + 1);
    File parentFolder=new File(folderPath);
    if (parentFolder != null)     parentFolder.mkdirs();
    fullFileName=folderPath + fullFileName;
    u=new URL(fileURL);
    is=u.openStream();
    dis=new DataInputStream(new BufferedInputStream(is));
    output=new FileOutputStream(fullFileName);
    byte[] fileContents=new byte[dis.available()];
    while (dis.available() != 0) {
      output.write(dis.readByte());
    }
    logger.info(""String_Node_Str"" + fileURL + ""String_Node_Str"");
  }
 catch (  MalformedURLException mue) {
    fullFileName=""String_Node_Str"";
  }
catch (  IOException ioe) {
    fullFileName=""String_Node_Str"";
  }
 finally {
    try {
      if (is != null)       is.close();
      if (output != null) {
        output.flush();
        output.close();
      }
    }
 catch (    IOException ioe) {
    }
  }
  return fullFileName;
}","/** 
 * Downloads the file with passed URL to the passed folder
 * @param fileURL   URL of the file that should be downloaded
 * @param folderPath    The path to which this file should be saved
 * @return  The local full path of the downloaded file, empty string is returned if a problem occurs
 */
public static String downloadFile(String fileURL,String folderPath){
  URL u;
  InputStream is=null;
  DataInputStream dis;
  String fullFileName=""String_Node_Str"";
  FileOutputStream output=null;
  try {
    int lastSlashPos=fileURL.lastIndexOf(""String_Node_Str"");
    if (lastSlashPos < 0)     return ""String_Node_Str"";
    fullFileName=fileURL.substring(lastSlashPos + 1);
    File parentFolder=new File(folderPath);
    if (parentFolder != null)     parentFolder.mkdirs();
    fullFileName=folderPath + fullFileName;
    u=new URL(fileURL);
    is=u.openStream();
    dis=new DataInputStream(new BufferedInputStream(is));
    output=new FileOutputStream(fullFileName);
    byte[] fileContents=new byte[dis.available()];
    while (dis.available() != 0) {
      output.write(dis.readByte());
    }
    logger.debug(""String_Node_Str"" + fileURL + ""String_Node_Str"");
  }
 catch (  MalformedURLException mue) {
    fullFileName=""String_Node_Str"";
  }
catch (  IOException ioe) {
    fullFileName=""String_Node_Str"";
  }
 finally {
    try {
      if (is != null)       is.close();
      if (output != null) {
        output.flush();
        output.close();
      }
    }
 catch (    IOException ioe) {
    }
  }
  return fullFileName;
}",0.997065536354744
134716,"/** 
 * Decompresses the passed GZip file, and returns the filename of the decompressed file
 * @param filename  The filename of compressed file
 * @param deleteCompressedFile  Whether to delete the original compressed file upon completion
 * @return  The filename of the output file, or empty string if a problem occurs
 */
public static String decompressGZipFile(String filename,boolean deleteCompressedFile){
  String outFilename=""String_Node_Str"";
  try {
    int lastDotPosition=filename.lastIndexOf(""String_Node_Str"");
    outFilename=filename.substring(0,lastDotPosition);
    FileInputStream inStream=new FileInputStream(filename);
    GZIPInputStream gInStream=new GZIPInputStream(inStream);
    FileOutputStream outstream=new FileOutputStream(outFilename);
    byte[] buf=new byte[1024];
    int len;
    if (gInStream.available() == 0) {
      String dummyContent=""String_Node_Str"";
      outstream.write(dummyContent.getBytes());
    }
 else {
      while ((len=gInStream.read(buf)) > 0) {
        outstream.write(buf,0,len);
      }
    }
    logger.info(""String_Node_Str"" + filename + ""String_Node_Str""+ outFilename);
    gInStream.close();
    outstream.close();
  }
 catch (  IOException ioe) {
    logger.warn(""String_Node_Str"" + filename + ""String_Node_Str""+ ioe.getMessage(),ioe);
    outFilename=""String_Node_Str"";
  }
 finally {
    if (deleteCompressedFile)     (new File(filename)).delete();
    return outFilename;
  }
}","/** 
 * Decompresses the passed GZip file, and returns the filename of the decompressed file
 * @param filename  The filename of compressed file
 * @param deleteCompressedFile  Whether to delete the original compressed file upon completion
 * @return  The filename of the output file, or empty string if a problem occurs
 */
public static String decompressGZipFile(String filename,boolean deleteCompressedFile){
  String outFilename=""String_Node_Str"";
  int lastDotPosition=filename.lastIndexOf(""String_Node_Str"");
  outFilename=filename.substring(0,lastDotPosition);
  try (FileInputStream fis=new FileInputStream(filename);GZIPInputStream gis=new GZIPInputStream(fis);InputStreamReader isr=new InputStreamReader(gis,""String_Node_Str"");BufferedReader in=new BufferedReader(isr);OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(outFilename),""String_Node_Str"")){
    String line=null;
    while ((line=in.readLine()) != null) {
      out.write(line + ""String_Node_Str"");
    }
    logger.info(""String_Node_Str"" + filename + ""String_Node_Str""+ outFilename);
  }
 catch (  EOFException e) {
    logger.error(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
catch (  IOException ioe) {
    logger.warn(""String_Node_Str"" + filename + ""String_Node_Str""+ ioe.getMessage(),ioe);
    outFilename=""String_Node_Str"";
  }
 finally {
    if (deleteCompressedFile)     (new File(filename)).delete();
    return outFilename;
  }
}",0.6812348248352411
134717,"public static List<String> getTriplesFromFile(String filename){
  List<String> lines=new ArrayList<>();
  try (BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(filename),""String_Node_Str""))){
    String line=null;
    while ((line=in.readLine().trim()) != null) {
      if (line.isEmpty())       lines.add(line.trim());
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename + ""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new IllegalArgumentException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename,e);
  }
catch (  NullPointerException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename,e);
  }
  return lines;
}","public static List<String> getTriplesFromFile(String filename){
  List<String> lines=new ArrayList<>();
  try (BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(filename),""String_Node_Str""))){
    String line=null;
    while ((line=in.readLine()) != null) {
      if (!line.trim().isEmpty())       lines.add(line.trim());
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename + ""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new IllegalArgumentException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename,e);
  }
catch (  NullPointerException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename,e);
  }
  return lines;
}",0.9861695730607336
134718,"public BarStore(Dispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.dispatcher.register(BarStore.class,new Store.Callback(){
    @Override public Agreement voteFor(    Action action){
      return vote(action);
    }
    @Override public void complete(    Action action,    Dispatcher.Channel channel){
      complete(action,channel);
    }
  }
);
}","public BarStore(Dispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.dispatcher.register(BarStore.class,new Store.Callback(){
    @Override public Agreement voteFor(    Action action){
      return vote(action);
    }
    @Override public void complete(    Action action,    Dispatcher.Channel channel){
      process(action,channel);
    }
  }
);
}",0.9790209790209792
134719,"@Override public void complete(Action action,Dispatcher.Channel channel){
  complete(action,channel);
}","@Override public void complete(Action action,Dispatcher.Channel channel){
  process(action,channel);
}",0.946341463414634
134720,"public FooStore(Dispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.dispatcher.register(FooStore.class,new Store.Callback(){
    @Override public Agreement voteFor(    Action action){
      return vote(action);
    }
    @Override public void complete(    Action action,    Dispatcher.Channel channel){
      complete(action,channel);
    }
  }
);
}","public FooStore(Dispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.dispatcher.register(FooStore.class,new Store.Callback(){
    @Override public Agreement voteFor(    Action action){
      return vote(action);
    }
    @Override public void complete(    Action action,    Dispatcher.Channel channel){
      process(action,channel);
    }
  }
);
}",0.9790209790209792
134721,"@Override public void complete(Action action,Dispatcher.Channel channel){
  complete(action,channel);
}","@Override public void complete(Action action,Dispatcher.Channel channel){
  process(action,channel);
}",0.946341463414634
134722,"/** 
 * Dtw Barycenter Averaging (DBA)
 * @param C average sequence to update
 * @param sequences set of sequences to average
 * @param w warping window size for DTW
 */
public static double[] DBA_update(double[] C,double[][] sequences,int w){
  final ArrayList<Double>[] tupleAssociation=new ArrayList[C.length];
  for (int i=0; i < tupleAssociation.length; i++) {
    tupleAssociation[i]=new ArrayList<Double>(sequences.length);
  }
  int nbTuplesAverageSeq, i, j, indiceRes;
  double res=0.0;
  int centerLength=C.length;
  int seqLength, jStart, jStop;
  ;
  for (  double[] T : sequences) {
    seqLength=T.length;
    costMatrix[0][0]=distanceTo(C[0],T[0]);
    pathMatrix[0][0]=NIL;
    optimalPathLength[0][0]=0;
    for (i=1; i < Math.min(centerLength,1 + w); i++) {
      costMatrix[i][0]=costMatrix[i - 1][0] + distanceTo(C[i],T[0]);
      pathMatrix[i][0]=UP;
      optimalPathLength[i][0]=i;
    }
    for (j=1; j < Math.min(seqLength,1 + w); j++) {
      costMatrix[0][j]=costMatrix[0][j - 1] + distanceTo(T[j],C[0]);
      pathMatrix[0][j]=LEFT;
      optimalPathLength[0][j]=j;
    }
    if (j < seqLength)     costMatrix[0][j]=Double.POSITIVE_INFINITY;
    for (i=1; i < centerLength; i++) {
      jStart=Math.max(1,i - w);
      jStop=Math.min(seqLength,i + w + 1);
      costMatrix[i][jStart - 1]=Double.POSITIVE_INFINITY;
      for (j=jStart; j < jStop; j++) {
        indiceRes=ArgMin3(costMatrix[i - 1][j - 1],costMatrix[i][j - 1],costMatrix[i - 1][j]);
        pathMatrix[i][j]=indiceRes;
switch (indiceRes) {
case DIAGONAL:
          res=costMatrix[i - 1][j - 1];
        optimalPathLength[i][j]=optimalPathLength[i - 1][j - 1] + 1;
      break;
case LEFT:
    res=costMatrix[i][j - 1];
  optimalPathLength[i][j]=optimalPathLength[i][j - 1] + 1;
break;
case UP:
res=costMatrix[i - 1][j];
optimalPathLength[i][j]=optimalPathLength[i - 1][j] + 1;
break;
}
costMatrix[i][j]=res + distanceTo(C[i],T[j]);
}
if (jStop < seqLength) costMatrix[i][jStop]=Double.POSITIVE_INFINITY;
}
nbTuplesAverageSeq=optimalPathLength[centerLength - 1][seqLength - 1] + 1;
i=centerLength - 1;
j=seqLength - 1;
for (int t=nbTuplesAverageSeq - 1; t >= 0; t--) {
tupleAssociation[i].add(T[j]);
switch (pathMatrix[i][j]) {
case DIAGONAL:
i=i - 1;
j=j - 1;
break;
case LEFT:
j=j - 1;
break;
case UP:
i=i - 1;
break;
}
}
}
for (int t=0; t < centerLength; t++) {
C[t]=barycenter((tupleAssociation[t].toArray()));
}
return C;
}","/** 
 * Dtw Barycenter Averaging (DBA)
 * @param C average sequence to update
 * @param sequences set of sequences to average
 * @param w warping window size for DTW
 */
public static double[] DBA_update(double[] C,double[][] sequences,int w){
  final ArrayList<Double>[] tupleAssociation=new ArrayList[C.length];
  for (int i=0; i < tupleAssociation.length; i++) {
    tupleAssociation[i]=new ArrayList<Double>(sequences.length);
  }
  int nbTuplesAverageSeq, i, j, indiceRes;
  double res=0.0;
  int centerLength=C.length;
  int seqLength, jStart, jStop;
  ;
  for (  double[] T : sequences) {
    seqLength=T.length;
    costMatrix[0][0]=distanceTo(C[0],T[0]);
    pathMatrix[0][0]=NIL;
    optimalPathLength[0][0]=0;
    for (i=1; i < Math.min(centerLength,1 + w); i++) {
      costMatrix[i][0]=costMatrix[i - 1][0] + distanceTo(C[i],T[0]);
      pathMatrix[i][0]=UP;
      optimalPathLength[i][0]=i;
    }
    for (j=1; j < Math.min(seqLength,1 + w); j++) {
      costMatrix[0][j]=costMatrix[0][j - 1] + distanceTo(T[j],C[0]);
      pathMatrix[0][j]=LEFT;
      optimalPathLength[0][j]=j;
    }
    if (j < seqLength)     costMatrix[0][j]=Double.POSITIVE_INFINITY;
    for (i=1; i < centerLength; i++) {
      jStart=Math.max(1,i - w);
      jStop=Math.min(seqLength,i + w + 1);
      if (jStart != 1)       costMatrix[i][jStart - 1]=Double.POSITIVE_INFINITY;
      for (j=jStart; j < jStop; j++) {
        indiceRes=ArgMin3(costMatrix[i - 1][j - 1],costMatrix[i][j - 1],costMatrix[i - 1][j]);
        pathMatrix[i][j]=indiceRes;
switch (indiceRes) {
case DIAGONAL:
          res=costMatrix[i - 1][j - 1];
        optimalPathLength[i][j]=optimalPathLength[i - 1][j - 1] + 1;
      break;
case LEFT:
    res=costMatrix[i][j - 1];
  optimalPathLength[i][j]=optimalPathLength[i][j - 1] + 1;
break;
case UP:
res=costMatrix[i - 1][j];
optimalPathLength[i][j]=optimalPathLength[i - 1][j] + 1;
break;
}
costMatrix[i][j]=res + distanceTo(C[i],T[j]);
}
if (jStop < seqLength) costMatrix[i][jStop]=Double.POSITIVE_INFINITY;
}
nbTuplesAverageSeq=optimalPathLength[centerLength - 1][seqLength - 1] + 1;
i=centerLength - 1;
j=seqLength - 1;
for (int t=nbTuplesAverageSeq - 1; t >= 0; t--) {
tupleAssociation[i].add(T[j]);
switch (pathMatrix[i][j]) {
case DIAGONAL:
i=i - 1;
j=j - 1;
break;
case LEFT:
j=j - 1;
break;
case UP:
i=i - 1;
break;
}
}
}
for (int t=0; t < centerLength; t++) {
C[t]=barycenter((tupleAssociation[t].toArray()));
}
return C;
}",0.9952684632791606
134723,"/** 
 */
private void sendAlarm(int code){
  try {
    ACSFaultState fs=ACSAlarmSystemInterfaceFactory.createFaultState(""String_Node_Str"",""String_Node_Str"",code);
    fs.setDescriptor(ACSFaultState.TERMINATE);
    fs.setUserTimestamp(new Timestamp(System.currentTimeMillis()));
    Properties props=new Properties();
    props.setProperty(ACSFaultState.ASI_PREFIX_PROPERTY,""String_Node_Str"");
    props.setProperty(ACSFaultState.ASI_SUFFIX_PROPERTY,""String_Node_Str"");
    fs.setUserProperties(props);
    alarmSource.push(fs);
  }
 catch (  Exception e) {
    m_logger.warning(""String_Node_Str"" + e);
  }
}","/** 
 */
private void sendAlarm(int code){
  cs.getAlarmSource().setAlarm(""String_Node_Str"",""String_Node_Str"",code,true);
}",0.2931506849315068
134724,"@Override public short getArchiveLevel(){
  return this.archiveLogLevel;
}","@Override public short getArchiveLevel(){
  return this.archiveLogLevel.shortValue();
}",0.9192546583850932
134725,"/** 
 */
public ArchiveLoggerImpl(){
  super();
}","/** 
 * Constructor
 */
public ArchiveLoggerImpl(){
  super();
}",0.8672566371681416
134726,"/** 
 * @see alma.acs.component.ComponentLifecycle#initialize()
 */
public void initialize(ContainerServices containerServices) throws ComponentLifecycleException {
  super.initialize(containerServices);
  cs=containerServices;
  m_logger=cs.getLogger();
  try {
    alarmSource=ACSAlarmSystemInterfaceFactory.createSource(""String_Node_Str"");
  }
 catch (  Exception e) {
    m_logger.severe(""String_Node_Str"" + e);
  }
  try {
    DBConfiguration config=ArchiveConfiguration.instance(m_logger);
    String logFilePath=getString(config,""String_Node_Str"");
    File f=new File(logFilePath);
    if (!f.exists())     f.mkdirs();
    short fileMax=getInteger(config,""String_Node_Str"").shortValue();
    int fileSizeLimit=getInteger(config,""String_Node_Str"").intValue();
    if (fileMax < 1 || fileSizeLimit < 100000) {
      throw new ComponentLifecycleException(""String_Node_Str"");
    }
    m_logger.info(""String_Node_Str"" + logFilePath + ""String_Node_Str""+ fileSizeLimit+ ""String_Node_Str""+ fileMax);
    connectToLoggingChannel(logFilePath,fileMax,fileSizeLimit);
  }
 catch (  DatabaseException e) {
    String errorMessage=""String_Node_Str"" + e.getMessage();
    m_logger.severe(errorMessage);
    sendAlarm(2);
    throw new ComponentLifecycleException(errorMessage);
  }
}","/** 
 * @see alma.acs.component.ComponentLifecycle#initialize()
 */
public void initialize(ContainerServices containerServices) throws ComponentLifecycleException {
  super.initialize(containerServices);
  cs=containerServices;
  m_logger=cs.getLogger();
  try {
    String logFilePath=System.getProperty(ArchiveLoggerImpl.LOGDIR_PROPNAME,ArchiveLoggerImpl.DEFAULLOGDIR);
    File f=new File(logFilePath);
    if (!f.exists()) {
      f.mkdirs();
    }
    int fileMax=Integer.getInteger(ArchiveLoggerImpl.MAXNUMBEROFFILES_PROPNAME,ArchiveLoggerImpl.DEFAULTMAXNUMBEROFFILES);
    int fileSizeLimit=Integer.getInteger(ArchiveLoggerImpl.MAXFILESIZE_PROPNAME,ArchiveLoggerImpl.DEFAULTMAXFILESIZE);
    if (fileMax < 1 || fileSizeLimit < 100000) {
      StringBuilder str=new StringBuilder(ArchiveLoggerImpl.MAXNUMBEROFFILES_PROPNAME);
      str.append(""String_Node_Str"");
      str.append(ArchiveLoggerImpl.MAXFILESIZE_PROPNAME);
      str.append(""String_Node_Str"");
      throw new ComponentLifecycleException(str.toString());
    }
    StringBuilder str=new StringBuilder(""String_Node_Str"");
    str.append(logFilePath);
    str.append(""String_Node_Str"");
    str.append(fileSizeLimit);
    str.append(""String_Node_Str"");
    str.append(fileMax);
    str.append(')');
    m_logger.info(str.toString());
    connectToLoggingChannel(logFilePath,fileMax,fileSizeLimit);
  }
 catch (  Throwable t) {
    String errorMessage=""String_Node_Str"" + t.getMessage();
    m_logger.severe(errorMessage);
    sendAlarm(2);
    throw new ComponentLifecycleException(errorMessage,t);
  }
}",0.5166725166725167
134727,"/** 
 * @param logFilePath
 * @param fileMax
 * @param fileSizeLimit
 * @throws ComponentLifecycleException
 */
private void connectToLoggingChannel(String logFilePath,short fileMax,int fileSizeLimit) throws ComponentLifecycleException {
  try {
    ArchiveQueueFileHandler queueFileHandler=new ArchiveQueueFileHandler(m_logger,logFilePath,fileMax,fileSizeLimit);
    queueFileHandler.setAlarmHandler(new AlarmHandler(){
      @Override public void sendAlarm(      int code){
        this.sendAlarm(code);
      }
    }
);
    engine=new LCEngine(queueFileHandler);
    engine.connect(cs.getAdvancedContainerServices().getORB(),null);
    engine.enableAutoReconnection(true);
  }
 catch (  Throwable e) {
    m_logger.severe(""String_Node_Str"");
    sendAlarm(2);
    throw new ComponentLifecycleException(e);
  }
}","/** 
 * @param logFilePath
 * @param fileMax
 * @param fileSizeLimit
 * @throws ComponentLifecycleException
 */
private void connectToLoggingChannel(String logFilePath,int fileMax,int fileSizeLimit) throws ComponentLifecycleException {
  try {
    ArchiveQueueFileHandler queueFileHandler=new ArchiveQueueFileHandler(m_logger,logFilePath,fileMax,fileSizeLimit);
    queueFileHandler.setAlarmHandler(new AlarmHandler(){
      @Override public void sendAlarm(      int code){
        this.sendAlarm(code);
      }
    }
);
    engine=new LCEngine(queueFileHandler);
    engine.connect(cs.getAdvancedContainerServices().getORB(),null);
    engine.enableAutoReconnection(true);
  }
 catch (  Throwable e) {
    m_logger.severe(""String_Node_Str"");
    sendAlarm(2);
    throw new ComponentLifecycleException(e);
  }
}",0.996309963099631
134728,"@Override public void setArchiveLevel(short newLevel){
  this.archiveLogLevel=newLevel;
}","@Override public void setArchiveLevel(short newLevel){
  this.archiveLogLevel.set(newLevel);
}",0.9617486338797814
134729,"/** 
 * @see com.cosylab.logging.engine.cache.ILogQueueFileHandler#getNewFile()
 */
@Override public File getNewFile() throws IOException {
  final String startTimestamp=new ArchiveTimeStamp(new Timestamp(System.currentTimeMillis())).toISOString();
  final String endTimestamp=""String_Node_Str"";
  String fileName=String.format(FILENAME_TEMPLATE,startTimestamp,endTimestamp);
  return new File(logDir,fileName);
}","/** 
 * @see com.cosylab.logging.engine.cache.ILogQueueFileHandler#getNewFile()
 */
@Override public File getNewFile() throws IOException {
  final String startTimestamp=IsoDateFormat.formatCurrentDate();
  final String endTimestamp=""String_Node_Str"";
  String fileName=String.format(FILENAME_TEMPLATE,startTimestamp,endTimestamp);
  return new File(logDir,fileName);
}",0.8670076726342711
134730,"public void testNoCascading() throws Exception {
  try {
    Configuration conf=new Configuration();
    conf.setConfigurationName(""String_Node_Str"");
    conf.setFullName(""String_Node_Str"");
    conf.setActive(true);
    conf.setCreationTime(new Date());
    conf.setDescription(""String_Node_Str"");
    EventChannel ec=new EventChannel();
    ec.setName(""String_Node_Str"");
    ec.setPath(""String_Node_Str"");
    ec.setConfiguration(conf);
    try {
      hibernateUtil.beginTransaction();
      hibernateUtil.getSession().save(ec);
      hibernateUtil.commitTransaction();
      fail(""String_Node_Str"");
    }
 catch (    Throwable t) {
      hibernateUtil.closeSession();
    }
    ec=new EventChannel();
    ec.setName(""String_Node_Str"");
    ec.setPath(""String_Node_Str"");
    ec.setConfiguration(conf);
    hibernateUtil.beginTransaction();
    hibernateUtil.getSession().save(conf);
    hibernateUtil.getSession().save(ec);
    hibernateUtil.commitTransaction();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    throw ex;
  }
 finally {
    dropDB();
  }
}","public void testNoCascading() throws Exception {
  try {
    Configuration conf=new Configuration();
    conf.setConfigurationName(""String_Node_Str"");
    conf.setFullName(""String_Node_Str"");
    conf.setActive(true);
    conf.setCreationTime(new Date());
    conf.setDescription(""String_Node_Str"");
    EventChannel ec=new EventChannel();
    ec.setName(""String_Node_Str"");
    ec.setPath(""String_Node_Str"");
    ec.setConfiguration(conf);
    try {
      hibernateUtil.beginTransaction();
      hibernateUtil.getSession().save(ec);
      hibernateUtil.commitTransaction();
      fail(""String_Node_Str"");
    }
 catch (    Throwable t) {
      hibernateUtil.closeSession();
    }
    ec=new EventChannel();
    ec.setName(""String_Node_Str"");
    ec.setPath(""String_Node_Str"");
    ec.setConfiguration(conf);
    hibernateUtil.beginTransaction();
    hibernateUtil.getSession().save(conf);
    hibernateUtil.getSession().save(ec);
    hibernateUtil.commitTransaction();
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    throw ex;
  }
}",0.9866421004145556
134731,"/** 
 * Logs the given <code>LogRecord</code>.  The record can be modified or dropped by the optional filters provided in   {@link #addLogRecordFilter(alma.acs.logging.AcsLogger.LogRecordFilter)}.  <p> Adding of context information: <ul> <li> If the LogRecord has a parameter that is a map which contains additional information  about the line of code, thread, etc., the log record will be taken as provided, and no context information will be added. This can be useful if <ul> <li> the log record was reconstructed from a remote error by the ACS error handling code (see <code>AcsJException</code>), or <li> if in very exceptional cases application code needs to manipulate such information by hand. </ul> <li> otherwise, context information is inferred, similar to   {@link LogRecord#inferCaller()}, but additionally including thread name and line of code. </ul>   Note that by overloading this method, we intercept all logging activities of the base class.
 * @see java.util.logging.Logger#log(java.util.logging.LogRecord)
 */
public void log(LogRecord record){
  if (record.getLevel().intValue() == Level.OFF.intValue() || record.getLevel().intValue() == AcsLogLevel.OFF.intValue()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StopWatch sw_all=null;
  if (PROFILE) {
    sw_all=new StopWatch(null);
  }
  Logger loggerWithLevel=this;
  while (loggerWithLevel != null && loggerWithLevel.getLevel() == null && loggerWithLevel.getParent() != null) {
    loggerWithLevel=loggerWithLevel.getParent();
  }
  int levelValue=-1;
  if (loggerWithLevel.getLevel() == null) {
    if (!noLevelWarningPrinted) {
      System.out.println(""String_Node_Str"" + getLoggerName() + ""String_Node_Str"");
      noLevelWarningPrinted=true;
    }
    levelValue=Level.ALL.intValue();
  }
 else {
    noLevelWarningPrinted=false;
    levelValue=loggerWithLevel.getLevel().intValue();
  }
  if (record.getLevel().intValue() < levelValue || levelValue == offValue) {
    return;
  }
  if (loggerName != null) {
    record.setLoggerName(loggerName);
  }
  LogParameterUtil paramUtil=new LogParameterUtil(record);
  Map<String,Object> specialProperties=paramUtil.extractSpecialPropertiesMap();
  if (specialProperties == null) {
    specialProperties=LogParameterUtil.createPropertiesMap();
    List<Object> paramList=paramUtil.getNonSpecialPropertiesMapParameters();
    paramList.add(0,specialProperties);
    record.setParameters(paramList.toArray());
    String threadName=Thread.currentThread().getName();
    specialProperties.put(LogParameterUtil.PARAM_THREAD_NAME,threadName);
    specialProperties.put(LogParameterUtil.PARAM_PROCESSNAME,this.processName);
    specialProperties.put(LogParameterUtil.PARAM_SOURCEOBJECT,this.sourceObject);
    StackTraceElement stack[]=(new Throwable()).getStackTrace();
    int ix=0;
    boolean foundNonLogFrame=false;
    while (ix < stack.length) {
      StackTraceElement frame=stack[ix];
      String cname=frame.getClassName();
      if (!foundNonLogFrame && !loggerClassNames.contains(cname)) {
        record.setSourceClassName(cname);
        record.setSourceMethodName(frame.getMethodName());
        int lineNumber=frame.getLineNumber();
        specialProperties.put(LogParameterUtil.PARAM_LINE,Long.valueOf(lineNumber));
        foundNonLogFrame=true;
        if (this.callStacksToBeIgnored.isEmpty()) {
          break;
        }
      }
      if (foundNonLogFrame) {
        if (callStacksToBeIgnored.contains(concatenateIgnoreLogData(cname,frame.getMethodName()))) {
          return;
        }
      }
      ix++;
    }
  }
  StopWatch sw_afterAcsLogger=null;
  if (PROFILE) {
    sw_afterAcsLogger=sw_all.createStopWatchForSubtask(""String_Node_Str"");
    LogParameterUtil logParamUtil=new LogParameterUtil(record);
    logParamUtil.setStopWatch(sw_afterAcsLogger);
  }
  if (delegate != null) {
    delegate.log(record);
  }
 else {
    super.log(record);
  }
  if (PROFILE) {
    sw_afterAcsLogger.stop();
    sw_all.stop();
    long elapsedNanos=sw_all.getLapTimeNanos();
    if (profileSlowestCallStopWatch == null || profileSlowestCallStopWatch.getLapTimeNanos() > elapsedNanos) {
      profileSlowestCallStopWatch=sw_all;
    }
    profileLogTimeStat.addValue(elapsedNanos);
    if (profileLogTimeStat.getN() >= profileStatSize) {
      String msg=""String_Node_Str"" + profileStatSize + ""String_Node_Str"";
      msg+=""String_Node_Str"" + profileLogTimeStat.getMean() * 1E-6;
      msg+=""String_Node_Str"" + profileLogTimeStat.getStandardDeviation() * 1E-6;
      msg+=""String_Node_Str"";
      System.out.println(msg);
      profileSlowestCallStopWatch.logLapTimeWithSubtaskDetails(""String_Node_Str"",Level.INFO);
      profileSlowestCallStopWatch=null;
      profileLogTimeStat.clear();
    }
  }
}","/** 
 * Logs the given <code>LogRecord</code>.  The record can be modified or dropped by the optional filters provided in   {@link #addLogRecordFilter(alma.acs.logging.AcsLogger.LogRecordFilter)}.  <p> Adding of context information: <ul> <li> If the LogRecord has a parameter that is a map which contains additional information  about the line of code, thread, etc., the log record will be taken as provided, and no context information will be added. This can be useful if <ul> <li> the log record was reconstructed from a remote error by the ACS error handling code (see <code>AcsJException</code>), or <li> if in very exceptional cases application code needs to manipulate such information by hand. </ul> <li> otherwise, context information is inferred, similar to   {@link LogRecord#inferCaller()}, but additionally including thread name and line of code. </ul>   Note that by overloading this method, we intercept all logging activities of the base class.
 * @see java.util.logging.Logger#log(java.util.logging.LogRecord)
 */
public void log(LogRecord record){
  if (record.getLevel().intValue() == Level.OFF.intValue() || record.getLevel().intValue() == AcsLogLevel.OFF.intValue()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StopWatch sw_all=null;
  if (PROFILE) {
    sw_all=new StopWatch(null);
  }
  Logger loggerWithLevel=this;
  while (loggerWithLevel != null && loggerWithLevel.getLevel() == null && loggerWithLevel.getParent() != null) {
    loggerWithLevel=loggerWithLevel.getParent();
  }
  int levelValue=-1;
  if (loggerWithLevel.getLevel() == null) {
    if (!noLevelWarningPrinted) {
      System.out.println(""String_Node_Str"" + getLoggerName() + ""String_Node_Str"");
      noLevelWarningPrinted=true;
    }
    levelValue=Level.ALL.intValue();
  }
 else {
    noLevelWarningPrinted=false;
    levelValue=loggerWithLevel.getLevel().intValue();
  }
  if (record.getLevel().intValue() < levelValue || levelValue == offValue) {
    return;
  }
  if (loggerName != null) {
    record.setLoggerName(loggerName);
  }
  LogParameterUtil paramUtil=new LogParameterUtil(record);
  Map<String,Object> specialProperties=paramUtil.extractSpecialPropertiesMap();
  if (specialProperties == null) {
    specialProperties=LogParameterUtil.createPropertiesMap();
    List<Object> paramList=paramUtil.getNonSpecialPropertiesMapParameters();
    paramList.add(0,specialProperties);
    record.setParameters(paramList.toArray());
    String threadName=Thread.currentThread().getName();
    specialProperties.put(LogParameterUtil.PARAM_THREAD_NAME,threadName);
    specialProperties.put(LogParameterUtil.PARAM_PROCESSNAME,this.processName);
    specialProperties.put(LogParameterUtil.PARAM_SOURCEOBJECT,this.sourceObject);
    StackTraceElement stack[]=(new Throwable()).getStackTrace();
    int ix=0;
    boolean foundNonLogFrame=false;
    while (ix < stack.length) {
      StackTraceElement frame=stack[ix];
      String cname=frame.getClassName();
      if (!foundNonLogFrame && !loggerClassNames.contains(cname)) {
        record.setSourceClassName(cname);
        record.setSourceMethodName(frame.getMethodName());
        int lineNumber=frame.getLineNumber();
        specialProperties.put(LogParameterUtil.PARAM_LINE,Long.valueOf(lineNumber));
        foundNonLogFrame=true;
        if (this.callStacksToBeIgnored.isEmpty()) {
          break;
        }
      }
      if (foundNonLogFrame) {
        if (callStacksToBeIgnored.contains(concatenateIgnoreLogData(cname,frame.getMethodName()))) {
          return;
        }
      }
      ix++;
    }
  }
  StopWatch sw_afterAcsLogger=null;
  if (PROFILE) {
    sw_afterAcsLogger=sw_all.createStopWatchForSubtask(""String_Node_Str"");
    LogParameterUtil logParamUtil=new LogParameterUtil(record);
    logParamUtil.setStopWatch(sw_afterAcsLogger);
  }
  if (delegate != null) {
    delegate.log(record);
  }
 else {
    super.log(record);
  }
  if (PROFILE) {
    sw_afterAcsLogger.stop();
    sw_all.stop();
    long elapsedNanos=sw_all.getLapTimeNanos();
    if (profileSlowestCallStopWatch == null || profileSlowestCallStopWatch.getLapTimeNanos() < elapsedNanos) {
      profileSlowestCallStopWatch=sw_all;
    }
    profileLogTimeStat.addValue(elapsedNanos);
    if (profileLogTimeStat.getN() >= profileStatSize) {
      String msg=""String_Node_Str"" + profileStatSize + ""String_Node_Str"";
      msg+=""String_Node_Str"" + profileLogTimeStat.getMean() * 1E-6;
      msg+=""String_Node_Str"" + profileLogTimeStat.getStandardDeviation() * 1E-6;
      msg+=""String_Node_Str"";
      System.out.println(msg);
      profileSlowestCallStopWatch.logLapTimeWithSubtaskDetails(""String_Node_Str"",Level.INFO);
      profileSlowestCallStopWatch=null;
      profileLogTimeStat.clear();
    }
  }
}",0.9997897392767032
134732,"/** 
 * Adds a <code>LogRecord</code> to the internal queue, so that it gets scheduled for logging. If a high-level log record should be sent out immediately, the caller of this method should  subsequently call   {@link #flush()}, as the log method itself does not trigger a flush based on levels. <p> Threading note: it seems ok to make this method ""synchronized"". This avoids problems with stale queue size,  even though the damage would be small since the treatment of queue size is somewhat arbitrary anyway. Synchronization should not block callers long at all because flushing is done in a separate thread and only gets triggered here. <p> TODO: there is currently a minor problem with queue overflow: log records get drained from the queue, and when they can't be sent off to the log service, they are resubmitted to the queue. It could happen that in the meantime, some other record with INFO or higher level has been added to the queue, and that resubmitting some of the even more important records may fail. The solution would be to replace the 70%-filter rule with a running priority filter: any incoming record can kick out a less important record if the queue is full. 
 * @param logRecord  to be logged
 * @return true if logRecord was added to the queue for logging. False if queue was too full for this record.
 */
synchronized boolean log(LogRecord logRecord){
  int oldSize=queue.size();
  if (oldSize >= maxQueueSize) {
    boolean firstTimeOverflow=!outOfCapacity.getAndSet(true);
    if (firstTimeOverflow) {
      preOverflowFlushPeriod=currentFlushPeriod;
      setPeriodicFlushing(10000);
    }
    if (LOSSLESS) {
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ex) {
        }
      }
 while (queue.size() >= maxQueueSize);
    }
 else {
      if (DEBUG || firstTimeOverflow) {
        System.out.println(""String_Node_Str"" + logRecord.getMessage() + ""String_Node_Str"");
      }
      return false;
    }
  }
  if (outOfCapacity.getAndSet(false)) {
    setPeriodicFlushing(preOverflowFlushPeriod);
    preOverflowFlushPeriod=0;
    System.out.println(""String_Node_Str"");
  }
  if (!LOSSLESS) {
    final int filterThreshold=maxQueueSize * 7 / 10;
    if (oldSize >= filterThreshold && logRecord.getLevel().intValue() < Level.INFO.intValue()) {
      boolean firstTimeScarce=!scarceCapacity.getAndSet(true);
      if (DEBUG || firstTimeScarce) {
        System.out.println(""String_Node_Str"" + (oldSize + 1) + ""String_Node_Str""+ maxQueueSize+ ""String_Node_Str""+ logRecord.getMessage()+ ""String_Node_Str"");
      }
      return false;
    }
 else {
      scarceCapacity.set(false);
    }
  }
  queue.put(logRecord);
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + logRecord.getMessage());
  }
  flushIfEnoughRecords(true);
  return true;
}","/** 
 * Adds a <code>LogRecord</code> to the internal queue, so that it gets scheduled for logging. If a high-level log record should be sent out immediately, the caller of this method should  subsequently call   {@link #flush()}, as the log method itself does not trigger a flush based on levels. <p> Threading note: it seems ok to make this method ""synchronized"". This avoids problems with stale queue size,  even though the damage would be small since the treatment of queue size is somewhat arbitrary anyway. Synchronization should not block callers long at all because flushing is done in a separate thread and only gets triggered here. <p> TODO: there is currently a minor problem with queue overflow: log records get drained from the queue, and when they can't be sent off to the log service, they are resubmitted to the queue. It could happen that in the meantime, some other record with INFO or higher level has been added to the queue, and that resubmitting some of the even more important records may fail. The solution would be to replace the 70%-filter rule with a running priority filter: any incoming record can kick out a less important record if the queue is full. 
 * @param logRecord  to be logged
 * @return true if logRecord was added to the queue for logging. False if queue was too full for this record.
 */
synchronized boolean log(LogRecord logRecord){
  int oldSize=queue.size();
  if (oldSize >= maxQueueSize) {
    boolean firstTimeOverflow=!outOfCapacity.getAndSet(true);
    if (firstTimeOverflow) {
      preOverflowFlushPeriod=currentFlushPeriod;
      setPeriodicFlushing(10000);
    }
    if (LOSSLESS) {
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ex) {
        }
      }
 while (queue.size() >= maxQueueSize);
    }
 else {
      if (DEBUG || firstTimeOverflow) {
        System.out.println(""String_Node_Str"" + logRecord.getMessage() + ""String_Node_Str"");
      }
      return false;
    }
  }
  if (outOfCapacity.getAndSet(false)) {
    setPeriodicFlushing(preOverflowFlushPeriod);
    preOverflowFlushPeriod=0;
    System.out.println(""String_Node_Str"");
  }
  if (!LOSSLESS) {
    final int filterThreshold=maxQueueSize * 7 / 10;
    if (oldSize >= filterThreshold) {
      boolean firstTimeScarce=!scarceCapacity.getAndSet(true);
      if (logRecord.getLevel().intValue() < Level.INFO.intValue()) {
        if (DEBUG || firstTimeScarce) {
          System.out.println(""String_Node_Str"" + (oldSize + 1) + ""String_Node_Str""+ maxQueueSize+ ""String_Node_Str""+ logRecord.getMessage()+ ""String_Node_Str"");
        }
        return false;
      }
    }
 else {
      scarceCapacity.set(false);
    }
  }
  queue.put(logRecord);
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + logRecord.getMessage());
  }
  flushIfEnoughRecords(true);
  return true;
}",0.9725158562367864
134733,"/** 
 * Recursively checks if the given type is a typedef'd XmlEntityStruct or sequence of that,  or if it is a struct that contains such a typedef or a nested struct that contains the XML struct, or if it is an interface that contains xml types. <p> This method descends into interfaces and struct children while resolving sequences and typedefs.
 * @param depth 0-based counter for recursion depth, to control log output.
 * @return true if <code>type</code> is an XmlEntityStruct or uses one.
 */
private boolean isOrHasXmlEntityStruct(TypeSpec type,int depth){
  boolean ret=false;
  if (type instanceof AliasTypeSpec) {
    AliasTypeSpec alias=(AliasTypeSpec)type;
    TypeSpec otype=alias.originalType();
    ret=isOrHasXmlEntityStruct(otype,depth + 1);
  }
 else   if (type instanceof VectorType) {
    VectorType vector=(VectorType)type;
    ret=isOrHasXmlEntityStruct(vector.elementTypeSpec(),depth + 1);
  }
 else   if (type instanceof ConstrTypeSpec) {
    TypeDeclaration decl=((ConstrTypeSpec)type.typeSpec()).c_type_spec.declaration();
    if (decl instanceof StructType) {
      StructType struct=(StructType)decl;
      if (struct.name().equals(XML_ENTITY_STRUCT_NAME)) {
        ret=true;
      }
 else {
        ret=hasXmlEntityStruct(struct,depth);
      }
    }
 else     if (decl instanceof Interface) {
      Interface interfce=(Interface)decl;
      if (interfce.body == null) {
        interfce=(Interface)((ConstrTypeSpec)AcsAdapterForOldJacorb.getFromTypeMap(interfce.pack_name + ""String_Node_Str"" + interfce.name())).c_type_spec;
        visitInterface(interfce);
      }
      if (interfaceStack.contains(interfce)) {
        throw new IllegalArgumentException(""String_Node_Str"" + interfce.name());
      }
      if (xmlAwareIFs.contains(interfce)) {
        ret=true;
      }
    }
 else {
      System.out.println(""String_Node_Str"" + decl.getClass().getSimpleName());
    }
  }
  return ret;
}","/** 
 * Recursively checks if the given type is a typedef'd XmlEntityStruct or sequence of that,  or if it is a struct that contains such a typedef or a nested struct that contains the XML struct, or if it is an interface that contains xml types. <p> This method descends into interfaces and struct children while resolving sequences and typedefs.
 * @param depth 0-based counter for recursion depth, to control log output.
 * @return true if <code>type</code> is an XmlEntityStruct or uses one.
 */
private boolean isOrHasXmlEntityStruct(TypeSpec type,int depth){
  boolean ret=false;
  if (type instanceof AliasTypeSpec) {
    AliasTypeSpec alias=(AliasTypeSpec)type;
    TypeSpec otype=alias.originalType();
    ret=isOrHasXmlEntityStruct(otype,depth + 1);
  }
 else   if (type instanceof VectorType) {
    VectorType vector=(VectorType)type;
    ret=isOrHasXmlEntityStruct(vector.elementTypeSpec(),depth + 1);
  }
 else   if (type instanceof ConstrTypeSpec) {
    TypeDeclaration decl=((ConstrTypeSpec)type.typeSpec()).c_type_spec.declaration();
    if (decl instanceof StructType) {
      StructType struct=(StructType)decl;
      if (struct.name().equals(XML_ENTITY_STRUCT_NAME)) {
        ret=true;
      }
 else {
        ret=hasXmlEntityStruct(struct,depth);
      }
    }
 else     if (decl instanceof Interface) {
      Interface interfce=(Interface)decl;
      if (interfce.body == null) {
        interfce=(Interface)((ConstrTypeSpec)AcsAdapterForOldJacorb.getFromTypeMap(interfce.pack_name + ""String_Node_Str"" + interfce.name())).c_type_spec;
        visitInterface(interfce);
      }
      if (interfaceStack.contains(interfce)) {
        throw new IllegalArgumentException(""String_Node_Str"" + interfce.name());
      }
      if (xmlAwareIFs.contains(interfce)) {
        ret=true;
      }
    }
 else     if (decl instanceof EnumType) {
    }
 else {
      System.out.println(""String_Node_Str"" + decl.getClass().getSimpleName());
    }
  }
  return ret;
}",0.987673343605547
134734,"private void sanitizeOpNames(PrintWriter ps,OpDecl opdecl,TypeSpec ts){
  if (!(entityTypes.contains(ts))) {
    ps.print(ts.toString() + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
  }
 else   if (ts.typeSpec() instanceof ConstrTypeSpec && ((ConstrTypeSpec)ts).c_type_spec instanceof Interface) {
    ps.print(ts.name() + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
  }
 else {
    if (ts instanceof AliasTypeSpec) {
      AliasTypeSpec alias=(AliasTypeSpec)ts;
      ps.print(namingExpert.getJavaTypeForXmlTypedef(alias) + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
    }
 else     ps.print(ts.pack_name + ""String_Node_Str"" + ts.name()+ ""String_Node_Str""+ opdecl.name+ ""String_Node_Str"");
  }
}","private void sanitizeOpNames(PrintWriter ps,OpDecl opdecl,TypeSpec ts){
  if (ts.typeSpec() instanceof ConstrTypeSpec) {
    ConstrTypeSpec cts=(ConstrTypeSpec)ts;
    if (cts.c_type_spec instanceof Interface) {
      ps.print(ts.toString() + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
    }
 else     if (cts.c_type_spec instanceof StructType) {
      StructType stype=(StructType)cts.c_type_spec;
      if (xmlAwareStructs.contains(stype))       ps.print(namingExpert.getJavaTypeForXmlStruct(stype) + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
 else       ps.print(ts.toString() + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
    }
 else     ps.print(ts.toString() + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
  }
 else   if (ts instanceof AliasTypeSpec && entityTypes.contains(ts)) {
    AliasTypeSpec alias=(AliasTypeSpec)ts;
    ps.print(namingExpert.getJavaTypeForXmlTypedef(alias) + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
  }
 else   ps.print(ts.toString() + ""String_Node_Str"" + opdecl.name+ ""String_Node_Str"");
}",0.3329621380846325
134735,"/** 
 * @throws IOException 
 * @see StructType#printStructClass(String,PrintWriter)
 */
public void printStructClass() throws IOException {
  String idlName=struct.full_name();
  String className=namingExpert.getClassNameForStruct(struct);
  String fullName=struct.full_name();
  String jpackage=fullName.substring(0,fullName.lastIndexOf('.'));
  File f=XmlIdlCompiler.createFile(jpackage,className);
  if (!GlobalInputStream.isMoreRecentThan(f)) {
    return;
  }
  PrintWriter ps=new PrintWriter(new java.io.FileWriter(f));
  if (!jpackage.equals(""String_Node_Str"")) {
    ps.println(""String_Node_Str"" + jpackage + ""String_Node_Str"");
    ps.println();
  }
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"" + idlName);
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"" + parser.getFinalString() + ""String_Node_Str""+ className);
  ps.println(""String_Node_Str"");
  if (struct.memberlist != null) {
class StructMember {
      String typeName;
      String memberName;
      public StructMember(      String typeName,      String memberName){
        this.typeName=typeName;
        this.memberName=memberName;
      }
    }
    List<StructMember> memberList=new ArrayList<StructMember>();
    for (Enumeration e=struct.memberlist.v.elements(); e.hasMoreElements(); ) {
      Member m=(Member)e.nextElement();
      TypeSpec tspec=m.type_spec;
      String acsTypeName=null;
      if (tspec instanceof AliasTypeSpec && xmlTypedefs.contains(tspec)) {
        acsTypeName=namingExpert.getJavaTypeForXmlTypedef((AliasTypeSpec)tspec);
      }
 else       if (tspec instanceof ConstrTypeSpec && xmlAwareStructs.contains(((ConstrTypeSpec)tspec).c_type_spec)) {
        acsTypeName=namingExpert.getJavaTypeForXmlStruct(struct);
      }
 else {
        acsTypeName=tspec.toString();
      }
      memberList.add(new StructMember(acsTypeName,m.declarator.name()));
    }
    for (    StructMember structMember : memberList) {
      ps.print(""String_Node_Str"" + structMember.typeName + ""String_Node_Str""+ structMember.memberName+ ""String_Node_Str"");
      ps.println();
    }
    ps.println();
    ps.print(""String_Node_Str"" + className + ""String_Node_Str"");
    for (Iterator<StructMember> iterator=memberList.iterator(); iterator.hasNext(); ) {
      StructMember structMember=iterator.next();
      ps.print(structMember.typeName + ""String_Node_Str"" + structMember.memberName);
      if (iterator.hasNext()) {
        ps.print(""String_Node_Str"");
      }
    }
    ps.println(""String_Node_Str"");
    ps.println(""String_Node_Str"");
    for (Iterator<StructMember> iterator=memberList.iterator(); iterator.hasNext(); ) {
      StructMember structMember=iterator.next();
      ps.print(""String_Node_Str"");
      ps.print(structMember.memberName);
      ps.print(""String_Node_Str"");
      ps.println(structMember.memberName + ""String_Node_Str"");
    }
    ps.println(""String_Node_Str"");
  }
  ps.println(""String_Node_Str"");
  ps.close();
}","/** 
 * @throws IOException 
 * @see StructType#printStructClass(String,PrintWriter)
 */
public void printStructClass() throws IOException {
  String idlName=struct.full_name();
  String className=namingExpert.getClassNameForStruct(struct);
  String fullName=struct.full_name();
  String jpackage=fullName.substring(0,fullName.lastIndexOf('.'));
  File f=XmlIdlCompiler.createFile(jpackage,className);
  if (!GlobalInputStream.isMoreRecentThan(f)) {
    return;
  }
  PrintWriter ps=new PrintWriter(new java.io.FileWriter(f));
  if (!jpackage.equals(""String_Node_Str"")) {
    ps.println(""String_Node_Str"" + jpackage + ""String_Node_Str"");
    ps.println();
  }
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"" + idlName);
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"");
  ps.println(""String_Node_Str"" + parser.getFinalString() + ""String_Node_Str""+ className);
  ps.println(""String_Node_Str"");
  if (struct.memberlist != null) {
class StructMember {
      String typeName;
      String memberName;
      public StructMember(      String typeName,      String memberName){
        this.typeName=typeName;
        this.memberName=memberName;
      }
    }
    List<StructMember> memberList=new ArrayList<StructMember>();
    for (Enumeration e=struct.memberlist.v.elements(); e.hasMoreElements(); ) {
      Member m=(Member)e.nextElement();
      TypeSpec tspec=m.type_spec;
      String acsTypeName=null;
      if (tspec instanceof AliasTypeSpec && xmlTypedefs.contains(tspec)) {
        acsTypeName=namingExpert.getJavaTypeForXmlTypedef((AliasTypeSpec)tspec);
      }
 else       if (tspec instanceof ConstrTypeSpec && xmlAwareStructs.contains(((ConstrTypeSpec)tspec).c_type_spec)) {
        acsTypeName=namingExpert.getJavaTypeForXmlStruct(struct);
      }
 else {
        acsTypeName=tspec.toString();
      }
      memberList.add(new StructMember(acsTypeName,m.declarator.name()));
    }
    for (    StructMember structMember : memberList) {
      ps.print(""String_Node_Str"" + structMember.typeName + ""String_Node_Str""+ structMember.memberName+ ""String_Node_Str"");
      ps.println();
    }
    ps.println();
    ps.println(""String_Node_Str"" + className + ""String_Node_Str"");
    ps.print(""String_Node_Str"" + className + ""String_Node_Str"");
    for (Iterator<StructMember> iterator=memberList.iterator(); iterator.hasNext(); ) {
      StructMember structMember=iterator.next();
      ps.print(structMember.typeName + ""String_Node_Str"" + structMember.memberName);
      if (iterator.hasNext()) {
        ps.print(""String_Node_Str"");
      }
    }
    ps.println(""String_Node_Str"");
    ps.println(""String_Node_Str"");
    for (Iterator<StructMember> iterator=memberList.iterator(); iterator.hasNext(); ) {
      StructMember structMember=iterator.next();
      ps.print(""String_Node_Str"");
      ps.print(structMember.memberName);
      ps.print(""String_Node_Str"");
      ps.println(structMember.memberName + ""String_Node_Str"");
    }
    ps.println(""String_Node_Str"");
  }
  ps.println(""String_Node_Str"");
  ps.close();
}",0.9890325748895072
134736,"public void testSave(){
  EbeDocument doc=new EbeDocument();
  doc.setPath(""String_Node_Str"");
  doc.setDocumentInfo(""String_Node_Str"");
  doc.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  Completion c=new Completion();
  c.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  c.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  c.setValue(""String_Node_Str"");
  doc.putNode(c);
  Error e=new Error();
  e.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  e.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  e.setValue(""String_Node_Str"");
  Member m=new Member();
  m.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  m.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  e.setValue(""String_Node_Str"");
  e.putMember(m);
  doc.putNode(e);
  FileReader ref;
  FileReader created;
  char ref_buff[]=new char[10000];
  char created_buff[]=new char[10000];
  try {
    doc.save();
    ref=new FileReader(new File(xmldirs + ""String_Node_Str""));
    created=new FileReader(new File(""String_Node_Str""));
    ref.read(ref_buff);
    created.read(created_buff);
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
  String ref_string=new String(ref_buff);
  String created_string=new String(created_buff);
  assertTrue(ref_string.compareTo(created_string) == 0);
  try {
    (new File(""String_Node_Str"")).delete();
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
}","public void testSave(){
  EbeDocument doc=new EbeDocument();
  doc.setPath(""String_Node_Str"");
  doc.setDocumentInfo(""String_Node_Str"");
  doc.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  Completion c=new Completion();
  c.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  c.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  c.setValue(""String_Node_Str"");
  doc.putNode(c);
  Error e=new Error();
  e.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  e.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  e.setValue(""String_Node_Str"");
  Member m=new Member();
  m.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  m.setAttributeValue(""String_Node_Str"",""String_Node_Str"");
  m.setValue(""String_Node_Str"");
  e.putMember(m);
  doc.putNode(e);
  FileReader ref;
  FileReader created;
  char ref_buff[]=new char[10000];
  char created_buff[]=new char[10000];
  try {
    doc.save();
    ref=new FileReader(new File(xmldirs + ""String_Node_Str""));
    created=new FileReader(new File(""String_Node_Str""));
    ref.read(ref_buff);
    created.read(created_buff);
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
  String ref_string=new String(ref_buff);
  String created_string=new String(created_buff);
  assertTrue(ref_string.compareTo(created_string) == 0);
  try {
    (new File(""String_Node_Str"")).delete();
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
}",0.9993021632937892
134737,"@Inject @Optional private void getNotified(@UIEventTopic(STATUS_BAR_TOPIC_ID) MessageWithTime msgWithTime){
  if (slm != null) {
    String flashMsg=msgWithTime.msg;
    int timeSeconds=msgWithTime.timeSeconds;
    slm.setMessage(flashMsg);
    currentMessage=flashMsg;
    if (msgRestoreJob != null) {
      msgRestoreJob.cancel();
    }
    msgRestoreJob=new Job(MyStatusBar.class.getSimpleName() + ""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        uiSync.syncExec(new Runnable(){
          @Override public void run(){
            slm.setMessage(currentMessage);
          }
        }
);
        return Status.OK_STATUS;
      }
    }
;
    msgRestoreJob.schedule(timeSeconds * 1000);
  }
}","@Inject @Optional private void getNotified(@UIEventTopic(STATUS_BAR_TOPIC_ID) MessageWithTime msgWithTime){
  if (slm != null) {
    String flashMsg=msgWithTime.msg;
    int timeSeconds=msgWithTime.timeSeconds;
    slm.setMessage(flashMsg);
    clearFlashJob();
    msgRestoreJob=new Job(MyStatusBar.class.getSimpleName() + ""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        uiSync.syncExec(new Runnable(){
          @Override public void run(){
            slm.setMessage(permanentMessage);
          }
        }
);
        return Status.OK_STATUS;
      }
    }
;
    msgRestoreJob.schedule(timeSeconds * 1000);
  }
}",0.921220723917672
134738,"@Override public void run(){
  slm.setMessage(currentMessage);
}","@Override public void run(){
  slm.setMessage(permanentMessage);
}",0.9384615384615383
134739,"/** 
 * Flashes a message for the given time,  or until another message gets set. Then sets the status line back to the previous content. Must only be called from the UI thread.
 * @param s The message to appear in the status bar.
 */
public void flashMessage(String s,int timeSeconds){
  MessageWithTime msgWithTime=new MessageWithTime(s,timeSeconds);
  eventBroker.post(MyStatusBar.STATUS_BAR_TOPIC_ID,msgWithTime);
}","/** 
 * Flashes a message for the given time,  or until another message gets set. Then sets the status line back to the previous non-flashed content. Must only be called from the UI thread.
 * @param s The message to appear in the status bar.
 */
public void flashMessage(String s,int timeSeconds){
  MessageWithTime msgWithTime=new MessageWithTime(s,timeSeconds);
  eventBroker.post(MyStatusBar.STATUS_BAR_TOPIC_ID,msgWithTime);
}",0.9858823529411764
134740,"/** 
 * Enable/disable the filter menu item and the filter button in the tool bar. <p> Calling this method overwrites the setting of the tool bar's ""filtersBtn"" via   {@link LogToolBar#setEnabled(boolean)}. This feature is needed to disable this button when jlog runs inside the OMC, because there we get calls to LogToolBar#setEnabled(true) for every table update, menu opening etc.
 * @param enable true enables the widgets
 */
public void enableFiltersWidgets(boolean enable){
  toolBar.enableFiltersButtonOverwrite(enable);
  menuBar.getFiltersMenuItem().setEnabled(enable);
  menuBar.getEngineFiltersMenuItem().setEnabled(enable);
}","/** 
 * Enable/disable the filter menu item and the filter button in the tool bar. <p> Calling this method overwrites the setting of the tool bar's ""filtersBtn"" via   {@link LogToolBar#setEnabled(boolean)}. This feature is needed to disable this button when jlog runs inside the OMC, because there we get calls to LogToolBar#setEnabled(true) for every table update, menu opening etc.
 * @param enable true enables the widgets
 */
public void enableFiltersWidgets(boolean enable){
  toolBar.enableFiltersButtonOverwrite(enable);
  toolBar.setEnabled(enable);
  menuBar.getFiltersMenuItem().setEnabled(enable);
  menuBar.getEngineFiltersMenuItem().setEnabled(enable);
}",0.9769938650306748
134741,"/** 
 * Enable/Disable all the control in the GUI than can cause the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
@Override public void setEnabled(boolean enabled){
  getLogLevelCB().setEnabled(enabled);
  pauseBtn.setEnabled(enabled);
  clearLogsBtn.setEnabled(enabled);
  filtersBtn.setEnabled(enabled);
  getDiscardLevelCB().setEnabled(enabled);
  super.setEnabled(enabled);
}","/** 
 * Enable/Disable all the control in the GUI than can cause the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
@Override public void setEnabled(boolean enabled){
  getLogLevelCB().setEnabled(enabled);
  pauseBtn.setEnabled(enabled);
  clearLogsBtn.setEnabled(enabled);
  boolean filtersBtnEnabled=(filtersBtnEnabledOverwrite != null ? filtersBtnEnabledOverwrite.booleanValue() : enabled);
  filtersBtn.setEnabled(filtersBtnEnabled);
  getDiscardLevelCB().setEnabled(enabled);
  super.setEnabled(enabled);
}",0.8162839248434238
134742,"/** 
 * Enable/disable the filter menu item and the filter button in the tool bar
 * @param enable true enables the widgets
 */
public void enableFiltersWidgets(boolean enable){
  toolBar.getFiltersBtn().setEnabled(enable);
  menuBar.getFiltersMenuItem().setEnabled(enable);
  menuBar.getEngineFiltersMenuItem().setEnabled(enable);
}","/** 
 * Enable/disable the filter menu item and the filter button in the tool bar. <p> Calling this method overwrites the setting of the tool bar's ""filtersBtn"" via   {@link LogToolBar#setEnabled(boolean)}. This feature is needed to disable this button when jlog runs inside the OMC, because there we get calls to LogToolBar#setEnabled(true) for every table update, menu opening etc.
 * @param enable true enables the widgets
 */
public void enableFiltersWidgets(boolean enable){
  toolBar.enableFiltersButtonOverwrite(enable);
  menuBar.getFiltersMenuItem().setEnabled(enable);
  menuBar.getEngineFiltersMenuItem().setEnabled(enable);
}",0.5587628865979382
134743,"/** 
 * The table will show only logs that pass this filter. Previously installed jlog filters will get removed. <p> If the given filter is null, all filters will be removed.
 * @param filter
 */
public void setFilter(Filter filter){
  FiltersVector filters=new FiltersVector();
  filters.add(filter);
  filters.activateFilter(filter,true);
  boolean shouldAppend=false;
  logEntryTable.setFilters(filters,shouldAppend);
  client.setTableFilterLbl();
}","/** 
 * The table will show only logs that pass this filter. Previously installed jlog filters will get removed. <p> If the given filter is null, all filters will be removed.
 * @param filter
 */
public void setFilter(Filter filter){
  FiltersVector filters=new FiltersVector();
  if (filter != null) {
    filters.add(filter);
    filters.activateFilter(filter,true);
  }
  boolean shouldAppend=false;
  logEntryTable.setFilters(filters,shouldAppend);
  client.setTableFilterLbl();
}",0.9209401709401708
134744,"protected TypesafeLogBase(Logger logger,String logName,AcsLogLevel level,String msg,String array,String antenna){
  this.logger=logger;
  if (logger instanceof AcsLogger) {
    ((AcsLogger)logger).addLoggerClass(TypesafeLogBase.class);
    ((AcsLogger)logger).addLoggerClass(this.getClass());
  }
  nameValue=new LinkedHashMap<String,Object>();
  nameValue.put(""String_Node_Str"",logName);
  lr=new AcsLogRecord(level,msg,nameValue,logger.getName());
  lr.setAudience(""String_Node_Str"");
  lr.setArray(array);
  lr.setAntenna(antenna);
}","protected TypesafeLogBase(Logger logger,String logName,AcsLogLevel level,String audience,String msg,String array,String antenna){
  this.logger=logger;
  if (logger instanceof AcsLogger) {
    ((AcsLogger)logger).addLoggerClass(TypesafeLogBase.class);
    ((AcsLogger)logger).addLoggerClass(this.getClass());
  }
  nameValue=new LinkedHashMap<String,Object>();
  nameValue.put(""String_Node_Str"",logName);
  lr=new AcsLogRecord(level,msg,nameValue,logger.getName());
  lr.setAudience(audience);
  lr.setArray(array);
  lr.setAntenna(antenna);
}",0.9620018535681186
134745,"/** 
 * Constructor
 * @param folder The folder to write the manifest into
 * @param pluginFolder The root folder of the plugin
 * @param finalJarsLocations 
 * @param bundleByReference 
 * @param dependencies The plugins this plugin depends on
 * @param Logger The logger
 */
public ManifestWriter(File folder,File pluginFolder,boolean bundleByReference,String[] finalJarsLocations,String[] dependencies,String bundleVersion,Logger logger){
  if (folder == null || !folder.canWrite()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (pluginFolder == null || !pluginFolder.canRead()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (logger == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.bundlingByReference=bundleByReference;
  this.finalJarsLocations=finalJarsLocations;
  this.dependencies=dependencies;
  if (bundleVersion != null && !bundleVersion.trim().isEmpty()) {
    this.bundleVersion=bundleVersion;
  }
 else {
    this.bundleVersion=""String_Node_Str"";
  }
  this.bundleVersion=bundleVersion;
  this.logger=logger;
  manifestFolder=folder;
  this.pluginFolder=pluginFolder;
}","/** 
 * Constructor
 * @param folder The folder to write the manifest into
 * @param pluginFolder The root folder of the plugin
 * @param finalJarsLocations 
 * @param bundleByReference 
 * @param dependencies The plugins this plugin depends on
 * @param Logger The logger
 */
public ManifestWriter(File folder,File pluginFolder,boolean bundleByReference,String[] finalJarsLocations,String[] dependencies,String bundleVersion,Logger logger){
  if (folder == null || !folder.canWrite()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (pluginFolder == null || !pluginFolder.canRead()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (logger == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.bundlingByReference=bundleByReference;
  this.finalJarsLocations=finalJarsLocations;
  this.dependencies=dependencies;
  if (bundleVersion != null && !bundleVersion.trim().isEmpty()) {
    this.bundleVersion=bundleVersion;
  }
 else {
    this.bundleVersion=""String_Node_Str"";
  }
  this.logger=logger;
  manifestFolder=folder;
  this.pluginFolder=pluginFolder;
}",0.931064572425829
134746,"/** 
 * @see alma.acs.component.ComponentLifecycle#cleanUp()
 */
public void cleanUp() throws AcsJComponentCleanUpEx {
  if (threadPool != null) {
    threadPool.shutdown();
    boolean nicePoolShutdown=false;
    try {
      nicePoolShutdown=threadPool.awaitTermination(3,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
    }
    boolean cleanPoolShutdown=nicePoolShutdown;
    if (!nicePoolShutdown) {
      threadPool.shutdownNow();
      try {
        cleanPoolShutdown=threadPool.awaitTermination(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
      }
    }
    String msg=""String_Node_Str"";
    if (!cleanPoolShutdown) {
      msg+=""String_Node_Str"";
    }
 else     if (!nicePoolShutdown) {
      msg+=""String_Node_Str"";
    }
 else {
      msg+=""String_Node_Str"";
    }
    m_logger.log(AcsLogLevel.DELOUSE,msg);
  }
  if (properties.size() != 0) {
    PropertyImpl[] propertyArray=null;
synchronized (properties) {
      propertyArray=new PropertyImpl[properties.size()];
      properties.keySet().toArray(propertyArray);
    }
    for (int i=0; i < propertyArray.length; i++) {
      try {
        propertyArray[i].destroy();
      }
 catch (      Throwable th) {
        m_logger.log(Level.WARNING,""String_Node_Str"");
        th.printStackTrace();
      }
    }
  }
  super.cleanUp();
}","/** 
 * @see alma.acs.component.ComponentLifecycle#cleanUp()
 */
public void cleanUp() throws AcsJComponentCleanUpEx {
  if (threadPool != null) {
    threadPool.shutdown();
    boolean nicePoolShutdown=false;
    try {
      nicePoolShutdown=threadPool.awaitTermination(3,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
    }
    boolean cleanPoolShutdown=nicePoolShutdown;
    if (!nicePoolShutdown) {
      threadPool.shutdownNow();
      try {
        cleanPoolShutdown=threadPool.awaitTermination(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
      }
    }
    String msg=""String_Node_Str"";
    if (!cleanPoolShutdown) {
      msg+=""String_Node_Str"";
    }
 else     if (!nicePoolShutdown) {
      msg+=""String_Node_Str"";
    }
 else {
      msg+=""String_Node_Str"";
    }
    m_logger.log(AcsLogLevel.DELOUSE,msg);
  }
  if (properties.size() != 0) {
    Destroyable[] propertyArray=null;
synchronized (properties) {
      propertyArray=new Destroyable[properties.size()];
      properties.keySet().toArray(propertyArray);
    }
    for (int i=0; i < propertyArray.length; i++) {
      try {
        propertyArray[i].destroy();
      }
 catch (      Throwable th) {
        m_logger.log(Level.WARNING,""String_Node_Str"");
        th.printStackTrace();
      }
    }
  }
  super.cleanUp();
}",0.9827456864216054
134747,"/** 
 * Create RO enum structure. Example:  <code> BasicStatesOperations basicStatesEnumImpl =  (BasicStatesOperations)CommonROEnumPropertyImpl.createEnumProperty( BasicStatesOperations.class, BasicStates.class, ""state"", parentComponent, dataAccess); </code>
 * @param operationsIF CORBA <enum type>Operations class.
 * @param propertyType CORBA enum class.
 * @param name name of the property.
 * @param parentComponent property component.
 * @param dataAccess data access to be used.
 * @return CORBA <enum type>Operations instance.
 * @throws PropertyInitializationFailed
 */
public static Object createEnumProperty(Class operationsIF,Class propertyType,String name,CharacteristicComponentImpl parentComponent,DataAccess dataAccess) throws PropertyInitializationFailed {
  CommonROEnumPropertyImpl propertyImpl;
  if (dataAccess == null)   propertyImpl=new CommonROEnumPropertyImpl(propertyType,name,parentComponent);
 else   propertyImpl=new CommonROEnumPropertyImpl(propertyType,name,parentComponent,dataAccess);
  return Proxy.newProxyInstance(propertyImpl.getClass().getClassLoader(),new Class[]{operationsIF},new ROEnumProxy(propertyImpl));
}","/** 
 * Create RO enum structure. Example:  <code> BasicStatesOperations basicStatesEnumImpl =  (BasicStatesOperations)CommonROEnumPropertyImpl.createEnumProperty( BasicStatesOperations.class, BasicStates.class, ""state"", parentComponent, dataAccess); </code>
 * @param operationsIF CORBA <enum type>Operations class.
 * @param propertyType CORBA enum class.
 * @param name name of the property.
 * @param parentComponent property component.
 * @param dataAccess data access to be used.
 * @return CORBA <enum type>Operations instance.
 * @throws PropertyInitializationFailed
 */
public static Object createEnumProperty(Class operationsIF,Class propertyType,String name,CharacteristicComponentImpl parentComponent,DataAccess dataAccess) throws PropertyInitializationFailed {
  CommonROEnumPropertyImpl propertyImpl;
  if (dataAccess == null)   propertyImpl=new CommonROEnumPropertyImpl(propertyType,name,parentComponent);
 else   propertyImpl=new CommonROEnumPropertyImpl(propertyType,name,parentComponent,dataAccess);
  return Proxy.newProxyInstance(propertyImpl.getClass().getClassLoader(),new Class[]{operationsIF,Destroyable.class},new ROEnumProxy(propertyImpl));
}",0.9922346850733392
134748,"/** 
 * Create RW enum structure. Example:  <code> BasicStatesOperations basicStatesEnumImpl =  (BasicStatesOperations)CommonRWEnumPropertyImpl.createEnumProperty( BasicStatesOperations.class, BasicStates.class, ""state"", parentComponent, dataAccess); </code>
 * @param operationsIF CORBA <enum type>Operations class.
 * @param propertyType CORBA enum class.
 * @param name name of the property.
 * @param parentComponent property component.
 * @param dataAccess data access to be used.
 * @return CORBA <enum type>Operations instance.
 * @throws PropertyInitializationFailed
 */
public static Object createEnumProperty(Class operationsIF,Class propertyType,String name,CharacteristicComponentImpl parentComponent,DataAccess dataAccess) throws PropertyInitializationFailed {
  CommonRWEnumPropertyImpl propertyImpl;
  if (dataAccess == null)   propertyImpl=new CommonRWEnumPropertyImpl(propertyType,name,parentComponent);
 else   propertyImpl=new CommonRWEnumPropertyImpl(propertyType,name,parentComponent,dataAccess);
  return Proxy.newProxyInstance(propertyImpl.getClass().getClassLoader(),new Class[]{operationsIF},new RWEnumProxy(propertyImpl));
}","/** 
 * Create RW enum structure. Example:  <code> BasicStatesOperations basicStatesEnumImpl =  (BasicStatesOperations)CommonRWEnumPropertyImpl.createEnumProperty( BasicStatesOperations.class, BasicStates.class, ""state"", parentComponent, dataAccess); </code>
 * @param operationsIF CORBA <enum type>Operations class.
 * @param propertyType CORBA enum class.
 * @param name name of the property.
 * @param parentComponent property component.
 * @param dataAccess data access to be used.
 * @return CORBA <enum type>Operations instance.
 * @throws PropertyInitializationFailed
 */
public static Object createEnumProperty(Class operationsIF,Class propertyType,String name,CharacteristicComponentImpl parentComponent,DataAccess dataAccess) throws PropertyInitializationFailed {
  CommonRWEnumPropertyImpl propertyImpl;
  if (dataAccess == null)   propertyImpl=new CommonRWEnumPropertyImpl(propertyType,name,parentComponent);
 else   propertyImpl=new CommonRWEnumPropertyImpl(propertyType,name,parentComponent,dataAccess);
  return Proxy.newProxyInstance(propertyImpl.getClass().getClassLoader(),new Class[]{operationsIF,Destroyable.class},new RWEnumProxy(propertyImpl));
}",0.9922346850733392
134749,"/** 
 * Constructor. <P> Build the ConcurrentComponentAccessUtil with a default number of threads
 * @param contSrv The {@link ContainerServices}
 */
public ConcurrentComponentAccessUtil(ContainerServices contSrv){
  this(contSrv,defaultThreadNumber);
}","/** 
 * Constructor.
 * @param contSrv The {@link ContainerServices}
 * @param threadPoolSize The number of threads in the thread pool
 * @param prestartCoreThreads 
 */
public ConcurrentComponentAccessUtil(ContainerServices contSrv,int threadPoolSize,boolean prestartCoreThreads){
  super(contSrv);
  totThreads=threadPoolSize;
  executor=new BenchmarkTreadPoolExecutor(totThreads,totThreads,1,TimeUnit.MINUTES,new LinkedBlockingQueue<Runnable>(),contSrv.getThreadFactory());
  executor.allowCoreThreadTimeOut(true);
  if (prestartCoreThreads) {
    int n=executor.prestartAllCoreThreads();
    logger.info(n + ""String_Node_Str"");
  }
}",0.3191011235955056
134750,"/** 
 * Concurrently release the components with the passed names
 * @param compNames The names of the components to release
 * @param if <code>true</code> the methods wait for all the threads to terminate before returningotherwise return immediately TODO: limit the waiting time 
 */
@Override public void releaseComponents(Collection<String> compNames,boolean waitCompsTermination){
  try {
    countDown.await();
  }
 catch (  InterruptedException ie) {
  }
  countDown=new CountDownLatch(compNames.size());
  for (  String compName : compNames) {
    ComponentDeactivator deactivator=new ComponentDeactivator(compName);
    executor.submit(deactivator);
  }
  if (waitCompsTermination) {
    logger.info(""String_Node_Str"" + countDown.getCount() + ""String_Node_Str"");
    try {
      countDown.await();
    }
 catch (    InterruptedException ie) {
    }
  }
}","/** 
 * Concurrently releases the components with the passed names. <p> This method overrides the base class version, bringing in a thread pool for parallel  component release, instead of sequentially releaseing every component.  Mostly makes sense for <code>waitCompsTermination == true</code>. <p> To avoid hanging tests, a generous timeout of 30 minutes gets applied.
 * @param compNames The names of the components to release
 * @param waitCompsTermination if <code>true</code> the method waits for all the threads to terminate before returning, otherwise returns immediately
 */
@Override public void releaseComponents(Collection<String> compNames,boolean waitCompsTermination){
  List<Future<Void>> compReleaseFutures=new ArrayList<Future<Void>>();
  for (  String compName : compNames) {
    compReleaseFutures.add(releaseComponentConcurrent(compName));
  }
  if (waitCompsTermination) {
    logger.info(""String_Node_Str"" + compReleaseFutures.size() + ""String_Node_Str"");
    boolean printErrorLogs=true;
    for (    Future<Void> future : compReleaseFutures) {
      try {
        future.get(30,TimeUnit.MINUTES);
      }
 catch (      InterruptedException ex) {
        logger.log(Level.WARNING,""String_Node_Str"",ex);
      }
catch (      CancellationException ex) {
        logger.log(Level.WARNING,""String_Node_Str"",ex);
      }
catch (      ExecutionException ex) {
        logger.log(Level.WARNING,""String_Node_Str"",ex.getCause());
      }
catch (      TimeoutException ex) {
        if (printErrorLogs) {
          logger.log(Level.WARNING,""String_Node_Str"",ex);
          printErrorLogs=false;
        }
      }
    }
  }
}",0.3176
134751,"/** 
 * The parallel version of   {@link ComponentAccessUtil#getDynamicComponent(ComponentSpec,Class)}get the dynamic component in a thread of the pool.
 * @param compSpec The spec to start the dynamic component
 * @param idlOpInterface The idl interface of the component
 * @return the future task to be able to get the result of the activation of the component
 */
public <T extends ACSComponentOperations>Future<T> getDynamicComponentConcurrent(ComponentSpec compSpec,Class<T> idlOpInterface){
  ComponentActivator<T> activator=new ComponentActivator<T>(compSpec,idlOpInterface);
  return executor.submit(activator);
}","/** 
 * The parallel version of   {@link ComponentAccessUtil#getDynamicComponent(ComponentSpec,Class)}gets the dynamic component in a thread of the pool.
 * @param compSpec The spec to start the dynamic component
 * @param idlOpInterface The idl interface of the component
 * @return the future task to be able to get the result of the activation of the component
 */
public <T extends ACSComponentOperations>Future<T> getDynamicComponentConcurrent(ComponentSpec compSpec,Class<T> idlOpInterface){
  ComponentActivator<T> activator=new ComponentActivator<T>(compSpec,idlOpInterface);
  return executor.submit(activator);
}",0.999195494770716
134752,"@Override public Void call(){
  ConcurrentComponentAccessUtil.this.releaseComponent(name,true);
  countDown.countDown();
  return null;
}","@Override public Void call(){
  ConcurrentComponentAccessUtil.this.releaseComponent(compName,true);
  return null;
}",0.8774703557312253
134753,"public BenchmarkTreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){
  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue);
}","public BenchmarkTreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory){
  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory);
}",0.908695652173913
134754,"/** 
 * Constructor
 * @param componentName The name of the component to release
 */
public ComponentDeactivator(String componentName){
  this.name=componentName;
}","/** 
 * @param componentName
 * @param sync may be null
 */
public ComponentDeactivator(String componentName){
  this.compName=componentName;
}",0.755700325732899
134755,"/** 
 * Release a component in a dedicated thread of the pool.
 * @param name The name of the component to deactivate
 * @return
 */
public Future<Void> releaseComponentConcurrent(String name){
  ComponentDeactivator deactivator=new ComponentDeactivator(name);
  return executor.submit(deactivator);
}","/** 
 * Releases a component in a dedicated thread of the pool. <p> Note that <code>ComponentAccessUtil#releaseComponent(compName, waitForCompRelease=false)</code> is very similar in the sense that it is also asynchronous, making an async call to the manager instead of spawning a new thread already here in the client.  The main difference though is that in this method we can measure the time it takes to release a component, which is important for performance tests.
 * @param name The name of the component to deactivate
 * @return handle to sync up with the finishing of the component release.
 */
public Future<Void> releaseComponentConcurrent(String name){
  ComponentDeactivator deactivator=new ComponentDeactivator(name);
  return executor.submit(deactivator);
}",0.4757462686567164
134756,"/** 
 * Creates or reuses a logger, normally with both a local and a remote handler attached. If remote logging is suppressed then no remote handler is attached. <p> Logger names must be unique. If the requested logger name matches a given logger  of the same LoggerOwnerType then that logger is returned. If however a logger of a different type is matched, then a name uniqueness violation is avoided by appending  small integer numbers to the logger name.  Therefore the name of the returned Logger may be different from <code>loggerName</code>! The idea of this strategy is that uniqueness of component names will be enforced  by the system, while a component may in sick cases have the name of a container or the orb logger.
 * @param loggerName The unique logger name
 * @param loggerOwnerType  enum for the type of the logger owner.With ACS 7.0, this replaces the namespace strings previously prepended to the logger names.
 * @return
 * @throws IllegalArgumentException if loggerName is null or empty
 */
private AcsLogger getAcsLogger(String loggerName,LoggerOwnerType loggerOwnerType){
  if (loggerName == null || loggerName.trim().isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AcsLoggerInfo loggerInfo=null;
  try {
synchronized (loggers) {
      loggerInfo=loggers.get(loggerName);
      int counter=2;
      while (loggerInfo != null && loggerOwnerType != loggerInfo.loggerOwnerType) {
        int lastIndexUnderscore=loggerName.lastIndexOf('_');
        if (lastIndexUnderscore > 0 && loggerName.length() > lastIndexUnderscore + 1) {
          try {
            int oldCounter=Integer.parseInt(loggerName.substring(lastIndexUnderscore + 1));
            counter=Math.max(counter,oldCounter + 1);
            loggerName=loggerName.substring(0,lastIndexUnderscore + 1) + counter;
            loggerInfo=loggers.get(loggerName);
            continue;
          }
 catch (          NumberFormatException ex) {
          }
        }
        loggerName+=""String_Node_Str"" + counter;
        loggerInfo=loggers.get(loggerName);
      }
      if (loggerInfo == null) {
        loggerInfo=new AcsLoggerInfo();
        loggerInfo.logger=new AcsLogger(loggerName,null,sharedLogConfig);
        loggerInfo.logger.setParent(parentRemoteLogger);
        loggerInfo.logger.setUseParentHandlers(false);
        loggerInfo.logger.setProcessName(this.processName);
        if (loggerOwnerType == LoggerOwnerType.ComponentLogger || loggerOwnerType == LoggerOwnerType.OrbLogger) {
          loggerInfo.logger.setSourceObject(loggerName);
        }
 else {
          loggerInfo.logger.setSourceObject(this.processName);
        }
        loggerInfo.localHandler=addLocalHandler(loggerInfo.logger);
        loggerInfo.remoteHandler=addRemoteHandler(loggerInfo.logger);
        loggerInfo.loggerOwnerType=loggerOwnerType;
        loggers.put(loggerName,loggerInfo);
      }
      if (DEBUG) {
        System.out.println(""String_Node_Str"" + loggerName + ""String_Node_Str""+ loggerInfo.logger.getLevel()+ ""String_Node_Str"");
      }
    }
  }
 catch (  Throwable thr) {
    System.out.println(""String_Node_Str"" + loggerName + ""String_Node_Str"");
  }
  return loggerInfo.logger;
}","/** 
 * Creates or reuses a logger, normally with both a local and a remote handler attached. If remote logging is suppressed then no remote handler is attached. <p> Logger names must be unique. If the requested logger name matches a given logger  of the same LoggerOwnerType then that logger is returned. If however a logger of a different type is matched, then a name uniqueness violation is avoided by appending  small integer numbers to the logger name.  Therefore the name of the returned Logger may be different from <code>loggerName</code>! The idea of this strategy is that uniqueness of component names will be enforced  by the system, while a component may in sick cases have the name of a container or the orb logger.
 * @param loggerName The unique logger name
 * @param loggerOwnerType  enum for the type of the logger owner.With ACS 7.0, this replaces the namespace strings previously prepended to the logger names.
 * @return
 * @throws IllegalArgumentException if loggerName is null or empty
 */
private AcsLogger getAcsLogger(String loggerName,LoggerOwnerType loggerOwnerType){
  if (loggerName == null || loggerName.trim().isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AcsLoggerInfo loggerInfo=null;
  try {
synchronized (loggers) {
      loggerInfo=loggers.get(loggerName);
      int counter=2;
      while (loggerInfo != null && loggerOwnerType != loggerInfo.loggerOwnerType) {
        int lastIndexUnderscore=loggerName.lastIndexOf('_');
        if (lastIndexUnderscore > 0 && loggerName.length() > lastIndexUnderscore + 1) {
          try {
            int oldCounter=Integer.parseInt(loggerName.substring(lastIndexUnderscore + 1));
            counter=Math.max(counter,oldCounter + 1);
            loggerName=loggerName.substring(0,lastIndexUnderscore + 1) + counter;
            loggerInfo=loggers.get(loggerName);
            continue;
          }
 catch (          NumberFormatException ex) {
          }
        }
        loggerName+=""String_Node_Str"" + counter;
        loggerInfo=loggers.get(loggerName);
      }
      if (loggerInfo == null) {
        loggerInfo=new AcsLoggerInfo();
        loggerInfo.logger=new AcsLogger(loggerName,null,sharedLogConfig);
        loggerInfo.logger.setParent(parentRemoteLogger);
        loggerInfo.logger.setUseParentHandlers(false);
        loggerInfo.logger.setProcessName(this.processName);
        if (loggerOwnerType == LoggerOwnerType.ComponentLogger || loggerOwnerType == LoggerOwnerType.OrbLogger) {
          loggerInfo.logger.setSourceObject(loggerName);
        }
 else {
          loggerInfo.logger.setSourceObject(this.processName);
        }
        loggerInfo.localHandler=addLocalHandler(loggerInfo.logger);
        loggerInfo.remoteHandler=addRemoteHandler(loggerInfo.logger);
        loggerInfo.loggerOwnerType=loggerOwnerType;
        loggers.put(loggerName,loggerInfo);
      }
      if (DEBUG) {
        System.out.println(""String_Node_Str"" + loggerName + ""String_Node_Str""+ loggerInfo.logger.getLevel()+ ""String_Node_Str"");
      }
    }
  }
 catch (  Throwable thr) {
    System.out.println(""String_Node_Str"" + loggerName + ""String_Node_Str"");
    thr.printStackTrace(System.out);
  }
  return loggerInfo.logger;
}",0.9942484066531944
134757,"/** 
 * Gets a logger to be used by ORB and POA classes, or by hibernate.  The logger is connected to the central ACS logger. <p>
 * @TODO rename this method to accommodate non-corba frameworks into which we insert ACS loggers, such as hibernate,see  {@link org.slf4j.impl.ACSLoggerFactory}. <p> For hibernate and scxml loggers, the logger automatically receives an initial custom log level configuration,  to avoid jamming the log system with hibernate or scxml logs.  The applied custom log level is the maximum of the default log level and WARNING. Note that the hibernate/scxml logger can still be set to a more verbose level by giving it a custom log config in the CDB, or dynamically using logLevelGUI etc. <p>
 * @TODO Instead of this hard coded and probably confusing application of a custom log level,the CDB should offer a central configuration option for all jacorb, hibernate, scxml etc loggers, independently of the process (container or manager etc). <p>
 * @param corbaName e.g. <code>jacorb</code>. @TODO rename it.
 * @param autoConfigureContextName if true, the context (e.g. container name) will be appended to this logger's name as soon as it is available, changing the logger name to something like <code>jacorb@frodoContainer</code>.
 */
public AcsLogger getLoggerForCorba(String corbaName,boolean autoConfigureContextName){
  String loggerName=corbaName;
  AcsLogger corbaLogger=null;
  processNameLock.lock();
  try {
    if (autoConfigureContextName && processName != null) {
      loggerName+=""String_Node_Str"" + processName;
    }
    corbaLogger=getAcsLogger(loggerName,LoggerOwnerType.OrbLogger);
    corbaLogger.addIgnoreLogs(""String_Node_Str"",""String_Node_Str"");
    corbaLogger.addIgnoreLogs(""String_Node_Str"",""String_Node_Str"");
    corbaLogger.addIgnoreLogs(""String_Node_Str"",""String_Node_Str"");
    if (autoConfigureContextName && processName == null) {
      AcsLoggerInfo loggerInfo=loggers.get(loggerName);
      loggerInfo.needsProcessNameUpdate=true;
    }
  }
  finally {
    processNameLock.unlock();
  }
  if (suppressCorbaRemoteLogging) {
    sharedLogConfig.setAndLockMinLogLevel(AcsLogLevelDefinition.OFF,loggerName);
  }
 else   if (!sharedLogConfig.hasCustomConfig(loggerName)) {
    if (corbaName.startsWith(ACSLoggerFactory.HIBERNATE_LOGGER_NAME_PREFIX) || corbaName.startsWith(ACSLoggerFactory.HIBERNATE_SQL_LOGGER_NAME_PREFIX) || corbaName.startsWith(CommonsLoggingFactory.SCXML_LOGGER_NAME_PREFIX)) {
      AcsLogLevelDefinition minCustomLevel=AcsLogLevelDefinition.WARNING;
      AcsLogLevelDefinition customLevel=(minCustomLevel.compareTo(sharedLogConfig.getDefaultMinLogLevel()) > 0 ? minCustomLevel : sharedLogConfig.getDefaultMinLogLevel());
      sharedLogConfig.setMinLogLevel(customLevel,loggerName);
      AcsLogLevelDefinition customLevelLocal=(minCustomLevel.compareTo(sharedLogConfig.getDefaultMinLogLevelLocal()) > 0 ? minCustomLevel : sharedLogConfig.getDefaultMinLogLevelLocal());
      sharedLogConfig.setMinLogLevelLocal(customLevelLocal,loggerName);
      m_internalLogger.info(""String_Node_Str"" + loggerName + ""String_Node_Str""+ customLevelLocal.name+ ""String_Node_Str""+ customLevel.name+ ""String_Node_Str"");
    }
  }
  return corbaLogger;
}","/** 
 * Gets a logger to be used by ORB and POA classes, or by hibernate.  The logger is connected to the central ACS logger. <p>
 * @TODO rename this method to accommodate non-corba frameworks into which we insert ACS loggers, such as hibernate,see  {@link org.slf4j.impl.ACSLoggerFactory}. <p> For hibernate and scxml loggers, the logger automatically receives an initial custom log level configuration,  to avoid jamming the log system with hibernate or scxml logs.  The applied custom log level is the maximum of the default log level and WARNING. Note that the hibernate/scxml logger can still be set to a more verbose level by giving it a custom log config in the CDB, or dynamically using logLevelGUI etc. <p>
 * @TODO Instead of this hard coded and probably confusing application of a custom log level,the CDB should offer a central configuration option for all jacorb, hibernate, scxml etc loggers, independently of the process (container or manager etc). <p>
 * @param corbaName e.g. <code>jacorb</code>. @TODO rename it.
 * @param autoConfigureContextName if true, the context (e.g. container name) will be appended to this logger's name as soon as it is available, changing the logger name to something like <code>jacorb@frodoContainer</code>.
 */
public AcsLogger getLoggerForCorba(String corbaName,boolean autoConfigureContextName){
  String loggerName=corbaName;
  AcsLogger corbaLogger=null;
  processNameLock.lock();
  try {
    if (autoConfigureContextName && processName != null) {
      loggerName+=""String_Node_Str"" + processName;
    }
    corbaLogger=getAcsLogger(loggerName,LoggerOwnerType.OrbLogger);
    if (corbaName.equals(JacORBLoggerFactory.JACORB_LOGGER_NAME)) {
      corbaLogger.addIgnoreLogs(""String_Node_Str"",""String_Node_Str"");
      corbaLogger.addIgnoreLogs(""String_Node_Str"",""String_Node_Str"");
      corbaLogger.addIgnoreLogs(""String_Node_Str"",""String_Node_Str"");
    }
    if (autoConfigureContextName && processName == null) {
      AcsLoggerInfo loggerInfo=loggers.get(loggerName);
      loggerInfo.needsProcessNameUpdate=true;
    }
  }
  finally {
    processNameLock.unlock();
  }
  if (suppressCorbaRemoteLogging) {
    sharedLogConfig.setAndLockMinLogLevel(AcsLogLevelDefinition.OFF,loggerName);
  }
 else   if (!sharedLogConfig.hasCustomConfig(loggerName)) {
    AcsLogLevelDefinition minCustomLevel=null;
    if (corbaName.startsWith(ACSLoggerFactory.HIBERNATE_LOGGER_NAME_PREFIX) || corbaName.startsWith(ACSLoggerFactory.HIBERNATE_SQL_LOGGER_NAME_PREFIX) || corbaName.startsWith(CommonsLoggingFactory.SCXML_LOGGER_NAME_PREFIX)) {
      minCustomLevel=AcsLogLevelDefinition.WARNING;
    }
 else     if (corbaName.equals(JacORBLoggerFactory.JACORB_LOGGER_NAME)) {
      AcsLogLevelDefinition level=JacORBLoggerFactory.getLogLevelFromJacorbVerbosity();
      if (level != null) {
        minCustomLevel=level;
      }
 else {
        minCustomLevel=AcsLogLevelDefinition.WARNING;
        m_internalLogger.info(""String_Node_Str"");
      }
    }
    if (minCustomLevel != null) {
      AcsLogLevelDefinition customLevel=(minCustomLevel.compareTo(sharedLogConfig.getDefaultMinLogLevel()) > 0 ? minCustomLevel : sharedLogConfig.getDefaultMinLogLevel());
      sharedLogConfig.setMinLogLevel(customLevel,loggerName);
      AcsLogLevelDefinition customLevelLocal=(minCustomLevel.compareTo(sharedLogConfig.getDefaultMinLogLevelLocal()) > 0 ? minCustomLevel : sharedLogConfig.getDefaultMinLogLevelLocal());
      sharedLogConfig.setMinLogLevelLocal(customLevelLocal,loggerName);
      m_internalLogger.info(""String_Node_Str"" + loggerName + ""String_Node_Str""+ customLevelLocal.name+ ""String_Node_Str""+ customLevel.name+ ""String_Node_Str"");
    }
  }
  return corbaLogger;
}",0.7796708056598325
134758,"/** 
 * {@inheritDoc}<p> This method is thread-safe.
 */
@Override public void publishEvent(T customStruct) throws AcsJException {
  long currentOmgTime=UTCUtility.utcJavaToOmg(System.currentTimeMillis());
  EventDescription desc=new EventDescription(publisherName,currentOmgTime,count);
  nc.pushData(customStruct,desc);
  count++;
}","/** 
 * {@inheritDoc}<p> This method is thread-safe.
 */
@Override public void publishEvent(T customStruct) throws AcsJException {
  long currentOmgTime=UTCUtility.utcJavaToOmg(System.currentTimeMillis());
  EventDescription desc=new EventDescription(publisherName,currentOmgTime,count.getAndIncrement());
  nc.pushData(customStruct,desc);
}",0.957037037037037
134759,"/** 
 * Returns the total number of events published.  Should be used only for testing.
 */
public long getEventCount(){
  return count;
}","/** 
 * Returns the total number of events published.  Should be used only for testing.
 */
public long getEventCount(){
  return count.get();
}",0.9787234042553192
134760,"/** 
 * Takes a generic Java object and tries to pack it into a CORBA Any and publish it to the event channel. This will fail if the parameter is not CORBA-generated from a user-defined IDL struct. In simple terms, trying to publish native Java types is impossible because they have no CORBA mapping to say Python or C++ types.
 * @param customStruct An instance of the IDL struct (Java class) to be published.
 * @throws AcsJPublishEventFailureEx If <code>customStruct</code> is not an IDL struct,for which it must be a subclass of IDLEntity.
 * @throws AcsJException There are an enormous amount of possibilities pertaining to why an AcsJException would be thrown by publishEvent.
 */
@Override public void publishEvent(T customStruct) throws AcsJException {
  if (!(customStruct instanceof IDLEntity)) {
    String msg=""String_Node_Str"";
    AcsJPublishEventFailureEx ex=new AcsJPublishEventFailureEx();
    ex.setFailureDescription(msg);
    ex.setChannelName(channelName);
    ex.setEventName(customStruct.getClass().getName());
    throw ex;
  }
  IDLEntity customStructEntity=(IDLEntity)customStruct;
  String typeName=customStructEntity.getClass().getSimpleName();
  StructuredEvent event=getCORBAEvent(typeName,""String_Node_Str"");
  event.remainder_of_body=services.getAdvancedContainerServices().getAny();
  EventDescription descrip=new EventDescription(services.getName(),alma.acs.util.UTCUtility.utcJavaToOmg(System.currentTimeMillis()),count);
  EventDescriptionHelper.insert(event.remainder_of_body,descrip);
  event.filterable_data=new Property[1];
  event.filterable_data[0]=new Property(alma.acscommon.DEFAULTDATANAME.value,anyAide.complexObjectToCorbaAny(customStructEntity));
synchronized (eventQueueSync) {
    if (eventQueue != null) {
      CircularQueue<T>.Data tmp;
      try {
        while ((tmp=eventQueue.pop()) != null) {
          publishCORBAEvent(tmp.corbaData,tmp.userData);
        }
      }
 catch (      Exception ex) {
        Level lev=(isTraceEventsEnabled ? Level.INFO : Level.FINEST);
        logger.log(lev,""String_Node_Str"",ex);
      }
    }
  }
  publishCORBAEvent(event,customStruct);
  count++;
}","/** 
 * Takes a generic Java object and tries to pack it into a CORBA Any and publish it to the event channel. This will fail if the parameter is not CORBA-generated from a user-defined IDL struct. In simple terms, trying to publish native Java types is impossible because they have no CORBA mapping to say Python or C++ types.
 * @param customStruct An instance of the IDL struct (Java class) to be published.
 * @throws AcsJPublishEventFailureEx If <code>customStruct</code> is not an IDL struct,for which it must be a subclass of IDLEntity.
 * @throws AcsJException There are an enormous amount of possibilities pertaining to why an AcsJException would be thrown by publishEvent.
 */
@Override public void publishEvent(T customStruct) throws AcsJException {
  if (!(customStruct instanceof IDLEntity)) {
    String msg=""String_Node_Str"";
    AcsJPublishEventFailureEx ex=new AcsJPublishEventFailureEx();
    ex.setFailureDescription(msg);
    ex.setChannelName(channelName);
    ex.setEventName(customStruct.getClass().getName());
    throw ex;
  }
  IDLEntity customStructEntity=(IDLEntity)customStruct;
  String typeName=customStructEntity.getClass().getSimpleName();
  StructuredEvent event=getCORBAEvent(typeName,""String_Node_Str"");
  event.remainder_of_body=services.getAdvancedContainerServices().getAny();
  EventDescription descrip=new EventDescription(services.getName(),alma.acs.util.UTCUtility.utcJavaToOmg(System.currentTimeMillis()),count.getAndIncrement());
  EventDescriptionHelper.insert(event.remainder_of_body,descrip);
  event.filterable_data=new Property[1];
  event.filterable_data[0]=new Property(alma.acscommon.DEFAULTDATANAME.value,anyAide.complexObjectToCorbaAny(customStructEntity));
synchronized (eventQueueSync) {
    if (eventQueue != null) {
      CircularQueue<T>.Data tmp;
      try {
        while ((tmp=eventQueue.pop()) != null) {
          publishCORBAEvent(tmp.corbaData,tmp.userData);
        }
      }
 catch (      Exception ex) {
        Level lev=(isTraceEventsEnabled ? Level.INFO : Level.FINEST);
        logger.log(lev,""String_Node_Str"",ex);
      }
    }
  }
  publishCORBAEvent(event,customStruct);
}",0.9932448171441882
134761,"/** 
 * Appends a random number to the given client name. <p> This is used when setting names on NC proxy objects via the TAO extension API. It reduces the risk of creating a new object with an existing name, because TAO has memory bug and will not delete the badly named object even if it throws the correct NameAlreadyUsed exception. <p> This method is synchronized just to overcome residual doubts about the thread safety of random#nextInt.
 * @param clientName
 * @return ""clientName-randomNumber""
 * @see #random
 */
public static synchronized String createRandomizedClientName(String clientName){
  StringBuffer clientNameSB=new StringBuffer(clientName);
  clientNameSB.append('-');
  clientNameSB.append(String.format(""String_Node_Str"",Math.abs(random.nextInt())));
  return clientNameSB.toString();
}","/** 
 * Appends a random number to the given client name. <p> This is used when setting names on NC proxy objects via the TAO extension API. It reduces the risk of creating a new object with an existing name, because TAO has memory bug and will not delete the badly named object even if it throws the correct NameAlreadyUsed exception. <p> This method is synchronized just to overcome residual doubts about the thread safety of random#nextInt.
 * @param clientName
 * @return ""clientName-randomNumber""
 * @see #random
 */
public static synchronized String createRandomizedClientName(String clientName){
  StringBuffer clientNameSB=new StringBuffer(clientName);
  clientNameSB.append('-');
  clientNameSB.append(String.format(""String_Node_Str"",random.nextInt(Integer.MAX_VALUE)));
  return clientNameSB.toString();
}",0.9661121380160196
134762,"/** 
 * This method should be called from the subclass-specific method that receives the event, for example <code>push_structured_event</code> in case of Corba NC, or preferably via   {@link #processEventAsync(Object,EventDescription)}. <p> No exception is allowed to be thrown by this method, even if the receiver implementation throws a RuntimeExecption
 */
protected void processEvent(T eventData,EventDescription eventDescrip){
  @SuppressWarnings(""String_Node_Str"") Class<T> incomingEventType=(Class<T>)eventData.getClass();
  String eventName=incomingEventType.getName();
  double maxProcessTimeSeconds=getMaxProcessTimeSeconds(eventName);
  StopWatch profiler=new StopWatch();
  if (receivers.containsKey(incomingEventType)) {
    Callback<? extends T> receiver=receivers.get(incomingEventType);
    profiler.reset();
    try {
      _process(receiver,eventData,eventDescrip);
    }
 catch (    Throwable thr) {
      logEventReceiveHandlerException(eventName,receiver.getClass().getName(),thr);
    }
    double usedSecondsToProcess=(profiler.getLapTimeMillis() / 1000.0);
    if (usedSecondsToProcess > maxProcessTimeSeconds && processTimeLogRepeatGuard.checkAndIncrement(eventName)) {
      logEventProcessingTimeExceeded(eventName,processTimeLogRepeatGuard.counterAtLastExecution(eventName));
    }
  }
 else   if (genericReceiver != null) {
    profiler.reset();
    genericReceiver.receive(eventData,eventDescrip);
    double usedSecondsToProcess=(profiler.getLapTimeMillis() / 1000.0);
    if (usedSecondsToProcess > maxProcessTimeSeconds && processTimeLogRepeatGuard.checkAndIncrement(eventName)) {
      logEventProcessingTimeExceeded(eventName,processTimeLogRepeatGuard.counterAtLastExecution(eventName));
    }
  }
 else {
    logNoEventReceiver(eventName);
  }
}","/** 
 * This method should be called from the subclass-specific method that receives the event, for example <code>push_structured_event</code> in case of Corba NC, or preferably via   {@link #processEventAsync(Object,EventDescription)}. <p> No exception is allowed to be thrown by this method, even if the receiver implementation throws a RuntimeExecption
 * @param eventData (defined as <code>Object</code> instead of <code>T</code> to include data for generic subscription).
 * @param eventDesc
 */
protected void processEvent(Object eventData,EventDescription eventDesc){
  Class<?> incomingEventType=eventData.getClass();
  String eventName=incomingEventType.getName();
  double maxProcessTimeSeconds=getMaxProcessTimeSeconds(eventName);
  StopWatch profiler=new StopWatch();
  if (eventType.isAssignableFrom(incomingEventType) && receivers.containsKey(incomingEventType)) {
    @SuppressWarnings(""String_Node_Str"") T typedEventData=(T)eventData;
    Callback<? extends T> receiver=receivers.get(incomingEventType);
    profiler.reset();
    try {
      _process(receiver,typedEventData,eventDesc);
    }
 catch (    Throwable thr) {
      logEventReceiveHandlerException(eventName,receiver.getClass().getName(),thr);
    }
    double usedSecondsToProcess=(profiler.getLapTimeMillis() / 1000.0);
    if (usedSecondsToProcess > maxProcessTimeSeconds && processTimeLogRepeatGuard.checkAndIncrement(eventName)) {
      logEventProcessingTimeExceeded(eventName,processTimeLogRepeatGuard.counterAtLastExecution(eventName));
    }
  }
 else   if (genericReceiver != null) {
    profiler.reset();
    genericReceiver.receiveGeneric(eventData,eventDesc);
    double usedSecondsToProcess=(profiler.getLapTimeMillis() / 1000.0);
    if (usedSecondsToProcess > maxProcessTimeSeconds && processTimeLogRepeatGuard.checkAndIncrement(eventName)) {
      logEventProcessingTimeExceeded(eventName,processTimeLogRepeatGuard.counterAtLastExecution(eventName));
    }
  }
 else {
    logNoEventReceiver(eventName);
  }
}",0.806340819022457
134763,"public void run(){
  processEvent(structToProcess,eDescrip);
}","public void run(){
  processEvent(eventData,eventDesc);
}",0.773109243697479
134764,"/** 
 * Asynchronously calls   {@link #processEvent(Object,EventDescription)},  using   {@link #eventHandlingExecutor}. <p> This method should be called from the subclass-specific method that receives the event, for example <code>push_structured_event</code> in case of Corba NC.
 * @param structToProcess
 * @param eDescrip
 */
protected void processEventAsync(final T structToProcess,final EventDescription eDescrip){
  boolean isReceiverBusyWithPreviousEvent=(eventHandlingExecutor.getQueue().size() > EVENT_QUEUE_CAPACITY / 2);
  boolean thisEventDiscarded=false;
  try {
    eventHandlingExecutor.execute(new Runnable(){
      public void run(){
        processEvent(structToProcess,eDescrip);
      }
    }
);
  }
 catch (  RejectedExecutionException ex) {
    thisEventDiscarded=true;
    numEventsDiscarded++;
  }
  if ((thisEventDiscarded || isReceiverBusyWithPreviousEvent) && receiverTooSlowLogRepeatGuard.checkAndIncrement()) {
    logEventProcessingTooSlowForEventRate(numEventsDiscarded,structToProcess.getClass().getName(),receiverTooSlowLogRepeatGuard.counterAtLastExecution());
    numEventsDiscarded=0;
  }
}","/** 
 * Asynchronously calls   {@link #processEvent(Object,EventDescription)},  using   {@link #eventHandlingExecutor}. <p> This method should be called from the subclass-specific method that receives the event, for example <code>push_structured_event</code> in case of Corba NC.
 * @param eventData (defined as <code>Object</code> instead of <code>T</code> to include data for generic subscription).
 * @param eventDesc
 */
protected void processEventAsync(final Object eventData,final EventDescription eventDesc){
  boolean isReceiverBusyWithPreviousEvent=(eventHandlingExecutor.getQueue().size() > EVENT_QUEUE_CAPACITY / 2);
  boolean thisEventDiscarded=false;
  try {
    eventHandlingExecutor.execute(new Runnable(){
      public void run(){
        processEvent(eventData,eventDesc);
      }
    }
);
  }
 catch (  RejectedExecutionException ex) {
    thisEventDiscarded=true;
    numEventsDiscarded++;
  }
  if ((thisEventDiscarded || isReceiverBusyWithPreviousEvent) && receiverTooSlowLogRepeatGuard.checkAndIncrement()) {
    logEventProcessingTooSlowForEventRate(numEventsDiscarded,eventData.getClass().getName(),receiverTooSlowLogRepeatGuard.counterAtLastExecution());
    numEventsDiscarded=0;
  }
}",0.8934531450577664
134765,"public void createConnectionAction(EventDispatcher evtDispatcher,ErrorReporter errRep,SCInstance scInstance,Collection<TriggerEvent> derivedEvents) throws AcsJStateMachineActionEx {
  super.createConnectionAction(evtDispatcher,errRep,scInstance,derivedEvents);
  try {
    if (corbaRef == null) {
      corbaObj=new OSPushConsumerPOATie(NCSubscriber.this);
      corbaRef=OSPushConsumerHelper.narrow(helper.getContainerServices().activateOffShoot(corbaObj));
    }
    channelReconnectionCallback=new AcsNcReconnectionCallback(NCSubscriber.this,logger);
    channelReconnectionCallback.registerForReconnect(services,helper.getNotifyFactory());
    proxySupplier.connect_structured_push_consumer(org.omg.CosNotifyComm.StructuredPushConsumerHelper.narrow(corbaRef));
  }
 catch (  AcsJContainerServicesEx e) {
    LOG_NC_SubscriptionConnect_FAIL.log(logger,channelName,getNotificationFactoryName());
    throw new AcsJStateMachineActionEx(e);
  }
catch (  org.omg.CosEventChannelAdmin.AlreadyConnected e) {
    throw new AcsJStateMachineActionEx(new AcsJIllegalStateEventEx(e));
  }
catch (  org.omg.CosEventChannelAdmin.TypeError ex) {
    LOG_NC_SubscriptionConnect_FAIL.log(logger,channelName,getNotificationFactoryName());
    throw new AcsJStateMachineActionEx(ex);
  }
catch (  AcsJIllegalArgumentEx ex) {
    throw new AcsJStateMachineActionEx(ex);
  }
  LOG_NC_SubscriptionConnect_OK.log(logger,channelName,getNotificationFactoryName());
}","protected void createConnectionAction(EventDispatcher evtDispatcher,ErrorReporter errRep,SCInstance scInstance,Collection<TriggerEvent> derivedEvents) throws AcsJStateMachineActionEx {
  super.createConnectionAction(evtDispatcher,errRep,scInstance,derivedEvents);
  try {
    if (corbaRef == null) {
      corbaObj=new OSPushConsumerPOATie(NCSubscriber.this);
      corbaRef=OSPushConsumerHelper.narrow(helper.getContainerServices().activateOffShoot(corbaObj));
    }
    channelReconnectionCallback=new AcsNcReconnectionCallback(NCSubscriber.this,logger);
    channelReconnectionCallback.registerForReconnect(services,helper.getNotifyFactory());
    proxySupplier.connect_structured_push_consumer(org.omg.CosNotifyComm.StructuredPushConsumerHelper.narrow(corbaRef));
  }
 catch (  AcsJContainerServicesEx e) {
    LOG_NC_SubscriptionConnect_FAIL.log(logger,channelName,getNotificationFactoryName());
    throw new AcsJStateMachineActionEx(e);
  }
catch (  org.omg.CosEventChannelAdmin.AlreadyConnected e) {
    throw new AcsJStateMachineActionEx(new AcsJIllegalStateEventEx(e));
  }
catch (  org.omg.CosEventChannelAdmin.TypeError ex) {
    LOG_NC_SubscriptionConnect_FAIL.log(logger,channelName,getNotificationFactoryName());
    throw new AcsJStateMachineActionEx(ex);
  }
catch (  AcsJIllegalArgumentEx ex) {
    throw new AcsJStateMachineActionEx(ex);
  }
  LOG_NC_SubscriptionConnect_OK.log(logger,channelName,getNotificationFactoryName());
}",0.9955063947459384
134766,"/** 
 * This method is called by the notification channel (supplier proxy) each time an event is received. <p> It is declared <code>final</code> because it is crucial for the functioning of the NC library and thus cannot be overwritten by a subclass.  If for special purposes a notification of raw event reception is needed,  a subclass can implement   {@link #push_structured_event_called(StructuredEvent)}, which gets called from this method as the first thing it does. 
 * @param structuredEvent The structured event sent by a supplier.
 * @throws Disconnected If this subscriber is disconnected from the NC. See NC spec 3.3.7.1: ""if the invocation of push_structured_event upon a StructuredPushConsumer instance  by a StructuredProxyPushSupplier instance results in the Disconnected exception being raised,  the StructuredProxyPushSupplier will invoke its own disconnect_structured_push_supplier operation,  resulting in the destruction of that StructuredProxyPushSupplier instance."" This serves only as a backup mechanism, since normally we explicitly disconnect the subscriber.
 * @see org.omg.CosNotifyComm.StructuredPushConsumerOperations#push_structured_event(org.omg.CosNotification.StructuredEvent)
 */
@Override public final void push_structured_event(StructuredEvent structuredEvent) throws Disconnected {
  try {
    push_structured_event_called(structuredEvent);
  }
 catch (  Throwable thr) {
  }
  if (isDisconnected()) {
    throw new Disconnected();
  }
  final EventDescription eDescrip=EventDescriptionHelper.extract(structuredEvent.remainder_of_body);
  Object convertedAny=anyAide.complexAnyToObject(structuredEvent.filterable_data[0].value);
  if (convertedAny == null) {
    LOG_NC_EventReceive_FAIL.log(logger,channelName,getNotificationFactoryName(),structuredEvent.header.fixed_header.event_type.type_name,""String_Node_Str"");
  }
 else   if (!eventType.isInstance(convertedAny)) {
    if (genericReceiver == null) {
      logNoEventReceiver(convertedAny.getClass().getName());
    }
  }
 else {
    @SuppressWarnings(""String_Node_Str"") T struct=(T)convertedAny;
    if (isTraceEventsEnabled()) {
      LOG_NC_EventReceive_OK.log(logger,channelName,getNotificationFactoryName(),structuredEvent.header.fixed_header.event_type.type_name);
    }
    processEventAsync(struct,eDescrip);
  }
}","/** 
 * This method is called by the notification channel (supplier proxy) each time an event is received. <p> It is declared <code>final</code> because it is crucial for the functioning of the NC library and thus cannot be overwritten by a subclass.  If for special purposes a notification of raw event reception is needed,  a subclass can implement   {@link #push_structured_event_called(StructuredEvent)}, which gets called from this method as the first thing it does. 
 * @param structuredEvent The structured event sent by a supplier.
 * @throws Disconnected If this subscriber is disconnected from the NC. See NC spec 3.3.7.1: ""if the invocation of push_structured_event upon a StructuredPushConsumer instance  by a StructuredProxyPushSupplier instance results in the Disconnected exception being raised,  the StructuredProxyPushSupplier will invoke its own disconnect_structured_push_supplier operation,  resulting in the destruction of that StructuredProxyPushSupplier instance."" This serves only as a backup mechanism, since normally we explicitly disconnect the subscriber.
 * @see org.omg.CosNotifyComm.StructuredPushConsumerOperations#push_structured_event(org.omg.CosNotification.StructuredEvent)
 */
@Override public final void push_structured_event(StructuredEvent structuredEvent) throws Disconnected {
  try {
    push_structured_event_called(structuredEvent);
  }
 catch (  Throwable thr) {
  }
  if (isDisconnected()) {
    throw new Disconnected();
  }
  Object convertedAny=anyAide.complexAnyToObject(structuredEvent.filterable_data[0].value);
  if (convertedAny == null) {
    LOG_NC_EventReceive_FAIL.log(logger,channelName,getNotificationFactoryName(),structuredEvent.header.fixed_header.event_type.type_name,""String_Node_Str"");
  }
 else {
    if (!eventType.isInstance(convertedAny) && !hasGenericReceiver()) {
      logNoEventReceiver(convertedAny.getClass().getName());
    }
    EventDescription eventDesc=EventDescriptionHelper.extract(structuredEvent.remainder_of_body);
    if (isTraceEventsEnabled()) {
      LOG_NC_EventReceive_OK.log(logger,channelName,getNotificationFactoryName(),structuredEvent.header.fixed_header.event_type.type_name);
    }
    processEventAsync(convertedAny,eventDesc);
  }
}",0.9276764123983292
134767,"/** 
 * Note that in ACS 10.2 the meaning of the second parameter has slightly changed, but should be transparent. Before it was the ""activate"" option which makes no sense for real services and would typically be ""true"" when using this method for components rather than real services. Now ""true"" still means that the service should be activated, but ""false"" has the new meaning that we don't use the client handle, but instead use dummy handle '0'.  This allows the container to get the CDB reference before logging in to the manager.
 * @return org.omg.CORBA.Object  Reference to the service. If the service could not be activated, a nil reference is returned, and the status contains an error code detailing the cause of failure  (one of the component_* constants).
 */
public Object get_service(String service_url,boolean includeComponents) throws AcsJComponentNotAlreadyActivatedEx, AcsJCannotGetComponentEx, AcsJComponentConfigurationNotFoundEx, AcsJNoPermissionEx {
  if (!isLoggedIn(false)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  int clientId=(includeComponents ? checkAndGetManagerHandle() : 0);
  boolean activate=includeComponents;
  try {
    return m_manager.get_service(clientId,service_url,activate);
  }
 catch (  RuntimeException exc) {
    handleRuntimeException(exc);
    throw exc;
  }
catch (  NoPermissionEx ex) {
    throw AcsJNoPermissionEx.fromNoPermissionEx(ex);
  }
catch (  ComponentNotAlreadyActivatedEx ex) {
    throw AcsJComponentNotAlreadyActivatedEx.fromComponentNotAlreadyActivatedEx(ex);
  }
catch (  CannotGetComponentEx ex) {
    throw AcsJCannotGetComponentEx.fromCannotGetComponentEx(ex);
  }
catch (  ComponentConfigurationNotFoundEx ex) {
    throw AcsJComponentConfigurationNotFoundEx.fromComponentConfigurationNotFoundEx(ex);
  }
}","/** 
 * Note that in ACS 10.2 the meaning of the second parameter has slightly changed, but should be transparent. Before it was the ""activate"" option which makes no sense for real services and would typically be ""true"" when using this method for components rather than real services. Now ""true"" still means that the service should be activated, but ""false"" has the new meaning that we don't use the client handle, but instead use dummy handle '0'.  This allows the container to get the CDB reference before logging in to the manager.
 * @return org.omg.CORBA.Object  Reference to the service. If the service could not be activated, a nil reference is returned, and the status contains an error code detailing the cause of failure  (one of the component_* constants).
 */
public Object get_service(String service_url,boolean includeComponents) throws AcsJComponentNotAlreadyActivatedEx, AcsJCannotGetComponentEx, AcsJComponentConfigurationNotFoundEx, AcsJNoPermissionEx {
  int clientId=(includeComponents ? checkAndGetManagerHandle() : 0);
  boolean activate=includeComponents;
  try {
    return m_manager.get_service(clientId,service_url,activate);
  }
 catch (  RuntimeException exc) {
    handleRuntimeException(exc);
    throw exc;
  }
catch (  NoPermissionEx ex) {
    throw AcsJNoPermissionEx.fromNoPermissionEx(ex);
  }
catch (  ComponentNotAlreadyActivatedEx ex) {
    throw AcsJComponentNotAlreadyActivatedEx.fromComponentNotAlreadyActivatedEx(ex);
  }
catch (  CannotGetComponentEx ex) {
    throw AcsJCannotGetComponentEx.fromCannotGetComponentEx(ex);
  }
catch (  ComponentConfigurationNotFoundEx ex) {
    throw AcsJComponentConfigurationNotFoundEx.fromComponentConfigurationNotFoundEx(ex);
  }
}",0.9749287749287748
134768,"/** 
 * Queries the TMCDB and return the list of services to start for the  passed configuration name.
 * @param configurationName The not <code>null</code> and not empty name of the configuration
 * @return The not <code>null</code> list of services to start for the passed configuration
 * @throws HibernateException In case of error getting data from the TMCDB
 */
public List<AcsServiceToStart> getServicesList(String configurationName) throws HibernateException {
  if (configurationName == null || configurationName.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  logger.log(AcsLogLevel.DEBUG,""String_Node_Str"" + configurationName);
  Query query=session.createSQLQuery(sqlQuery);
  query.setString(namedParameterName,configurationName);
  List svcs=query.list();
  if (svcs != null) {
    AcsLogLevel lvl=(svcs.size() == 0) ? AcsLogLevel.WARNING : AcsLogLevel.DEBUG;
    logger.log(lvl,""String_Node_Str"" + svcs.size() + ""String_Node_Str"");
  }
 else {
    logger.log(AcsLogLevel.WARNING,""String_Node_Str"");
  }
  List<AcsServiceToStart> ret=new ArrayList<TMCDBServicesHelper.AcsServiceToStart>();
  for (  Object s : svcs) {
    ret.add(AcsServiceToStart.instanceFromDBRow((Object[])s));
  }
  return ret;
}","/** 
 * Queries the TMCDB and return the list of services to start for the  passed configuration name.
 * @param configurationName The not <code>null</code> and not empty name of the configuration
 * @return The not <code>null</code> list of services to start for the passed configuration
 * @throws HibernateException In case of error getting data from the TMCDB
 */
@SuppressWarnings(""String_Node_Str"") public List<AcsServiceToStart> getServicesList(String configurationName) throws HibernateException {
  if (configurationName == null || configurationName.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  logger.log(AcsLogLevel.DEBUG,""String_Node_Str"" + configurationName);
  Query query=session.createSQLQuery(sqlQuery);
  query.setString(namedParameterName,configurationName);
  List svcs=query.list();
  List<AcsServiceToStart> ret=new ArrayList<TMCDBServicesHelper.AcsServiceToStart>();
  if (svcs != null) {
    AcsLogLevel lvl=(svcs.size() == 0) ? AcsLogLevel.WARNING : AcsLogLevel.DEBUG;
    logger.log(lvl,""String_Node_Str"" + svcs.size() + ""String_Node_Str"");
    for (    Object s : svcs) {
      ret.add(AcsServiceToStart.instanceFromDBRow((Object[])s));
    }
  }
 else {
    logger.log(AcsLogLevel.WARNING,""String_Node_Str"");
  }
  return ret;
}",0.8314251875246743
134769,"/** 
 * @return The configuration names from the TMCDB
 * @throws HibernateException In case of error getting data from the TMCDB
 */
public Collection getConfigurationNames() throws HibernateException {
  Query query=session.createQuery(""String_Node_Str"");
  List list=query.list();
  return list;
}","/** 
 * @return The configuration names from the TMCDB
 * @throws HibernateException In case of error getting data from the TMCDB
 */
@SuppressWarnings(""String_Node_Str"") public Collection getConfigurationNames() throws HibernateException {
  Query query=session.createQuery(""String_Node_Str"");
  List list=query.list();
  return list;
}",0.9419152276295132
134770,"/** 
 * Creates a new RemoteThreadsMonitor with the given command line args
 * @param args The command line arguments.
 */
public RemoteThreadsMonitor(String[] args){
  if (args.length == 1) {
    boolean isNumber=true;
    boolean isHost=true;
    int pid=0;
    InetAddress remoteHost=null;
    try {
      pid=Integer.valueOf(args[0]);
    }
 catch (    NumberFormatException e) {
      isNumber=false;
    }
    try {
      remoteHost=InetAddress.getByName(args[0]);
    }
 catch (    UnknownHostException e) {
      isHost=false;
    }
    if (isNumber) {
      try {
        rtc=new RemoteThreadsClient(pid);
      }
 catch (      RemoteThreadsException e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        System.exit(1);
      }
    }
 else     if (isHost) {
      try {
        rtc=new RemoteThreadsClient(remoteHost);
      }
 catch (      RemoteThreadsException e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        System.exit(1);
      }
    }
 else {
      try {
        rtc=new RemoteThreadsClient(args[0]);
      }
 catch (      RemoteThreadsException e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        System.exit(1);
      }
    }
  }
 else   if (args.length == 2) {
    try {
      InetAddress remoteHost=null;
      try {
        remoteHost=InetAddress.getByName(args[0]);
      }
 catch (      UnknownHostException e) {
        System.err.println(""String_Node_Str"" + args[0]);
        System.exit(1);
      }
      rtc=new RemoteThreadsClient(remoteHost,Integer.valueOf(args[1]).intValue());
    }
 catch (    NumberFormatException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      System.exit(1);
    }
catch (    RemoteThreadsException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      System.exit(1);
    }
  }
  if (rtc.connect()) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}","/** 
 * Creates a new RemoteThreadsMonitor with the given command line args
 * @param args The command line arguments.
 */
public RemoteThreadsMonitor(String[] args){
  if (args.length == 1) {
    boolean isNumber=true;
    boolean isHost=true;
    int pid=0;
    InetAddress remoteHost=null;
    try {
      pid=Integer.valueOf(args[0]);
    }
 catch (    NumberFormatException e) {
      isNumber=false;
    }
    try {
      remoteHost=InetAddress.getByName(args[0]);
    }
 catch (    UnknownHostException e) {
      isHost=false;
    }
    if (isNumber) {
      try {
        rtc=new RemoteThreadsClient(pid);
      }
 catch (      RemoteThreadsException e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        System.exit(1);
      }
    }
 else     if (isHost) {
      try {
        rtc=new RemoteThreadsClient(remoteHost);
      }
 catch (      RemoteThreadsException e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        System.exit(1);
      }
    }
 else {
      try {
        rtc=new RemoteThreadsClient(args[0]);
      }
 catch (      RemoteThreadsException e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        System.exit(1);
      }
    }
  }
 else   if (args.length == 2) {
    try {
      InetAddress remoteHost=null;
      try {
        remoteHost=InetAddress.getByName(args[0]);
      }
 catch (      UnknownHostException e) {
        System.err.println(""String_Node_Str"" + args[0]);
        System.exit(1);
      }
      rtc=new RemoteThreadsClient(remoteHost,Integer.valueOf(args[1]).intValue());
    }
 catch (    NumberFormatException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      System.exit(1);
    }
catch (    RemoteThreadsException e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      System.exit(1);
    }
  }
  if (rtc != null && rtc.connect()) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.9963653985946208
134771,"public void registerOption(CmdLineRegisteredOption opt){
  if (opt == null) {
  }
 else {
    m_registeredOptions.put(opt.getName(),opt);
  }
  if (opt.getAlternativeName() != null) {
    m_registeredOptions.put(opt.getAlternativeName(),opt);
  }
}","public void registerOption(CmdLineRegisteredOption opt){
  if (opt == null) {
  }
 else {
    m_registeredOptions.put(opt.getName(),opt);
    if (opt.getAlternativeName() != null) {
      m_registeredOptions.put(opt.getAlternativeName(),opt);
    }
  }
}",0.9681274900398408
134772,"/** 
 * Flushes all log records if the remote log service has been made available before. Returns only when the log queue contains no more records, so execution time may be long. Should better not be called from the main thread.
 */
void flushAllAndWait(){
  if (DEBUG) {
    System.out.println(""String_Node_Str"");
  }
  if (!hasRemoteDispatcher()) {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
    return;
  }
  boolean flushSuccess=true;
  while (realQueueSize() > 0) {
    Future<Boolean> future=flush();
    try {
      flushSuccess=future.get().booleanValue();
    }
 catch (    Exception e) {
      flushSuccess=false;
      if (DEBUG) {
        System.err.println(""String_Node_Str"" + e.toString());
      }
      try {
        Thread.sleep(100);
      }
 catch (      Exception e2) {
      }
    }
 finally {
      if (DEBUG) {
        System.out.println(""String_Node_Str"" + flushSuccess);
      }
    }
  }
}","/** 
 * Flushes all log records if the remote log service has been made available before. Returns only when the log queue contains no more records, so execution time may be long. Should better not be called from the main thread.
 */
void flushAllAndWait(){
  if (DEBUG) {
    System.out.println(""String_Node_Str"");
  }
  if (!hasRemoteDispatcher()) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"");
    }
    return;
  }
  boolean flushSuccess=true;
  while (realQueueSize() > 0) {
    Future<Boolean> future=flush();
    try {
      flushSuccess=future.get().booleanValue();
    }
 catch (    Exception e) {
      flushSuccess=false;
      if (DEBUG) {
        System.out.println(""String_Node_Str"" + e.toString());
      }
      try {
        Thread.sleep(100);
      }
 catch (      Exception e2) {
      }
    }
 finally {
      if (DEBUG) {
        System.out.println(""String_Node_Str"" + flushSuccess);
      }
    }
  }
}",0.9936170212765958
134773,"DispatchingLogQueue(){
  outOfCapacity=false;
  preOverflowFlushPeriod=0;
  currentFlushPeriod=0;
  setMaxQueueSize(1000);
  flushLock=new ReentrantLock();
  queue=new PriorityBlockingQueue<LogRecord>(100,new LogRecordComparator());
  executor=new ScheduledThreadPoolExecutor(1,new DaemonThreadFactory(""String_Node_Str""));
  executor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
}","DispatchingLogQueue(){
  outOfCapacity=new AtomicBoolean(false);
  preOverflowFlushPeriod=0;
  currentFlushPeriod=0;
  setMaxQueueSize(1000);
  flushLock=new ReentrantLock();
  queue=new PriorityBlockingQueue<LogRecord>(100,new LogRecordComparator());
  executor=new ScheduledThreadPoolExecutor(1,new DaemonThreadFactory(""String_Node_Str""));
  executor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
}",0.9641532756489494
134774,"/** 
 * Adds a <code>LogRecord</code> to the internal queue, so that it gets scheduled for logging. If a high-level log record should be sent out immediately, the caller of this method should  subsequently call   {@link #flush()}, as the log method itself does not trigger a flush based on levels. <p> Threading note: it seems ok to make this method ""synchronized"". This avoids problems with stale queue size,  even though the damage would be small since the treatment of queue size is somewhat arbitrary anyway. Synchronization should not block callers long at all because flushing is done in a separate thread and only gets triggered here. <p> TODO: there is currently a minor problem with queue overflow: log records get drained from the queue, and when they can't be sent off to the log service, they are resubmitted to the queue. It could happen that in the meantime, some other record with INFO or higher level has been added to the queue, and that resubmitting some of the even more important records may fail. The solution would be to replace the 70%-filter rule with a running priority filter: any incoming record can kick out a less important record if the queue is full. 
 * @param logRecord  to be logged
 * @return true if logRecord was added to the queue for logging. False if queue was too full for this record.
 */
synchronized boolean log(LogRecord logRecord){
  int oldSize=queue.size();
  if (oldSize >= maxQueueSize) {
    if (!outOfCapacity) {
      preOverflowFlushPeriod=currentFlushPeriod;
      setPeriodicFlushing(10000);
    }
    outOfCapacity=true;
    if (LOSSLESS) {
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ex) {
        }
      }
 while (queue.size() >= maxQueueSize);
    }
 else {
      if (DEBUG || oldSize == maxQueueSize) {
        System.err.println(""String_Node_Str"" + logRecord.getMessage() + ""String_Node_Str"");
      }
      return false;
    }
  }
  if (outOfCapacity) {
    outOfCapacity=false;
    setPeriodicFlushing(preOverflowFlushPeriod);
    preOverflowFlushPeriod=0;
  }
  if (!LOSSLESS) {
    final int filterThreshold=maxQueueSize * 7 / 10;
    if (oldSize >= filterThreshold && logRecord.getLevel().intValue() < Level.INFO.intValue()) {
      if (DEBUG) {
        System.err.println(""String_Node_Str"" + (oldSize + 1) + ""String_Node_Str""+ maxQueueSize+ ""String_Node_Str""+ logRecord.getMessage()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  queue.put(logRecord);
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + logRecord.getMessage());
  }
  flushIfEnoughRecords(true);
  return true;
}","/** 
 * Adds a <code>LogRecord</code> to the internal queue, so that it gets scheduled for logging. If a high-level log record should be sent out immediately, the caller of this method should  subsequently call   {@link #flush()}, as the log method itself does not trigger a flush based on levels. <p> Threading note: it seems ok to make this method ""synchronized"". This avoids problems with stale queue size,  even though the damage would be small since the treatment of queue size is somewhat arbitrary anyway. Synchronization should not block callers long at all because flushing is done in a separate thread and only gets triggered here. <p> TODO: there is currently a minor problem with queue overflow: log records get drained from the queue, and when they can't be sent off to the log service, they are resubmitted to the queue. It could happen that in the meantime, some other record with INFO or higher level has been added to the queue, and that resubmitting some of the even more important records may fail. The solution would be to replace the 70%-filter rule with a running priority filter: any incoming record can kick out a less important record if the queue is full. 
 * @param logRecord  to be logged
 * @return true if logRecord was added to the queue for logging. False if queue was too full for this record.
 */
synchronized boolean log(LogRecord logRecord){
  int oldSize=queue.size();
  if (oldSize >= maxQueueSize) {
    boolean firstTimeOverflow=!outOfCapacity.getAndSet(true);
    if (firstTimeOverflow) {
      preOverflowFlushPeriod=currentFlushPeriod;
      setPeriodicFlushing(10000);
    }
    if (LOSSLESS) {
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ex) {
        }
      }
 while (queue.size() >= maxQueueSize);
    }
 else {
      if (DEBUG || firstTimeOverflow) {
        System.out.println(""String_Node_Str"" + logRecord.getMessage() + ""String_Node_Str"");
      }
      return false;
    }
  }
  if (outOfCapacity.getAndSet(false)) {
    setPeriodicFlushing(preOverflowFlushPeriod);
    preOverflowFlushPeriod=0;
    if (DEBUG) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (!LOSSLESS) {
    final int filterThreshold=maxQueueSize * 7 / 10;
    if (oldSize >= filterThreshold && logRecord.getLevel().intValue() < Level.INFO.intValue()) {
      if (DEBUG) {
        System.out.println(""String_Node_Str"" + (oldSize + 1) + ""String_Node_Str""+ maxQueueSize+ ""String_Node_Str""+ logRecord.getMessage()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  queue.put(logRecord);
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + logRecord.getMessage());
  }
  flushIfEnoughRecords(true);
  return true;
}",0.8240134654946699
134775,"/** 
 * Extracted from   {@link #flush(boolean)} to improve readability of the code.
 * @param logRecords the records to be sent to the remote logger.
 * @return true if all or at least some log records were permanently taken off the queue.
 */
private boolean flushLogRecords(final LogRecord[] logRecords){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
  }
  boolean flushedSomeRecords=true;
  RemoteLogDispatcher.FailedLogRecords failures=remoteLogDispatcher.sendLogRecords(logRecords);
  List<LogRecord> allFailures=new ArrayList<LogRecord>();
  if (failures.hasSendFailures()) {
    List<LogRecord> sendFailures=failures.getSendFailures();
    allFailures.addAll(sendFailures);
    flushedSomeRecords=(sendFailures.size() < logRecords.length);
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + sendFailures.size() + ""String_Node_Str"");
    }
  }
  if (failures.hasSerializationFailures()) {
    for (    LogRecord logRecord : failures.getSerializationFailures()) {
      System.err.println(""String_Node_Str"" + logRecord.getMessage());
    }
    flushedSomeRecords=true;
  }
  for (  LogRecord e : logRecords) {
    if (!allFailures.contains(e))     queue.remove(e);
  }
  lastFlushFinished=System.currentTimeMillis();
  return flushedSomeRecords;
}","/** 
 * Extracted from   {@link #flush(boolean)} to improve readability of the code.
 * @param logRecords the records to be sent to the remote logger.
 * @return true if all or at least some log records were permanently taken off the queue.
 */
private boolean flushLogRecords(final LogRecord[] logRecords){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
  }
  boolean flushedSomeRecords=true;
  RemoteLogDispatcher.FailedLogRecords failures=remoteLogDispatcher.sendLogRecords(logRecords);
  List<LogRecord> allFailures=new ArrayList<LogRecord>();
  if (failures.hasSendFailures()) {
    List<LogRecord> sendFailures=failures.getSendFailures();
    allFailures.addAll(sendFailures);
    flushedSomeRecords=(sendFailures.size() < logRecords.length);
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + sendFailures.size() + ""String_Node_Str"");
    }
  }
  if (failures.hasSerializationFailures()) {
    for (    LogRecord logRecord : failures.getSerializationFailures()) {
      System.out.println(""String_Node_Str"" + logRecord.getMessage());
    }
    flushedSomeRecords=true;
  }
  for (  LogRecord e : logRecords) {
    if (!allFailures.contains(e))     queue.remove(e);
  }
  lastFlushFinished=System.currentTimeMillis();
  return flushedSomeRecords;
}",0.9954233409610984
134776,"public void run(){
  if (queue.size() > 0) {
    if (lastFlushFinished <= System.currentTimeMillis() - periodMillisec) {
      try {
        flush(true);
      }
 catch (      Throwable thr) {
        System.err.println(""String_Node_Str"" + thr.getMessage());
      }
    }
 else {
      if (DEBUG) {
        System.err.println(""String_Node_Str"");
      }
    }
  }
 else {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
  }
}","public void run(){
  if (queue.size() > 0) {
    if (lastFlushFinished <= System.currentTimeMillis() - periodMillisec) {
      try {
        flush(true);
      }
 catch (      Throwable thr) {
        System.out.println(""String_Node_Str"" + thr.getMessage());
      }
    }
 else {
      if (DEBUG) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
 else {
    if (DEBUG) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.9798206278026906
134777,"/** 
 * Triggers periodic calls to   {@link #flush(boolean)},  or terminates such automatic flushing if <code>periodMillisec == 0</code>. <p> All control over periodic log flushing is confined in this method. <p>  The call returns without further action if flushing is already enabled  with the same period as <code>periodMillisec</code>.
 * @param periodMillisec the delay between end of last scheduled flush() and the next scheduled flush().
 */
void setPeriodicFlushing(final int periodMillisec){
  if (!hasRemoteDispatcher()) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (currentFlushPeriod == periodMillisec && flushesPeriodically()) {
    return;
  }
  currentFlushPeriod=periodMillisec;
  if (flushesPeriodically()) {
    flushScheduleFuture.cancel(false);
    flushScheduleFuture=null;
    if (DEBUG && periodMillisec == 0) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (periodMillisec > 0) {
    Runnable cmd=new Runnable(){
      public void run(){
        if (queue.size() > 0) {
          if (lastFlushFinished <= System.currentTimeMillis() - periodMillisec) {
            try {
              flush(true);
            }
 catch (            Throwable thr) {
              System.err.println(""String_Node_Str"" + thr.getMessage());
            }
          }
 else {
            if (DEBUG) {
              System.err.println(""String_Node_Str"");
            }
          }
        }
 else {
          if (DEBUG) {
            System.err.println(""String_Node_Str"");
          }
        }
      }
    }
;
    flushScheduleFuture=executor.scheduleWithFixedDelay(cmd,periodMillisec,periodMillisec,TimeUnit.MILLISECONDS);
  }
}","/** 
 * Triggers periodic calls to   {@link #flush(boolean)},  or terminates such automatic flushing if <code>periodMillisec == 0</code>. <p> All control over periodic log flushing is confined in this method. <p>  The call returns without further action if flushing is already enabled  with the same period as <code>periodMillisec</code>.
 * @param periodMillisec the delay between end of last scheduled flush() and the next scheduled flush().
 */
void setPeriodicFlushing(final int periodMillisec){
  if (!hasRemoteDispatcher()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (currentFlushPeriod == periodMillisec && flushesPeriodically()) {
    return;
  }
  currentFlushPeriod=periodMillisec;
  if (flushesPeriodically()) {
    flushScheduleFuture.cancel(false);
    flushScheduleFuture=null;
    if (DEBUG && periodMillisec == 0) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (periodMillisec > 0) {
    Runnable cmd=new Runnable(){
      public void run(){
        if (queue.size() > 0) {
          if (lastFlushFinished <= System.currentTimeMillis() - periodMillisec) {
            try {
              flush(true);
            }
 catch (            Throwable thr) {
              System.out.println(""String_Node_Str"" + thr.getMessage());
            }
          }
 else {
            if (DEBUG) {
              System.out.println(""String_Node_Str"");
            }
          }
        }
 else {
          if (DEBUG) {
            System.out.println(""String_Node_Str"");
          }
        }
      }
    }
;
    flushScheduleFuture=executor.scheduleWithFixedDelay(cmd,periodMillisec,periodMillisec,TimeUnit.MILLISECONDS);
  }
}",0.9927927927927928
134778,"/** 
 * Internal flush method which covers straight calls to flush as well as scheduled calls. <p> Threading note: this method is thread safe because competing threads are blocked on a flush lock (and additionally on <code>queue.drainTo(..)</code>), so that the second thread may unexpectedly not find any log records and thus will return immediately.
 * @param isScheduled true if this method is called by a timer, as opposed to some more direct thread. Used only for debugging. 
 * @return Success indicator: true if all or at least some log records were permanently taken off the queue by this flush request.
 */
private boolean flush(boolean isScheduled){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + isScheduled + ""String_Node_Str""+ Thread.currentThread().getName());
  }
  boolean flushedSomeRecords=false;
  if (!hasRemoteDispatcher()) {
    System.err.println(""String_Node_Str"");
  }
 else {
    flushLock.lock();
    try {
      int bufferSize=remoteLogDispatcher.getBufferSize();
      int queueSize=queue.size();
      LogRecord[] allRecords=queue.toArray(new LogRecord[queueSize]);
      final LogRecord[] logRecords;
      if (queueSize > bufferSize) {
        logRecords=new LogRecord[bufferSize];
        System.arraycopy(allRecords,0,logRecords,0,bufferSize);
      }
 else {
        logRecords=new LogRecord[queueSize];
        System.arraycopy(allRecords,0,logRecords,0,queueSize);
      }
      if (logRecords.length != 0) {
        flushedSomeRecords=flushLogRecords(logRecords);
        if (flushedSomeRecords) {
          if (DEBUG) {
            System.out.println(""String_Node_Str"");
          }
          flushIfEnoughRecords(false);
        }
      }
 else {
        if (DEBUG) {
          System.err.println(""String_Node_Str"" + isScheduled + ""String_Node_Str"");
        }
      }
    }
  finally {
      flushLock.unlock();
    }
  }
  return flushedSomeRecords;
}","/** 
 * Internal flush method which covers straight calls to flush as well as scheduled calls. <p> Threading note: this method is thread safe because competing threads are blocked on a flush lock (and additionally on <code>queue.drainTo(..)</code>), so that the second thread may unexpectedly not find any log records and thus will return immediately.
 * @param isScheduled true if this method is called by a timer, as opposed to some more direct thread. Used only for debugging. 
 * @return Success indicator: true if all or at least some log records were permanently taken off the queue by this flush request.
 */
private boolean flush(boolean isScheduled){
  if (DEBUG) {
    System.out.println(""String_Node_Str"" + isScheduled + ""String_Node_Str""+ Thread.currentThread().getName());
  }
  boolean flushedSomeRecords=false;
  if (!hasRemoteDispatcher()) {
    System.out.println(""String_Node_Str"");
  }
 else {
    flushLock.lock();
    try {
      int bufferSize=remoteLogDispatcher.getBufferSize();
      int queueSize=queue.size();
      LogRecord[] allRecords=queue.toArray(new LogRecord[queueSize]);
      final LogRecord[] logRecords;
      if (queueSize > bufferSize) {
        logRecords=new LogRecord[bufferSize];
        System.arraycopy(allRecords,0,logRecords,0,bufferSize);
      }
 else {
        logRecords=new LogRecord[queueSize];
        System.arraycopy(allRecords,0,logRecords,0,queueSize);
      }
      if (logRecords.length != 0) {
        flushedSomeRecords=flushLogRecords(logRecords);
        if (flushedSomeRecords) {
          if (DEBUG) {
            System.out.println(""String_Node_Str"");
          }
          flushIfEnoughRecords(false);
        }
      }
 else {
        if (DEBUG) {
          System.out.println(""String_Node_Str"" + isScheduled + ""String_Node_Str"");
        }
      }
    }
  finally {
      flushLock.unlock();
    }
  }
  return flushedSomeRecords;
}",0.9968487394957984
134779,"@Override public void unlock(){
  delegate.unlock();
  LockInfo lockInfo=lockInfoMap.remove(Thread.currentThread().getId());
  lockInfo.timeUnlocked=System.currentTimeMillis();
  printProfilingMessage(lockInfo,Thread.currentThread().getName());
}","@Override public void unlock(){
  delegate.unlock();
  if (!delegate.isHeldByCurrentThread()) {
    LockInfo lockInfo=lockInfoMap.remove(Thread.currentThread().getId());
    lockInfo.timeUnlocked=System.currentTimeMillis();
    printProfilingMessage(lockInfo,Thread.currentThread().getName());
  }
 else {
  }
}",0.8833034111310593
134780,"/** 
 * Internal method for requesting default components.
 * @param requestor	requestor of the component.
 * @param typr		type of the component
 * @return	componentInfo	<code>ComponentInfo</code> of requested default component.
 */
private ComponentInfo internalRequestDefaultComponent(int requestor,String type) throws NoDefaultComponentException {
  String defaultComponentName=null;
  ComponentInfo defaultComponentInfo=null;
synchronized (defaultComponents) {
    defaultComponentInfo=(ComponentInfo)defaultComponents.get(type);
  }
  if (defaultComponentInfo != null)   defaultComponentName=defaultComponentInfo.getName();
  if (defaultComponentName == null) {
    DAOProxy componentsDAO=getComponentsDAOProxy();
    if (componentsDAO != null) {
      try {
        componentsDAO.get_field_data(""String_Node_Str"");
        String[] ids=getComponentsList();
        for (int i=0; i < ids.length; i++) {
          String name=ids[i];
          if (name == null) {
            logger.log(Level.WARNING,""String_Node_Str"" + ids[i] + ""String_Node_Str"");
            continue;
          }
          if (!name.equals(ComponentSpec.COMPSPEC_ANY)) {
            String componentType=readStringCharacteristics(componentsDAO,ids[i] + ""String_Node_Str"");
            if (type == null) {
              logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
              continue;
            }
            final String TRUE_STRING=""String_Node_Str"";
            if (type.equals(componentType)) {
              String isDefault=readStringCharacteristics(componentsDAO,ids[i] + ""String_Node_Str"",true);
              if (isDefault == null || !isDefault.equalsIgnoreCase(TRUE_STRING))               continue;
              defaultComponentName=name;
              break;
            }
          }
        }
      }
 catch (      Throwable ex) {
        CoreException ce=new CoreException(""String_Node_Str"",ex);
        reportException(ce);
      }
    }
  }
  if (defaultComponentInfo != null) {
    try {
      StatusHolder status=new StatusHolder();
      ContainerInfo containerInfo=getContainerInfo(defaultComponentInfo.getContainer());
      if (containerInfo == null) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str""+ HandleHelper.toString(defaultComponentInfo.getContainer())+ ""String_Node_Str"");
        reportException(huse);
        return null;
      }
      ComponentInfo componentInfo=internalRequestComponent(requestor,defaultComponentInfo.getName(),defaultComponentInfo.getType(),defaultComponentInfo.getCode(),containerInfo.getName(),RELEASE_IMMEDIATELY,status,true);
      if (componentInfo == null || status.getStatus() != ComponentStatus.COMPONENT_ACTIVATED) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"");
        reportException(huse);
        return null;
      }
      return componentInfo;
    }
 catch (    Throwable t) {
      CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"",t);
      reportException(huse);
      return null;
    }
  }
 else   if (defaultComponentName != null) {
    URI curl=null;
    try {
      curl=CURLHelper.createURI(defaultComponentName);
    }
 catch (    URISyntaxException use) {
      CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"",use);
      reportException(huse);
      return null;
    }
    try {
      StatusHolder status=new StatusHolder();
      Component component=internalRequestComponent(requestor,curl,status,true);
      if (component == null || status.getStatus() != ComponentStatus.COMPONENT_ACTIVATED) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"");
        reportException(huse);
        return null;
      }
      ComponentInfo[] componentInfo=getComponentInfo(requestor,new int[0],defaultComponentName,type,true);
      if (componentInfo == null || componentInfo.length != 1) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"");
        reportException(huse);
        return null;
      }
 else       return componentInfo[0];
    }
 catch (    Throwable t) {
      CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"",t);
      reportException(huse);
      return null;
    }
  }
  NoDefaultComponentException ndce=new NoDefaultComponentException(""String_Node_Str"" + type + ""String_Node_Str"");
  throw ndce;
}","/** 
 * Internal method for requesting default components.
 * @param requestor	requestor of the component.
 * @param typr		type of the component
 * @return	componentInfo	<code>ComponentInfo</code> of requested default component.
 */
private ComponentInfo internalRequestDefaultComponent(int requestor,String type) throws NoDefaultComponentException {
  String defaultComponentName=null;
  ComponentInfo defaultComponentInfo=null;
synchronized (defaultComponents) {
    defaultComponentInfo=defaultComponents.get(type);
  }
  if (defaultComponentInfo != null)   defaultComponentName=defaultComponentInfo.getName();
  if (defaultComponentName == null) {
    DAOProxy componentsDAO=getComponentsDAOProxy();
    if (componentsDAO != null) {
      try {
        componentsDAO.get_field_data(""String_Node_Str"");
        String[] ids=getComponentsList();
        for (int i=0; i < ids.length; i++) {
          String name=ids[i];
          if (name == null) {
            logger.log(Level.WARNING,""String_Node_Str"" + ids[i] + ""String_Node_Str"");
            continue;
          }
          if (!name.equals(ComponentSpec.COMPSPEC_ANY)) {
            String componentType=readStringCharacteristics(componentsDAO,ids[i] + ""String_Node_Str"");
            if (type == null) {
              logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"");
              continue;
            }
            final String TRUE_STRING=""String_Node_Str"";
            if (type.equals(componentType)) {
              String isDefault=readStringCharacteristics(componentsDAO,ids[i] + ""String_Node_Str"",true);
              if (isDefault == null || !isDefault.equalsIgnoreCase(TRUE_STRING))               continue;
              defaultComponentName=name;
              break;
            }
          }
        }
      }
 catch (      Throwable ex) {
        CoreException ce=new CoreException(""String_Node_Str"",ex);
        reportException(ce);
      }
    }
  }
  if (defaultComponentInfo != null) {
    try {
      StatusHolder status=new StatusHolder();
      ContainerInfo containerInfo=getContainerInfo(defaultComponentInfo.getContainer());
      if (containerInfo == null) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str""+ HandleHelper.toString(defaultComponentInfo.getContainer())+ ""String_Node_Str"");
        reportException(huse);
        return null;
      }
      ComponentInfo componentInfo=internalRequestComponent(requestor,defaultComponentInfo.getName(),defaultComponentInfo.getType(),defaultComponentInfo.getCode(),containerInfo.getName(),RELEASE_IMMEDIATELY,status,true);
      if (componentInfo == null || status.getStatus() != ComponentStatus.COMPONENT_ACTIVATED) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"");
        reportException(huse);
        return null;
      }
      return componentInfo;
    }
 catch (    Throwable t) {
      CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"",t);
      reportException(huse);
      return null;
    }
  }
 else   if (defaultComponentName != null) {
    URI curl=null;
    try {
      curl=CURLHelper.createURI(defaultComponentName);
    }
 catch (    URISyntaxException use) {
      CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"",use);
      reportException(huse);
      return null;
    }
    try {
      StatusHolder status=new StatusHolder();
      Component component=internalRequestComponent(requestor,curl,status,true);
      if (component == null || status.getStatus() != ComponentStatus.COMPONENT_ACTIVATED) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"");
        reportException(huse);
        return null;
      }
      ComponentInfo[] componentInfo=getComponentInfo(requestor,new int[0],defaultComponentName,type,true);
      if (componentInfo == null || componentInfo.length != 1) {
        CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"");
        reportException(huse);
        return null;
      }
 else       return componentInfo[0];
    }
 catch (    Throwable t) {
      CoreException huse=new CoreException(""String_Node_Str"" + defaultComponentName + ""String_Node_Str"",t);
      reportException(huse);
      return null;
    }
  }
  NoDefaultComponentException ndce=new NoDefaultComponentException(""String_Node_Str"" + type + ""String_Node_Str"");
  throw ndce;
}",0.9983586825692088
134781,"/** 
 * Returns human-readable and meaningful name of handle.
 * @param id	handle to stringifys
 * @return	human-readable and meaningful name of handle.
 */
private String getRequestorName(int id){
  int handle=id & HANDLE_MASK;
  boolean invalidHandle=true;
  StringBuffer name=new StringBuffer(30);
switch (id & TYPE_MASK) {
case CONTAINER_MASK:
synchronized (containers) {
      if (containers.isAllocated(handle)) {
        ContainerInfo info=(ContainerInfo)containers.get(handle);
        if (info.getHandle() == id) {
          invalidHandle=false;
          name.append(info.getName());
        }
      }
    }
  break;
case CLIENT_MASK:
synchronized (clients) {
  if (clients.isAllocated(handle)) {
    ClientInfo info=(ClientInfo)clients.get(handle);
    if (info.getHandle() == id) {
      invalidHandle=false;
      name.append(info.getName());
    }
  }
}
break;
case ADMINISTRATOR_MASK:
synchronized (administrators) {
if (administrators.isAllocated(handle)) {
ClientInfo info=(ClientInfo)administrators.get(handle);
if (info.getHandle() == id) {
  invalidHandle=false;
  name.append(info.getName());
}
}
}
break;
case COMPONENT_MASK:
synchronized (components) {
if (components.isAllocated(handle)) {
ComponentInfo info=(ComponentInfo)components.get(handle);
if (info != null && info.getHandle() == id) {
invalidHandle=false;
name.append(info.getName());
}
}
}
break;
case MANAGER_MASK:
name.append(""String_Node_Str"");
invalidHandle=false;
break;
}
if (invalidHandle) name.append(""String_Node_Str"");
return name.toString();
}","/** 
 * Returns human-readable and meaningful name of handle.
 * @param id	handle to stringifys
 * @return	human-readable and meaningful name of handle.
 */
private String getRequestorName(int id){
  int reqHandle=id & HANDLE_MASK;
  boolean invalidHandle=true;
  StringBuffer name=new StringBuffer(30);
switch (id & TYPE_MASK) {
case CONTAINER_MASK:
synchronized (containers) {
      if (containers.isAllocated(reqHandle)) {
        ContainerInfo info=(ContainerInfo)containers.get(reqHandle);
        if (info.getHandle() == id) {
          invalidHandle=false;
          name.append(info.getName());
        }
      }
    }
  break;
case CLIENT_MASK:
synchronized (clients) {
  if (clients.isAllocated(reqHandle)) {
    ClientInfo info=(ClientInfo)clients.get(reqHandle);
    if (info.getHandle() == id) {
      invalidHandle=false;
      name.append(info.getName());
    }
  }
}
break;
case ADMINISTRATOR_MASK:
synchronized (administrators) {
if (administrators.isAllocated(reqHandle)) {
ClientInfo info=(ClientInfo)administrators.get(reqHandle);
if (info.getHandle() == id) {
  invalidHandle=false;
  name.append(info.getName());
}
}
}
break;
case COMPONENT_MASK:
synchronized (components) {
if (components.isAllocated(reqHandle)) {
ComponentInfo info=(ComponentInfo)components.get(reqHandle);
if (info != null && info.getHandle() == id) {
invalidHandle=false;
name.append(info.getName());
}
}
}
break;
case MANAGER_MASK:
name.append(""String_Node_Str"");
invalidHandle=false;
break;
}
if (invalidHandle) name.append(""String_Node_Str"");
return name.toString();
}",0.985497905252981
134782,"/** 
 * Check for cyclic dependency between components, if detected <code>NoResourcesException</code> exception is thrown.
 * @param requestor
 * @param requestedComponentName
 */
private void checkCyclicDependency(int requestor,String requestedComponentName) throws AcsJCyclicDependencyDetectedEx {
  if ((requestor & TYPE_MASK) != COMPONENT_MASK)   return;
  ComponentInfo componentInfo=null;
synchronized (components) {
    int h=components.first();
    while (h != 0) {
      ComponentInfo info=(ComponentInfo)components.get(h);
      if (info.getName().equals(requestedComponentName)) {
        componentInfo=info;
        break;
      }
 else       h=components.next(h);
    }
    ComponentInfo pendingComponentInfo;
synchronized (pendingActivations) {
      pendingComponentInfo=(ComponentInfo)pendingActivations.get(requestedComponentName);
    }
    if (componentInfo != null && pendingComponentInfo == null)     return;
    if (componentInfo == null)     componentInfo=pendingComponentInfo;
    if (componentInfo == null)     return;
    ArrayList pathList=doCycleCheck(requestor,componentInfo.getHandle());
    if (pathList == null)     return;
    StringBuffer pathBuffer=new StringBuffer();
    for (int i=pathList.size() - 1; i >= 0; i--)     pathBuffer.append(((ComponentInfo)pathList.get(i)).getName()).append(""String_Node_Str"");
    pathBuffer.append(componentInfo.getName());
    AcsJCyclicDependencyDetectedEx cde=new AcsJCyclicDependencyDetectedEx();
    cde.setCURL(requestedComponentName);
    cde.setRequestor(requestor);
    throw cde;
  }
}","/** 
 * Check for cyclic dependency between components, if detected <code>NoResourcesException</code> exception is thrown.
 * @param requestor
 * @param requestedComponentName
 */
private void checkCyclicDependency(int requestor,String requestedComponentName) throws AcsJCyclicDependencyDetectedEx {
  if ((requestor & TYPE_MASK) != COMPONENT_MASK)   return;
  ComponentInfo componentInfo=null;
synchronized (components) {
    int h=components.first();
    while (h != 0) {
      ComponentInfo info=(ComponentInfo)components.get(h);
      if (info.getName().equals(requestedComponentName)) {
        componentInfo=info;
        break;
      }
 else       h=components.next(h);
    }
    ComponentInfo pendingComponentInfo;
synchronized (pendingActivations) {
      pendingComponentInfo=pendingActivations.get(requestedComponentName);
    }
    if (componentInfo != null && pendingComponentInfo == null)     return;
    if (componentInfo == null)     componentInfo=pendingComponentInfo;
    if (componentInfo == null)     return;
    ArrayList pathList=doCycleCheck(requestor,componentInfo.getHandle());
    if (pathList == null)     return;
    StringBuffer pathBuffer=new StringBuffer();
    for (int i=pathList.size() - 1; i >= 0; i--)     pathBuffer.append(((ComponentInfo)pathList.get(i)).getName()).append(""String_Node_Str"");
    pathBuffer.append(componentInfo.getName());
    AcsJCyclicDependencyDetectedEx cde=new AcsJCyclicDependencyDetectedEx();
    cde.setCURL(requestedComponentName);
    cde.setRequestor(requestor);
    throw cde;
  }
}",0.9951845906902088
134783,"/** 
 * Acquire synchronization lock for named object.
 * @param name	name of the object whose lock to acquire.
 * @param msecs	the number of milleseconds to wait.An argument less than or equal to zero means not to wait at all.
 * @return	<code>true</code> if acquired, <code>false</code> othwerwise.
 */
private boolean acquireSynchronizationObject(String name,long msec){
  ReferenceCountingLock lock;
synchronized (activationSynchronization) {
    lock=(ReferenceCountingLock)activationSynchronization.get(name);
    if (lock == null) {
      lock=new ReferenceCountingLock();
      activationSynchronization.put(name,lock);
    }
 else     lock.increment();
  }
  boolean success=lock.acquire(msec);
  if (!success)   releaseSynchronizationObject(name,false);
  return success;
}","/** 
 * Acquire synchronization lock for named object.
 * @param name	name of the object whose lock to acquire.
 * @param msecs	the number of milleseconds to wait.An argument less than or equal to zero means not to wait at all.
 * @return	<code>true</code> if acquired, <code>false</code> othwerwise.
 */
private boolean acquireSynchronizationObject(String name,long msec){
  ReferenceCountingLock lock;
synchronized (activationSynchronization) {
    lock=activationSynchronization.get(name);
    if (lock == null) {
      lock=new ReferenceCountingLock();
      activationSynchronization.put(name,lock);
    }
 else     lock.increment();
  }
  boolean success=lock.acquire(msec);
  if (!success)   releaseSynchronizationObject(name,false);
  return success;
}",0.985093972780298
134784,"/** 
 * Release synchronization lock for named object.
 * @param name	name of the object whose lock to release.
 * @param release	set to <code>false</code> if there is no need to call releaseon synchronization lock.
 */
private void releaseSynchronizationObject(String name,boolean release){
synchronized (activationSynchronization) {
    ReferenceCountingLock lock=(ReferenceCountingLock)activationSynchronization.get(name);
    if (lock != null) {
      if (lock.decrement() <= 0)       activationSynchronization.remove(name);
      if (release)       lock.release();
    }
  }
}","/** 
 * Release synchronization lock for named object.
 * @param name	name of the object whose lock to release.
 * @param release	set to <code>false</code> if there is no need to call releaseon synchronization lock.
 */
private void releaseSynchronizationObject(String name,boolean release){
synchronized (activationSynchronization) {
    ReferenceCountingLock lock=activationSynchronization.get(name);
    if (lock != null) {
      if (lock.decrement() <= 0)       activationSynchronization.remove(name);
      if (release)       lock.release();
    }
  }
}",0.9798068481123792
134785,"/** 
 * Called from client code after all manager inicialization is done.
 */
public void initializationDone(){
  threadPool.execute(new Runnable(){
    public void run(){
      initializeServiceDaemons();
      autoStartComponents();
    }
  }
);
}","/** 
 * Called from client code after all manager initialization is done.
 */
public void initializationDone(){
  threadPool.execute(new Runnable(){
    public void run(){
      initializeServiceDaemons();
      autoStartComponents();
    }
  }
);
}",0.9959839357429718
134786,"/** 
 * Initializes Manager.
 * @param prevayler			implementation of prevayler system
 * @param context				remote directory implementation
 */
public void initialize(Prevayler prevayler,CDBAccess cdbAccess,Context context,Logger logger,ManagerContainerServices managerContainerServices){
  this.prevayler=prevayler;
  this.remoteDirectory=context;
  this.logger=logger;
  initializeDefaultConfiguration();
  if (cdbAccess != null)   setCDBAccess(cdbAccess);
  readManagerConfiguration();
  random=new Random();
  heartbeatTask=new Timer(true);
  delayedDeactivationTask=new Timer(true);
  containerLoggedInMonitor=new Object();
  activationSynchronization=new HashMap();
  activationPendingRWLock=new ReaderPreferenceReadWriteLock();
  shutdown=new AtomicBoolean(false);
  threadPool=new ThreadPoolExecutor(poolThreads,poolThreads,Long.MAX_VALUE,TimeUnit.NANOSECONDS,new LinkedBlockingQueue(),new DaemonThreadFactory(""String_Node_Str""));
  managerCache=new HashMap();
  pendingActivations=new HashMap();
  pendingContainerShutdown=Collections.synchronizedSet(new HashSet());
  clientMessageQueue=new HashMap<Client,LinkedList<ClientMessageTask>>();
  groupedNotifyTaskMap=new HashMap<Object,GroupedNotifyTask>();
  threadsUsedPrecentage=new AtomicInteger(0);
  threadPool.prestartAllCoreThreads();
  try {
    String componentSpec=System.getProperty(NAME_CDB_COMPONENTSPEC);
    if (componentSpec != null) {
      cdbActivation=new ComponentSpec(componentSpec);
      logger.log(Level.INFO,""String_Node_Str"" + cdbActivation + ""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,""String_Node_Str"" + NAME_CDB_COMPONENTSPEC + ""String_Node_Str""+ t.getMessage(),t);
  }
  checkLoadBalancingStrategy();
  try {
    alarmSource=new AlarmSourceImpl(managerContainerServices);
    alarmSource.start();
  }
 catch (  Throwable ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ex.getMessage(),ex);
    alarmSource=null;
  }
  initializePingTasks();
  topologySortManager=new ComponentInfoTopologicalSortManager(components,containers,activationPendingRWLock,pendingContainerShutdown,threadPool,logger);
}","/** 
 * Initializes Manager.
 * @param prevayler			implementation of prevayler system
 * @param context				remote directory implementation
 */
public void initialize(Prevayler prevayler,CDBAccess cdbAccess,Context context,Logger logger,ManagerContainerServices managerContainerServices){
  this.prevayler=prevayler;
  this.remoteDirectory=context;
  this.logger=logger;
  initializeDefaultConfiguration();
  if (cdbAccess != null)   setCDBAccess(cdbAccess);
  readManagerConfiguration();
  random=new Random();
  heartbeatTask=new Timer(true);
  delayedDeactivationTask=new Timer(true);
  containerLoggedInMonitor=new Object();
  activationSynchronization=new HashMap<String,ReferenceCountingLock>();
  activationPendingRWLock=new ReaderPreferenceReadWriteLock();
  shutdown=new AtomicBoolean(false);
  threadPool=new ThreadPoolExecutor(poolThreads,poolThreads,Long.MAX_VALUE,TimeUnit.NANOSECONDS,new LinkedBlockingQueue(),new DaemonThreadFactory(""String_Node_Str""));
  managerCache=new HashMap<String,Manager>();
  pendingActivations=new HashMap<String,ComponentInfo>();
  pendingContainerShutdown=Collections.synchronizedSet(new HashSet<String>());
  clientMessageQueue=new HashMap<Client,LinkedList<ClientMessageTask>>();
  groupedNotifyTaskMap=new HashMap<Object,GroupedNotifyTask>();
  threadsUsedPrecentage=new AtomicInteger(0);
  threadPool.prestartAllCoreThreads();
  try {
    String componentSpec=System.getProperty(NAME_CDB_COMPONENTSPEC);
    if (componentSpec != null) {
      cdbActivation=new ComponentSpec(componentSpec);
      logger.log(Level.INFO,""String_Node_Str"" + cdbActivation + ""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,""String_Node_Str"" + NAME_CDB_COMPONENTSPEC + ""String_Node_Str""+ t.getMessage(),t);
  }
  checkLoadBalancingStrategy();
  try {
    alarmSource=new AlarmSourceImpl(managerContainerServices);
    alarmSource.start();
  }
 catch (  Throwable ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ex.getMessage(),ex);
    alarmSource=null;
  }
  initializePingTasks();
  topologySortManager=new ComponentInfoTopologicalSortManager(components,containers,activationPendingRWLock,pendingContainerShutdown,threadPool,logger);
}",0.9824642362713428
134787,"/** 
 * Get manager for given domain.
 * @param domainName	domain name.
 * @return manager for given domain, <code>null</code> if not found.
 */
private synchronized Manager getManagerForDomain(String domainName){
  if (managerCache.containsKey(domainName))   return (Manager)managerCache.get(domainName);
  final Object obj=lookup(federationDirectory,dottedToHierarchical(domainName) + ""String_Node_Str"",null);
  if (obj == null)   return null;
  Manager remoteManager=new ManagerProxy(obj);
  managerCache.put(domainName,remoteManager);
  return remoteManager;
}","/** 
 * Get manager for given domain.
 * @param domainName	domain name.
 * @return manager for given domain, <code>null</code> if not found.
 */
private synchronized Manager getManagerForDomain(String domainName){
  if (managerCache.containsKey(domainName))   return managerCache.get(domainName);
  final Object obj=lookup(federationDirectory,dottedToHierarchical(domainName) + ""String_Node_Str"",null);
  if (obj == null)   return null;
  Manager remoteManager=new ManagerProxy(obj);
  managerCache.put(domainName,remoteManager);
  return remoteManager;
}",0.9919571045576407
134788,"private ComponentInfo internalNoSyncRequestComponentPhase2(int requestor,String name,String type,String code,String containerName,int keepAliveTime,StatusHolder status,AcsJCannotGetComponentEx bcex,boolean isOtherDomainComponent,boolean isDynamicComponent,int h,boolean reactivate,ComponentInfo componentInfo,Container container,ContainerInfo containerInfo,long executionId,long activationTime,boolean timeoutError) throws AcsJCannotGetComponentEx {
  if ((requestor & TYPE_MASK) == COMPONENT_MASK)   removeComponentOwner(h | COMPONENT_MASK,requestor);
synchronized (pendingActivations) {
    pendingActivations.remove(name);
  }
  if (componentInfo == null || componentInfo.getHandle() == 0 || componentInfo.getComponent() == null) {
    logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(h | COMPONENT_MASK)+ ""String_Node_Str"");
synchronized (components) {
      if (!reactivate)       executeCommand(new ComponentCommandDeallocate(h,h | COMPONENT_MASK,timeoutError ? WhyUnloadedReason.TIMEOUT : WhyUnloadedReason.REMOVED,true));
    }
    status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
    if (bcex == null)     return null;
 else     throw bcex;
  }
  logger.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(h | COMPONENT_MASK)+ ""String_Node_Str"");
  if (!isOtherDomainComponent && !componentInfo.getComponent().doesImplement(type)) {
    logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
  }
  if (isOtherDomainComponent) {
    componentInfo.setHandle(h | COMPONENT_MASK);
    componentInfo.setClients(new IntArray());
    componentInfo.setComponents(new IntArray(0));
    componentInfo.setContainer(0);
    type=componentInfo.getType();
    code=componentInfo.getCode();
  }
  int clients[];
synchronized (components) {
    if (componentInfo.getHandle() != (h | COMPONENT_MASK)) {
      int componentHandle=componentInfo.getHandle() & HANDLE_MASK;
      if (components.isAllocated(componentHandle)) {
        if (!reactivate)         executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REMOVED,true));
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
        throw bcex;
      }
 else {
        ComponentInfo existingData=null;
        if (!reactivate)         executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REPLACED,true));
 else {
          existingData=(ComponentInfo)components.get(h);
          executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REPLACED));
        }
        Integer objHandle=(Integer)executeCommand(new ComponentCommandAllocateHandle(componentHandle,true));
        if (objHandle == null || (h=objHandle.intValue()) == 0) {
          bcex=new AcsJCannotGetComponentEx();
          logger.log(Level.SEVERE,""String_Node_Str"",bcex);
          status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
          throw bcex;
        }
 else         if (existingData != null)         executeCommand(new ComponentCommandSet(h,existingData));
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ComponentInfo existingData=(ComponentInfo)components.get(h);
    ComponentInfo data=new ComponentInfo(componentInfo.getHandle(),name,type,code,componentInfo.getComponent());
    if (existingData != null) {
      data.setClients(existingData.getClients());
      data.setComponents(existingData.getComponents());
    }
    if (requestor != 0)     if (!data.getClients().contains(requestor))     data.getClients().add(requestor);
    if (keepAliveTime <= RELEASE_NEVER)     if (!data.getClients().contains(this.getHandle()))     data.getClients().add(this.getHandle());
    data.setKeepAliveTime(keepAliveTime);
    if (isOtherDomainComponent) {
      data.setContainer(0);
      data.setContainerName(componentInfo.getContainerName());
    }
 else {
      data.setContainer(containerInfo.getHandle());
      data.setContainerName(containerInfo.getName());
    }
    data.setAccessRights(0);
    data.setInterfaces(componentInfo.getInterfaces());
    if (isDynamicComponent) {
      data.setDynamic(true);
      data.setDynamicContainerName(containerName);
    }
    executeCommand(new ComponentCommandSet(h,data));
    if (!reactivate)     executeCommand(new ComponentCommandAckAlloc(h));
    componentInfo=data;
    clients=componentInfo.getClients().toArray();
  }
  if (!isOtherDomainComponent) {
    if ((requestor & TYPE_MASK) == COMPONENT_MASK)     addComponentOwner(componentInfo.getHandle(),requestor);
    boolean constructed=false;
    try {
      componentInfo.getComponent().construct();
      constructed=true;
    }
 catch (    Throwable ex) {
      bcex=new AcsJCannotGetComponentEx(ex);
      logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
    }
    if ((requestor & TYPE_MASK) == COMPONENT_MASK)     removeComponentOwner(componentInfo.getHandle(),requestor);
    if (!constructed) {
synchronized (components) {
        if (!reactivate)         executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REMOVED));
        try {
          container.deactivate_component(componentInfo.getHandle());
        }
 catch (        Exception ex) {
          bcex=new AcsJCannotGetComponentEx(ex);
          logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ containerName+ ""String_Node_Str"",bcex);
        }
        status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
        throw bcex;
      }
    }
  }
  if (requestor != this.getHandle() && requestor != 0)   addComponentOwner(componentInfo.getHandle(),requestor);
  if (!isOtherDomainComponent) synchronized (containerInfo.getComponents()) {
    if (!containerInfo.getComponents().contains(componentInfo.getHandle()))     executeCommand(new ContainerInfoCommandComponentAdd(containerInfo.getHandle() & HANDLE_MASK,componentInfo.getHandle()));
  }
  if (reactivate) {
synchronized (unavailableComponents) {
      executeCommand(new UnavailableComponentCommandRemove(name));
    }
  }
  if (prevayler != null) {
    try {
      ((SnapshotPrevayler)prevayler).takeSnapshot();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  bind(convertToHiearachical(name),""String_Node_Str"",componentInfo.getComponent().getObject());
  if (!isOtherDomainComponent)   notifyComponentActivated(componentInfo,activationTime,executionId);
  if (reactivate) {
    notifyComponentAvailable(requestor,clients,new ComponentInfo[]{componentInfo});
  }
  notifyComponentRequested(new int[]{requestor},new int[]{componentInfo.getHandle()},activationTime);
  if (reactivate)   logger.log(Level.FINE,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(componentInfo.getHandle())+ ""String_Node_Str"");
 else   logger.log(Level.FINE,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(componentInfo.getHandle())+ ""String_Node_Str"");
  if (containerInfo != null)   topologySortManager.notifyTopologyChange(containerInfo.getHandle());
  status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
  return componentInfo;
}","private ComponentInfo internalNoSyncRequestComponentPhase2(int requestor,String name,String type,String code,String containerName,int keepAliveTime,StatusHolder status,AcsJCannotGetComponentEx bcex,boolean isOtherDomainComponent,boolean isDynamicComponent,int h,boolean reactivate,ComponentInfo componentInfo,Container container,ContainerInfo containerInfo,long executionId,long activationTime,boolean timeoutError) throws AcsJCannotGetComponentEx {
  if ((requestor & TYPE_MASK) == COMPONENT_MASK) {
    removeComponentOwner(h | COMPONENT_MASK,requestor);
  }
synchronized (pendingActivations) {
    pendingActivations.remove(name);
  }
  if (componentInfo == null || componentInfo.getHandle() == 0 || componentInfo.getComponent() == null) {
    logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(h | COMPONENT_MASK)+ ""String_Node_Str"");
synchronized (components) {
      if (!reactivate)       executeCommand(new ComponentCommandDeallocate(h,h | COMPONENT_MASK,timeoutError ? WhyUnloadedReason.TIMEOUT : WhyUnloadedReason.REMOVED,true));
    }
    status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
    if (bcex == null)     return null;
 else     throw bcex;
  }
  logger.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(h | COMPONENT_MASK)+ ""String_Node_Str"");
  if (!isOtherDomainComponent && !componentInfo.getComponent().doesImplement(type)) {
    logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str"");
  }
  if (isOtherDomainComponent) {
    componentInfo.setHandle(h | COMPONENT_MASK);
    componentInfo.setClients(new IntArray());
    componentInfo.setComponents(new IntArray(0));
    componentInfo.setContainer(0);
    type=componentInfo.getType();
    code=componentInfo.getCode();
  }
  int clients[];
synchronized (components) {
    if (componentInfo.getHandle() != (h | COMPONENT_MASK)) {
      int componentHandle=componentInfo.getHandle() & HANDLE_MASK;
      if (components.isAllocated(componentHandle)) {
        if (!reactivate)         executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REMOVED,true));
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
        throw bcex;
      }
 else {
        ComponentInfo existingData=null;
        if (!reactivate)         executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REPLACED,true));
 else {
          existingData=(ComponentInfo)components.get(h);
          executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REPLACED));
        }
        Integer objHandle=(Integer)executeCommand(new ComponentCommandAllocateHandle(componentHandle,true));
        if (objHandle == null || (h=objHandle.intValue()) == 0) {
          bcex=new AcsJCannotGetComponentEx();
          logger.log(Level.SEVERE,""String_Node_Str"",bcex);
          status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
          throw bcex;
        }
 else         if (existingData != null)         executeCommand(new ComponentCommandSet(h,existingData));
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ComponentInfo existingData=(ComponentInfo)components.get(h);
    ComponentInfo data=new ComponentInfo(componentInfo.getHandle(),name,type,code,componentInfo.getComponent());
    if (existingData != null) {
      data.setClients(existingData.getClients());
      data.setComponents(existingData.getComponents());
    }
    if (requestor != 0)     if (!data.getClients().contains(requestor))     data.getClients().add(requestor);
    if (keepAliveTime <= RELEASE_NEVER)     if (!data.getClients().contains(this.getHandle()))     data.getClients().add(this.getHandle());
    data.setKeepAliveTime(keepAliveTime);
    if (isOtherDomainComponent) {
      data.setContainer(0);
      data.setContainerName(componentInfo.getContainerName());
    }
 else {
      data.setContainer(containerInfo.getHandle());
      data.setContainerName(containerInfo.getName());
    }
    data.setAccessRights(0);
    data.setInterfaces(componentInfo.getInterfaces());
    if (isDynamicComponent) {
      data.setDynamic(true);
      data.setDynamicContainerName(containerName);
    }
    executeCommand(new ComponentCommandSet(h,data));
    if (!reactivate)     executeCommand(new ComponentCommandAckAlloc(h));
    componentInfo=data;
    clients=componentInfo.getClients().toArray();
  }
  if (!isOtherDomainComponent) {
    if ((requestor & TYPE_MASK) == COMPONENT_MASK)     addComponentOwner(componentInfo.getHandle(),requestor);
    boolean constructed=false;
    try {
      componentInfo.getComponent().construct();
      constructed=true;
    }
 catch (    Throwable ex) {
      bcex=new AcsJCannotGetComponentEx(ex);
      logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
    }
    if ((requestor & TYPE_MASK) == COMPONENT_MASK)     removeComponentOwner(componentInfo.getHandle(),requestor);
    if (!constructed) {
synchronized (components) {
        if (!reactivate)         executeCommand(new ComponentCommandDeallocate(h,componentInfo.getHandle(),WhyUnloadedReason.REMOVED));
        try {
          container.deactivate_component(componentInfo.getHandle());
        }
 catch (        Exception ex) {
          bcex=new AcsJCannotGetComponentEx(ex);
          logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ containerName+ ""String_Node_Str"",bcex);
        }
        status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
        throw bcex;
      }
    }
  }
  if (requestor != this.getHandle() && requestor != 0)   addComponentOwner(componentInfo.getHandle(),requestor);
  if (!isOtherDomainComponent) synchronized (containerInfo.getComponents()) {
    if (!containerInfo.getComponents().contains(componentInfo.getHandle()))     executeCommand(new ContainerInfoCommandComponentAdd(containerInfo.getHandle() & HANDLE_MASK,componentInfo.getHandle()));
  }
  if (reactivate) {
synchronized (unavailableComponents) {
      executeCommand(new UnavailableComponentCommandRemove(name));
    }
  }
  if (prevayler != null) {
    try {
      ((SnapshotPrevayler)prevayler).takeSnapshot();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  bind(convertToHiearachical(name),""String_Node_Str"",componentInfo.getComponent().getObject());
  if (!isOtherDomainComponent)   notifyComponentActivated(componentInfo,activationTime,executionId);
  if (reactivate) {
    notifyComponentAvailable(requestor,clients,new ComponentInfo[]{componentInfo});
  }
  notifyComponentRequested(new int[]{requestor},new int[]{componentInfo.getHandle()},activationTime);
  if (reactivate)   logger.log(Level.FINE,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(componentInfo.getHandle())+ ""String_Node_Str"");
 else   logger.log(Level.FINE,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(componentInfo.getHandle())+ ""String_Node_Str"");
  if (containerInfo != null)   topologySortManager.notifyTopologyChange(containerInfo.getHandle());
  status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
  return componentInfo;
}",0.9994519797232496
134789,"/** 
 * Returns the defaultComponents.
 * @return Map
 */
public Map getDefaultComponents(){
  return defaultComponents;
}","/** 
 * Returns the defaultComponents.
 * @return Map
 */
public Map<String,ComponentInfo> getDefaultComponents(){
  return defaultComponents;
}",0.9172932330827068
134790,"/** 
 * Internal method for requesting components (non sync).
 * @param requestor		requestor of the component.
 * @param name			name of component to be requested, non-<code>null</code>.
 * @param type			type of component to be requested; if <code>null</code> CDB will be queried.
 * @param code			code of component to be requested; if <code>null</code> CDB will be queried.
 * @param containerName	container name of component to be requested; if <code>null</code> CDB will be queried.
 * @param status			returned completion status of the request.
 * @param activate		<code>true</code> if component has to be activated
 * @return	componentInfo	<code>ComponentInfo</code> of requested component.
 */
private ComponentInfo internalNoSyncRequestComponent(int requestor,String name,String type,String code,String containerName,int keepAliveTime,StatusHolder status,boolean activate) throws AcsJCannotGetComponentEx, AcsJComponentSpecIncompatibleWithActiveComponentEx {
  AcsJCannotGetComponentEx bcex=null;
  if (name == null) {
    bcex=new AcsJCannotGetComponentEx();
    logger.log(Level.SEVERE,""String_Node_Str"",bcex);
    throw bcex;
  }
  if (status == null) {
    bcex=new AcsJCannotGetComponentEx();
    logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
    throw bcex;
  }
  boolean isOtherDomainComponent=name.startsWith(CURL_URI_SCHEMA);
  boolean isDynamicComponent=isOtherDomainComponent ? false : (type != null || code != null || containerName != null);
  int h;
  boolean reactivate=false;
  ComponentInfo componentInfo=null;
synchronized (components) {
    h=components.first();
    while (h != 0) {
      componentInfo=(ComponentInfo)components.get(h);
      if (componentInfo.getName().equals(name)) {
synchronized (unavailableComponents) {
          if (unavailableComponents.containsKey(name)) {
            reactivate=true;
          }
        }
        ContainerInfo containerInfo=getContainerInfo(componentInfo.getContainer());
        if ((type != null && !componentInfo.getType().equals(type)) || (code != null && componentInfo.getCode() != null && !componentInfo.getCode().equals(code)) || (!reactivate && containerInfo != null && containerName != null && !containerInfo.getName().equals(containerName))) {
          AcsJComponentSpecIncompatibleWithActiveComponentEx ciwace=new AcsJComponentSpecIncompatibleWithActiveComponentEx();
          ciwace.setCURL(componentInfo.getName());
          ciwace.setComponentType(componentInfo.getType());
          ciwace.setComponentCode(componentInfo.getCode() != null ? componentInfo.getCode() : ""String_Node_Str"");
          ciwace.setContainerName(containerInfo != null ? containerInfo.getName() : ""String_Node_Str"");
          throw ciwace;
        }
        if (activate) {
          if (reactivate)           break;
          if (requestor != 0) {
            if (!componentInfo.getClients().contains(requestor))             executeCommand(new ComponentCommandClientAdd(componentInfo.getHandle() & HANDLE_MASK,requestor));
          }
          if (requestor != this.getHandle() && requestor != 0)           addComponentOwner(componentInfo.getHandle(),requestor);
          notifyComponentRequested(new int[]{requestor},new int[]{componentInfo.getHandle()},System.currentTimeMillis());
          if ((requestor & TYPE_MASK) == COMPONENT_MASK) {
            ComponentInfo requestorComponentInfo=getComponentInfo(requestor);
            if (requestorComponentInfo != null && requestorComponentInfo.getContainerName() != null && requestorComponentInfo.getContainerName().equals(componentInfo.getContainerName()))             topologySortManager.notifyTopologyChange(componentInfo.getContainer());
          }
          status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
          return componentInfo;
        }
 else {
          if (reactivate)           status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
 else           status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
          return componentInfo;
        }
      }
      h=components.next(h);
    }
  }
  if (reactivate && componentInfo.isDynamic()) {
    if (componentInfo.getType() == null || componentInfo.getCode() == null || componentInfo.getDynamicContainerName() == null) {
      bcex=new AcsJCannotGetComponentEx();
      logger.log(Level.SEVERE,""String_Node_Str"" + componentInfo + ""String_Node_Str"",bcex);
      status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
      throw bcex;
    }
 else {
      type=componentInfo.getType();
      code=componentInfo.getCode();
      containerName=componentInfo.getDynamicContainerName();
      keepAliveTime=componentInfo.getKeepAliveTime();
    }
  }
 else   if (!isOtherDomainComponent && (type == null || code == null || containerName == null)) {
    DAOProxy dao=getComponentsDAOProxy();
    if (dao == null || readStringCharacteristics(dao,name,true) == null) {
      Object ref=lookup(name,null);
      if (ref != null) {
        status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
        return new ComponentInfo(0,name,null,null,new ServiceComponent(ref));
      }
 else {
        bcex=new AcsJCannotGetComponentEx();
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        throw bcex;
      }
    }
    if (code == null) {
      code=readStringCharacteristics(dao,name + ""String_Node_Str"");
      if (code == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        throw bcex;
      }
    }
    if (type == null) {
      type=readStringCharacteristics(dao,name + ""String_Node_Str"");
      if (type == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        throw bcex;
      }
    }
    if (containerName == null) {
      containerName=readStringCharacteristics(dao,name + ""String_Node_Str"");
      if (containerName == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        throw bcex;
      }
    }
    if (keepAliveTime == RELEASE_TIME_UNDEFINED) {
      keepAliveTime=readLongCharacteristics(dao,name + ""String_Node_Str"",RELEASE_IMMEDIATELY,true);
    }
  }
  if (keepAliveTime == RELEASE_TIME_UNDEFINED) {
    DAOProxy dao=getComponentsDAOProxy();
    if (dao != null) {
      keepAliveTime=readLongCharacteristics(dao,name + ""String_Node_Str"",RELEASE_IMMEDIATELY,true);
    }
 else {
      keepAliveTime=RELEASE_IMMEDIATELY;
    }
  }
  DAOProxy dao=getComponentsDAOProxy();
  String componentImplLang=null;
  if (dao != null) {
    componentImplLang=readStringCharacteristics(dao,name + ""String_Node_Str"",true);
  }
  if (!activate) {
    status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
    return null;
  }
  Container container=null;
  ContainerInfo containerInfo=null;
  Manager remoteManager=null;
  if (isOtherDomainComponent) {
    try {
      String domainName=CURLHelper.createURI(name).getAuthority();
      remoteManager=getManagerForDomain(domainName);
      if (remoteManager == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.WARNING,""String_Node_Str"" + domainName + ""String_Node_Str"",bcex);
        throw bcex;
      }
    }
 catch (    Throwable th) {
      bcex=new AcsJCannotGetComponentEx(th);
      logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
      status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
      throw bcex;
    }
  }
 else {
    containerInfo=getContainerInfo(containerName);
    if (containerInfo == null)     containerInfo=startUpContainer(containerName);
    if (containerInfo != null) {
      checkContainerShutdownState(containerInfo);
      container=containerInfo.getContainer();
    }
    if (container == null) {
      bcex=new AcsJCannotGetComponentEx();
      logger.log(Level.SEVERE,""String_Node_Str"" + containerName + ""String_Node_Str""+ name+ ""String_Node_Str"",bcex);
      status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
      throw bcex;
    }
  }
  ImplLang containerImplLang=containerInfo.getImplLang();
  if (containerImplLang != null && containerImplLang != ImplLang.not_specified) {
    if (componentImplLang != null && ImplLang.fromString(componentImplLang) != containerImplLang) {
      AcsJCannotGetComponentEx af=new AcsJCannotGetComponentEx();
      logger.log(Level.WARNING,""String_Node_Str"" + componentImplLang + ""String_Node_Str""+ containerImplLang.name()+ ""String_Node_Str"",af);
      throw af;
    }
  }
synchronized (components) {
    if (!reactivate) {
      Integer objHandle=(Integer)executeCommand(new ComponentCommandPreallocate());
      h=(objHandle == null) ? 0 : objHandle.intValue();
    }
    if (h == 0) {
      AcsJCannotGetComponentEx af=new AcsJCannotGetComponentEx();
      logger.log(Level.WARNING,""String_Node_Str"",af);
      throw af;
    }
    if (!reactivate) {
      ComponentInfo data=new ComponentInfo(h | COMPONENT_MASK,name,type,code,null);
      data.setKeepAliveTime(keepAliveTime);
      executeCommand(new ComponentCommandSet(h,data));
synchronized (pendingActivations) {
        componentInfo=(ComponentInfo)pendingActivations.put(name,data);
      }
      if ((requestor & TYPE_MASK) == COMPONENT_MASK)       addComponentOwner(data.getHandle(),requestor);
    }
  }
  componentInfo=null;
  long executionId=0;
  long activationTime=0;
  boolean timeoutError=false;
  if (isOtherDomainComponent) {
    try {
      URI curlName=CURLHelper.createURI(name);
      StatusHolder statusHolder=new StatusHolder();
      remoteManager.getComponent(INTERDOMAIN_MANAGER_HANDLE,curlName,true,statusHolder);
      activationTime=System.currentTimeMillis();
      if (statusHolder.getStatus() == ComponentStatus.COMPONENT_ACTIVATED) {
        String localName=curlName.getPath();
        if (localName.charAt(0) == '/')         localName=localName.substring(1);
        ComponentInfo[] infos=remoteManager.getComponentInfo(INTERDOMAIN_MANAGER_HANDLE,new int[0],localName,""String_Node_Str"",true);
        if (infos != null && infos.length == 1) {
          componentInfo=infos[0];
          componentInfo.setContainerName(CURL_URI_SCHEMA + curlName.getAuthority() + ""String_Node_Str""+ componentInfo.getContainerName());
        }
      }
    }
 catch (    Throwable ex) {
      bcex=new AcsJCannotGetComponentEx(ex);
      logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
      timeoutError=(ex instanceof TimeoutRemoteException);
    }
  }
 else {
    logger.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(h | COMPONENT_MASK)+ ""String_Node_Str""+ containerInfo.getName()+ ""String_Node_Str"");
    boolean callSyncActivate=System.getProperties().containsKey(NAME_SYNC_ACTIVATE);
    if (containerInfo.getImplLang() == ImplLang.py)     callSyncActivate=true;
    if (callSyncActivate) {
      try {
        executionId=generateExecutionId();
        activationTime=System.currentTimeMillis();
        componentInfo=container.activate_component(h | COMPONENT_MASK,executionId,name,code,type);
      }
 catch (      Throwable ex) {
        bcex=new AcsJCannotGetComponentEx(ex);
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ containerName+ ""String_Node_Str"",bcex);
        timeoutError=(ex instanceof TimeoutRemoteException);
      }
    }
 else {
      try {
        executionId=generateExecutionId();
        activationTime=System.currentTimeMillis();
        ComponentInfoCompletionCallbackImpl callback=new ComponentInfoCompletionCallbackImpl(requestor,name,type,code,containerName,keepAliveTime,status,isOtherDomainComponent,isDynamicComponent,h,reactivate,container,containerInfo,executionId,activationTime);
        container.activate_component_async(h | COMPONENT_MASK,executionId,name,code,type,callback);
        return callback.waitUntilActivated(getLockTimeout());
      }
 catch (      Throwable ex) {
        bcex=new AcsJCannotGetComponentEx(ex);
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ containerName+ ""String_Node_Str"",bcex);
        throw bcex;
      }
    }
  }
  return internalNoSyncRequestComponentPhase2(requestor,name,type,code,containerName,keepAliveTime,status,bcex,isOtherDomainComponent,isDynamicComponent,h,reactivate,componentInfo,container,containerInfo,executionId,activationTime,timeoutError);
}","/** 
 * Internal method for requesting components (non sync).
 * @param requestor		requestor of the component.
 * @param name			name of component to be requested, non-<code>null</code>.
 * @param type			type of component to be requested; if <code>null</code> CDB will be queried.
 * @param code			code of component to be requested; if <code>null</code> CDB will be queried.
 * @param containerName	container name of component to be requested; if <code>null</code> CDB will be queried.
 * @param status			returned completion status of the request.
 * @param activate		<code>true</code> if component has to be activated
 * @return	componentInfo	<code>ComponentInfo</code> of requested component.
 */
private ComponentInfo internalNoSyncRequestComponent(int requestor,String name,String type,String code,String containerName,int keepAliveTime,StatusHolder status,boolean activate) throws AcsJCannotGetComponentEx, AcsJComponentSpecIncompatibleWithActiveComponentEx {
  AcsJCannotGetComponentEx bcex=null;
  if (name == null) {
    bcex=new AcsJCannotGetComponentEx();
    logger.log(Level.SEVERE,""String_Node_Str"",bcex);
    throw bcex;
  }
  if (status == null) {
    bcex=new AcsJCannotGetComponentEx();
    logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
    throw bcex;
  }
  boolean isOtherDomainComponent=name.startsWith(CURL_URI_SCHEMA);
  boolean isDynamicComponent=isOtherDomainComponent ? false : (type != null || code != null || containerName != null);
  int h;
  boolean reactivate=false;
  ComponentInfo componentInfo=null;
synchronized (components) {
    h=components.first();
    while (h != 0) {
      componentInfo=(ComponentInfo)components.get(h);
      if (componentInfo.getName().equals(name)) {
synchronized (unavailableComponents) {
          if (unavailableComponents.containsKey(name)) {
            reactivate=true;
          }
        }
        ContainerInfo containerInfo=getContainerInfo(componentInfo.getContainer());
        if ((type != null && !componentInfo.getType().equals(type)) || (code != null && componentInfo.getCode() != null && !componentInfo.getCode().equals(code)) || (!reactivate && containerInfo != null && containerName != null && !containerInfo.getName().equals(containerName))) {
          AcsJComponentSpecIncompatibleWithActiveComponentEx ciwace=new AcsJComponentSpecIncompatibleWithActiveComponentEx();
          ciwace.setCURL(componentInfo.getName());
          ciwace.setComponentType(componentInfo.getType());
          ciwace.setComponentCode(componentInfo.getCode() != null ? componentInfo.getCode() : ""String_Node_Str"");
          ciwace.setContainerName(containerInfo != null ? containerInfo.getName() : ""String_Node_Str"");
          throw ciwace;
        }
        if (activate) {
          if (reactivate)           break;
          if (requestor != 0) {
            if (!componentInfo.getClients().contains(requestor))             executeCommand(new ComponentCommandClientAdd(componentInfo.getHandle() & HANDLE_MASK,requestor));
          }
          if (requestor != this.getHandle() && requestor != 0)           addComponentOwner(componentInfo.getHandle(),requestor);
          notifyComponentRequested(new int[]{requestor},new int[]{componentInfo.getHandle()},System.currentTimeMillis());
          if ((requestor & TYPE_MASK) == COMPONENT_MASK) {
            ComponentInfo requestorComponentInfo=getComponentInfo(requestor);
            if (requestorComponentInfo != null && requestorComponentInfo.getContainerName() != null && requestorComponentInfo.getContainerName().equals(componentInfo.getContainerName()))             topologySortManager.notifyTopologyChange(componentInfo.getContainer());
          }
          status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
          return componentInfo;
        }
 else {
          if (reactivate)           status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
 else           status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
          return componentInfo;
        }
      }
      h=components.next(h);
    }
  }
  if (reactivate && componentInfo.isDynamic()) {
    if (componentInfo.getType() == null || componentInfo.getCode() == null || componentInfo.getDynamicContainerName() == null) {
      bcex=new AcsJCannotGetComponentEx();
      logger.log(Level.SEVERE,""String_Node_Str"" + componentInfo + ""String_Node_Str"",bcex);
      status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
      throw bcex;
    }
 else {
      type=componentInfo.getType();
      code=componentInfo.getCode();
      containerName=componentInfo.getDynamicContainerName();
      keepAliveTime=componentInfo.getKeepAliveTime();
    }
  }
 else   if (!isOtherDomainComponent && (type == null || code == null || containerName == null)) {
    DAOProxy dao=getComponentsDAOProxy();
    if (dao == null || readStringCharacteristics(dao,name,true) == null) {
      Object ref=lookup(name,null);
      if (ref != null) {
        status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
        return new ComponentInfo(0,name,null,null,new ServiceComponent(ref));
      }
 else {
        bcex=new AcsJCannotGetComponentEx();
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        throw bcex;
      }
    }
    if (code == null) {
      code=readStringCharacteristics(dao,name + ""String_Node_Str"");
      if (code == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        throw bcex;
      }
    }
    if (type == null) {
      type=readStringCharacteristics(dao,name + ""String_Node_Str"");
      if (type == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        throw bcex;
      }
    }
    if (containerName == null) {
      containerName=readStringCharacteristics(dao,name + ""String_Node_Str"");
      if (containerName == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
        status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
        throw bcex;
      }
    }
    if (keepAliveTime == RELEASE_TIME_UNDEFINED) {
      keepAliveTime=readLongCharacteristics(dao,name + ""String_Node_Str"",RELEASE_IMMEDIATELY,true);
    }
  }
  if (keepAliveTime == RELEASE_TIME_UNDEFINED) {
    DAOProxy dao=getComponentsDAOProxy();
    if (dao != null) {
      keepAliveTime=readLongCharacteristics(dao,name + ""String_Node_Str"",RELEASE_IMMEDIATELY,true);
    }
 else {
      keepAliveTime=RELEASE_IMMEDIATELY;
    }
  }
  DAOProxy dao=getComponentsDAOProxy();
  String componentImplLang=null;
  if (dao != null) {
    componentImplLang=readStringCharacteristics(dao,name + ""String_Node_Str"",true);
  }
  if (!activate) {
    status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
    return null;
  }
  Container container=null;
  ContainerInfo containerInfo=null;
  Manager remoteManager=null;
  if (isOtherDomainComponent) {
    try {
      String domainName=CURLHelper.createURI(name).getAuthority();
      remoteManager=getManagerForDomain(domainName);
      if (remoteManager == null) {
        bcex=new AcsJCannotGetComponentEx();
        logger.log(Level.WARNING,""String_Node_Str"" + domainName + ""String_Node_Str"",bcex);
        throw bcex;
      }
    }
 catch (    Throwable th) {
      bcex=new AcsJCannotGetComponentEx(th);
      logger.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
      status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
      throw bcex;
    }
  }
 else {
    containerInfo=getContainerInfo(containerName);
    if (containerInfo == null)     containerInfo=startUpContainer(containerName);
    if (containerInfo != null) {
      checkContainerShutdownState(containerInfo);
      container=containerInfo.getContainer();
    }
    if (container == null) {
      bcex=new AcsJCannotGetComponentEx();
      logger.log(Level.SEVERE,""String_Node_Str"" + containerName + ""String_Node_Str""+ name+ ""String_Node_Str"",bcex);
      status.setStatus(ComponentStatus.COMPONENT_NOT_ACTIVATED);
      throw bcex;
    }
  }
  ImplLang containerImplLang=containerInfo.getImplLang();
  if (containerImplLang != null && containerImplLang != ImplLang.not_specified) {
    if (componentImplLang != null && ImplLang.fromString(componentImplLang) != containerImplLang) {
      AcsJCannotGetComponentEx af=new AcsJCannotGetComponentEx();
      logger.log(Level.WARNING,""String_Node_Str"" + componentImplLang + ""String_Node_Str""+ containerImplLang.name()+ ""String_Node_Str"",af);
      throw af;
    }
  }
synchronized (components) {
    if (!reactivate) {
      Integer objHandle=(Integer)executeCommand(new ComponentCommandPreallocate());
      h=(objHandle == null) ? 0 : objHandle.intValue();
    }
    if (h == 0) {
      AcsJCannotGetComponentEx af=new AcsJCannotGetComponentEx();
      logger.log(Level.WARNING,""String_Node_Str"",af);
      throw af;
    }
    if (!reactivate) {
      ComponentInfo data=new ComponentInfo(h | COMPONENT_MASK,name,type,code,null);
      data.setKeepAliveTime(keepAliveTime);
      executeCommand(new ComponentCommandSet(h,data));
synchronized (pendingActivations) {
        pendingActivations.put(name,data);
      }
      if ((requestor & TYPE_MASK) == COMPONENT_MASK)       addComponentOwner(data.getHandle(),requestor);
    }
  }
  componentInfo=null;
  long executionId=0;
  long activationTime=0;
  boolean timeoutError=false;
  if (isOtherDomainComponent) {
    try {
      URI curlName=CURLHelper.createURI(name);
      StatusHolder statusHolder=new StatusHolder();
      remoteManager.getComponent(INTERDOMAIN_MANAGER_HANDLE,curlName,true,statusHolder);
      activationTime=System.currentTimeMillis();
      if (statusHolder.getStatus() == ComponentStatus.COMPONENT_ACTIVATED) {
        String localName=curlName.getPath();
        if (localName.charAt(0) == '/')         localName=localName.substring(1);
        ComponentInfo[] infos=remoteManager.getComponentInfo(INTERDOMAIN_MANAGER_HANDLE,new int[0],localName,""String_Node_Str"",true);
        if (infos != null && infos.length == 1) {
          componentInfo=infos[0];
          componentInfo.setContainerName(CURL_URI_SCHEMA + curlName.getAuthority() + ""String_Node_Str""+ componentInfo.getContainerName());
        }
      }
    }
 catch (    Throwable ex) {
      bcex=new AcsJCannotGetComponentEx(ex);
      logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str"",bcex);
      timeoutError=(ex instanceof TimeoutRemoteException);
    }
  }
 else {
    logger.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ HandleHelper.toString(h | COMPONENT_MASK)+ ""String_Node_Str""+ containerInfo.getName()+ ""String_Node_Str"");
    boolean callSyncActivate=System.getProperties().containsKey(NAME_SYNC_ACTIVATE);
    if (containerInfo.getImplLang() == ImplLang.py)     callSyncActivate=true;
    if (callSyncActivate) {
      try {
        executionId=generateExecutionId();
        activationTime=System.currentTimeMillis();
        componentInfo=container.activate_component(h | COMPONENT_MASK,executionId,name,code,type);
      }
 catch (      Throwable ex) {
        bcex=new AcsJCannotGetComponentEx(ex);
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ containerName+ ""String_Node_Str"",bcex);
        timeoutError=(ex instanceof TimeoutRemoteException);
      }
    }
 else {
      try {
        executionId=generateExecutionId();
        activationTime=System.currentTimeMillis();
        ComponentInfoCompletionCallbackImpl callback=new ComponentInfoCompletionCallbackImpl(requestor,name,type,code,containerName,keepAliveTime,status,isOtherDomainComponent,isDynamicComponent,h,reactivate,container,containerInfo,executionId,activationTime);
        container.activate_component_async(h | COMPONENT_MASK,executionId,name,code,type,callback);
        return callback.waitUntilActivated(getLockTimeout());
      }
 catch (      Throwable ex) {
        bcex=new AcsJCannotGetComponentEx(ex);
        logger.log(Level.SEVERE,""String_Node_Str"" + name + ""String_Node_Str""+ containerName+ ""String_Node_Str"",bcex);
        throw bcex;
      }
    }
  }
  return internalNoSyncRequestComponentPhase2(requestor,name,type,code,containerName,keepAliveTime,status,bcex,isOtherDomainComponent,isDynamicComponent,h,reactivate,componentInfo,container,containerInfo,executionId,activationTime,timeoutError);
}",0.998860645110596
134791,"/** 
 * Provices its own address to daemons.
 */
private void initializeServiceDaemons(){
  DAOProxy dao=getManagerDAOProxy();
  if (dao == null)   return;
  String[] daemons;
  try {
    daemons=dao.get_string_seq(""String_Node_Str"");
  }
 catch (  Throwable th) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  for (int i=0; i < daemons.length; i++) {
    try {
      ServiceDaemon daemon=transport.getServiceDaemon(daemons[i]);
      if (daemon != null)       daemon.setManagerReference(transport.getManagerReference());
 else       throw new RuntimeException(""String_Node_Str"" + daemons[i] + ""String_Node_Str"");
    }
 catch (    Throwable th) {
      logger.config(""String_Node_Str"" + daemons[i] + ""String_Node_Str"");
    }
  }
}","/** 
 * Provides its own address to daemons. <p>
 * @TODO : The manager should call this method regularly (e.g. once per minute), so that also restarted service daemons get the manager address. Or the daemons should resolve the naming service themselves and get it from there, with possible problems when using different subnets.
 */
private void initializeServiceDaemons(){
  DAOProxy dao=getManagerDAOProxy();
  if (dao == null)   return;
  String[] daemons;
  try {
    daemons=dao.get_string_seq(""String_Node_Str"");
  }
 catch (  Throwable th) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  for (int i=0; i < daemons.length; i++) {
    try {
      ServiceDaemon daemon=transport.getServiceDaemon(daemons[i]);
      if (daemon != null)       daemon.setManagerReference(transport.getManagerReference());
 else       throw new RuntimeException(""String_Node_Str"" + daemons[i] + ""String_Node_Str"");
    }
 catch (    Throwable th) {
      logger.config(""String_Node_Str"" + daemons[i] + ""String_Node_Str"");
    }
  }
}",0.8466060929983966
134792,"/** 
 * This method checks if the guarded activity is due for execution, or if it should be skipped instead. <p> For the first call, it always returns true. Later it returns <code>true</code> if the last call to <code>check()</code>was longer ago than the <code>interval</code>  given in the constructor or in the <code>reset</code> methods,  and/or if the internal counter has been incremented more than <code>maxRepetitions</code>  by calls to   {@link #increment()} or {@link #checkAndIncrement()}.
 * @return <code>true</code> if guarded activity should be run, <code>false</code> if it should be skipped.
 */
public synchronized boolean check(){
  long now=System.nanoTime();
  if (firstTime) {
    firstTime=false;
    counterAtLastExecution=counter;
    counter=0;
    endTimeNs=now + intervalNs;
    return true;
  }
switch (evaluationMethod) {
case AND:
    if ((now >= endTimeNs) && (counter >= maxRepetitions)) {
      counterAtLastExecution=counter;
      counter=0;
      endTimeNs=now + intervalNs;
      return true;
    }
  return false;
case OR:
if ((now >= endTimeNs) || (counter >= maxRepetitions)) {
  counterAtLastExecution=counter;
  counter=0;
  endTimeNs=now + intervalNs;
  return true;
}
return false;
case TIMER:
if (now >= endTimeNs) {
counterAtLastExecution=counter;
counter=0;
while (endTimeNs <= now) {
endTimeNs+=intervalNs;
}
return true;
}
return false;
case COUNTER:
if (counter >= maxRepetitions) {
counterAtLastExecution=counter;
counter=0;
endTimeNs=now + intervalNs;
return true;
}
return false;
}
return false;
}","/** 
 * This method checks if the guarded activity is due for execution, or if it should be skipped instead. <p> For the first call, it always returns true. Later it returns <code>true</code> if the last call to <code>check()</code>was longer ago than the <code>interval</code>  given in the constructor or in the <code>reset</code> methods,  and/or if the internal counter has been incremented more than <code>maxRepetitions</code>  by calls to   {@link #increment()} or {@link #checkAndIncrement()}.
 * @return <code>true</code> if guarded activity should be run, <code>false</code> if it should be skipped.
 */
public synchronized boolean check(){
  long now=System.nanoTime();
  if (firstTime) {
    firstTime=false;
    counterAtLastExecution=counter;
    counter=0;
    endTimeNs=now + intervalNs;
    return true;
  }
switch (evaluationMethod) {
case AND:
    if ((now >= endTimeNs) && (counter >= maxRepetitions)) {
      counterAtLastExecution=counter;
      counter=0;
      endTimeNs=now + intervalNs;
      return true;
    }
  return false;
case OR:
if ((now >= endTimeNs) || (counter >= maxRepetitions)) {
  counterAtLastExecution=counter;
  counter=0;
  endTimeNs=now + intervalNs;
  return true;
}
return false;
case TIMER:
if (now >= endTimeNs) {
counterAtLastExecution=counter;
counter=0;
while (endTimeNs <= now) {
endTimeNs+=intervalNs;
}
return true;
}
return false;
case COUNTER:
if (counter >= maxRepetitions) {
counterAtLastExecution=counter;
counter=0;
endTimeNs=now + intervalNs;
return true;
}
return false;
default :
throw new IllegalStateException(""String_Node_Str"" + evaluationMethod.toString() + ""String_Node_Str"");
}
}",0.9606495940037476
134793,"public char getChar(){
  return (char)_CDRArray[_bytePos++];
}","public char getChar(){
  return _CDRArray[_bytePos++];
}",0.9491525423728814
134794,"/** 
 * @see com.cosylab.acs.maci.Manager#getCollocatedComponent(int,com.cosylab.acs.maci.ComponentSpec,boolean,URI)
 */
public ComponentInfo getCollocatedComponent(int id,ComponentSpec componentSpec,boolean markAsDefault,URI targetComponentURI) throws AcsJCannotGetComponentEx, AcsJNoPermissionEx, AcsJIncompleteComponentSpecEx, AcsJInvalidComponentSpecEx, AcsJComponentSpecIncompatibleWithActiveComponentEx {
  try {
    if (componentSpec == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getName() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getType() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getCode() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getContainer() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getName().length() == 0) {
      AcsJBadParameterEx ex=new AcsJBadParameterEx();
      ex.setParameter(""String_Node_Str"");
      ex.setParameterValue(""String_Node_Str"");
      ex.setReason(""String_Node_Str"");
      throw ex;
    }
    if (targetComponentURI == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (!componentSpec.getContainer().equals(ComponentSpec.COMPSPEC_ANY)) {
      AcsJBadParameterEx ex=new AcsJBadParameterEx();
      ex.setParameter(""String_Node_Str"");
      ex.setParameterValue(""String_Node_Str"");
      ex.setReason(""String_Node_Str"");
      throw ex;
    }
  }
 catch (  AcsJNullPointerEx e) {
    AcsJInvalidComponentSpecEx ex=new AcsJInvalidComponentSpecEx(e);
    throw ex;
  }
catch (  AcsJBadParameterEx e) {
    AcsJInvalidComponentSpecEx ex=new AcsJInvalidComponentSpecEx(e);
    throw ex;
  }
  securityCheck(id,AccessRights.NONE);
  String name=extractName(targetComponentURI);
  int h=0;
  ComponentInfo targetComponentInfo=null;
synchronized (components) {
    h=components.first();
    while (h != 0) {
      ComponentInfo componentInfo=(ComponentInfo)components.get(h);
      if (componentInfo.getName().equals(name)) {
        targetComponentInfo=componentInfo;
        break;
      }
      h=components.next(h);
    }
  }
  if (targetComponentInfo == null) {
    DAOProxy componentsDAO=getComponentsDAOProxy();
    if (componentsDAO != null) {
      String containerName=readStringCharacteristics(componentsDAO,name + ""String_Node_Str"",true);
      if (containerName != null)       componentSpec.setContainer(containerName);
    }
  }
 else   componentSpec.setContainer(targetComponentInfo.getContainerName());
  if (componentSpec.getContainer().equals(ComponentSpec.COMPSPEC_ANY)) {
    AcsJIncompleteComponentSpecEx ex=new AcsJIncompleteComponentSpecEx();
    ex.setCURL(name);
    ex.setContainerName(componentSpec.getContainer());
    throw ex;
  }
  ComponentInfo componentInfo=null;
  try {
    componentInfo=internalRequestDynamicComponent(id,componentSpec);
  }
 catch (  AcsJSyncLockFailedEx e) {
    AcsJCannotGetComponentEx ex=new AcsJCannotGetComponentEx();
    ex.setCURL(name);
    ex.setReason(""String_Node_Str"");
    throw ex;
  }
  if (componentInfo != null && markAsDefault) {
synchronized (defaultComponents) {
      executeCommand(new DefaultComponentCommandPut(componentInfo.getType(),componentInfo));
    }
    logger.log(Level.INFO,""String_Node_Str"" + componentInfo.getName() + ""String_Node_Str""+ componentInfo.getType()+ ""String_Node_Str"");
  }
  if (componentInfo == null) {
    AcsJCannotGetComponentEx ex=new AcsJCannotGetComponentEx();
    ex.setCURL(name);
    throw ex;
  }
  return componentInfo;
}","/** 
 * @see com.cosylab.acs.maci.Manager#getCollocatedComponent(int,com.cosylab.acs.maci.ComponentSpec,boolean,URI)
 */
public ComponentInfo getCollocatedComponent(int id,ComponentSpec componentSpec,boolean markAsDefault,URI targetComponentURI) throws AcsJCannotGetComponentEx, AcsJNoPermissionEx, AcsJIncompleteComponentSpecEx, AcsJInvalidComponentSpecEx, AcsJComponentSpecIncompatibleWithActiveComponentEx {
  try {
    if (componentSpec == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getName() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getType() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getCode() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getContainer() == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (componentSpec.getName().length() == 0) {
      AcsJBadParameterEx ex=new AcsJBadParameterEx();
      ex.setParameter(""String_Node_Str"");
      ex.setParameterValue(""String_Node_Str"");
      ex.setReason(""String_Node_Str"");
      throw ex;
    }
    if (targetComponentURI == null) {
      AcsJNullPointerEx ex=new AcsJNullPointerEx();
      ex.setVariable(""String_Node_Str"");
      throw ex;
    }
    if (!componentSpec.getContainer().equals(ComponentSpec.COMPSPEC_ANY)) {
      AcsJBadParameterEx ex=new AcsJBadParameterEx();
      ex.setParameter(""String_Node_Str"");
      ex.setParameterValue(componentSpec.getContainer());
      ex.setReason(""String_Node_Str"");
      throw ex;
    }
  }
 catch (  AcsJNullPointerEx e) {
    AcsJInvalidComponentSpecEx ex=new AcsJInvalidComponentSpecEx(e);
    throw ex;
  }
catch (  AcsJBadParameterEx e) {
    AcsJInvalidComponentSpecEx ex=new AcsJInvalidComponentSpecEx(e);
    throw ex;
  }
  securityCheck(id,AccessRights.NONE);
  String name=extractName(targetComponentURI);
  int h=0;
  ComponentInfo targetComponentInfo=null;
synchronized (components) {
    h=components.first();
    while (h != 0) {
      ComponentInfo componentInfo=(ComponentInfo)components.get(h);
      if (componentInfo.getName().equals(name)) {
        targetComponentInfo=componentInfo;
        break;
      }
      h=components.next(h);
    }
  }
  if (targetComponentInfo == null) {
    DAOProxy componentsDAO=getComponentsDAOProxy();
    if (componentsDAO != null) {
      String containerName=readStringCharacteristics(componentsDAO,name + ""String_Node_Str"",true);
      if (containerName != null)       componentSpec.setContainer(containerName);
    }
  }
 else   componentSpec.setContainer(targetComponentInfo.getContainerName());
  if (componentSpec.getContainer().equals(ComponentSpec.COMPSPEC_ANY)) {
    AcsJIncompleteComponentSpecEx ex=new AcsJIncompleteComponentSpecEx();
    ex.setCURL(name);
    ex.setContainerName(componentSpec.getContainer());
    throw ex;
  }
  ComponentInfo componentInfo=null;
  try {
    componentInfo=internalRequestDynamicComponent(id,componentSpec);
  }
 catch (  AcsJSyncLockFailedEx e) {
    AcsJCannotGetComponentEx ex=new AcsJCannotGetComponentEx();
    ex.setCURL(name);
    ex.setReason(""String_Node_Str"");
    throw ex;
  }
  if (componentInfo != null && markAsDefault) {
synchronized (defaultComponents) {
      executeCommand(new DefaultComponentCommandPut(componentInfo.getType(),componentInfo));
    }
    logger.log(Level.INFO,""String_Node_Str"" + componentInfo.getName() + ""String_Node_Str""+ componentInfo.getType()+ ""String_Node_Str"");
  }
  if (componentInfo == null) {
    AcsJCannotGetComponentEx ex=new AcsJCannotGetComponentEx();
    ex.setCURL(name);
    throw ex;
  }
  return componentInfo;
}",0.9943502824858758
134795,"/** 
 * Raise alarm.
 * @param faultMember
 */
public void raise_alarm(String faultMember){
  if (!manager.hasActiveAlarm(clientInfo.getName()))   send_alarm(faultMember,ACSFaultState.ACTIVE);
}","/** 
 * Raise alarm.
 * @param faultMember
 */
private void raise_alarm(String faultMember){
  if (!manager.hasActiveAlarm(clientInfo.getName()))   send_alarm(faultMember,true);
}",0.9222520107238604
134796,"/** 
 * Clear alarm.
 * @param faultMember
 */
public void clear_alarm(String faultMember){
  if (manager.hasActiveAlarm(clientInfo.getName()))   send_alarm(faultMember,ACSFaultState.TERMINATE);
}","/** 
 * Clear alarm.
 * @param faultMember
 */
private void clear_alarm(String faultMember){
  if (manager.hasActiveAlarm(clientInfo.getName()))   send_alarm(faultMember,false);
}",0.9173333333333332
134797,"/** 
 * Convenience method for send_alarm with given state.
 * @param faultMember
 * @param state
 */
public void send_alarm(String faultMember,String state){
  if (alarmSource == null) {
    return;
  }
  try {
    alarmSource.raiseAlarm(FAULT_FAMILY,faultMember,FAULT_CODE);
    if (ACSFaultState.ACTIVE.equals(state)) {
      manager.alarmRaised(faultMember);
    }
 else     if (ACSFaultState.TERMINATE.equals(state)) {
      manager.alarmCleared(faultMember);
    }
  }
 catch (  Throwable th) {
  }
}","/** 
 * Convenience method for send_alarm with given state.
 * @param faultMember
 * @param state
 */
private void send_alarm(String faultMember,boolean raise){
  if (alarmSource == null) {
    return;
  }
  try {
    alarmSource.setAlarm(FAULT_FAMILY,faultMember,FAULT_CODE,raise);
    if (raise) {
      manager.alarmRaised(faultMember);
    }
 else {
      manager.alarmCleared(faultMember);
    }
  }
 catch (  Throwable th) {
  }
}",0.8195329087048833
134798,"/** 
 * Sets the time between calls to the loop action object, where the time for the task itself is included or not, depending on the chosen   {@link ScheduleDelayMode}. <p> If this method is called while the thread loop is already running, the task will be run again right after the currently running task has finished; only after that run we'll get into the proper delay timing. <p> Implementation note: If this method is called while the thread loop is already running,  it will stop the loop, apply the new value, and then re-start the loop.  It is a limitation in the underlying   {@link ScheduledThreadPoolExecutor}that the delay time cannot be changed without stopping and restarting the loop (= repetitive task). If this becomes a problem, we could use the concurrent lib classes in a more customized way.
 * @param delayTime new delay time
 * @param unit
 * @see #setDelayMode(ScheduleDelayMode)
 */
public void setDelayTime(final long delayTime,final TimeUnit unit){
  if (isDefunct.get()) {
    throw new IllegalStateException(""String_Node_Str"" + loopName + ""String_Node_Str"");
  }
  loopLock.lock();
  try {
    delayTimeNanos=TimeUnit.NANOSECONDS.convert(delayTime,unit);
    if (isLoopRunning()) {
      suspendLoop();
      taskWrapper.restartLoopAfterCurrentTaskFinished(new Runnable(){
        @Override public void run(){
          logger.finer(""String_Node_Str"" + loopName + ""String_Node_Str"");
          runLoop();
        }
      }
);
    }
  }
  finally {
    loopLock.unlock();
  }
}","/** 
 * Sets the time between calls to the loop action object, where the time for the task itself is included or not, depending on the chosen   {@link ScheduleDelayMode}. <p> If this method is called while the thread loop is already running, the task will be run again right after the currently running task has finished; only after that run we'll get into the proper delay timing. <p> Implementation note: If this method is called while the thread loop is already running,  it will stop the loop, apply the new value, and then re-start the loop.  It is a limitation in the underlying   {@link ScheduledThreadPoolExecutor}that the delay time cannot be changed without stopping and restarting the loop (= repetitive task). If this becomes a problem, we could use the concurrent lib classes in a more customized way.
 * @param delayTime new delay time
 * @param unit
 * @see #setDelayMode(ScheduleDelayMode)
 */
public void setDelayTime(final long delayTime,final TimeUnit unit){
  if (isDefunct.get()) {
    throw new IllegalStateException(""String_Node_Str"" + loopName + ""String_Node_Str"");
  }
  loopLock.lock();
  try {
    delayTimeNanos=TimeUnit.NANOSECONDS.convert(delayTime,unit);
    if (isLoopRunning()) {
      suspendLoop();
      if (isTaskRunning()) {
        taskWrapper.restartLoopAfterCurrentTaskFinished(new Runnable(){
          @Override public void run(){
            logger.finer(""String_Node_Str"" + loopName + ""String_Node_Str"");
            runLoop();
          }
        }
);
      }
 else {
        runLoop();
      }
    }
  }
  finally {
    loopLock.unlock();
  }
}",0.972885732730794
134799,"/** 
 * Shuts down this thread loop runner,  attempting to gracefully stop the running task if   {@link CancelableRunnable} was provided,or otherwise letting the currently running loop action finish. <p> The <code>ThreadLoopRunner</code> cannot be used any more after this method has been called. (Then  {@link #isDisabled()} will return <code>true</code>, other methods will throw IllegalStateException.)<p> The <code>timeout</code> refers to how long this method waits for the task to terminate. If it terminates before the given timeout, then <code>true</code> is returned, otherwise <code>false</code> which means that the Runnable action object is still in use and should not be reused later unless it is  re-entrant.
 * @param timeout
 * @param unit
 * @return true if loop action terminated before the given timeout, or if the loop was not running.
 * @throws InterruptedException
 * @throws IllegalStateException if called after shutdown. 
 */
public boolean shutdown(long timeout,TimeUnit unit) throws InterruptedException {
  if (isDefunct.getAndSet(true)) {
    throw new IllegalStateException(""String_Node_Str"" + loopName + ""String_Node_Str"");
  }
  loopLock.lock();
  try {
    if (isLoopRunning()) {
      loop.cancel(false);
      loop=null;
      taskWrapper.attemptCancelTask();
      runner.shutdown();
      logger.finest(""String_Node_Str"" + loopName + ""String_Node_Str"");
    }
 else {
      logger.finer(""String_Node_Str"" + loopName + ""String_Node_Str"");
      return true;
    }
  }
  finally {
    loopLock.unlock();
  }
  boolean ret=runner.awaitTermination(timeout,unit);
  logger.finer(""String_Node_Str"" + loopName + ""String_Node_Str""+ (ret ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ unit.toString().toLowerCase());
  Thread.currentThread().sleep(2);
  return ret;
}","/** 
 * Shuts down this thread loop runner,  attempting to gracefully stop the running task if   {@link CancelableRunnable} was provided,or otherwise letting the currently running loop action finish. <p> The <code>ThreadLoopRunner</code> cannot be used any more after this method has been called. (Then  {@link #isDisabled()} will return <code>true</code>, other methods will throw IllegalStateException.)<p> The <code>timeout</code> refers to how long this method waits for the task to terminate. If it terminates before the given timeout, then <code>true</code> is returned, otherwise <code>false</code> which means that the Runnable action object is still in use and should not be reused later unless it is  re-entrant.
 * @param timeout
 * @param unit
 * @return true if loop action terminated before the given timeout, or if the loop was not running.
 * @throws InterruptedException
 * @throws IllegalStateException if called after shutdown. 
 */
public boolean shutdown(long timeout,TimeUnit unit) throws InterruptedException {
  if (isDefunct.getAndSet(true)) {
    throw new IllegalStateException(""String_Node_Str"" + loopName + ""String_Node_Str"");
  }
  loopLock.lock();
  try {
    if (isLoopRunning()) {
      loop.cancel(false);
      loop=null;
      taskWrapper.attemptCancelTask();
      runner.shutdown();
      logger.finest(""String_Node_Str"" + loopName + ""String_Node_Str"");
    }
 else {
      logger.finer(""String_Node_Str"" + loopName + ""String_Node_Str"");
      return true;
    }
  }
  finally {
    loopLock.unlock();
  }
  boolean ret=runner.awaitTermination(timeout,unit);
  logger.finer(""String_Node_Str"" + loopName + ""String_Node_Str""+ (ret ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ unit.toString().toLowerCase());
  Thread.sleep(2);
  return ret;
}",0.9956284153005464
134800,"/** 
 * Releases all clients that wait for a given container to log in, see   {@link #awaitContainerLogin(String,long,TimeUnit)}.
 * @see si.ijs.maci.AdministratorOperations#container_logged_in(si.ijs.maci.ContainerInfo,long,long)
 */
@Override public void container_logged_in(ContainerInfo info,long timestamp,long execution_id){
  String containerName=info.name;
synchronized (containerLoggedInSyncMap) {
    CountDownLatch sync=containerLoggedInSyncMap.get(containerName);
    if (sync != null) {
      sync.countDown();
      containerLoggedInSyncMap.remove(sync);
    }
  }
}","/** 
 * Releases all clients that wait for a given container to log in, see   {@link #awaitContainerLogin(String,long,TimeUnit)}.
 * @see si.ijs.maci.AdministratorOperations#container_logged_in(si.ijs.maci.ContainerInfo,long,long)
 */
@Override public void container_logged_in(ContainerInfo info,long timestamp,long execution_id){
  String containerName=info.name;
synchronized (containerLoggedInSyncMap) {
    CountDownLatch sync=containerLoggedInSyncMap.get(containerName);
    if (sync != null) {
      sync.countDown();
      containerLoggedInSyncMap.remove(containerName);
    }
  }
}",0.9854576561163388
134801,"/** 
 * Releases all clients that wait for a given container to log in, see   {@link #awaitContainerLogin(String,long,TimeUnit)}.
 * @see si.ijs.maci.AdministratorOperations#container_logged_in(si.ijs.maci.ContainerInfo,long,long)
 */
@Override public void container_logged_in(ContainerInfo info,long timestamp,long execution_id){
  String containerName=info.name;
synchronized (containerLoggedInSyncMap) {
    CountDownLatch sync=containerLoggedInSyncMap.get(containerName);
    if (sync != null) {
      sync.countDown();
    }
  }
}","/** 
 * Releases all clients that wait for a given container to log in, see   {@link #awaitContainerLogin(String,long,TimeUnit)}.
 * @see si.ijs.maci.AdministratorOperations#container_logged_in(si.ijs.maci.ContainerInfo,long,long)
 */
@Override public void container_logged_in(ContainerInfo info,long timestamp,long execution_id){
  String containerName=info.name;
synchronized (containerLoggedInSyncMap) {
    CountDownLatch sync=containerLoggedInSyncMap.get(containerName);
    if (sync != null) {
      sync.countDown();
      containerLoggedInSyncMap.remove(sync);
    }
  }
}",0.9596412556053812
134802,"/** 
 * This method checks if the guarded activity is due for execution, or if it should be skipped instead. <p> For the first call, it always returns true. Later it returns <code>true</code> if the last call to <code>check()</code>was longer ago than the <code>interval</code>  given in the constructor or in the <code>reset</code> methods,  and/or if the internal counter has been incremented more than <code>maxRepetitions</code>  by calls to   {@link #increment()} or {@link #checkAndIncrement()}.
 * @return <code>true</code> if guarded activity should be run, <code>false</code> if it should be skipped.
 */
public synchronized boolean check(){
  long now=System.nanoTime();
  if (firstTime) {
    firstTime=false;
    counterAtLastExecution=counter;
    counter=0;
    endTimeNs=now + intervalNs;
    return true;
  }
switch (evaluationMethod) {
case AND:
    if ((now >= endTimeNs) && (counter >= maxRepetitions)) {
      counterAtLastExecution=counter;
      counter=0;
      endTimeNs=now + intervalNs;
      return true;
    }
  return false;
case OR:
if ((now >= endTimeNs) || (counter >= maxRepetitions)) {
  counterAtLastExecution=counter;
  counter=0;
  endTimeNs=now + intervalNs;
  return true;
}
return false;
case TIMER:
if (now >= endTimeNs) {
counterAtLastExecution=counter;
counter=0;
endTimeNs=endTimeNs + intervalNs;
return true;
}
return false;
case COUNTER:
if (counter >= maxRepetitions) {
counterAtLastExecution=counter;
counter=0;
endTimeNs=now + intervalNs;
return true;
}
return false;
}
return false;
}","/** 
 * This method checks if the guarded activity is due for execution, or if it should be skipped instead. <p> For the first call, it always returns true. Later it returns <code>true</code> if the last call to <code>check()</code>was longer ago than the <code>interval</code>  given in the constructor or in the <code>reset</code> methods,  and/or if the internal counter has been incremented more than <code>maxRepetitions</code>  by calls to   {@link #increment()} or {@link #checkAndIncrement()}.
 * @return <code>true</code> if guarded activity should be run, <code>false</code> if it should be skipped.
 */
public synchronized boolean check(){
  long now=System.nanoTime();
  if (firstTime) {
    firstTime=false;
    counterAtLastExecution=counter;
    counter=0;
    endTimeNs=now + intervalNs;
    return true;
  }
switch (evaluationMethod) {
case AND:
    if ((now >= endTimeNs) && (counter >= maxRepetitions)) {
      counterAtLastExecution=counter;
      counter=0;
      endTimeNs=now + intervalNs;
      return true;
    }
  return false;
case OR:
if ((now >= endTimeNs) || (counter >= maxRepetitions)) {
  counterAtLastExecution=counter;
  counter=0;
  endTimeNs=now + intervalNs;
  return true;
}
return false;
case TIMER:
if (now >= endTimeNs) {
counterAtLastExecution=counter;
counter=0;
while (endTimeNs <= now) {
endTimeNs+=intervalNs;
}
return true;
}
return false;
case COUNTER:
if (counter >= maxRepetitions) {
counterAtLastExecution=counter;
counter=0;
endTimeNs=now + intervalNs;
return true;
}
return false;
}
return false;
}",0.9922229423201556
134803,"public void bindNonExpandedComponentXMLToAlmaBranch(Session session,Map<String,Object> parentMap,alma.TMCDB.maci.Component component){
  if (component.URN != null) {
    XMLHandler xmlSolver=new XMLHandler(false,m_logger);
    try {
      saxParser.parse(new InputSource(new StringReader(component.XMLDoc)),xmlSolver);
    }
 catch (    Exception e) {
      m_logger.log(AcsLogLevel.ERROR,""String_Node_Str"" + component.Path + ""String_Node_Str""+ component.getName(),e);
      return;
    }
    if (xmlSolver.m_errorString != null) {
      m_logger.log(AcsLogLevel.ERROR,""String_Node_Str"" + component.Path + ""String_Node_Str""+ component.getName()+ ""String_Node_Str""+ xmlSolver.m_errorString);
      return;
    }
    DAOImpl dao=new ComponentDAOImplSaver(component,xmlSolver.m_rootNode,null,m_logger,true);
    bindToAlmaBranch(parentMap,component.getName(),component.Path,dao);
  }
 else {
    m_logger.finer(""String_Node_Str"" + component.Path + ""String_Node_Str""+ component.getName());
    ComponentData componentData=new ComponentData();
    try {
      componentData.setData(component.XMLDoc);
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
    bindToAlmaBranch(parentMap,component.getName(),component.Path,componentData);
  }
}","public void bindNonExpandedComponentXMLToAlmaBranch(Session session,Map<String,Object> parentMap,alma.TMCDB.maci.Component component){
  if (component.URN != null) {
    XMLHandler xmlSolver=new XMLHandler(false,m_logger);
    try {
synchronized (xmlNodeMonitor) {
        saxParser.parse(new InputSource(new StringReader(component.XMLDoc)),xmlSolver);
      }
    }
 catch (    Exception e) {
      m_logger.log(AcsLogLevel.ERROR,""String_Node_Str"" + component.Path + ""String_Node_Str""+ component.getName(),e);
      return;
    }
    if (xmlSolver.m_errorString != null) {
      m_logger.log(AcsLogLevel.ERROR,""String_Node_Str"" + component.Path + ""String_Node_Str""+ component.getName()+ ""String_Node_Str""+ xmlSolver.m_errorString);
      return;
    }
    DAOImpl dao=new ComponentDAOImplSaver(component,xmlSolver.m_rootNode,null,m_logger,true);
    bindToAlmaBranch(parentMap,component.getName(),component.Path,dao);
  }
 else {
    m_logger.finer(""String_Node_Str"" + component.Path + ""String_Node_Str""+ component.getName());
    ComponentData componentData=new ComponentData();
    try {
      componentData.setData(component.XMLDoc);
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
    bindToAlmaBranch(parentMap,component.getName(),component.Path,componentData);
  }
}",0.983464566929134
134804,"private void parseXML(String xml,XMLHandler xmlSolver) throws CDBXMLErrorEx {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser saxParser=factory.newSAXParser();
    saxParser.parse(new InputSource(new StringReader(xml)),xmlSolver);
    if (xmlSolver.m_errorString != null) {
      String info=""String_Node_Str"" + xmlSolver.m_errorString;
      CDBXMLErrorEx xmlErr=new CDBXMLErrorEx();
      m_logger.log(AcsLogLevel.NOTICE,info);
      throw xmlErr;
    }
  }
 catch (  Throwable t) {
    String info=""String_Node_Str"" + t.getMessage();
    m_logger.log(AcsLogLevel.NOTICE,info);
    AcsJCDBXMLErrorEx xmlErr=new AcsJCDBXMLErrorEx(t);
    xmlErr.setErrorString(info);
    throw xmlErr.toCDBXMLErrorEx();
  }
}","private void parseXML(String xml,XMLHandler xmlSolver) throws CDBXMLErrorEx {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser saxParser=factory.newSAXParser();
synchronized (xmlNodeMonitor) {
      saxParser.parse(new InputSource(new StringReader(xml)),xmlSolver);
    }
    if (xmlSolver.m_errorString != null) {
      String info=""String_Node_Str"" + xmlSolver.m_errorString;
      CDBXMLErrorEx xmlErr=new CDBXMLErrorEx();
      m_logger.log(AcsLogLevel.NOTICE,info);
      throw xmlErr;
    }
  }
 catch (  Throwable t) {
    String info=""String_Node_Str"" + t.getMessage();
    m_logger.log(AcsLogLevel.NOTICE,info);
    AcsJCDBXMLErrorEx xmlErr=new AcsJCDBXMLErrorEx(t);
    xmlErr.setErrorString(info);
    throw xmlErr.toCDBXMLErrorEx();
  }
}",0.9738219895287958
134805,"public static Object getChild(String name,Object node){
  if (node instanceof DAOImpl) {
    return (XMLTreeNode)(((DAOImpl)node).getRootNode().getNodesMap().get(name));
  }
  if (node instanceof XMLTreeNode) {
    Object n=(XMLTreeNode)(((XMLTreeNode)node).getNodesMap().get(name));
    if (n != null)     return n;
 else     return ((XMLTreeNode)node).getFieldMap().get(name);
  }
 else   if (node instanceof Map) {
    Map map=(Map)node;
    if (map.containsKey(name))     return map.get(name);
    return null;
  }
 else   if (node instanceof Element) {
    Element element=(Element)node;
    if (element.hasAttribute(name))     return element.getAttribute(name);
    NodeList nodeList=element.getElementsByTagName(name);
    if (nodeList.getLength() > 0)     return (Element)nodeList.item(0);
    return null;
  }
 else {
    Field field=null;
    final Class nodeType=node.getClass();
    Class type=nodeType;
    while (field == null && type != null) {
      try {
        field=type.getDeclaredField(name);
      }
 catch (      NoSuchFieldException e) {
      }
      type=type.getSuperclass();
    }
    if (field != null) {
      if (name.equals(SUBNODES_MAP_NAME)) {
        try {
          return field.get(node);
        }
 catch (        IllegalAccessException e) {
          return null;
        }
      }
 else {
        try {
          Method accessorMethod=getAccessorMethod(nodeType,name);
          Object retVal=accessorMethod.invoke(node,(Object[])null);
          return retVal;
        }
 catch (        Throwable th) {
          return null;
        }
      }
    }
 else     if (!name.equals(SUBNODES_MAP_NAME)) {
      if (node instanceof ExtraDataFeature) {
        Element extraData=((ExtraDataFeature)node).getExtraData();
        if (extraData != null) {
          Object viaExtra=getChild(name,extraData);
          if (viaExtra != null)           return viaExtra;
        }
      }
      Object subnodesMap=getChild(SUBNODES_MAP_NAME,node);
      if (subnodesMap instanceof Map)       return ((Map)subnodesMap).get(name);
    }
    return null;
  }
}","public static Object getChild(String name,Object node){
synchronized (node) {
    if (node instanceof DAOImpl) {
      return (XMLTreeNode)(((DAOImpl)node).getRootNode().getNodesMap().get(name));
    }
    if (node instanceof XMLTreeNode) {
      Object n=(XMLTreeNode)(((XMLTreeNode)node).getNodesMap().get(name));
      if (n != null)       return n;
 else       return ((XMLTreeNode)node).getFieldMap().get(name);
    }
 else     if (node instanceof Map) {
      Map map=(Map)node;
      if (map.containsKey(name))       return map.get(name);
      return null;
    }
 else     if (node instanceof Element) {
      Element element=(Element)node;
      if (element.hasAttribute(name))       return element.getAttribute(name);
      NodeList nodeList=element.getElementsByTagName(name);
      if (nodeList.getLength() > 0)       return (Element)nodeList.item(0);
      return null;
    }
 else {
      Field field=null;
      final Class nodeType=node.getClass();
      Class type=nodeType;
      while (field == null && type != null) {
        try {
          field=type.getDeclaredField(name);
        }
 catch (        NoSuchFieldException e) {
        }
        type=type.getSuperclass();
      }
      if (field != null) {
        if (name.equals(SUBNODES_MAP_NAME)) {
          try {
            return field.get(node);
          }
 catch (          IllegalAccessException e) {
            return null;
          }
        }
 else {
          try {
            Method accessorMethod=getAccessorMethod(nodeType,name);
            Object retVal=accessorMethod.invoke(node,(Object[])null);
            return retVal;
          }
 catch (          Throwable th) {
            return null;
          }
        }
      }
 else       if (!name.equals(SUBNODES_MAP_NAME)) {
        if (node instanceof ExtraDataFeature) {
          Element extraData=((ExtraDataFeature)node).getExtraData();
          if (extraData != null) {
            Object viaExtra=getChild(name,extraData);
            if (viaExtra != null)             return viaExtra;
          }
        }
        Object subnodesMap=getChild(SUBNODES_MAP_NAME,node);
        if (subnodesMap instanceof Map)         return ((Map)subnodesMap).get(name);
      }
      return null;
    }
  }
}",0.925207756232687
134806,"public void activate_component_async(int h,long execution_id,String name,String exe,String type,CBComponentInfo callback,CBDescIn desc){
  CBDescOut descOut=new CBDescOut(0,descOut.id_tag);
  try {
    ComponentInfo componentInfo=activate_component(h,execution_id,name,exe,type);
    callback.done(componentInfo,new alma.ACSErrTypeOK.wrappers.ACSErrOKAcsJCompletion().toCorbaCompletion(),descOut);
  }
 catch (  AcsJException ae) {
    callback.done(null,ae.toAcsJCompletion().toCorbaCompletion(),descOut);
  }
catch (  Throwable th) {
    AcsJException ae=new AcsJUnknownEx(th);
    callback.done(null,ae.toAcsJCompletion().toCorbaCompletion(),descOut);
  }
}","public void activate_component_async(int h,long execution_id,String name,String exe,String type,CBComponentInfo callback,CBDescIn desc){
  CBDescOut descOut=new CBDescOut(0,desc.id_tag);
  try {
    ComponentInfo componentInfo=activate_component(h,execution_id,name,exe,type);
    callback.done(componentInfo,new alma.ACSErrTypeOK.wrappers.ACSErrOKAcsJCompletion().toCorbaCompletion(),descOut);
  }
 catch (  CannotActivateComponentEx ae) {
    AcsJCannotActivateComponentEx aae=AcsJCannotActivateComponentEx.fromCannotActivateComponentEx(ae);
    callback.done(null,aae.toAcsJCompletion().toCorbaCompletion(),descOut);
  }
catch (  Throwable th) {
    AcsJException ae=new AcsJUnknownEx(th);
    callback.done(null,ae.toAcsJCompletion().toCorbaCompletion(),descOut);
  }
}",0.73831123517097
134807,"/** 
 * Deactivates a component. <ol> <li>First the component's POA manager is put into inactive state, so that all incoming calls to this component are rejected.  However, we wait for currently executing calls to finish, with a timeout as described below. <ul> <li>Rejection applies to requests already received and queued by the ORB (but that have not started executing),  as well as to requests that clients will send in the future.  <li>Note that entering into the inactive state may take forever if the component hangs in a functional call. <li>Therefore we use a timeout to proceed in such cases where POA manager deactivation does not happen in time. This bears the risk of undesirable behavior caused by calling the   {@link ComponentLifecycle#cleanUp() cleanUp} method while other threads still perform functional calls on the component. </ul> <li>Second the component itself is deactivated: <ul> <li>The lifecycle method  {@link ComponentLifecycle#cleanUp() cleanUp} is called, currently without enforcing a timeout.<li>TODO: use a timeout, unless we decide that a client-side timeout for releaseComponent is good enough. </ul> <li>Third the component is disconnected from CORBA (""etherealized"" from the POA). <ul> <li>Note that also etherealization may take forever if the component hangs in a call. <li>Therefore we use a timeout to proceed with deactivation in such cases where etherealization does not happen in time. <li>Currently a component that failed to etherealize in time can stay active as long as the container is alive. TODO: check if using the ""container sealant"" we can identify and stop the active ORB threads. </ul> </ol>    This method logs errors as FINER if they also cause an exception, and as WARNING if they cannot lead to an exception because other more important error conditions are present.
 * @throws ComponentDeactivationUncleanEx , ComponentDeactivationFailedEx 
 */
void deactivateComponent() throws AcsJComponentDeactivationUncleanEx, AcsJComponentDeactivationFailedEx {
  if (m_containerLogger.isLoggable(Level.FINER)) {
    m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ getHandle());
  }
  AcsJComponentDeactivationUncleanEx deactivationUncleanEx=null;
  AcsJComponentDeactivationFailedEx deactivationFailedEx=null;
  try {
    int deactivateTimeoutMillis=10000;
    boolean isInactive=acsCorba.deactivateComponentPOAManager(m_componentPOA,m_compInstanceName,deactivateTimeoutMillis);
    if (isInactive && m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str"");
    }
 else     if (!isInactive) {
      String msg=""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ deactivateTimeoutMillis+ ""String_Node_Str"";
      m_containerLogger.warning(msg);
      deactivationUncleanEx=new AcsJComponentDeactivationUncleanEx();
      deactivationUncleanEx.setCURL(m_compInstanceName);
      deactivationUncleanEx.setReason(msg);
    }
    ClassLoader contCL=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(m_componentClassLoader);
    try {
      m_component.cleanUp();
    }
 catch (    Throwable thr) {
      m_containerLogger.log(Level.FINE,""String_Node_Str"" + m_compInstanceName,thr);
      deactivationUncleanEx=new AcsJComponentDeactivationUncleanEx(thr);
      deactivationUncleanEx.setCURL(m_compInstanceName);
    }
 finally {
      Thread.currentThread().setContextClassLoader(contCL);
      try {
        m_componentStateManager.setStateByContainer(ComponentStates.COMPSTATE_DEFUNCT);
      }
 catch (      ComponentLifecycleException ex) {
        if (deactivationUncleanEx == null) {
          deactivationUncleanEx=new AcsJComponentDeactivationUncleanEx(ex);
          deactivationUncleanEx.setCURL(m_compInstanceName);
        }
 else {
          m_containerLogger.log(Level.WARNING,""String_Node_Str"" + m_compInstanceName,ex);
        }
      }
      m_containerServices.cleanUp();
      m_threadFactory.cleanUp();
    }
    int etherealizeTimeoutMillis=1000;
    boolean isEtherealized=acsCorba.destroyComponentPOA(m_componentPOA,compServantManager,etherealizeTimeoutMillis);
    if (isEtherealized && m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str"");
    }
 else     if (!isEtherealized) {
      m_containerLogger.warning(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ etherealizeTimeoutMillis+ ""String_Node_Str"");
      deactivationFailedEx=new AcsJComponentDeactivationFailedEx();
      deactivationFailedEx.setCURL(m_compInstanceName);
      deactivationFailedEx.setReason(""String_Node_Str"" + etherealizeTimeoutMillis + ""String_Node_Str"");
      deactivationFailedEx.setIsPermanentFailure(true);
    }
    if (m_componentClassLoader instanceof AcsComponentClassLoader) {
      try {
        ((AcsComponentClassLoader)m_componentClassLoader).close();
      }
 catch (      IOException ex) {
        m_containerLogger.log(Level.WARNING,""String_Node_Str"",ex);
      }
    }
  }
 catch (  RuntimeException ex) {
    if (deactivationFailedEx == null) {
      deactivationFailedEx=new AcsJComponentDeactivationFailedEx(ex);
      deactivationFailedEx.setCURL(m_compInstanceName);
      deactivationFailedEx.setReason(""String_Node_Str"");
    }
 else {
      m_containerLogger.log(Level.WARNING,""String_Node_Str"" + m_compInstanceName,ex);
    }
  }
  if (deactivationFailedEx != null) {
    if (m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.log(Level.FINER,""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ ""String_Node_Str"",deactivationFailedEx);
    }
    throw deactivationFailedEx;
  }
  if (deactivationUncleanEx != null) {
    if (m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.log(Level.FINER,""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ ""String_Node_Str"",deactivationFailedEx);
    }
    throw deactivationUncleanEx;
  }
  if (m_containerLogger.isLoggable(Level.FINER)) {
    m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ getHandle());
  }
}","/** 
 * Deactivates a component. <ol> <li>First the component's POA manager is put into inactive state, so that all incoming calls to this component are rejected.  However, we wait for currently executing calls to finish, with a timeout as described below. <ul> <li>Rejection applies to requests already received and queued by the ORB (but that have not started executing),  as well as to requests that clients will send in the future.  <li>Note that entering into the inactive state may take forever if the component hangs in a functional call. <li>Therefore we use a timeout to proceed in such cases where POA manager deactivation does not happen in time. This bears the risk of undesirable behavior caused by calling the   {@link ComponentLifecycle#cleanUp() cleanUp} method while other threads still perform functional calls on the component. </ul> <li>Second the component itself is deactivated: <ul> <li>The lifecycle method  {@link ComponentLifecycle#cleanUp() cleanUp} is called, currently without enforcing a timeout.<li>TODO: use a timeout, unless we decide that a client-side timeout for releaseComponent is good enough. </ul> <li>Third the component is disconnected from CORBA (""etherealized"" from the POA). <ul> <li>Note that also etherealization may take forever if the component hangs in a call. <li>Therefore we use a timeout to proceed with deactivation in such cases where etherealization does not happen in time. <li>Currently a component that failed to etherealize in time can stay active as long as the container is alive. TODO: check if using the ""container sealant"" we can identify and stop the active ORB threads. </ul> </ol>    This method logs errors as FINER if they also cause an exception, and as WARNING if they cannot lead to an exception because other more important error conditions are present.
 * @throws ComponentDeactivationUncleanEx , ComponentDeactivationFailedEx 
 */
void deactivateComponent() throws AcsJComponentDeactivationUncleanEx, AcsJComponentDeactivationFailedEx {
  if (m_containerLogger.isLoggable(Level.FINER)) {
    m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ getHandle());
  }
  AcsJComponentDeactivationUncleanEx deactivationUncleanEx=null;
  AcsJComponentDeactivationFailedEx deactivationFailedEx=null;
  try {
    int deactivateTimeoutMillis=10000;
    boolean isInactive=acsCorba.deactivateComponentPOAManager(m_componentPOA,m_compInstanceName,deactivateTimeoutMillis);
    if (isInactive && m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str"");
    }
 else     if (!isInactive) {
      String msg=""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ deactivateTimeoutMillis+ ""String_Node_Str"";
      m_containerLogger.warning(msg);
      deactivationUncleanEx=new AcsJComponentDeactivationUncleanEx();
      deactivationUncleanEx.setCURL(m_compInstanceName);
      deactivationUncleanEx.setReason(msg);
    }
    ClassLoader contCL=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(m_componentClassLoader);
    try {
      m_component.cleanUp();
    }
 catch (    Throwable thr) {
      m_containerLogger.log(Level.FINE,""String_Node_Str"" + m_compInstanceName,thr);
      deactivationUncleanEx=new AcsJComponentDeactivationUncleanEx(thr);
      deactivationUncleanEx.setCURL(m_compInstanceName);
    }
 finally {
      Thread.currentThread().setContextClassLoader(contCL);
      try {
        m_componentStateManager.setStateByContainer(ComponentStates.COMPSTATE_DEFUNCT);
      }
 catch (      ComponentLifecycleException ex) {
        if (deactivationUncleanEx == null) {
          deactivationUncleanEx=new AcsJComponentDeactivationUncleanEx(ex);
          deactivationUncleanEx.setCURL(m_compInstanceName);
        }
 else {
          m_containerLogger.log(Level.WARNING,""String_Node_Str"" + m_compInstanceName,ex);
        }
      }
      m_containerServices.cleanUp();
      m_threadFactory.cleanUp();
    }
    int etherealizeTimeoutMillis=1000;
    boolean isEtherealized=acsCorba.destroyComponentPOA(m_componentPOA,compServantManager,etherealizeTimeoutMillis);
    if (isEtherealized && m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str"");
    }
 else     if (!isEtherealized) {
      m_containerLogger.warning(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ etherealizeTimeoutMillis+ ""String_Node_Str"");
      deactivationFailedEx=new AcsJComponentDeactivationFailedEx();
      deactivationFailedEx.setCURL(m_compInstanceName);
      deactivationFailedEx.setReason(""String_Node_Str"" + etherealizeTimeoutMillis + ""String_Node_Str"");
      deactivationFailedEx.setIsPermanentFailure(true);
    }
    if (m_componentClassLoader instanceof AcsComponentClassLoader) {
      try {
        ((AcsComponentClassLoader)m_componentClassLoader).close();
      }
 catch (      IOException ex) {
        m_containerLogger.log(Level.WARNING,""String_Node_Str"",ex);
      }
    }
  }
 catch (  RuntimeException ex) {
    if (deactivationFailedEx == null) {
      deactivationFailedEx=new AcsJComponentDeactivationFailedEx(ex);
      deactivationFailedEx.setCURL(m_compInstanceName);
      deactivationFailedEx.setReason(""String_Node_Str"");
    }
 else {
      m_containerLogger.log(Level.WARNING,""String_Node_Str"" + m_compInstanceName,ex);
    }
  }
  if (deactivationFailedEx != null) {
    if (m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.log(Level.FINER,""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ ""String_Node_Str"",deactivationFailedEx);
    }
    throw deactivationFailedEx;
  }
  if (deactivationUncleanEx != null) {
    if (m_containerLogger.isLoggable(Level.FINER)) {
      m_containerLogger.log(Level.FINER,""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ ""String_Node_Str"",deactivationUncleanEx);
    }
    throw deactivationUncleanEx;
  }
  if (m_containerLogger.isLoggable(Level.FINER)) {
    m_containerLogger.finer(""String_Node_Str"" + m_compInstanceName + ""String_Node_Str""+ getHandle());
  }
}",0.9989481349623756
134808,"public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ComponentData componentData=(ComponentData)obj;
  if (componentData.componentName.equals(this.componentName) && componentData.propertyName.equals(this.propertyName) && componentData.serialNumber.equals(this.serialNumber)&& componentData.index == this.index) {
    return true;
  }
  return false;
}","public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ComponentData componentData=(ComponentData)obj;
  if (componentData.componentName.equals(this.componentName) && componentData.propertyName.equals(this.propertyName) && componentData.serialNumber.equals(this.serialNumber)&& componentData.index.equals(this.index)) {
    return true;
  }
  return false;
}",0.9858233369683752
134809,"/** 
 * The alarm to clear is not sent directly to the alarm service. It is instead queued in   {@link AlarmSourceImpl#alarmsToClean} and will be cleared by the oscillation loop.
 */
@Override public void clearAlarm(String faultFamily,String faultMember,int faultCode){
  if (!enabled) {
    return;
  }
  if (queuing) {
    queue.add(faultFamily,faultMember,faultCode,null,false);
    return;
  }
  String id=buildAlarmID(faultFamily,faultMember,faultCode);
  alarmsToClean.putIfAbsent(id,System.currentTimeMillis());
}","/** 
 * The alarm to clear is not sent directly to the alarm service. It is instead queued in   {@link AlarmSourceImpl#alarmsToClean} and will be cleared by the oscillation loop.
 */
@Override public void clearAlarm(String faultFamily,String faultMember,int faultCode){
  if (!enabled) {
    return;
  }
  if (queuing) {
synchronized (queue) {
      queue.add(faultFamily,faultMember,faultCode,null,false);
    }
    return;
  }
  String id=buildAlarmID(faultFamily,faultMember,faultCode);
  alarmsToClean.putIfAbsent(id,System.currentTimeMillis());
}",0.9635854341736696
134810,"@Override public void raiseAlarm(String faultFamily,String faultMember,int faultCode,Properties properties){
  if (!enabled) {
    return;
  }
  if (queuing) {
    queue.add(faultFamily,faultMember,faultCode,properties,true);
    return;
  }
  String id=buildAlarmID(faultFamily,faultMember,faultCode);
  alarmsToClean.remove(id);
  if (!alarms.raise(id)) {
    alarmSender.sendAlarm(faultFamily,faultMember,faultCode,properties,true);
  }
}","@Override public void raiseAlarm(String faultFamily,String faultMember,int faultCode,Properties properties){
  if (!enabled) {
    return;
  }
  if (queuing) {
synchronized (queue) {
      queue.add(faultFamily,faultMember,faultCode,properties,true);
    }
    return;
  }
  String id=buildAlarmID(faultFamily,faultMember,faultCode);
  alarmsToClean.remove(id);
  if (!alarms.raise(id)) {
    alarmSender.sendAlarm(faultFamily,faultMember,faultCode,properties,true);
  }
}",0.9572836801752465
134811,"@Override public synchronized void flushAlarms(){
  queuing=false;
  if (flusherFuture != null) {
    flusherFuture.cancel(false);
  }
  AlarmToQueue[] temp=new AlarmToQueue[queue.size()];
  queue.values().toArray(temp);
  Thread thread=containerServices.getThreadFactory().newThread(new QueueFlusherTask(temp));
  thread.setName(""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
}","@Override public synchronized void flushAlarms(){
  queuing=false;
  if (flusherFuture != null) {
    flusherFuture.cancel(false);
  }
  AlarmToQueue[] temp;
synchronized (queue) {
    temp=new AlarmToQueue[queue.size()];
    queue.values().toArray(temp);
    queue.clear();
  }
  Thread thread=containerServices.getThreadFactory().newThread(new QueueFlusherTask(temp));
  thread.setName(""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
}",0.9316037735849056
134812,"@Override public synchronized void queueAlarms(){
  queuing=true;
}","@Override public void queueAlarms(){
  queuing=true;
}",0.8925619834710744
134813,"/** 
 * NOTE: <code>characteristic_component_ref</code> member of <code>CharacteristicComponentDesc</code> is always set to <code>null</code>.
 * @see alma.ACS.CharacteristicComponentOperations#descriptor()
 */
public CharacteristicComponentDesc descriptor(){
  if (characteristicComponentDesc == null) {
    PropertyDesc[] propertyDescriptors=null;
synchronized (properties) {
      int i=0;
      propertyDescriptors=new PropertyDesc[properties.size()];
      Iterator<PropertyOperations> iter=properties.keySet().iterator();
      while (iter.hasNext())       propertyDescriptors[i]=((PropertyImpl)iter.next()).getPropertyDescriptor();
    }
    characteristicComponentDesc=new CharacteristicComponentDesc(null,m_instanceName,propertyDescriptors,get_all_characteristics());
  }
  return characteristicComponentDesc;
}","/** 
 * NOTE: <code>characteristic_component_ref</code> member of <code>CharacteristicComponentDesc</code> is always set to <code>null</code>.
 * @see alma.ACS.CharacteristicComponentOperations#descriptor()
 */
public CharacteristicComponentDesc descriptor(){
  if (characteristicComponentDesc == null) {
    PropertyDesc[] propertyDescriptors=null;
synchronized (properties) {
      int i=0;
      propertyDescriptors=new PropertyDesc[properties.size()];
      Iterator<PropertyOperations> iter=properties.keySet().iterator();
      while (iter.hasNext())       propertyDescriptors[i++]=((PropertyImpl)iter.next()).getPropertyDescriptor();
    }
    characteristicComponentDesc=new CharacteristicComponentDesc(null,m_instanceName,propertyDescriptors,get_all_characteristics());
  }
  return characteristicComponentDesc;
}",0.9987819732034104
134814,"/** 
 * Method to begin the sampling of all the samples contained in the class. It initializes the SamplingDataCorrelator Object, which is used to store data to file.<br>
 */
private void startSample(){
  double freq=0;
  int prev_status;
  freq=((SpinnerNumberModel)freqSpinner.getModel()).getNumber().doubleValue();
  Date startTimestamp=new Date();
  if (getSaveButton().isSelected()) {
    _sdc=new SamplingDataCorrelator(group,((SpinnerNumberModel)freqSpinner.getModel()).getNumber().intValue(),startTimestamp);
    getFileNameLabel().setText(""String_Node_Str"" + _sdc.getFilename());
    getFileNameLabel().setToolTipText(""String_Node_Str"" + _sdc.getFilename());
  }
 else {
  }
  prev_status=getStatusIcon().getStatus();
  getStatusComboBox().removeAllItems();
  for (  DataPrinter wp : samplers) {
    wp.setFrequency(freq);
    try {
      wp.startSample();
      isStopped=false;
      addToStatusComboBox(""String_Node_Str"" + wp.getComponent() + ""String_Node_Str""+ wp.getProperty()+ ""String_Node_Str"");
      updateStatusComboBox();
      setStatusIcon(StatusIcon.SAMPLING);
    }
 catch (    alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      addToStatusComboBox(""String_Node_Str"" + wp.getComponent());
      updateStatusComboBox();
      setStatusIcon(StatusIcon.SAMPLING_WARNING);
    }
catch (    alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      addToStatusComboBox(""String_Node_Str"" + wp.getComponent() + ""String_Node_Str""+ wp.getProperty());
      updateStatusComboBox();
      setStatusIcon(StatusIcon.SAMPLING_WARNING);
    }
catch (    alma.ACSErrTypeCommon.CouldntAccessPropertyEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      addToStatusComboBox(""String_Node_Str"" + wp.getProperty());
      updateStatusComboBox();
      setStatusIcon(StatusIcon.SAMPLING_WARNING);
    }
catch (    cl.utfsm.samplingSystemUI.core.SamplingManagerException e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      if (!faultErrorAddedToStatusBox) {
        addToStatusComboBox(""String_Node_Str"");
        updateStatusComboBox();
        faultErrorAddedToStatusBox=true;
      }
      getStatusIcon().setStatus(StatusIcon.DISCONNECTED);
    }
  }
  if (isStopped) {
    stopButton.setEnabled(false);
    pauseButton.setEnabled(false);
    startButton.setEnabled(true);
    freqSpinner.setEnabled(true);
    timeSampSpinner.setEnabled(true);
    getSaveButton().setEnabled(true);
    setStatusIcon(prev_status);
    return;
  }
  if (script != null)   new ScriptRunner(script).start();
  int mins=((SpinnerNumberModel)this.getTimeSampSpinner().getModel()).getNumber().intValue();
  if (script == null && mins != 0)   new Watchdog(mins).start();
}","/** 
 * Method to begin the sampling of all the samples contained in the class. It initializes the SamplingDataCorrelator Object, which is used to store data to file.<br>
 */
private void startSample(){
  double freq=0;
  int prev_status;
  freq=((SpinnerNumberModel)freqSpinner.getModel()).getNumber().doubleValue();
  Date startTimestamp=new Date();
  if (getSaveButton().isSelected()) {
    _sdc=new SamplingDataCorrelator(group,((SpinnerNumberModel)freqSpinner.getModel()).getNumber().intValue(),startTimestamp);
    getFileNameLabel().setText(""String_Node_Str"" + _sdc.getFilename());
    getFileNameLabel().setToolTipText(""String_Node_Str"" + _sdc.getFilename());
  }
 else {
  }
  prev_status=getStatusIcon().getStatus();
  model.clear();
  for (  DataPrinter wp : samplers) {
    wp.setFrequency(freq);
    try {
      wp.startSample();
      isStopped=false;
      addToStatusList(""String_Node_Str"" + wp.getComponent() + ""String_Node_Str""+ wp.getProperty()+ ""String_Node_Str"");
      updateStatusList();
      setStatusIcon(StatusIcon.SAMPLING);
      ssg.setStatus(StatusIcon.CONNECTED_TO_SAMPMANAGER);
    }
 catch (    alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      addToStatusList(""String_Node_Str"" + wp.getComponent());
      updateStatusList();
      setStatusIcon(StatusIcon.SAMPLING_WARNING);
    }
catch (    alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      addToStatusList(""String_Node_Str"" + wp.getComponent() + ""String_Node_Str""+ wp.getProperty());
      updateStatusList();
      setStatusIcon(StatusIcon.SAMPLING_WARNING);
    }
catch (    alma.ACSErrTypeCommon.CouldntAccessPropertyEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      addToStatusList(""String_Node_Str"" + wp.getProperty());
      updateStatusList();
      setStatusIcon(StatusIcon.SAMPLING_WARNING);
    }
catch (    cl.utfsm.samplingSystemUI.core.SamplingManagerException e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
      if (!faultErrorAddedToStatusBox) {
        addToStatusList(""String_Node_Str"");
        updateStatusList();
        faultErrorAddedToStatusBox=true;
      }
      getStatusIcon().setStatus(StatusIcon.DISCONNECTED);
      ssg.setStatus(StatusIcon.DISCONNECTED);
    }
  }
  if (isStopped) {
    stopButton.setEnabled(false);
    pauseButton.setEnabled(false);
    startButton.setEnabled(true);
    freqSpinner.setEnabled(true);
    timeSampSpinner.setEnabled(true);
    getSaveButton().setEnabled(true);
    return;
  }
  if (script != null)   new ScriptRunner(script).start();
  int mins=((SpinnerNumberModel)this.getTimeSampSpinner().getModel()).getNumber().intValue();
  if (script == null && mins != 0)   new Watchdog(mins).start();
}",0.9264208088366293
134815,"private void createDelPropWindow(){
  if (frame != null) {
    return;
  }
  JLabel delLabel=new JLabel(""String_Node_Str"");
  jcombo=new JComboBox();
  frame=new JFrame(""String_Node_Str"");
  JPanel panel=new JPanel(new BorderLayout(5,5));
  JButton delButton=new JButton(""String_Node_Str"");
  for (  DataPrinter wp : samplers) {
    jcombo.addItem(wp.component + ""String_Node_Str"" + wp.property);
  }
  delButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String comProp[]=new String[2];
      comProp=jcombo.getSelectedItem().toString().split(""String_Node_Str"");
      removeSamp(comProp[0],comProp[1]);
      jcombo.removeItemAt(jcombo.getSelectedIndex());
      addToStatusComboBox(comProp[0] + ""String_Node_Str"" + comProp[1]+ ""String_Node_Str"");
    }
  }
);
  delLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  panel.add(delLabel,BorderLayout.NORTH);
  jcombo.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  panel.add(jcombo,BorderLayout.CENTER);
  delButton.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  panel.add(delButton,BorderLayout.EAST);
  frame.add(panel);
  frame.pack();
  frame.setVisible(true);
  frame.addWindowListener(new java.awt.event.WindowListener(){
    @Override public void windowActivated(    WindowEvent e){
    }
    @Override public void windowClosed(    WindowEvent e){
    }
    @Override public void windowClosing(    WindowEvent e){
    }
    @Override public void windowDeactivated(    WindowEvent e){
      frame=null;
    }
    @Override public void windowDeiconified(    WindowEvent e){
    }
    @Override public void windowIconified(    WindowEvent e){
    }
    @Override public void windowOpened(    WindowEvent e){
    }
  }
);
}","private void createDelPropWindow(){
  if (frame != null) {
    return;
  }
  JLabel delLabel=new JLabel(""String_Node_Str"");
  jcombo=new JComboBox();
  frame=new JFrame(""String_Node_Str"");
  JPanel panel=new JPanel(new BorderLayout(5,5));
  JButton delButton=new JButton(""String_Node_Str"");
  for (  DataPrinter wp : samplers) {
    jcombo.addItem(wp.component + ""String_Node_Str"" + wp.property);
  }
  delButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String comProp[]=new String[2];
      comProp=jcombo.getSelectedItem().toString().split(""String_Node_Str"");
      removeSamp(comProp[0],comProp[1]);
      jcombo.removeItemAt(jcombo.getSelectedIndex());
      addToStatusList(comProp[0] + ""String_Node_Str"" + comProp[1]+ ""String_Node_Str"");
    }
  }
);
  delLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  panel.add(delLabel,BorderLayout.NORTH);
  jcombo.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  panel.add(jcombo,BorderLayout.CENTER);
  delButton.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  panel.add(delButton,BorderLayout.EAST);
  frame.add(panel);
  frame.pack();
  frame.setVisible(true);
  frame.addWindowListener(new java.awt.event.WindowListener(){
    @Override public void windowActivated(    WindowEvent e){
    }
    @Override public void windowClosed(    WindowEvent e){
    }
    @Override public void windowClosing(    WindowEvent e){
    }
    @Override public void windowDeactivated(    WindowEvent e){
      frame=null;
    }
    @Override public void windowDeiconified(    WindowEvent e){
    }
    @Override public void windowIconified(    WindowEvent e){
    }
    @Override public void windowOpened(    WindowEvent e){
    }
  }
);
}",0.9966101694915256
134816,"/** 
 * Initializes the Stop Button, and also performs on click, the stop of the Sampling.
 * @return javax.swing.JButton Reference to the Stop Button
 */
private JButton getStopButton(){
  if (stopButton == null) {
    stopButton=new JButton();
    stopButton.setIcon(new ImageIcon(getClass().getClassLoader().getResource(""String_Node_Str"")));
    stopButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      ActionEvent arg0){
        pauseButton.setEnabled(false);
        stopSample();
        if (pausedGraph == true) {
          for (          DataPrinter i : samplers) {
            i.pauseSampling(false);
          }
          pausedGraph=false;
          pauseButton.setSelected(false);
        }
        timeSampSpinner.setEnabled(true);
        freqSpinner.setEnabled(true);
        stopButton.setEnabled(false);
        timeWindowSpinner.setEnabled(true);
      }
    }
);
  }
  return stopButton;
}","/** 
 * Initializes the Stop Button, and also performs on click, the stop of the Sampling.
 * @return javax.swing.JButton Reference to the Stop Button
 */
private JButton getStopButton(){
  if (stopButton == null) {
    stopButton=new JButton();
    stopButton.setIcon(new ImageIcon(getClass().getClassLoader().getResource(""String_Node_Str"")));
    stopButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      ActionEvent arg0){
        pauseButton.setEnabled(false);
        stopSample();
        if (pausedGraph == true) {
          for (          DataPrinter i : samplers) {
            i.pauseSampling(false);
          }
          pausedGraph=false;
          pauseButton.setSelected(false);
        }
        timeSampSpinner.setEnabled(true);
        freqSpinner.setEnabled(true);
        timeWindowSpinner.setEnabled(true);
        stopButton.setEnabled(false);
      }
    }
);
  }
  return stopButton;
}",0.9519331243469176
134817,"private void stopSample(){
  if (isStopped)   return;
  isStopped=true;
  stopButton.setEnabled(false);
  pauseButton.setEnabled(false);
  startButton.setEnabled(true);
  getStatusComboBox().removeAllItems();
  getSaveButton().setEnabled(true);
  addToStatusComboBox(""String_Node_Str"");
  updateStatusComboBox();
  setStatusIcon(StatusIcon.CONNECTED_TO_SAMPMANAGER);
  for (  DataPrinter i : samplers) {
    i.stopSampling();
    if (getSaveButton().isSelected() == true) {
      if (i.isComponentAvailable() == true) {
        _sdc.addSamplingSet(((PlotPrinter)i).getFilename());
      }
    }
  }
  if (getSaveButton().isSelected() == true) {
    _sdc.dumpToFile();
  }
  for (  DataPrinter i : samplers) {
    if (getSaveButton().isSelected() == true) {
      if (i.isComponentAvailable() == true) {
        File temp=new File(((PlotPrinter)i).getFilename());
        temp.delete();
      }
    }
  }
}","private void stopSample(){
  if (isStopped)   return;
  isStopped=true;
  stopButton.setEnabled(false);
  pauseButton.setEnabled(false);
  startButton.setEnabled(true);
  model.clear();
  getSaveButton().setEnabled(true);
  addToStatusList(""String_Node_Str"");
  updateStatusList();
  setStatusIcon(StatusIcon.CONNECTED_TO_SAMPMANAGER);
  for (  DataPrinter i : samplers) {
    i.stopSampling();
    if (getSaveButton().isSelected() == true) {
      if (i.isComponentAvailable() == true) {
        _sdc.addSamplingSet(((PlotPrinter)i).getFilename());
      }
    }
  }
  if (getSaveButton().isSelected() == true) {
    _sdc.dumpToFile();
  }
  for (  DataPrinter i : samplers) {
    if (getSaveButton().isSelected() == true) {
      if (i.isComponentAvailable() == true) {
        File temp=new File(((PlotPrinter)i).getFilename());
        temp.delete();
      }
    }
  }
}",0.9342327150084316
134818,"/** 
 * This method initializes the GUI, setting up the layout.
 */
private void initialize(){
  this.setMinimumSize(new Dimension(990,550));
  this.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.insets=new Insets(5,5,5,5);
  c.anchor=GridBagConstraints.WEST;
  c.gridy=1;
  c.gridx=0;
  c.weighty=0;
  c.weightx=0;
  c.gridwidth=1;
  c.fill=GridBagConstraints.NONE;
  c.anchor=GridBagConstraints.WEST;
  this.add(getStartButton(),c);
  c.gridx=1;
  c.anchor=GridBagConstraints.WEST;
  this.add(getPauseButton(),c);
  c.gridx=2;
  c.anchor=GridBagConstraints.WEST;
  this.add(getStopButton(),c);
  c.gridx=3;
  c.anchor=GridBagConstraints.EAST;
  this.add(getFrequencyLabel(),c);
  c.gridx=4;
  c.anchor=GridBagConstraints.CENTER;
  this.add(getFreqSpinner(),c);
  c.gridx=5;
  c.anchor=GridBagConstraints.WEST;
  this.add(getResetFrequencyButton(),c);
  c.gridx=6;
  c.anchor=GridBagConstraints.WEST;
  this.add(getCleanButton(),c);
  c.gridx=7;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeSampLabel(),c);
  c.gridx=8;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeSampSpinner(),c);
  c.gridx=9;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeWindowLabel(),c);
  c.gridx=10;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeWindowSpinner(),c);
  c.anchor=GridBagConstraints.WEST;
  c.gridy=2;
  c.gridx=0;
  this.add(getSaveButton(),c);
  c.anchor=GridBagConstraints.WEST;
  c.gridx=1;
  c.gridwidth=4;
  c.weightx=1;
  this.add(getFileNameLabel(),c);
  c.gridx=5;
  c.gridwidth=5;
  c.weightx=0;
  c.anchor=GridBagConstraints.EAST;
  this.add(getStatusComboBox(),c);
  c.gridx=10;
  c.gridwidth=1;
  this.add(getStatusIcon(),c);
  this.getStopButton().setEnabled(false);
  this.getPauseButton().setEnabled(false);
  this.setTitle(""String_Node_Str"" + group);
  this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  this.setJMenuBar(getBeanGrouperMenuBar());
  samplers=new ArrayList<DataPrinter>();
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent we){
      askClose();
    }
  }
);
}","/** 
 * This method initializes the GUI, setting up the layout.
 */
private void initialize(){
  this.setMinimumSize(new Dimension(990,600));
  this.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.insets=new Insets(5,5,5,5);
  c.anchor=GridBagConstraints.WEST;
  c.gridy=1;
  c.gridx=0;
  c.weighty=0;
  c.weightx=0;
  c.gridwidth=1;
  c.fill=GridBagConstraints.NONE;
  c.anchor=GridBagConstraints.WEST;
  this.add(getStartButton(),c);
  c.gridx=1;
  c.anchor=GridBagConstraints.WEST;
  this.add(getPauseButton(),c);
  c.gridx=2;
  c.anchor=GridBagConstraints.WEST;
  this.add(getStopButton(),c);
  c.gridx=3;
  c.anchor=GridBagConstraints.EAST;
  this.add(getFrequencyLabel(),c);
  c.gridx=4;
  c.anchor=GridBagConstraints.CENTER;
  this.add(getFreqSpinner(),c);
  c.gridx=5;
  c.anchor=GridBagConstraints.WEST;
  this.add(getResetFrequencyButton(),c);
  c.gridx=6;
  c.anchor=GridBagConstraints.WEST;
  this.add(getCleanButton(),c);
  c.gridx=7;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeSampLabel(),c);
  c.gridx=8;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeSampSpinner(),c);
  c.gridx=9;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeWindowLabel(),c);
  c.gridx=10;
  c.anchor=GridBagConstraints.WEST;
  this.add(getTimeWindowSpinner(),c);
  c.anchor=GridBagConstraints.WEST;
  c.gridy=2;
  c.gridx=0;
  this.add(getSaveButton(),c);
  c.anchor=GridBagConstraints.WEST;
  c.gridx=1;
  c.gridwidth=5;
  c.weightx=1;
  this.add(getFileNameLabel(),c);
  c.gridx=6;
  c.gridwidth=4;
  c.weightx=0;
  c.fill=1;
  c.anchor=GridBagConstraints.WEST;
  this.add(getStatusScrollBar(),c);
  c.gridx=10;
  c.gridwidth=1;
  this.add(getStatusIcon(),c);
  this.getStopButton().setEnabled(false);
  this.getPauseButton().setEnabled(false);
  this.setTitle(""String_Node_Str"" + group);
  this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  this.setJMenuBar(getBeanGrouperMenuBar());
  samplers=new ArrayList<DataPrinter>();
  this.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent we){
      askClose();
    }
  }
);
}",0.9542762378583274
134819,"@Override public void setTimeWindow(double frequency,int time){
  System.out.println(""String_Node_Str"");
}","public void setTimeWindow(double frequency,int time){
}",0.6832298136645962
134820,"/** 
 * Starts the sampling, connecting to ACS Manager and the Sampling Manager.
 * @throws CouldntAccessComponentEx Component wasn't available at the time.
 * @throws TypeNotSupportedEx Sampling Manager specific exception. Some types are currently not supported in acssamp.
 * @throws CouldntAccessPropertyEx
 */
public void startSample() throws CouldntAccessComponentEx, TypeNotSupportedEx, CouldntAccessPropertyEx, SamplingManagerException {
  samp=new Sampler();
synchronized (this) {
    System.out.println(initializations);
    if (initializations == 0) {
      try {
        spinUp(SampTool.NAME,ssg.MAN_NAME);
      }
 catch (      AcsInformationException e) {
        System.out.print(e.getMessage());
        System.exit(-1);
      }
catch (      SamplingManagerException e) {
        System.out.print(e.getMessage());
        System.exit(-1);
      }
catch (      AcsJContainerEx e) {
        System.out.println(e.getMessage());
        System.exit(-1);
      }
    }
    initializations++;
  }
  try {
    SamplingManagerUITool.startSample(new SampDetail(component,property,(long)this.frequency,reportRate));
  }
 catch (  alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
    setComponentAvailable(false,""String_Node_Str"");
    throw e;
  }
catch (  alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
    setComponentAvailable(false,""String_Node_Str"");
    throw e;
  }
catch (  CouldntAccessPropertyEx e) {
    setComponentAvailable(false,""String_Node_Str"");
    throw e;
  }
catch (  SamplingManagerException e) {
    setComponentAvailable(false,e.getMessage());
    throw e;
  }
  samp.start();
}","/** 
 * Starts the sampling, connecting to ACS Manager and the Sampling Manager.
 * @throws CouldntAccessComponentEx Component wasn't available at the time.
 * @throws TypeNotSupportedEx Sampling Manager specific exception. Some types are currently not supported in acssamp.
 * @throws CouldntAccessPropertyEx
 */
public void startSample() throws CouldntAccessComponentEx, TypeNotSupportedEx, CouldntAccessPropertyEx, SamplingManagerException {
  samp=new Sampler();
synchronized (this) {
    System.out.println(""String_Node_Str"" + initializations);
    if (initializations == 0) {
      try {
        spinUp(SampTool.NAME,ssg.MAN_NAME);
      }
 catch (      AcsInformationException e) {
        System.out.print(e.getMessage());
        System.exit(-1);
      }
catch (      SamplingManagerException e) {
        System.out.print(e.getMessage());
        System.exit(-1);
      }
catch (      AcsJContainerEx e) {
        System.out.println(e.getMessage());
        System.exit(-1);
      }
    }
    initializations++;
  }
  try {
    SamplingManagerUITool.startSample(new SampDetail(component,property,(long)this.frequency,reportRate));
  }
 catch (  alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
    setComponentAvailable(false,""String_Node_Str"");
    throw e;
  }
catch (  alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
    setComponentAvailable(false,""String_Node_Str"");
    throw e;
  }
catch (  CouldntAccessPropertyEx e) {
    setComponentAvailable(false,""String_Node_Str"");
    throw e;
  }
catch (  SamplingManagerException e) {
    setComponentAvailable(false,e.getMessage());
    throw e;
  }
  samp.start();
}",0.993823347745522
134821,"public Object doInBackground(){
  fillPropertyComboBox(propList.get(k));
  return null;
}","public List<String> doInBackground(){
  ComponentComboBox.setEnabled(false);
  PropertyComboBox.setEnabled(false);
  List<String> list_=SampTool.getPropsForComponent(compList[k]);
  return list_;
}",0.5104895104895105
134822,"/** 
 * This method initializes ComponentComboBox
 * @return javax.swing.JComboBox
 */
private JComboBox getComponentComboBox(){
  if (ComponentComboBox == null) {
    ComponentComboBox=new JComboBox();
    ComponentComboBox.setPreferredSize(new Dimension(320,24));
    ComponentComboBox.addItemListener(new java.awt.event.ItemListener(){
      public void itemStateChanged(      java.awt.event.ItemEvent e){
        if (e.getStateChange() == java.awt.event.ItemEvent.DESELECTED)         return;
        PropertyComboBox.setEnabled(true);
        String comp=e.getItem().toString();
        PropertyComboBox.removeAllItems();
        for (int i=0; i < compList.length; i++) {
          if (compList[i].compareTo(comp) == 0) {
            if (propList.get(i) == null) {
              List<String> list=SampTool.getPropsForComponent(compList[i]);
              if (list == null) {
                PropertyComboBox.removeAllItems();
                PropertyComboBox.setEnabled(false);
                ComponentComboBox.hidePopup();
                JOptionPane.showMessageDialog(PropertyComboBox.getParent().getParent(),""String_Node_Str"" + comp + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
              }
 else {
                propList.add(i,list);
              }
            }
            try {
              if (propList.get(i) != null) {
                final int k=i;
                SwingWorker<Object,Object> sw=new SwingWorker<Object,Object>(){
                  public Object doInBackground(){
                    fillPropertyComboBox(propList.get(k));
                    return null;
                  }
                }
;
                sw.execute();
              }
            }
 catch (            IndexOutOfBoundsException ex) {
              PropertyComboBox.removeAllItems();
              PropertyComboBox.setEnabled(false);
            }
catch (            Exception e1) {
              System.out.println(""String_Node_Str"" + e1);
            }
          }
        }
        if (PropertyComboBox.getItemCount() == 0)         addSampleButton.setEnabled(false);
 else         addSampleButton.setEnabled(true);
      }
    }
);
  }
  return ComponentComboBox;
}","/** 
 * This method initializes ComponentComboBox
 * @return javax.swing.JComboBox
 */
private JComboBox getComponentComboBox(){
  if (ComponentComboBox == null) {
    ComponentComboBox=new JComboBox();
    ComponentComboBox.setPreferredSize(new Dimension(320,24));
    ComponentComboBox.addItemListener(new java.awt.event.ItemListener(){
      public void itemStateChanged(      java.awt.event.ItemEvent e){
        if (e.getStateChange() == java.awt.event.ItemEvent.DESELECTED)         return;
        PropertyComboBox.setEnabled(true);
        String comp=e.getItem().toString();
        PropertyComboBox.removeAllItems();
        for (int i=0; i < compList.length; i++) {
          if (compList[i].compareTo(comp) == 0) {
            if (propList.get(i) == null) {
              final int k=i;
              SwingWorker<List<String>,Object> sw=new SwingWorker<List<String>,Object>(){
                public List<String> doInBackground(){
                  ComponentComboBox.setEnabled(false);
                  PropertyComboBox.setEnabled(false);
                  List<String> list_=SampTool.getPropsForComponent(compList[k]);
                  return list_;
                }
                public void done(){
                  ComponentComboBox.setEnabled(true);
                  PropertyComboBox.setEnabled(true);
                }
              }
;
              sw.execute();
              try {
                List<String> list=sw.get();
                if (list == null) {
                  PropertyComboBox.removeAllItems();
                  PropertyComboBox.setEnabled(false);
                  ComponentComboBox.hidePopup();
                  JOptionPane.showMessageDialog(PropertyComboBox.getParent().getParent(),""String_Node_Str"" + comp + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
                }
 else {
                  propList.add(i,list);
                }
              }
 catch (              InterruptedException e1) {
                e1.printStackTrace();
              }
catch (              ExecutionException e1) {
                e1.printStackTrace();
              }
            }
            try {
              if (propList.get(i) != null) {
                fillPropertyComboBox(propList.get(i));
              }
            }
 catch (            IndexOutOfBoundsException ex) {
              PropertyComboBox.removeAllItems();
              PropertyComboBox.setEnabled(false);
            }
catch (            Exception e1) {
              System.out.println(""String_Node_Str"" + e1);
            }
          }
        }
        if (PropertyComboBox.getItemCount() == 0)         addSampleButton.setEnabled(false);
 else         addSampleButton.setEnabled(true);
      }
    }
);
  }
  return ComponentComboBox;
}",0.7709364482280736
134823,"public void itemStateChanged(java.awt.event.ItemEvent e){
  if (e.getStateChange() == java.awt.event.ItemEvent.DESELECTED)   return;
  PropertyComboBox.setEnabled(true);
  String comp=e.getItem().toString();
  PropertyComboBox.removeAllItems();
  for (int i=0; i < compList.length; i++) {
    if (compList[i].compareTo(comp) == 0) {
      if (propList.get(i) == null) {
        List<String> list=SampTool.getPropsForComponent(compList[i]);
        if (list == null) {
          PropertyComboBox.removeAllItems();
          PropertyComboBox.setEnabled(false);
          ComponentComboBox.hidePopup();
          JOptionPane.showMessageDialog(PropertyComboBox.getParent().getParent(),""String_Node_Str"" + comp + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
 else {
          propList.add(i,list);
        }
      }
      try {
        if (propList.get(i) != null) {
          final int k=i;
          SwingWorker<Object,Object> sw=new SwingWorker<Object,Object>(){
            public Object doInBackground(){
              fillPropertyComboBox(propList.get(k));
              return null;
            }
          }
;
          sw.execute();
        }
      }
 catch (      IndexOutOfBoundsException ex) {
        PropertyComboBox.removeAllItems();
        PropertyComboBox.setEnabled(false);
      }
catch (      Exception e1) {
        System.out.println(""String_Node_Str"" + e1);
      }
    }
  }
  if (PropertyComboBox.getItemCount() == 0)   addSampleButton.setEnabled(false);
 else   addSampleButton.setEnabled(true);
}","public void itemStateChanged(java.awt.event.ItemEvent e){
  if (e.getStateChange() == java.awt.event.ItemEvent.DESELECTED)   return;
  PropertyComboBox.setEnabled(true);
  String comp=e.getItem().toString();
  PropertyComboBox.removeAllItems();
  for (int i=0; i < compList.length; i++) {
    if (compList[i].compareTo(comp) == 0) {
      if (propList.get(i) == null) {
        final int k=i;
        SwingWorker<List<String>,Object> sw=new SwingWorker<List<String>,Object>(){
          public List<String> doInBackground(){
            ComponentComboBox.setEnabled(false);
            PropertyComboBox.setEnabled(false);
            List<String> list_=SampTool.getPropsForComponent(compList[k]);
            return list_;
          }
          public void done(){
            ComponentComboBox.setEnabled(true);
            PropertyComboBox.setEnabled(true);
          }
        }
;
        sw.execute();
        try {
          List<String> list=sw.get();
          if (list == null) {
            PropertyComboBox.removeAllItems();
            PropertyComboBox.setEnabled(false);
            ComponentComboBox.hidePopup();
            JOptionPane.showMessageDialog(PropertyComboBox.getParent().getParent(),""String_Node_Str"" + comp + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
          }
 else {
            propList.add(i,list);
          }
        }
 catch (        InterruptedException e1) {
          e1.printStackTrace();
        }
catch (        ExecutionException e1) {
          e1.printStackTrace();
        }
      }
      try {
        if (propList.get(i) != null) {
          fillPropertyComboBox(propList.get(i));
        }
      }
 catch (      IndexOutOfBoundsException ex) {
        PropertyComboBox.removeAllItems();
        PropertyComboBox.setEnabled(false);
      }
catch (      Exception e1) {
        System.out.println(""String_Node_Str"" + e1);
      }
    }
  }
  if (PropertyComboBox.getItemCount() == 0)   addSampleButton.setEnabled(false);
 else   addSampleButton.setEnabled(true);
}",0.7312004375170905
134824,"/** 
 * Takes the process name and overwrites previous names, and updates all Loggers which are waiting to get their overly simple name enriched. The new name will be the old name + @ + processName. <p> The update mechanism ensures that the process name will eventually be set also on loggers which were created before the process name was known, e.g. component logger created before container logger.
 * @TODO check if we still need the process name appended to the logger name, now that we have a separate field for it in AcsLogger.
 * @param name
 */
private void setProcessName(String processName){
  if (this.processName == null && processName != null) {
    processNameLock.lock();
    try {
      this.processName=processName;
synchronized (loggers) {
        for (        String oldLoggerName : new ArrayList<String>(loggers.keySet())) {
          AcsLoggerInfo loggerInfo=loggers.get(oldLoggerName);
          if (loggerInfo.needsProcessNameUpdate) {
            String newLoggerName=oldLoggerName + ""String_Node_Str"" + processName;
            loggerInfo.logger.setLoggerName(newLoggerName);
            loggerInfo.logger.setProcessName(processName);
            loggerInfo.needsProcessNameUpdate=false;
            AcsLoggerInfo gonner=loggers.put(newLoggerName,loggerInfo);
            if (gonner != null) {
              m_internalLogger.info(""String_Node_Str"" + newLoggerName + ""String_Node_Str"");
            }
            loggers.remove(oldLoggerName);
          }
        }
      }
    }
  finally {
      processNameLock.unlock();
    }
  }
 else {
    m_internalLogger.info(""String_Node_Str"" + this.processName + ""String_Node_Str""+ processName+ ""String_Node_Str"");
  }
}","/** 
 * Takes the process name and overwrites previous names, and updates all Loggers which are waiting to get their overly simple name enriched. The new name will be the old name + @ + processName. <p> The update mechanism ensures that the process name will eventually be set also on loggers which were created before the process name was known, e.g. component logger created before container logger.
 * @TODO check if we still need the process name appended to the logger name, now that we have a separate field for it in AcsLogger.
 * @param name
 */
private void setProcessName(String processName){
  if (processName == null) {
    return;
  }
  if (this.processName == null) {
    processNameLock.lock();
    try {
      this.processName=processName;
synchronized (loggers) {
        for (        String oldLoggerName : new ArrayList<String>(loggers.keySet())) {
          AcsLoggerInfo loggerInfo=loggers.get(oldLoggerName);
          if (loggerInfo.needsProcessNameUpdate) {
            String newLoggerName=oldLoggerName + ""String_Node_Str"" + processName;
            loggerInfo.logger.setLoggerName(newLoggerName);
            loggerInfo.logger.setProcessName(processName);
            loggerInfo.needsProcessNameUpdate=false;
            AcsLoggerInfo gonner=loggers.put(newLoggerName,loggerInfo);
            if (gonner != null) {
              m_internalLogger.info(""String_Node_Str"" + newLoggerName + ""String_Node_Str"");
            }
            loggers.remove(oldLoggerName);
          }
        }
      }
    }
  finally {
      processNameLock.unlock();
    }
  }
 else   if (!processName.equals(this.processName)) {
    m_internalLogger.info(""String_Node_Str"" + this.processName + ""String_Node_Str""+ processName+ ""String_Node_Str"");
  }
}",0.4772133526850508
134825,"public void suppressedLog(boolean remoteLog){
  boolean firstSuppressed=(suppressedLocalLogCount.get() + suppressedRemoteLogCount.get() > 0);
  if (remoteLog) {
    suppressedRemoteLogCount.incrementAndGet();
  }
 else {
    suppressedLocalLogCount.incrementAndGet();
  }
  if (firstSuppressed) {
    if (logAlarmHandler != null && processName != null) {
      throttleAlarmFM=processName;
      try {
        logAlarmHandler.raiseAlarm(throttleAlarmFF,throttleAlarmFM,throttleAlarmFC);
        m_internalLogger.fine(""String_Node_Str"");
      }
 catch (      AcsJCouldntPerformActionEx ex) {
        m_internalLogger.severe(""String_Node_Str"");
      }
    }
 else {
      m_internalLogger.warning(""String_Node_Str"");
    }
  }
}","public void suppressedLog(boolean remoteLog){
  boolean firstSuppressed=(suppressedLocalLogCount.get() + suppressedRemoteLogCount.get() == 0);
  if (remoteLog) {
    suppressedRemoteLogCount.incrementAndGet();
  }
 else {
    suppressedLocalLogCount.incrementAndGet();
  }
  if (firstSuppressed) {
    if (logAlarmHandler != null && processName != null) {
      throttleAlarmFM=processName;
      try {
        logAlarmHandler.raiseAlarm(throttleAlarmFF,throttleAlarmFM,throttleAlarmFC);
        m_internalLogger.fine(""String_Node_Str"");
      }
 catch (      AcsJCouldntPerformActionEx ex) {
        m_internalLogger.severe(""String_Node_Str"");
      }
    }
 else {
      m_internalLogger.warning(""String_Node_Str"");
    }
  }
}",0.9979409746053536
134826,"/** 
 * Takes the process name and overwrites previous names, and updates all Loggers which are waiting to get their overly simple name enriched. The new name will be the old name + @ + processName. <p> For example, the Java container first uses a logger from which the process name ""AcsContainerRunner"" is derived. Only later when the the real container name has been parsed out, this gets renamed. <p> The update mechanism ensures that the process name will eventually be set also on loggers which were created before the process name was known, e.g. component logger created before container logger.
 * @TODO check if we still need the process name appended to the logger name, now that we have a separate field for it in AcsLogger.
 * @param name
 */
private void setProcessName(String newProcessName){
  if (newProcessName == null) {
    return;
  }
  if (!newProcessName.equals(this.processName)) {
    processNameLock.lock();
    try {
      this.processName=newProcessName;
synchronized (loggers) {
        for (        String oldLoggerName : new ArrayList<String>(loggers.keySet())) {
          AcsLoggerInfo loggerInfo=loggers.get(oldLoggerName);
          if (loggerInfo.needsProcessNameUpdate) {
            String newLoggerName=oldLoggerName + ""String_Node_Str"" + newProcessName;
            loggerInfo.logger.setLoggerName(newLoggerName);
            loggerInfo.logger.setProcessName(newProcessName);
            loggerInfo.needsProcessNameUpdate=false;
            AcsLoggerInfo gonner=loggers.put(newLoggerName,loggerInfo);
            if (gonner != null) {
              m_internalLogger.info(""String_Node_Str"" + newLoggerName + ""String_Node_Str"");
            }
            loggers.remove(oldLoggerName);
          }
        }
      }
      m_internalLogger.finer(""String_Node_Str"" + this.processName + ""String_Node_Str""+ newProcessName+ ""String_Node_Str"");
    }
  finally {
      processNameLock.unlock();
    }
  }
}","/** 
 * Takes the process name and overwrites previous names, and updates all Loggers which are waiting to get their overly simple name enriched. The new name will be the old name + @ + processName. <p> For example, the Java container first uses a logger from which the process name ""AcsContainerRunner"" is derived. Only later when the the real container name has been parsed out, this gets renamed. <p> The update mechanism ensures that the process name will eventually be set also on loggers which were created before the process name was known, e.g. component logger created before container logger.
 * @TODO check if we still need the process name appended to the logger name, now that we have a separate field for it in AcsLogger.
 * @param name
 */
private void setProcessName(String newProcessName){
  if (newProcessName == null) {
    return;
  }
  if (!newProcessName.equals(this.processName)) {
    processNameLock.lock();
    try {
      String oldProcessName=this.processName;
      this.processName=newProcessName;
synchronized (loggers) {
        for (        String oldLoggerName : new ArrayList<String>(loggers.keySet())) {
          AcsLoggerInfo loggerInfo=loggers.get(oldLoggerName);
          if (loggerInfo.needsProcessNameUpdate) {
            String newLoggerName=oldLoggerName + ""String_Node_Str"" + newProcessName;
            loggerInfo.logger.setLoggerName(newLoggerName);
            loggerInfo.logger.setProcessName(newProcessName);
            loggerInfo.needsProcessNameUpdate=false;
            AcsLoggerInfo gonner=loggers.put(newLoggerName,loggerInfo);
            if (gonner != null) {
              m_internalLogger.info(""String_Node_Str"" + newLoggerName + ""String_Node_Str"");
            }
            loggers.remove(oldLoggerName);
          }
        }
      }
      m_internalLogger.finer(""String_Node_Str"" + oldProcessName + ""String_Node_Str""+ newProcessName+ ""String_Node_Str"");
    }
  finally {
      processNameLock.unlock();
    }
  }
}",0.9857069933639612
134827,"/** 
 * Master component subclasses must call <code>super.cleanUp()</code> if they override this method!
 * @see alma.ACS.impl.CharacteristicComponentImpl#cleanUp()
 */
public void cleanUp() throws AcsJComponentCleanUpEx {
  try {
    subsysComponentMonitor.destroy(5,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    m_logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  try {
    if (stateChangeNotificationChecker != null) {
      stateChangeNotificationChecker.destroyMonitor();
    }
  }
 catch (  Exception e) {
    m_logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  try {
    m_stateMachine.cleanUp();
  }
 catch (  Exception e) {
    m_logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}","/** 
 * Master component subclasses must call <code>super.cleanUp()</code> if they override this method!
 * @see alma.ACS.impl.CharacteristicComponentImpl#cleanUp()
 */
public void cleanUp() throws AcsJComponentCleanUpEx {
  try {
    subsysComponentMonitor.destroy(5,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    m_logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  try {
    if (stateChangeNotificationChecker != null) {
      stateChangeNotificationChecker.destroyMonitor();
    }
  }
 catch (  Exception e) {
    m_logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  try {
    m_stateMachine.cleanUp();
  }
 catch (  Exception e) {
    m_logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  super.cleanUp();
}",0.9866666666666668
134828,"public Class getClassType(TypeCode tc){
switch (tc.kind().value()) {
case TCKind._tk_objref:
    try {
      return Class.forName(IDtoClassName(tc.id()));
    }
 catch (    org.omg.CORBA.TypeCodePackage.BadKind e) {
      e.printStackTrace();
      return null;
    }
catch (    java.lang.ClassNotFoundException e) {
      return org.omg.CORBA.Object.class;
    }
case TCKind._tk_enum:
  return DataEnum.class;
case TCKind._tk_struct:
case TCKind._tk_except:
try {
  return Class.forName(""String_Node_Str"" + IDtoClassName(tc.id()));
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
catch (java.lang.ClassNotFoundException e) {
  if (tc.kind().value() == TCKind._tk_struct)   return DataStruct.class;
 else   return DataException.class;
}
case TCKind._tk_sequence:
case TCKind._tk_array:
Class content;
try {
if (tc.content_type().kind() == TCKind.tk_struct) if (cStruct.equals(IDtoClassName(tc.content_type().id()))) {
return java.lang.Object[].class;
}
content=getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
return java.lang.reflect.Array.newInstance(content,0).getClass();
case TCKind._tk_alias:
try {
if (tc.content_type().kind() == TCKind.tk_struct) if (cStruct.equals(IDtoClassName(tc.content_type().id()))) {
return java.lang.Object.class;
}
return getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
case TCKind._tk_void:
return Void.TYPE;
case TCKind._tk_short:
return Short.TYPE;
case TCKind._tk_long:
return Integer.TYPE;
case TCKind._tk_ushort:
return Short.TYPE;
case TCKind._tk_ulong:
return Integer.TYPE;
case TCKind._tk_float:
return Float.TYPE;
case TCKind._tk_double:
return Double.TYPE;
case TCKind._tk_boolean:
return Boolean.TYPE;
case TCKind._tk_char:
return Character.TYPE;
case TCKind._tk_octet:
return Byte.TYPE;
case TCKind._tk_string:
return String.class;
case TCKind._tk_longlong:
return Long.TYPE;
case TCKind._tk_ulonglong:
return Long.TYPE;
case TCKind._tk_union:
case TCKind._tk_longdouble:
case TCKind._tk_wchar:
case TCKind._tk_wstring:
case TCKind._tk_fixed:
case TCKind._tk_value:
case TCKind._tk_value_box:
case TCKind._tk_native:
case TCKind._tk_TypeCode:
case TCKind._tk_Principal:
case TCKind._tk_abstract_interface:
case TCKind._tk_any:
case TCKind._tk_null:
default :
throw new IllegalArgumentException(""String_Node_Str"" + tc.kind().value() + ""String_Node_Str"");
}
}","public Class getClassType(TypeCode tc){
switch (tc.kind().value()) {
case TCKind._tk_objref:
    try {
      return Class.forName(IDtoClassName(tc.id()));
    }
 catch (    org.omg.CORBA.TypeCodePackage.BadKind e) {
      e.printStackTrace();
      return null;
    }
catch (    java.lang.ClassNotFoundException e) {
      return org.omg.CORBA.Object.class;
    }
case TCKind._tk_enum:
  return DataEnum.class;
case TCKind._tk_struct:
case TCKind._tk_except:
try {
  return Class.forName(""String_Node_Str"" + IDtoClassName(tc.id()));
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
catch (java.lang.ClassNotFoundException e) {
  if (tc.kind().value() == TCKind._tk_struct)   return DataStruct.class;
 else   return DataException.class;
}
case TCKind._tk_sequence:
case TCKind._tk_array:
Class content;
try {
content=getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
return java.lang.reflect.Array.newInstance(content,0).getClass();
case TCKind._tk_alias:
try {
return getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
case TCKind._tk_void:
return Void.TYPE;
case TCKind._tk_short:
return Short.TYPE;
case TCKind._tk_long:
return Integer.TYPE;
case TCKind._tk_ushort:
return Short.TYPE;
case TCKind._tk_ulong:
return Integer.TYPE;
case TCKind._tk_float:
return Float.TYPE;
case TCKind._tk_double:
return Double.TYPE;
case TCKind._tk_boolean:
return Boolean.TYPE;
case TCKind._tk_char:
return Character.TYPE;
case TCKind._tk_octet:
return Byte.TYPE;
case TCKind._tk_string:
return String.class;
case TCKind._tk_longlong:
return Long.TYPE;
case TCKind._tk_ulonglong:
return Long.TYPE;
case TCKind._tk_union:
case TCKind._tk_longdouble:
case TCKind._tk_wchar:
case TCKind._tk_wstring:
case TCKind._tk_fixed:
case TCKind._tk_value:
case TCKind._tk_value_box:
case TCKind._tk_native:
case TCKind._tk_TypeCode:
case TCKind._tk_Principal:
case TCKind._tk_abstract_interface:
case TCKind._tk_any:
case TCKind._tk_null:
default :
throw new IllegalArgumentException(""String_Node_Str"" + tc.kind().value() + ""String_Node_Str"");
}
}",0.9372022520571676
134829,"private DataElement getDef(TypeCode tc){
  int value=tc.kind().value();
switch (value) {
case TCKind._tk_struct:
    return getStructDef(tc);
case TCKind._tk_enum:
  return getEnumDef(tc);
case TCKind._tk_alias:
case TCKind._tk_sequence:
case TCKind._tk_array:
try {
  return getDef(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
default :
return null;
}
}","private DataElement getDef(TypeCode tc){
  int value=tc.kind().value();
switch (value) {
case TCKind._tk_struct:
    try {
      if (structs.search(tc.id()) == -1)       return null;
      structs.push(tc.id());
      DataElement ret=getStructDef(tc);
      structs.pop();
      return ret;
    }
 catch (    org.omg.CORBA.TypeCodePackage.BadKind e) {
      e.printStackTrace();
      return null;
    }
case TCKind._tk_enum:
  return getEnumDef(tc);
case TCKind._tk_alias:
case TCKind._tk_sequence:
case TCKind._tk_array:
try {
  return getDef(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
default :
return null;
}
}",0.4050632911392405
134830,"public Any insertTypedef(TypeCode tc,java.lang.Object obj){
  DynAny dany;
  try {
    dany=ra.getDynFact().create_dyn_any_from_type_code(tc);
  }
 catch (  org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode e) {
    e.printStackTrace();
    return null;
  }
  Class cl=getClassType(tc);
  DynStruct str=(DynStruct)dany;
  NameDynAnyPair[] mems=str.get_members_as_dyn_any();
  try {
    if (tc.kind() == TCKind.tk_struct) {
      DataStruct ds=(DataStruct)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),ds.get(mems[i].id)));
      }
    }
 else {
      DataException de=(DataException)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),de.get(mems[i].id)));
      }
    }
    str.set_members_as_dyn_any(mems);
  }
 catch (  org.omg.DynamicAny.DynAnyPackage.TypeMismatch e) {
    e.printStackTrace();
    return null;
  }
catch (  org.omg.DynamicAny.DynAnyPackage.InvalidValue e) {
    e.printStackTrace();
    return null;
  }
  displayAny(dany.to_any());
  return dany.to_any();
}","public Any insertTypedef(TypeCode tc,java.lang.Object obj){
  DynAny dany;
  try {
    dany=ra.getDynFact().create_dyn_any_from_type_code(tc);
  }
 catch (  org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode e) {
    e.printStackTrace();
    return null;
  }
  Class cl=getClassType(tc);
  DynStruct str=(DynStruct)dany;
  NameDynAnyPair[] mems=str.get_members_as_dyn_any();
  try {
    if (tc.kind() == TCKind.tk_struct) {
      DataStruct ds=(DataStruct)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),ds.get(mems[i].id)));
      }
    }
 else {
      DataException de=(DataException)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),de.get(mems[i].id)));
      }
    }
    str.set_members_as_dyn_any(mems);
  }
 catch (  org.omg.DynamicAny.DynAnyPackage.TypeMismatch e) {
    e.printStackTrace();
    return null;
  }
catch (  org.omg.DynamicAny.DynAnyPackage.InvalidValue e) {
    e.printStackTrace();
    return null;
  }
  return dany.to_any();
}",0.9868718877320054
134831,"public Class getClassType(TypeCode tc){
switch (tc.kind().value()) {
case TCKind._tk_objref:
    try {
      return Class.forName(IDtoClassName(tc.id()));
    }
 catch (    org.omg.CORBA.TypeCodePackage.BadKind e) {
      e.printStackTrace();
      return null;
    }
catch (    java.lang.ClassNotFoundException e) {
      return org.omg.CORBA.Object.class;
    }
case TCKind._tk_enum:
  return DataEnum.class;
case TCKind._tk_struct:
case TCKind._tk_except:
try {
  return Class.forName(""String_Node_Str"" + IDtoClassName(tc.id()));
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
catch (java.lang.ClassNotFoundException e) {
  if (tc.kind().value() == TCKind._tk_struct)   return DataStruct.class;
 else   return DataException.class;
}
case TCKind._tk_sequence:
case TCKind._tk_array:
Class content;
try {
if (tc.content_type().kind() == TCKind.tk_struct) if (cStruct.equals(IDtoClassName(tc.content_type().id()))) {
return java.lang.Object[].class;
}
content=getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
return java.lang.reflect.Array.newInstance(content,0).getClass();
case TCKind._tk_alias:
try {
if (tc.content_type().kind() == TCKind.tk_struct) if (cStruct.equals(IDtoClassName(tc.content_type().id()))) {
return java.lang.Object.class;
}
return getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
case TCKind._tk_void:
return Void.TYPE;
case TCKind._tk_short:
return Short.TYPE;
case TCKind._tk_long:
return Integer.TYPE;
case TCKind._tk_ushort:
return Short.TYPE;
case TCKind._tk_ulong:
return Integer.TYPE;
case TCKind._tk_float:
return Float.TYPE;
case TCKind._tk_double:
return Double.TYPE;
case TCKind._tk_boolean:
return Boolean.TYPE;
case TCKind._tk_char:
return Character.TYPE;
case TCKind._tk_octet:
return Byte.TYPE;
case TCKind._tk_string:
return String.class;
case TCKind._tk_longlong:
return Long.TYPE;
case TCKind._tk_ulonglong:
return Long.TYPE;
case TCKind._tk_union:
case TCKind._tk_longdouble:
case TCKind._tk_wchar:
case TCKind._tk_wstring:
case TCKind._tk_fixed:
case TCKind._tk_value:
case TCKind._tk_value_box:
case TCKind._tk_native:
case TCKind._tk_TypeCode:
case TCKind._tk_Principal:
case TCKind._tk_abstract_interface:
case TCKind._tk_any:
case TCKind._tk_null:
default :
throw new IllegalArgumentException(""String_Node_Str"" + tc.kind().value() + ""String_Node_Str"");
}
}","public Class getClassType(TypeCode tc){
switch (tc.kind().value()) {
case TCKind._tk_objref:
    try {
      return Class.forName(IDtoClassName(tc.id()));
    }
 catch (    org.omg.CORBA.TypeCodePackage.BadKind e) {
      e.printStackTrace();
      return null;
    }
catch (    java.lang.ClassNotFoundException e) {
      return org.omg.CORBA.Object.class;
    }
case TCKind._tk_enum:
  return DataEnum.class;
case TCKind._tk_struct:
case TCKind._tk_except:
try {
  return Class.forName(""String_Node_Str"" + IDtoClassName(tc.id()));
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
catch (java.lang.ClassNotFoundException e) {
  if (tc.kind().value() == TCKind._tk_struct)   return DataStruct.class;
 else   return DataException.class;
}
case TCKind._tk_sequence:
case TCKind._tk_array:
Class content;
try {
content=getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
return java.lang.reflect.Array.newInstance(content,0).getClass();
case TCKind._tk_alias:
try {
return getClassType(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
return null;
}
case TCKind._tk_void:
return Void.TYPE;
case TCKind._tk_short:
return Short.TYPE;
case TCKind._tk_long:
return Integer.TYPE;
case TCKind._tk_ushort:
return Short.TYPE;
case TCKind._tk_ulong:
return Integer.TYPE;
case TCKind._tk_float:
return Float.TYPE;
case TCKind._tk_double:
return Double.TYPE;
case TCKind._tk_boolean:
return Boolean.TYPE;
case TCKind._tk_char:
return Character.TYPE;
case TCKind._tk_octet:
return Byte.TYPE;
case TCKind._tk_string:
return String.class;
case TCKind._tk_longlong:
return Long.TYPE;
case TCKind._tk_ulonglong:
return Long.TYPE;
case TCKind._tk_union:
case TCKind._tk_longdouble:
case TCKind._tk_wchar:
case TCKind._tk_wstring:
case TCKind._tk_fixed:
case TCKind._tk_value:
case TCKind._tk_value_box:
case TCKind._tk_native:
case TCKind._tk_TypeCode:
case TCKind._tk_Principal:
case TCKind._tk_abstract_interface:
case TCKind._tk_any:
case TCKind._tk_null:
default :
throw new IllegalArgumentException(""String_Node_Str"" + tc.kind().value() + ""String_Node_Str"");
}
}",0.9372022520571676
134832,"private DataElement getDef(TypeCode tc){
  int value=tc.kind().value();
switch (value) {
case TCKind._tk_struct:
    return getStructDef(tc);
case TCKind._tk_enum:
  return getEnumDef(tc);
case TCKind._tk_alias:
case TCKind._tk_sequence:
case TCKind._tk_array:
try {
  return getDef(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
default :
return null;
}
}","private DataElement getDef(TypeCode tc){
  int value=tc.kind().value();
switch (value) {
case TCKind._tk_struct:
    try {
      if (structs.search(tc.id()) == -1)       return null;
      structs.push(tc.id());
      DataElement ret=getStructDef(tc);
      structs.pop();
      return ret;
    }
 catch (    org.omg.CORBA.TypeCodePackage.BadKind e) {
      e.printStackTrace();
      return null;
    }
case TCKind._tk_enum:
  return getEnumDef(tc);
case TCKind._tk_alias:
case TCKind._tk_sequence:
case TCKind._tk_array:
try {
  return getDef(tc.content_type());
}
 catch (org.omg.CORBA.TypeCodePackage.BadKind e) {
  e.printStackTrace();
  return null;
}
default :
return null;
}
}",0.4050632911392405
134833,"public Any insertTypedef(TypeCode tc,java.lang.Object obj){
  DynAny dany;
  try {
    dany=ra.getDynFact().create_dyn_any_from_type_code(tc);
  }
 catch (  org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode e) {
    e.printStackTrace();
    return null;
  }
  Class cl=getClassType(tc);
  DynStruct str=(DynStruct)dany;
  NameDynAnyPair[] mems=str.get_members_as_dyn_any();
  try {
    if (tc.kind() == TCKind.tk_struct) {
      DataStruct ds=(DataStruct)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),ds.get(mems[i].id)));
      }
    }
 else {
      DataException de=(DataException)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),de.get(mems[i].id)));
      }
    }
    str.set_members_as_dyn_any(mems);
  }
 catch (  org.omg.DynamicAny.DynAnyPackage.TypeMismatch e) {
    e.printStackTrace();
    return null;
  }
catch (  org.omg.DynamicAny.DynAnyPackage.InvalidValue e) {
    e.printStackTrace();
    return null;
  }
  displayAny(dany.to_any());
  return dany.to_any();
}","public Any insertTypedef(TypeCode tc,java.lang.Object obj){
  DynAny dany;
  try {
    dany=ra.getDynFact().create_dyn_any_from_type_code(tc);
  }
 catch (  org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode e) {
    e.printStackTrace();
    return null;
  }
  Class cl=getClassType(tc);
  DynStruct str=(DynStruct)dany;
  NameDynAnyPair[] mems=str.get_members_as_dyn_any();
  try {
    if (tc.kind() == TCKind.tk_struct) {
      DataStruct ds=(DataStruct)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),ds.get(mems[i].id)));
      }
    }
 else {
      DataException de=(DataException)obj;
      for (int i=0; i < mems.length; i++) {
        mems[i].value.from_any(insertAny(mems[i].value.to_any(),de.get(mems[i].id)));
      }
    }
    str.set_members_as_dyn_any(mems);
  }
 catch (  org.omg.DynamicAny.DynAnyPackage.TypeMismatch e) {
    e.printStackTrace();
    return null;
  }
catch (  org.omg.DynamicAny.DynAnyPackage.InvalidValue e) {
    e.printStackTrace();
    return null;
  }
  return dany.to_any();
}",0.9868718877320054
134834,"@Override public Object callFinished(Object retVal,Object[] args,Throwable realThr) throws Throwable {
  String qualMethodName=name + ""String_Node_Str"" + method.getName();
  if (isLoggable) {
    logger.log(this.logLevel,""String_Node_Str"" + qualMethodName + ""String_Node_Str""+ methodInvWatch.getLapTimeMillis()+ ""String_Node_Str"");
  }
  if (realThr != null) {
    if (realThr instanceof UserException) {
      boolean declared=false;
      Class<?>[] declaredExceptions=method.getExceptionTypes();
      for (int i=0; i < declaredExceptions.length; i++) {
        if (declaredExceptions[i] == realThr.getClass()) {
          declared=true;
          break;
        }
      }
      String msg=(declared ? ""String_Node_Str"" : ""String_Node_Str"");
      msg+=""String_Node_Str"" + qualMethodName + ""String_Node_Str"";
      Level exLogLevel=(declared ? AcsLogLevel.DEBUG : Level.WARNING);
      Throwable thrExpanded=CorbaExceptionConverter.convertHiddenErrorTrace(realThr);
      logger.log(exLogLevel,msg,thrExpanded);
      throw realThr;
    }
 else     if (realThr instanceof DynWrapperException) {
      String msg=""String_Node_Str"" + qualMethodName + ""String_Node_Str"";
      logger.log(Level.SEVERE,msg,realThr);
      throw new DATA_CONVERSION(msg + realThr.toString());
    }
 else {
      logger.log(Level.WARNING,""String_Node_Str"" + qualMethodName + ""String_Node_Str"",realThr);
      throw realThr;
    }
  }
  if (Boolean.getBoolean(CHECK_NULLS_CORBA_OUT_PROPERTYNAME)) {
    try {
      Class<?> clzzRet=method.getReturnType();
      if (!CorbaNullFinder.isIDLInterfaceClass(clzzRet)) {
        CorbaNullFinder finder=new CorbaNullFinder(retVal);
        if (finder.hasErrors()) {
          List<String> errors=finder.getErrors();
          StringBuilder sb=new StringBuilder();
          for (          String errorline : errors) {
            sb.append(errorline).append(""String_Node_Str"");
          }
          logger.warning(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ sb.toString());
        }
      }
      Class<?>[] argsClasses=method.getParameterTypes();
      StringBuilder sb=new StringBuilder();
      for (int argIndex=0; argIndex < argsClasses.length; argIndex++) {
        Class<?> clzzOutParam=argsClasses[argIndex];
        if (clzzOutParam.getSimpleName().endsWith(""String_Node_Str"") && !CorbaNullFinder.isIDLInterfaceClass(clzzOutParam)) {
          CorbaNullFinder finder=new CorbaNullFinder(args[argIndex]);
          if (finder.hasErrors()) {
            List<String> errors=finder.getErrors();
            sb.append(""String_Node_Str"" + clzzOutParam.getSimpleName() + ""String_Node_Str"");
            for (            String errorline : errors) {
              sb.append(""String_Node_Str"").append(errorline).append(""String_Node_Str"");
            }
          }
        }
      }
      String paramErrors=sb.toString();
      if (!paramErrors.isEmpty()) {
        logger.warning(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ paramErrors);
      }
    }
 catch (    Exception ex) {
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
  return retVal;
}","@Override public Object callFinished(Object retVal,Object[] args,Throwable realThr) throws Throwable {
  String qualMethodName=name + ""String_Node_Str"" + method.getName();
  if (isLoggable) {
    logger.log(this.logLevel,""String_Node_Str"" + qualMethodName + ""String_Node_Str""+ methodInvWatch.getLapTimeMillis()+ ""String_Node_Str"");
  }
  if (realThr != null) {
    if (realThr instanceof UserException) {
      boolean declared=false;
      Class<?>[] declaredExceptions=method.getExceptionTypes();
      for (int i=0; i < declaredExceptions.length; i++) {
        if (declaredExceptions[i] == realThr.getClass()) {
          declared=true;
          break;
        }
      }
      String msg=(declared ? ""String_Node_Str"" : ""String_Node_Str"");
      msg+=""String_Node_Str"" + qualMethodName + ""String_Node_Str"";
      Level exLogLevel=(declared ? AcsLogLevel.DEBUG : Level.WARNING);
      Throwable thrExpanded=CorbaExceptionConverter.convertHiddenErrorTrace(realThr);
      logger.log(exLogLevel,msg,thrExpanded);
      throw realThr;
    }
 else     if (realThr instanceof DynWrapperException) {
      String msg=""String_Node_Str"" + qualMethodName + ""String_Node_Str"";
      logger.log(Level.SEVERE,msg,realThr);
      throw new DATA_CONVERSION(msg + realThr.toString());
    }
 else {
      logger.log(Level.WARNING,""String_Node_Str"" + qualMethodName + ""String_Node_Str"",realThr);
      throw realThr;
    }
  }
  if (Boolean.getBoolean(CHECK_NULLS_CORBA_OUT_PROPERTYNAME)) {
    try {
      Class<?> clzzRet=method.getReturnType();
      if (!Void.TYPE.equals(clzzRet) && !CorbaNullFinder.isIDLInterfaceClass(clzzRet)) {
        CorbaNullFinder finder=new CorbaNullFinder(retVal);
        if (finder.hasErrors()) {
          List<String> errors=finder.getErrors();
          StringBuilder sb=new StringBuilder();
          for (          String errorline : errors) {
            sb.append(errorline).append(""String_Node_Str"");
          }
          logger.warning(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ sb.toString());
        }
      }
      Class<?>[] argsClasses=method.getParameterTypes();
      StringBuilder sb=new StringBuilder();
      for (int argIndex=0; argIndex < argsClasses.length; argIndex++) {
        Class<?> clzzOutParam=argsClasses[argIndex];
        if (clzzOutParam.getSimpleName().endsWith(""String_Node_Str"") && !CorbaNullFinder.isIDLInterfaceClass(clzzOutParam)) {
          CorbaNullFinder finder=new CorbaNullFinder(args[argIndex]);
          if (finder.hasErrors()) {
            List<String> errors=finder.getErrors();
            sb.append(""String_Node_Str"" + clzzOutParam.getSimpleName() + ""String_Node_Str"");
            for (            String errorline : errors) {
              sb.append(""String_Node_Str"").append(errorline).append(""String_Node_Str"");
            }
          }
        }
      }
      String paramErrors=sb.toString();
      if (!paramErrors.isEmpty()) {
        logger.warning(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ paramErrors);
      }
    }
 catch (    Exception ex) {
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
  return retVal;
}",0.9952076677316294
134835,"protected ClientLogManager(){
  sharedLogConfig=new LogConfig();
  try {
    sharedLogConfig.initialize(false);
  }
 catch (  LogConfigException ex) {
    System.err.println(""String_Node_Str"" + ex.toString());
  }
  parentRemoteLogger=Logger.getLogger(""String_Node_Str"");
  parentRemoteLogger.setUseParentHandlers(false);
  prepareRemoteLogging();
  m_internalLogger=getAcsLogger(""String_Node_Str"",LoggerOwnerType.OtherLogger);
  sharedLogConfig.setInternalLogger(m_internalLogger);
  LogThrottle.ThrottleCallback throttleCallback=new LogThrottle.ThrottleCallback(){
    public void clearedLogSuppression(){
    }
    public void suppressedLog(    boolean remoteLog){
    }
  }
;
  logThrottle=new LogThrottle(sharedLogConfig,throttleCallback);
  if (DEBUG) {
    m_internalLogger.fine(""String_Node_Str"");
  }
  sharedLogConfig.addSubscriber(this);
}","protected ClientLogManager(){
  sharedLogConfig=new LogConfig();
  try {
    sharedLogConfig.initialize(false);
    configureLogging(sharedLogConfig);
  }
 catch (  LogConfigException ex) {
    System.err.println(""String_Node_Str"" + ex.toString());
  }
  parentRemoteLogger=Logger.getLogger(""String_Node_Str"");
  parentRemoteLogger.setUseParentHandlers(false);
  prepareRemoteLogging();
  m_internalLogger=getAcsLogger(""String_Node_Str"",LoggerOwnerType.OtherLogger);
  sharedLogConfig.setInternalLogger(m_internalLogger);
  LogThrottle.ThrottleCallback throttleCallback=new LogThrottle.ThrottleCallback(){
    public void clearedLogSuppression(){
    }
    public void suppressedLog(    boolean remoteLog){
    }
  }
;
  logThrottle=new LogThrottle(sharedLogConfig,throttleCallback);
  if (DEBUG) {
    m_internalLogger.fine(""String_Node_Str"");
  }
  sharedLogConfig.addSubscriber(this);
}",0.97757331799885
134836,"/** 
 * This method validates the XML files.
 * @param filename name with absolute path of the XML file to validate.
 */
protected void XMLValidate(Vector filename){
  System.out.println(""String_Node_Str"" + this.XMLPath);
  for (int i=0; i < filename.size(); i++) {
    File file=new File((String)filename.get(i));
    if (file.length() != 0) {
      if (verbose) {
        System.out.print(""String_Node_Str"" + (String)filename.get(i));
      }
      String targetNamespace;
      targetNamespace=((xsd_targetns.toString()).replace(',',' ')).replace('=',' ').replace('{',' ').replace('}',' ');
      CDBChecker.errorFlag=false;
      try {
        validateFileEncoding((String)filename.get(i));
        SP.reset();
        SP.setFeature(""String_Node_Str"",true);
        SP.setFeature(""String_Node_Str"",true);
        SP.setFeature(""String_Node_Str"",false);
        SP.setFeature(""String_Node_Str"",true);
        SP.setErrorHandler(new CDBErrorHandler());
        SP.setProperty(""String_Node_Str"",targetNamespace);
        SP.parse((String)filename.get(i));
        if (verbose && !errorFlag)         System.out.println(""String_Node_Str"");
      }
 catch (      SAXException e) {
        e.getMessage();
      }
catch (      IOException e) {
        System.out.println(""String_Node_Str"" + (String)filename.get(i) + ""String_Node_Str"");
      }
    }
 else {
      System.out.print((String)filename.get(i) + ""String_Node_Str"");
    }
  }
}","/** 
 * This method validates the XML files.
 * @param filename name with absolute path of the XML file to validate.
 */
protected void XMLValidate(Vector filename){
  System.out.println(""String_Node_Str"" + this.XMLPath);
  for (int i=0; i < filename.size(); i++) {
    File file=new File((String)filename.get(i));
    if (file.length() != 0) {
      if (verbose) {
        System.out.print(""String_Node_Str"" + (String)filename.get(i));
      }
      String targetNamespace;
      targetNamespace=((xsd_targetns.toString()).replace(',',' ')).replace('=',' ').replace('{',' ').replace('}',' ');
      CDBChecker.errorFlag=false;
      try {
        validateFileEncoding((String)filename.get(i));
        SP.reset();
        SP.setFeature(""String_Node_Str"",true);
        SP.setFeature(""String_Node_Str"",true);
        SP.setFeature(""String_Node_Str"",true);
        SP.setFeature(""String_Node_Str"",false);
        SP.setFeature(""String_Node_Str"",true);
        SP.setErrorHandler(new CDBErrorHandler());
        SP.setProperty(""String_Node_Str"",targetNamespace);
        SP.parse((String)filename.get(i));
        if (verbose && !errorFlag)         System.out.println(""String_Node_Str"");
      }
 catch (      SAXException e) {
        e.getMessage();
      }
catch (      IOException e) {
        System.out.println(""String_Node_Str"" + (String)filename.get(i) + ""String_Node_Str"");
      }
    }
 else {
      System.out.print((String)filename.get(i) + ""String_Node_Str"");
    }
  }
}",0.9838985954093868
134837,"/** 
 * Returns a reference to a new CORBA Any. Int Java the only way to do  this is through the ORB itself (i.e., the create_any method). <p> The notification channel module provides a convenience class for dealing with CORBA Anys, see   {@link @see alma.acs.nc.AnyAide}.
 * @return org.omg.CORBA.Any
 */
public org.omg.CORBA.Any getAny();","/** 
 * Returns a reference to a new CORBA Any. Int Java the only way to do  this is through the ORB itself (i.e., the create_any method). <p> The notification channel module provides a convenience class for dealing with CORBA Anys,  see   {@link alma.acs.nc.AnyAide}.
 * @return org.omg.CORBA.Any
 */
public org.omg.CORBA.Any getAny();",0.9911242603550297
134838,"/** 
 * This method finds files in ""Components"" and ""Containers""  directories and sub-directories. It then extracts ""implLang""  properties, and compares. Error messages are displayed if Components.xml's implLang and Containers.xml's implLang don't match. Returns 'true' if error is found, false otherwise added by panta@naoj 2009/10/05 
 */
protected boolean checkImplLangMatch(File compFolder,File contFolder){
  CDBChecker cdbchecker=new CDBChecker();
  File[] files=compFolder.listFiles();
  search:   for (int x=0; x < files.length; x++) {
    if (foundErr) {
      break search;
    }
    if (files[x].isDirectory()) {
      if (!files[x].getName().equals(""String_Node_Str"")) {
        checkImplLangMatch(files[x],contFolder);
      }
    }
 else {
      String ext=""String_Node_Str"";
      int iExt=files[x].getName().lastIndexOf(""String_Node_Str"");
      ext=files[x].getName().substring(iExt + 1,files[x].getName().length());
      if (!ext.equals(""String_Node_Str"")) {
        continue;
      }
      DocumentBuilderFactory dbfComp=DocumentBuilderFactory.newInstance();
      DocumentBuilder dbComp=null;
      try {
        dbComp=dbfComp.newDocumentBuilder();
      }
 catch (      ParserConfigurationException e) {
        e.printStackTrace();
      }
      Document docComp=null;
      try {
        docComp=dbComp.parse(files[x]);
      }
 catch (      SAXException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
      docComp.getDocumentElement().normalize();
      NodeList compNodeList=docComp.getElementsByTagName(""String_Node_Str"");
      if (compNodeList.getLength() == 0) {
        compNodeList=docComp.getElementsByTagName(""String_Node_Str"");
        if (compNodeList.getLength() == 0) {
          continue;
        }
      }
      for (int j=0; j < compNodeList.getLength(); j++) {
        Element elm=(Element)compNodeList.item(j);
        String compName=null;
        String implLang=null;
        String tempContainersFolder=null;
        compName=elm.getAttribute(""String_Node_Str"");
        implLang=elm.getAttribute(""String_Node_Str"");
        if (!compName.equals(""String_Node_Str"") && !files[x].getName().equals(""String_Node_Str"")) {
          if (!(compName + ""String_Node_Str"").equals(files[x].getName())) {
            System.out.print(""String_Node_Str"");
            System.out.print(""String_Node_Str"" + files[x]);
            System.out.print(""String_Node_Str"" + compName + ""String_Node_Str"");
            System.out.print(""String_Node_Str"" + files[x].getName() + ""String_Node_Str"");
            foundErr=true;
            break search;
          }
        }
        if (compName.equals(""String_Node_Str"")) {
          if (implLang.equals(""String_Node_Str"") || implLang.equals(""String_Node_Str"")) {
            continue;
          }
          if (elm.getAttribute(""String_Node_Str"").equals(""String_Node_Str"") || elm.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
            continue;
          }
        }
 else {
          if (implLang.equals(""String_Node_Str"")) {
            System.out.println(""String_Node_Str"" + files[x]);
            System.out.print(""String_Node_Str"" + compName);
            foundErr=true;
            break search;
          }
        }
        tempContainersFolder=containersFolder + ""String_Node_Str"" + elm.getAttribute(""String_Node_Str"");
        DocumentBuilderFactory dbfCont=DocumentBuilderFactory.newInstance();
        DocumentBuilder dbCont=null;
        try {
          dbCont=dbfCont.newDocumentBuilder();
        }
 catch (        ParserConfigurationException e) {
          e.printStackTrace();
        }
        Document docCont=null;
        try {
          File contFile=new File(tempContainersFolder + ""String_Node_Str"" + new File(tempContainersFolder).getName()+ ""String_Node_Str"");
          if (contFile.exists()) {
            docCont=dbCont.parse(contFile);
            docCont.getDocumentElement().normalize();
            NodeList contNodeList=docCont.getElementsByTagName(""String_Node_Str"");
            for (int k=0; k < contNodeList.getLength(); k++) {
              Element elmCont=(Element)contNodeList.item(k);
              if (implLang.equals(elmCont.getAttribute(""String_Node_Str""))) {
              }
 else {
                System.out.println(""String_Node_Str"" + files[x]);
                System.out.print(""String_Node_Str"" + compName + ""String_Node_Str"");
                foundErr=true;
                break search;
              }
            }
          }
 else {
            System.out.print(""String_Node_Str"" + files[x]);
            System.out.print(""String_Node_Str"" + new File(tempContainersFolder));
            System.out.println(""String_Node_Str"");
            foundErr=true;
            break search;
          }
        }
 catch (        SAXException e) {
          e.printStackTrace();
        }
catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return foundErr;
}","/** 
 * This method finds files in ""Components"" and ""Containers""  directories and sub-directories. It then extracts ""implLang""  properties, and compares. Error messages are displayed if Components.xml's implLang and Containers.xml's implLang don't match. Returns 'true' if error is found, false otherwise added by panta@naoj 2009/10/05 
 */
protected boolean checkImplLangMatch(File compFolder,File contFolder){
  CDBChecker cdbchecker=new CDBChecker();
  File[] files=compFolder.listFiles();
  search:   for (int x=0; x < files.length; x++) {
    if (foundErr) {
      break search;
    }
    if (files[x].isDirectory()) {
      if (!files[x].getName().equals(""String_Node_Str"")) {
        checkImplLangMatch(files[x],contFolder);
      }
    }
 else {
      String ext=""String_Node_Str"";
      int iExt=files[x].getName().lastIndexOf(""String_Node_Str"");
      ext=files[x].getName().substring(iExt + 1,files[x].getName().length());
      if (!ext.equals(""String_Node_Str"")) {
        continue;
      }
      DocumentBuilderFactory dbfComp=DocumentBuilderFactory.newInstance();
      DocumentBuilder dbComp=null;
      try {
        dbComp=dbfComp.newDocumentBuilder();
      }
 catch (      ParserConfigurationException e) {
        e.printStackTrace();
      }
      Document docComp=null;
      try {
        docComp=dbComp.parse(files[x]);
      }
 catch (      SAXException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
      docComp.getDocumentElement().normalize();
      NodeList compNodeList=docComp.getElementsByTagName(""String_Node_Str"");
      if (compNodeList.getLength() == 1) {
        String compName=((Element)compNodeList.item(0)).getAttribute(""String_Node_Str"");
        if (!compName.equals(""String_Node_Str"") && !files[x].getName().equals(""String_Node_Str"")) {
          if (!(compName + ""String_Node_Str"").equals(files[x].getName())) {
            System.out.print(""String_Node_Str"");
            System.out.print(""String_Node_Str"" + files[x]);
            System.out.print(""String_Node_Str"" + compName + ""String_Node_Str"");
            System.out.print(""String_Node_Str"" + files[x].getName() + ""String_Node_Str"");
            foundErr=true;
            break search;
          }
        }
      }
      if (compNodeList.getLength() == 0) {
        compNodeList=docComp.getElementsByTagName(""String_Node_Str"");
        if (compNodeList.getLength() == 0) {
          continue;
        }
      }
      for (int j=0; j < compNodeList.getLength(); j++) {
        Element elm=(Element)compNodeList.item(j);
        String compName=null;
        String implLang=null;
        String tempContainersFolder=null;
        compName=elm.getAttribute(""String_Node_Str"");
        implLang=elm.getAttribute(""String_Node_Str"");
        if (compName.equals(""String_Node_Str"")) {
          if (implLang.equals(""String_Node_Str"") || implLang.equals(""String_Node_Str"")) {
            continue;
          }
          if (elm.getAttribute(""String_Node_Str"").equals(""String_Node_Str"") || elm.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
            continue;
          }
        }
 else {
          if (implLang.equals(""String_Node_Str"")) {
            System.out.println(""String_Node_Str"" + files[x]);
            System.out.print(""String_Node_Str"" + compName);
            foundErr=true;
            break search;
          }
        }
        tempContainersFolder=containersFolder + ""String_Node_Str"" + elm.getAttribute(""String_Node_Str"");
        DocumentBuilderFactory dbfCont=DocumentBuilderFactory.newInstance();
        DocumentBuilder dbCont=null;
        try {
          dbCont=dbfCont.newDocumentBuilder();
        }
 catch (        ParserConfigurationException e) {
          e.printStackTrace();
        }
        Document docCont=null;
        try {
          File contFile=new File(tempContainersFolder + ""String_Node_Str"" + new File(tempContainersFolder).getName()+ ""String_Node_Str"");
          if (contFile.exists()) {
            docCont=dbCont.parse(contFile);
            docCont.getDocumentElement().normalize();
            NodeList contNodeList=docCont.getElementsByTagName(""String_Node_Str"");
            for (int k=0; k < contNodeList.getLength(); k++) {
              Element elmCont=(Element)contNodeList.item(k);
              if (implLang.equals(elmCont.getAttribute(""String_Node_Str""))) {
              }
 else {
                System.out.println(""String_Node_Str"" + files[x]);
                System.out.print(""String_Node_Str"" + compName + ""String_Node_Str"");
                foundErr=true;
                break search;
              }
            }
          }
 else {
            System.out.print(""String_Node_Str"" + files[x]);
            System.out.print(""String_Node_Str"" + new File(tempContainersFolder));
            System.out.println(""String_Node_Str"");
            foundErr=true;
            break search;
          }
        }
 catch (        SAXException e) {
          e.printStackTrace();
        }
catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return foundErr;
}",0.8816101026045777
134839,"/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
public void createPartControl(Composite parent){
  viewer=new TreeViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
  drillDownAdapter=new DrillDownAdapter(viewer);
  vcp=new ViewContentProvider();
  viewer.setContentProvider(vcp);
  viewer.setLabelProvider(new ViewLabelProvider());
  viewer.setSorter(new NameSorter());
  vs=getViewSite();
  viewer.setInput(getViewSite());
  PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(),""String_Node_Str"");
  makeActions();
  hookContextMenu();
  hookDoubleClickAction();
  contributeToActionBars();
  if (Application.isMonitoring()) {
    startMonitoringAction.setEnabled(false);
    startMonitoring();
  }
}","/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
public void createPartControl(Composite parent){
  viewer=new TreeViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
  drillDownAdapter=new DrillDownAdapter(viewer);
  vcp=new ViewContentProvider();
  viewer.setContentProvider(vcp);
  viewer.setLabelProvider(new ViewLabelProvider());
  viewer.setSorter(new NameSorter());
  viewer.setInput(getViewSite());
  PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(),""String_Node_Str"");
  makeActions();
  hookContextMenu();
  hookDoubleClickAction();
  contributeToActionBars();
  if (Application.isMonitoring()) {
    startMonitoringAction.setEnabled(false);
    startMonitoring();
  }
}",0.9867724867724867
134840,"private void parseEventAny(DynAny dynAny2,String path){
  if (monitor != null && monitor.isCanceled()) {
    cancelFlag=true;
    return;
  }
  DynAny da=dynAny2;
  int tcKind=da.type().kind().value();
  ParsedAnyData entry=new ParsedAnyData(path,""String_Node_Str"",""String_Node_Str"");
  try {
switch (tcKind) {
case TCKind._tk_short:
      entry.setType(""String_Node_Str"");
    entry.setValue(String.valueOf(da.get_short()));
  pdlist.add(entry);
break;
case TCKind._tk_long:
entry.setType(""String_Node_Str"");
entry.setValue(String.valueOf(da.get_long()));
pdlist.add(entry);
break;
case TCKind._tk_longlong:
entry.setType(""String_Node_Str"");
entry.setValue(String.valueOf(da.get_longlong()));
pdlist.add(entry);
break;
case TCKind._tk_ulonglong:
entry.setType(""String_Node_Str"");
entry.setValue(String.valueOf(da.get_ulonglong()));
pdlist.add(entry);
break;
case TCKind._tk_string:
entry.setType(""String_Node_Str"");
entry.setValue(da.get_string());
pdlist.add(entry);
break;
case TCKind._tk_boolean:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.get_boolean());
pdlist.add(entry);
break;
case TCKind._tk_float:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.get_float());
pdlist.add(entry);
break;
case TCKind._tk_double:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.get_double());
pdlist.add(entry);
break;
case TCKind._tk_enum:
entry.setType(""String_Node_Str"");
entry.setValue(((DynEnum)da).get_as_string());
pdlist.add(entry);
break;
case TCKind._tk_array:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.component_count());
pdlist.add(entry);
int numDisplayElements=Math.min(da.component_count(),5);
int elementType=da.type().content_type().kind().value();
switch (elementType) {
case TCKind._tk_double:
for (int j=0; j < numDisplayElements; j++) {
String dname=path + ""String_Node_Str"" + j+ ""String_Node_Str"";
double value=da.current_component().get_double();
pdlist.add(new ParsedAnyData(dname,""String_Node_Str"",(""String_Node_Str"" + value)));
da.next();
}
break;
default :
pdlist.add(new ParsedAnyData(path,""String_Node_Str"" + elementType,""String_Node_Str""));
}
break;
case TCKind._tk_struct:
case TCKind._tk_except:
DynStruct ds=(DynStruct)da;
String structName=ds.type().name();
if (DEBUG) System.out.println(""String_Node_Str"" + structName);
entry.setType(""String_Node_Str"");
if (path.equals(""String_Node_Str"")) {
entry.setName(structName);
}
 else entry.setName(path + ""String_Node_Str"" + structName);
String members=""String_Node_Str"";
for (int i=0; i < ds.component_count(); i++) {
members+=ds.current_member_name() + ((i == ds.component_count() - 1) ? ""String_Node_Str"" : ""String_Node_Str"");
ds.next();
}
entry.setValue(members);
pdlist.add(entry);
ds.rewind();
for (int i=0; i < ds.component_count(); i++) {
String dname=ds.current_member_name();
if (DEBUG) System.out.println(""String_Node_Str"" + dname + ""String_Node_Str""+ ds.current_component().type().kind().value());
parseEventAny(ds.current_component(),dname);
ds.next();
}
if (DEBUG) {
NameValuePair[] nvp=ds.get_members();
for (int i=0; i < nvp.length; i++) {
System.out.println(nvp[i].id + ""String_Node_Str"" + nvp[i].value);
}
}
break;
case TCKind._tk_sequence:
DynSequence dsq=(DynSequence)da;
String seqName=path + dsq.type().name();
entry.setType(""String_Node_Str"" + seqName);
entry.setValue(""String_Node_Str"");
default :
entry.setType(da.type().kind().toString());
entry.setValue(""String_Node_Str"");
pdlist.add(entry);
break;
}
}
 catch (TypeMismatch e) {
e.printStackTrace();
}
catch (InvalidValue e) {
e.printStackTrace();
}
catch (BadKind e) {
e.printStackTrace();
}
return;
}","private void parseEventAny(DynAny dynAny2,String path){
  if (monitor != null && monitor.isCanceled()) {
    cancelFlag=true;
    return;
  }
  DynAny da=dynAny2;
  int tcKind=da.type().kind().value();
  ParsedAnyData entry=new ParsedAnyData(path,""String_Node_Str"",""String_Node_Str"");
  try {
switch (tcKind) {
case TCKind._tk_short:
      entry.setType(""String_Node_Str"");
    entry.setValue(String.valueOf(da.get_short()));
  pdlist.add(entry);
break;
case TCKind._tk_long:
entry.setType(""String_Node_Str"");
entry.setValue(String.valueOf(da.get_long()));
pdlist.add(entry);
break;
case TCKind._tk_longlong:
entry.setType(""String_Node_Str"");
entry.setValue(String.valueOf(da.get_longlong()));
pdlist.add(entry);
break;
case TCKind._tk_ulonglong:
entry.setType(""String_Node_Str"");
entry.setValue(String.valueOf(da.get_ulonglong()));
pdlist.add(entry);
break;
case TCKind._tk_string:
entry.setType(""String_Node_Str"");
entry.setValue(da.get_string());
pdlist.add(entry);
break;
case TCKind._tk_boolean:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.get_boolean());
pdlist.add(entry);
break;
case TCKind._tk_float:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.get_float());
pdlist.add(entry);
break;
case TCKind._tk_double:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.get_double());
pdlist.add(entry);
break;
case TCKind._tk_enum:
entry.setType(""String_Node_Str"");
entry.setValue(((DynEnum)da).get_as_string());
pdlist.add(entry);
break;
case TCKind._tk_array:
entry.setType(""String_Node_Str"");
entry.setValue(""String_Node_Str"" + da.component_count());
pdlist.add(entry);
int numDisplayElements=Math.min(da.component_count(),5);
int elementType=da.type().content_type().kind().value();
switch (elementType) {
case TCKind._tk_double:
for (int j=0; j < numDisplayElements; j++) {
String dname=path + ""String_Node_Str"" + j+ ""String_Node_Str"";
double value=da.current_component().get_double();
pdlist.add(new ParsedAnyData(dname,""String_Node_Str"",(""String_Node_Str"" + value)));
da.next();
}
break;
default :
pdlist.add(new ParsedAnyData(path,""String_Node_Str"" + elementType,""String_Node_Str""));
}
break;
case TCKind._tk_struct:
case TCKind._tk_except:
DynStruct ds=(DynStruct)da;
String structName=ds.type().name();
if (DEBUG) System.out.println(""String_Node_Str"" + structName);
entry.setType(""String_Node_Str"");
if (path.equals(""String_Node_Str"")) {
entry.setName(structName);
}
 else entry.setName(path + ""String_Node_Str"" + structName);
StringBuilder members=new StringBuilder(""String_Node_Str"");
for (int i=0; i < ds.component_count(); i++) {
members.append(ds.current_member_name() + ((i == ds.component_count() - 1) ? ""String_Node_Str"" : ""String_Node_Str""));
ds.next();
}
entry.setValue(members.toString());
pdlist.add(entry);
ds.rewind();
for (int i=0; i < ds.component_count(); i++) {
String dname=ds.current_member_name();
if (DEBUG) System.out.println(""String_Node_Str"" + dname + ""String_Node_Str""+ ds.current_component().type().kind().value());
parseEventAny(ds.current_component(),dname);
ds.next();
}
if (DEBUG) {
NameValuePair[] nvp=ds.get_members();
for (int i=0; i < nvp.length; i++) {
System.out.println(nvp[i].id + ""String_Node_Str"" + nvp[i].value);
}
}
break;
case TCKind._tk_sequence:
DynSequence dsq=(DynSequence)da;
String seqName=path + dsq.type().name();
entry.setType(""String_Node_Str"" + seqName);
entry.setValue(""String_Node_Str"");
default :
entry.setType(da.type().kind().toString());
entry.setValue(""String_Node_Str"");
pdlist.add(entry);
break;
}
}
 catch (TypeMismatch e) {
e.printStackTrace();
}
catch (InvalidValue e) {
e.printStackTrace();
}
catch (BadKind e) {
e.printStackTrace();
}
return;
}",0.988852637302882
134841,"public ParsedAnyData[] parsePttDataEvent(){
  pde=new pttDataEvent(new actuatorSpace(new double[2952]),new actuatorSpace(new double[2952]),25,32L);
  try {
    se=seCreator.createEvent(pde);
  }
 catch (  AcsJException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  eventName=se.header.fixed_header.event_type.type_name;
  eventAny=se.filterable_data[0].value;
  StopWatch sw=new StopWatch(logger);
  parser=new DynAnyParser(eventAny,eventName);
  ParsedAnyData[] pResults=parser.getParsedResults();
  sw.logLapTime(""String_Node_Str"");
  return pResults;
}","public ParsedAnyData[] parsePttDataEvent(){
  pde=new pttDataEvent(new actuatorSpace(new double[2952]),new actuatorSpace(new double[2952]),25,32L);
  try {
    se=seCreator.createEvent(pde);
  }
 catch (  AcsJException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  eventName=se.header.fixed_header.event_type.type_name;
  eventAny=se.filterable_data[0].value;
  StopWatch sw=new StopWatch(logger);
  parser=new DynAnyParser(eventAny,eventName);
  ParsedAnyData[] pResults=parser.getParsedResults(null);
  sw.logLapTime(""String_Node_Str"");
  return pResults;
}",0.9965277777777778
134842,"public static ParsedAnyData[] parsePttDataEvent(){
  pttDataEvent pde=new pttDataEvent(new actuatorSpace(new double[2952]),new actuatorSpace(new double[2952]),25,32L);
  StructuredEvent se=null;
  try {
    se=seCreator.createEvent(pde);
  }
 catch (  AcsJException e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
  }
  String eventName=se.header.fixed_header.event_type.type_name;
  Any eventAny=se.filterable_data[0].value;
  StopWatch sw=new StopWatch(logger);
  DynAnyParser parser=new DynAnyParser(eventAny,eventName);
  ParsedAnyData[] pResults=parser.getParsedResults();
  sw.logLapTime(""String_Node_Str"");
  return pResults;
}","public static ParsedAnyData[] parsePttDataEvent(){
  pttDataEvent pde=new pttDataEvent(new actuatorSpace(new double[2952]),new actuatorSpace(new double[2952]),25,32L);
  StructuredEvent se=null;
  String eventName=null;
  Any eventAny=null;
  try {
    se=seCreator.createEvent(pde);
    eventName=se.header.fixed_header.event_type.type_name;
    eventAny=se.filterable_data[0].value;
  }
 catch (  AcsJException e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
  }
  StopWatch sw=new StopWatch(logger);
  DynAnyParser parser=new DynAnyParser(eventAny,eventName);
  ParsedAnyData[] pResults=parser.getParsedResults(null);
  sw.logLapTime(""String_Node_Str"");
  return pResults;
}",0.8096987509184423
134843,"private ParsedAnyData[] createModel(){
  ParsedAnyData[] elements=new ParsedAnyData[10];
  elements=parsePttDataEvent();
  return elements;
}","private ParsedAnyData[] createModel(){
  ParsedAnyData[] elements=parsePttDataEvent();
  return elements;
}",0.8629032258064516
134844,"/** 
 * Set a new alarm as root of the displayed chain of a reduction. <P> By setting a new root alarm, the content of the dialog is replaced by a new chain of reduction having the passed alarm as root.
 * @param rootAlarm The new alarm root of a reduction chain
 */
public void setRootAlarm(Alarm rootAlarm){
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  alarm=rootAlarm;
  refreshContent();
}","/** 
 * Set a new alarm as root of the displayed chain of a reduction. <P> By setting a new root alarm, the content of the dialog is replaced by a new chain of reduction having the passed alarm as root.
 * @param rootAlarm The new alarm root of a reduction chain
 */
public void setRootAlarm(AlarmTableEntry rootAlarm){
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  alarm=rootAlarm;
  refreshContent();
}",0.9887640449438202
134845,"/** 
 * Constructor
 * @param client The {@link CategoryClient} to get the children of the alarmto show in the table
 * @param rootAlarm The root alarm whose children appear in the table
 * @param panel The alarm panel
 */
public ReducedChainDlg(CategoryClient client,Alarm rootAlarm,CernSysPanel panel){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (panel == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  categoryClient=client;
  alarm=rootAlarm;
  this.panel=panel;
  model=new AlarmTableModel(rootPane,false);
  table=new AlarmTable(model,panel);
  initialize();
  refreshContent();
}","/** 
 * Constructor
 * @param client The {@link CategoryClient} to get the children of the alarmto show in the table
 * @param rootAlarm The root alarm whose children appear in the table
 * @param panel The alarm panel
 */
public ReducedChainDlg(CategoryClient client,AlarmTableEntry rootAlarm,CernSysPanel panel){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (panel == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  categoryClient=client;
  alarm=rootAlarm;
  this.panel=panel;
  model=new AlarmTableModel(rootPane,false);
  table=new AlarmTable(model,panel);
  initialize();
  refreshContent();
}",0.9933862433862434
134846,"/** 
 * Show the dialog with all the nodes reduced by the passed alarm
 * @param alarm The alarm whose children must be shown in a dialog
 */
private void showReductionChain(Alarm alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CategoryClient client=model.getCategoryClient();
  if (reducedDlg == null) {
    reducedDlg=new ReducedChainDlg(client,alarm,panel);
  }
 else {
    reducedDlg.setRootAlarm(alarm);
    reducedDlg.setVisible(true);
  }
}","/** 
 * Show the dialog with all the nodes reduced by the passed alarm
 * @param alarm The alarm whose children must be shown in a dialog
 */
private void showReductionChain(AlarmTableEntry alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CategoryClient client=model.getCategoryClient();
  if (reducedDlg == null) {
    reducedDlg=new ReducedChainDlg(client,alarm,panel);
  }
 else {
    reducedDlg.setRootAlarm(alarm);
    reducedDlg.setVisible(true);
  }
}",0.99
134847,"/** 
 */
public AlarmTableEntry(Alarm alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (alarm instanceof AlarmTableEntry) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.alarm=alarm;
  isNew=true;
  alarmType=AlarmGUIType.fromAlarm(this);
}","/** 
 */
public AlarmTableEntry(Alarm alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (alarm instanceof AlarmTableEntry) {
    this.alarm=((AlarmTableEntry)alarm).getEncapsulatedAlarm();
  }
 else {
    this.alarm=alarm;
  }
  isNew=true;
  alarmType=AlarmGUIType.fromAlarm(this);
}",0.8253477588871716
134848,"/** 
 * Set a new alarm as root of the displayed chain of a reduction. <P> By setting a new root alarm, the content of the dialog is replaced by a new chain of reduction having the passed alarm as root.
 * @param rootAlarm The new alarm root of a reduction chain
 */
public void setRootAlarm(Alarm rootAlarm){
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  alarm=rootAlarm;
  refreshContent();
}","/** 
 * Set a new alarm as root of the displayed chain of a reduction. <P> By setting a new root alarm, the content of the dialog is replaced by a new chain of reduction having the passed alarm as root.
 * @param rootAlarm The new alarm root of a reduction chain
 */
public void setRootAlarm(AlarmTableEntry rootAlarm){
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  alarm=rootAlarm;
  refreshContent();
}",0.9887640449438202
134849,"/** 
 * Constructor
 * @param client The {@link CategoryClient} to get the children of the alarmto show in the table
 * @param rootAlarm The root alarm whose children appear in the table
 * @param panel The alarm panel
 */
public ReducedChainDlg(CategoryClient client,Alarm rootAlarm,CernSysPanel panel){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (panel == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  categoryClient=client;
  alarm=rootAlarm;
  this.panel=panel;
  model=new AlarmTableModel(rootPane,false);
  table=new AlarmTable(model,panel);
  initialize();
  refreshContent();
}","/** 
 * Constructor
 * @param client The {@link CategoryClient} to get the children of the alarmto show in the table
 * @param rootAlarm The root alarm whose children appear in the table
 * @param panel The alarm panel
 */
public ReducedChainDlg(CategoryClient client,AlarmTableEntry rootAlarm,CernSysPanel panel){
  if (client == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (rootAlarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (panel == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  categoryClient=client;
  alarm=rootAlarm;
  this.panel=panel;
  model=new AlarmTableModel(rootPane,false);
  table=new AlarmTable(model,panel);
  initialize();
  refreshContent();
}",0.9933862433862434
134850,"/** 
 * Show the dialog with all the nodes reduced by the passed alarm
 * @param alarm The alarm whose children must be shown in a dialog
 */
private void showReductionChain(Alarm alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CategoryClient client=model.getCategoryClient();
  if (reducedDlg == null) {
    reducedDlg=new ReducedChainDlg(client,alarm,panel);
  }
 else {
    reducedDlg.setRootAlarm(alarm);
    reducedDlg.setVisible(true);
  }
}","/** 
 * Show the dialog with all the nodes reduced by the passed alarm
 * @param alarm The alarm whose children must be shown in a dialog
 */
private void showReductionChain(AlarmTableEntry alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CategoryClient client=model.getCategoryClient();
  if (reducedDlg == null) {
    reducedDlg=new ReducedChainDlg(client,alarm,panel);
  }
 else {
    reducedDlg.setRootAlarm(alarm);
    reducedDlg.setVisible(true);
  }
}",0.99
134851,"/** 
 */
public AlarmTableEntry(Alarm alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (alarm instanceof AlarmTableEntry) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.alarm=alarm;
  isNew=true;
  alarmType=AlarmGUIType.fromAlarm(this);
}","/** 
 */
public AlarmTableEntry(Alarm alarm){
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (alarm instanceof AlarmTableEntry) {
    this.alarm=((AlarmTableEntry)alarm).getEncapsulatedAlarm();
  }
 else {
    this.alarm=alarm;
  }
  isNew=true;
  alarmType=AlarmGUIType.fromAlarm(this);
}",0.8253477588871716
134852,"/** 
 * returns full expanded XML string
 */
public synchronized String internal_get_DAO(String curl,boolean precacheStage) throws CDBRecordDoesNotExistEx, CDBXMLErrorEx {
  totalDALInvocationCounter.incrementAndGet();
  if (shutdown) {
    throw new NO_RESOURCES();
  }
  try {
    if (curl.lastIndexOf('/') == curl.length() - 1)     curl=curl.substring(0,curl.length() - 1);
    String xml=getFromCache(curl);
    if (xml != null)     return xml;
    XMLHandler xmlSolver=loadRecords(curl,true);
    if (xmlSolver == null) {
      m_logger.warning(""String_Node_Str"");
      return null;
    }
    if (!precacheStage)     m_logger.log(AcsLogLevel.DEBUG,""String_Node_Str"" + curl);
    xml=xmlSolver.toString(false);
    if (!precacheStage || checkCache(true))     putToCache(curl,xml);
    return xml;
  }
 catch (  AcsJCDBXMLErrorEx e) {
    if (!precacheStage || checkCache(true))     putToCache(curl,e);
    if (!precacheStage)     m_logger.log(AcsLogLevel.NOTICE,""String_Node_Str"" + curl + ""String_Node_Str"",e);
    throw e.toCDBXMLErrorEx();
  }
catch (  AcsJCDBRecordDoesNotExistEx e) {
    if (!precacheStage || checkCache(true))     putToCache(curl,e);
    if (!precacheStage)     logRecordNotExistWithRepeatGuard(curl);
    throw e.toCDBRecordDoesNotExistEx();
  }
}","/** 
 * returns full expanded XML string
 */
public synchronized String internal_get_DAO(String curl,boolean precacheStage) throws CDBRecordDoesNotExistEx, CDBXMLErrorEx {
  totalDALInvocationCounter.incrementAndGet();
  if (shutdown) {
    throw new NO_RESOURCES();
  }
  try {
    if (curl.lastIndexOf('/') == curl.length() - 1)     curl=curl.substring(0,curl.length() - 1);
    String xml=getFromCache(curl);
    if (xml != null)     return xml;
    XMLHandler xmlSolver=loadRecords(curl,true);
    if (xmlSolver == null) {
      m_logger.warning(""String_Node_Str"");
      return null;
    }
    if (!precacheStage)     m_logger.log(AcsLogLevel.DEBUG,""String_Node_Str"" + curl);
    xml=xmlSolver.toString(false);
    if (!precacheStage || checkCache(true))     putToCache(curl,xml);
    return xml;
  }
 catch (  AcsJCDBXMLErrorEx e) {
    CDBXMLErrorEx ex=e.toCDBXMLErrorEx();
    if (!precacheStage || checkCache(true))     putToCache(curl,ex);
    if (!precacheStage)     m_logger.log(AcsLogLevel.NOTICE,""String_Node_Str"" + curl + ""String_Node_Str"",e);
    throw ex;
  }
catch (  AcsJCDBRecordDoesNotExistEx e) {
    CDBRecordDoesNotExistEx ex=e.toCDBRecordDoesNotExistEx();
    if (!precacheStage || checkCache(true))     putToCache(curl,ex);
    if (!precacheStage)     logRecordNotExistWithRepeatGuard(curl);
    throw ex;
  }
}",0.94104134762634
134853,"private LocalOnlyAcsLogger(String namespace,LogConfig testLogConfig){
  super(namespace,null,new LogConfig());
  addLoggerClass(LocalOnlyAcsLogger.class);
}","private LocalOnlyAcsLogger(String namespace,LogConfig testLogConfig){
  super(namespace,null,testLogConfig);
  addLoggerClass(LocalOnlyAcsLogger.class);
}",0.9741935483870968
134854,"/** 
 * Constructor for DefaultCORBAService.
 * @param logger The logger
 * @param args The arguments from the command line
 */
public AlarmSystemCorbaServer(AcsLogger logger,String[] args) throws Exception {
  if (logger == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      if (laserComponent != null) {
        ((AlarmServiceOperations)laserComponent).shutdown();
      }
 else       if (acsComponent != null) {
        ((AlarmServiceOperations)acsComponent).shutdown();
      }
 else {
        shutdown();
      }
    }
  }
,""String_Node_Str""));
  this.m_logger=logger;
  internalInitialize(args);
  boolean alarmType=true;
  try {
    alarmType=getAlarmSystemType();
  }
 catch (  Throwable t) {
  }
  org.omg.CORBA.Object alarmObject;
  byte[] id=alma.alarmsystem.AlarmServiceName.value.getBytes();
  if (alarmType) {
    laserComponent=null;
    logger.log(AcsLogLevel.INFO,""String_Node_Str"");
    acsComponent=new AcsAlarmSystem(this);
    asPOA.activate_object_with_id(id,acsComponent);
    alarmObject=asPOA.servant_to_reference(acsComponent);
  }
 else {
    acsComponent=null;
    laserComponent=instantiateCernAS();
    asPOA.activate_object_with_id(id,acsComponent);
    alarmObject=asPOA.servant_to_reference(laserComponent);
  }
  registerToNamingService(alarmObject);
  new Thread(this,""String_Node_Str"").start();
  System.out.println(""String_Node_Str"");
}","/** 
 * Constructor for DefaultCORBAService.
 * @param logger The logger
 * @param args The arguments from the command line
 */
public AlarmSystemCorbaServer(AcsLogger logger,String[] args) throws Exception {
  if (logger == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      if (laserComponent != null) {
        ((AlarmServiceOperations)laserComponent).shutdown();
      }
 else       if (acsComponent != null) {
        ((AlarmServiceOperations)acsComponent).shutdown();
      }
 else {
        shutdown();
      }
    }
  }
,""String_Node_Str""));
  this.m_logger=logger;
  internalInitialize(args);
  boolean alarmType=true;
  try {
    alarmType=getAlarmSystemType();
  }
 catch (  Throwable t) {
  }
  org.omg.CORBA.Object alarmObject;
  byte[] id=alma.alarmsystem.AlarmServiceName.value.getBytes();
  if (alarmType) {
    laserComponent=null;
    logger.log(AcsLogLevel.INFO,""String_Node_Str"");
    acsComponent=new AcsAlarmSystem(this);
    asPOA.activate_object_with_id(id,acsComponent);
    alarmObject=asPOA.servant_to_reference(acsComponent);
  }
 else {
    acsComponent=null;
    logger.log(AcsLogLevel.INFO,""String_Node_Str"");
    laserComponent=instantiateCernAS();
    asPOA.activate_object_with_id(id,laserComponent);
    alarmObject=asPOA.servant_to_reference(laserComponent);
  }
  registerToNamingService(alarmObject);
  new Thread(this,""String_Node_Str"").start();
  System.out.println(""String_Node_Str"");
}",0.9801980198019802
134855,"/** 
 * Will attempt to log into the manager. If the manager reference is not available, will enter a loop and keep trying. If login fails on an available manager, will throw a AcsJContainerServicesEx.
 * @throws AcsJContainerServicesEx
 */
protected void loginToManager() throws AcsJContainerEx {
  Container thisContainer=_this(m_acsCorba.getORB());
  m_managerProxy.loginToManager(thisContainer,true);
}","/** 
 * Will attempt to log into the manager. If the manager reference is not available, will enter a loop and keep trying. If login fails on an available manager, will throw a AcsJContainerServicesEx.
 * @throws AcsJContainerServicesEx
 */
protected void loginToManager() throws AcsJContainerEx {
  m_managerProxy.loginToManager(m_acsCorba.getContainerCorbaRef(this),true);
}",0.8260869565217391
134856,"private void initPOAForContainer() throws AcsJContainerEx {
  if (m_containerPOA != null) {
    return;
  }
  Policy[] contPolicies=null;
  try {
    contPolicies=new Policy[4];
    contPolicies[0]=m_rootPOA.create_id_assignment_policy(IdAssignmentPolicyValue.USER_ID);
    contPolicies[1]=m_rootPOA.create_lifespan_policy(LifespanPolicyValue.PERSISTENT);
    contPolicies[2]=m_rootPOA.create_request_processing_policy(RequestProcessingPolicyValue.USE_ACTIVE_OBJECT_MAP_ONLY);
    contPolicies[3]=m_rootPOA.create_servant_retention_policy(ServantRetentionPolicyValue.RETAIN);
    m_containerPOA=m_rootPOA.create_POA(""String_Node_Str"",sharedPoaManager,contPolicies);
    if (m_containerPOA == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    m_logger.finest(""String_Node_Str"");
  }
 catch (  Throwable thr) {
    AcsJContainerEx ex=new AcsJContainerEx(thr);
    ex.setContextInfo(""String_Node_Str"");
    throw ex;
  }
 finally {
    if (contPolicies != null) {
      for (int polInd=0; polInd < contPolicies.length; polInd++) {
        contPolicies[polInd].destroy();
      }
    }
  }
}","private void initPOAForContainer() throws AcsJContainerEx {
  if (m_containerPOA != null) {
    return;
  }
  Policy[] contPolicies=null;
  try {
    contPolicies=new Policy[4];
    contPolicies[0]=m_rootPOA.create_id_assignment_policy(IdAssignmentPolicyValue.USER_ID);
    contPolicies[1]=m_rootPOA.create_lifespan_policy(LifespanPolicyValue.PERSISTENT);
    contPolicies[2]=m_rootPOA.create_request_processing_policy(RequestProcessingPolicyValue.USE_ACTIVE_OBJECT_MAP_ONLY);
    contPolicies[3]=m_rootPOA.create_servant_retention_policy(ServantRetentionPolicyValue.RETAIN);
    m_containerPOA=m_rootPOA.create_POA(""String_Node_Str"",sharedPoaManager,contPolicies);
    if (m_containerPOA == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    m_logger.finest(""String_Node_Str"");
  }
 catch (  Throwable thr) {
    AcsJContainerEx ex=new AcsJContainerEx(thr);
    ex.setContextInfo(""String_Node_Str"");
    throw ex;
  }
 finally {
    if (contPolicies != null) {
      for (      Policy policy : contPolicies) {
        if (policy != null) {
          policy.destroy();
        }
      }
    }
  }
}",0.9301700984780662
134857,"void printTwikiByFile(String fileName,List<Cvs2clXmlEntry> entries){
  if (entries == null || entries.size() < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Cvs2clXmlEntry firstEntry=entries.get(0);
  Cvs2clXmlEntry lastEntry=entries.get(entries.size() - 1);
  if (headingInserter != null) {
    headingInserter.processRecord(firstEntry);
  }
  String output=lastEntry.getFiles().get(0).getCvsstate().equals(""String_Node_Str"") ? ""String_Node_Str"" + fileName + ""String_Node_Str"" : fileName;
  output+=LINE_SEPARATOR;
  for (  Cvs2clXmlEntry entry : entries) {
    output+=getWikiIndentBullet1() + dateFormat.format(entry.getDate()) + ""String_Node_Str""+ entry.getAuthor()+ ""String_Node_Str""+ LINE_SEPARATOR;
    output+=getWikiIndentBullet1_subseqLines() + formatMessage(getWikiIndentBullet1_subseqLines(),entry.getMessage()) + LINE_SEPARATOR;
    System.out.println(output);
  }
}","void printTwikiByFile(String fileName,List<Cvs2clXmlEntry> entries){
  if (entries == null || entries.size() < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Cvs2clXmlEntry firstEntry=entries.get(0);
  Cvs2clXmlEntry lastEntry=entries.get(entries.size() - 1);
  if (headingInserter != null) {
    headingInserter.processRecord(firstEntry);
  }
  String output=lastEntry.getFiles().get(0).getCvsstate().equals(""String_Node_Str"") ? ""String_Node_Str"" + fileName + ""String_Node_Str"" : fileName;
  output+=LINE_SEPARATOR;
  for (  Cvs2clXmlEntry entry : entries) {
    output+=getWikiIndentBullet1() + dateFormat.format(entry.getDate()) + ""String_Node_Str""+ entry.getAuthor()+ ""String_Node_Str""+ LINE_SEPARATOR;
    output+=getWikiIndentBullet1_subseqLines() + formatMessage(getWikiIndentBullet1_subseqLines(),entry.getMessage()) + LINE_SEPARATOR;
  }
  System.out.println(output);
}",0.9966740576496674
134858,"@Override public void reconnect(EventChannelFactory ecf){
  if (channel != null)   channel=helper.getNotificationChannel(ecf);
  try {
    if (supplierAdmin == null)     supplierAdmin=channel.get_supplieradmin(supplierAdminID.value);
    if (proxyConsumer == null)     proxyConsumer=StructuredProxyPushConsumerHelper.narrow(supplierAdmin.get_proxy_consumer(cp_ih.value));
    if (proxyConsumer == null)     throw new NullPointerException(""String_Node_Str"");
  }
 catch (  AdminNotFound e) {
  }
catch (  ProxyNotFound e) {
  }
}","@Override public void reconnect(EventChannelFactory ecf){
  if (channel != null)   channel=helper.getNotificationChannel(ecf);
  try {
    if (supplierAdmin == null)     supplierAdmin=channel.get_supplieradmin(supplierAdminID.value);
    if (proxyConsumer == null)     proxyConsumer=StructuredProxyPushConsumerHelper.narrow(supplierAdmin.get_proxy_consumer(proxyID.value));
    if (proxyConsumer == null)     throw new NullPointerException(""String_Node_Str"");
  }
 catch (  AdminNotFound e) {
  }
catch (  ProxyNotFound e) {
  }
}",0.9886578449905482
134859,"/** 
 * @see #getComponent
 */
private Component getComponent(int id,URI curl,boolean activate,StatusHolder status,boolean allowServices) throws AcsJCannotGetComponentEx, AcsJNoPermissionEx {
  AcsJCannotGetComponentEx ex2=null;
  String name=extractName(curl);
  try {
    checkCURL(curl);
  }
 catch (  AcsJBadParameterEx e) {
    ex2=new AcsJCannotGetComponentEx(e);
    ex2.setCURL(name);
    throw ex2;
  }
  if (status == null) {
    AcsJNullPointerEx ex=new AcsJNullPointerEx();
    ex.setVariable(""String_Node_Str"");
    ex2=new AcsJCannotGetComponentEx(ex);
    ex2.setCURL(name);
    throw ex2;
  }
  String requestorName=null;
  if (id != 0) {
    requestorName=getRequestorName(id);
    logger.log(Level.INFO,""String_Node_Str"" + requestorName + ""String_Node_Str""+ curl+ ""String_Node_Str"");
  }
 else   logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str"");
  Component component=null;
  if (allowServices && name.equals(""String_Node_Str"")) {
    if (managerComponentReference != null)     status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
 else     status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
    component=new ServiceComponent(managerComponentReference);
  }
 else   if (allowServices && name.equals(""String_Node_Str"")) {
    if (remoteDirectoryComponentReference != null)     status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
 else     status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
    component=new ServiceComponent(remoteDirectoryComponentReference);
  }
 else   if (allowServices && !name.startsWith(CURL_URI_SCHEMA) && isServiceComponent(name)) {
    Object obj=lookup(name,null);
    if (obj != null)     status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
 else     status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
    component=new ServiceComponent(obj);
  }
 else {
    securityCheck(id,AccessRights.NONE);
    try {
      component=internalRequestComponent(id,curl,status,activate);
    }
 catch (    Throwable ce) {
      ex2=new AcsJCannotGetComponentEx(ce);
    }
  }
  if (component != null && component.getObject() != null) {
    if (requestorName != null)     logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str""+ requestorName+ ""String_Node_Str"");
 else     logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str"");
  }
 else   if (ex2 != null && status.getStatus() == ComponentStatus.COMPONENT_NOT_ACTIVATED) {
    if (requestorName != null)     logger.log(Level.INFO,""String_Node_Str"" + requestorName + ""String_Node_Str""+ curl+ ""String_Node_Str"");
 else     logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str"");
  }
 else {
    if (ex2 == null)     ex2=new AcsJCannotGetComponentEx();
    if (requestorName != null)     logger.log(Level.WARNING,""String_Node_Str"" + curl + ""String_Node_Str""+ requestorName+ ""String_Node_Str"",ex2);
 else     logger.log(Level.WARNING,""String_Node_Str"" + curl + ""String_Node_Str"",ex2);
  }
  if (ex2 != null) {
    ex2.setCURL(name);
    throw ex2;
  }
  return component;
}","/** 
 * @see #getComponent
 */
private Component getComponent(int id,URI curl,boolean activate,StatusHolder status,boolean allowServices) throws AcsJCannotGetComponentEx, AcsJNoPermissionEx {
  AcsJCannotGetComponentEx ex2=null;
  String name=extractName(curl);
  try {
    checkCURL(curl);
  }
 catch (  AcsJBadParameterEx e) {
    ex2=new AcsJCannotGetComponentEx(e);
    ex2.setCURL(name);
    throw ex2;
  }
  if (status == null) {
    AcsJNullPointerEx ex=new AcsJNullPointerEx();
    ex.setVariable(""String_Node_Str"");
    ex2=new AcsJCannotGetComponentEx(ex);
    ex2.setCURL(name);
    throw ex2;
  }
  String requestorName=null;
  if (id != 0) {
    requestorName=getRequestorName(id);
    logger.log(Level.INFO,""String_Node_Str"" + requestorName + ""String_Node_Str""+ curl+ ""String_Node_Str"");
  }
 else   logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str"");
  Component component=null;
  if (allowServices && name.equals(""String_Node_Str"")) {
    if (managerComponentReference != null)     status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
 else     status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
    component=new ServiceComponent(managerComponentReference);
  }
 else   if (allowServices && name.equals(""String_Node_Str"")) {
    if (remoteDirectoryComponentReference != null)     status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
 else     status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
    component=new ServiceComponent(remoteDirectoryComponentReference);
  }
 else   if (allowServices && !name.startsWith(CURL_URI_SCHEMA) && isServiceComponent(name)) {
    Object obj=lookup(name,null);
    if (obj != null)     status.setStatus(ComponentStatus.COMPONENT_ACTIVATED);
 else     status.setStatus(ComponentStatus.COMPONENT_DOES_NO_EXIST);
    component=new ServiceComponent(obj);
  }
 else {
    securityCheck(id,AccessRights.NONE);
    try {
      component=internalRequestComponent(id,curl,status,activate);
    }
 catch (    Throwable ce) {
      ex2=new AcsJCannotGetComponentEx(ce);
    }
  }
  if (component != null && component.getObject() != null) {
    if (requestorName != null)     logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str""+ requestorName+ ""String_Node_Str"");
 else     logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str"");
  }
 else   if (ex2 == null && status.getStatus() == ComponentStatus.COMPONENT_NOT_ACTIVATED) {
    if (requestorName != null)     logger.log(Level.INFO,""String_Node_Str"" + requestorName + ""String_Node_Str""+ curl+ ""String_Node_Str"");
 else     logger.log(Level.INFO,""String_Node_Str"" + curl + ""String_Node_Str"");
  }
 else {
    if (ex2 == null)     ex2=new AcsJCannotGetComponentEx();
    if (requestorName != null)     logger.log(Level.WARNING,""String_Node_Str"" + curl + ""String_Node_Str""+ requestorName+ ""String_Node_Str"",ex2);
 else     logger.log(Level.WARNING,""String_Node_Str"" + curl + ""String_Node_Str"",ex2);
  }
  if (ex2 != null) {
    ex2.setCURL(name);
    throw ex2;
  }
  return component;
}",0.9996711608023676
134860,"/** 
 * Load the categories from the CDB. <P> Loads all the category from the CDB and build an internal representation of category. The category is also added to all the alarms having the fault family specified in the XML. <P> All the categories derive from ROOT that is built here as default (in this way the user does ot need to add the ROOT entry in the CDB).
 * @return list of Category entries read from CDB 
 * @throws Exception In case of error reading the values from the CDB
 */
public alma.acs.alarmsystem.generated.Category[] loadCategories() throws Exception {
  if (conf == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  String xml;
  try {
    xml=conf.getConfiguration(CATEGORY_DEFINITION_PATH);
  }
 catch (  Throwable t) {
    throw new RuntimeException(""String_Node_Str"",t);
  }
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder;
  try {
    builder=factory.newDocumentBuilder();
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"",e);
  }
  StringReader stringReader=new StringReader(xml);
  InputSource inputSource=new InputSource(stringReader);
  Document doc;
  try {
    doc=builder.parse(inputSource);
    if (doc == null) {
      throw new Exception(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"" + xml,e);
  }
  NodeList docChilds=doc.getChildNodes();
  if (docChilds == null || docChilds.getLength() != 1) {
    throw new Exception(""String_Node_Str"");
  }
  Node categoriesNode=docChilds.item(0);
  Unmarshaller FF_unmarshaller=new Unmarshaller(Categories.class);
  FF_unmarshaller.setValidation(false);
  FF_unmarshaller.setWhitespacePreserve(true);
  Categories daoCategories;
  try {
    daoCategories=(Categories)FF_unmarshaller.unmarshal(categoriesNode);
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"" + CATEGORY_DEFINITION_PATH,e);
  }
  alma.acs.alarmsystem.generated.Category[] daoCategory=daoCategories.getCategory();
  if (daoCategory == null || daoCategory.length == 0) {
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"");
  }
  addRootCategory();
  for (  alma.acs.alarmsystem.generated.Category category : daoCategory) {
    cern.laser.business.definition.data.CategoryDefinition definition=new cern.laser.business.definition.data.CategoryDefinition(category.getPath(),category.getDescription());
    CategoryImpl ci=new CategoryImpl();
    ci.setAlarmIds(new HashSet());
    ci.setCategoryId(new Integer(nextCatID++));
    ci.setChildrenIds(new HashSet<Integer>());
    ci.setDescription(definition.getDescription());
    ci.setName(definition.getPath());
    ci.setPath(definition.getPath());
    ci.setAlarmIds(new HashSet());
    setParentID(ci);
    categories.put(ci.getCategoryId(),ci);
    catPathToCategory.put(ci.getPath(),ci);
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"" + ci.getName() + ""String_Node_Str""+ ci.getCategoryId());
    if (category.hasIsDefault() && category.getIsDefault() == true) {
      if (defaultCategory != null) {
        StringBuilder str=new StringBuilder(""String_Node_Str"");
        str.append(defaultCategory.getPath());
        str.append(""String_Node_Str"");
        str.append(category.getPath());
        logger.log(AcsLogLevel.WARNING,str.toString());
      }
 else {
        defaultCategory=ci;
      }
    }
    adjustParentIDs(ci.getName(),ci.getCategoryId());
    for (    alma.acs.alarmsystem.generated.Category cat : daoCategories.getCategory()) {
      String[] families=cat.getAlarms().getFaultFamily();
      for (      String faultFamily : families) {
        assignCategoryToAlarms(ci,faultFamily);
      }
    }
  }
  assignCategoryOfCoreAlarms();
  if (defaultCategory == null) {
    logger.log(AcsLogLevel.WARNING,""String_Node_Str"");
  }
 else {
    assignDefaultCategory(defaultCategory);
  }
  return daoCategory;
}","/** 
 * Load the categories from the CDB. <P> Loads all the category from the CDB and build an internal representation of category. The category is also added to all the alarms having the fault family specified in the XML. <P> All the categories derive from ROOT that is built here as default (in this way the user does ot need to add the ROOT entry in the CDB).
 * @return list of Category entries read from CDB 
 * @throws Exception In case of error reading the values from the CDB
 */
public alma.acs.alarmsystem.generated.Category[] loadCategories() throws Exception {
  if (conf == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  String xml;
  try {
    xml=conf.getConfiguration(CATEGORY_DEFINITION_PATH);
  }
 catch (  Throwable t) {
    throw new RuntimeException(""String_Node_Str"",t);
  }
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder;
  try {
    builder=factory.newDocumentBuilder();
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"",e);
  }
  StringReader stringReader=new StringReader(xml);
  InputSource inputSource=new InputSource(stringReader);
  Document doc;
  try {
    doc=builder.parse(inputSource);
    if (doc == null) {
      throw new Exception(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"" + xml,e);
  }
  NodeList docChilds=doc.getChildNodes();
  if (docChilds == null || docChilds.getLength() != 1) {
    throw new Exception(""String_Node_Str"");
  }
  Node categoriesNode=docChilds.item(0);
  Unmarshaller FF_unmarshaller=new Unmarshaller(Categories.class);
  FF_unmarshaller.setValidation(false);
  FF_unmarshaller.setWhitespacePreserve(true);
  Categories daoCategories;
  try {
    daoCategories=(Categories)FF_unmarshaller.unmarshal(categoriesNode);
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"" + CATEGORY_DEFINITION_PATH,e);
  }
  alma.acs.alarmsystem.generated.Category[] daoCategory=daoCategories.getCategory();
  if (daoCategory == null || daoCategory.length == 0) {
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"");
  }
  addRootCategory();
  for (  alma.acs.alarmsystem.generated.Category category : daoCategory) {
    cern.laser.business.definition.data.CategoryDefinition definition=new cern.laser.business.definition.data.CategoryDefinition(category.getPath(),category.getDescription());
    CategoryImpl ci=new CategoryImpl();
    ci.setAlarmIds(new HashSet());
    ci.setCategoryId(new Integer(nextCatID++));
    ci.setChildrenIds(new HashSet<Integer>());
    ci.setDescription(definition.getDescription());
    ci.setName(definition.getPath());
    ci.setPath(definition.getPath());
    ci.setAlarmIds(new HashSet());
    setParentID(ci);
    categories.put(ci.getCategoryId(),ci);
    catPathToCategory.put(ci.getPath(),ci);
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"" + ci.getName() + ""String_Node_Str""+ ci.getCategoryId());
    if (category.hasIsDefault() && category.getIsDefault() == true) {
      if (defaultCategory != null) {
        StringBuilder str=new StringBuilder(""String_Node_Str"");
        str.append(defaultCategory.getPath());
        str.append(""String_Node_Str"");
        str.append(category.getPath());
        logger.log(AcsLogLevel.WARNING,str.toString());
      }
 else {
        defaultCategory=ci;
      }
    }
    adjustParentIDs(ci.getName(),ci.getCategoryId());
    for (    alma.acs.alarmsystem.generated.Category cat : daoCategories.getCategory()) {
      if (cat.getPath().equals(ci.getPath())) {
        String[] families=cat.getAlarms().getFaultFamily();
        for (        String faultFamily : families) {
          assignCategoryToAlarms(ci,faultFamily);
        }
      }
    }
  }
  assignCategoryOfCoreAlarms();
  if (defaultCategory == null) {
    logger.log(AcsLogLevel.WARNING,""String_Node_Str"");
  }
 else {
    assignDefaultCategory(defaultCategory);
  }
  return daoCategory;
}",0.9904257999496094
134861,"/** 
 * Attempts to send <code>logRecords</code> over to the remote logging service. To not lose any log records in case of failure, they can be obtained from the returned  <code>FailedLogRecords</code> object, and should be fed back to the log record queue in order to try again later. <p> Should not be called concurrently (which can't happen since we use a single threaded executor  in <code>DispatchingLogQueue</code>). <p> Sorts all log records by timestamp before converting them for remote transmission.
 * @param logRecords
 * @return those LogRecords that failed to be sent, either because they could not be converted to Any, or because the remote logger failed.
 */
FailedLogRecords sendLogRecords(LogRecord[] logRecords){
  Arrays.sort(logRecords,timestampLogRecordComparator);
  FailedLogRecords failures=new FailedLogRecords();
  List<LogRecord> candidateLogRecords=new ArrayList<LogRecord>();
  if (useAcsLogServiceExtensions) {
    List<XmlLogRecord> remoteLogRecords=new ArrayList<XmlLogRecord>();
    for (int i=0; i < logRecords.length; i++) {
      if (i < getBufferSize()) {
        try {
          String xml=((AcsXMLLogFormatter)logFormatter).format(logRecords[i]);
          int level=AcsLogLevel.getNativeLevel(logRecords[i].getLevel()).getAcsLevel().value;
          XmlLogRecord remoteLogRecord=new XmlLogRecord(xml,(short)level);
          remoteLogRecords.add(remoteLogRecord);
          candidateLogRecords.add(logRecords[i]);
        }
 catch (        RuntimeException e) {
          failures.addSerializationFailure(logRecords[i]);
        }
      }
 else {
        failures.addSendFailure(logRecords[i]);
      }
      if (!remoteLogRecords.isEmpty()) {
        XmlLogRecord[] remoteLogRecordsArray=remoteLogRecords.toArray(new XmlLogRecord[remoteLogRecords.size()]);
        writeRecords(remoteLogRecordsArray);
      }
    }
  }
 else {
    List<Any> anyLogRecords=new ArrayList<Any>();
    for (int i=0; i < logRecords.length; i++) {
      if (i < getBufferSize()) {
        try {
          Any anyLogRecord=orb.create_any();
          anyLogRecord=logFormatter.formatAny(anyLogRecord,logRecords[i]);
          anyLogRecords.add(anyLogRecord);
          candidateLogRecords.add(logRecords[i]);
        }
 catch (        RuntimeException e) {
          failures.addSerializationFailure(logRecords[i]);
        }
      }
 else {
        failures.addSendFailure(logRecords[i]);
      }
    }
    if (!anyLogRecords.isEmpty()) {
      Any[] anyLogRecordsArray=anyLogRecords.toArray(new Any[anyLogRecords.size()]);
      try {
        writeRecords(anyLogRecordsArray);
      }
 catch (      Throwable thr) {
        failures.addSendFailures(candidateLogRecords);
      }
    }
  }
  return failures;
}","/** 
 * Attempts to send <code>logRecords</code> over to the remote logging service. To not lose any log records in case of failure, they can be obtained from the returned  <code>FailedLogRecords</code> object, and should be fed back to the log record queue in order to try again later. <p> Should not be called concurrently (which can't happen since we use a single threaded executor  in <code>DispatchingLogQueue</code>). <p> Sorts all log records by timestamp before converting them for remote transmission.
 * @param logRecords
 * @return those LogRecords that failed to be sent, either because they could not be converted to Any, or because the remote logger failed.
 */
FailedLogRecords sendLogRecords(LogRecord[] logRecords){
  Arrays.sort(logRecords,timestampLogRecordComparator);
  FailedLogRecords failures=new FailedLogRecords();
  List<LogRecord> candidateLogRecords=new ArrayList<LogRecord>();
  if (useAcsLogServiceExtensions) {
    List<XmlLogRecord> remoteLogRecords=new ArrayList<XmlLogRecord>();
    for (int i=0; i < logRecords.length; i++) {
      if (i < getBufferSize()) {
        try {
          String xml=((AcsXMLLogFormatter)logFormatter).format(logRecords[i]);
          int level=AcsLogLevel.getNativeLevel(logRecords[i].getLevel()).getAcsLevel().value;
          XmlLogRecord remoteLogRecord=new XmlLogRecord(xml,(short)level);
          remoteLogRecords.add(remoteLogRecord);
          candidateLogRecords.add(logRecords[i]);
        }
 catch (        RuntimeException e) {
          failures.addSerializationFailure(logRecords[i]);
        }
      }
 else {
        failures.addSendFailure(logRecords[i]);
      }
    }
    if (!remoteLogRecords.isEmpty()) {
      XmlLogRecord[] remoteLogRecordsArray=remoteLogRecords.toArray(new XmlLogRecord[remoteLogRecords.size()]);
      writeRecords(remoteLogRecordsArray);
    }
  }
 else {
    List<Any> anyLogRecords=new ArrayList<Any>();
    for (int i=0; i < logRecords.length; i++) {
      if (i < getBufferSize()) {
        try {
          Any anyLogRecord=orb.create_any();
          anyLogRecord=logFormatter.formatAny(anyLogRecord,logRecords[i]);
          anyLogRecords.add(anyLogRecord);
          candidateLogRecords.add(logRecords[i]);
        }
 catch (        RuntimeException e) {
          failures.addSerializationFailure(logRecords[i]);
        }
      }
 else {
        failures.addSendFailure(logRecords[i]);
      }
    }
    if (!anyLogRecords.isEmpty()) {
      Any[] anyLogRecordsArray=anyLogRecords.toArray(new Any[anyLogRecords.size()]);
      try {
        writeRecords(anyLogRecordsArray);
      }
 catch (      Throwable thr) {
        failures.addSendFailures(candidateLogRecords);
      }
    }
  }
  return failures;
}",0.9970663733039972
134862,"/** 
 * @see JTable
 */
public Component prepareRenderer(TableCellRenderer renderer,int rowIndex,int vColIndex){
  TableColumn col=getColumnModel().getColumn(vColIndex);
  if (col.getIdentifier().equals(AlarmTableColumn.ICON)) {
    if (model.isRowAlarmNew(sorter.convertRowIndexToModel(rowIndex))) {
      Alarm alarm=model.getRowAlarm(sorter.convertRowIndexToModel(rowIndex));
      return AlarmGUIType.fromAlarm(alarm).flagRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.REDUCED)) {
    AlarmTableEntry entry=model.getRowEntry(sorter.convertRowIndexToModel(rowIndex));
    if (entry.isReduced()) {
      return AlarmTable.reductionRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.HIDES_CHILDREN)) {
    AlarmTableEntry entry=model.getRowEntry(sorter.convertRowIndexToModel(rowIndex));
    if (entry.isParent()) {
      return AlarmTable.hasReducedNodesRenderer;
    }
 else {
      return emptyLbl;
    }
  }
  Component c=super.prepareRenderer(renderer,rowIndex,vColIndex);
  Alarm alarm=model.getRowAlarm(sorter.convertRowIndexToModel(rowIndex));
  colorizeCell(c,alarm);
  if (c instanceof JComponent) {
    JComponent jc=(JComponent)c;
    if (((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex) == null) {
      jc.setToolTipText(null);
    }
 else {
      jc.setToolTipText(""String_Node_Str"" + ((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex));
    }
  }
  return c;
}","/** 
 * @see JTable
 */
public Component prepareRenderer(TableCellRenderer renderer,int rowIndex,int vColIndex){
  TableColumn col=getColumnModel().getColumn(vColIndex);
  AlarmTableEntry entry=null;
  try {
    entry=model.getRowEntry(sorter.convertRowIndexToModel(rowIndex));
  }
 catch (  Throwable t) {
    entry=null;
  }
  if (entry == null) {
    return emptyLbl;
  }
  Alarm alarm=entry.getAlarm();
  if (col.getIdentifier().equals(AlarmTableColumn.ICON)) {
    if (model.isRowAlarmNew(sorter.convertRowIndexToModel(rowIndex))) {
      return AlarmGUIType.fromAlarm(alarm).flagRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.REDUCED)) {
    if (entry.isReduced()) {
      return AlarmTable.reductionRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.HIDES_CHILDREN)) {
    if (entry.isParent()) {
      return AlarmTable.hasReducedNodesRenderer;
    }
 else {
      return emptyLbl;
    }
  }
  Component c=super.prepareRenderer(renderer,rowIndex,vColIndex);
  colorizeCell(c,alarm);
  if (c instanceof JComponent) {
    JComponent jc=(JComponent)c;
    if (((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex) == null) {
      jc.setToolTipText(null);
    }
 else {
      jc.setToolTipText(""String_Node_Str"" + ((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex));
    }
  }
  return c;
}",0.8182701652089407
134863,"/** 
 * Add an entry (i.e a alarm) in the collection. <P> If there is no room available in the container, an exception is thrown: checking if there is enough room  must be done by the caller. <P>
 * @param entry The not <code>null</code> entry to add
 * @throw {@link AlarmContainerException} If the entry is already in the container
 */
public synchronized void add(AlarmTableEntry entry) throws AlarmContainerException {
  super.add(entry);
  if (!entry.isReduced()) {
    indexWithReduction.add(entry.getAlarm().getAlarmId());
  }
  hideReducedChildren(entry);
}","/** 
 * Add an entry (i.e a alarm) in the collection. <P> If there is no room available in the container, an exception is thrown: checking if there is enough room  must be done by the caller. <P>
 * @param entry The not <code>null</code> entry to add
 * @throw {@link AlarmContainerException} If the entry is already in the container
 */
public synchronized void add(AlarmTableEntry entry) throws AlarmContainerException {
  super.add(entry);
  addAlarm(entry.getAlarm());
}",0.8970163618864293
134864,"/** 
 * Replace the alarm in a row with passed one. <P> The entry to replace the alarm is given by the alarm ID of the parameter.
 * @param newAlarm The not null new alarm 
 * @throws AlarmContainerException if the entry is not in the container
 */
public synchronized void replace(Alarm newAlarm) throws AlarmContainerException {
  super.replace(newAlarm);
  int pos=indexWithReduction.indexOf(newAlarm.getAlarmId());
  if (pos >= 0) {
    String key=indexWithReduction.remove(pos);
    indexWithReduction.insertElementAt(key,0);
    if (newAlarm.getStatus().isActive()) {
      return;
    }
    showActiveChildren(newAlarm,pos);
  }
}","/** 
 * Replace the alarm in a row with passed one. <P> The entry to replace the alarm is given by the alarm ID of the parameter.
 * @param newAlarm The not null new alarm 
 * @throws AlarmContainerException if the entry is not in the container
 */
public synchronized void replace(Alarm newAlarm) throws AlarmContainerException {
  super.replace(newAlarm);
  int pos=indexWithReduction.indexOf(newAlarm.getAlarmId());
  if (pos >= 0) {
    String key=indexWithReduction.remove(pos);
    indexWithReduction.insertElementAt(key,0);
    if (newAlarm.getStatus().isActive()) {
      hideReducedChildren(newAlarm);
    }
 else {
      showActiveChildren(newAlarm,pos);
    }
  }
 else {
    addAlarm(newAlarm);
  }
}",0.9369903632320236
134865,"/** 
 * Hide the active alarms of this entry.
 * @param entry The not <code>null</code> entry to hide active children
 */
private void hideReducedChildren(AlarmTableEntry entry){
  if (entry == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (categoryClient == null) {
    return;
  }
  Alarm[] children=null;
  try {
    if (entry.getAlarm().isNodeParent()) {
      children=categoryClient.getChildren(entry.getAlarm().getAlarmId(),true);
    }
 else     if (entry.getAlarm().isMultiplicityParent()) {
      children=categoryClient.getChildren(entry.getAlarm().getAlarmId(),false);
    }
  }
 catch (  Throwable t) {
    System.err.println(""String_Node_Str"" + entry.getAlarm().getAlarmId() + ""String_Node_Str""+ t.getMessage());
    t.printStackTrace();
    children=null;
  }
  if (children != null) {
    for (    Alarm al : children) {
      indexWithReduction.remove(al.getAlarmId());
    }
  }
}","/** 
 * Hide the active alarms of this entry.
 * @param entry The not <code>null</code> entry to hide active children
 */
private void hideReducedChildren(Alarm entry){
  if (entry == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (categoryClient == null) {
    return;
  }
  Alarm[] children=null;
  try {
    if (entry.isNodeParent()) {
      children=categoryClient.getChildren(entry.getAlarmId(),true);
    }
 else     if (entry.isMultiplicityParent()) {
      children=categoryClient.getChildren(entry.getAlarmId(),false);
    }
  }
 catch (  Throwable t) {
    System.err.println(""String_Node_Str"" + entry.getAlarmId() + ""String_Node_Str""+ t.getMessage());
    t.printStackTrace();
    children=null;
  }
  if (children != null) {
    for (    Alarm al : children) {
      System.out.println(""String_Node_Str"" + al.getAlarmId());
      indexWithReduction.remove(al.getAlarmId());
    }
  }
}",0.930960086299892
134866,"/** 
 * @see JTable
 */
public Component prepareRenderer(TableCellRenderer renderer,int rowIndex,int vColIndex){
  TableColumn col=getColumnModel().getColumn(vColIndex);
  if (col.getIdentifier().equals(AlarmTableColumn.ICON)) {
    if (model.isRowAlarmNew(sorter.convertRowIndexToModel(rowIndex))) {
      Alarm alarm=model.getRowAlarm(sorter.convertRowIndexToModel(rowIndex));
      return AlarmGUIType.fromAlarm(alarm).flagRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.REDUCED)) {
    AlarmTableEntry entry=model.getRowEntry(sorter.convertRowIndexToModel(rowIndex));
    if (entry.isReduced()) {
      return AlarmTable.reductionRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.HIDES_CHILDREN)) {
    AlarmTableEntry entry=model.getRowEntry(sorter.convertRowIndexToModel(rowIndex));
    if (entry.isParent()) {
      return AlarmTable.hasReducedNodesRenderer;
    }
 else {
      return emptyLbl;
    }
  }
  Component c=super.prepareRenderer(renderer,rowIndex,vColIndex);
  Alarm alarm=model.getRowAlarm(sorter.convertRowIndexToModel(rowIndex));
  colorizeCell(c,alarm);
  if (c instanceof JComponent) {
    JComponent jc=(JComponent)c;
    if (((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex) == null) {
      jc.setToolTipText(null);
    }
 else {
      jc.setToolTipText(""String_Node_Str"" + ((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex));
    }
  }
  return c;
}","/** 
 * @see JTable
 */
public Component prepareRenderer(TableCellRenderer renderer,int rowIndex,int vColIndex){
  TableColumn col=getColumnModel().getColumn(vColIndex);
  AlarmTableEntry entry=null;
  try {
    entry=model.getRowEntry(sorter.convertRowIndexToModel(rowIndex));
  }
 catch (  Throwable t) {
    entry=null;
  }
  if (entry == null) {
    return emptyLbl;
  }
  Alarm alarm=entry.getAlarm();
  if (col.getIdentifier().equals(AlarmTableColumn.ICON)) {
    if (model.isRowAlarmNew(sorter.convertRowIndexToModel(rowIndex))) {
      return AlarmGUIType.fromAlarm(alarm).flagRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.REDUCED)) {
    if (entry.isReduced()) {
      return AlarmTable.reductionRenderer;
    }
 else {
      return emptyLbl;
    }
  }
 else   if (col.getIdentifier().equals(AlarmTableColumn.HIDES_CHILDREN)) {
    if (entry.isParent()) {
      return AlarmTable.hasReducedNodesRenderer;
    }
 else {
      return emptyLbl;
    }
  }
  Component c=super.prepareRenderer(renderer,rowIndex,vColIndex);
  colorizeCell(c,alarm);
  if (c instanceof JComponent) {
    JComponent jc=(JComponent)c;
    if (((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex) == null) {
      jc.setToolTipText(null);
    }
 else {
      jc.setToolTipText(""String_Node_Str"" + ((AlarmTableModel)model).getCellContent(sorter.convertRowIndexToModel(rowIndex),vColIndex));
    }
  }
  return c;
}",0.8182701652089407
134867,"/** 
 * Add an entry (i.e a alarm) in the collection. <P> If there is no room available in the container, an exception is thrown: checking if there is enough room  must be done by the caller. <P>
 * @param entry The not <code>null</code> entry to add
 * @throw {@link AlarmContainerException} If the entry is already in the container
 */
public synchronized void add(AlarmTableEntry entry) throws AlarmContainerException {
  super.add(entry);
  if (!entry.isReduced()) {
    indexWithReduction.add(entry.getAlarm().getAlarmId());
  }
  hideReducedChildren(entry);
}","/** 
 * Add an entry (i.e a alarm) in the collection. <P> If there is no room available in the container, an exception is thrown: checking if there is enough room  must be done by the caller. <P>
 * @param entry The not <code>null</code> entry to add
 * @throw {@link AlarmContainerException} If the entry is already in the container
 */
public synchronized void add(AlarmTableEntry entry) throws AlarmContainerException {
  super.add(entry);
  addAlarm(entry.getAlarm());
}",0.8970163618864293
134868,"/** 
 * Replace the alarm in a row with passed one. <P> The entry to replace the alarm is given by the alarm ID of the parameter.
 * @param newAlarm The not null new alarm 
 * @throws AlarmContainerException if the entry is not in the container
 */
public synchronized void replace(Alarm newAlarm) throws AlarmContainerException {
  super.replace(newAlarm);
  int pos=indexWithReduction.indexOf(newAlarm.getAlarmId());
  if (pos >= 0) {
    String key=indexWithReduction.remove(pos);
    indexWithReduction.insertElementAt(key,0);
    if (newAlarm.getStatus().isActive()) {
      return;
    }
    showActiveChildren(newAlarm,pos);
  }
}","/** 
 * Replace the alarm in a row with passed one. <P> The entry to replace the alarm is given by the alarm ID of the parameter.
 * @param newAlarm The not null new alarm 
 * @throws AlarmContainerException if the entry is not in the container
 */
public synchronized void replace(Alarm newAlarm) throws AlarmContainerException {
  super.replace(newAlarm);
  int pos=indexWithReduction.indexOf(newAlarm.getAlarmId());
  if (pos >= 0) {
    String key=indexWithReduction.remove(pos);
    indexWithReduction.insertElementAt(key,0);
    if (newAlarm.getStatus().isActive()) {
      hideReducedChildren(newAlarm);
    }
 else {
      showActiveChildren(newAlarm,pos);
    }
  }
 else {
    addAlarm(newAlarm);
  }
}",0.9369903632320236
134869,"/** 
 * Hide the active alarms of this entry.
 * @param entry The not <code>null</code> entry to hide active children
 */
private void hideReducedChildren(AlarmTableEntry entry){
  if (entry == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (categoryClient == null) {
    return;
  }
  Alarm[] children=null;
  try {
    if (entry.getAlarm().isNodeParent()) {
      children=categoryClient.getChildren(entry.getAlarm().getAlarmId(),true);
    }
 else     if (entry.getAlarm().isMultiplicityParent()) {
      children=categoryClient.getChildren(entry.getAlarm().getAlarmId(),false);
    }
  }
 catch (  Throwable t) {
    System.err.println(""String_Node_Str"" + entry.getAlarm().getAlarmId() + ""String_Node_Str""+ t.getMessage());
    t.printStackTrace();
    children=null;
  }
  if (children != null) {
    for (    Alarm al : children) {
      indexWithReduction.remove(al.getAlarmId());
    }
  }
}","/** 
 * Hide the active alarms of this entry.
 * @param entry The not <code>null</code> entry to hide active children
 */
private void hideReducedChildren(Alarm entry){
  if (entry == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (categoryClient == null) {
    return;
  }
  Alarm[] children=null;
  try {
    if (entry.isNodeParent()) {
      children=categoryClient.getChildren(entry.getAlarmId(),true);
    }
 else     if (entry.isMultiplicityParent()) {
      children=categoryClient.getChildren(entry.getAlarmId(),false);
    }
  }
 catch (  Throwable t) {
    System.err.println(""String_Node_Str"" + entry.getAlarmId() + ""String_Node_Str""+ t.getMessage());
    t.printStackTrace();
    children=null;
  }
  if (children != null) {
    for (    Alarm al : children) {
      System.out.println(""String_Node_Str"" + al.getAlarmId());
      indexWithReduction.remove(al.getAlarmId());
    }
  }
}",0.930960086299892
134870,"/** 
 * @author rbertoncelj
 */
public void addNode(javax.swing.tree.TreeNode node,javax.swing.tree.TreeNode parentNode){
  addNodes(new TreeNode[]{node},parentNode);
  if (node instanceof BACIInvocation) {
    BACIInvocation invoc=(BACIInvocation)node;
    InvocationCouple ic=new InvocationCouple(invoc,null);
    ic.invocationByName=new DelegateInvocation(invoc,treeByName,(BACIRemoteAccess)remoteAccess);
    String curl=(String)((OETreeNode)parentNode.getParent()).getUserObject() + ""String_Node_Str"" + parentNode.toString();
    RemoteNodeCouple rnc=(RemoteNodeCouple)devices.get(curl);
    if (rnc == null) {
      notifier.reportError(""String_Node_Str"");
      return;
    }
    getInvList().put(invoc.getName(),ic);
    setNodesTreeByName(new TreeNode[]{ic.invocationByName},rnc.deviceByName);
  }
}","/** 
 * @author rbertoncelj
 */
public void addNode(javax.swing.tree.TreeNode node,javax.swing.tree.TreeNode parentNode){
  addNodes(new TreeNode[]{node},parentNode);
  if (node instanceof BACIInvocation) {
    BACIInvocation invoc=(BACIInvocation)node;
    InvocationCouple ic=new InvocationCouple(invoc,null);
    ic.invocationByName=new DelegateInvocation(invoc,treeByName,(BACIRemoteAccess)remoteAccess);
    String curl=(String)((OETreeNode)parentNode.getParent()).getUserObject() + ""String_Node_Str"" + parentNode.toString();
    RemoteNodeCouple rnc=(RemoteNodeCouple)devices.get(curl);
    if (rnc == null) {
      notifier.reportError(""String_Node_Str"");
      return;
    }
    getInvList().put(invoc,ic);
    setNodesTreeByName(new TreeNode[]{ic.invocationByName},rnc.deviceByName);
  }
}",0.9937733499377336
134871,"public InvocationCouple getInvocationCouple(Invocation invoc){
  return (InvocationCouple)invList.get(invoc.getName());
}","public InvocationCouple getInvocationCouple(Invocation invoc){
  return (InvocationCouple)invList.get(invoc);
}",0.956896551724138
134872,"/** 
 * @author rbertoncelj
 */
public void addNode(javax.swing.tree.TreeNode node,javax.swing.tree.TreeNode parentNode){
  addNodes(new TreeNode[]{node},parentNode);
  if (node instanceof BACIInvocation) {
    BACIInvocation invoc=(BACIInvocation)node;
    InvocationCouple ic=new InvocationCouple(invoc,null);
    ic.invocationByName=new DelegateInvocation(invoc,treeByName,(BACIRemoteAccess)remoteAccess);
    String curl=(String)((OETreeNode)parentNode.getParent()).getUserObject() + ""String_Node_Str"" + parentNode.toString();
    RemoteNodeCouple rnc=(RemoteNodeCouple)devices.get(curl);
    if (rnc == null) {
      notifier.reportError(""String_Node_Str"");
      return;
    }
    getInvList().put(invoc.getName(),ic);
    setNodesTreeByName(new TreeNode[]{ic.invocationByName},rnc.deviceByName);
  }
}","/** 
 * @author rbertoncelj
 */
public void addNode(javax.swing.tree.TreeNode node,javax.swing.tree.TreeNode parentNode){
  addNodes(new TreeNode[]{node},parentNode);
  if (node instanceof BACIInvocation) {
    BACIInvocation invoc=(BACIInvocation)node;
    InvocationCouple ic=new InvocationCouple(invoc,null);
    ic.invocationByName=new DelegateInvocation(invoc,treeByName,(BACIRemoteAccess)remoteAccess);
    String curl=(String)((OETreeNode)parentNode.getParent()).getUserObject() + ""String_Node_Str"" + parentNode.toString();
    RemoteNodeCouple rnc=(RemoteNodeCouple)devices.get(curl);
    if (rnc == null) {
      notifier.reportError(""String_Node_Str"");
      return;
    }
    getInvList().put(invoc,ic);
    setNodesTreeByName(new TreeNode[]{ic.invocationByName},rnc.deviceByName);
  }
}",0.9937733499377336
134873,"public InvocationCouple getInvocationCouple(Invocation invoc){
  return (InvocationCouple)invList.get(invoc.getName());
}","public InvocationCouple getInvocationCouple(Invocation invoc){
  return (InvocationCouple)invList.get(invoc);
}",0.956896551724138
134874,"/** 
 * Derives the qualified Java class name for an IDL-defined struct from the Corba ID of that struct.
 * @param isNestedStruct  if true, ""Package"" will be inserted according to <i>""IDL to Java LanguageMapping Specification"" version 1.2: 1.17 Mapping for Certain Nested Types</i> apply.
 */
public String corbaStructToJavaClass(String id,boolean isNestedStruct) throws IllegalArgumentException {
  String prefix=""String_Node_Str"";
  String suffix=""String_Node_Str"";
  if (!id.startsWith(prefix) || !id.endsWith(suffix)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String qualNameWithSlashes=id.substring(prefix.length(),id.length() - suffix.length());
  String qualName=qualNameWithSlashes.replace('/','.');
  if (isNestedStruct) {
    int lastDotIndex=qualName.lastIndexOf('.');
    if (lastDotIndex > 0) {
      String className=qualName.substring(lastDotIndex + 1);
      String jPackage=qualName.substring(0,lastDotIndex);
      jPackage+=""String_Node_Str"";
      qualName=jPackage + className;
    }
  }
  return qualName;
}","/** 
 * Derives the qualified Java class name for an IDL-defined struct from the Corba ID of that struct.
 * @param isNestedStruct  if true, ""Package"" will be inserted according to <i>""IDL to Java LanguageMapping Specification"" version 1.2: 1.17 Mapping for Certain Nested Types</i> apply.
 */
protected String corbaStructToJavaClass(String id,boolean isNestedStruct) throws IllegalArgumentException {
  String prefix=""String_Node_Str"";
  String suffix=""String_Node_Str"";
  if (!id.startsWith(prefix) || !id.endsWith(suffix)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String qualNameWithSlashes=id.substring(prefix.length(),id.length() - suffix.length());
  String qualName=qualNameWithSlashes.replace('/','.');
  if (isNestedStruct) {
    int lastDotIndex=qualName.lastIndexOf('.');
    if (lastDotIndex > 0) {
      String className=qualName.substring(lastDotIndex + 1);
      String jPackage=qualName.substring(0,lastDotIndex);
      jPackage+=""String_Node_Str"";
      qualName=jPackage + className;
    }
  }
  return qualName;
}",0.9938476100331284
134875,"/** 
 * Tries to create a notification channel (using quality of service and administrative properties  specified by configQofS() and configAdminProps() respectively). If this succeeds, then registers this channel with the naming service. <p> Should only be invoked when the channel that this supplier or consumer is attempting to connect to does not exist. However even with prior check for the existence of this channel, a race condition with other suppliers or consumers can lead to multiple attempts to create the same channel, which will result in <code>NameAlreadyUsed</code> exception. <p> Design note: Currently the TAO notification extensions are used to synch channel creation with other clients by supplying the channel name to the factory. If we want to use only standard NC factories then we'd have to implement our own locking mechanisms in all  ACS consumer and supplier classes, see http://jira.alma.cl/browse/COMP-2808
 * @return Reference to the newly created channel.
 * @param channelName Name of the channel to create.
 * @param channelKind Kind of the channel as registered with the CORBA naming service.
 * @param notifyFactoryName Name of the notification service as registered with the CORBA naming service.
 * @throws AcsJException Standard ACS Java exception.
 * @throws NameMapError (@TODO check in TAO code what this means!) 
 * @throws NameAlreadyUsed thrown if the channel of this name already exists.
 */
public EventChannel createNotificationChannel(String channelName,String channelKind,String notifyFactoryName) throws AcsJException, NameAlreadyUsed, NameMapError {
  LOG_NC_ChannelCreated_ATTEMPT.log(m_logger,channelName,notifyFactoryName);
  EventChannel retValue=null;
  int channelId=-1;
  final String standardEventFactoryId=org.omg.CosNotifyChannelAdmin.EventChannelFactoryHelper.id();
  final String specialEventFactoryId=gov.sandia.NotifyMonitoringExt.EventChannelFactoryHelper.id();
  try {
    NameComponent[] t_NameFactory={new NameComponent(notifyFactoryName,""String_Node_Str"")};
    org.omg.CORBA.Object notifyFactoryObj=null;
    EventChannelFactory notifyFactory=null;
    try {
      notifyFactoryObj=getNamingService().resolve(t_NameFactory);
    }
 catch (    org.omg.CosNaming.NamingContextPackage.NotFound ex) {
      String reason=""String_Node_Str"" + notifyFactoryName + ""String_Node_Str""+ ex.why.toString();
      AcsJCORBAProblemEx ex2=new AcsJCORBAProblemEx();
      ex2.setInfo(reason);
      throw ex2;
    }
    try {
      notifyFactory=EventChannelFactoryHelper.narrow(notifyFactoryObj);
    }
 catch (    BAD_PARAM ex) {
      String errMsg=""String_Node_Str"" + notifyFactoryName + ""String_Node_Str""+ specialEventFactoryId;
      if (notifyFactoryObj._is_a(standardEventFactoryId)) {
        errMsg+=""String_Node_Str"" + standardEventFactoryId + ""String_Node_Str"";
      }
 else {
        errMsg+=""String_Node_Str"" + standardEventFactoryId;
      }
      m_logger.warning(errMsg);
      AcsJNarrowFailedEx ex2=new AcsJNarrowFailedEx(ex);
      ex2.setNarrowType(specialEventFactoryId);
      throw ex2;
    }
    IntHolder channelIdHolder=new IntHolder();
    retValue=createNotifyChannel_internal(notifyFactory,m_channelProperties.configQofS(channelName),m_channelProperties.configAdminProps(channelName),channelName,channelIdHolder);
    if (retValue == null) {
      Throwable cause=new Throwable(""String_Node_Str"" + channelName + ""String_Node_Str"");
      throw new alma.ACSErrTypeJavaNative.wrappers.AcsJJavaLangEx(cause);
    }
    channelId=channelIdHolder.value;
    try {
      NameComponent[] t_NameChannel={new NameComponent(channelName,channelKind)};
      getNamingService().rebind(t_NameChannel,retValue);
    }
 catch (    org.omg.CosNaming.NamingContextPackage.NotFound ex) {
      String reason=""String_Node_Str"" + channelName + ""String_Node_Str""+ ex.why.toString();
      AcsJCORBAProblemEx ex2=new AcsJCORBAProblemEx(ex);
      ex2.setInfo(reason);
      throw ex2;
    }
  }
 catch (  org.omg.CosNaming.NamingContextPackage.CannotProceed e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNaming.NamingContextPackage.InvalidName e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNotification.UnsupportedAdmin e) {
    Throwable cause=new Throwable(""String_Node_Str"" + channelName + ""String_Node_Str""+ e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNotification.UnsupportedQoS e) {
    Throwable cause=new Throwable(""String_Node_Str"" + channelName + ""String_Node_Str""+ e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
  LOG_NC_ChannelCreated_OK.log(m_logger,channelName,channelId,notifyFactoryName);
  return retValue;
}","/** 
 * Tries to create a notification channel (using quality of service and administrative properties  specified by configQofS() and configAdminProps() respectively). If this succeeds, then registers this channel with the naming service. <p> Should only be invoked when the channel that this supplier or consumer is attempting to connect to does not exist. However even with prior check for the existence of this channel, a race condition with other suppliers or consumers can lead to multiple attempts to create the same channel, which will result in <code>NameAlreadyUsed</code> exception. <p> Design note: Currently the TAO notification extensions are used to synch channel creation with other clients by supplying the channel name to the factory. If we want to use only standard NC factories then we'd have to implement our own locking mechanisms in all  ACS consumer and supplier classes, see http://jira.alma.cl/browse/COMP-2808
 * @return Reference to the newly created channel.
 * @param channelName Name of the channel to create.
 * @param channelKind Kind of the channel as registered with the CORBA naming service.
 * @param notifyFactoryName Name of the notification service as registered with the CORBA naming service.
 * @throws AcsJException Standard ACS Java exception.
 * @throws NameMapError (@TODO check in TAO code what this means!) 
 * @throws NameAlreadyUsed thrown if the channel of this name already exists.
 */
protected EventChannel createNotificationChannel(String channelName,String channelKind,String notifyFactoryName) throws AcsJException, NameAlreadyUsed, NameMapError {
  LOG_NC_ChannelCreated_ATTEMPT.log(m_logger,channelName,notifyFactoryName);
  EventChannel retValue=null;
  int channelId=-1;
  final String standardEventFactoryId=org.omg.CosNotifyChannelAdmin.EventChannelFactoryHelper.id();
  final String specialEventFactoryId=gov.sandia.NotifyMonitoringExt.EventChannelFactoryHelper.id();
  try {
    NameComponent[] t_NameFactory={new NameComponent(notifyFactoryName,""String_Node_Str"")};
    org.omg.CORBA.Object notifyFactoryObj=null;
    EventChannelFactory notifyFactory=null;
    try {
      notifyFactoryObj=getNamingService().resolve(t_NameFactory);
    }
 catch (    org.omg.CosNaming.NamingContextPackage.NotFound ex) {
      String reason=""String_Node_Str"" + notifyFactoryName + ""String_Node_Str""+ ex.why.toString();
      AcsJCORBAProblemEx ex2=new AcsJCORBAProblemEx();
      ex2.setInfo(reason);
      throw ex2;
    }
    try {
      notifyFactory=EventChannelFactoryHelper.narrow(notifyFactoryObj);
    }
 catch (    BAD_PARAM ex) {
      String errMsg=""String_Node_Str"" + notifyFactoryName + ""String_Node_Str""+ specialEventFactoryId;
      if (notifyFactoryObj._is_a(standardEventFactoryId)) {
        errMsg+=""String_Node_Str"" + standardEventFactoryId + ""String_Node_Str"";
      }
 else {
        errMsg+=""String_Node_Str"" + standardEventFactoryId;
      }
      m_logger.warning(errMsg);
      AcsJNarrowFailedEx ex2=new AcsJNarrowFailedEx(ex);
      ex2.setNarrowType(specialEventFactoryId);
      throw ex2;
    }
    IntHolder channelIdHolder=new IntHolder();
    retValue=createNotifyChannel_internal(notifyFactory,m_channelProperties.configQofS(channelName),m_channelProperties.configAdminProps(channelName),channelName,channelIdHolder);
    if (retValue == null) {
      Throwable cause=new Throwable(""String_Node_Str"" + channelName + ""String_Node_Str"");
      throw new alma.ACSErrTypeJavaNative.wrappers.AcsJJavaLangEx(cause);
    }
    channelId=channelIdHolder.value;
    try {
      NameComponent[] t_NameChannel={new NameComponent(channelName,channelKind)};
      getNamingService().rebind(t_NameChannel,retValue);
    }
 catch (    org.omg.CosNaming.NamingContextPackage.NotFound ex) {
      String reason=""String_Node_Str"" + channelName + ""String_Node_Str""+ ex.why.toString();
      AcsJCORBAProblemEx ex2=new AcsJCORBAProblemEx(ex);
      ex2.setInfo(reason);
      throw ex2;
    }
  }
 catch (  org.omg.CosNaming.NamingContextPackage.CannotProceed e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNaming.NamingContextPackage.InvalidName e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNotification.UnsupportedAdmin e) {
    Throwable cause=new Throwable(""String_Node_Str"" + channelName + ""String_Node_Str""+ e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNotification.UnsupportedQoS e) {
    Throwable cause=new Throwable(""String_Node_Str"" + channelName + ""String_Node_Str""+ e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
  LOG_NC_ChannelCreated_OK.log(m_logger,channelName,channelId,notifyFactoryName);
  return retValue;
}",0.9986781901372648
134876,"/** 
 * This method gets a reference to the event channel. If it is not already registered with the naming service, it is created.
 * @return Reference to the event channel specified by channelName.
 * @param channelName Name of the event channel registered with the CORBA Naming Service
 * @param channelKind Kind of the channel as registered with the CORBA naming service (""channels"").
 * @param notifyFactoryName Name of the notification service as registered with the CORBA naming service.
 * @throws AcsJException Standard ACS Java exception.
 */
public EventChannel getNotificationChannel(String channelName,String channelKind,String notifyFactoryName) throws AcsJException {
  EventChannel retValue=null;
  NameComponent[] t_NameSequence={new NameComponent(channelName,channelKind)};
  int retryNumberAttempts=20;
  int retrySleepSec=2;
  do {
    try {
      retValue=EventChannelHelper.narrow(getNamingService().resolve(t_NameSequence));
    }
 catch (    org.omg.CosNaming.NamingContextPackage.NotFound e) {
    }
catch (    org.omg.CosNaming.NamingContextPackage.CannotProceed e) {
      throw new AcsJUnexpectedExceptionEx(e);
    }
catch (    org.omg.CosNaming.NamingContextPackage.InvalidName e) {
      throw new AcsJUnexpectedExceptionEx(e);
    }
    if (retValue == null) {
      try {
        retValue=createNotificationChannel(channelName,channelKind,notifyFactoryName);
      }
 catch (      NameAlreadyUsed ex) {
        m_logger.log(Level.INFO,""String_Node_Str"" + channelName + ""String_Node_Str""+ retrySleepSec+ ""String_Node_Str"",ex);
        try {
          Thread.sleep(retrySleepSec * 1000);
        }
 catch (        InterruptedException ex1) {
        }
      }
catch (      NameMapError ex) {
        m_logger.log(Level.WARNING,""String_Node_Str"",ex);
        try {
          Thread.sleep(retrySleepSec * 1000);
        }
 catch (        InterruptedException ex1) {
        }
      }
    }
  }
 while (retValue == null && --retryNumberAttempts >= 0);
  if (retValue == null) {
    AcsJGenericErrorEx ex=new AcsJGenericErrorEx();
    ex.setErrorDesc(""String_Node_Str"" + channelName);
    throw ex;
  }
  return retValue;
}","/** 
 * This method gets a reference to the event channel. If it is not already registered with the naming service, it is created.
 * @TODO Make ""protected"" again once we no longer have NC classes in separate subpackge ""refactored"".
 * @return Reference to the event channel specified by channelName.
 * @param channelName Name of the event channel registered with the CORBA Naming Service
 * @param channelKind Kind of the channel as registered with the CORBA naming service (""channels"").
 * @param notifyFactoryName Name of the notification service as registered with the CORBA naming service.
 * @throws AcsJException Standard ACS Java exception.
 */
public EventChannel getNotificationChannel(String channelName,String channelKind,String notifyFactoryName) throws AcsJException {
  EventChannel retValue=null;
  NameComponent[] t_NameSequence={new NameComponent(channelName,channelKind)};
  int retryNumberAttempts=20;
  int retrySleepSec=2;
  do {
    try {
      retValue=EventChannelHelper.narrow(getNamingService().resolve(t_NameSequence));
    }
 catch (    org.omg.CosNaming.NamingContextPackage.NotFound e) {
    }
catch (    org.omg.CosNaming.NamingContextPackage.CannotProceed e) {
      throw new AcsJUnexpectedExceptionEx(e);
    }
catch (    org.omg.CosNaming.NamingContextPackage.InvalidName e) {
      throw new AcsJUnexpectedExceptionEx(e);
    }
    if (retValue == null) {
      try {
        retValue=createNotificationChannel(channelName,channelKind,notifyFactoryName);
      }
 catch (      NameAlreadyUsed ex) {
        m_logger.log(Level.INFO,""String_Node_Str"" + channelName + ""String_Node_Str""+ retrySleepSec+ ""String_Node_Str"",ex);
        try {
          Thread.sleep(retrySleepSec * 1000);
        }
 catch (        InterruptedException ex1) {
        }
      }
catch (      NameMapError ex) {
        m_logger.log(Level.WARNING,""String_Node_Str"",ex);
        try {
          Thread.sleep(retrySleepSec * 1000);
        }
 catch (        InterruptedException ex1) {
        }
      }
    }
  }
 while (retValue == null && --retryNumberAttempts >= 0);
  if (retValue == null) {
    AcsJGenericErrorEx ex=new AcsJGenericErrorEx();
    ex.setErrorDesc(""String_Node_Str"" + channelName);
    throw ex;
  }
  return retValue;
}",0.9768181818181818
134877,"/** 
 * <b>Destroys the channel and unregisters it from the naming service. ONLY USE THIS METHOD IF YOU KNOW FOR CERTAIN THERE IS ONLY ONE SUPPLIER FOR THE CHANNEL!!! Use this method with extreme caution as it's likely to become deprecated in future versions of ACS!</b>
 * @param channelName name of the channel as registered int the CORBA notification service
 * @param channelKind Kind of the channel as registered with the CORBA naming service.
 * @param channelRef reference to the channel being destroyed
 * @throws AcsJException Thrown when the channel isn't registered with the Naming Service.
 * @warning this method assumes
 */
public void destroyNotificationChannel(String channelName,String channelKind,EventChannel channelRef) throws AcsJException {
  try {
    channelRef.destroy();
    NameComponent[] t_NameChannel={new NameComponent(channelName,channelKind)};
    getNamingService().unbind(t_NameChannel);
  }
 catch (  org.omg.CosNaming.NamingContextPackage.NotFound e) {
    String msg=""String_Node_Str"" + channelName + ""String_Node_Str"";
    m_logger.severe(msg);
  }
catch (  org.omg.CosNaming.NamingContextPackage.CannotProceed e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNaming.NamingContextPackage.InvalidName e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
  LOG_NC_ChannelDestroyed_OK.log(m_logger,channelName,""String_Node_Str"");
}","/** 
 * <b>Destroys the channel and unregisters it from the naming service. ONLY USE THIS METHOD IF YOU KNOW FOR CERTAIN THERE IS ONLY ONE SUPPLIER FOR THE CHANNEL!!! Use this method with extreme caution as it's likely to become deprecated in future versions of ACS!</b>
 * @param channelName name of the channel as registered int the CORBA notification service
 * @param channelKind Kind of the channel as registered with the CORBA naming service.
 * @param channelRef reference to the channel being destroyed
 * @throws AcsJException Thrown when the channel isn't registered with the Naming Service.
 * @warning this method assumes
 */
protected void destroyNotificationChannel(String channelName,String channelKind,EventChannel channelRef) throws AcsJException {
  try {
    channelRef.destroy();
    NameComponent[] t_NameChannel={new NameComponent(channelName,channelKind)};
    getNamingService().unbind(t_NameChannel);
  }
 catch (  org.omg.CosNaming.NamingContextPackage.NotFound e) {
    String msg=""String_Node_Str"" + channelName + ""String_Node_Str"";
    m_logger.severe(msg);
  }
catch (  org.omg.CosNaming.NamingContextPackage.CannotProceed e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
catch (  org.omg.CosNaming.NamingContextPackage.InvalidName e) {
    Throwable cause=new Throwable(e.getMessage());
    throw new alma.ACSErrTypeCommon.wrappers.AcsJCORBAProblemEx(cause);
  }
  LOG_NC_ChannelDestroyed_OK.log(m_logger,channelName,""String_Node_Str"");
}",0.9958078039342148
134878,"private void printMonitoringResults(NotificationServiceMonitorControl mc){
  try {
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.EventChannelFactoryNames.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelCount.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelNames.value));
  }
 catch (  InvalidName e) {
    e.printStackTrace();
  }
}","private void printMonitoringResults(NotificationServiceMonitorControl mc){
  if (true)   return;
  try {
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.EventChannelFactoryNames.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelCount.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelNames.value));
  }
 catch (  InvalidName e) {
    e.printStackTrace();
  }
}",0.9785575048732944
134879,"public void selectionChanged(IWorkbenchPart sourcepart,ISelection selection){
  if (sourcepart != EventDetailView.this && selection instanceof IStructuredSelection) {
    IStructuredSelection iss=(IStructuredSelection)selection;
    Object[] arr=iss.toArray();
    if (arr[0] instanceof EventData) {
      EventData ed=(EventData)arr[0];
      showEventDetails(sourcepart,ed);
    }
  }
}","public void selectionChanged(IWorkbenchPart sourcepart,ISelection selection){
  if (sourcepart != EventDetailView.this && selection instanceof IStructuredSelection) {
    IStructuredSelection iss=(IStructuredSelection)selection;
    if (iss == null)     return;
    Object[] arr=iss.toArray();
    if (arr.length > 0 && arr[0] instanceof EventData) {
      EventData ed=(EventData)arr[0];
      showEventDetails(sourcepart,ed);
    }
  }
}",0.9383313180169288
134880,"@Override public void dispose(){
  super.dispose();
  ArrayList<AdminConsumer> consumers=em.getAllConsumers();
  for (  AdminConsumer consumer : consumers) {
    if (consumer != null) {
      consumer.disconnect();
    }
  }
}","@Override public void dispose(){
  super.dispose();
  em.closeAllConsumers();
}",0.4918032786885246
134881,"public PopulateEventList(Logger logger,TableViewer viewer){
  super();
  this.logger=logger;
  this.viewer=viewer;
}","public PopulateEventList(Logger logger,TableViewer viewer){
  super();
  this.logger=logger;
  this.viewer=viewer;
  display=viewer.getControl().getDisplay();
}",0.8405797101449275
134882,"Thread getThreadForEventList(EventModel em){
  Runnable t=new Runnable(){
    public Runnable r=new Runnable(){
      private long totalNumberDrained;
      public void run(){
        final Display display=viewer.getControl().getDisplay();
        if (!display.isDisposed()) {
          ArrayList<EventData> c=new ArrayList<EventData>(QUEUE_DRAIN_LIMIT);
          int numberDrained=Application.equeue.drainTo(c,QUEUE_DRAIN_LIMIT);
          if (numberDrained == 0)           return;
          totalNumberDrained+=numberDrained;
          viewer.add(c.toArray());
          if (cycles++ % CHECK_MEMORY_FREQUENCY == 0) {
            StopWatch sw=new StopWatch(logger);
            freeMemoryIfNecessary();
            sw.logLapTime(""String_Node_Str"");
            logger.fine(""String_Node_Str"" + totalNumberDrained);
          }
        }
      }
    }
;
    public void run(){
      final Display display=viewer.getControl().getDisplay();
      while (true) {
        if (display.isDisposed())         return;
        display.syncExec(r);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          System.out.println(""String_Node_Str"");
          break;
        }
      }
    }
  }
;
  final Thread th=new Thread(t,""String_Node_Str"");
  consumers=em.getAllConsumers();
  if (consumers != null) {
    for (    AdminConsumer consumer : consumers) {
      try {
        consumer.consumerReady();
      }
 catch (      AcsJException e) {
        e.printStackTrace();
      }
    }
  }
  return th;
}","Thread getThreadForEventList(EventModel em){
  Runnable t=new Runnable(){
    public Runnable r=new Runnable(){
      private long totalNumberDrained;
      public void run(){
        if (!display.isDisposed()) {
          ArrayList<EventData> c=new ArrayList<EventData>(QUEUE_DRAIN_LIMIT);
          int numberDrained=Application.equeue.drainTo(c,QUEUE_DRAIN_LIMIT);
          if (numberDrained == 0)           return;
          totalNumberDrained+=numberDrained;
          viewer.add(c.toArray());
          if (cycles++ % CHECK_MEMORY_FREQUENCY == 0) {
            StopWatch sw=new StopWatch(logger);
            freeMemoryIfNecessary();
            sw.logLapTime(""String_Node_Str"");
            logger.fine(""String_Node_Str"" + totalNumberDrained);
          }
        }
      }
    }
;
    public void run(){
      while (true) {
        if (display.isDisposed())         return;
        display.syncExec(r);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          System.out.println(""String_Node_Str"");
          break;
        }
      }
    }
  }
;
  final Thread th=new Thread(t,""String_Node_Str"");
  consumers=em.getAllConsumers();
  if (consumers != null) {
    for (    AdminConsumer consumer : consumers) {
      try {
        consumer.consumerReady();
      }
 catch (      AcsJException e) {
        e.printStackTrace();
      }
    }
  }
  return th;
}",0.9574036511156186
134883,"public void run(){
  final Display display=viewer.getControl().getDisplay();
  while (true) {
    if (display.isDisposed())     return;
    display.syncExec(r);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
      break;
    }
  }
}","public void run(){
  while (true) {
    if (display.isDisposed())     return;
    display.syncExec(r);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
      break;
    }
  }
}",0.896797153024911
134884,"private void printMonitoringResults(NotificationServiceMonitorControl mc){
  try {
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.EventChannelFactoryNames.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelCount.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelNames.value));
  }
 catch (  InvalidName e) {
    e.printStackTrace();
  }
}","private void printMonitoringResults(NotificationServiceMonitorControl mc){
  if (true)   return;
  try {
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.EventChannelFactoryNames.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelCount.value));
    m_logger.info(""String_Node_Str"" + mc.get_statistic(gov.sandia.NotifyMonitoringExt.ActiveEventChannelNames.value));
  }
 catch (  InvalidName e) {
    e.printStackTrace();
  }
}",0.9785575048732944
134885,"public void selectionChanged(IWorkbenchPart sourcepart,ISelection selection){
  if (sourcepart != EventDetailView.this && selection instanceof IStructuredSelection) {
    IStructuredSelection iss=(IStructuredSelection)selection;
    Object[] arr=iss.toArray();
    if (arr[0] instanceof EventData) {
      EventData ed=(EventData)arr[0];
      showEventDetails(sourcepart,ed);
    }
  }
}","public void selectionChanged(IWorkbenchPart sourcepart,ISelection selection){
  if (sourcepart != EventDetailView.this && selection instanceof IStructuredSelection) {
    IStructuredSelection iss=(IStructuredSelection)selection;
    if (iss == null)     return;
    Object[] arr=iss.toArray();
    if (arr.length > 0 && arr[0] instanceof EventData) {
      EventData ed=(EventData)arr[0];
      showEventDetails(sourcepart,ed);
    }
  }
}",0.9383313180169288
134886,"@Override public void dispose(){
  super.dispose();
  ArrayList<AdminConsumer> consumers=em.getAllConsumers();
  for (  AdminConsumer consumer : consumers) {
    if (consumer != null) {
      consumer.disconnect();
    }
  }
}","@Override public void dispose(){
  super.dispose();
  em.closeAllConsumers();
}",0.4918032786885246
134887,"public PopulateEventList(Logger logger,TableViewer viewer){
  super();
  this.logger=logger;
  this.viewer=viewer;
}","public PopulateEventList(Logger logger,TableViewer viewer){
  super();
  this.logger=logger;
  this.viewer=viewer;
  display=viewer.getControl().getDisplay();
}",0.8405797101449275
134888,"Thread getThreadForEventList(EventModel em){
  Runnable t=new Runnable(){
    public Runnable r=new Runnable(){
      private long totalNumberDrained;
      public void run(){
        final Display display=viewer.getControl().getDisplay();
        if (!display.isDisposed()) {
          ArrayList<EventData> c=new ArrayList<EventData>(QUEUE_DRAIN_LIMIT);
          int numberDrained=Application.equeue.drainTo(c,QUEUE_DRAIN_LIMIT);
          if (numberDrained == 0)           return;
          totalNumberDrained+=numberDrained;
          viewer.add(c.toArray());
          if (cycles++ % CHECK_MEMORY_FREQUENCY == 0) {
            StopWatch sw=new StopWatch(logger);
            freeMemoryIfNecessary();
            sw.logLapTime(""String_Node_Str"");
            logger.fine(""String_Node_Str"" + totalNumberDrained);
          }
        }
      }
    }
;
    public void run(){
      final Display display=viewer.getControl().getDisplay();
      while (true) {
        if (display.isDisposed())         return;
        display.syncExec(r);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          System.out.println(""String_Node_Str"");
          break;
        }
      }
    }
  }
;
  final Thread th=new Thread(t,""String_Node_Str"");
  consumers=em.getAllConsumers();
  if (consumers != null) {
    for (    AdminConsumer consumer : consumers) {
      try {
        consumer.consumerReady();
      }
 catch (      AcsJException e) {
        e.printStackTrace();
      }
    }
  }
  return th;
}","Thread getThreadForEventList(EventModel em){
  Runnable t=new Runnable(){
    public Runnable r=new Runnable(){
      private long totalNumberDrained;
      public void run(){
        if (!display.isDisposed()) {
          ArrayList<EventData> c=new ArrayList<EventData>(QUEUE_DRAIN_LIMIT);
          int numberDrained=Application.equeue.drainTo(c,QUEUE_DRAIN_LIMIT);
          if (numberDrained == 0)           return;
          totalNumberDrained+=numberDrained;
          viewer.add(c.toArray());
          if (cycles++ % CHECK_MEMORY_FREQUENCY == 0) {
            StopWatch sw=new StopWatch(logger);
            freeMemoryIfNecessary();
            sw.logLapTime(""String_Node_Str"");
            logger.fine(""String_Node_Str"" + totalNumberDrained);
          }
        }
      }
    }
;
    public void run(){
      while (true) {
        if (display.isDisposed())         return;
        display.syncExec(r);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          System.out.println(""String_Node_Str"");
          break;
        }
      }
    }
  }
;
  final Thread th=new Thread(t,""String_Node_Str"");
  consumers=em.getAllConsumers();
  if (consumers != null) {
    for (    AdminConsumer consumer : consumers) {
      try {
        consumer.consumerReady();
      }
 catch (      AcsJException e) {
        e.printStackTrace();
      }
    }
  }
  return th;
}",0.9574036511156186
134889,"public void run(){
  final Display display=viewer.getControl().getDisplay();
  while (true) {
    if (display.isDisposed())     return;
    display.syncExec(r);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
      break;
    }
  }
}","public void run(){
  while (true) {
    if (display.isDisposed())     return;
    display.syncExec(r);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
      break;
    }
  }
}",0.896797153024911
134890,"/** 
 * @see alma.ACS.jbaci.CallbackDispatcher#dispatchCallback(int,java.lang.Object,alma.ACSErr.Completion,alma.ACS.CBDescOut)
 */
public boolean dispatchCallback(int type,Object value,Callback callback,Completion completion,CBDescOut desc){
  try {
    if (type == CallbackDispatcher.DONE_TYPE)     ((CBlong)callback).done((int)((Long)value).longValue(),completion,desc);
 else     if (type == CallbackDispatcher.WORKING_TYPE)     ((CBlong)callback).working((int)((Long)value).longValue(),completion,desc);
 else     return false;
    return true;
  }
 catch (  Throwable th) {
    return false;
  }
}","/** 
 * @see alma.ACS.jbaci.CallbackDispatcher#dispatchCallback(int,java.lang.Object,alma.ACSErr.Completion,alma.ACS.CBDescOut)
 */
public boolean dispatchCallback(int type,Object value,Callback callback,Completion completion,CBDescOut desc){
  try {
    if (type == CallbackDispatcher.DONE_TYPE)     ((CBlong)callback).done((int)((Integer)value).intValue(),completion,desc);
 else     if (type == CallbackDispatcher.WORKING_TYPE)     ((CBlong)callback).working((int)((Integer)value).intValue(),completion,desc);
 else     return false;
    return true;
  }
 catch (  Throwable th) {
    return false;
  }
}",0.9735537190082644
134891,"/** 
 * Add value to the history.
 * @param value		value to be added to the history.
 * @param timestamp	value timestamp (OMG) to be added to the history.
 */
protected void addValueToHistory(Object value,long timestamp){
  if (historySize == 0)   return;
synchronized (historyValue) {
    historyTime[historyPosition]=timestamp;
    if (propertyType.isPrimitive()) {
      if (propertyType.isAssignableFrom(double.class))       Array.setDouble(historyValue,historyPosition,((Double)value).doubleValue());
 else       if (propertyType.isAssignableFrom(int.class))       Array.setInt(historyValue,historyPosition,((Integer)value).intValue());
 else       if (propertyType.isAssignableFrom(long.class))       Array.setLong(historyValue,historyPosition,((Long)value).longValue());
 else       if (propertyType.isAssignableFrom(short.class))       Array.setShort(historyValue,historyPosition,((Short)value).shortValue());
 else       if (propertyType.isAssignableFrom(boolean.class))       Array.setBoolean(historyValue,historyPosition,((Boolean)value).booleanValue());
 else       if (propertyType.isAssignableFrom(byte.class))       Array.setByte(historyValue,historyPosition,((Byte)value).byteValue());
 else       if (propertyType.isAssignableFrom(float.class))       Array.setFloat(historyValue,historyPosition,((Float)value).floatValue());
 else       if (propertyType.isAssignableFrom(char.class))       Array.setChar(historyValue,historyPosition,((Character)value).charValue());
 else       m_logger.log(Level.WARNING,""String_Node_Str"");
      throw new NO_RESOURCES(""String_Node_Str"");
    }
 else     Array.set(historyValue,historyPosition,value);
    historyPosition=++historyPosition % historySize;
    if (!historyTurnaround && historyPosition == 0)     historyTurnaround=true;
  }
}","/** 
 * Add value to the history.
 * @param value		value to be added to the history.
 * @param timestamp	value timestamp (OMG) to be added to the history.
 */
protected void addValueToHistory(Object value,long timestamp){
  if (historySize == 0)   return;
synchronized (historyValue) {
    historyTime[historyPosition]=timestamp;
    if (propertyType.isPrimitive()) {
      System.out.println(propertyType.toString());
      System.out.println(double.class.toString());
      if (propertyType.isAssignableFrom(double.class))       Array.setDouble(historyValue,historyPosition,((Double)value).doubleValue());
 else       if (propertyType.isAssignableFrom(int.class))       Array.setInt(historyValue,historyPosition,((Integer)value).intValue());
 else       if (propertyType.isAssignableFrom(long.class))       Array.setLong(historyValue,historyPosition,((Long)value).longValue());
 else       if (propertyType.isAssignableFrom(short.class))       Array.setShort(historyValue,historyPosition,((Short)value).shortValue());
 else       if (propertyType.isAssignableFrom(boolean.class))       Array.setBoolean(historyValue,historyPosition,((Boolean)value).booleanValue());
 else       if (propertyType.isAssignableFrom(byte.class))       Array.setByte(historyValue,historyPosition,((Byte)value).byteValue());
 else       if (propertyType.isAssignableFrom(float.class))       Array.setFloat(historyValue,historyPosition,((Float)value).floatValue());
 else       if (propertyType.isAssignableFrom(char.class))       Array.setChar(historyValue,historyPosition,((Character)value).charValue());
 else {
        m_logger.log(Level.WARNING,""String_Node_Str"");
        throw new NO_RESOURCES(""String_Node_Str"");
      }
    }
 else     Array.set(historyValue,historyPosition,value);
    historyPosition=++historyPosition % historySize;
    if (!historyTurnaround && historyPosition == 0)     historyTurnaround=true;
  }
}",0.9686486486486486
134892,"private boolean openFile(){
  IsoDateFormat fo=new IsoDateFormat();
  filename=component + ""String_Node_Str"" + property+ ""String_Node_Str""+ getFrecuency()+ ""String_Node_Str""+ fo.format(new Date())+ ""String_Node_Str"";
  try {
    file=new FileWriter(filename);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  writer=new BufferedWriter(file);
  return true;
}","private boolean openFile(){
  IsoDateFormat fo=new IsoDateFormat();
  filename=component.replace('/','-') + ""String_Node_Str"" + property.replace('/','-')+ ""String_Node_Str""+ getFrecuency()+ ""String_Node_Str""+ fo.format(new Date())+ ""String_Node_Str"";
  try {
    file=new FileWriter(filename);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  writer=new BufferedWriter(file);
  return true;
}",0.958128078817734
134893,"/** 
 * Default constructor, takes the parameters, stores them, and creates the filename.
 * @param group The name of the Sampling Group to which the data belongs to.
 * @param frequency The Frequency at which the data was sampled.
 * @param startTimestamp At which time that sampling process started.
 */
public SamplingDataCorrelator(String group,long frequency,Date startTimestamp){
  data=new ArrayList<ArrayList<DataItem>>();
  readers=new ArrayList<BufferedReader>();
  headers=new ArrayList<String>();
  this.group=group;
  this.frequency=frequency;
  this.startTimestamp=startTimestamp;
  formater=new IsoDateFormat();
  filename=""String_Node_Str"" + this.group + ""String_Node_Str""+ this.frequency+ ""String_Node_Str""+ formater.format(this.startTimestamp)+ ""String_Node_Str"";
  header=""String_Node_Str"";
  meanQty=4;
  meanData=new ArrayList<ArrayList<Double>>();
}","/** 
 * Default constructor, takes the parameters, stores them, and creates the filename.
 * @param group The name of the Sampling Group to which the data belongs to.
 * @param frequency The Frequency at which the data was sampled.
 * @param startTimestamp At which time that sampling process started.
 */
public SamplingDataCorrelator(String group,long frequency,Date startTimestamp){
  data=new ArrayList<ArrayList<DataItem>>();
  readers=new ArrayList<BufferedReader>();
  headers=new ArrayList<String>();
  this.group=group;
  this.frequency=frequency;
  this.startTimestamp=startTimestamp;
  formater=new IsoDateFormat();
  filename=""String_Node_Str"" + this.group.replace('/','-') + ""String_Node_Str""+ this.frequency+ ""String_Node_Str""+ formater.format(this.startTimestamp)+ ""String_Node_Str"";
  header=""String_Node_Str"";
  meanQty=4;
  meanData=new ArrayList<ArrayList<Double>>();
}",0.9903354178510516
134894,"private boolean openFile(){
  IsoDateFormat fo=new IsoDateFormat();
  filename=component + ""String_Node_Str"" + property+ ""String_Node_Str""+ getFrecuency()+ ""String_Node_Str""+ fo.format(new Date())+ ""String_Node_Str"";
  try {
    file=new FileWriter(filename);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  writer=new BufferedWriter(file);
  return true;
}","private boolean openFile(){
  IsoDateFormat fo=new IsoDateFormat();
  filename=component.replace('/','-') + ""String_Node_Str"" + property.replace('/','-')+ ""String_Node_Str""+ getFrecuency()+ ""String_Node_Str""+ fo.format(new Date())+ ""String_Node_Str"";
  try {
    file=new FileWriter(filename);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  writer=new BufferedWriter(file);
  return true;
}",0.958128078817734
134895,"/** 
 * Default constructor, takes the parameters, stores them, and creates the filename.
 * @param group The name of the Sampling Group to which the data belongs to.
 * @param frequency The Frequency at which the data was sampled.
 * @param startTimestamp At which time that sampling process started.
 */
public SamplingDataCorrelator(String group,long frequency,Date startTimestamp){
  data=new ArrayList<ArrayList<DataItem>>();
  readers=new ArrayList<BufferedReader>();
  headers=new ArrayList<String>();
  this.group=group;
  this.frequency=frequency;
  this.startTimestamp=startTimestamp;
  formater=new IsoDateFormat();
  filename=""String_Node_Str"" + this.group + ""String_Node_Str""+ this.frequency+ ""String_Node_Str""+ formater.format(this.startTimestamp)+ ""String_Node_Str"";
  header=""String_Node_Str"";
  meanQty=4;
  meanData=new ArrayList<ArrayList<Double>>();
}","/** 
 * Default constructor, takes the parameters, stores them, and creates the filename.
 * @param group The name of the Sampling Group to which the data belongs to.
 * @param frequency The Frequency at which the data was sampled.
 * @param startTimestamp At which time that sampling process started.
 */
public SamplingDataCorrelator(String group,long frequency,Date startTimestamp){
  data=new ArrayList<ArrayList<DataItem>>();
  readers=new ArrayList<BufferedReader>();
  headers=new ArrayList<String>();
  this.group=group;
  this.frequency=frequency;
  this.startTimestamp=startTimestamp;
  formater=new IsoDateFormat();
  filename=""String_Node_Str"" + this.group.replace('/','-') + ""String_Node_Str""+ this.frequency+ ""String_Node_Str""+ formater.format(this.startTimestamp)+ ""String_Node_Str"";
  header=""String_Node_Str"";
  meanQty=4;
  meanData=new ArrayList<ArrayList<Double>>();
}",0.9903354178510516
134896,"/** 
 * Enables loggers to send log records to the central ACS logger service. Tries to connect to the log service using the supplied ACS manager. As long as this connection fails, this method can sleep for 10 seconds and then try to connect again, if the parameter <code>retry</code> is <code>true</code>. Total retries are limited to 5, to detect a permanent problem before the log queue overflows. <p> Execution time can be significant, so consider calling this method in a separate thread  (which has no negative effect on the logging since all log records are cached and automatically sent off once the log service is available).  Use a daemon thread to avoid shutdown problems if this method still hangs in the login loop. <p> When the log service is obtained, the log queue used for remote logging will be flushed periodically  to the log service unless an otherwise triggered flush has done this already.  The default period is 10 seconds, but can be overridden in the CDB. <br>
 * @param orb  the ORB used in this JVM
 * @param manager  the ACS manager
 * @param managerHandle  handle assigned by the ACS Manager for this client
 * @param retry  if true, a failing connection to the log service will trigger up to 5 other attempts, every 10 seconds.
 * @return true if remote logging was initialized successfully
 * @see #shutdown(boolean)
 */
public boolean initRemoteLogging(ORB orb,Manager manager,int managerHandle,boolean retry){
  if (logDispatcher != null) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  if (orb == null) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  if (manager == null || managerHandle <= 0) {
    System.err.println(""String_Node_Str"" + managerHandle);
    return false;
  }
  LogOperations logService=null;
  int count=0;
  String errMsg;
  do {
    errMsg=null;
    count++;
    try {
      prepareRemoteLogging();
      logService=getLogService(manager,managerHandle);
      if (logService == null) {
        errMsg=""String_Node_Str"" + logServiceName + ""String_Node_Str"";
      }
 else {
        logQueueLock.lock();
        if (logQueue == null) {
          System.out.println(""String_Node_Str"");
          return false;
        }
        try {
          if (count > 1) {
            m_internalLogger.info(""String_Node_Str"");
          }
          if (LOG_BIN_TYPE) {
            logDispatcher=new RemoteLogDispatcher(orb,logService,new AcsBinLogFormatter());
          }
 else {
            logDispatcher=new RemoteLogDispatcher(orb,logService,new AcsXMLLogFormatter());
          }
          logQueue.setRemoteLogDispatcher(logDispatcher);
          logQueue.flushAllAndWait();
          logQueue.setPeriodicFlushing(flushPeriodSeconds * 1000);
        }
  finally {
          logQueueLock.unlock();
        }
      }
    }
 catch (    Throwable thr) {
      errMsg=""String_Node_Str"" + thr.toString();
      StackTraceElement[] trace=thr.getStackTrace();
      if (trace != null && trace.length > 0) {
        StackTraceElement traceOrigin=trace[0];
        errMsg+=""String_Node_Str"" + traceOrigin.getFileName() + ""String_Node_Str""+ traceOrigin.getLineNumber();
      }
      errMsg+=""String_Node_Str"";
    }
    if (errMsg != null) {
      if (retry) {
        System.err.println(errMsg + ""String_Node_Str"");
        try {
          Thread.sleep(10000);
        }
 catch (        InterruptedException e) {
          System.err.println(""String_Node_Str"");
          retry=false;
        }
      }
 else {
        System.err.println(errMsg);
      }
    }
  }
 while (retry && count <= 5 && errMsg != null);
  return (errMsg == null);
}","/** 
 * Enables loggers to send log records to the central ACS logger service. Tries to connect to the log service using the supplied ACS manager. As long as this connection fails, this method can sleep for 10 seconds and then try to connect again, if the parameter <code>retry</code> is <code>true</code>. Total retries are limited to 5, to detect a permanent problem before the log queue overflows. <p> Execution time can be significant, so consider calling this method in a separate thread  (which has no negative effect on the logging since all log records are cached and automatically sent off once the log service is available).  Use a daemon thread to avoid shutdown problems if this method still hangs in the login loop. <p> When the log service is obtained, the log queue used for remote logging will be flushed periodically  to the log service unless an otherwise triggered flush has done this already.  The default period is 10 seconds, but can be overridden in the CDB. <br>
 * @param orb  the ORB used in this JVM
 * @param manager  the ACS manager
 * @param managerHandle  handle assigned by the ACS Manager for this client
 * @param retry  if true, a failing connection to the log service will trigger up to 5 other attempts, every 10 seconds.
 * @return true if remote logging was initialized successfully
 * @see #shutdown(boolean)
 */
public boolean initRemoteLogging(ORB orb,Manager manager,int managerHandle,boolean retry){
  if (logDispatcher != null) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  if (orb == null) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  if (manager == null || managerHandle <= 0) {
    System.err.println(""String_Node_Str"" + managerHandle);
    return false;
  }
  LogOperations logService=null;
  int count=0;
  String errMsg;
  do {
    errMsg=null;
    count++;
    try {
      prepareRemoteLogging();
      logService=getLogService(manager,managerHandle);
      if (logService == null) {
        errMsg=""String_Node_Str"" + logServiceName + ""String_Node_Str"";
      }
 else {
        logQueueLock.lock();
        try {
          if (logQueue == null) {
            System.out.println(""String_Node_Str"");
            return false;
          }
          if (count > 1) {
            m_internalLogger.info(""String_Node_Str"");
          }
          if (LOG_BIN_TYPE) {
            logDispatcher=new RemoteLogDispatcher(orb,logService,new AcsBinLogFormatter());
          }
 else {
            logDispatcher=new RemoteLogDispatcher(orb,logService,new AcsXMLLogFormatter());
          }
          logQueue.setRemoteLogDispatcher(logDispatcher);
          logQueue.flushAllAndWait();
          logQueue.setPeriodicFlushing(flushPeriodSeconds * 1000);
        }
  finally {
          logQueueLock.unlock();
        }
      }
    }
 catch (    Throwable thr) {
      errMsg=""String_Node_Str"" + thr.toString();
      StackTraceElement[] trace=thr.getStackTrace();
      if (trace != null && trace.length > 0) {
        StackTraceElement traceOrigin=trace[0];
        errMsg+=""String_Node_Str"" + traceOrigin.getFileName() + ""String_Node_Str""+ traceOrigin.getLineNumber();
      }
      errMsg+=""String_Node_Str"";
    }
    if (errMsg != null) {
      if (retry) {
        System.err.println(errMsg + ""String_Node_Str"");
        try {
          Thread.sleep(10000);
        }
 catch (        InterruptedException e) {
          System.err.println(""String_Node_Str"");
          retry=false;
        }
      }
 else {
        System.err.println(errMsg);
      }
    }
  }
 while (retry && count <= 5 && errMsg != null);
  return (errMsg == null);
}",0.9950331125827816
134897,"public void log(Logger logger,Level priority,String message){
  if (guard.check()) {
    logger.log(priority,message);
  }
}","/** 
 * Logs the message at the given level, unless the internal <code>RepeatGuard</code> prevents this based on the timer and/or log record counter. If a log record counter is active, it will be advanced, which corresponds to   {@link RepeatGuard#checkAndIncrement()}. (Note that following the same terminology as   {@link RepeatGuard}, this methods would have to be called <code>logAndIncrement</code>; it is simply called <code>log</code> though because here we don't support the variant of having a counter enabled without using it.) <p> Requires the logger to be set in ctor   {@link #RepeatGuardLogger(AcsLogger,long,TimeUnit,int)} which will become the only choice once the deprecated methods are removed.
 * @see Logger#log(Level,String)
 * @since ACS 8.0.0
 */
public void log(Level level,String message){
  if (logger == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (guard.checkAndIncrement()) {
    logger.log(level,message);
  }
}",0.1425959780621572
134898,"public void logAndIncrement(Logger logger,Level priority,String message){
  if (guard.checkAndIncrement()) {
    logger.log(priority,message);
  }
}","/** 
 * Same as   {@link #log(Level,String) but with additional <code>Throwable</code> to be logged.}
 * @see Logger#log(Level,String,Throwable)
 * @since ACS 8.0.0
 */
public void logAndIncrement(Level level,String message,Throwable thr){
  if (logger == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (guard.checkAndIncrement()) {
    logger.log(level,message,thr);
  }
}",0.3254113345521023
134899,"/** 
 * Constructor.
 * @param interval Time interval (in <code>timeUnit</code> units).
 * @param timeUnit Time unit of <code>interval</code> parameter.
 * @param maxRepetitions Maximum number of repetitions.
 */
public RepeatGuardLogger(long interval,TimeUnit timeUnit,int maxRepetitions){
  guard=new RepeatGuard(interval,timeUnit,maxRepetitions);
}","/** 
 * Constructor for a time and counter based repeat guard logger. <p> If only time or counter should apply, but not both together, it is better to use the factory methods   {@link #createTimeBasedRepeatGuardLogger(AcsLogger,long,TimeUnit)}or   {@link #createCounterBasedRepeatGuardLogger(AcsLogger,int)}. However it is also possible to use negative values for the quantities that should not be considered. <p>
 * @param logger The logger to be used in 
 * @param interval Time interval (in <code>timeUnit</code> units).
 * @param timeUnit Time unit of <code>interval</code> parameter.
 * @param maxRepetitions Maximum number of skipped repetitions.
 */
public RepeatGuardLogger(AcsLogger logger,long interval,TimeUnit timeUnit,int maxRepetitions){
  guard=new RepeatGuard(interval,timeUnit,maxRepetitions);
  this.logger=logger;
  logger.addLoggerClass(getClass());
}",0.574468085106383
134900,"public void actionPerformed(java.awt.event.ActionEvent e){
  jCloseButton.setEnabled(false);
  jStopButton.setEnabled(true);
  startSampleButton.setEnabled(false);
  getFreqTextField().setEnabled(false);
  getTimeSampTextField().setEnabled(false);
  toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
  startSample();
}","public void actionPerformed(java.awt.event.ActionEvent e){
  jCloseButton.setEnabled(false);
  jStopButton.setEnabled(true);
  startSampleButton.setEnabled(false);
  getFreqTextField().setEnabled(false);
  getTimeSampTextField().setEnabled(false);
  try {
    Integer.parseInt(getFreqTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getFreqTextField().setText(""String_Node_Str"");
  }
  toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
  startSample();
}",0.8101571946795647
134901,"private JTextField getFreqTextField(){
  if (freqTextField == null) {
    freqTextField=new JTextField();
    freqTextField.setText(""String_Node_Str"");
    freqTextField.setPreferredSize(new Dimension(50,19));
  }
  return freqTextField;
}","private JTextField getFreqTextField(){
  if (freqTextField == null) {
    freqTextField=new JTextField();
    freqTextField.setText(""String_Node_Str"");
    freqTextField.setPreferredSize(new Dimension(50,19));
    freqTextField.addFocusListener(new FocusListener(){
      public void focusGained(      FocusEvent e){
      }
      public void focusLost(      FocusEvent e){
        if (!freqTextField.getText().matches(""String_Node_Str"")) {
          JOptionPane.showConfirmDialog(BeanGrouper.this,""String_Node_Str"" + freqTextField.getText() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,JOptionPane.WARNING_MESSAGE);
          freqTextField.setText(""String_Node_Str"");
          freqTextField.grabFocus();
        }
      }
    }
);
  }
  return freqTextField;
}",0.4294117647058823
134902,"private JTextField getTimeSampTextField(){
  if (timeSampTextField == null) {
    timeSampTextField=new JTextField();
    timeSampTextField.setText(""String_Node_Str"");
    timeSampTextField.setPreferredSize(new Dimension(50,19));
  }
  return timeSampTextField;
}","private JTextField getTimeSampTextField(){
  if (timeSampTextField == null) {
    timeSampTextField=new JTextField();
    timeSampTextField.setText(""String_Node_Str"");
    timeSampTextField.setPreferredSize(new Dimension(50,19));
    timeSampTextField.addFocusListener(new FocusListener(){
      public void focusGained(      FocusEvent e){
      }
      public void focusLost(      FocusEvent e){
        if (!timeSampTextField.getText().matches(""String_Node_Str"")) {
          JOptionPane.showConfirmDialog(BeanGrouper.this,""String_Node_Str"" + timeSampTextField.getText() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,JOptionPane.WARNING_MESSAGE);
          timeSampTextField.setText(""String_Node_Str"");
          timeSampTextField.grabFocus();
        }
      }
    }
);
  }
  return timeSampTextField;
}",0.4393382352941176
134903,"/** 
 * Method to begin the sampling of all the samples contained in the class.
 */
private void startSample(){
  int freq=100;
  setjLabel(""String_Node_Str"" + toFile.getFileName());
  try {
    freq=Integer.parseInt(getFreqTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getFreqTextField().setText(""String_Node_Str"");
  }
  for (  DataPrinter wp : samplers) {
    wp.setFrecuency(freq);
    try {
      wp.startSample();
      isStopped=false;
    }
 catch (    alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
catch (    alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
  }
  if (isStopped) {
    jCloseButton.setEnabled(true);
    jStopButton.setEnabled(false);
    startSampleButton.setEnabled(true);
    return;
  }
  int mins=0;
  try {
    mins=Integer.parseInt(getTimeSampTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getTimeSampTextField().setText(""String_Node_Str"");
  }
  if (mins != 0)   new Watchdog(mins).start();
}","/** 
 * Method to begin the sampling of all the samples contained in the class.
 */
private void startSample(){
  int freq=0;
  try {
    freq=Integer.parseInt(getFreqTextField().getText());
  }
 catch (  NumberFormatException ex) {
  }
  setjLabel(""String_Node_Str"" + toFile.getFileName());
  freq=Integer.parseInt(getFreqTextField().getText());
  for (  DataPrinter wp : samplers) {
    wp.setFrecuency(freq);
    try {
      wp.startSample();
      isStopped=false;
    }
 catch (    alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
catch (    alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
  }
  if (isStopped) {
    jCloseButton.setEnabled(true);
    jStopButton.setEnabled(false);
    startSampleButton.setEnabled(true);
    freqTextField.setEnabled(true);
    timeSampTextField.setEnabled(true);
    return;
  }
  int mins=0;
  try {
    mins=Integer.parseInt(getTimeSampTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getTimeSampTextField().setText(""String_Node_Str"");
  }
  if (mins != 0)   new Watchdog(mins).start();
}",0.8859649122807017
134904,"/** 
 * This method initializes startSampleButton	
 * @return javax.swing.JButton	
 */
private JButton getStartSampleButton(){
  if (startSampleButton == null) {
    startSampleButton=new JButton();
    startSampleButton.setText(""String_Node_Str"");
    startSampleButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        jCloseButton.setEnabled(false);
        jStopButton.setEnabled(true);
        startSampleButton.setEnabled(false);
        getFreqTextField().setEnabled(false);
        getTimeSampTextField().setEnabled(false);
        toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
        startSample();
      }
    }
);
  }
  return startSampleButton;
}","/** 
 * This method initializes startSampleButton	
 * @return javax.swing.JButton	
 */
private JButton getStartSampleButton(){
  if (startSampleButton == null) {
    startSampleButton=new JButton();
    startSampleButton.setText(""String_Node_Str"");
    startSampleButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        jCloseButton.setEnabled(false);
        jStopButton.setEnabled(true);
        startSampleButton.setEnabled(false);
        getFreqTextField().setEnabled(false);
        getTimeSampTextField().setEnabled(false);
        try {
          Integer.parseInt(getFreqTextField().getText());
        }
 catch (        NumberFormatException ex) {
          getFreqTextField().setText(""String_Node_Str"");
        }
        toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
        startSample();
      }
    }
);
  }
  return startSampleButton;
}",0.8878558977338756
134905,"public void initialize(int freq){
  if (group == ""String_Node_Str"")   filename=""String_Node_Str"" + 10000000L / freq + ""String_Node_Str"" + Calendar.getInstance().getTimeInMillis();
 else   filename=group + ""String_Node_Str"" + 10000000L / freq + ""String_Node_Str"" + Calendar.getInstance().getTimeInMillis();
}","public void initialize(int freq){
  IsoDateFormat fo=new IsoDateFormat();
  if (group == ""String_Node_Str"")   filename=""String_Node_Str"" + 10000000L / freq + ""String_Node_Str"" + fo.format(new Date()) + ""String_Node_Str"";
 else   filename=group + ""String_Node_Str"" + 10000000L / freq + ""String_Node_Str"" + fo.format(new Date()) + ""String_Node_Str"";
}",0.698170731707317
134906,"public void dumpToFile(long frequency,double prec){
  long timestamp=data.get(0).get(0).getTime();
  boolean done=false;
  frequency=10000000L / frequency;
  long w=(long)(frequency * prec);
  c=new int[data.size()];
  openFile();
  try {
    writer.write(header + ""String_Node_Str"");
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  while (!done) {
    String line=""String_Node_Str"" + timestamp;
    boolean dataPresent=true;
    for (int i=0; i < data.size(); i++) {
      dataPresent=false;
      if (c[i] == data.get(i).size()) {
        line+=""String_Node_Str"";
        continue;
      }
      DataItem item=data.get(i).get(c[i]);
      if ((item.getTime() >= (timestamp - w)) && (item.getTime() <= (timestamp + w))) {
        line+=""String_Node_Str"" + item.getValue();
        c[i]++;
        dataPresent=true;
      }
 else       if ((item.getTime() >= (timestamp + w)) && (item.getTime() <= (timestamp + frequency - w))) {
        line+=""String_Node_Str"";
        c[i]++;
      }
 else       line+=""String_Node_Str"";
    }
    try {
      if (dataPresent) {
        writer.write(line + ""String_Node_Str"");
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    int flag=0;
    for (int i=0; i < c.length; i++) {
      if (c[i] == data.get(i).size())       flag++;
    }
    if (flag == c.length)     done=true;
    timestamp+=frequency;
  }
  try {
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void dumpToFile(long frequency,double prec){
  IsoDateFormat formater=new IsoDateFormat();
  long timestamp=data.get(0).get(0).getTime();
  boolean done=false;
  frequency=10000000L / frequency;
  long w=(long)(frequency * prec);
  c=new int[data.size()];
  openFile();
  try {
    writer.write(header + ""String_Node_Str"");
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  while (!done) {
    String line=""String_Node_Str"" + formater.format(new Date(UTCUtility.utcOmgToJava(timestamp)));
    boolean dataPresent=true;
    for (int i=0; i < data.size(); i++) {
      dataPresent=false;
      if (c[i] == data.get(i).size()) {
        line+=""String_Node_Str"";
        continue;
      }
      DataItem item=data.get(i).get(c[i]);
      if ((item.getTime() >= (timestamp - w)) && (item.getTime() <= (timestamp + w))) {
        line+=""String_Node_Str"" + item.getValue();
        c[i]++;
        dataPresent=true;
      }
 else       if ((item.getTime() >= (timestamp + w)) && (item.getTime() <= (timestamp + frequency - w))) {
        line+=""String_Node_Str"";
        c[i]++;
      }
 else       line+=""String_Node_Str"";
    }
    try {
      if (dataPresent) {
        writer.write(line + ""String_Node_Str"");
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    int flag=0;
    for (int i=0; i < c.length; i++) {
      if (c[i] == data.get(i).size())       flag++;
    }
    if (flag == c.length)     done=true;
    timestamp+=frequency;
  }
  try {
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9620170268500328
134907,"public static void initializeComponents(){
  List<String> listTmp=new ArrayList<String>();
  compList=info.getCManager().getComponentsName();
  cServices=info.getContainerServices();
  for (int i=0; i < compList.length; i++) {
    try {
      ComponentDescriptor c=cServices.getComponentDescriptor(compList[i]);
      if (c.getType().equals(SAMP_MAN_IFACE)) {
        sampManList.add(c.getName());
        info.getContainerServices().getLogger().info(""String_Node_Str"" + c.getName());
      }
 else {
        listTmp.add(compList[i]);
        cDescriptorList.add(c);
        propList.add(null);
      }
    }
 catch (    AcsJContainerServicesEx e) {
      e.getMessage();
    }
  }
  compList=new String[listTmp.size()];
  compList=listTmp.toArray(compList);
  Arrays.sort(compList);
}","public static void initializeComponents(){
  try {
    info=AcsInformation.getInstance(NAME);
  }
 catch (  AcsInformationException e1) {
    e1.printStackTrace();
  }
  List<String> listTmp=new ArrayList<String>();
  compList=info.getCManager().getComponentsName();
  cServices=info.getContainerServices();
  for (int i=0; i < compList.length; i++) {
    try {
      ComponentDescriptor c=cServices.getComponentDescriptor(compList[i]);
      if (c.getType().equals(SAMP_MAN_IFACE)) {
        sampManList.add(c.getName());
        info.getContainerServices().getLogger().info(""String_Node_Str"" + c.getName());
      }
 else {
        listTmp.add(compList[i]);
        cDescriptorList.add(c);
        propList.add(null);
      }
    }
 catch (    AcsJContainerServicesEx e) {
      e.getMessage();
    }
  }
  compList=new String[listTmp.size()];
  compList=listTmp.toArray(compList);
  Arrays.sort(compList);
}",0.9262536873156342
134908,"public static void main(String[] args){
  window=new SamplingSystemGUI();
  try {
    spinUp(NAME,window.MAN_NAME);
    initializeComponents();
  }
 catch (  AcsInformationException e) {
    e.printStackTrace();
  }
catch (  SamplingManagerException e) {
    e.printStackTrace();
  }
  window.loadWindow();
  window.fillWidgets(getComponents(),propList);
  try {
    tearDown();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  window=new SamplingSystemGUI();
  try {
    initializeComponents();
    if (sampManList.size() == 0) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      System.exit(1);
    }
    spinUp(NAME,sampManList.getFirst());
  }
 catch (  AcsInformationException e) {
    e.printStackTrace();
  }
catch (  SamplingManagerException e) {
    e.printStackTrace();
  }
  window.loadWindow();
  window.fillWidgets(getComponents(),propList);
  try {
    tearDown();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.7259395050412466
134909,"public void loadWindow(){
  System.out.println(SampTool.getSamplingManagers().length);
  String s=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,(Object[])SampTool.getSamplingManagers(),MAN_NAME);
  if (s != null && !s.trim().equals(""String_Node_Str""))   this.MAN_NAME=s;
  this.setVisible(true);
  this.validate();
  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.addWindowListener(new java.awt.event.WindowAdapter(){
    public void windowClosing(    java.awt.event.WindowEvent e){
      if (status != null) {
        writeStatusFile();
      }
    }
  }
);
  readStatusFile(true);
}","public void loadWindow(){
  System.out.println(SampTool.getSamplingManagers().length);
  String s=(String)JOptionPane.showInputDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,(Object[])SampTool.getSamplingManagers(),MAN_NAME);
  if (s != null && !s.trim().equals(""String_Node_Str""))   this.MAN_NAME=s;
 else   System.exit(0);
  this.setVisible(true);
  this.validate();
  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.addWindowListener(new java.awt.event.WindowAdapter(){
    public void windowClosing(    java.awt.event.WindowEvent e){
      if (status != null) {
        writeStatusFile();
      }
    }
  }
);
  readStatusFile(true);
}",0.9821162444113264
134910,"public void actionPerformed(java.awt.event.ActionEvent e){
  jCloseButton.setEnabled(false);
  jStopButton.setEnabled(true);
  startSampleButton.setEnabled(false);
  getFreqTextField().setEnabled(false);
  getTimeSampTextField().setEnabled(false);
  toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
  startSample();
}","public void actionPerformed(java.awt.event.ActionEvent e){
  jCloseButton.setEnabled(false);
  jStopButton.setEnabled(true);
  startSampleButton.setEnabled(false);
  getFreqTextField().setEnabled(false);
  getTimeSampTextField().setEnabled(false);
  try {
    Integer.parseInt(getFreqTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getFreqTextField().setText(""String_Node_Str"");
  }
  toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
  startSample();
}",0.8101571946795647
134911,"private JTextField getFreqTextField(){
  if (freqTextField == null) {
    freqTextField=new JTextField();
    freqTextField.setText(""String_Node_Str"");
    freqTextField.setPreferredSize(new Dimension(50,19));
  }
  return freqTextField;
}","private JTextField getFreqTextField(){
  if (freqTextField == null) {
    freqTextField=new JTextField();
    freqTextField.setText(""String_Node_Str"");
    freqTextField.setPreferredSize(new Dimension(50,19));
    freqTextField.addFocusListener(new FocusListener(){
      public void focusGained(      FocusEvent e){
      }
      public void focusLost(      FocusEvent e){
        if (!freqTextField.getText().matches(""String_Node_Str"")) {
          JOptionPane.showConfirmDialog(BeanGrouper.this,""String_Node_Str"" + freqTextField.getText() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,JOptionPane.WARNING_MESSAGE);
          freqTextField.setText(""String_Node_Str"");
          freqTextField.grabFocus();
        }
      }
    }
);
  }
  return freqTextField;
}",0.4294117647058823
134912,"private JTextField getTimeSampTextField(){
  if (timeSampTextField == null) {
    timeSampTextField=new JTextField();
    timeSampTextField.setText(""String_Node_Str"");
    timeSampTextField.setPreferredSize(new Dimension(50,19));
  }
  return timeSampTextField;
}","private JTextField getTimeSampTextField(){
  if (timeSampTextField == null) {
    timeSampTextField=new JTextField();
    timeSampTextField.setText(""String_Node_Str"");
    timeSampTextField.setPreferredSize(new Dimension(50,19));
    timeSampTextField.addFocusListener(new FocusListener(){
      public void focusGained(      FocusEvent e){
      }
      public void focusLost(      FocusEvent e){
        if (!timeSampTextField.getText().matches(""String_Node_Str"")) {
          JOptionPane.showConfirmDialog(BeanGrouper.this,""String_Node_Str"" + timeSampTextField.getText() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,JOptionPane.WARNING_MESSAGE);
          timeSampTextField.setText(""String_Node_Str"");
          timeSampTextField.grabFocus();
        }
      }
    }
);
  }
  return timeSampTextField;
}",0.4393382352941176
134913,"/** 
 * Method to begin the sampling of all the samples contained in the class.
 */
private void startSample(){
  int freq=100;
  setjLabel(""String_Node_Str"" + toFile.getFileName());
  try {
    freq=Integer.parseInt(getFreqTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getFreqTextField().setText(""String_Node_Str"");
  }
  for (  DataPrinter wp : samplers) {
    wp.setFrecuency(freq);
    try {
      wp.startSample();
      isStopped=false;
    }
 catch (    alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
catch (    alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
  }
  if (isStopped) {
    jCloseButton.setEnabled(true);
    jStopButton.setEnabled(false);
    startSampleButton.setEnabled(true);
    return;
  }
  int mins=0;
  try {
    mins=Integer.parseInt(getTimeSampTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getTimeSampTextField().setText(""String_Node_Str"");
  }
  if (mins != 0)   new Watchdog(mins).start();
}","/** 
 * Method to begin the sampling of all the samples contained in the class.
 */
private void startSample(){
  int freq=0;
  try {
    freq=Integer.parseInt(getFreqTextField().getText());
  }
 catch (  NumberFormatException ex) {
  }
  setjLabel(""String_Node_Str"" + toFile.getFileName());
  freq=Integer.parseInt(getFreqTextField().getText());
  for (  DataPrinter wp : samplers) {
    wp.setFrecuency(freq);
    try {
      wp.startSample();
      isStopped=false;
    }
 catch (    alma.ACSErrTypeCommon.CouldntAccessComponentEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
catch (    alma.ACSErrTypeCommon.TypeNotSupportedEx e) {
      wp.setComponentAvailable(false,""String_Node_Str"");
    }
  }
  if (isStopped) {
    jCloseButton.setEnabled(true);
    jStopButton.setEnabled(false);
    startSampleButton.setEnabled(true);
    freqTextField.setEnabled(true);
    timeSampTextField.setEnabled(true);
    return;
  }
  int mins=0;
  try {
    mins=Integer.parseInt(getTimeSampTextField().getText());
  }
 catch (  NumberFormatException ex) {
    getTimeSampTextField().setText(""String_Node_Str"");
  }
  if (mins != 0)   new Watchdog(mins).start();
}",0.8859649122807017
134914,"/** 
 * This method initializes startSampleButton	
 * @return javax.swing.JButton	
 */
private JButton getStartSampleButton(){
  if (startSampleButton == null) {
    startSampleButton=new JButton();
    startSampleButton.setText(""String_Node_Str"");
    startSampleButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        jCloseButton.setEnabled(false);
        jStopButton.setEnabled(true);
        startSampleButton.setEnabled(false);
        getFreqTextField().setEnabled(false);
        getTimeSampTextField().setEnabled(false);
        toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
        startSample();
      }
    }
);
  }
  return startSampleButton;
}","/** 
 * This method initializes startSampleButton	
 * @return javax.swing.JButton	
 */
private JButton getStartSampleButton(){
  if (startSampleButton == null) {
    startSampleButton=new JButton();
    startSampleButton.setText(""String_Node_Str"");
    startSampleButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        jCloseButton.setEnabled(false);
        jStopButton.setEnabled(true);
        startSampleButton.setEnabled(false);
        getFreqTextField().setEnabled(false);
        getTimeSampTextField().setEnabled(false);
        try {
          Integer.parseInt(getFreqTextField().getText());
        }
 catch (        NumberFormatException ex) {
          getFreqTextField().setText(""String_Node_Str"");
        }
        toFile.initialize(Integer.parseInt(getFreqTextField().getText()));
        startSample();
      }
    }
);
  }
  return startSampleButton;
}",0.8878558977338756
134915,"/** 
 * Remove the oldest entry in the container
 * @return The removed item
 * @throws AlarmContainerException If the container is empty
 */
public synchronized AlarmTableEntry removeOldest() throws AlarmContainerException {
  if (index.size() == 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  String ID=index.remove(index.size() - 1);
  if (ID == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  AlarmTableEntry ret=entries.remove(ID);
  if (ret == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  indexWithReduction.remove(ID);
  return ret;
}","/** 
 * Remove the oldest entry in the container
 * @return The removed item
 * @throws AlarmContainerException If the container is empty
 */
public synchronized AlarmTableEntry removeOldest() throws AlarmContainerException {
  if (index.size() == 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  String ID=index.remove(0);
  if (ID == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  AlarmTableEntry ret=entries.remove(ID);
  if (ret == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  indexWithReduction.remove(ID);
  return ret;
}",0.9858921161825728
134916,"/** 
 * Remove the entry for the passed alarm
 * @param alarm The alarm whose entry must be removed
 * @throws AlarmContainerException If the alarm is not in the container
 */
public synchronized void remove(Alarm alarm) throws AlarmContainerException {
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String ID=alarm.getAlarmId();
  int pos=index.indexOf(ID);
  if (pos < 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  index.remove(pos);
  indexWithReduction.remove(pos);
  AlarmTableEntry oldEntry=entries.remove(ID);
  if (oldEntry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Remove the entry for the passed alarm
 * @param alarm The alarm whose entry must be removed
 * @throws AlarmContainerException If the alarm is not in the container
 */
public synchronized void remove(Alarm alarm) throws AlarmContainerException {
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String ID=alarm.getAlarmId();
  int pos=index.indexOf(ID);
  if (pos < 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  index.remove(pos);
  pos=indexWithReduction.indexOf(ID);
  if (pos >= 0) {
    indexWithReduction.remove(pos);
  }
  AlarmTableEntry oldEntry=entries.remove(ID);
  if (oldEntry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9557142857142856
134917,"/** 
 * Remove the oldest entry in the container
 * @return The removed item
 * @throws AlarmContainerException If the container is empty
 */
public synchronized AlarmTableEntry removeOldest() throws AlarmContainerException {
  if (index.size() == 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  String ID=index.remove(index.size() - 1);
  if (ID == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  AlarmTableEntry ret=entries.remove(ID);
  if (ret == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  indexWithReduction.remove(ID);
  return ret;
}","/** 
 * Remove the oldest entry in the container
 * @return The removed item
 * @throws AlarmContainerException If the container is empty
 */
public synchronized AlarmTableEntry removeOldest() throws AlarmContainerException {
  if (index.size() == 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  String ID=index.remove(0);
  if (ID == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  AlarmTableEntry ret=entries.remove(ID);
  if (ret == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  indexWithReduction.remove(ID);
  return ret;
}",0.9858921161825728
134918,"/** 
 * Remove the entry for the passed alarm
 * @param alarm The alarm whose entry must be removed
 * @throws AlarmContainerException If the alarm is not in the container
 */
public synchronized void remove(Alarm alarm) throws AlarmContainerException {
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String ID=alarm.getAlarmId();
  int pos=index.indexOf(ID);
  if (pos < 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  index.remove(pos);
  indexWithReduction.remove(pos);
  AlarmTableEntry oldEntry=entries.remove(ID);
  if (oldEntry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Remove the entry for the passed alarm
 * @param alarm The alarm whose entry must be removed
 * @throws AlarmContainerException If the alarm is not in the container
 */
public synchronized void remove(Alarm alarm) throws AlarmContainerException {
  if (alarm == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String ID=alarm.getAlarmId();
  int pos=index.indexOf(ID);
  if (pos < 0) {
    throw new AlarmContainerException(""String_Node_Str"");
  }
  index.remove(pos);
  pos=indexWithReduction.indexOf(ID);
  if (pos >= 0) {
    indexWithReduction.remove(pos);
  }
  AlarmTableEntry oldEntry=entries.remove(ID);
  if (oldEntry == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9557142857142856
134919,"private void stopSample(){
  isStopped=true;
  jStopButton.setEnabled(false);
  startSampleButton.setEnabled(true);
  String header=""String_Node_Str"";
  for (  DataPrinter i : samplers) {
    i.stopSampling();
    if (i.isComponentAvailable() == true)     toFile.addSamplingSet(i.getSamples());
    header+=""String_Node_Str"" + i.getComponent() + ""String_Node_Str""+ i.getProperty();
  }
  toFile.setHeaderFile(header);
  toFile.dumpToFile(Integer.parseInt(getFreqTextField().getText()));
}","private void stopSample(){
  isStopped=true;
  jStopButton.setEnabled(false);
  startSampleButton.setEnabled(true);
  String header=""String_Node_Str"";
  toFile.removeSamplingSets();
  for (  DataPrinter i : samplers) {
    i.stopSampling();
    if (i.isComponentAvailable() == true) {
      toFile.addSamplingSet(i.getSamples());
      header+=""String_Node_Str"" + i.getComponent() + ""String_Node_Str""+ i.getProperty();
    }
  }
  toFile.setHeaderFile(header);
  toFile.dumpToFile(Integer.parseInt(getFreqTextField().getText()));
}",0.873405299313052
134920,"/** 
 * This is the default constructor
 */
public BeanGrouper(SamplingSystemGUI ssg){
  super();
  this.ssg=ssg;
  toFile=new FileHelper();
  initialize();
}","/** 
 * This is the overloaded constructor that allows to save the Sampling Group name
 */
public BeanGrouper(SamplingSystemGUI ssg,String group){
  super();
  this.ssg=ssg;
  toFile=new FileHelper();
  toFile.setFilePrefix(group);
  initialize();
}",0.7518427518427518
134921,"private JButton getStopButton(){
  if (jStopButton == null) {
    jStopButton=new JButton(""String_Node_Str"");
    jStopButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      ActionEvent arg0){
        jCloseButton.setEnabled(true);
        stopSample();
        jStopButton.setEnabled(false);
      }
    }
);
  }
  return jStopButton;
}","private JButton getStopButton(){
  if (jStopButton == null) {
    jStopButton=new JButton(""String_Node_Str"");
    jStopButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      ActionEvent arg0){
        jCloseButton.setEnabled(true);
        stopSample();
        timeSampTextField.setEnabled(true);
        freqTextField.setEnabled(true);
        jStopButton.setEnabled(false);
      }
    }
);
  }
  return jStopButton;
}",0.8755868544600939
134922,"private JButton getCloseSamplingButton(){
  if (jCloseButton == null) {
    jCloseButton=new JButton();
    jCloseButton.setText(""String_Node_Str"");
    jCloseButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (!isStopped)         stopSample();
        ssg.deleteFromStatus(samplers,getCheckName());
        Container dad=BeanGrouper.this.getParent();
        dad.remove(BeanGrouper.this);
        dad.repaint();
        dad.validate();
      }
    }
);
  }
  return jCloseButton;
}","private JButton getCloseSamplingButton(){
  if (jCloseButton == null) {
    jCloseButton=new JButton();
    jCloseButton.setText(""String_Node_Str"");
    jCloseButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (!isStopped)         stopSample();
        ssg.deleteFromStatus(samplers,getCheckName());
        Container dad=BeanGrouper.this.getParent();
        dad.remove(BeanGrouper.this);
        dad.repaint();
        dad.validate();
        dad.getParent().validate();
      }
    }
);
  }
  return jCloseButton;
}",0.9680284191829484
134923,"public FileHelper(){
  data=new ArrayList<ArrayList<DataItem>>();
}","public FileHelper(String group){
  data=new ArrayList<ArrayList<DataItem>>();
  this.group=group;
}",0.8072289156626506
134924,"public void initialize(int freq){
  filename=""String_Node_Str"" + 10000000L / freq + ""String_Node_Str"" + Calendar.getInstance().getTimeInMillis();
}","public void initialize(int freq){
  if (group == ""String_Node_Str"")   filename=""String_Node_Str"" + 10000000L / freq + ""String_Node_Str"" + Calendar.getInstance().getTimeInMillis();
 else   filename=group + ""String_Node_Str"" + 10000000L / freq + ""String_Node_Str"" + Calendar.getInstance().getTimeInMillis();
}",0.6475770925110133
134925,"public void dumpToFile(long frequency,double prec){
  long timestamp=data.get(0).get(0).getTime();
  boolean done=false;
  frequency=10000000L / frequency;
  long w=(long)(frequency * prec);
  c=new int[data.size()];
  openFile();
  try {
    writer.write(header + ""String_Node_Str"");
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  while (!done) {
    String line=""String_Node_Str"" + timestamp;
    for (int i=0; i < data.size(); i++) {
      if (c[i] == data.get(i).size()) {
        line+=""String_Node_Str"";
        continue;
      }
      DataItem item=data.get(i).get(c[i]);
      if ((item.getTime() >= (timestamp - w)) && (item.getTime() <= (timestamp + w))) {
        line+=""String_Node_Str"" + item.getValue();
        c[i]++;
      }
 else       if ((item.getTime() >= (timestamp + w)) && (item.getTime() <= (timestamp + frequency - w))) {
        line+=""String_Node_Str"";
        c[i]++;
      }
 else       line+=""String_Node_Str"";
    }
    try {
      writer.write(line + ""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    int flag=0;
    for (int i=0; i < c.length; i++) {
      if (c[i] == data.get(i).size())       flag++;
    }
    if (flag == c.length)     done=true;
    timestamp+=frequency;
  }
  try {
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void dumpToFile(long frequency,double prec){
  long timestamp=data.get(0).get(0).getTime();
  boolean done=false;
  frequency=10000000L / frequency;
  long w=(long)(frequency * prec);
  c=new int[data.size()];
  openFile();
  try {
    writer.write(header + ""String_Node_Str"");
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  while (!done) {
    String line=""String_Node_Str"" + timestamp;
    boolean dataPresent=true;
    for (int i=0; i < data.size(); i++) {
      dataPresent=false;
      if (c[i] == data.get(i).size()) {
        line+=""String_Node_Str"";
        continue;
      }
      DataItem item=data.get(i).get(c[i]);
      if ((item.getTime() >= (timestamp - w)) && (item.getTime() <= (timestamp + w))) {
        line+=""String_Node_Str"" + item.getValue();
        c[i]++;
        dataPresent=true;
      }
 else       if ((item.getTime() >= (timestamp + w)) && (item.getTime() <= (timestamp + frequency - w))) {
        line+=""String_Node_Str"";
        c[i]++;
      }
 else       line+=""String_Node_Str"";
    }
    try {
      if (dataPresent) {
        writer.write(line + ""String_Node_Str"");
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    int flag=0;
    for (int i=0; i < c.length; i++) {
      if (c[i] == data.get(i).size())       flag++;
    }
    if (flag == c.length)     done=true;
    timestamp+=frequency;
  }
  try {
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9591549295774648
134926,"/** 
 * In memory printer postProcesing do nothing with sampled data stored,  they will be destroyed in object destruction.
 */
public void postProcessing(){
}","/** 
 * In memory printer postProcesing do nothing with sampled data stored,  they will be destroyed in object destruction.
 */
public void postProcessing(){
  widget.resetSampleCount();
}",0.9164265129682996
134927,"private boolean addToSampling(String component,String property,String group){
  boolean added;
  BeanGrouper bg=groupExists(group);
  if (bg == null) {
    bg=new BeanGrouper(this);
    bg.setCheckName(group);
    bg.addSamp(component,property);
    jPanel21.add(bg,""String_Node_Str"");
    added=true;
  }
 else {
    if (bg.checkIfExists(component,property)) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"" + component + ""String_Node_Str""+ property+ ""String_Node_Str""+ bg.getCheckName(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      added=false;
    }
 else {
      bg.addSamp(component,property);
      added=true;
    }
  }
  jPanel21.validate();
  return added;
}","private boolean addToSampling(String component,String property,String group){
  boolean added;
  BeanGrouper bg=groupExists(group);
  if (bg == null) {
    bg=new BeanGrouper(this,group);
    bg.setCheckName(group);
    bg.addSamp(component,property);
    jPanel21.add(bg,""String_Node_Str"");
    added=true;
  }
 else {
    if (bg.checkIfExists(component,property)) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"" + component + ""String_Node_Str""+ property+ ""String_Node_Str""+ bg.getCheckName(),""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      added=false;
    }
 else {
      bg.addSamp(component,property);
      added=true;
    }
  }
  jPanel21.validate();
  jScrollPane.validate();
  return added;
}",0.9772727272727272
134928,"/** 
 * This method initializes addSampleButton	
 * @return javax.swing.JButton	
 */
private JButton getAddSampleButton(){
  if (addSampleButton == null) {
    addSampleButton=new JButton();
    addSampleButton.setPreferredSize(new Dimension(120,24));
    addSampleButton.setText(""String_Node_Str"");
    addSampleButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        if (jTextField.getText().equalsIgnoreCase(""String_Node_Str""))         return;
        String component=ComponentBox1.getSelectedItem().toString();
        String property=PropertyBox1.getSelectedItem().toString();
        String group=jTextField.getText();
        SerializableProperty p=new SerializableProperty();
        p.setComponent(component);
        p.setProperty(property);
        p.setSamplingGroup(group);
        if (status == null)         status=new ArrayList<SerializableProperty>();
        if (addToSampling(component,property,group))         status.add(p);
      }
    }
);
  }
  return addSampleButton;
}","/** 
 * This method initializes addSampleButton	
 * @return javax.swing.JButton	
 */
private JButton getAddSampleButton(){
  if (addSampleButton == null) {
    addSampleButton=new JButton();
    addSampleButton.setPreferredSize(new Dimension(120,24));
    addSampleButton.setText(""String_Node_Str"");
    addSampleButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        if (jTextField.getText().trim().equalsIgnoreCase(""String_Node_Str""))         return;
        String component=ComponentBox1.getSelectedItem().toString();
        String property=PropertyBox1.getSelectedItem().toString();
        String group=jTextField.getText();
        SerializableProperty p=new SerializableProperty();
        p.setComponent(component);
        p.setProperty(property);
        p.setSamplingGroup(group);
        if (status == null)         status=new ArrayList<SerializableProperty>();
        if (addToSampling(component,property,group))         status.add(p);
      }
    }
);
  }
  return addSampleButton;
}",0.9967667436489608
134929,"/** 
 * This method initializes jTextField	
 * @return javax.swing.JTextField	
 */
private JTextField getJTextField(){
  if (jTextField == null) {
    jTextField=new JTextField();
    jTextField.setPreferredSize(new Dimension(100,19));
    jTextField.setToolTipText(""String_Node_Str"");
    jTextField.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    jTextField.setHorizontalAlignment(JTextField.CENTER);
    jTextField.setText(""String_Node_Str"");
  }
  return jTextField;
}","/** 
 * This method initializes jTextField	
 * @return javax.swing.JTextField	
 */
private JTextField getJTextField(){
  if (jTextField == null) {
    jTextField=new JTextField();
    jTextField.setPreferredSize(new Dimension(100,19));
    jTextField.setToolTipText(""String_Node_Str"");
    jTextField.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    jTextField.setHorizontalAlignment(JTextField.LEFT);
    jTextField.setText(""String_Node_Str"");
    jTextField.addFocusListener(new FocusListener(){
      public void focusGained(      FocusEvent e){
      }
      public void focusLost(      FocusEvent e){
        if (!jTextField.getText().matches(""String_Node_Str"")) {
          JOptionPane.showConfirmDialog(SamplingSystemGUI.this,""String_Node_Str"" + jTextField.getText() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,JOptionPane.WARNING_MESSAGE);
          jTextField.setText(""String_Node_Str"");
          jTextField.grabFocus();
        }
      }
    }
);
  }
  return jTextField;
}",0.6229290921139827
134930,"/** 
 * This method initializes jMenuItem	
 * @return javax.swing.JMenuItem	
 */
private JMenuItem getJMenuItem(){
  if (jMenuItem == null) {
    jMenuItem=new JMenuItem();
    jMenuItem.setText(""String_Node_Str"");
    jMenuItem.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        JFileChooser chooser=new JFileChooser();
        int returnVal=chooser.showSaveDialog(cl.utfsm.samplingSystemUI.SamplingSystemGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
          writeStatusFile(chooser.getSelectedFile().getAbsolutePath());
        }
      }
    }
);
  }
  return jMenuItem;
}","/** 
 * This method initializes jMenuItem	
 * @return javax.swing.JMenuItem	
 */
private JMenuItem getJMenuItem(){
  if (jMenuItem == null) {
    jMenuItem=new JMenuItem();
    jMenuItem.setText(""String_Node_Str"");
    jMenuItem.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent e){
        JFileChooser chooser=new JFileChooser();
        int returnVal=chooser.showSaveDialog(cl.utfsm.samplingSystemUI.SamplingSystemGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
          writeStatusFile(chooser.getSelectedFile().getAbsolutePath() + ""String_Node_Str"");
        }
      }
    }
);
  }
  return jMenuItem;
}",0.9855072463768116
134931,"private void stopSample(){
  isStopped=true;
  jStopButton.setEnabled(false);
  startSampleButton.setEnabled(true);
  String header=""String_Node_Str"";
  for (  DataPrinter i : samplers) {
    i.stopSampling();
    if (i.isComponentAvailable() == true)     toFile.addSamplingSet(i.getSamples());
    header+=""String_Node_Str"" + i.getComponent() + ""String_Node_Str""+ i.getProperty();
  }
  toFile.setHeaderFile(header);
  toFile.dumpToFile(Integer.parseInt(getFreqTextField().getText()));
}","private void stopSample(){
  isStopped=true;
  jStopButton.setEnabled(false);
  startSampleButton.setEnabled(true);
  String header=""String_Node_Str"";
  toFile.removeSamplingSets();
  for (  DataPrinter i : samplers) {
    i.stopSampling();
    if (i.isComponentAvailable() == true) {
      toFile.addSamplingSet(i.getSamples());
      header+=""String_Node_Str"" + i.getComponent() + ""String_Node_Str""+ i.getProperty();
    }
  }
  toFile.setHeaderFile(header);
  toFile.dumpToFile(Integer.parseInt(getFreqTextField().getText()));
}",0.873405299313052
134932,"/** 
 * This is the default constructor
 */
public BeanGrouper(SamplingSystemGUI ssg){
  super();
  this.ssg=ssg;
  toFile=new FileHelper();
  initialize();
}","/** 
 * This is the overloaded constructor that allows to save the Sampling Group name
 */
public BeanGrouper(SamplingSystemGUI ssg,String group){
  super();
  this.ssg=ssg;
  toFile=new FileHelper();
  toFile.setFilePrefix(group);
  initialize();
}",0.7518427518427518
134933,"private JButton getStopButton(){
  if (jStopButton == null) {
    jStopButton=new JButton(""String_Node_Str"");
    jStopButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      ActionEvent arg0){
        jCloseButton.setEnabled(true);
        stopSample();
        jStopButton.setEnabled(false);
      }
    }
);
  }
  return jStopButton;
}","private JButton getStopButton(){
  if (jStopButton == null) {
    jStopButton=new JButton(""String_Node_Str"");
    jStopButton.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      ActionEvent arg0){
        jCloseButton.setEnabled(true);
        stopSample();
        timeSampTextField.setEnabled(true);
        freqTextField.setEnabled(true);
        jStopButton.setEnabled(false);
      }
    }
);
  }
  return jStopButton;
}",0.8755868544600939
134934,"private JButton getCloseSamplingButton(){
  if (jCloseButton == null) {
    jCloseButton=new JButton();
    jCloseButton.setText(""String_Node_Str"");
    jCloseButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (!isStopped)         stopSample();
        ssg.deleteFromStatus(samplers,getCheckName());
        Container dad=BeanGrouper.this.getParent();
        dad.remove(BeanGrouper.this);
        dad.repaint();
        dad.validate();
      }
    }
);
  }
  return jCloseButton;
}","private JButton getCloseSamplingButton(){
  if (jCloseButton == null) {
    jCloseButton=new JButton();
    jCloseButton.setText(""String_Node_Str"");
    jCloseButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (!isStopped)         stopSample();
        ssg.deleteFromStatus(samplers,getCheckName());
        Container dad=BeanGrouper.this.getParent();
        dad.remove(BeanGrouper.this);
        dad.repaint();
        dad.validate();
        dad.getParent().validate();
      }
    }
);
  }
  return jCloseButton;
}",0.9680284191829484
134935,"/** 
 * Generate a random collection of keys. The size of the collection can be random or fixed. If it is random then the exact parameter must be false; in that case the number of elements returned is limited by size (inclusive) The number of elements in the collection is fixed if the exact parameter is true; in that case the number of elements returned is specified in size. If the size is random, the returned collection can be empty. If common is not null, each generated key must also be present in common. For this to work, the size of common is an upper limit for the size of the  returned collection.
 * @param size The upper limit of the number of elements in the collection or the number of elements in the returned collection depending on the value of the exact parameter 
 * @param exact If true the size of the returned collection is equal tosize otherwise size is the maximum limit
 * @param minValue The minimum allowed value of the keys in the collection (inclusive)
 * @param maxValue The maximum allowed value of the keys in the collection (inclusive)
 * @param common A collection of keys They key in the returned collection must be present in common too If common is null the keys are generated without constraints 
 * @return A posible empty collection of keys
 */
public static Collection<Integer> generateKeys(int size,boolean exact,int minValue,int maxValue,Collection<Integer> common){
  if (size <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue < 0 && maxValue < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue >= maxValue) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact && size > common.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int desiredLength=0;
  Random rnd=new Random(System.currentTimeMillis());
  if (!exact) {
    while (desiredLength == 0) {
      desiredLength=rnd.nextInt(size + 1);
    }
  }
 else {
    desiredLength=size;
  }
  if (maxValue - minValue + 1 < desiredLength) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Vector<Integer> v=new Vector<Integer>(desiredLength);
  if (desiredLength == common.size()) {
    for (    Integer key : common) {
      v.add(key);
    }
  }
 else {
    Integer key=-1;
    while (v.size() < desiredLength) {
      while (key < minValue || key > maxValue) {
        key=rnd.nextInt(maxValue + 1);
        if ((common != null && !common.contains(key)) || v.contains(key)) {
          key=-1;
        }
      }
      v.add(key);
      key=-1;
    }
  }
  return v;
}","/** 
 * Generate a random collection of keys. The size of the collection can be random or fixed. If it is random then the exact parameter must be false; in that case the number of elements returned is limited by size (inclusive) The number of elements in the collection is fixed if the exact parameter is true; in that case the number of elements returned is specified in size. If the size is random, the returned collection can be empty. If common is not null, each generated key must also be present in common. For this to work, the size of common is an upper limit for the size of the  returned collection.
 * @param size The upper limit of the number of elements in the collection or the number of elements in the returned collection depending on the value of the exact parameter 
 * @param exact If true the size of the returned collection is equal tosize otherwise size is the maximum limit
 * @param minValue The minimum allowed value of the keys in the collection (inclusive)
 * @param maxValue The maximum allowed value of the keys in the collection (inclusive)
 * @param common A collection of keys They key in the returned collection must be present in common too If common is null the keys are generated without constraints 
 * @return A posible empty collection of keys
 */
public static Collection<Integer> generateKeys(int size,boolean exact,int minValue,int maxValue,Collection<Integer> common){
  if (size <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue < 0 && maxValue < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue >= maxValue) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact && size > common.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int desiredLength=0;
  Random rnd=new Random(System.currentTimeMillis());
  if (!exact) {
    while (desiredLength == 0 || (maxValue - minValue + 1 < desiredLength)) {
      desiredLength=rnd.nextInt(size + 1);
    }
  }
 else {
    desiredLength=size;
  }
  Vector<Integer> v=new Vector<Integer>(desiredLength);
  if (desiredLength == common.size()) {
    for (    Integer key : common) {
      v.add(key);
    }
  }
 else {
    Integer key=-1;
    while (v.size() < desiredLength) {
      while (key < minValue || key > maxValue) {
        key=rnd.nextInt(maxValue + 1);
        if ((common != null && !common.contains(key)) || v.contains(key)) {
          key=-1;
        }
      }
      v.add(key);
      key=-1;
    }
  }
  return v;
}",0.9549795361527968
134936,"/** 
 * Generate a random collection of keys. The size of the collection can be random or fixed. If it is random then the exact parameter must be false; in that case the number of elements returned is limited by size (inclusive) The number of elements in the collection is fixed if the exact parameter is true; in that case the number of elements returned is specified in size. If the size is random, the returned collection can be empty. If common is not null, each generated key must also be present in common. For this to work, the size of common is an upper limit for the size of the  returned collection.
 * @param size The upper limit of the number of elements in the collection or the number of elements in the returned collection depending on the value of the exact parameter 
 * @param exact If true the size of the returned collection is equal tosize otherwise size is the maximum limit
 * @param minValue The minimum allowed value of the keys in the collection (inclusive)
 * @param maxValue The maximum allowed value of the keys in the collection (inclusive)
 * @param common A collection of keys They key in the returned collection must be present in common too If common is null the keys are generated without constraints 
 * @return A posible empty collection of keys
 */
public static Collection<Integer> generateKeys(int size,boolean exact,int minValue,int maxValue,Collection<Integer> common){
  if (size <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue < 0 && maxValue < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue >= maxValue) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact && size > common.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int desiredLength=0;
  Random rnd=new Random(System.currentTimeMillis());
  if (!exact) {
    while (desiredLength == 0) {
      desiredLength=rnd.nextInt(size + 1);
    }
  }
 else {
    desiredLength=size;
  }
  if (maxValue - minValue + 1 < desiredLength) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Vector<Integer> v=new Vector<Integer>(desiredLength);
  if (desiredLength == common.size()) {
    for (    Integer key : common) {
      v.add(key);
    }
  }
 else {
    Integer key=-1;
    while (v.size() < desiredLength) {
      while (key < minValue || key > maxValue) {
        key=rnd.nextInt(maxValue + 1);
        if ((common != null && !common.contains(key)) || v.contains(key)) {
          key=-1;
        }
      }
      v.add(key);
      key=-1;
    }
  }
  return v;
}","/** 
 * Generate a random collection of keys. The size of the collection can be random or fixed. If it is random then the exact parameter must be false; in that case the number of elements returned is limited by size (inclusive) The number of elements in the collection is fixed if the exact parameter is true; in that case the number of elements returned is specified in size. If the size is random, the returned collection can be empty. If common is not null, each generated key must also be present in common. For this to work, the size of common is an upper limit for the size of the  returned collection.
 * @param size The upper limit of the number of elements in the collection or the number of elements in the returned collection depending on the value of the exact parameter 
 * @param exact If true the size of the returned collection is equal tosize otherwise size is the maximum limit
 * @param minValue The minimum allowed value of the keys in the collection (inclusive)
 * @param maxValue The maximum allowed value of the keys in the collection (inclusive)
 * @param common A collection of keys They key in the returned collection must be present in common too If common is null the keys are generated without constraints 
 * @return A posible empty collection of keys
 */
public static Collection<Integer> generateKeys(int size,boolean exact,int minValue,int maxValue,Collection<Integer> common){
  if (size <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue < 0 && maxValue < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minValue >= maxValue) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact && size > common.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int desiredLength=0;
  Random rnd=new Random(System.currentTimeMillis());
  if (!exact) {
    while (desiredLength == 0 || (maxValue - minValue + 1 < desiredLength)) {
      desiredLength=rnd.nextInt(size + 1);
    }
  }
 else {
    desiredLength=size;
  }
  Vector<Integer> v=new Vector<Integer>(desiredLength);
  if (desiredLength == common.size()) {
    for (    Integer key : common) {
      v.add(key);
    }
  }
 else {
    Integer key=-1;
    while (v.size() < desiredLength) {
      while (key < minValue || key > maxValue) {
        key=rnd.nextInt(maxValue + 1);
        if ((common != null && !common.contains(key)) || v.contains(key)) {
          key=-1;
        }
      }
      v.add(key);
      key=-1;
    }
  }
  return v;
}",0.9549795361527968
134937,"/** 
 * Logs to the Logger given in   {@link #setInternalLogger(Logger)}, or to System.out if no Logger has been provided.
 */
protected void log(Level level,String msg,Throwable thr){
  if (logger != null) {
    logger.log(level,msg,thr);
  }
 else {
    if (level.intValue() >= getDefaultMinLogLevelLocal().value) {
      Calendar cal=Calendar.getInstance();
      SimpleDateFormat sdf1=new SimpleDateFormat(""String_Node_Str"");
      SimpleDateFormat sdf2=new SimpleDateFormat(""String_Node_Str"");
      sdf1.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      sdf2.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      System.out.println(sdf1.format(cal.getTime()) + ""String_Node_Str"" + sdf2.format(cal.getTime())+ ""String_Node_Str""+ level.toString()+ ""String_Node_Str""+ msg+ (thr != null ? thr.toString() : ""String_Node_Str""));
    }
  }
}","/** 
 * Logs to the Logger given in   {@link #setInternalLogger(Logger)}, or to System.out if no Logger has been provided.
 */
protected void log(Level level,String msg,Throwable thr){
  if (logger != null) {
    logger.log(level,msg,thr);
  }
 else {
    if (AcsLogLevel.getNativeLevel(level).getAcsLevel().value >= getDefaultMinLogLevelLocal().value) {
      Calendar cal=Calendar.getInstance();
      SimpleDateFormat sdf1=new SimpleDateFormat(""String_Node_Str"");
      SimpleDateFormat sdf2=new SimpleDateFormat(""String_Node_Str"");
      sdf1.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      sdf2.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      System.out.println(sdf1.format(cal.getTime()) + ""String_Node_Str"" + sdf2.format(cal.getTime())+ ""String_Node_Str""+ AcsLogLevel.getNativeLevel(level).getAcsLevel().toString()+ ""String_Node_Str""+ msg+ (thr != null ? thr.toString() : ""String_Node_Str""));
    }
  }
}",0.9369067560022334
134938,"/** 
 * Convert the vector of filters to a <code>LogTableRowFilter</code>. <P> The engine and the dialog define filters by means of a vector of filters that has  to be converted before being applied by this sorter. If the vector of filters is null or empty this object is set to <code>null</code>  to improve performances. All the filters defined in the vector are added in AND because this is the way they are defined in the <code>FiltersVector</code>.
 * @param userFilters The user defined vector of filters
 * @return The <code>RowSorter</code> with all the filters in the passed parameter
 */
private void buildTableFilters(FiltersVector userFilters){
  if (userFilters == null || userFilters.isEmpty()) {
    filters=null;
    return;
  }
  int[] activesIndexes=userFilters.getAppliedFiltersIndexes();
  if (activesIndexes != null && activesIndexes.length > 0) {
    filters=new Filter[activesIndexes.length];
    for (int t=0; t < filters.length; t++) {
      filters[t]=userFilters.get(t);
    }
  }
}","/** 
 * Convert the vector of filters to a <code>LogTableRowFilter</code>. <P> The engine and the dialog define filters by means of a vector of filters that has  to be converted before being applied by this sorter. If the vector of filters is null or empty this object is set to <code>null</code>  to improve performances. All the filters defined in the vector are added in AND because this is the way they are defined in the <code>FiltersVector</code>.
 * @param userFilters The user defined vector of filters
 * @return The <code>RowSorter</code> with all the filters in the passed parameter
 */
private void buildTableFilters(FiltersVector userFilters){
  if (userFilters == null || userFilters.isEmpty()) {
    filters=null;
    return;
  }
  int[] activesIndexes=userFilters.getAppliedFiltersIndexes();
  if (activesIndexes != null && activesIndexes.length > 0) {
    filters=new Filter[activesIndexes.length];
    for (int t=0; t < activesIndexes.length; t++) {
      filters[t]=userFilters.get(activesIndexes[t]);
    }
  }
}",0.9818716315531604
134939,"/** 
 * Convert the vector of filters to a <code>LogTableRowFilter</code>. <P> The engine and the dialog define filters by means of a vector of filters that has  to be converted before being applied by this sorter. If the vector of filters is null or empty this object is set to <code>null</code>  to improve performances. All the filters defined in the vector are added in AND because this is the way they are defined in the <code>FiltersVector</code>.
 * @param userFilters The user defined vector of filters
 * @return The <code>RowSorter</code> with all the filters in the passed parameter
 */
private void buildTableFilters(FiltersVector userFilters){
  if (userFilters == null || userFilters.isEmpty()) {
    filters=null;
    return;
  }
  int[] activesIndexes=userFilters.getAppliedFiltersIndexes();
  if (activesIndexes != null && activesIndexes.length > 0) {
    filters=new Filter[activesIndexes.length];
    for (int t=0; t < filters.length; t++) {
      filters[t]=userFilters.get(t);
    }
  }
}","/** 
 * Convert the vector of filters to a <code>LogTableRowFilter</code>. <P> The engine and the dialog define filters by means of a vector of filters that has  to be converted before being applied by this sorter. If the vector of filters is null or empty this object is set to <code>null</code>  to improve performances. All the filters defined in the vector are added in AND because this is the way they are defined in the <code>FiltersVector</code>.
 * @param userFilters The user defined vector of filters
 * @return The <code>RowSorter</code> with all the filters in the passed parameter
 */
private void buildTableFilters(FiltersVector userFilters){
  if (userFilters == null || userFilters.isEmpty()) {
    filters=null;
    return;
  }
  int[] activesIndexes=userFilters.getAppliedFiltersIndexes();
  if (activesIndexes != null && activesIndexes.length > 0) {
    filters=new Filter[activesIndexes.length];
    for (int t=0; t < activesIndexes.length; t++) {
      filters[t]=userFilters.get(activesIndexes[t]);
    }
  }
}",0.9818716315531604
134940,"/** 
 * Build a Filter object All the parameters are String objects.  Before building the object, the value of each parameter is checked This method is too long (and boring) for my taste but it is very easy
 * @param field The filed parameter fo Filter
 * @param lethal The isLethal parameter of Filter
 * @param not The applyAsNOT parameter of Filter
 * @param min The minimum parameter of Filter
 * @param minType The type of minimum
 * @param max The max parameter of Filter
 * @param maxType The type of max
 * @param exact The exact parameter of Filter
 * @param exactType The type of exact
 * @param wildChar The regularExpression parameter of Filter
 * @return The Filter object built or null if an error occurred decoding the parameters
 * @throws Exception in case of error building the filter
 */
public static Filter buildFilter(String field,String lethal,String not,String min,String minType,String max,String maxType,String exact,String exactType,String wildChar) throws Exception {
  Filter f=null;
  if (field != null) {
    field=field.trim();
  }
  if (lethal != null) {
    lethal=lethal.trim();
  }
  if (not != null) {
    not=not.trim();
  }
  if (min != null) {
    min=min.trim();
  }
  if (minType != null) {
    minType=minType.trim();
  }
  if (max != null) {
    max=max.trim();
  }
  if (maxType != null) {
    maxType=maxType.trim();
  }
  if (exact != null) {
    exact=exact.trim();
  }
  if (exactType != null) {
    exactType=exactType.trim();
  }
  if (wildChar != null) {
    wildChar=wildChar.trim();
  }
  int fieldInt;
  if (field == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  fieldInt=Integer.parseInt(field);
  int temp;
  if (lethal == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  temp=Integer.parseInt(lethal);
  boolean isLethal=(temp == 1);
  if (not == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  temp=Integer.parseInt(not);
  boolean notPolicy=(temp == 1);
  if (wildChar != null && (min != null || max != null || exact != null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact != null && (min != null || max != null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact != null && exactType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (min != null && minType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (max != null && maxType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minType != null && maxType != null) {
    if (minType.compareTo(maxType) != 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (wildChar != null) {
    f=new Filter(fieldInt,isLethal,wildChar,notPolicy);
    return f;
  }
  if (exact != null) {
    if (exactType.compareTo(""String_Node_Str"") == 0) {
      Integer integer;
      try {
        integer=new Integer(exact);
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + exact);
      }
      f=new Filter(fieldInt,isLethal,integer,notPolicy);
    }
 else     if (exactType.compareTo(""String_Node_Str"") == 0) {
      Date date=null;
      try {
        date=new Date(Long.parseLong(exact));
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + exact);
      }
      f=new Filter(fieldInt,isLethal,date,notPolicy);
    }
 else     if (exactType.compareTo(""String_Node_Str"") == 0) {
      f=new Filter(fieldInt,isLethal,(Object)exact,notPolicy);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + exactType);
    }
    return f;
  }
  if (minType == null) {
    minType=maxType;
  }
  if (minType.compareTo(""String_Node_Str"") == 0) {
    f=new Filter(fieldInt,isLethal,min,max,notPolicy);
  }
 else   if (minType.compareTo(""String_Node_Str"") == 0) {
    Date minDate=null;
    Date maxDate=null;
    try {
      if (min != null) {
        minDate=new Date(Long.parseLong(min));
      }
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + min);
    }
    try {
      if (max != null) {
        maxDate=new Date(Long.parseLong(max));
      }
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + max);
    }
    f=new Filter(fieldInt,isLethal,minDate,maxDate,notPolicy);
  }
 else   if (minType.compareTo(""String_Node_Str"") == 0) {
    Integer minInt=null;
    Integer maxInt=null;
    if (min == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + min);
    }
    if (max == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + min);
    }
    try {
      minInt=new Integer(min);
      maxInt=new Integer(max);
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + min + ""String_Node_Str""+ max);
    }
    f=new Filter(fieldInt,isLethal,minInt,maxInt,notPolicy);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return f;
}","/** 
 * Build a Filter object All the parameters are String objects.  Before building the object, the value of each parameter is checked This method is too long (and boring) for my taste but it is very easy
 * @param field The filed parameter fo Filter
 * @param lethal The isLethal parameter of Filter
 * @param not The applyAsNOT parameter of Filter
 * @param min The minimum parameter of Filter
 * @param minType The type of minimum
 * @param max The max parameter of Filter
 * @param maxType The type of max
 * @param exact The exact parameter of Filter
 * @param exactType The type of exact
 * @param wildChar The regularExpression parameter of Filter
 * @return The Filter object built or null if an error occurred decoding the parameters
 * @throws Exception in case of error building the filter
 */
public static Filter buildFilter(String field,String lethal,String not,String min,String minType,String max,String maxType,String exact,String exactType,String wildChar) throws Exception {
  Filter f=null;
  if (field != null) {
    field=field.trim();
  }
  if (lethal != null) {
    lethal=lethal.trim();
  }
  if (not != null) {
    not=not.trim();
  }
  if (min != null) {
    min=min.trim();
  }
  if (minType != null) {
    minType=minType.trim();
  }
  if (max != null) {
    max=max.trim();
  }
  if (maxType != null) {
    maxType=maxType.trim();
  }
  if (exact != null) {
    exact=exact.trim();
  }
  if (exactType != null) {
    exactType=exactType.trim();
  }
  if (wildChar != null) {
    wildChar=wildChar.trim();
  }
  int fieldInt;
  if (field == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  fieldInt=Integer.parseInt(field);
  int temp;
  if (lethal == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  temp=Integer.parseInt(lethal);
  boolean isLethal=(temp == 1);
  if (not == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  temp=Integer.parseInt(not);
  boolean notPolicy=(temp == 1);
  if (wildChar != null && (min != null || max != null || exact != null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (wildChar == null && min == null && max == null && exact == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact != null && (min != null || max != null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (exact != null && exactType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (min != null && minType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (max != null && maxType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (minType != null && maxType != null) {
    if (minType.compareTo(maxType) != 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (wildChar != null) {
    f=new Filter(fieldInt,isLethal,wildChar,notPolicy);
    return f;
  }
  if (exact != null) {
    if (exactType.compareTo(""String_Node_Str"") == 0) {
      Integer integer;
      try {
        integer=new Integer(exact);
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + exact);
      }
      f=new Filter(fieldInt,isLethal,integer,notPolicy);
    }
 else     if (exactType.compareTo(""String_Node_Str"") == 0) {
      Date date=null;
      try {
        date=new Date(Long.parseLong(exact));
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + exact);
      }
      f=new Filter(fieldInt,isLethal,date,notPolicy);
    }
 else     if (exactType.compareTo(""String_Node_Str"") == 0) {
      f=new Filter(fieldInt,isLethal,(Object)exact,notPolicy);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + exactType);
    }
    return f;
  }
  if (minType == null) {
    minType=maxType;
  }
 else {
    maxType=minType;
  }
  if (minType.compareTo(""String_Node_Str"") == 0) {
    f=new Filter(fieldInt,isLethal,min,max,notPolicy);
  }
 else   if (minType.compareTo(""String_Node_Str"") == 0) {
    Date minDate=null;
    Date maxDate=null;
    try {
      if (min != null) {
        minDate=new Date(Long.parseLong(min));
      }
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + min);
    }
    try {
      if (max != null) {
        maxDate=new Date(Long.parseLong(max));
      }
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + max);
    }
    f=new Filter(fieldInt,isLethal,minDate,maxDate,notPolicy);
  }
 else   if (minType.compareTo(""String_Node_Str"") == 0) {
    Integer minInt=null;
    Integer maxInt=null;
    try {
      if (min != null) {
        minInt=new Integer(min);
      }
      if (max != null) {
        maxInt=new Integer(max);
      }
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + min + ""String_Node_Str""+ max);
    }
    f=new Filter(fieldInt,isLethal,minInt,maxInt,notPolicy);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return f;
}",0.920733482099544
134941,"/** 
 * Return a set with all the keys of the logs in cache
 * @return The keys of the logs in cache
 */
public Set<Integer> keySet(){
  Set<Integer> keys=super.keySet();
  keys.addAll(buffer.keySet());
  return keys;
}","/** 
 * Return a set with all the keys of the logs in cache
 * @return The keys of the logs in cache
 */
public Set<Integer> keySet(){
  HashSet<Integer> ret=new HashSet<Integer>();
  ret.addAll(super.keySet());
  ret.addAll(buffer.keySet());
  return ret;
}",0.8511530398322851
134942,"/** 
 * Return a set with all the keys of the logs in cache
 * @return The keys of the logs in cache
 */
public Set<Integer> keySet(){
  Set<Integer> keys=super.keySet();
  keys.addAll(buffer.keySet());
  return keys;
}","/** 
 * Return a set with all the keys of the logs in cache
 * @return The keys of the logs in cache
 */
public Set<Integer> keySet(){
  HashSet<Integer> ret=new HashSet<Integer>();
  ret.addAll(super.keySet());
  ret.addAll(buffer.keySet());
  return ret;
}",0.8511530398322851
134943,"/** 
 * Return a set with all the keys of the logs in cache
 * @return The keys of the logs in cache
 */
public Set<Integer> keySet(){
  Set<Integer> keys=super.keySet();
  keys.addAll(buffer.keySet());
  return keys;
}","/** 
 * Return a set with all the keys of the logs in cache
 * @return The keys of the logs in cache
 */
public Set<Integer> keySet(){
  HashSet<Integer> ret=new HashSet<Integer>();
  ret.addAll(super.keySet());
  ret.addAll(buffer.keySet());
  return ret;
}",0.8511530398322851
134944,"protected int getThreadsCount(String[] classes,State state){
  ThreadInfo[] info=tmxb.dumpAllThreads(true,true);
  int threadCount=0;
  for (int i=0; i != info.length; i++) {
    StackTraceElement[] stackElements=info[i].getStackTrace();
    int idx=stackElements.length - 1;
    if (stackElements.length > 0) {
      String cName=stackElements[idx].getClassName();
      if (cName.equals(""String_Node_Str"")) {
        cName=stackElements[idx - 1].getClassName();
      }
      for (int j=0; j != classes.length; j++)       if (cName.startsWith(classes[j]) && (state == null || info[i].getThreadState() == state)) {
        threadCount++;
        break;
      }
    }
  }
  return threadCount;
}","protected int getThreadsCount(String[] classes,State state){
  ThreadInfo[] info=tmxb.dumpAllThreads(true,true);
  int threadCount=0;
  for (int i=0; i != info.length; i++) {
    StackTraceElement[] stackElements=info[i].getStackTrace();
    int idx=stackElements.length - 1;
    if (stackElements.length > 0) {
      String cName=stackElements[idx].getClassName();
      if (cName.equals(""String_Node_Str"") && stackElements.length >= 2) {
        cName=stackElements[idx - 1].getClassName();
      }
      for (int j=0; j != classes.length; j++)       if (cName.startsWith(classes[j]) && (state == null || info[i].getThreadState() == state)) {
        threadCount++;
        break;
      }
    }
  }
  return threadCount;
}",0.9795630725863284
134945,"/** 
 * @see alma.acs.logging.config.LogConfigSubscriber#configureLogging(alma.acs.logging.LogConfig)
 */
public void configureLogging(LogConfig logConfig){
  if (!logConfig.getCentralizedLogger().equals(logServiceName)) {
    if (logServiceName == null) {
      logServiceName=logConfig.getCentralizedLogger();
    }
 else {
      m_internalLogger.warning(""String_Node_Str"");
    }
  }
  logQueueLock.lock();
  try {
    if (logQueue != null) {
      flushPeriodSeconds=logConfig.getFlushPeriodSeconds();
      if (logQueue.hasRemoteDispatcher()) {
        logQueue.setPeriodicFlushing(flushPeriodSeconds * 1000);
      }
      logQueue.setMaxQueueSize(logConfig.getMaxLogQueueSize());
    }
  }
  finally {
    logQueueLock.unlock();
  }
}","/** 
 * @see alma.acs.logging.config.LogConfigSubscriber#configureLogging(alma.acs.logging.LogConfig)
 */
public void configureLogging(LogConfig logConfig){
  if (!logConfig.getCentralizedLogger().equals(logServiceName)) {
    if (logServiceName == null) {
      logServiceName=logConfig.getCentralizedLogger();
    }
 else {
      m_internalLogger.warning(""String_Node_Str"");
    }
  }
  flushPeriodSeconds=logConfig.getFlushPeriodSeconds();
  logQueueLock.lock();
  try {
    if (logQueue != null) {
      if (logQueue.hasRemoteDispatcher()) {
        logQueue.setPeriodicFlushing(flushPeriodSeconds * 1000);
      }
      logQueue.setMaxQueueSize(logConfig.getMaxLogQueueSize());
    }
  }
  finally {
    logQueueLock.unlock();
  }
}",0.9215155615696888
134946,"/** 
 * Constructor. Connect as a component client.
 * @param pidFileName The name of the file containing the PID of thecontainer to kill
 */
public ManagerTest(){
  Logger logger=ClientLogManager.getAcsLogManager().getLoggerForApplication(""String_Node_Str"",true);
  if (logger == null) {
    System.out.println(""String_Node_Str"");
  }
  String managerLoc=System.getProperty(""String_Node_Str"");
  if (managerLoc == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  try {
    client=new AdvancedComponentClient(logger,managerLoc,""String_Node_Str"");
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(-1);
  }
  containerServices=client.getContainerServices();
  if (containerServices == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  try {
    sourceClient=new SourceClient(containerServices);
    logger.log(AcsLogLevel.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(-1);
  }
  try {
    sourceClient.connect();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    logger.log(AcsLogLevel.ERROR,""String_Node_Str"");
    return;
  }
  try {
    categoryClient=new CategoryClient(containerServices);
    logger.fine(""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(-1);
  }
  try {
    categoryClient.connect();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    logger.log(AcsLogLevel.ERROR,""String_Node_Str"");
    return;
  }
  sourceClient.addAlarmListener(this);
  categoryClient.addAlarmListener(this);
  System.out.println(""String_Node_Str"");
}","/** 
 * Constructor. Connect as a component client.
 * @param pidFileName The name of the file containing the PID of thecontainer to kill
 */
public ManagerTest(){
  Logger logger=ClientLogManager.getAcsLogManager().getLoggerForApplication(""String_Node_Str"",true);
  if (logger == null) {
    System.out.println(""String_Node_Str"");
  }
  String managerLoc=System.getProperty(""String_Node_Str"");
  if (managerLoc == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  try {
    client=new AdvancedComponentClient(logger,managerLoc,""String_Node_Str"");
    logger.log(AcsLogLevel.DEBUG,""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(-1);
  }
  containerServices=client.getContainerServices();
  if (containerServices == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  try {
    sourceClient=new SourceClient(containerServices);
    logger.log(AcsLogLevel.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(-1);
  }
  try {
    sourceClient.connect();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    logger.log(AcsLogLevel.ERROR,""String_Node_Str"");
    return;
  }
  try {
    categoryClient=new CategoryClient(containerServices);
    logger.fine(""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(-1);
  }
  try {
    categoryClient.connect(this);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    logger.log(AcsLogLevel.ERROR,""String_Node_Str"");
    return;
  }
  sourceClient.addAlarmListener(this);
  System.out.println(""String_Node_Str"");
}",0.9882168106834248
134947,"public void faultStateReceived(FaultState faultState){
synchronized (faultStatesReceived) {
    faultStatesReceived.add(faultState);
  }
}","public void faultStateReceived(FaultState faultState){
  assertNotNull(faultState);
synchronized (faultStatesReceived) {
    faultStatesReceived.add(faultState);
    System.out.println(""String_Node_Str"" + faultState + ""String_Node_Str"");
  }
}",0.7244094488188977
134948,"/** 
 * Test the alarms received in the categories
 * @throws Exception
 */
public void testCategories() throws Exception {
  CategoryClient categoryClient=new CategoryClient(contSvcs);
  assertNotNull(categoryClient);
  categoryClient.connect(this);
  send_alarm(FF,FM,FC,true);
  send_alarm(FF,FM,FC,false);
  long now=System.currentTimeMillis();
  while (numOfAlarmsReceived < 2 && now + TIMEOUT * 1000 > System.currentTimeMillis()) {
    try {
      Thread.sleep(500);
    }
 catch (    Exception e) {
    }
  }
  assertEquals(""String_Node_Str"",2,alarmsReceived.size());
  Alarm al1=alarmsReceived.get(0);
  assertNotNull(al1);
  assertEquals(al1.getAlarmId(),FF + ""String_Node_Str"" + FM+ ""String_Node_Str""+ FC);
  assertEquals(al1.getProblemDescription(),""String_Node_Str"");
  assertFalse(al1.getStatus().isActive());
  assertEquals(al1.getPriority(),Integer.valueOf(2));
  Alarm al2=alarmsReceived.get(1);
  assertNotNull(al2);
  assertEquals(al2.getAlarmId(),FF + ""String_Node_Str"" + FM+ ""String_Node_Str""+ FC);
  assertEquals(al2.getProblemDescription(),""String_Node_Str"");
  assertTrue(al2.getStatus().isActive());
  assertEquals(al2.getPriority(),Integer.valueOf(2));
}","/** 
 * Test the alarms received in the categories
 * @throws Exception
 */
public void testCategories() throws Exception {
  send_alarm(FF,FM,FC,true);
  try {
    Thread.sleep(5000);
  }
 catch (  Exception e) {
  }
  send_alarm(FF,FM,FC,false);
  long now=System.currentTimeMillis();
  while (numOfAlarmsReceived < 2 && now + TIMEOUT * 1000 > System.currentTimeMillis()) {
    try {
      Thread.sleep(500);
    }
 catch (    Exception e) {
    }
  }
  assertEquals(""String_Node_Str"",2,numOfAlarmsReceived);
  Alarm al1=alarmsReceived.get(0);
  System.out.println(""String_Node_Str"" + al1 + ""String_Node_Str"");
  assertNotNull(al1);
  assertEquals(al1.getAlarmId(),FF + ""String_Node_Str"" + FM+ ""String_Node_Str""+ FC);
  assertEquals(al1.getProblemDescription(),""String_Node_Str"");
  assertTrue(al1.getStatus().isActive());
  assertEquals(al1.getPriority(),Integer.valueOf(2));
  Alarm al2=alarmsReceived.get(1);
  System.out.println(""String_Node_Str"" + al2 + ""String_Node_Str"");
  assertNotNull(al2);
  assertEquals(al2.getAlarmId(),FF + ""String_Node_Str"" + FM+ ""String_Node_Str""+ FC);
  assertEquals(al2.getProblemDescription(),""String_Node_Str"");
  assertFalse(al2.getStatus().isActive());
  assertEquals(al2.getPriority(),Integer.valueOf(2));
}",0.8360790774299836
134949,"/** 
 * @see TestCase
 */
public void setUp() throws Exception {
  super.setUp();
  contSvcs=getContainerServices();
  assertNotNull(contSvcs);
  ACSAlarmSystemInterfaceFactory.init(contSvcs);
  alarmService=AlarmServiceHelper.narrow(contSvcs.getComponent(""String_Node_Str""));
  assertNotNull(alarmService);
  faultStatesReceived=new Vector<FaultState>();
  alarmsReceived=new Vector<Alarm>();
  numOfAlarmsReceived=0;
}","/** 
 * @see TestCase
 */
public void setUp() throws Exception {
  super.setUp();
  contSvcs=getContainerServices();
  assertNotNull(contSvcs);
  ACSAlarmSystemInterfaceFactory.init(contSvcs);
  alarmService=AlarmServiceHelper.narrow(contSvcs.getComponent(""String_Node_Str""));
  assertNotNull(alarmService);
  faultStatesReceived=new Vector<FaultState>();
  alarmsReceived=new Vector<Alarm>();
  numOfAlarmsReceived=0;
  initClients(contSvcs,this);
  assertNotNull(categoryClient);
  sourceClient=new SourceClient(contSvcs);
  assertNotNull(sourceClient);
  sourceClient.addAlarmListener(this);
  sourceClient.connect();
  alarmsReceived.clear();
  faultStatesReceived.clear();
}",0.7643312101910829
134950,"/** 
 * @see AlarmSelectionListener
 */
public void onAlarm(Alarm alarm){
synchronized (alarmsReceived) {
    alarmsReceived.add(alarm);
  }
}","/** 
 * @see AlarmSelectionListener
 */
public void onAlarm(Alarm alarm){
  assertNotNull(alarm);
synchronized (alarmsReceived) {
    alarmsReceived.add(alarm);
    numOfAlarmsReceived++;
    System.out.println(""String_Node_Str"" + alarm + ""String_Node_Str"");
  }
}",0.6995073891625616
134951,"/** 
 * @see TestCase
 */
public void tearDown() throws Exception {
  contSvcs.releaseComponent(alarmService.name());
  alarmService=null;
  contSvcs=null;
  faultStatesReceived.clear();
  alarmsReceived.clear();
  super.tearDown();
}","/** 
 * @see TestCase
 */
public void tearDown() throws Exception {
  contSvcs.releaseComponent(alarmService.name());
  alarmService=null;
  contSvcs=null;
  faultStatesReceived.clear();
  alarmsReceived.clear();
  sourceClient.close();
  super.tearDown();
}",0.951219512195122
134952,"/** 
 * Helper method that converts an integer log level to the matching enum literal. It suppresses the AcsJIllegalArgumentEx because the level must have been validated during the config init  (and we wouldn't be bothered about exceptions here if we had stored the converted enum literal instead of the castor class)   Therefore just a lame log and runtime ex are thrown, but no AcsJIllegalArgumentEx gets thrown on.
 * @param legalLogLevel
 * @return
 */
private AcsLogLevelDefinition convertLegalLogLevel(int legalLogLevel){
  try {
    return AcsLogLevelDefinition.fromInteger(legalLogLevel);
  }
 catch (  AcsJIllegalArgumentEx ex) {
    logger.warning(""String_Node_Str"" + loggingConfig.getImmediateDispatchLevel());
    throw new RuntimeException(ex);
  }
}","/** 
 * Helper method that converts an integer log level to the matching enum literal. It suppresses the AcsJIllegalArgumentEx because the level must have been validated during the config init  (and we wouldn't be bothered about exceptions here if we had stored the converted enum literal instead of the castor class)   Therefore just a lame log and runtime ex are thrown, but no AcsJIllegalArgumentEx gets thrown on.
 * @param legalLogLevel
 * @return
 */
private AcsLogLevelDefinition convertLegalLogLevel(int legalLogLevel){
  try {
    return AcsLogLevelDefinition.fromInteger(legalLogLevel);
  }
 catch (  AcsJIllegalArgumentEx ex) {
    logger.warning(""String_Node_Str"" + legalLogLevel);
    throw new RuntimeException(ex);
  }
}",0.965287049399199
134953,"/** 
 * Get the nodes (completion/error) hashtable
 * @return the nodes hashtable
 */
public Hashtable<String,ComplexObject> getNodes(){
  return (nodes);
}","/** 
 * Get the nodes (completion/error) TreeMap
 * @return the nodes TreeMap
 */
public TreeMap<String,ComplexObject> getNodes(){
  return (nodes);
}",0.8627450980392157
134954,"/** 
 * Save the data to the selected path 
 */
public void save(){
  Document docFile=new DocumentImpl();
  Element typeElement=docFile.createElement(EbeDocument.getClassType().name);
  fillAttributes(this,typeElement);
  for (  ComplexObject node : nodes.values()) {
    Element nodeElement;
    if (node instanceof Error)     nodeElement=docFile.createElement(""String_Node_Str"");
 else     nodeElement=docFile.createElement(""String_Node_Str"");
    fillAttributes(node,nodeElement);
    if (node instanceof Error) {
      Error err=(Error)node;
      for (      ComplexObject memb : err.getMembers().values()) {
        Element membElement=docFile.createElement(""String_Node_Str"");
        fillAttributes(memb,membElement);
        nodeElement.appendChild(membElement);
      }
    }
    typeElement.appendChild(nodeElement);
  }
  docFile.appendChild(typeElement);
  try {
    saveXmlDocument(docFile,getPath());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Save the data to the selected path 
 * @throws IOException 
 * @throws FileNotFoundException 
 */
public void save() throws FileNotFoundException, IOException {
  Document docFile=new DocumentImpl();
  Element typeElement=docFile.createElement(EbeDocument.getClassType().name);
  fillAttributes(this,typeElement);
  for (  ComplexObject node : nodes.values()) {
    Element nodeElement;
    if (node instanceof Error)     nodeElement=docFile.createElement(""String_Node_Str"");
 else     nodeElement=docFile.createElement(""String_Node_Str"");
    fillAttributes(node,nodeElement);
    if (node instanceof Error) {
      Error err=(Error)node;
      for (      ComplexObject memb : err.getMembers().values()) {
        Element membElement=docFile.createElement(""String_Node_Str"");
        fillAttributes(memb,membElement);
        nodeElement.appendChild(membElement);
      }
    }
    typeElement.appendChild(nodeElement);
  }
  docFile.appendChild(typeElement);
  saveXmlDocument(docFile,getPath());
}",0.9147755925365608
134955,"/** 
 * Initialize a new EbeDocument 
 */
public EbeDocument(){
  super(typeType);
  nodes=new Hashtable<String,ComplexObject>();
}","/** 
 * Initialize a new EbeDocument 
 */
public EbeDocument(){
  super(typeType);
  nodes=new TreeMap<String,ComplexObject>();
}",0.946153846153846
134956,"/** 
 * Reads the schema files, setup classes and init the pool 
 */
public EbeDocumentManager(){
  ErrorBrowserEditor.log(""String_Node_Str"");
  ErrorBrowserEditor.log(""String_Node_Str"");
  ErrorBrowserEditor.log(""String_Node_Str"");
  ErrorBrowserEditor.log(""String_Node_Str"");
  schema=new ErrorSchema();
  ErrorBrowserEditor.log(""String_Node_Str"");
  Member.setClassType((AcsComplexType)schema.getType(""String_Node_Str""));
  Error.setClassType(schema.getErrorSchema());
  Completion.setClassType(schema.getCompletionSchema());
  EbeDocument.setClassType(schema.getTypeSchema());
  ErrorBrowserEditor.log(""String_Node_Str"");
  documents=new Hashtable<String,EbeDocument>();
  ErrorBrowserEditor.log(""String_Node_Str"");
}","/** 
 * Reads the schema files, setup classes and init the pool 
 */
public EbeDocumentManager(){
  ErrorBrowserEditor.log(""String_Node_Str"");
  ErrorBrowserEditor.log(""String_Node_Str"");
  ErrorBrowserEditor.log(""String_Node_Str"");
  ErrorBrowserEditor.log(""String_Node_Str"");
  schema=new ErrorSchema();
  ErrorBrowserEditor.log(""String_Node_Str"");
  Member.setClassType((AcsComplexType)schema.getType(""String_Node_Str""));
  Error.setClassType(schema.getErrorSchema());
  Completion.setClassType(schema.getCompletionSchema());
  EbeDocument.setClassType(schema.getTypeSchema());
  ErrorBrowserEditor.log(""String_Node_Str"");
  documents=new TreeMap<String,EbeDocument>();
  ErrorBrowserEditor.log(""String_Node_Str"");
}",0.9763888888888888
134957,"/** 
 * Permanently delete from the HD the file
 * @param name the filename to remove 
 */
public void deleteDocument(String name){
  EbeDocument d=documents.get(name);
  File f=new File(d.getPath());
  f.delete();
  documents.remove(name);
  ErrorBrowserEditor.log(""String_Node_Str"" + name + ""String_Node_Str"");
}","/** 
 * Permanently delete from the HD the file
 * @param name the filename to remove 
 */
public void deleteDocument(String name){
  EbeDocument d=documents.get(name);
  File f=new File(d.getPath());
  if (f.delete() == true) {
    documents.remove(name);
    ErrorBrowserEditor.log(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    ErrorBrowserEditor.log(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}",0.7635869565217391
134958,"/** 
 * Get the document hashtable
 * @return the documents hashtable.
 */
public Hashtable<String,EbeDocument> getDocuments(){
  return documents;
}","/** 
 * Get the document TreeMap
 * @return the documents TreeMap.
 */
public TreeMap<String,EbeDocument> getDocuments(){
  return documents;
}",0.8561643835616438
134959,"/** 
 * Load a filelist to the manager.
 * @param lst The Arraylist to load
 */
private void addFileList(ArrayList<File> lst){
  System.out.println(""String_Node_Str"");
  for (  File file : lst) {
    loadDocument(file.getAbsolutePath());
  }
  System.out.println(""String_Node_Str"");
}","/** 
 * Load a filelist to the manager.
 * @param lst The Arraylist to load
 */
private void addFileList(ArrayList<File> lst){
  ErrorBrowserEditor.log(""String_Node_Str"");
  for (  File file : lst) {
    loadDocument(file.getAbsolutePath());
  }
  ErrorBrowserEditor.log(""String_Node_Str"");
}",0.8611111111111112
134960,"/** 
 * Error Constructor. And initilize members
 */
public Error(){
  super(errorType);
  members=new Hashtable<String,Member>();
}","/** 
 * Error Constructor. And initilize members
 */
public Error(){
  super(errorType);
  members=new TreeMap<String,Member>();
}",0.9465648854961832
134961,"/** 
 * Add a member to the hashtable. This includes the member with the name of member value.
 * @param name the member name
 */
public void putMember(Member member){
  members.put(member.getValue(),member);
}","/** 
 * Add a member to the TreeMap. This includes the member with the name of member value.
 * @param name the member name
 */
public void putMember(Member member){
  members.put(member.getValue(),member);
}",0.9617224880382776
134962,"/** 
 * Return the members hashtable. 
 * @return the hashtable with the members.
 */
public Hashtable<String,Member> getMembers(){
  return (members);
}","/** 
 * Return the members TreeMap. 
 * @return the TreeMap with the members.
 */
public TreeMap<String,Member> getMembers(){
  return (members);
}",0.86
134963,"/** 
 * Insert the method's description here. Creation date: (2/4/02 3:52:03 PM)
 * @return java.lang.Class
 */
public Class getSelectedClass(){
  return Field.values()[getSelectedIndex()].getClass();
}","/** 
 * Insert the method's description here. Creation date: (2/4/02 3:52:03 PM)
 * @return java.lang.Class
 */
public Class getSelectedClass(){
  return Field.values()[getSelectedIndex()].getType();
}",0.977667493796526
134964,"/** 
 * Insert the method's description here. Creation date: (2/4/02 3:46:51 PM)
 * @param c java.lang.Class
 */
public void setEditor(Class c){
  if (c == String.class) {
    replaceEditor(stringEditor);
  }
  if (c == Integer.class) {
    if (getSelectedIndex() == 1) {
      replaceEditor(typeEditor);
    }
 else {
      replaceEditor(intEditor);
    }
  }
  if (c == java.util.Date.class)   replaceEditor(dateEditor);
}","/** 
 * Insert the method's description here. Creation date: (2/4/02 3:46:51 PM)
 * @param c java.lang.Class
 */
public void setEditor(Class c){
  if (c == String.class) {
    replaceEditor(stringEditor);
  }
 else   if (c == Integer.class) {
    if (getSelectedIndex() == 1) {
      replaceEditor(typeEditor);
    }
 else {
      replaceEditor(intEditor);
    }
  }
 else   if (c == java.util.Date.class) {
    replaceEditor(dateEditor);
  }
 else {
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + c.getName(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    System.err.println(""String_Node_Str"" + c.getName());
  }
}",0.8045540796963947
134965,"/** 
 * Insert the method's description here. Creation date: (2/4/02 3:52:03 PM)
 * @return java.lang.Class
 */
public Class getSelectedClass(){
  return Field.values()[getSelectedIndex()].getClass();
}","/** 
 * Insert the method's description here. Creation date: (2/4/02 3:52:03 PM)
 * @return java.lang.Class
 */
public Class getSelectedClass(){
  return Field.values()[getSelectedIndex()].getType();
}",0.977667493796526
134966,"/** 
 * Insert the method's description here. Creation date: (2/4/02 3:46:51 PM)
 * @param c java.lang.Class
 */
public void setEditor(Class c){
  if (c == String.class) {
    replaceEditor(stringEditor);
  }
  if (c == Integer.class) {
    if (getSelectedIndex() == 1) {
      replaceEditor(typeEditor);
    }
 else {
      replaceEditor(intEditor);
    }
  }
  if (c == java.util.Date.class)   replaceEditor(dateEditor);
}","/** 
 * Insert the method's description here. Creation date: (2/4/02 3:46:51 PM)
 * @param c java.lang.Class
 */
public void setEditor(Class c){
  if (c == String.class) {
    replaceEditor(stringEditor);
  }
 else   if (c == Integer.class) {
    if (getSelectedIndex() == 1) {
      replaceEditor(typeEditor);
    }
 else {
      replaceEditor(intEditor);
    }
  }
 else   if (c == java.util.Date.class) {
    replaceEditor(dateEditor);
  }
 else {
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + c.getName(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    System.err.println(""String_Node_Str"" + c.getName());
  }
}",0.8045540796963947
134967,"/** 
 * Insert the method's description here. Creation date: (2/4/02 3:52:03 PM)
 * @return java.lang.Class
 */
public Class getSelectedClass(){
  return Field.values()[getSelectedIndex()].getClass();
}","/** 
 * Insert the method's description here. Creation date: (2/4/02 3:52:03 PM)
 * @return java.lang.Class
 */
public Class getSelectedClass(){
  return Field.values()[getSelectedIndex()].getType();
}",0.977667493796526
134968,"/** 
 * Insert the method's description here. Creation date: (2/4/02 3:46:51 PM)
 * @param c java.lang.Class
 */
public void setEditor(Class c){
  if (c == String.class) {
    replaceEditor(stringEditor);
  }
  if (c == Integer.class) {
    if (getSelectedIndex() == 1) {
      replaceEditor(typeEditor);
    }
 else {
      replaceEditor(intEditor);
    }
  }
  if (c == java.util.Date.class)   replaceEditor(dateEditor);
}","/** 
 * Insert the method's description here. Creation date: (2/4/02 3:46:51 PM)
 * @param c java.lang.Class
 */
public void setEditor(Class c){
  if (c == String.class) {
    replaceEditor(stringEditor);
  }
 else   if (c == Integer.class) {
    if (getSelectedIndex() == 1) {
      replaceEditor(typeEditor);
    }
 else {
      replaceEditor(intEditor);
    }
  }
 else   if (c == java.util.Date.class) {
    replaceEditor(dateEditor);
  }
 else {
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + c.getName(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    System.err.println(""String_Node_Str"" + c.getName());
  }
}",0.8045540796963947
134969,"/** 
 * @param evt
 */
protected void showContextMenu(MouseEvent evt){
  TreePath targetPath=this.getClosestPathForLocation(evt.getX(),evt.getY());
  setSelectionPath(targetPath);
  if (targetPath.getPathCount() == 1) {
    return;
  }
  selectedSupervisor=maciSupervisor(((DefaultMutableTreeNode)targetPath.getPathComponent(1)));
  target=(DefaultMutableTreeNode)targetPath.getLastPathComponent();
  Object userObject=target.getUserObject();
  ContextMenu menu;
  if (userObject instanceof IMaciSupervisor) {
    menu=managerContextMenu;
  }
 else   if (userObject instanceof ContainerInfo) {
    menu=containerContextMenu;
  }
 else   if (userObject instanceof ClientInfo) {
    menu=clientContextMenu;
  }
 else   if (userObject instanceof ComponentInfo) {
    menu=componentContextMenu;
  }
 else   if (userObject instanceof FolderInfo) {
    String name=((FolderInfo)userObject).name;
    if (name.equals(""String_Node_Str""))     menu=folderComponentsContextMenu;
 else     menu=folderContextMenu;
  }
 else {
    return;
  }
  menu.show(this,target,evt.getX(),evt.getY());
}","/** 
 * @param evt
 */
protected void showContextMenu(MouseEvent evt){
  TreePath targetPath=this.getClosestPathForLocation(evt.getX(),evt.getY());
  if (targetPath == null) {
    return;
  }
  setSelectionPath(targetPath);
  if (targetPath.getPathCount() == 1) {
    return;
  }
  selectedSupervisor=maciSupervisor(((DefaultMutableTreeNode)targetPath.getPathComponent(1)));
  target=(DefaultMutableTreeNode)targetPath.getLastPathComponent();
  Object userObject=target.getUserObject();
  ContextMenu menu;
  if (userObject instanceof IMaciSupervisor) {
    menu=managerContextMenu;
  }
 else   if (userObject instanceof ContainerInfo) {
    menu=containerContextMenu;
  }
 else   if (userObject instanceof ClientInfo) {
    menu=clientContextMenu;
  }
 else   if (userObject instanceof ComponentInfo) {
    menu=componentContextMenu;
  }
 else   if (userObject instanceof FolderInfo) {
    String name=((FolderInfo)userObject).name;
    if (name.equals(""String_Node_Str""))     menu=folderComponentsContextMenu;
 else     menu=folderContextMenu;
  }
 else {
    return;
  }
  menu.show(this,target,evt.getX(),evt.getY());
}",0.9800181653042688
134970,"/** 
 * Logs a single record and waits for it to come back from the Log service  and to pass the queue (which is set to zero delay). Then the record is verified, and the same test is repeated a couple of times with different log records. 
 * @throws Exception
 */
public void testLogQueueNoDelay() throws Exception {
  LogConfig logConfig=ClientLogManager.getAcsLogManager().getLogConfig();
  assertTrue(""String_Node_Str"",logConfig.getDefaultMinLogLevel() == 2);
  logReceiver.setDelayMillis(0);
  BlockingQueue<DelayedLogEntry> queue=logReceiver.getLogQueue();
  final int numLogs=5;
  Level[] levels=new Level[]{Level.FINEST,Level.FINE,Level.INFO,Level.WARNING,Level.SEVERE};
  Random random=new Random(System.currentTimeMillis());
  for (int i=0; i < numLogs; i++) {
    Level level=levels[random.nextInt(levels.length)];
    String acsLevelName=AcsLogLevel.getNativeLevel(level).getEntryName();
    int jlogLevelIndex=LogTypeHelper.parseLogTypeDescription(acsLevelName).intValue();
    String logMessage=""String_Node_Str"" + i;
    m_logger.log(level,logMessage);
    long timeoutSec=10L + logConfig.getFlushPeriodSeconds();
    while (true) {
      DelayedLogEntry delayedLogEntry=queue.poll(timeoutSec,TimeUnit.SECONDS);
      if (delayedLogEntry != null) {
        if (delayedLogEntry.isQueuePoison()) {
          fail(""String_Node_Str"");
        }
        ILogEntry logEntry=delayedLogEntry.getLogEntry();
        String sourceObjectName=(String)logEntry.getField(ILogEntry.FIELD_SOURCEOBJECT);
        if (sourceObjectName != null && sourceObjectName.equals(""String_Node_Str"")) {
          assertEquals(logMessage,logEntry.getField(ILogEntry.FIELD_LOGMESSAGE));
          assertEquals(jlogLevelIndex,((Integer)logEntry.getField(ILogEntry.FIELD_ENTRYTYPE)).intValue());
          System.out.println(""String_Node_Str"" + i);
          break;
        }
 else {
          System.out.println(""String_Node_Str"" + sourceObjectName);
        }
      }
 else {
        fail(""String_Node_Str"" + i + ""String_Node_Str""+ timeoutSec+ ""String_Node_Str"");
      }
    }
  }
  logReceiver.stop();
}","/** 
 * Logs a single record and waits for it to come back from the Log service  and to pass the queue (which is set to zero delay). Then the record is verified, and the same test is repeated a couple of times with different log records. 
 * @throws Exception
 */
public void testLogQueueNoDelay() throws Exception {
  LogConfig logConfig=ClientLogManager.getAcsLogManager().getLogConfig();
  assertTrue(""String_Node_Str"",logConfig.getDefaultMinLogLevel() == 2);
  logReceiver.setDelayMillis(0);
  BlockingQueue<DelayedLogEntry> queue=logReceiver.getLogQueue();
  final int numLogs=5;
  Level[] levels=new Level[]{Level.FINEST,Level.FINE,Level.INFO,Level.WARNING,Level.SEVERE};
  Random random=new Random(System.currentTimeMillis());
  for (int i=0; i < numLogs; i++) {
    Level level=levels[random.nextInt(levels.length)];
    String acsLevelName=AcsLogLevel.getNativeLevel(level).getEntryName();
    int jlogLevelIndex=LogTypeHelper.parseLogTypeDescription(acsLevelName).intValue();
    String logMessage=""String_Node_Str"" + i;
    m_logger.log(level,logMessage);
    long timeoutSec=10L + logConfig.getFlushPeriodSeconds();
    while (true) {
      DelayedLogEntry delayedLogEntry=queue.poll(timeoutSec,TimeUnit.SECONDS);
      if (delayedLogEntry != null) {
        if (delayedLogEntry.isQueuePoison()) {
          fail(""String_Node_Str"");
        }
        ILogEntry logEntry=delayedLogEntry.getLogEntry();
        String sourceObjectName=(String)logEntry.getField(ILogEntry.Field.SOURCEOBJECT);
        if (sourceObjectName != null && sourceObjectName.equals(""String_Node_Str"")) {
          assertEquals(logMessage,logEntry.getField(ILogEntry.Field.LOGMESSAGE));
          assertEquals(jlogLevelIndex,((Integer)logEntry.getField(ILogEntry.Field.ENTRYTYPE)).intValue());
          System.out.println(""String_Node_Str"" + i);
          break;
        }
 else {
          System.out.println(""String_Node_Str"" + sourceObjectName);
        }
      }
 else {
        fail(""String_Node_Str"" + i + ""String_Node_Str""+ timeoutSec+ ""String_Node_Str"");
      }
    }
  }
  logReceiver.stop();
}",0.992816091954023
134971,"/** 
 * <strong>Do not overwrite this method unless you absolutely need to  (currently only for the archive logger component!)</strong> <p> If <code>true</code> then the ORB logger will not send any log messages to the central (remote) Log service after activation of this component, regardless of any kind (env var, CDB, dynamic) log level settings.  Local stdout logging by the ORB is not affected. Currently the ORB log suppression is not reversible: even when the component which requested this  is unloaded, the ORB logger will not resume sending remote log messages.  This may change in the future though. <p> Note that <code>getComponentMethodsExcludedFromInvocationLogging</code> can switch off automatic logging done by the container on behalf of the component. However, the ORB does not use a logger-per-component  concept, and thus can't be told selectively to not log anything for a particualar component. The entire process (container and all components) are affected by suppressing the ORB's remote logging.   <p> This method addresses the special problem of an infrastructural component that receives log messages  from the Log service and writes them to the archive.  Any message logged by the ORB on the receiver side would go back to the Log service and be received  by the infrastructural component, with positive feedback leading to an explosion of log messages.  Therefore we can't rely on log level settings and must categorically rule out such feedback loops. <p>
 * @since ACS 7.0 when JacORB logs get sent to the Log service by default.  
 * @return
 */
boolean requiresOrbCentralLogSuppression(){
  return false;
}","/** 
 * <strong>Do not overwrite this method unless you absolutely need to  (currently only for the archive logger component!)</strong> <p> If <code>true</code> then the ORB logger will not send any log messages to the central (remote) Log service after activation of this component, regardless of any kind (env var, CDB, dynamic) log level settings.  Local stdout logging by the ORB is not affected. Currently the ORB log suppression is not reversible: even when the component which requested this  is unloaded, the ORB logger will not resume sending remote log messages.  This may change in the future though. <p> Note that <code>getComponentMethodsExcludedFromInvocationLogging</code> can switch off automatic logging done by the container on behalf of the component. However, the ORB does not use a logger-per-component  concept, and thus can't be told selectively to not log anything for a particualar component. The entire process (container and all components) are affected by suppressing the ORB's remote logging.   <p> This method addresses the special problem of an infrastructural component that receives log messages  from the Log service and writes them to the archive.  Any message logged by the ORB on the receiver side would go back to the Log service and be received  by the infrastructural component, with positive feedback leading to an explosion of log messages.  Therefore we can't rely on log level settings and must categorically rule out such feedback loops. <p>
 * @since ACS 7.0 when JacORB logs get sent to the Log service by default.  
 * @return
 */
protected boolean requiresOrbCentralLogSuppression(){
  return false;
}",0.9969604863221884
134972,"/** 
 * This method initializes jTable	
 * @return javax.swing.JTable	
 */
private JTable getDocTable(){
  if (docTable == null) {
    docTable=new JTable();
    docTable.setModel(new EbeTableModel());
    docTable.setEnabled(false);
  }
  return docTable;
}","/** 
 * This method initializes jTable	
 * @return javax.swing.JTable	
 */
private JTable getDocTable(){
  if (docTable == null) {
    docTable=new JTable();
    docTable.setModel(new EbeTableModel());
    docTable.setEnabled(true);
  }
  return docTable;
}",0.9864077669902912
134973,"/** 
 * This method initializes jTable	
 * @return javax.swing.JTable	
 */
private JTable getDocTable(){
  if (docTable == null) {
    docTable=new JTable();
    docTable.setModel(new EbeTableModel());
    docTable.setEnabled(false);
  }
  return docTable;
}","/** 
 * This method initializes jTable	
 * @return javax.swing.JTable	
 */
private JTable getDocTable(){
  if (docTable == null) {
    docTable=new JTable();
    docTable.setModel(new EbeTableModel());
    docTable.setEnabled(true);
  }
  return docTable;
}",0.9864077669902912
134974,"/** 
 * Fill the table with the fields of the given log
 * @param log The log whose content is shown in the table
 */
public void setupContent(ILogEntry log){
  if (log == null) {
    setEmptyContent();
  }
  Vector<ILogEntry.AdditionalData> additionalData=log.getAdditionalData();
  rowsNum=ILogEntry.NUMBER_OF_FIELDS;
  if (additionalData != null) {
    rowsNum+=additionalData.size();
  }
  if (rowsNum > 0) {
    nameValue=new String[rowsNum][2];
    for (int i=0; i < ILogEntry.NUMBER_OF_FIELDS; i++) {
      nameValue[i][0]=""String_Node_Str"" + ILogEntry.fieldNames[i] + ""String_Node_Str"";
      Object obj=log.getField(i);
      if (obj != null) {
        if (i == ILogEntry.FIELD_ENTRYTYPE) {
          nameValue[i][1]=obj.toString() + ""String_Node_Str"" + LogTypeHelper.getLogTypeDescription((Integer)obj)+ ""String_Node_Str"";
        }
 else         if (i == ILogEntry.FIELD_TIMESTAMP) {
          SimpleDateFormat df=new SimpleDateFormat(ILogEntry.TIME_FORMAT);
          Date dt=(Date)obj;
          StringBuffer dateSB=new StringBuffer();
          java.text.FieldPosition pos=new java.text.FieldPosition(0);
          df.format(dt,dateSB,pos);
          nameValue[i][1]=dateSB.toString();
        }
 else {
          nameValue[i][1]=obj.toString();
        }
      }
 else {
        nameValue[i][1]=""String_Node_Str"";
      }
    }
    for (int i=ILogEntry.NUMBER_OF_FIELDS; i < rowsNum; i++) {
      nameValue[i][0]=""String_Node_Str"" + additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getName() + ""String_Node_Str"";
      nameValue[i][1]=additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getValue();
    }
    getColumnModel().getColumn(0).setHeaderValue(""String_Node_Str"");
    getColumnModel().getColumn(1).setHeaderValue(""String_Node_Str"");
    getTableHeader().resizeAndRepaint();
    resizeAndRepaint();
  }
}","/** 
 * Fill the table with the fields of the given log
 * @param log The log whose content is shown in the table
 */
public void setupContent(ILogEntry log){
  if (log == null) {
    setEmptyContent();
    return;
  }
  Vector<ILogEntry.AdditionalData> additionalData=log.getAdditionalData();
  rowsNum=ILogEntry.NUMBER_OF_FIELDS;
  if (additionalData != null) {
    rowsNum+=additionalData.size();
  }
  if (rowsNum > 0) {
    nameValue=new String[rowsNum][2];
    for (int i=0; i < ILogEntry.NUMBER_OF_FIELDS; i++) {
      nameValue[i][0]=""String_Node_Str"" + ILogEntry.fieldNames[i] + ""String_Node_Str"";
      Object obj=log.getField(i);
      if (obj != null) {
        if (i == ILogEntry.FIELD_ENTRYTYPE) {
          nameValue[i][1]=obj.toString() + ""String_Node_Str"" + LogTypeHelper.getLogTypeDescription((Integer)obj)+ ""String_Node_Str"";
        }
 else         if (i == ILogEntry.FIELD_TIMESTAMP) {
          SimpleDateFormat df=new SimpleDateFormat(ILogEntry.TIME_FORMAT);
          Date dt=(Date)obj;
          StringBuffer dateSB=new StringBuffer();
          java.text.FieldPosition pos=new java.text.FieldPosition(0);
          df.format(dt,dateSB,pos);
          nameValue[i][1]=dateSB.toString();
        }
 else {
          nameValue[i][1]=obj.toString();
        }
      }
 else {
        nameValue[i][1]=""String_Node_Str"";
      }
    }
    for (int i=ILogEntry.NUMBER_OF_FIELDS; i < rowsNum; i++) {
      nameValue[i][0]=""String_Node_Str"" + additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getName() + ""String_Node_Str"";
      nameValue[i][1]=additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getValue();
    }
    getColumnModel().getColumn(0).setHeaderValue(""String_Node_Str"");
    getColumnModel().getColumn(1).setHeaderValue(""String_Node_Str"");
    getTableHeader().resizeAndRepaint();
    resizeAndRepaint();
  }
}",0.9967302452316076
134975,"/** 
 * Fill the table with the fields of the given log
 * @param log The log whose content is shown in the table
 */
public void setupContent(ILogEntry log){
  if (log == null) {
    setEmptyContent();
  }
  Vector<ILogEntry.AdditionalData> additionalData=log.getAdditionalData();
  rowsNum=ILogEntry.NUMBER_OF_FIELDS;
  if (additionalData != null) {
    rowsNum+=additionalData.size();
  }
  if (rowsNum > 0) {
    nameValue=new String[rowsNum][2];
    for (int i=0; i < ILogEntry.NUMBER_OF_FIELDS; i++) {
      nameValue[i][0]=""String_Node_Str"" + ILogEntry.fieldNames[i] + ""String_Node_Str"";
      Object obj=log.getField(i);
      if (obj != null) {
        if (i == ILogEntry.FIELD_ENTRYTYPE) {
          nameValue[i][1]=obj.toString() + ""String_Node_Str"" + LogTypeHelper.getLogTypeDescription((Integer)obj)+ ""String_Node_Str"";
        }
 else         if (i == ILogEntry.FIELD_TIMESTAMP) {
          SimpleDateFormat df=new SimpleDateFormat(ILogEntry.TIME_FORMAT);
          Date dt=(Date)obj;
          StringBuffer dateSB=new StringBuffer();
          java.text.FieldPosition pos=new java.text.FieldPosition(0);
          df.format(dt,dateSB,pos);
          nameValue[i][1]=dateSB.toString();
        }
 else {
          nameValue[i][1]=obj.toString();
        }
      }
 else {
        nameValue[i][1]=""String_Node_Str"";
      }
    }
    for (int i=ILogEntry.NUMBER_OF_FIELDS; i < rowsNum; i++) {
      nameValue[i][0]=""String_Node_Str"" + additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getName() + ""String_Node_Str"";
      nameValue[i][1]=additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getValue();
    }
    getColumnModel().getColumn(0).setHeaderValue(""String_Node_Str"");
    getColumnModel().getColumn(1).setHeaderValue(""String_Node_Str"");
    getTableHeader().resizeAndRepaint();
    resizeAndRepaint();
  }
}","/** 
 * Fill the table with the fields of the given log
 * @param log The log whose content is shown in the table
 */
public void setupContent(ILogEntry log){
  if (log == null) {
    setEmptyContent();
    return;
  }
  Vector<ILogEntry.AdditionalData> additionalData=log.getAdditionalData();
  rowsNum=ILogEntry.NUMBER_OF_FIELDS;
  if (additionalData != null) {
    rowsNum+=additionalData.size();
  }
  if (rowsNum > 0) {
    nameValue=new String[rowsNum][2];
    for (int i=0; i < ILogEntry.NUMBER_OF_FIELDS; i++) {
      nameValue[i][0]=""String_Node_Str"" + ILogEntry.fieldNames[i] + ""String_Node_Str"";
      Object obj=log.getField(i);
      if (obj != null) {
        if (i == ILogEntry.FIELD_ENTRYTYPE) {
          nameValue[i][1]=obj.toString() + ""String_Node_Str"" + LogTypeHelper.getLogTypeDescription((Integer)obj)+ ""String_Node_Str"";
        }
 else         if (i == ILogEntry.FIELD_TIMESTAMP) {
          SimpleDateFormat df=new SimpleDateFormat(ILogEntry.TIME_FORMAT);
          Date dt=(Date)obj;
          StringBuffer dateSB=new StringBuffer();
          java.text.FieldPosition pos=new java.text.FieldPosition(0);
          df.format(dt,dateSB,pos);
          nameValue[i][1]=dateSB.toString();
        }
 else {
          nameValue[i][1]=obj.toString();
        }
      }
 else {
        nameValue[i][1]=""String_Node_Str"";
      }
    }
    for (int i=ILogEntry.NUMBER_OF_FIELDS; i < rowsNum; i++) {
      nameValue[i][0]=""String_Node_Str"" + additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getName() + ""String_Node_Str"";
      nameValue[i][1]=additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getValue();
    }
    getColumnModel().getColumn(0).setHeaderValue(""String_Node_Str"");
    getColumnModel().getColumn(1).setHeaderValue(""String_Node_Str"");
    getTableHeader().resizeAndRepaint();
    resizeAndRepaint();
  }
}",0.9967302452316076
134976,"/** 
 * Fill the table with the fields of the given log
 * @param log The log whose content is shown in the table
 */
public void setupContent(ILogEntry log){
  if (log == null) {
    setEmptyContent();
  }
  Vector<ILogEntry.AdditionalData> additionalData=log.getAdditionalData();
  rowsNum=ILogEntry.NUMBER_OF_FIELDS;
  if (additionalData != null) {
    rowsNum+=additionalData.size();
  }
  if (rowsNum > 0) {
    nameValue=new String[rowsNum][2];
    for (int i=0; i < ILogEntry.NUMBER_OF_FIELDS; i++) {
      nameValue[i][0]=""String_Node_Str"" + ILogEntry.fieldNames[i] + ""String_Node_Str"";
      Object obj=log.getField(i);
      if (obj != null) {
        if (i == ILogEntry.FIELD_ENTRYTYPE) {
          nameValue[i][1]=obj.toString() + ""String_Node_Str"" + LogTypeHelper.getLogTypeDescription((Integer)obj)+ ""String_Node_Str"";
        }
 else         if (i == ILogEntry.FIELD_TIMESTAMP) {
          SimpleDateFormat df=new SimpleDateFormat(ILogEntry.TIME_FORMAT);
          Date dt=(Date)obj;
          StringBuffer dateSB=new StringBuffer();
          java.text.FieldPosition pos=new java.text.FieldPosition(0);
          df.format(dt,dateSB,pos);
          nameValue[i][1]=dateSB.toString();
        }
 else {
          nameValue[i][1]=obj.toString();
        }
      }
 else {
        nameValue[i][1]=""String_Node_Str"";
      }
    }
    for (int i=ILogEntry.NUMBER_OF_FIELDS; i < rowsNum; i++) {
      nameValue[i][0]=""String_Node_Str"" + additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getName() + ""String_Node_Str"";
      nameValue[i][1]=additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getValue();
    }
    getColumnModel().getColumn(0).setHeaderValue(""String_Node_Str"");
    getColumnModel().getColumn(1).setHeaderValue(""String_Node_Str"");
    getTableHeader().resizeAndRepaint();
    resizeAndRepaint();
  }
}","/** 
 * Fill the table with the fields of the given log
 * @param log The log whose content is shown in the table
 */
public void setupContent(ILogEntry log){
  if (log == null) {
    setEmptyContent();
    return;
  }
  Vector<ILogEntry.AdditionalData> additionalData=log.getAdditionalData();
  rowsNum=ILogEntry.NUMBER_OF_FIELDS;
  if (additionalData != null) {
    rowsNum+=additionalData.size();
  }
  if (rowsNum > 0) {
    nameValue=new String[rowsNum][2];
    for (int i=0; i < ILogEntry.NUMBER_OF_FIELDS; i++) {
      nameValue[i][0]=""String_Node_Str"" + ILogEntry.fieldNames[i] + ""String_Node_Str"";
      Object obj=log.getField(i);
      if (obj != null) {
        if (i == ILogEntry.FIELD_ENTRYTYPE) {
          nameValue[i][1]=obj.toString() + ""String_Node_Str"" + LogTypeHelper.getLogTypeDescription((Integer)obj)+ ""String_Node_Str"";
        }
 else         if (i == ILogEntry.FIELD_TIMESTAMP) {
          SimpleDateFormat df=new SimpleDateFormat(ILogEntry.TIME_FORMAT);
          Date dt=(Date)obj;
          StringBuffer dateSB=new StringBuffer();
          java.text.FieldPosition pos=new java.text.FieldPosition(0);
          df.format(dt,dateSB,pos);
          nameValue[i][1]=dateSB.toString();
        }
 else {
          nameValue[i][1]=obj.toString();
        }
      }
 else {
        nameValue[i][1]=""String_Node_Str"";
      }
    }
    for (int i=ILogEntry.NUMBER_OF_FIELDS; i < rowsNum; i++) {
      nameValue[i][0]=""String_Node_Str"" + additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getName() + ""String_Node_Str"";
      nameValue[i][1]=additionalData.get(i - ILogEntry.NUMBER_OF_FIELDS).getValue();
    }
    getColumnModel().getColumn(0).setHeaderValue(""String_Node_Str"");
    getColumnModel().getColumn(1).setHeaderValue(""String_Node_Str"");
    getTableHeader().resizeAndRepaint();
    resizeAndRepaint();
  }
}",0.9967302452316076
134977,"/** 
 * Callback method, configures this logger from the data in logConfig.
 * @see alma.acs.logging.config.LogConfigSubscriber#configureLogging(alma.acs.logging.config.LogConfig)
 */
public void configureLogging(LogConfig logConfig){
  try {
    UnnamedLogger config=logConfig.getNamedLoggerConfig(getName());
    configureJDKLogger(this,config);
  }
 catch (  Exception e) {
    info(""String_Node_Str"");
  }
  Filter logFilter=getFilter();
  if (logFilter != null && logFilter instanceof JacORBFilter) {
    ((JacORBFilter)logFilter).setLogLevel(getLevel());
  }
}","/** 
 * Callback method, configures this logger from the data in logConfig.
 * @see alma.acs.logging.config.LogConfigSubscriber#configureLogging(alma.acs.logging.config.LogConfig)
 */
public void configureLogging(LogConfig logConfig){
  try {
    String shortName=ClientLogManager.stripKnownLoggerNamespacePrefix(getLoggerName());
    UnnamedLogger config=logConfig.getNamedLoggerConfig(shortName);
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + shortName + ""String_Node_Str""+ config.getMinLogLevel()+ ""String_Node_Str""+ config.getMinLogLevelLocal());
    }
    configureJDKLogger(this,config);
  }
 catch (  Exception e) {
    log(Level.INFO,""String_Node_Str"",e);
  }
  Filter logFilter=getFilter();
  if (logFilter != null && logFilter instanceof JacORBFilter) {
    ((JacORBFilter)logFilter).setLogLevel(getLevel());
  }
}",0.7852062588904695
134978,"/** 
 * Auxiliary ctor. Don't use it directly from outside of this class.
 */
protected AcsLogger(String name,String resourceBundleName,LogConfig logConfig,boolean allowNullLogConfig){
  super(name,resourceBundleName);
  addLoggerClass(AcsLogger.class);
  addLoggerClass(Logger.class);
  if (logConfig != null) {
    logConfig.addSubscriber(this);
    configureLogging(logConfig);
  }
 else   if (!allowNullLogConfig) {
    throw new NullPointerException(""String_Node_Str"");
  }
}","/** 
 * Auxiliary ctor. Don't use it directly from outside of this class.
 */
protected AcsLogger(String name,String resourceBundleName,LogConfig logConfig,boolean allowNullLogConfig){
  super(name,resourceBundleName);
  if (DEBUG) {
    System.out.println(""String_Node_Str"");
  }
  addLoggerClass(AcsLogger.class);
  addLoggerClass(Logger.class);
  if (logConfig != null) {
    logConfig.addSubscriber(this);
    configureLogging(logConfig);
  }
 else   if (!allowNullLogConfig) {
    throw new NullPointerException(""String_Node_Str"");
  }
}",0.9393346379647748
134979,"/** 
 * Service method for configuring even a non-ACS Logger.  Shares code with   {@link #configureLogging(LogConfig)}.
 * @param jdkLogger 
 * @param logConfigData
 */
static void configureJDKLogger(Logger jdkLogger,UnnamedLogger loggerConfig){
  int minLogLevelACS;
  try {
    minLogLevelACS=Math.min(loggerConfig.getMinLogLevel(),loggerConfig.getMinLogLevelLocal());
    AcsLogLevel minLogLevelJDK=AcsLogLevel.fromAcsCoreLevel(minLogLevelACS);
    jdkLogger.setLevel(minLogLevelJDK);
  }
 catch (  Exception ex) {
    jdkLogger.info(""String_Node_Str"");
  }
}","/** 
 * Service method for configuring even a non-ACS Logger.  Shares code with   {@link #configureLogging(LogConfig)}.
 * @param jdkLogger 
 * @param logConfigData
 */
static void configureJDKLogger(Logger jdkLogger,UnnamedLogger loggerConfig){
  int minLogLevelACS;
  try {
    minLogLevelACS=Math.min(loggerConfig.getMinLogLevel(),loggerConfig.getMinLogLevelLocal());
    AcsLogLevel minLogLevelJDK=AcsLogLevel.fromAcsCoreLevel(minLogLevelACS);
    jdkLogger.setLevel(minLogLevelJDK);
  }
 catch (  Exception ex) {
    jdkLogger.log(Level.INFO,""String_Node_Str"",ex);
  }
}",0.9797713280562884
134980,"/** 
 * @see alma.acs.logging.config.LogConfigSubscriber#configureLogging(alma.acs.logging.LogConfig)
 */
public void configureLogging(LogConfig logConfig){
  LoggingConfig loggingConfig=logConfig.getLoggingConfig();
  if (!loggingConfig.getCentralizedLogger().equals(logServiceName)) {
    if (logServiceName == null) {
      logServiceName=loggingConfig.getCentralizedLogger();
    }
 else {
      m_internalLogger.warning(""String_Node_Str"");
    }
  }
  if (loggingConfig.getFlushPeriodSeconds() != flushPeriodSeconds) {
    flushPeriodSeconds=loggingConfig.getFlushPeriodSeconds();
    if (logQueue != null) {
      logQueue.setPeriodicFlushing(loggingConfig.getFlushPeriodSeconds());
    }
  }
}","/** 
 * @see alma.acs.logging.config.LogConfigSubscriber#configureLogging(alma.acs.logging.LogConfig)
 */
public void configureLogging(LogConfig logConfig){
  LoggingConfig loggingConfig=logConfig.getLoggingConfig();
  if (!loggingConfig.getCentralizedLogger().equals(logServiceName)) {
    if (logServiceName == null) {
      logServiceName=loggingConfig.getCentralizedLogger();
    }
 else {
      m_internalLogger.warning(""String_Node_Str"");
    }
  }
  if (loggingConfig.getFlushPeriodSeconds() != flushPeriodSeconds) {
    flushPeriodSeconds=loggingConfig.getFlushPeriodSeconds();
    if (logQueue != null) {
      logQueue.setPeriodicFlushing(loggingConfig.getFlushPeriodSeconds());
    }
  }
  if (logQueue != null) {
    logQueue.setMaxQueueSize(loggingConfig.getMaxLogQueueSize());
  }
}",0.9358288770053476
134981,"/** 
 * The thread that takes log from the vector and publish the log to the listeners
 */
public void run(){
  String log=null;
  ILogEntry logEntry=null;
  while (!terminateThread) {
    Object obj;
    try {
      obj=receivedLogs.take();
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"" + ie.getMessage());
      ie.printStackTrace();
      continue;
    }
    if (binaryFormat) {
      System.out.println(""String_Node_Str"");
      continue;
    }
 else {
      log=(String)obj;
    }
    if (engine.hasRawLogListeners()) {
      engine.publishRawLog(log);
    }
    if (engine.hasLogListeners()) {
      try {
        logEntry=parser.parse(log);
      }
 catch (      Exception e) {
        StringBuilder strB=new StringBuilder(""String_Node_Str"");
        strB.append(""String_Node_Str"" + log);
        ErrorLogDialog.getErrorLogDlg(true).appendText(strB.toString());
        engine.publishReport(strB.toString());
        System.err.println(""String_Node_Str"" + e.getMessage());
        System.err.println(""String_Node_Str"" + log);
        e.printStackTrace(System.err);
        continue;
      }
      engine.publishLog(logEntry);
    }
  }
}","/** 
 * The thread that takes log from the vector and publish the log to the listeners
 */
public void run(){
  String log=null;
  ILogEntry logEntry=null;
  while (!terminateThread) {
    try {
      log=xmlLogs.poll(250,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"" + ie.getMessage());
      ie.printStackTrace();
      continue;
    }
    if (log == null) {
      continue;
    }
    if (engine.hasRawLogListeners()) {
      engine.publishRawLog(log);
    }
    if (engine.hasLogListeners()) {
      try {
        logEntry=parser.parse(log);
      }
 catch (      Exception e) {
        StringBuilder strB=new StringBuilder(""String_Node_Str"");
        strB.append(""String_Node_Str"" + log);
        ErrorLogDialog.getErrorLogDlg(true).appendText(strB.toString());
        engine.publishReport(strB.toString());
        System.err.println(""String_Node_Str"" + e.getMessage());
        System.err.println(""String_Node_Str"" + log);
        e.printStackTrace(System.err);
        continue;
      }
      engine.publishLog(logEntry);
    }
  }
}",0.5346707370257305
134982,"public LinkedBlockingQueue<String> getXmlLogs(){
  LinkedBlockingQueue<String> XmlLogs=receivedLogs;
  XmlLogs.add(""String_Node_Str"");
  XmlLogs.add(""String_Node_Str"");
  return XmlLogs;
}","public LinkedBlockingQueue<String> getXmlLogs(){
  LinkedBlockingQueue<String> XmlLogs=xmlLogs;
  XmlLogs.add(""String_Node_Str"");
  XmlLogs.add(""String_Node_Str"");
  return XmlLogs;
}",0.9703504043126684
134983,"/** 
 * The thread that takes log from the vector and publish the log to the listeners
 */
public void run(){
  String log=null;
  ILogEntry logEntry=null;
  while (!terminateThread) {
    Object obj;
    try {
      obj=receivedLogs.take();
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"" + ie.getMessage());
      ie.printStackTrace();
      continue;
    }
    if (binaryFormat) {
      System.out.println(""String_Node_Str"");
      continue;
    }
 else {
      log=(String)obj;
    }
    if (engine.hasRawLogListeners()) {
      engine.publishRawLog(log);
    }
    if (engine.hasLogListeners()) {
      try {
        logEntry=parser.parse(log);
      }
 catch (      Exception e) {
        StringBuilder strB=new StringBuilder(""String_Node_Str"");
        strB.append(""String_Node_Str"" + log);
        ErrorLogDialog.getErrorLogDlg(true).appendText(strB.toString());
        engine.publishReport(strB.toString());
        System.err.println(""String_Node_Str"" + e.getMessage());
        System.err.println(""String_Node_Str"" + log);
        e.printStackTrace(System.err);
        continue;
      }
      engine.publishLog(logEntry);
    }
  }
}","/** 
 * The thread that takes log from the vector and publish the log to the listeners
 */
public void run(){
  String log=null;
  ILogEntry logEntry=null;
  while (!terminateThread) {
    try {
      log=xmlLogs.poll(250,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"" + ie.getMessage());
      ie.printStackTrace();
      continue;
    }
    if (log == null) {
      continue;
    }
    if (engine.hasRawLogListeners()) {
      engine.publishRawLog(log);
    }
    if (engine.hasLogListeners()) {
      try {
        logEntry=parser.parse(log);
      }
 catch (      Exception e) {
        StringBuilder strB=new StringBuilder(""String_Node_Str"");
        strB.append(""String_Node_Str"" + log);
        ErrorLogDialog.getErrorLogDlg(true).appendText(strB.toString());
        engine.publishReport(strB.toString());
        System.err.println(""String_Node_Str"" + e.getMessage());
        System.err.println(""String_Node_Str"" + log);
        e.printStackTrace(System.err);
        continue;
      }
      engine.publishLog(logEntry);
    }
  }
}",0.5346707370257305
134984,"public LinkedBlockingQueue<String> getXmlLogs(){
  LinkedBlockingQueue<String> XmlLogs=receivedLogs;
  XmlLogs.add(""String_Node_Str"");
  XmlLogs.add(""String_Node_Str"");
  return XmlLogs;
}","public LinkedBlockingQueue<String> getXmlLogs(){
  LinkedBlockingQueue<String> XmlLogs=xmlLogs;
  XmlLogs.add(""String_Node_Str"");
  XmlLogs.add(""String_Node_Str"");
  return XmlLogs;
}",0.9703504043126684
134985,"/** 
 * The thread that takes log from the vector and publish the log to the listeners
 */
public void run(){
  String log=null;
  ILogEntry logEntry=null;
  while (!terminateThread) {
    Object obj;
    try {
      obj=receivedLogs.take();
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"" + ie.getMessage());
      ie.printStackTrace();
      continue;
    }
    if (binaryFormat) {
      System.out.println(""String_Node_Str"");
      continue;
    }
 else {
      log=(String)obj;
    }
    if (engine.hasRawLogListeners()) {
      engine.publishRawLog(log);
    }
    if (engine.hasLogListeners()) {
      try {
        logEntry=parser.parse(log);
      }
 catch (      Exception e) {
        StringBuilder strB=new StringBuilder(""String_Node_Str"");
        strB.append(""String_Node_Str"" + log);
        ErrorLogDialog.getErrorLogDlg(true).appendText(strB.toString());
        engine.publishReport(strB.toString());
        System.err.println(""String_Node_Str"" + e.getMessage());
        System.err.println(""String_Node_Str"" + log);
        e.printStackTrace(System.err);
        continue;
      }
      engine.publishLog(logEntry);
    }
  }
}","/** 
 * The thread that takes log from the vector and publish the log to the listeners
 */
public void run(){
  String log=null;
  ILogEntry logEntry=null;
  while (!terminateThread) {
    try {
      log=xmlLogs.poll(250,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException ie) {
      System.out.println(""String_Node_Str"" + ie.getMessage());
      ie.printStackTrace();
      continue;
    }
    if (log == null) {
      continue;
    }
    if (engine.hasRawLogListeners()) {
      engine.publishRawLog(log);
    }
    if (engine.hasLogListeners()) {
      try {
        logEntry=parser.parse(log);
      }
 catch (      Exception e) {
        StringBuilder strB=new StringBuilder(""String_Node_Str"");
        strB.append(""String_Node_Str"" + log);
        ErrorLogDialog.getErrorLogDlg(true).appendText(strB.toString());
        engine.publishReport(strB.toString());
        System.err.println(""String_Node_Str"" + e.getMessage());
        System.err.println(""String_Node_Str"" + log);
        e.printStackTrace(System.err);
        continue;
      }
      engine.publishLog(logEntry);
    }
  }
}",0.5346707370257305
134986,"public LinkedBlockingQueue<String> getXmlLogs(){
  LinkedBlockingQueue<String> XmlLogs=receivedLogs;
  XmlLogs.add(""String_Node_Str"");
  XmlLogs.add(""String_Node_Str"");
  return XmlLogs;
}","public LinkedBlockingQueue<String> getXmlLogs(){
  LinkedBlockingQueue<String> XmlLogs=xmlLogs;
  XmlLogs.add(""String_Node_Str"");
  XmlLogs.add(""String_Node_Str"");
  return XmlLogs;
}",0.9703504043126684
134987,"/** 
 * Starts to periodically monitor the resource that <code>checker</code> contains. The monitor delay length is given by   {@link #delaySeconds}. <p>  In order to randomize check times even if many resources get signed up for monitoring one after the other,  the initial delay before the first check is run is taken randomly between 1 second and the period time. 
 * @param checker
 * @param delaySeconds determines the delay between ending a check call and starting the next one. If &lt;1, then the default is used.
 * @throws IllegalStateException if {@link #destroy(long,TimeUnit)} has been called.
 * @throws IllegalArgumentException if any of the arguments are <code>null</code><code>, or if checker.getResource()</code> or <code>checker.getResourceName()</code> returns <code>null</code>.
 */
<T>void monitorResource(ResourceChecker<T> checker,ResourceErrorHandler<T> err,int delaySeconds){
  if (isShuttingDown) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (checker == null || checker.getResource() == null || checker.getResourceName() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (err == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (delaySeconds < 1) {
    delaySeconds=defaultDelaySeconds;
  }
synchronized (resourceRunners) {
    for (    ResourceCheckRunner otherRunner : resourceRunners) {
      ResourceChecker otherChecker=otherRunner.getResourceChecker();
      Object otherResource=otherChecker.getResource();
      String otherResourceName=otherChecker.getResourceName();
      if (otherResource == checker.getResource()) {
        String msg=""String_Node_Str"" + checker.getResourceName() + ""String_Node_Str"";
        if (!otherResourceName.equals(checker.getResourceName())) {
          msg+=""String_Node_Str"" + otherResourceName + ""String_Node_Str"";
        }
        msg+=""String_Node_Str"";
        logger.info(msg);
        Future future=otherRunner.getScheduleFuture();
        future.cancel(true);
        resourceRunners.remove(otherChecker);
        break;
      }
    }
    SubsysResourceMonitor.ResourceCheckRunner<T> checkRunner=new SubsysResourceMonitor.ResourceCheckRunner<T>(checker,err,logger,monitorCallThreadPool);
    int initialDelaySeconds=random.nextInt(delaySeconds);
    Future future=scheduler.scheduleWithFixedDelay(checkRunner,initialDelaySeconds,delaySeconds,TimeUnit.SECONDS);
    checkRunner.setScheduleFuture(future);
    resourceRunners.add(checkRunner);
  }
}","/** 
 * Starts to periodically monitor the resource that <code>checker</code> contains. The monitor delay length is given by   {@link #delaySeconds}. <p>  In order to randomize check times even if many resources get signed up for monitoring one after the other,  the initial delay before the first check is run is taken randomly between 1 second and the period time. 
 * @param checker
 * @param delaySeconds determines the delay between ending a check call and starting the next one. If &lt;1, then the default is used.
 * @throws IllegalStateException if {@link #destroy(long,TimeUnit)} has been called.
 * @throws IllegalArgumentException if any of the arguments are <code>null</code><code>, or if checker.getResource()</code> or <code>checker.getResourceName()</code> returns <code>null</code>.
 */
<T>void monitorResource(ResourceChecker<T> checker,ResourceErrorHandler<T> err,int delaySeconds){
  if (isShuttingDown) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (checker == null || checker.getResource() == null || checker.getResourceName() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (err == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (delaySeconds < 1) {
    delaySeconds=defaultDelaySeconds;
  }
synchronized (resourceRunners) {
    for (    ResourceCheckRunner otherRunner : resourceRunners) {
      ResourceChecker otherChecker=otherRunner.getResourceChecker();
      Object otherResource=otherChecker.getResource();
      String otherResourceName=otherChecker.getResourceName();
      if (otherResource == checker.getResource()) {
        String msg=""String_Node_Str"" + checker.getResourceName() + ""String_Node_Str"";
        if (!otherResourceName.equals(checker.getResourceName())) {
          msg+=""String_Node_Str"" + otherResourceName + ""String_Node_Str"";
        }
        msg+=""String_Node_Str"";
        logger.info(msg);
        Future future=otherRunner.getScheduleFuture();
        future.cancel(true);
        resourceRunners.remove(otherRunner);
        break;
      }
    }
    SubsysResourceMonitor.ResourceCheckRunner<T> checkRunner=new SubsysResourceMonitor.ResourceCheckRunner<T>(checker,err,logger,monitorCallThreadPool);
    int initialDelaySeconds=random.nextInt(delaySeconds);
    Future future=scheduler.scheduleWithFixedDelay(checkRunner,initialDelaySeconds,delaySeconds,TimeUnit.SECONDS);
    checkRunner.setScheduleFuture(future);
    resourceRunners.add(checkRunner);
  }
}",0.9981996399279855
134988,"/** 
 * Returns the FiltersMenuItem property value.
 * @return javax.swing.JMenuItem
 */
public JMenu getFiltersMenu(){
  filtersMenu=new JMenu(""String_Node_Str"");
  filtersMenu.add(getLoadFiltersMenuItem());
  filtersMenu.add(getSaveFiltersMenuItem());
  filtersMenu.add(getSaveAsFiltersMenuItem());
  filtersMenu.add(getEditFiltersMenuItem());
  return filtersMenu;
}","/** 
 * Returns the FiltersMenuItem property value.
 * @return javax.swing.JMenuItem
 */
private JMenu getFiltersMenu(){
  filtersMenu=new JMenu(""String_Node_Str"");
  filtersMenu.setName(""String_Node_Str"");
  filtersMenu.add(getLoadFiltersMenuItem());
  filtersMenu.add(getSaveFiltersMenuItem());
  filtersMenu.add(getSaveAsFiltersMenuItem());
  filtersMenu.add(getEditFiltersMenuItem());
  return filtersMenu;
}",0.9321382842509603
134989,"/** 
 * Enable/Disbale all the controls in the GUI that could trigger the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
public void setEnabledGUIControls(boolean enabled){
  getFiltersMenu().setEnabled(enabled);
  getSearchMenu().setEnabled(enabled);
  getFieldsMenuItem().setEnabled(enabled);
  getLoadMenuItem().setEnabled(enabled);
  getLoadURLMenuItem().setEnabled(enabled);
  getClearLogsMenuItem().setEnabled(enabled);
  getSaveFileMenuItem().setEnabled(enabled);
  getConnectMenuItem().setEnabled(enabled);
  getAutoReconnectMenuItem().setEnabled(enabled);
}","/** 
 * Enable/Disbale all the controls in the GUI that could trigger the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
public void setEnabledGUIControls(boolean enabled){
  getSearchMenu().setEnabled(enabled);
  getFieldsMenuItem().setEnabled(enabled);
  getLoadMenuItem().setEnabled(enabled);
  getLoadURLMenuItem().setEnabled(enabled);
  getClearLogsMenuItem().setEnabled(enabled);
  getSaveFileMenuItem().setEnabled(enabled);
  getConnectMenuItem().setEnabled(enabled);
  getAutoReconnectMenuItem().setEnabled(enabled);
}",0.9654576856649396
134990,"/** 
 * Returns the FiltersMenuItem property value.
 * @return javax.swing.JMenuItem
 */
public JMenu getFiltersMenu(){
  filtersMenu=new JMenu(""String_Node_Str"");
  filtersMenu.add(getLoadFiltersMenuItem());
  filtersMenu.add(getSaveFiltersMenuItem());
  filtersMenu.add(getSaveAsFiltersMenuItem());
  filtersMenu.add(getEditFiltersMenuItem());
  return filtersMenu;
}","/** 
 * Returns the FiltersMenuItem property value.
 * @return javax.swing.JMenuItem
 */
private JMenu getFiltersMenu(){
  filtersMenu=new JMenu(""String_Node_Str"");
  filtersMenu.setName(""String_Node_Str"");
  filtersMenu.add(getLoadFiltersMenuItem());
  filtersMenu.add(getSaveFiltersMenuItem());
  filtersMenu.add(getSaveAsFiltersMenuItem());
  filtersMenu.add(getEditFiltersMenuItem());
  return filtersMenu;
}",0.9321382842509603
134991,"/** 
 * Enable/Disbale all the controls in the GUI that could trigger the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
public void setEnabledGUIControls(boolean enabled){
  getFiltersMenu().setEnabled(enabled);
  getSearchMenu().setEnabled(enabled);
  getFieldsMenuItem().setEnabled(enabled);
  getLoadMenuItem().setEnabled(enabled);
  getLoadURLMenuItem().setEnabled(enabled);
  getClearLogsMenuItem().setEnabled(enabled);
  getSaveFileMenuItem().setEnabled(enabled);
  getConnectMenuItem().setEnabled(enabled);
  getAutoReconnectMenuItem().setEnabled(enabled);
}","/** 
 * Enable/Disbale all the controls in the GUI that could trigger the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
public void setEnabledGUIControls(boolean enabled){
  getSearchMenu().setEnabled(enabled);
  getFieldsMenuItem().setEnabled(enabled);
  getLoadMenuItem().setEnabled(enabled);
  getLoadURLMenuItem().setEnabled(enabled);
  getClearLogsMenuItem().setEnabled(enabled);
  getSaveFileMenuItem().setEnabled(enabled);
  getConnectMenuItem().setEnabled(enabled);
  getAutoReconnectMenuItem().setEnabled(enabled);
}",0.9654576856649396
134992,"/** 
 * Returns the FiltersMenuItem property value.
 * @return javax.swing.JMenuItem
 */
public JMenu getFiltersMenu(){
  filtersMenu=new JMenu(""String_Node_Str"");
  filtersMenu.add(getLoadFiltersMenuItem());
  filtersMenu.add(getSaveFiltersMenuItem());
  filtersMenu.add(getSaveAsFiltersMenuItem());
  filtersMenu.add(getEditFiltersMenuItem());
  return filtersMenu;
}","/** 
 * Returns the FiltersMenuItem property value.
 * @return javax.swing.JMenuItem
 */
private JMenu getFiltersMenu(){
  filtersMenu=new JMenu(""String_Node_Str"");
  filtersMenu.setName(""String_Node_Str"");
  filtersMenu.add(getLoadFiltersMenuItem());
  filtersMenu.add(getSaveFiltersMenuItem());
  filtersMenu.add(getSaveAsFiltersMenuItem());
  filtersMenu.add(getEditFiltersMenuItem());
  return filtersMenu;
}",0.9321382842509603
134993,"/** 
 * Enable/Disbale all the controls in the GUI that could trigger the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
public void setEnabledGUIControls(boolean enabled){
  getFiltersMenu().setEnabled(enabled);
  getSearchMenu().setEnabled(enabled);
  getFieldsMenuItem().setEnabled(enabled);
  getLoadMenuItem().setEnabled(enabled);
  getLoadURLMenuItem().setEnabled(enabled);
  getClearLogsMenuItem().setEnabled(enabled);
  getSaveFileMenuItem().setEnabled(enabled);
  getConnectMenuItem().setEnabled(enabled);
  getAutoReconnectMenuItem().setEnabled(enabled);
}","/** 
 * Enable/Disbale all the controls in the GUI that could trigger the invalidation of the logs
 * @param enabled If true the controls are enabled
 */
public void setEnabledGUIControls(boolean enabled){
  getSearchMenu().setEnabled(enabled);
  getFieldsMenuItem().setEnabled(enabled);
  getLoadMenuItem().setEnabled(enabled);
  getLoadURLMenuItem().setEnabled(enabled);
  getClearLogsMenuItem().setEnabled(enabled);
  getSaveFileMenuItem().setEnabled(enabled);
  getConnectMenuItem().setEnabled(enabled);
  getAutoReconnectMenuItem().setEnabled(enabled);
}",0.9654576856649396
134994,"/** 
 * Prints out a full description of all times that were saved along with other relevant statistical data.
 * @param msg A message to be printed out with the data.
 */
public void fullDescription(String msg){
  String out=""String_Node_Str"";
  out=out + ""String_Node_Str"" + msg;
  out=out + ""String_Node_Str"" + m_totalTime / m_totalNumStarts;
  out=out + ""String_Node_Str"" + m_totalNumStarts;
  out=out + ""String_Node_Str"" + m_minDuration;
  out=out + ""String_Node_Str"" + m_maxDuration;
  out=out + ""String_Node_Str"";
  out=out + ""String_Node_Str"";
  out=out + ""String_Node_Str"" + TimeHelper.getUTCDate();
  out=out + ""String_Node_Str"" + alma.acs.util.ACSPorts.getIP();
  out=out + ""String_Node_Str"";
  out=out + ""String_Node_Str"";
  out=out + m_extraDescrip;
  System.out.println(out);
}","/** 
 * Prints out a full description of all times that were saved along with other relevant statistical data.
 * @param msg A message to be printed out with the data.
 */
public void fullDescription(String msg){
  String out=""String_Node_Str"";
  out=out + ""String_Node_Str"" + msg;
  out=out + ""String_Node_Str"" + (double)((double)m_totalTime / (double)m_totalNumStarts);
  out=out + ""String_Node_Str"" + m_totalNumStarts;
  out=out + ""String_Node_Str"" + m_minDuration;
  out=out + ""String_Node_Str"" + m_maxDuration;
  out=out + ""String_Node_Str"";
  out=out + ""String_Node_Str"";
  out=out + ""String_Node_Str"" + TimeHelper.getUTCDate();
  out=out + ""String_Node_Str"" + alma.acs.util.ACSPorts.getIP();
  out=out + ""String_Node_Str"";
  out=out + ""String_Node_Str"";
  out=out + m_extraDescrip;
  System.out.println(out);
}",0.9639303482587064
134995,"/** 
 * Unpause the play/pause button
 * @return The status of the button previous of the command (true means pasused)
 */
public boolean unpause(){
  boolean ret=pauseBtnPaused;
  pauseBtnPaused=true;
  getPauseBtn().setIcon(pauseIcon);
  getPauseBtn().setText(pauseStr);
  return ret;
}","/** 
 * Unpause the play/pause button
 * @return The status of the button previous of the command (true means pasused)
 */
public boolean unpause(){
  boolean ret=pauseBtnPaused;
  pauseBtnPaused=false;
  getPauseBtn().setIcon(pauseIcon);
  getPauseBtn().setText(pauseStr);
  return ret;
}",0.9878682842287696
134996,"/** 
 * Unpause the play/pause button
 * @return The status of the button previous of the command (true means pasused)
 */
public boolean unpause(){
  boolean ret=pauseBtnPaused;
  pauseBtnPaused=true;
  getPauseBtn().setIcon(pauseIcon);
  getPauseBtn().setText(pauseStr);
  return ret;
}","/** 
 * Unpause the play/pause button
 * @return The status of the button previous of the command (true means pasused)
 */
public boolean unpause(){
  boolean ret=pauseBtnPaused;
  pauseBtnPaused=false;
  getPauseBtn().setIcon(pauseIcon);
  getPauseBtn().setText(pauseStr);
  return ret;
}",0.9878682842287696
134997,"/** 
 * Unpause the play/pause button
 * @return The status of the button previous of the command (true means pasused)
 */
public boolean unpause(){
  boolean ret=pauseBtnPaused;
  pauseBtnPaused=true;
  getPauseBtn().setIcon(pauseIcon);
  getPauseBtn().setText(pauseStr);
  return ret;
}","/** 
 * Unpause the play/pause button
 * @return The status of the button previous of the command (true means pasused)
 */
public boolean unpause(){
  boolean ret=pauseBtnPaused;
  pauseBtnPaused=false;
  getPauseBtn().setIcon(pauseIcon);
  getPauseBtn().setText(pauseStr);
  return ret;
}",0.9878682842287696
134998,"/** 
 * Logs the given <code>LogRecord</code>.  The record can be modified or dropped by the optional filters provided in   {@link #addLogRecordFilter(alma.acs.logging.AcsLogger.LogRecordFilter)}.  <p> Adding of context information: <ul> <li> If the LogRecord has a parameter that is a map which contains additional information  about the line of code, thread, etc., the log record will be taken as provided, and no context information will be added. This can be useful if <ul> <li> the log record was reconstructed from a remote error by the ACS error handling code (see <code>AcsJException</code>), or <li> if in very exceptional cases application code needs to manipulate such information by hand. </ul> <li> otherwise, context information is inferred, similar to   {@link LogRecord#inferCaller()}, but additionally including thread name and line of code. </ul>   Note that by overloading this method, we intercept all logging activities of the base class.
 * @see java.util.logging.Logger#log(java.util.logging.LogRecord)
 */
public void log(LogRecord record){
  Logger loggerWithLevel=this;
  while (loggerWithLevel.getLevel() == null) {
    loggerWithLevel=loggerWithLevel.getParent();
  }
  int levelValue=loggerWithLevel.getLevel().intValue();
  if (record.getLevel().intValue() < levelValue || levelValue == offValue) {
    return;
  }
  if (loggerName != null) {
    record.setLoggerName(loggerName);
  }
  LogParameterUtil paramUtil=new LogParameterUtil(record);
  Map<String,Object> specialProperties=paramUtil.extractSpecialPropertiesMap();
  if (specialProperties == null) {
    specialProperties=LogParameterUtil.createPropertiesMap();
    record.setParameters(new Object[]{specialProperties});
    String threadName=Thread.currentThread().getName();
    specialProperties.put(LogParameterUtil.PARAM_THREAD_NAME,threadName);
    StackTraceElement stack[]=(new Throwable()).getStackTrace();
    int ix=0;
    while (ix < stack.length) {
      StackTraceElement frame=stack[ix];
      String cname=frame.getClassName();
      if (!loggerClassNames.contains(cname)) {
        record.setSourceClassName(cname);
        record.setSourceMethodName(frame.getMethodName());
        int lineNumber=frame.getLineNumber();
        specialProperties.put(LogParameterUtil.PARAM_LINE,new Long(lineNumber));
        break;
      }
      ix++;
    }
  }
  super.log(record);
}","/** 
 * Logs the given <code>LogRecord</code>.  The record can be modified or dropped by the optional filters provided in   {@link #addLogRecordFilter(alma.acs.logging.AcsLogger.LogRecordFilter)}.  <p> Adding of context information: <ul> <li> If the LogRecord has a parameter that is a map which contains additional information  about the line of code, thread, etc., the log record will be taken as provided, and no context information will be added. This can be useful if <ul> <li> the log record was reconstructed from a remote error by the ACS error handling code (see <code>AcsJException</code>), or <li> if in very exceptional cases application code needs to manipulate such information by hand. </ul> <li> otherwise, context information is inferred, similar to   {@link LogRecord#inferCaller()}, but additionally including thread name and line of code. </ul>   Note that by overloading this method, we intercept all logging activities of the base class.
 * @see java.util.logging.Logger#log(java.util.logging.LogRecord)
 */
public void log(LogRecord record){
  Logger loggerWithLevel=this;
  while (loggerWithLevel.getLevel() == null) {
    loggerWithLevel=loggerWithLevel.getParent();
  }
  int levelValue=loggerWithLevel.getLevel().intValue();
  if (record.getLevel().intValue() < levelValue || levelValue == offValue) {
    return;
  }
  if (loggerName != null) {
    record.setLoggerName(loggerName);
  }
  LogParameterUtil paramUtil=new LogParameterUtil(record);
  Map<String,Object> specialProperties=paramUtil.extractSpecialPropertiesMap();
  if (specialProperties == null) {
    specialProperties=LogParameterUtil.createPropertiesMap();
    List<Object> paramList=paramUtil.getNonSpecialPropertiesMapParameters();
    paramList.add(0,specialProperties);
    record.setParameters(paramList.toArray());
    String threadName=Thread.currentThread().getName();
    specialProperties.put(LogParameterUtil.PARAM_THREAD_NAME,threadName);
    StackTraceElement stack[]=(new Throwable()).getStackTrace();
    int ix=0;
    while (ix < stack.length) {
      StackTraceElement frame=stack[ix];
      String cname=frame.getClassName();
      if (!loggerClassNames.contains(cname)) {
        record.setSourceClassName(cname);
        record.setSourceMethodName(frame.getMethodName());
        int lineNumber=frame.getLineNumber();
        specialProperties.put(LogParameterUtil.PARAM_LINE,new Long(lineNumber));
        break;
      }
      ix++;
    }
  }
  super.log(record);
}",0.9660144181256436
134999,"/** 
 * Suspend the notification of the incoming logs
 * @see LCEngine
 * @param suspended If true suspend the notification of new logs
 */
public void setSuspended(boolean suspended){
  acsSPS.setSupended(suspended);
}","/** 
 * Suspend the notification of the incoming logs
 * @see LCEngine
 * @param suspended If true suspend the notification of new logs
 */
public void setSuspended(boolean suspended){
  if (acsSPS != null) {
    acsSPS.setSupended(suspended);
  }
}",0.935897435897436
135000,"/** 
 * Suspend the notification of the incoming logs
 * @see LCEngine
 * @param suspended If true suspend the notification of new logs
 */
public void setSuspended(boolean suspended){
  acsSPS.setSupended(suspended);
}","/** 
 * Suspend the notification of the incoming logs
 * @see LCEngine
 * @param suspended If true suspend the notification of new logs
 */
public void setSuspended(boolean suspended){
  if (acsSPS != null) {
    acsSPS.setSupended(suspended);
  }
}",0.935897435897436
