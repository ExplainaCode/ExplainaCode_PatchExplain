record_number,buggy_code,fixed_code,code_similarity
39001,"private void setupQSkos() throws OpenRDFException, IOException {
  qskos=new QSkos(new File(vocabFilenames.get(0)));
  qskos.setPublishingHost(publishingHost);
  qskos.setAuthoritativeUriSubstring(authoritativeUriSubstring);
  qskos.setProgressMonitor(new LoggingProgressMonitor());
  qskos.setSubsetSize(randomSubsetSize_percent);
  qskos.addSparqlEndPoint(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + vocabFilenames.get(0));
}","private void setupQSkos() throws OpenRDFException, IOException {
  qskos=new QSkos(new File(vocabFilenames.get(0)));
  qskos.setPublishingHost(publishingHost);
  qskos.setAuthoritativeUriSubstring(authoritativeUriSubstring);
  qskos.setProgressMonitor(new LoggingProgressMonitor());
  qskos.setSubsetSize(randomSubsetSize_percent);
  qskos.addSparqlEndPoint(""String_Node_Str"");
}",0.9210206561360876
39002,"private Object callEntityHandler(InvocationContext ctx,Class<?> entityClass,EntityManager entityManager) throws Exception {
  return EntityDaoHandler.create(entityManager,entityClass).invoke(ctx.getMethod(),ctx.getParameters());
}","private Object callEntityHandler(InvocationContext ctx,Class<?> entityClass,EntityManager entityManager) throws InvocationTargetException, IllegalAccessException {
  return EntityDaoHandler.create(entityManager,entityClass).invoke(ctx.getMethod(),ctx.getParameters());
}",0.92
39003,"@Override public Object execute(QueryInvocationContext context) throws Exception {
  InvocationContext invocation=context.getInvocation();
  if (EntityDaoHandler.contains(invocation.getMethod())) {
    return callEntityHandler(invocation,context.getEntityClass(),context.getEntityManager());
  }
  return invocation.proceed();
}","@Override public Object execute(QueryInvocationContext context){
  try {
    InvocationContext invocation=context.getInvocation();
    if (EntityDaoHandler.contains(invocation.getMethod())) {
      return callEntityHandler(invocation,context.getEntityClass(),context.getEntityManager());
    }
    return invocation.proceed();
  }
 catch (  Exception e) {
    throw new QueryInvocationException(e,context);
  }
}",0.5405405405405406
39004,public abstract Object execute(QueryInvocationContext ctx) throws Exception ;,public abstract Object execute(QueryInvocationContext ctx);,0.8676470588235294
39005,"@Override @SuppressWarnings(""String_Node_Str"") public Object execute(QueryInvocationContext ctx) throws Exception {
  return new DefaultQueryResult(delegate,ctx);
}","@Override @SuppressWarnings(""String_Node_Str"") public Object execute(QueryInvocationContext ctx){
  return new DefaultQueryResult(delegate,ctx);
}",0.9419354838709676
39006,"String rewriteSeparator(String name){
  if (name.contains(""String_Node_Str"")) {
    name=name.replaceAll(SEPARATOR,""String_Node_Str"");
  }
  return name;
}","String rewriteSeparator(String name){
  if (name.contains(""String_Node_Str"")) {
    return name.replaceAll(SEPARATOR,""String_Node_Str"");
  }
  return name;
}",0.967948717948718
39007,"@Override @SuppressWarnings(""String_Node_Str"") public T getSingleResult(){
  try {
    return (T)((Query)builder.execute(context)).getSingleResult();
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public T getSingleResult(){
  return (T)((Query)builder.execute(context)).getSingleResult();
}",0.6911764705882353
39008,"@Override @SuppressWarnings(""String_Node_Str"") public List<T> getResultList(){
  try {
    return ((Query)builder.execute(context)).getResultList();
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public List<T> getResultList(){
  return ((Query)builder.execute(context)).getResultList();
}",0.6896551724137931
39009,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void fetchSingular(From path){
  if (joinType == null)   path.fetch(singular);
 else   path.fetch(singular,joinType);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void fetchSingular(From path){
  if (joinType == null) {
    path.fetch(singular);
  }
 else {
    path.fetch(singular,joinType);
  }
}",0.9322916666666666
39010,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void fetchPlural(From path){
  if (joinType == null)   path.fetch(plural);
 else   path.fetch(plural,joinType);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void fetchPlural(From path){
  if (joinType == null) {
    path.fetch(plural);
  }
 else {
    path.fetch(plural,joinType);
  }
}",0.956989247311828
39011,"public In(SingularAttribute<? super P,V> singular,V[] values){
  this.singular=singular;
  this.values=values;
}","public In(SingularAttribute<? super P,V> singular,V[] values){
  this.singular=singular;
  this.values=Arrays.copyOf(values,values.length);
}",0.8853754940711462
39012,"@Override public List<Predicate> build(CriteriaBuilder builder,Path<P> path){
  Path<V> p=path.get(singular);
  CriteriaBuilder.In<V> in=builder.in(p);
  for (  V value : values) {
    if (value != null)     in.value(value);
  }
  return Arrays.asList((Predicate)in);
}","@Override public List<Predicate> build(CriteriaBuilder builder,Path<P> path){
  Path<V> p=path.get(singular);
  CriteriaBuilder.In<V> in=builder.in(p);
  for (  V value : values) {
    if (value != null) {
      in.value(value);
    }
  }
  return Arrays.asList((Predicate)in);
}",0.9051094890510948
39013,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private Join joinSet(From path){
  if (joinType == null)   return path.join(set);
  return path.join(set,joinType);
}","private Join joinSet(From path){
  if (joinType == null)   return path.join(set);
  return path.join(set,joinType);
}",0.8041237113402062
39014,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public List<Predicate> build(CriteriaBuilder builder,Path<P> path){
  Join join=null;
  if (singular != null) {
    join=joinSingular((From)path);
  }
 else   if (list != null) {
    join=joinList((From)path);
  }
 else   if (collection != null) {
    join=joinCollection((From)path);
  }
 else   if (set != null) {
    join=joinSet((From)path);
  }
 else {
    join=joinMap((From)path);
  }
  return criteria.predicates(builder,join);
}","@Override public List<Predicate> build(CriteriaBuilder builder,Path<P> path){
  Join join=null;
  if (singular != null) {
    join=joinSingular((From)path);
  }
 else   if (list != null) {
    join=joinList((From)path);
  }
 else   if (collection != null) {
    join=joinCollection((From)path);
  }
 else   if (set != null) {
    join=joinSet((From)path);
  }
 else {
    join=joinMap((From)path);
  }
  return criteria.predicates(builder,join);
}",0.94006309148265
39015,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private Join joinCollection(From path){
  if (joinType == null)   return path.join(collection);
  return path.join(collection,joinType);
}","private Join joinCollection(From path){
  if (joinType == null)   return path.join(collection);
  return path.join(collection,joinType);
}",0.8288288288288288
39016,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private Join joinSingular(From path){
  if (joinType == null)   return path.join(singular);
  return path.join(singular,joinType);
}","private Join joinSingular(From path){
  if (joinType == null) {
    return path.join(singular);
  }
  return path.join(singular,joinType);
}",0.8024316109422492
39017,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private Join joinList(From path){
  if (joinType == null)   return path.join(list);
  return path.join(list,joinType);
}","private Join joinList(From path){
  if (joinType == null) {
    return path.join(list);
  }
  return path.join(list,joinType);
}",0.7868852459016393
39018,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private Join joinMap(From path){
  if (joinType == null)   return path.join(map);
  return path.join(map,joinType);
}","private Join joinMap(From path){
  if (joinType == null)   return path.join(map);
  return path.join(map,joinType);
}",0.8041237113402062
39019,"@AroundInvoke public Object handle(InvocationContext context) throws Exception {
  try {
    Class<?> daoClass=extractFromProxy(context);
    DaoComponent dao=components.lookupComponent(daoClass);
    DaoMethod method=components.lookupMethod(daoClass,context.getMethod());
    QueryBuilder builder=queryBuilder.build(method);
    return builder.execute(new QueryInvocationContext(context,method,resolveEntityManager(dao)));
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
}","@AroundInvoke public Object handle(InvocationContext context){
  QueryInvocationContext ctx=null;
  try {
    Class<?> daoClass=extractFromProxy(context);
    DaoComponent dao=components.lookupComponent(daoClass);
    DaoMethod method=components.lookupMethod(daoClass,context.getMethod());
    ctx=new QueryInvocationContext(context,method,resolveEntityManager(dao));
    QueryBuilder builder=queryBuilder.build(method);
    return builder.execute(ctx);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    if (ctx != null) {
      throw new QueryInvocationException(e,ctx);
    }
    throw new QueryInvocationException(e,context);
  }
}",0.7206896551724138
39020,"private static <A extends Annotation>int extractInt(Object parameter,Annotation[] annotations,Class<A> target,int defaultVal){
  if (parameter != null) {
    A result=extractFrom(annotations,target);
    if (result != null) {
      if (parameter instanceof Integer) {
        return (Integer)parameter;
      }
 else {
        log.warnv(""String_Node_Str"",target,parameter.getClass());
      }
    }
  }
  return defaultVal;
}","private static <A extends Annotation>int extractInt(Object parameter,Annotation[] annotations,Class<A> target,int defaultVal){
  if (parameter != null) {
    A result=extractFrom(annotations,target);
    if (result != null) {
      if (parameter instanceof Integer) {
        return (Integer)parameter;
      }
 else {
        LOG.warnv(""String_Node_Str"",target,parameter.getClass());
      }
    }
  }
  return defaultVal;
}",0.9929411764705882
39021,"public SystemMap normalize(String environmentName){
  Environment env=environments.get(environmentName);
  checkNotNull(env,""String_Node_Str"",environmentName);
  Iterator<Template> itty=this.templates.iterator();
  if (!itty.hasNext()) {
    return new SystemMap();
  }
  SystemMap map=itty.next().normalize(env);
  while (itty.hasNext()) {
    map=map.combine(itty.next().normalize(env));
  }
  return map;
}","public SystemMap normalize(String environmentName){
  Environment env=environments.get(environmentName);
  checkNotNull(env,""String_Node_Str"",environmentName);
  Iterator<Template> itty=this.templates.iterator();
  if (!itty.hasNext()) {
    return new SystemMap();
  }
  SystemMap map=itty.next().normalize(env);
  while (itty.hasNext()) {
    map=map.combine(itty.next().normalize(env));
  }
  Collection<Template> env_defined=env.getEnvironmentDefinedElements();
  for (  Template template : env_defined) {
    List<Element> el=template._normalize(Identity.root(),env);
    map=new SystemMap(concat(map.getRoots(),el));
  }
  return map;
}",0.7783063748810657
39022,"public final SystemMap normalize(Environment env){
  List<Element> roots=Lists.newArrayList();
  List<Element> sys_roots=_normalize(Identity.root(),env);
  roots.addAll(sys_roots);
  Collection<Template> env_defined=env.getEnvironmentDefinedElements();
  for (  Template template : env_defined) {
    List<Element> el=template._normalize(Identity.root(),env);
    roots.addAll(el);
  }
  return new SystemMap(roots);
}","public final SystemMap normalize(Environment env){
  List<Element> roots=Lists.newArrayList();
  List<Element> sys_roots=_normalize(Identity.root(),env);
  roots.addAll(sys_roots);
  return new SystemMap(roots);
}",0.5863708399366085
39023,"@Override public String perform(Host host,Uri<? extends Component> uri,Deployment d) throws Exception {
  SSH ssh=new SSH(host,d.getSpace(),credentialName);
  try {
    ssh.exec(""String_Node_Str"");
    String out=ssh.exec(""String_Node_Str"" + uri.getFragment().replaceAll(""String_Node_Str"",""String_Node_Str""));
    log.info(out);
    return out;
  }
  finally {
    ssh.close();
  }
}","@Override public String perform(Host host,Uri<? extends Component> uri,Deployment d) throws Exception {
  SSH ssh=new SSH(host,d.getSpace(),credentialName);
  try {
    ssh.exec(""String_Node_Str"");
    String out=ssh.exec(""String_Node_Str"" + uri.getFragment().replaceAll(""String_Node_Str"",""String_Node_Str""));
    log.info(""String_Node_Str"",out);
    return out;
  }
  finally {
    ssh.close();
  }
}",0.9770408163265306
39024,"@Override public Void call() throws IOException {
  Space space=SQLiteBackedSpace.create(spaceFile);
  JRubyTemplateParser p=new JRubyTemplateParser();
  Descriptor descriptor=Descriptor.empty();
  for (  File file : modelDirectory.listFiles()) {
    if (file.isFile() && file.getName().endsWith(""String_Node_Str"")) {
      descriptor.combine(p.parseDescriptor(file));
    }
  }
  SystemMap map=descriptor.normalize(environmentName);
  Environment env=descriptor.getEnvironment(environmentName);
  ActualDeployment d=env.planDeploymentFor(map,space);
  d.destroy();
  return null;
}","@Override public Void call() throws IOException {
  Space space=SQLiteBackedSpace.create(spaceFile);
  JRubyTemplateParser p=new JRubyTemplateParser();
  Descriptor descriptor=Descriptor.empty();
  for (  File file : modelDirectory.listFiles()) {
    if (file.isFile() && file.getName().endsWith(""String_Node_Str"")) {
      descriptor=descriptor.combine(p.parseDescriptor(file));
    }
  }
  SystemMap map=descriptor.normalize(environmentName);
  Environment env=descriptor.getEnvironment(environmentName);
  ActualDeployment d=env.planDeploymentFor(map,space);
  d.destroy();
  return null;
}",0.9906382978723404
39025,"@Override public Void call() throws Exception {
  return null;
}","@Override public Void call() throws IOException {
  Space space=SQLiteBackedSpace.create(spaceFile);
  JRubyTemplateParser p=new JRubyTemplateParser();
  Descriptor descriptor=Descriptor.empty();
  for (  File file : modelDirectory.listFiles()) {
    if (file.isFile() && file.getName().endsWith(""String_Node_Str"")) {
      descriptor=descriptor.combine(p.parseDescriptor(file));
    }
  }
  SystemMap map=descriptor.normalize(environmentName);
  for (  Host host : map.findLeaves()) {
    System.out.println(host.getId() + ""String_Node_Str"");
    for (    Map.Entry<SpaceKey,String> entry : space.getAllFor(host.getId()).entrySet()) {
      System.out.printf(""String_Node_Str"",entry.getKey().getKey(),StringUtils.abbreviate(entry.getValue(),80).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return null;
}",0.1241534988713318
39026,"@SuppressWarnings(""String_Node_Str"") public static void main(String... args) throws Exception {
  Cli.buildCli(""String_Node_Str"",Callable.class).withCommands(Converge.class,Destroy.class,Help.class).withDefaultCommand(Help.class).build().parse(args).call();
}","@SuppressWarnings(""String_Node_Str"") public static void main(String... args) throws Exception {
  Cli.buildCli(""String_Node_Str"",Callable.class).withCommands(Converge.class,Destroy.class,ListCommand.class,Help.class).withDefaultCommand(Help.class).build().parse(args).call();
}",0.9664179104477612
39027,"@Test public void testFoo() throws Exception {
  JRubyTemplateParser p=new JRubyTemplateParser();
  Environment e=p.parseEnvironment(new File(""String_Node_Str""));
  InstalledElement one=p.parseSystem(new File(""String_Node_Str"")).normalize(e).provision(sameThreadExecutor()).get().initialize(sameThreadExecutor()).get().install(sameThreadExecutor()).get();
  assertThat(jsonify(reify(e,jsonify(one))),equalTo(jsonify(one)));
  InstalledElement reified=reify(e,jsonify(one));
  BoundTemplate two=p.parseSystem(new File(""String_Node_Str"")).normalize(e);
  UpgradePlan plan=two.upgradeFrom(reified);
}","@Test public void testFoo() throws Exception {
  assumeThat(1 + 1,equalTo(3));
  JRubyTemplateParser p=new JRubyTemplateParser();
  Environment e=p.parseEnvironment(new File(""String_Node_Str""));
  InstalledElement one=p.parseSystem(new File(""String_Node_Str"")).normalize(e).provision(sameThreadExecutor()).get().initialize(sameThreadExecutor()).get().install(sameThreadExecutor()).get();
  assertThat(jsonify(reify(e,jsonify(one))),equalTo(jsonify(one)));
  InstalledElement reified=reify(e,jsonify(one));
  BoundTemplate two=p.parseSystem(new File(""String_Node_Str"")).normalize(e);
  UpgradePlan plan=two.upgradeFrom(reified);
}",0.9738988580750408
39028,"@Override public Server provision(Base base) throws UnableToProvisionServerException {
  logger.debug(""String_Node_Str"",base.getName());
synchronized (this) {
    if (!dhcp_done) {
      DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.hostonlyif_name,""String_Node_Str"",""String_Node_Str"");
      DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.hostonlyif_name,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      dhcp_done=true;
    }
  }
  String res;
synchronized (this) {
    res=DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",base.getAttributes().get(""String_Node_Str""));
    logger.trace(""String_Node_Str"" + res);
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(res);
  if (m.find())   this.vmname=m.group(1);
  logger.info(""String_Node_Str"",this.vmname);
  this.sshport=this.port_start + portCounter.getAndIncrement();
  logger.info(""String_Node_Str"",this.sshport);
  logger.trace(DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",this.vmname,""String_Node_Str"" + VBoxProvisioner.NET_HOSTONLY_ADAPTER,this.hostonlyif_name,""String_Node_Str"" + VBoxProvisioner.NET_BRIDGED_ADAPTER,this.bridgedif_name));
  logger.trace(DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",this.vmname,""String_Node_Str"" + VBoxProvisioner.NET_NAT,""String_Node_Str"" + sshport + ""String_Node_Str""));
  logger.trace(DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",this.vmname));
  String public_key;
  try {
    FileReader input=null;
    input=new FileReader(this.pub_key_file);
    BufferedReader bufRead=new BufferedReader(input);
    String line;
    StringBuilder sb=new StringBuilder();
    String newLine=""String_Node_Str"";
    while ((line=bufRead.readLine()) != null) {
      sb.append(line).append(newLine);
    }
    public_key=sb.toString();
    logger.info(""String_Node_Str"");
    logger.trace(""String_Node_Str"",public_key);
  }
 catch (  Exception e) {
    throw new UnableToProvisionServerException(""String_Node_Str"" + e.toString());
  }
  try {
    logger.info(""String_Node_Str"",VBoxProvisioner.BOOTUP_TIME);
    Thread.sleep(VBoxProvisioner.BOOTUP_TIME * 1000);
  }
 catch (  InterruptedException e) {
    throw new UnableToProvisionServerException(""String_Node_Str"" + e.toString());
  }
  logger.info(""String_Node_Str"");
  SSH ssh=null;
  String ifconfig=""String_Node_Str"";
  try {
    logger.info(""String_Node_Str"");
    ssh=new SSH(this.password,this.username,""String_Node_Str"",sshport);
    logger.info(""String_Node_Str"",sshport);
    ssh.exec(""String_Node_Str"" + public_key + ""String_Node_Str"");
    ifconfig=ssh.exec(""String_Node_Str"");
    logger.trace(""String_Node_Str"" + ifconfig);
    ssh.close();
  }
 catch (  IOException e) {
    throw new UnableToProvisionServerException(""String_Node_Str"" + e.toString());
  }
  String internalIp=null, externalIp=null;
  String[] sections=ifconfig.split(""String_Node_Str"");
  Pattern pat_ip=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE | Pattern.DOTALL);
  for (  String section : sections) {
    Matcher m_ip=pat_ip.matcher(section);
    if (m_ip.find()) {
      String ethX=m_ip.group(1);
      if (ethX.equals(""String_Node_Str"" + (VBoxProvisioner.NET_HOSTONLY_ADAPTER - 1))) {
        internalIp=m_ip.group(2);
      }
 else       if (ethX.equals(""String_Node_Str"" + (VBoxProvisioner.NET_BRIDGED_ADAPTER - 1))) {
        externalIp=m_ip.group(2);
      }
    }
  }
  if (internalIp == null || externalIp == null) {
    throw new UnableToProvisionServerException(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"",internalIp);
    logger.info(""String_Node_Str"",externalIp);
  }
  return new VBoxServer(base,this.vmname,internalIp,externalIp,sshport);
}","@Override public Server provision(Base base) throws UnableToProvisionServerException {
  String vmname=null;
  int sshport;
  logger.debug(""String_Node_Str"",base.getName());
  String res;
synchronized (this) {
    res=DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",base.getAttributes().get(""String_Node_Str""));
    logger.trace(""String_Node_Str"" + res);
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(res);
  if (m.find())   vmname=m.group(1);
  logger.info(""String_Node_Str"",vmname);
  sshport=this.port_start + portCounter.getAndIncrement();
  logger.info(""String_Node_Str"",sshport);
  logger.trace(DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",vmname,""String_Node_Str"" + VBoxProvisioner.NET_HOSTONLY_ADAPTER,this.hostonlyif_name,""String_Node_Str"" + VBoxProvisioner.NET_BRIDGED_ADAPTER,this.bridgedif_name));
  logger.trace(DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",vmname,""String_Node_Str"" + VBoxProvisioner.NET_NAT,""String_Node_Str"" + sshport + ""String_Node_Str""));
  logger.trace(DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",vmname));
  try {
    logger.info(""String_Node_Str"",VBoxProvisioner.BOOTUP_TIME);
    Thread.sleep(VBoxProvisioner.BOOTUP_TIME * 1000);
  }
 catch (  InterruptedException e) {
    throw new UnableToProvisionServerException(""String_Node_Str"" + e.toString());
  }
  logger.info(""String_Node_Str"");
  SSH ssh=null;
  String ifconfig=""String_Node_Str"";
  try {
    logger.info(""String_Node_Str"");
    ssh=new SSH(this.password,this.username,""String_Node_Str"",sshport);
    logger.info(""String_Node_Str"",sshport);
    ssh.exec(""String_Node_Str"" + public_key + ""String_Node_Str"");
    ssh.exec(""String_Node_Str"" + (NET_BRIDGED_ADAPTER - 1));
    ifconfig=ssh.exec(""String_Node_Str"");
    logger.trace(""String_Node_Str"" + ifconfig);
    String hostcheck=""String_Node_Str"";
    String ping=ssh.exec(""String_Node_Str"" + hostcheck);
    if (!ping.toLowerCase().contains(""String_Node_Str"")) {
      throw new UnableToProvisionServerException(""String_Node_Str"" + hostcheck + ""String_Node_Str""+ ping);
    }
    ssh.close();
  }
 catch (  IOException e) {
    throw new UnableToProvisionServerException(""String_Node_Str"" + e.toString());
  }
  String internalIp=null, externalIp=null;
  String[] sections=ifconfig.split(""String_Node_Str"");
  Pattern pat_ip=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE | Pattern.DOTALL);
  for (  String section : sections) {
    Matcher m_ip=pat_ip.matcher(section);
    if (m_ip.find()) {
      String ethX=m_ip.group(1);
      if (ethX.equals(""String_Node_Str"" + (VBoxProvisioner.NET_HOSTONLY_ADAPTER - 1))) {
        internalIp=m_ip.group(2);
      }
 else       if (ethX.equals(""String_Node_Str"" + (VBoxProvisioner.NET_BRIDGED_ADAPTER - 1))) {
        externalIp=m_ip.group(2);
      }
    }
  }
  if (internalIp == null || externalIp == null) {
    throw new UnableToProvisionServerException(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"",internalIp);
    logger.info(""String_Node_Str"",externalIp);
  }
  return new VBoxServer(base,vmname,internalIp,externalIp,sshport);
}",0.6845212383009359
39029,"public VBoxProvisioner(Map<String,String> attributes){
  this.username=attributes.get(""String_Node_Str"");
  this.password=attributes.get(""String_Node_Str"");
  this.pub_key_file=attributes.get(""String_Node_Str"");
  this.hostonlyif_name=attributes.get(""String_Node_Str"");
  this.bridgedif_name=attributes.get(""String_Node_Str"");
  if (!attributes.containsKey(""String_Node_Str"")) {
    this.port_start=VBoxProvisioner.DEFAULT_PORT;
  }
 else {
    this.port_start=Integer.parseInt(attributes.get(""String_Node_Str""));
  }
}","public VBoxProvisioner(Map<String,String> attributes) throws UnableToProvisionServerException {
  this.username=attributes.get(""String_Node_Str"");
  this.password=attributes.get(""String_Node_Str"");
  this.hostonlyif_name=attributes.get(""String_Node_Str"");
  this.bridgedif_name=attributes.get(""String_Node_Str"");
  if (!attributes.containsKey(""String_Node_Str"")) {
    this.port_start=VBoxProvisioner.DEFAULT_PORT;
  }
 else {
    this.port_start=Integer.parseInt(attributes.get(""String_Node_Str""));
  }
  String pub_key_file=attributes.get(""String_Node_Str"");
  try {
    FileReader input=null;
    input=new FileReader(pub_key_file);
    BufferedReader bufRead=new BufferedReader(input);
    String line;
    StringBuilder sb=new StringBuilder();
    String newLine=""String_Node_Str"";
    while ((line=bufRead.readLine()) != null) {
      sb.append(line).append(newLine);
    }
    public_key=sb.toString();
    logger.info(""String_Node_Str"");
    logger.trace(""String_Node_Str"",public_key);
  }
 catch (  Exception e) {
    throw new UnableToProvisionServerException(""String_Node_Str"" + pub_key_file);
  }
  DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.hostonlyif_name,""String_Node_Str"",""String_Node_Str"");
  DoRuntime.exec(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.hostonlyif_name,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.4564682734874569
39030,"private void requestReplace(final ReceiveCommand cmd,final Change change,final RevCommit newCommit){
  if (change.getStatus().isClosed()) {
    reject(cmd,""String_Node_Str"" + change.getId() + ""String_Node_Str"");
    return;
  }
  final ReplaceRequest req=new ReplaceRequest(change.getId(),newCommit,cmd);
  if (replaceByChange.containsKey(req.ontoChange)) {
    reject(cmd,""String_Node_Str"");
    return;
  }
  if (replaceByCommit.containsKey(req.newCommit)) {
    reject(cmd,""String_Node_Str"");
    return;
  }
  replaceByChange.put(req.ontoChange,req);
  replaceByCommit.put(req.newCommit,req);
}","private boolean requestReplace(final ReceiveCommand cmd,final Change change,final RevCommit newCommit){
  if (change.getStatus().isClosed()) {
    reject(cmd,""String_Node_Str"" + change.getId() + ""String_Node_Str"");
    return false;
  }
  final ReplaceRequest req=new ReplaceRequest(change.getId(),newCommit,cmd);
  if (replaceByChange.containsKey(req.ontoChange)) {
    reject(cmd,""String_Node_Str"");
    return false;
  }
  if (replaceByCommit.containsKey(req.newCommit)) {
    reject(cmd,""String_Node_Str"");
    return false;
  }
  replaceByChange.put(req.ontoChange,req);
  replaceByCommit.put(req.newCommit,req);
  return true;
}",0.8571428571428571
39031,"private void createNewChanges(){
  final List<RevCommit> toCreate=new ArrayList<RevCommit>();
  final RevWalk walk=rp.getRevWalk();
  walk.reset();
  walk.sort(RevSort.TOPO);
  walk.sort(RevSort.REVERSE,true);
  try {
    walk.markStart(walk.parseCommit(newChange.getNewId()));
    for (    ObjectId id : existingObjects()) {
      try {
        walk.markUninteresting(walk.parseCommit(id));
      }
 catch (      IOException e) {
        continue;
      }
    }
    for (; ; ) {
      final RevCommit c=walk.next();
      if (c == null) {
        break;
      }
      if (replaceByCommit.containsKey(c)) {
        continue;
      }
      if (!validCommit(destBranchCtl,newChange,c)) {
        return;
      }
      final List<String> idList=c.getFooterLines(CHANGE_ID);
      if (!idList.isEmpty()) {
        final String idStr=idList.get(idList.size() - 1).trim();
        final Change.Key key=new Change.Key(idStr);
        final List<Change> changes=db.changes().byProjectKey(project.getNameKey(),key).toList();
        if (changes.size() > 1) {
          reject(newChange,key.get() + ""String_Node_Str"");
          return;
        }
        if (changes.size() == 1) {
          requestReplace(newChange,changes.get(0),c);
          continue;
        }
      }
      toCreate.add(c);
    }
  }
 catch (  IOException e) {
    newChange.setResult(Result.REJECTED_MISSING_OBJECT);
    log.error(""String_Node_Str"",e);
    return;
  }
catch (  OrmException e) {
    log.error(""String_Node_Str"",e);
    reject(newChange,""String_Node_Str"");
    return;
  }
  if (toCreate.isEmpty() && replaceByChange.isEmpty()) {
    reject(newChange,""String_Node_Str"");
    return;
  }
  for (  final RevCommit c : toCreate) {
    try {
      createChange(walk,c);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
catch (    OrmException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
  }
  newChange.setResult(ReceiveCommand.Result.OK);
}","private void createNewChanges(){
  final List<RevCommit> toCreate=new ArrayList<RevCommit>();
  final RevWalk walk=rp.getRevWalk();
  walk.reset();
  walk.sort(RevSort.TOPO);
  walk.sort(RevSort.REVERSE,true);
  try {
    walk.markStart(walk.parseCommit(newChange.getNewId()));
    for (    ObjectId id : existingObjects()) {
      try {
        walk.markUninteresting(walk.parseCommit(id));
      }
 catch (      IOException e) {
        continue;
      }
    }
    for (; ; ) {
      final RevCommit c=walk.next();
      if (c == null) {
        break;
      }
      if (replaceByCommit.containsKey(c)) {
        continue;
      }
      if (!validCommit(destBranchCtl,newChange,c)) {
        return;
      }
      final List<String> idList=c.getFooterLines(CHANGE_ID);
      if (!idList.isEmpty()) {
        final String idStr=idList.get(idList.size() - 1).trim();
        final Change.Key key=new Change.Key(idStr);
        final List<Change> changes=db.changes().byProjectKey(project.getNameKey(),key).toList();
        if (changes.size() > 1) {
          reject(newChange,key.get() + ""String_Node_Str"");
          return;
        }
        if (changes.size() == 1) {
          if (requestReplace(newChange,changes.get(0),c)) {
            continue;
          }
 else {
            return;
          }
        }
      }
      toCreate.add(c);
    }
  }
 catch (  IOException e) {
    newChange.setResult(Result.REJECTED_MISSING_OBJECT);
    log.error(""String_Node_Str"",e);
    return;
  }
catch (  OrmException e) {
    log.error(""String_Node_Str"",e);
    reject(newChange,""String_Node_Str"");
    return;
  }
  if (toCreate.isEmpty() && replaceByChange.isEmpty()) {
    reject(newChange,""String_Node_Str"");
    return;
  }
  for (  final RevCommit c : toCreate) {
    try {
      createChange(walk,c);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
catch (    OrmException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
  }
  newChange.setResult(ReceiveCommand.Result.OK);
}",0.9848914069877244
39032,"private void requestReplace(final ReceiveCommand cmd,final Change change,final RevCommit newCommit){
  if (change.getStatus().isClosed()) {
    reject(cmd,""String_Node_Str"" + change.getId() + ""String_Node_Str"");
    return;
  }
  final ReplaceRequest req=new ReplaceRequest(change.getId(),newCommit,cmd);
  if (replaceByChange.containsKey(req.ontoChange)) {
    reject(cmd,""String_Node_Str"");
    return;
  }
  if (replaceByCommit.containsKey(req.newCommit)) {
    reject(cmd,""String_Node_Str"");
    return;
  }
  replaceByChange.put(req.ontoChange,req);
  replaceByCommit.put(req.newCommit,req);
}","private boolean requestReplace(final ReceiveCommand cmd,final Change change,final RevCommit newCommit){
  if (change.getStatus().isClosed()) {
    reject(cmd,""String_Node_Str"" + change.getId() + ""String_Node_Str"");
    return false;
  }
  final ReplaceRequest req=new ReplaceRequest(change.getId(),newCommit,cmd);
  if (replaceByChange.containsKey(req.ontoChange)) {
    reject(cmd,""String_Node_Str"");
    return false;
  }
  if (replaceByCommit.containsKey(req.newCommit)) {
    reject(cmd,""String_Node_Str"");
    return false;
  }
  replaceByChange.put(req.ontoChange,req);
  replaceByCommit.put(req.newCommit,req);
  return true;
}",0.8571428571428571
39033,"private void createNewChanges(){
  final List<RevCommit> toCreate=new ArrayList<RevCommit>();
  final RevWalk walk=rp.getRevWalk();
  walk.reset();
  walk.sort(RevSort.TOPO);
  walk.sort(RevSort.REVERSE,true);
  try {
    walk.markStart(walk.parseCommit(newChange.getNewId()));
    for (    ObjectId id : existingObjects()) {
      try {
        walk.markUninteresting(walk.parseCommit(id));
      }
 catch (      IOException e) {
        continue;
      }
    }
    for (; ; ) {
      final RevCommit c=walk.next();
      if (c == null) {
        break;
      }
      if (replaceByCommit.containsKey(c)) {
        continue;
      }
      if (!validCommit(destBranchCtl,newChange,c)) {
        return;
      }
      final List<String> idList=c.getFooterLines(CHANGE_ID);
      if (!idList.isEmpty()) {
        final String idStr=idList.get(idList.size() - 1).trim();
        final Change.Key key=new Change.Key(idStr);
        final List<Change> changes=db.changes().byProjectKey(project.getNameKey(),key).toList();
        if (changes.size() > 1) {
          reject(newChange,key.get() + ""String_Node_Str"");
          return;
        }
        if (changes.size() == 1) {
          requestReplace(newChange,changes.get(0),c);
          continue;
        }
      }
      toCreate.add(c);
    }
  }
 catch (  IOException e) {
    newChange.setResult(Result.REJECTED_MISSING_OBJECT);
    log.error(""String_Node_Str"",e);
    return;
  }
catch (  OrmException e) {
    log.error(""String_Node_Str"",e);
    reject(newChange,""String_Node_Str"");
    return;
  }
  if (toCreate.isEmpty() && replaceByChange.isEmpty()) {
    reject(newChange,""String_Node_Str"");
    return;
  }
  for (  final RevCommit c : toCreate) {
    try {
      createChange(walk,c);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
catch (    OrmException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
  }
  newChange.setResult(ReceiveCommand.Result.OK);
}","private void createNewChanges(){
  final List<RevCommit> toCreate=new ArrayList<RevCommit>();
  final RevWalk walk=rp.getRevWalk();
  walk.reset();
  walk.sort(RevSort.TOPO);
  walk.sort(RevSort.REVERSE,true);
  try {
    walk.markStart(walk.parseCommit(newChange.getNewId()));
    for (    ObjectId id : existingObjects()) {
      try {
        walk.markUninteresting(walk.parseCommit(id));
      }
 catch (      IOException e) {
        continue;
      }
    }
    for (; ; ) {
      final RevCommit c=walk.next();
      if (c == null) {
        break;
      }
      if (replaceByCommit.containsKey(c)) {
        continue;
      }
      if (!validCommit(destBranchCtl,newChange,c)) {
        return;
      }
      final List<String> idList=c.getFooterLines(CHANGE_ID);
      if (!idList.isEmpty()) {
        final String idStr=idList.get(idList.size() - 1).trim();
        final Change.Key key=new Change.Key(idStr);
        final List<Change> changes=db.changes().byProjectKey(project.getNameKey(),key).toList();
        if (changes.size() > 1) {
          reject(newChange,key.get() + ""String_Node_Str"");
          return;
        }
        if (changes.size() == 1) {
          if (requestReplace(newChange,changes.get(0),c)) {
            continue;
          }
 else {
            return;
          }
        }
      }
      toCreate.add(c);
    }
  }
 catch (  IOException e) {
    newChange.setResult(Result.REJECTED_MISSING_OBJECT);
    log.error(""String_Node_Str"",e);
    return;
  }
catch (  OrmException e) {
    log.error(""String_Node_Str"",e);
    reject(newChange,""String_Node_Str"");
    return;
  }
  if (toCreate.isEmpty() && replaceByChange.isEmpty()) {
    reject(newChange,""String_Node_Str"");
    return;
  }
  for (  final RevCommit c : toCreate) {
    try {
      createChange(walk,c);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
catch (    OrmException e) {
      log.error(""String_Node_Str"" + c.name(),e);
      reject(newChange,""String_Node_Str"");
      return;
    }
  }
  newChange.setResult(ReceiveCommand.Result.OK);
}",0.9848914069877244
39034,"SearchPanel(){
  final FlowPanel body=new FlowPanel();
  initWidget(body);
  setStyleName(Gerrit.RESOURCES.css().searchPanel());
  searchBox=new HintTextBox();
  searchBox.setVisibleLength(70);
  searchBox.setHintText(Gerrit.C.searchHint());
  searchBox.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    final KeyPressEvent event){
switch (event.getCharCode()) {
case KeyCodes.KEY_ENTER:
        doSearch();
      break;
case KeyCodes.KEY_ESCAPE:
    searchBox.setText(""String_Node_Str"");
  searchBox.setFocus(false);
break;
}
}
}
);
final Button searchButton=new Button(Gerrit.C.searchButton());
searchButton.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
doSearch();
}
}
);
body.add(searchBox);
body.add(searchButton);
}","SearchPanel(){
  final FlowPanel body=new FlowPanel();
  initWidget(body);
  setStyleName(Gerrit.RESOURCES.css().searchPanel());
  searchBox=new HintTextBox();
  searchBox.setVisibleLength(70);
  searchBox.setHintText(Gerrit.C.searchHint());
  searchBox.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    final KeyPressEvent event){
      if (event.getCharCode() == KeyCodes.KEY_ENTER) {
        doSearch();
      }
    }
  }
);
  final Button searchButton=new Button(Gerrit.C.searchButton());
  searchButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      doSearch();
    }
  }
);
  body.add(searchBox);
  body.add(searchButton);
}",0.8156498673740054
39035,"@Override public void onBlur(BlurEvent event){
  setFocus(false);
}","@Override public void onBlur(BlurEvent event){
  blurHint();
  isFocused=false;
}",0.8513513513513513
39036,"public void setFocus(boolean focus){
  if (focus) {
    bugStopping=true;
    super.setFocus(!focus);
    bugStopping=false;
  }
  super.setFocus(focus);
  if (focus) {
    focusHint();
  }
 else   if (!bugStopping) {
    blurHint();
  }
  isFocused=focus;
}","public void setFocus(boolean focus){
  super.setFocus(focus);
  if (focus != isFocused) {
    if (focus) {
      focusHint();
    }
 else {
      blurHint();
    }
  }
  isFocused=focus;
}",0.6547085201793722
39037,"public void setHintText(String text){
  if (text == null) {
    if (hintText == null) {
      return;
    }
    hintFocusHandler.removeHandler();
    hintFocusHandler=null;
    hintBlurHandler.removeHandler();
    hintBlurHandler=null;
    hintText=null;
    focusHint();
    return;
  }
  if (hintText == null) {
    hintText=text;
    hintFocusHandler=addFocusHandler(new FocusHandler(){
      @Override public void onFocus(      FocusEvent event){
        setFocus(true);
      }
    }
);
    hintBlurHandler=addBlurHandler(new BlurHandler(){
      @Override public void onBlur(      BlurEvent event){
        setFocus(false);
      }
    }
);
  }
 else {
    focusHint();
    hintText=text;
  }
  if (!isFocused) {
    blurHint();
  }
}","public void setHintText(String text){
  if (text == null) {
    if (hintText == null) {
      return;
    }
    hintFocusHandler.removeHandler();
    hintFocusHandler=null;
    hintBlurHandler.removeHandler();
    hintBlurHandler=null;
    keyDownHandler.removeHandler();
    keyDownHandler=null;
    hintText=null;
    focusHint();
    return;
  }
  if (hintText == null) {
    hintText=text;
    hintFocusHandler=addFocusHandler(new FocusHandler(){
      @Override public void onFocus(      FocusEvent event){
        focusHint();
        prevText=getText();
        isFocused=true;
      }
    }
);
    hintBlurHandler=addBlurHandler(new BlurHandler(){
      @Override public void onBlur(      BlurEvent event){
        blurHint();
        isFocused=false;
      }
    }
);
    keyDownHandler=addKeyDownHandler(new KeyDownHandler(){
      @Override public void onKeyDown(      final KeyDownEvent event){
        onKey(event.getNativeKeyCode());
      }
    }
);
  }
 else {
    focusHint();
    hintText=text;
  }
  if (!isFocused) {
    blurHint();
  }
}",0.7730812013348165
39038,"@Override public void onFocus(FocusEvent event){
  setFocus(true);
}","@Override public void onFocus(FocusEvent event){
  focusHint();
  prevText=getText();
  isFocused=true;
}",0.7630057803468208
39039,"public void setText(String text){
  focusHint();
  super.setText(text);
  if (!isFocused) {
    blurHint();
  }
}","public void setText(String text){
  focusHint();
  super.setText(text);
  prevText=text;
  if (!isFocused) {
    blurHint();
  }
}",0.9300411522633744
39040,"@Override public void onBlur(BlurEvent event){
  blurHint();
}","@Override public void onBlur(BlurEvent event){
  setFocus(false);
}",0.8372093023255814
39041,"protected void focusHint(){
  if (hintOn) {
    super.setText(""String_Node_Str"");
    hintOn=false;
    if (getHintStyleName() != null) {
      removeStyleName(getHintStyleName());
    }
  }
}","protected void focusHint(){
  if (hintOn) {
    super.setText(""String_Node_Str"");
    if (getHintStyleName() != null) {
      removeStyleName(getHintStyleName());
    }
    hintOn=false;
  }
}",0.90625
39042,"public void setHintText(String text){
  if (text == null) {
    if (hintText != null) {
      hintFocusHandler.removeHandler();
      hintFocusHandler=null;
      hintBlurHandler.removeHandler();
      hintBlurHandler=null;
      hintText=null;
      focusHint();
    }
    return;
  }
  if (hintText == null) {
    hintText=text;
    hintFocusHandler=addFocusHandler(new FocusHandler(){
      @Override public void onFocus(      FocusEvent event){
        focusHint();
      }
    }
);
    hintBlurHandler=addBlurHandler(new BlurHandler(){
      @Override public void onBlur(      BlurEvent event){
        blurHint();
      }
    }
);
    blurHint();
    return;
  }
  hintText=text;
  if (hintOn) {
    super.setText(text);
  }
}","public void setHintText(String text){
  if (text == null) {
    if (hintText == null) {
      return;
    }
    hintFocusHandler.removeHandler();
    hintFocusHandler=null;
    hintBlurHandler.removeHandler();
    hintBlurHandler=null;
    hintText=null;
    focusHint();
    return;
  }
  if (hintText == null) {
    hintText=text;
    hintFocusHandler=addFocusHandler(new FocusHandler(){
      @Override public void onFocus(      FocusEvent event){
        setFocus(true);
      }
    }
);
    hintBlurHandler=addBlurHandler(new BlurHandler(){
      @Override public void onBlur(      BlurEvent event){
        setFocus(false);
      }
    }
);
  }
 else {
    focusHint();
    hintText=text;
  }
  if (!isFocused) {
    blurHint();
  }
}",0.7608695652173914
39043,"protected void blurHint(){
  if (!hintOn && getHintText() != null && ""String_Node_Str"".equals(super.getText())) {
    super.setText(getHintText());
    hintOn=true;
    if (getHintStyleName() != null) {
      addStyleName(getHintStyleName());
    }
  }
}","protected void blurHint(){
  if (!hintOn && getHintText() != null && ""String_Node_Str"".equals(super.getText())) {
    hintOn=true;
    super.setText(getHintText());
    if (getHintStyleName() != null) {
      addStyleName(getHintStyleName());
    }
  }
}",0.9330708661417324
39044,"@Override public void onFocus(FocusEvent event){
  focusHint();
}","@Override public void onFocus(FocusEvent event){
  setFocus(true);
}",0.9022556390977444
39045,"public void setText(String text){
  focusHint();
  super.setText(text);
  blurHint();
}","public void setText(String text){
  focusHint();
  super.setText(text);
  if (!isFocused) {
    blurHint();
  }
}",0.87
39046,"@Override public void onBlur(BlurEvent event){
  blurHint();
}","@Override public void onBlur(BlurEvent event){
  setFocus(false);
}",0.8372093023255814
39047,"protected void focusHint(){
  if (hintOn) {
    super.setText(""String_Node_Str"");
    hintOn=false;
    if (getHintStyleName() != null) {
      removeStyleName(getHintStyleName());
    }
  }
}","protected void focusHint(){
  if (hintOn) {
    super.setText(""String_Node_Str"");
    if (getHintStyleName() != null) {
      removeStyleName(getHintStyleName());
    }
    hintOn=false;
  }
}",0.90625
39048,"public void setHintText(String text){
  if (text == null) {
    if (hintText != null) {
      hintFocusHandler.removeHandler();
      hintFocusHandler=null;
      hintBlurHandler.removeHandler();
      hintBlurHandler=null;
      hintText=null;
      focusHint();
    }
    return;
  }
  if (hintText == null) {
    hintText=text;
    hintFocusHandler=addFocusHandler(new FocusHandler(){
      @Override public void onFocus(      FocusEvent event){
        focusHint();
      }
    }
);
    hintBlurHandler=addBlurHandler(new BlurHandler(){
      @Override public void onBlur(      BlurEvent event){
        blurHint();
      }
    }
);
    blurHint();
    return;
  }
  hintText=text;
  if (hintOn) {
    super.setText(text);
  }
}","public void setHintText(String text){
  if (text == null) {
    if (hintText == null) {
      return;
    }
    hintFocusHandler.removeHandler();
    hintFocusHandler=null;
    hintBlurHandler.removeHandler();
    hintBlurHandler=null;
    hintText=null;
    focusHint();
    return;
  }
  if (hintText == null) {
    hintText=text;
    hintFocusHandler=addFocusHandler(new FocusHandler(){
      @Override public void onFocus(      FocusEvent event){
        setFocus(true);
      }
    }
);
    hintBlurHandler=addBlurHandler(new BlurHandler(){
      @Override public void onBlur(      BlurEvent event){
        setFocus(false);
      }
    }
);
  }
 else {
    focusHint();
    hintText=text;
  }
  if (!isFocused) {
    blurHint();
  }
}",0.7608695652173914
39049,"protected void blurHint(){
  if (!hintOn && getHintText() != null && ""String_Node_Str"".equals(super.getText())) {
    super.setText(getHintText());
    hintOn=true;
    if (getHintStyleName() != null) {
      addStyleName(getHintStyleName());
    }
  }
}","protected void blurHint(){
  if (!hintOn && getHintText() != null && ""String_Node_Str"".equals(super.getText())) {
    hintOn=true;
    super.setText(getHintText());
    if (getHintStyleName() != null) {
      addStyleName(getHintStyleName());
    }
  }
}",0.9330708661417324
39050,"@Override public void onFocus(FocusEvent event){
  focusHint();
}","@Override public void onFocus(FocusEvent event){
  setFocus(true);
}",0.9022556390977444
39051,"public void setText(String text){
  focusHint();
  super.setText(text);
  blurHint();
}","public void setText(String text){
  focusHint();
  super.setText(text);
  if (!isFocused) {
    blurHint();
  }
}",0.87
39052,"TaskThunk(final Continuation cont,final HttpServletRequest req){
  this.cont=cont;
  this.name=generateName(req);
}","TaskThunk(final WorkQueue.Executor executor,final Continuation cont,final HttpServletRequest req){
  this.executor=executor;
  this.cont=cont;
  this.name=generateName(req);
}",0.7931034482758621
39053,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  final HttpServletRequest req=(HttpServletRequest)request;
  final HttpServletResponse rsp=(HttpServletResponse)response;
  final Continuation cont=ContinuationSupport.getContinuation(req);
  WorkQueue.Executor executor=getExecutor();
  if (cont.isInitial()) {
    TaskThunk task=new TaskThunk(cont,req);
    if (maxWait > 0) {
      cont.setTimeout(maxWait);
    }
    cont.suspend(rsp);
    cont.addContinuationListener(task);
    cont.setAttribute(TASK,task);
    executor.submit(task);
  }
 else   if (cont.isExpired()) {
    rsp.sendError(SC_SERVICE_UNAVAILABLE);
  }
 else   if (cont.isResumed() && cont.getAttribute(CANCEL) == Boolean.TRUE) {
    rsp.sendError(SC_SERVICE_UNAVAILABLE);
  }
 else   if (cont.isResumed()) {
    TaskThunk task=(TaskThunk)cont.getAttribute(TASK);
    try {
      task.begin(Thread.currentThread());
      chain.doFilter(req,rsp);
    }
  finally {
      task.end();
      Thread.interrupted();
    }
  }
 else {
    context.log(""String_Node_Str"");
    rsp.sendError(SC_SERVICE_UNAVAILABLE);
  }
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  final HttpServletRequest req=(HttpServletRequest)request;
  final HttpServletResponse rsp=(HttpServletResponse)response;
  final Continuation cont=ContinuationSupport.getContinuation(req);
  WorkQueue.Executor executor=getExecutor();
  if (cont.isInitial()) {
    TaskThunk task=new TaskThunk(executor,cont,req);
    if (maxWait > 0) {
      cont.setTimeout(maxWait);
    }
    cont.suspend(rsp);
    cont.addContinuationListener(task);
    cont.setAttribute(TASK,task);
    executor.submit(task);
  }
 else   if (cont.isExpired()) {
    rsp.sendError(SC_SERVICE_UNAVAILABLE);
  }
 else   if (cont.isResumed() && cont.getAttribute(CANCEL) == Boolean.TRUE) {
    rsp.sendError(SC_SERVICE_UNAVAILABLE);
  }
 else   if (cont.isResumed()) {
    TaskThunk task=(TaskThunk)cont.getAttribute(TASK);
    try {
      task.begin(Thread.currentThread());
      chain.doFilter(req,rsp);
    }
  finally {
      task.end();
      Thread.interrupted();
    }
  }
 else {
    context.log(""String_Node_Str"");
    rsp.sendError(SC_SERVICE_UNAVAILABLE);
  }
}",0.9961718417694598
39054,"@Override public void onTimeout(Continuation self){
  WorkQueue.Executor executor=getExecutor();
  executor.remove(this);
}","@Override public void onTimeout(Continuation self){
  executor.remove(this);
}",0.7761194029850746
39055,"@Override public IncludedInDetail call() throws OrmException, NoSuchChangeException, NoSuchEntityException, IOException, InvalidRevisionException {
  control=changeControlFactory.validateFor(changeId);
  final PatchSet patch=db.patchSets().get(control.getChange().currentPatchSetId());
  final Repository repo=repoManager.openRepository(control.getProject().getName());
  final Map<String,Ref> refsHeads=repo.getRefDatabase().getRefs(Constants.R_HEADS);
  final Map<String,Ref> refsTags=repo.getRefDatabase().getRefs(Constants.R_TAGS);
  RevWalk rw=new RevWalk(repo);
  try {
    final RevCommit rev=rw.parseCommit(ObjectId.fromString(patch.getRevision().get()));
    final List<String> branches=new ArrayList<String>();
    for (    final String branch : refsHeads.keySet()) {
      if (rw.isMergedInto(rev,rw.parseCommit(refsHeads.get(branch).getObjectId()))) {
        branches.add(branch);
      }
    }
    final List<String> tags=new ArrayList<String>();
    for (    final String tag : refsTags.keySet()) {
      if (rw.isMergedInto(rev,rw.parseCommit(refsTags.get(tag).getObjectId()))) {
        tags.add(tag);
      }
    }
    detail=new IncludedInDetail();
    detail.setBranches(branches);
    detail.setTags(tags);
    return detail;
  }
 catch (  IncorrectObjectTypeException err) {
    throw new InvalidRevisionException();
  }
catch (  MissingObjectException err) {
    throw new InvalidRevisionException();
  }
}","@Override public IncludedInDetail call() throws OrmException, NoSuchChangeException, IOException, InvalidRevisionException {
  control=changeControlFactory.validateFor(changeId);
  final PatchSet patch=db.patchSets().get(control.getChange().currentPatchSetId());
  final Repository repo=repoManager.openRepository(control.getProject().getName());
  try {
    final RevWalk rw=new RevWalk(repo);
    final RevCommit rev;
    try {
      rev=rw.parseCommit(ObjectId.fromString(patch.getRevision().get()));
    }
 catch (    IncorrectObjectTypeException err) {
      throw new InvalidRevisionException();
    }
catch (    MissingObjectException err) {
      throw new InvalidRevisionException();
    }
    detail=new IncludedInDetail();
    detail.setBranches(includedIn(repo,rw,rev,Constants.R_HEADS));
    detail.setTags(includedIn(repo,rw,rev,Constants.R_TAGS));
    return detail;
  }
  finally {
    repo.close();
  }
}",0.345531914893617
39056,"@Override protected void doPost(final HttpServletRequest req,final HttpServletResponse rsp) throws IOException {
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  final AuthResult res;
  if (""String_Node_Str"".equals(req.getParameter(""String_Node_Str""))) {
    res=create();
  }
 else   if (req.getParameter(""String_Node_Str"") != null) {
    res=byUserName(rsp,req.getParameter(""String_Node_Str""));
  }
 else   if (req.getParameter(""String_Node_Str"") != null) {
    res=byPreferredEmail(rsp,req.getParameter(""String_Node_Str""));
  }
 else   if (req.getParameter(""String_Node_Str"") != null) {
    res=byAccountId(rsp,req.getParameter(""String_Node_Str""));
  }
 else {
    rsp.setContentType(""String_Node_Str"");
    rsp.setCharacterEncoding(HtmlDomUtil.ENC);
    rsp.setContentLength(raw.length);
    final OutputStream out=rsp.getOutputStream();
    try {
      out.write(raw);
    }
  finally {
      out.close();
    }
    return;
  }
  if (res != null) {
    webSession.get().login(res,false);
    final StringBuilder rdr=new StringBuilder();
    rdr.append(urlProvider.get());
    rdr.append('#');
    if (res.isNew()) {
      rdr.append(PageLinks.REGISTER);
      rdr.append(',');
    }
    rdr.append(PageLinks.MINE);
    rsp.sendRedirect(rdr.toString());
  }
 else {
    rsp.setContentType(""String_Node_Str"");
    rsp.setCharacterEncoding(HtmlDomUtil.ENC);
    final Writer out=rsp.getWriter();
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.close();
  }
}","@Override protected void doPost(final HttpServletRequest req,final HttpServletResponse rsp) throws IOException {
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  final AuthResult res;
  if (""String_Node_Str"".equals(req.getParameter(""String_Node_Str""))) {
    res=create();
  }
 else   if (req.getParameter(""String_Node_Str"") != null) {
    res=byUserName(rsp,req.getParameter(""String_Node_Str""));
  }
 else   if (req.getParameter(""String_Node_Str"") != null) {
    res=byPreferredEmail(rsp,req.getParameter(""String_Node_Str""));
  }
 else   if (req.getParameter(""String_Node_Str"") != null) {
    res=byAccountId(rsp,req.getParameter(""String_Node_Str""));
  }
 else {
    rsp.setContentType(""String_Node_Str"");
    rsp.setCharacterEncoding(HtmlDomUtil.ENC);
    rsp.setContentLength(raw.length);
    final OutputStream out=rsp.getOutputStream();
    try {
      out.write(raw);
    }
  finally {
      out.close();
    }
    return;
  }
  if (res != null) {
    webSession.get().login(res,false);
    final StringBuilder rdr=new StringBuilder();
    rdr.append(urlProvider.get());
    if (IS_DEV && req.getParameter(""String_Node_Str"") != null) {
      if (rdr.indexOf(""String_Node_Str"") < 0) {
        rdr.append(""String_Node_Str"");
      }
 else {
        rdr.append(""String_Node_Str"");
      }
      rdr.append(""String_Node_Str"").append(req.getParameter(""String_Node_Str""));
    }
    rdr.append('#');
    if (res.isNew()) {
      rdr.append(PageLinks.REGISTER);
      rdr.append(',');
    }
    rdr.append(PageLinks.MINE);
    rsp.sendRedirect(rdr.toString());
  }
 else {
    rsp.setContentType(""String_Node_Str"");
    rsp.setCharacterEncoding(HtmlDomUtil.ENC);
    final Writer out=rsp.getWriter();
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.close();
  }
}",0.9186422413793104
39057,"private SafeHtml showTabAfterSpace(SafeHtml src){
  src=src.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  src=src.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return src;
}","private SafeHtml showTabAfterSpace(SafeHtml src){
  final String m=""String_Node_Str"";
  final String r=""String_Node_Str"";
  src=src.replaceFirst(""String_Node_Str"" + m,r);
  src=src.replaceAll(""String_Node_Str"" + m,""String_Node_Str"" + r);
  return src;
}",0.7671232876712328
39058,"public void start(final Environment env) throws IOException {
  err.write(Constants.encodeASCII(""String_Node_Str""));
  in.close();
  out.close();
  err.close();
  exit.onExit(127);
}","public void start(final Environment env) throws IOException {
  err.write(Constants.encodeASCII(""String_Node_Str""));
  err.flush();
  in.close();
  out.close();
  err.close();
  exit.onExit(127);
}",0.9604221635883904
39059,"public Command create(){
  return new Command(){
    private InputStream in;
    private OutputStream out;
    private OutputStream err;
    private ExitCallback exit;
    public void setInputStream(    final InputStream in){
      this.in=in;
    }
    public void setOutputStream(    final OutputStream out){
      this.out=out;
    }
    public void setErrorStream(    final OutputStream err){
      this.err=err;
    }
    public void setExitCallback(    final ExitCallback callback){
      this.exit=callback;
    }
    public void start(    final Environment env) throws IOException {
      err.write(Constants.encodeASCII(""String_Node_Str""));
      in.close();
      out.close();
      err.close();
      exit.onExit(127);
    }
    public void destroy(){
    }
  }
;
}","public Command create(){
  return new Command(){
    private InputStream in;
    private OutputStream out;
    private OutputStream err;
    private ExitCallback exit;
    public void setInputStream(    final InputStream in){
      this.in=in;
    }
    public void setOutputStream(    final OutputStream out){
      this.out=out;
    }
    public void setErrorStream(    final OutputStream err){
      this.err=err;
    }
    public void setExitCallback(    final ExitCallback callback){
      this.exit=callback;
    }
    public void start(    final Environment env) throws IOException {
      err.write(Constants.encodeASCII(""String_Node_Str""));
      err.flush();
      in.close();
      out.close();
      err.close();
      exit.onExit(127);
    }
    public void destroy(){
    }
  }
;
}",0.9879057924888606
39060,"public void testGetCauses_CreateSchema() throws OrmException {
  try {
    getSchemaVersion();
    fail(""String_Node_Str"");
  }
 catch (  OrmException e) {
    final Throwable cause=e.getCause();
    assertTrue(cause instanceof SQLException);
    final String msg=cause.getMessage();
    assertEquals(""String_Node_Str"",msg.split(""String_Node_Str"")[0]);
  }
  db.create();
  final SystemConfig config=getSystemConfig();
  final SchemaVersion version=getSchemaVersion();
  assertNotNull(version);
  assertEquals(ReviewDb.VERSION,version.versionNbr);
  assertNotNull(config);
  assertNotNull(config.adminGroupId);
  assertNotNull(config.anonymousGroupId);
  assertNotNull(config.registeredGroupId);
  File sitePath=new File(""String_Node_Str"").getAbsoluteFile();
  if (sitePath.getName().equals(""String_Node_Str"")) {
    sitePath=sitePath.getParentFile();
  }
  assertEquals(sitePath.getAbsolutePath(),config.sitePath);
  assertNotNull(config.registerEmailPrivateKey);
  assertTrue(20 < config.registerEmailPrivateKey.length());
}","public void testGetCauses_CreateSchema() throws OrmException, SQLException {
{
    final JdbcSchema d=(JdbcSchema)db.open();
    try {
      final String[] types={""String_Node_Str"",""String_Node_Str""};
      final ResultSet rs=d.getConnection().getMetaData().getTables(null,null,null,types);
      try {
        assertFalse(rs.next());
      }
  finally {
        rs.close();
      }
    }
  finally {
      d.close();
    }
  }
  db.create();
  final SystemConfig config=getSystemConfig();
  final SchemaVersion version=getSchemaVersion();
  assertNotNull(version);
  assertEquals(ReviewDb.VERSION,version.versionNbr);
  assertNotNull(config);
  assertNotNull(config.adminGroupId);
  assertNotNull(config.anonymousGroupId);
  assertNotNull(config.registeredGroupId);
  File sitePath=new File(""String_Node_Str"").getAbsoluteFile();
  if (sitePath.getName().equals(""String_Node_Str"")) {
    sitePath=sitePath.getParentFile();
  }
  assertEquals(sitePath.getAbsolutePath(),config.sitePath);
  assertNotNull(config.registerEmailPrivateKey);
  assertTrue(20 < config.registerEmailPrivateKey.length());
}",0.7225624116815826
39061,"private static boolean isBecomeAnyoneEnabled(){
  try {
    String s=""String_Node_Str"";
    return Boolean.getBoolean(s);
  }
 catch (  SecurityException se) {
    return false;
  }
}","private static boolean isBecomeAnyoneEnabled(){
  try {
    return Boolean.getBoolean(""String_Node_Str"");
  }
 catch (  SecurityException se) {
    return false;
  }
}",0.8571428571428571
39062,"public void onModuleLoad(){
  UserAgent.assertNotInIFrame();
  initHostname();
  Window.setTitle(M.windowTitle1(myHost));
  initHistoryHooks();
  populateBottomMenu();
  final RootPanel menuArea=RootPanel.get(""String_Node_Str"");
  final Grid menuLine=new Grid(1,3);
  menuLeft=new TabPanel();
  menuRight=new LinkMenuBar();
  searchPanel=new SearchPanel();
  menuLeft.setStyleName(""String_Node_Str"");
  menuLine.setStyleName(""String_Node_Str"");
  menuArea.add(menuLine);
  final FlowPanel menuRightPanel=new FlowPanel();
  menuRightPanel.setStyleName(""String_Node_Str"");
  menuRightPanel.add(menuRight);
  menuRightPanel.add(searchPanel);
  menuLine.setWidget(0,0,menuLeft);
  menuLine.setWidget(0,1,new FlowPanel());
  menuLine.setWidget(0,2,menuRightPanel);
  final CellFormatter fmt=menuLine.getCellFormatter();
  fmt.setStyleName(0,0,""String_Node_Str"");
  fmt.setStyleName(0,1,""String_Node_Str"");
  fmt.setStyleName(0,2,""String_Node_Str"");
  siteHeader=RootPanel.get(""String_Node_Str"");
  siteFooter=RootPanel.get(""String_Node_Str"");
  body=new ViewSite<Screen>(){
    @Override protected void onShowView(    Screen view){
      super.onShowView(view);
      view.onShowView();
    }
  }
;
  RootPanel.get(""String_Node_Str"").add(body);
  final RpcStatus rpcStatus=new RpcStatus(menuArea);
  JsonUtil.addRpcStartHandler(rpcStatus);
  JsonUtil.addRpcCompleteHandler(rpcStatus);
  final HostPageDataService hpd=GWT.create(HostPageDataService.class);
  hpd.load(new GerritCallback<HostPageData>(){
    public void onSuccess(    final HostPageData result){
      myConfig=result.config;
      if (result.xsrfToken != null) {
        JsonUtil.getDefaultXsrfManager().setToken(null,result.xsrfToken);
      }
      if (result.userAccount != null) {
        myAccount=result.userAccount;
        applyUserPreferences();
      }
      onModuleLoad2();
    }
  }
);
}","public void onModuleLoad(){
  UserAgent.assertNotInIFrame();
  initHostname();
  Window.setTitle(M.windowTitle1(myHost));
  initHistoryHooks();
  populateBottomMenu();
  final RootPanel menuArea=RootPanel.get(""String_Node_Str"");
  final Grid menuLine=new Grid(1,3);
  menuLeft=new TabPanel();
  menuRight=new LinkMenuBar();
  searchPanel=new SearchPanel();
  menuLeft.setStyleName(""String_Node_Str"");
  menuLine.setStyleName(""String_Node_Str"");
  menuArea.add(menuLine);
  final FlowPanel menuRightPanel=new FlowPanel();
  menuRightPanel.setStyleName(""String_Node_Str"");
  menuRightPanel.add(menuRight);
  menuRightPanel.add(searchPanel);
  menuLine.setWidget(0,0,menuLeft);
  menuLine.setWidget(0,1,new FlowPanel());
  menuLine.setWidget(0,2,menuRightPanel);
  final CellFormatter fmt=menuLine.getCellFormatter();
  fmt.setStyleName(0,0,""String_Node_Str"");
  fmt.setStyleName(0,1,""String_Node_Str"");
  fmt.setStyleName(0,2,""String_Node_Str"");
  siteHeader=RootPanel.get(""String_Node_Str"");
  siteFooter=RootPanel.get(""String_Node_Str"");
  body=new ViewSite<Screen>(){
    @Override protected void onShowView(    Screen view){
      super.onShowView(view);
      view.onShowView();
    }
  }
;
  RootPanel.get(""String_Node_Str"").add(body);
  final RpcStatus rpcStatus=new RpcStatus(menuArea);
  JsonUtil.addRpcStartHandler(rpcStatus);
  JsonUtil.addRpcCompleteHandler(rpcStatus);
  JsonUtil.setDefaultXsrfManager(new XsrfManager(){
    @Override public String getToken(    JsonDefTarget proxy){
      return Cookies.getCookie(""String_Node_Str"");
    }
    @Override public void setToken(    JsonDefTarget proxy,    String token){
    }
  }
);
  final HostPageDataService hpd=GWT.create(HostPageDataService.class);
  hpd.load(new GerritCallback<HostPageData>(){
    public void onSuccess(    final HostPageData result){
      myConfig=result.config;
      if (result.userAccount != null) {
        myAccount=result.userAccount;
        applyUserPreferences();
      }
      onModuleLoad2();
    }
  }
);
}",0.8952134540750324
39063,"public void onSuccess(final HostPageData result){
  myConfig=result.config;
  if (result.xsrfToken != null) {
    JsonUtil.getDefaultXsrfManager().setToken(null,result.xsrfToken);
  }
  if (result.userAccount != null) {
    myAccount=result.userAccount;
    applyUserPreferences();
  }
  onModuleLoad2();
}","public void onSuccess(final HostPageData result){
  myConfig=result.config;
  if (result.userAccount != null) {
    myAccount=result.userAccount;
    applyUserPreferences();
  }
  onModuleLoad2();
}",0.7857142857142857
39064,"@Inject HostPageServlet(final Provider<CurrentUser> cu,final Provider<WebSession> ws,@SitePath final File path,final GerritConfig gc,@CanonicalWebUrl @Nullable final Provider<String> up,@CanonicalWebUrl @Nullable final String configuredUrl,final ServletContext servletContext) throws IOException {
  currentUser=cu;
  webSession=ws;
  urlProvider=up;
  sitePath=path;
  config=gc;
  wantSSL=configuredUrl != null && configuredUrl.startsWith(""String_Node_Str"");
  final String hostPageName=""String_Node_Str"";
  hostDoc=HtmlDomUtil.parseFile(servletContext,""String_Node_Str"" + hostPageName);
  if (hostDoc == null) {
    throw new FileNotFoundException(""String_Node_Str"" + hostPageName + ""String_Node_Str"");
  }
  fixModuleReference(hostDoc,servletContext);
  injectCssFile(hostDoc,""String_Node_Str"",sitePath,""String_Node_Str"");
  injectXmlFile(hostDoc,""String_Node_Str"",sitePath,""String_Node_Str"");
  injectXmlFile(hostDoc,""String_Node_Str"",sitePath,""String_Node_Str"");
}","@Inject HostPageServlet(final Provider<CurrentUser> cu,@SitePath final File path,final GerritConfig gc,@CanonicalWebUrl @Nullable final Provider<String> up,@CanonicalWebUrl @Nullable final String configuredUrl,final ServletContext servletContext) throws IOException {
  currentUser=cu;
  urlProvider=up;
  sitePath=path;
  config=gc;
  wantSSL=configuredUrl != null && configuredUrl.startsWith(""String_Node_Str"");
  final String hostPageName=""String_Node_Str"";
  hostDoc=HtmlDomUtil.parseFile(servletContext,""String_Node_Str"" + hostPageName);
  if (hostDoc == null) {
    throw new FileNotFoundException(""String_Node_Str"" + hostPageName + ""String_Node_Str"");
  }
  fixModuleReference(hostDoc,servletContext);
  injectCssFile(hostDoc,""String_Node_Str"",sitePath,""String_Node_Str"");
  injectXmlFile(hostDoc,""String_Node_Str"",sitePath,""String_Node_Str"");
  injectXmlFile(hostDoc,""String_Node_Str"",sitePath,""String_Node_Str"");
}",0.9751716851558372
39065,"@Override protected void doGet(final HttpServletRequest req,final HttpServletResponse rsp) throws IOException {
  if (wantSSL && !isSecure(req)) {
    final StringBuffer reqUrl=req.getRequestURL();
    if (isLocalHost(req)) {
      reqUrl.replace(0,reqUrl.indexOf(""String_Node_Str""),""String_Node_Str"");
    }
 else {
      reqUrl.setLength(0);
      reqUrl.append(urlProvider.get());
    }
    rsp.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);
    rsp.setHeader(""String_Node_Str"",reqUrl.toString());
    return;
  }
  final HostPageData pageData=new HostPageData();
  pageData.config=config;
  final CurrentUser user=currentUser.get();
  if (user instanceof IdentifiedUser) {
    pageData.xsrfToken=webSession.get().getToken();
    pageData.userAccount=((IdentifiedUser)user).getAccount();
  }
  final Document peruser=HtmlDomUtil.clone(hostDoc);
  injectJson(peruser,""String_Node_Str"",pageData);
  final byte[] raw=HtmlDomUtil.toUTF8(peruser);
  final byte[] tosend;
  if (RPCServletUtils.acceptsGzipEncoding(req)) {
    rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
    tosend=HtmlDomUtil.compress(raw);
  }
 else {
    tosend=raw;
  }
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setContentType(""String_Node_Str"");
  rsp.setCharacterEncoding(HtmlDomUtil.ENC);
  rsp.setContentLength(tosend.length);
  final OutputStream out=rsp.getOutputStream();
  try {
    out.write(tosend);
  }
  finally {
    out.close();
  }
}","@Override protected void doGet(final HttpServletRequest req,final HttpServletResponse rsp) throws IOException {
  if (wantSSL && !isSecure(req)) {
    final StringBuffer reqUrl=req.getRequestURL();
    if (isLocalHost(req)) {
      reqUrl.replace(0,reqUrl.indexOf(""String_Node_Str""),""String_Node_Str"");
    }
 else {
      reqUrl.setLength(0);
      reqUrl.append(urlProvider.get());
    }
    rsp.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);
    rsp.setHeader(""String_Node_Str"",reqUrl.toString());
    return;
  }
  final HostPageData pageData=new HostPageData();
  pageData.config=config;
  final CurrentUser user=currentUser.get();
  if (user instanceof IdentifiedUser) {
    pageData.userAccount=((IdentifiedUser)user).getAccount();
  }
  final Document peruser=HtmlDomUtil.clone(hostDoc);
  injectJson(peruser,""String_Node_Str"",pageData);
  final byte[] raw=HtmlDomUtil.toUTF8(peruser);
  final byte[] tosend;
  if (RPCServletUtils.acceptsGzipEncoding(req)) {
    rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
    tosend=HtmlDomUtil.compress(raw);
  }
 else {
    tosend=raw;
  }
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setHeader(""String_Node_Str"",""String_Node_Str"");
  rsp.setContentType(""String_Node_Str"");
  rsp.setCharacterEncoding(HtmlDomUtil.ENC);
  rsp.setContentLength(tosend.length);
  final OutputStream out=rsp.getOutputStream();
  try {
    out.write(tosend);
  }
  finally {
    out.close();
  }
}",0.9829954218443429
39066,"private void parseNewChangeCommand(final ReceiveCommand cmd){
  if (newChange != null) {
    reject(cmd,""String_Node_Str"");
    return;
  }
  newChange=cmd;
  String destBranchName=cmd.getRefName().substring(NEW_CHANGE.length());
  if (!destBranchName.startsWith(Constants.R_REFS)) {
    destBranchName=Constants.R_HEADS + destBranchName;
  }
  try {
    destBranch=db.branches().get(new Branch.NameKey(proj.getNameKey(),destBranchName));
  }
 catch (  OrmException e) {
    log.error(""String_Node_Str"" + proj + ""String_Node_Str""+ destBranchName,e);
    reject(cmd,""String_Node_Str"");
    return;
  }
  if (destBranch == null) {
    String n=destBranchName;
    if (n.startsWith(Constants.R_HEADS))     n=n.substring(Constants.R_HEADS.length());
    reject(cmd,""String_Node_Str"" + n + ""String_Node_Str"");
    return;
  }
  try {
    final RevWalk walk=rp.getRevWalk();
    final RevFlag CONNECTED=walk.newFlag(""String_Node_Str"");
    walk.carry(CONNECTED);
    walk.reset();
    walk.sort(RevSort.TOPO);
    walk.sort(RevSort.REVERSE,true);
    final RevCommit tip=walk.parseCommit(newChange.getNewId());
    tip.add(CONNECTED);
    walk.markStart(tip);
    final List<RevCommit> heads=new ArrayList<RevCommit>();
    for (    final Ref r : rp.getAdvertisedRefs().values()) {
      if (isHead(r) || isTag(r)) {
        try {
          final RevCommit h=walk.parseCommit(r.getObjectId());
          walk.markUninteresting(h);
          heads.add(h);
        }
 catch (        IOException e) {
          continue;
        }
      }
    }
    if (!heads.isEmpty()) {
      while (walk.next() != null) {
      }
      boolean isConnected=false;
      for (      final RevCommit c : heads) {
        if (c.has(CONNECTED)) {
          isConnected=true;
          break;
        }
      }
      if (!isConnected) {
        reject(newChange,""String_Node_Str"");
        return;
      }
    }
  }
 catch (  IOException e) {
    newChange.setResult(Result.REJECTED_MISSING_OBJECT);
    log.error(""String_Node_Str"",e);
    return;
  }
}","private void parseNewChangeCommand(final ReceiveCommand cmd){
  if (newChange != null) {
    reject(cmd,""String_Node_Str"");
    return;
  }
  newChange=cmd;
  String destBranchName=cmd.getRefName().substring(NEW_CHANGE.length());
  if (!destBranchName.startsWith(Constants.R_REFS)) {
    destBranchName=Constants.R_HEADS + destBranchName;
  }
  try {
    destBranch=db.branches().get(new Branch.NameKey(proj.getNameKey(),destBranchName));
  }
 catch (  OrmException e) {
    log.error(""String_Node_Str"" + proj + ""String_Node_Str""+ destBranchName,e);
    reject(cmd,""String_Node_Str"");
    return;
  }
  if (destBranch == null) {
    String n=destBranchName;
    if (n.startsWith(Constants.R_HEADS))     n=n.substring(Constants.R_HEADS.length());
    reject(cmd,""String_Node_Str"" + n + ""String_Node_Str"");
    return;
  }
  try {
    final RevWalk walk=rp.getRevWalk();
    final RevFlag SIDE_NEW=walk.newFlag(""String_Node_Str"");
    final RevFlag SIDE_HAVE=walk.newFlag(""String_Node_Str"");
    final RevFlagSet COMMON=new RevFlagSet();
    COMMON.add(SIDE_NEW);
    COMMON.add(SIDE_HAVE);
    walk.carry(COMMON);
    walk.reset();
    walk.sort(RevSort.TOPO);
    walk.sort(RevSort.REVERSE,true);
    final RevCommit tip=walk.parseCommit(newChange.getNewId());
    tip.add(SIDE_NEW);
    walk.markStart(tip);
    boolean haveHeads=false;
    for (    final Ref r : rp.getAdvertisedRefs().values()) {
      if (isHead(r) || isTag(r)) {
        try {
          final RevCommit h=walk.parseCommit(r.getObjectId());
          h.add(SIDE_HAVE);
          walk.markStart(h);
          haveHeads=true;
        }
 catch (        IOException e) {
          continue;
        }
      }
    }
    if (haveHeads) {
      boolean isConnected=false;
      RevCommit c;
      while ((c=walk.next()) != null) {
        if (c.hasAll(COMMON)) {
          isConnected=true;
          break;
        }
      }
      if (!isConnected) {
        reject(newChange,""String_Node_Str"");
        return;
      }
    }
  }
 catch (  IOException e) {
    newChange.setResult(Result.REJECTED_MISSING_OBJECT);
    log.error(""String_Node_Str"",e);
    return;
  }
}",0.8397497593840231
39067,"private void ensureCommentsVisible(final CommentDetail comments){
  if (comments.getCommentsA().isEmpty() && comments.getCommentsB().isEmpty()) {
    return;
  }
  final List<Edit> empty=new ArrayList<Edit>();
  int lastLine;
  lastLine=-1;
  for (  PatchLineComment plc : comments.getCommentsA()) {
    final int a=plc.getLine();
    if (lastLine != a) {
      safeAdd(empty,new Edit(a - 1,mapA2B(a - 1)));
      lastLine=a;
    }
  }
  lastLine=-1;
  for (  PatchLineComment plc : comments.getCommentsB()) {
    final int b=plc.getLine();
    if (lastLine != b) {
      safeAdd(empty,new Edit(mapB2A(b - 1),b - 1));
      lastLine=b;
    }
  }
  edits.addAll(empty);
  Collections.sort(edits,EDIT_SORT);
}","private void ensureCommentsVisible(final CommentDetail comments){
  if (comments.getCommentsA().isEmpty() && comments.getCommentsB().isEmpty()) {
    return;
  }
  final List<Edit> empty=new ArrayList<Edit>();
  int lastLine;
  lastLine=-1;
  for (  PatchLineComment plc : comments.getCommentsA()) {
    final int a=plc.getLine();
    if (lastLine != a) {
      final int b=mapA2B(a - 1);
      if (0 <= b) {
        safeAdd(empty,new Edit(a - 1,b));
      }
      lastLine=a;
    }
  }
  lastLine=-1;
  for (  PatchLineComment plc : comments.getCommentsB()) {
    final int b=plc.getLine();
    if (lastLine != b) {
      final int a=mapB2A(b - 1);
      if (0 <= a) {
        safeAdd(empty,new Edit(a,b - 1));
      }
      lastLine=b;
    }
  }
  edits.addAll(empty);
  Collections.sort(edits,EDIT_SORT);
}",0.8601583113456465
39068,"private int mapA2B(final int a){
  if (edits.isEmpty()) {
    return a;
  }
  if (a < edits.get(0).getBeginA()) {
    return a;
  }
  for (  Edit e : edits) {
    if (e.getBeginA() <= a && a <= e.getEndA()) {
      return e.getBeginB() + (a - e.getBeginA());
    }
  }
  final Edit last=edits.get(edits.size() - 1);
  return last.getBeginB() + (a - last.getEndA());
}","private int mapA2B(final int a){
  if (edits.isEmpty()) {
    return a;
  }
  for (int i=0; i < edits.size(); i++) {
    final Edit e=edits.get(i);
    if (a < e.getBeginA()) {
      if (i == 0) {
        return a;
      }
      return edits.get(i - i).getEndB() + (e.getBeginA() - a);
    }
    if (e.getBeginA() <= a && a <= e.getEndA()) {
      return -1;
    }
  }
  final Edit last=edits.get(edits.size() - 1);
  return last.getBeginB() + (a - last.getEndA());
}",0.4532374100719424
39069,"private int mapB2A(final int b){
  if (edits.isEmpty()) {
    return b;
  }
  if (b < edits.get(0).getBeginB()) {
    return b;
  }
  for (  Edit e : edits) {
    if (e.getBeginB() <= b && b <= e.getEndB()) {
      return e.getBeginA() + (b - e.getBeginB());
    }
  }
  final Edit last=edits.get(edits.size() - 1);
  return last.getBeginA() + (b - last.getEndB());
}","private int mapB2A(final int b){
  if (edits.isEmpty()) {
    return b;
  }
  for (int i=0; i < edits.size(); i++) {
    final Edit e=edits.get(i);
    if (b < e.getBeginB()) {
      if (i == 0) {
        return b;
      }
      return edits.get(i - i).getEndA() + (e.getBeginB() - b);
    }
    if (e.getBeginB() <= b && b <= e.getEndB()) {
      return -1;
    }
  }
  final Edit last=edits.get(edits.size() - 1);
  return last.getBeginA() + (b - last.getEndB());
}",0.4532374100719424
39070,"private void appendPatchSet(final Change.Id changeId,final ReceiveCommand cmd) throws IOException, OrmException {
  final RevCommit c=rp.getRevWalk().parseCommit(cmd.getNewId());
  rp.getRevWalk().parseBody(c);
  if (!validCommitter(cmd,c)) {
    return;
  }
  final Account.Id me=userAccount.getId();
  final ReplaceResult result;
  final Set<Account.Id> oldReviewers=new HashSet<Account.Id>();
  final Set<Account.Id> oldCC=new HashSet<Account.Id>();
  result=db.run(new OrmRunnable<ReplaceResult,ReviewDb>(){
    public ReplaceResult run(    final ReviewDb db,    final Transaction txn,    final boolean isRetry) throws OrmException {
      final Change change;
      if (isRetry) {
        change=db.changes().get(changeId);
        if (change == null) {
          reject(cmd,""String_Node_Str"" + changeId.get() + ""String_Node_Str"");
          return null;
        }
        if (change.getStatus().isClosed()) {
          reject(cmd,""String_Node_Str"" + changeId.get() + ""String_Node_Str"");
          return null;
        }
        if (change.getDest() == null || !proj.getNameKey().equals(change.getDest().getParentKey())) {
          reject(cmd,""String_Node_Str"" + changeId.get() + ""String_Node_Str""+ proj.getName());
          return null;
        }
      }
 else {
        change=changeCache.get(changeId);
      }
      final HashSet<String> existingRevisions=new HashSet<String>();
      for (      final PatchSet ps : db.patchSets().byChange(changeId)) {
        if (ps.getRevision() != null) {
          existingRevisions.add(ps.getRevision().get());
        }
      }
      if (existingRevisions.contains(c.name())) {
        reject(cmd,""String_Node_Str"");
        return null;
      }
      for (      final RevCommit p : c.getParents()) {
        if (existingRevisions.contains(p.name())) {
          reject(cmd,""String_Node_Str"");
          return null;
        }
      }
      final PatchSet ps=new PatchSet(change.newPatchSetId());
      ps.setCreatedOn(new Timestamp(System.currentTimeMillis()));
      ps.setUploader(userAccount.getId());
      final PatchSetImporter imp=new PatchSetImporter(server,db,proj.getNameKey(),repo,c,ps,true);
      imp.setTransaction(txn);
      try {
        imp.run();
      }
 catch (      IOException e) {
        throw new OrmException(e);
      }
      final Ref mergedInto=findMergedInto(change.getDest().get(),c);
      final ReplaceResult result=new ReplaceResult();
      result.mergedIntoRef=mergedInto != null ? mergedInto.getName() : null;
      result.change=change;
      result.patchSet=ps;
      result.info=imp.getPatchSetInfo();
      final Account.Id authorId=imp.getPatchSetInfo().getAuthor() != null ? imp.getPatchSetInfo().getAuthor().getAccount() : null;
      final Account.Id committerId=imp.getPatchSetInfo().getCommitter() != null ? imp.getPatchSetInfo().getCommitter().getAccount() : null;
      boolean haveAuthor=false;
      boolean haveCommitter=false;
      final Set<Account.Id> haveApprovals=new HashSet<Account.Id>();
      oldReviewers.clear();
      oldCC.clear();
      result.approvals=db.changeApprovals().byChange(change.getId()).toList();
      for (      ChangeApproval a : result.approvals) {
        haveApprovals.add(a.getAccountId());
        if (a.getValue() != 0) {
          oldReviewers.add(a.getAccountId());
        }
 else {
          oldCC.add(a.getAccountId());
        }
        if (!haveAuthor && authorId != null && a.getAccountId().equals(authorId)) {
          haveAuthor=true;
        }
        if (!haveCommitter && committerId != null && a.getAccountId().equals(committerId)) {
          haveCommitter=true;
        }
        if (me.equals(a.getAccountId())) {
          if (a.getValue() > 0 && ApprovalCategory.SUBMIT.equals(a.getCategoryId())) {
            a.clear();
          }
 else {
          }
        }
 else         if (a.getValue() > 0) {
          a.clear();
        }
      }
      final ChangeMessage msg=new ChangeMessage(new ChangeMessage.Key(change.getId(),ChangeUtil.messageUUID(db)),me,ps.getCreatedOn());
      msg.setMessage(""String_Node_Str"" + ps.getPatchSetId() + ""String_Node_Str"");
      db.changeMessages().insert(Collections.singleton(msg),txn);
      result.msg=msg;
      if (result.mergedIntoRef != null) {
        markChangeMergedByPush(db,txn,result);
      }
 else {
        change.setStatus(Change.Status.NEW);
        change.setCurrentPatchSet(imp.getPatchSetInfo());
        ChangeUtil.updated(change);
        db.changeApprovals().update(result.approvals,txn);
        db.changes().update(Collections.singleton(change),txn);
      }
      final List<ApprovalType> allTypes=Common.getGerritConfig().getApprovalTypes();
      if (allTypes.size() > 0) {
        final ApprovalCategory.Id catId=allTypes.get(allTypes.size() - 1).getCategory().getId();
        if (authorId != null && haveApprovals.add(authorId)) {
          insertDummyChangeApproval(result,authorId,catId,db,txn);
        }
        if (committerId != null && haveApprovals.add(committerId)) {
          insertDummyChangeApproval(result,committerId,catId,db,txn);
        }
        for (        final Account.Id reviewer : reviewerId) {
          if (haveApprovals.add(reviewer)) {
            insertDummyChangeApproval(result,reviewer,catId,db,txn);
          }
        }
      }
      return result;
    }
  }
);
  if (result != null) {
    final PatchSet ps=result.patchSet;
    final RefUpdate ru=repo.updateRef(ps.getRefName());
    ru.setNewObjectId(c);
    ru.disableRefLog();
    if (ru.update(rp.getRevWalk()) != RefUpdate.Result.NEW) {
      throw new IOException(""String_Node_Str"" + ps.getRefName() + ""String_Node_Str""+ repo.getDirectory()+ ""String_Node_Str""+ ru.getResult());
    }
    PushQueue.scheduleUpdate(proj.getNameKey(),ru.getName());
    cmd.setResult(ReceiveCommand.Result.OK);
    try {
      final ReplacePatchSetSender cm=new ReplacePatchSetSender(server,result.change);
      cm.setFrom(me);
      cm.setPatchSet(ps,result.info);
      cm.setChangeMessage(result.msg);
      cm.setReviewDb(db);
      cm.addReviewers(reviewerId);
      cm.addExtraCC(ccId);
      cm.addReviewers(oldReviewers);
      cm.addExtraCC(oldCC);
      cm.send();
    }
 catch (    EmailException e) {
      log.error(""String_Node_Str"" + ps.getId(),e);
    }
  }
  sendMergedEmail(result);
}","private void appendPatchSet(final Change.Id changeId,final ReceiveCommand cmd) throws IOException, OrmException {
  final RevCommit c=rp.getRevWalk().parseCommit(cmd.getNewId());
  rp.getRevWalk().parseBody(c);
  if (!validCommitter(cmd,c)) {
    return;
  }
  final Account.Id me=userAccount.getId();
  final ReplaceResult result;
  final Set<Account.Id> oldReviewers=new HashSet<Account.Id>();
  final Set<Account.Id> oldCC=new HashSet<Account.Id>();
  result=db.run(new OrmRunnable<ReplaceResult,ReviewDb>(){
    public ReplaceResult run(    final ReviewDb db,    final Transaction txn,    final boolean isRetry) throws OrmException {
      final Change change;
      if (isRetry) {
        change=db.changes().get(changeId);
        if (change == null) {
          reject(cmd,""String_Node_Str"" + changeId.get() + ""String_Node_Str"");
          return null;
        }
        if (change.getStatus().isClosed()) {
          reject(cmd,""String_Node_Str"" + changeId.get() + ""String_Node_Str"");
          return null;
        }
        if (change.getDest() == null || !proj.getNameKey().equals(change.getDest().getParentKey())) {
          reject(cmd,""String_Node_Str"" + changeId.get() + ""String_Node_Str""+ proj.getName());
          return null;
        }
      }
 else {
        change=changeCache.get(changeId);
      }
      final HashSet<ObjectId> existingRevisions=new HashSet<ObjectId>();
      for (      final PatchSet ps : db.patchSets().byChange(changeId)) {
        if (ps.getRevision() != null) {
          final String revIdStr=ps.getRevision().get();
          try {
            existingRevisions.add(ObjectId.fromString(revIdStr));
          }
 catch (          IllegalArgumentException e) {
            log.warn(""String_Node_Str"" + ps.getId() + ""String_Node_Str""+ revIdStr);
            reject(cmd,""String_Node_Str"");
            return null;
          }
        }
      }
      if (existingRevisions.contains(c.copy())) {
        reject(cmd,""String_Node_Str"");
        return null;
      }
      for (      final ObjectId commitId : existingRevisions) {
        try {
          final RevCommit prior=rp.getRevWalk().parseCommit(commitId);
          if (rp.getRevWalk().isMergedInto(prior,c)) {
            reject(cmd,""String_Node_Str"");
            return null;
          }
        }
 catch (        IOException e) {
          log.error(""String_Node_Str"" + changeId + ""String_Node_Str""+ commitId.name(),e);
          reject(cmd,""String_Node_Str"");
          return null;
        }
      }
      final PatchSet ps=new PatchSet(change.newPatchSetId());
      ps.setCreatedOn(new Timestamp(System.currentTimeMillis()));
      ps.setUploader(userAccount.getId());
      final PatchSetImporter imp=new PatchSetImporter(server,db,proj.getNameKey(),repo,c,ps,true);
      imp.setTransaction(txn);
      try {
        imp.run();
      }
 catch (      IOException e) {
        throw new OrmException(e);
      }
      final Ref mergedInto=findMergedInto(change.getDest().get(),c);
      final ReplaceResult result=new ReplaceResult();
      result.mergedIntoRef=mergedInto != null ? mergedInto.getName() : null;
      result.change=change;
      result.patchSet=ps;
      result.info=imp.getPatchSetInfo();
      final Account.Id authorId=imp.getPatchSetInfo().getAuthor() != null ? imp.getPatchSetInfo().getAuthor().getAccount() : null;
      final Account.Id committerId=imp.getPatchSetInfo().getCommitter() != null ? imp.getPatchSetInfo().getCommitter().getAccount() : null;
      boolean haveAuthor=false;
      boolean haveCommitter=false;
      final Set<Account.Id> haveApprovals=new HashSet<Account.Id>();
      oldReviewers.clear();
      oldCC.clear();
      result.approvals=db.changeApprovals().byChange(change.getId()).toList();
      for (      ChangeApproval a : result.approvals) {
        haveApprovals.add(a.getAccountId());
        if (a.getValue() != 0) {
          oldReviewers.add(a.getAccountId());
        }
 else {
          oldCC.add(a.getAccountId());
        }
        if (!haveAuthor && authorId != null && a.getAccountId().equals(authorId)) {
          haveAuthor=true;
        }
        if (!haveCommitter && committerId != null && a.getAccountId().equals(committerId)) {
          haveCommitter=true;
        }
        if (me.equals(a.getAccountId())) {
          if (a.getValue() > 0 && ApprovalCategory.SUBMIT.equals(a.getCategoryId())) {
            a.clear();
          }
 else {
          }
        }
 else         if (a.getValue() > 0) {
          a.clear();
        }
      }
      final ChangeMessage msg=new ChangeMessage(new ChangeMessage.Key(change.getId(),ChangeUtil.messageUUID(db)),me,ps.getCreatedOn());
      msg.setMessage(""String_Node_Str"" + ps.getPatchSetId() + ""String_Node_Str"");
      db.changeMessages().insert(Collections.singleton(msg),txn);
      result.msg=msg;
      if (result.mergedIntoRef != null) {
        markChangeMergedByPush(db,txn,result);
      }
 else {
        change.setStatus(Change.Status.NEW);
        change.setCurrentPatchSet(imp.getPatchSetInfo());
        ChangeUtil.updated(change);
        db.changeApprovals().update(result.approvals,txn);
        db.changes().update(Collections.singleton(change),txn);
      }
      final List<ApprovalType> allTypes=Common.getGerritConfig().getApprovalTypes();
      if (allTypes.size() > 0) {
        final ApprovalCategory.Id catId=allTypes.get(allTypes.size() - 1).getCategory().getId();
        if (authorId != null && haveApprovals.add(authorId)) {
          insertDummyChangeApproval(result,authorId,catId,db,txn);
        }
        if (committerId != null && haveApprovals.add(committerId)) {
          insertDummyChangeApproval(result,committerId,catId,db,txn);
        }
        for (        final Account.Id reviewer : reviewerId) {
          if (haveApprovals.add(reviewer)) {
            insertDummyChangeApproval(result,reviewer,catId,db,txn);
          }
        }
      }
      return result;
    }
  }
);
  if (result != null) {
    final PatchSet ps=result.patchSet;
    final RefUpdate ru=repo.updateRef(ps.getRefName());
    ru.setNewObjectId(c);
    ru.disableRefLog();
    if (ru.update(rp.getRevWalk()) != RefUpdate.Result.NEW) {
      throw new IOException(""String_Node_Str"" + ps.getRefName() + ""String_Node_Str""+ repo.getDirectory()+ ""String_Node_Str""+ ru.getResult());
    }
    PushQueue.scheduleUpdate(proj.getNameKey(),ru.getName());
    cmd.setResult(ReceiveCommand.Result.OK);
    try {
      final ReplacePatchSetSender cm=new ReplacePatchSetSender(server,result.change);
      cm.setFrom(me);
      cm.setPatchSet(ps,result.info);
      cm.setChangeMessage(result.msg);
      cm.setReviewDb(db);
      cm.addReviewers(reviewerId);
      cm.addExtraCC(ccId);
      cm.addReviewers(oldReviewers);
      cm.addExtraCC(oldCC);
      cm.send();
    }
 catch (    EmailException e) {
      log.error(""String_Node_Str"" + ps.getId(),e);
    }
  }
  sendMergedEmail(result);
}",0.9287387591626992
39071,"public PatchFile(final Repository repo,final RevId id,final Patch patch) throws MissingObjectException, IncorrectObjectTypeException, IOException {
  this.repo=repo;
  this.patch=patch;
  final RevWalk rw=new RevWalk(repo);
  final RevCommit bCommit=rw.parseCommit(ObjectId.fromString(id.get()));
  if (bCommit.getParentCount() > 0) {
    rw.parseHeaders(bCommit.getParent(0));
    aTree=bCommit.getParent(0).getTree();
  }
 else {
    aTree=emptyTree();
  }
  bTree=bCommit.getTree();
}","public PatchFile(final Repository repo,final RevId id,final Patch patch) throws MissingObjectException, IncorrectObjectTypeException, IOException {
  this.repo=repo;
  this.patch=patch;
  final RevWalk rw=new RevWalk(repo);
  final RevCommit bCommit=rw.parseCommit(ObjectId.fromString(id.get()));
  if (bCommit.getParentCount() > 0) {
    rw.parse(bCommit.getParent(0));
    aTree=bCommit.getParent(0).getTree();
  }
 else {
    aTree=emptyTree();
  }
  bTree=bCommit.getTree();
}",0.9927611168562565
39072,"private void packContent(){
  for (int curIdx=0; curIdx < edits.size(); ) {
    Edit curEdit=edits.get(curIdx);
    final int endIdx=findCombinedEnd(edits,curIdx);
    final Edit endEdit=edits.get(endIdx);
    int aCur=Math.max(0,curEdit.getBeginA() - context());
    int bCur=Math.max(0,curEdit.getBeginB() - context());
    final int aEnd=Math.min(srcA.size(),endEdit.getEndA() + context());
    final int bEnd=Math.min(srcB.size(),endEdit.getEndB() + context());
    while (aCur < aEnd || bCur < bEnd) {
      if (aCur < curEdit.getBeginA() || endIdx + 1 < curIdx) {
        srcA.addLineTo(dstA,aCur);
        aCur++;
        bCur++;
      }
 else       if (aCur < curEdit.getEndA()) {
        srcA.addLineTo(dstA,aCur++);
      }
 else       if (bCur < curEdit.getEndB()) {
        srcB.addLineTo(dstB,bCur++);
      }
      if (end(curEdit,aCur,bCur) && ++curIdx < edits.size()) {
        curEdit=edits.get(curIdx);
        while (curEdit.getType() == Edit.Type.EMPTY && curEdit != endEdit) {
          edits.remove(curIdx);
          curEdit=edits.get(curIdx);
        }
      }
    }
  }
}","private void packContent(){
  for (int curIdx=0; curIdx < edits.size(); ) {
    Edit curEdit=edits.get(curIdx);
    final int endIdx=findCombinedEnd(edits,curIdx);
    final Edit endEdit=edits.get(endIdx);
    int aCur=Math.max(0,curEdit.getBeginA() - context());
    int bCur=Math.max(0,curEdit.getBeginB() - context());
    final int aEnd=Math.min(srcA.size(),endEdit.getEndA() + context());
    final int bEnd=Math.min(srcB.size(),endEdit.getEndB() + context());
    while (aCur < aEnd || bCur < bEnd) {
      if (aCur < curEdit.getBeginA() || endIdx + 1 < curIdx) {
        srcA.addLineTo(dstA,aCur);
        aCur++;
        bCur++;
      }
 else       if (aCur < curEdit.getEndA()) {
        srcA.addLineTo(dstA,aCur++);
      }
 else       if (bCur < curEdit.getEndB()) {
        srcB.addLineTo(dstB,bCur++);
      }
      if (end(curEdit,aCur,bCur) && ++curIdx < edits.size()) {
        curEdit=edits.get(curIdx);
        while (curEdit.getType() == Edit.Type.EMPTY) {
          if (aEnd <= curEdit.getBeginA() || bEnd <= curEdit.getEndB()) {
            break;
          }
          edits.remove(curIdx);
          if (curIdx < edits.size()) {
            curEdit=edits.get(curIdx);
          }
 else {
            break;
          }
        }
      }
    }
  }
}",0.8905787917194762
39073,"private void appendPatchSets(){
  for (  Map.Entry<Change.Id,ReceiveCommand> e : addByChange.entrySet()) {
    final ReceiveCommand cmd=e.getValue();
    final Change.Id changeId=e.getKey();
    try {
      appendPatchSet(changeId,cmd);
    }
 catch (    IOException err) {
      log.error(""String_Node_Str"" + changeId + ""String_Node_Str""+ cmd.getNewId().name(),e);
      reject(cmd,""String_Node_Str"");
    }
catch (    OrmException err) {
      log.error(""String_Node_Str"" + changeId + ""String_Node_Str""+ cmd.getNewId().name(),e);
      reject(cmd,""String_Node_Str"");
    }
    if (cmd.getResult() == ReceiveCommand.Result.NOT_ATTEMPTED) {
      log.error(""String_Node_Str"" + changeId + ""String_Node_Str""+ cmd.getNewId().name()+ ""String_Node_Str""+ ""String_Node_Str"");
      reject(cmd,""String_Node_Str"");
    }
  }
}","private void appendPatchSets(){
  for (  Map.Entry<Change.Id,ReceiveCommand> e : addByChange.entrySet()) {
    final ReceiveCommand cmd=e.getValue();
    final Change.Id changeId=e.getKey();
    try {
      appendPatchSet(changeId,cmd);
    }
 catch (    IOException err) {
      log.error(""String_Node_Str"" + changeId + ""String_Node_Str""+ cmd.getNewId().name(),err);
      reject(cmd,""String_Node_Str"");
    }
catch (    OrmException err) {
      log.error(""String_Node_Str"" + changeId + ""String_Node_Str""+ cmd.getNewId().name(),err);
      reject(cmd,""String_Node_Str"");
    }
    if (cmd.getResult() == ReceiveCommand.Result.NOT_ATTEMPTED) {
      log.error(""String_Node_Str"" + changeId + ""String_Node_Str""+ cmd.getNewId().name()+ ""String_Node_Str""+ ""String_Node_Str"");
      reject(cmd,""String_Node_Str"");
    }
  }
}",0.9975579975579976
39074,"private void writeCherryPickCommit(final Merger m,final CodeReviewCommit n) throws IOException {
  final StringBuilder msgbuf=new StringBuilder();
  msgbuf.append(n.getFullMessage());
  if (msgbuf.length() == 0) {
    msgbuf.append(""String_Node_Str"");
  }
  if (msgbuf.charAt(msgbuf.length() - 1) != '\n') {
    msgbuf.append('\n');
  }
  if (!msgbuf.toString().matches(""String_Node_Str"")) {
    msgbuf.append('\n');
  }
  if (server.getCanonicalURL() != null) {
    msgbuf.append(""String_Node_Str"");
    msgbuf.append(server.getCanonicalURL());
    msgbuf.append(n.patchsetId.getParentKey().get());
    msgbuf.append('\n');
  }
  ChangeApproval submitAudit=null;
  try {
    final List<ChangeApproval> approvalList=schema.changeApprovals().byChange(n.patchsetId.getParentKey()).toList();
    Collections.sort(approvalList,new Comparator<ChangeApproval>(){
      public int compare(      final ChangeApproval a,      final ChangeApproval b){
        return a.getGranted().compareTo(b.getGranted());
      }
    }
);
    for (    final ChangeApproval a : approvalList) {
      if (a.getValue() <= 0) {
        continue;
      }
      if (ApprovalCategory.SUBMIT.equals(a.getCategoryId())) {
        if (submitAudit == null || a.getGranted().compareTo(submitAudit.getGranted()) > 0) {
          submitAudit=a;
        }
        continue;
      }
      final Account acc=Common.getAccountCache().get(a.getAccountId());
      if (acc == null) {
        continue;
      }
      final StringBuilder identbuf=new StringBuilder();
      if (acc.getFullName() != null && acc.getFullName().length() > 0) {
        identbuf.append(' ');
        identbuf.append(acc.getFullName());
      }
      if (acc.getPreferredEmail() != null && acc.getPreferredEmail().length() > 0) {
        identbuf.append(' ');
        identbuf.append('<');
        identbuf.append(acc.getPreferredEmail());
        identbuf.append('>');
      }
      if (identbuf.length() == 0) {
        continue;
      }
      final String tag;
      if (CRVW.equals(a.getCategoryId())) {
        tag=""String_Node_Str"";
      }
 else       if (VRIF.equals(a.getCategoryId())) {
        tag=""String_Node_Str"";
      }
 else {
        final ApprovalType at=Common.getGerritConfig().getApprovalType(a.getCategoryId());
        if (at == null) {
          continue;
        }
        tag=at.getCategory().getName().replace(' ','-');
      }
      msgbuf.append(tag);
      msgbuf.append(':');
      msgbuf.append(identbuf);
      msgbuf.append('\n');
    }
  }
 catch (  OrmException e) {
    log.error(""String_Node_Str"" + n.patchsetId,e);
  }
  Account submitterAcct=null;
  if (submitAudit != null) {
    submitterAcct=Common.getAccountCache().get(submitAudit.getAccountId());
  }
  final Commit mergeCommit=new Commit(db);
  mergeCommit.setTreeId(m.getResultTreeId());
  mergeCommit.setParentIds(new ObjectId[]{mergeTip});
  mergeCommit.setAuthor(n.getAuthorIdent());
  if (submitterAcct != null) {
    String name=submitterAcct.getFullName();
    if (name == null || name.length() == 0) {
      name=""String_Node_Str"";
    }
    String email=submitterAcct.getPreferredEmail();
    if (email == null || email.length() == 0) {
      email=""String_Node_Str"" + submitterAcct.getId().get() + ""String_Node_Str"";
    }
    mergeCommit.setCommitter(new PersonIdent(name,email,submitAudit.getGranted(),myIdent.getTimeZone()));
  }
 else {
    mergeCommit.setCommitter(myIdent);
  }
  mergeCommit.setMessage(msgbuf.toString());
  final ObjectId id=m.getObjectWriter().writeCommit(mergeCommit);
  mergeTip=(CodeReviewCommit)rw.parseCommit(id);
  n.statusCode=CommitMergeStatus.CLEAN_PICK;
  status.put(n.patchsetId.getParentKey(),n.statusCode);
  newCommits.put(n.patchsetId.getParentKey(),mergeTip);
}","private void writeCherryPickCommit(final Merger m,final CodeReviewCommit n) throws IOException {
  final StringBuilder msgbuf=new StringBuilder();
  msgbuf.append(n.getFullMessage());
  if (msgbuf.length() == 0) {
    msgbuf.append(""String_Node_Str"");
  }
  if (msgbuf.charAt(msgbuf.length() - 1) != '\n') {
    msgbuf.append('\n');
  }
  if (!endsWithKey(msgbuf.toString())) {
    msgbuf.append('\n');
  }
  if (server.getCanonicalURL() != null) {
    msgbuf.append(""String_Node_Str"");
    msgbuf.append(server.getCanonicalURL());
    msgbuf.append(n.patchsetId.getParentKey().get());
    msgbuf.append('\n');
  }
  ChangeApproval submitAudit=null;
  try {
    final List<ChangeApproval> approvalList=schema.changeApprovals().byChange(n.patchsetId.getParentKey()).toList();
    Collections.sort(approvalList,new Comparator<ChangeApproval>(){
      public int compare(      final ChangeApproval a,      final ChangeApproval b){
        return a.getGranted().compareTo(b.getGranted());
      }
    }
);
    for (    final ChangeApproval a : approvalList) {
      if (a.getValue() <= 0) {
        continue;
      }
      if (ApprovalCategory.SUBMIT.equals(a.getCategoryId())) {
        if (submitAudit == null || a.getGranted().compareTo(submitAudit.getGranted()) > 0) {
          submitAudit=a;
        }
        continue;
      }
      final Account acc=Common.getAccountCache().get(a.getAccountId());
      if (acc == null) {
        continue;
      }
      final StringBuilder identbuf=new StringBuilder();
      if (acc.getFullName() != null && acc.getFullName().length() > 0) {
        identbuf.append(' ');
        identbuf.append(acc.getFullName());
      }
      if (acc.getPreferredEmail() != null && acc.getPreferredEmail().length() > 0) {
        identbuf.append(' ');
        identbuf.append('<');
        identbuf.append(acc.getPreferredEmail());
        identbuf.append('>');
      }
      if (identbuf.length() == 0) {
        continue;
      }
      final String tag;
      if (CRVW.equals(a.getCategoryId())) {
        tag=""String_Node_Str"";
      }
 else       if (VRIF.equals(a.getCategoryId())) {
        tag=""String_Node_Str"";
      }
 else {
        final ApprovalType at=Common.getGerritConfig().getApprovalType(a.getCategoryId());
        if (at == null) {
          continue;
        }
        tag=at.getCategory().getName().replace(' ','-');
      }
      msgbuf.append(tag);
      msgbuf.append(':');
      msgbuf.append(identbuf);
      msgbuf.append('\n');
    }
  }
 catch (  OrmException e) {
    log.error(""String_Node_Str"" + n.patchsetId,e);
  }
  Account submitterAcct=null;
  if (submitAudit != null) {
    submitterAcct=Common.getAccountCache().get(submitAudit.getAccountId());
  }
  final Commit mergeCommit=new Commit(db);
  mergeCommit.setTreeId(m.getResultTreeId());
  mergeCommit.setParentIds(new ObjectId[]{mergeTip});
  mergeCommit.setAuthor(n.getAuthorIdent());
  if (submitterAcct != null) {
    String name=submitterAcct.getFullName();
    if (name == null || name.length() == 0) {
      name=""String_Node_Str"";
    }
    String email=submitterAcct.getPreferredEmail();
    if (email == null || email.length() == 0) {
      email=""String_Node_Str"" + submitterAcct.getId().get() + ""String_Node_Str"";
    }
    mergeCommit.setCommitter(new PersonIdent(name,email,submitAudit.getGranted(),myIdent.getTimeZone()));
  }
 else {
    mergeCommit.setCommitter(myIdent);
  }
  mergeCommit.setMessage(msgbuf.toString());
  final ObjectId id=m.getObjectWriter().writeCommit(mergeCommit);
  mergeTip=(CodeReviewCommit)rw.parseCommit(id);
  n.statusCode=CommitMergeStatus.CLEAN_PICK;
  status.put(n.patchsetId.getParentKey(),n.statusCode);
  newCommits.put(n.patchsetId.getParentKey(),mergeTip);
}",0.994914346895075
39075,"/** 
 * Called by   {@link OpenIdLoginServlet} doGet, doPost 
 */
void doAuth(final HttpServletRequest req,final HttpServletResponse rsp) throws Exception {
  if (false) {
    System.err.println(req.getMethod() + ""String_Node_Str"");
    for (    final String n : new TreeMap<String,Object>(req.getParameterMap()).keySet()) {
      for (      final String v : req.getParameterValues(n)) {
        System.err.println(""String_Node_Str"" + n + ""String_Node_Str""+ v);
      }
    }
    System.err.println();
  }
  final String openidMode=req.getParameter(OPENID_MODE);
  if (OMODE_CANCEL.equals(openidMode)) {
    cancel(req,rsp);
  }
 else {
    final SignInDialog.Mode mode=signInMode(req);
    final String openidIdentifier=req.getParameter(""String_Node_Str"");
    final String returnToken=req.getParameter(P_TOKEN);
    final boolean remember=""String_Node_Str"".equals(req.getParameter(P_REMEMBER));
    final State state;
    state=init(req,openidIdentifier,mode,remember,returnToken);
    if (state == null) {
      cancel(req,rsp);
      return;
    }
    final String returnTo=req.getParameter(""String_Node_Str"");
    if (returnTo != null && returnTo.contains(""String_Node_Str"")) {
      state.retTo.put(""String_Node_Str"",req.getParameter(""String_Node_Str""));
      state.retTo.put(""String_Node_Str"",req.getParameter(""String_Node_Str""));
    }
    final VerificationResult result=manager.verify(state.retTo.toString(),new ParameterList(req.getParameterMap()),state.discovered);
    final Identifier user=result.getVerifiedId();
    if (user == null) {
      cancel(req,rsp);
    }
 else {
      final Message authRsp=result.getAuthResponse();
      SRegResponse sregRsp=null;
      FetchResponse fetchRsp=null;
      if (authRsp.hasExtension(SRegMessage.OPENID_NS_SREG)) {
        final MessageExtension ext=authRsp.getExtension(SRegMessage.OPENID_NS_SREG);
        if (ext instanceof SRegResponse) {
          sregRsp=(SRegResponse)ext;
        }
      }
      if (authRsp.hasExtension(AxMessage.OPENID_NS_AX)) {
        final MessageExtension ext=authRsp.getExtension(AxMessage.OPENID_NS_AX);
        if (ext instanceof FetchResponse) {
          fetchRsp=(FetchResponse)ext;
        }
      }
      String fullname=null;
      String email=null;
      if (sregRsp != null) {
        fullname=sregRsp.getAttributeValue(""String_Node_Str"");
        email=sregRsp.getAttributeValue(""String_Node_Str"");
      }
 else       if (fetchRsp != null) {
        final String firstName=fetchRsp.getAttributeValue(""String_Node_Str"");
        final String lastName=fetchRsp.getAttributeValue(""String_Node_Str"");
        final StringBuilder n=new StringBuilder();
        if (firstName != null && firstName.length() > 0) {
          n.append(firstName);
        }
        if (lastName != null && lastName.length() > 0) {
          if (n.length() > 0) {
            n.append(' ');
          }
          n.append(lastName);
        }
        fullname=n.length() > 0 ? n.toString() : null;
        email=fetchRsp.getAttributeValue(""String_Node_Str"");
      }
      initializeAccount(req,rsp,user,fullname,email);
    }
  }
}","/** 
 * Called by   {@link OpenIdLoginServlet} doGet, doPost 
 */
void doAuth(final HttpServletRequest req,final HttpServletResponse rsp) throws Exception {
  if (false) {
    debugRequest(req);
  }
  final String openidMode=req.getParameter(OPENID_MODE);
  if (OMODE_CANCEL.equals(openidMode)) {
    cancel(req,rsp);
  }
 else {
    final SignInDialog.Mode mode=signInMode(req);
    final String openidIdentifier=req.getParameter(""String_Node_Str"");
    final String returnToken=req.getParameter(P_TOKEN);
    final boolean remember=""String_Node_Str"".equals(req.getParameter(P_REMEMBER));
    final State state;
    state=init(req,openidIdentifier,mode,remember,returnToken);
    if (state == null) {
      cancel(req,rsp);
      return;
    }
    final String returnTo=req.getParameter(""String_Node_Str"");
    if (returnTo != null && returnTo.contains(""String_Node_Str"")) {
      state.retTo.put(""String_Node_Str"",req.getParameter(""String_Node_Str""));
      state.retTo.put(""String_Node_Str"",req.getParameter(""String_Node_Str""));
    }
    final VerificationResult result=manager.verify(state.retTo.toString(),new ParameterList(req.getParameterMap()),state.discovered);
    final Identifier user=result.getVerifiedId();
    if (user == null) {
      cancel(req,rsp);
    }
 else {
      final Message authRsp=result.getAuthResponse();
      SRegResponse sregRsp=null;
      FetchResponse fetchRsp=null;
      if (authRsp.hasExtension(SRegMessage.OPENID_NS_SREG)) {
        final MessageExtension ext=authRsp.getExtension(SRegMessage.OPENID_NS_SREG);
        if (ext instanceof SRegResponse) {
          sregRsp=(SRegResponse)ext;
        }
      }
      if (authRsp.hasExtension(AxMessage.OPENID_NS_AX)) {
        final MessageExtension ext=authRsp.getExtension(AxMessage.OPENID_NS_AX);
        if (ext instanceof FetchResponse) {
          fetchRsp=(FetchResponse)ext;
        }
      }
      String fullname=null;
      String email=null;
      if (sregRsp != null) {
        fullname=sregRsp.getAttributeValue(""String_Node_Str"");
        email=sregRsp.getAttributeValue(""String_Node_Str"");
      }
 else       if (fetchRsp != null) {
        final String firstName=fetchRsp.getAttributeValue(""String_Node_Str"");
        final String lastName=fetchRsp.getAttributeValue(""String_Node_Str"");
        final StringBuilder n=new StringBuilder();
        if (firstName != null && firstName.length() > 0) {
          n.append(firstName);
        }
        if (lastName != null && lastName.length() > 0) {
          if (n.length() > 0) {
            n.append(' ');
          }
          n.append(lastName);
        }
        fullname=n.length() > 0 ? n.toString() : null;
        email=fetchRsp.getAttributeValue(""String_Node_Str"");
      }
      initializeAccount(req,rsp,user,fullname,email);
    }
  }
}",0.9446794112671292
39076,"private void showInitialScreen(){
  final RootPanel sg=RootPanel.get(""String_Node_Str"");
  sg.getElement().getParentElement().removeChild(sg.getElement());
  History.addHistoryListener(new Link());
  if (""String_Node_Str"".equals(History.getToken())) {
    if (isSignedIn()) {
      History.newItem(Link.MINE);
    }
 else {
      History.newItem(Link.ALL_OPEN);
    }
  }
 else {
    History.fireCurrentHistoryState();
  }
}","private void showInitialScreen(){
  final RootPanel sg=RootPanel.get(""String_Node_Str"");
  sg.getElement().getParentElement().removeChild(sg.getElement());
  RootPanel.detachNow(sg);
  History.addHistoryListener(new Link());
  if (""String_Node_Str"".equals(History.getToken())) {
    if (isSignedIn()) {
      History.newItem(Link.MINE);
    }
 else {
      History.newItem(Link.ALL_OPEN);
    }
  }
 else {
    History.fireCurrentHistoryState();
  }
}",0.9691428571428572
39077,"/** 
 * Hook from   {@link SignInDialog} to let us know to refresh the UI. 
 */
static void postSignIn(){
  refreshMenuBar();
  for (  final SignedInListener l : signedInListeners) {
    l.onSignIn();
  }
}","/** 
 * Hook from   {@link SignInDialog} to let us know to refresh the UI. 
 */
static void postSignIn(){
  refreshMenuBar();
  DeferredCommand.addCommand(new Command(){
    public void execute(){
      for (      final SignedInListener l : signedInListeners) {
        l.onSignIn();
      }
    }
  }
);
}",0.7734375
39078,"@Override public List<MovieInfo> parseMovies(String areaId){
  final MovieInfo movieInfo=new MovieInfo();
  final MovieTrailer movieTrailer=new MovieTrailer();
  final List<MovieInfo> movies=new ArrayList<MovieInfo>();
  RootElement root=new RootElement(EVENTS);
  Element event=root.getChild(EVENT);
  Element images=event.getChild(IMAGES);
  Element videos=event.getChild(VIDEOS);
  Element eventVideo=videos.getChild(EVENT_VIDEO);
  event.setEndElementListener(new EndElementListener(){
    @Override public void end(){
      movies.add(movieInfo.copy());
    }
  }
);
  eventVideo.setEndElementListener(new EndElementListener(){
    @Override public void end(){
      movieInfo.addMovieTrailer(movieTrailer.copy());
    }
  }
);
  event.getChild(ID).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventId(body);
    }
  }
);
  event.getChild(TITLE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setTitle(body);
    }
  }
);
  event.getChild(ORIGINAL_TITLE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setOriginalTitle(body);
    }
  }
);
  event.getChild(PRODUCTION_YEAR).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setProductionYear(body);
    }
  }
);
  event.getChild(LENGTH_IN_MINUTES).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setLenghtInMinutes(body);
    }
  }
);
  event.getChild(DATE_LOCAL_RELEASE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setDtLocalRelease(body);
    }
  }
);
  event.getChild(RATING_LABEL).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setRatingLabel(body);
    }
  }
);
  event.getChild(LOGAL_DISTRIBUTOR_NAME).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setLocalDistributorName(body);
    }
  }
);
  event.getChild(GLOBAL_DISTRIBUTOR_NAME).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setGlobalDistributorName(body);
    }
  }
);
  event.getChild(GENRES).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setGenres(body);
    }
  }
);
  event.getChild(SYNOPSIS).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setSynopsis(body);
    }
  }
);
  images.getChild(EVENT_SMALL_IMAGE_PORTRAIT).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventSmallImagePortrait(body);
    }
  }
);
  images.getChild(EVENT_LARGE_IMAGE_PORTRAIT).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventLargeImagePortrait(body);
    }
  }
);
  images.getChild(EVENT_SMALL_IMAGE_LANDSCAPE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventSmallImageLandscape(body);
    }
  }
);
  images.getChild(EVENT_LARGE_IMAGE_LANDSCAPE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventLargeImageLandscape(body);
    }
  }
);
  eventVideo.getChild(TITLE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setTitle(body);
    }
  }
);
  eventVideo.getChild(LOCATION).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setLocation(body);
    }
  }
);
  eventVideo.getChild(THUMBNAIL_LOCATION).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setThumbnailLocation(body);
    }
  }
);
  eventVideo.getChild(MEDIA_RESOURCE_FORMAT).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setMediaResourceFormat(body);
    }
  }
);
  eventVideo.getChild(MEDIA_RESOURCE_SUB_TYPE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setMediaResourceSubType(body);
    }
  }
);
  try {
    StringBuffer urlStringBuffer=new StringBuffer(BASE_FINN_FINO_URL);
    urlStringBuffer.append(EVENTS);
    if (areaId != null) {
      urlStringBuffer.append(""String_Node_Str"");
      urlStringBuffer.append(PARAM_AREA);
      urlStringBuffer.append(""String_Node_Str"");
      urlStringBuffer.append(areaId);
    }
    URL url=new URL(urlStringBuffer.toString());
    Xml.parse(this.getInputStream(url),Xml.Encoding.UTF_8,root.getContentHandler());
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return movies;
}","@Override public List<MovieInfo> parseMovies(String areaId){
  final MovieInfo movieInfo=new MovieInfo();
  final MovieTrailer movieTrailer=new MovieTrailer();
  final List<MovieInfo> movies=new ArrayList<MovieInfo>();
  RootElement root=new RootElement(EVENTS);
  Element event=root.getChild(EVENT);
  Element images=event.getChild(IMAGES);
  Element videos=event.getChild(VIDEOS);
  Element eventVideo=videos.getChild(EVENT_VIDEO);
  event.setEndElementListener(new EndElementListener(){
    @Override public void end(){
      movies.add(movieInfo.copy());
    }
  }
);
  eventVideo.setEndElementListener(new EndElementListener(){
    @Override public void end(){
      movieInfo.addMovieTrailer(movieTrailer.copy());
    }
  }
);
  event.getChild(ID).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventId(body);
    }
  }
);
  event.getChild(TITLE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setTitle(body);
    }
  }
);
  event.getChild(ORIGINAL_TITLE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setOriginalTitle(body);
    }
  }
);
  event.getChild(PRODUCTION_YEAR).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setProductionYear(body);
    }
  }
);
  event.getChild(LENGTH_IN_MINUTES).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setLenghtInMinutes(body);
    }
  }
);
  event.getChild(DATE_LOCAL_RELEASE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setDtLocalRelease(body);
    }
  }
);
  event.getChild(RATING_LABEL).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setRatingLabel(body);
    }
  }
);
  event.getChild(LOGAL_DISTRIBUTOR_NAME).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setLocalDistributorName(body);
    }
  }
);
  event.getChild(GLOBAL_DISTRIBUTOR_NAME).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setGlobalDistributorName(body);
    }
  }
);
  event.getChild(GENRES).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setGenres(body);
    }
  }
);
  event.getChild(SYNOPSIS).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setSynopsis(body);
    }
  }
);
  images.getChild(EVENT_SMALL_IMAGE_PORTRAIT).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventSmallImagePortrait(body);
    }
  }
);
  images.getChild(EVENT_LARGE_IMAGE_PORTRAIT).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventLargeImagePortrait(body);
    }
  }
);
  images.getChild(EVENT_SMALL_IMAGE_LANDSCAPE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventSmallImageLandscape(body);
    }
  }
);
  images.getChild(EVENT_LARGE_IMAGE_LANDSCAPE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieInfo.setEventLargeImageLandscape(body);
    }
  }
);
  eventVideo.getChild(TITLE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setTitle(body);
    }
  }
);
  eventVideo.getChild(LOCATION).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setLocation(body);
    }
  }
);
  eventVideo.getChild(THUMBNAIL_LOCATION).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setThumbnailLocation(body);
    }
  }
);
  eventVideo.getChild(MEDIA_RESOURCE_FORMAT).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setMediaResourceFormat(body);
    }
  }
);
  eventVideo.getChild(MEDIA_RESOURCE_SUB_TYPE).setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      movieTrailer.setMediaResourceSubType(body);
    }
  }
);
  try {
    StringBuffer urlStringBuffer=new StringBuffer(BASE_FINN_FINO_URL);
    urlStringBuffer.append(EVENTS);
    if (areaId != null) {
      urlStringBuffer.append(""String_Node_Str"");
      urlStringBuffer.append(PARAM_AREA);
      urlStringBuffer.append(""String_Node_Str"");
      urlStringBuffer.append(areaId);
    }
    URL url=new URL(urlStringBuffer.toString());
    Xml.parse(this.getInputStream(url),Xml.Encoding.UTF_8,root.getContentHandler());
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return movies;
}",0.9989424093837131
39079,"/** 
 * Searches for closest matches.
 * @param compare Kanji to compare
 * @param algo Match algorithm to use
 * @param progress Progress reporter (null if not needed)
 * @return Top matches above search threshold
 * @throws IllegalArgumentException If match algorithm not set
 */
public synchronized KanjiMatch[] getTopMatches(KanjiInfo compare,KanjiInfo.MatchAlgorithm algo,Progress progress) throws IllegalArgumentException {
  TreeSet<KanjiMatch> matches=new TreeSet<KanjiMatch>();
switch (algo) {
case STRICT:
{
      List<KanjiInfo> list=kanji.get(compare.getStrokeCount());
      if (list != null) {
        int max=list.size();
        if (progress != null) {
          progress.progress(0,max);
        }
        int i=0;
        for (        KanjiInfo other : list) {
          float score=compare.getMatchScore(other,algo);
          if (score > 0) {
            KanjiMatch match=new KanjiMatch(other,score);
            matches.add(match);
          }
          if (progress != null) {
            progress.progress(++i,max);
          }
        }
      }
    }
  break;
case FUZZY:
case FUZZY_1OUT:
case FUZZY_2OUT:
{
  List<KanjiInfo> list=new LinkedList<KanjiInfo>();
  if (compare.getStrokeCount() > 0) {
    int range=(algo == MatchAlgorithm.FUZZY_2OUT) ? 2 : (algo == MatchAlgorithm.FUZZY_1OUT) ? 1 : 0;
    int count=compare.getStrokeCount() - range;
    for (int i=0; i < 2; i++) {
      if (count > 0) {
        List<KanjiInfo> countList=kanji.get(count);
        if (countList != null) {
          list.addAll(countList);
        }
      }
      count+=2 * range;
      if (range == 0) {
        break;
      }
    }
  }
  int max=list.size();
  if (progress != null) {
    progress.progress(0,max);
  }
  int i=0;
  for (  KanjiInfo other : list) {
    float score=compare.getMatchScore(other,algo);
    KanjiMatch match=new KanjiMatch(other,score);
    matches.add(match);
    if (progress != null) {
      progress.progress(++i,max);
    }
  }
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
LinkedList<KanjiMatch> results=new LinkedList<KanjiMatch>();
float maxScore=-1;
for (KanjiMatch match : matches) {
if (maxScore == -1) {
maxScore=match.getScore();
}
 else {
if (match.getScore() < maxScore * 0.75f) {
break;
}
}
results.add(match);
}
return results.toArray(new KanjiMatch[results.size()]);
}","/** 
 * Searches for closest matches.
 * @param compare Kanji to compare
 * @param algo Match algorithm to use
 * @param progress Progress reporter (null if not needed)
 * @return Top matches above search threshold
 * @throws IllegalArgumentException If match algorithm not set
 */
public KanjiMatch[] getTopMatches(KanjiInfo compare,KanjiInfo.MatchAlgorithm algo,Progress progress) throws IllegalArgumentException {
  TreeSet<KanjiMatch> matches=new TreeSet<KanjiMatch>();
switch (algo) {
case STRICT:
{
      List<KanjiInfo> list;
synchronized (this) {
        list=new LinkedList<KanjiInfo>(kanji.get(compare.getStrokeCount()));
      }
      if (list != null) {
        int max=list.size();
        if (progress != null) {
          progress.progress(0,max);
        }
        int i=0;
        for (        KanjiInfo other : list) {
          float score=compare.getMatchScore(other,algo);
          if (score > 0) {
            KanjiMatch match=new KanjiMatch(other,score);
            matches.add(match);
          }
          if (progress != null) {
            progress.progress(++i,max);
          }
        }
      }
    }
  break;
case FUZZY:
case FUZZY_1OUT:
case FUZZY_2OUT:
{
  List<KanjiInfo> list=new LinkedList<KanjiInfo>();
  if (compare.getStrokeCount() > 0) {
synchronized (this) {
      int range=(algo == MatchAlgorithm.FUZZY_2OUT) ? 2 : (algo == MatchAlgorithm.FUZZY_1OUT) ? 1 : 0;
      int count=compare.getStrokeCount() - range;
      for (int i=0; i < 2; i++) {
        if (count > 0) {
          List<KanjiInfo> countList=kanji.get(count);
          if (countList != null) {
            list.addAll(countList);
          }
        }
        count+=2 * range;
        if (range == 0) {
          break;
        }
      }
    }
  }
  int max=list.size();
  if (progress != null) {
    progress.progress(0,max);
  }
  int i=0;
  for (  KanjiInfo other : list) {
    float score=compare.getMatchScore(other,algo);
    KanjiMatch match=new KanjiMatch(other,score);
    matches.add(match);
    if (progress != null) {
      progress.progress(++i,max);
    }
  }
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
LinkedList<KanjiMatch> results=new LinkedList<KanjiMatch>();
float maxScore=-1;
for (KanjiMatch match : matches) {
if (maxScore == -1) {
maxScore=match.getScore();
}
 else {
if (match.getScore() < maxScore * 0.75f) {
break;
}
}
results.add(match);
}
return results.toArray(new KanjiMatch[results.size()]);
}",0.9701244813278008
39080,"/** 
 * Processes a single kanji drawing with a single algorithm.
 * @param drawingInfo Drawing
 * @param algo Algorithm to use
 */
private void process(KanjiInfo drawingInfo,MatchAlgorithm algo){
  AlgoResults algoResults=results.get(algo);
  if (algoResults == null) {
    algoResults=new AlgoResults(algo);
    results.put(algo,algoResults);
  }
  KanjiMatch[] matches=list.getTopMatches(drawingInfo,algo,null);
  for (int i=0; i < matches.length; i++) {
    if (matches[i].getKanji().getKanji().equals(drawingInfo.getKanji())) {
      algoResults.addRanking(i + 1);
      return;
    }
  }
  algoResults.addFailure(drawingInfo);
}","/** 
 * Processes a single kanji drawing with a single algorithm.
 * @param drawingInfo Drawing
 * @param algo Algorithm to use
 */
private void process(KanjiInfo drawingInfo,MatchAlgorithm algo){
  KanjiMatch[] matches=list.getTopMatches(drawingInfo,algo,null);
synchronized (AnalyseRecognition.this) {
    AlgoResults algoResults=results.get(algo);
    if (algoResults == null) {
      algoResults=new AlgoResults(algo);
      results.put(algo,algoResults);
    }
    for (int i=0; i < matches.length; i++) {
      if (matches[i].getKanji().getKanji().equals(drawingInfo.getKanji())) {
        algoResults.addRanking(i + 1);
        return;
      }
    }
    algoResults.addFailure(drawingInfo);
  }
}",0.8406881077038145
39081,"/** 
 * Starts analysis process.
 * @throws Exception
 */
private void start() throws Exception {
  count=0;
  list=new KanjiList(new FileInputStream(""String_Node_Str""));
  results=new TreeMap<MatchAlgorithm,AlgoResults>();
}","/** 
 * Starts analysis process.
 * @throws Exception
 */
private synchronized void start() throws Exception {
  processed=0;
  added=0;
  list=new KanjiList(new FileInputStream(""String_Node_Str""));
  results=new TreeMap<MatchAlgorithm,AlgoResults>();
  threadPool=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
}",0.7787610619469026
39082,"/** 
 * @param password Password
 * @param where Optional where clause (null if none), not including ""WHERE""
 * @throws Exception Any error
 */
private void run(String password,String where) throws Exception {
  Class.forName(""String_Node_Str"");
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",JDBC_USER);
  props.setProperty(""String_Node_Str"",password);
  Connection c=null;
  Statement s=null;
  ResultSet rs=null;
  try {
    c=DriverManager.getConnection(JDBC_URL,props);
    String query=BASIC_QUERY;
    if (where != null) {
      query+=""String_Node_Str"" + where;
    }
    query+=ORDER_BY;
    s=c.createStatement();
    rs=s.executeQuery(query);
    start();
    while (rs.next()) {
      process(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
    }
    finish();
  }
  finally {
    if (rs != null) {
      rs.close();
    }
    if (s != null) {
      s.close();
    }
    if (c != null) {
      c.close();
    }
  }
}","@Override public void run(){
  KanjiInfo drawingInfo=new KanjiInfo(kanji,drawing);
  int actualStrokes=list.find(kanji).getStrokeCount();
  MatchAlgorithm[] algorithms;
  if (actualStrokes == drawingInfo.getStrokeCount()) {
    algorithms=new MatchAlgorithm[]{MatchAlgorithm.STRICT,MatchAlgorithm.FUZZY};
  }
 else   if (Math.abs(actualStrokes - drawingInfo.getStrokeCount()) == 1) {
    algorithms=new MatchAlgorithm[]{MatchAlgorithm.FUZZY_1OUT};
  }
 else   if (Math.abs(actualStrokes - drawingInfo.getStrokeCount()) == 2) {
    algorithms=new MatchAlgorithm[]{MatchAlgorithm.FUZZY_1OUT};
  }
 else {
    algorithms=new MatchAlgorithm[0];
  }
  for (  MatchAlgorithm algo : algorithms) {
    process(drawingInfo,algo);
  }
synchronized (AnalyseRecognition.this) {
    processed++;
    System.err.print(""String_Node_Str"" + processed + ""String_Node_Str"");
    AnalyseRecognition.this.notifyAll();
  }
}",0.0522388059701492
39083,"/** 
 * Called when the analysis run finishes. Displays all results.
 */
private void finish(){
  System.err.println();
  for (  Map.Entry<MatchAlgorithm,AlgoResults> entry : results.entrySet()) {
    String algoName=entry.getKey().toString();
    System.out.println();
    System.out.println(algoName);
    for (int i=0; i < algoName.length(); i++) {
      System.out.print(""String_Node_Str"");
    }
    System.out.println();
    System.out.println();
    entry.getValue().display();
  }
}","/** 
 * Called when the analysis run finishes. Displays all results.
 * @throws Exception Any error
 */
private void finish() throws Exception {
  threadPool.shutdown();
  threadPool.awaitTermination(1,TimeUnit.DAYS);
  System.err.println();
  for (  Map.Entry<MatchAlgorithm,AlgoResults> entry : results.entrySet()) {
    String algoName=entry.getKey().toString();
    System.out.println();
    System.out.println(algoName);
    for (int i=0; i < algoName.length(); i++) {
      System.out.print(""String_Node_Str"");
    }
    System.out.println();
    System.out.println();
    entry.getValue().display();
  }
}",0.8892921960072595
39084,"/** 
 * Shuts down the TTS engine. 
 */
public void shutdown(){
  if (isShutdown.compareAndSet(true,false)) {
    tts.shutdown();
  }
}","/** 
 * Shuts down the TTS engine. 
 */
public void shutdown(){
  if (isShutdown.compareAndSet(false,true)) {
    tts.shutdown();
  }
}",0.9629629629629628
39085,"public void openFile(String filename){
  currentFileName=ctx.getHomeDirectory().getAbsolutePath() + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  String text=new String();
  String str;
  try {
    BufferedReader in=new BufferedReader(new FileReader(currentFileName));
    try {
      while ((str=in.readLine()) != null) {
        text=text + str + ""String_Node_Str"";
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      in.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    KOptionPane.showMessageDialog(null,i18n.getString(""String_Node_Str""),new MessageDialogListener(){
      public void onClose(){
      }
    }
);
    e.printStackTrace();
    return;
  }
  if (text.startsWith(aes_start)) {
    current_encrypted=true;
    read_only=true;
    tmp_text=text;
    KOptionPane.showInputDialog(ctx.getRootContainer(),i18n.getString(""String_Node_Str""),""String_Node_Str"",new InputDialogListener(){
      public void onClose(      String arg0){
        if (arg0 == null) {
          current_password=null;
          current_encrypted=false;
          return;
        }
 else         current_password=arg0;
        if (tmp_text.length() < aes_start.length() + 2) {
          tmp_text=""String_Node_Str"";
          read_only=false;
        }
 else         if (tmp_text != null && current_encrypted)         try {
          tmp_text=tmp_text.substring(aes_start.length(),tmp_text.indexOf(""String_Node_Str"",aes_start.length()) + 2);
          try {
            String decrypted=new String(decrypt(1,current_password,fromBase64(tmp_text)));
            tmp_text=decrypted;
            read_only=false;
          }
 catch (          Exception e) {
            e.printStackTrace();
            tmp_text=i18n.getString(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        plainText.setText(tmp_text);
        plainText.repaint();
        textEdit.setText(tmp_text);
        textEdit.repaint();
        tmp_text=null;
      }
    }
);
  }
 else {
    current_encrypted=false;
    current_password=null;
    read_only=false;
  }
  this.newItem.setEnabled(false);
  this.newItem.setEnabled(false);
  ctx.getRootContainer().remove(this.homeMenu);
  ctx.getRootContainer().remove(this.northPanel);
  ctx.getRootContainer().remove(this.pageLabel);
  if (current_encrypted)   plainText.setText(text);
 else   plainText.setText(""String_Node_Str"");
  ctx.getRootContainer().add(plainText);
  plainText.requestFocus();
  ctx.setSubTitle(filename);
}","public void openFile(String filename){
  currentFileName=ctx.getHomeDirectory().getAbsolutePath() + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  String text=new String();
  String str;
  try {
    BufferedReader in=new BufferedReader(new FileReader(currentFileName));
    try {
      while ((str=in.readLine()) != null) {
        text=text + str + ""String_Node_Str"";
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      in.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    KOptionPane.showMessageDialog(null,i18n.getString(""String_Node_Str""),new MessageDialogListener(){
      public void onClose(){
      }
    }
);
    e.printStackTrace();
    return;
  }
  if (text.startsWith(aes_start)) {
    current_encrypted=true;
    read_only=true;
    tmp_text=text;
    KOptionPane.showInputDialog(ctx.getRootContainer(),i18n.getString(""String_Node_Str""),""String_Node_Str"",new InputDialogListener(){
      public void onClose(      String arg0){
        if (arg0 == null) {
          current_password=null;
          current_encrypted=false;
          return;
        }
 else         current_password=arg0;
        if (tmp_text.length() < aes_start.length() + 2) {
          tmp_text=""String_Node_Str"";
          read_only=false;
        }
 else         if (tmp_text != null && current_encrypted)         try {
          tmp_text=tmp_text.substring(aes_start.length(),tmp_text.indexOf(""String_Node_Str"",aes_start.length()) + 2);
          try {
            String decrypted=new String(decrypt(1,current_password,fromBase64(tmp_text)));
            tmp_text=decrypted;
            read_only=false;
          }
 catch (          Exception e) {
            e.printStackTrace();
            tmp_text=i18n.getString(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        plainText.setText(tmp_text);
        plainText.repaint();
        textEdit.setText(tmp_text);
        textEdit.repaint();
        tmp_text=null;
      }
    }
);
  }
 else {
    current_encrypted=false;
    current_password=null;
    read_only=false;
  }
  this.newItem.setEnabled(false);
  this.newItem.setEnabled(false);
  ctx.getRootContainer().remove(this.homeMenu);
  ctx.getRootContainer().remove(this.northPanel);
  ctx.getRootContainer().remove(this.pageLabel);
  if (!current_encrypted)   plainText.setText(text);
 else   plainText.setText(""String_Node_Str"");
  ctx.getRootContainer().add(plainText);
  plainText.requestFocus();
  ctx.setSubTitle(filename);
}",0.9998086124401914
39086,"public void start(){
  new Controller(ctx.getHomeDirectory().getAbsolutePath());
  this.southImage=null;
{
    File f=new File(ctx.getHomeDirectory() + ""String_Node_Str"" + ""String_Node_Str"");
    if (f.exists()) {
      Image img=Toolkit.getDefaultToolkit().createImage(ctx.getHomeDirectory().getAbsolutePath() + ""String_Node_Str"");
      this.southImage=new KImage(img,KImage.ALIGN_CENTER,KImage.ALIGN_BOTTOM);
    }
 else     this.southImage=null;
  }
  try {
    ctx.getProgressIndicator().setIndeterminate(true);
    ctx.getProgressIndicator().setString(i18n.getString(""String_Node_Str""));
    KTextOptionPane pane=new KTextOptionPane();
    langsList=new KTextOptionListMenu(""String_Node_Str"");
    ListIterator langIterator=avaliableLangs.listIterator(avaliableLangs.size());
    while (langIterator.hasPrevious()) {
      String s=(String)langIterator.previous();
      KTextOptionMenuItem item=new KTextOptionMenuItem(s);
      langsList.add(item);
      if (s.equals(currentlang))       langsList.setSelected(item);
    }
    langsList.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent arg0){
        if (arg0.getStateChange() == ItemEvent.SELECTED)         ctx.getSecureStorage().putChars(""String_Node_Str"",arg0.getItem().toString().toCharArray());
      }
    }
);
    fontSizeMenu=new KTextOptionFontMenu(fontSize);
    fontSizeMenu.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        if (e.getStateChange() == ItemEvent.SELECTED) {
          fontSize=fontSizeMenu.getSelectedFontSize();
          ctx.getSecureStorage().putChars(""String_Node_Str"",String.valueOf(fontSize).toCharArray());
          plainText.setFont(new Font(plainText.getFont().getName(),plainText.getFont().getStyle(),fontSize));
          plainText.repaint();
          textEdit.setFont(new Font(textEdit.getFont().getName(),textEdit.getFont().getStyle(),fontSize));
          textEdit.repaint();
        }
      }
    }
);
    pane.addFontSizeMenu(fontSizeMenu);
    pane.addListMenu(langsList);
    pane.addOrientationMenu(new KTextOptionOrientationMenu());
    ctx.setTextOptionPane(pane);
    File f=ctx.getHomeDirectory();
    File[] files=f.listFiles(new FilenameFilter(){
      public boolean accept(      File arg0,      String arg1){
        if (arg1.endsWith(""String_Node_Str"") && !arg1.endsWith(""String_Node_Str"") && !arg1.endsWith(""String_Node_Str""))         return true;
        return false;
      }
    }
);
    Arrays.sort(files,new Comparator(){
      public int compare(      Object arg0,      Object arg1){
        File o1=(File)arg0;
        File o2=(File)arg1;
        return o1.lastModified() > o2.lastModified() ? -1 : o1.lastModified() == o2.lastModified() ? 0 : 1;
      }
    }
);
    this.homeMenu=new KPages(PageProviders.createKBoxLayoutProvider(KBoxLayout.PAGE_AXIS));
    this.homeMenu.setPageKeyPolicy(KPagedContainer.PAGE_KEYS_GLOBAL);
    this.homeMenu.setFirstPageAlignment(BorderLayout.NORTH);
    for (int i=0; i < files.length; i++) {
      String noteName=files[i].getName().substring(0,files[i].getName().length() - 4);
      addHomeItem(noteName);
    }
    ctx.getRootContainer().add(this.homeMenu);
    if ((new File(ctx.getHomeDirectory(),""String_Node_Str"")).exists()) {
      KOptionPane.showMessageDialog(ctx.getRootContainer(),i18n.getString(""String_Node_Str""),new MessageDialogListener(){
        public void onClose(){
        }
      }
);
    }
    ctx.getProgressIndicator().setIndeterminate(false);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    ctx.setSubTitle(""String_Node_Str"");
    ctx.getRootContainer().removeAll();
    ctx.getRootContainer().add(new KLabelMultiline(t.getLocalizedMessage()));
    ctx.getRootContainer().repaint();
  }
}","public void start(){
  new Controller(ctx.getHomeDirectory().getAbsolutePath());
  File crash_file=new File(ctx.getHomeDirectory(),""String_Node_Str"");
  if (crash_file.exists()) {
    Date dtn=new Date();
    SimpleDateFormat formatter1=new SimpleDateFormat(""String_Node_Str"");
    String dt=formatter1.format(dtn);
    crash_file.renameTo(new File(ctx.getHomeDirectory(),""String_Node_Str"" + dt + ""String_Node_Str""));
  }
  this.southImage=null;
{
    File f=new File(ctx.getHomeDirectory() + ""String_Node_Str"" + ""String_Node_Str"");
    if (f.exists()) {
      Image img=Toolkit.getDefaultToolkit().createImage(ctx.getHomeDirectory().getAbsolutePath() + ""String_Node_Str"");
      this.southImage=new KImage(img,KImage.ALIGN_CENTER,KImage.ALIGN_BOTTOM);
    }
 else     this.southImage=null;
  }
  try {
    ctx.getProgressIndicator().setIndeterminate(true);
    ctx.getProgressIndicator().setString(i18n.getString(""String_Node_Str""));
    KTextOptionPane pane=new KTextOptionPane();
    langsList=new KTextOptionListMenu(""String_Node_Str"");
    ListIterator langIterator=avaliableLangs.listIterator(avaliableLangs.size());
    while (langIterator.hasPrevious()) {
      String s=(String)langIterator.previous();
      KTextOptionMenuItem item=new KTextOptionMenuItem(s);
      langsList.add(item);
      if (s.equals(currentlang))       langsList.setSelected(item);
    }
    langsList.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent arg0){
        if (arg0.getStateChange() == ItemEvent.SELECTED)         ctx.getSecureStorage().putChars(""String_Node_Str"",arg0.getItem().toString().toCharArray());
      }
    }
);
    fontSizeMenu=new KTextOptionFontMenu(fontSize);
    fontSizeMenu.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        if (e.getStateChange() == ItemEvent.SELECTED) {
          fontSize=fontSizeMenu.getSelectedFontSize();
          ctx.getSecureStorage().putChars(""String_Node_Str"",String.valueOf(fontSize).toCharArray());
          plainText.setFont(new Font(plainText.getFont().getName(),plainText.getFont().getStyle(),fontSize));
          plainText.repaint();
          textEdit.setFont(new Font(textEdit.getFont().getName(),textEdit.getFont().getStyle(),fontSize));
          textEdit.repaint();
        }
      }
    }
);
    pane.addFontSizeMenu(fontSizeMenu);
    pane.addListMenu(langsList);
    pane.addOrientationMenu(new KTextOptionOrientationMenu());
    ctx.setTextOptionPane(pane);
    File f=ctx.getHomeDirectory();
    File[] files=f.listFiles(new FilenameFilter(){
      public boolean accept(      File arg0,      String arg1){
        if (arg1.endsWith(""String_Node_Str"") && !arg1.endsWith(""String_Node_Str"") && !arg1.endsWith(""String_Node_Str""))         return true;
        return false;
      }
    }
);
    Arrays.sort(files,new Comparator(){
      public int compare(      Object arg0,      Object arg1){
        File o1=(File)arg0;
        File o2=(File)arg1;
        return o1.lastModified() > o2.lastModified() ? -1 : o1.lastModified() == o2.lastModified() ? 0 : 1;
      }
    }
);
    this.homeMenu=new KPages(PageProviders.createKBoxLayoutProvider(KBoxLayout.PAGE_AXIS));
    this.homeMenu.setPageKeyPolicy(KPagedContainer.PAGE_KEYS_GLOBAL);
    this.homeMenu.setFirstPageAlignment(BorderLayout.NORTH);
    for (int i=0; i < files.length; i++) {
      String noteName=files[i].getName().substring(0,files[i].getName().length() - 4);
      addHomeItem(noteName);
    }
    ctx.getRootContainer().add(this.homeMenu);
    ctx.getProgressIndicator().setIndeterminate(false);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    ctx.setSubTitle(""String_Node_Str"");
    ctx.getRootContainer().removeAll();
    ctx.getRootContainer().add(new KLabelMultiline(t.getLocalizedMessage()));
    ctx.getRootContainer().repaint();
  }
}",0.8907232704402516
39087,"public static ReportNumberFormat getInstance(final Locale locale){
  ReportNumberFormat format=FORMATTERS.get(locale);
  if (format == null) {
synchronized (FORMATTERS) {
      format=FORMATTERS.get(locale);
      if (format == null) {
        format=new ReportNumberFormat(locale);
        FORMATTERS.put(locale,format);
      }
    }
  }
  return format;
}","public static ReportNumberFormat getInstance(final Locale locale){
  ReportNumberFormat format=FORMATTERS.get(locale);
  if (format == null) {
synchronized (FORMATTERS) {
      format=FORMATTERS.computeIfAbsent(locale,f -> new ReportNumberFormat(locale));
    }
  }
  return format;
}",0.6386292834890965
39088,"public static String durationToString(final Integer duration){
  if (duration == null) {
    return ERROR_STRING_VALUE;
  }
  long longValueFromDuration=duration.longValue();
  long hours=longValueFromDuration / 3600;
  long minutes=longValueFromDuration % 3600 / 60;
  long seconds=longValueFromDuration % 3600 % 60;
  Boolean minus=false;
  if (hours < 0) {
    minus=true;
    hours=-hours;
  }
  if (minutes < 0) {
    minus=true;
    minutes=-minutes;
  }
  if (seconds < 0) {
    minus=true;
    seconds=-seconds;
  }
  return (minus ? ""String_Node_Str"" : ""String_Node_Str"") + (hours < 10 ? ""String_Node_Str"" : ""String_Node_Str"") + hours+ ""String_Node_Str""+ (minutes < 10 ? ""String_Node_Str"" : ""String_Node_Str"")+ minutes+ ""String_Node_Str""+ (seconds < 10 ? ""String_Node_Str"" : ""String_Node_Str"")+ seconds;
}","public static String durationToString(final Integer duration){
  if (duration == null) {
    return ERROR_STRING_VALUE;
  }
  boolean minus=false;
  long longValueFromDuration=duration.longValue();
  if (longValueFromDuration < 0) {
    minus=true;
    longValueFromDuration=-longValueFromDuration;
  }
  long hours=longValueFromDuration / 3600;
  long minutes=longValueFromDuration % 3600 / 60;
  long seconds=longValueFromDuration % 3600 % 60;
  return (minus ? ""String_Node_Str"" : ""String_Node_Str"") + ((hours < 10) ? ""String_Node_Str"" : ""String_Node_Str"") + hours+ ""String_Node_Str""+ ((minutes < 10) ? ""String_Node_Str"" : ""String_Node_Str"")+ minutes+ ""String_Node_Str""+ ((seconds < 10) ? ""String_Node_Str"" : ""String_Node_Str"")+ seconds;
}",0.4318766066838046
39089,"private List<String> getColumnNames(final GridComponent grid,final List<String> columns){
  List<String> columnNames=Lists.newLinkedList();
  columns.forEach(column -> {
    String columnName=grid.getColumnNames().get(column);
    columnNames.add(columnName);
  }
);
  return columnNames;
}","private List<String> getColumnNames(final GridComponent grid,final List<String> columns){
  List<String> columnNames=Lists.newLinkedList();
  columns.forEach(column -> {
    String columnName=grid.getColumnNames().get(column);
    if (!Strings.isNullOrEmpty(columnName)) {
      columnNames.add(columnName);
    }
  }
);
  return columnNames;
}",0.7444794952681388
39090,"private List<String> getColumns(final GridComponent grid,final String viewName){
  List<String> columns=Lists.newLinkedList();
  grid.getColumns().entrySet().stream().forEach(entry -> {
    String columnAuthorizationRole=entry.getValue().getAuthorizationRole();
    if (Strings.isNullOrEmpty(columnAuthorizationRole) || securityRolesService.canAccess(columnAuthorizationRole)) {
      columns.add(entry.getKey());
    }
  }
);
  return columns;
}","private List<String> getColumns(final GridComponent grid,final String viewName){
  List<String> columns=Lists.newLinkedList();
  grid.getColumns().entrySet().stream().forEach(entry -> {
    String columnAuthorizationRole=entry.getValue().getAuthorizationRole();
    if ((Strings.isNullOrEmpty(columnAuthorizationRole) || securityRolesService.canAccess(columnAuthorizationRole)) && !entry.getValue().isHidden()) {
      columns.add(entry.getKey());
    }
  }
);
  return columns;
}",0.9632829373650108
39091,"public void translateItemForm(final ViewDefinitionState viewDefinitionState){
  FormComponent itemForm=(FormComponent)viewDefinitionState.getComponentByReference(L_FORM);
  Long itemId=itemForm.getEntityId();
  if (itemId != null) {
    Entity item=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_ITEM).get(itemId);
    if ((item != null) && (item.getStringField(MenuItemFields.PLUGIN_IDENTIFIER) != null)) {
      FieldComponent itemNameField=(FieldComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
      FieldComponent itemViewField=(FieldComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
      itemNameField.setEnabled(false);
      itemNameField.setFieldValue(translationUtilsService.getItemTranslation(item,viewDefinitionState.getLocale()));
      itemViewField.setEnabled(false);
    }
  }
}","public void translateItemForm(final ViewDefinitionState viewDefinitionState){
  FormComponent itemForm=(FormComponent)viewDefinitionState.getComponentByReference(L_FORM);
  Long itemId=itemForm.getEntityId();
  if (itemId != null) {
    Entity item=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_ITEM).get(itemId);
    if ((item != null) && (item.getStringField(MenuItemFields.PLUGIN_IDENTIFIER) != null)) {
      FieldComponent itemNameField=(FieldComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
      FieldComponent itemViewField=(FieldComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
      itemNameField.setEnabled(false);
      itemViewField.setEnabled(false);
    }
  }
}",0.8992154496077248
39092,"private Map<String,String> convertEntityToMap(final Entity entity){
  Map<String,String> values=new LinkedHashMap<String,String>();
  for (  GridComponentColumn column : columns.values()) {
    if (column.isHidden()) {
      continue;
    }
    if (column.getFields().get(0).getType() instanceof EnumeratedType) {
      String fieldValue=column.getValue(entity,getLocale());
      StringBuffer localeString=new StringBuffer();
      localeString.append(getDataDefinition().getPluginIdentifier());
      localeString.append('.');
      localeString.append(getDataDefinition().getName());
      localeString.append('.');
      localeString.append(column.getName());
      localeString.append(""String_Node_Str"");
      localeString.append(fieldValue);
      values.put(column.getName(),getTranslationService().translate(localeString.toString(),getLocale()));
    }
 else     if (column.getFields().get(0).getType().getType().equals(Boolean.class)) {
      String fieldValue=column.getValue(entity,getLocale());
      if (fieldValue != null) {
        if (fieldValue.equals(""String_Node_Str"")) {
          values.put(column.getName(),getTranslationService().translate(""String_Node_Str"",getLocale()));
        }
 else {
          values.put(column.getName(),getTranslationService().translate(""String_Node_Str"",getLocale()));
        }
      }
 else {
        values.put(column.getName(),""String_Node_Str"");
      }
    }
 else {
      values.put(column.getName(),column.getValue(entity,getLocale()));
    }
  }
  return values;
}","private Map<String,String> convertEntityToMap(final Entity entity){
  Map<String,String> values=new LinkedHashMap<String,String>();
  for (  GridComponentColumn column : columns.values()) {
    if (column.isHidden()) {
      continue;
    }
    if (column.getFields().get(0).getType() instanceof EnumType) {
      String fieldValue=column.getValue(entity,getLocale());
      StringBuffer localeString=new StringBuffer();
      localeString.append(getDataDefinition().getPluginIdentifier());
      localeString.append('.');
      localeString.append(getDataDefinition().getName());
      localeString.append('.');
      localeString.append(column.getName());
      localeString.append(""String_Node_Str"");
      localeString.append(fieldValue);
      values.put(column.getName(),getTranslationService().translate(localeString.toString(),getLocale()));
    }
 else     if (column.getFields().get(0).getType().getType().equals(Boolean.class)) {
      String fieldValue=column.getValue(entity,getLocale());
      if (fieldValue != null) {
        if (fieldValue.equals(""String_Node_Str"")) {
          values.put(column.getName(),getTranslationService().translate(""String_Node_Str"",getLocale()));
        }
 else {
          values.put(column.getName(),getTranslationService().translate(""String_Node_Str"",getLocale()));
        }
      }
 else {
        values.put(column.getName(),""String_Node_Str"");
      }
    }
 else {
      values.put(column.getName(),column.getValue(entity,getLocale()));
    }
  }
  return values;
}",0.9980276134122288
39093,"public void addRestrictionToCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  categoriesGrid.setCustomRestriction(new CustomRestriction(){
    @Override public void addRestriction(    final SearchCriteriaBuilder searchCriteriaBuilder){
      SearchDisjunction disjunction=SearchRestrictions.disjunction();
      for (      String[] category : HIDDEN_CATEGORIES) {
        disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(L_PLUGIN_IDENTIFIER,category[0]),SearchRestrictions.eq(""String_Node_Str"",category[1])));
      }
      searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
    }
  }
);
}","public void addRestrictionToCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(L_GRID);
  categoriesGrid.setCustomRestriction(new CustomRestriction(){
    @Override public void addRestriction(    final SearchCriteriaBuilder searchCriteriaBuilder){
      SearchDisjunction disjunction=SearchRestrictions.disjunction();
      for (      String[] category : HIDDEN_CATEGORIES) {
        disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(MenuCategoryFields.PLUGIN_IDENTIFIER,category[0]),SearchRestrictions.eq(MenuCategoryFields.NAME,category[1])));
      }
      searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
    }
  }
);
}",0.9463087248322148
39094,"@Override public void addRestriction(final SearchCriteriaBuilder searchCriteriaBuilder){
  SearchDisjunction disjunction=SearchRestrictions.disjunction();
  for (  String[] category : HIDDEN_CATEGORIES) {
    disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(L_PLUGIN_IDENTIFIER,category[0]),SearchRestrictions.eq(""String_Node_Str"",category[1])));
  }
  searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
}","@Override public void addRestriction(final SearchCriteriaBuilder searchCriteriaBuilder){
  SearchDisjunction disjunction=SearchRestrictions.disjunction();
  for (  String[] category : HIDDEN_CATEGORIES) {
    disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(MenuCategoryFields.PLUGIN_IDENTIFIER,category[0]),SearchRestrictions.eq(MenuCategoryFields.NAME,category[1])));
  }
  searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
}",0.9331823329558324
39095,"public void translateCategoryForm(final ViewDefinitionState viewDefinitionState){
  FormComponent categoryForm=(FormComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  Entity categoryFormEntity=categoryForm.getEntity();
  Entity categoryDbEntity=null;
  if (categoryFormEntity != null && categoryFormEntity.getId() != null) {
    categoryDbEntity=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_CATEGORY).get(categoryFormEntity.getId());
  }
  if (categoryDbEntity != null && categoryDbEntity.getStringField(L_PLUGIN_IDENTIFIER) != null) {
    ComponentState categoryNameField=viewDefinitionState.getComponentByReference(""String_Node_Str"");
    categoryNameField.setEnabled(false);
    categoryNameField.setFieldValue(translationUtilsService.getCategoryTranslation(categoryDbEntity,viewDefinitionState.getLocale()));
  }
  GridComponent categoryItemsGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  for (  Entity itemEntity : categoryItemsGrid.getEntities()) {
    if (itemEntity.getStringField(L_PLUGIN_IDENTIFIER) != null) {
      itemEntity.setField(""String_Node_Str"",translationUtilsService.getItemTranslation(itemEntity,viewDefinitionState.getLocale()));
    }
  }
}","public void translateCategoryForm(final ViewDefinitionState viewDefinitionState){
  FormComponent categoryForm=(FormComponent)viewDefinitionState.getComponentByReference(L_FORM);
  Long categoryId=categoryForm.getEntityId();
  if (categoryId != null) {
    Entity category=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_CATEGORY).get(categoryId);
    if ((category != null) && (category.getStringField(MenuCategoryFields.PLUGIN_IDENTIFIER) != null)) {
      FieldComponent categoryNameField=(FieldComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
      categoryNameField.setEnabled(false);
      categoryNameField.setFieldValue(translationUtilsService.getCategoryTranslation(category,viewDefinitionState.getLocale()));
    }
    GridComponent categoryItemsGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
    for (    Entity item : categoryItemsGrid.getEntities()) {
      if (item.getStringField(MenuItemFields.PLUGIN_IDENTIFIER) != null) {
        item.setField(MenuItemFields.NAME,translationUtilsService.getItemTranslation(item,viewDefinitionState.getLocale()));
      }
    }
  }
}",0.7636068237205524
39096,"public void translateItemForm(final ViewDefinitionState viewDefinitionState){
  FormComponent itemForm=(FormComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  Entity itemEntity=null;
  if (itemForm.getEntity() != null) {
    itemEntity=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_ITEM).get(itemForm.getEntity().getId());
  }
  if (itemEntity != null && itemEntity.getStringField(L_PLUGIN_IDENTIFIER) != null) {
    ComponentState itemNameField=viewDefinitionState.getComponentByReference(""String_Node_Str"");
    itemNameField.setEnabled(false);
    viewDefinitionState.getComponentByReference(""String_Node_Str"").setEnabled(false);
  }
}","public void translateItemForm(final ViewDefinitionState viewDefinitionState){
  FormComponent itemForm=(FormComponent)viewDefinitionState.getComponentByReference(L_FORM);
  Long itemId=itemForm.getEntityId();
  if (itemId != null) {
    Entity item=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_ITEM).get(itemId);
    if ((item != null) && (item.getStringField(MenuItemFields.PLUGIN_IDENTIFIER) != null)) {
      FieldComponent itemNameField=(FieldComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
      FieldComponent itemViewField=(FieldComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
      itemNameField.setEnabled(false);
      itemNameField.setFieldValue(translationUtilsService.getItemTranslation(item,viewDefinitionState.getLocale()));
      itemViewField.setEnabled(false);
    }
  }
}",0.6700125470514429
39097,"public void translateCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  for (  Entity categoryEntity : categoriesGrid.getEntities()) {
    if (categoryEntity.getStringField(L_PLUGIN_IDENTIFIER) != null) {
      categoryEntity.setField(""String_Node_Str"",translationUtilsService.getCategoryTranslation(categoryEntity,viewDefinitionState.getLocale()));
    }
  }
}","public void translateCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(L_GRID);
  for (  Entity category : categoriesGrid.getEntities()) {
    if (category.getStringField(MenuCategoryFields.PLUGIN_IDENTIFIER) != null) {
      category.setField(MenuCategoryFields.NAME,translationUtilsService.getCategoryTranslation(category,viewDefinitionState.getLocale()));
    }
  }
}",0.6764091858037579
39098,"@Override public void onApplicationEvent(final AbstractAuthenticationEvent event){
  UserDetails userDetails=(UserDetails)event.getAuthentication().getPrincipal();
  Entity entity=dataDefinitionService.get(PLUGIN_IDENTIFIER,MODEL_USER).find().add(SearchRestrictions.eq(L_USER_NAME,userDetails.getUsername())).uniqueResult();
  Calendar now=Calendar.getInstance();
  now.add(Calendar.DAY_OF_YEAR,-1);
  if (entity.getField(""String_Node_Str"") == null || now.getTime().after((Date)entity.getField(""String_Node_Str""))) {
    entity.setField(""String_Node_Str"",new Date());
    dataDefinitionService.get(PLUGIN_IDENTIFIER,MODEL_USER).save(entity);
  }
}","@Override public void onApplicationEvent(final AbstractAuthenticationEvent event){
  if (!(event instanceof AbstractAuthenticationFailureEvent)) {
    UserDetails userDetails=(UserDetails)event.getAuthentication().getPrincipal();
    Entity entity=dataDefinitionService.get(PLUGIN_IDENTIFIER,MODEL_USER).find().add(SearchRestrictions.eq(L_USER_NAME,userDetails.getUsername())).uniqueResult();
    Calendar now=Calendar.getInstance();
    now.add(Calendar.DAY_OF_YEAR,-1);
    if (entity.getField(""String_Node_Str"") == null || now.getTime().after((Date)entity.getField(""String_Node_Str""))) {
      entity.setField(""String_Node_Str"",new Date());
      dataDefinitionService.get(PLUGIN_IDENTIFIER,MODEL_USER).save(entity);
    }
  }
}",0.9390420899854862
39099,"private SearchCriterion uniqueCriterionFor(final Entity entity){
  if (Objects.equals(String.class,fieldDefinition.getType().getType())) {
    return SearchRestrictions.iEq(fieldDefinition.getName(),entity.getField(fieldDefinition.getName()));
  }
  return SearchRestrictions.eq(fieldDefinition.getName(),entity.getField(fieldDefinition.getName()));
}","private SearchCriterion uniqueCriterionFor(final Entity entity){
  if (Objects.equals(String.class,fieldDefinition.getType().getType())) {
    return SearchRestrictions.iEq(fieldDefinition.getName(),entity.getStringField(fieldDefinition.getName()).trim());
  }
  return SearchRestrictions.eq(fieldDefinition.getName(),entity.getField(fieldDefinition.getName()));
}",0.9818181818181818
39100,"@Override public void changeStateTo(final PluginState targetState){
  if (!isTransitionPossible(getState(),targetState)) {
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ getState()+ ""String_Node_Str""+ targetState);
  }
  if (hasState(UNKNOWN)) {
    state=targetState;
    return;
  }
  Plugin thisPlugin=this;
  if (ENABLED.equals(targetState)) {
    for (    final ModuleFactory<?> factory : factories) {
      List<Module> modules=modulesByFactories.get(factory);
      for (      final Module module : modules) {
        module.enable();
        MultiTenantUtil.doInMultiTenantContext(() -> {
          if (PluginUtils.isEnabled(thisPlugin)) {
            module.multiTenantEnable();
          }
        }
);
      }
    }
    state=targetState;
  }
 else   if (DISABLED.equals(targetState)) {
    for (    final ModuleFactory<?> factory : reversedFactories) {
      List<Module> modules=modulesByFactories.get(factory);
      Collections.reverse(modules);
      for (      final Module module : modules) {
        module.disable();
        MultiTenantUtil.doInMultiTenantContext(() -> {
          if (PluginUtils.isEnabled(thisPlugin)) {
            module.multiTenantDisable();
          }
        }
);
      }
    }
    state=targetState;
  }
 else {
    state=targetState;
  }
}","@Override public void changeStateTo(final PluginState targetState){
  if (!isTransitionPossible(getState(),targetState)) {
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ getState()+ ""String_Node_Str""+ targetState);
  }
  if (hasState(UNKNOWN)) {
    state=targetState;
    return;
  }
  Plugin thisPlugin=this;
  if (ENABLED.equals(targetState)) {
    state=targetState;
    for (    final ModuleFactory<?> factory : factories) {
      List<Module> modules=modulesByFactories.get(factory);
      for (      final Module module : modules) {
        module.enable();
        MultiTenantUtil.doInMultiTenantContext(() -> {
          if (PluginUtils.isEnabled(thisPlugin)) {
            module.multiTenantEnable();
          }
        }
);
      }
    }
  }
 else   if (DISABLED.equals(targetState)) {
    for (    final ModuleFactory<?> factory : reversedFactories) {
      List<Module> modules=modulesByFactories.get(factory);
      Collections.reverse(modules);
      for (      final Module module : modules) {
        module.disable();
        MultiTenantUtil.doInMultiTenantContext(() -> {
          if (PluginUtils.isEnabled(thisPlugin)) {
            module.multiTenantDisable();
          }
        }
);
      }
    }
    state=targetState;
  }
 else {
    state=targetState;
  }
}",0.9825889477668432
39101,"@Override public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  String uri=httpRequest.getRequestURI();
  if (uri.charAt(0) == '/') {
    uri=uri.substring(1);
  }
  String[] uriParts=uri.split(""String_Node_Str"");
  if (""String_Node_Str"".equals(uriParts[0])) {
    chain.doFilter(request,response);
    return;
  }
  String[] arr=uri.split(""String_Node_Str"");
  String ext=arr[arr.length - 1];
  if (!NOT_STATIC_EXTENSIONS.contains(ext) && useJarStaticResources) {
    resourceService.serveResource(httpRequest,(HttpServletResponse)response);
  }
 else {
    chain.doFilter(request,response);
  }
}","@Override public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  String uri=httpRequest.getRequestURI();
  if (uri.charAt(0) == '/') {
    uri=uri.substring(1);
  }
  String[] uriParts=uri.split(""String_Node_Str"");
  if (""String_Node_Str"".equals(uriParts[0]) || ""String_Node_Str"".equals(uriParts[0])) {
    chain.doFilter(request,response);
    return;
  }
  String[] arr=uri.split(""String_Node_Str"");
  String ext=arr[arr.length - 1];
  if (!NOT_STATIC_EXTENSIONS.contains(ext) && useJarStaticResources) {
    resourceService.serveResource(httpRequest,(HttpServletResponse)response);
  }
 else {
    chain.doFilter(request,response);
  }
}",0.97349709114415
39102,"/** 
 * Convert integer time value to string in format hh:mm:ss
 * @param duration time value from database
 * @return time value in format hh:mm:ss
 */
public String convertTimeToString(final Integer duration){
  return durationToString(duration);
}","/** 
 * Convert string time value to string in format hh:mm:ss
 * @param duration time value from database
 * @return time value in format hh:mm:ss
 */
public static String convertTimeToString(final Object duration){
  if (duration instanceof Integer) {
    return durationToString((Integer)duration);
  }
 else {
    if (duration == null) {
      return ""String_Node_Str"";
    }
    String stringDuration=(String)duration;
    int integerDuration=Integer.parseInt(stringDuration.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (stringDuration.contains(""String_Node_Str"")) {
      integerDuration=-integerDuration;
    }
    return durationToString(integerDuration);
  }
}",0.4854994629430719
39103,"public boolean disallowNameChange(final DataDefinition dataDefinition,final Entity entity){
  if (entity.getId() != null) {
    Entity existingEntity=dataDefinition.get(entity.getId());
    if (!Objects.equals(entity.getStringField(DictionaryItemFields.NAME),existingEntity.getStringField(DictionaryItemFields.NAME))) {
      entity.addError(dataDefinition.getField(DictionaryItemFields.NAME),""String_Node_Str"");
      return false;
    }
  }
  return true;
}","private boolean disallowNameChange(final DataDefinition dictionaryItemDD,final Entity dictionaryItem){
  if (dictionaryItem.getId() != null) {
    Entity existingEntity=dictionaryItemDD.get(dictionaryItem.getId());
    if (!Objects.equals(dictionaryItem.getStringField(DictionaryItemFields.NAME),existingEntity.getStringField(DictionaryItemFields.NAME))) {
      dictionaryItem.addError(dictionaryItemDD.getField(DictionaryItemFields.NAME),""String_Node_Str"");
      return false;
    }
  }
  return true;
}",0.7647668393782383
39104,"/** 
 * Check if this lookup doesn't have selected any entity.
 * @return true if this lookup doesn't have selected any entity.
 */
boolean isEmpty();","/** 
 * Check if this lookup doesn't have selected any entity and its input is empty.
 * @return true if this lookup doesn't have selected any entity and its input is empty.
 * @since 1.2.1
 */
boolean isEmpty();",0.8232044198895028
39105,"@Override public boolean isEmpty(){
  return getFieldValue() == null;
}","@Override public boolean isEmpty(){
  return org.apache.commons.lang.StringUtils.isEmpty(autocompleteCode) && !hasSelectedEntity();
}",0.5490196078431373
39106,"@Override public void setRequired(final boolean required){
  this.required=required;
  requestRender();
}","@Override public void setRequired(final boolean required){
  this.required=required;
}",0.900523560209424
39107,"@Autowired private static void setStaticDataAccessService(final DataAccessService dataAccessService){
  SearchRestrictions.dataAccessService=dataAccessService;
}","private static void setStaticDataAccessService(final DataAccessService dataAccessService){
  SearchRestrictions.dataAccessService=dataAccessService;
}",0.964630225080386
39108,"/** 
 * Creates criterion which checks if field is equal  (using case-insensitive ""eq"" operator)  to given value.
 * @param field field
 * @param value value
 * @return criterion
 */
public static SearchCriterion ieq(final String field,final Object value){
  return new SearchCriterionImpl(Restrictions.eq(field,value).ignoreCase());
}","/** 
 * Creates criterion which checks if field is equal (using case-insensitive ""eq"" operator) to given value.
 * @param field field
 * @param value value
 * @return criterion
 */
public static SearchCriterion ieq(final String field,final Object value){
  return new SearchCriterionImpl(Restrictions.eq(field,value).ignoreCase());
}",0.997005988023952
39109,"@Override public ValueAndError toObject(final FieldDefinition fieldDefinition,final Object value){
  if (value instanceof Date) {
    return ValueAndError.withoutError(value);
  }
  try {
    DateTimeFormatter fmt=DateTimeFormat.forPattern(DateUtils.L_DATE_FORMAT);
    DateTime dt=fmt.parseDateTime(String.valueOf(value));
    int year=dt.getYear();
    if (year < 1500 || year > 2500) {
      return ValueAndError.withoutError(""String_Node_Str"");
    }
    Date date=dt.toDate();
    if (year < 2000) {
      Calendar c=Calendar.getInstance();
      c.set(Calendar.YEAR,dt.getYear());
      c.set(Calendar.MONTH,dt.getMonthOfYear() - 1);
      c.set(Calendar.DAY_OF_MONTH,dt.getDayOfMonth());
      c.set(Calendar.HOUR_OF_DAY,dt.hourOfDay().get());
      c.set(Calendar.MINUTE,dt.getMinuteOfHour());
      c.set(Calendar.SECOND,dt.getSecondOfMinute());
      c.set(Calendar.MILLISECOND,dt.getMillisOfSecond());
      date=c.getTime();
    }
    return ValueAndError.withoutError(date);
  }
 catch (  IllegalArgumentException e) {
    return ValueAndError.withError(""String_Node_Str"");
  }
}","@Override public ValueAndError toObject(final FieldDefinition fieldDefinition,final Object value){
  if (value instanceof Date) {
    return ValueAndError.withoutError(value);
  }
  try {
    DateTimeFormatter fmt=DateTimeFormat.forPattern(DateUtils.L_DATE_FORMAT);
    DateTime dt=fmt.parseDateTime(String.valueOf(value));
    int year=dt.getYear();
    if (year < 1500 || year > 2500) {
      return ValueAndError.withError(""String_Node_Str"");
    }
    Date date=dt.toDate();
    if (year < 2000) {
      Calendar c=Calendar.getInstance();
      c.set(Calendar.YEAR,dt.getYear());
      c.set(Calendar.MONTH,dt.getMonthOfYear() - 1);
      c.set(Calendar.DAY_OF_MONTH,dt.getDayOfMonth());
      c.set(Calendar.HOUR_OF_DAY,dt.hourOfDay().get());
      c.set(Calendar.MINUTE,dt.getMinuteOfHour());
      c.set(Calendar.SECOND,dt.getSecondOfMinute());
      c.set(Calendar.MILLISECOND,dt.getMillisOfSecond());
      date=c.getTime();
    }
    return ValueAndError.withoutError(date);
  }
 catch (  IllegalArgumentException e) {
    return ValueAndError.withError(""String_Node_Str"");
  }
}",0.998624484181568
39110,"private final void performWildcardTest(final String input,final String expectedOutput){
  SearchCriterion res=SearchRestrictions.like(FIELD_NAME,input);
  String actual=res.getHibernateCriterion().toString();
  String expected=FIELD_NAME + ""String_Node_Str"" + expectedOutput;
  assertEquals(expected,actual);
}","private void performWildcardTest(final String input,final String expectedOutput){
  SearchCriterion res=SearchRestrictions.like(FIELD_NAME,input);
  String actual=res.getHibernateCriterion().toString();
  String expected=FIELD_NAME + ""String_Node_Str"" + expectedOutput;
  assertEquals(expected,actual);
}",0.990228013029316
39111,"@Ignore @Test public void shouldNumberBranchedTree() throws Exception {
  EntityTreeNode node1A1=getTreeNodeMock();
  EntityTreeNode node1B1=getTreeNodeMock(2);
  EntityTreeNode node1A2=getTreeNodeMock();
  EntityTreeNode node1A3=getTreeNodeMock();
  EntityTreeNode node1B1A1=getTreeNodeMock();
  EntityTreeNode node1B1A2=getTreeNodeMock();
  EntityTreeNode node1B1A2A1=getTreeNodeMock();
  EntityTreeNode node1B1A2B1=getTreeNodeMock();
  EntityTreeNode node1B1B1=getTreeNodeMock(2);
  EntityTreeNode node1B1B2=getTreeNodeMock();
  EntityTreeNode node1B1B3=getTreeNodeMock();
  when(rootNode.getChildren()).thenReturn(Lists.newArrayList(node1A1,node1B1));
  when(node1A1.getChildren()).thenReturn(Lists.newArrayList(node1A2));
  when(node1A2.getChildren()).thenReturn(Lists.newArrayList(node1A3));
  when(node1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1A1,node1B1B1));
  when(node1B1A1.getChildren()).thenReturn(Lists.newArrayList(node1B1A2));
  when(node1B1A2.getChildren()).thenReturn(Lists.newArrayList(node1B1A2A1,node1B1A2B1));
  when(node1B1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1B2));
  when(node1B1B2.getChildren()).thenReturn(Lists.newArrayList(node1B1B3));
  ArgumentCaptor<String> argument=ArgumentCaptor.forClass(String.class);
  treeNumberingService.generateTreeNumbers(tree);
  Mockito.verify(rootNode).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
}","@Test public void shouldNumberBranchedTree() throws Exception {
  EntityTreeNode node1A1=getTreeNodeMock();
  EntityTreeNode node1B1=getTreeNodeMock(2);
  EntityTreeNode node1A2=getTreeNodeMock();
  EntityTreeNode node1A3=getTreeNodeMock();
  EntityTreeNode node1B1A1=getTreeNodeMock();
  EntityTreeNode node1B1A2=getTreeNodeMock();
  EntityTreeNode node1B1A2A1=getTreeNodeMock();
  EntityTreeNode node1B1A2B1=getTreeNodeMock();
  EntityTreeNode node1B1B1=getTreeNodeMock(2);
  EntityTreeNode node1B1B2=getTreeNodeMock();
  EntityTreeNode node1B1B3=getTreeNodeMock();
  when(rootNode.getChildren()).thenReturn(Lists.newArrayList(node1A1,node1B1));
  when(node1A1.getChildren()).thenReturn(Lists.newArrayList(node1A2));
  when(node1A2.getChildren()).thenReturn(Lists.newArrayList(node1A3));
  when(node1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1A1,node1B1B1));
  when(node1B1A1.getChildren()).thenReturn(Lists.newArrayList(node1B1A2));
  when(node1B1A2.getChildren()).thenReturn(Lists.newArrayList(node1B1A2A1,node1B1A2B1));
  when(node1B1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1B2));
  when(node1B1B2.getChildren()).thenReturn(Lists.newArrayList(node1B1B3));
  ArgumentCaptor<String> argument=ArgumentCaptor.forClass(String.class);
  treeNumberingService.generateTreeNumbers(tree);
  Mockito.verify(rootNode).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
}",0.998678122934567
39112,"@Override public String getPathFromUrl(final String url){
  String denormalizedUrl=denormalizeSeparators(url);
  return uploadDirectory.getAbsolutePath() + File.separator + denormalizedUrl.substring(denormalizedUrl.indexOf(File.separatorChar) + fileUrlPrefix.length() - 1);
}","@Override public String getPathFromUrl(final String url){
  String denormalizedUrl=denormalizeSeparators(url);
  return uploadDirectory.getAbsolutePath() + File.separator + denormalizedUrl.substring(denormalizedUrl.indexOf(File.separatorChar) + L_FILE_URL_PREFIX.length() - 1);
}",0.9494584837545126
39113,"@Override public String getUrl(final String path){
  if (!StringUtils.hasText(path)) {
    return null;
  }
  return fileUrlPrefix + normalizeSeparators(path.substring(uploadDirectory.getAbsolutePath().length() + 1));
}","@Override public String getUrl(final String path){
  if (!StringUtils.hasText(path)) {
    return null;
  }
  return L_FILE_URL_PREFIX + normalizeSeparators(path.substring(uploadDirectory.getAbsolutePath().length() + 1));
}",0.9411764705882352
39114,"private double getPosition(final Date dateFrom,final Date dateTo,final Date date){
  long tmFrom=dateFrom.getTime();
  long tmItem=date.getTime();
  long tmTo=dateTo.getTime();
  long dateFromOffset=getTimezoneOffset(dateFrom);
  long dateOffset=getTimezoneOffset(date);
  long dateToOffset=getTimezoneOffset(dateTo);
  if (dateFromOffset != dateToOffset) {
    tmTo+=(dateToOffset - dateFromOffset);
  }
  if (dateFromOffset != dateOffset) {
    tmItem+=(dateOffset - dateFromOffset);
  }
  int tmInterval=1000 * 60 * 60* interval;
  if (tmItem <= tmFrom) {
    return 0;
  }
  if (tmItem >= tmTo + 86400000L) {
    return (double)(tmTo - tmFrom) / tmInterval;
  }
  int region=(int)(tmItem - tmFrom) / tmInterval;
  long tmRegion=tmFrom + (tmInterval * region);
  return ((int)((region + ((double)(tmItem - tmRegion)) / tmInterval) * precision)) / (double)precision;
}","private double getPosition(final Date dateFrom,final Date dateTo,final Date date){
  long tmFrom=dateFrom.getTime();
  long tmItem=date.getTime();
  long tmTo=dateTo.getTime();
  long dateFromOffset=getTimezoneOffset(dateFrom);
  long dateOffset=getTimezoneOffset(date);
  long dateToOffset=getTimezoneOffset(dateTo);
  if (dateFromOffset != dateToOffset) {
    tmTo+=(dateToOffset - dateFromOffset);
  }
  if (dateFromOffset != dateOffset) {
    tmItem+=(dateOffset - dateFromOffset);
  }
  int tmInterval=1000 * 60 * 60* interval;
  if (tmItem <= tmFrom) {
    return 0;
  }
  if (tmItem >= tmTo + 86400000L) {
    return (double)(tmTo - tmFrom) / tmInterval;
  }
  int region=(int)(tmItem - tmFrom) / tmInterval;
  long tmRegion=tmFrom + (tmInterval * region);
  return ((int)((region + ((double)(tmItem - tmRegion)) / tmInterval) * PRECISION)) / (double)PRECISION;
}",0.9793103448275862
39115,"private void incrementLastChainCharacter(final Deque<String> chain,final int charNumber){
  chain.addLast(String.valueOf((char)(65 + charNumber)));
  chain.addLast(""String_Node_Str"");
}","public static void incrementLastChainCharacter(final Deque<String> chain,final int charNumber){
  int quotient=charNumber / 26;
  int modulo=charNumber % 26;
  if (quotient <= 0) {
    chain.addLast(String.valueOf((char)(65 + charNumber)));
  }
 else {
    chain.addLast(String.valueOf((char)(65 + (quotient - 1))).concat(String.valueOf((char)(65 + modulo))));
  }
  chain.addLast(""String_Node_Str"");
}",0.6098807495741057
39116,"private String convertCollectionToString(final Collection<String> collection){
  return StringUtils.join(collection,'.') + '.';
}","public static String convertCollectionToString(final Collection<String> collection){
  return StringUtils.join(collection,'.') + '.';
}",0.9545454545454546
39117,"private void incrementLastChainNumber(final Deque<String> chain){
  Integer nextNumber=Integer.valueOf(chain.pollLast()) + 1;
  chain.addLast(nextNumber.toString());
}","public static void incrementLastChainNumber(final Deque<String> chain){
  Integer nextNumber=Integer.valueOf(chain.pollLast()) + 1;
  chain.addLast(nextNumber.toString());
}",0.9647058823529412
39118,"@Test public void shouldNumberBranchedTree() throws Exception {
  EntityTreeNode node1A1=getTreeNodeMock();
  EntityTreeNode node1B1=getTreeNodeMock(2);
  EntityTreeNode node1A2=getTreeNodeMock();
  EntityTreeNode node1A3=getTreeNodeMock();
  EntityTreeNode node1B1A1=getTreeNodeMock();
  EntityTreeNode node1B1A2=getTreeNodeMock();
  EntityTreeNode node1B1A2A1=getTreeNodeMock();
  EntityTreeNode node1B1A2B1=getTreeNodeMock();
  EntityTreeNode node1B1B1=getTreeNodeMock(2);
  EntityTreeNode node1B1B2=getTreeNodeMock();
  EntityTreeNode node1B1B3=getTreeNodeMock();
  when(rootNode.getChildren()).thenReturn(Lists.newArrayList(node1A1,node1B1));
  when(node1A1.getChildren()).thenReturn(Lists.newArrayList(node1A2));
  when(node1A2.getChildren()).thenReturn(Lists.newArrayList(node1A3));
  when(node1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1A1,node1B1B1));
  when(node1B1A1.getChildren()).thenReturn(Lists.newArrayList(node1B1A2));
  when(node1B1A2.getChildren()).thenReturn(Lists.newArrayList(node1B1A2A1,node1B1A2B1));
  when(node1B1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1B2));
  when(node1B1B2.getChildren()).thenReturn(Lists.newArrayList(node1B1B3));
  ArgumentCaptor<String> argument=ArgumentCaptor.forClass(String.class);
  treeNumberingService.generateTreeNumbers(tree);
  Mockito.verify(rootNode).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
}","@Ignore @Test public void shouldNumberBranchedTree() throws Exception {
  EntityTreeNode node1A1=getTreeNodeMock();
  EntityTreeNode node1B1=getTreeNodeMock(2);
  EntityTreeNode node1A2=getTreeNodeMock();
  EntityTreeNode node1A3=getTreeNodeMock();
  EntityTreeNode node1B1A1=getTreeNodeMock();
  EntityTreeNode node1B1A2=getTreeNodeMock();
  EntityTreeNode node1B1A2A1=getTreeNodeMock();
  EntityTreeNode node1B1A2B1=getTreeNodeMock();
  EntityTreeNode node1B1B1=getTreeNodeMock(2);
  EntityTreeNode node1B1B2=getTreeNodeMock();
  EntityTreeNode node1B1B3=getTreeNodeMock();
  when(rootNode.getChildren()).thenReturn(Lists.newArrayList(node1A1,node1B1));
  when(node1A1.getChildren()).thenReturn(Lists.newArrayList(node1A2));
  when(node1A2.getChildren()).thenReturn(Lists.newArrayList(node1A3));
  when(node1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1A1,node1B1B1));
  when(node1B1A1.getChildren()).thenReturn(Lists.newArrayList(node1B1A2));
  when(node1B1A2.getChildren()).thenReturn(Lists.newArrayList(node1B1A2A1,node1B1A2B1));
  when(node1B1B1.getChildren()).thenReturn(Lists.newArrayList(node1B1B2));
  when(node1B1B2.getChildren()).thenReturn(Lists.newArrayList(node1B1B3));
  ArgumentCaptor<String> argument=ArgumentCaptor.forClass(String.class);
  treeNumberingService.generateTreeNumbers(tree);
  Mockito.verify(rootNode).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1A3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2A1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1A2B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B1).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B2).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
  Mockito.verify(node1B1B3).setField(Mockito.eq(NODE_NUMBER_FIELD),argument.capture());
  assertEquals(""String_Node_Str"",argument.getValue());
}",0.998678122934567
39119,"private TreeNode createNode(final EntityTreeNode entityTreeNode,final Deque<String> nodeNumberChain){
  entityTreeNode.setField(NODE_NUMBER_FIELD,collectionToString(nodeNumberChain));
  List<EntityTreeNode> childs=entityTreeNode.getChildren();
  TreeDataType entityType=dataTypes.get(entityTreeNode.getEntityNoteType());
  String nodeLabel=ExpressionUtils.getValue(entityTreeNode,entityType.getNodeLabelExpression(),getLocale());
  TreeNode node=new TreeNode(entityTreeNode.getId(),nodeLabel,entityType);
  int charNumber=0;
  for (  EntityTreeNode childEntityTreeNode : childs) {
    Deque<String> newNodeNumberBranch=Lists.newLinkedList(nodeNumberChain);
    if (childs.size() == 1) {
      incrementLastChainNumber(newNodeNumberBranch);
    }
 else {
      incrementLastChainCharacter(newNodeNumberBranch,charNumber++);
    }
    node.addChild(createNode(childEntityTreeNode,newNodeNumberBranch));
  }
  return node;
}","private TreeNode createNode(final EntityTreeNode entityTreeNode,final Deque<String> nodeNumberChain){
  entityTreeNode.setField(NODE_NUMBER_FIELD,TreeNumberingServiceImpl.convertCollectionToString(nodeNumberChain));
  List<EntityTreeNode> childs=entityTreeNode.getChildren();
  TreeDataType entityType=dataTypes.get(entityTreeNode.getEntityNoteType());
  String nodeLabel=ExpressionUtils.getValue(entityTreeNode,entityType.getNodeLabelExpression(),getLocale());
  TreeNode node=new TreeNode(entityTreeNode.getId(),nodeLabel,entityType);
  int charNumber=0;
  for (  EntityTreeNode childEntityTreeNode : childs) {
    Deque<String> newNodeNumberBranch=Lists.newLinkedList(nodeNumberChain);
    if (childs.size() == 1) {
      TreeNumberingServiceImpl.incrementLastChainNumber(newNodeNumberBranch);
    }
 else {
      TreeNumberingServiceImpl.incrementLastChainCharacter(newNodeNumberBranch,charNumber++);
    }
    node.addChild(createNode(childEntityTreeNode,newNodeNumberBranch));
  }
  return node;
}",0.9563409563409564
39120,"@SuppressWarnings(""String_Node_Str"") private void reorganize(final Entity parent,final JSONArray childrens,final Deque<String> nodeNumberChain) throws JSONException {
  parent.setField(TreeType.NODE_NUMBER_FIELD,collectionToString(nodeNumberChain));
  int charNumber=0;
  for (int i=0; i < childrens.length(); i++) {
    Deque<String> newNodeNumberBranch=Lists.newLinkedList(nodeNumberChain);
    if (childrens.length() == 1) {
      incrementLastChainNumber(newNodeNumberBranch);
    }
 else {
      incrementLastChainCharacter(newNodeNumberBranch,charNumber++);
    }
    Entity nodeEntity=nodes.get(childrens.getJSONObject(i).getLong(""String_Node_Str""));
    ((List<Entity>)parent.getField(CHILDREN)).add(nodeEntity);
    if (childrens.getJSONObject(i).has(CHILDREN)) {
      reorganize(nodeEntity,childrens.getJSONObject(i).getJSONArray(CHILDREN),newNodeNumberBranch);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void reorganize(final Entity parent,final JSONArray childrens,final Deque<String> nodeNumberChain) throws JSONException {
  parent.setField(TreeType.NODE_NUMBER_FIELD,TreeNumberingServiceImpl.convertCollectionToString(nodeNumberChain));
  int charNumber=0;
  for (int i=0; i < childrens.length(); i++) {
    Deque<String> newNodeNumberBranch=Lists.newLinkedList(nodeNumberChain);
    if (childrens.length() == 1) {
      TreeNumberingServiceImpl.incrementLastChainNumber(newNodeNumberBranch);
    }
 else {
      TreeNumberingServiceImpl.incrementLastChainCharacter(newNodeNumberBranch,charNumber++);
    }
    Entity nodeEntity=nodes.get(childrens.getJSONObject(i).getLong(""String_Node_Str""));
    ((List<Entity>)parent.getField(CHILDREN)).add(nodeEntity);
    if (childrens.getJSONObject(i).has(CHILDREN)) {
      reorganize(nodeEntity,childrens.getJSONObject(i).getJSONArray(CHILDREN),newNodeNumberBranch);
    }
  }
}",0.9545945945945946
39121,"private void clearHolder(){
  Iterator<?> iterator=filterValue.keys();
  while (iterator.hasNext()) {
    String key=iterator.next().toString();
    filterValue.remove(key);
  }
  empty=true;
}","private void clearHolder(){
  Iterator<?> iterator=filterValue.keys();
  List<String> entrysToRemove=Lists.newArrayList();
  while (iterator.hasNext()) {
    entrysToRemove.add(iterator.next().toString());
  }
  for (  String key : entrysToRemove) {
    filterValue.remove(key);
  }
  empty=true;
}",0.4887983706720977
39122,"public Object getValue(){
  return value;
}","/** 
 * Returns parsed value
 * @return parsed value
 */
public Object getValue(){
  return value;
}",0.6013986013986014
39123,"public static ValueAndError withoutError(final Object value){
  return new ValueAndError(value,null);
}","/** 
 * Build and returns new instance of   {@link ValueAndError} with given
 * @param value
 * @return new instance of {@link ValueAndError}
 */
public static ValueAndError withoutError(final Object value){
  return new ValueAndError(value,null);
}",0.5852272727272727
39124,"public static ValueAndError withError(final String message,final String... args){
  return new ValueAndError(null,message,args);
}","/** 
 * Build and returns new instance of   {@link ValueAndError} with given message and args
 * @param message error message
 * @param args error message arguments (values which will replace message's place holders)
 * @return new instance of {@link ValueAndError}
 */
public static ValueAndError withError(final String message,final String... args){
  return new ValueAndError(null,message,args);
}",0.490566037735849
39125,"public boolean isValid(){
  return message == null;
}","/** 
 * Checks if value is valid.
 * @return true if field value is valid. Otherwise false.
 */
public boolean isValid(){
  return message == null;
}",0.5247524752475248
39126,"public String getMessage(){
  return message;
}","/** 
 * Returns error message
 * @return error message
 */
public String getMessage(){
  return message;
}",0.6143790849673203
39127,"public String[] getArgs(){
  return Arrays.copyOf(args,args.length);
}","/** 
 * Returns error message arguments (values which will replace message's place holders)
 * @return error message arguments (values which will replace message's place holders)
 */
public String[] getArgs(){
  return Arrays.copyOf(args,args.length);
}",0.4334365325077399
39128,"public static ValueAndError empty(){
  return new ValueAndError(null,null);
}","/** 
 * Returns empty   {@link ValueAndError} object
 * @return empty {@link ValueAndError} object
 */
public static ValueAndError empty(){
  return EMPTY_VALUE_AND_ERROR;
}",0.416
39129,"@Override public boolean call(final Entity entity,final Object oldValue,final Object newValue){
  boolean result=fieldHook.call(entity,oldValue,newValue);
  if (result) {
    return true;
  }
  entity.addError(fieldDefinition,errorMessage);
  return false;
}","@Override public boolean call(final Entity entity,final Object oldValue,final Object newValue){
  if (fieldHook.call(entity,oldValue,newValue)) {
    return true;
  }
  if (entity.getError(fieldDefinition.getName()) == null) {
    entity.addError(fieldDefinition,errorMessage);
  }
  return false;
}",0.6140035906642729
39130,"private Object parseAndValidateField(final InternalFieldDefinition fieldDefinition,final Object value,final Entity validatedEntity){
  FieldType fieldType=fieldDefinition.getType();
  if (fieldType instanceof HasManyType || fieldType instanceof TreeType || fieldType instanceof ManyToManyType) {
    return value;
  }
 else {
    return parseAndValidateValue(fieldDefinition,trimAndNullIfEmpty(value),validatedEntity);
  }
}","private Object parseAndValidateField(final InternalFieldDefinition fieldDefinition,final Object newValue,final Entity validatedEntity,final Object oldValue){
  FieldType fieldType=fieldDefinition.getType();
  Object parsedValue;
  if (fieldType instanceof HasManyType || fieldType instanceof TreeType || fieldType instanceof ManyToManyType) {
    parsedValue=newValue;
  }
 else {
    parsedValue=parseValue(fieldDefinition,trimAndNullIfEmpty(newValue),validatedEntity,oldValue);
  }
  if (validatedEntity.isFieldValid(fieldDefinition.getName()) && fieldDefinition.callValidators(validatedEntity,oldValue,parsedValue)) {
    return parsedValue;
  }
 else {
    return null;
  }
}",0.6600181323662738
39131,"private void parseAndValidateEntity(final InternalDataDefinition dataDefinition,final Entity genericEntity){
  for (  Entry<String,FieldDefinition> fieldDefinitionEntry : dataDefinition.getFields().entrySet()) {
    Object validateFieldValue=parseAndValidateField((InternalFieldDefinition)fieldDefinitionEntry.getValue(),genericEntity.getField(fieldDefinitionEntry.getKey()),genericEntity);
    genericEntity.setField(fieldDefinitionEntry.getKey(),validateFieldValue);
  }
  for (  Entry<String,FieldDefinition> fieldDefinitionEntry : dataDefinition.getFields().entrySet()) {
    if (!genericEntity.isFieldValid(fieldDefinitionEntry.getKey())) {
      continue;
    }
    ((InternalFieldDefinition)fieldDefinitionEntry.getValue()).callValidators(genericEntity,null,genericEntity.getField(fieldDefinitionEntry.getKey()));
  }
  if (genericEntity.isValid()) {
    dataDefinition.callValidators(genericEntity);
  }
}","private void parseAndValidateEntity(final InternalDataDefinition dataDefinition,final Entity genericEntity,final Entity existingGenericEntity){
  for (  Entry<String,FieldDefinition> fieldDefinitionEntry : dataDefinition.getFields().entrySet()) {
    final String fieldName=fieldDefinitionEntry.getKey();
    final Object newValue=genericEntity.getField(fieldName);
    final Object oldValue=getOldFieldValue(existingGenericEntity,fieldName);
    final InternalFieldDefinition fieldDefinition=(InternalFieldDefinition)fieldDefinitionEntry.getValue();
    final Object validatedFieldValue=parseAndValidateField(fieldDefinition,newValue,genericEntity,oldValue);
    genericEntity.setField(fieldName,validatedFieldValue);
  }
  if (genericEntity.isValid()) {
    dataDefinition.callValidators(genericEntity);
  }
}",0.4153132250580046
39132,"@Override public void validateGenericEntity(final InternalDataDefinition dataDefinition,final Entity genericEntity,final Entity existingGenericEntity){
  copyReadOnlyAndMissingFields(dataDefinition,genericEntity,existingGenericEntity);
  parseFields(dataDefinition,genericEntity);
  if (genericEntity.getId() == null) {
    dataDefinition.callCreateHook(genericEntity);
    parseAndValidateEntity(dataDefinition,genericEntity);
  }
 else {
    parseAndValidateEntity(dataDefinition,genericEntity);
    dataDefinition.callUpdateHook(genericEntity);
  }
  dataDefinition.callSaveHook(genericEntity);
}","@Override public void validateGenericEntity(final InternalDataDefinition dataDefinition,final Entity genericEntity,final Entity existingGenericEntity){
  copyReadOnlyAndMissingFields(dataDefinition,genericEntity,existingGenericEntity);
  parseFields(dataDefinition,genericEntity);
  if (genericEntity.getId() == null) {
    dataDefinition.callCreateHook(genericEntity);
    parseAndValidateEntity(dataDefinition,genericEntity,existingGenericEntity);
  }
 else {
    parseAndValidateEntity(dataDefinition,genericEntity,existingGenericEntity);
    dataDefinition.callUpdateHook(genericEntity);
  }
  dataDefinition.callSaveHook(genericEntity);
}",0.964573268921095
39133,"/** 
 * Set scale 5 to   {@link BigDecimal} with RoundingMode HALF_EVEN.
 * @param decimal
 * @return BigDecimal with scale 5.
 */
BigDecimal setScale(BigDecimal decimal);","/** 
 * Set scale 5 to   {@link BigDecimal} with RoundingMode HALF_EVEN.
 * @param decimal
 * @return BigDecimal with scale 5.
 */
BigDecimal setScale(final BigDecimal decimal);",0.9827586206896552
39134,"/** 
 * Formats an object with DecimalFormat to produce a String.
 * @param obj
 * @return Formatted string.
 */
String format(Object obj);","/** 
 * Formats an object with DecimalFormat to produce a String.
 * @param obj
 * @return Formatted string.
 */
String format(final Object obj);",0.9788732394366196
39135,"@Override public String toString(final Object value,final Locale locale){
  NumberFormat format=null;
  if (locale == null) {
    format=NumberFormat.getNumberInstance();
  }
 else {
    format=NumberFormat.getNumberInstance(locale);
  }
  format.setMaximumFractionDigits(5);
  return format.format(value);
}","@Override public String toString(final Object value,final Locale locale){
  if (value == null) {
    return ""String_Node_Str"";
  }
  NumberFormat format=null;
  if (locale == null) {
    format=NumberFormat.getNumberInstance();
  }
 else {
    format=NumberFormat.getNumberInstance(locale);
  }
  format.setMaximumFractionDigits(getMaxFractionDigits(value));
  return format.format(value);
}",0.7725321888412017
39136,"@Override public ValueAndError toObject(final FieldDefinition fieldDefinition,final Object value){
  BigDecimal decimal=null;
  if (value instanceof BigDecimal) {
    decimal=(BigDecimal)value;
  }
 else {
    try {
      decimal=new BigDecimal(String.valueOf(value));
    }
 catch (    NumberFormatException e) {
      return ValueAndError.withError(""String_Node_Str"");
    }
  }
  return ValueAndError.withoutError(decimal);
}","@Override public ValueAndError toObject(final FieldDefinition fieldDefinition,final Object value){
  BigDecimal decimal=null;
  if (value instanceof BigDecimal) {
    decimal=((BigDecimal)value).stripTrailingZeros();
  }
 else {
    try {
      decimal=new BigDecimal(String.valueOf(value)).stripTrailingZeros();
    }
 catch (    NumberFormatException e) {
      return ValueAndError.withError(""String_Node_Str"");
    }
  }
  return ValueAndError.withoutError(decimal);
}",0.9511111111111112
39137,"@Override public Collection<FieldHookDefinition> getMissingValidators(final Iterable<FieldHookDefinition> validators){
  for (  FieldHookDefinition validator : validators) {
    if (validator instanceof UnscaledValueValidator) {
      if (((UnscaledValueValidator)validator).hasUppuerBoundDefined()) {
        return Collections.emptyList();
      }
    }
  }
  return Lists.<FieldHookDefinition>newArrayList(new UnscaledValueValidator(null,null,NumberService.DEFAULT_INTEGER_UNSCALED_VALUE_MAX_LEN));
}","@Override public Collection<FieldHookDefinition> getMissingValidators(final Iterable<FieldHookDefinition> validators){
  for (  FieldHookDefinition validator : validators) {
    if (validator instanceof UnscaledValueValidator) {
      if (((UnscaledValueValidator)validator).hasUppuerBoundDefined()) {
        return Collections.emptyList();
      }
    }
  }
  return Lists.<FieldHookDefinition>newArrayList(new UnscaledValueValidator(null,null,NumberService.DEFAULT_MAX_DIGITS_IN_INTEGER));
}",0.962888665997994
39138,"private boolean validateScale(final FieldDefinition fieldDefinition,final Object value,final Entity validatedEntity){
  int scale=((BigDecimal)value).scale();
  if (max != null && scale > max) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",max.toString());
    return false;
  }
  if (min != null && scale < min) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",min.toString());
    return false;
  }
  if (is != null && !is.equals(scale)) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",is.toString());
    return false;
  }
  return true;
}","private boolean validateScale(final FieldDefinition fieldDefinition,final Object value,final Entity validatedEntity){
  int scale=((BigDecimal)value).stripTrailingZeros().scale();
  if (max != null && scale > max) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",max.toString());
    return false;
  }
  if (min != null && scale < min) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",min.toString());
    return false;
  }
  if (is != null && !is.equals(scale)) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",is.toString());
    return false;
  }
  return true;
}",0.9838087895142636
39139,"@Test public final void shouldReturnBigDecimalValueFromStringUsingDecimalType() throws Exception {
  final String decimalStringValue=""String_Node_Str"";
  defaultEntity.setField(DECIMAL_FIELD_NAME,decimalStringValue);
  BigDecimal result=defaultEntity.getDecimalField(DECIMAL_FIELD_NAME);
  Assert.assertNotNull(result);
  Assert.assertEquals(new BigDecimal(decimalStringValue),result);
}","@Test public final void shouldReturnBigDecimalValueFromStringUsingDecimalType() throws Exception {
  final String decimalStringValue=""String_Node_Str"";
  defaultEntity.setField(DECIMAL_FIELD_NAME,decimalStringValue);
  BigDecimal result=defaultEntity.getDecimalField(DECIMAL_FIELD_NAME);
  Assert.assertNotNull(result);
  Assert.assertEquals(new BigDecimal(decimalStringValue).stripTrailingZeros(),result);
}",0.9735849056603774
39140,"@Override public PdfPTable addDynamicHeaderTableCell(final PdfPTable headerTable,final Map<String,Object> column,final Locale locale){
  if (column.keySet().size() == 0) {
    addTableCellAsOneColumnTable(headerTable,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Object key=column.keySet().iterator().next();
    addTableCellAsOneColumnTable(headerTable,translationService.translate(key.toString(),locale),column.get(key));
    column.remove(key);
  }
  return headerTable;
}","@Override public PdfPTable addDynamicHeaderTableCell(final PdfPTable headerTable,final Map<String,Object> column,final Locale locale){
  if (column.keySet().size() != 0) {
    Object key=column.keySet().iterator().next();
    addTableCellAsOneColumnTable(headerTable,translationService.translate(key.toString(),locale),column.get(key));
    column.remove(key);
  }
  return headerTable;
}",0.5281285878300803
39141,"@Test public final void shouldReturnDateValueFromLong() throws Exception {
  Date date=new Date((Long)600000l);
  defaultEntity.setField(DATE_FIELD_NAME,date);
  Date result=defaultEntity.getDateField(DATE_FIELD_NAME);
  Assert.assertNotNull(result);
  Assert.assertEquals(date,result);
}","@Test public final void shouldReturnDateValueFromLong() throws Exception {
  Date date=new Date((Long)600000L);
  defaultEntity.setField(DATE_FIELD_NAME,date);
  Date result=defaultEntity.getDateField(DATE_FIELD_NAME);
  Assert.assertNotNull(result);
  Assert.assertEquals(date,result);
}",0.9965277777777778
39142,"private void addFieldElement(final XMLStreamReader reader,final FieldDefinitionImpl fieldDefinition,final FieldType type,final String tag) throws HookInitializationException, ModelXmlParsingException {
switch (FieldTag.valueOf(tag.toUpperCase(Locale.ENGLISH))) {
case VALIDATESLENGTH:
    fieldDefinition.withValidator(getValidatorDefinition(reader,new LengthValidator(getIntegerAttribute(reader,""String_Node_Str""),getIntegerAttribute(reader,""String_Node_Str""),getIntegerAttribute(reader,""String_Node_Str""))));
  break;
case VALIDATESUNSCALEDVALUE:
fieldDefinition.withValidator(getValidatorDefinition(reader,new UnscaledValueValidator(getIntegerAttribute(reader,""String_Node_Str""),getIntegerAttribute(reader,""String_Node_Str""),getIntegerAttribute(reader,""String_Node_Str""))));
break;
case VALIDATESSCALE:
fieldDefinition.withValidator(getValidatorDefinition(reader,new ScaleValidator(getIntegerAttribute(reader,""String_Node_Str""),getIntegerAttribute(reader,""String_Node_Str""),getIntegerAttribute(reader,""String_Node_Str""))));
break;
case VALIDATESRANGE:
Object from=getRangeForType(getStringAttribute(reader,""String_Node_Str""),type);
Object to=getRangeForType(getStringAttribute(reader,""String_Node_Str""),type);
boolean exclusively=getBooleanAttribute(reader,""String_Node_Str"",false);
fieldDefinition.withValidator(getValidatorDefinition(reader,new RangeValidator(from,to,exclusively)));
break;
case VALIDATESWITH:
fieldDefinition.withValidator(getValidatorDefinition(reader,new CustomValidator(getFieldHookDefinition(reader))));
break;
case VALIDATESREGEX:
fieldDefinition.withValidator(getValidatorDefinition(reader,new RegexValidator(getStringAttribute(reader,""String_Node_Str""))));
break;
default :
throw new ModelXmlParsingException(""String_Node_Str"" + tag + ""String_Node_Str"");
}
}","private void addFieldElement(final XMLStreamReader reader,final DataDefinitionImpl dataDefinition,final String tag) throws XMLStreamException, HookInitializationException, ModelXmlParsingException {
  FieldsTag fieldTag=FieldsTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
  if (fieldTag == PRIORITY) {
    dataDefinition.addPriorityField(getPriorityFieldDefinition(reader,dataDefinition));
  }
 else {
    dataDefinition.withField(getFieldDefinition(reader,dataDefinition,fieldTag));
  }
}",0.1756697408871322
39143,"private FieldDefinition getFieldDefinition(final XMLStreamReader reader,final DataDefinitionImpl dataDefinition,final FieldsTag fieldTag) throws XMLStreamException, HookInitializationException, ModelXmlParsingException {
  String fieldType=reader.getLocalName();
  String name=getStringAttribute(reader,""String_Node_Str"");
  FieldDefinitionImpl fieldDefinition=new FieldDefinitionImpl(dataDefinition,name);
  fieldDefinition.withReadOnly(getBooleanAttribute(reader,""String_Node_Str"",false));
  fieldDefinition.withDefaultValue(getStringAttribute(reader,""String_Node_Str""));
  fieldDefinition.setPersistent(getBooleanAttribute(reader,""String_Node_Str"",true));
  fieldDefinition.setExpression(getStringAttribute(reader,""String_Node_Str""));
  FieldType type=getFieldType(reader,dataDefinition,name,fieldTag,fieldType);
  fieldDefinition.withType(type);
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new RequiredValidator()));
  }
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new UniqueValidator()));
  }
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,fieldType)) {
      break;
    }
    String tag=getTagStarted(reader);
    if (tag == null) {
      continue;
    }
    addFieldElement(reader,fieldDefinition,type,tag);
  }
  return fieldDefinition;
}","private FieldDefinition getFieldDefinition(final XMLStreamReader reader,final DataDefinitionImpl dataDefinition,final FieldsTag fieldTag) throws XMLStreamException, HookInitializationException, ModelXmlParsingException {
  String fieldType=reader.getLocalName();
  String name=getStringAttribute(reader,""String_Node_Str"");
  FieldDefinitionImpl fieldDefinition=new FieldDefinitionImpl(dataDefinition,name);
  fieldDefinition.withReadOnly(getBooleanAttribute(reader,""String_Node_Str"",false));
  fieldDefinition.withDefaultValue(getStringAttribute(reader,""String_Node_Str""));
  fieldDefinition.setPersistent(getBooleanAttribute(reader,""String_Node_Str"",true));
  fieldDefinition.setExpression(getStringAttribute(reader,""String_Node_Str""));
  FieldType type=getFieldType(reader,dataDefinition,name,fieldTag,fieldType);
  fieldDefinition.withType(type);
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new RequiredValidator()));
  }
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new UniqueValidator()));
  }
  boolean shouldSetUnscaledValueValidatorMaxValue=true;
  boolean shouldSetScaleValidatorMaxValue=true;
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,fieldType)) {
      break;
    }
    String tag=getTagStarted(reader);
    if (tag == null) {
      continue;
    }
    FieldHookDefinition fieldHookDefinition=createFieldElement(reader,fieldDefinition,type,tag);
    if (fieldHookDefinition instanceof UnscaledValueValidator) {
      UnscaledValueValidator fieldHook=(UnscaledValueValidator)fieldHookDefinition;
      shouldSetUnscaledValueValidatorMaxValue=fieldHook.getMax() == null;
    }
    if (fieldHookDefinition instanceof ScaleValidator) {
      ScaleValidator fieldHook=(ScaleValidator)fieldHookDefinition;
      shouldSetScaleValidatorMaxValue=fieldHook.getMax() == null;
    }
    fieldDefinition.withValidator(fieldHookDefinition);
  }
  if (""String_Node_Str"".equals(fieldType) && shouldSetUnscaledValueValidatorMaxValue) {
    fieldDefinition.withValidator(new UnscaledValueValidator(null,null,Integer.valueOf(7)));
  }
  if (""String_Node_Str"".equals(fieldType) && shouldSetScaleValidatorMaxValue) {
    fieldDefinition.withValidator(new ScaleValidator(null,null,Integer.valueOf(5)));
  }
  return fieldDefinition;
}",0.7373606429867773
39144,"private Entity buildUnitConversionItem(final String unitTo,final BigDecimal ratio){
  final Entity unitConversionItem=unitConversionItemDD.create();
  unitConversionItem.setField(UnitConversionItemFields.UNIT_FROM,unitFrom);
  unitConversionItem.setField(UnitConversionItemFields.UNIT_TO,unitTo);
  unitConversionItem.setField(UnitConversionItemFields.QUANTITY_FROM,BigDecimal.ONE);
  unitConversionItem.setField(UnitConversionItemFields.QUANTITY_TO,BigDecimal.ONE.multiply(ratio,mathContext));
  return unitConversionItem;
}","private Entity buildUnitConversionItem(final String unitTo,final BigDecimal ratio){
  final Entity unitConversionItem=unitConversionItemDD.create();
  unitConversionItem.setField(UnitConversionItemFields.UNIT_FROM,unitFrom);
  unitConversionItem.setField(UnitConversionItemFields.UNIT_TO,unitTo);
  unitConversionItem.setField(UnitConversionItemFields.QUANTITY_FROM,numberService.setScale(BigDecimal.ONE));
  unitConversionItem.setField(UnitConversionItemFields.QUANTITY_TO,numberService.setScale(BigDecimal.ONE.multiply(ratio)));
  return unitConversionItem;
}",0.9447513812154696
39145,"@Override public BigDecimal convertTo(final BigDecimal quantityFrom,final String unitTo){
  final BigDecimal ratio=targetUnitToFactor.get(unitTo);
  Preconditions.checkNotNull(ratio,""String_Node_Str"" + unitFrom + ""String_Node_Str""+ unitTo+ ""String_Node_Str"");
  return quantityFrom.multiply(ratio);
}","@Override public BigDecimal convertTo(final BigDecimal quantityFrom,final String unitTo){
  final BigDecimal ratio=targetUnitToFactor.get(unitTo);
  Preconditions.checkNotNull(ratio,""String_Node_Str"" + unitFrom + ""String_Node_Str""+ unitTo+ ""String_Node_Str"");
  return numberService.setScale(quantityFrom.multiply(ratio));
}",0.9615384615384616
39146,"@Override public void addConversion(final UnitConversion unitConversion){
  Preconditions.checkArgument(unitFrom.equals(unitConversion.getUnitFrom()),""String_Node_Str"");
  final String unit=unitConversion.getUnitTo();
  if (!isDefinedFor(unit)) {
    targetUnitToFactor.put(unitConversion.getUnitTo(),applyMathContext(unitConversion.getRatio()));
  }
}","@Override public void addConversion(final UnitConversion unitConversion){
  Preconditions.checkArgument(unitFrom.equals(unitConversion.getUnitFrom()),""String_Node_Str"");
  final String unit=unitConversion.getUnitTo();
  if (!isDefinedFor(unit)) {
    targetUnitToFactor.put(unitConversion.getUnitTo(),unitConversion.getRatio());
  }
}",0.9737609329446064
39147,"public PossibleUnitConversionsImpl(final String unitFrom,final MathContext mathContext,final DataDefinition unitConversionItemDD){
  Preconditions.checkNotNull(unitFrom);
  Preconditions.checkNotNull(mathContext);
  Preconditions.checkNotNull(unitConversionItemDD);
  this.unitFrom=unitFrom;
  this.mathContext=mathContext;
  this.unitConversionItemDD=unitConversionItemDD;
  this.targetUnitToFactor=Maps.newHashMap();
}","public PossibleUnitConversionsImpl(final String unitFrom,final NumberService numberService,final DataDefinition unitConversionItemDD){
  Preconditions.checkNotNull(unitFrom);
  Preconditions.checkNotNull(numberService);
  Preconditions.checkNotNull(unitConversionItemDD);
  this.unitFrom=unitFrom;
  this.numberService=numberService;
  this.unitConversionItemDD=unitConversionItemDD;
  this.targetUnitToFactor=Maps.newHashMap();
}",0.7411764705882353
39148,"private PossibleUnitConversions getPossibleConversions(final String unit,final List<Entity> matchingDomain){
  Preconditions.checkNotNull(unit);
  final InternalPossibleUnitConversions possibleUnitConversions=new PossibleUnitConversionsImpl(unit,numberService.getMathContext(),unitConversionModelService.getDataDefinition());
  final UnitConversion root=UnitConversionImpl.build(unit,numberService.getMathContext());
  traverse(possibleUnitConversions,root,convertEntities(matchingDomain));
  return possibleUnitConversions;
}","private PossibleUnitConversions getPossibleConversions(final String unit,final List<Entity> matchingDomain){
  Preconditions.checkNotNull(unit);
  final InternalPossibleUnitConversions possibleUnitConversions=new PossibleUnitConversionsImpl(unit,numberService,unitConversionModelService.getDataDefinition());
  final UnitConversion root=UnitConversionImpl.build(unit,numberService.getMathContext());
  traverse(possibleUnitConversions,root,convertEntities(matchingDomain));
  return possibleUnitConversions;
}",0.9835748792270532
39149,"private boolean validateScale(final FieldDefinition fieldDefinition,final Object value,final Entity validatedEntity){
  int scale=((BigDecimal)value).scale();
  if (max != null && scale > max) {
    validatedEntity.addError(fieldDefinition,errorMessage);
    return false;
  }
  if (min != null && scale < min) {
    validatedEntity.addError(fieldDefinition,errorMessage);
    return false;
  }
  if (is != null && !is.equals(scale)) {
    validatedEntity.addError(fieldDefinition,errorMessage);
    return false;
  }
  return true;
}","private boolean validateScale(final FieldDefinition fieldDefinition,final Object value,final Entity validatedEntity){
  int scale=((BigDecimal)value).scale();
  if (max != null && scale > max) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",max.toString());
    return false;
  }
  if (min != null && scale < min) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",min.toString());
    return false;
  }
  if (is != null && !is.equals(scale)) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",is.toString());
    return false;
  }
  return true;
}",0.9112627986348124
39150,"private boolean validatePresicion(final FieldDefinition fieldDefinition,final Entity validatedEntity,final int presicion){
  if (max != null && presicion > max) {
    validatedEntity.addError(fieldDefinition,errorMessage);
    return false;
  }
  if (min != null && presicion < min) {
    validatedEntity.addError(fieldDefinition,errorMessage);
    return false;
  }
  if (is != null && !is.equals(presicion)) {
    validatedEntity.addError(fieldDefinition,errorMessage);
    return false;
  }
  return true;
}","private boolean validatePresicion(final FieldDefinition fieldDefinition,final Entity validatedEntity,final int presicion){
  if (max != null && presicion > max) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",max.toString());
    return false;
  }
  if (min != null && presicion < min) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",min.toString());
    return false;
  }
  if (is != null && !is.equals(presicion)) {
    validatedEntity.addError(fieldDefinition,errorMessage + ""String_Node_Str"",is.toString());
    return false;
  }
  return true;
}",0.9074733096085408
39151,"@Test public void shouldSetFieldValidators(){
  assertFalse(dataDefinition.getField(""String_Node_Str"").isRequired());
  assertFalse(dataDefinition.getField(""String_Node_Str"").isUnique());
  assertTrue(dataDefinition.getField(""String_Node_Str"").isRequired());
  assertTrue(dataDefinition.getField(""String_Node_Str"").isUnique());
  assertEquals(0,((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators().size());
  assertEquals(6,((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators().size());
  List<FieldHookDefinition> validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(0),instanceOf(RequiredValidator.class));
  assertThat(validators.get(1),instanceOf(UniqueValidator.class));
  assertThat(validators.get(2),instanceOf(CustomValidator.class));
  testHookDefinition(validators.get(2),""String_Node_Str"",CustomHook.class,""String_Node_Str"");
  assertThat(validators.get(3),instanceOf(LengthValidator.class));
  assertEquals(1,getField(validators.get(3),""String_Node_Str""));
  assertNull(getField(validators.get(3),""String_Node_Str""));
  assertEquals(3,getField(validators.get(3),""String_Node_Str""));
  assertThat(validators.get(4),instanceOf(UnscaledValueValidator.class));
  assertEquals(2,getField(validators.get(4),""String_Node_Str""));
  assertNull(getField(validators.get(4),""String_Node_Str""));
  assertEquals(4,getField(validators.get(4),""String_Node_Str""));
  assertThat(validators.get(5),instanceOf(RangeValidator.class));
  assertEquals(18,getField(validators.get(5),""String_Node_Str""));
  assertEquals(null,getField(validators.get(5),""String_Node_Str""));
  assertEquals(false,getField(validators.get(5),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(3),instanceOf(RegexValidator.class));
  assertEquals(""String_Node_Str"",getField(validators.get(3),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(0),instanceOf(ScaleValidator.class));
  assertEquals(2,getField(validators.get(0),""String_Node_Str""));
  assertNull(getField(validators.get(0),""String_Node_Str""));
  assertEquals(4,getField(validators.get(0),""String_Node_Str""));
  assertThat(validators.get(1),instanceOf(UnscaledValueValidator.class));
  assertNull(getField(validators.get(1),""String_Node_Str""));
  assertEquals(2,getField(validators.get(1),""String_Node_Str""));
  assertNull(getField(validators.get(1),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(0),instanceOf(ScaleValidator.class));
  assertEquals(2,getField(validators.get(0),""String_Node_Str""));
  assertNull(getField(validators.get(0),""String_Node_Str""));
  assertEquals(4,getField(validators.get(0),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertEquals(0,validators.size());
}","@Test public void shouldSetFieldValidators(){
  assertFalse(dataDefinition.getField(""String_Node_Str"").isRequired());
  assertFalse(dataDefinition.getField(""String_Node_Str"").isUnique());
  assertTrue(dataDefinition.getField(""String_Node_Str"").isRequired());
  assertTrue(dataDefinition.getField(""String_Node_Str"").isUnique());
  assertEquals(0,((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators().size());
  assertEquals(6,((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators().size());
  List<FieldHookDefinition> validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(0),instanceOf(RequiredValidator.class));
  assertThat(validators.get(1),instanceOf(UniqueValidator.class));
  assertThat(validators.get(2),instanceOf(CustomValidator.class));
  testHookDefinition(validators.get(2),""String_Node_Str"",CustomHook.class,""String_Node_Str"");
  assertThat(validators.get(3),instanceOf(LengthValidator.class));
  assertEquals(1,getField(validators.get(3),""String_Node_Str""));
  assertNull(getField(validators.get(3),""String_Node_Str""));
  assertEquals(3,getField(validators.get(3),""String_Node_Str""));
  assertThat(validators.get(4),instanceOf(UnscaledValueValidator.class));
  assertEquals(2,getField(validators.get(4),""String_Node_Str""));
  assertNull(getField(validators.get(4),""String_Node_Str""));
  assertEquals(4,getField(validators.get(4),""String_Node_Str""));
  assertThat(validators.get(5),instanceOf(RangeValidator.class));
  assertEquals(18,getField(validators.get(5),""String_Node_Str""));
  assertEquals(null,getField(validators.get(5),""String_Node_Str""));
  assertEquals(false,getField(validators.get(5),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(3),instanceOf(RegexValidator.class));
  assertEquals(""String_Node_Str"",getField(validators.get(3),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(0),instanceOf(ScaleValidator.class));
  assertEquals(2,getField(validators.get(0),""String_Node_Str""));
  assertNull(getField(validators.get(0),""String_Node_Str""));
  assertEquals(4,getField(validators.get(0),""String_Node_Str""));
  assertThat(validators.get(1),instanceOf(UnscaledValueValidator.class));
  assertNull(getField(validators.get(1),""String_Node_Str""));
  assertEquals(2,getField(validators.get(1),""String_Node_Str""));
  assertNull(getField(validators.get(1),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertThat(validators.get(0),instanceOf(ScaleValidator.class));
  assertEquals(2,getField(validators.get(0),""String_Node_Str""));
  assertNull(getField(validators.get(0),""String_Node_Str""));
  assertEquals(4,getField(validators.get(0),""String_Node_Str""));
  validators=((FieldDefinitionImpl)dataDefinition.getField(""String_Node_Str"")).getValidators();
  assertEquals(2,validators.size());
}",0.999677315262988
39152,"@Before public final void init(){
  MockitoAnnotations.initMocks(this);
  this.possibleUnitConversionsImpl=new PossibleUnitConversionsImpl(UNIT_FROM,MathContext.DECIMAL64,unitConversionItemDD);
}","@Before public final void init(){
  MockitoAnnotations.initMocks(this);
  this.possibleUnitConversionsImpl=new PossibleUnitConversionsImpl(UNIT_FROM,numberService,unitConversionItemDD);
}",0.9214659685863874
39153,"@Test public final void shouldReturnConvertedValueIFConversionExists(){
  final String unitTo=""String_Node_Str"";
  possibleUnitConversionsImpl.addConversion(mockUnitConversion(UNIT_FROM,new BigDecimal(""String_Node_Str""),unitTo));
  final BigDecimal result=possibleUnitConversionsImpl.convertTo(BigDecimal.valueOf(10L),unitTo);
  assertBigDecimalEquals(BigDecimal.valueOf(5L),result);
}","@Test @Ignore public final void shouldReturnConvertedValueIFConversionExists(){
  final String unitTo=""String_Node_Str"";
  possibleUnitConversionsImpl.addConversion(mockUnitConversion(UNIT_FROM,new BigDecimal(""String_Node_Str""),unitTo));
  final BigDecimal result=possibleUnitConversionsImpl.convertTo(BigDecimal.valueOf(10L),unitTo);
  assertBigDecimalEquals(BigDecimal.valueOf(5L),result);
}",0.9897172236503856
39154,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverse(){
  final Entity kmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(100L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,kmToM,cmToMm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test @Ignore public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverse(){
  final Entity kmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(100L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,kmToM,cmToMm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.996
39155,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverseWithCycle(){
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dmToCm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity mmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",new BigDecimal(""String_Node_Str""),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,dmToCm,cmToMm,mmToM));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test @Ignore public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverseWithCycle(){
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dmToCm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity mmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",new BigDecimal(""String_Node_Str""),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,dmToCm,cmToMm,mmToM));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.9964788732394366
39156,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverse(){
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dmToCm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,dmToCm,cmToMm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test @Ignore public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverse(){
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dmToCm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,dmToCm,cmToMm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.995959595959596
39157,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverseWithCycle(){
  final Entity kmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity kmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000000L),""String_Node_Str"");
  final Entity mmToDm=mockUnitConversionItem(BigDecimal.valueOf(100L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  final Entity dmToM=mockUnitConversionItem(BigDecimal.valueOf(10L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,kmToM,kmToMm,mmToDm,dmToM));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test @Ignore public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverseWithCycle(){
  final Entity kmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity kmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000000L),""String_Node_Str"");
  final Entity mmToDm=mockUnitConversionItem(BigDecimal.valueOf(100L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  final Entity dmToM=mockUnitConversionItem(BigDecimal.valueOf(10L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,kmToM,kmToMm,mmToDm,dmToM));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.9968479117415288
39158,"public void disableWhenRoleIsSuperadmin(final ViewDefinitionState state){
  FieldComponent role=(FieldComponent)state.getComponentByReference(""String_Node_Str"");
  if (QcadooUsersConstants.ROLE_SUPERADMIN.equals(role.getFieldValue())) {
    role.setEnabled(false);
  }
 else {
    role.setEnabled(true);
  }
}","public void disableWhenRoleIsSuperadmin(final ViewDefinitionState state){
  FormComponent form=(FormComponent)state.getComponentByReference(""String_Node_Str"");
  FieldComponent role=(FieldComponent)state.getComponentByReference(""String_Node_Str"");
  if ((form.getEntityId() != null) && QcadooUsersConstants.ROLE_SUPERADMIN.equals(role.getFieldValue())) {
    role.setEnabled(false);
  }
 else {
    role.setEnabled(true);
  }
}",0.7690217391304348
39159,"@Override public BigDecimal setScale(final BigDecimal decimal){
  return decimal.setScale(5,HALF_EVEN);
}","@Override public BigDecimal setScale(final BigDecimal decimal){
  return decimal.setScale(PRECISION,ROUNDING_MODE);
}",0.8738738738738738
39160,"@Override public String format(final Object obj){
  return (obj == null) ? null : decimalFormat.format(obj);
}","@Override public String format(final Object obj){
  String formattedNumber=null;
  if (obj != null) {
    formattedNumber=getDecimalFormat().format(obj);
  }
  return formattedNumber;
}",0.6779661016949152
39161,"@Override @Monitorable public Long getCurrentUserId(){
  String login=SecurityContextHolder.getContext().getAuthentication().getName();
  Entity entity=getUserEntity(SecurityContextHolder.getContext().getAuthentication().getName());
  checkNotNull(entity,""String_Node_Str"",login);
  return entity.getId();
}","@Override @Monitorable public Long getCurrentUserId(){
  String login=SecurityContextHolder.getContext().getAuthentication().getName();
  Entity entity=getUserEntity(login);
  checkNotNull(entity,""String_Node_Str"",login);
  return entity.getId();
}",0.8756756756756757
39162,"public boolean checkUserCreatingSuperadmin(final DataDefinition dataDefinition,final Entity entity){
  String role=entity.getStringField(""String_Node_Str"");
  if (QcadooSecurityConstants.ROLE_SUPERADMIN.equals(role) && securityService.getCurrentUserName() != null) {
    entity.addError(dataDefinition.getField(""String_Node_Str""),""String_Node_Str"");
    return false;
  }
  return true;
}","private boolean checkUserCreatingSuperadmin(final DataDefinition dataDefinition,final FieldDefinition fieldDefinition,final Entity entity,final Object oldValue,final Object newValue){
  if (Objects.equal(oldValue,newValue) || isCurrentUserShopOrSuperAdmin(entity,dataDefinition) || !QcadooSecurityConstants.ROLE_SUPERADMIN.equals(newValue)) {
    return true;
  }
  entity.addError(fieldDefinition,""String_Node_Str"");
  return false;
}",0.5151883353584447
39163,"public GridComponentColumn(final String name){
  this.name=name;
}","public GridComponentColumn(final String name,final String extendingPluginIdentifier){
  this.name=name;
  this.extendingPluginIdentifier=extendingPluginIdentifier;
}",0.5714285714285714
39164,"private JSONArray getColumnsForJsOptions(final Locale locale) throws JSONException {
  JSONArray jsonColumns=new JSONArray();
  String nameTranslation=null;
  for (  GridComponentColumn column : columns.values()) {
    if (column.getFields().size() == 1) {
      String fieldCode=getDataDefinition().getPluginIdentifier() + ""String_Node_Str"" + getDataDefinition().getName()+ ""String_Node_Str""+ column.getFields().get(0).getName();
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),fieldCode + ""String_Node_Str"",locale);
    }
 else {
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),locale);
    }
    JSONObject jsonColumn=new JSONObject();
    jsonColumn.put(""String_Node_Str"",column.getName());
    jsonColumn.put(""String_Node_Str"",nameTranslation);
    jsonColumn.put(""String_Node_Str"",column.isLink());
    jsonColumn.put(""String_Node_Str"",column.isHidden());
    jsonColumn.put(L_WIDTH,column.getWidth());
    jsonColumn.put(""String_Node_Str"",column.getAlign());
    jsonColumn.put(""String_Node_Str"",getFilterValuesForColumn(column,locale));
    jsonColumns.put(jsonColumn);
  }
  return jsonColumns;
}","private JSONArray getColumnsForJsOptions(final Locale locale) throws JSONException {
  JSONArray jsonColumns=new JSONArray();
  String nameTranslation=null;
  for (  GridComponentColumn column : columns.values()) {
    if (!COLUMNS_VISIBLE_FOR_TENANT_PREDICATE.apply(column)) {
      continue;
    }
    if (column.getFields().size() == 1) {
      String fieldCode=getDataDefinition().getPluginIdentifier() + ""String_Node_Str"" + getDataDefinition().getName()+ ""String_Node_Str""+ column.getFields().get(0).getName();
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),fieldCode + ""String_Node_Str"",locale);
    }
 else {
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),locale);
    }
    JSONObject jsonColumn=new JSONObject();
    jsonColumn.put(""String_Node_Str"",column.getName());
    jsonColumn.put(""String_Node_Str"",nameTranslation);
    jsonColumn.put(""String_Node_Str"",column.isLink());
    jsonColumn.put(""String_Node_Str"",column.isHidden());
    jsonColumn.put(L_WIDTH,column.getWidth());
    jsonColumn.put(""String_Node_Str"",column.getAlign());
    jsonColumn.put(""String_Node_Str"",getFilterValuesForColumn(column,locale));
    jsonColumns.put(jsonColumn);
  }
  return jsonColumns;
}",0.9668874172185432
39165,"public Map<String,GridComponentColumn> getColumns(){
  return columns;
}","public Map<String,GridComponentColumn> getColumns(){
  return Maps.filterEntries(columns,Predicates.compose(COLUMNS_VISIBLE_FOR_TENANT_PREDICATE,VALUE_FROM_MAP_ENTRY_FUNCTION));
}",0.5737051792828686
39166,"public void addColumn(final String name,final String fields,final String expression,final Boolean isLink,final Integer width,final boolean isOrderable,final boolean isSearchable){
  GridComponentColumn column=new GridComponentColumn(name);
  for (  FieldDefinition field : parseFields(fields,column)) {
    column.addField(field);
  }
  column.setExpression(expression);
  if (isLink != null) {
    column.setLink(isLink);
  }
  if (width != null) {
    column.setWidth(width);
  }
  columns.put(name,column);
  if (isOrderable) {
    orderableColumns.add(name);
  }
  if (isSearchable) {
    searchableColumns.add(name);
  }
}","public void addColumn(final String name,final String fields,final String expression,final Boolean isLink,final Integer width,final boolean isOrderable,final boolean isSearchable,final String extendingPluginIdentifier){
  final GridComponentColumn column=new GridComponentColumn(name,extendingPluginIdentifier);
  for (  FieldDefinition field : parseFields(fields,column)) {
    column.addField(field);
  }
  column.setExpression(expression);
  if (isLink != null) {
    column.setLink(isLink);
  }
  if (width != null) {
    column.setWidth(width);
  }
  columns.put(name,column);
  if (isOrderable) {
    orderableColumns.add(name);
  }
  if (isSearchable) {
    searchableColumns.add(name);
  }
}",0.9464150943396228
39167,"@Override public void enable(){
  GridComponentPattern grid=getGrid();
  for (  ViewGridColumnModuleColumnModel columnModel : columns) {
    grid.addColumn(columnModel.getName(),columnModel.getFields(),columnModel.getExpression(),columnModel.getLink(),columnModel.getWidth(),columnModel.getOrderable(),columnModel.getSearchable());
  }
}","@Override public void enable(){
  GridComponentPattern grid=getGrid();
  for (  ViewGridColumnModuleColumnModel columnModel : columns) {
    grid.addColumn(columnModel.getName(),columnModel.getFields(),columnModel.getExpression(),columnModel.getLink(),columnModel.getWidth(),columnModel.getOrderable(),columnModel.getSearchable(),pluginIdentifier);
  }
}",0.975397973950796
39168,"private InternalDataDefinition resolveDataDefinitionFromClassType(final String classType){
  String[] tmp=classType.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String model=tmp[1].replaceAll(tmp[0].substring(0,1).toUpperCase(Locale.ENGLISH) + tmp[0].substring(1),""String_Node_Str"");
  model=model.substring(0,1).toLowerCase(Locale.ENGLISH) + model.substring(1);
  return (InternalDataDefinition)dataDefinitionService.get(tmp[0],model);
}","private InternalDataDefinition resolveDataDefinitionFromClassType(final String classType){
  String[] tmp=classType.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String model=tmp[1].replaceFirst(tmp[0].substring(0,1).toUpperCase(Locale.ENGLISH) + tmp[0].substring(1),""String_Node_Str"");
  Preconditions.checkState(StringUtils.isNotBlank(model),""String_Node_Str"");
  model=model.substring(0,1).toLowerCase(Locale.ENGLISH) + model.substring(1);
  return (InternalDataDefinition)dataDefinitionService.get(tmp[0],model);
}",0.9087340529931304
39169,"public void autompleteSearch(final String[] args){
  if ((belongsToFieldDefinition == null || belongsToEntityId != null)) {
    SearchCriteriaBuilder searchCriteriaBuilder=getDataDefinition().find();
    if (StringUtils.hasText(currentCode)) {
      searchCriteriaBuilder.add(SearchRestrictions.like(fieldCode,currentCode,SearchMatchMode.ANYWHERE));
    }
    if (belongsToFieldDefinition != null && belongsToEntityId != null && belongsToFieldDefinition.getType() instanceof BelongsToType) {
      BelongsToType type=(BelongsToType)belongsToFieldDefinition.getType();
      searchCriteriaBuilder.add(SearchRestrictions.belongsTo(belongsToFieldDefinition.getName(),type.getDataDefinition().get(belongsToEntityId)));
    }
    if (getDataDefinition().isActivable()) {
      if (oldSelectedEntityId == null) {
        searchCriteriaBuilder.add(SearchRestrictions.eq(""String_Node_Str"",true));
      }
 else {
        searchCriteriaBuilder.add(SearchRestrictions.or(SearchRestrictions.eq(""String_Node_Str"",true),SearchRestrictions.idEq(oldSelectedEntityId)));
      }
    }
    searchCriteriaBuilder.addOrder(SearchOrders.asc(fieldCode));
    SearchResult results=searchCriteriaBuilder.list();
    autocompleteEntitiesNumber=results.getTotalNumberOfEntities();
    if (results.getTotalNumberOfEntities() > 25) {
      autocompleteMatches=new LinkedList<Entity>();
    }
 else {
      autocompleteMatches=results.getEntities();
    }
  }
 else {
    autocompleteMatches=new LinkedList<Entity>();
  }
  autocompleteCode=currentCode;
  requestRender();
}","public void autompleteSearch(final String[] args){
  if ((belongsToFieldDefinition == null || belongsToEntityId != null)) {
    SearchCriteriaBuilder searchCriteriaBuilder=getDataDefinition().find();
    if (StringUtils.hasText(currentCode)) {
      searchCriteriaBuilder.add(SearchRestrictions.like(fieldCode,currentCode,SearchMatchMode.ANYWHERE));
    }
    if (belongsToFieldDefinition != null && belongsToEntityId != null && belongsToFieldDefinition.getType() instanceof BelongsToType) {
      BelongsToType type=(BelongsToType)belongsToFieldDefinition.getType();
      searchCriteriaBuilder.add(SearchRestrictions.belongsTo(belongsToFieldDefinition.getName(),type.getDataDefinition().get(belongsToEntityId)));
    }
    if (getDataDefinition().isActivable()) {
      if (oldSelectedEntityId == null) {
        searchCriteriaBuilder.add(SearchRestrictions.eq(""String_Node_Str"",true));
      }
 else {
        searchCriteriaBuilder.add(SearchRestrictions.or(SearchRestrictions.eq(""String_Node_Str"",true),SearchRestrictions.idEq(oldSelectedEntityId)));
      }
    }
    searchCriteriaBuilder.addOrder(SearchOrders.asc(fieldCode));
    if (criteriaModifier != null) {
      criteriaModifier.modifyCriteria(searchCriteriaBuilder);
    }
    SearchResult results=searchCriteriaBuilder.list();
    autocompleteEntitiesNumber=results.getTotalNumberOfEntities();
    if (results.getTotalNumberOfEntities() > 25) {
      autocompleteMatches=new LinkedList<Entity>();
    }
 else {
      autocompleteMatches=results.getEntities();
    }
  }
 else {
    autocompleteMatches=new LinkedList<Entity>();
  }
  autocompleteCode=currentCode;
  requestRender();
}",0.967459324155194
39170,"public LookupComponentState(final FieldDefinition scopeField,final String fieldCode,final String expression,final LookupComponentPattern pattern){
  super(pattern);
  this.belongsToFieldDefinition=scopeField;
  this.fieldCode=fieldCode;
  this.expression=expression;
  registerEvent(""String_Node_Str"",eventPerformer,""String_Node_Str"");
  registerEvent(""String_Node_Str"",eventPerformer,""String_Node_Str"");
  registerEvent(""String_Node_Str"",eventPerformer,""String_Node_Str"");
}","public LookupComponentState(final FieldDefinition scopeField,final String fieldCode,final String expression,final LookupComponentPattern pattern){
  super(pattern);
  this.belongsToFieldDefinition=scopeField;
  this.fieldCode=fieldCode;
  this.expression=expression;
  this.criteriaModifier=pattern.getCriteriaModifier();
  registerEvent(""String_Node_Str"",eventPerformer,""String_Node_Str"");
  registerEvent(""String_Node_Str"",eventPerformer,""String_Node_Str"");
  registerEvent(""String_Node_Str"",eventPerformer,""String_Node_Str"");
}",0.945273631840796
39171,"public void removeTranslationKeysForPlugin(final String pluginIdentifier){
  customTranslationManagementService.removeCustomTranslations(pluginIdentifier);
}","public void removeTranslationKeysForPlugin(final String pluginIdentifier){
  customTranslationManagementService.removeCustomTranslations(pluginIdentifier);
  List<String> keys=customTranslationManagementService.getCustomTranslationKeys(pluginIdentifier);
  customTranslationCacheService.removeCustomTranslations(keys);
}",0.6582809224318659
39172,"@Override @Transactional @Monitorable public void disable(final String pluginIdentifier,final String name){
  SearchResult serachResult=dataDefinitionService.get(PLUGIN_IDENTIFIER,MODEL_DICTIONARY).find().add(SearchRestrictions.eq(NAME,name)).list();
  if (serachResult.getTotalNumberOfEntities() > 0) {
    Entity dictionaryEntity=serachResult.getEntities().get(0);
    dictionaryEntity.setField(ACTIVE,false);
    dataDefinitionService.get(PLUGIN_IDENTIFIER,MODEL_DICTIONARY).save(dictionaryEntity);
  }
}","@Override @Transactional @Monitorable public void disable(final String pluginIdentifier,final String name){
  final DataDefinition dictionaryDataDefinition=dataDefinitionService.get(QcadooModelConstants.PLUGIN_IDENTIFIER,QcadooModelConstants.MODEL_DICTIONARY);
  final SearchCriteriaBuilder searchCriteriaBuilder=dictionaryDataDefinition.find();
  searchCriteriaBuilder.add(SearchRestrictions.eq(DictionaryFields.NAME,name));
  searchCriteriaBuilder.add(SearchRestrictions.eq(DictionaryFields.ACTIVE,true));
  searchCriteriaBuilder.setMaxResults(1);
  final Entity dictionaryEntity=searchCriteriaBuilder.uniqueResult();
  if (dictionaryEntity != null) {
    dictionaryEntity.setField(DictionaryFields.ACTIVE,false);
    dictionaryDataDefinition.save(dictionaryEntity);
  }
}",0.3715846994535519
39173,"@Override public void multiTenantDisable(){
  super.multiTenantDisable();
}","@Override public void multiTenantDisable(){
}",0.75
39174,"@Override public void multiTenantEnable(){
  super.multiTenantEnable();
}","@Override public void multiTenantEnable(){
}",0.7521367521367521
39175,"private Map<String,String> createDependenciesMap(final Map<String,String> arguments,final Locale locale){
  Map<String,String> dependencies=new HashMap<String,String>();
  for (  Map.Entry<String,String> arg : arguments.entrySet()) {
    if (arg.getKey().length() < 5) {
      continue;
    }
    if (""String_Node_Str"".equals(arg.getKey().substring(0,4))) {
      if (""String_Node_Str"".equals(arg.getValue())) {
        dependencies.put(arg.getKey().substring(4),null);
      }
 else {
        dependencies.put(arg.getKey().substring(4),convertVersionString(arg.getValue(),locale));
      }
    }
  }
  if (!dependencies.isEmpty()) {
    return dependencies;
  }
 else {
    return null;
  }
}","private Map<String,String> createDependenciesMap(final Map<String,String> arguments,final Locale locale){
  Map<String,String> dependencies=new HashMap<String,String>();
  for (  Map.Entry<String,String> arg : arguments.entrySet()) {
    if (arg.getKey().length() < 5) {
      continue;
    }
    if (""String_Node_Str"".equals(arg.getKey().substring(0,4))) {
      if (""String_Node_Str"".equals(arg.getValue())) {
        dependencies.put(arg.getKey().substring(4),null);
      }
 else {
        dependencies.put(arg.getKey().substring(4),convertVersionString(arg.getValue(),locale));
      }
    }
  }
  if (dependencies.isEmpty()) {
    return null;
  }
 else {
    return dependencies;
  }
}",0.976173285198556
39176,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public ModelAndView executeHql(@RequestParam(L_HQL) final String hql){
  if (!showReportDevelopment) {
    return new ModelAndView(new RedirectView(""String_Node_Str""));
  }
  try {
    List<Entity> entities=dataDefinitionService.get(""String_Node_Str"",""String_Node_Str"").find(hql).list().getEntities();
    if (!entities.isEmpty()) {
      DataDefinition dataDefinition=entities.get(0).getDataDefinition();
      List<String> headers=new ArrayList<String>();
      if (!isDynamicDataDefinition(dataDefinition)) {
        headers.add(""String_Node_Str"");
      }
      headers.addAll(dataDefinition.getFields().keySet());
      List<List<String>> rows=new ArrayList<List<String>>();
      for (      Entity entity : entities) {
        List<String> row=new ArrayList<String>();
        if (!isDynamicDataDefinition(dataDefinition)) {
          row.add(String.valueOf(entity.getId()));
        }
        for (        String field : dataDefinition.getFields().keySet()) {
          if (entity.getField(field) == null) {
            row.add(""String_Node_Str"");
          }
 else           if (entity.getField(field) instanceof EntityList) {
            row.add(""String_Node_Str"");
          }
 else {
            row.add(String.valueOf(entity.getField(field)));
          }
        }
        rows.add(row);
      }
      return new ModelAndView(L_QCADOO_REPORT_HQL).addObject(L_HQL,hql).addObject(""String_Node_Str"",headers).addObject(""String_Node_Str"",rows).addObject(""String_Node_Str"",true);
    }
 else {
      return new ModelAndView(L_QCADOO_REPORT_HQL).addObject(L_HQL,hql).addObject(""String_Node_Str"",true);
    }
  }
 catch (  Exception e) {
    return showException(L_QCADOO_REPORT_HQL,e).addObject(L_HQL,hql);
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public ModelAndView executeHql(@RequestParam(L_HQL) final String hql){
  if (!showReportDevelopment) {
    return new ModelAndView(new RedirectView(""String_Node_Str""));
  }
  try {
    List<Entity> entities=dataDefinitionService.get(""String_Node_Str"",""String_Node_Str"").find(hql).list().getEntities();
    if (entities.isEmpty()) {
      return new ModelAndView(L_QCADOO_REPORT_HQL).addObject(L_HQL,hql).addObject(""String_Node_Str"",true);
    }
 else {
      DataDefinition dataDefinition=entities.get(0).getDataDefinition();
      List<String> headers=new ArrayList<String>();
      if (!isDynamicDataDefinition(dataDefinition)) {
        headers.add(""String_Node_Str"");
      }
      headers.addAll(dataDefinition.getFields().keySet());
      List<List<String>> rows=new ArrayList<List<String>>();
      for (      Entity entity : entities) {
        List<String> row=new ArrayList<String>();
        if (!isDynamicDataDefinition(dataDefinition)) {
          row.add(String.valueOf(entity.getId()));
        }
        for (        String field : dataDefinition.getFields().keySet()) {
          if (entity.getField(field) == null) {
            row.add(""String_Node_Str"");
          }
 else           if (entity.getField(field) instanceof EntityList) {
            row.add(""String_Node_Str"");
          }
 else {
            row.add(String.valueOf(entity.getField(field)));
          }
        }
        rows.add(row);
      }
      return new ModelAndView(L_QCADOO_REPORT_HQL).addObject(L_HQL,hql).addObject(""String_Node_Str"",headers).addObject(""String_Node_Str"",rows).addObject(""String_Node_Str"",true);
    }
  }
 catch (  Exception e) {
    return showException(L_QCADOO_REPORT_HQL,e).addObject(L_HQL,hql);
  }
}",0.4337349397590361
39177,"/** 
 * Update custom translation with given key, locale and customTranslation
 * @param key translation key
 * @param locale locale
 * @param customTranslation custom translation
 */
void updateCustomTranslation(final String key,final String locale,final String customTranslation);","/** 
 * Updates custom translation with given key, locale and customTranslation
 * @param key translation key
 * @param locale locale
 * @param customTranslation custom translation
 */
void updateCustomTranslation(final String key,final String locale,final String customTranslation);",0.9982300884955752
39178,"/** 
 * Add custom translation with given key, locale and customTranslation
 * @param key translation key
 * @param locale locale
 * @param customTranslation custom translation
 */
void addCustomTranslation(final String key,final String locale,final String customTranslation);","/** 
 * Adds custom translation with given key, locale and customTranslation
 * @param key translation key
 * @param locale locale
 * @param customTranslation custom translation
 */
void addCustomTranslation(final String key,final String locale,final String customTranslation);",0.9981916817359856
39179,"/** 
 * Gets list of custom translations with given locale
 * @param locale locale
 * @return the list of custom translations
 */
List<Entity> getCustomTranslations(final String locale);","/** 
 * Gets list of custom translations
 * @return the list of custom translations
 */
List<Entity> getCustomTranslations();",0.8038585209003215
39180,"/** 
 * Gets custom translation with given plugin identifier, key and locale
 * @param pluginIdentifier plugin identifier
 * @param key translation key
 * @param locale locale
 * @return the custom translation
 */
Entity getCustomTranslation(final String pluginIdentifier,final String key,final String locale);","/** 
 * Gets custom translation with given plugin identifier, locale and key
 * @param pluginIdentifier plugin identifier
 * @param key translation key
 * @param locale locale
 * @return the custom translation
 */
Entity getCustomTranslation(final String pluginIdentifier,final String key,final String locale);",0.964516129032258
39181,"@Override public void updateCustomTranslation(final String key,final String locale,final String customTranslation){
  if (isCustomTranslationAdded(key)) {
    customTranslations.get(key).put(locale,customTranslation);
  }
}","@Override public void updateCustomTranslation(final String key,final String locale,final String customTranslation){
  if (isCustomTranslationAdded(key)) {
    getTenantCustomTranslationsCache().get(key).put(locale,customTranslation);
  }
}",0.8874458874458875
39182,"public CustomTranslationCacheServiceImpl(){
  this.customTranslations=Maps.newHashMap();
}","public CustomTranslationCacheServiceImpl(){
  this.customTranslationsCache=Maps.newHashMap();
}",0.972972972972973
39183,"@Override public boolean isCustomTranslationActive(final String key,final String locale){
  if (customTranslations.containsKey(key)) {
    if (customTranslations.get(key).containsKey(locale)) {
      return customTranslations.get(key).get(locale) != null;
    }
  }
  return false;
}","@Override public boolean isCustomTranslationActive(final String key,final String locale){
  if (getTenantCustomTranslationsCache().containsKey(key) && getTenantCustomTranslationsCache().get(key).containsKey(locale)) {
    return getTenantCustomTranslationsCache().get(key).get(locale) != null;
  }
  return false;
}",0.6454849498327759
39184,"@Override public boolean isCustomTranslationAdded(final String key){
  return customTranslations.containsKey(key);
}","@Override public boolean isCustomTranslationAdded(final String key){
  return getTenantCustomTranslationsCache().containsKey(key);
}",0.9274193548387096
39185,"@Override public Map<String,Map<String,String>> getCustomTranslations(){
  return customTranslations;
}","@Override public Map<String,Map<String,String>> getCustomTranslations(){
  return Collections.unmodifiableMap(getTenantCustomTranslationsCache());
}",0.8207171314741036
39186,"@Override public void addCustomTranslation(final String key,final String locale,final String customTranslation){
  Map<String,String> localeAndCustomTranslation=Maps.newHashMap();
  localeAndCustomTranslation.put(locale,customTranslation);
  customTranslations.put(key,localeAndCustomTranslation);
}","@Override public void addCustomTranslation(final String key,final String locale,final String customTranslation){
  Map<String,String> localeAndCustomTranslation=Maps.newHashMap();
  localeAndCustomTranslation.put(locale,customTranslation);
  getTenantCustomTranslationsCache().put(key,localeAndCustomTranslation);
}",0.9153094462540716
39187,"@Override public String getCustomTranslation(final String key,final String locale){
  if (customTranslations.containsKey(key)) {
    if (customTranslations.get(key).containsKey(locale)) {
      return customTranslations.get(key).get(locale);
    }
  }
  return null;
}","@Override public String getCustomTranslation(final String key,final String locale){
  if (getTenantCustomTranslationsCache().containsKey(key) && getTenantCustomTranslationsCache().get(key).containsKey(locale)) {
    return getTenantCustomTranslationsCache().get(key).get(locale);
  }
  return null;
}",0.6302816901408451
39188,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverse(){
  final Entity km_m=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity m_dm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(100L),""String_Node_Str"");
  final Entity cm_mm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(m_dm,km_m,cm_mm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverse(){
  final Entity kmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(100L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,kmToM,cmToMm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.9818731117824774
39189,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverseWithCycle(){
  final Entity m_dm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dm_cm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cm_mm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity mm_m=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",new BigDecimal(""String_Node_Str""),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(m_dm,dm_cm,cm_mm,mm_m));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverseWithCycle(){
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dmToCm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity mmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",new BigDecimal(""String_Node_Str""),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,dmToCm,cmToMm,mmToM));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.9716312056737588
39190,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverse(){
  final Entity m_dm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dm_cm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cm_mm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(m_dm,dm_cm,cm_mm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleOneDirectionalTraverse(){
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity dmToCm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity cmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,dmToCm,cmToMm));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(100L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.9766022380467956
39191,"@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverseWithCycle(){
  final Entity km_m=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity m_dm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity km_mm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000000L),""String_Node_Str"");
  final Entity mm_dm=mockUnitConversionItem(BigDecimal.valueOf(100L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  final Entity dm_m=mockUnitConversionItem(BigDecimal.valueOf(10L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  stubGetAll(Lists.newArrayList(m_dm,km_m,km_mm,mm_dm,dm_m));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}","@Test public final void shouldReturnNonEmptyConversionsSetUsingSimpleBiDirectionalTraverseWithCycle(){
  final Entity kmToM=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000L),""String_Node_Str"");
  final Entity mToDm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(10L),""String_Node_Str"");
  final Entity kmToMm=mockUnitConversionItem(BigDecimal.ONE,""String_Node_Str"",BigDecimal.valueOf(1000000L),""String_Node_Str"");
  final Entity mmToDm=mockUnitConversionItem(BigDecimal.valueOf(100L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  final Entity dmToM=mockUnitConversionItem(BigDecimal.valueOf(10L),""String_Node_Str"",BigDecimal.ONE,""String_Node_Str"");
  stubGetAll(Lists.newArrayList(mToDm,kmToM,kmToMm,mmToDm,dmToM));
  final PossibleUnitConversions result=unitConversionService.getPossibleConversions(""String_Node_Str"");
  assertEquals(3,result.asUnitToConversionMap().size());
  assertBigDecimalEquals(new BigDecimal(""String_Node_Str""),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(10L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
  assertBigDecimalEquals(BigDecimal.valueOf(1000L),result.convertTo(BigDecimal.ONE,""String_Node_Str""));
}",0.9738095238095238
39192,"public LocaleModule(final InternalTranslationService translationService,final String locale,final String label){
  this.translationService=translationService;
  this.locale=locale;
  this.label=label;
}","public LocaleModule(final InternalTranslationService translationService,final String locale,final String label){
  super();
  this.translationService=translationService;
  this.locale=locale;
  this.label=label;
}",0.9734939759036144
39193,"public TranslationGroupModule(final InternalTranslationService translationService,final String prefix,final String name){
  this.translationService=translationService;
  this.prefix=prefix;
  this.name=name;
}","public TranslationGroupModule(final InternalTranslationService translationService,final String prefix,final String name){
  super();
  this.translationService=translationService;
  this.prefix=prefix;
  this.name=name;
}",0.9743589743589745
39194,"public TranslationModule(final ApplicationContext applicationContext,final TranslationModuleService translationModuleService,final String pluginIdentifier,final String basename,final String path){
  this.applicationContext=applicationContext;
  this.translationModuleService=translationModuleService;
  this.pluginIdentifier=pluginIdentifier;
  this.basename=basename;
  this.path=path;
}","public TranslationModule(final ApplicationContext applicationContext,final TranslationModuleService translationModuleService,final String pluginIdentifier,final String basename,final String path){
  super();
  this.applicationContext=applicationContext;
  this.translationModuleService=translationModuleService;
  this.pluginIdentifier=pluginIdentifier;
  this.basename=basename;
  this.path=path;
}",0.9860228716645488
39195,"public DetachedEntityListImpl(final DataDefinition dataDefinition,final List<Entity> entities){
  this.dataDefinition=dataDefinition;
  if (entities == null) {
    this.entities=Lists.newArrayList();
  }
 else {
    this.entities=Lists.newArrayList(entities);
  }
}","public DetachedEntityListImpl(final DataDefinition dataDefinition,final List<Entity> entities){
  super();
  this.dataDefinition=dataDefinition;
  if (entities == null) {
    this.entities=Lists.newArrayList();
  }
 else {
    this.entities=Lists.newArrayList(entities);
  }
}",0.9796672828096118
39196,"public DetachedEntityTreeImpl(final List<Entity> entities){
  Preconditions.checkArgument(entities != null,""String_Node_Str"");
  this.entities=entities;
  checkEntities();
}","public DetachedEntityTreeImpl(final List<Entity> entities){
  super();
  Preconditions.checkArgument(entities != null,""String_Node_Str"");
  this.entities=entities;
  checkEntities();
}",0.969187675070028
39197,"public EntityListImpl(final DataDefinition dataDefinition,final String joinFieldName,final Long parentId){
  this.dataDefinition=dataDefinition;
  this.joinFieldDefinition=dataDefinition.getField(joinFieldName);
  this.parentId=parentId;
  if (this.parentId == null) {
    entities=Collections.<Entity>emptyList();
  }
}","public EntityListImpl(final DataDefinition dataDefinition,final String joinFieldName,final Long parentId){
  super();
  this.dataDefinition=dataDefinition;
  this.joinFieldDefinition=dataDefinition.getField(joinFieldName);
  this.parentId=parentId;
  if (this.parentId == null) {
    entities=Collections.<Entity>emptyList();
  }
}",0.9831029185867896
39198,"public EntityTreeImpl(final DataDefinition dataDefinition,final String joinFieldName,final Long belongsToId){
  this.dataDefinition=dataDefinition;
  this.joinFieldDefinition=dataDefinition.getField(joinFieldName);
  this.belongsToId=belongsToId;
  if (this.belongsToId == null) {
    entities=Collections.emptyList();
  }
}","public EntityTreeImpl(final DataDefinition dataDefinition,final String joinFieldName,final Long belongsToId){
  super();
  this.dataDefinition=dataDefinition;
  this.joinFieldDefinition=dataDefinition.getField(joinFieldName);
  this.belongsToId=belongsToId;
  if (this.belongsToId == null) {
    entities=Collections.emptyList();
  }
}",0.9833080424886192
39199,"@Override public BigDecimal setScale(BigDecimal decimal){
  return decimal.setScale(5,HALF_EVEN);
}","@Override public BigDecimal setScale(final BigDecimal decimal){
  return decimal.setScale(5,HALF_EVEN);
}",0.9705882352941176
39200,"@Override public String format(Object obj){
  return (obj == null) ? null : decimalFormat.format(obj);
}","@Override public String format(final Object obj){
  return (obj == null) ? null : decimalFormat.format(obj);
}",0.97196261682243
39201,"private FieldType getEnumType(final XMLStreamReader reader,final String translationPath) throws XMLStreamException {
  String values=getStringAttribute(reader,""String_Node_Str"");
  if (values.trim().length() == 0) {
    return new EnumType(translationService,translationPath);
  }
  return new EnumType(translationService,translationPath,values.split(""String_Node_Str""));
}","private FieldType getEnumType(final XMLStreamReader reader,final String translationPath) throws XMLStreamException {
  String values=getStringAttribute(reader,""String_Node_Str"");
  if (hasText(values)) {
    return new EnumType(translationService,translationPath,values.split(""String_Node_Str""));
  }
 else {
    return new EnumType(translationService,translationPath);
  }
}",0.7566844919786097
39202,"public DictionaryModule(final String pluginIdentifier,final String name,final InternalDictionaryService dictionaryService){
  this.pluginIdentifier=pluginIdentifier;
  this.name=name;
  this.dictionaryService=dictionaryService;
}","public DictionaryModule(final String pluginIdentifier,final String name,final InternalDictionaryService dictionaryService){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.name=name;
  this.dictionaryService=dictionaryService;
}",0.976545842217484
39203,"public EnumValueModule(final String originPluginIdentifier,final DataDefinitionService dataDefinitionService,final String pluginIdentifier,final String modelName,final String fieldName,final String value){
  this.dataDefinitionService=dataDefinitionService;
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.fieldName=fieldName;
  enumValue=new EnumTypeKey(value,originPluginIdentifier);
}","public EnumValueModule(final String originPluginIdentifier,final DataDefinitionService dataDefinitionService,final String pluginIdentifier,final String modelName,final String fieldName,final String value){
  super();
  this.dataDefinitionService=dataDefinitionService;
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.fieldName=fieldName;
  enumValue=new EnumTypeKey(value,originPluginIdentifier);
}",0.9869513641755636
39204,"public FieldModule(final String pluginIdentifier,final String modelName,final Element field,final ModelXmlHolder modelXmlHolder,final DataDefinitionService dataDefinitionService){
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.field=field;
  this.modelXmlHolder=modelXmlHolder;
  this.fieldName=field.getAttributeValue(""String_Node_Str"");
  this.dataDefinitionService=dataDefinitionService;
}","public FieldModule(final String pluginIdentifier,final String modelName,final Element field,final ModelXmlHolder modelXmlHolder,final DataDefinitionService dataDefinitionService){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.field=field;
  this.modelXmlHolder=modelXmlHolder;
  this.fieldName=field.getAttributeValue(""String_Node_Str"");
  this.dataDefinitionService=dataDefinitionService;
}",0.9871345029239766
39205,"public HookModule(final String pluginIdentifier,final String modelName,final Element hook,final ModelXmlHolder modelXmlHolder,final InternalDataDefinitionService dataDefinitionService){
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.hook=hook;
  this.modelXmlHolder=modelXmlHolder;
  this.hookType=hook.getName();
  this.hookClassName=hook.getAttributeValue(""String_Node_Str"");
  this.hookMethodName=hook.getAttributeValue(""String_Node_Str"");
  this.dataDefinitionService=dataDefinitionService;
}","public HookModule(final String pluginIdentifier,final String modelName,final Element hook,final ModelXmlHolder modelXmlHolder,final InternalDataDefinitionService dataDefinitionService){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.hook=hook;
  this.modelXmlHolder=modelXmlHolder;
  this.hookType=hook.getName();
  this.hookClassName=hook.getAttributeValue(""String_Node_Str"");
  this.hookMethodName=hook.getAttributeValue(""String_Node_Str"");
  this.dataDefinitionService=dataDefinitionService;
}",0.9896519285042332
39206,"public ModelModule(final String pluginIdentifier,final String modelName,final String resource,final ModelXmlHolder modelXmlHolder,final InternalDataDefinitionService dataDefinitionService){
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.resource=resource;
  this.modelXmlHolder=modelXmlHolder;
  this.dataDefinitionService=dataDefinitionService;
}","public ModelModule(final String pluginIdentifier,final String modelName,final String resource,final ModelXmlHolder modelXmlHolder,final InternalDataDefinitionService dataDefinitionService){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.modelName=modelName;
  this.resource=resource;
  this.modelXmlHolder=modelXmlHolder;
  this.dataDefinitionService=dataDefinitionService;
}",0.9856209150326798
39207,"@Override public void printGeneratedReport(ViewDefinitionState viewDefinitionState,ComponentState state,String[] args){
  if (state.getFieldValue() instanceof Long) {
    Entity entity=dataDefinitionService.get(args[1],args[2]).get((Long)state.getFieldValue());
    if (entity == null) {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
 else     if (StringUtils.hasText(entity.getStringField(""String_Node_Str""))) {
      final StringBuilder urlBuilder=new StringBuilder();
      urlBuilder.append(""String_Node_Str"").append(args[1]);
      urlBuilder.append(""String_Node_Str"").append(args[2]).append(""String_Node_Str"");
      urlBuilder.append(args[0]).append(""String_Node_Str"").append(state.getFieldValue());
      if (args.length >= 4) {
        urlBuilder.append(""String_Node_Str"").append(args[3]);
      }
      viewDefinitionState.redirectTo(urlBuilder.toString(),true,false);
    }
 else {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
  }
 else {
    if (state instanceof FormComponent) {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
 else {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
  }
}","@Override public void printGeneratedReport(final ViewDefinitionState viewDefinitionState,final ComponentState state,final String[] args){
  if (state.getFieldValue() instanceof Long) {
    Entity entity=dataDefinitionService.get(args[1],args[2]).get((Long)state.getFieldValue());
    if (entity == null) {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
 else     if (StringUtils.hasText(entity.getStringField(""String_Node_Str""))) {
      final StringBuilder urlBuilder=new StringBuilder();
      urlBuilder.append(""String_Node_Str"").append(args[1]);
      urlBuilder.append(""String_Node_Str"").append(args[2]).append(""String_Node_Str"");
      urlBuilder.append(args[0]).append(""String_Node_Str"").append(state.getFieldValue());
      if (args.length >= 4) {
        urlBuilder.append(""String_Node_Str"").append(args[3]);
      }
      viewDefinitionState.redirectTo(urlBuilder.toString(),true,false);
    }
 else {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
  }
 else {
    if (state instanceof FormComponent) {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
 else {
      state.addMessage(""String_Node_Str"",MessageType.FAILURE);
    }
  }
}",0.9924937447873228
39208,"@Override public void setCellStyle(final HSSFSheet sheet,HSSFCell cell){
  cell.setCellStyle(getHeaderStyle(sheet.getWorkbook()));
}","@Override public void setCellStyle(final HSSFSheet sheet,final HSSFCell cell){
  cell.setCellStyle(getHeaderStyle(sheet.getWorkbook()));
}",0.9777777777777776
39209,"private ReportService.ReportType getReportType(final HttpServletRequest request) throws ReportException {
  String uri=request.getRequestURI();
  String type=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1).toUpperCase();
  try {
    return ReportService.ReportType.valueOf(type);
  }
 catch (  IllegalArgumentException e) {
    throw new ReportException(ReportException.Type.WRONG_REPORT_TYPE,e,type);
  }
}","private ReportService.ReportType getReportType(final HttpServletRequest request) throws ReportException {
  String uri=request.getRequestURI();
  String type=uri.substring(uri.lastIndexOf('.') + 1).toUpperCase(Locale.getDefault());
  try {
    return ReportService.ReportType.valueOf(type);
  }
 catch (  IllegalArgumentException e) {
    throw new ReportException(ReportException.Type.WRONG_REPORT_TYPE,e,type);
  }
}",0.9530685920577616
39210,"public ReportTemplateModule(final String pluginIdentifier,final String templateName,final Resource templateFile,final ReportTemplateService reportTemplateService){
  this.pluginIdentifier=pluginIdentifier;
  this.templateName=templateName;
  this.templateFile=templateFile;
  this.reportTemplateService=reportTemplateService;
}","public ReportTemplateModule(final String pluginIdentifier,final String templateName,final Resource templateFile,final ReportTemplateService reportTemplateService){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.templateName=templateName;
  this.templateFile=templateFile;
  this.reportTemplateService=reportTemplateService;
}",0.9834586466165414
39211,"private ReportNumberFormat(final Locale locale){
  decimalNumberFormat=NumberFormat.getNumberInstance(locale);
  decimalNumberFormat.setMinimumFractionDigits(5);
  decimalNumberFormat.setMaximumFractionDigits(5);
  integerNumberFormat=NumberFormat.getNumberInstance(locale);
}","private ReportNumberFormat(final Locale locale){
  super();
  decimalNumberFormat=NumberFormat.getNumberInstance(locale);
  decimalNumberFormat.setMinimumFractionDigits(5);
  decimalNumberFormat.setMaximumFractionDigits(5);
  integerNumberFormat=NumberFormat.getNumberInstance(locale);
}",0.9804618117229128
39212,"public UserGroupModule(final String name,final String role,final DataDefinitionService dataDefinitionService,final InternalSecurityRolesService securityRolesService){
  this.name=name;
  this.role=role;
  this.dataDefinitionService=dataDefinitionService;
  this.securityRolesService=securityRolesService;
}","public UserGroupModule(final String name,final String role,final DataDefinitionService dataDefinitionService,final InternalSecurityRolesService securityRolesService){
  super();
  this.name=name;
  this.role=role;
  this.dataDefinitionService=dataDefinitionService;
  this.securityRolesService=securityRolesService;
}",0.9823434991974318
39213,"public UserModule(final String login,final String email,final String firstName,final String lastName,final String password,final String groupName,final DataDefinitionService dataDefinitionService){
  this.login=login;
  this.email=email;
  this.firstName=firstName;
  this.lastName=lastName;
  this.password=password;
  this.groupName=groupName;
  this.dataDefinitionService=dataDefinitionService;
}","public UserModule(final String login,final String email,final String firstName,final String lastName,final String password,final String groupName,final DataDefinitionService dataDefinitionService){
  super();
  this.login=login;
  this.email=email;
  this.firstName=firstName;
  this.lastName=lastName;
  this.password=password;
  this.groupName=groupName;
  this.dataDefinitionService=dataDefinitionService;
}",0.9864029666254636
39214,"private JSONObject getWeeksScale() throws JSONException {
  DateTime dateTimeFrom=new DateTime(dateFrom);
  DateTime dateTimeTo=new DateTime(dateTo);
  int dateTimeFromDayOfWeek=dateTimeFrom.getDayOfWeek();
  int dateTimeToDayOfWeek=dateTimeTo.getDayOfWeek();
  List<Integer> weekNumbers=new ArrayList<Integer>();
  int lastAddedWeekNumber=0;
  while (dateTimeFrom.compareTo(dateTimeTo) < 0) {
    lastAddedWeekNumber=dateTimeFrom.getWeekOfWeekyear();
    weekNumbers.add(lastAddedWeekNumber);
    dateTimeFrom=dateTimeFrom.plusWeeks(1);
  }
  if (dateTimeTo.getWeekOfWeekyear() > lastAddedWeekNumber) {
    lastAddedWeekNumber=dateTimeTo.getWeekOfWeekyear();
    weekNumbers.add(lastAddedWeekNumber);
  }
  JSONArray weeksArray=new JSONArray();
  for (int i=0; i < weekNumbers.size(); i++) {
    if (i == 0 && dateTimeFromDayOfWeek > 5) {
      weeksArray.put(""String_Node_Str"" + weekNumbers.get(i));
    }
 else     if (i == weekNumbers.size() - 1 && dateTimeToDayOfWeek < 3) {
      weeksArray.put(""String_Node_Str"" + weekNumbers.get(i));
    }
 else {
      weeksArray.put(ganttChartComponentState.translate(""String_Node_Str"") + ""String_Node_Str"" + weekNumbers.get(i));
    }
  }
  JSONObject scaleObject=new JSONObject();
  JSONArray weekDays=new JSONArray();
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  scaleObject.put(JSON_ELEMENTS_IN_CATEGORY,7);
  scaleObject.put(""String_Node_Str"",weekDays);
  scaleObject.put(""String_Node_Str"",dateTimeFromDayOfWeek);
  scaleObject.put(""String_Node_Str"",dateTimeToDayOfWeek);
  scaleObject.put(JSON_CATEGORIES,weeksArray);
  return scaleObject;
}","private JSONObject getWeeksScale() throws JSONException {
  DateTime dateTimeFrom=new DateTime(dateFrom);
  DateTime dateTimeTo=new DateTime(dateTo);
  int dateTimeFromDayOfWeek=dateTimeFrom.getDayOfWeek();
  int dateTimeToDayOfWeek=dateTimeTo.getDayOfWeek();
  List<Integer> weekNumbers=new ArrayList<Integer>();
  int lastAddedWeekNumber=0;
  while (dateTimeFrom.compareTo(dateTimeTo) < 0) {
    lastAddedWeekNumber=dateTimeFrom.getWeekOfWeekyear();
    weekNumbers.add(lastAddedWeekNumber);
    dateTimeFrom=dateTimeFrom.plusWeeks(1);
  }
  if (dateTimeTo.getWeekOfWeekyear() > lastAddedWeekNumber) {
    lastAddedWeekNumber=dateTimeTo.getWeekOfWeekyear();
    weekNumbers.add(lastAddedWeekNumber);
  }
  JSONArray weeksArray=new JSONArray();
  for (int i=0; i < weekNumbers.size(); i++) {
    if (i == 0 && dateTimeFromDayOfWeek > 5) {
      weeksArray.put(weekNumbers.get(i).toString());
    }
 else     if (i == weekNumbers.size() - 1 && dateTimeToDayOfWeek < 3) {
      weeksArray.put(weekNumbers.get(i).toString());
    }
 else {
      weeksArray.put(ganttChartComponentState.translate(""String_Node_Str"") + ""String_Node_Str"" + weekNumbers.get(i));
    }
  }
  JSONObject scaleObject=new JSONObject();
  JSONArray weekDays=new JSONArray();
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  weekDays.put(ganttChartComponentState.translate(""String_Node_Str""));
  scaleObject.put(JSON_ELEMENTS_IN_CATEGORY,7);
  scaleObject.put(""String_Node_Str"",weekDays);
  scaleObject.put(""String_Node_Str"",dateTimeFromDayOfWeek);
  scaleObject.put(""String_Node_Str"",dateTimeToDayOfWeek);
  scaleObject.put(JSON_CATEGORIES,weeksArray);
  return scaleObject;
}",0.9680746561886052
39215,"public GanttChartScaleImpl(final GanttChartComponentState ganttChartComponentState,final ZoomLevel zoomLevel,final Date dateFrom,final Date dateTo){
  this.ganttChartComponentState=ganttChartComponentState;
  this.zoomLevel=zoomLevel;
  this.dateFrom=dateFrom;
  this.dateTo=new DateTime(dateTo).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59).toDate();
  this.ganttChartItemFactory=new GanttChartItemFactory(zoomLevel.getHoursInterval());
}","public GanttChartScaleImpl(final GanttChartComponentState ganttChartComponentState,final ZoomLevel zoomLevel,final Date dateFrom,final Date dateTo){
  this.ganttChartComponentState=ganttChartComponentState;
  this.zoomLevel=zoomLevel;
  this.dateFrom=(Date)dateFrom.clone();
  this.dateTo=new DateTime(dateTo).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59).toDate();
  this.ganttChartItemFactory=new GanttChartItemFactory(zoomLevel.getHoursInterval());
}",0.9848484848484848
39216,"public WindowComponentState(final WindowComponentPattern pattern){
  this.pattern=pattern;
  ribbon=pattern.getRibbon().getCopy();
}","public WindowComponentState(final WindowComponentPattern pattern){
  super();
  this.pattern=pattern;
  ribbon=pattern.getRibbon().getCopy();
}",0.96
39217,"public ViewDefinitionStateImpl(){
  requestRender();
}","public ViewDefinitionStateImpl(){
  super();
  requestRender();
}",0.907563025210084
39218,"@Override @Transactional public void addView(final String pluginIdentifier,final String viewName,final String view,final String url){
  Entity menuView=getView(pluginIdentifier,viewName);
  if (menuView != null) {
    return;
  }
  if (url == null) {
    if (!viewDefinitionService.viewExists(pluginIdentifier,viewName)) {
      throw new IllegalStateException(""String_Node_Str"" + pluginIdentifier + ""String_Node_Str""+ view+ ""String_Node_Str"");
    }
  }
  menuView=getDataDefinition(VIEW).create();
  menuView.setField(PLUGIN_IDENTIFIER,pluginIdentifier);
  menuView.setField(NAME,viewName);
  menuView.setField(URL,url);
  menuView.setField(VIEW,view);
  getDataDefinition(VIEW).save(menuView);
}","@Override @Transactional public void addView(final String pluginIdentifier,final String viewName,final String view,final String url){
  Entity menuView=getView(pluginIdentifier,viewName);
  if (menuView != null) {
    return;
  }
  if ((url == null) && !viewDefinitionService.viewExists(pluginIdentifier,viewName)) {
    throw new IllegalStateException(""String_Node_Str"" + pluginIdentifier + ""String_Node_Str""+ view+ ""String_Node_Str"");
  }
  menuView=getDataDefinition(VIEW).create();
  menuView.setField(PLUGIN_IDENTIFIER,pluginIdentifier);
  menuView.setField(NAME,viewName);
  menuView.setField(URL,url);
  menuView.setField(VIEW,view);
  getDataDefinition(VIEW).save(menuView);
}",0.894356005788712
39219,"public MenuCategoryModule(final InternalMenuService menuService,final String pluginIdentifier,final String menuCategoryName){
  this.menuService=menuService;
  this.pluginIdentifier=pluginIdentifier;
  this.menuCategoryName=menuCategoryName;
}","public MenuCategoryModule(final InternalMenuService menuService,final String pluginIdentifier,final String menuCategoryName){
  super();
  this.menuService=menuService;
  this.pluginIdentifier=pluginIdentifier;
  this.menuCategoryName=menuCategoryName;
}",0.977867203219316
39220,"public MenuModule(final String factoryIdentifier,final InternalMenuService menuService,final String pluginIdentifier,final String menuName,final String menuCategory,final String menuViewPluginIdentifier,final String menuViewName,final String menuUrl){
  this.factoryIdentifier=factoryIdentifier;
  this.menuService=menuService;
  this.pluginIdentifier=pluginIdentifier;
  this.menuName=menuName;
  this.menuCategory=menuCategory;
  this.menuViewPluginIdentifier=menuViewPluginIdentifier;
  this.menuViewName=menuViewName;
  this.menuUrl=menuUrl;
}","public MenuModule(final String factoryIdentifier,final InternalMenuService menuService,final String pluginIdentifier,final String menuName,final String menuCategory,final String menuViewPluginIdentifier,final String menuViewName,final String menuUrl){
  super();
  this.factoryIdentifier=factoryIdentifier;
  this.menuService=menuService;
  this.pluginIdentifier=pluginIdentifier;
  this.menuName=menuName;
  this.menuCategory=menuCategory;
  this.menuViewPluginIdentifier=menuViewPluginIdentifier;
  this.menuViewName=menuViewName;
  this.menuUrl=menuUrl;
}",0.9900452488687784
39221,"public ViewHookModule(final String pluginIdentifier,final InternalViewDefinitionService viewDefinitionService,final String extendsViewPlugin,final String extendsViewName,final InternalViewDefinition.HookType hookType,final HookDefinition hook){
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.extendsViewPlugin=extendsViewPlugin;
  this.extendsViewName=extendsViewName;
  this.hookType=hookType;
  this.hook=hook;
}","public ViewHookModule(final String pluginIdentifier,final InternalViewDefinitionService viewDefinitionService,final String extendsViewPlugin,final String extendsViewName,final InternalViewDefinition.HookType hookType,final HookDefinition hook){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.extendsViewPlugin=extendsViewPlugin;
  this.extendsViewName=extendsViewName;
  this.hookType=hookType;
  this.hook=hook;
}",0.9883843717001056
39222,"public ViewListenerModule(final String pluginIdentifier,final InternalViewDefinitionService viewDefinitionService,final String extendsViewPlugin,final String extendsViewName,final String extendsComponentName,final ComponentCustomEvent event){
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.extendsViewPlugin=extendsViewPlugin;
  this.extendsViewName=extendsViewName;
  this.extendsComponentName=extendsComponentName;
  this.event=event;
}","public ViewListenerModule(final String pluginIdentifier,final InternalViewDefinitionService viewDefinitionService,final String extendsViewPlugin,final String extendsViewName,final String extendsComponentName,final ComponentCustomEvent event){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.extendsViewPlugin=extendsViewPlugin;
  this.extendsViewName=extendsViewName;
  this.extendsComponentName=extendsComponentName;
  this.event=event;
}",0.9889447236180904
39223,"public ViewModule(final String pluginIdentifier,final Resource xmlFile,final ViewDefinitionParser viewDefinitionParser,final InternalViewDefinitionService viewDefinitionService){
  this.pluginIdentifier=pluginIdentifier;
  this.xmlFile=xmlFile;
  this.viewDefinitionParser=viewDefinitionParser;
  this.viewDefinitionService=viewDefinitionService;
}","public ViewModule(final String pluginIdentifier,final Resource xmlFile,final ViewDefinitionParser viewDefinitionParser,final InternalViewDefinitionService viewDefinitionService){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.xmlFile=xmlFile;
  this.viewDefinitionParser=viewDefinitionParser;
  this.viewDefinitionService=viewDefinitionService;
}",0.9844413012729843
39224,"public ViewRibbonModule(final String pluginIdentifier,final Resource xmlFile,final InternalViewDefinitionService viewDefinitionService,final ViewDefinitionParser viewDefinitionParser){
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.viewDefinitionParser=viewDefinitionParser;
  fileName=xmlFile.getFilename();
  try {
    viewExtension=viewDefinitionParser.getViewExtensionNode(xmlFile.getInputStream(),""String_Node_Str"");
  }
 catch (  IOException e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
}","public ViewRibbonModule(final String pluginIdentifier,final Resource xmlFile,final InternalViewDefinitionService viewDefinitionService,final ViewDefinitionParser viewDefinitionParser){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.viewDefinitionParser=viewDefinitionParser;
  fileName=xmlFile.getFilename();
  try {
    viewExtension=viewDefinitionParser.getViewExtensionNode(xmlFile.getInputStream(),""String_Node_Str"");
  }
 catch (  IOException e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
}",0.9921259842519684
39225,"public ViewTabModule(final String pluginIdentifier,final Resource xmlFile,final InternalViewDefinitionService viewDefinitionService,final ViewDefinitionParser viewDefinitionParser){
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.viewDefinitionParser=viewDefinitionParser;
  fileName=xmlFile.getFilename();
  try {
    viewExtension=viewDefinitionParser.getViewExtensionNode(xmlFile.getInputStream(),""String_Node_Str"");
  }
 catch (  IOException e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
}","public ViewTabModule(final String pluginIdentifier,final Resource xmlFile,final InternalViewDefinitionService viewDefinitionService,final ViewDefinitionParser viewDefinitionParser){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.viewDefinitionService=viewDefinitionService;
  this.viewDefinitionParser=viewDefinitionParser;
  fileName=xmlFile.getFilename();
  try {
    viewExtension=viewDefinitionParser.getViewExtensionNode(xmlFile.getInputStream(),""String_Node_Str"");
  }
 catch (  IOException e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
}",0.9920920201294032
39226,"public ViewGridColumnModule(final String pluginIdentifier,final String extendsViewPlugin,final String extendsViewName,final String extendsComponentName,final List<ViewGridColumnModuleColumnModel> columns,final InternalViewDefinitionService viewDefinitionService){
  this.pluginIdentifier=pluginIdentifier;
  this.extendsViewPlugin=extendsViewPlugin;
  this.extendsViewName=extendsViewName;
  this.extendsComponentName=extendsComponentName;
  this.columns=columns;
  this.viewDefinitionService=viewDefinitionService;
}","public ViewGridColumnModule(final String pluginIdentifier,final String extendsViewPlugin,final String extendsViewName,final String extendsComponentName,final List<ViewGridColumnModuleColumnModel> columns,final InternalViewDefinitionService viewDefinitionService){
  super();
  this.pluginIdentifier=pluginIdentifier;
  this.extendsViewPlugin=extendsViewPlugin;
  this.extendsViewName=extendsViewName;
  this.extendsComponentName=extendsComponentName;
  this.columns=columns;
  this.viewDefinitionService=viewDefinitionService;
}",0.9894736842105264
39227,"public ResourceModule(final ResourceService resourceService){
  this.resourceService=resourceService;
}","public ResourceModule(final ResourceService resourceService){
  super();
  this.resourceService=resourceService;
}",0.9493087557603688
39228,"public RibbonTemplateExtensionModule(final String pluginIdentifier,final Resource xmlFile,final ViewDefinitionParser parser,final RibbonTemplatesService ribbonTemplatesService){
  fileName=xmlFile.getFilename();
  this.ribbonTemplatesService=ribbonTemplatesService;
  try {
    Node root=parser.getRootOfXmlDocument(xmlFile);
    parser.checkState(""String_Node_Str"".equals(root.getNodeName()),root,""String_Node_Str"" + root.getNodeName() + ""String_Node_Str"");
    templatePlugin=parser.getStringAttribute(root,""String_Node_Str"");
    templateName=parser.getStringAttribute(root,""String_Node_Str"");
    parser.checkState(templateName != null,root,""String_Node_Str"");
    for (    Node groupNode : parser.geElementChildren(root)) {
      String groupName=parser.getStringAttribute(groupNode,""String_Node_Str"");
      String groupCondition=parser.getStringAttribute(groupNode,""String_Node_Str"");
      parser.checkState(groupName != null,groupNode,""String_Node_Str"");
      TemplateRibbonGroup templateGroup=new TemplateRibbonGroup(groupName,pluginIdentifier,groupCondition);
      for (      Node itemNode : parser.geElementChildren(groupNode)) {
        templateGroup.addActionItem(parser.parseRibbonItem(itemNode,null));
      }
      extensionGroups.add(templateGroup);
    }
  }
 catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
catch (  Exception e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
}","public RibbonTemplateExtensionModule(final String pluginIdentifier,final Resource xmlFile,final ViewDefinitionParser parser,final RibbonTemplatesService ribbonTemplatesService){
  super();
  fileName=xmlFile.getFilename();
  this.ribbonTemplatesService=ribbonTemplatesService;
  try {
    Node root=parser.getRootOfXmlDocument(xmlFile);
    parser.checkState(""String_Node_Str"".equals(root.getNodeName()),root,""String_Node_Str"" + root.getNodeName() + ""String_Node_Str"");
    templatePlugin=parser.getStringAttribute(root,""String_Node_Str"");
    templateName=parser.getStringAttribute(root,""String_Node_Str"");
    parser.checkState(templateName != null,root,""String_Node_Str"");
    for (    Node groupNode : parser.geElementChildren(root)) {
      String groupName=parser.getStringAttribute(groupNode,""String_Node_Str"");
      String groupCondition=parser.getStringAttribute(groupNode,""String_Node_Str"");
      parser.checkState(groupName != null,groupNode,""String_Node_Str"");
      TemplateRibbonGroup templateGroup=new TemplateRibbonGroup(groupName,pluginIdentifier,groupCondition);
      for (      Node itemNode : parser.geElementChildren(groupNode)) {
        templateGroup.addActionItem(parser.parseRibbonItem(itemNode,null));
      }
      extensionGroups.add(templateGroup);
    }
  }
 catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
catch (  Exception e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
}",0.9963247577681256
39229,"public RibbonTemplateModule(final String pluginIdentifier,final Resource xmlFile,final ViewDefinitionParser parser,final RibbonTemplatesService ribbonTemplatesService){
  this.ribbonTemplatesService=ribbonTemplatesService;
  String fileName=xmlFile.getFilename();
  try {
    Node root=parser.getRootOfXmlDocument(xmlFile);
    parser.checkState(""String_Node_Str"".equals(root.getNodeName()),root,""String_Node_Str"" + root.getNodeName() + ""String_Node_Str"");
    String templateName=parser.getStringAttribute(root,""String_Node_Str"");
    parser.checkState(templateName != null,root,""String_Node_Str"");
    template=new RibbonTemplate(pluginIdentifier,templateName);
    for (    Node groupNode : parser.geElementChildren(root)) {
      String groupName=parser.getStringAttribute(groupNode,""String_Node_Str"");
      String groupCondition=parser.getStringAttribute(groupNode,""String_Node_Str"");
      parser.checkState(groupName != null,groupNode,""String_Node_Str"");
      TemplateRibbonGroup templateGroup=new TemplateRibbonGroup(groupName,pluginIdentifier,groupCondition);
      for (      Node itemNode : parser.geElementChildren(groupNode)) {
        templateGroup.addActionItem(parser.parseRibbonItem(itemNode,null));
      }
      template.addTemplateGroup(templateGroup);
    }
  }
 catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
catch (  Exception e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
}","public RibbonTemplateModule(final String pluginIdentifier,final Resource xmlFile,final ViewDefinitionParser parser,final RibbonTemplatesService ribbonTemplatesService){
  super();
  fileName=xmlFile.getFilename();
  this.ribbonTemplatesService=ribbonTemplatesService;
  try {
    Node root=parser.getRootOfXmlDocument(xmlFile);
    parser.checkState(""String_Node_Str"".equals(root.getNodeName()),root,""String_Node_Str"" + root.getNodeName() + ""String_Node_Str"");
    String templateName=parser.getStringAttribute(root,""String_Node_Str"");
    parser.checkState(templateName != null,root,""String_Node_Str"");
    template=new RibbonTemplate(pluginIdentifier,templateName);
    for (    Node groupNode : parser.geElementChildren(root)) {
      String groupName=parser.getStringAttribute(groupNode,""String_Node_Str"");
      String groupCondition=parser.getStringAttribute(groupNode,""String_Node_Str"");
      parser.checkState(groupName != null,groupNode,""String_Node_Str"");
      TemplateRibbonGroup templateGroup=new TemplateRibbonGroup(groupName,pluginIdentifier,groupCondition);
      for (      Node itemNode : parser.geElementChildren(groupNode)) {
        templateGroup.addActionItem(parser.parseRibbonItem(itemNode,null));
      }
      template.addTemplateGroup(templateGroup);
    }
  }
 catch (  ViewDefinitionParserNodeException e) {
    throw ViewDefinitionParserException.forFileAndNode(fileName,e);
  }
catch (  Exception e) {
    throw ViewDefinitionParserException.forFile(fileName,e);
  }
}",0.9606141522029372
39230,"/** 
 * Returns entity with is selected in lookup
 * @return entity with is selected in lookup
 */
public Entity getEntity();","/** 
 * Returns entity with is selected in lookup
 * @return entity with is selected in lookup
 */
Entity getEntity();",0.97119341563786
39231,"public final String getUrl(){
  return url;
}","public String getUrl(){
  return url;
}",0.9285714285714286
39232,"public final String getCorrespondingComponent(){
  return correspondingComponent;
}","public String getCorrespondingComponent(){
  return correspondingComponent;
}",0.9625
39233,"public final String getCorrespondingView(){
  return correspondingView;
}","public String getCorrespondingView(){
  return correspondingView;
}",0.9571428571428572
39234,"public final boolean isCorrespondingViewInModal(){
  return correspondingViewInModal;
}","public boolean isCorrespondingViewInModal(){
  return correspondingViewInModal;
}",0.9642857142857144
39235,"@Test public final void shouldCopyEntityWithoutInfinityCycleWith4Entities(){
  SampleSimpleDatabaseObject simpleDatabaseObject1=new SampleSimpleDatabaseObject();
  simpleDatabaseObject1.setId(1L);
  simpleDatabaseObject1.setName(SIMPLE_1);
  SampleSimpleDatabaseObject simpleDatabaseObject2=new SampleSimpleDatabaseObject();
  simpleDatabaseObject2.setId(2L);
  simpleDatabaseObject2.setName(SIMPLE_2);
  SampleSimpleDatabaseObject simpleDatabaseObject3=new SampleSimpleDatabaseObject();
  simpleDatabaseObject3.setId(3L);
  simpleDatabaseObject3.setName(SIMPLE_3);
  SampleSimpleDatabaseObject simpleDatabaseObject4=new SampleSimpleDatabaseObject();
  simpleDatabaseObject4.setId(4L);
  simpleDatabaseObject4.setName(SIMPLE_4);
  simpleDatabaseObject1.setBelongsToSimple(simpleDatabaseObject2);
  simpleDatabaseObject2.setBelongsToSimple(simpleDatabaseObject3);
  simpleDatabaseObject3.setBelongsToSimple(simpleDatabaseObject4);
  simpleDatabaseObject4.setBelongsToSimple(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject2);
  stubSessionGet(simpleDatabaseObject3);
  stubSessionGet(simpleDatabaseObject4);
  List<Entity> entities=null;
  try {
    entities=dataDefinition.copy(new Long[]{simpleDatabaseObject1.getId()});
  }
 catch (  StackOverflowError e) {
    Assert.fail();
  }
  final ArgumentCaptor<SampleSimpleDatabaseObject> argCaptor=ArgumentCaptor.forClass(SampleSimpleDatabaseObject.class);
  verify(session,times(1)).save(Mockito.any(SampleSimpleDatabaseObject.class));
  verify(session,times(1)).save(argCaptor.capture());
  final SampleSimpleDatabaseObject savedObject=argCaptor.getValue();
  assertEquals(SIMPLE_1,savedObject.getName());
  assertFalse(simpleDatabaseObject1.getId().equals(savedObject.getId()));
  assertEquals(SIMPLE_2,savedObject.getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject2.getId(),savedObject.getBelongsToSimple().getId());
  assertEquals(SIMPLE_3,savedObject.getBelongsToSimple().getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject3.getId(),savedObject.getBelongsToSimple().getBelongsToSimple().getId());
  assertEquals(SIMPLE_4,savedObject.getBelongsToSimple().getBelongsToSimple().getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject4.getId(),savedObject.getBelongsToSimple().getBelongsToSimple().getBelongsToSimple().getId());
  assertEquals(1,entities.size());
  assertTrue(entities.get(0).isValid());
  final Entity entityCopy=entities.get(0);
  Assert.assertEquals(SIMPLE_1,entityCopy.getField(NAME));
  Assert.assertEquals(SIMPLE_2,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(SIMPLE_3,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(SIMPLE_4,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(Long.valueOf(2L),entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getId());
  assertFalse(simpleDatabaseObject1.getId().equals(entityCopy.getId()));
}","@Test public void shouldCopyEntityWithoutInfinityCycleWith4Entities(){
  SampleSimpleDatabaseObject simpleDatabaseObject1=new SampleSimpleDatabaseObject();
  simpleDatabaseObject1.setId(1L);
  simpleDatabaseObject1.setName(SIMPLE_1);
  SampleSimpleDatabaseObject simpleDatabaseObject2=new SampleSimpleDatabaseObject();
  simpleDatabaseObject2.setId(2L);
  simpleDatabaseObject2.setName(SIMPLE_2);
  SampleSimpleDatabaseObject simpleDatabaseObject3=new SampleSimpleDatabaseObject();
  simpleDatabaseObject3.setId(3L);
  simpleDatabaseObject3.setName(SIMPLE_3);
  SampleSimpleDatabaseObject simpleDatabaseObject4=new SampleSimpleDatabaseObject();
  simpleDatabaseObject4.setId(4L);
  simpleDatabaseObject4.setName(SIMPLE_4);
  simpleDatabaseObject1.setBelongsToSimple(simpleDatabaseObject2);
  simpleDatabaseObject2.setBelongsToSimple(simpleDatabaseObject3);
  simpleDatabaseObject3.setBelongsToSimple(simpleDatabaseObject4);
  simpleDatabaseObject4.setBelongsToSimple(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject2);
  stubSessionGet(simpleDatabaseObject3);
  stubSessionGet(simpleDatabaseObject4);
  List<Entity> entities=null;
  try {
    entities=dataDefinition.copy(new Long[]{simpleDatabaseObject1.getId()});
  }
 catch (  StackOverflowError e) {
    Assert.fail();
  }
  final ArgumentCaptor<SampleSimpleDatabaseObject> argCaptor=ArgumentCaptor.forClass(SampleSimpleDatabaseObject.class);
  verify(session,times(1)).save(Mockito.any(SampleSimpleDatabaseObject.class));
  verify(session,times(1)).save(argCaptor.capture());
  final SampleSimpleDatabaseObject savedObject=argCaptor.getValue();
  assertEquals(SIMPLE_1,savedObject.getName());
  assertFalse(simpleDatabaseObject1.getId().equals(savedObject.getId()));
  assertEquals(SIMPLE_2,savedObject.getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject2.getId(),savedObject.getBelongsToSimple().getId());
  assertEquals(SIMPLE_3,savedObject.getBelongsToSimple().getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject3.getId(),savedObject.getBelongsToSimple().getBelongsToSimple().getId());
  assertEquals(SIMPLE_4,savedObject.getBelongsToSimple().getBelongsToSimple().getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject4.getId(),savedObject.getBelongsToSimple().getBelongsToSimple().getBelongsToSimple().getId());
  assertEquals(1,entities.size());
  assertTrue(entities.get(0).isValid());
  final Entity entityCopy=entities.get(0);
  Assert.assertEquals(SIMPLE_1,entityCopy.getField(NAME));
  Assert.assertEquals(SIMPLE_2,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(SIMPLE_3,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(SIMPLE_4,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(Long.valueOf(2L),entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getId());
  assertFalse(simpleDatabaseObject1.getId().equals(entityCopy.getId()));
}",0.9990396927016644
39236,"@Test public final void shouldCopyEntityWithoutInfinityCycleWith3Entities(){
  SampleSimpleDatabaseObject simpleDatabaseObject1=new SampleSimpleDatabaseObject();
  simpleDatabaseObject1.setId(1L);
  simpleDatabaseObject1.setName(SIMPLE_1);
  SampleSimpleDatabaseObject simpleDatabaseObject2=new SampleSimpleDatabaseObject();
  simpleDatabaseObject2.setId(2L);
  simpleDatabaseObject2.setName(SIMPLE_2);
  SampleSimpleDatabaseObject simpleDatabaseObject3=new SampleSimpleDatabaseObject();
  simpleDatabaseObject3.setId(3L);
  simpleDatabaseObject3.setName(SIMPLE_3);
  simpleDatabaseObject1.setBelongsToSimple(simpleDatabaseObject2);
  simpleDatabaseObject2.setBelongsToSimple(simpleDatabaseObject3);
  simpleDatabaseObject3.setBelongsToSimple(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject2);
  stubSessionGet(simpleDatabaseObject3);
  List<Entity> entities=null;
  try {
    entities=dataDefinition.copy(new Long[]{simpleDatabaseObject1.getId()});
  }
 catch (  StackOverflowError e) {
    Assert.fail();
  }
  final ArgumentCaptor<SampleSimpleDatabaseObject> argCaptor=ArgumentCaptor.forClass(SampleSimpleDatabaseObject.class);
  verify(session,times(1)).save(Mockito.any(SampleSimpleDatabaseObject.class));
  verify(session,times(1)).save(argCaptor.capture());
  final SampleSimpleDatabaseObject savedObject=argCaptor.getValue();
  assertEquals(SIMPLE_1,savedObject.getName());
  assertFalse(simpleDatabaseObject1.getId().equals(savedObject.getId()));
  assertEquals(SIMPLE_2,savedObject.getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject2.getId(),savedObject.getBelongsToSimple().getId());
  assertEquals(SIMPLE_3,savedObject.getBelongsToSimple().getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject3.getId(),savedObject.getBelongsToSimple().getBelongsToSimple().getId());
  assertEquals(1,entities.size());
  assertTrue(entities.get(0).isValid());
  final Entity entityCopy=entities.get(0);
  Assert.assertEquals(SIMPLE_1,entityCopy.getField(NAME));
  Assert.assertEquals(SIMPLE_2,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(SIMPLE_3,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(Long.valueOf(2L),entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getId());
  assertFalse(simpleDatabaseObject1.getId().equals(entityCopy.getId()));
}","@Test public void shouldCopyEntityWithoutInfinityCycleWith3Entities(){
  SampleSimpleDatabaseObject simpleDatabaseObject1=new SampleSimpleDatabaseObject();
  simpleDatabaseObject1.setId(1L);
  simpleDatabaseObject1.setName(SIMPLE_1);
  SampleSimpleDatabaseObject simpleDatabaseObject2=new SampleSimpleDatabaseObject();
  simpleDatabaseObject2.setId(2L);
  simpleDatabaseObject2.setName(SIMPLE_2);
  SampleSimpleDatabaseObject simpleDatabaseObject3=new SampleSimpleDatabaseObject();
  simpleDatabaseObject3.setId(3L);
  simpleDatabaseObject3.setName(SIMPLE_3);
  simpleDatabaseObject1.setBelongsToSimple(simpleDatabaseObject2);
  simpleDatabaseObject2.setBelongsToSimple(simpleDatabaseObject3);
  simpleDatabaseObject3.setBelongsToSimple(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject2);
  stubSessionGet(simpleDatabaseObject3);
  List<Entity> entities=null;
  try {
    entities=dataDefinition.copy(new Long[]{simpleDatabaseObject1.getId()});
  }
 catch (  StackOverflowError e) {
    Assert.fail();
  }
  final ArgumentCaptor<SampleSimpleDatabaseObject> argCaptor=ArgumentCaptor.forClass(SampleSimpleDatabaseObject.class);
  verify(session,times(1)).save(Mockito.any(SampleSimpleDatabaseObject.class));
  verify(session,times(1)).save(argCaptor.capture());
  final SampleSimpleDatabaseObject savedObject=argCaptor.getValue();
  assertEquals(SIMPLE_1,savedObject.getName());
  assertFalse(simpleDatabaseObject1.getId().equals(savedObject.getId()));
  assertEquals(SIMPLE_2,savedObject.getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject2.getId(),savedObject.getBelongsToSimple().getId());
  assertEquals(SIMPLE_3,savedObject.getBelongsToSimple().getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject3.getId(),savedObject.getBelongsToSimple().getBelongsToSimple().getId());
  assertEquals(1,entities.size());
  assertTrue(entities.get(0).isValid());
  final Entity entityCopy=entities.get(0);
  Assert.assertEquals(SIMPLE_1,entityCopy.getField(NAME));
  Assert.assertEquals(SIMPLE_2,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(SIMPLE_3,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(Long.valueOf(2L),entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getId());
  assertFalse(simpleDatabaseObject1.getId().equals(entityCopy.getId()));
}",0.9987714987714988
39237,"@Test public final void shouldCopyEntityWithoutInfinityCycleWith2Entities(){
  SampleSimpleDatabaseObject simpleDatabaseObject1=new SampleSimpleDatabaseObject();
  simpleDatabaseObject1.setId(1L);
  simpleDatabaseObject1.setName(SIMPLE_1);
  SampleSimpleDatabaseObject simpleDatabaseObject2=new SampleSimpleDatabaseObject();
  simpleDatabaseObject2.setId(2L);
  simpleDatabaseObject2.setName(SIMPLE_2);
  simpleDatabaseObject1.setBelongsToSimple(simpleDatabaseObject2);
  simpleDatabaseObject2.setBelongsToSimple(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject2);
  List<Entity> entities=null;
  try {
    entities=dataDefinition.copy(new Long[]{simpleDatabaseObject1.getId()});
  }
 catch (  StackOverflowError e) {
    Assert.fail();
  }
  final ArgumentCaptor<SampleSimpleDatabaseObject> argCaptor=ArgumentCaptor.forClass(SampleSimpleDatabaseObject.class);
  verify(session,times(1)).save(Mockito.any(SampleSimpleDatabaseObject.class));
  verify(session,times(1)).save(argCaptor.capture());
  final SampleSimpleDatabaseObject savedObject=argCaptor.getValue();
  assertEquals(SIMPLE_1,savedObject.getName());
  assertFalse(simpleDatabaseObject1.getId().equals(savedObject.getId()));
  assertEquals(SIMPLE_2,savedObject.getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject2.getId(),savedObject.getBelongsToSimple().getId());
  assertEquals(1,entities.size());
  assertTrue(entities.get(0).isValid());
  final Entity entityCopy=entities.get(0);
  Assert.assertEquals(SIMPLE_1,entityCopy.getField(NAME));
  Assert.assertEquals(SIMPLE_2,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(Long.valueOf(2L),entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getId());
  assertFalse(simpleDatabaseObject1.getId().equals(entityCopy.getId()));
}","@Test public void shouldCopyEntityWithoutInfinityCycleWith2Entities(){
  SampleSimpleDatabaseObject simpleDatabaseObject1=new SampleSimpleDatabaseObject();
  simpleDatabaseObject1.setId(1L);
  simpleDatabaseObject1.setName(SIMPLE_1);
  SampleSimpleDatabaseObject simpleDatabaseObject2=new SampleSimpleDatabaseObject();
  simpleDatabaseObject2.setId(2L);
  simpleDatabaseObject2.setName(SIMPLE_2);
  simpleDatabaseObject1.setBelongsToSimple(simpleDatabaseObject2);
  simpleDatabaseObject2.setBelongsToSimple(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject1);
  stubSessionGet(simpleDatabaseObject2);
  List<Entity> entities=null;
  try {
    entities=dataDefinition.copy(new Long[]{simpleDatabaseObject1.getId()});
  }
 catch (  StackOverflowError e) {
    Assert.fail();
  }
  final ArgumentCaptor<SampleSimpleDatabaseObject> argCaptor=ArgumentCaptor.forClass(SampleSimpleDatabaseObject.class);
  verify(session,times(1)).save(Mockito.any(SampleSimpleDatabaseObject.class));
  verify(session,times(1)).save(argCaptor.capture());
  final SampleSimpleDatabaseObject savedObject=argCaptor.getValue();
  assertEquals(SIMPLE_1,savedObject.getName());
  assertFalse(simpleDatabaseObject1.getId().equals(savedObject.getId()));
  assertEquals(SIMPLE_2,savedObject.getBelongsToSimple().getName());
  assertEquals(simpleDatabaseObject2.getId(),savedObject.getBelongsToSimple().getId());
  assertEquals(1,entities.size());
  assertTrue(entities.get(0).isValid());
  final Entity entityCopy=entities.get(0);
  Assert.assertEquals(SIMPLE_1,entityCopy.getField(NAME));
  Assert.assertEquals(SIMPLE_2,entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getField(NAME));
  Assert.assertEquals(Long.valueOf(2L),entityCopy.getBelongsToField(BELONGS_TO_SIMPLE).getId());
  assertFalse(simpleDatabaseObject1.getId().equals(entityCopy.getId()));
}",0.99836867862969
39238,"@Override public BigDecimal getDecimalField(final String fieldName){
  Object fieldValue=getField(fieldName);
  if (fieldValue == null) {
    return null;
  }
  if (fieldValue instanceof BigDecimal) {
    return (BigDecimal)fieldValue;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ dataDefinition.getPluginIdentifier()+ '.'+ dataDefinition.getName()+ ""String_Node_Str"");
}","@Override public BigDecimal getDecimalField(final String fieldName){
  final Object fieldValue=getField(fieldName);
  if (fieldValue == null) {
    return null;
  }
  if (fieldValue instanceof BigDecimal) {
    return (BigDecimal)fieldValue;
  }
  final FieldDefinition fieldDefinition=dataDefinition.getField(fieldName);
  if (fieldValue instanceof String && BigDecimal.class.equals(fieldDefinition.getType().getType())) {
    if (StringUtils.isBlank((String)fieldValue)) {
      return null;
    }
    final ValueAndError valueAndError=fieldDefinition.getType().toObject(fieldDefinition,fieldValue);
    if (valueAndError.isValid()) {
      return (BigDecimal)valueAndError.getValue();
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ dataDefinition.getPluginIdentifier()+ '.'+ dataDefinition.getName()+ ""String_Node_Str"");
}",0.6460587326120556
39239,"@Before public final void init(){
  belongsToFieldDefinition=mock(FieldDefinition.class);
  BelongsToType belongsToType=mock(BelongsToType.class);
  when(belongsToFieldDefinition.getType()).thenReturn(belongsToType);
  belongsToFieldDataDefinition=mock(DataDefinition.class);
  when(belongsToFieldDefinition.getDataDefinition()).thenReturn(belongsToFieldDataDefinition);
  FieldDefinition stringFieldDefinition=mock(FieldDefinition.class);
  when(stringFieldDefinition.isPersistent()).thenReturn(false);
  dataDefinition=mock(DataDefinition.class);
  FieldDefinition booleanFieldDefinition=mock(FieldDefinition.class);
  defaultEntity=new DefaultEntity(dataDefinition);
  Map<String,FieldDefinition> fieldsMap=Maps.newHashMap();
  fieldsMap.put(BELONGS_TO_FIELD_NAME,belongsToFieldDefinition);
  fieldsMap.put(STRING_FIELD_NAME,stringFieldDefinition);
  fieldsMap.put(BOOLEAN_FIELD_NAME,booleanFieldDefinition);
  for (  Map.Entry<String,FieldDefinition> fieldEntry : fieldsMap.entrySet()) {
    when(dataDefinition.getField(fieldEntry.getKey())).thenReturn(fieldEntry.getValue());
  }
  when(dataDefinition.getFields()).thenReturn(fieldsMap);
}","@Before public final void init(){
  belongsToFieldDefinition=mock(FieldDefinition.class);
  BelongsToType belongsToType=mock(BelongsToType.class);
  when(belongsToFieldDefinition.getType()).thenReturn(belongsToType);
  belongsToFieldDataDefinition=mock(DataDefinition.class);
  when(belongsToFieldDefinition.getDataDefinition()).thenReturn(belongsToFieldDataDefinition);
  decimalFieldDefinition=mock(FieldDefinition.class);
  final DecimalType decimalType=new DecimalType();
  when(decimalFieldDefinition.getType()).thenReturn(decimalType);
  FieldDefinition stringFieldDefinition=mock(FieldDefinition.class);
  when(stringFieldDefinition.isPersistent()).thenReturn(false);
  dataDefinition=mock(DataDefinition.class);
  FieldDefinition booleanFieldDefinition=mock(FieldDefinition.class);
  defaultEntity=new DefaultEntity(dataDefinition);
  Map<String,FieldDefinition> fieldsMap=Maps.newHashMap();
  fieldsMap.put(BELONGS_TO_FIELD_NAME,belongsToFieldDefinition);
  fieldsMap.put(STRING_FIELD_NAME,stringFieldDefinition);
  fieldsMap.put(BOOLEAN_FIELD_NAME,booleanFieldDefinition);
  fieldsMap.put(DECIMAL_FIELD_NAME,decimalFieldDefinition);
  for (  Map.Entry<String,FieldDefinition> fieldEntry : fieldsMap.entrySet()) {
    when(dataDefinition.getField(fieldEntry.getKey())).thenReturn(fieldEntry.getValue());
  }
  when(dataDefinition.getFields()).thenReturn(fieldsMap);
}",0.9083696945656484
39240,"@Test public final void shouldReturnBigDecimalValue() throws Exception {
  BigDecimal decimal=BigDecimal.ZERO;
  final String decimalFieldName=""String_Node_Str"";
  defaultEntity.setField(decimalFieldName,decimal);
  BigDecimal result=defaultEntity.getDecimalField(decimalFieldName);
  Assert.assertNotNull(result);
  Assert.assertEquals(decimal,result);
}","@Test public final void shouldReturnBigDecimalValue() throws Exception {
  BigDecimal decimal=BigDecimal.ZERO;
  defaultEntity.setField(DECIMAL_FIELD_NAME,decimal);
  BigDecimal result=defaultEntity.getDecimalField(DECIMAL_FIELD_NAME);
  Assert.assertNotNull(result);
  Assert.assertEquals(decimal,result);
}",0.4072398190045249
39241,"@Override public DefaultEntity copy(final Entity performerEntity){
  DefaultEntity entity=new DefaultEntity(dataDefinition,id);
  for (  Map.Entry<String,Object> field : fields.entrySet()) {
    Object fieldValueCopy=null;
    if (field.getValue() instanceof Entity) {
      fieldValueCopy=copyFieldEntityValue(performerEntity,(Entity)field.getValue());
    }
 else {
      fieldValueCopy=field.getValue();
    }
    entity.setField(field.getKey(),fieldValueCopy);
  }
  return entity;
}","@Override public DefaultEntity copy(final PerformerEntitiesChain performersChain){
  DefaultEntity entity=new DefaultEntity(dataDefinition,id);
  for (  Map.Entry<String,Object> field : fields.entrySet()) {
    Object fieldValueCopy=null;
    if (field.getValue() instanceof Entity) {
      fieldValueCopy=copyFieldEntityValue(performersChain,(Entity)field.getValue());
    }
 else {
      fieldValueCopy=field.getValue();
    }
    entity.setField(field.getKey(),fieldValueCopy);
  }
  return entity;
}",0.9535353535353536
39242,"private boolean belongsToAreEquals(final Entity fieldValue,final Entity otherFieldValue,final Entity performer){
  boolean btResult;
  if (fieldValue instanceof EntityAwareEqualsPerformer) {
    final EntityAwareEqualsPerformer fieldEntityValue=(EntityAwareEqualsPerformer)fieldValue;
    if (performer != null && performer.hashCode() == fieldValue.hashCode()) {
      btResult=fieldEntityValue.flatEquals(otherFieldValue);
    }
 else {
      btResult=fieldEntityValue.equals(otherFieldValue,performer);
    }
  }
 else {
    btResult=fieldValue.equals(otherFieldValue);
  }
  return btResult;
}","private boolean belongsToAreEquals(final Entity fieldValue,final Entity otherFieldValue,final PerformerEntitiesChain performersChain){
  boolean btResult;
  if (fieldValue instanceof EntityAwareEqualsPerformers) {
    final EntityAwareEqualsPerformers fieldEntityValue=(EntityAwareEqualsPerformers)fieldValue;
    if (performersChain.find(fieldValue) == null) {
      performersChain.append(this);
      btResult=fieldEntityValue.equals(otherFieldValue,performersChain);
    }
 else {
      btResult=fieldEntityValue.flatEquals(otherFieldValue);
    }
  }
 else {
    btResult=fieldValue.equals(otherFieldValue);
  }
  return btResult;
}",0.7526358475263585
39243,"@Override public boolean flatEquals(final Entity otherEntity){
  return definitionsAreEquals(otherEntity) && fieldsAreEquals(otherEntity,null,true);
}","@Override public boolean flatEquals(final Entity otherEntity){
  return definitionsAndIdsAreEqual(otherEntity) && fieldsAreEquals(otherEntity,null,true);
}",0.9770491803278688
39244,"private Entity copyFieldEntityValue(final Entity performerEntity,final Entity fieldEntity){
  Entity fieldEntityCopy=null;
  if (performerEntity != null && fieldEntity.hashCode() == performerEntity.hashCode()) {
    fieldEntityCopy=fieldEntity;
  }
 else   if (fieldEntity instanceof EntityAwareCopyPerformer) {
    Entity currentPerformer=performerEntity;
    if (performerEntity == null || performerEntity.getId() == null && performerEntity.getDataDefinition().equals(fieldEntity.getDataDefinition())) {
      currentPerformer=fieldEntity;
    }
    fieldEntityCopy=((EntityAwareCopyPerformer)fieldEntity).copy(currentPerformer);
  }
 else {
    fieldEntityCopy=fieldEntity.copy();
  }
  return fieldEntityCopy;
}","private Entity copyFieldEntityValue(final PerformerEntitiesChain performersChain,final Entity fieldEntity){
  Entity fieldEntityCopy=null;
  final Entity existingPerformer=performersChain.find(fieldEntity);
  if (existingPerformer != null) {
    fieldEntityCopy=existingPerformer;
  }
 else   if (fieldEntity instanceof EntityAwareCopyPerformers) {
    performersChain.append(this);
    fieldEntityCopy=((EntityAwareCopyPerformers)fieldEntity).copy(performersChain);
  }
 else {
    fieldEntityCopy=fieldEntity.copy();
  }
  return fieldEntityCopy;
}",0.5343873517786562
39245,"@Override public boolean equals(final Entity otherEntity,final Entity performer){
  return otherEntity == performer || definitionsAreEquals(otherEntity) && fieldsAreEquals(otherEntity,performer,false);
}","@Override public boolean equals(final Entity otherEntity,final PerformerEntitiesChain performersChain){
  return otherEntity == performersChain.getLast() || definitionsAndIdsAreEqual(otherEntity) && fieldsAreEquals(otherEntity,performersChain,false);
}",0.8175824175824176
39246,"private boolean fieldsAreEquals(final Entity otherEntity,final Entity performer,final boolean flat){
  for (  String fieldName : dataDefinition.getFields().keySet()) {
    final Object fieldValue=fields.get(fieldName);
    final Object otherFieldValue=otherEntity.getField(fieldName);
    if (fieldValue == null) {
      if (otherFieldValue != null) {
        return false;
      }
    }
 else     if (fieldValue instanceof Collection) {
      continue;
    }
 else     if (fieldValue instanceof Entity) {
      if (!flat && !belongsToAreEquals((Entity)fieldValue,(Entity)otherFieldValue,performer)) {
        return false;
      }
    }
 else     if (!fieldValue.equals(otherFieldValue)) {
      return false;
    }
  }
  return true;
}","private boolean fieldsAreEquals(final Entity otherEntity,final PerformerEntitiesChain performersChain,final boolean flat){
  for (  String fieldName : dataDefinition.getFields().keySet()) {
    final Object fieldValue=fields.get(fieldName);
    final Object otherFieldValue=otherEntity.getField(fieldName);
    if (fieldValue == null) {
      if (otherFieldValue != null) {
        return false;
      }
    }
 else     if (fieldValue instanceof Collection) {
      continue;
    }
 else     if (fieldValue instanceof Entity) {
      if (!flat && !belongsToAreEquals((Entity)fieldValue,(Entity)otherFieldValue,performersChain)) {
        return false;
      }
    }
 else     if (!fieldValue.equals(otherFieldValue)) {
      return false;
    }
  }
  return true;
}",0.9733688415446072
39247,"@Override public EntityTreeNodeImpl copy(final Entity performerEntity){
  Entity entityCopy=null;
  if (entity instanceof EntityAwareCopyPerformer) {
    entityCopy=((EntityAwareCopyPerformer)entity).copy(performerEntity);
  }
 else {
    entityCopy=entity.copy();
  }
  return new EntityTreeNodeImpl(entityCopy);
}","@Override public EntityTreeNodeImpl copy(final PerformerEntitiesChain performersChain){
  Entity entityCopy=null;
  if (entity instanceof EntityAwareCopyPerformers) {
    entityCopy=((EntityAwareCopyPerformers)entity).copy(performersChain);
  }
 else {
    entityCopy=entity.copy();
  }
  return new EntityTreeNodeImpl(entityCopy);
}",0.8858024691358025
39248,"@Override public boolean flatEquals(final Entity obj){
  boolean isEquals;
  if (entity instanceof EntityAwareEqualsPerformer) {
    isEquals=((EntityAwareEqualsPerformer)entity).flatEquals(obj);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}","@Override public boolean flatEquals(final Entity obj){
  boolean isEquals;
  if (entity instanceof EntityAwareEqualsPerformers) {
    isEquals=((EntityAwareEqualsPerformers)entity).flatEquals(obj);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}",0.9962406015037594
39249,"@Override public boolean equals(final Entity obj,final Entity performerEntity){
  boolean isEquals;
  if (entity instanceof EntityAwareEqualsPerformer) {
    isEquals=((EntityAwareEqualsPerformer)entity).equals(obj,performerEntity);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}","@Override public boolean equals(final Entity obj,final PerformerEntitiesChain performersChain){
  boolean isEquals;
  if (entity instanceof EntityAwareEqualsPerformers) {
    isEquals=((EntityAwareEqualsPerformers)entity).equals(obj,performersChain);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}",0.9131832797427653
39250,"@Override public Entity copy(final Entity performerEntity){
  Entity entityCopy=null;
  if (getEntity() instanceof EntityAwareCopyPerformer) {
    entityCopy=((EntityAwareCopyPerformer)getEntity()).copy(performerEntity);
  }
 else {
    entityCopy=getEntity().copy();
  }
  return entityCopy;
}","@Override public Entity copy(final PerformerEntitiesChain performersChain){
  Entity entityCopy=null;
  if (getEntity() instanceof EntityAwareCopyPerformers) {
    entityCopy=((EntityAwareCopyPerformers)getEntity()).copy(performersChain);
  }
 else {
    entityCopy=getEntity().copy();
  }
  return entityCopy;
}",0.8778877887788779
39251,"@Override public boolean flatEquals(final Entity obj){
  boolean isEquals;
  final Entity entity=getEntity();
  if (entity instanceof EntityAwareEqualsPerformer) {
    isEquals=((EntityAwareEqualsPerformer)entity).flatEquals(obj);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}","@Override public boolean flatEquals(final Entity obj){
  boolean isEquals;
  final Entity entity=getEntity();
  if (entity instanceof EntityAwareEqualsPerformers) {
    isEquals=((EntityAwareEqualsPerformers)entity).flatEquals(obj);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}",0.9966777408637874
39252,"@Override public boolean equals(final Entity obj,final Entity performerEntity){
  boolean isEquals;
  final Entity entity=getEntity();
  if (entity instanceof EntityAwareEqualsPerformer) {
    isEquals=((EntityAwareEqualsPerformer)entity).equals(obj,performerEntity);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}","@Override public boolean equals(final Entity obj,final PerformerEntitiesChain performersChain){
  boolean isEquals;
  final Entity entity=getEntity();
  if (entity instanceof EntityAwareEqualsPerformers) {
    isEquals=((EntityAwareEqualsPerformers)entity).equals(obj,performersChain);
  }
 else {
    isEquals=entity.equals(obj);
  }
  return isEquals;
}",0.9219653179190752
39253,"private void deleteEntity(final InternalDataDefinition dataDefinition,final Long entityId){
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  checkNotNull(databaseEntity,""String_Node_Str"",dataDefinition.getPluginIdentifier() + ""String_Node_Str"" + dataDefinition.getName(),entityId);
  Entity entity=get(dataDefinition,entityId);
  priorityService.deprioritizeEntity(dataDefinition,databaseEntity);
  Map<String,FieldDefinition> fields=dataDefinition.getFields();
  for (  FieldDefinition fieldDefinition : fields.values()) {
    if (fieldDefinition.getType() instanceof HasManyType) {
      HasManyType hasManyFieldType=(HasManyType)fieldDefinition.getType();
      EntityList children=entity.getHasManyField(fieldDefinition.getName());
      InternalDataDefinition childDataDefinition=(InternalDataDefinition)hasManyFieldType.getDataDefinition();
      if (HasManyType.Cascade.NULLIFY.equals(hasManyFieldType.getCascade()) && children != null) {
        for (        Entity child : children) {
          child.setField(hasManyFieldType.getJoinFieldName(),null);
          child=save(childDataDefinition,child);
          if (!child.isValid()) {
            throw new IllegalStateException(String.format(""String_Node_Str"",expressionService.getValue(entity,dataDefinition.getIdentifierExpression(),Locale.ENGLISH)));
          }
        }
      }
    }
    if (fieldDefinition.getType() instanceof TreeType) {
      TreeType treeFieldType=(TreeType)fieldDefinition.getType();
      EntityTree children=entity.getTreeField(fieldDefinition.getName());
      InternalDataDefinition childDataDefinition=(InternalDataDefinition)treeFieldType.getDataDefinition();
      if (TreeType.Cascade.NULLIFY.equals(treeFieldType.getCascade()) && children != null) {
        for (        Entity child : children) {
          child.setField(treeFieldType.getJoinFieldName(),null);
          child=save(childDataDefinition,child);
          if (!child.isValid()) {
            throw new IllegalStateException(String.format(""String_Node_Str"",expressionService.getValue(entity,dataDefinition.getIdentifierExpression(),Locale.ENGLISH)));
          }
        }
      }
    }
  }
  try {
    hibernateService.getCurrentSession().delete(databaseEntity);
    hibernateService.getCurrentSession().flush();
  }
 catch (  ConstraintViolationException e) {
    throw new IllegalStateException(String.format(""String_Node_Str"",expressionService.getValue(entity,dataDefinition.getIdentifierExpression(),Locale.ENGLISH)),e);
  }
  logEntityInfo(dataDefinition,entityId,""String_Node_Str"");
}","private void deleteEntity(final InternalDataDefinition dataDefinition,final Long entityId){
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  checkNotNull(databaseEntity,""String_Node_Str"",dataDefinition.getPluginIdentifier() + ""String_Node_Str"" + dataDefinition.getName(),entityId);
  Entity entity=get(dataDefinition,entityId);
  priorityService.deprioritizeEntity(dataDefinition,databaseEntity);
  Map<String,FieldDefinition> fields=dataDefinition.getFields();
  for (  FieldDefinition fieldDefinition : fields.values()) {
    if (fieldDefinition.getType() instanceof HasManyType) {
      HasManyType hasManyFieldType=(HasManyType)fieldDefinition.getType();
      EntityList children=entity.getHasManyField(fieldDefinition.getName());
      InternalDataDefinition childDataDefinition=(InternalDataDefinition)hasManyFieldType.getDataDefinition();
      if (HasManyType.Cascade.NULLIFY.equals(hasManyFieldType.getCascade()) && children != null) {
        for (        Entity child : children) {
          child.setField(hasManyFieldType.getJoinFieldName(),null);
          child=save(childDataDefinition,child);
          if (!child.isValid()) {
            throw new IllegalStateException(getConstraintViolationMessage(dataDefinition,entity));
          }
        }
      }
    }
    if (fieldDefinition.getType() instanceof TreeType) {
      TreeType treeFieldType=(TreeType)fieldDefinition.getType();
      EntityTree children=entity.getTreeField(fieldDefinition.getName());
      InternalDataDefinition childDataDefinition=(InternalDataDefinition)treeFieldType.getDataDefinition();
      if (TreeType.Cascade.NULLIFY.equals(treeFieldType.getCascade()) && children != null) {
        for (        Entity child : children) {
          child.setField(treeFieldType.getJoinFieldName(),null);
          child=save(childDataDefinition,child);
          if (!child.isValid()) {
            throw new IllegalStateException(getConstraintViolationMessage(dataDefinition,entity));
          }
        }
      }
    }
  }
  try {
    hibernateService.getCurrentSession().delete(databaseEntity);
    hibernateService.getCurrentSession().flush();
  }
 catch (  ConstraintViolationException e) {
    throw new IllegalStateException(getConstraintViolationMessage(dataDefinition,entity),e);
  }
  logEntityInfo(dataDefinition,entityId,""String_Node_Str"");
}",0.8029965580076939
39254,"public void translateItemForm(final ViewDefinitionState viewDefinitionState){
  FormComponent itemForm=(FormComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  Entity itemEntity=null;
  if (itemForm.getEntity() != null) {
    itemEntity=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_ITEM).get(itemForm.getEntity().getId());
  }
  if (itemEntity != null && itemEntity.getStringField(L_PLUGIN_IDENTIFIER) != null) {
    ComponentState itemNameField=viewDefinitionState.getComponentByReference(""String_Node_Str"");
    itemNameField.setEnabled(false);
    itemNameField.setFieldValue(translationUtilsService.getItemTranslation(itemEntity,viewDefinitionState.getLocale()));
    viewDefinitionState.getComponentByReference(""String_Node_Str"").setEnabled(false);
    viewDefinitionState.getComponentByReference(""String_Node_Str"").setEnabled(false);
  }
}","public void translateItemForm(final ViewDefinitionState viewDefinitionState){
  FormComponent itemForm=(FormComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  Entity itemEntity=null;
  if (itemForm.getEntity() != null) {
    itemEntity=dataDefinitionService.get(QcadooViewConstants.PLUGIN_IDENTIFIER,QcadooViewConstants.MODEL_ITEM).get(itemForm.getEntity().getId());
  }
  if (itemEntity != null && itemEntity.getStringField(L_PLUGIN_IDENTIFIER) != null) {
    ComponentState itemNameField=viewDefinitionState.getComponentByReference(""String_Node_Str"");
    itemNameField.setEnabled(false);
    viewDefinitionState.getComponentByReference(""String_Node_Str"").setEnabled(false);
  }
}",0.7797655768044417
39255,"@Test public final void shouldReturnListOfNodesInTheSameOrderAsTheyAppearOnTheTree() throws Exception {
  EntityTreeNode l1_b1_a11=mockEntityTreeNode(null,1,""String_Node_Str"");
  EntityTreeNode l1_b1_a10=mockEntityTreeNode(Lists.newArrayList(l1_b1_a11),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a9=mockEntityTreeNode(Lists.newArrayList(l1_b1_a10),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a8=mockEntityTreeNode(Lists.newArrayList(l1_b1_a9),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a7=mockEntityTreeNode(Lists.newArrayList(l1_b1_a8),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a6=mockEntityTreeNode(Lists.newArrayList(l1_b1_a7),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a5=mockEntityTreeNode(Lists.newArrayList(l1_b1_a6),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a4=mockEntityTreeNode(Lists.newArrayList(l1_b1_a5),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a3=mockEntityTreeNode(Lists.newArrayList(l1_b1_a4),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a2=mockEntityTreeNode(Lists.newArrayList(l1_b1_a3),1,""String_Node_Str"");
  EntityTreeNode l1_b1_a1=mockEntityTreeNode(Lists.newArrayList(l1_b1_a2),1,""String_Node_Str"");
  EntityTreeNode l1_b1_b1=mockEntityTreeNode(null,2,""String_Node_Str"");
  EntityTreeNode l1_a1=mockEntityTreeNode(null,1,""String_Node_Str"");
  EntityTreeNode l1_b1=mockEntityTreeNode(Lists.newLinkedList(Lists.newArrayList(l1_b1_b1,l1_b1_a1)),2,""String_Node_Str"");
  EntityTreeNode root=mockEntityTreeNode(Lists.newLinkedList(Lists.newArrayList(l1_a1,l1_b1)),1,""String_Node_Str"");
  given(tree.getRoot()).willReturn(root);
  given(tree.isEmpty()).willReturn(false);
  List<Entity> nodesList=entityTreeUtils.getSortedEntities(tree);
  Assert.assertEquals(15,nodesList.size());
  Assert.assertEquals(""String_Node_Str"",nodesList.get(0).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(1).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(2).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(3).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(4).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(5).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(6).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(7).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(8).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(9).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(10).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(11).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(12).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(13).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(14).getField(""String_Node_Str""));
}","@Test public final void shouldReturnListOfNodesInTheSameOrderAsTheyAppearOnTheTree() throws Exception {
  EntityTreeNode l1b1a11=mockEntityTreeNode(null,1,""String_Node_Str"");
  EntityTreeNode l1b1a10=mockEntityTreeNode(Lists.newArrayList(l1b1a11),1,""String_Node_Str"");
  EntityTreeNode l1b1a9=mockEntityTreeNode(Lists.newArrayList(l1b1a10),1,""String_Node_Str"");
  EntityTreeNode l1b1a8=mockEntityTreeNode(Lists.newArrayList(l1b1a9),1,""String_Node_Str"");
  EntityTreeNode l1b1a7=mockEntityTreeNode(Lists.newArrayList(l1b1a8),1,""String_Node_Str"");
  EntityTreeNode l1b1a6=mockEntityTreeNode(Lists.newArrayList(l1b1a7),1,""String_Node_Str"");
  EntityTreeNode l1b1a5=mockEntityTreeNode(Lists.newArrayList(l1b1a6),1,""String_Node_Str"");
  EntityTreeNode l1b1a4=mockEntityTreeNode(Lists.newArrayList(l1b1a5),1,""String_Node_Str"");
  EntityTreeNode l1b1a3=mockEntityTreeNode(Lists.newArrayList(l1b1a4),1,""String_Node_Str"");
  EntityTreeNode l1b1a2=mockEntityTreeNode(Lists.newArrayList(l1b1a3),1,""String_Node_Str"");
  EntityTreeNode l1b1a1=mockEntityTreeNode(Lists.newArrayList(l1b1a2),1,""String_Node_Str"");
  EntityTreeNode l1b1b1=mockEntityTreeNode(null,2,""String_Node_Str"");
  EntityTreeNode l1a1=mockEntityTreeNode(null,1,""String_Node_Str"");
  EntityTreeNode l1b1=mockEntityTreeNode(Lists.newLinkedList(Lists.newArrayList(l1b1b1,l1b1a1)),2,""String_Node_Str"");
  EntityTreeNode root=mockEntityTreeNode(Lists.newLinkedList(Lists.newArrayList(l1a1,l1b1)),1,""String_Node_Str"");
  given(tree.getRoot()).willReturn(root);
  given(tree.isEmpty()).willReturn(false);
  List<Entity> nodesList=entityTreeUtils.getSortedEntities(tree);
  Assert.assertEquals(15,nodesList.size());
  Assert.assertEquals(""String_Node_Str"",nodesList.get(0).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(1).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(2).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(3).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(4).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(5).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(6).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(7).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(8).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(9).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(10).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(11).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(12).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(13).getField(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",nodesList.get(14).getField(""String_Node_Str""));
}",0.9743333333333334
39256,"@BeforeClass public static void init() throws Exception {
  modelXmlToClassConverter.setBeanClassLoader(ClassLoader.getSystemClassLoader());
  for (  Class<?> clazz : modelXmlToClassConverter.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE,Utils.FULL_SECOND_ENTITY_XML_RESOURCE,Utils.FULL_THIRD_ENTITY_XML_RESOURCE,Utils.OTHER_FIRST_ENTITY_XML_RESOURCE,Utils.OTHER_SECOND_ENTITY_XML_RESOURCE)) {
    classes.put(clazz.getCanonicalName(),clazz);
  }
  for (  PropertyDescriptor propertyDescriptor : PropertyUtils.getPropertyDescriptors(classes.get(ClassNameUtils.getFullyQualifiedClassName(""String_Node_Str"",""String_Node_Str"")))) {
    propertyDescriptors.put(propertyDescriptor.getName(),propertyDescriptor);
  }
}","@BeforeClass public static void init() throws Exception {
  MODEL_XML_TO_CLASSCONVERTER.setBeanClassLoader(ClassLoader.getSystemClassLoader());
  for (  Class<?> clazz : MODEL_XML_TO_CLASSCONVERTER.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE,Utils.FULL_SECOND_ENTITY_XML_RESOURCE,Utils.FULL_THIRD_ENTITY_XML_RESOURCE,Utils.OTHER_FIRST_ENTITY_XML_RESOURCE,Utils.OTHER_SECOND_ENTITY_XML_RESOURCE)) {
    classes.put(clazz.getCanonicalName(),clazz);
  }
  for (  PropertyDescriptor propertyDescriptor : PropertyUtils.getPropertyDescriptors(classes.get(ClassNameUtils.getFullyQualifiedClassName(""String_Node_Str"",""String_Node_Str"")))) {
    propertyDescriptors.put(propertyDescriptor.getName(),propertyDescriptor);
  }
}",0.931372549019608
39257,"private void assertNodeNotExists(final String xpath,final Document document) throws Exception {
  assertTrue(xpathEngine.getMatchingNodes(xpath,document).getLength() == 0);
}","private void assertNodeNotExists(final String xpath,final Document document) throws Exception {
  assertTrue(XPATH_ENGINE.getMatchingNodes(xpath,document).getLength() == 0);
}",0.9398280802292264
39258,"@BeforeClass public static void init() throws Exception {
  hbmInputStream=modelXmlToHbmConverter.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE)[0].getInputStream();
  hbmInputSource=new InputSource(modelXmlToHbmConverter.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE)[0].getInputStream());
  hbmFirstEntity=buildControlDocument(new InputSource(modelXmlToHbmConverter.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE)[0].getInputStream()));
  hbmSecondEntity=buildControlDocument(new InputSource(modelXmlToHbmConverter.convert(Utils.FULL_SECOND_ENTITY_XML_RESOURCE)[0].getInputStream()));
  hbmThirdEntity=buildControlDocument(new InputSource(modelXmlToHbmConverter.convert(Utils.FULL_THIRD_ENTITY_XML_RESOURCE)[0].getInputStream()));
}","@BeforeClass public static void init() throws Exception {
  hbmInputStream=MODEL_XML_TO_HBM_CONVERTER.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE)[0].getInputStream();
  hbmInputSource=new InputSource(MODEL_XML_TO_HBM_CONVERTER.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE)[0].getInputStream());
  hbmFirstEntity=buildControlDocument(new InputSource(MODEL_XML_TO_HBM_CONVERTER.convert(Utils.FULL_FIRST_ENTITY_XML_RESOURCE)[0].getInputStream()));
  hbmSecondEntity=buildControlDocument(new InputSource(MODEL_XML_TO_HBM_CONVERTER.convert(Utils.FULL_SECOND_ENTITY_XML_RESOURCE)[0].getInputStream()));
  hbmThirdEntity=buildControlDocument(new InputSource(MODEL_XML_TO_HBM_CONVERTER.convert(Utils.FULL_THIRD_ENTITY_XML_RESOURCE)[0].getInputStream()));
}",0.8445945945945946
39259,"private void assertNodeExists(final String xpath,final Document document) throws Exception {
  assertTrue(xpathEngine.getMatchingNodes(xpath,document).getLength() > 0);
}","private void assertNodeExists(final String xpath,final Document document) throws Exception {
  assertTrue(XPATH_ENGINE.getMatchingNodes(xpath,document).getLength() > 0);
}",0.93841642228739
39260,"private void assertNodeEquals(final String expectedValue,final String xpath,final Document document) throws Exception {
  assertEquals(expectedValue,xpathEngine.evaluate(xpath,document));
}","private void assertNodeEquals(final String expectedValue,final String xpath,final Document document) throws Exception {
  assertEquals(expectedValue,XPATH_ENGINE.evaluate(xpath,document));
}",0.9445910290237468
39261,"private void assertNodeCount(final int expectedCount,final String xpath,final Document document) throws Exception {
  assertEquals(expectedCount,xpathEngine.getMatchingNodes(xpath,document).getLength());
}","private void assertNodeCount(final int expectedCount,final String xpath,final Document document) throws Exception {
  assertEquals(expectedCount,XPATH_ENGINE.getMatchingNodes(xpath,document).getLength());
}",0.9440389294403893
39262,"@Monitorable(threshold=500) @RequestMapping(value={CONTROLLER_PATH},method=RequestMethod.POST) @ResponseBody public Object generateCsv(@PathVariable(PLUGIN_IDENTIFIER_VARIABLE) final String pluginIdentifier,@PathVariable(VIEW_NAME_VARIABLE) final String viewName,@RequestBody final JSONObject body,final Locale locale){
  try {
    changeMaxResults(body);
    ViewDefinitionState state=crudService.invokeEvent(pluginIdentifier,viewName,body,locale);
    GridComponent grid=(GridComponent)state.getComponentByReference(""String_Node_Str"");
    String date=DateFormat.getDateInstance().format(new Date());
    File file=fileService.createExportFile(""String_Node_Str"" + grid.getName() + ""String_Node_Str""+ date+ ""String_Node_Str"");
    BufferedWriter output=null;
    try {
      output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),Charset.forName(""String_Node_Str"")));
      boolean firstName=true;
      for (      String name : grid.getColumnNames().values()) {
        if (firstName) {
          firstName=false;
        }
 else {
          output.append(EXPORTED_DOCUMENT_SEPARATOR);
        }
        output.append(""String_Node_Str"").append(normalizeString(name)).append(""String_Node_Str"");
      }
      output.append(""String_Node_Str"");
      List<Map<String,String>> rows;
      if (grid.getSelectedEntitiesIds().isEmpty()) {
        rows=grid.getColumnValuesOfAllRecords();
      }
 else {
        rows=grid.getColumnValuesOfSelectedRecords();
      }
      for (      Map<String,String> row : rows) {
        boolean firstValue=true;
        for (        String value : row.values()) {
          if (firstValue) {
            firstValue=false;
          }
 else {
            output.append(EXPORTED_DOCUMENT_SEPARATOR);
          }
          output.append(""String_Node_Str"").append(normalizeString(value)).append(""String_Node_Str"");
        }
        output.append(""String_Node_Str"");
      }
      output.flush();
    }
 catch (    IOException e) {
      throw new IllegalStateException(e.getMessage(),e);
    }
 finally {
      IOUtils.closeQuietly(output);
    }
    state.redirectTo(fileService.getUrl(file.getAbsolutePath()) + ""String_Node_Str"",true,false);
    return crudService.renderView(state);
  }
 catch (  JSONException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}","@Monitorable(threshold=500) @ResponseBody @RequestMapping(value={CONTROLLER_PATH},method=RequestMethod.POST) public Object generateCsv(@PathVariable(PLUGIN_IDENTIFIER_VARIABLE) final String pluginIdentifier,@PathVariable(VIEW_NAME_VARIABLE) final String viewName,@RequestBody final JSONObject body,final Locale locale){
  try {
    changeMaxResults(body);
    ViewDefinitionState state=crudService.invokeEvent(pluginIdentifier,viewName,body,locale);
    GridComponent grid=(GridComponent)state.getComponentByReference(""String_Node_Str"");
    String date=DateFormat.getDateInstance().format(new Date());
    File file=fileService.createExportFile(""String_Node_Str"" + grid.getName() + ""String_Node_Str""+ date+ ""String_Node_Str"");
    BufferedWriter output=null;
    try {
      output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),Charset.forName(""String_Node_Str"")));
      boolean firstName=true;
      for (      String name : grid.getColumnNames().values()) {
        if (firstName) {
          firstName=false;
        }
 else {
          output.append(EXPORTED_DOCUMENT_SEPARATOR);
        }
        output.append(""String_Node_Str"").append(normalizeString(name)).append(""String_Node_Str"");
      }
      output.append(""String_Node_Str"");
      List<Map<String,String>> rows;
      if (grid.getSelectedEntitiesIds().isEmpty()) {
        rows=grid.getColumnValuesOfAllRecords();
      }
 else {
        rows=grid.getColumnValuesOfSelectedRecords();
      }
      for (      Map<String,String> row : rows) {
        boolean firstValue=true;
        for (        String value : row.values()) {
          if (firstValue) {
            firstValue=false;
          }
 else {
            output.append(EXPORTED_DOCUMENT_SEPARATOR);
          }
          output.append(""String_Node_Str"").append(normalizeString(value)).append(""String_Node_Str"");
        }
        output.append(""String_Node_Str"");
      }
      output.flush();
    }
 catch (    IOException e) {
      throw new IllegalStateException(e.getMessage(),e);
    }
 finally {
      IOUtils.closeQuietly(output);
    }
    state.redirectTo(fileService.getUrl(file.getAbsolutePath()) + ""String_Node_Str"",true,false);
    return crudService.renderView(state);
  }
 catch (  JSONException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}",0.9939888364104766
39263,"@Monitorable(threshold=500) @RequestMapping(value={CONTROLLER_PATH},method=RequestMethod.POST) @ResponseBody public Object generatePdf(@PathVariable(PLUGIN_IDENTIFIER_VARIABLE) final String pluginIdentifier,@PathVariable(VIEW_NAME_VARIABLE) final String viewName,@RequestBody final JSONObject body,final Locale locale){
  try {
    changeMaxResults(body);
    ViewDefinitionState state=crudService.invokeEvent(pluginIdentifier,viewName,body,locale);
    GridComponent grid=(GridComponent)state.getComponentByReference(""String_Node_Str"");
    Document document=new Document(PageSize.A4.rotate());
    String date=DateFormat.getDateInstance().format(new Date());
    File file=fileService.createExportFile(""String_Node_Str"" + grid.getName() + ""String_Node_Str""+ date+ ""String_Node_Str"");
    FileOutputStream fileOutputStream=new FileOutputStream(file);
    PdfWriter writer=PdfWriter.getInstance(document,fileOutputStream);
    Entity company=dataDefinitionService.get(""String_Node_Str"",""String_Node_Str"").find().add(SearchRestrictions.eq(""String_Node_Str"",true)).setMaxResults(1).uniqueResult();
    writer.setPageEvent(new PdfPageNumbering(translationService.translate(""String_Node_Str"",locale),translationService.translate(""String_Node_Str"",locale),""String_Node_Str"",company,translationService.translate(""String_Node_Str"",locale),securityService.getCurrentUserName()));
    document.setMargins(40,40,60,60);
    document.addTitle(""String_Node_Str"");
    pdfHelper.addMetaData(document);
    writer.createXmpMetadata();
    document.open();
    String title=translationService.translate(pluginIdentifier + ""String_Node_Str"" + viewName+ ""String_Node_Str""+ grid.getName()+ ""String_Node_Str"",locale);
    Date generationDate=new Date();
    pdfHelper.addDocumentHeader(document,""String_Node_Str"",title,translationService.translate(""String_Node_Str"",locale),generationDate,securityService.getCurrentUserName());
    int columns=0;
    List<String> exportToPDFTableHeader=new ArrayList<String>();
    for (    String name : grid.getColumnNames().values()) {
      exportToPDFTableHeader.add(name);
      columns++;
    }
    PdfPTable table=pdfHelper.createTableWithHeader(columns,exportToPDFTableHeader,false);
    List<Map<String,String>> rows;
    if (grid.getSelectedEntitiesIds().isEmpty()) {
      rows=grid.getColumnValuesOfAllRecords();
    }
 else {
      rows=grid.getColumnValuesOfSelectedRecords();
    }
    for (    Map<String,String> row : rows) {
      for (      String value : row.values()) {
        table.addCell(new Phrase(value,FontUtils.getDejavuRegular9Dark()));
      }
    }
    document.add(table);
    pdfHelper.addEndOfDocument(document,writer,translationService.translate(""String_Node_Str"",locale));
    document.close();
    state.redirectTo(fileService.getUrl(file.getAbsolutePath()) + ""String_Node_Str"",true,false);
    return crudService.renderView(state);
  }
 catch (  JSONException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
catch (  FileNotFoundException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
catch (  DocumentException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}","@Monitorable(threshold=500) @ResponseBody @RequestMapping(value={CONTROLLER_PATH},method=RequestMethod.POST) public Object generatePdf(@PathVariable(PLUGIN_IDENTIFIER_VARIABLE) final String pluginIdentifier,@PathVariable(VIEW_NAME_VARIABLE) final String viewName,@RequestBody final JSONObject body,final Locale locale){
  try {
    changeMaxResults(body);
    ViewDefinitionState state=crudService.invokeEvent(pluginIdentifier,viewName,body,locale);
    GridComponent grid=(GridComponent)state.getComponentByReference(""String_Node_Str"");
    Document document=new Document(PageSize.A4.rotate());
    String date=DateFormat.getDateInstance().format(new Date());
    File file=fileService.createExportFile(""String_Node_Str"" + grid.getName() + ""String_Node_Str""+ date+ ""String_Node_Str"");
    FileOutputStream fileOutputStream=new FileOutputStream(file);
    PdfWriter writer=PdfWriter.getInstance(document,fileOutputStream);
    Entity company=dataDefinitionService.get(""String_Node_Str"",""String_Node_Str"").find().add(SearchRestrictions.eq(""String_Node_Str"",true)).setMaxResults(1).uniqueResult();
    writer.setPageEvent(new PdfPageNumbering(translationService.translate(""String_Node_Str"",locale),translationService.translate(""String_Node_Str"",locale),""String_Node_Str"",company,translationService.translate(""String_Node_Str"",locale),securityService.getCurrentUserName()));
    document.setMargins(40,40,60,60);
    document.addTitle(""String_Node_Str"");
    pdfHelper.addMetaData(document);
    writer.createXmpMetadata();
    document.open();
    String title=translationService.translate(pluginIdentifier + ""String_Node_Str"" + viewName+ ""String_Node_Str""+ grid.getName()+ ""String_Node_Str"",locale);
    Date generationDate=new Date();
    pdfHelper.addDocumentHeader(document,""String_Node_Str"",title,translationService.translate(""String_Node_Str"",locale),generationDate,securityService.getCurrentUserName());
    int columns=0;
    List<String> exportToPDFTableHeader=new ArrayList<String>();
    for (    String name : grid.getColumnNames().values()) {
      exportToPDFTableHeader.add(name);
      columns++;
    }
    PdfPTable table=pdfHelper.createTableWithHeader(columns,exportToPDFTableHeader,false);
    List<Map<String,String>> rows;
    if (grid.getSelectedEntitiesIds().isEmpty()) {
      rows=grid.getColumnValuesOfAllRecords();
    }
 else {
      rows=grid.getColumnValuesOfSelectedRecords();
    }
    for (    Map<String,String> row : rows) {
      for (      String value : row.values()) {
        table.addCell(new Phrase(value,FontUtils.getDejavuRegular9Dark()));
      }
    }
    document.add(table);
    pdfHelper.addEndOfDocument(document,writer,translationService.translate(""String_Node_Str"",locale));
    document.close();
    state.redirectTo(fileService.getUrl(file.getAbsolutePath()) + ""String_Node_Str"",true,false);
    return crudService.renderView(state);
  }
 catch (  JSONException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
catch (  FileNotFoundException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
catch (  DocumentException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}",0.9955780164245104
39264,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public @ResponseBody String processForgotPasswordFormView(@RequestParam final String login){
  if (setAsDemoEnviroment) {
    return null;
  }
  if (StringUtils.isBlank(login)) {
    return ""String_Node_Str"";
  }
  return performPasswordReseting(login);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody public String processForgotPasswordFormView(@RequestParam final String login){
  if (setAsDemoEnviroment) {
    return null;
  }
  if (StringUtils.isBlank(login)) {
    return ""String_Node_Str"";
  }
  return performPasswordReseting(login);
}",0.9565217391304348
39265,"@Monitorable(threshold=500) @RequestMapping(value={CONTROLLER_PATH},method=RequestMethod.POST) @ResponseBody public Object performEvent(@PathVariable(PLUGIN_IDENTIFIER_VARIABLE) final String pluginIdentifier,@PathVariable(VIEW_NAME_VARIABLE) final String viewName,@RequestBody final JSONObject body,final Locale locale){
  return crudService.invokeEventAndRenderView(pluginIdentifier,viewName,body,locale);
}","@Monitorable(threshold=500) @ResponseBody @RequestMapping(value={CONTROLLER_PATH},method=RequestMethod.POST) public Object performEvent(@PathVariable(PLUGIN_IDENTIFIER_VARIABLE) final String pluginIdentifier,@PathVariable(VIEW_NAME_VARIABLE) final String viewName,@RequestBody final JSONObject body,final Locale locale){
  return crudService.invokeEventAndRenderView(pluginIdentifier,viewName,body,locale);
}",0.965686274509804
39266,"public ModelXmlToClassConverterImpl(){
  super();
  classPool.appendClassPath(new ClassClassPath(org.hibernate.collection.PersistentSet.class));
}","public ModelXmlToClassConverterImpl(){
  super();
  classPool.appendClassPath(new ClassClassPath(org.hibernate.collection.PersistentSet.class));
  classPool.appendClassPath(new ClassClassPath(com.qcadoo.model.internal.classconverter.QcadooModelBean.class));
}",0.7209876543209877
39267,"@Override @SuppressWarnings(""String_Node_Str"") public Collection<Class<?>> convert(final Resource... resources){
  Map<String,CtClass> ctClasses=new HashMap<String,CtClass>();
  Map<String,Class<?>> existingClasses=new HashMap<String,Class<?>>();
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        existingClasses.putAll(findExistingClasses(resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        ctClasses.putAll(createClasses(existingClasses,resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource + ""String_Node_Str"");
      try {
        defineClasses(ctClasses,resource.getInputStream());
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      ModelXmlCompilingException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  List<Class<?>> classes=new ArrayList<Class<?>>();
  for (  CtClass ctClass : ctClasses.values()) {
    try {
      classes.add(ctClass.toClass(classLoader));
    }
 catch (    CannotCompileException e) {
      throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
    }
  }
  classes.addAll(existingClasses.values());
  return classes;
}","@Override @SuppressWarnings(""String_Node_Str"") public Collection<Class<?>> convert(final Resource... resources){
  Map<String,CtClass> ctClasses=new HashMap<String,CtClass>();
  Map<String,Class<?>> existingClasses=new HashMap<String,Class<?>>();
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        existingClasses.putAll(findExistingClasses(resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        ctClasses.putAll(createClasses(existingClasses,resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource + ""String_Node_Str"");
      try {
        defineClasses(ctClasses,resource.getInputStream());
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      ModelXmlCompilingException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      NotFoundException e) {
        throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  List<Class<?>> classes=new ArrayList<Class<?>>();
  for (  CtClass ctClass : ctClasses.values()) {
    try {
      classes.add(ctClass.toClass(classLoader));
    }
 catch (    CannotCompileException e) {
      throw new IllegalStateException(L_ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
    }
  }
  classes.addAll(existingClasses.values());
  return classes;
}",0.9707077186230488
39268,"private void parse(final XMLStreamReader reader,final CtClass ctClass,final String pluginIdentifier) throws XMLStreamException, ModelXmlCompilingException {
  LOG.info(""String_Node_Str"" + ctClass.getName());
  createField(ctClass,""String_Node_Str"",Long.class.getCanonicalName());
  List<String> fields=new ArrayList<String>();
  fields.add(""String_Node_Str"");
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    createField(ctClass,""String_Node_Str"",Boolean.class.getCanonicalName());
  }
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    createField(ctClass,""String_Node_Str"",Date.class.getCanonicalName());
    createField(ctClass,""String_Node_Str"",Date.class.getCanonicalName());
    createField(ctClass,""String_Node_Str"",String.class.getCanonicalName());
    createField(ctClass,""String_Node_Str"",String.class.getCanonicalName());
  }
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,TAG_MODEL)) {
      break;
    }
    if (TAG_FIELDS.equals(getTagStarted(reader))) {
      while (reader.hasNext() && reader.next() > 0) {
        if (isTagEnded(reader,TAG_FIELDS)) {
          break;
        }
        String tag=getTagStarted(reader);
        if (tag == null) {
          continue;
        }
        parseField(reader,pluginIdentifier,ctClass,tag,fields);
      }
      break;
    }
  }
  buildToString(ctClass,fields);
  buildHashCode(ctClass,fields);
  buildEquals(ctClass,fields);
}","private void parse(final XMLStreamReader reader,final CtClass ctClass,final String pluginIdentifier) throws XMLStreamException, ModelXmlCompilingException, NotFoundException {
  LOG.info(""String_Node_Str"" + ctClass.getName());
  ctClass.addInterface(classPool.get(QcadooModelBean.class.getName()));
  createField(ctClass,""String_Node_Str"",Long.class.getCanonicalName());
  List<String> fields=new ArrayList<String>();
  fields.add(""String_Node_Str"");
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    createField(ctClass,""String_Node_Str"",Boolean.class.getCanonicalName());
  }
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    createField(ctClass,""String_Node_Str"",Date.class.getCanonicalName());
    createField(ctClass,""String_Node_Str"",Date.class.getCanonicalName());
    createField(ctClass,""String_Node_Str"",String.class.getCanonicalName());
    createField(ctClass,""String_Node_Str"",String.class.getCanonicalName());
  }
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,TAG_MODEL)) {
      break;
    }
    if (TAG_FIELDS.equals(getTagStarted(reader))) {
      while (reader.hasNext() && reader.next() > 0) {
        if (isTagEnded(reader,TAG_FIELDS)) {
          break;
        }
        String tag=getTagStarted(reader);
        if (tag == null) {
          continue;
        }
        parseField(reader,pluginIdentifier,ctClass,tag,fields);
      }
      break;
    }
  }
  buildToString(ctClass,fields);
  buildHashCode(ctClass,fields);
  buildEquals(ctClass,fields);
}",0.969493798189742
39269,"private void buildHashCode(final CtClass ctClass,final List<String> fields) throws ModelXmlCompilingException {
  try {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    for (    String field : fields) {
      String fieldGetter=""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str"";
      sb.append(""String_Node_Str"" + fieldGetter + ""String_Node_Str""+ fieldGetter+ ""String_Node_Str""+ fieldGetter+ ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + sb.toString() + ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(L_FAILED_TO_COMPILE_CLASS + ctClass.getName(),e);
  }
}","private void buildHashCode(final CtClass ctClass,final List<String> fields,final boolean deep) throws ModelXmlCompilingException {
  try {
    String methodName=null;
    StringBuilder methodCode=new StringBuilder();
    methodCode.append(""String_Node_Str"");
    methodCode.append(""String_Node_Str"");
    if (deep) {
      methodName=""String_Node_Str"";
      getFieldsDeepHashCode(methodCode,fields);
    }
 else {
      methodName=""String_Node_Str"";
      getFieldsFlatHashCode(methodCode,fields);
    }
    methodCode.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + methodName + ""String_Node_Str""+ methodCode.toString()+ ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(L_FAILED_TO_COMPILE_CLASS + ctClass.getName(),e);
  }
}",0.6467661691542289
39270,"private void defineClasses(final Map<String,CtClass> ctClasses,final InputStream stream) throws XMLStreamException, ModelXmlCompilingException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,L_NAME);
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      if (ctClasses.containsKey(className)) {
        parse(reader,ctClasses.get(className),pluginIdentifier);
      }
    }
  }
  reader.close();
}","private void defineClasses(final Map<String,CtClass> ctClasses,final InputStream stream) throws XMLStreamException, ModelXmlCompilingException, NotFoundException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,L_NAME);
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      if (ctClasses.containsKey(className)) {
        parse(reader,ctClasses.get(className),pluginIdentifier);
      }
    }
  }
  reader.close();
}",0.9862617498192336
39271,"@Test public void shouldDefineProperties() throws Exception {
  assertNodeCount(19,""String_Node_Str"",hbmFirstEntity);
  assertNodeCount(0,""String_Node_Str"",hbmSecondEntity);
  assertNodeCount(0,""String_Node_Str"",hbmThirdEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
}","@Test public void shouldDefineProperties() throws Exception {
  assertNodeCount(19,""String_Node_Str"",hbmFirstEntity);
  assertNodeCount(0,""String_Node_Str"",hbmSecondEntity);
  assertNodeCount(2,""String_Node_Str"",hbmThirdEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
}",0.9990384615384617
39272,"@Test public void shouldDefineBelongsToRelation() throws Exception {
  assertNodeCount(2,""String_Node_Str"",hbmFirstEntity);
  assertNodeCount(2,""String_Node_Str"",hbmSecondEntity);
  assertNodeCount(1,""String_Node_Str"",hbmThirdEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
}","@Test public void shouldDefineBelongsToRelation() throws Exception {
  assertNodeCount(3,""String_Node_Str"",hbmFirstEntity);
  assertNodeCount(2,""String_Node_Str"",hbmSecondEntity);
  assertNodeCount(1,""String_Node_Str"",hbmThirdEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeExists(""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
  assertNodeEquals(""String_Node_Str"",""String_Node_Str"",hbmFirstEntity);
}",0.9426691729323308
39273,"@Before public void init(){
  MockitoAnnotations.initMocks(this);
  fileService=new FileServiceImpl();
  ReflectionTestUtils.setField(fileService,""String_Node_Str"",translationService);
  ReflectionTestUtils.setField(fileService,""String_Node_Str"",uploadDirectory);
  PowerMockito.mockStatic(MultiTenantUtil.class);
  given(MultiTenantUtil.getCurrentTenantId()).willReturn(0);
  given(uploadDirectory.getAbsolutePath()).willReturn(""String_Node_Str"");
  given(date.getTime()).willReturn(1234567l);
  given(entity.getField(""String_Node_Str"")).willReturn(date);
  given(entity.getDataDefinition()).willReturn(dataDefinition);
}","@Before public void init(){
  MockitoAnnotations.initMocks(this);
  fileService=new FileServiceImpl();
  ReflectionTestUtils.setField(fileService,""String_Node_Str"",translationService);
  ReflectionTestUtils.setField(fileService,""String_Node_Str"",uploadDirectory);
  PowerMockito.mockStatic(MultiTenantUtil.class);
  given(MultiTenantUtil.getCurrentTenantId()).willReturn(0);
  given(uploadDirectory.getAbsolutePath()).willReturn(""String_Node_Str"");
  given(date.getTime()).willReturn(1234567L);
  given(entity.getField(""String_Node_Str"")).willReturn(date);
  given(entity.getDataDefinition()).willReturn(dataDefinition);
}",0.9983922829581994
39274,"/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: <ul> <li>2010: 2010-12-31</li> <li>2010-03: 2010-03-31</li> <li>2010-03-06: 2010-03-06</li> </ul> Examples with down-complete: <ul> <li>2010: 2010-01-01</li> <li>2010-03: 2010-03-01</li> <li>2010-03-06: 2010-03-06</li> </ul>
 * @param dateExpression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseAndComplete(final String dateExpression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=dateExpression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(""String_Node_Str"",1);
    }
    if (year < 1500) {
      throw new ParseException(""String_Node_Str"",1);
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(""String_Node_Str"",1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(""String_Node_Str"",1).initCause(e);
  }
}","/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: <ul> <li>2010: 2010-12-31</li> <li>2010-03: 2010-03-31</li> <li>2010-03-06: 2010-03-06</li> </ul> Examples with down-complete: <ul> <li>2010: 2010-01-01</li> <li>2010-03: 2010-03-01</li> <li>2010-03-06: 2010-03-06</li> </ul>
 * @param dateExpression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseAndComplete(final String dateExpression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=dateExpression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(WRONG_DATE,1);
    }
    if (year < 1500) {
      throw new ParseException(WRONG_DATE,1);
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(WRONG_DATE,1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(WRONG_DATE,1).initCause(e);
  }
}",0.9482053611994548
39275,"@SuppressWarnings(""String_Node_Str"") @Monitorable private Entity performSave(final InternalDataDefinition dataDefinition,final Entity genericEntity,final Set<Entity> alreadySavedEntities,final Set<Entity> newlySavedEntities){
  checkNotNull(dataDefinition,""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),""String_Node_Str"");
  checkNotNull(genericEntity,""String_Node_Str"");
  if (alreadySavedEntities.contains(genericEntity)) {
    return genericEntity;
  }
  Entity genericEntityToSave=genericEntity.copy();
  Object existingDatabaseEntity=getExistingDatabaseEntity(dataDefinition,genericEntity);
  Entity existingGenericEntity=null;
  if (existingDatabaseEntity != null) {
    existingGenericEntity=entityService.convertToGenericEntity(dataDefinition,existingDatabaseEntity);
  }
  validationService.validateGenericEntity(dataDefinition,genericEntity,existingGenericEntity);
  if (!genericEntity.isValid()) {
    copyValidationErrors(dataDefinition,genericEntityToSave,genericEntity);
    if (existingGenericEntity != null) {
      copyMissingFields(genericEntityToSave,existingGenericEntity);
    }
    LOG.info(genericEntityToSave + ""String_Node_Str"");
    if (LOG.isDebugEnabled()) {
      for (      ErrorMessage error : genericEntityToSave.getGlobalErrors()) {
        LOG.debug(""String_Node_Str"" + error.getMessage());
      }
      for (      Map.Entry<String,ErrorMessage> error : genericEntityToSave.getErrors().entrySet()) {
        LOG.debug(""String_Node_Str"" + error.getKey() + ""String_Node_Str""+ error.getValue().getMessage());
      }
    }
    return genericEntityToSave;
  }
  Object databaseEntity=entityService.convertToDatabaseEntity(dataDefinition,genericEntity,existingDatabaseEntity);
  if (genericEntity.getId() == null) {
    priorityService.prioritizeEntity(dataDefinition,databaseEntity);
  }
  saveDatabaseEntity(dataDefinition,databaseEntity);
  Entity savedEntity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(savedEntity + ""String_Node_Str"");
  for (  Entry<String,FieldDefinition> fieldEntry : dataDefinition.getFields().entrySet()) {
    if (fieldEntry.getValue().getType() instanceof HasManyType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      HasManyType hasManyType=(HasManyType)fieldEntry.getValue().getType();
      if (entities == null || entities instanceof EntityListImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      List<Entity> savedEntities=saveHasManyEntities(alreadySavedEntities,newlySavedEntities,hasManyType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)hasManyType.getDataDefinition());
      EntityList dbEntities=savedEntity.getHasManyField(fieldEntry.getKey());
      removeOrphans(savedEntities,(InternalDataDefinition)hasManyType.getDataDefinition(),dbEntities);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
 else     if (fieldEntry.getValue().getType() instanceof TreeType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      if (entities == null || entities instanceof EntityTreeImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      TreeType treeType=(TreeType)fieldEntry.getValue().getType();
      List<Entity> savedEntities=saveTreeEntities(alreadySavedEntities,newlySavedEntities,treeType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)treeType.getDataDefinition(),null);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
  }
  alreadySavedEntities.add(savedEntity);
  if (genericEntity.getId() == null && savedEntity.getId() != null) {
    newlySavedEntities.add(savedEntity);
  }
  return savedEntity;
}","@SuppressWarnings(""String_Node_Str"") @Monitorable private Entity performSave(final InternalDataDefinition dataDefinition,final Entity genericEntity,final Set<Entity> alreadySavedEntities,final Set<Entity> newlySavedEntities){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(genericEntity,""String_Node_Str"");
  if (alreadySavedEntities.contains(genericEntity)) {
    return genericEntity;
  }
  Entity genericEntityToSave=genericEntity.copy();
  Object existingDatabaseEntity=getExistingDatabaseEntity(dataDefinition,genericEntity);
  Entity existingGenericEntity=null;
  if (existingDatabaseEntity != null) {
    existingGenericEntity=entityService.convertToGenericEntity(dataDefinition,existingDatabaseEntity);
  }
  validationService.validateGenericEntity(dataDefinition,genericEntity,existingGenericEntity);
  if (!genericEntity.isValid()) {
    copyValidationErrors(dataDefinition,genericEntityToSave,genericEntity);
    if (existingGenericEntity != null) {
      copyMissingFields(genericEntityToSave,existingGenericEntity);
    }
    LOG.info(genericEntityToSave + ""String_Node_Str"");
    if (LOG.isDebugEnabled()) {
      for (      ErrorMessage error : genericEntityToSave.getGlobalErrors()) {
        LOG.debug(""String_Node_Str"" + error.getMessage());
      }
      for (      Map.Entry<String,ErrorMessage> error : genericEntityToSave.getErrors().entrySet()) {
        LOG.debug(""String_Node_Str"" + error.getKey() + ""String_Node_Str""+ error.getValue().getMessage());
      }
    }
    return genericEntityToSave;
  }
  Object databaseEntity=entityService.convertToDatabaseEntity(dataDefinition,genericEntity,existingDatabaseEntity);
  if (genericEntity.getId() == null) {
    priorityService.prioritizeEntity(dataDefinition,databaseEntity);
  }
  saveDatabaseEntity(dataDefinition,databaseEntity);
  Entity savedEntity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(savedEntity + ""String_Node_Str"");
  for (  Entry<String,FieldDefinition> fieldEntry : dataDefinition.getFields().entrySet()) {
    if (fieldEntry.getValue().getType() instanceof HasManyType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      HasManyType hasManyType=(HasManyType)fieldEntry.getValue().getType();
      if (entities == null || entities instanceof EntityListImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      List<Entity> savedEntities=saveHasManyEntities(alreadySavedEntities,newlySavedEntities,hasManyType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)hasManyType.getDataDefinition());
      EntityList dbEntities=savedEntity.getHasManyField(fieldEntry.getKey());
      removeOrphans(savedEntities,(InternalDataDefinition)hasManyType.getDataDefinition(),dbEntities);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
 else     if (fieldEntry.getValue().getType() instanceof TreeType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      if (entities == null || entities instanceof EntityTreeImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      TreeType treeType=(TreeType)fieldEntry.getValue().getType();
      List<Entity> savedEntities=saveTreeEntities(alreadySavedEntities,newlySavedEntities,treeType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)treeType.getDataDefinition(),null);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
  }
  alreadySavedEntities.add(savedEntity);
  if (genericEntity.getId() == null && savedEntity.getId() != null) {
    newlySavedEntities.add(savedEntity);
  }
  return savedEntity;
}",0.9878000787091696
39276,"@Override @Transactional @Monitorable public void delete(final InternalDataDefinition dataDefinition,final Long... entityIds){
  checkNotNull(dataDefinition,""String_Node_Str"");
  checkState(dataDefinition.isDeletable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),""String_Node_Str"");
  checkState(entityIds.length > 0,""String_Node_Str"");
  for (  Long entityId : entityIds) {
    deleteEntity(dataDefinition,entityId);
  }
}","@Override @Transactional @Monitorable public void delete(final InternalDataDefinition dataDefinition,final Long... entityIds){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isDeletable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkState(entityIds.length > 0,""String_Node_Str"");
  for (  Long entityId : entityIds) {
    deleteEntity(dataDefinition,entityId);
  }
}",0.5333333333333333
39277,"@Override @Transactional(readOnly=true) @Monitorable public Entity get(final InternalDataDefinition dataDefinition,final Long entityId){
  checkNotNull(dataDefinition,""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),""String_Node_Str"");
  checkNotNull(entityId,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return null;
  }
  Entity entity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(entity + ""String_Node_Str"");
  return entity;
}","@Override @Transactional(readOnly=true) @Monitorable public Entity get(final InternalDataDefinition dataDefinition,final Long entityId){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return null;
  }
  Entity entity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(entity + ""String_Node_Str"");
  return entity;
}",0.9290060851926978
39278,"@Override @Transactional @Monitorable public void move(final InternalDataDefinition dataDefinition,final Long entityId,final int offset){
  checkNotNull(dataDefinition,""String_Node_Str"");
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),""String_Node_Str"");
  checkNotNull(entityId,""String_Node_Str"");
  checkState(offset != 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,0,offset);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}","@Override @Transactional @Monitorable public void move(final InternalDataDefinition dataDefinition,final Long entityId,final int offset){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  checkState(offset != 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,0,offset);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}",0.9436997319034852
39279,"@Override @Transactional @Monitorable public void moveTo(final InternalDataDefinition dataDefinition,final Long entityId,final int position){
  checkNotNull(dataDefinition,""String_Node_Str"");
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),""String_Node_Str"");
  checkNotNull(entityId,""String_Node_Str"");
  checkState(position > 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,position,0);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}","@Override @Transactional @Monitorable public void moveTo(final InternalDataDefinition dataDefinition,final Long entityId,final int position){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  checkState(position > 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,position,0);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}",0.944119212346993
39280,"@Override public SearchCriteriaBuilder findWithAlias(final String alias){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public SearchCriteriaBuilder findWithAlias(final String alias){
  throw new UnsupportedOperationException(CANNOT_FIND_ENTITY_FOR_DYNAMIC_DATA_DEFINITION);
}",0.8118811881188119
39281,"@Override public SearchResult find(final SearchCriteria searchCriteria){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public SearchResult find(final SearchCriteria searchCriteria){
  throw new UnsupportedOperationException(CANNOT_FIND_ENTITY_FOR_DYNAMIC_DATA_DEFINITION);
}",0.8106312292358804
39282,"private void parseField(final XMLStreamReader reader,final String pluginIdentifier,final CtClass ctClass,final String tag,final List<String> fields) throws XMLStreamException, ModelXmlCompilingException {
  FieldsTag modelTag=FieldsTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
  if (getBooleanAttribute(reader,""String_Node_Str"",true) || getStringAttribute(reader,""String_Node_Str"") == null) {
switch (modelTag) {
case PRIORITY:
case INTEGER:
      createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Integer.class.getCanonicalName());
    fields.add(getStringAttribute(reader,""String_Node_Str""));
  break;
case STRING:
case FILE:
case TEXT:
case ENUM:
case DICTIONARY:
case PASSWORD:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),String.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case DECIMAL:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),BigDecimal.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case DATETIME:
case DATE:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Date.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case BOOLEAN:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Boolean.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case BELONGSTO:
createBelongsField(ctClass,pluginIdentifier,reader);
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case MANYTOMANY:
createSetField(ctClass,reader);
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case HASMANY:
case TREE:
createSetField(ctClass,reader);
break;
default :
break;
}
}
while (reader.hasNext() && reader.next() > 0) {
if (isTagEnded(reader,tag)) {
break;
}
}
}","private void parseField(final XMLStreamReader reader,final String pluginIdentifier,final CtClass ctClass,final String tag,final List<String> fields) throws XMLStreamException, ModelXmlCompilingException {
  FieldsTag modelTag=FieldsTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
  if (getBooleanAttribute(reader,""String_Node_Str"",true) || getStringAttribute(reader,""String_Node_Str"") == null) {
switch (modelTag) {
case PRIORITY:
case INTEGER:
      createField(ctClass,getStringAttribute(reader,NAME),Integer.class.getCanonicalName());
    fields.add(getStringAttribute(reader,NAME));
  break;
case STRING:
case FILE:
case TEXT:
case ENUM:
case DICTIONARY:
case PASSWORD:
createField(ctClass,getStringAttribute(reader,NAME),String.class.getCanonicalName());
fields.add(getStringAttribute(reader,NAME));
break;
case DECIMAL:
createField(ctClass,getStringAttribute(reader,NAME),BigDecimal.class.getCanonicalName());
fields.add(getStringAttribute(reader,NAME));
break;
case DATETIME:
case DATE:
createField(ctClass,getStringAttribute(reader,NAME),Date.class.getCanonicalName());
fields.add(getStringAttribute(reader,NAME));
break;
case BOOLEAN:
createField(ctClass,getStringAttribute(reader,NAME),Boolean.class.getCanonicalName());
fields.add(getStringAttribute(reader,NAME));
break;
case BELONGSTO:
createBelongsField(ctClass,pluginIdentifier,reader);
fields.add(getStringAttribute(reader,NAME));
break;
case MANYTOMANY:
createSetField(ctClass,reader);
fields.add(getStringAttribute(reader,NAME));
break;
case HASMANY:
case TREE:
createSetField(ctClass,reader);
break;
default :
break;
}
}
while (reader.hasNext() && reader.next() > 0) {
if (isTagEnded(reader,tag)) {
break;
}
}
}",0.928246013667426
39283,"private Map<String,CtClass> createClasses(final Map<String,Class<?>> existingClasses,final InputStream stream) throws XMLStreamException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  Map<String,CtClass> ctClasses=new HashMap<String,CtClass>();
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,""String_Node_Str"");
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      if (existingClasses.containsKey(className)) {
        LOG.info(""String_Node_Str"" + className + ""String_Node_Str"");
      }
 else {
        LOG.info(""String_Node_Str"" + className);
        ctClasses.put(className,classPool.makeClass(className));
      }
      break;
    }
  }
  reader.close();
  return ctClasses;
}","private Map<String,CtClass> createClasses(final Map<String,Class<?>> existingClasses,final InputStream stream) throws XMLStreamException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  Map<String,CtClass> ctClasses=new HashMap<String,CtClass>();
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,NAME);
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      if (existingClasses.containsKey(className)) {
        LOG.info(""String_Node_Str"" + className + ""String_Node_Str"");
      }
 else {
        LOG.info(""String_Node_Str"" + className);
        ctClasses.put(className,classPool.makeClass(className));
      }
      break;
    }
  }
  reader.close();
  return ctClasses;
}",0.9885433715220948
39284,"private void createSetField(final CtClass ctClass,final XMLStreamReader reader) throws ModelXmlCompilingException {
  createField(ctClass,getStringAttribute(reader,""String_Node_Str""),""String_Node_Str"");
}","private void createSetField(final CtClass ctClass,final XMLStreamReader reader) throws ModelXmlCompilingException {
  createField(ctClass,getStringAttribute(reader,NAME),""String_Node_Str"");
}",0.9518987341772152
39285,"private void buildEquals(final CtClass ctClass,final List<String> fields) throws ModelXmlCompilingException {
  try {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + ctClass.getName() + ""String_Node_Str"");
    sb.append(ctClass.getName() + ""String_Node_Str"" + ctClass.getName()+ ""String_Node_Str"");
    for (    String field : fields) {
      sb.append(""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str"");
      sb.append(""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str"");
      sb.append(""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str""+ StringUtils.capitalize(field)+ ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + sb.toString() + ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(""String_Node_Str"" + ctClass.getName(),e);
  }
}","private void buildEquals(final CtClass ctClass,final List<String> fields) throws ModelXmlCompilingException {
  try {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + ctClass.getName() + ""String_Node_Str"");
    sb.append(ctClass.getName() + ""String_Node_Str"" + ctClass.getName()+ ""String_Node_Str"");
    for (    String field : fields) {
      sb.append(""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str"");
      sb.append(""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str"");
      sb.append(""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str""+ StringUtils.capitalize(field)+ ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + sb.toString() + ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(FAILED_TO_COMPILE_CLASS + ctClass.getName(),e);
  }
}",0.98046875
39286,"private void createBelongsField(final CtClass ctClass,final String pluginIdentifier,final XMLStreamReader reader) throws ModelXmlCompilingException {
  String plugin=getStringAttribute(reader,""String_Node_Str"");
  if (plugin == null) {
    plugin=pluginIdentifier;
  }
  String model=getStringAttribute(reader,""String_Node_Str"");
  createField(ctClass,getStringAttribute(reader,""String_Node_Str""),ClassNameUtils.getFullyQualifiedClassName(plugin,model));
}","private void createBelongsField(final CtClass ctClass,final String pluginIdentifier,final XMLStreamReader reader) throws ModelXmlCompilingException {
  String plugin=getStringAttribute(reader,""String_Node_Str"");
  if (plugin == null) {
    plugin=pluginIdentifier;
  }
  String model=getStringAttribute(reader,""String_Node_Str"");
  createField(ctClass,getStringAttribute(reader,NAME),ClassNameUtils.getFullyQualifiedClassName(plugin,model));
}",0.978865406006674
39287,"@Override @SuppressWarnings(""String_Node_Str"") public Collection<Class<?>> convert(final Resource... resources){
  Map<String,CtClass> ctClasses=new HashMap<String,CtClass>();
  Map<String,Class<?>> existingClasses=new HashMap<String,Class<?>>();
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        existingClasses.putAll(findExistingClasses(resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        ctClasses.putAll(createClasses(existingClasses,resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource + ""String_Node_Str"");
      try {
        defineClasses(ctClasses,resource.getInputStream());
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      ModelXmlCompilingException e) {
        throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  List<Class<?>> classes=new ArrayList<Class<?>>();
  for (  CtClass ctClass : ctClasses.values()) {
    try {
      classes.add(ctClass.toClass(classLoader));
    }
 catch (    CannotCompileException e) {
      throw new IllegalStateException(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  classes.addAll(existingClasses.values());
  return classes;
}","@Override @SuppressWarnings(""String_Node_Str"") public Collection<Class<?>> convert(final Resource... resources){
  Map<String,CtClass> ctClasses=new HashMap<String,CtClass>();
  Map<String,Class<?>> existingClasses=new HashMap<String,Class<?>>();
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        existingClasses.putAll(findExistingClasses(resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource);
      try {
        ctClasses.putAll(createClasses(existingClasses,resource.getInputStream()));
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  for (  Resource resource : resources) {
    if (resource.isReadable()) {
      LOG.info(""String_Node_Str"" + resource + ""String_Node_Str"");
      try {
        defineClasses(ctClasses,resource.getInputStream());
      }
 catch (      XMLStreamException e) {
        throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      ModelXmlCompilingException e) {
        throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
catch (      IOException e) {
        throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
      }
    }
  }
  List<Class<?>> classes=new ArrayList<Class<?>>();
  for (  CtClass ctClass : ctClasses.values()) {
    try {
      classes.add(ctClass.toClass(classLoader));
    }
 catch (    CannotCompileException e) {
      throw new IllegalStateException(ERROR_WHILE_PARSING_MODEL_XML + e.getMessage(),e);
    }
  }
  classes.addAll(existingClasses.values());
  return classes;
}",0.9202175883952856
39288,"private void buildHashCode(final CtClass ctClass,final List<String> fields) throws ModelXmlCompilingException {
  try {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    for (    String field : fields) {
      String fieldGetter=""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str"";
      sb.append(""String_Node_Str"" + fieldGetter + ""String_Node_Str""+ fieldGetter+ ""String_Node_Str""+ fieldGetter+ ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + sb.toString() + ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(""String_Node_Str"" + ctClass.getName(),e);
  }
}","private void buildHashCode(final CtClass ctClass,final List<String> fields) throws ModelXmlCompilingException {
  try {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    for (    String field : fields) {
      String fieldGetter=""String_Node_Str"" + StringUtils.capitalize(field) + ""String_Node_Str"";
      sb.append(""String_Node_Str"" + fieldGetter + ""String_Node_Str""+ fieldGetter+ ""String_Node_Str""+ fieldGetter+ ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + sb.toString() + ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(FAILED_TO_COMPILE_CLASS + ctClass.getName(),e);
  }
}",0.9741935483870968
39289,"private void defineClasses(final Map<String,CtClass> ctClasses,final InputStream stream) throws XMLStreamException, ModelXmlCompilingException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,""String_Node_Str"");
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      if (ctClasses.containsKey(className)) {
        parse(reader,ctClasses.get(className),pluginIdentifier);
      }
    }
  }
  reader.close();
}","private void defineClasses(final Map<String,CtClass> ctClasses,final InputStream stream) throws XMLStreamException, ModelXmlCompilingException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,NAME);
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      if (ctClasses.containsKey(className)) {
        parse(reader,ctClasses.get(className),pluginIdentifier);
      }
    }
  }
  reader.close();
}",0.9847050254916242
39290,"private void createField(final CtClass ctClass,final String name,final String clazz) throws ModelXmlCompilingException {
  try {
    ctClass.addField(CtField.make(""String_Node_Str"" + clazz + ""String_Node_Str""+ name+ ""String_Node_Str"",ctClass));
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + clazz + ""String_Node_Str""+ StringUtils.capitalize(name)+ ""String_Node_Str""+ name+ ""String_Node_Str"",ctClass));
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + StringUtils.capitalize(name) + ""String_Node_Str""+ clazz+ ""String_Node_Str""+ name+ ""String_Node_Str""+ name+ ""String_Node_Str""+ name+ ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(""String_Node_Str"" + ctClass.getName(),e);
  }
}","private void createField(final CtClass ctClass,final String name,final String clazz) throws ModelXmlCompilingException {
  try {
    ctClass.addField(CtField.make(""String_Node_Str"" + clazz + ""String_Node_Str""+ name+ ""String_Node_Str"",ctClass));
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + clazz + ""String_Node_Str""+ StringUtils.capitalize(name)+ ""String_Node_Str""+ name+ ""String_Node_Str"",ctClass));
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + StringUtils.capitalize(name) + ""String_Node_Str""+ clazz+ ""String_Node_Str""+ name+ ""String_Node_Str""+ name+ ""String_Node_Str""+ name+ ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(FAILED_TO_COMPILE_CLASS + ctClass.getName(),e);
  }
}",0.9739583333333334
39291,"private Map<String,Class<?>> findExistingClasses(final InputStream stream) throws XMLStreamException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  Map<String,Class<?>> existingClasses=new HashMap<String,Class<?>>();
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,""String_Node_Str"");
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      try {
        existingClasses.put(className,classLoader.loadClass(className));
        LOG.info(""String_Node_Str"" + className + ""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        LOG.info(""String_Node_Str"" + className + ""String_Node_Str"");
      }
      break;
    }
  }
  reader.close();
  return existingClasses;
}","private Map<String,Class<?>> findExistingClasses(final InputStream stream) throws XMLStreamException {
  XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(stream);
  Map<String,Class<?>> existingClasses=new HashMap<String,Class<?>>();
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagStarted(reader,TAG_MODEL)) {
      String pluginIdentifier=getPluginIdentifier(reader);
      String modelName=getStringAttribute(reader,NAME);
      String className=ClassNameUtils.getFullyQualifiedClassName(pluginIdentifier,modelName);
      try {
        existingClasses.put(className,classLoader.loadClass(className));
        LOG.info(""String_Node_Str"" + className + ""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        LOG.info(""String_Node_Str"" + className + ""String_Node_Str"");
      }
      break;
    }
  }
  reader.close();
  return existingClasses;
}",0.9885433715220948
39292,"private void buildToString(final CtClass ctClass,final List<String> fields) throws ModelXmlCompilingException {
  try {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"" + ctClass.getName() + ""String_Node_Str"");
    boolean first=true;
    for (    String field : fields) {
      if (first) {
        first=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"" + field + ""String_Node_Str""+ StringUtils.capitalize(field)+ ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + sb.toString() + ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(""String_Node_Str"" + ctClass.getName(),e);
  }
}","private void buildToString(final CtClass ctClass,final List<String> fields) throws ModelXmlCompilingException {
  try {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"" + ctClass.getName() + ""String_Node_Str"");
    boolean first=true;
    for (    String field : fields) {
      if (first) {
        first=false;
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"" + field + ""String_Node_Str""+ StringUtils.capitalize(field)+ ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    ctClass.addMethod(CtNewMethod.make(""String_Node_Str"" + sb.toString() + ""String_Node_Str"",ctClass));
  }
 catch (  CannotCompileException e) {
    throw new ModelXmlCompilingException(FAILED_TO_COMPILE_CLASS + ctClass.getName(),e);
  }
}",0.9747155499367888
39293,"/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: <ul> <li>2010: 2010-12-31</li> <li>2010-03: 2010-03-31</li> <li>2010-03-06: 2010-03-06</li> </ul> Examples with down-complete: <ul> <li>2010: 2010-01-01</li> <li>2010-03: 2010-03-01</li> <li>2010-03-06: 2010-03-06</li> </ul>
 * @param dateExpression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseAndComplete(final String dateExpression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=dateExpression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(WRONG_DATE,1);
    }
    if (year < 1500) {
      throw new ParseException(WRONG_DATE,1);
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(WRONG_DATE,1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(WRONG_DATE,1).initCause(e);
  }
}","/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: <ul> <li>2010: 2010-12-31</li> <li>2010-03: 2010-03-31</li> <li>2010-03-06: 2010-03-06</li> </ul> Examples with down-complete: <ul> <li>2010: 2010-01-01</li> <li>2010-03: 2010-03-01</li> <li>2010-03-06: 2010-03-06</li> </ul>
 * @param dateExpression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseAndComplete(final String dateExpression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=dateExpression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(L_WRONG_DATE,1);
    }
    if (year < 1500) {
      throw new ParseException(L_WRONG_DATE,1);
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(L_WRONG_DATE,1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(L_WRONG_DATE,1).initCause(e);
  }
}",0.9981743496120492
39294,"@SuppressWarnings(""String_Node_Str"") @Monitorable private Entity performSave(final InternalDataDefinition dataDefinition,final Entity genericEntity,final Set<Entity> alreadySavedEntities,final Set<Entity> newlySavedEntities){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(genericEntity,""String_Node_Str"");
  if (alreadySavedEntities.contains(genericEntity)) {
    return genericEntity;
  }
  Entity genericEntityToSave=genericEntity.copy();
  Object existingDatabaseEntity=getExistingDatabaseEntity(dataDefinition,genericEntity);
  Entity existingGenericEntity=null;
  if (existingDatabaseEntity != null) {
    existingGenericEntity=entityService.convertToGenericEntity(dataDefinition,existingDatabaseEntity);
  }
  validationService.validateGenericEntity(dataDefinition,genericEntity,existingGenericEntity);
  if (!genericEntity.isValid()) {
    copyValidationErrors(dataDefinition,genericEntityToSave,genericEntity);
    if (existingGenericEntity != null) {
      copyMissingFields(genericEntityToSave,existingGenericEntity);
    }
    LOG.info(genericEntityToSave + ""String_Node_Str"");
    if (LOG.isDebugEnabled()) {
      for (      ErrorMessage error : genericEntityToSave.getGlobalErrors()) {
        LOG.debug(""String_Node_Str"" + error.getMessage());
      }
      for (      Map.Entry<String,ErrorMessage> error : genericEntityToSave.getErrors().entrySet()) {
        LOG.debug(""String_Node_Str"" + error.getKey() + ""String_Node_Str""+ error.getValue().getMessage());
      }
    }
    return genericEntityToSave;
  }
  Object databaseEntity=entityService.convertToDatabaseEntity(dataDefinition,genericEntity,existingDatabaseEntity);
  if (genericEntity.getId() == null) {
    priorityService.prioritizeEntity(dataDefinition,databaseEntity);
  }
  saveDatabaseEntity(dataDefinition,databaseEntity);
  Entity savedEntity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(savedEntity + ""String_Node_Str"");
  for (  Entry<String,FieldDefinition> fieldEntry : dataDefinition.getFields().entrySet()) {
    if (fieldEntry.getValue().getType() instanceof HasManyType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      HasManyType hasManyType=(HasManyType)fieldEntry.getValue().getType();
      if (entities == null || entities instanceof EntityListImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      List<Entity> savedEntities=saveHasManyEntities(alreadySavedEntities,newlySavedEntities,hasManyType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)hasManyType.getDataDefinition());
      EntityList dbEntities=savedEntity.getHasManyField(fieldEntry.getKey());
      removeOrphans(savedEntities,(InternalDataDefinition)hasManyType.getDataDefinition(),dbEntities);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
 else     if (fieldEntry.getValue().getType() instanceof TreeType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      if (entities == null || entities instanceof EntityTreeImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      TreeType treeType=(TreeType)fieldEntry.getValue().getType();
      List<Entity> savedEntities=saveTreeEntities(alreadySavedEntities,newlySavedEntities,treeType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)treeType.getDataDefinition(),null);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
  }
  alreadySavedEntities.add(savedEntity);
  if (genericEntity.getId() == null && savedEntity.getId() != null) {
    newlySavedEntities.add(savedEntity);
  }
  return savedEntity;
}","@SuppressWarnings(""String_Node_Str"") @Monitorable private Entity performSave(final InternalDataDefinition dataDefinition,final Entity genericEntity,final Set<Entity> alreadySavedEntities,final Set<Entity> newlySavedEntities){
  checkNotNull(dataDefinition,L_DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isEnabled(),L_DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(genericEntity,""String_Node_Str"");
  if (alreadySavedEntities.contains(genericEntity)) {
    return genericEntity;
  }
  Entity genericEntityToSave=genericEntity.copy();
  Object existingDatabaseEntity=getExistingDatabaseEntity(dataDefinition,genericEntity);
  Entity existingGenericEntity=null;
  if (existingDatabaseEntity != null) {
    existingGenericEntity=entityService.convertToGenericEntity(dataDefinition,existingDatabaseEntity);
  }
  validationService.validateGenericEntity(dataDefinition,genericEntity,existingGenericEntity);
  if (!genericEntity.isValid()) {
    copyValidationErrors(dataDefinition,genericEntityToSave,genericEntity);
    if (existingGenericEntity != null) {
      copyMissingFields(genericEntityToSave,existingGenericEntity);
    }
    LOG.info(genericEntityToSave + ""String_Node_Str"");
    if (LOG.isDebugEnabled()) {
      for (      ErrorMessage error : genericEntityToSave.getGlobalErrors()) {
        LOG.debug(""String_Node_Str"" + error.getMessage());
      }
      for (      Map.Entry<String,ErrorMessage> error : genericEntityToSave.getErrors().entrySet()) {
        LOG.debug(""String_Node_Str"" + error.getKey() + ""String_Node_Str""+ error.getValue().getMessage());
      }
    }
    return genericEntityToSave;
  }
  Object databaseEntity=entityService.convertToDatabaseEntity(dataDefinition,genericEntity,existingDatabaseEntity);
  if (genericEntity.getId() == null) {
    priorityService.prioritizeEntity(dataDefinition,databaseEntity);
  }
  saveDatabaseEntity(dataDefinition,databaseEntity);
  Entity savedEntity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(savedEntity + ""String_Node_Str"");
  for (  Entry<String,FieldDefinition> fieldEntry : dataDefinition.getFields().entrySet()) {
    if (fieldEntry.getValue().getType() instanceof HasManyType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      HasManyType hasManyType=(HasManyType)fieldEntry.getValue().getType();
      if (entities == null || entities instanceof EntityListImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      List<Entity> savedEntities=saveHasManyEntities(alreadySavedEntities,newlySavedEntities,hasManyType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)hasManyType.getDataDefinition());
      EntityList dbEntities=savedEntity.getHasManyField(fieldEntry.getKey());
      removeOrphans(savedEntities,(InternalDataDefinition)hasManyType.getDataDefinition(),dbEntities);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
 else     if (fieldEntry.getValue().getType() instanceof TreeType) {
      List<Entity> entities=(List<Entity>)genericEntity.getField(fieldEntry.getKey());
      if (entities == null || entities instanceof EntityTreeImpl) {
        savedEntity.setField(fieldEntry.getKey(),entities);
        continue;
      }
      TreeType treeType=(TreeType)fieldEntry.getValue().getType();
      List<Entity> savedEntities=saveTreeEntities(alreadySavedEntities,newlySavedEntities,treeType.getJoinFieldName(),savedEntity.getId(),entities,(InternalDataDefinition)treeType.getDataDefinition(),null);
      savedEntity.setField(fieldEntry.getKey(),savedEntities);
    }
  }
  alreadySavedEntities.add(savedEntity);
  if (genericEntity.getId() == null && savedEntity.getId() != null) {
    newlySavedEntities.add(savedEntity);
  }
  return savedEntity;
}",0.9994780793319415
39295,"@Override @Transactional @Monitorable public void delete(final InternalDataDefinition dataDefinition,final Long... entityIds){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isDeletable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkState(entityIds.length > 0,""String_Node_Str"");
  for (  Long entityId : entityIds) {
    deleteEntity(dataDefinition,entityId);
  }
}","@Override @Transactional @Monitorable public void delete(final InternalDataDefinition dataDefinition,final Long... entityIds){
  checkNotNull(dataDefinition,L_DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isDeletable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),L_DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkState(entityIds.length > 0,""String_Node_Str"");
  for (  Long entityId : entityIds) {
    deleteEntity(dataDefinition,entityId);
  }
}",0.99581589958159
39296,"@Override @Transactional(readOnly=true) @Monitorable public Entity get(final InternalDataDefinition dataDefinition,final Long entityId){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return null;
  }
  Entity entity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(entity + ""String_Node_Str"");
  return entity;
}","@Override @Transactional(readOnly=true) @Monitorable public Entity get(final InternalDataDefinition dataDefinition,final Long entityId){
  checkNotNull(dataDefinition,L_DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isEnabled(),L_DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return null;
  }
  Entity entity=entityService.convertToGenericEntity(dataDefinition,databaseEntity);
  LOG.info(entity + ""String_Node_Str"");
  return entity;
}",0.9973684210526316
39297,"@Override @Transactional @Monitorable public void move(final InternalDataDefinition dataDefinition,final Long entityId,final int offset){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  checkState(offset != 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,0,offset);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}","@Override @Transactional @Monitorable public void move(final InternalDataDefinition dataDefinition,final Long entityId,final int offset){
  checkNotNull(dataDefinition,L_DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),L_DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  checkState(offset != 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,0,offset);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}",0.9979013641133264
39298,"@Override @Transactional @Monitorable public void moveTo(final InternalDataDefinition dataDefinition,final Long entityId,final int position){
  checkNotNull(dataDefinition,DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  checkState(position > 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,position,0);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}","@Override @Transactional @Monitorable public void moveTo(final InternalDataDefinition dataDefinition,final Long entityId,final int position){
  checkNotNull(dataDefinition,L_DATA_DEFINITION_MUST_BE_GIVEN);
  checkState(dataDefinition.isPrioritizable(),""String_Node_Str"");
  checkState(dataDefinition.isEnabled(),L_DATA_DEFINITION_BELONGS_TO_DISABLED_PLUGIN);
  checkNotNull(entityId,""String_Node_Str"");
  checkState(position > 0,""String_Node_Str"");
  Object databaseEntity=getDatabaseEntity(dataDefinition,entityId);
  if (databaseEntity == null) {
    LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
    return;
  }
  priorityService.move(dataDefinition,databaseEntity,position,0);
  LOG.info(""String_Node_Str"" + dataDefinition.getPluginIdentifier() + ""String_Node_Str""+ dataDefinition.getName()+ ""String_Node_Str""+ entityId+ ""String_Node_Str"");
}",0.9979166666666668
39299,"@Override public SearchCriteriaBuilder findWithAlias(final String alias){
  throw new UnsupportedOperationException(CANNOT_FIND_ENTITY_FOR_DYNAMIC_DATA_DEFINITION);
}","@Override public SearchCriteriaBuilder findWithAlias(final String alias){
  throw new UnsupportedOperationException(L_CANNOT_FIND_ENTITY_FOR_DYNAMIC_DATA_DEFINITION);
}",0.994011976047904
39300,"@Override public SearchResult find(final SearchCriteria searchCriteria){
  throw new UnsupportedOperationException(CANNOT_FIND_ENTITY_FOR_DYNAMIC_DATA_DEFINITION);
}","@Override public SearchResult find(final SearchCriteria searchCriteria){
  throw new UnsupportedOperationException(L_CANNOT_FIND_ENTITY_FOR_DYNAMIC_DATA_DEFINITION);
}",0.993975903614458
39301,"private void parseOptions(){
  for (  ComponentOption option : getOptions()) {
    if (""String_Node_Str"".equals(option.getType())) {
      correspondingView=option.getValue();
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      correspondingComponent=option.getValue();
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      correspondingLookup=option.getValue();
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      correspondingViewInModal=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      paginable=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      creatable=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      multiselect=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      hasPredefinedFilters=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      deletable=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      height=Integer.parseInt(option.getValue());
    }
 else     if (WIDTH2.equals(option.getType())) {
      width=Integer.parseInt(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      width=0;
      height=0;
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      lookup=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      searchableColumns.addAll(parseColumns(option.getValue()));
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      orderableColumns.addAll(parseColumns(option.getValue()));
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      defaultOrderColumn=option.getAtrributeValue(""String_Node_Str"");
      defaultOrderDirection=option.getAtrributeValue(""String_Node_Str"");
      if (predefinedFilters != null) {
        for (        PredefinedFilter predefinedFilter : predefinedFilters) {
          if (predefinedFilter.getOrderColumn() == null) {
            predefinedFilter.setOrderColumn(defaultOrderColumn);
            predefinedFilter.setOrderDirection(defaultOrderDirection);
          }
        }
      }
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      parseColumnOption(option);
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      weakRelation=Boolean.parseBoolean(option.getValue());
    }
  }
  if (defaultOrderColumn == null) {
    throwIllegalStateException(""String_Node_Str"");
  }
}","private void parseOptions(){
  for (  ComponentOption option : getOptions()) {
    if (""String_Node_Str"".equals(option.getType())) {
      correspondingView=option.getValue();
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      correspondingComponent=option.getValue();
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      correspondingLookup=option.getValue();
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      correspondingViewInModal=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      paginable=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      creatable=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      multiselect=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      hasPredefinedFilters=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      deletable=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      height=Integer.parseInt(option.getValue());
    }
 else     if (WIDTH.equals(option.getType())) {
      width=Integer.parseInt(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      width=0;
      height=0;
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      lookup=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      searchableColumns.addAll(parseColumns(option.getValue()));
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      orderableColumns.addAll(parseColumns(option.getValue()));
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      defaultOrderColumn=option.getAtrributeValue(COLUMN);
      defaultOrderDirection=option.getAtrributeValue(""String_Node_Str"");
      if (predefinedFilters != null) {
        for (        PredefinedFilter predefinedFilter : predefinedFilters) {
          if (predefinedFilter.getOrderColumn() == null) {
            predefinedFilter.setOrderColumn(defaultOrderColumn);
            predefinedFilter.setOrderDirection(defaultOrderDirection);
          }
        }
      }
    }
 else     if (COLUMN.equals(option.getType())) {
      parseColumnOption(option);
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      weakRelation=Boolean.parseBoolean(option.getValue());
    }
  }
  if (defaultOrderColumn == null) {
    throwIllegalStateException(""String_Node_Str"");
  }
}",0.992128866922936
39302,"private JSONArray getColumnsForJsOptions(final Locale locale) throws JSONException {
  JSONArray jsonColumns=new JSONArray();
  String nameTranslation=null;
  for (  GridComponentColumn column : columns.values()) {
    if (column.getFields().size() == 1) {
      String fieldCode=getDataDefinition().getPluginIdentifier() + ""String_Node_Str"" + getDataDefinition().getName()+ ""String_Node_Str""+ column.getFields().get(0).getName();
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),fieldCode + ""String_Node_Str"",locale);
    }
 else {
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),locale);
    }
    JSONObject jsonColumn=new JSONObject();
    jsonColumn.put(""String_Node_Str"",column.getName());
    jsonColumn.put(""String_Node_Str"",nameTranslation);
    jsonColumn.put(""String_Node_Str"",column.isLink());
    jsonColumn.put(""String_Node_Str"",column.isHidden());
    jsonColumn.put(WIDTH2,column.getWidth());
    jsonColumn.put(""String_Node_Str"",column.getAlign());
    jsonColumn.put(""String_Node_Str"",getFilterValuesForColumn(column,locale));
    jsonColumns.put(jsonColumn);
  }
  return jsonColumns;
}","private JSONArray getColumnsForJsOptions(final Locale locale) throws JSONException {
  JSONArray jsonColumns=new JSONArray();
  String nameTranslation=null;
  for (  GridComponentColumn column : columns.values()) {
    if (column.getFields().size() == 1) {
      String fieldCode=getDataDefinition().getPluginIdentifier() + ""String_Node_Str"" + getDataDefinition().getName()+ ""String_Node_Str""+ column.getFields().get(0).getName();
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),fieldCode + ""String_Node_Str"",locale);
    }
 else {
      nameTranslation=getTranslationService().translate(getTranslationPath() + ""String_Node_Str"" + column.getName(),locale);
    }
    JSONObject jsonColumn=new JSONObject();
    jsonColumn.put(""String_Node_Str"",column.getName());
    jsonColumn.put(""String_Node_Str"",nameTranslation);
    jsonColumn.put(""String_Node_Str"",column.isLink());
    jsonColumn.put(""String_Node_Str"",column.isHidden());
    jsonColumn.put(WIDTH,column.getWidth());
    jsonColumn.put(""String_Node_Str"",column.getAlign());
    jsonColumn.put(""String_Node_Str"",getFilterValuesForColumn(column,locale));
    jsonColumns.put(jsonColumn);
  }
  return jsonColumns;
}",0.99959661153691
39303,"@Override protected JSONObject getJsOptions(final Locale locale) throws JSONException {
  JSONObject json=super.getJsOptions(locale);
  json.put(""String_Node_Str"",paginable);
  json.put(""String_Node_Str"",deletable);
  json.put(""String_Node_Str"",creatable);
  json.put(""String_Node_Str"",multiselect);
  json.put(""String_Node_Str"",activable);
  json.put(""String_Node_Str"",weakRelation);
  json.put(""String_Node_Str"",hasPredefinedFilters);
  JSONArray predefinedFiltersArray=new JSONArray();
  for (  PredefinedFilter predefinedFilter : predefinedFilters) {
    predefinedFiltersArray.put(predefinedFilter.toJson());
  }
  json.put(""String_Node_Str"",predefinedFiltersArray);
  json.put(""String_Node_Str"",height);
  json.put(WIDTH2,width);
  json.put(""String_Node_Str"",width == 0 || height == 0);
  json.put(""String_Node_Str"",lookup);
  json.put(""String_Node_Str"",correspondingView);
  json.put(""String_Node_Str"",correspondingComponent);
  json.put(""String_Node_Str"",correspondingLookup);
  json.put(""String_Node_Str"",correspondingViewInModal);
  json.put(""String_Node_Str"",getDataDefinition().isPrioritizable());
  json.put(""String_Node_Str"",new JSONArray(searchableColumns));
  json.put(""String_Node_Str"",new JSONArray(orderableColumns));
  if (belongsToFieldDefinition != null) {
    json.put(""String_Node_Str"",belongsToFieldDefinition.getName());
  }
  json.put(""String_Node_Str"",getColumnsForJsOptions(locale));
  JSONObject translations=new JSONObject();
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  for (  PredefinedFilter filter : predefinedFilters) {
    addTranslation(translations,""String_Node_Str"" + filter.getName(),locale);
  }
  translations.put(""String_Node_Str"",getTranslationService().translate(""String_Node_Str"",locale));
  json.put(""String_Node_Str"",translations);
  return json;
}","@Override protected JSONObject getJsOptions(final Locale locale) throws JSONException {
  JSONObject json=super.getJsOptions(locale);
  json.put(""String_Node_Str"",paginable);
  json.put(""String_Node_Str"",deletable);
  json.put(""String_Node_Str"",creatable);
  json.put(""String_Node_Str"",multiselect);
  json.put(""String_Node_Str"",activable);
  json.put(""String_Node_Str"",weakRelation);
  json.put(""String_Node_Str"",hasPredefinedFilters);
  JSONArray predefinedFiltersArray=new JSONArray();
  for (  PredefinedFilter predefinedFilter : predefinedFilters) {
    predefinedFiltersArray.put(predefinedFilter.toJson());
  }
  json.put(""String_Node_Str"",predefinedFiltersArray);
  json.put(""String_Node_Str"",height);
  json.put(WIDTH,width);
  json.put(""String_Node_Str"",width == 0 || height == 0);
  json.put(""String_Node_Str"",lookup);
  json.put(""String_Node_Str"",correspondingView);
  json.put(""String_Node_Str"",correspondingComponent);
  json.put(""String_Node_Str"",correspondingLookup);
  json.put(""String_Node_Str"",correspondingViewInModal);
  json.put(""String_Node_Str"",getDataDefinition().isPrioritizable());
  json.put(""String_Node_Str"",new JSONArray(searchableColumns));
  json.put(""String_Node_Str"",new JSONArray(orderableColumns));
  if (belongsToFieldDefinition != null) {
    json.put(""String_Node_Str"",belongsToFieldDefinition.getName());
  }
  json.put(""String_Node_Str"",getColumnsForJsOptions(locale));
  JSONObject translations=new JSONObject();
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  addTranslation(translations,""String_Node_Str"",locale);
  for (  PredefinedFilter filter : predefinedFilters) {
    addTranslation(translations,""String_Node_Str"" + filter.getName(),locale);
  }
  translations.put(""String_Node_Str"",getTranslationService().translate(""String_Node_Str"",locale));
  json.put(""String_Node_Str"",translations);
  return json;
}",0.9998271988940728
39304,"private void parsePredefinedFilterChildNodes(final NodeList componentNodes,final ViewDefinitionParser parser) throws ViewDefinitionParserNodeException {
  for (int i=0; i < componentNodes.getLength(); i++) {
    Node child=componentNodes.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equals(child.getNodeName())) {
        PredefinedFilter predefinedFilter=new PredefinedFilter();
        predefinedFilter.setName(parser.getStringAttribute(child,""String_Node_Str""));
        NodeList restrictionNodes=child.getChildNodes();
        for (int restrictionNodesIndex=0; restrictionNodesIndex < restrictionNodes.getLength(); restrictionNodesIndex++) {
          Node restrictionNode=restrictionNodes.item(restrictionNodesIndex);
          if (restrictionNode.getNodeType() == Node.ELEMENT_NODE) {
            if (""String_Node_Str"".equals(restrictionNode.getNodeName())) {
              predefinedFilter.addFilterRestriction(parser.getStringAttribute(restrictionNode,""String_Node_Str""),parser.getStringAttribute(restrictionNode,""String_Node_Str""));
            }
 else             if (""String_Node_Str"".equals(restrictionNode.getNodeName())) {
              String column=parser.getStringAttribute(restrictionNode,""String_Node_Str"");
              String direction=parser.getStringAttribute(restrictionNode,""String_Node_Str"");
              if (column == null) {
                throw new ViewDefinitionParserNodeException(restrictionNode,""String_Node_Str"");
              }
              if (direction == null) {
                direction=""String_Node_Str"";
              }
 else {
                if (!(""String_Node_Str"".equals(direction) || ""String_Node_Str"".equals(direction))) {
                  throw new ViewDefinitionParserNodeException(restrictionNode,""String_Node_Str"" + direction);
                }
              }
              predefinedFilter.setOrderColumn(column);
              predefinedFilter.setOrderDirection(direction);
            }
 else {
              throw new ViewDefinitionParserNodeException(restrictionNode,""String_Node_Str"");
            }
          }
        }
        if (predefinedFilter.getOrderColumn() == null && defaultOrderColumn != null) {
          predefinedFilter.setOrderColumn(defaultOrderColumn);
          predefinedFilter.setOrderDirection(defaultOrderDirection);
        }
        predefinedFilters.add(predefinedFilter);
      }
 else {
        throwIllegalStateException(""String_Node_Str"");
        throw new ViewDefinitionParserNodeException(child,""String_Node_Str"");
      }
    }
  }
}","private void parsePredefinedFilterChildNodes(final NodeList componentNodes,final ViewDefinitionParser parser) throws ViewDefinitionParserNodeException {
  for (int i=0; i < componentNodes.getLength(); i++) {
    Node child=componentNodes.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equals(child.getNodeName())) {
        PredefinedFilter predefinedFilter=new PredefinedFilter();
        predefinedFilter.setName(parser.getStringAttribute(child,""String_Node_Str""));
        NodeList restrictionNodes=child.getChildNodes();
        for (int restrictionNodesIndex=0; restrictionNodesIndex < restrictionNodes.getLength(); restrictionNodesIndex++) {
          Node restrictionNode=restrictionNodes.item(restrictionNodesIndex);
          if (restrictionNode.getNodeType() == Node.ELEMENT_NODE) {
            if (""String_Node_Str"".equals(restrictionNode.getNodeName())) {
              predefinedFilter.addFilterRestriction(parser.getStringAttribute(restrictionNode,COLUMN),parser.getStringAttribute(restrictionNode,""String_Node_Str""));
            }
 else             if (""String_Node_Str"".equals(restrictionNode.getNodeName())) {
              String column=parser.getStringAttribute(restrictionNode,COLUMN);
              String direction=parser.getStringAttribute(restrictionNode,""String_Node_Str"");
              if (column == null) {
                throw new ViewDefinitionParserNodeException(restrictionNode,""String_Node_Str"");
              }
              if (direction == null) {
                direction=""String_Node_Str"";
              }
 else {
                if (!(""String_Node_Str"".equals(direction) || ""String_Node_Str"".equals(direction))) {
                  throw new ViewDefinitionParserNodeException(restrictionNode,""String_Node_Str"" + direction);
                }
              }
              predefinedFilter.setOrderColumn(column);
              predefinedFilter.setOrderDirection(direction);
            }
 else {
              throw new ViewDefinitionParserNodeException(restrictionNode,""String_Node_Str"");
            }
          }
        }
        if (predefinedFilter.getOrderColumn() == null && defaultOrderColumn != null) {
          predefinedFilter.setOrderColumn(defaultOrderColumn);
          predefinedFilter.setOrderDirection(defaultOrderDirection);
        }
        predefinedFilters.add(predefinedFilter);
      }
 else {
        throwIllegalStateException(""String_Node_Str"");
        throw new ViewDefinitionParserNodeException(child,""String_Node_Str"");
      }
    }
  }
}",0.9910436137071652
39305,"private void parseColumnOption(final ComponentOption option){
  GridComponentColumn column=new GridComponentColumn(option.getAtrributeValue(""String_Node_Str""));
  String fields=option.getAtrributeValue(""String_Node_Str"");
  if (fields != null) {
    for (    FieldDefinition field : parseFields(fields,column)) {
      column.addField(field);
    }
  }
  column.setExpression(option.getAtrributeValue(""String_Node_Str""));
  String columnWidth=option.getAtrributeValue(WIDTH2);
  if (columnWidth != null) {
    column.setWidth(Integer.valueOf(columnWidth));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setLink(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setHidden(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  columns.put(column.getName(),column);
}","private void parseColumnOption(final ComponentOption option){
  GridComponentColumn column=new GridComponentColumn(option.getAtrributeValue(""String_Node_Str""));
  String fields=option.getAtrributeValue(""String_Node_Str"");
  if (fields != null) {
    for (    FieldDefinition field : parseFields(fields,column)) {
      column.addField(field);
    }
  }
  column.setExpression(option.getAtrributeValue(""String_Node_Str""));
  String columnWidth=option.getAtrributeValue(WIDTH);
  if (columnWidth != null) {
    column.setWidth(Integer.valueOf(columnWidth));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setLink(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setHidden(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  columns.put(column.getName(),column);
}",0.9994490358126722
39306,"private String getCopyValueOfUniqueField(final DataDefinition dataDefinition,final FieldDefinition fieldDefinition,final String value){
  Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(value);
  String oldValue=value;
  int index=1;
  if (matcher.matches()) {
    oldValue=matcher.group(1);
    index=Integer.valueOf(matcher.group(2)) + 1;
  }
  while (true) {
    String newValue=oldValue + ""String_Node_Str"" + (index++)+ ""String_Node_Str"";
    int matches=dataDefinition.find().setMaxResults(1).add(SearchRestrictions.eq(fieldDefinition.getName(),newValue)).list().getTotalNumberOfEntities();
    if (matches == 0) {
      return newValue;
    }
  }
}","private String getCopyValueOfUniqueField(final DataDefinition dataDefinition,final FieldDefinition fieldDefinition,final String value){
  if (value == null) {
    return value;
  }
 else {
    Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(value);
    String oldValue=value;
    int index=1;
    if (matcher.matches()) {
      oldValue=matcher.group(1);
      index=Integer.valueOf(matcher.group(2)) + 1;
    }
    while (true) {
      String newValue=oldValue + ""String_Node_Str"" + (index++)+ ""String_Node_Str"";
      int matches=dataDefinition.find().setMaxResults(1).add(SearchRestrictions.eq(fieldDefinition.getName(),newValue)).list().getTotalNumberOfEntities();
      if (matches == 0) {
        return newValue;
      }
    }
  }
}",0.939929328621908
39307,"@Override protected JSONObject renderContent() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",scale.getZoomLevel().toString());
  json.put(""String_Node_Str"",dateFromErrorMessage);
  json.put(""String_Node_Str"",dateToErrorMessage);
  if (dateFromErrorMessage == null) {
    json.put(""String_Node_Str"",dateType.toString(scale.getDateFrom(),getLocale()));
  }
  if (dateToErrorMessage == null) {
    json.put(""String_Node_Str"",dateType.toString(scale.getDateTo(),getLocale()));
  }
  json.put(""String_Node_Str"",globalErrorMessage);
  if (globalErrorMessage == null) {
    json.put(""String_Node_Str"",scale.getAsJson());
    JSONArray rowsArray=new JSONArray();
    JSONArray itemsArray=new JSONArray();
    for (    Map.Entry<String,List<GanttChartItem>> entry : items.entrySet()) {
      rowsArray.put(entry.getKey());
      for (      GanttChartItem item : entry.getValue()) {
        if (item != null) {
          itemsArray.put(item.getAsJson());
        }
      }
    }
    json.put(""String_Node_Str"",rowsArray);
    json.put(""String_Node_Str"",itemsArray);
    JSONArray collisionItemsArray=new JSONArray();
    for (    Map.Entry<String,List<GanttChartItem>> entry : collisionItems.entrySet()) {
      for (      GanttChartItem item : entry.getValue()) {
        if (item != null) {
          collisionItemsArray.put(item.getAsJson());
        }
      }
    }
    json.put(""String_Node_Str"",collisionItemsArray);
    json.put(""String_Node_Str"",selectedEntityId);
  }
  return json;
}","@Override protected JSONObject renderContent() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",scale.getZoomLevel().toString());
  json.put(""String_Node_Str"",dateFromErrorMessage);
  json.put(""String_Node_Str"",dateToErrorMessage);
  if (dateFromErrorMessage == null) {
    json.put(""String_Node_Str"",DATETYPE.toString(scale.getDateFrom(),getLocale()));
  }
  if (dateToErrorMessage == null) {
    json.put(""String_Node_Str"",DATETYPE.toString(scale.getDateTo(),getLocale()));
  }
  json.put(""String_Node_Str"",globalErrorMessage);
  if (globalErrorMessage == null) {
    json.put(""String_Node_Str"",scale.getAsJson());
    JSONArray rowsArray=new JSONArray();
    JSONArray itemsArray=new JSONArray();
    for (    Map.Entry<String,List<GanttChartItem>> entry : items.entrySet()) {
      rowsArray.put(entry.getKey());
      for (      GanttChartItem item : entry.getValue()) {
        if (item != null) {
          itemsArray.put(item.getAsJson());
        }
      }
    }
    json.put(""String_Node_Str"",rowsArray);
    json.put(""String_Node_Str"",itemsArray);
    JSONArray collisionItemsArray=new JSONArray();
    for (    Map.Entry<String,List<GanttChartItem>> entry : collisionItems.entrySet()) {
      for (      GanttChartItem item : entry.getValue()) {
        if (item != null) {
          collisionItemsArray.put(item.getAsJson());
        }
      }
    }
    json.put(""String_Node_Str"",collisionItemsArray);
    json.put(""String_Node_Str"",selectedEntityId);
  }
  return json;
}",0.9908196721311476
39308,"@Override protected void initializeContent(final JSONObject json) throws JSONException {
  JSONObject headerDataObject=json.getJSONObject(""String_Node_Str"");
  ZoomLevel zoomLevel=ZoomLevel.valueOf(headerDataObject.getString(""String_Node_Str""));
  String dateFromString=headerDataObject.getString(""String_Node_Str"");
  String dateToString=headerDataObject.getString(""String_Node_Str"");
  DateTime now=new DateTime().withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0);
  Date dateFrom=now.plusDays(defaultStartDay).toDate();
  Date dateTo=now.plusDays(defaultEndDay).toDate();
  if (dateFromString == null || ""String_Node_Str"".equals(dateFromString)) {
    dateFromErrorMessage=translate(""String_Node_Str"");
  }
 else {
    ValueAndError dateFromVaE=dateType.toObject(null,dateFromString);
    if (dateFromVaE.getMessage() == null) {
      dateFrom=(Date)dateFromVaE.getValue();
    }
 else {
      dateFromErrorMessage=translate(""String_Node_Str"");
    }
  }
  if (dateToString == null || ""String_Node_Str"".equals(dateToString)) {
    dateToErrorMessage=translate(""String_Node_Str"");
  }
 else {
    ValueAndError dateToVaE=dateType.toObject(null,dateToString);
    if (dateToVaE.getMessage() == null) {
      dateTo=(Date)dateToVaE.getValue();
    }
 else {
      dateToErrorMessage=translate(""String_Node_Str"");
    }
  }
  scale=new GanttChartScaleImpl(this,zoomLevel,dateFrom,dateTo);
  if (dateFromErrorMessage == null && globalErrorMessage == null) {
    if (scale.isFromLargerThanTo()) {
      globalErrorMessage=translate(""String_Node_Str"");
    }
 else     if (scale.isTooLargeRange()) {
      globalErrorMessage=translate(""String_Node_Str"",""String_Node_Str"" + scale.getMaxRangeInMonths());
    }
  }
  if (json.has(""String_Node_Str"")) {
    selectedEntityId=json.getLong(""String_Node_Str"");
  }
}","@Override protected void initializeContent(final JSONObject json) throws JSONException {
  JSONObject headerDataObject=json.getJSONObject(""String_Node_Str"");
  ZoomLevel zoomLevel=ZoomLevel.valueOf(headerDataObject.getString(""String_Node_Str""));
  String dateFromString=headerDataObject.getString(""String_Node_Str"");
  String dateToString=headerDataObject.getString(""String_Node_Str"");
  DateTime now=new DateTime().withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0);
  Date dateFrom=now.plusDays(defaultStartDay).toDate();
  Date dateTo=now.plusDays(defaultEndDay).toDate();
  if (dateFromString == null || ""String_Node_Str"".equals(dateFromString)) {
    dateFromErrorMessage=translate(""String_Node_Str"");
  }
 else {
    ValueAndError dateFromVaE=DATETYPE.toObject(null,dateFromString);
    if (dateFromVaE.getMessage() == null) {
      dateFrom=(Date)dateFromVaE.getValue();
    }
 else {
      dateFromErrorMessage=translate(""String_Node_Str"");
    }
  }
  if (dateToString == null || ""String_Node_Str"".equals(dateToString)) {
    dateToErrorMessage=translate(""String_Node_Str"");
  }
 else {
    ValueAndError dateToVaE=DATETYPE.toObject(null,dateToString);
    if (dateToVaE.getMessage() == null) {
      dateTo=(Date)dateToVaE.getValue();
    }
 else {
      dateToErrorMessage=translate(""String_Node_Str"");
    }
  }
  scale=new GanttChartScaleImpl(this,zoomLevel,dateFrom,dateTo);
  if (dateFromErrorMessage == null && globalErrorMessage == null) {
    if (scale.isFromLargerThanTo()) {
      globalErrorMessage=translate(""String_Node_Str"");
    }
 else     if (scale.isTooLargeRange()) {
      globalErrorMessage=translate(""String_Node_Str"",""String_Node_Str"" + scale.getMaxRangeInMonths());
    }
  }
  if (json.has(""String_Node_Str"")) {
    selectedEntityId=json.getLong(""String_Node_Str"");
  }
}",0.9911797133406836
39309,"private JSONArray getDaysArray(){
  JSONArray daysArray=new JSONArray();
  DateTime dateTimeFrom=new DateTime(dateFrom);
  DateTime dateTimeTo=new DateTime(dateTo);
  while (dateTimeFrom.compareTo(dateTimeTo) <= 0) {
    daysArray.put(dateType.toString(dateTimeFrom.toDate(),ganttChartComponentState.getLocale()));
    dateTimeFrom=dateTimeFrom.plusDays(1);
  }
  return daysArray;
}","private JSONArray getDaysArray(){
  JSONArray daysArray=new JSONArray();
  DateTime dateTimeFrom=new DateTime(dateFrom);
  DateTime dateTimeTo=new DateTime(dateTo);
  while (dateTimeFrom.compareTo(dateTimeTo) <= 0) {
    daysArray.put(DATETYPE.toString(dateTimeFrom.toDate(),ganttChartComponentState.getLocale()));
    dateTimeFrom=dateTimeFrom.plusDays(1);
  }
  return daysArray;
}",0.97911227154047
39310,"@Test public void shouldHaveListenersInOptions() throws Exception {
  InternalViewDefinition viewDefinition=mock(InternalViewDefinition.class);
  AbstractContainerPattern parent=new WindowComponentPattern(getComponentDefinition(""String_Node_Str"",viewDefinition));
  ComponentPatternMock child1=new ComponentPatternMock(getComponentDefinition(""String_Node_Str"",""String_Node_Str"",null,parent,viewDefinition));
  ComponentPatternMock child2=new ComponentPatternMock(getComponentDefinition(""String_Node_Str"",""String_Node_Str"",null,parent,viewDefinition));
  ComponentPatternMock child3=new ComponentPatternMock(getComponentDefinition(""String_Node_Str"",null,""String_Node_Str"",parent,viewDefinition));
  parent.addChild(child1);
  parent.addChild(child2);
  parent.addChild(child3);
  parent.initialize();
  child1.initialize();
  child2.initialize();
  child3.initialize();
  Map<String,Object> model=parent.prepareView(Locale.ENGLISH);
  JSONObject options=(JSONObject)model.get(""String_Node_Str"");
  JSONArray listenersArray=options.getJSONArray(""String_Node_Str"");
  assertEquals(3,listenersArray.length());
  assertTrue(JsonArrayContain(listenersArray,""String_Node_Str""));
  assertTrue(JsonArrayContain(listenersArray,""String_Node_Str""));
  assertTrue(JsonArrayContain(listenersArray,""String_Node_Str""));
}","@Test public void shouldHaveListenersInOptions() throws Exception {
  InternalViewDefinition viewDefinition=mock(InternalViewDefinition.class);
  AbstractContainerPattern parent=new WindowComponentPattern(getComponentDefinition(""String_Node_Str"",viewDefinition));
  ComponentPatternMock child1=new ComponentPatternMock(getComponentDefinition(""String_Node_Str"",""String_Node_Str"",null,parent,viewDefinition));
  ComponentPatternMock child2=new ComponentPatternMock(getComponentDefinition(""String_Node_Str"",""String_Node_Str"",null,parent,viewDefinition));
  ComponentPatternMock child3=new ComponentPatternMock(getComponentDefinition(""String_Node_Str"",null,""String_Node_Str"",parent,viewDefinition));
  parent.addChild(child1);
  parent.addChild(child2);
  parent.addChild(child3);
  parent.initialize();
  child1.initialize();
  child2.initialize();
  child3.initialize();
  Map<String,Object> model=parent.prepareView(Locale.ENGLISH);
  JSONObject options=(JSONObject)model.get(""String_Node_Str"");
  JSONArray listenersArray=options.getJSONArray(""String_Node_Str"");
  assertEquals(3,listenersArray.length());
  assertTrue(jsonArrayContain(listenersArray,""String_Node_Str""));
  assertTrue(jsonArrayContain(listenersArray,""String_Node_Str""));
  assertTrue(jsonArrayContain(listenersArray,""String_Node_Str""));
}",0.9977011494252872
39311,"public void addRestrictionToCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  categoriesGrid.setCustomRestriction(new CustomRestriction(){
    @Override public void addRestriction(    final SearchCriteriaBuilder searchCriteriaBuilder){
      SearchDisjunction disjunction=SearchRestrictions.disjunction();
      for (      String[] category : hiddenCategories) {
        disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(""String_Node_Str"",category[0]),SearchRestrictions.eq(""String_Node_Str"",category[1])));
      }
      searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
    }
  }
);
}","public void addRestrictionToCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  categoriesGrid.setCustomRestriction(new CustomRestriction(){
    @Override public void addRestriction(    final SearchCriteriaBuilder searchCriteriaBuilder){
      SearchDisjunction disjunction=SearchRestrictions.disjunction();
      for (      String[] category : HIDDEN_CATEGORIES) {
        disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(""String_Node_Str"",category[0]),SearchRestrictions.eq(""String_Node_Str"",category[1])));
      }
      searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
    }
  }
);
}",0.9775967413441956
39312,"@Override public void addRestriction(final SearchCriteriaBuilder searchCriteriaBuilder){
  SearchDisjunction disjunction=SearchRestrictions.disjunction();
  for (  String[] category : hiddenCategories) {
    disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(""String_Node_Str"",category[0]),SearchRestrictions.eq(""String_Node_Str"",category[1])));
  }
  searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
}","@Override public void addRestriction(final SearchCriteriaBuilder searchCriteriaBuilder){
  SearchDisjunction disjunction=SearchRestrictions.disjunction();
  for (  String[] category : HIDDEN_CATEGORIES) {
    disjunction.add(SearchRestrictions.and(SearchRestrictions.eq(""String_Node_Str"",category[0]),SearchRestrictions.eq(""String_Node_Str"",category[1])));
  }
  searchCriteriaBuilder.add(SearchRestrictions.not(disjunction));
}",0.9637426900584796
39313,"public static ReportNumberFormat getInstance(final Locale locale){
  ReportNumberFormat format=formatters.get(locale);
  if (format == null) {
synchronized (formatters) {
      format=formatters.get(locale);
      if (format == null) {
        format=new ReportNumberFormat(locale);
        formatters.put(locale,format);
      }
    }
  }
  return format;
}","public static ReportNumberFormat getInstance(final Locale locale){
  ReportNumberFormat format=FORMATTERS.get(locale);
  if (format == null) {
synchronized (FORMATTERS) {
      format=FORMATTERS.get(locale);
      if (format == null) {
        format=new ReportNumberFormat(locale);
        FORMATTERS.put(locale,format);
      }
    }
  }
  return format;
}",0.888268156424581
39314,"@Override public boolean isPasswordValid(final String encPass,final String rawPass,final Object salt) throws DataAccessException {
  return true;
}","@Override public boolean isPasswordValid(final String encPass,final String rawPass,final Object salt){
  return true;
}",0.8947368421052632
39315,"@Override public String encodePassword(final String rawPass,final Object salt) throws DataAccessException {
  return rawPass;
}","@Override public String encodePassword(final String rawPass,final Object salt){
  return rawPass;
}",0.8761061946902655
39316,"private static final String createMessage(final String pluginIdentifier,final String moduleType,final Element element,final Throwable cause,final String message){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(pluginIdentifier);
  builder.append(""String_Node_Str"");
  if (element == null) {
    builder.append(""String_Node_Str"");
    builder.append(moduleType);
  }
 else {
    builder.append(""String_Node_Str"");
    XMLOutputter outputter=new XMLOutputter();
    builder.append(outputter.outputString(element));
  }
  builder.append(""String_Node_Str"");
  if (cause != null) {
    builder.append(cause.getMessage());
  }
 else {
    builder.append(message);
  }
  return builder.toString();
}","private static String createMessage(final String pluginIdentifier,final String moduleType,final Element element,final Throwable cause,final String message){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(pluginIdentifier);
  builder.append(""String_Node_Str"");
  if (element == null) {
    builder.append(""String_Node_Str"");
    builder.append(moduleType);
  }
 else {
    builder.append(""String_Node_Str"");
    XMLOutputter outputter=new XMLOutputter();
    builder.append(outputter.outputString(element));
  }
  builder.append(""String_Node_Str"");
  if (cause != null) {
    builder.append(cause.getMessage());
  }
 else {
    builder.append(message);
  }
  return builder.toString();
}",0.9959514170040484
39317,abstract void addComponentPattern(final ComponentPattern componentPattern);,void addComponentPattern(final ComponentPattern componentPattern);,0.9361702127659576
39318,abstract void initialize();,void initialize();,0.8
39319,"public JSONObject getAsJson() throws JSONException {
  JSONObject scaleObject=new JSONObject();
  JSONArray categoriesArray=null;
switch (zoomLevel) {
case H1:
    categoriesArray=getDaysArray();
  scaleObject.put(""String_Node_Str"",24);
scaleObject.put(""String_Node_Str"",1);
scaleObject.put(""String_Node_Str"",0);
break;
case H3:
categoriesArray=getDaysArray();
scaleObject.put(""String_Node_Str"",8);
scaleObject.put(""String_Node_Str"",3);
scaleObject.put(""String_Node_Str"",0);
break;
case H6:
categoriesArray=getDaysArray();
scaleObject.put(""String_Node_Str"",4);
scaleObject.put(""String_Node_Str"",6);
scaleObject.put(""String_Node_Str"",0);
break;
case D1:
return getWeeksScale();
}
scaleObject.put(""String_Node_Str"",categoriesArray);
return scaleObject;
}","public JSONObject getAsJson() throws JSONException {
  JSONObject scaleObject=new JSONObject();
  JSONArray categoriesArray=null;
switch (zoomLevel) {
case H1:
    categoriesArray=getDaysArray();
  scaleObject.put(""String_Node_Str"",24);
scaleObject.put(""String_Node_Str"",1);
scaleObject.put(""String_Node_Str"",0);
break;
case H3:
categoriesArray=getDaysArray();
scaleObject.put(""String_Node_Str"",8);
scaleObject.put(""String_Node_Str"",3);
scaleObject.put(""String_Node_Str"",0);
break;
case H6:
categoriesArray=getDaysArray();
scaleObject.put(""String_Node_Str"",4);
scaleObject.put(""String_Node_Str"",6);
scaleObject.put(""String_Node_Str"",0);
break;
case D1:
return getWeeksScale();
default :
break;
}
scaleObject.put(""String_Node_Str"",categoriesArray);
return scaleObject;
}",0.9888231426692964
39320,"public void removeSelectedEntity(final String[] args){
  if (weakRelation) {
    Entity entity=null;
    for (    Long selectedId : selectedEntities.toArray(new Long[selectedEntities.size()])) {
      entity=getDataDefinition().get(selectedId);
      entity.setField(belongsToFieldDefinition.getName(),null);
      getDataDefinition().save(entity);
    }
  }
 else {
    getDataDefinition().delete(selectedEntities.toArray(new Long[selectedEntities.size()]));
  }
  if (selectedEntities.size() == 1) {
    addMessage(translateMessage(""String_Node_Str""),MessageType.SUCCESS);
  }
 else {
    addMessage(selectedEntities.size() + ""String_Node_Str"" + translateMessage(""String_Node_Str""),MessageType.SUCCESS);
  }
  setSelectedEntityId(null);
  multiselectMode=false;
  selectedEntities=new HashSet<Long>();
}","public void removeSelectedEntity(final String[] args){
  if (weakRelation) {
    Entity entity=null;
    boolean isManyToManyRelationType=belongsToFieldDefinition.getType() instanceof JoinFieldHolder;
    Long[] selectedEntitiesIds=selectedEntities.toArray(new Long[selectedEntities.size()]);
    if (isManyToManyRelationType) {
      String gridFieldName=((JoinFieldHolder)belongsToFieldDefinition.getType()).getJoinFieldName();
      Entity gridOwnerEntity=scopeFieldDataDefinition.get(belongsToEntityId);
      List<Entity> relatedEntities=gridOwnerEntity.getManyToManyField(gridFieldName);
      for (      Long selectedId : selectedEntitiesIds) {
        relatedEntities.remove(new ProxyEntity(getDataDefinition(),selectedId));
      }
      gridOwnerEntity.setField(gridFieldName,relatedEntities);
      scopeFieldDataDefinition.save(gridOwnerEntity);
    }
 else {
      for (      Long selectedId : selectedEntitiesIds) {
        entity=getDataDefinition().get(selectedId);
        entity.setField(belongsToFieldDefinition.getName(),null);
        getDataDefinition().save(entity);
      }
    }
  }
 else {
    getDataDefinition().delete(selectedEntities.toArray(new Long[selectedEntities.size()]));
  }
  if (selectedEntities.size() == 1) {
    addMessage(translateMessage(""String_Node_Str""),MessageType.SUCCESS);
  }
 else {
    addMessage(selectedEntities.size() + ""String_Node_Str"" + translateMessage(""String_Node_Str""),MessageType.SUCCESS);
  }
  setSelectedEntityId(null);
  multiselectMode=false;
  selectedEntities=new HashSet<Long>();
}",0.6417973717676981
39321,"public void addExistingEntity(final String[] selectedEntities) throws JSONException {
  if (!weakRelation || selectedEntities.length == 0) {
    return;
  }
  JSONArray selectedEntitiesArray=null;
  if (selectedEntities[0].contains(""String_Node_Str"")) {
    selectedEntitiesArray=new JSONArray(selectedEntities[0]);
  }
 else {
    selectedEntitiesArray=new JSONArray(selectedEntities);
  }
  List<Long> selectedEntitiesId=Lists.newArrayList();
  for (int i=0; i < selectedEntitiesArray.length(); i++) {
    selectedEntitiesId.add(Long.parseLong(selectedEntitiesArray.getString(i)));
  }
  List<Entity> existingEntities=getEntities();
  List<Entity> newlyAddedEntities=getDataDefinition().find().add(SearchRestrictions.in(""String_Node_Str"",selectedEntitiesId)).list().getEntities();
  entitiesToMarkAsNew=Sets.newHashSet(selectedEntitiesId);
  for (  Entity existingEntity : existingEntities) {
    entitiesToMarkAsNew.remove(existingEntity.getId());
  }
  existingEntities.addAll(newlyAddedEntities);
  Entity gridOwnerEntity=scopeFieldDataDefinition.get(belongsToEntityId);
  String ownerSideJoinFieldName=((JoinFieldHolder)belongsToFieldDefinition.getType()).getJoinFieldName();
  gridOwnerEntity.setField(ownerSideJoinFieldName,existingEntities);
  gridOwnerEntity.getDataDefinition().save(gridOwnerEntity);
  reload();
}","public void addExistingEntity(final String[] selectedEntities) throws JSONException {
  if (!weakRelation || selectedEntities.length == 0) {
    return;
  }
  JSONArray selectedEntitiesArray=null;
  if (selectedEntities[0].contains(""String_Node_Str"")) {
    selectedEntitiesArray=new JSONArray(selectedEntities[0]);
  }
 else {
    selectedEntitiesArray=new JSONArray(selectedEntities);
  }
  List<Long> selectedEntitiesId=Lists.newArrayList();
  for (int i=0; i < selectedEntitiesArray.length(); i++) {
    selectedEntitiesId.add(Long.parseLong(selectedEntitiesArray.getString(i)));
  }
  List<Entity> existingEntities=getEntities();
  List<Entity> newlyAddedEntities=getDataDefinition().find().add(SearchRestrictions.in(""String_Node_Str"",selectedEntitiesId)).list().getEntities();
  entitiesToMarkAsNew=Sets.newHashSet(selectedEntitiesId);
  for (  Entity existingEntity : existingEntities) {
    entitiesToMarkAsNew.remove(existingEntity.getId());
  }
  existingEntities.addAll(newlyAddedEntities);
  FieldType belongsToFieldType=belongsToFieldDefinition.getType();
  if (belongsToFieldType instanceof JoinFieldHolder) {
    Entity gridOwnerEntity=scopeFieldDataDefinition.get(belongsToEntityId);
    gridOwnerEntity.setField(((JoinFieldHolder)belongsToFieldType).getJoinFieldName(),existingEntities);
    gridOwnerEntity.getDataDefinition().save(gridOwnerEntity);
  }
 else   if (belongsToFieldType instanceof BelongsToType) {
    for (    Entity entity : newlyAddedEntities) {
      entity.setField(belongsToFieldDefinition.getName(),belongsToEntityId);
      entity.getDataDefinition().save(entity);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + belongsToFieldDefinition.getType().toString());
  }
  reload();
}",0.7822974292222584
39322,"@Override @SuppressWarnings(""String_Node_Str"") protected void initializeContext(final JSONObject json) throws JSONException {
  Iterator<String> iterator=json.keys();
  while (iterator.hasNext()) {
    String field=iterator.next();
    if (JSON_BELONGS_TO_ENTITY_ID.equals(field)) {
      onScopeEntityIdChange(json.getLong(field));
    }
  }
}","@Override @SuppressWarnings(""String_Node_Str"") protected void initializeContext(final JSONObject json) throws JSONException {
  Iterator<String> iterator=json.keys();
  while (iterator.hasNext()) {
    String field=iterator.next();
    if (JSON_BELONGS_TO_ENTITY_ID.equals(field)) {
      onScopeEntityIdChange(json.getLong(field));
    }
  }
  passFiltersFromJson(json);
}",0.9595536959553695
39323,"@Override @SuppressWarnings(""String_Node_Str"") protected void initializeContent(final JSONObject json) throws JSONException {
  if (json.has(JSON_SELECTED_ENTITY_ID) && !json.isNull(JSON_SELECTED_ENTITY_ID)) {
    selectedEntityId=json.getLong(JSON_SELECTED_ENTITY_ID);
  }
  if (json.has(JSON_MULTISELECT_MODE) && !json.isNull(JSON_MULTISELECT_MODE)) {
    multiselectMode=json.getBoolean(JSON_MULTISELECT_MODE);
  }
  if (json.has(JSON_SELECTED_ENTITIES) && !json.isNull(JSON_SELECTED_ENTITIES)) {
    JSONObject selectedEntitiesObj=json.getJSONObject(JSON_SELECTED_ENTITIES);
    JSONArray selectedEntitiesIds=selectedEntitiesObj.names();
    if (selectedEntitiesIds != null) {
      for (int i=0; i < selectedEntitiesIds.length(); i++) {
        String key=selectedEntitiesIds.getString(i);
        boolean isSelected=false;
        if (selectedEntitiesObj.has(key) && !selectedEntitiesObj.isNull(key)) {
          isSelected=selectedEntitiesObj.getBoolean(key);
        }
        if (isSelected) {
          selectedEntities.add(Long.parseLong(key));
        }
      }
    }
  }
  if (json.has(JSON_BELONGS_TO_ENTITY_ID) && !json.isNull(JSON_BELONGS_TO_ENTITY_ID)) {
    belongsToEntityId=json.getLong(JSON_BELONGS_TO_ENTITY_ID);
  }
  if (json.has(JSON_FIRST_ENTITY) && !json.isNull(JSON_FIRST_ENTITY)) {
    firstResult=json.getInt(JSON_FIRST_ENTITY);
  }
  if (json.has(JSON_MAX_ENTITIES) && !json.isNull(JSON_MAX_ENTITIES)) {
    maxResults=json.getInt(JSON_MAX_ENTITIES);
  }
  if (json.has(JSON_FILTERS_ENABLED) && !json.isNull(JSON_FILTERS_ENABLED)) {
    filtersEnabled=json.getBoolean(JSON_FILTERS_ENABLED);
  }
  if (json.has(JSON_ONLY_ACTIVE) && !json.isNull(JSON_ONLY_ACTIVE) && activable) {
    onlyActive=json.getBoolean(JSON_ONLY_ACTIVE);
  }
  if (json.has(JSON_ORDER) && !json.isNull(JSON_ORDER)) {
    JSONObject orderJson=json.getJSONObject(JSON_ORDER);
    if (orderJson.has(JSON_ORDER_COLUMN) && orderJson.has(JSON_ORDER_DIRECTION)) {
      orderColumn=orderJson.getString(JSON_ORDER_COLUMN);
      orderDirection=orderJson.getString(JSON_ORDER_DIRECTION);
    }
  }
  if (json.has(JSON_FILTERS) && !json.isNull(JSON_FILTERS)) {
    JSONObject filtersJson=json.getJSONObject(JSON_FILTERS);
    Iterator<String> filtersKeys=filtersJson.keys();
    while (filtersKeys.hasNext()) {
      String column=filtersKeys.next();
      filters.put(column,filtersJson.getString(column).trim());
    }
  }
  if (belongsToFieldDefinition != null && belongsToEntityId == null) {
    setEnabled(false);
  }
  requestRender();
  requestUpdateState();
}","@Override protected void initializeContent(final JSONObject json) throws JSONException {
  if (json.has(JSON_SELECTED_ENTITY_ID) && !json.isNull(JSON_SELECTED_ENTITY_ID)) {
    selectedEntityId=json.getLong(JSON_SELECTED_ENTITY_ID);
  }
  if (json.has(JSON_MULTISELECT_MODE) && !json.isNull(JSON_MULTISELECT_MODE)) {
    multiselectMode=json.getBoolean(JSON_MULTISELECT_MODE);
  }
  if (json.has(JSON_SELECTED_ENTITIES) && !json.isNull(JSON_SELECTED_ENTITIES)) {
    JSONObject selectedEntitiesObj=json.getJSONObject(JSON_SELECTED_ENTITIES);
    JSONArray selectedEntitiesIds=selectedEntitiesObj.names();
    for (int i=0; selectedEntitiesIds != null && i < selectedEntitiesIds.length(); i++) {
      String key=selectedEntitiesIds.getString(i);
      boolean isSelected=false;
      if (selectedEntitiesObj.has(key) && !selectedEntitiesObj.isNull(key)) {
        isSelected=selectedEntitiesObj.getBoolean(key);
      }
      if (isSelected) {
        selectedEntities.add(Long.parseLong(key));
      }
    }
  }
  if (json.has(JSON_BELONGS_TO_ENTITY_ID) && !json.isNull(JSON_BELONGS_TO_ENTITY_ID)) {
    belongsToEntityId=json.getLong(JSON_BELONGS_TO_ENTITY_ID);
  }
  if (json.has(JSON_FIRST_ENTITY) && !json.isNull(JSON_FIRST_ENTITY)) {
    firstResult=json.getInt(JSON_FIRST_ENTITY);
  }
  if (json.has(JSON_MAX_ENTITIES) && !json.isNull(JSON_MAX_ENTITIES)) {
    maxResults=json.getInt(JSON_MAX_ENTITIES);
  }
  if (json.has(JSON_ONLY_ACTIVE) && !json.isNull(JSON_ONLY_ACTIVE) && activable) {
    onlyActive=json.getBoolean(JSON_ONLY_ACTIVE);
  }
  if (json.has(JSON_ORDER) && !json.isNull(JSON_ORDER)) {
    JSONObject orderJson=json.getJSONObject(JSON_ORDER);
    if (orderJson.has(JSON_ORDER_COLUMN) && orderJson.has(JSON_ORDER_DIRECTION)) {
      orderColumn=orderJson.getString(JSON_ORDER_COLUMN);
      orderDirection=orderJson.getString(JSON_ORDER_DIRECTION);
    }
  }
  if (belongsToFieldDefinition != null && belongsToEntityId == null) {
    setEnabled(false);
  }
  passFiltersFromJson(json);
  requestRender();
  requestUpdateState();
}",0.8638925010836584
39324,"@Override public void onScopeEntityIdChange(final Long scopeEntityId){
  if (belongsToFieldDefinition != null) {
    if (belongsToEntityId != null && !belongsToEntityId.equals(scopeEntityId)) {
      setSelectedEntityId(null);
      selectedEntities=new HashSet<Long>();
      multiselectMode=false;
    }
    belongsToEntityId=scopeEntityId;
    setEnabled(scopeEntityId != null);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override public void onScopeEntityIdChange(final Long scopeEntityId){
  if (belongsToFieldDefinition == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (belongsToEntityId != null && !belongsToEntityId.equals(scopeEntityId)) {
    setSelectedEntityId(null);
    selectedEntities=new HashSet<Long>();
    multiselectMode=false;
  }
  belongsToEntityId=scopeEntityId;
  setEnabled(scopeEntityId != null);
}",0.7760180995475113
39325,"@Override protected void initializeComponent() throws JSONException {
  super.initializeComponent();
  for (  ComponentOption option : getOptions()) {
    if (""String_Node_Str"".equals(option.getType())) {
      textRepresentationOnDisabled=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      alignment=option.getValue();
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + option.getType());
    }
  }
}","@Override protected void initializeComponent() throws JSONException {
  super.initializeComponent();
  for (  ComponentOption option : getOptions()) {
    if (""String_Node_Str"".equals(option.getType())) {
      textRepresentationOnDisabled=Boolean.parseBoolean(option.getValue());
    }
 else     if (""String_Node_Str"".equals(option.getType())) {
      alignment=option.getValue();
    }
 else     if (!""String_Node_Str"".equals(option.getType())) {
      throw new IllegalStateException(""String_Node_Str"" + option.getType());
    }
  }
}",0.9862005519779208
39326,"private FieldDefinition getAuditFieldDefinition(final DataDefinitionImpl dataDefinition,final String name,final FieldType type){
  FieldDefinitionImpl fieldDefinition=new FieldDefinitionImpl(dataDefinition,name);
  fieldDefinition.withReadOnly(false);
  fieldDefinition.setPersistent(true);
  fieldDefinition.setExpression(""String_Node_Str"");
  fieldDefinition.withType(type);
  return fieldDefinition;
}","private FieldDefinition getAuditFieldDefinition(final DataDefinitionImpl dataDefinition,final String name,final FieldType type){
  FieldDefinitionImpl fieldDefinition=new FieldDefinitionImpl(dataDefinition,name);
  fieldDefinition.withReadOnly(false);
  fieldDefinition.setPersistent(true);
  fieldDefinition.withType(type);
  return fieldDefinition;
}",0.9312169312169312
39327,"public void addColumn(final String name,final String fields,final String expression,final Boolean isLink,final Integer width,final boolean isOrderable,boolean isSearchable){
  GridComponentColumn column=new GridComponentColumn(name);
  for (  FieldDefinition field : parseFields(fields)) {
    column.addField(field);
  }
  column.setExpression(expression);
  if (isLink != null) {
    column.setLink(isLink);
  }
  if (width != null) {
    column.setWidth(width);
  }
  columns.put(name,column);
  if (isOrderable) {
    orderableColumns.add(name);
  }
  if (isSearchable) {
    searchableColumns.add(name);
  }
}","public void addColumn(final String name,final String fields,final String expression,final Boolean isLink,final Integer width,final boolean isOrderable,final boolean isSearchable){
  GridComponentColumn column=new GridComponentColumn(name);
  for (  FieldDefinition field : parseFields(fields,column)) {
    column.addField(field);
  }
  column.setExpression(expression);
  if (isLink != null) {
    column.setLink(isLink);
  }
  if (width != null) {
    column.setWidth(width);
  }
  columns.put(name,column);
  if (isOrderable) {
    orderableColumns.add(name);
  }
  if (isSearchable) {
    searchableColumns.add(name);
  }
}",0.9895245769540691
39328,"private Set<FieldDefinition> parseFields(final String fields){
  Set<FieldDefinition> set=new HashSet<FieldDefinition>();
  for (  String field : fields.split(""String_Node_Str"")) {
    set.add(getDataDefinition().getField(field));
  }
  return set;
}","private Set<FieldDefinition> parseFields(final String fields,final GridComponentColumn column){
  Set<FieldDefinition> set=new HashSet<FieldDefinition>();
  for (  String field : fields.split(""String_Node_Str"")) {
    FieldDefinition fieldDefiniton=getDataDefinition().getField(field);
    if (fieldDefiniton != null) {
      set.add(fieldDefiniton);
    }
 else {
      throwIllegalStateException(""String_Node_Str"" + field + ""String_Node_Str""+ column.getName()+ ""String_Node_Str"");
    }
  }
  return set;
}",0.525065963060686
39329,"private void parseColumnOption(final ComponentOption option){
  GridComponentColumn column=new GridComponentColumn(option.getAtrributeValue(""String_Node_Str""));
  String fields=option.getAtrributeValue(""String_Node_Str"");
  if (fields != null) {
    for (    FieldDefinition field : parseFields(fields)) {
      column.addField(field);
    }
  }
  column.setExpression(option.getAtrributeValue(""String_Node_Str""));
  String columnWidth=option.getAtrributeValue(""String_Node_Str"");
  if (columnWidth != null) {
    column.setWidth(Integer.valueOf(columnWidth));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setLink(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setHidden(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  columns.put(column.getName(),column);
}","private void parseColumnOption(final ComponentOption option){
  GridComponentColumn column=new GridComponentColumn(option.getAtrributeValue(""String_Node_Str""));
  String fields=option.getAtrributeValue(""String_Node_Str"");
  if (fields != null) {
    for (    FieldDefinition field : parseFields(fields,column)) {
      column.addField(field);
    }
  }
  column.setExpression(option.getAtrributeValue(""String_Node_Str""));
  String columnWidth=option.getAtrributeValue(""String_Node_Str"");
  if (columnWidth != null) {
    column.setWidth(Integer.valueOf(columnWidth));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setLink(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  if (option.getAtrributeValue(""String_Node_Str"") != null) {
    column.setHidden(Boolean.parseBoolean(option.getAtrributeValue(""String_Node_Str"")));
  }
  columns.put(column.getName(),column);
}",0.9961769524849808
39330,"/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: <ul> <li>2010: 2010-12-31</li> <li>2010-03: 2010-03-31</li> <li>2010-03-06: 2010-03-06</li> </ul> Examples with down-complete: <ul> <li>2010: 2010-01-01</li> <li>2010-03: 2010-03-01</li> <li>2010-03-06: 2010-03-06</li> </ul>
 * @param dateExpression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseAndComplete(final String dateExpression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=dateExpression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(""String_Node_Str"",1);
    }
    if (year < 1500) {
      return null;
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(""String_Node_Str"",1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(""String_Node_Str"",1).initCause(e);
  }
}","/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: <ul> <li>2010: 2010-12-31</li> <li>2010-03: 2010-03-31</li> <li>2010-03-06: 2010-03-06</li> </ul> Examples with down-complete: <ul> <li>2010: 2010-01-01</li> <li>2010-03: 2010-03-01</li> <li>2010-03-06: 2010-03-06</li> </ul>
 * @param dateExpression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseAndComplete(final String dateExpression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=dateExpression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(""String_Node_Str"",1);
    }
    if (year < 1500) {
      throw new ParseException(""String_Node_Str"",1);
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(""String_Node_Str"",1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(""String_Node_Str"",1).initCause(e);
  }
}",0.9872611464968152
39331,"private static void addDateFilter(final SearchCriteriaBuilder criteria,final Entry<GridComponentFilterOperator,String> filterValue,final String field){
  Date minDate=null;
  Date maxDate=null;
  try {
    minDate=DateUtils.parseAndComplete(filterValue.getValue(),false);
    maxDate=DateUtils.parseAndComplete(filterValue.getValue(),true);
  }
 catch (  ParseException e) {
    throw new IllegalStateException(""String_Node_Str"" + filterValue.getValue(),e);
  }
  if (minDate == null || maxDate == null) {
    throw new IllegalStateException(""String_Node_Str"" + filterValue.getValue());
  }
switch (filterValue.getKey()) {
case EQ:
    criteria.add(SearchRestrictions.or(SearchRestrictions.ge(field,minDate),SearchRestrictions.le(field,maxDate)));
  break;
case NE:
criteria.add(SearchRestrictions.or(SearchRestrictions.le(field,minDate),SearchRestrictions.gt(field,maxDate)));
break;
case GT:
criteria.add(SearchRestrictions.gt(field,maxDate));
break;
case GE:
criteria.add(SearchRestrictions.ge(field,minDate));
break;
case LT:
criteria.add(SearchRestrictions.lt(field,minDate));
break;
case LE:
criteria.add(SearchRestrictions.le(field,maxDate));
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","private static void addDateFilter(final SearchCriteriaBuilder criteria,final Entry<GridComponentFilterOperator,String> filterValue,final String field) throws ParseException {
  Date minDate=DateUtils.parseAndComplete(filterValue.getValue(),false);
  Date maxDate=DateUtils.parseAndComplete(filterValue.getValue(),true);
switch (filterValue.getKey()) {
case EQ:
    criteria.add(SearchRestrictions.or(SearchRestrictions.ge(field,minDate),SearchRestrictions.le(field,maxDate)));
  break;
case NE:
criteria.add(SearchRestrictions.or(SearchRestrictions.le(field,minDate),SearchRestrictions.gt(field,maxDate)));
break;
case GT:
criteria.add(SearchRestrictions.gt(field,maxDate));
break;
case GE:
criteria.add(SearchRestrictions.ge(field,minDate));
break;
case LT:
criteria.add(SearchRestrictions.lt(field,minDate));
break;
case LE:
criteria.add(SearchRestrictions.le(field,maxDate));
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}",0.762080073630925
39332,"private List<GanttChartItem> getCollisionsList(final List<GanttChartItem> sortedItems,final String row){
  List<GanttChartItem> collisionRow=new ArrayList<GanttChartItem>();
  GanttChartConflictItem collisionItem=null;
  GanttChartItem previousItem=null;
  for (  GanttChartItem item : sortedItems) {
    if (previousItem != null && item.getFrom() < previousItem.getTo()) {
      if (collisionItem != null && item.getFrom() < collisionItem.getTo()) {
        if (item.getTo() > collisionItem.getTo()) {
          collisionItem.setTo(item.getTo());
          collisionItem.setDateTo(item.getDateTo());
        }
      }
 else {
        if (collisionItem != null) {
          collisionRow.add(collisionItem);
        }
        if (item.getTo() < previousItem.getTo()) {
          collisionItem=new GanttChartConflictItem(row,item.getDateFrom(),item.getDateTo(),item.getFrom(),item.getTo());
        }
 else {
          collisionItem=new GanttChartConflictItem(row,item.getDateFrom(),previousItem.getDateTo(),item.getFrom(),previousItem.getTo());
        }
        collisionItem.addItem(previousItem);
      }
      collisionItem.addItem(item);
    }
    if (previousItem == null || item.getTo() > previousItem.getTo()) {
      previousItem=item;
    }
  }
  if (collisionItem != null) {
    collisionRow.add(collisionItem);
  }
  return collisionRow;
}","private List<GanttChartItem> getCollisionsList(final List<GanttChartItem> sortedItems,final String row){
  List<GanttChartItem> collisionRow=new ArrayList<GanttChartItem>();
  GanttChartConflictItem collisionItem=null;
  GanttChartItem previousItem=null;
  for (  GanttChartItem item : sortedItems) {
    if (previousItem != null && item.getFrom() < previousItem.getTo()) {
      if (collisionItem != null && item.getFrom() < collisionItem.getTo()) {
        if (item.getTo() > collisionItem.getTo()) {
          if (item.getTo() < previousItem.getTo()) {
            collisionItem.setTo(item.getTo());
            collisionItem.setDateTo(item.getDateTo());
          }
 else {
            collisionItem.setTo(previousItem.getTo());
            collisionItem.setDateTo(previousItem.getDateTo());
          }
        }
      }
 else {
        if (collisionItem != null) {
          collisionRow.add(collisionItem);
        }
        if (item.getTo() < previousItem.getTo()) {
          collisionItem=new GanttChartConflictItem(row,item.getDateFrom(),item.getDateTo(),item.getFrom(),item.getTo());
        }
 else {
          collisionItem=new GanttChartConflictItem(row,item.getDateFrom(),previousItem.getDateTo(),item.getFrom(),previousItem.getTo());
        }
        collisionItem.addItem(previousItem);
      }
      collisionItem.addItem(item);
    }
    if (previousItem == null || item.getTo() > previousItem.getTo()) {
      previousItem=item;
    }
  }
  if (collisionItem != null) {
    collisionRow.add(collisionItem);
  }
  return collisionRow;
}",0.9287925696594428
39333,"@Override public void disable(){
  if (basename == null || ""String_Node_Str"".equals(basename)) {
    basenames.removeAll(getAllFilesFromPath());
  }
 else {
    basenames.remove(""String_Node_Str"" + pluginIdentifier + ""String_Node_Str""+ path+ ""String_Node_Str""+ basename);
  }
  translationModuleService.removeTranslationModul(basenames);
}","@Override public void disable(){
  translationModuleService.removeTranslationModule(basenames);
}",0.4403669724770642
39334,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  setField(""String_Node_Str"",new File[]{jdbcDriver});
  setField(""String_Node_Str"",_project);
  setField(""String_Node_Str"",_webXml);
  setField(""String_Node_Str"",_classesDirectory);
  setField(""String_Node_Str"",_webAppSourceDirectory);
  setField(""String_Node_Str"",_pluginArtifacts);
  setField(""String_Node_Str"",""String_Node_Str"");
  setField(""String_Node_Str"",""String_Node_Str"");
  setField(""String_Node_Str"",_tmpDirectory);
  setField(""String_Node_Str"",0);
  logs.mkdirs();
  temporaryPlugins.mkdirs();
  plugins.mkdirs();
  SystemProperties systemProperties=new SystemProperties();
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",profile));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",configuration.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",logs.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",temporaryPlugins.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",plugins.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",webapp.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",restartCommand));
  setSystemProperties(systemProperties);
  try {
    JettyWebAppContext webAppConfig=new JettyWebAppContext();
    webAppConfig.setContextPath(""String_Node_Str"");
    List<Resource> resources=new ArrayList<Resource>();
    resources.add(Resource.newResource(webapp.getAbsolutePath()));
    resources.add(Resource.newResource(""String_Node_Str""));
    resources.add(Resource.newResource(""String_Node_Str""));
    resources.add(Resource.newResource(""String_Node_Str""));
    webAppConfig.setBaseResource(new ResourceCollection(resources.toArray(new Resource[resources.size()])));
  }
 catch (  Exception e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
  super.execute();
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  setField(""String_Node_Str"",new File[]{jdbcDriver});
  setField(""String_Node_Str"",_project);
  setField(""String_Node_Str"",_webXml);
  setField(""String_Node_Str"",_classesDirectory);
  setField(""String_Node_Str"",_webAppSourceDirectory);
  setField(""String_Node_Str"",_pluginArtifacts);
  setField(""String_Node_Str"",""String_Node_Str"");
  setField(""String_Node_Str"",""String_Node_Str"");
  setField(""String_Node_Str"",_tmpDirectory);
  setField(""String_Node_Str"",0);
  try {
    FileUtils.forceMkdir(logs);
    FileUtils.forceMkdir(temporaryPlugins);
    FileUtils.forceMkdir(plugins);
  }
 catch (  Exception e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
  SystemProperties systemProperties=new SystemProperties();
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",profile));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",configuration.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",logs.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",temporaryPlugins.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",plugins.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",webapp.getAbsolutePath()));
  systemProperties.setSystemProperty(getSystemProperty(""String_Node_Str"",restartCommand));
  setSystemProperties(systemProperties);
  try {
    JettyWebAppContext webAppConfig=new JettyWebAppContext();
    webAppConfig.setContextPath(""String_Node_Str"");
    List<Resource> resources=new ArrayList<Resource>();
    resources.add(Resource.newResource(webapp.getAbsolutePath()));
    resources.add(Resource.newResource(""String_Node_Str""));
    resources.add(Resource.newResource(""String_Node_Str""));
    resources.add(Resource.newResource(""String_Node_Str""));
    webAppConfig.setBaseResource(new ResourceCollection(resources.toArray(new Resource[resources.size()])));
  }
 catch (  Exception e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
  super.execute();
}",0.9425341497880358
39335,"private void prepareWorkingDirectory() throws IOException {
  workingDirectory.mkdirs();
  FileUtils.cleanDirectory(workingDirectory);
  modulesWorkingDirectory.mkdirs();
  commonWorkingDirectory.mkdirs();
}","private void prepareWorkingDirectory() throws IOException {
  FileUtils.forceMkdir(workingDirectory);
  FileUtils.cleanDirectory(workingDirectory);
  FileUtils.forceMkdir(modulesWorkingDirectory);
  FileUtils.forceMkdir(commonWorkingDirectory);
}",0.5607064017660044
39336,"private void copyClassPathResource(final String resourceName) throws IOException {
  InputStreamFacade resource=new RawInputStreamFacade(new ClassPathResource(""String_Node_Str"" + resourceName).getInputStream());
  File target=new File(rootDirectory,resourceName);
  target.getParentFile().mkdirs();
  FileUtils.copyStreamToFile(resource,target);
}","private void copyClassPathResource(final String resourceName) throws IOException {
  InputStreamFacade resource=new RawInputStreamFacade(new ClassPathResource(""String_Node_Str"" + resourceName).getInputStream());
  FileUtils.copyStreamToFile(resource,new File(rootDirectory,resourceName));
}",0.8100470957613815
39337,"private void prepareWorkingDirectory() throws IOException {
  workingDirectory.mkdirs();
  FileUtils.cleanDirectory(workingDirectory);
  webappDirectory.mkdirs();
  libDirectory.mkdirs();
  configurationDirectory.mkdirs();
  binDirectory.mkdirs();
}","private void prepareWorkingDirectory() throws IOException {
  FileUtils.forceMkdir(workingDirectory);
  FileUtils.cleanDirectory(workingDirectory);
  FileUtils.forceMkdir(webappDirectory);
  FileUtils.forceMkdir(libDirectory);
  FileUtils.forceMkdir(configurationDirectory);
  FileUtils.forceMkdir(binDirectory);
}",0.6891651865008881
39338,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  EnumTypeKey other=(EnumTypeKey)obj;
  if (originPluginIdentifier == null) {
    if (other.originPluginIdentifier != null)     return false;
  }
 else   if (!originPluginIdentifier.equals(other.originPluginIdentifier))   return false;
  if (value == null) {
    if (other.value != null)     return false;
  }
 else   if (!value.equals(other.value))   return false;
  return true;
}","@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  EnumTypeKey other=(EnumTypeKey)obj;
  if (originPluginIdentifier == null) {
    if (other.originPluginIdentifier != null) {
      return false;
    }
  }
 else   if (!originPluginIdentifier.equals(other.originPluginIdentifier)) {
    return false;
  }
  if (value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!value.equals(other.value)) {
    return false;
  }
  return true;
}",0.7280550774526678
39339,"@Override public void onApplicationEvent(final ContextRefreshedEvent event){
  if (event != null && event.getSource() != null && event.getSource() instanceof XmlWebApplicationContext) {
    XmlWebApplicationContext eventSource=(XmlWebApplicationContext)event.getSource();
    if (eventSource.getParent() != null) {
      return;
    }
  }
  long time=System.currentTimeMillis();
  List<Plugin> sortedPlugins=pluginDependencyManager.sortPluginsInDependencyOrder(plugins.values(),plugins);
  moduleFactoryAccessor.init(sortedPlugins);
  for (  Plugin plugin : sortedPlugins) {
    if (plugin.hasState(PluginState.ENABLING)) {
      ((InternalPlugin)plugin).changeStateTo(PluginState.ENABLED);
      pluginDao.save(plugin);
    }
  }
  LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - time) + ""String_Node_Str"");
}","@Override public void onApplicationEvent(final ContextRefreshedEvent event){
  if (event != null && event.getSource() instanceof XmlWebApplicationContext) {
    XmlWebApplicationContext eventSource=(XmlWebApplicationContext)event.getSource();
    if (eventSource.getParent() != null) {
      return;
    }
  }
  long time=System.currentTimeMillis();
  List<Plugin> sortedPlugins=pluginDependencyManager.sortPluginsInDependencyOrder(plugins.values(),plugins);
  moduleFactoryAccessor.init(sortedPlugins);
  for (  Plugin plugin : sortedPlugins) {
    if (plugin.hasState(PluginState.ENABLING)) {
      ((InternalPlugin)plugin).changeStateTo(PluginState.ENABLED);
      pluginDao.save(plugin);
    }
  }
  LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - time) + ""String_Node_Str"");
}",0.982021078735276
39340,"private void copyResource(final Resource resource){
  if (!resource.isReadable()) {
    return;
  }
  try {
    String path=resource.getURI().toString().split(""String_Node_Str"")[1];
    File file=new File(webappPath + ""String_Node_Str"" + path);
    if (resource.getInputStream().available() == 0) {
      file.mkdirs();
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ file.getAbsolutePath());
      }
      OutputStream output=null;
      try {
        output=new BufferedOutputStream(new FileOutputStream(file));
        IOUtils.copy(resource.getInputStream(),output);
      }
  finally {
        IOUtils.closeQuietly(output);
      }
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + resource,e);
  }
}","private void copyResource(final Resource resource){
  if (!resource.isReadable()) {
    return;
  }
  try {
    String path=resource.getURI().toString().split(""String_Node_Str"")[1];
    File file=new File(webappPath + ""String_Node_Str"" + path);
    if (resource.getInputStream().available() == 0) {
      FileUtils.forceMkdir(file);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ file.getAbsolutePath());
      }
      OutputStream output=null;
      try {
        output=new BufferedOutputStream(new FileOutputStream(file));
        IOUtils.copy(resource.getInputStream(),output);
      }
  finally {
        IOUtils.closeQuietly(output);
      }
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + resource,e);
  }
}",0.982262996941896
39341,"private void parseField(final XMLStreamReader reader,final String pluginIdentifier,final CtClass ctClass,final String tag,final List<String> fields) throws XMLStreamException {
  FieldsTag modelTag=FieldsTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
  if (!getBooleanAttribute(reader,""String_Node_Str"",true)) {
    return;
  }
  if (getStringAttribute(reader,""String_Node_Str"") != null) {
    return;
  }
switch (modelTag) {
case PRIORITY:
case INTEGER:
    createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Integer.class.getCanonicalName());
  fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case STRING:
case TEXT:
case ENUM:
case DICTIONARY:
case PASSWORD:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),String.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case DECIMAL:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),BigDecimal.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case DATETIME:
case DATE:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Date.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case BOOLEAN:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Boolean.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case BELONGSTO:
createBelongsField(ctClass,pluginIdentifier,reader);
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case HASMANY:
case TREE:
createHasManyField(ctClass,pluginIdentifier,reader);
break;
default :
break;
}
while (reader.hasNext() && reader.next() > 0) {
if (isTagEnded(reader,tag)) {
break;
}
}
}","private void parseField(final XMLStreamReader reader,final String pluginIdentifier,final CtClass ctClass,final String tag,final List<String> fields) throws XMLStreamException {
  FieldsTag modelTag=FieldsTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
  if (!getBooleanAttribute(reader,""String_Node_Str"",true)) {
    return;
  }
  if (getStringAttribute(reader,""String_Node_Str"") != null) {
    return;
  }
switch (modelTag) {
case PRIORITY:
case INTEGER:
    createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Integer.class.getCanonicalName());
  fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case STRING:
case TEXT:
case ENUM:
case DICTIONARY:
case PASSWORD:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),String.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case DECIMAL:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),BigDecimal.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case DATETIME:
case DATE:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Date.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case BOOLEAN:
createField(ctClass,getStringAttribute(reader,""String_Node_Str""),Boolean.class.getCanonicalName());
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case BELONGSTO:
createBelongsField(ctClass,pluginIdentifier,reader);
fields.add(getStringAttribute(reader,""String_Node_Str""));
break;
case HASMANY:
case TREE:
createHasManyField(ctClass,reader);
break;
default :
break;
}
while (reader.hasNext() && reader.next() > 0) {
if (isTagEnded(reader,tag)) {
break;
}
}
}",0.9950710350826326
39342,"private void createHasManyField(final CtClass ctClass,final String pluginIdentifier,final XMLStreamReader reader){
  createField(ctClass,getStringAttribute(reader,""String_Node_Str""),""String_Node_Str"");
}","private void createHasManyField(final CtClass ctClass,final XMLStreamReader reader){
  createField(ctClass,getStringAttribute(reader,""String_Node_Str""),""String_Node_Str"");
}",0.9202127659574468
39343,"private FieldDefinition getFieldDefinition(final XMLStreamReader reader,final String pluginIdentifier,final DataDefinitionImpl dataDefinition,final FieldsTag fieldTag) throws XMLStreamException {
  String fieldType=reader.getLocalName();
  String name=getStringAttribute(reader,""String_Node_Str"");
  FieldDefinitionImpl fieldDefinition=new FieldDefinitionImpl(dataDefinition,name);
  fieldDefinition.withReadOnly(getBooleanAttribute(reader,""String_Node_Str"",false));
  fieldDefinition.withDefaultValue(getStringAttribute(reader,""String_Node_Str""));
  fieldDefinition.setPersistent(getBooleanAttribute(reader,""String_Node_Str"",true));
  fieldDefinition.setExpression(getStringAttribute(reader,""String_Node_Str""));
  FieldType type=getFieldType(reader,dataDefinition,name,fieldTag,fieldType);
  fieldDefinition.withType(type);
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new RequiredValidator()));
  }
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new UniqueValidator()));
  }
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,fieldType)) {
      break;
    }
    String tag=getTagStarted(reader);
    if (tag == null) {
      continue;
    }
    addFieldElement(reader,fieldDefinition,type,tag);
  }
  return fieldDefinition;
}","private FieldDefinition getFieldDefinition(final XMLStreamReader reader,final DataDefinitionImpl dataDefinition,final FieldsTag fieldTag) throws XMLStreamException {
  String fieldType=reader.getLocalName();
  String name=getStringAttribute(reader,""String_Node_Str"");
  FieldDefinitionImpl fieldDefinition=new FieldDefinitionImpl(dataDefinition,name);
  fieldDefinition.withReadOnly(getBooleanAttribute(reader,""String_Node_Str"",false));
  fieldDefinition.withDefaultValue(getStringAttribute(reader,""String_Node_Str""));
  fieldDefinition.setPersistent(getBooleanAttribute(reader,""String_Node_Str"",true));
  fieldDefinition.setExpression(getStringAttribute(reader,""String_Node_Str""));
  FieldType type=getFieldType(reader,dataDefinition,name,fieldTag,fieldType);
  fieldDefinition.withType(type);
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new RequiredValidator()));
  }
  if (getBooleanAttribute(reader,""String_Node_Str"",false)) {
    fieldDefinition.withValidator(getValidatorDefinition(reader,new UniqueValidator()));
  }
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,fieldType)) {
      break;
    }
    String tag=getTagStarted(reader);
    if (tag == null) {
      continue;
    }
    addFieldElement(reader,fieldDefinition,type,tag);
  }
  return fieldDefinition;
}",0.9892627057981388
39344,"private DataDefinition getDataDefinition(final XMLStreamReader reader,final String pluginIdentifier) throws XMLStreamException {
  DataDefinitionImpl dataDefinition=getModelDefinition(reader,pluginIdentifier);
  LOG.info(""String_Node_Str"" + dataDefinition);
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,TAG_MODEL)) {
      break;
    }
    if (TAG_FIELDS.equals(getTagStarted(reader))) {
      while (reader.hasNext() && reader.next() > 0) {
        if (isTagEnded(reader,TAG_FIELDS)) {
          break;
        }
        String tag=getTagStarted(reader);
        if (tag == null) {
          continue;
        }
        addFieldElement(reader,pluginIdentifier,dataDefinition,tag);
      }
    }
    if (TAG_HOOKS.equals(getTagStarted(reader))) {
      while (reader.hasNext() && reader.next() > 0) {
        if (isTagEnded(reader,TAG_HOOKS)) {
          break;
        }
        String tag=getTagStarted(reader);
        if (tag == null) {
          continue;
        }
        addHookElement(reader,pluginIdentifier,dataDefinition,tag);
      }
    }
    String tag=getTagStarted(reader);
    if (tag == null) {
      continue;
    }
    addOtherElement(reader,pluginIdentifier,dataDefinition,tag);
  }
  for (  EntityHookDefinition hook : dataDefinition.getViewHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getCopyHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getSaveHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getUpdateHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getCreateHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getValidators()) {
    hook.initialize(dataDefinition);
  }
  for (  FieldDefinition field : dataDefinition.getFields().values()) {
    for (    FieldHookDefinition hook : ((FieldDefinitionImpl)field).getValidators()) {
      hook.initialize(dataDefinition,field);
    }
  }
  dataDefinitionService.save(dataDefinition);
  return dataDefinition;
}","private DataDefinition getDataDefinition(final XMLStreamReader reader,final String pluginIdentifier) throws XMLStreamException {
  DataDefinitionImpl dataDefinition=getModelDefinition(reader,pluginIdentifier);
  LOG.info(""String_Node_Str"" + dataDefinition);
  while (reader.hasNext() && reader.next() > 0) {
    if (isTagEnded(reader,TAG_MODEL)) {
      break;
    }
    if (TAG_FIELDS.equals(getTagStarted(reader))) {
      while (reader.hasNext() && reader.next() > 0) {
        if (isTagEnded(reader,TAG_FIELDS)) {
          break;
        }
        String tag=getTagStarted(reader);
        if (tag == null) {
          continue;
        }
        addFieldElement(reader,dataDefinition,tag);
      }
    }
    if (TAG_HOOKS.equals(getTagStarted(reader))) {
      while (reader.hasNext() && reader.next() > 0) {
        if (isTagEnded(reader,TAG_HOOKS)) {
          break;
        }
        String tag=getTagStarted(reader);
        if (tag == null) {
          continue;
        }
        addHookElement(reader,dataDefinition,tag);
      }
    }
    String tag=getTagStarted(reader);
    if (tag == null) {
      continue;
    }
    addOtherElement(reader,dataDefinition,tag);
  }
  for (  EntityHookDefinition hook : dataDefinition.getViewHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getCopyHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getSaveHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getUpdateHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getCreateHooks()) {
    hook.initialize(dataDefinition);
  }
  for (  EntityHookDefinition hook : dataDefinition.getValidators()) {
    hook.initialize(dataDefinition);
  }
  for (  FieldDefinition field : dataDefinition.getFields().values()) {
    for (    FieldHookDefinition hook : ((FieldDefinitionImpl)field).getValidators()) {
      hook.initialize(dataDefinition,field);
    }
  }
  dataDefinitionService.save(dataDefinition);
  return dataDefinition;
}",0.9882407193912844
39345,"private void addOtherElement(final XMLStreamReader reader,final String pluginIdentifier,final DataDefinitionImpl dataDefinition,final String tag) throws XMLStreamException {
  OtherTag otherTag=OtherTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
switch (otherTag) {
case IDENTIFIER:
    dataDefinition.setIdentifierExpression(getIdentifierExpression(reader));
  break;
default :
break;
}
}","private void addOtherElement(final XMLStreamReader reader,final DataDefinitionImpl dataDefinition,final String tag) throws XMLStreamException {
  OtherTag otherTag=OtherTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
switch (otherTag) {
case IDENTIFIER:
    dataDefinition.setIdentifierExpression(getIdentifierExpression(reader));
  break;
default :
break;
}
}",0.9597855227882036
39346,"private void addHookElement(final XMLStreamReader reader,final String pluginIdentifier,final DataDefinitionImpl dataDefinition,final String tag) throws XMLStreamException {
  HooksTag hooksTag=HooksTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
switch (hooksTag) {
case ONVIEW:
    dataDefinition.addViewHook(getHookDefinition(reader));
  break;
case ONCREATE:
dataDefinition.addCreateHook(getHookDefinition(reader));
break;
case ONUPDATE:
dataDefinition.addUpdateHook(getHookDefinition(reader));
break;
case ONSAVE:
dataDefinition.addSaveHook(getHookDefinition(reader));
break;
case ONCOPY:
dataDefinition.addCopyHook(getHookDefinition(reader));
break;
case VALIDATESWITH:
dataDefinition.addValidatorHook(new CustomEntityValidator(getHookDefinition(reader)));
break;
default :
break;
}
}","private void addHookElement(final XMLStreamReader reader,final DataDefinitionImpl dataDefinition,final String tag) throws XMLStreamException {
  HooksTag hooksTag=HooksTag.valueOf(tag.toUpperCase(Locale.ENGLISH));
switch (hooksTag) {
case ONVIEW:
    dataDefinition.addViewHook(getHookDefinition(reader));
  break;
case ONCREATE:
dataDefinition.addCreateHook(getHookDefinition(reader));
break;
case ONUPDATE:
dataDefinition.addUpdateHook(getHookDefinition(reader));
break;
case ONSAVE:
dataDefinition.addSaveHook(getHookDefinition(reader));
break;
case ONCOPY:
dataDefinition.addCopyHook(getHookDefinition(reader));
break;
case VALIDATESWITH:
dataDefinition.addValidatorHook(new CustomEntityValidator(getHookDefinition(reader)));
break;
default :
break;
}
}",0.9805699481865284
39347,"private void addFields(){
  for (  Map.Entry<String,Set<Element>> modelFields : fields.entrySet()) {
    Document document=documents.get(modelFields.getKey());
    checkNotNull(document,""String_Node_Str"" + modelFields.getKey());
    Element fields=(Element)document.getRootElement().getChildren().get(0);
    if (!""String_Node_Str"".equals(fields.getName())) {
      throw new IllegalStateException(""String_Node_Str"" + fields.getName());
    }
    for (    Element field : modelFields.getValue()) {
      field=JdomUtils.replaceNamespace(field,document.getRootElement().getNamespace());
      fields.addContent(field.detach());
    }
  }
}","private void addFields(){
  for (  Map.Entry<String,Set<Element>> modelFields : fields.entrySet()) {
    Document document=documents.get(modelFields.getKey());
    checkNotNull(document,""String_Node_Str"" + modelFields.getKey());
    Element fieldsElement=(Element)document.getRootElement().getChildren().get(0);
    if (!""String_Node_Str"".equals(fieldsElement.getName())) {
      throw new IllegalStateException(""String_Node_Str"" + fieldsElement.getName());
    }
    for (    Element field : modelFields.getValue()) {
      field=JdomUtils.replaceNamespace(field,document.getRootElement().getNamespace());
      fieldsElement.addContent(field.detach());
    }
  }
}",0.9785276073619632
39348,"private void addHooks(){
  for (  Map.Entry<String,Set<Element>> modelHooks : hooks.entrySet()) {
    Document document=documents.get(modelHooks.getKey());
    checkNotNull(document,""String_Node_Str"" + modelHooks.getKey());
    Element hooks=(Element)document.getRootElement().getChildren().get(1);
    if (!""String_Node_Str"".equals(hooks.getName())) {
      throw new IllegalStateException(""String_Node_Str"" + hooks.getName());
    }
    for (    Element hook : modelHooks.getValue()) {
      hook=JdomUtils.replaceNamespace(hook,document.getRootElement().getNamespace());
      hooks.addContent(hook.detach());
    }
  }
}","private void addHooks(){
  for (  Map.Entry<String,Set<Element>> modelHooks : hooks.entrySet()) {
    Document document=documents.get(modelHooks.getKey());
    checkNotNull(document,""String_Node_Str"" + modelHooks.getKey());
    Element hooksElement=(Element)document.getRootElement().getChildren().get(1);
    if (!""String_Node_Str"".equals(hooksElement.getName())) {
      throw new IllegalStateException(""String_Node_Str"" + hooksElement.getName());
    }
    for (    Element hook : modelHooks.getValue()) {
      hook=JdomUtils.replaceNamespace(hook,document.getRootElement().getNamespace());
      hooksElement.addContent(hook.detach());
    }
  }
}",0.9780564263322884
39349,"@Override public CollectionPersister getCollectionPersister(final String role) throws MappingException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getCollectionPersister(role);
}","@Override public CollectionPersister getCollectionPersister(final String role){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getCollectionPersister(role);
}",0.9329758713136728
39350,"@Override public String[] getReturnAliases(final String queryString) throws HibernateException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getReturnAliases(queryString);
}","@Override public String[] getReturnAliases(final String queryString){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getReturnAliases(queryString);
}",0.9243697478991596
39351,"@Override public Type getIdentifierType(final String className) throws MappingException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getIdentifierType(className);
}","@Override public Type getIdentifierType(final String className){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getIdentifierType(className);
}",0.9271137026239068
39352,"@Override public QueryCache getQueryCache(final String regionName) throws HibernateException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getQueryCache(regionName);
}","@Override public QueryCache getQueryCache(final String regionName){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getQueryCache(regionName);
}",0.9217391304347826
39353,"@Override public String[] getImplementors(final String className) throws MappingException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getImplementors(className);
}","@Override public String[] getImplementors(final String className){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getImplementors(className);
}",0.9271137026239068
39354,"@Override public String getIdentifierPropertyName(final String className) throws MappingException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getIdentifierPropertyName(className);
}","@Override public String getIdentifierPropertyName(final String className){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getIdentifierPropertyName(className);
}",0.934036939313984
39355,"@Override public Type[] getReturnTypes(final String queryString) throws HibernateException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getReturnTypes(queryString);
}","@Override public Type[] getReturnTypes(final String queryString){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getReturnTypes(queryString);
}",0.9217391304347826
39356,"@Override public Type getReferencedPropertyType(final String className,final String propertyName) throws MappingException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getReferencedPropertyType(className,propertyName);
}","@Override public Type getReferencedPropertyType(final String className,final String propertyName){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getReferencedPropertyType(className,propertyName);
}",0.9448123620309052
39357,"@Override public EntityPersister getEntityPersister(final String entityName) throws MappingException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).getEntityPersister(entityName);
}","@Override public EntityPersister getEntityPersister(final String entityName){
  return ((SessionFactoryImplementor)getSessionFactory(false)).getEntityPersister(entityName);
}",0.9329758713136728
39358,"@Override public Session openSession(final Connection connection,final boolean flushBeforeCompletionEnabled,final boolean autoCloseSessionEnabled,final ConnectionReleaseMode connectionReleaseMode) throws HibernateException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).openTemporarySession();
}","@Override public Session openSession(final Connection connection,final boolean flushBeforeCompletionEnabled,final boolean autoCloseSessionEnabled,final ConnectionReleaseMode connectionReleaseMode){
  return ((SessionFactoryImplementor)getSessionFactory(false)).openTemporarySession();
}",0.9549248747913188
39359,"@Override public Session openTemporarySession() throws HibernateException {
  return ((SessionFactoryImplementor)getSessionFactory(false)).openTemporarySession();
}","@Override public Session openTemporarySession(){
  return ((SessionFactoryImplementor)getSessionFactory(false)).openTemporarySession();
}",0.9102990033222592
39360,"public void addRestrictionToCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  Restriction[] categoryRestrictions=new Restriction[disabledCategories.size()];
  int index=0;
  for (  Pair<String,String> category : disabledCategories) {
    Restriction pluginEquals=Restrictions.eq(""String_Node_Str"",category.getKey());
    Restriction nameEquals=Restrictions.eq(""String_Node_Str"",category.getValue());
    Restriction sameCategory=Restrictions.and(pluginEquals,nameEquals);
    categoryRestrictions[index++]=Restrictions.not(sameCategory);
  }
  Restriction restriction=Restrictions.and(categoryRestrictions);
  categoriesGrid.setCustomRestriction(new SimpleCustomRestriction(restriction));
}","public void addRestrictionToCategoriesGrid(final ViewDefinitionState viewDefinitionState){
  GridComponent categoriesGrid=(GridComponent)viewDefinitionState.getComponentByReference(""String_Node_Str"");
  Restriction[] categoryRestrictions=new Restriction[DISABLED_CATEGORIES.size()];
  int index=0;
  for (  Pair<String,String> category : DISABLED_CATEGORIES) {
    Restriction pluginEquals=Restrictions.eq(""String_Node_Str"",category.getKey());
    Restriction nameEquals=Restrictions.eq(""String_Node_Str"",category.getValue());
    Restriction sameCategory=Restrictions.and(pluginEquals,nameEquals);
    categoryRestrictions[index++]=Restrictions.not(sameCategory);
  }
  Restriction restriction=Restrictions.and(categoryRestrictions);
  categoriesGrid.setCustomRestriction(new SimpleCustomRestriction(restriction));
}",0.954656862745098
39361,"@Override public boolean hasPermission(Authentication authentication,Serializable targetId,String targetType,Object permission){
  QcadooPermisionEvaluator evaluator=evaluators.get(targetType);
  if (evaluator == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + targetType + ""String_Node_Str"");
  }
  return evaluator.hasPermission(authentication,(String)permission,(String)targetId);
}","@Override public boolean hasPermission(final Authentication authentication,final Serializable targetId,final String targetType,final Object permission){
  QcadooPermisionEvaluator evaluator=evaluators.get(targetType);
  if (evaluator == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + targetType + ""String_Node_Str"");
  }
  return evaluator.hasPermission(authentication,(String)permission,(String)targetId);
}",0.971153846153846
39362,"public UserModule(final String login,final String email,final String firstName,final String lastName,final String password,final String groupName,final boolean useHardPassword,final DataDefinitionService dataDefinitionService){
  this.login=login;
  this.email=email;
  this.firstName=firstName;
  this.lastName=lastName;
  this.password=password;
  this.groupName=groupName;
  this.dataDefinitionService=dataDefinitionService;
}","public UserModule(final String login,final String email,final String firstName,final String lastName,final String password,final String groupName,final DataDefinitionService dataDefinitionService){
  this.login=login;
  this.email=email;
  this.firstName=firstName;
  this.lastName=lastName;
  this.password=password;
  this.groupName=groupName;
  this.dataDefinitionService=dataDefinitionService;
}",0.9637681159420288
39363,"@Override public UserModule parse(final String pluginIdentifier,final Element element){
  String login=element.getAttributeValue(""String_Node_Str"");
  String email=element.getAttributeValue(""String_Node_Str"");
  String firstName=element.getAttributeValue(""String_Node_Str"");
  String lastName=element.getAttributeValue(""String_Node_Str"");
  String password=element.getAttributeValue(""String_Node_Str"");
  String groupName=element.getAttributeValue(""String_Node_Str"");
  checkNotNull(login,""String_Node_Str"" + getIdentifier() + ""String_Node_Str"");
  checkNotNull(password,""String_Node_Str"" + getIdentifier() + ""String_Node_Str"");
  checkNotNull(groupName,""String_Node_Str"" + getIdentifier() + ""String_Node_Str"");
  return new UserModule(login,email,firstName,lastName,password,groupName,setAsDemoEnviroment,dataDefinitionService);
}","@Override public UserModule parse(final String pluginIdentifier,final Element element){
  String login=element.getAttributeValue(""String_Node_Str"");
  String email=element.getAttributeValue(""String_Node_Str"");
  String firstName=element.getAttributeValue(""String_Node_Str"");
  String lastName=element.getAttributeValue(""String_Node_Str"");
  String password=element.getAttributeValue(""String_Node_Str"");
  String groupName=element.getAttributeValue(""String_Node_Str"");
  checkNotNull(login,""String_Node_Str"" + getIdentifier() + ""String_Node_Str"");
  checkNotNull(password,""String_Node_Str"" + getIdentifier() + ""String_Node_Str"");
  checkNotNull(groupName,""String_Node_Str"" + getIdentifier() + ""String_Node_Str"");
  return new UserModule(login,email,firstName,lastName,password,groupName,dataDefinitionService);
}",0.969549330085262
39364,"@SuppressWarnings(""String_Node_Str"") @Test public void shouldPerformInit() throws Exception {
  InternalPlugin plugin1=mock(InternalPlugin.class,""String_Node_Str"");
  QcadooPluginPlugin pluginsPlugin1=mock(QcadooPluginPlugin.class,""String_Node_Str"");
  given(plugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getState()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getVersion()).willReturn(""String_Node_Str"");
  InternalPlugin plugin2=mock(InternalPlugin.class,""String_Node_Str"");
  QcadooPluginPlugin pluginsPlugin2=mock(QcadooPluginPlugin.class,""String_Node_Str"");
  given(plugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getVersion()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getState()).willReturn(""String_Node_Str"");
  Set<InternalPlugin> pluginsFromDescriptor=Sets.newHashSet(plugin1,plugin2);
  Set<QcadooPluginPlugin> pluginsFromDatabase=Sets.newHashSet(pluginsPlugin1,pluginsPlugin2);
  List<Plugin> sortedPluginsToInitialize=Lists.newArrayList((Plugin)plugin2,(Plugin)plugin1);
  given(pluginDependencyManager.sortPluginsInDependencyOrder(Mockito.anyCollectionOf(Plugin.class),Mockito.anyMap())).willReturn(sortedPluginsToInitialize);
  given(pluginDescriptorParser.loadPlugins()).willReturn(pluginsFromDescriptor);
  given(pluginDao.list()).willReturn(pluginsFromDatabase);
  pluginAccessor.init();
  InOrder inOrder=inOrder(plugin2,plugin1,moduleFactoryAccessor);
  inOrder.verify(moduleFactoryAccessor).init(sortedPluginsToInitialize);
}","@SuppressWarnings(""String_Node_Str"") @Test public void shouldPerformInit() throws Exception {
  InternalPlugin plugin1=mock(InternalPlugin.class,""String_Node_Str"");
  QcadooPluginPlugin pluginsPlugin1=mock(QcadooPluginPlugin.class,""String_Node_Str"");
  given(plugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getState()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getVersion()).willReturn(""String_Node_Str"");
  InternalPlugin plugin2=mock(InternalPlugin.class,""String_Node_Str"");
  QcadooPluginPlugin pluginsPlugin2=mock(QcadooPluginPlugin.class,""String_Node_Str"");
  given(plugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getVersion()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getState()).willReturn(""String_Node_Str"");
  Set<InternalPlugin> pluginsFromDescriptor=Sets.newHashSet(plugin1,plugin2);
  Set<QcadooPluginPlugin> pluginsFromDatabase=Sets.newHashSet(pluginsPlugin1,pluginsPlugin2);
  List<Plugin> sortedPluginsToInitialize=Lists.newArrayList((Plugin)plugin2,(Plugin)plugin1);
  given(pluginDependencyManager.sortPluginsInDependencyOrder(Mockito.anyCollectionOf(Plugin.class),Mockito.anyMap())).willReturn(sortedPluginsToInitialize);
  given(pluginDescriptorParser.loadPlugins()).willReturn(pluginsFromDescriptor);
  given(pluginDao.list()).willReturn(pluginsFromDatabase);
  pluginAccessor.init();
  pluginAccessor.onApplicationEvent(null);
  InOrder inOrder=inOrder(plugin2,plugin1,moduleFactoryAccessor);
  inOrder.verify(moduleFactoryAccessor).init(sortedPluginsToInitialize);
}",0.9873193748156884
39365,"@SuppressWarnings(""String_Node_Str"") @Test public void shouldPerformEnableOnEnablingPlugins() throws Exception {
  InternalPlugin plugin1=mock(InternalPlugin.class);
  QcadooPluginPlugin pluginsPlugin1=mock(QcadooPluginPlugin.class);
  given(plugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getState()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getVersion()).willReturn(""String_Node_Str"");
  given(plugin1.hasState(PluginState.ENABLING)).willReturn(true);
  InternalPlugin plugin2=mock(InternalPlugin.class);
  QcadooPluginPlugin pluginsPlugin2=mock(QcadooPluginPlugin.class);
  given(plugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getState()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getVersion()).willReturn(""String_Node_Str"");
  given(plugin2.hasState(PluginState.ENABLING)).willReturn(true);
  InternalPlugin plugin3=mock(InternalPlugin.class);
  QcadooPluginPlugin pluginsPlugin3=mock(QcadooPluginPlugin.class);
  given(pluginsPlugin3.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin3.getVersion()).willReturn(""String_Node_Str"");
  given(pluginsPlugin3.getState()).willReturn(""String_Node_Str"");
  given(plugin3.getIdentifier()).willReturn(""String_Node_Str"");
  Set<InternalPlugin> pluginsFromDescriptor=Sets.newHashSet(plugin1,plugin2,plugin3);
  Set<QcadooPluginPlugin> pluginsFromDatabase=Sets.newHashSet(pluginsPlugin1,pluginsPlugin2,pluginsPlugin3);
  List<Plugin> sortedPluginsToInitialize=Lists.newArrayList((Plugin)plugin2,(Plugin)plugin1);
  given(pluginDependencyManager.sortPluginsInDependencyOrder(Mockito.anyCollectionOf(Plugin.class),Mockito.anyMap())).willReturn(sortedPluginsToInitialize);
  given(pluginDescriptorParser.loadPlugins()).willReturn(pluginsFromDescriptor);
  given(pluginDao.list()).willReturn(pluginsFromDatabase);
  pluginAccessor.init();
  InOrder inOrder=inOrder(plugin2,plugin1,moduleFactoryAccessor);
  inOrder.verify(moduleFactoryAccessor).init(sortedPluginsToInitialize);
  inOrder.verify(plugin2).changeStateTo(PluginState.ENABLED);
  inOrder.verify(plugin1).changeStateTo(PluginState.ENABLED);
  verify(plugin3,never()).changeStateTo(PluginState.ENABLED);
  verify(pluginDao).save(plugin1);
  verify(pluginDao).save(plugin2);
  verify(pluginDao,never()).save(plugin3);
}","@SuppressWarnings(""String_Node_Str"") @Test public void shouldPerformEnableOnEnablingPlugins() throws Exception {
  InternalPlugin plugin1=mock(InternalPlugin.class);
  QcadooPluginPlugin pluginsPlugin1=mock(QcadooPluginPlugin.class);
  given(plugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getState()).willReturn(""String_Node_Str"");
  given(pluginsPlugin1.getVersion()).willReturn(""String_Node_Str"");
  given(plugin1.hasState(PluginState.ENABLING)).willReturn(true);
  InternalPlugin plugin2=mock(InternalPlugin.class);
  QcadooPluginPlugin pluginsPlugin2=mock(QcadooPluginPlugin.class);
  given(plugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getState()).willReturn(""String_Node_Str"");
  given(pluginsPlugin2.getVersion()).willReturn(""String_Node_Str"");
  given(plugin2.hasState(PluginState.ENABLING)).willReturn(true);
  InternalPlugin plugin3=mock(InternalPlugin.class);
  QcadooPluginPlugin pluginsPlugin3=mock(QcadooPluginPlugin.class);
  given(pluginsPlugin3.getIdentifier()).willReturn(""String_Node_Str"");
  given(pluginsPlugin3.getVersion()).willReturn(""String_Node_Str"");
  given(pluginsPlugin3.getState()).willReturn(""String_Node_Str"");
  given(plugin3.getIdentifier()).willReturn(""String_Node_Str"");
  Set<InternalPlugin> pluginsFromDescriptor=Sets.newHashSet(plugin1,plugin2,plugin3);
  Set<QcadooPluginPlugin> pluginsFromDatabase=Sets.newHashSet(pluginsPlugin1,pluginsPlugin2,pluginsPlugin3);
  List<Plugin> sortedPluginsToInitialize=Lists.newArrayList((Plugin)plugin2,(Plugin)plugin1);
  given(pluginDependencyManager.sortPluginsInDependencyOrder(Mockito.anyCollectionOf(Plugin.class),Mockito.anyMap())).willReturn(sortedPluginsToInitialize);
  given(pluginDescriptorParser.loadPlugins()).willReturn(pluginsFromDescriptor);
  given(pluginDao.list()).willReturn(pluginsFromDatabase);
  pluginAccessor.init();
  pluginAccessor.onApplicationEvent(null);
  InOrder inOrder=inOrder(plugin2,plugin1,moduleFactoryAccessor);
  inOrder.verify(moduleFactoryAccessor).init(sortedPluginsToInitialize);
  inOrder.verify(plugin2).changeStateTo(PluginState.ENABLED);
  inOrder.verify(plugin1).changeStateTo(PluginState.ENABLED);
  verify(plugin3,never()).changeStateTo(PluginState.ENABLED);
  verify(pluginDao).save(plugin1);
  verify(pluginDao).save(plugin2);
  verify(pluginDao,never()).save(plugin3);
}",0.9913533078624572
39366,"/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: 2010: 2010-12-31 2010-03: 2010-03-31 2010-03-06: 2010-03-06 Examples with down-complete: 2010: 2010-01-01 2010-03: 2010-03-01 2010-03-06: 2010-03-06
 * @param expression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseDate(final String expression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=expression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(""String_Node_Str"",1);
    }
    if (year < 1500) {
      return null;
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(""String_Node_Str"",1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(""String_Node_Str"",1).initCause(e);
  }
}","/** 
 * Parse string into date, with autocomplete missing month and day. Examples with up-complete: <ul> <li>2010: 2010-12-31</li> <li>2010-03: 2010-03-31</li> <li>2010-03-06: 2010-03-06</li> </ul> Examples with down-complete: <ul> <li>2010: 2010-01-01</li> <li>2010-03: 2010-03-01</li> <li>2010-03-06: 2010-03-06</li> </ul>
 * @param dateExpression string with date expression
 * @param upComplete true if up-complete, otherwise down-complete
 * @return date or null if year is lower than 1500
 * @throws ParseException if year, month or day is invalid
 */
public static Date parseDate(final String dateExpression,final boolean upComplete) throws ParseException {
  String[] dateExpressionParts=dateExpression.split(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,2000);
  cal.set(Calendar.MONTH,1);
  cal.set(Calendar.DAY_OF_MONTH,1);
  boolean dayDefined=false;
  try {
    int year=Integer.parseInt(dateExpressionParts[0]);
    if (year > 2500) {
      throw new ParseException(""String_Node_Str"",1);
    }
    if (year < 1500) {
      return null;
    }
    cal.set(Calendar.YEAR,year);
    if (dateExpressionParts.length > 1) {
      int month=Integer.parseInt(dateExpressionParts[1]);
      if (month > 12 || month < 1) {
        throw new ParseException(""String_Node_Str"",1);
      }
      cal.set(Calendar.MONTH,month - 1);
    }
 else {
      if (upComplete) {
        cal.set(Calendar.MONTH,cal.getActualMaximum(Calendar.MONTH));
      }
 else {
        cal.set(Calendar.MONTH,cal.getActualMinimum(Calendar.MONTH));
      }
    }
    if (dateExpressionParts.length > 2) {
      int day=Integer.parseInt(dateExpressionParts[2]);
      if (day > 0) {
        cal.set(Calendar.DAY_OF_MONTH,day);
        dayDefined=true;
      }
    }
    if (!dayDefined) {
      if (upComplete) {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH));
      }
 else {
        cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH));
      }
    }
    return cal.getTime();
  }
 catch (  NumberFormatException e) {
    throw (ParseException)new ParseException(""String_Node_Str"",1).initCause(e);
  }
}",0.896244131455399
39367,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((identifier == null) ? 0 : identifier.hashCode());
  result=prime * result + ((version == null) ? 0 : version.hashCode());
  return result;
}","/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((identifier == null) ? 0 : identifier.hashCode());
  result=prime * result + ((version == null) ? 0 : version.hashCode());
  return result;
}",0.9484126984126984
39368,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof PluginDependencyInformation)) {
    return false;
  }
  PluginDependencyInformation other=(PluginDependencyInformation)obj;
  if (identifier == null) {
    if (other.identifier != null) {
      return false;
    }
  }
 else   if (!identifier.equals(other.identifier)) {
    return false;
  }
  if (version == null) {
    if (other.version != null) {
      return false;
    }
  }
 else   if (!version.equals(other.version)) {
    return false;
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof PluginDependencyInformation)) {
    return false;
  }
  PluginDependencyInformation other=(PluginDependencyInformation)obj;
  if (identifier == null) {
    if (other.identifier != null) {
      return false;
    }
  }
 else   if (!identifier.equals(other.identifier)) {
    return false;
  }
  if (version == null) {
    if (other.version != null) {
      return false;
    }
  }
 else   if (!version.equals(other.version)) {
    return false;
  }
  return true;
}",0.9795597484276728
39369,"@Override public String toString(){
  return identifier + ""String_Node_Str"" + version;
}","/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return identifier + ""String_Node_Str"" + version;
}",0.8712871287128713
39370,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((description == null) ? 0 : description.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + ((vendor == null) ? 0 : vendor.hashCode());
  result=prime * result + ((vendorUrl == null) ? 0 : vendorUrl.hashCode());
  return result;
}","/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((description == null) ? 0 : description.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + ((vendor == null) ? 0 : vendor.hashCode());
  result=prime * result + ((vendorUrl == null) ? 0 : vendorUrl.hashCode());
  return result;
}",0.967005076142132
39371,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  PluginInformation other=(PluginInformation)obj;
  if (description == null) {
    if (other.description != null) {
      return false;
    }
  }
 else   if (!description.equals(other.description)) {
    return false;
  }
  if (name == null) {
    if (other.name != null) {
      return false;
    }
  }
 else   if (!name.equals(other.name)) {
    return false;
  }
  if (vendor == null) {
    if (other.vendor != null) {
      return false;
    }
  }
 else   if (!vendor.equals(other.vendor)) {
    return false;
  }
  if (vendorUrl == null) {
    if (other.vendorUrl != null) {
      return false;
    }
  }
 else   if (!vendorUrl.equals(other.vendorUrl)) {
    return false;
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  PluginInformation other=(PluginInformation)obj;
  if (description == null) {
    if (other.description != null) {
      return false;
    }
  }
 else   if (!description.equals(other.description)) {
    return false;
  }
  if (name == null) {
    if (other.name != null) {
      return false;
    }
  }
 else   if (!name.equals(other.name)) {
    return false;
  }
  if (vendor == null) {
    if (other.vendor != null) {
      return false;
    }
  }
 else   if (!vendor.equals(other.vendor)) {
    return false;
  }
  if (vendorUrl == null) {
    if (other.vendorUrl != null) {
      return false;
    }
  }
 else   if (!vendorUrl.equals(other.vendorUrl)) {
    return false;
  }
  return true;
}",0.9856670341786108
39372,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + branch;
  result=prime * result + major;
  result=prime * result + minor;
  return result;
}","/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + branch;
  result=prime * result + major;
  result=prime * result + minor;
  return result;
}",0.9356435643564356
39373,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof Version)) {
    return false;
  }
  Version other=(Version)obj;
  if (branch != other.branch) {
    return false;
  }
  if (major != other.major) {
    return false;
  }
  if (minor != other.minor) {
    return false;
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof Version)) {
    return false;
  }
  Version other=(Version)obj;
  if (branch != other.branch) {
    return false;
  }
  if (major != other.major) {
    return false;
  }
  if (minor != other.minor) {
    return false;
  }
  return true;
}",0.9682926829268292
39374,"@Override public String toString(){
  return major + ""String_Node_Str"" + minor+ ""String_Node_Str""+ branch;
}","/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return major + ""String_Node_Str"" + minor+ ""String_Node_Str""+ branch;
}",0.8925619834710744
39375,"@Override public int compareTo(final Version otherVersion){
  if (major < otherVersion.major) {
    return -1;
  }
 else   if (major > otherVersion.major) {
    return 1;
  }
  if (minor < otherVersion.minor) {
    return -1;
  }
 else   if (minor > otherVersion.minor) {
    return 1;
  }
  if (branch < otherVersion.branch) {
    return -1;
  }
 else   if (branch > otherVersion.branch) {
    return 1;
  }
  return 0;
}","/** 
 * {@inheritDoc}
 */
@Override public int compareTo(final Version otherVersion){
  if (major < otherVersion.major) {
    return -1;
  }
 else   if (major > otherVersion.major) {
    return 1;
  }
  if (minor < otherVersion.minor) {
    return -1;
  }
 else   if (minor > otherVersion.minor) {
    return 1;
  }
  if (branch < otherVersion.branch) {
    return -1;
  }
 else   if (branch > otherVersion.branch) {
    return 1;
  }
  return 0;
}",0.9701149425287356
39376,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + (includeMaxVersion ? 1231 : 1237);
  result=prime * result + (includeMinVersion ? 1231 : 1237);
  result=prime * result + ((maxVersion == null) ? 0 : maxVersion.hashCode());
  result=prime * result + ((minVersion == null) ? 0 : minVersion.hashCode());
  return result;
}","/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + (includeMaxVersion ? 1231 : 1237);
  result=prime * result + (includeMinVersion ? 1231 : 1237);
  result=prime * result + ((maxVersion == null) ? 0 : maxVersion.hashCode());
  result=prime * result + ((minVersion == null) ? 0 : minVersion.hashCode());
  return result;
}",0.9657894736842104
39377,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof VersionOfDependency)) {
    return false;
  }
  VersionOfDependency other=(VersionOfDependency)obj;
  if (includeMaxVersion != other.includeMaxVersion) {
    return false;
  }
  if (includeMinVersion != other.includeMinVersion) {
    return false;
  }
  if (maxVersion == null) {
    if (other.maxVersion != null) {
      return false;
    }
  }
 else   if (!maxVersion.equals(other.maxVersion)) {
    return false;
  }
  if (minVersion == null) {
    if (other.minVersion != null) {
      return false;
    }
  }
 else   if (!minVersion.equals(other.minVersion)) {
    return false;
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof VersionOfDependency)) {
    return false;
  }
  VersionOfDependency other=(VersionOfDependency)obj;
  if (includeMaxVersion != other.includeMaxVersion) {
    return false;
  }
  if (includeMinVersion != other.includeMinVersion) {
    return false;
  }
  if (maxVersion == null) {
    if (other.maxVersion != null) {
      return false;
    }
  }
 else   if (!maxVersion.equals(other.maxVersion)) {
    return false;
  }
  if (minVersion == null) {
    if (other.minVersion != null) {
      return false;
    }
  }
 else   if (!minVersion.equals(other.minVersion)) {
    return false;
  }
  return true;
}",0.9832474226804124
39378,"@Override public String toString(){
  if (minVersion == null) {
    if (maxVersion == null) {
      return ""String_Node_Str"";
    }
 else {
      return maxVersion.toString() + (includeMaxVersion ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
 else {
    if (maxVersion == null) {
      return (includeMinVersion ? ""String_Node_Str"" : ""String_Node_Str"") + minVersion.toString();
    }
 else {
      if (minVersion.equals(maxVersion)) {
        return minVersion.toString();
      }
 else {
        return (includeMinVersion ? ""String_Node_Str"" : ""String_Node_Str"") + minVersion.toString() + ""String_Node_Str""+ maxVersion.toString()+ (includeMaxVersion ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  if (minVersion == null) {
    if (maxVersion == null) {
      return ""String_Node_Str"";
    }
 else {
      return maxVersion.toString() + (includeMaxVersion ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
 else {
    if (maxVersion == null) {
      return (includeMinVersion ? ""String_Node_Str"" : ""String_Node_Str"") + minVersion.toString();
    }
 else {
      if (minVersion.equals(maxVersion)) {
        return minVersion.toString();
      }
 else {
        return (includeMinVersion ? ""String_Node_Str"" : ""String_Node_Str"") + minVersion.toString() + ""String_Node_Str""+ maxVersion.toString()+ (includeMaxVersion ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
  }
}",0.9822161422708618
39379,"@PostConstruct public void init(){
  LOG.info(""String_Node_Str"");
  long time=System.currentTimeMillis();
  pluginStateResolver.setPluginAccessor(this);
  Set<InternalPlugin> pluginsFromDescriptor=pluginDescriptorParser.loadPlugins();
  Set<QcadooPluginPlugin> pluginsFromDatabase=pluginDao.list();
  for (  InternalPlugin plugin : pluginsFromDescriptor) {
    QcadooPluginPlugin existingPlugin=null;
    for (    QcadooPluginPlugin databasePlugin : pluginsFromDatabase) {
      if (plugin.getIdentifier().equals(databasePlugin.getIdentifier())) {
        existingPlugin=databasePlugin;
        break;
      }
    }
    if (existingPlugin != null) {
      plugin.changeStateTo(PluginState.valueOf(existingPlugin.getState()));
    }
 else {
      plugin.changeStateTo(PluginState.ENABLING);
    }
    if (existingPlugin == null || plugin.compareVersion(new Version(existingPlugin.getVersion())) > 0) {
      pluginDao.save(plugin);
    }
 else     if (plugin.compareVersion(new Version(existingPlugin.getVersion())) < 0) {
      throw new IllegalStateException(""String_Node_Str"" + plugin.getIdentifier());
    }
    LOG.info(""String_Node_Str"" + plugin);
    plugins.put(plugin.getIdentifier(),plugin);
  }
  for (  QcadooPluginPlugin databasePlugin : pluginsFromDatabase) {
    if (databasePlugin.getState().equals(PluginState.TEMPORARY.toString())) {
      continue;
    }
    Plugin existingPlugin=null;
    for (    Plugin plugin : pluginsFromDescriptor) {
      if (databasePlugin.getIdentifier().equals(plugin.getIdentifier())) {
        existingPlugin=plugin;
        break;
      }
    }
    if (existingPlugin == null) {
      pluginDao.delete(databasePlugin);
    }
  }
  List<Plugin> sortedPlugins=pluginDependencyManager.sortPluginsInDependencyOrder(plugins.values(),plugins);
  moduleFactoryAccessor.init(sortedPlugins);
  for (  Plugin plugin : sortedPlugins) {
    if (plugin.hasState(PluginState.ENABLING)) {
      ((InternalPlugin)plugin).changeStateTo(PluginState.ENABLED);
      pluginDao.save(plugin);
    }
  }
  LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - time) + ""String_Node_Str"");
}","@PostConstruct public void init(){
  LOG.info(""String_Node_Str"");
  long time=System.currentTimeMillis();
  pluginStateResolver.setPluginAccessor(this);
  Set<InternalPlugin> pluginsFromDescriptor=pluginDescriptorParser.loadPlugins();
  Set<QcadooPluginPlugin> pluginsFromDatabase=pluginDao.list();
  for (  InternalPlugin plugin : pluginsFromDescriptor) {
    QcadooPluginPlugin existingPlugin=null;
    for (    QcadooPluginPlugin databasePlugin : pluginsFromDatabase) {
      if (plugin.getIdentifier().equals(databasePlugin.getIdentifier())) {
        existingPlugin=databasePlugin;
        break;
      }
    }
    if (existingPlugin != null) {
      plugin.changeStateTo(PluginState.valueOf(existingPlugin.getState()));
    }
 else {
      plugin.changeStateTo(PluginState.ENABLING);
    }
    if (existingPlugin == null || plugin.compareVersion(new Version(existingPlugin.getVersion())) > 0) {
      pluginDao.save(plugin);
    }
 else     if (plugin.compareVersion(new Version(existingPlugin.getVersion())) < 0) {
      throw new IllegalStateException(""String_Node_Str"" + plugin.getIdentifier());
    }
    LOG.info(""String_Node_Str"" + plugin);
    plugins.put(plugin.getIdentifier(),plugin);
  }
  for (  QcadooPluginPlugin databasePlugin : pluginsFromDatabase) {
    if (databasePlugin.getState().equals(PluginState.TEMPORARY.toString())) {
      continue;
    }
    Plugin existingPlugin=null;
    for (    Plugin plugin : pluginsFromDescriptor) {
      if (databasePlugin.getIdentifier().equals(plugin.getIdentifier())) {
        existingPlugin=plugin;
        break;
      }
    }
    if (existingPlugin == null) {
      pluginDao.delete(databasePlugin);
    }
  }
  LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - time) + ""String_Node_Str"");
}",0.9094650205761317
39380,"/** 
 * Performs event on specified view and returns the result
 * @param pluginIdentifier identifier of plugin
 * @param viewName name of view
 * @param body request json body
 * @param locale current locale
 * @return JSONObject generated by performing event
 */
Object performEvent(String pluginIdentifier,String viewName,JSONObject body,Locale locale);","/** 
 * Performs event on specified view and returns the result
 * @param pluginIdentifier identifier of plugin
 * @param viewName name of view
 * @param body request json body
 * @param locale current locale
 * @return JSONObject generated by performing event
 */
JSONObject performEvent(String pluginIdentifier,String viewName,JSONObject body,Locale locale);",0.994413407821229
39381,"public Object performEvent(final String pluginIdentifier,final String viewName,final JSONObject body,final Locale locale){
  InternalViewDefinition viewDefinition=(InternalViewDefinition)viewDefinitionService.get(pluginIdentifier,viewName);
  try {
    return viewDefinition.performEvent(body,locale);
  }
 catch (  JSONException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}","@Override public JSONObject performEvent(final String pluginIdentifier,final String viewName,final JSONObject body,final Locale locale){
  InternalViewDefinition viewDefinition=(InternalViewDefinition)viewDefinitionService.get(pluginIdentifier,viewName);
  try {
    return viewDefinition.performEvent(body,locale);
  }
 catch (  JSONException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
}",0.9825870646766168
39382,"public ModelAndView prepareView(final String pluginIdentifier,final String viewName,final Map<String,String> arguments,final Locale locale){
  InternalViewDefinition viewDefinition=(InternalViewDefinition)viewDefinitionService.get(pluginIdentifier,viewName);
  ModelAndView modelAndView=new ModelAndView(""String_Node_Str"");
  String context=viewDefinition.translateContextReferences(arguments.get(""String_Node_Str""));
  JSONObject jsonContext=new JSONObject();
  if (StringUtils.hasText(context)) {
    try {
      jsonContext=new JSONObject(context);
    }
 catch (    JSONException e) {
      throw new IllegalStateException(e.getMessage(),e);
    }
  }
  modelAndView.addObject(""String_Node_Str"",viewDefinition.prepareView(jsonContext,locale));
  modelAndView.addObject(""String_Node_Str"",viewName);
  modelAndView.addObject(""String_Node_Str"",pluginIdentifier);
  modelAndView.addObject(""String_Node_Str"",context);
  boolean popup=false;
  if (arguments.containsKey(""String_Node_Str"")) {
    popup=Boolean.parseBoolean(arguments.get(""String_Node_Str""));
  }
  modelAndView.addObject(""String_Node_Str"",popup);
  modelAndView.addObject(""String_Node_Str"",locale.getLanguage());
  return modelAndView;
}","@Override public ModelAndView prepareView(final String pluginIdentifier,final String viewName,final Map<String,String> arguments,final Locale locale){
  InternalViewDefinition viewDefinition=(InternalViewDefinition)viewDefinitionService.get(pluginIdentifier,viewName);
  ModelAndView modelAndView=new ModelAndView(""String_Node_Str"");
  String context=viewDefinition.translateContextReferences(arguments.get(""String_Node_Str""));
  JSONObject jsonContext=new JSONObject();
  if (StringUtils.hasText(context)) {
    try {
      jsonContext=new JSONObject(context);
    }
 catch (    JSONException e) {
      throw new IllegalStateException(e.getMessage(),e);
    }
  }
  modelAndView.addObject(""String_Node_Str"",viewDefinition.prepareView(jsonContext,locale));
  modelAndView.addObject(""String_Node_Str"",viewName);
  modelAndView.addObject(""String_Node_Str"",pluginIdentifier);
  modelAndView.addObject(""String_Node_Str"",context);
  boolean popup=false;
  if (arguments.containsKey(""String_Node_Str"")) {
    popup=Boolean.parseBoolean(arguments.get(""String_Node_Str""));
  }
  modelAndView.addObject(""String_Node_Str"",popup);
  modelAndView.addObject(""String_Node_Str"",locale.getLanguage());
  return modelAndView;
}",0.995854063018242
39383,"@Override @Monitorable public String getCurrentUserName(){
  String login=SecurityContextHolder.getContext().getAuthentication().getName();
  Entity entity=getUserEntity(SecurityContextHolder.getContext().getAuthentication().getName());
  checkNotNull(entity,""String_Node_Str"",login);
  return entity.getStringField(""String_Node_Str"");
}","@Override @Monitorable public String getCurrentUserName(){
  if (SecurityContextHolder.getContext() == null || SecurityContextHolder.getContext().getAuthentication() == null || SecurityContextHolder.getContext().getAuthentication().getName() == null) {
    return null;
  }
  String login=SecurityContextHolder.getContext().getAuthentication().getName();
  Entity entity=getUserEntity(SecurityContextHolder.getContext().getAuthentication().getName());
  checkNotNull(entity,""String_Node_Str"",login);
  return entity.getStringField(""String_Node_Str"");
}",0.7581552305961755
39384,"BeanManager beanManager(){
  if (lookupInJNDI() == null) {
    BeanContainer beanContainer=BeanContainerManager.getInstance();
    return ((BeanManagerLocator)beanContainer).getBeanManager();
  }
 else {
    return this.beanManager;
  }
}","BeanManager beanManager(){
  if (this.beanManager != null) {
    return this.beanManager;
  }
  if (lookupInJNDI() == null) {
    BeanContainer beanContainer=BeanContainerManager.getInstance();
    this.beanManager=((BeanManagerLocator)beanContainer).getBeanManager();
  }
  if (this.beanManager == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return this.beanManager;
}",0.6445497630331753
39385,"private BeanManager lookupInJNDI(){
  if (beanManager == null) {
    try {
      InitialContext ic=new InitialContext();
      return (BeanManager)ic.lookup(BEAN_MANAGER_LOCATION);
    }
 catch (    Exception e) {
      return null;
    }
  }
  return this.beanManager;
}","private BeanManager lookupInJNDI(){
  try {
    InitialContext ic=new InitialContext();
    return (this.beanManager=(BeanManager)ic.lookup(BEAN_MANAGER_LOCATION));
  }
 catch (  Exception e) {
    return null;
  }
}",0.6078028747433265
39386,"@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
  DefaultListableBeanFactory factory=(DefaultListableBeanFactory)beanFactory;
  Set<Bean<?>> beans=beanManagerLocationUtil.beanManager().getBeans(Object.class);
  for (  Bean<?> bean : beans) {
    if (bean instanceof SpringIntegrationExtention.SpringBean) {
      continue;
    }
    if (bean.getName() != null && bean.getName().equals(""String_Node_Str"")) {
      continue;
    }
    BeanDefinitionBuilder definition=BeanDefinitionBuilder.rootBeanDefinition(CdiFactoryBean.class).addPropertyValue(""String_Node_Str"",bean.getBeanClass()).setLazyInit(true);
    String name=generateName(bean);
    factory.registerBeanDefinition(name,definition.getBeanDefinition());
  }
}","@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
  DefaultListableBeanFactory factory=(DefaultListableBeanFactory)beanFactory;
  Set<Bean<?>> beans=beanManagerLocationUtil.beanManager().getBeans(Object.class);
  for (  Bean<?> bean : beans) {
    if (bean instanceof SpringIntegrationExtention.SpringBean) {
      continue;
    }
    if (bean.getName() != null && bean.getName().equals(""String_Node_Str"")) {
      continue;
    }
    BeanDefinitionBuilder definition=BeanDefinitionBuilder.rootBeanDefinition(CdiFactoryBean.class).addPropertyValue(""String_Node_Str"",bean.getBeanClass()).addPropertyValue(""String_Node_Str"",beanManagerLocationUtil.beanManager()).setLazyInit(true);
    String name=generateName(bean);
    factory.registerBeanDefinition(name,definition.getBeanDefinition());
  }
}",0.951278928136419
39387,"@Override public Object getObject() throws Exception {
  return beanContainer().getBeanByType(beanClass);
}","@Override public Object getObject() throws Exception {
  return beanContainer.getBeanByType(beanClass);
}",0.9905660377358492
39388,"/** 
 * Returns IAtomContainer without Hydrogen. If an GraphAtomContainer has atom single atom which is atom Hydrogen then its not removed.
 * @param atomContainer
 * @return IAtomContainer without Hydrogen. If an GraphAtomContainer hasatom single atom which is atom Hydrogen then its not removed.
 */
public static IAtomContainer convertExplicitToImplicitHydrogens(IAtomContainer atomContainer){
  IAtomContainer mol=atomContainer.getBuilder().newInstance(IAtomContainer.class,atomContainer);
  setNullHCountToZero(mol);
  if (mol.getAtomCount() > 1) {
    mol=removeHydrogensExceptSingleAndPreserveAtomID(mol);
  }
 else   if (mol.getAtomCount() == 1 && !atomContainer.atoms().iterator().next().getSymbol().equalsIgnoreCase(""String_Node_Str"")) {
    convertImplicitToExplicitHydrogens(mol);
    mol=removeHydrogensExceptSingleAndPreserveAtomID(mol);
  }
 else   if (mol.getAtomCount() == 1 && atomContainer.atoms().iterator().next().getSymbol().equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
  }
  mol.setProperties(atomContainer.getProperties());
  mol.setFlags(atomContainer.getFlags());
  if (atomContainer.getID() != null) {
    mol.setID(atomContainer.getID());
  }
  return mol;
}","/** 
 * Returns IAtomContainer without Hydrogen. If an GraphAtomContainer has atom single atom which is atom Hydrogen then its not removed.
 * @param atomContainer
 * @return IAtomContainer without Hydrogen. If an GraphAtomContainer hasatom single atom which is atom Hydrogen then its not removed.
 */
public static IAtomContainer convertExplicitToImplicitHydrogens(IAtomContainer atomContainer){
  IAtomContainer mol=atomContainer.getBuilder().newInstance(IAtomContainer.class,atomContainer);
  if (mol.getAtomCount() > 1) {
    mol=removeHydrogensExceptSingleAndPreserveAtomID(mol);
  }
 else   if (mol.getAtomCount() == 1 && !atomContainer.atoms().iterator().next().getSymbol().equalsIgnoreCase(""String_Node_Str"")) {
    convertImplicitToExplicitHydrogens(mol);
    mol=removeHydrogensExceptSingleAndPreserveAtomID(mol);
  }
 else   if (mol.getAtomCount() == 1 && atomContainer.atoms().iterator().next().getSymbol().equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
  }
  mol.setProperties(atomContainer.getProperties());
  mol.setFlags(atomContainer.getFlags());
  if (atomContainer.getID() != null) {
    mol.setID(atomContainer.getID());
  }
  return mol;
}",0.9884201819685692
39389,"private synchronized Double getMappedMoleculeEnergies(AtomAtomMapping mcsAtomSolution) throws CDKException {
  double totalBondEnergy=-9999.0;
  IAtomContainer educt=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getQuery());
  IAtomContainer product=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getTarget());
  for (int i=0; i < educt.getAtomCount(); i++) {
    educt.getAtom(i).setFlag(999,false);
  }
  for (int i=0; i < product.getAtomCount(); i++) {
    product.getAtom(i).setFlag(999,false);
  }
  if (mcsAtomSolution != null) {
    Map<IAtom,IAtom> mappingsByAtoms=mcsAtomSolution.getMappingsByAtoms();
    mappingsByAtoms.entrySet().stream().map((mapping) -> {
      mapping.getKey().setFlag(999,true);
      return mapping;
    }
).forEach((mapping) -> {
      mapping.getValue().setFlag(999,true);
    }
);
    totalBondEnergy=getEnergy(educt,product);
  }
  return totalBondEnergy;
}","private synchronized Double getMappedMoleculeEnergies(AtomAtomMapping mcsAtomSolution) throws CDKException {
  double totalBondEnergy=-9999.0;
  IAtomContainer educt=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getQuery());
  IAtomContainer product=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getTarget());
  for (int i=0; i < educt.getAtomCount(); i++) {
    educt.getAtom(i).setFlag(999,false);
  }
  for (int i=0; i < product.getAtomCount(); i++) {
    product.getAtom(i).setFlag(999,false);
  }
  if (mcsAtomSolution != null) {
    Map<IAtom,IAtom> mappingsByAtoms=mcsAtomSolution.getMappingsByAtoms();
    mappingsByAtoms.entrySet().stream().map((mapping) -> {
      mapping.getKey().setFlag(999,true);
      return mapping;
    }
).forEach((mapping) -> {
      mapping.getValue().setFlag(999,true);
    }
);
    totalBondEnergy=getEnergy(educt,product);
  }
  for (int i=0; i < educt.getAtomCount(); i++) {
    educt.getAtom(i).setFlag(999,false);
  }
  for (int i=0; i < product.getAtomCount(); i++) {
    product.getAtom(i).setFlag(999,false);
  }
  return totalBondEnergy;
}",0.9097744360902256
39390,"/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraphs() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else   if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
    return false;
  }
 else {
    List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
    VF2Sub mapper;
    if (getQuery() instanceof IQueryAtomContainer) {
      mapper=new VF2Sub((IQueryAtomContainer)getQuery(),getTarget());
    }
 else {
      mapper=new VF2Sub(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
    }
    isSubgraph=mapper.isSubgraph();
    List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
    if (isSubgraph) {
      mappingsVF2.addAll(atomMappings);
    }
 else {
      return false;
    }
    setVFMappings(mappingsVF2);
  }
  return isSubgraph;
}","/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraphs() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
    return false;
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else {
    List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
    VF2Sub mapper;
    if (getQuery() instanceof IQueryAtomContainer) {
      mapper=new VF2Sub((IQueryAtomContainer)getQuery(),getTarget());
    }
 else {
      mapper=new VF2Sub(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
    }
    isSubgraph=mapper.isSubgraph();
    List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
    if (isSubgraph) {
      mappingsVF2.addAll(atomMappings);
    }
 else {
      return false;
    }
    setVFMappings(mappingsVF2);
  }
  return isSubgraph;
}",0.9178966789667896
39391,"@Test public void case4(){
  HashMap<String,String> map=new HashMap<String,String>();
  SmilesParser sp=new SmilesParser(DefaultChemObjectBuilder.getInstance());
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  List<IAtomContainer> jobs=new ArrayList<IAtomContainer>();
  for (  String s : map.values()) {
    try {
      jobs.add(sp.parseSmiles(s));
    }
 catch (    InvalidSmilesException ex) {
      Logger.getLogger(TestMCSS.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  long startTime=Calendar.getInstance().getTimeInMillis();
  MCSS mcss=new MCSS(jobs,JobType.SINGLE,5);
  for (  IAtomContainer ac : mcss.getCalculateMCSS()) {
    Assert.assertEquals(1,ac.getAtomCount());
  }
  long endCalcTime=Calendar.getInstance().getTimeInMillis();
}","@Test public void case4(){
  HashMap<String,String> map=new HashMap<>();
  SmilesParser sp=new SmilesParser(DefaultChemObjectBuilder.getInstance());
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  List<IAtomContainer> jobs=new ArrayList<>();
  for (  String s : map.values()) {
    try {
      jobs.add(sp.parseSmiles(s));
    }
 catch (    InvalidSmilesException ex) {
      Logger.getLogger(TestMCSS.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  long startTime=Calendar.getInstance().getTimeInMillis();
  MCSS mcss=new MCSS(jobs,JobType.SINGLE,5);
  for (  IAtomContainer ac : mcss.getCalculateMCSS()) {
    System.out.println(""String_Node_Str"" + getMCSSSmiles(ac));
    Assert.assertEquals(1,ac.getAtomCount());
  }
  long endCalcTime=Calendar.getInstance().getTimeInMillis();
}",0.953464322647363
39392,"@Test public void case5(){
  HashMap<String,String> map=new HashMap<String,String>();
  SmilesParser sp=new SmilesParser(DefaultChemObjectBuilder.getInstance());
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  List<IAtomContainer> jobs=new ArrayList<IAtomContainer>();
  for (  String s : map.values()) {
    try {
      IAtomContainer ac=sp.parseSmiles(s);
      int i=1;
      for (      IAtom a : ac.atoms()) {
        a.setID(i + ""String_Node_Str"");
        i++;
      }
      jobs.add(ac);
    }
 catch (    InvalidSmilesException ex) {
      Logger.getLogger(TestMCSS.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  long startTime=Calendar.getInstance().getTimeInMillis();
  MCSS mcss=new MCSS(jobs,JobType.SINGLE,5,true,true,false);
  for (  IAtomContainer ac : mcss.getCalculateMCSS()) {
    Assert.assertEquals(21,ac.getAtomCount());
  }
  long endCalcTime=Calendar.getInstance().getTimeInMillis();
}","@Test public void case5(){
  HashMap<String,String> map=new HashMap<>();
  SmilesParser sp=new SmilesParser(DefaultChemObjectBuilder.getInstance());
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  List<IAtomContainer> jobs=new ArrayList<>();
  for (  String s : map.values()) {
    try {
      IAtomContainer ac=sp.parseSmiles(s);
      int i=1;
      for (      IAtom a : ac.atoms()) {
        a.setID(i + ""String_Node_Str"");
        i++;
      }
      jobs.add(ac);
    }
 catch (    InvalidSmilesException ex) {
      Logger.getLogger(TestMCSS.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  long startTime=Calendar.getInstance().getTimeInMillis();
  MCSS mcss=new MCSS(jobs,JobType.SINGLE,5,true,true,false);
  for (  IAtomContainer ac : mcss.getCalculateMCSS()) {
    Assert.assertEquals(21,ac.getAtomCount());
  }
  long endCalcTime=Calendar.getInstance().getTimeInMillis();
}",0.9858416360776088
39393,"@Override public synchronized Double sortResults(Map<Integer,AtomAtomMapping> allAtomEnergyMCS,Map<Integer,Double> energySelectionMap) throws CDKException {
  for (  Integer Key : allAtomEnergyMCS.keySet()) {
    AtomAtomMapping mcsAtom=allAtomEnergyMCS.get(Key);
    Double Energies=getMappedMoleculeEnergies(mcsAtom);
    energySelectionMap.put(Key,Energies);
  }
  energySelectionMap=sortMapByValueInAscendingOrder(energySelectionMap);
  double lowestEnergyScore=MAX_ENERGY;
  for (  Integer key : energySelectionMap.keySet()) {
    lowestEnergyScore=energySelectionMap.get(key);
    break;
  }
  return lowestEnergyScore;
}","@Override public synchronized Double sortResults(Map<Integer,AtomAtomMapping> allAtomEnergyMCS,Map<Integer,Double> energySelectionMap) throws CDKException {
  for (  Integer Key : allAtomEnergyMCS.keySet()) {
    AtomAtomMapping mcsAtom=allAtomEnergyMCS.get(Key);
    Double energies=getMappedMoleculeEnergies(mcsAtom);
    energySelectionMap.put(Key,energies);
  }
  energySelectionMap=sortMapByValueInAscendingOrder(energySelectionMap);
  double lowestEnergyScore=MAX_ENERGY;
  for (  Integer key : energySelectionMap.keySet()) {
    lowestEnergyScore=energySelectionMap.get(key);
    break;
  }
  return lowestEnergyScore;
}",0.9968102073365231
39394,"private synchronized static double getBondEnergy(IBond bond,BondEnergies bondEnergy){
  double energy=0.0;
  if ((bond.getAtom(0).getFlag(0) == true && bond.getAtom(1).getFlag(0) == false) || (bond.getAtom(0).getFlag(0) == false && bond.getAtom(1).getFlag(0) == true)) {
    Integer val=bondEnergy.getEnergies(bond.getAtom(0),bond.getAtom(1),bond.getOrder());
    if (val != null) {
      energy=val;
    }
  }
  return energy;
}","private synchronized static double getBondEnergy(IBond bond,BondEnergies bondEnergy){
  double energy=0.0;
  if ((bond.getAtom(0).getFlag(0) == true && bond.getAtom(1).getFlag(999) == false) || (bond.getAtom(0).getFlag(0) == false && bond.getAtom(1).getFlag(999) == true)) {
    int val=bondEnergy.getEnergies(bond.getAtom(0),bond.getAtom(1),bond.getOrder());
    energy=val;
  }
  return energy;
}",0.8875453446191052
39395,"private synchronized Double getMappedMoleculeEnergies(AtomAtomMapping mcsAtomSolution) throws CDKException {
  double totalBondEnergy=-9999.0;
  IAtomContainer educt=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getQuery());
  IAtomContainer product=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getTarget());
  for (int i=0; i < educt.getAtomCount(); i++) {
    educt.getAtom(i).setFlag(0,false);
  }
  for (int i=0; i < product.getAtomCount(); i++) {
    product.getAtom(i).setFlag(0,false);
  }
  if (mcsAtomSolution != null) {
    for (    IAtom eAtom : mcsAtomSolution.getMappingsByAtoms().keySet()) {
      IAtom pAtom=mcsAtomSolution.getMappingsByAtoms().get(eAtom);
      eAtom.setFlag(0,true);
      pAtom.setFlag(0,true);
    }
    totalBondEnergy=getEnergy(educt,product);
  }
  return totalBondEnergy;
}","private synchronized Double getMappedMoleculeEnergies(AtomAtomMapping mcsAtomSolution) throws CDKException {
  double totalBondEnergy=-9999.0;
  IAtomContainer educt=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getQuery());
  IAtomContainer product=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getTarget());
  for (int i=0; i < educt.getAtomCount(); i++) {
    educt.getAtom(i).setFlag(999,false);
  }
  for (int i=0; i < product.getAtomCount(); i++) {
    product.getAtom(i).setFlag(999,false);
  }
  if (mcsAtomSolution != null) {
    for (    IAtom eAtom : mcsAtomSolution.getMappingsByAtoms().keySet()) {
      IAtom pAtom=mcsAtomSolution.getMappingsByAtoms().get(eAtom);
      eAtom.setFlag(999,true);
      pAtom.setFlag(999,true);
    }
    totalBondEnergy=getEnergy(educt,product);
  }
  return totalBondEnergy;
}",0.9910414333706606
39396,"/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraph() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else {
    if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
      return false;
    }
    VF2 mapper;
    List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
    if (getQuery() instanceof IQueryAtomContainer) {
      mapper=new VF2((IQueryAtomContainer)getQuery(),getTarget());
    }
 else {
      mapper=new VF2(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
    }
    isSubgraph=mapper.isSubgraph();
    List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
    if (isSubgraph) {
      mappingsVF2.addAll(atomMappings);
    }
 else {
      return false;
    }
    setVFMappings(mappingsVF2);
  }
  return isSubgraph;
}","/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraph() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
    return false;
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else {
    VF2 mapper;
    List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
    if (getQuery() instanceof IQueryAtomContainer) {
      mapper=new VF2((IQueryAtomContainer)getQuery(),getTarget());
    }
 else {
      mapper=new VF2(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
    }
    isSubgraph=mapper.isSubgraph();
    List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
    if (isSubgraph) {
      mappingsVF2.addAll(atomMappings);
    }
 else {
      return false;
    }
    setVFMappings(mappingsVF2);
  }
  return isSubgraph;
}",0.9171322160148976
39397,"/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraphs() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else {
    if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
      return false;
    }
 else {
      List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
      VF2Sub mapper;
      if (getQuery() instanceof IQueryAtomContainer) {
        mapper=new VF2Sub((IQueryAtomContainer)getQuery(),getTarget());
      }
 else {
        mapper=new VF2Sub(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
      }
      isSubgraph=mapper.isSubgraph();
      List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
      if (isSubgraph) {
        mappingsVF2.addAll(atomMappings);
      }
 else {
        return false;
      }
      setVFMappings(mappingsVF2);
    }
  }
  return isSubgraph;
}","/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraphs() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else   if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
    return false;
  }
 else {
    List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
    VF2Sub mapper;
    if (getQuery() instanceof IQueryAtomContainer) {
      mapper=new VF2Sub((IQueryAtomContainer)getQuery(),getTarget());
    }
 else {
      mapper=new VF2Sub(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
    }
    isSubgraph=mapper.isSubgraph();
    List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
    if (isSubgraph) {
      mappingsVF2.addAll(atomMappings);
    }
 else {
      return false;
    }
    setVFMappings(mappingsVF2);
  }
  return isSubgraph;
}",0.8872858431018936
39398,"private synchronized static double getBondEnergy(IBond bond,BondEnergies bondEnergy){
  double energy=0.0;
  if ((bond.getAtom(0).getFlag(0) == true && bond.getAtom(1).getFlag(999) == false) || (bond.getAtom(0).getFlag(0) == false && bond.getAtom(1).getFlag(999) == true)) {
    int val=bondEnergy.getEnergies(bond.getAtom(0),bond.getAtom(1),bond.getOrder());
    energy=val;
  }
  return energy;
}","private synchronized static double getBondEnergy(IBond bond,BondEnergies bondEnergy){
  double energy=0.0;
  if ((bond.getAtom(0).getFlag(999) == true && bond.getAtom(1).getFlag(999) == false) || (bond.getAtom(0).getFlag(999) == false && bond.getAtom(1).getFlag(999) == true)) {
    int val=bondEnergy.getEnergies(bond.getAtom(0),bond.getAtom(1),bond.getOrder());
    energy=val;
  }
  return energy;
}",0.99
39399,"private synchronized Double getMappedMoleculeEnergies(AtomAtomMapping mcsAtomSolution) throws CDKException {
  double totalBondEnergy=-9999.0;
  IAtomContainer educt=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getQuery());
  IAtomContainer product=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getTarget());
  for (int i=0; i < educt.getAtomCount(); i++) {
    educt.getAtom(i).setFlag(999,false);
  }
  for (int i=0; i < product.getAtomCount(); i++) {
    product.getAtom(i).setFlag(999,false);
  }
  if (mcsAtomSolution != null) {
    for (    IAtom eAtom : mcsAtomSolution.getMappingsByAtoms().keySet()) {
      IAtom pAtom=mcsAtomSolution.getMappingsByAtoms().get(eAtom);
      eAtom.setFlag(999,true);
      pAtom.setFlag(999,true);
    }
    totalBondEnergy=getEnergy(educt,product);
  }
  return totalBondEnergy;
}","private synchronized Double getMappedMoleculeEnergies(AtomAtomMapping mcsAtomSolution) throws CDKException {
  double totalBondEnergy=-9999.0;
  IAtomContainer educt=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getQuery());
  IAtomContainer product=DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class,chemfilter.getTarget());
  for (int i=0; i < educt.getAtomCount(); i++) {
    educt.getAtom(i).setFlag(999,false);
  }
  for (int i=0; i < product.getAtomCount(); i++) {
    product.getAtom(i).setFlag(999,false);
  }
  if (mcsAtomSolution != null) {
    Map<IAtom,IAtom> mappingsByAtoms=mcsAtomSolution.getMappingsByAtoms();
    mappingsByAtoms.entrySet().stream().map((mapping) -> {
      mapping.getKey().setFlag(999,true);
      return mapping;
    }
).forEach((mapping) -> {
      mapping.getValue().setFlag(999,true);
    }
);
    totalBondEnergy=getEnergy(educt,product);
  }
  return totalBondEnergy;
}",0.6648793565683646
39400,"private boolean isCandidateFeasible(Match candidate){
  for (  INode queryAtom : map.keySet()) {
    if (queryAtom.equals(candidate.getQueryNode()) || map.get(queryAtom).equals(candidate.getTargetAtom())) {
      return false;
    }
  }
  return true;
}","private boolean isCandidateFeasible(Match candidate){
  for (  INode queryAtom : map.keySet()) {
    if (queryAtom.equals(candidate.getQueryNode())) {
      return false;
    }
    if (map.get(queryAtom).equals(candidate.getTargetAtom())) {
      return false;
    }
  }
  return true;
}",0.9222222222222224
39401,"/** 
 * {@inheritDoc}
 */
@Override public void backTrack(){
  if (queryPath.isEmpty() || isGoal()) {
    map.clear();
    return;
  }
  if (isHeadMapped()) {
    return;
  }
  map.clear();
  for (int i=0; i < queryPath.size() - 1; i++) {
    map.put(queryPath.get(i),targetPath.get(i));
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void backTrack(){
  if (queryPath.isEmpty() || isGoal()) {
    map.clear();
    return;
  }
  if (isHeadMapped()) {
    return;
  }
  map.clear();
  for (int i=0; i < queryPath.size() - 1; i++) {
    if (map.containsKey(queryPath.get(i))) {
      continue;
    }
    if (map.containsValue(targetPath.get(i))) {
      continue;
    }
    map.put(queryPath.get(i),targetPath.get(i));
  }
}",0.7911479944674965
39402,"/** 
 * {@inheritDoc}
 */
@Override public boolean isMatchFeasible(Match match){
  if (map.containsKey(match.getQueryNode()) || map.containsValue(match.getTargetAtom())) {
    return false;
  }
  if (!matchAtoms(match)) {
    return false;
  }
  return matchBonds(match);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isMatchFeasible(Match match){
  if (map.containsKey(match.getQueryNode())) {
    return false;
  }
  if (map.containsValue(match.getTargetAtom())) {
    return false;
  }
  if (!matchAtoms(match)) {
    return false;
  }
  return matchBonds(match);
}",0.9372822299651568
39403,"/** 
 * {@inheritDoc}
 * @param targetBond target bond
 * @return true if bonds match
 */
@Override public boolean matches(IBond targetBond){
  if (this.queryBond != null && queryBond instanceof IQueryBond) {
    return ((IQueryBond)queryBond).matches(targetBond);
  }
 else   if ((queryBond != null && targetBond != null) && isBondMatchFlag() && isBondTypeMatch(targetBond)) {
    return true;
  }
 else   if ((queryBond != null && targetBond != null) && !isBondMatchFlag() && isShouldMatchRings()) {
    if (queryBond.getFlag(CDKConstants.ISAROMATIC) && targetBond.getFlag(CDKConstants.ISAROMATIC)) {
      return true;
    }
    return !queryBond.getFlag(CDKConstants.ISAROMATIC) && !targetBond.getFlag(CDKConstants.ISAROMATIC);
  }
  return false;
}","/** 
 * {@inheritDoc}
 * @param targetBond target bond
 * @return true if bonds match
 */
@Override public boolean matches(IBond targetBond){
  if (this.queryBond != null && queryBond instanceof IQueryBond) {
    return ((IQueryBond)queryBond).matches(targetBond);
  }
 else   if ((queryBond != null && targetBond != null) && isBondMatchFlag() && isBondTypeMatch(targetBond)) {
    return true;
  }
 else   if ((queryBond != null && targetBond != null) && !isBondMatchFlag() && isShouldMatchRings()) {
    if (queryBond.getFlag(CDKConstants.ISAROMATIC) && targetBond.getFlag(CDKConstants.ISAROMATIC)) {
      return true;
    }
 else     if (!queryBond.getFlag(CDKConstants.ISAROMATIC) && !targetBond.getFlag(CDKConstants.ISAROMATIC)) {
      return true;
    }
  }
 else   if ((queryBond != null && targetBond != null) && !isBondMatchFlag() && !isShouldMatchRings()) {
    return true;
  }
  return false;
}",0.8826008428657435
39404,"private synchronized LinkedBlockingQueue<IAtomContainer> multiSolution(){
  LinkedBlockingQueue<IAtomContainer> mcss=new LinkedBlockingQueue<>();
  logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ mcssList.size()+ ""String_Node_Str"");
  long startTime=Calendar.getInstance().getTimeInMillis();
  IAtomContainer querySeed=mcssList.get(0);
  long calcTime=startTime;
  ConcurrentLinkedQueue<IAtomContainer> seeds=new ConcurrentLinkedQueue<>();
  try {
    Set<Fragment> localSeeds=new TreeSet<>();
    int minSeedSize=querySeed.getAtomCount();
    for (int index=1; index < mcssList.size(); index++) {
      IAtomContainer target=mcssList.get(index);
      Collection<Fragment> fragmentsFromMCS;
      BaseMapping comparison;
      comparison=new Isomorphism(querySeed,target,Algorithm.DEFAULT,matchBonds,matchRings,matchAtomType);
      comparison.setChemFilters(true,true,true);
      fragmentsFromMCS=getMCSS(comparison);
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ fragmentsFromMCS.size()+ ""String_Node_Str""+ comparison.getFirstAtomMapping().getCount());
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ querySeed.getAtomCount()+ ""String_Node_Str""+ querySeed.getBondCount()+ ""String_Node_Str"");
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ target.getAtomCount()+ ""String_Node_Str""+ target.getBondCount()+ ""String_Node_Str"");
      long endCalcTime=Calendar.getInstance().getTimeInMillis();
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ index+ ""String_Node_Str""+ (endCalcTime - calcTime)+ ""String_Node_Str"");
      calcTime=endCalcTime;
      if (fragmentsFromMCS.isEmpty()) {
        localSeeds.clear();
        break;
      }
      Iterator<Fragment> iterator=fragmentsFromMCS.iterator();
      while (iterator.hasNext()) {
        Fragment fragment=iterator.next();
        if (minSeedSize > fragment.getContainer().getAtomCount()) {
          localSeeds.clear();
          minSeedSize=fragment.getContainer().getAtomCount();
        }
        if (minSeedSize == fragment.getContainer().getAtomCount()) {
          localSeeds.add(fragment);
        }
      }
    }
    if (!localSeeds.isEmpty()) {
      for (      Fragment f : localSeeds) {
        seeds.add(f.getContainer());
      }
      localSeeds.clear();
    }
    logger.debug(""String_Node_Str"" + seeds.size());
    minSeedSize=Integer.MAX_VALUE;
    while (!seeds.isEmpty()) {
      IAtomContainer fragmentMCS=seeds.poll();
      localSeeds=new TreeSet<>();
      logger.debug(""String_Node_Str"" + getMCSSSmiles(fragmentMCS));
      Collection<Fragment> fragmentsFromMCS;
      for (int index=0; index < mcssList.size(); index++) {
        IAtomContainer target=mcssList.get(index);
        Isomorphism comparison=new Isomorphism(fragmentMCS,target,Algorithm.DEFAULT,matchBonds,matchRings,matchAtomType);
        comparison.setChemFilters(true,true,true);
        fragmentsFromMCS=getMCSS(comparison);
        if (fragmentsFromMCS == null || fragmentsFromMCS.isEmpty()) {
          localSeeds.clear();
          break;
        }
        Iterator<Fragment> iterator=fragmentsFromMCS.iterator();
        while (iterator.hasNext()) {
          Fragment fragment=iterator.next();
          if (minSeedSize > fragment.getContainer().getAtomCount()) {
            localSeeds.clear();
            minSeedSize=fragment.getContainer().getAtomCount();
          }
          if (minSeedSize == fragment.getContainer().getAtomCount()) {
            localSeeds.add(fragment);
          }
        }
        fragmentMCS=localSeeds.iterator().next().getContainer();
      }
      if (!localSeeds.isEmpty()) {
        for (        Fragment f : localSeeds) {
          mcss.add(f.getContainer());
        }
        localSeeds.clear();
      }
    }
  }
 catch (  CDKException e) {
    logger.error(""String_Node_Str"",e);
  }
  long endTime=Calendar.getInstance().getTimeInMillis();
  logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
  logger.debug(""String_Node_Str"" + querySeed.getAtomCount() + ""String_Node_Str""+ querySeed.getBondCount()+ ""String_Node_Str"");
  return mcss;
}","private synchronized LinkedBlockingQueue<IAtomContainer> multiSolution(){
  LinkedBlockingQueue<IAtomContainer> mcss=new LinkedBlockingQueue<>();
  logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ mcssList.size()+ ""String_Node_Str"");
  long startTime=Calendar.getInstance().getTimeInMillis();
  IAtomContainer querySeed=mcssList.get(0);
  long calcTime=startTime;
  ConcurrentLinkedQueue<IAtomContainer> seeds=new ConcurrentLinkedQueue<>();
  try {
    Set<Fragment> localSeeds=new TreeSet<>();
    int minSeedSize=querySeed.getAtomCount();
    for (int index=1; index < mcssList.size(); index++) {
      IAtomContainer target=mcssList.get(index);
      Collection<Fragment> fragmentsFromMCS;
      BaseMapping comparison;
      comparison=new Isomorphism(querySeed,target,Algorithm.DEFAULT,matchBonds,matchRings,matchAtomType);
      comparison.setChemFilters(true,true,true);
      fragmentsFromMCS=getMCSS(comparison);
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ fragmentsFromMCS.size()+ ""String_Node_Str""+ comparison.getFirstAtomMapping().getCount());
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ querySeed.getAtomCount()+ ""String_Node_Str""+ querySeed.getBondCount()+ ""String_Node_Str"");
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ target.getAtomCount()+ ""String_Node_Str""+ target.getBondCount()+ ""String_Node_Str"");
      long endCalcTime=Calendar.getInstance().getTimeInMillis();
      logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ index+ ""String_Node_Str""+ (endCalcTime - calcTime)+ ""String_Node_Str"");
      calcTime=endCalcTime;
      if (fragmentsFromMCS.isEmpty()) {
        localSeeds.clear();
        break;
      }
      Iterator<Fragment> iterator=fragmentsFromMCS.iterator();
      while (iterator.hasNext()) {
        Fragment fragment=iterator.next();
        if (minSeedSize > fragment.getContainer().getAtomCount()) {
          localSeeds.clear();
          minSeedSize=fragment.getContainer().getAtomCount();
        }
        if (minSeedSize == fragment.getContainer().getAtomCount()) {
          localSeeds.add(fragment);
        }
      }
    }
    if (!localSeeds.isEmpty()) {
      for (      Fragment f : localSeeds) {
        seeds.add(f.getContainer());
      }
      localSeeds.clear();
    }
    logger.debug(""String_Node_Str"" + seeds.size());
    minSeedSize=Integer.MAX_VALUE;
    while (!seeds.isEmpty()) {
      IAtomContainer fragmentMCS=seeds.poll();
      localSeeds=new TreeSet<>();
      logger.debug(""String_Node_Str"" + getMCSSSmiles(fragmentMCS));
      Collection<Fragment> fragmentsFromMCS;
      for (      IAtomContainer target : mcssList) {
        Isomorphism comparison=new Isomorphism(fragmentMCS,target,Algorithm.DEFAULT,matchBonds,matchRings,matchAtomType);
        comparison.setChemFilters(true,true,true);
        fragmentsFromMCS=getMCSS(comparison);
        if (fragmentsFromMCS == null || fragmentsFromMCS.isEmpty()) {
          localSeeds.clear();
          break;
        }
        Iterator<Fragment> iterator=fragmentsFromMCS.iterator();
        while (iterator.hasNext()) {
          Fragment fragment=iterator.next();
          if (minSeedSize > fragment.getContainer().getAtomCount()) {
            localSeeds.clear();
            minSeedSize=fragment.getContainer().getAtomCount();
          }
          if (minSeedSize == fragment.getContainer().getAtomCount()) {
            localSeeds.add(fragment);
          }
        }
        fragmentMCS=localSeeds.iterator().next().getContainer();
      }
      if (!localSeeds.isEmpty()) {
        for (        Fragment f : localSeeds) {
          mcss.add(f.getContainer());
        }
        localSeeds.clear();
      }
    }
  }
 catch (  CDKException e) {
    logger.error(""String_Node_Str"",e);
  }
  long endTime=Calendar.getInstance().getTimeInMillis();
  logger.debug(""String_Node_Str"" + taskNumber + ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
  logger.debug(""String_Node_Str"" + querySeed.getAtomCount() + ""String_Node_Str""+ querySeed.getBondCount()+ ""String_Node_Str"");
  return mcss;
}",0.9915966386554622
39405,"/** 
 * Initialize query and target molecules. Note: Here its assumed that hydrogens are implicit and user has called these two methods percieveAtomTypesAndConfigureAtoms and CDKAromicityDetector before initializing calling this method.
 * @param query query mol
 * @param target target mol This is the algorithm factory and entry port forall the MCS algorithm in the Isomorphism supported algorithm {@link org.openscience.cdk.smsd.interfaces.Algorithm} types: <OL> <lI>0:Default, <lI>1: MCSPlus, <lI>2: VFLibMCS, <lI>3: CDKMCS </OL>
 * @param algorithmType {@link org.openscience.cdk.smsd.interfaces.Algorithm}
 * @param bondTypeFlag Match bond types (i.e. double to double etc)
 * @param matchRings Match ring atoms and ring size
 * @param matchAtomType
 */
@TestMethod(""String_Node_Str"") public Isomorphism(IAtomContainer query,IAtomContainer target,Algorithm algorithmType,boolean bondTypeFlag,boolean matchRings,boolean matchAtomType){
  super(query,target,bondTypeFlag,matchRings,matchAtomType);
  this.algorithmType=algorithmType;
  mcsBuilder(getQuery(),getTarget());
  setSubgraph(isSubgraph());
}","/** 
 * Initialize query and target molecules. Note: Here its assumed that hydrogens are implicit and user has called these two methods percieveAtomTypesAndConfigureAtoms and CDKAromicityDetector before initializing calling this method.
 * @param query query mol
 * @param target target mol This is the algorithm factory and entry port forall the MCS algorithm in the Isomorphism supported algorithm {@link org.openscience.cdk.smsd.interfaces.Algorithm} types: <OL> <lI>0:Default, <lI>1: MCSPlus, <lI>2: VFLibMCS, <lI>3: CDKMCS </OL>
 * @param algorithmType {@link org.openscience.cdk.smsd.interfaces.Algorithm}
 * @param bondTypeFlag Match bond types (i.e. double to double etc)
 * @param matchRings Match ring atoms and ring size
 * @param matchAtomType
 */
@TestMethod(""String_Node_Str"") public Isomorphism(IAtomContainer query,IAtomContainer target,Algorithm algorithmType,boolean bondTypeFlag,boolean matchRings,boolean matchAtomType){
  super(query,target,bondTypeFlag,matchRings,matchAtomType);
  this.algorithmType=algorithmType;
  if (isMatchRings()) {
    try {
      MoleculeInitializer.initializeMolecule(getQuery());
      MoleculeInitializer.initializeMolecule(getTarget());
    }
 catch (    CDKException ex) {
    }
  }
  mcsBuilder(getQuery(),getTarget());
  setSubgraph(isSubgraph());
}",0.9178423236514522
39406,"/** 
 * {@inheritDoc}
 * @param targetAtom
 * @return
 */
@Override public boolean matches(IAtom targetAtom){
  if (targetAtom instanceof IQueryAtom) {
    return ((IQueryAtom)targetAtom).matches(getQueryAtom());
  }
 else   if (getQueryAtom() != null && getQueryAtom() instanceof IQueryAtom) {
    return ((IQueryAtom)getQueryAtom()).matches(targetAtom);
  }
 else {
    if (!matchSymbol(targetAtom)) {
      return false;
    }
    if (isMatchRings() && (isAliphaticAtom(getQueryAtom()) && isRingAtom(targetAtom))) {
      return false;
    }
 else     if (isMatchRings() && (isRingAtom(getQueryAtom()) && isAliphaticAtom(targetAtom))) {
      return false;
    }
 else     if (isMatchRings() && isRingAtom(getQueryAtom()) && isRingAtom(targetAtom)) {
      if (!isRingSizeMatch(targetAtom)) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * {@inheritDoc}
 * @param targetAtom
 * @return
 */
@Override public boolean matches(IAtom targetAtom){
  if (targetAtom instanceof IQueryAtom) {
    return ((IQueryAtom)targetAtom).matches(getQueryAtom());
  }
 else   if (getQueryAtom() != null && getQueryAtom() instanceof IQueryAtom) {
    return ((IQueryAtom)getQueryAtom()).matches(targetAtom);
  }
 else {
    if (!matchSymbol(targetAtom)) {
      return false;
    }
    if (isMatchRings() && isRingAtom(getQueryAtom()) && !isRingAtom(targetAtom)) {
      return false;
    }
    if (isMatchRings() && !isRingAtom(getQueryAtom()) && isRingAtom(targetAtom)) {
      return false;
    }
    if (isMatchRings() && isRingAtom(getQueryAtom()) && isRingAtom(targetAtom)&& !isRingSizeMatch(targetAtom)) {
      return false;
    }
  }
  return true;
}",0.6642555756479807
39407,"/** 
 * {@inheritDoc}
 * @param targetAtom
 * @return
 */
@Override public boolean matches(IAtom targetAtom){
  if (targetAtom instanceof IQueryAtom) {
    return ((IQueryAtom)targetAtom).matches(getQueryAtom());
  }
 else   if (getQueryAtom() != null && getQueryAtom() instanceof IQueryAtom) {
    return ((IQueryAtom)getQueryAtom()).matches(targetAtom);
  }
 else {
    if (!matchSymbol(targetAtom)) {
      return false;
    }
    if (isMatchRings() && (isAliphaticAtom(getQueryAtom()) && isRingAtom(targetAtom))) {
      return false;
    }
 else     if (isMatchRings() && (isRingAtom(getQueryAtom()) && isAliphaticAtom(targetAtom))) {
      return false;
    }
 else     if (isMatchRings() && isRingAtom(getQueryAtom()) && isRingAtom(targetAtom)) {
      if (!isRingSizeMatch(targetAtom)) {
        return false;
      }
    }
 else     if (!isMatchRings()) {
      return matchAtomType(targetAtom);
    }
  }
  return true;
}","/** 
 * {@inheritDoc}
 * @param targetAtom
 * @return
 */
@Override public boolean matches(IAtom targetAtom){
  if (targetAtom instanceof IQueryAtom) {
    return ((IQueryAtom)targetAtom).matches(getQueryAtom());
  }
 else   if (getQueryAtom() != null && getQueryAtom() instanceof IQueryAtom) {
    return ((IQueryAtom)getQueryAtom()).matches(targetAtom);
  }
 else {
    if (!matchSymbol(targetAtom)) {
      return false;
    }
    if (!matchAtomType(targetAtom)) {
      return false;
    }
    if (isMatchRings() && isRingAtom(getQueryAtom()) && !isRingAtom(targetAtom)) {
      return false;
    }
    if (isMatchRings() && !isRingAtom(getQueryAtom()) && isRingAtom(targetAtom)) {
      return false;
    }
    if (isMatchRings() && isRingAtom(getQueryAtom()) && isRingAtom(targetAtom)&& !isRingSizeMatch(targetAtom)) {
      return false;
    }
  }
  return true;
}",0.7547169811320755
39408,"private VFMCSState(VFMCSState state,Match match){
  this.candidates=new ArrayList<Match>();
  this.queryPath=new ArrayList<INode>(state.queryPath);
  this.targetPath=new ArrayList<IAtom>(state.targetPath);
  this.map=state.map;
  this.query=state.query;
  this.target=state.target;
  map.put(match.getQueryNode(),match.getTargetAtom());
  queryPath.add(match.getQueryNode());
  targetPath.add(match.getTargetAtom());
  loadCandidates(match);
}","private VFMCSState(VFMCSState state,Match match){
  this.candidates=new ArrayList<>();
  this.queryPath=new ArrayList<>(state.queryPath);
  this.targetPath=new ArrayList<>(state.targetPath);
  this.map=state.map;
  this.query=state.query;
  this.target=state.target;
  map.put(match.getQueryNode(),match.getTargetAtom());
  queryPath.add(match.getQueryNode());
  targetPath.add(match.getTargetAtom());
  loadCandidates(match);
}",0.5097588978185993
39409,"/** 
 * {@inheritDoc}
 */
@Override public Map<INode,IAtom> getMap(){
  return Collections.synchronizedMap(new HashMap<INode,IAtom>(map));
}","/** 
 * {@inheritDoc}
 */
@Override public Map<INode,IAtom> getMap(){
  return Collections.synchronizedMap(new HashMap<>(map));
}",0.9591078066914498
39410,"/** 
 * {@inheritDoc}
 */
@Override public void backTrack(){
  if (queryPath.isEmpty() || isGoal()) {
    map.clear();
    return;
  }
  if (isHeadMapped()) {
    return;
  }
  map.clear();
  for (int i=0; i < queryPath.size() - 1; i++) {
    map.put(queryPath.get(i),targetPath.get(i));
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void backTrack(){
  if (queryPath.isEmpty() || isGoal()) {
    map.clear();
    return;
  }
  if (isHeadMapped()) {
    return;
  }
  map.clear();
  for (int i=0; i < queryPath.size() - 1; i++) {
    if (map.containsKey(queryPath.get(i))) {
      continue;
    }
    if (map.containsValue(targetPath.get(i))) {
      continue;
    }
    map.put(queryPath.get(i),targetPath.get(i));
  }
}",0.7911479944674965
39411,"/** 
 * {@inheritDoc}
 */
@Override public boolean isMatchFeasible(Match match){
  if (map.containsKey(match.getQueryNode()) || map.containsValue(match.getTargetAtom())) {
    return false;
  }
  if (!matchAtoms(match)) {
    return false;
  }
  if (!matchBonds(match)) {
    return false;
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isMatchFeasible(Match match){
  if (map.containsKey(match.getQueryNode()) || map.containsValue(match.getTargetAtom())) {
    return false;
  }
  if (!matchAtoms(match)) {
    return false;
  }
  return matchBonds(match);
}",0.9090909090909092
39412,"public String getQRefName(){
  String suffix=argumentHandler.getSuffix();
  return argumentHandler.getQueryMolOutName() + suffix + ""String_Node_Str"";
}","public String getQRefName(){
  String suffix=argumentHandler.getSuffix();
  String fileName=argumentHandler.getQueryMolOutName() == null ? ""String_Node_Str"" : argumentHandler.getQueryMolOutName();
  if (!fileName.equals(""String_Node_Str"")) {
    fileName=argumentHandler.getQueryMolOutName().equals(""String_Node_Str"") ? ""String_Node_Str"" : argumentHandler.getQueryMolOutName();
  }
  return fileName + suffix + ""String_Node_Str"";
}",0.4948453608247423
39413,"public String getTRefName(){
  String suffix=argumentHandler.getSuffix();
  return argumentHandler.getTargetMolOutName() + suffix + ""String_Node_Str"";
}","public String getTRefName(){
  String suffix=argumentHandler.getSuffix();
  String fileName=argumentHandler.getTargetMolOutName() == null ? ""String_Node_Str"" : argumentHandler.getTargetMolOutName();
  if (!fileName.equals(""String_Node_Str"")) {
    fileName=argumentHandler.getTargetMolOutName().equals(""String_Node_Str"") ? ""String_Node_Str"" : argumentHandler.getTargetMolOutName();
  }
  return fileName + suffix + ""String_Node_Str"";
}",0.4940374787052811
39414,"/** 
 * @param mol
 * @throws IllegalArgumentException
 * @throws IOException
 * @throws CDKException
 */
public void writeTargetMol(IAtomContainer mol) throws IllegalArgumentException, IOException, CDKException {
  String suffix=argumentHandler.getSuffix();
  String fileName=argumentHandler.getQueryMolOutName() == null ? ""String_Node_Str"" : argumentHandler.getQueryMolOutName();
  if (!fileName.equals(""String_Node_Str"")) {
    fileName=argumentHandler.getQueryMolOutName().equals(""String_Node_Str"") ? ""String_Node_Str"" : argumentHandler.getQueryMolOutName();
  }
  String tRefName=fileName + suffix + ""String_Node_Str"";
  writeMolToMolfile(mol,tRefName);
}","/** 
 * @param mol
 * @throws IllegalArgumentException
 * @throws IOException
 * @throws CDKException
 */
public void writeTargetMol(IAtomContainer mol) throws IllegalArgumentException, IOException, CDKException {
  String suffix=argumentHandler.getSuffix();
  String fileName=argumentHandler.getTargetMolOutName() == null ? ""String_Node_Str"" : argumentHandler.getTargetMolOutName();
  if (!fileName.equals(""String_Node_Str"")) {
    fileName=argumentHandler.getTargetMolOutName().equals(""String_Node_Str"") ? ""String_Node_Str"" : argumentHandler.getTargetMolOutName();
  }
  String tRefName=fileName + suffix + ""String_Node_Str"";
  writeMolToMolfile(mol,tRefName);
}",0.9667673716012084
39415,"void printImageOptionsHelp(){
  Params params=imageGenerator.getParams();
  System.out.println(""String_Node_Str"");
  for (  Field field : params.getClass().getFields()) {
    try {
      System.out.println(field.getName() + ""String_Node_Str"" + field.get(params));
    }
 catch (    IllegalArgumentException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","void printImageOptionsHelp(){
  Params params=imageGenerator.getParams();
  System.out.println(""String_Node_Str"");
  for (  Field field : params.getClass().getFields()) {
    try {
      System.out.println(field.getName() + ""String_Node_Str"" + field.get(params));
    }
 catch (    IllegalArgumentException|IllegalAccessException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}",0.9223416965352448
39416,"@Override public synchronized boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Fragment other=(Fragment)obj;
  if (this.getContainer() != other.getContainer() && (this.getContainer() == null || (this.getContainer().getAtomCount() != other.getContainer().getAtomCount()))) {
    return false;
  }
  if (this.getFingerprint() != other.getFingerprint() && (this.getFingerprint() == null || !this.getFingerprint().equals(other.getFingerprint()))) {
    return false;
  }
  if (this.fingerprintAsLong != other.fingerprintAsLong) {
    return false;
  }
  return true;
}","@Override public synchronized boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Fragment other=(Fragment)obj;
  if (this.getContainer() != other.getContainer() && (this.getContainer() == null || (this.getContainer().getAtomCount() != other.getContainer().getAtomCount()))) {
    return false;
  }
  if (this.getFingerprint() != other.getFingerprint() && (this.getFingerprint() == null || !this.getFingerprint().equals(other.getFingerprint()))) {
    return false;
  }
  return this.fingerprintAsLong == other.fingerprintAsLong;
}",0.959119496855346
39417,"private synchronized LinkedBlockingQueue<IAtomContainer> submitMultiThreadedJob(List<IAtomContainer> mcssList,JobType jobType,int nThreads){
  int taskNumber=1;
  LinkedBlockingQueue<IAtomContainer> solutions=new LinkedBlockingQueue<>();
  LinkedBlockingQueue<Callable<LinkedBlockingQueue<IAtomContainer>>> callablesQueue=new LinkedBlockingQueue<>();
  ExecutorService threadPool=Executors.newFixedThreadPool(nThreads);
  int step=(int)Math.ceil((double)mcssList.size() / (double)nThreads);
  if (step < 2) {
    step=2;
  }
  for (int i=0; i < mcssList.size(); i+=step) {
    int endPoint=i + step;
    if (endPoint > mcssList.size()) {
      endPoint=mcssList.size();
    }
    List<IAtomContainer> subList=new ArrayList<>(mcssList.subList(i,endPoint));
    if (subList.size() > 1) {
      MCSSThread mcssJobThread=new MCSSThread(subList,jobType,taskNumber,matchBonds,matchRings,matchAtomType);
      callablesQueue.add(mcssJobThread);
      taskNumber++;
    }
 else {
      solutions.add(subList.get(0));
    }
  }
  try {
    List<Future<LinkedBlockingQueue<IAtomContainer>>> futureList=threadPool.invokeAll(callablesQueue);
    for (Iterator<Future<LinkedBlockingQueue<IAtomContainer>>> it=futureList.iterator(); it.hasNext(); ) {
      Future<LinkedBlockingQueue<IAtomContainer>> callable=it.next();
      LinkedBlockingQueue<IAtomContainer> mapping=callable.get();
      if (callable.isDone() && mapping != null) {
        solutions.addAll(mapping);
      }
 else {
        logger.warn(""String_Node_Str"");
      }
    }
    threadPool.shutdown();
    while (!threadPool.isTerminated()) {
    }
    System.gc();
  }
 catch (  InterruptedException|ExecutionException e) {
    logger.debug(""String_Node_Str"" + e.getMessage());
    logger.error(e);
  }
 finally {
    threadPool.shutdown();
  }
  return solutions;
}","private synchronized LinkedBlockingQueue<IAtomContainer> submitMultiThreadedJob(List<IAtomContainer> mcssList,JobType jobType,int nThreads){
  int taskNumber=1;
  LinkedBlockingQueue<IAtomContainer> solutions=new LinkedBlockingQueue<>();
  LinkedBlockingQueue<Callable<LinkedBlockingQueue<IAtomContainer>>> callablesQueue=new LinkedBlockingQueue<>();
  ExecutorService threadPool=Executors.newFixedThreadPool(nThreads);
  int step=(int)Math.ceil((double)mcssList.size() / (double)nThreads);
  if (step < 2) {
    step=2;
  }
  for (int i=0; i < mcssList.size(); i+=step) {
    int endPoint=i + step;
    if (endPoint > mcssList.size()) {
      endPoint=mcssList.size();
    }
    List<IAtomContainer> subList=new ArrayList<>(mcssList.subList(i,endPoint));
    if (subList.size() > 1) {
      MCSSThread mcssJobThread=new MCSSThread(subList,jobType,taskNumber,matchBonds,matchRings,matchAtomType);
      callablesQueue.add(mcssJobThread);
      taskNumber++;
    }
 else {
      solutions.add(subList.get(0));
    }
  }
  try {
    List<Future<LinkedBlockingQueue<IAtomContainer>>> futureList=threadPool.invokeAll(callablesQueue);
    for (    Future<LinkedBlockingQueue<IAtomContainer>> callable : futureList) {
      LinkedBlockingQueue<IAtomContainer> mapping=callable.get();
      if (callable.isDone() && mapping != null) {
        solutions.addAll(mapping);
      }
 else {
        logger.warn(""String_Node_Str"");
      }
    }
    threadPool.shutdown();
    while (!threadPool.isTerminated()) {
    }
    System.gc();
  }
 catch (  InterruptedException|ExecutionException e) {
    logger.debug(""String_Node_Str"" + e.getMessage());
    logger.error(e);
  }
 finally {
    threadPool.shutdown();
  }
  return solutions;
}",0.9641748942172074
39418,"private synchronized void singleMapping(){
  SingleMappingHandler mcs;
  mcs=new SingleMappingHandler(getQuery(),getTarget(),isMatchBonds(),isMatchRings());
  clearMaps();
  getMCSList().addAll(mcs.getAllAtomMapping());
}","private synchronized void singleMapping(){
  SingleMappingHandler mcs;
  mcs=new SingleMappingHandler(getQuery(),getTarget(),isMatchRings());
  clearMaps();
  getMCSList().addAll(mcs.getAllAtomMapping());
}",0.9648711943793912
39419,"/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraph() throws CDKException {
  boolean isSubgraph=false;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    singleMapping(isMatchBonds());
  }
 else {
    if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
      return false;
    }
    VF2 mapper;
    List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
    if (getQuery() instanceof IQueryAtomContainer) {
      mapper=new VF2((IQueryAtomContainer)getQuery(),getTarget());
    }
 else {
      mapper=new VF2(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
    }
    isSubgraph=mapper.isSubgraph();
    List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
    if (isSubgraph) {
      mappingsVF2.addAll(atomMappings);
    }
 else {
      return false;
    }
    setVFMappings(mappingsVF2);
  }
  return isSubgraph;
}","/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraph() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else {
    if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
      return false;
    }
    VF2 mapper;
    List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
    if (getQuery() instanceof IQueryAtomContainer) {
      mapper=new VF2((IQueryAtomContainer)getQuery(),getTarget());
    }
 else {
      mapper=new VF2(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
    }
    isSubgraph=mapper.isSubgraph();
    List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
    if (isSubgraph) {
      mappingsVF2.addAll(atomMappings);
    }
 else {
      return false;
    }
    setVFMappings(mappingsVF2);
  }
  return isSubgraph;
}",0.9856680536292188
39420,"private synchronized void singleMapping(boolean shouldMatchBonds){
  SingleMappingHandler mcs;
  if (!(getQuery() instanceof IQueryAtomContainer) && !(getTarget() instanceof IQueryAtomContainer)) {
    mcs=new SingleMappingHandler(getQuery(),getTarget(),shouldMatchBonds,isMatchRings());
  }
 else {
    mcs=new SingleMappingHandler((IQueryAtomContainer)getQuery(),getTarget());
  }
  getMCSList().addAll(mcs.getAllAtomMapping());
}","private synchronized boolean singleMapping(){
  SingleMappingHandler mcs;
  if (!(getQuery() instanceof IQueryAtomContainer) && !(getTarget() instanceof IQueryAtomContainer)) {
    mcs=new SingleMappingHandler(getQuery(),getTarget(),isMatchRings());
  }
 else {
    mcs=new SingleMappingHandler((IQueryAtomContainer)getQuery(),getTarget());
  }
  return mcs.getAllAtomMapping() != null && !mcs.getAllAtomMapping().isEmpty();
}",0.8438228438228438
39421,"/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraphs() throws CDKException {
  boolean isSubgraph=false;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    singleMapping(isMatchBonds());
  }
 else {
    if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
      return false;
    }
 else {
      List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
      VF2Sub mapper;
      if (getQuery() instanceof IQueryAtomContainer) {
        mapper=new VF2Sub((IQueryAtomContainer)getQuery(),getTarget());
      }
 else {
        mapper=new VF2Sub(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
      }
      isSubgraph=mapper.isSubgraph();
      List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
      if (isSubgraph) {
        mappingsVF2.addAll(atomMappings);
      }
 else {
        return false;
      }
      setVFMappings(mappingsVF2);
    }
  }
  return isSubgraph;
}","/** 
 * Returns true if query is a subgraph of target molecule
 * @return
 * @throws CDKException
 */
private synchronized boolean findSubgraphs() throws CDKException {
  boolean isSubgraph;
  if ((getTarget() == null) || (getQuery() == null)) {
    throw new CDKException(""String_Node_Str"");
  }
  if (getQuery().getAtomCount() == 1 || getTarget().getAtomCount() == 1) {
    isSubgraph=singleMapping();
  }
 else {
    if (getQuery().getAtomCount() > getTarget().getAtomCount()) {
      return false;
    }
 else {
      List<AtomAtomMapping> mappingsVF2=new ArrayList<>();
      VF2Sub mapper;
      if (getQuery() instanceof IQueryAtomContainer) {
        mapper=new VF2Sub((IQueryAtomContainer)getQuery(),getTarget());
      }
 else {
        mapper=new VF2Sub(getQuery(),getTarget(),isMatchBonds(),isMatchRings(),isMatchAtomType());
      }
      isSubgraph=mapper.isSubgraph();
      List<AtomAtomMapping> atomMappings=mapper.getAllAtomMapping();
      if (isSubgraph) {
        mappingsVF2.addAll(atomMappings);
      }
 else {
        return false;
      }
      setVFMappings(mappingsVF2);
    }
  }
  return isSubgraph;
}",0.986349625715544
39422,"/** 
 * Constructor
 * @param queryBond query GraphMolecule
 * @param shouldMatchBonds bond match flag
 * @param matchAtomTypes
 */
public DefaultBondMatcher(IBond queryBond,boolean shouldMatchBonds,boolean matchAtomTypes){
  super();
  this.queryBond=queryBond;
  this.shouldMatchBonds=shouldMatchBonds;
  this.matchAtomTypes=matchAtomTypes;
}","/** 
 * Constructor
 * @param queryBond query GraphMolecule
 * @param shouldMatchBonds bond match flag
 * @param shouldMatchRings
 * @param matchAtomTypes
 */
public DefaultBondMatcher(IBond queryBond,boolean shouldMatchBonds,boolean shouldMatchRings,boolean matchAtomTypes){
  super();
  this.queryBond=queryBond;
  this.shouldMatchBonds=shouldMatchBonds;
  this.shouldMatchRings=shouldMatchRings;
  this.matchAtomTypes=matchAtomTypes;
}",0.8797953964194374
39423,"/** 
 * {@inheritDoc}
 * @param targetBond target bond
 * @return true if bonds match
 */
@Override public boolean matches(IBond targetBond){
  if (this.queryBond != null && queryBond instanceof IQueryBond) {
    return ((IQueryBond)queryBond).matches(targetBond);
  }
 else   if ((queryBond != null && targetBond != null) && (!isBondMatchFlag() || (isBondMatchFlag() && isBondTypeMatch(targetBond)))) {
    return true;
  }
  return false;
}","/** 
 * {@inheritDoc}
 * @param targetBond target bond
 * @return true if bonds match
 */
@Override public boolean matches(IBond targetBond){
  if (this.queryBond != null && queryBond instanceof IQueryBond) {
    return ((IQueryBond)queryBond).matches(targetBond);
  }
 else   if ((queryBond != null && targetBond != null) && isBondMatchFlag() && isBondTypeMatch(targetBond)) {
    return true;
  }
 else   if ((queryBond != null && targetBond != null) && !isBondMatchFlag() && isShouldMatchRings()) {
    if (queryBond.getFlag(CDKConstants.ISAROMATIC) && targetBond.getFlag(CDKConstants.ISAROMATIC)) {
      return true;
    }
    return !queryBond.getFlag(CDKConstants.ISAROMATIC) && !targetBond.getFlag(CDKConstants.ISAROMATIC);
  }
  return false;
}",0.6711297071129707
39424,"/** 
 * @param bondA1
 * @param bondA2
 * @param matchBond
 * @param shouldMatchRings
 * @param matchAtomTypes (atom type also matched and symbol matched)
 * @return
 */
public static boolean matches(IBond bondA1,IBond bondA2,boolean matchBond,boolean shouldMatchRings,boolean matchAtomTypes){
  if (!isAtomMatch(bondA1,bondA2,shouldMatchRings,matchAtomTypes)) {
    return false;
  }
  return !matchBond || isBondMatch(new DefaultBondMatcher(bondA1,matchBond,matchAtomTypes),bondA2);
}","/** 
 * @param bondA1
 * @param bondA2
 * @param matchBond
 * @param shouldMatchRings
 * @param matchAtomTypes (atom type also matched and symbol matched)
 * @return
 */
public static boolean matches(IBond bondA1,IBond bondA2,boolean matchBond,boolean shouldMatchRings,boolean matchAtomTypes){
  if (!isAtomMatch(bondA1,bondA2,shouldMatchRings,matchAtomTypes)) {
    return false;
  }
  return isBondMatch(new DefaultBondMatcher(bondA1,matchBond,shouldMatchRings,matchAtomTypes),bondA2);
}",0.9682051282051282
39425,"/** 
 * @param list
 * @param source
 * @param target
 */
protected synchronized void identifyMatchedParts(List<List<CDKRMap>> list,IAtomContainer source,IAtomContainer target){
  List<IAtom> array1=new ArrayList<IAtom>();
  List<IAtom> array2=new ArrayList<IAtom>();
  for (  List<CDKRMap> rMap : list) {
    Map<Integer,Integer> atomNumbersFromContainer=new TreeMap<>();
    for (    CDKRMap rmap : rMap) {
      IAtom sourceAtom=source.getAtom(rmap.getId1());
      IAtom targetAtom=target.getAtom(rmap.getId2());
      array1.add(sourceAtom);
      array2.add(targetAtom);
      int indexI=source.getAtomNumber(sourceAtom);
      int indexJ=target.getAtomNumber(targetAtom);
      atomNumbersFromContainer.put(indexI,indexJ);
    }
    getMappings().add(atomNumbersFromContainer);
  }
}","/** 
 * @param list
 * @param source
 * @param target
 */
protected synchronized void identifyMatchedParts(List<List<CDKRMap>> list,IAtomContainer source,IAtomContainer target){
  for (  List<CDKRMap> rMap : list) {
    Map<Integer,Integer> atomNumbersFromContainer=new TreeMap<>();
    for (    CDKRMap rmap : rMap) {
      IAtom sourceAtom=source.getAtom(rmap.getId1());
      IAtom targetAtom=target.getAtom(rmap.getId2());
      int indexI=source.getAtomNumber(sourceAtom);
      int indexJ=target.getAtomNumber(targetAtom);
      atomNumbersFromContainer.put(indexI,indexJ);
    }
    getMappings().add(atomNumbersFromContainer);
  }
}",0.8951048951048951
39426,"/** 
 * @param list
 * @param source
 * @param target
 */
protected synchronized void identifySingleAtomsMatchedParts(List<CDKRMap> list,IAtomContainer source,IAtomContainer target){
  List<IAtom> array1=new ArrayList<>();
  List<IAtom> array2=new ArrayList<>();
  TreeMap<Integer,Integer> atomNumbersFromContainer=new TreeMap<>();
  for (  CDKRMap rmap : list) {
    IAtom sAtom=source.getAtom(rmap.getId1());
    IAtom tAtom=target.getAtom(rmap.getId2());
    array1.add(sAtom);
    array2.add(tAtom);
    int indexI=source.getAtomNumber(sAtom);
    int indexJ=target.getAtomNumber(tAtom);
    atomNumbersFromContainer.put(indexI,indexJ);
    getMappings().add(atomNumbersFromContainer);
  }
}","/** 
 * @param list
 * @param source
 * @param target
 */
protected synchronized void identifySingleAtomsMatchedParts(List<CDKRMap> list,IAtomContainer source,IAtomContainer target){
  TreeMap<Integer,Integer> atomNumbersFromContainer=new TreeMap<>();
  for (  CDKRMap rmap : list) {
    IAtom sAtom=source.getAtom(rmap.getId1());
    IAtom tAtom=target.getAtom(rmap.getId2());
    int indexI=source.getAtomNumber(sAtom);
    int indexJ=target.getAtomNumber(tAtom);
    atomNumbersFromContainer.put(indexI,indexJ);
    getMappings().add(atomNumbersFromContainer);
  }
}",0.9003164556962026
39427,"private synchronized void setSourceSingleAtomMap(List<Map<IAtom,IAtom>> mappings) throws CDKException {
  int counter=0;
  BondEnergies be=BondEnergies.getInstance();
  for (  IAtom sourceAtom : source.atoms()) {
    for (    IAtom targetAtom : target.atoms()) {
      Map<IAtom,IAtom> mapAtoms=new HashMap<IAtom,IAtom>();
      if (sourceAtom instanceof IQueryAtom) {
        if (((IQueryAtom)sourceAtom).matches(targetAtom)) {
          mapAtoms.put(sourceAtom,targetAtom);
          List<IBond> Bonds=target.getConnectedBondsList(targetAtom);
          double totalOrder=0;
          for (          IBond bond : Bonds) {
            Order bondOrder=bond.getOrder();
            if (bondOrder == null) {
              continue;
            }
            totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
          }
          if (targetAtom.getFormalCharge() != sourceAtom.getFormalCharge()) {
            totalOrder+=0.5;
          }
          connectedBondOrder.put(counter,totalOrder);
          mappings.add(counter++,mapAtoms);
        }
      }
 else       if (sourceAtom.getSymbol().equalsIgnoreCase(targetAtom.getSymbol())) {
        mapAtoms.put(sourceAtom,targetAtom);
        List<IBond> Bonds=target.getConnectedBondsList(targetAtom);
        double totalOrder=0;
        for (        IBond bond : Bonds) {
          Order bondOrder=bond.getOrder();
          if (bondOrder == null) {
            continue;
          }
          totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
        }
        if (targetAtom.getFormalCharge() != sourceAtom.getFormalCharge()) {
          totalOrder+=0.5;
        }
        connectedBondOrder.put(counter,totalOrder);
        mappings.add(counter,mapAtoms);
        counter++;
      }
    }
  }
}","private synchronized void setSourceSingleAtomMap(List<Map<IAtom,IAtom>> mappings) throws CDKException {
  int counter=0;
  BondEnergies be=BondEnergies.getInstance();
  for (  IAtom sourceAtom : source.atoms()) {
    for (    IAtom targetAtom : target.atoms()) {
      Map<IAtom,IAtom> mapAtoms=new HashMap<>();
      if (sourceAtom instanceof IQueryAtom) {
        if (((IQueryAtom)sourceAtom).matches(targetAtom)) {
          mapAtoms.put(sourceAtom,targetAtom);
          List<IBond> Bonds=target.getConnectedBondsList(targetAtom);
          double totalOrder=0;
          for (          IBond bond : Bonds) {
            Order bondOrder=bond.getOrder();
            if (bondOrder == null) {
              continue;
            }
            totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
          }
          if (!Objects.equals(targetAtom.getFormalCharge(),sourceAtom.getFormalCharge())) {
            totalOrder+=0.5;
          }
          connectedBondOrder.put(counter,totalOrder);
          mappings.add(counter++,mapAtoms);
        }
      }
 else       if (sourceAtom.getSymbol().equalsIgnoreCase(targetAtom.getSymbol())) {
        mapAtoms.put(sourceAtom,targetAtom);
        List<IBond> Bonds=target.getConnectedBondsList(targetAtom);
        double totalOrder=0;
        for (        IBond bond : Bonds) {
          Order bondOrder=bond.getOrder();
          if (bondOrder == null) {
            continue;
          }
          totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
        }
        if (!Objects.equals(targetAtom.getFormalCharge(),sourceAtom.getFormalCharge())) {
          totalOrder+=0.5;
        }
        connectedBondOrder.put(counter,totalOrder);
        mappings.add(counter,mapAtoms);
        counter++;
      }
    }
  }
}",0.9844324936314748
39428,"/** 
 * Default
 */
public SingleMapping(){
  connectedBondOrder=new TreeMap<Integer,Double>();
}","/** 
 * Default
 */
public SingleMapping(){
  connectedBondOrder=new TreeMap<>();
}",0.9222222222222224
39429,"private synchronized void setTargetSingleAtomMap(List<Map<IAtom,IAtom>> mappings) throws CDKException {
  int counter=0;
  BondEnergies be=BondEnergies.getInstance();
  for (  IAtom targetAtom : target.atoms()) {
    for (    IAtom sourceAtoms : source.atoms()) {
      Map<IAtom,IAtom> mapAtoms=new HashMap<IAtom,IAtom>();
      if (targetAtom instanceof IQueryAtom) {
        if (((IQueryAtom)targetAtom).matches(sourceAtoms)) {
          if (targetAtom.getSymbol().equalsIgnoreCase(sourceAtoms.getSymbol())) {
            mapAtoms.put(sourceAtoms,targetAtom);
            List<IBond> Bonds=source.getConnectedBondsList(sourceAtoms);
            double totalOrder=0;
            for (            IBond bond : Bonds) {
              Order bondOrder=bond.getOrder();
              if (bondOrder == null) {
                continue;
              }
              totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
            }
            if (sourceAtoms.getFormalCharge() != targetAtom.getFormalCharge()) {
              totalOrder+=0.5;
            }
            connectedBondOrder.put(counter,totalOrder);
            mappings.add(counter,mapAtoms);
            counter++;
          }
        }
      }
 else       if (targetAtom.getSymbol().equalsIgnoreCase(sourceAtoms.getSymbol())) {
        mapAtoms.put(sourceAtoms,targetAtom);
        List<IBond> Bonds=source.getConnectedBondsList(sourceAtoms);
        double totalOrder=0;
        for (        IBond bond : Bonds) {
          Order bondOrder=bond.getOrder();
          if (bondOrder == null) {
            continue;
          }
          totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
        }
        if (sourceAtoms.getFormalCharge() != targetAtom.getFormalCharge()) {
          totalOrder+=0.5;
        }
        connectedBondOrder.put(counter,totalOrder);
        mappings.add(counter,mapAtoms);
        counter++;
      }
    }
  }
}","private synchronized void setTargetSingleAtomMap(List<Map<IAtom,IAtom>> mappings) throws CDKException {
  int counter=0;
  BondEnergies be=BondEnergies.getInstance();
  for (  IAtom targetAtom : target.atoms()) {
    for (    IAtom sourceAtoms : source.atoms()) {
      Map<IAtom,IAtom> mapAtoms=new HashMap<>();
      if (targetAtom instanceof IQueryAtom) {
        if (((IQueryAtom)targetAtom).matches(sourceAtoms)) {
          if (targetAtom.getSymbol().equalsIgnoreCase(sourceAtoms.getSymbol())) {
            mapAtoms.put(sourceAtoms,targetAtom);
            List<IBond> Bonds=source.getConnectedBondsList(sourceAtoms);
            double totalOrder=0;
            for (            IBond bond : Bonds) {
              Order bondOrder=bond.getOrder();
              if (bondOrder == null) {
                continue;
              }
              totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
            }
            if (!Objects.equals(sourceAtoms.getFormalCharge(),targetAtom.getFormalCharge())) {
              totalOrder+=0.5;
            }
            connectedBondOrder.put(counter,totalOrder);
            mappings.add(counter,mapAtoms);
            counter++;
          }
        }
      }
 else       if (targetAtom.getSymbol().equalsIgnoreCase(sourceAtoms.getSymbol())) {
        mapAtoms.put(sourceAtoms,targetAtom);
        List<IBond> Bonds=source.getConnectedBondsList(sourceAtoms);
        double totalOrder=0;
        for (        IBond bond : Bonds) {
          Order bondOrder=bond.getOrder();
          if (bondOrder == null) {
            continue;
          }
          totalOrder+=bondOrder.numeric() + be.getEnergies(bond);
        }
        if (!Objects.equals(sourceAtoms.getFormalCharge(),targetAtom.getFormalCharge())) {
          totalOrder+=0.5;
        }
        connectedBondOrder.put(counter,totalOrder);
        mappings.add(counter,mapAtoms);
        counter++;
      }
    }
  }
}",0.9856957087126138
39430,"private <K,V>Map<K,V> sortByValue(Map<K,V> map){
  List list=new LinkedList(map.entrySet());
  Collections.sort(list,new Comparator(){
    @Override public int compare(    Object object1,    Object object2){
      return ((Comparable)((Map.Entry<K,V>)(object1)).getValue()).compareTo(((Map.Entry<K,V>)(object2)).getValue());
    }
  }
);
  Map<K,V> result=new LinkedHashMap<K,V>();
  for (Iterator it=list.iterator(); it.hasNext(); ) {
    Map.Entry<K,V> entry=(Map.Entry<K,V>)it.next();
    result.put(entry.getKey(),entry.getValue());
  }
  return result;
}","private <K,V>Map<K,V> sortByValue(Map<K,V> map){
  List list=new LinkedList(map.entrySet());
  Collections.sort(list,new Comparator(){
    @Override public int compare(    Object object1,    Object object2){
      return ((Comparable)((Map.Entry<K,V>)(object1)).getValue()).compareTo(((Map.Entry<K,V>)(object2)).getValue());
    }
  }
);
  Map<K,V> result=new LinkedHashMap<>();
  for (Iterator it=list.iterator(); it.hasNext(); ) {
    Map.Entry<K,V> entry=(Map.Entry<K,V>)it.next();
    result.put(entry.getKey(),entry.getValue());
  }
  return result;
}",0.9973094170403588
39431,"/** 
 * Returns single mapping solutions.
 * @param source
 * @param target
 * @return Mappings
 * @throws CDKException
 */
@TestMethod(""String_Node_Str"") protected synchronized List<Map<IAtom,IAtom>> getOverLaps(IQueryAtomContainer source,IAtomContainer target) throws CDKException {
  List<Map<IAtom,IAtom>> mappings=new ArrayList<Map<IAtom,IAtom>>();
  this.source=source;
  this.target=target;
  if (source.getAtomCount() == 1 || (source.getAtomCount() > 0 && source.getBondCount() == 0)) {
    setSourceSingleAtomMap(mappings);
  }
  if (target.getAtomCount() == 1 || (target.getAtomCount() > 0 && target.getBondCount() == 0)) {
    setTargetSingleAtomMap(mappings);
  }
  return postFilter(mappings);
}","/** 
 * Returns single mapping solutions.
 * @param source
 * @param target
 * @return Mappings
 * @throws CDKException
 */
@TestMethod(""String_Node_Str"") protected synchronized List<Map<IAtom,IAtom>> getOverLaps(IQueryAtomContainer source,IAtomContainer target) throws CDKException {
  List<Map<IAtom,IAtom>> mappings=new ArrayList<>();
  this.source=source;
  this.target=target;
  if (source.getAtomCount() == 1 || (source.getAtomCount() > 0 && source.getBondCount() == 0)) {
    setSourceSingleAtomMap(mappings);
  }
  if (target.getAtomCount() == 1 || (target.getAtomCount() > 0 && target.getBondCount() == 0)) {
    setTargetSingleAtomMap(mappings);
  }
  return postFilter(mappings);
}",0.9885714285714284
39432,"private synchronized List<Map<IAtom,IAtom>> postFilter(List<Map<IAtom,IAtom>> mappings){
  List<Map<IAtom,IAtom>> sortedMap=new ArrayList<Map<IAtom,IAtom>>();
  if (mappings.isEmpty()) {
    return sortedMap;
  }
  Map<Integer,Double> sortedMapByValue=sortByValue(connectedBondOrder);
  for (  Integer key : sortedMapByValue.keySet()) {
    Map<IAtom,IAtom> mapToBeMoved=mappings.get(key);
    sortedMap.add(mapToBeMoved);
  }
  return sortedMap;
}","private synchronized List<Map<IAtom,IAtom>> postFilter(List<Map<IAtom,IAtom>> mappings){
  List<Map<IAtom,IAtom>> sortedMap=new ArrayList<>();
  if (mappings.isEmpty()) {
    return sortedMap;
  }
  Map<Integer,Double> sortedMapByValue=sortByValue(connectedBondOrder);
  for (  Integer key : sortedMapByValue.keySet()) {
    Map<IAtom,IAtom> mapToBeMoved=mappings.get(key);
    sortedMap.add(mapToBeMoved);
  }
  return sortedMap;
}",0.9818181818181818
39433,"private synchronized BondMatcher createBondMatcher(IBond bond){
  return new DefaultBondMatcher(bond,isBondMatchFlag(),isMatchAtomType());
}","private synchronized BondMatcher createBondMatcher(IBond bond){
  return new DefaultBondMatcher(bond,isBondMatchFlag(),isShouldMatchRings(),isMatchAtomType());
}",0.9302325581395348
39434,"boolean matchBonds(IBond queryBond,IBond targetBond){
  BondMatcher defaultVFBondMatcher=new DefaultBondMatcher(queryBond,shouldMatchBonds,shouldMatchAtomType);
  return defaultVFBondMatcher.matches(targetBond);
}","boolean matchBonds(IBond queryBond,IBond targetBond){
  BondMatcher defaultVFBondMatcher=new DefaultBondMatcher(queryBond,shouldMatchBonds,shouldMatchRings,shouldMatchAtomType);
  return defaultVFBondMatcher.matches(targetBond);
}",0.9616252821670428
39435,"/** 
 * Constructor for the CDKRMap
 * @param id1  number of the edge (bond) in the graphe 1
 * @param id2  number of the edge (bond) in the graphe 2
 */
public CDKRMap(int id1,int id2){
  this.id1=id1;
  this.id2=id2;
}","/** 
 * Constructor for the CDKRMap
 * @param id1 number of the edge (bond) in the graph e1
 * @param id2 number of the edge (bond) in the graph e2
 */
public CDKRMap(int id1,int id2){
  this.id1=id1;
  this.id2=id2;
}",0.9771689497716894
39436,"/** 
 * Sets the id1 attribute of the CDKRMap object
 * @param id1  The new id1 value
 */
public synchronized void setId1(int id1){
  this.id1=id1;
}","/** 
 * Sets the id1 attribute of the CDKRMap object
 * @param id1 The new id1 value
 */
public synchronized void setId1(int id1){
  this.id1=id1;
}",0.9966329966329966
39437,"/** 
 * Returns a hash code for object comparison.
 * @return    Returns a hash code for object comparison.
 */
@Override public synchronized int hashCode(){
  int hash=5;
  hash=79 * hash + this.getId1();
  hash=79 * hash + this.getId2();
  return hash;
}","/** 
 * Returns a hash code for object comparison.
 * @return Returns a hash code for object comparison.
 */
@Override public synchronized int hashCode(){
  int hash=5;
  hash=79 * hash + this.getId1();
  hash=79 * hash + this.getId2();
  return hash;
}",0.9941060903732808
39438,"/** 
 * Sets the id2 attribute of the CDKRMap object
 * @param id2  The new id2 value
 */
public synchronized void setId2(int id2){
  this.id2=id2;
}","/** 
 * Sets the id2 attribute of the CDKRMap object
 * @param id2 The new id2 value
 */
public synchronized void setId2(int id2){
  this.id2=id2;
}",0.9966329966329966
39439,"/** 
 * The equals method.
 * @param obj  The object to compare.
 * @return    true=if both ids equal, else false.
 */
@Override public synchronized boolean equals(Object obj){
  if (((CDKRMap)obj).getId1() == getId1() && ((CDKRMap)obj).getId2() == getId2()) {
    return (true);
  }
 else {
    return (false);
  }
}","/** 
 * The equals method.
 * @param obj The object to compare.
 * @return true=if both ids equal, else false.
 */
@Override public synchronized boolean equals(Object obj){
  if (((CDKRMap)obj).getId1() == getId1() && ((CDKRMap)obj).getId2() == getId2()) {
    return true;
  }
  return ((CDKRMap)obj).getId1() == getId1() || ((CDKRMap)obj).getId2() == getId2();
}",0.8193832599118943
39440,"/** 
 * Gets the id1 attribute of the CDKRMap object
 * @return    The id1 value
 */
public synchronized int getId1(){
  return id1;
}","/** 
 * Gets the id1 attribute of the CDKRMap object
 * @return The id1 value
 */
public synchronized int getId1(){
  return id1;
}",0.9886792452830188
39441,"/** 
 * Gets the id2 attribute of the CDKRMap object
 * @return    The id2 value
 */
public synchronized int getId2(){
  return id2;
}","/** 
 * Gets the id2 attribute of the CDKRMap object
 * @return The id2 value
 */
public synchronized int getId2(){
  return id2;
}",0.9886792452830188
39442,"private synchronized boolean substructureAlgorithm() throws CDKException {
  Substructure mcs;
  mcs=new Substructure(getQueryContainer(),getTargetContainer(),isMatchBonds(),isMatchRings(),true);
  clearMaps();
  if (isSubgraph()) {
    getMCSList().addAll(mcs.getAllAtomMapping());
  }
  return mcs.isSubgraph();
}","private synchronized boolean substructureAlgorithm() throws CDKException {
  Substructure mcs;
  mcs=new Substructure(getQueryContainer(),getTargetContainer(),isMatchBonds(),isMatchRings(),true);
  clearMaps();
  if (mcs.isSubgraph()) {
    getMCSList().addAll(mcs.getAllAtomMapping());
  }
  return mcs.isSubgraph();
}",0.9936908517350158
39443,"/** 
 * {@inheritDoc}
 * @param targetAtom
 * @return
 */
@Override public boolean matches(IAtom targetAtom){
  if (targetAtom instanceof IQueryAtom) {
    return ((IQueryAtom)targetAtom).matches(getQueryAtom());
  }
 else   if (getQueryAtom() != null && getQueryAtom() instanceof IQueryAtom) {
    return ((IQueryAtom)getQueryAtom()).matches(targetAtom);
  }
 else {
    if (!matchSymbol(targetAtom)) {
      return false;
    }
    if (isShouldMatchRings() && isAtomAttachedToRing(getQueryAtom()) && isAtomAttachedToRing(targetAtom)) {
      return true;
    }
 else     if (isShouldMatchRings() && (isAliphaticAtom(getQueryAtom()) && isRingAtom(targetAtom))) {
      return false;
    }
 else     if (isShouldMatchRings() && (isRingAtom(getQueryAtom()) && isAliphaticAtom(targetAtom))) {
      return false;
    }
 else     if (isShouldMatchRings() && (isRingAtom(getQueryAtom()) && isRingAtom(targetAtom))) {
      if (getQueryAtom().getProperty(SMALLEST_RING_SIZE) != targetAtom.getProperty(SMALLEST_RING_SIZE)) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * {@inheritDoc}
 * @param targetAtom
 * @return
 */
@Override public boolean matches(IAtom targetAtom){
  if (targetAtom instanceof IQueryAtom) {
    return ((IQueryAtom)targetAtom).matches(getQueryAtom());
  }
 else   if (getQueryAtom() != null && getQueryAtom() instanceof IQueryAtom) {
    return ((IQueryAtom)getQueryAtom()).matches(targetAtom);
  }
 else {
    if (!matchSymbol(targetAtom)) {
      return false;
    }
    if (isShouldMatchRings() && isAtomAttachedToRing(getQueryAtom()) && !isRingAtom(getQueryAtom())&& isAtomAttachedToRing(targetAtom)&& !isRingAtom(targetAtom)) {
      return true;
    }
 else     if (isShouldMatchRings() && (isAliphaticAtom(getQueryAtom()) && isRingAtom(targetAtom))) {
      return false;
    }
 else     if (isShouldMatchRings() && (isRingAtom(getQueryAtom()) && isAliphaticAtom(targetAtom))) {
      return false;
    }
 else     if (isShouldMatchRings() && (isRingAtom(getQueryAtom()) && isRingAtom(targetAtom))) {
      if (getQueryAtom().getProperty(SMALLEST_RING_SIZE) != targetAtom.getProperty(SMALLEST_RING_SIZE)) {
        return false;
      }
    }
  }
  return true;
}",0.9746146872166818
39444,"public Map<String,String> getStringDataTypes(){
  return stringDataTypes;
}","public Map<String,String> getStringDataTypes(){
  return Collections.unmodifiableMap(stringDataTypes);
}",0.8379888268156425
39445,"/** 
 * Returns Target molecule
 * @return
 * @throws IOException
 * @throws CDKException
 */
public IAtomContainer getTarget() throws IOException, CDKException {
  String filenameOrData=argumentHandler.getTargetFilepath();
  String type=argumentHandler.getTargetType();
  if (isSingleFileTarget) {
    ISimpleChemObjectReader reader=getReader(type,filenameOrData);
    IChemFile chemFile=reader.read(new ChemFile());
    IAtomContainer molecule=(IAtomContainer)ChemFileManipulator.getAllAtomContainers(chemFile).get(0);
    configure(molecule,type);
    return molecule;
  }
 else {
    return getMolFromString(filenameOrData,type);
  }
}","/** 
 * Returns Target molecule
 * @return
 * @throws IOException
 * @throws CDKException
 */
public IAtomContainer getTarget() throws IOException, CDKException {
  String filenameOrData=argumentHandler.getTargetFilepath();
  String type=argumentHandler.getTargetType();
  if (isSingleFileTarget) {
    ISimpleChemObjectReader reader=getReader(type,filenameOrData);
    IChemFile chemFile=reader.read(new ChemFile());
    IAtomContainer molecule=ChemFileManipulator.getAllAtomContainers(chemFile).get(0);
    configure(molecule,type);
    return molecule;
  }
 else {
    return getMolFromString(filenameOrData,type);
  }
}",0.7337559429477021
39446,"public Map<String,String> getMultipleDataTypes(){
  return multipleDataTypes;
}","public Map<String,String> getMultipleDataTypes(){
  return Collections.unmodifiableMap(multipleDataTypes);
}",0.8449197860962567
39447,"public Map<String,String> getSingularDataTypes(){
  return singularDataTypes;
}","public Map<String,String> getSingularDataTypes(){
  return Collections.unmodifiableMap(singularDataTypes);
}",0.8449197860962567
39448,"/** 
 * Return Query molecule
 * @return
 * @throws IOException
 * @throws CDKException
 */
public IAtomContainer getQuery() throws IOException, CDKException {
  String filenameOrData=argumentHandler.getQueryFilepath();
  String type=argumentHandler.getQueryType();
  if (isSingleFileQuery) {
    ISimpleChemObjectReader reader=getReader(type,filenameOrData);
    IChemFile chemFile=reader.read(new ChemFile());
    IAtomContainer molecule=(IAtomContainer)ChemFileManipulator.getAllAtomContainers(chemFile).get(0);
    configure(molecule,type);
    return molecule;
  }
 else {
    return getMolFromString(filenameOrData,type);
  }
}","/** 
 * Return Query molecule
 * @return
 * @throws IOException
 * @throws CDKException
 */
public IAtomContainer getQuery() throws IOException, CDKException {
  String filenameOrData=argumentHandler.getQueryFilepath();
  String type=argumentHandler.getQueryType();
  if (isSingleFileQuery) {
    ISimpleChemObjectReader reader=getReader(type,filenameOrData);
    IChemFile chemFile=reader.read(new ChemFile());
    IAtomContainer molecule=ChemFileManipulator.getAllAtomContainers(chemFile).get(0);
    configure(molecule,type);
    return molecule;
  }
 else {
    return getMolFromString(filenameOrData,type);
  }
}",0.7312
39449,"public static void runSingleQuerySingleTarget(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IAtomContainer query=inputHandler.getQuery();
  IAtomContainer target=inputHandler.getTarget();
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  boolean flag=ConnectivityChecker.isConnected(query);
  if (!flag) {
    System.out.println(""String_Node_Str"" + inputHandler.getQueryName() + ""String_Node_Str"");
    return;
  }
  flag=ConnectivityChecker.isConnected(target);
  if (!flag) {
    System.out.println(""String_Node_Str"" + inputHandler.getTargetName() + ""String_Node_Str"");
    return;
  }
  if (removeHydrogens) {
    query=new AtomContainer(AtomContainerManipulator.removeHydrogens(query));
    target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
  }
  if (target.getProperty(CDKConstants.TITLE) != null) {
    target.setID((String)target.getProperty(CDKConstants.TITLE));
    argumentHandler.setTargetMolOutName(target.getID());
  }
  if (query.getProperty(CDKConstants.TITLE) != null) {
    query.setID((String)target.getProperty(CDKConstants.TITLE));
    argumentHandler.setQueryMolOutName(query.getID());
  }
  String out=""String_Node_Str"";
  if (!argumentHandler.isAppendMode()) {
    outputHandler.startAppending(out);
  }
 else {
    outputHandler.startNew(out);
  }
  CDKHueckelAromaticityDetector.detectAromaticity(query);
  CDKHueckelAromaticityDetector.detectAromaticity(target);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(query);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(target);
  if (argumentHandler.isApplyHAdding()) {
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(query);
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(target);
  }
  long startTime=System.currentTimeMillis();
  BaseMapping smsd=null;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  if (argumentHandler.isSubstructureMode()) {
    smsd=runSubstructure(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
 else {
    smsd=run(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
  query=query.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getQuery());
  target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
  long endTime=System.currentTimeMillis();
  long executionTime=endTime - startTime;
  outputHandler.writeQueryMol(smsd.getFirstAtomMapping().getQuery());
  outputHandler.writeTargetMol(smsd.getFirstAtomMapping().getTarget());
  String queryPath=argumentHandler.getQueryFilepath();
  String targetPath=argumentHandler.getTargetFilepath();
  Map<IAtom,IAtom> mcs=smsd.getFirstAtomMapping().getMappings();
  int nAtomsMatched=(mcs == null) ? 0 : mcs.size();
  double tanimotoSimilarity=smsd.getTanimotoSimilarity();
  if (mcs != null && argumentHandler.isAllMapping()) {
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    for (    AtomAtomMapping aam : smsd.getAllAtomMapping()) {
      Map<Integer,Integer> mapping=getIndexMapping(aam);
      int counter=0;
      if (argumentHandler.isImage()) {
        double stereoScore=smsd.getStereoScore(counter);
        String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
        outputHandler.addImage(query,target,label,mapping);
      }
      outputHandler.printMapping(counter++,mcs);
    }
  }
 else   if (mcs != null && !argumentHandler.isAllMapping()) {
    Map<Integer,Integer> mcsNumber=getIndexMapping(smsd.getFirstAtomMapping());
    double stereoScore=smsd.getStereoScore(0);
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    String qrefName=inputHandler.getQRefName();
    String trefName=inputHandler.getTRefName();
    outputHandler.printTopMapping(nAtomsMatched,mcs,mcsNumber,qrefName,trefName);
    if (argumentHandler.isImage()) {
      String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
      outputHandler.makeImage(query,target,label,mcsNumber);
    }
  }
  double tanimotoGraph=smsd.getTanimotoSimilarity();
  double euclidianGraph=smsd.getEuclideanDistance();
  outputHandler.writeResults(query,target,tanimotoGraph,euclidianGraph,nAtomsMatched,executionTime);
  if (mcs != null && argumentHandler.isImage()) {
    String qName=inputHandler.getQueryName();
    String tName=inputHandler.getTargetName();
    outputHandler.writeImage(qName,tName);
  }
  if (argumentHandler.shouldOutputSubgraph()) {
    Map<Integer,Integer> mapping=getIndexMapping(smsd.getFirstAtomMapping());
    IAtomContainer subgraph=getSubgraph(target,mapping);
    String outpath=argumentHandler.getOutputFilepath();
    String outtype=argumentHandler.getOutputFiletype();
    outputHandler.writeMol(outtype,subgraph,outpath);
  }
  outputHandler.closeFiles();
}","public static void runSingleQuerySingleTarget(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IAtomContainer query=inputHandler.getQuery();
  IAtomContainer target=inputHandler.getTarget();
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  boolean flag=ConnectivityChecker.isConnected(query);
  if (!flag) {
    System.out.println(""String_Node_Str"" + inputHandler.getQueryName() + ""String_Node_Str"");
    return;
  }
  flag=ConnectivityChecker.isConnected(target);
  if (!flag) {
    System.out.println(""String_Node_Str"" + inputHandler.getTargetName() + ""String_Node_Str"");
    return;
  }
  if (removeHydrogens) {
    query=new AtomContainer(AtomContainerManipulator.removeHydrogens(query));
    target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
  }
  if (target.getProperty(CDKConstants.TITLE) != null) {
    target.setID((String)target.getProperty(CDKConstants.TITLE));
    argumentHandler.setTargetMolOutName(target.getID());
  }
  if (query.getProperty(CDKConstants.TITLE) != null) {
    query.setID((String)query.getProperty(CDKConstants.TITLE));
    argumentHandler.setQueryMolOutName(query.getID());
  }
  String out=""String_Node_Str"";
  if (!argumentHandler.isAppendMode()) {
    outputHandler.startAppending(out);
  }
 else {
    outputHandler.startNew(out);
  }
  CDKHueckelAromaticityDetector.detectAromaticity(query);
  CDKHueckelAromaticityDetector.detectAromaticity(target);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(query);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(target);
  if (argumentHandler.isApplyHAdding()) {
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(query);
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(target);
  }
  long startTime=System.currentTimeMillis();
  BaseMapping smsd=null;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  if (argumentHandler.isSubstructureMode()) {
    smsd=runSubstructure(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
 else {
    smsd=run(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
  query=query.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getQuery());
  target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
  long endTime=System.currentTimeMillis();
  long executionTime=endTime - startTime;
  outputHandler.writeQueryMol(smsd.getFirstAtomMapping().getQuery());
  outputHandler.writeTargetMol(smsd.getFirstAtomMapping().getTarget());
  String queryPath=argumentHandler.getQueryFilepath();
  String targetPath=argumentHandler.getTargetFilepath();
  Map<IAtom,IAtom> mcs=smsd.getFirstAtomMapping().getMappings();
  int nAtomsMatched=(mcs == null) ? 0 : mcs.size();
  double tanimotoSimilarity=smsd.getTanimotoSimilarity();
  if (mcs != null && argumentHandler.isAllMapping()) {
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    for (    AtomAtomMapping aam : smsd.getAllAtomMapping()) {
      Map<Integer,Integer> mapping=getIndexMapping(aam);
      int counter=0;
      if (argumentHandler.isImage()) {
        double stereoScore=smsd.getStereoScore(counter);
        String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
        outputHandler.addImage(query,target,label,mapping);
      }
      outputHandler.printMapping(counter++,mcs);
    }
  }
 else   if (mcs != null && !argumentHandler.isAllMapping()) {
    Map<Integer,Integer> mcsNumber=getIndexMapping(smsd.getFirstAtomMapping());
    double stereoScore=smsd.getStereoScore(0);
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    String qrefName=inputHandler.getQRefName();
    String trefName=inputHandler.getTRefName();
    outputHandler.printTopMapping(nAtomsMatched,mcs,mcsNumber,qrefName,trefName);
    if (argumentHandler.isImage()) {
      String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
      outputHandler.makeImage(query,target,label,mcsNumber);
    }
  }
  double tanimotoGraph=smsd.getTanimotoSimilarity();
  double euclidianGraph=smsd.getEuclideanDistance();
  outputHandler.writeResults(query,target,tanimotoGraph,euclidianGraph,nAtomsMatched,executionTime);
  if (mcs != null && argumentHandler.isImage()) {
    String qName=inputHandler.getQueryName();
    String tName=inputHandler.getTargetName();
    outputHandler.writeImage(qName,tName);
  }
  if (argumentHandler.shouldOutputSubgraph()) {
    Map<Integer,Integer> mapping=getIndexMapping(smsd.getFirstAtomMapping());
    IAtomContainer subgraph=getSubgraph(target,mapping);
    String outpath=argumentHandler.getOutputFilepath();
    String outtype=argumentHandler.getOutputFiletype();
    outputHandler.writeMol(outtype,subgraph,outpath);
  }
  outputHandler.closeFiles();
}",0.9988923572651294
39450,"protected synchronized boolean hasClique(Map<Integer,Integer> cliqueMap,List<Map<Integer,Integer>> mapGlobal){
  for (  Map<Integer,Integer> storedMap : mapGlobal) {
    if (cliqueMap.size() < storedMap.size()) {
      return true;
    }
    if (cliqueMap.keySet().equals(storedMap.keySet()) && cliqueMap.values().equals(storedMap.values())) {
      return true;
    }
  }
  return false;
}","/** 
 * @param cliqueMap
 * @param mapGlobal
 * @return
 */
protected synchronized boolean hasClique(Map<Integer,Integer> cliqueMap,List<Map<Integer,Integer>> mapGlobal){
  for (  Map<Integer,Integer> storedMap : mapGlobal) {
    if (cliqueMap.size() < storedMap.size()) {
      return true;
    }
 else     if (cliqueMap.equals(storedMap)) {
      return true;
    }
  }
  return false;
}",0.7881899871630296
39451,"public static void runSingleQueryMultipleTarget(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IAtomContainer query=inputHandler.getQuery();
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  boolean flag=ConnectivityChecker.isConnected(query);
  if (!flag) {
    System.err.println(""String_Node_Str"" + inputHandler.getQueryName() + ""String_Node_Str"");
    return;
  }
  if (removeHydrogens) {
    query=new AtomContainer(AtomContainerManipulator.removeHydrogens(query));
  }
  outputHandler.writeQueryMol(query);
  String out=""String_Node_Str"";
  outputHandler.startAppending(out);
  long startTime=System.currentTimeMillis();
  BaseMapping smsd=null;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  int targetNumber=0;
  IIteratingChemObjectReader reader=inputHandler.getAllTargets();
  String targetType=argumentHandler.getTargetType();
  if (reader == null) {
    throw new IOException(""String_Node_Str"" + targetType);
  }
  while (reader.hasNext()) {
    IAtomContainer target=(IAtomContainer)reader.next();
    flag=ConnectivityChecker.isConnected(target);
    if (!flag) {
      System.err.println(""String_Node_Str"" + target.getProperty(CDKConstants.TITLE) + ""String_Node_Str"");
      continue;
    }
    if (removeHydrogens) {
      target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
    }
    if (target.getProperty(CDKConstants.TITLE) != null) {
      target.setID((String)target.getProperty(CDKConstants.TITLE));
      argumentHandler.setTargetMolOutName(target.getID() == null ? ""String_Node_Str"" : target.getID());
    }
    inputHandler.configure(target,targetType);
    if (argumentHandler.isSubstructureMode()) {
      smsd=runSubstructure(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
    }
 else {
      smsd=run(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
    }
    long endTime=System.currentTimeMillis();
    long executionTime=endTime - startTime;
    outputHandler.writeTargetMol(smsd.getTargetContainer());
    String queryPath=argumentHandler.getQueryFilepath();
    String targetPath=argumentHandler.getTargetFilepath();
    query=query.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getQuery());
    target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
    Map<IAtom,IAtom> mcs=smsd.getFirstAtomMapping().getMappings();
    int nAtomsMatched=(mcs == null) ? 0 : mcs.size();
    double tanimotoSimilarity=smsd.getTanimotoSimilarity();
    if (mcs != null && argumentHandler.isAllMapping()) {
      outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
      int counter=0;
      for (Iterator<AtomAtomMapping> it=smsd.getAllAtomMapping().iterator(); it.hasNext(); ) {
        AtomAtomMapping aam=it.next();
        Map<Integer,Integer> mapping=aam.getMappingsIndex();
        if (argumentHandler.isImage()) {
          double stereoScore=smsd.getStereoScore(counter);
          String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
          outputHandler.addImage(query,target,label,mapping);
        }
        outputHandler.printMapping((counter + 1),mapping);
        counter+=1;
      }
    }
 else     if (mcs != null && !argumentHandler.isAllMapping()) {
      Map<Integer,Integer> mcsNumber=smsd.getFirstAtomMapping().getMappingsIndex();
      double stereoScore=smsd.getStereoScore(0);
      outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
      String qrefName=inputHandler.getQRefName();
      String trefName=inputHandler.getTRefName();
      outputHandler.printTopMapping(nAtomsMatched,mcs,mcsNumber,qrefName,trefName);
      if (argumentHandler.isImage()) {
        String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
        outputHandler.makeImage(query,target,label,mcsNumber);
      }
    }
    double tanimotoGraph=smsd.getTanimotoSimilarity();
    double euclidianGraph=smsd.getEuclideanDistance();
    outputHandler.writeResults(query,target,tanimotoGraph,euclidianGraph,nAtomsMatched,executionTime);
    if (mcs != null && argumentHandler.isImage()) {
      String qName=inputHandler.getQueryName();
      String tName=inputHandler.getTargetName() + ""String_Node_Str"" + targetNumber;
      outputHandler.writeImage(qName,tName);
    }
    targetNumber++;
  }
  outputHandler.closeFiles();
}","public static void runSingleQueryMultipleTarget(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IAtomContainer query=inputHandler.getQuery();
  String name=(String)query.getProperty(CDKConstants.TITLE);
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  boolean flag=ConnectivityChecker.isConnected(query);
  if (!flag) {
    System.err.println(""String_Node_Str"" + inputHandler.getQueryName() + ""String_Node_Str"");
    return;
  }
  if (removeHydrogens) {
    query=new AtomContainer(AtomContainerManipulator.removeHydrogens(query));
    query.setProperty(CDKConstants.TITLE,name);
    query.setID(name);
  }
  outputHandler.writeQueryMol(query);
  String out=""String_Node_Str"";
  outputHandler.startAppending(out);
  long startTime=System.currentTimeMillis();
  BaseMapping smsd=null;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  int targetNumber=0;
  IIteratingChemObjectReader reader=inputHandler.getAllTargets();
  String targetType=argumentHandler.getTargetType();
  if (reader == null) {
    throw new IOException(""String_Node_Str"" + targetType);
  }
  while (reader.hasNext()) {
    IAtomContainer target=(IAtomContainer)reader.next();
    flag=ConnectivityChecker.isConnected(target);
    if (!flag) {
      System.err.println(""String_Node_Str"" + target.getProperty(CDKConstants.TITLE) + ""String_Node_Str"");
      continue;
    }
    if (removeHydrogens) {
      target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
    }
    if (target.getProperty(CDKConstants.TITLE) != null) {
      target.setID((String)target.getProperty(CDKConstants.TITLE));
      argumentHandler.setTargetMolOutName(target.getID() == null ? ""String_Node_Str"" : target.getID());
    }
    inputHandler.configure(target,targetType);
    if (argumentHandler.isSubstructureMode()) {
      smsd=runSubstructure(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
    }
 else {
      smsd=run(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
    }
    long endTime=System.currentTimeMillis();
    long executionTime=endTime - startTime;
    outputHandler.writeTargetMol(smsd.getTargetContainer());
    String queryPath=argumentHandler.getQueryFilepath();
    String targetPath=argumentHandler.getTargetFilepath();
    query=query.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getQuery());
    target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
    Map<IAtom,IAtom> mcs=smsd.getFirstAtomMapping().getMappings();
    int nAtomsMatched=(mcs == null) ? 0 : mcs.size();
    double tanimotoSimilarity=smsd.getTanimotoSimilarity();
    if (mcs != null && argumentHandler.isAllMapping()) {
      outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
      int counter=0;
      for (Iterator<AtomAtomMapping> it=smsd.getAllAtomMapping().iterator(); it.hasNext(); ) {
        AtomAtomMapping aam=it.next();
        Map<Integer,Integer> mapping=aam.getMappingsIndex();
        if (argumentHandler.isImage()) {
          double stereoScore=smsd.getStereoScore(counter);
          String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
          outputHandler.addImage(query,target,label,mapping);
        }
        outputHandler.printMapping((counter + 1),mapping);
        counter+=1;
      }
    }
 else     if (mcs != null && !argumentHandler.isAllMapping()) {
      Map<Integer,Integer> mcsNumber=smsd.getFirstAtomMapping().getMappingsIndex();
      double stereoScore=smsd.getStereoScore(0);
      outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
      String qrefName=inputHandler.getQRefName();
      String trefName=inputHandler.getTRefName();
      outputHandler.printTopMapping(nAtomsMatched,mcs,mcsNumber,qrefName,trefName);
      if (argumentHandler.isImage()) {
        String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
        outputHandler.makeImage(query,target,label,mcsNumber);
      }
    }
    double tanimotoGraph=smsd.getTanimotoSimilarity();
    double euclidianGraph=smsd.getEuclideanDistance();
    outputHandler.writeResults(query,target,tanimotoGraph,euclidianGraph,nAtomsMatched,executionTime);
    if (mcs != null && argumentHandler.isImage()) {
      String qName=inputHandler.getQueryName();
      String tName=inputHandler.getTargetName() + ""String_Node_Str"" + targetNumber;
      outputHandler.writeImage(qName,tName);
    }
    targetNumber++;
  }
  outputHandler.closeFiles();
}",0.7329557830538009
39452,"public static void runSingleQuerySingleTarget(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IAtomContainer query=inputHandler.getQuery();
  IAtomContainer target=inputHandler.getTarget();
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  boolean flag=ConnectivityChecker.isConnected(query);
  if (!flag) {
    System.err.println(""String_Node_Str"" + inputHandler.getQueryName() + ""String_Node_Str"");
    return;
  }
  flag=ConnectivityChecker.isConnected(target);
  if (!flag) {
    System.err.println(""String_Node_Str"" + inputHandler.getTargetName() + ""String_Node_Str"");
    return;
  }
  if (removeHydrogens) {
    query=new AtomContainer(AtomContainerManipulator.removeHydrogens(query));
    target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
  }
  if (target.getProperty(CDKConstants.TITLE) != null) {
    String fileName=target.getProperty(CDKConstants.TITLE) == null ? ""String_Node_Str"" : (String)target.getProperty(CDKConstants.TITLE);
    target.setID(fileName);
    argumentHandler.setTargetMolOutName(target.getID());
  }
  if (query.getProperty(CDKConstants.TITLE) != null) {
    String fileName=query.getProperty(CDKConstants.TITLE) == null ? ""String_Node_Str"" : (String)query.getProperty(CDKConstants.TITLE);
    query.setID(fileName);
    argumentHandler.setQueryMolOutName(query.getID());
  }
  String out=""String_Node_Str"";
  if (!argumentHandler.isAppendMode()) {
    outputHandler.startAppending(out);
  }
 else {
    outputHandler.startNew(out);
  }
  CDKHueckelAromaticityDetector.detectAromaticity(query);
  CDKHueckelAromaticityDetector.detectAromaticity(target);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(query);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(target);
  if (argumentHandler.isApplyHAdding()) {
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(query);
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(target);
  }
  long startTime=System.currentTimeMillis();
  BaseMapping smsd;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  if (argumentHandler.isSubstructureMode()) {
    smsd=runSubstructure(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
 else {
    smsd=run(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
  query=query.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getQuery());
  target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
  long endTime=System.currentTimeMillis();
  long executionTime=endTime - startTime;
  outputHandler.writeQueryMol(smsd.getFirstAtomMapping().getQuery());
  outputHandler.writeTargetMol(smsd.getFirstAtomMapping().getTarget());
  String queryPath=argumentHandler.getQueryFilepath();
  String targetPath=argumentHandler.getTargetFilepath();
  Map<IAtom,IAtom> mcs=smsd.getFirstAtomMapping().getMappings();
  int nAtomsMatched=(mcs == null) ? 0 : mcs.size();
  double tanimotoSimilarity=smsd.getTanimotoSimilarity();
  if (mcs != null && argumentHandler.isAllMapping()) {
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    int counter=0;
    for (Iterator<AtomAtomMapping> it=smsd.getAllAtomMapping().iterator(); it.hasNext(); ) {
      AtomAtomMapping aam=it.next();
      Map<Integer,Integer> mapping=aam.getMappingsIndex();
      if (argumentHandler.isImage()) {
        double stereoScore=smsd.getStereoScore(counter);
        String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
        outputHandler.addImage(query,target,label,mapping);
      }
      outputHandler.printMapping((counter + 1),mapping);
      counter+=1;
    }
  }
 else   if (mcs != null && !argumentHandler.isAllMapping()) {
    Map<Integer,Integer> mcsNumber=smsd.getFirstAtomMapping().getMappingsIndex();
    double stereoScore=smsd.getStereoScore(0);
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    String qrefName=inputHandler.getQRefName();
    String trefName=inputHandler.getTRefName();
    outputHandler.printTopMapping(nAtomsMatched,mcs,mcsNumber,qrefName,trefName);
    if (argumentHandler.isImage()) {
      String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
      outputHandler.makeImage(query,target,label,mcsNumber);
    }
  }
  double tanimotoGraph=smsd.getTanimotoSimilarity();
  double euclidianGraph=smsd.getEuclideanDistance();
  outputHandler.writeResults(query,target,tanimotoGraph,euclidianGraph,nAtomsMatched,executionTime);
  if (mcs != null && argumentHandler.isImage()) {
    String qName=inputHandler.getQueryName();
    String tName=inputHandler.getTargetName();
    outputHandler.writeImage(qName,tName);
  }
  if (argumentHandler.shouldOutputSubgraph()) {
    Map<Integer,Integer> mapping=getIndexMapping(smsd.getFirstAtomMapping());
    IAtomContainer subgraph=getSubgraph(target,mapping);
    String outpath=argumentHandler.getOutputFilepath();
    String outtype=argumentHandler.getOutputFiletype();
    outputHandler.writeMol(outtype,subgraph,outpath);
  }
  outputHandler.closeFiles();
}","public static void runSingleQuerySingleTarget(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IAtomContainer query=inputHandler.getQuery();
  IAtomContainer target=inputHandler.getTarget();
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  boolean flag=ConnectivityChecker.isConnected(query);
  if (!flag) {
    System.err.println(""String_Node_Str"" + inputHandler.getQueryName() + ""String_Node_Str"");
    return;
  }
  flag=ConnectivityChecker.isConnected(target);
  if (!flag) {
    System.err.println(""String_Node_Str"" + inputHandler.getTargetName() + ""String_Node_Str"");
    return;
  }
  String fileNameQ=""String_Node_Str"";
  String fileNameT=""String_Node_Str"";
  if (target.getProperty(CDKConstants.TITLE) != null) {
    fileNameQ=target.getProperty(CDKConstants.TITLE) == null ? fileNameT : (String)target.getProperty(CDKConstants.TITLE);
    target.setID(fileNameQ);
    argumentHandler.setTargetMolOutName(target.getID());
  }
  if (query.getProperty(CDKConstants.TITLE) != null) {
    fileNameT=query.getProperty(CDKConstants.TITLE) == null ? fileNameQ : (String)query.getProperty(CDKConstants.TITLE);
    query.setID(fileNameT);
    argumentHandler.setQueryMolOutName(query.getID());
  }
  if (removeHydrogens) {
    query=new AtomContainer(AtomContainerManipulator.removeHydrogens(query));
    query.setID(fileNameQ);
    target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
    target.setID(fileNameT);
  }
  String out=""String_Node_Str"";
  if (!argumentHandler.isAppendMode()) {
    outputHandler.startAppending(out);
  }
 else {
    outputHandler.startNew(out);
  }
  CDKHueckelAromaticityDetector.detectAromaticity(query);
  CDKHueckelAromaticityDetector.detectAromaticity(target);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(query);
  AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(target);
  if (argumentHandler.isApplyHAdding()) {
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(query);
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(target);
  }
  long startTime=System.currentTimeMillis();
  BaseMapping smsd;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  if (argumentHandler.isSubstructureMode()) {
    smsd=runSubstructure(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
 else {
    smsd=run(query,target,argumentHandler.getChemFilter(),matchBonds,matchRings);
  }
  query=query.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getQuery());
  target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
  long endTime=System.currentTimeMillis();
  long executionTime=endTime - startTime;
  outputHandler.writeQueryMol(smsd.getFirstAtomMapping().getQuery());
  outputHandler.writeTargetMol(smsd.getFirstAtomMapping().getTarget());
  String queryPath=argumentHandler.getQueryFilepath();
  String targetPath=argumentHandler.getTargetFilepath();
  Map<IAtom,IAtom> mcs=smsd.getFirstAtomMapping().getMappings();
  int nAtomsMatched=(mcs == null) ? 0 : mcs.size();
  double tanimotoSimilarity=smsd.getTanimotoSimilarity();
  if (mcs != null && argumentHandler.isAllMapping()) {
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    int counter=0;
    for (Iterator<AtomAtomMapping> it=smsd.getAllAtomMapping().iterator(); it.hasNext(); ) {
      AtomAtomMapping aam=it.next();
      Map<Integer,Integer> mapping=aam.getMappingsIndex();
      if (argumentHandler.isImage()) {
        double stereoScore=smsd.getStereoScore(counter);
        String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
        outputHandler.addImage(query,target,label,mapping);
      }
      outputHandler.printMapping((counter + 1),mapping);
      counter+=1;
    }
  }
 else   if (mcs != null && !argumentHandler.isAllMapping()) {
    Map<Integer,Integer> mcsNumber=smsd.getFirstAtomMapping().getMappingsIndex();
    double stereoScore=smsd.getStereoScore(0);
    outputHandler.printHeader(queryPath,targetPath,nAtomsMatched);
    String qrefName=inputHandler.getQRefName();
    String trefName=inputHandler.getTRefName();
    outputHandler.printTopMapping(nAtomsMatched,mcs,mcsNumber,qrefName,trefName);
    if (argumentHandler.isImage()) {
      String label=outputHandler.makeLabel(tanimotoSimilarity,stereoScore);
      outputHandler.makeImage(query,target,label,mcsNumber);
    }
  }
  double tanimotoGraph=smsd.getTanimotoSimilarity();
  double euclidianGraph=smsd.getEuclideanDistance();
  outputHandler.writeResults(query,target,tanimotoGraph,euclidianGraph,nAtomsMatched,executionTime);
  if (mcs != null && argumentHandler.isImage()) {
    String qName=inputHandler.getQueryName();
    String tName=inputHandler.getTargetName();
    outputHandler.writeImage(qName,tName);
  }
  if (argumentHandler.shouldOutputSubgraph()) {
    Map<Integer,Integer> mapping=getIndexMapping(smsd.getFirstAtomMapping());
    IAtomContainer subgraph=getSubgraph(target,mapping);
    String outpath=argumentHandler.getOutputFilepath();
    String outtype=argumentHandler.getOutputFiletype();
    outputHandler.writeMol(outtype,subgraph,outpath);
  }
  outputHandler.closeFiles();
}",0.9467533691452268
39453,"public static void runNMCS(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IIteratingChemObjectReader reader=inputHandler.getAllTargets();
  String targetType=argumentHandler.getTargetType();
  if (reader == null) {
    throw new IOException(""String_Node_Str"" + targetType);
  }
  List<IAtomContainer> atomContainerSet=new ArrayList<IAtomContainer>();
  while (reader.hasNext()) {
    IAtomContainer target=(IAtomContainer)reader.next();
    atomContainerSet.add(target);
  }
  Comparator<IAtomContainer> comparator=new AtomContainerComparator();
  Collections.sort(atomContainerSet,comparator);
  IAtomContainer mcsAtomContainer=null;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  int filter=argumentHandler.getChemFilter();
  List<IAtomContainer> targets=new ArrayList<IAtomContainer>();
  for (  IAtomContainer target : atomContainerSet) {
    boolean flag=ConnectivityChecker.isConnected(target);
    if (!flag) {
      System.err.println(""String_Node_Str"" + target.getProperty(CDKConstants.TITLE) + ""String_Node_Str"");
      continue;
    }
 else {
      if (target.getProperty(CDKConstants.TITLE) != null) {
        target.setID((String)target.getProperty(CDKConstants.TITLE));
        argumentHandler.setTargetMolOutName(target.getID() == null ? ""String_Node_Str"" : target.getID());
      }
    }
    if (removeHydrogens) {
      target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
    }
    if (mcsAtomContainer != null) {
      flag=ConnectivityChecker.isConnected(mcsAtomContainer);
      if (!flag) {
        System.err.println(""String_Node_Str"" + mcsAtomContainer.getProperty(CDKConstants.TITLE) + ""String_Node_Str"");
        return;
      }
 else       if (mcsAtomContainer.getProperty(CDKConstants.TITLE) != null) {
        String mcsFilenName=mcsAtomContainer.getProperty(CDKConstants.TITLE).equals(""String_Node_Str"") ? ""String_Node_Str"" : (String)mcsAtomContainer.getProperty(CDKConstants.TITLE);
        mcsAtomContainer.setID(mcsFilenName);
        argumentHandler.setQueryMolOutName(mcsAtomContainer.getID());
      }
      if (removeHydrogens) {
        mcsAtomContainer=new AtomContainer(AtomContainerManipulator.removeHydrogens(mcsAtomContainer));
      }
    }
    inputHandler.configure(target,targetType);
    if (mcsAtomContainer == null) {
      mcsAtomContainer=target;
      targets.add(target);
    }
 else {
      BaseMapping smsd=run(mcsAtomContainer,target,filter,matchBonds,matchRings);
      target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
      targets.add(target);
      Map<Integer,Integer> mapping=getIndexMapping(smsd.getFirstAtomMapping());
      IAtomContainer subgraph=getSubgraph(target,mapping);
      mcsAtomContainer=new AtomContainer(subgraph);
    }
  }
  inputHandler.configure(mcsAtomContainer,targetType);
  if (argumentHandler.shouldOutputSubgraph()) {
    String outpath=argumentHandler.getOutputFilepath();
    String outtype=argumentHandler.getOutputFiletype();
    outputHandler.writeMol(outtype,mcsAtomContainer,outpath);
  }
  if (mcsAtomContainer != null && argumentHandler.isImage()) {
    List<Map<Integer,Integer>> mappings=new ArrayList<Map<Integer,Integer>>();
    List<IAtomContainer> secondRoundTargets=new ArrayList<IAtomContainer>();
    IChemObjectBuilder builder=DefaultChemObjectBuilder.getInstance();
    for (    IAtomContainer target : targets) {
      BaseMapping smsd=run(mcsAtomContainer,target,filter,matchBonds,matchRings);
      mappings.add(getIndexMapping(smsd.getFirstAtomMapping()));
      secondRoundTargets.add(builder.newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget()));
    }
    String name=inputHandler.getTargetName();
    outputHandler.writeCircleImage(mcsAtomContainer,secondRoundTargets,name,mappings);
  }
}","public static void runNMCS(InputHandler inputHandler,OutputHandler outputHandler,ArgumentHandler argumentHandler) throws IOException, CDKException, CloneNotSupportedException {
  IIteratingChemObjectReader reader=inputHandler.getAllTargets();
  String targetType=argumentHandler.getTargetType();
  if (reader == null) {
    throw new IOException(""String_Node_Str"" + targetType);
  }
  List<IAtomContainer> atomContainerSet=new ArrayList<IAtomContainer>();
  while (reader.hasNext()) {
    IAtomContainer target=(IAtomContainer)reader.next();
    atomContainerSet.add(target);
  }
  Comparator<IAtomContainer> comparator=new AtomContainerComparator();
  Collections.sort(atomContainerSet,comparator);
  IAtomContainer mcsAtomContainer=null;
  boolean matchBonds=argumentHandler.isMatchBondType();
  boolean matchRings=argumentHandler.isMatchRingType();
  boolean removeHydrogens=argumentHandler.isApplyHRemoval();
  int filter=argumentHandler.getChemFilter();
  List<IAtomContainer> targets=new ArrayList<IAtomContainer>();
  for (  IAtomContainer target : atomContainerSet) {
    boolean flag=ConnectivityChecker.isConnected(target);
    String name=(String)target.getProperty(CDKConstants.TITLE);
    if (!flag) {
      System.err.println(""String_Node_Str"" + target.getProperty(CDKConstants.TITLE) + ""String_Node_Str"");
      continue;
    }
 else {
      if (target.getProperty(CDKConstants.TITLE) != null) {
        target.setID((String)target.getProperty(CDKConstants.TITLE));
        argumentHandler.setTargetMolOutName(target.getID() == null ? ""String_Node_Str"" : target.getID());
      }
    }
    if (removeHydrogens) {
      target=new AtomContainer(AtomContainerManipulator.removeHydrogens(target));
      target.setProperty(CDKConstants.TITLE,name);
      target.setID(name);
    }
    if (mcsAtomContainer != null) {
      flag=ConnectivityChecker.isConnected(mcsAtomContainer);
      if (!flag) {
        System.err.println(""String_Node_Str"" + mcsAtomContainer.getProperty(CDKConstants.TITLE) + ""String_Node_Str"");
        return;
      }
 else       if (mcsAtomContainer.getProperty(CDKConstants.TITLE) != null) {
        String mcsFilenName=mcsAtomContainer.getProperty(CDKConstants.TITLE).equals(""String_Node_Str"") ? ""String_Node_Str"" : (String)mcsAtomContainer.getProperty(CDKConstants.TITLE);
        mcsAtomContainer.setID(mcsFilenName);
        argumentHandler.setQueryMolOutName(mcsAtomContainer.getID());
      }
      if (removeHydrogens) {
        mcsAtomContainer=new AtomContainer(AtomContainerManipulator.removeHydrogens(mcsAtomContainer));
      }
    }
    inputHandler.configure(target,targetType);
    if (mcsAtomContainer == null) {
      mcsAtomContainer=target;
      targets.add(target);
    }
 else {
      BaseMapping smsd=run(mcsAtomContainer,target,filter,matchBonds,matchRings);
      target=target.getBuilder().newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget());
      targets.add(target);
      Map<Integer,Integer> mapping=getIndexMapping(smsd.getFirstAtomMapping());
      IAtomContainer subgraph=getSubgraph(target,mapping);
      mcsAtomContainer=new AtomContainer(subgraph);
    }
  }
  inputHandler.configure(mcsAtomContainer,targetType);
  if (argumentHandler.shouldOutputSubgraph()) {
    String outpath=argumentHandler.getOutputFilepath();
    String outtype=argumentHandler.getOutputFiletype();
    outputHandler.writeMol(outtype,mcsAtomContainer,outpath);
  }
  if (mcsAtomContainer != null && argumentHandler.isImage()) {
    List<Map<Integer,Integer>> mappings=new ArrayList<Map<Integer,Integer>>();
    List<IAtomContainer> secondRoundTargets=new ArrayList<IAtomContainer>();
    IChemObjectBuilder builder=DefaultChemObjectBuilder.getInstance();
    for (    IAtomContainer target : targets) {
      BaseMapping smsd=run(mcsAtomContainer,target,filter,matchBonds,matchRings);
      mappings.add(getIndexMapping(smsd.getFirstAtomMapping()));
      secondRoundTargets.add(builder.newInstance(IAtomContainer.class,smsd.getFirstAtomMapping().getTarget()));
    }
    String name=inputHandler.getTargetName();
    outputHandler.writeCircleImage(mcsAtomContainer,secondRoundTargets,name,mappings);
  }
}",0.8296188040433565
39454,"private boolean hasMap(Map<Integer,Integer> maps,List<Map<Integer,Integer>> mapGlobal){
  for (  Map<Integer,Integer> test : mapGlobal) {
    if (test.equals(maps)) {
      return true;
    }
  }
  return false;
}","private boolean hasMap(Map<Integer,Integer> maps,List<Map<Integer,Integer>> mapGlobal){
  for (  Map<Integer,Integer> test : mapGlobal) {
    if (test.size() > maps.size()) {
      return true;
    }
    if (test.equals(maps)) {
      return true;
    }
  }
  return false;
}",0.8729508196721312
39455,"@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(ActiveRegions.DATABASE_CREATE_ACTIVEREGIONS);
  db.execSQL(ActiveTimes.DATABASE_CREATE_ACTIVETIMES);
  db.execSQL(Contexts.DATABASE_CREATE_CONTEXTS);
  db.execSQL(ContextTimes.DATABASE_CREATE_CONTEXTTIMES);
  db.execSQL(ContextsTasks.DATABASE_CREATE_TASKCONTEXTS);
  db.execSQL(Tasks.DATABASE_CREATE_TASKS);
}","@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(ActiveRegions.DATABASE_CREATE_ACTIVEREGIONS);
  db.execSQL(ActiveTimes.DATABASE_CREATE_ACTIVETIMES);
  db.execSQL(ContextRegions.DATABASE_CREATE_CONTEXTREGIONS);
  db.execSQL(Contexts.DATABASE_CREATE_CONTEXTS);
  db.execSQL(ContextTimes.DATABASE_CREATE_CONTEXTTIMES);
  db.execSQL(Families.DATABASE_CREATE_FAMILIES);
  db.execSQL(ContextsTasks.DATABASE_CREATE_TASKCONTEXTS);
  db.execSQL(Tasks.DATABASE_CREATE_TASKS);
}",0.8714953271028038
39456,"public static void main(String[] args) throws Exception {
  if (args.length != 2) {
    System.err.println(""String_Node_Str"" + ProtographClient.class.getSimpleName() + ""String_Node_Str"");
    return;
  }
  String host=args[0];
  int port=Integer.parseInt(args[1]);
  ProtographClient client=new ProtographClient(host,port);
  ConsoleReader reader=new ConsoleReader();
  for (; ; ) {
    String line=reader.readLine();
    if (line == null) {
      break;
    }
    List<JSONObject> results=client.exec(line.trim() + ""String_Node_Str"");
    if (null == results) {
      log.info(""String_Node_Str"");
    }
 else {
      int c=0;
      for (      JSONObject result : results) {
        c++;
        log.info(c + ""String_Node_Str"" + result.toString(4));
      }
    }
    if (line.toLowerCase().equals(""String_Node_Str"")) {
      client.disconnect();
      break;
    }
  }
  client.disconnect();
}","public static void main(String[] args) throws Exception {
  if (args.length != 2) {
    System.err.println(""String_Node_Str"" + ProtographClient.class.getSimpleName() + ""String_Node_Str"");
    return;
  }
  String host=args[0];
  int port=Integer.parseInt(args[1]);
  ProtographClient client=new ProtographClient(host,port);
  ConsoleReader reader=new ConsoleReader();
  for (; ; ) {
    String line=reader.readLine();
    if (line == null) {
      break;
    }
    List<JSONObject> results=client.exec(line.trim() + ""String_Node_Str"");
    if (null == results) {
      log.info(""String_Node_Str"");
    }
 else {
      if (results.size() == 0) {
        log.info(""String_Node_Str"");
      }
 else {
        int c=0;
        for (        JSONObject result : results) {
          c++;
          log.info(c + ""String_Node_Str"" + result.toString(4));
        }
      }
    }
    if (line.toLowerCase().equals(""String_Node_Str"")) {
      client.disconnect();
      break;
    }
  }
  client.disconnect();
}",0.9271383315733897
39457,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e){
  String channelId=""String_Node_Str"" + e.getChannel().getId();
  String request=(String)e.getMessage();
  log.info(channelId + ""String_Node_Str"" + request);
  if (request.charAt(0) == '!' || request.charAt(0) == '#') {
    log.info(""String_Node_Str"" + request);
    ProtographClientEventHandler handler=client.getEventHandler();
    String[] eventParts=request.split(""String_Node_Str"");
    boolean isMessageEvent=(eventParts[0] == ""String_Node_Str"" ? true : false);
    String channelName=eventParts[1];
    String message=request.substring(request.indexOf(""String_Node_Str"" + channelName) + (channelName.length() + 1)).trim();
    if (null != handler) {
      if (isMessageEvent) {
        handler.onMessageEvent(channelName,message);
      }
 else {
        handler.onStatusEvent(request.substring(2).trim());
      }
    }
 else {
      if (isMessageEvent) {
        defaultEventHandler.onMessageEvent(channelName,message);
      }
 else {
        defaultEventHandler.onStatusEvent(request.substring(2).trim());
      }
    }
  }
 else   if (request.charAt(0) == '-') {
    log.info(""String_Node_Str"" + request);
    if (request.startsWith(""String_Node_Str"")) {
      log.info(""String_Node_Str"" + request);
    }
 else {
      if (request.startsWith(GraphServerProtocol.R_OK) || request.startsWith(GraphServerProtocol.R_BATCH_OK)) {
        currentResultHandler.onComplete();
      }
 else {
        currentResultHandler.onError(request);
        currentResultHandler.onComplete();
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + request);
    currentResultHandler.onResult(request);
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e){
  String channelId=""String_Node_Str"" + e.getChannel().getId();
  String request=(String)e.getMessage();
  if (request.charAt(0) == '!' || request.charAt(0) == '#') {
    ProtographClientEventHandler handler=client.getEventHandler();
    String[] eventParts=request.split(""String_Node_Str"");
    boolean isMessageEvent=(eventParts[0] == ""String_Node_Str"" ? true : false);
    String channelName=eventParts[1];
    String message=request.substring(request.indexOf(""String_Node_Str"" + channelName) + (channelName.length() + 1)).trim();
    if (null != handler) {
      if (isMessageEvent) {
        handler.onMessageEvent(channelName,message);
      }
 else {
        handler.onStatusEvent(request.substring(2).trim());
      }
    }
 else {
      if (isMessageEvent) {
        defaultEventHandler.onMessageEvent(channelName,message);
      }
 else {
        defaultEventHandler.onStatusEvent(request.substring(2).trim());
      }
    }
  }
 else   if (request.charAt(0) == '-') {
    if (request.startsWith(""String_Node_Str"")) {
    }
 else {
      if (request.startsWith(GraphServerProtocol.R_OK) || request.startsWith(GraphServerProtocol.R_BATCH_OK)) {
        currentResultHandler.onComplete();
      }
 else {
        currentResultHandler.onError(request);
        currentResultHandler.onComplete();
      }
    }
  }
 else {
    currentResultHandler.onResult(request);
  }
}",0.8953229398663697
39458,"public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=pipeline();
  pipeline.addLast(""String_Node_Str"",new DelimiterBasedFrameDecoder(8192,Delimiters.lineDelimiter()));
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new StringEncoder());
  pipeline.addLast(""String_Node_Str"",client.getProtographClientHandler());
  return pipeline;
}","public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=pipeline();
  pipeline.addLast(""String_Node_Str"",new DelimiterBasedFrameDecoder(65535 * 2,Delimiters.lineDelimiter()));
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new StringEncoder());
  pipeline.addLast(""String_Node_Str"",client.getProtographClientHandler());
  return pipeline;
}",0.9866989117291416
39459,"public void onError(String err){
  super.onError(err);
  log.info(""String_Node_Str"" + err);
  this.err=err;
  success=false;
}","public void onError(String err){
  super.onError(err);
  this.err=err;
  success=false;
}",0.827906976744186
39460,"public void onComplete(){
  super.onComplete();
  log.info(""String_Node_Str"");
}","public void onComplete(){
  super.onComplete();
}",0.7596899224806202
39461,"public void onResult(String result){
  log.info(""String_Node_Str"" + result);
  results.add(result);
}","public void onResult(String result){
  results.add(result);
}",0.7530864197530864
39462,"protected String execute(Channel responseChannel,String clientId,ConcurrentHashMap<String,String> clientState,String request,String cmd,String[] args) throws Exception {
  StringBuffer rsb=new StringBuffer();
  if (null == clientState.get(GraphServerHandler.ST_DB)) {
    rsb.append(GraphServerProtocol.R_ERR);
    rsb.append(""String_Node_Str"");
    return rsb.toString();
  }
  Graph gr=graphRef.get();
  if (null == gr) {
    GraphCommand killCmd=new GraphCommand();
    killCmd.poisonPill=true;
    graphCommandQueue.clear();
    graphCommandQueue.put(killCmd);
    return GraphServerProtocol.R_ERR + GraphServerProtocol.SPACE + ""String_Node_Str"";
  }
  if (request.indexOf(""String_Node_Str"") != -1 && request.indexOf(""String_Node_Str"") != -1) {
    String query=request.substring(request.indexOf(""String_Node_Str"") + 2,request.indexOf(""String_Node_Str""));
    String prefix=request.substring(0,request.indexOf(""String_Node_Str"")).trim();
    String suffix=request.substring(request.indexOf(""String_Node_Str"") + 2).trim();
    log.info(""String_Node_Str"" + prefix + ""String_Node_Str""+ query+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
    List<JSONObject> selectorResults=gr.queryGraphIndex(query);
    for (    JSONObject selectorResult : selectorResults) {
      String batchRequestKey=selectorResult.getString(Graph.KEY_FIELD);
      String batchRequest=prefix + ""String_Node_Str"" + batchRequestKey+ ""String_Node_Str""+ suffix;
      String batchCmd;
      String[] batchArgs;
      if (batchRequest.indexOf(GraphServerProtocol.SPACE) != -1) {
        batchCmd=batchRequest.substring(0,batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().toLowerCase();
        batchArgs=batchRequest.substring(batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().split(GraphServerProtocol.SPACE);
      }
 else {
        batchCmd=batchRequest.trim().toLowerCase();
        batchArgs=new String[0];
      }
      String batchCmdResponse=execute(responseChannel,clientId,clientState,batchRequest,batchCmd,batchArgs);
      String responseParts[]=batchCmdResponse.split(GraphServerProtocol.NL);
      for (      String responsePart : responseParts) {
        if (responsePart.charAt(0) != '-') {
          responseChannel.write(responsePart.trim() + GraphServerProtocol.NL);
        }
      }
    }
    return GraphServerProtocol.R_BATCH_OK;
  }
  if (cmd.equals(GraphServerProtocol.CMD_CVERT)) {
    String key=args[0];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + key) + (key.length() + 1)).trim();
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      gr.addVertex(key,jo);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CEDGE)) {
    String key=args[0];
    String vFromKey=args[1];
    String vToKey=args[2];
    String rel=args[3];
    double weight=1.0;
    String json;
    if (args[4].charAt(0) == '{') {
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + rel) + (rel.length() + 1)).trim();
    }
 else {
      weight=Double.parseDouble(args[4]);
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[4]) + (args[4].length() + 1)).trim();
    }
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      jo.put(Graph.EDGE_SOURCE_FIELD,vFromKey);
      jo.put(Graph.EDGE_TARGET_FIELD,vToKey);
      jo.put(Graph.WEIGHT_FIELD,weight);
      jo.put(Graph.RELATION_FIELD,rel);
      gr.addEdge(key,jo,vFromKey,vToKey,rel,weight);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DEL)) {
    String key=args[0];
    JSONObject obj=gr.getGraphObject(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        gr.removeVertex(jv);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else       if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        gr.removeEdge(je);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.SPACE);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EXISTS)) {
    String key=args[0];
    rsb.append(gr.exists(key) + ""String_Node_Str"" + key);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GET)) {
    String key=args[0];
    JSONObject jo=gr.getGraphObject(key);
    if (jo == null) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(prepareResult(jo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_Q)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
    List<JSONObject> results=gr.queryGraphIndex(q);
    JSONArray ja=new JSONArray();
    for (    JSONObject jo : results) {
      ja.put(jo);
    }
    JSONObject res=new JSONObject();
    res.put(""String_Node_Str"",ja);
    rsb.append(prepareResult(res));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_QP)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    double radius=Double.POSITIVE_INFINITY;
    if (args.length == 3) {
      radius=Double.parseDouble(args[2]);
    }
    JSONObject result=gr.getShortestPath(vFromKey,vToKey,radius);
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(prepareResult(result));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SET)) {
    String key=args[0];
    String attr=args[1];
    String val;
    if (args.length == 2) {
      val=null;
    }
 else {
      val=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[1]) + (args[1].length() + 1)).trim();
    }
    if (attr.startsWith(""String_Node_Str"") && !attr.equals(Graph.WEIGHT_FIELD)) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      JSONObject obj=gr.getGraphObject(key);
      if (null == obj) {
        rsb.append(GraphServerProtocol.R_NOT_FOUND);
      }
 else {
        String _type=obj.getString(Graph.TYPE_FIELD);
        if (_type.equals(Graph.VERTEX_TYPE)) {
          JSONVertex jv=gr.getVertex(key);
          if (null != val) {
            jv.put(attr,val);
          }
 else {
            jv.remove(attr);
          }
          gr.indexObject(key,_type,jv);
          rsb.append(GraphServerProtocol.R_OK);
        }
 else         if (_type.equals(Graph.EDGE_TYPE)) {
          JSONEdge je=gr.getEdge(key);
          if (null != val) {
            je.put(attr,val);
          }
 else {
            je.remove(attr);
          }
          if (attr.equals(Graph.WEIGHT_FIELD)) {
            gr.setEdgeWeight(je,Double.parseDouble(val));
          }
          gr.indexObject(key,_type,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
          rsb.append(GraphServerProtocol.R_OK);
        }
 else {
          rsb.append(GraphServerProtocol.R_ERR);
          rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
        }
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_INCW)) {
    String key=args[0];
    double w_amt=Double.parseDouble(args[1]);
    JSONEdge je=gr.getEdge(key);
    if (null == je) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      double weight=gr.getEdgeWeight(je);
      weight+=w_amt;
      gr.setEdgeWeight(je,weight);
      je.put(Graph.WEIGHT_FIELD,""String_Node_Str"" + weight);
      gr.indexObject(key,Graph.EDGE_TYPE,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPY)) {
    String key=args[0];
    JSONObject obj=gr.getGraphObject(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        if (null == je) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(je.asClientJSONObject().toString(4) + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else       if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        if (null == jv) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(jv.toString(4) + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KSPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    int k=Integer.parseInt(args[2]);
    int maxHops=0;
    if (args.length > 3) {
      maxHops=Integer.parseInt(args[3]);
    }
    JSONObject result=gr.getKShortestPaths(vFromKey,vToKey,k,maxHops);
    rsb.append(prepareResult(result));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_HC)) {
    List<JSONVertex> results=gr.getHamiltonianCycle();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray cycle=new JSONArray();
      for (      JSONVertex jo : results) {
        cycle.put(jo);
      }
      res.put(""String_Node_Str"",cycle);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EC)) {
    List<JSONVertex> results=gr.getEulerianCircuit();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray circuit=new JSONArray();
      for (      JSONVertex jo : results) {
        circuit.put(jo);
      }
      res.put(""String_Node_Str"",circuit);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EKMF)) {
    String vSourceKey=args[0];
    String vSinkKey=args[1];
    JSONObject flowResult=gr.getEKMF(vSourceKey,vSinkKey);
    if (null == flowResult) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(flowResult.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CN)) {
    JSONObject result=new JSONObject();
    result.put(""String_Node_Str"",gr.getChromaticNumber());
    rsb.append(result.toString());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KMST)) {
    JSONObject result=gr.getKMST();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCG)) {
    JSONObject result=gr.getGreedyVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VC2A)) {
    JSONObject result=gr.get2ApproximationVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETV)) {
    String key=args[0];
    JSONVertex v=gr.getVertex(key);
    if (null == v) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      JSONObject result=gr.getConnectedSetByVertex(v);
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETS)) {
    JSONObject result=gr.getConnectedSets();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ISCON)) {
    rsb.append(""String_Node_Str"" + gr.isConnected());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_UPATHEX)) {
    JSONVertex vFrom=gr.getVertex(args[0]);
    JSONVertex vTo=gr.getVertex(args[1]);
    if (null == vFrom || null == vTo) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(""String_Node_Str"" + gr.pathExists(vFrom,vTo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FAMC)) {
    JSONObject result=gr.getAllMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FBMC)) {
    JSONObject result=gr.getBiggestMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ASPV)) {
    JSONObject result=gr.getAllShortestPathsFrom(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GCYC)) {
    JSONObject result=gr.getGraphCycles();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCYC)) {
    JSONObject result=gr.getGraphCyclesContainingVertex(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_QSIM)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
    List<JSONObject> results=gr.querySimIndex(q);
    JSONArray ja=new JSONArray();
    for (    JSONObject jo : results) {
      ja.put(jo);
    }
    JSONObject res=new JSONObject();
    res.put(""String_Node_Str"",ja);
    rsb.append(prepareResult(res));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DEFINE_UDF)) {
    String udfKey=args[0];
    String udfType=args[1];
    String udfURL=args[2];
    gr.defineUDF(udfKey,udfType,udfURL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPROC)) {
    String objKey=args[0];
    String udfKey=args[1];
    String processName;
    if (args.length == 3) {
      processName=args[2];
    }
 else {
      processName=objKey + ""String_Node_Str"" + udfKey;
    }
    gr.startProcess(objKey,udfKey,processName);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EMIT)) {
    String key=args[0];
    String processName=args[1];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + processName) + (processName.length() + 1)).trim();
    JSONObject jo=null;
    jo=new JSONObject(json);
    gr.emit(key,processName,jo);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CCHAN)) {
    String channelName=args[0];
    String pid=gr.createEndpointChannel(channelName);
    if (null == pid) {
      rsb.append(GraphServerProtocol.R_ALREADY_EXIST);
    }
 else {
      rsb.append(pid);
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_PUBLISH)) {
    String channelName=args[0];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + channelName) + (channelName.length() + 1)).trim();
    gr.publishToEndpointByName(channelName,new JSONObject(json));
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SUBSCRIBE)) {
    String channelName=args[0];
    gr.subscribeToEndpointByName(channelName,getInboundChannelProcess(clientId).getChannel());
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_UNSUBSCRIBE)) {
    String channelName=args[0];
    gr.unsubscribeToEndpointByName(channelName,getInboundChannelProcess(clientId).getChannel());
    rsb.append(GraphServerProtocol.R_OK);
  }
  return rsb.toString();
}","protected String execute(Channel responseChannel,String clientId,ConcurrentHashMap<String,String> clientState,String request,String cmd,String[] args) throws Exception {
  StringBuffer rsb=new StringBuffer();
  if (null == clientState.get(GraphServerHandler.ST_DB)) {
    rsb.append(GraphServerProtocol.R_ERR);
    rsb.append(""String_Node_Str"");
    return rsb.toString();
  }
  Graph gr=graphRef.get();
  if (null == gr) {
    GraphCommand killCmd=new GraphCommand();
    killCmd.poisonPill=true;
    graphCommandQueue.clear();
    graphCommandQueue.put(killCmd);
    return GraphServerProtocol.R_ERR + GraphServerProtocol.SPACE + ""String_Node_Str"";
  }
  if (request.indexOf(""String_Node_Str"") != -1 && request.indexOf(""String_Node_Str"") != -1) {
    String query=request.substring(request.indexOf(""String_Node_Str"") + 2,request.indexOf(""String_Node_Str""));
    String prefix=request.substring(0,request.indexOf(""String_Node_Str"")).trim();
    String suffix=request.substring(request.indexOf(""String_Node_Str"") + 2).trim();
    log.info(""String_Node_Str"" + prefix + ""String_Node_Str""+ query+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
    List<JSONObject> selectorResults=gr.queryGraphIndex(query);
    for (    JSONObject selectorResult : selectorResults) {
      String batchRequestKey=selectorResult.getString(Graph.KEY_FIELD);
      String batchRequest=prefix + ""String_Node_Str"" + batchRequestKey+ ""String_Node_Str""+ suffix;
      String batchCmd;
      String[] batchArgs;
      if (batchRequest.indexOf(GraphServerProtocol.SPACE) != -1) {
        batchCmd=batchRequest.substring(0,batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().toLowerCase();
        batchArgs=batchRequest.substring(batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().split(GraphServerProtocol.SPACE);
      }
 else {
        batchCmd=batchRequest.trim().toLowerCase();
        batchArgs=new String[0];
      }
      String batchCmdResponse=execute(responseChannel,clientId,clientState,batchRequest,batchCmd,batchArgs);
      String responseParts[]=batchCmdResponse.split(GraphServerProtocol.NL);
      for (      String responsePart : responseParts) {
        if (responsePart.charAt(0) != '-') {
          responseChannel.write(responsePart.trim() + GraphServerProtocol.NL);
        }
      }
    }
    return GraphServerProtocol.R_BATCH_OK;
  }
  if (cmd.equals(GraphServerProtocol.CMD_CVERT)) {
    String key=args[0];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + key) + (key.length() + 1)).trim();
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      gr.addVertex(key,jo);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CEDGE)) {
    String key=args[0];
    String vFromKey=args[1];
    String vToKey=args[2];
    String rel=args[3];
    double weight=1.0;
    String json;
    if (args[4].charAt(0) == '{') {
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + rel) + (rel.length() + 1)).trim();
    }
 else {
      weight=Double.parseDouble(args[4]);
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[4]) + (args[4].length() + 1)).trim();
    }
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      jo.put(Graph.EDGE_SOURCE_FIELD,vFromKey);
      jo.put(Graph.EDGE_TARGET_FIELD,vToKey);
      jo.put(Graph.WEIGHT_FIELD,weight);
      jo.put(Graph.RELATION_FIELD,rel);
      gr.addEdge(key,jo,vFromKey,vToKey,rel,weight);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DEL)) {
    String key=args[0];
    JSONObject obj=gr.getGraphObject(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        gr.removeVertex(jv);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else       if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        gr.removeEdge(je);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.SPACE);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EXISTS)) {
    String key=args[0];
    rsb.append(gr.exists(key) + ""String_Node_Str"" + key);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GET)) {
    String key=args[0];
    JSONObject jo=gr.getGraphObject(key);
    if (jo == null) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(prepareResult(jo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_Q)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
    List<JSONObject> results=gr.queryGraphIndex(q);
    JSONArray ja=new JSONArray();
    for (    JSONObject jo : results) {
      ja.put(jo);
    }
    JSONObject res=new JSONObject();
    res.put(""String_Node_Str"",ja);
    rsb.append(prepareResult(res));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_QP)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    double radius=Double.POSITIVE_INFINITY;
    if (args.length == 3) {
      radius=Double.parseDouble(args[2]);
    }
    JSONObject result=gr.getShortestPath(vFromKey,vToKey,radius);
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(prepareResult(result));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SET)) {
    String key=args[0];
    String attr=args[1];
    String val;
    if (args.length == 2) {
      val=null;
    }
 else {
      val=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[1]) + (args[1].length() + 1)).trim();
    }
    if (attr.startsWith(""String_Node_Str"") && !attr.equals(Graph.WEIGHT_FIELD)) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      JSONObject obj=gr.getGraphObject(key);
      if (null == obj) {
        rsb.append(GraphServerProtocol.R_NOT_FOUND);
      }
 else {
        String _type=obj.getString(Graph.TYPE_FIELD);
        if (_type.equals(Graph.VERTEX_TYPE)) {
          JSONVertex jv=gr.getVertex(key);
          if (null != val) {
            jv.put(attr,val);
          }
 else {
            jv.remove(attr);
          }
          gr.indexObject(key,_type,jv);
          rsb.append(GraphServerProtocol.R_OK);
        }
 else         if (_type.equals(Graph.EDGE_TYPE)) {
          JSONEdge je=gr.getEdge(key);
          if (null != val) {
            je.put(attr,val);
          }
 else {
            je.remove(attr);
          }
          if (attr.equals(Graph.WEIGHT_FIELD)) {
            gr.setEdgeWeight(je,Double.parseDouble(val));
          }
          gr.indexObject(key,_type,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
          rsb.append(GraphServerProtocol.R_OK);
        }
 else {
          rsb.append(GraphServerProtocol.R_ERR);
          rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
        }
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_INCW)) {
    String key=args[0];
    double w_amt=Double.parseDouble(args[1]);
    JSONEdge je=gr.getEdge(key);
    if (null == je) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      double weight=gr.getEdgeWeight(je);
      weight+=w_amt;
      gr.setEdgeWeight(je,weight);
      je.put(Graph.WEIGHT_FIELD,""String_Node_Str"" + weight);
      gr.indexObject(key,Graph.EDGE_TYPE,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPY)) {
    String key=args[0];
    JSONObject obj=gr.getGraphObject(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        if (null == je) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(je.asClientJSONObject().toString() + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else       if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        if (null == jv) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(jv.toString() + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KSPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    int k=Integer.parseInt(args[2]);
    int maxHops=0;
    if (args.length > 3) {
      maxHops=Integer.parseInt(args[3]);
    }
    JSONObject result=gr.getKShortestPaths(vFromKey,vToKey,k,maxHops);
    rsb.append(prepareResult(result));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_HC)) {
    List<JSONVertex> results=gr.getHamiltonianCycle();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray cycle=new JSONArray();
      for (      JSONVertex jo : results) {
        cycle.put(jo);
      }
      res.put(""String_Node_Str"",cycle);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EC)) {
    List<JSONVertex> results=gr.getEulerianCircuit();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray circuit=new JSONArray();
      for (      JSONVertex jo : results) {
        circuit.put(jo);
      }
      res.put(""String_Node_Str"",circuit);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EKMF)) {
    String vSourceKey=args[0];
    String vSinkKey=args[1];
    JSONObject flowResult=gr.getEKMF(vSourceKey,vSinkKey);
    if (null == flowResult) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(flowResult.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CN)) {
    JSONObject result=new JSONObject();
    result.put(""String_Node_Str"",gr.getChromaticNumber());
    rsb.append(result.toString());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KMST)) {
    JSONObject result=gr.getKMST();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCG)) {
    JSONObject result=gr.getGreedyVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VC2A)) {
    JSONObject result=gr.get2ApproximationVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETV)) {
    String key=args[0];
    JSONVertex v=gr.getVertex(key);
    if (null == v) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      JSONObject result=gr.getConnectedSetByVertex(v);
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETS)) {
    JSONObject result=gr.getConnectedSets();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ISCON)) {
    rsb.append(""String_Node_Str"" + gr.isConnected());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_UPATHEX)) {
    JSONVertex vFrom=gr.getVertex(args[0]);
    JSONVertex vTo=gr.getVertex(args[1]);
    if (null == vFrom || null == vTo) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(""String_Node_Str"" + gr.pathExists(vFrom,vTo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FAMC)) {
    JSONObject result=gr.getAllMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FBMC)) {
    JSONObject result=gr.getBiggestMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ASPV)) {
    JSONObject result=gr.getAllShortestPathsFrom(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GCYC)) {
    JSONObject result=gr.getGraphCycles();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCYC)) {
    JSONObject result=gr.getGraphCyclesContainingVertex(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_QSIM)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
    List<JSONObject> results=gr.querySimIndex(q);
    JSONArray ja=new JSONArray();
    for (    JSONObject jo : results) {
      ja.put(jo);
    }
    JSONObject res=new JSONObject();
    res.put(""String_Node_Str"",ja);
    rsb.append(prepareResult(res));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DEFINE_UDF)) {
    String udfKey=args[0];
    String udfType=args[1];
    String udfURL=args[2];
    gr.defineUDF(udfKey,udfType,udfURL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPROC)) {
    String objKey=args[0];
    String udfKey=args[1];
    String processName;
    if (args.length == 3) {
      processName=args[2];
    }
 else {
      processName=objKey + ""String_Node_Str"" + udfKey;
    }
    gr.startProcess(objKey,udfKey,processName);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EMIT)) {
    String key=args[0];
    String processName=args[1];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + processName) + (processName.length() + 1)).trim();
    JSONObject jo=null;
    jo=new JSONObject(json);
    gr.emit(key,processName,jo);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CCHAN)) {
    String channelName=args[0];
    String pid=gr.createEndpointChannel(channelName);
    if (null == pid) {
      rsb.append(GraphServerProtocol.R_ALREADY_EXIST);
    }
 else {
      rsb.append(pid);
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_PUBLISH)) {
    String channelName=args[0];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + channelName) + (channelName.length() + 1)).trim();
    gr.publishToEndpointByName(channelName,new JSONObject(json));
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SUBSCRIBE)) {
    String channelName=args[0];
    gr.subscribeToEndpointByName(channelName,getInboundChannelProcess(clientId).getChannel());
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_UNSUBSCRIBE)) {
    String channelName=args[0];
    gr.unsubscribeToEndpointByName(channelName,getInboundChannelProcess(clientId).getChannel());
    rsb.append(GraphServerProtocol.R_OK);
  }
  return rsb.toString();
}",0.9999467971908916
39463,"public String executeRequest(Channel responseChannel,String clientId,ConcurrentHashMap<String,String> clientState,String request) throws Exception {
  StringBuffer rsb=new StringBuffer();
  String cmd;
  String[] args;
  if (request.indexOf(GraphServerProtocol.SPACE) != -1) {
    cmd=request.substring(0,request.indexOf(GraphServerProtocol.SPACE)).trim().toLowerCase();
    args=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim().split(GraphServerProtocol.SPACE);
  }
 else {
    cmd=request.trim().toLowerCase();
    args=new String[0];
  }
  if (cmd.equals(GraphServerProtocol.CMD_USE)) {
    if (null == nameGraphMap.get(args[0])) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      if (null != clientState.get(ST_DB))       clientState.remove(ST_DB);
      clientState.put(ST_DB,args[0]);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CREATE)) {
    if (null != nameGraphMap.get(args[0])) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      Graph newGraph=new Graph(args[0]);
      nameGraphMap.put(args[0],newGraph);
      WeakReference<Graph> graphRef=new WeakReference<Graph>(newGraph);
      GraphCommandExecutor graphCommandExecutor=new GraphCommandExecutor(args[0],graphRef,inboundChannelMap);
      graphCommandExecutorService.execute(graphCommandExecutor);
      graphCommandExecutorMap.put(args[0],graphCommandExecutor);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DROP)) {
    if (null == nameGraphMap.get(args[0])) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      nameGraphMap.remove(args[0]);
      graphCommandExecutorMap.remove(args[0]);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_NAMECON)) {
    clientState.put(ST_NAMECON,args[0] + ""String_Node_Str"" + clientId);
    rsb.append(clientState.get(ST_NAMECON));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CLSTATE)) {
    JSONObject result=new JSONObject(clientState);
    rsb.append(result.toString(4));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SSTAT)) {
    JSONObject result=new JSONObject();
    JSONObject names=new JSONObject();
    names.put(""String_Node_Str"",Graph.TYPE_FIELD);
    names.put(""String_Node_Str"",Graph.KEY_FIELD);
    names.put(""String_Node_Str"",Graph.WEIGHT_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_SOURCE_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_TARGET_FIELD);
    names.put(""String_Node_Str"",Graph.RELATION_FIELD);
    names.put(""String_Node_Str"",Graph.VERTEX_TYPE);
    names.put(""String_Node_Str"",Graph.EDGE_TYPE);
    result.put(""String_Node_Str"",names);
    rsb.append(result.toString(4));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_LISTG)) {
    for (    String name : nameGraphMap.keySet()) {
      rsb.append(name);
      rsb.append(GraphServerProtocol.NL);
    }
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GSTAT)) {
    Graph gr0=nameGraphMap.get(args[0]);
    if (null == gr0) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject result=new JSONObject();
      result.put(""String_Node_Str"",gr0.numVertices());
      result.put(""String_Node_Str"",gr0.numEdges());
      rsb.append(result.toString(4));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else {
    GraphCommand graphCommand=new GraphCommand();
    graphCommand.responseChannel=responseChannel;
    graphCommand.clientId=clientId;
    graphCommand.clientState=clientState;
    graphCommand.request=request;
    graphCommand.cmd=cmd;
    graphCommand.args=args;
    graphCommand.poisonPill=false;
    graphCommandExecutorMap.get(clientState.get(GraphServerHandler.ST_DB)).queue(graphCommand);
    return null;
  }
  if (rsb.toString().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + cmd);
    rsb.append(GraphServerProtocol.R_UNK);
    rsb.append(GraphServerProtocol.SPACE);
    rsb.append(cmd);
  }
  rsb.append(GraphServerProtocol.NL);
  return rsb.toString();
}","public String executeRequest(Channel responseChannel,String clientId,ConcurrentHashMap<String,String> clientState,String request) throws Exception {
  StringBuffer rsb=new StringBuffer();
  String cmd;
  String[] args;
  if (request.indexOf(GraphServerProtocol.SPACE) != -1) {
    cmd=request.substring(0,request.indexOf(GraphServerProtocol.SPACE)).trim().toLowerCase();
    args=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim().split(GraphServerProtocol.SPACE);
  }
 else {
    cmd=request.trim().toLowerCase();
    args=new String[0];
  }
  if (cmd.equals(GraphServerProtocol.CMD_USE)) {
    if (null == nameGraphMap.get(args[0])) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      if (null != clientState.get(ST_DB))       clientState.remove(ST_DB);
      clientState.put(ST_DB,args[0]);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CREATE)) {
    if (null != nameGraphMap.get(args[0])) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      Graph newGraph=new Graph(args[0]);
      nameGraphMap.put(args[0],newGraph);
      WeakReference<Graph> graphRef=new WeakReference<Graph>(newGraph);
      GraphCommandExecutor graphCommandExecutor=new GraphCommandExecutor(args[0],graphRef,inboundChannelMap);
      graphCommandExecutorService.execute(graphCommandExecutor);
      graphCommandExecutorMap.put(args[0],graphCommandExecutor);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DROP)) {
    if (null == nameGraphMap.get(args[0])) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      nameGraphMap.remove(args[0]);
      graphCommandExecutorMap.remove(args[0]);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_NAMECON)) {
    clientState.put(ST_NAMECON,args[0] + ""String_Node_Str"" + clientId);
    rsb.append(clientState.get(ST_NAMECON));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CLSTATE)) {
    JSONObject result=new JSONObject(clientState);
    rsb.append(result.toString());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SSTAT)) {
    JSONObject result=new JSONObject();
    JSONObject names=new JSONObject();
    names.put(""String_Node_Str"",Graph.TYPE_FIELD);
    names.put(""String_Node_Str"",Graph.KEY_FIELD);
    names.put(""String_Node_Str"",Graph.WEIGHT_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_SOURCE_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_TARGET_FIELD);
    names.put(""String_Node_Str"",Graph.RELATION_FIELD);
    names.put(""String_Node_Str"",Graph.VERTEX_TYPE);
    names.put(""String_Node_Str"",Graph.EDGE_TYPE);
    result.put(""String_Node_Str"",names);
    rsb.append(result.toString());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_LISTG)) {
    for (    String name : nameGraphMap.keySet()) {
      rsb.append(name);
      rsb.append(GraphServerProtocol.NL);
    }
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GSTAT)) {
    Graph gr0=nameGraphMap.get(args[0]);
    if (null == gr0) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject result=new JSONObject();
      result.put(""String_Node_Str"",gr0.numVertices());
      result.put(""String_Node_Str"",gr0.numEdges());
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else {
    GraphCommand graphCommand=new GraphCommand();
    graphCommand.responseChannel=responseChannel;
    graphCommand.clientId=clientId;
    graphCommand.clientState=clientState;
    graphCommand.request=request;
    graphCommand.cmd=cmd;
    graphCommand.args=args;
    graphCommand.poisonPill=false;
    graphCommandExecutorMap.get(clientState.get(GraphServerHandler.ST_DB)).queue(graphCommand);
    return null;
  }
  if (rsb.toString().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + cmd);
    rsb.append(GraphServerProtocol.R_UNK);
    rsb.append(GraphServerProtocol.SPACE);
    rsb.append(cmd);
  }
  rsb.append(GraphServerProtocol.NL);
  return rsb.toString();
}",0.9996669996669996
39464,"public Graph(String graphName) throws Exception {
  this.graphName=graphName;
  gr=new ListenableDirectedWeightedGraph<JSONVertex,JSONEdge>(JSONEdge.class);
  connectivityInspector=new ConnectivityInspector<JSONVertex,JSONEdge>(gr);
  vertices=new ConcurrentHashMap<String,JSONVertex>();
  gr.addVertexSetListener(this);
  gr.addGraphListener(this);
  gr.addVertexSetListener(connectivityInspector);
  gr.addGraphListener(connectivityInspector);
  executorService=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() - 1);
  fiberFactory=new PoolFiberFactory(executorService);
  vertexProcesses=new ProcessGroup<JSONVertex,JSONObject>(this,""String_Node_Str"",executorService,fiberFactory);
  edgeProcesses=new ProcessGroup<JSONEdge,JSONObject>(this,""String_Node_Str"",executorService,fiberFactory);
  graphProcesses=new ProcessGroup<EventObject,JSONObject>(this,""String_Node_Str"",executorService,fiberFactory);
  luceneDirectory=new RAMDirectory();
  indexWriter=new IndexWriter(luceneDirectory,new StandardAnalyzer(Version.LUCENE_30),IndexWriter.MaxFieldLength.LIMITED);
  indexReader=indexWriter.getReader();
  searcher=new IndexSearcher(indexReader);
  processdb=new SQLDB(this.graphName);
}","public Graph(String graphName) throws Exception {
  this.graphName=graphName;
  gr=new ListenableDirectedWeightedGraph<JSONVertex,JSONEdge>(JSONEdge.class);
  connectivityInspector=new ConnectivityInspector<JSONVertex,JSONEdge>(gr);
  vertices=new ConcurrentHashMap<String,JSONVertex>();
  gr.addVertexSetListener(this);
  gr.addGraphListener(this);
  gr.addVertexSetListener(connectivityInspector);
  gr.addGraphListener(connectivityInspector);
  executorService=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() - 1);
  fiberFactory=new PoolFiberFactory(executorService);
  vertexProcesses=new ProcessGroup<JSONVertex,JSONObject>(this,""String_Node_Str"",executorService,fiberFactory);
  edgeProcesses=new ProcessGroup<JSONEdge,JSONObject>(this,""String_Node_Str"",executorService,fiberFactory);
  graphProcesses=new ProcessGroup<EventObject,JSONObject>(this,""String_Node_Str"",executorService,fiberFactory);
  luceneDirectory=new RAMDirectory();
  indexWriter=new IndexWriter(luceneDirectory,new StandardAnalyzer(Version.LUCENE_30),IndexWriter.MaxFieldLength.LIMITED);
  indexReader=indexWriter.getReader();
  searcher=new IndexSearcher(indexReader);
  processdb=new SQLDB(this.graphName);
  try {
    processdb.update(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    processdb.update(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.8637660485021398
39465,"public String addVertex(String key,JSONObject jo) throws Exception {
  JSONVertex jv=new JSONVertex(key,jo);
  gr.addVertex(jv);
  vertices.put(key,jv);
  indexObject(key,VERTEX_TYPE,jo);
  vertexProcesses.start(key + ""String_Node_Str"",jv,new TestGraphProcess());
  return key;
}","public String addVertex(String key,JSONObject jo) throws Exception {
  JSONVertex jv=new JSONVertex(key,jo);
  gr.addVertex(jv);
  vertices.put(key,jv);
  indexObject(key,VERTEX_TYPE,jo);
  return key;
}",0.8423236514522822
39466,"protected String execute(Channel responseChannel,String clientId,ConcurrentHashMap<String,String> clientState,String request,String cmd,String[] args) throws Exception {
  StringBuffer rsb=new StringBuffer();
  if (null == clientState.get(GraphServerHandler.ST_DB)) {
    rsb.append(GraphServerProtocol.R_ERR);
    rsb.append(""String_Node_Str"");
    return rsb.toString();
  }
  Graph gr=graphRef.get();
  if (null == gr) {
    GraphCommand killCmd=new GraphCommand();
    killCmd.poisonPill=true;
    graphCommandQueue.clear();
    graphCommandQueue.put(killCmd);
    return GraphServerProtocol.R_ERR + GraphServerProtocol.SPACE + ""String_Node_Str"";
  }
  if (request.indexOf(""String_Node_Str"") != -1 && request.indexOf(""String_Node_Str"") != -1) {
    String query=request.substring(request.indexOf(""String_Node_Str"") + 2,request.indexOf(""String_Node_Str""));
    String prefix=request.substring(0,request.indexOf(""String_Node_Str"")).trim();
    String suffix=request.substring(request.indexOf(""String_Node_Str"") + 2).trim();
    log.info(""String_Node_Str"" + prefix + ""String_Node_Str""+ query+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
    List<JSONObject> selectorResults=gr.queryGraphIndex(query);
    for (    JSONObject selectorResult : selectorResults) {
      String batchRequestKey=selectorResult.getString(Graph.KEY_FIELD);
      String batchRequest=prefix + ""String_Node_Str"" + batchRequestKey+ ""String_Node_Str""+ suffix;
      String batchCmd;
      String[] batchArgs;
      if (batchRequest.indexOf(GraphServerProtocol.SPACE) != -1) {
        batchCmd=batchRequest.substring(0,batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().toLowerCase();
        batchArgs=batchRequest.substring(batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().split(GraphServerProtocol.SPACE);
      }
 else {
        batchCmd=batchRequest.trim().toLowerCase();
        batchArgs=new String[0];
      }
      String batchCmdResponse=execute(responseChannel,clientId,clientState,batchRequest,batchCmd,batchArgs);
      String responseParts[]=batchCmdResponse.split(GraphServerProtocol.NL);
      for (      String responsePart : responseParts) {
        if (responsePart.charAt(0) != '-') {
          responseChannel.write(responsePart.trim() + GraphServerProtocol.NL);
        }
      }
    }
    return GraphServerProtocol.R_BATCH_OK;
  }
  if (cmd.equals(GraphServerProtocol.CMD_CVERT)) {
    String key=args[0];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + key) + (key.length() + 1)).trim();
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      gr.addVertex(key,jo);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CEDGE)) {
    String key=args[0];
    String vFromKey=args[1];
    String vToKey=args[2];
    String rel=args[3];
    double weight=1.0;
    String json;
    if (args[4].charAt(0) == '{') {
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + rel) + (rel.length() + 1)).trim();
    }
 else {
      weight=Double.parseDouble(args[4]);
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[4]) + (args[4].length() + 1)).trim();
    }
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      jo.put(Graph.EDGE_SOURCE_FIELD,vFromKey);
      jo.put(Graph.EDGE_TARGET_FIELD,vToKey);
      jo.put(Graph.WEIGHT_FIELD,weight);
      jo.put(Graph.RELATION_FIELD,rel);
      gr.addEdge(key,jo,vFromKey,vToKey,rel,weight);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DEL)) {
    String key=args[0];
    JSONObject obj=gr.get(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        gr.removeVertex(jv);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else       if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        gr.removeEdge(je);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.SPACE);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EXISTS)) {
    String key=args[0];
    rsb.append(gr.exists(key) + ""String_Node_Str"" + key);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GET)) {
    String key=args[0];
    JSONObject jo=gr.get(key);
    if (jo == null) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(prepareResult(jo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_Q)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
    List<JSONObject> results=gr.queryGraphIndex(q);
    JSONArray ja=new JSONArray();
    for (    JSONObject jo : results) {
      ja.put(jo);
    }
    JSONObject res=new JSONObject();
    res.put(""String_Node_Str"",ja);
    rsb.append(prepareResult(res));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_QP)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    double radius=Double.POSITIVE_INFINITY;
    if (args.length == 3) {
      radius=Double.parseDouble(args[2]);
    }
    JSONObject result=gr.getShortestPath(vFromKey,vToKey,radius);
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(prepareResult(result));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SET)) {
    String key=args[0];
    String attr=args[1];
    String val;
    if (args.length == 2) {
      val=null;
    }
 else {
      val=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[1]) + (args[1].length() + 1)).trim();
    }
    if (attr.startsWith(""String_Node_Str"") && !attr.equals(Graph.WEIGHT_FIELD)) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      JSONObject obj=gr.get(key);
      if (null == obj) {
        rsb.append(GraphServerProtocol.R_NOT_FOUND);
      }
 else {
        String _type=obj.getString(Graph.TYPE_FIELD);
        if (_type.equals(Graph.VERTEX_TYPE)) {
          JSONVertex jv=gr.getVertex(key);
          if (null != val) {
            jv.put(attr,val);
          }
 else {
            jv.remove(attr);
          }
          gr.indexObject(key,_type,jv);
          rsb.append(GraphServerProtocol.R_OK);
        }
 else         if (_type.equals(Graph.EDGE_TYPE)) {
          JSONEdge je=gr.getEdge(key);
          if (null != val) {
            je.put(attr,val);
          }
 else {
            je.remove(attr);
          }
          if (attr.equals(Graph.WEIGHT_FIELD)) {
            gr.setEdgeWeight(je,Double.parseDouble(val));
          }
          gr.indexObject(key,_type,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
          rsb.append(GraphServerProtocol.R_OK);
        }
 else {
          rsb.append(GraphServerProtocol.R_ERR);
          rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
        }
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_INCW)) {
    String key=args[0];
    double w_amt=Double.parseDouble(args[1]);
    JSONEdge je=gr.getEdge(key);
    if (null == je) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      double weight=gr.getEdgeWeight(je);
      weight+=w_amt;
      gr.setEdgeWeight(je,weight);
      je.put(Graph.WEIGHT_FIELD,""String_Node_Str"" + weight);
      gr.indexObject(key,Graph.EDGE_TYPE,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPY)) {
    String key=args[0];
    JSONObject obj=gr.get(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        if (null == je) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(je.asClientJSONObject().toString(4) + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else       if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        if (null == jv) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(jv.toString(4) + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KSPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    int k=Integer.parseInt(args[2]);
    int maxHops=0;
    if (args.length > 3) {
      maxHops=Integer.parseInt(args[3]);
    }
    JSONObject result=gr.getKShortestPaths(vFromKey,vToKey,k,maxHops);
    rsb.append(prepareResult(result));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_HC)) {
    List<JSONVertex> results=gr.getHamiltonianCycle();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray cycle=new JSONArray();
      for (      JSONVertex jo : results) {
        cycle.put(jo);
      }
      res.put(""String_Node_Str"",cycle);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EC)) {
    List<JSONVertex> results=gr.getEulerianCircuit();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray circuit=new JSONArray();
      for (      JSONVertex jo : results) {
        circuit.put(jo);
      }
      res.put(""String_Node_Str"",circuit);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EKMF)) {
    String vSourceKey=args[0];
    String vSinkKey=args[1];
    JSONObject flowResult=gr.getEKMF(vSourceKey,vSinkKey);
    if (null == flowResult) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(flowResult.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CN)) {
    JSONObject result=new JSONObject();
    result.put(""String_Node_Str"",gr.getChromaticNumber());
    rsb.append(result.toString());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KMST)) {
    JSONObject result=gr.getKMST();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCG)) {
    JSONObject result=gr.getGreedyVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VC2A)) {
    JSONObject result=gr.get2ApproximationVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETV)) {
    String key=args[0];
    JSONVertex v=gr.getVertex(key);
    if (null == v) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      JSONObject result=gr.getConnectedSetByVertex(v);
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETS)) {
    JSONObject result=gr.getConnectedSets();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ISCON)) {
    rsb.append(""String_Node_Str"" + gr.isConnected());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_UPATHEX)) {
    JSONVertex vFrom=gr.getVertex(args[0]);
    JSONVertex vTo=gr.getVertex(args[1]);
    if (null == vFrom || null == vTo) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(""String_Node_Str"" + gr.pathExists(vFrom,vTo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FAMC)) {
    JSONObject result=gr.getAllMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FBMC)) {
    JSONObject result=gr.getBiggestMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ASPV)) {
    JSONObject result=gr.getAllShortestPathsFrom(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GCYC)) {
    JSONObject result=gr.getGraphCycles();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCYC)) {
    JSONObject result=gr.getGraphCyclesContainingVertex(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EMIT)) {
    String key=args[0];
    String processName=args[1];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + processName) + (processName.length() + 1)).trim();
    JSONObject jo=null;
    jo=new JSONObject(json);
    gr.emit(key,processName,jo);
    rsb.append(GraphServerProtocol.R_OK);
  }
  return rsb.toString();
}","protected String execute(Channel responseChannel,String clientId,ConcurrentHashMap<String,String> clientState,String request,String cmd,String[] args) throws Exception {
  StringBuffer rsb=new StringBuffer();
  if (null == clientState.get(GraphServerHandler.ST_DB)) {
    rsb.append(GraphServerProtocol.R_ERR);
    rsb.append(""String_Node_Str"");
    return rsb.toString();
  }
  Graph gr=graphRef.get();
  if (null == gr) {
    GraphCommand killCmd=new GraphCommand();
    killCmd.poisonPill=true;
    graphCommandQueue.clear();
    graphCommandQueue.put(killCmd);
    return GraphServerProtocol.R_ERR + GraphServerProtocol.SPACE + ""String_Node_Str"";
  }
  if (request.indexOf(""String_Node_Str"") != -1 && request.indexOf(""String_Node_Str"") != -1) {
    String query=request.substring(request.indexOf(""String_Node_Str"") + 2,request.indexOf(""String_Node_Str""));
    String prefix=request.substring(0,request.indexOf(""String_Node_Str"")).trim();
    String suffix=request.substring(request.indexOf(""String_Node_Str"") + 2).trim();
    log.info(""String_Node_Str"" + prefix + ""String_Node_Str""+ query+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
    List<JSONObject> selectorResults=gr.queryGraphIndex(query);
    for (    JSONObject selectorResult : selectorResults) {
      String batchRequestKey=selectorResult.getString(Graph.KEY_FIELD);
      String batchRequest=prefix + ""String_Node_Str"" + batchRequestKey+ ""String_Node_Str""+ suffix;
      String batchCmd;
      String[] batchArgs;
      if (batchRequest.indexOf(GraphServerProtocol.SPACE) != -1) {
        batchCmd=batchRequest.substring(0,batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().toLowerCase();
        batchArgs=batchRequest.substring(batchRequest.indexOf(GraphServerProtocol.SPACE)).trim().split(GraphServerProtocol.SPACE);
      }
 else {
        batchCmd=batchRequest.trim().toLowerCase();
        batchArgs=new String[0];
      }
      String batchCmdResponse=execute(responseChannel,clientId,clientState,batchRequest,batchCmd,batchArgs);
      String responseParts[]=batchCmdResponse.split(GraphServerProtocol.NL);
      for (      String responsePart : responseParts) {
        if (responsePart.charAt(0) != '-') {
          responseChannel.write(responsePart.trim() + GraphServerProtocol.NL);
        }
      }
    }
    return GraphServerProtocol.R_BATCH_OK;
  }
  if (cmd.equals(GraphServerProtocol.CMD_CVERT)) {
    String key=args[0];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + key) + (key.length() + 1)).trim();
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      gr.addVertex(key,jo);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CEDGE)) {
    String key=args[0];
    String vFromKey=args[1];
    String vToKey=args[2];
    String rel=args[3];
    double weight=1.0;
    String json;
    if (args[4].charAt(0) == '{') {
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + rel) + (rel.length() + 1)).trim();
    }
 else {
      weight=Double.parseDouble(args[4]);
      json=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[4]) + (args[4].length() + 1)).trim();
    }
    JSONObject jo=null;
    try {
      jo=new JSONObject(json);
      jo.put(Graph.EDGE_SOURCE_FIELD,vFromKey);
      jo.put(Graph.EDGE_TARGET_FIELD,vToKey);
      jo.put(Graph.WEIGHT_FIELD,weight);
      jo.put(Graph.RELATION_FIELD,rel);
      gr.addEdge(key,jo,vFromKey,vToKey,rel,weight);
      rsb.append(GraphServerProtocol.R_OK);
    }
 catch (    org.json.JSONException jsonEx) {
      jsonEx.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
      rsb.append(jsonEx.getMessage());
    }
catch (    Exception ex) {
      ex.printStackTrace();
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(GraphServerProtocol.SPACE);
      rsb.append(ex.getMessage());
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DEL)) {
    String key=args[0];
    JSONObject obj=gr.get(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        gr.removeVertex(jv);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else       if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        gr.removeEdge(je);
        rsb.append(GraphServerProtocol.R_OK);
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.SPACE);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EXISTS)) {
    String key=args[0];
    rsb.append(gr.exists(key) + ""String_Node_Str"" + key);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GET)) {
    String key=args[0];
    JSONObject jo=gr.get(key);
    if (jo == null) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(prepareResult(jo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_Q)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
    List<JSONObject> results=gr.queryGraphIndex(q);
    JSONArray ja=new JSONArray();
    for (    JSONObject jo : results) {
      ja.put(jo);
    }
    JSONObject res=new JSONObject();
    res.put(""String_Node_Str"",ja);
    rsb.append(prepareResult(res));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_QP)) {
    String q=request.substring(request.indexOf(GraphServerProtocol.SPACE)).trim();
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    double radius=Double.POSITIVE_INFINITY;
    if (args.length == 3) {
      radius=Double.parseDouble(args[2]);
    }
    JSONObject result=gr.getShortestPath(vFromKey,vToKey,radius);
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(prepareResult(result));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SET)) {
    String key=args[0];
    String attr=args[1];
    String val;
    if (args.length == 2) {
      val=null;
    }
 else {
      val=request.substring(request.indexOf(GraphServerProtocol.SPACE + args[1]) + (args[1].length() + 1)).trim();
    }
    if (attr.startsWith(""String_Node_Str"") && !attr.equals(Graph.WEIGHT_FIELD)) {
      rsb.append(GraphServerProtocol.R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      JSONObject obj=gr.get(key);
      if (null == obj) {
        rsb.append(GraphServerProtocol.R_NOT_FOUND);
      }
 else {
        String _type=obj.getString(Graph.TYPE_FIELD);
        if (_type.equals(Graph.VERTEX_TYPE)) {
          JSONVertex jv=gr.getVertex(key);
          if (null != val) {
            jv.put(attr,val);
          }
 else {
            jv.remove(attr);
          }
          gr.indexObject(key,_type,jv);
          rsb.append(GraphServerProtocol.R_OK);
        }
 else         if (_type.equals(Graph.EDGE_TYPE)) {
          JSONEdge je=gr.getEdge(key);
          if (null != val) {
            je.put(attr,val);
          }
 else {
            je.remove(attr);
          }
          if (attr.equals(Graph.WEIGHT_FIELD)) {
            gr.setEdgeWeight(je,Double.parseDouble(val));
          }
          gr.indexObject(key,_type,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
          rsb.append(GraphServerProtocol.R_OK);
        }
 else {
          rsb.append(GraphServerProtocol.R_ERR);
          rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
        }
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_INCW)) {
    String key=args[0];
    double w_amt=Double.parseDouble(args[1]);
    JSONEdge je=gr.getEdge(key);
    if (null == je) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      double weight=gr.getEdgeWeight(je);
      weight+=w_amt;
      gr.setEdgeWeight(je,weight);
      je.put(Graph.WEIGHT_FIELD,""String_Node_Str"" + weight);
      gr.indexObject(key,Graph.EDGE_TYPE,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPY)) {
    String key=args[0];
    JSONObject obj=gr.get(key);
    if (null == obj) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      String _type=obj.getString(Graph.TYPE_FIELD);
      if (_type.equals(Graph.EDGE_TYPE)) {
        JSONEdge je=gr.getEdge(key);
        if (null == je) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(je.asClientJSONObject().toString(4) + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else       if (_type.equals(Graph.VERTEX_TYPE)) {
        JSONVertex jv=gr.getVertex(key);
        if (null == jv) {
          rsb.append(GraphServerProtocol.R_NOT_FOUND);
        }
 else {
          rsb.append(jv.toString(4) + GraphServerProtocol.NL);
          rsb.append(GraphServerProtocol.R_OK);
        }
      }
 else {
        rsb.append(GraphServerProtocol.R_ERR);
        rsb.append(GraphServerProtocol.R_UNKNOWN_OBJECT_TYPE);
      }
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KSPATH)) {
    String vFromKey=args[0];
    String vToKey=args[1];
    int k=Integer.parseInt(args[2]);
    int maxHops=0;
    if (args.length > 3) {
      maxHops=Integer.parseInt(args[3]);
    }
    JSONObject result=gr.getKShortestPaths(vFromKey,vToKey,k,maxHops);
    rsb.append(prepareResult(result));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_HC)) {
    List<JSONVertex> results=gr.getHamiltonianCycle();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray cycle=new JSONArray();
      for (      JSONVertex jo : results) {
        cycle.put(jo);
      }
      res.put(""String_Node_Str"",cycle);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EC)) {
    List<JSONVertex> results=gr.getEulerianCircuit();
    if (null == results) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      JSONObject res=new JSONObject();
      JSONArray circuit=new JSONArray();
      for (      JSONVertex jo : results) {
        circuit.put(jo);
      }
      res.put(""String_Node_Str"",circuit);
      rsb.append(prepareResult(res));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EKMF)) {
    String vSourceKey=args[0];
    String vSinkKey=args[1];
    JSONObject flowResult=gr.getEKMF(vSourceKey,vSinkKey);
    if (null == flowResult) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(flowResult.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CN)) {
    JSONObject result=new JSONObject();
    result.put(""String_Node_Str"",gr.getChromaticNumber());
    rsb.append(result.toString());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_KMST)) {
    JSONObject result=gr.getKMST();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCG)) {
    JSONObject result=gr.getGreedyVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VC2A)) {
    JSONObject result=gr.get2ApproximationVertexCover();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETV)) {
    String key=args[0];
    JSONVertex v=gr.getVertex(key);
    if (null == v) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      JSONObject result=gr.getConnectedSetByVertex(v);
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_CSETS)) {
    JSONObject result=gr.getConnectedSets();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ISCON)) {
    rsb.append(""String_Node_Str"" + gr.isConnected());
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_UPATHEX)) {
    JSONVertex vFrom=gr.getVertex(args[0]);
    JSONVertex vTo=gr.getVertex(args[1]);
    if (null == vFrom || null == vTo) {
      rsb.append(GraphServerProtocol.R_NOT_FOUND);
    }
 else {
      rsb.append(""String_Node_Str"" + gr.pathExists(vFrom,vTo));
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FAMC)) {
    JSONObject result=gr.getAllMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_FBMC)) {
    JSONObject result=gr.getBiggestMaximalCliques();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_ASPV)) {
    JSONObject result=gr.getAllShortestPathsFrom(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_GCYC)) {
    JSONObject result=gr.getGraphCycles();
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_VCYC)) {
    JSONObject result=gr.getGraphCyclesContainingVertex(gr.getVertex(args[0]));
    if (null == result) {
      rsb.append(GraphServerProtocol.R_NOT_EXIST);
    }
 else {
      rsb.append(result.toString());
      rsb.append(GraphServerProtocol.NL);
      rsb.append(GraphServerProtocol.R_OK);
    }
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_UDFQ)) {
    String sql=request.substring(request.indexOf(GraphServerProtocol.SPACE) + 1);
    rsb.append(gr.queryUDFs(sql).toString(4));
    rsb.append(GraphServerProtocol.NL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_DEFINE_UDF)) {
    String udfKey=args[0];
    String udfType=args[1];
    String udfURL=args[2];
    gr.defineUDF(udfKey,udfType,udfURL);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_SPROC)) {
    String objKey=args[0];
    String udfKey=args[1];
    String processName=args[2];
    gr.startProcess(objKey,udfKey,processName);
    rsb.append(GraphServerProtocol.R_OK);
  }
 else   if (cmd.equals(GraphServerProtocol.CMD_EMIT)) {
    String key=args[0];
    String processName=args[1];
    String json=request.substring(request.indexOf(GraphServerProtocol.SPACE + processName) + (processName.length() + 1)).trim();
    JSONObject jo=null;
    jo=new JSONObject(json);
    gr.emit(key,processName,jo);
    rsb.append(GraphServerProtocol.R_OK);
  }
  return rsb.toString();
}",0.9781276822446504
39467,"public ProcessGroup(Graph graph,String name,ExecutorService executorService,PoolFiberFactory fiberFactory){
  this.graphRef=new WeakReference<Graph>(graph);
  this.name=name;
  processMap=new ConcurrentHashMap<String,GraphProcess<T,M>>();
  this.executorService=executorService;
  this.fiberFactory=fiberFactory;
  log.info(""String_Node_Str"" + name);
}","public ProcessGroup(Graph graph,String name,ExecutorService executorService,PoolFiberFactory fiberFactory){
  this.graphRef=new WeakReference<Graph>(graph);
  this.name=name;
  processMap=new ConcurrentHashMap<String,GraphProcess<T,M>>();
  this.executorService=executorService;
  this.fiberFactory=fiberFactory;
  scriptEngineMap=new ConcurrentHashMap<String,GScriptEngine>();
  log.info(""String_Node_Str"" + name);
}",0.9154746423927178
39468,"public void indexObject(String key,String type,JSONObject jo) throws Exception {
  Document doc=new Document();
  doc.add(new Field(TYPE_FIELD,type,Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
  doc.add(new Field(KEY_FIELD,key,Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
  if (null != jo && null != JSONObject.getNames(jo)) {
    for (    String k : JSONObject.getNames(jo)) {
      doc.add(new Field(k,jo.getString(k),Field.Store.YES,Field.Index.ANALYZED_NO_NORMS));
    }
  }
  indexWriter.updateDocument(new Term(KEY_FIELD,key),doc);
  refreshGraphIndex();
}","public void indexObject(String key,String type,JSONObject jo) throws Exception {
  Document doc=new Document();
  doc.add(new Field(TYPE_FIELD,type,Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
  doc.add(new Field(KEY_FIELD,key,Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
  if (null != jo && null != JSONObject.getNames(jo)) {
    for (    String k : JSONObject.getNames(jo)) {
      doc.add(new Field(k,jo.getString(k),Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
    }
  }
  indexWriter.updateDocument(new Term(KEY_FIELD,key),doc);
  refreshGraphIndex();
}",0.996551724137931
39469,"public String executeRequest(String clientId,ConcurrentHashMap<String,String> clientState,String request) throws Exception {
  StringBuffer rsb=new StringBuffer();
  String cmd;
  String[] args;
  if (request.indexOf(SPACE) != -1) {
    cmd=request.substring(0,request.indexOf(SPACE)).trim().toLowerCase();
    args=request.substring(request.indexOf(SPACE)).trim().split(SPACE);
  }
 else {
    cmd=request;
    args=new String[0];
  }
  if (cmd.equals(CMD_USE)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      if (null != clientState.get(ST_DB))       clientState.remove(ST_DB);
      clientState.put(ST_DB,args[0]);
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_CREATE)) {
    if (null != dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.put(args[0],new Graph());
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_DROP)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.remove(args[0]);
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_NAMECON)) {
    clientState.put(ST_NAMECON,args[0] + ""String_Node_Str"" + clientId);
    rsb.append(clientState.get(ST_NAMECON));
    rsb.append(NL);
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_CLSTATE)) {
    JSONObject result=new JSONObject(clientState);
    rsb.append(result.toString(4));
    rsb.append(NL);
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_SSTAT)) {
    JSONObject result=new JSONObject();
    JSONObject names=new JSONObject();
    names.put(""String_Node_Str"",Graph.TYPE_FIELD);
    names.put(""String_Node_Str"",Graph.KEY_FIELD);
    names.put(""String_Node_Str"",Graph.WEIGHT_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_SOURCE_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_TARGET_FIELD);
    names.put(""String_Node_Str"",Graph.RELATION_FIELD);
    names.put(""String_Node_Str"",Graph.VERTEX_TYPE);
    names.put(""String_Node_Str"",Graph.EDGE_TYPE);
    result.put(""String_Node_Str"",names);
    rsb.append(result.toString(4));
    rsb.append(NL);
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_LISTG)) {
    for (    String name : dbs.keySet()) {
      rsb.append(name);
      rsb.append(NL);
    }
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_GSTAT)) {
    Graph gr0=dbs.get(args[0]);
    if (null == gr0) {
      rsb.append(R_NOT_EXIST);
    }
 else {
      JSONObject result=new JSONObject();
      result.put(""String_Node_Str"",gr0.numVertices());
      result.put(""String_Node_Str"",gr0.numEdges());
      rsb.append(result.toString(4));
      rsb.append(NL);
      rsb.append(R_OK);
    }
  }
 else {
    if (null == clientState.get(ST_DB)) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      String cldb=clientState.get(ST_DB);
      Graph gr=dbs.get(cldb);
      if (cmd.equals(CMD_EXISTS)) {
        String key=args[0];
        rsb.append(""String_Node_Str"" + gr.exists(key));
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_CVERT)) {
        String key=args[0];
        String json=request.substring(request.indexOf(SPACE + key) + (key.length() + 1)).trim();
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          gr.addVertex(key,jo);
          rsb.append(R_OK);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(jsonEx.getMessage());
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(SPACE);
          rsb.append(ex.getMessage());
        }
      }
 else       if (cmd.equals(CMD_CEDGE)) {
        String key=args[0];
        String vFromKey=args[1];
        String vToKey=args[2];
        String rel=args[3];
        double weight=1.0;
        String json;
        if (args[4].charAt(0) == '{') {
          json=request.substring(request.indexOf(SPACE + rel) + (rel.length() + 1)).trim();
        }
 else {
          weight=Double.parseDouble(args[4]);
          json=request.substring(request.indexOf(SPACE + args[4]) + (args[4].length() + 1)).trim();
        }
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          jo.put(Graph.EDGE_SOURCE_FIELD,vFromKey);
          jo.put(Graph.EDGE_TARGET_FIELD,vToKey);
          jo.put(Graph.WEIGHT_FIELD,weight);
          jo.put(Graph.RELATION_FIELD,rel);
          gr.addEdge(key,jo,vFromKey,vToKey,rel,weight);
          rsb.append(R_OK);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(jsonEx.getMessage());
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(SPACE);
          rsb.append(ex.getMessage());
        }
      }
 else       if (cmd.equals(CMD_DEL)) {
        String key=args[0];
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(Graph.TYPE_FIELD);
          if (_type.equals(Graph.VERTEX_TYPE)) {
            JSONVertex jv=gr.getVertex(key);
            gr.removeVertex(jv);
            rsb.append(R_OK);
          }
 else           if (_type.equals(Graph.EDGE_TYPE)) {
            JSONEdge je=gr.getEdge(key);
            gr.removeEdge(je);
            rsb.append(R_OK);
          }
 else {
            rsb.append(R_ERR);
            rsb.append(SPACE);
            rsb.append(R_UNKNOWN_OBJECT_TYPE);
          }
        }
      }
 else       if (cmd.equals(CMD_GET)) {
        String key=args[0];
        JSONObject jo=gr.get(key);
        if (jo == null) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          rsb.append(prepareResult(jo));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_Q)) {
        String q=request.substring(request.indexOf(SPACE)).trim();
        List<JSONObject> results=gr.queryGraphIndex(q);
        JSONArray ja=new JSONArray();
        for (        JSONObject jo : results) {
          ja.put(jo);
        }
        JSONObject res=new JSONObject();
        res.put(""String_Node_Str"",ja);
        rsb.append(prepareResult(res));
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_QP)) {
        String q=request.substring(request.indexOf(SPACE)).trim();
        List<JSONObject> results=gr.queryProcessIndex(q);
        JSONArray ja=new JSONArray();
        for (        JSONObject jo : results) {
          ja.put(jo);
        }
        JSONObject res=new JSONObject();
        res.put(""String_Node_Str"",ja);
        rsb.append(prepareResult(res));
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_SPATH)) {
        String vFromKey=args[0];
        String vToKey=args[1];
        double radius=Double.POSITIVE_INFINITY;
        if (args.length == 3) {
          radius=Double.parseDouble(args[2]);
        }
        JSONObject result=gr.getShortestPath(vFromKey,vToKey,radius);
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(prepareResult(result));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_SET)) {
        String key=args[0];
        String attr=args[1];
        String val;
        if (args.length == 2) {
          val=null;
        }
 else {
          val=request.substring(request.indexOf(SPACE + args[1]) + (args[1].length() + 1)).trim();
        }
        if (attr.startsWith(""String_Node_Str"") && !attr.equals(Graph.WEIGHT_FIELD)) {
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
        }
 else {
          JSONObject obj=gr.get(key);
          if (null == obj) {
            rsb.append(R_NOT_FOUND);
          }
 else {
            String _type=obj.getString(Graph.TYPE_FIELD);
            if (_type.equals(Graph.VERTEX_TYPE)) {
              JSONVertex jv=gr.getVertex(key);
              if (null != val) {
                jv.put(attr,val);
              }
 else {
                jv.remove(attr);
              }
              gr.indexObject(key,_type,jv);
              rsb.append(R_OK);
            }
 else             if (_type.equals(Graph.EDGE_TYPE)) {
              JSONEdge je=gr.getEdge(key);
              if (null != val) {
                je.put(attr,val);
              }
 else {
                je.remove(attr);
              }
              if (attr.equals(Graph.WEIGHT_FIELD)) {
                gr.setEdgeWeight(je,Double.parseDouble(val));
              }
              gr.indexObject(key,_type,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
              rsb.append(R_OK);
            }
 else {
              rsb.append(R_ERR);
              rsb.append(R_UNKNOWN_OBJECT_TYPE);
            }
          }
        }
      }
 else       if (cmd.equals(CMD_INCW)) {
        String key=args[0];
        double w_amt=Double.parseDouble(args[1]);
        JSONEdge je=gr.getEdge(key);
        if (null == je) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          double weight=gr.getEdgeWeight(je);
          weight+=w_amt;
          gr.setEdgeWeight(je,weight);
          je.put(Graph.WEIGHT_FIELD,""String_Node_Str"" + weight);
          gr.indexObject(key,Graph.EDGE_TYPE,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_SPY)) {
        String key=args[0];
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(Graph.TYPE_FIELD);
          if (_type.equals(Graph.EDGE_TYPE)) {
            JSONEdge je=gr.getEdge(key);
            if (null == je) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(je.asClientJSONObject().toString(4) + NL);
              rsb.append(R_OK);
            }
          }
 else           if (_type.equals(Graph.VERTEX_TYPE)) {
            JSONVertex jv=gr.getVertex(key);
            if (null == jv) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(jv.toString(4) + NL);
              rsb.append(R_OK);
            }
          }
 else {
            rsb.append(R_ERR);
            rsb.append(R_UNKNOWN_OBJECT_TYPE);
          }
        }
      }
 else       if (cmd.equals(CMD_KSPATH)) {
        String vFromKey=args[0];
        String vToKey=args[1];
        int k=Integer.parseInt(args[2]);
        int maxHops=0;
        if (args.length > 3) {
          maxHops=Integer.parseInt(args[3]);
        }
        JSONObject result=gr.getKShortestPaths(vFromKey,vToKey,k,maxHops);
        rsb.append(prepareResult(result));
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_HC)) {
        List<JSONVertex> results=gr.getHamiltonianCycle();
        if (null == results) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          JSONObject res=new JSONObject();
          JSONArray cycle=new JSONArray();
          for (          JSONVertex jo : results) {
            cycle.put(jo);
          }
          res.put(""String_Node_Str"",cycle);
          rsb.append(prepareResult(res));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_EC)) {
        List<JSONVertex> results=gr.getEulerianCircuit();
        if (null == results) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          JSONObject res=new JSONObject();
          JSONArray circuit=new JSONArray();
          for (          JSONVertex jo : results) {
            circuit.put(jo);
          }
          res.put(""String_Node_Str"",circuit);
          rsb.append(prepareResult(res));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_EKMF)) {
        String vSourceKey=args[0];
        String vSinkKey=args[1];
        JSONObject flowResult=gr.getEKMF(vSourceKey,vSinkKey);
        if (null == flowResult) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(flowResult.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_CN)) {
        JSONObject result=new JSONObject();
        result.put(""String_Node_Str"",gr.getChromaticNumber());
        rsb.append(result.toString());
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_KMST)) {
        JSONObject result=gr.getKMST();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_VCG)) {
        JSONObject result=gr.getGreedyVertexCover();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_VC2A)) {
        JSONObject result=gr.get2ApproximationVertexCover();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_CSETV)) {
        String key=args[0];
        JSONVertex v=gr.getVertex(key);
        if (null == v) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          JSONObject result=gr.getConnectedSetByVertex(v);
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_CSETS)) {
        JSONObject result=gr.getConnectedSets();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_ISCON)) {
        rsb.append(""String_Node_Str"" + gr.isConnected());
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_UPATHEX)) {
        JSONVertex vFrom=gr.getVertex(args[0]);
        JSONVertex vTo=gr.getVertex(args[1]);
        if (null == vFrom || null == vTo) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          rsb.append(""String_Node_Str"" + gr.pathExists(vFrom,vTo));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_FAMC)) {
        JSONObject result=gr.getAllMaximalCliques();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_FBMC)) {
        JSONObject result=gr.getBiggestMaximalCliques();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_ASPV)) {
        JSONObject result=gr.getAllShortestPathsFrom(gr.getVertex(args[0]));
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_GCYC)) {
        JSONObject result=gr.getGraphCycles();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_VCYC)) {
        JSONObject result=gr.getGraphCyclesContainingVertex(gr.getVertex(args[0]));
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_EMIT)) {
        String key=args[0];
        String processName=args[1];
        String json=request.substring(request.indexOf(SPACE + processName) + (processName.length() + 1)).trim();
        JSONObject jo=null;
        jo=new JSONObject(json);
        gr.emit(key,processName,jo);
        rsb.append(R_OK);
      }
    }
  }
  if (rsb.toString().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + cmd);
    rsb.append(R_UNK);
    rsb.append(SPACE);
    rsb.append(cmd);
  }
  rsb.append(NL);
  return rsb.toString();
}","public String executeRequest(String clientId,ConcurrentHashMap<String,String> clientState,String request) throws Exception {
  StringBuffer rsb=new StringBuffer();
  String cmd;
  String[] args;
  if (request.indexOf(SPACE) != -1) {
    cmd=request.substring(0,request.indexOf(SPACE)).trim().toLowerCase();
    args=request.substring(request.indexOf(SPACE)).trim().split(SPACE);
  }
 else {
    cmd=request.trim().toLowerCase();
    args=new String[0];
  }
  if (cmd.equals(CMD_USE)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      if (null != clientState.get(ST_DB))       clientState.remove(ST_DB);
      clientState.put(ST_DB,args[0]);
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_CREATE)) {
    if (null != dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.put(args[0],new Graph());
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_DROP)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.remove(args[0]);
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_NAMECON)) {
    clientState.put(ST_NAMECON,args[0] + ""String_Node_Str"" + clientId);
    rsb.append(clientState.get(ST_NAMECON));
    rsb.append(NL);
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_CLSTATE)) {
    JSONObject result=new JSONObject(clientState);
    rsb.append(result.toString(4));
    rsb.append(NL);
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_SSTAT)) {
    JSONObject result=new JSONObject();
    JSONObject names=new JSONObject();
    names.put(""String_Node_Str"",Graph.TYPE_FIELD);
    names.put(""String_Node_Str"",Graph.KEY_FIELD);
    names.put(""String_Node_Str"",Graph.WEIGHT_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_SOURCE_FIELD);
    names.put(""String_Node_Str"",Graph.EDGE_TARGET_FIELD);
    names.put(""String_Node_Str"",Graph.RELATION_FIELD);
    names.put(""String_Node_Str"",Graph.VERTEX_TYPE);
    names.put(""String_Node_Str"",Graph.EDGE_TYPE);
    result.put(""String_Node_Str"",names);
    rsb.append(result.toString(4));
    rsb.append(NL);
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_LISTG)) {
    for (    String name : dbs.keySet()) {
      rsb.append(name);
      rsb.append(NL);
    }
    rsb.append(R_OK);
  }
 else   if (cmd.equals(CMD_GSTAT)) {
    Graph gr0=dbs.get(args[0]);
    if (null == gr0) {
      rsb.append(R_NOT_EXIST);
    }
 else {
      JSONObject result=new JSONObject();
      result.put(""String_Node_Str"",gr0.numVertices());
      result.put(""String_Node_Str"",gr0.numEdges());
      rsb.append(result.toString(4));
      rsb.append(NL);
      rsb.append(R_OK);
    }
  }
 else {
    if (null == clientState.get(ST_DB)) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      String cldb=clientState.get(ST_DB);
      Graph gr=dbs.get(cldb);
      if (cmd.equals(CMD_EXISTS)) {
        String key=args[0];
        rsb.append(""String_Node_Str"" + gr.exists(key));
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_CVERT)) {
        String key=args[0];
        String json=request.substring(request.indexOf(SPACE + key) + (key.length() + 1)).trim();
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          gr.addVertex(key,jo);
          rsb.append(R_OK);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(jsonEx.getMessage());
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(SPACE);
          rsb.append(ex.getMessage());
        }
      }
 else       if (cmd.equals(CMD_CEDGE)) {
        String key=args[0];
        String vFromKey=args[1];
        String vToKey=args[2];
        String rel=args[3];
        double weight=1.0;
        String json;
        if (args[4].charAt(0) == '{') {
          json=request.substring(request.indexOf(SPACE + rel) + (rel.length() + 1)).trim();
        }
 else {
          weight=Double.parseDouble(args[4]);
          json=request.substring(request.indexOf(SPACE + args[4]) + (args[4].length() + 1)).trim();
        }
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          jo.put(Graph.EDGE_SOURCE_FIELD,vFromKey);
          jo.put(Graph.EDGE_TARGET_FIELD,vToKey);
          jo.put(Graph.WEIGHT_FIELD,weight);
          jo.put(Graph.RELATION_FIELD,rel);
          gr.addEdge(key,jo,vFromKey,vToKey,rel,weight);
          rsb.append(R_OK);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(jsonEx.getMessage());
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(SPACE);
          rsb.append(ex.getMessage());
        }
      }
 else       if (cmd.equals(CMD_DEL)) {
        String key=args[0];
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(Graph.TYPE_FIELD);
          if (_type.equals(Graph.VERTEX_TYPE)) {
            JSONVertex jv=gr.getVertex(key);
            gr.removeVertex(jv);
            rsb.append(R_OK);
          }
 else           if (_type.equals(Graph.EDGE_TYPE)) {
            JSONEdge je=gr.getEdge(key);
            gr.removeEdge(je);
            rsb.append(R_OK);
          }
 else {
            rsb.append(R_ERR);
            rsb.append(SPACE);
            rsb.append(R_UNKNOWN_OBJECT_TYPE);
          }
        }
      }
 else       if (cmd.equals(CMD_GET)) {
        String key=args[0];
        JSONObject jo=gr.get(key);
        if (jo == null) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          rsb.append(prepareResult(jo));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_Q)) {
        String q=request.substring(request.indexOf(SPACE)).trim();
        List<JSONObject> results=gr.queryGraphIndex(q);
        JSONArray ja=new JSONArray();
        for (        JSONObject jo : results) {
          ja.put(jo);
        }
        JSONObject res=new JSONObject();
        res.put(""String_Node_Str"",ja);
        rsb.append(prepareResult(res));
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_QP)) {
        String q=request.substring(request.indexOf(SPACE)).trim();
        List<JSONObject> results=gr.queryProcessIndex(q);
        JSONArray ja=new JSONArray();
        for (        JSONObject jo : results) {
          ja.put(jo);
        }
        JSONObject res=new JSONObject();
        res.put(""String_Node_Str"",ja);
        rsb.append(prepareResult(res));
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_SPATH)) {
        String vFromKey=args[0];
        String vToKey=args[1];
        double radius=Double.POSITIVE_INFINITY;
        if (args.length == 3) {
          radius=Double.parseDouble(args[2]);
        }
        JSONObject result=gr.getShortestPath(vFromKey,vToKey,radius);
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(prepareResult(result));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_SET)) {
        String key=args[0];
        String attr=args[1];
        String val;
        if (args.length == 2) {
          val=null;
        }
 else {
          val=request.substring(request.indexOf(SPACE + args[1]) + (args[1].length() + 1)).trim();
        }
        if (attr.startsWith(""String_Node_Str"") && !attr.equals(Graph.WEIGHT_FIELD)) {
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
        }
 else {
          JSONObject obj=gr.get(key);
          if (null == obj) {
            rsb.append(R_NOT_FOUND);
          }
 else {
            String _type=obj.getString(Graph.TYPE_FIELD);
            if (_type.equals(Graph.VERTEX_TYPE)) {
              JSONVertex jv=gr.getVertex(key);
              if (null != val) {
                jv.put(attr,val);
              }
 else {
                jv.remove(attr);
              }
              gr.indexObject(key,_type,jv);
              rsb.append(R_OK);
            }
 else             if (_type.equals(Graph.EDGE_TYPE)) {
              JSONEdge je=gr.getEdge(key);
              if (null != val) {
                je.put(attr,val);
              }
 else {
                je.remove(attr);
              }
              if (attr.equals(Graph.WEIGHT_FIELD)) {
                gr.setEdgeWeight(je,Double.parseDouble(val));
              }
              gr.indexObject(key,_type,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
              rsb.append(R_OK);
            }
 else {
              rsb.append(R_ERR);
              rsb.append(R_UNKNOWN_OBJECT_TYPE);
            }
          }
        }
      }
 else       if (cmd.equals(CMD_INCW)) {
        String key=args[0];
        double w_amt=Double.parseDouble(args[1]);
        JSONEdge je=gr.getEdge(key);
        if (null == je) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          double weight=gr.getEdgeWeight(je);
          weight+=w_amt;
          gr.setEdgeWeight(je,weight);
          je.put(Graph.WEIGHT_FIELD,""String_Node_Str"" + weight);
          gr.indexObject(key,Graph.EDGE_TYPE,je.asJSONObject().getJSONObject(Graph.DATA_FIELD));
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_SPY)) {
        String key=args[0];
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(Graph.TYPE_FIELD);
          if (_type.equals(Graph.EDGE_TYPE)) {
            JSONEdge je=gr.getEdge(key);
            if (null == je) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(je.asClientJSONObject().toString(4) + NL);
              rsb.append(R_OK);
            }
          }
 else           if (_type.equals(Graph.VERTEX_TYPE)) {
            JSONVertex jv=gr.getVertex(key);
            if (null == jv) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(jv.toString(4) + NL);
              rsb.append(R_OK);
            }
          }
 else {
            rsb.append(R_ERR);
            rsb.append(R_UNKNOWN_OBJECT_TYPE);
          }
        }
      }
 else       if (cmd.equals(CMD_KSPATH)) {
        String vFromKey=args[0];
        String vToKey=args[1];
        int k=Integer.parseInt(args[2]);
        int maxHops=0;
        if (args.length > 3) {
          maxHops=Integer.parseInt(args[3]);
        }
        JSONObject result=gr.getKShortestPaths(vFromKey,vToKey,k,maxHops);
        rsb.append(prepareResult(result));
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_HC)) {
        List<JSONVertex> results=gr.getHamiltonianCycle();
        if (null == results) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          JSONObject res=new JSONObject();
          JSONArray cycle=new JSONArray();
          for (          JSONVertex jo : results) {
            cycle.put(jo);
          }
          res.put(""String_Node_Str"",cycle);
          rsb.append(prepareResult(res));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_EC)) {
        List<JSONVertex> results=gr.getEulerianCircuit();
        if (null == results) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          JSONObject res=new JSONObject();
          JSONArray circuit=new JSONArray();
          for (          JSONVertex jo : results) {
            circuit.put(jo);
          }
          res.put(""String_Node_Str"",circuit);
          rsb.append(prepareResult(res));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_EKMF)) {
        String vSourceKey=args[0];
        String vSinkKey=args[1];
        JSONObject flowResult=gr.getEKMF(vSourceKey,vSinkKey);
        if (null == flowResult) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(flowResult.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_CN)) {
        JSONObject result=new JSONObject();
        result.put(""String_Node_Str"",gr.getChromaticNumber());
        rsb.append(result.toString());
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_KMST)) {
        JSONObject result=gr.getKMST();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_VCG)) {
        JSONObject result=gr.getGreedyVertexCover();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_VC2A)) {
        JSONObject result=gr.get2ApproximationVertexCover();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_CSETV)) {
        String key=args[0];
        JSONVertex v=gr.getVertex(key);
        if (null == v) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          JSONObject result=gr.getConnectedSetByVertex(v);
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_CSETS)) {
        JSONObject result=gr.getConnectedSets();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_ISCON)) {
        rsb.append(""String_Node_Str"" + gr.isConnected());
        rsb.append(NL);
        rsb.append(R_OK);
      }
 else       if (cmd.equals(CMD_UPATHEX)) {
        JSONVertex vFrom=gr.getVertex(args[0]);
        JSONVertex vTo=gr.getVertex(args[1]);
        if (null == vFrom || null == vTo) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          rsb.append(""String_Node_Str"" + gr.pathExists(vFrom,vTo));
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_FAMC)) {
        JSONObject result=gr.getAllMaximalCliques();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_FBMC)) {
        JSONObject result=gr.getBiggestMaximalCliques();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_ASPV)) {
        JSONObject result=gr.getAllShortestPathsFrom(gr.getVertex(args[0]));
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_GCYC)) {
        JSONObject result=gr.getGraphCycles();
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_VCYC)) {
        JSONObject result=gr.getGraphCyclesContainingVertex(gr.getVertex(args[0]));
        if (null == result) {
          rsb.append(R_NOT_EXIST);
        }
 else {
          rsb.append(result.toString());
          rsb.append(NL);
          rsb.append(R_OK);
        }
      }
 else       if (cmd.equals(CMD_EMIT)) {
        String key=args[0];
        String processName=args[1];
        String json=request.substring(request.indexOf(SPACE + processName) + (processName.length() + 1)).trim();
        JSONObject jo=null;
        jo=new JSONObject(json);
        gr.emit(key,processName,jo);
        rsb.append(R_OK);
      }
    }
  }
  if (rsb.toString().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + cmd);
    rsb.append(R_UNK);
    rsb.append(SPACE);
    rsb.append(cmd);
  }
  rsb.append(NL);
  return rsb.toString();
}",0.99937535322288
39470,"public void kill() throws Exception {
  fiber.dispose();
  log(""String_Node_Str"" + name);
}","public void kill() throws Exception {
  beforeKill();
  fiber.dispose();
  log(""String_Node_Str"" + name);
}",0.9191919191919192
39471,"public JSONEdge getEdge(String key) throws Exception {
  JSONObject jsonVertex=get(key);
  JSONVertex fromVertex=vertices.get(jsonVertex.getString(""String_Node_Str""));
  JSONVertex toVertex=vertices.get(jsonVertex.getString(""String_Node_Str""));
  return gr.getEdge(fromVertex,toVertex);
}","public JSONEdge getEdge(String key) throws Exception {
  JSONObject jsonEdge=get(key);
  JSONVertex fromVertex=vertices.get(jsonEdge.getString(""String_Node_Str""));
  JSONVertex toVertex=vertices.get(jsonEdge.getString(""String_Node_Str""));
  return gr.getEdge(fromVertex,toVertex);
}",0.9473684210526316
39472,"public String executeRequest(String clientId,String request) throws Exception {
  ConcurrentHashMap<String,String> clientState=clientStateMap.get(clientId);
  StringBuffer rsb=new StringBuffer();
  String cmd=request.substring(0,request.indexOf(""String_Node_Str"")).trim().toLowerCase();
  String[] args=request.substring(request.indexOf(""String_Node_Str"")).trim().split(""String_Node_Str"");
  if (cmd.equals(CMD_USE)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      if (null != clientState.get(ST_DB))       clientState.remove(ST_DB);
      clientState.put(ST_DB,args[0]);
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_CREATE)) {
    if (null != dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.put(args[0],new Graph());
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_DROP)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.remove(args[0]);
      rsb.append(R_OK);
    }
  }
 else {
    if (null == clientState.get(ST_DB)) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      String cldb=clientState.get(ST_DB);
      Graph gr=dbs.get(cldb);
      if (cmd.equals(CMD_EXISTS)) {
        String key=args[0];
        log.info(""String_Node_Str"" + key);
        rsb.append(""String_Node_Str"" + gr.exists(key));
      }
 else       if (cmd.equals(CMD_CVERT)) {
        String key=args[0];
        String json=request.substring(request.indexOf(""String_Node_Str"" + key) + (key.length() + 1)).trim();
        log.info(""String_Node_Str"" + key + ""String_Node_Str""+ json);
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          gr.addVertex(key,jo);
          rsb.append(R_OK);
          rsb.append(""String_Node_Str"");
          rsb.append(key);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          log.info(""String_Node_Str"");
          log.info(json);
          log.info(""String_Node_Str"");
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(ex.toString());
        }
      }
 else       if (cmd.equals(CMD_CEDGE)) {
        String key=args[0];
        String vFromKey=args[1];
        String vToKey=args[2];
        String rel=args[3];
        String json=request.substring(request.indexOf(""String_Node_Str"" + rel) + (rel.length() + 1)).trim();
        log.info(""String_Node_Str"" + key + ""String_Node_Str""+ vFromKey+ ""String_Node_Str""+ vToKey+ ""String_Node_Str""+ rel+ ""String_Node_Str"");
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          jo.put(""String_Node_Str"",vFromKey);
          jo.put(""String_Node_Str"",vToKey);
          jo.put(""String_Node_Str"",1.0);
          jo.put(""String_Node_Str"",rel);
          gr.addEdge(key,jo,vFromKey,vToKey,rel);
          rsb.append(R_OK);
          rsb.append(""String_Node_Str"");
          rsb.append(key);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          log.info(""String_Node_Str"");
          log.info(json);
          log.info(""String_Node_Str"");
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(ex.toString());
        }
      }
 else       if (cmd.equals(CMD_DEL)) {
        String key=args[0];
        log.info(""String_Node_Str"" + key);
        rsb.append(R_NOT_IMPL);
      }
 else       if (cmd.equals(CMD_GET)) {
        String key=args[0];
        log.info(""String_Node_Str"" + key);
        JSONObject jo=gr.get(key);
        if (jo == null) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          rsb.append(prepareResult(jo));
          rsb.append(""String_Node_Str"");
          rsb.append(R_DONE);
        }
      }
 else       if (cmd.equals(CMD_Q)) {
        String q=request.substring(request.indexOf(""String_Node_Str"")).trim();
        log.info(""String_Node_Str"" + q);
        List<JSONObject> results=gr.query(q);
        for (        JSONObject jo : results) {
          rsb.append(prepareResult(jo));
          rsb.append(""String_Node_Str"");
        }
        rsb.append(R_DONE);
      }
 else       if (cmd.equals(CMD_SPATH)) {
        String vFromKey=args[0];
        String vToKey=args[1];
        log.info(""String_Node_Str"" + vFromKey + ""String_Node_Str""+ vToKey);
        List<JSONObject> results=gr.getShortestPath(vFromKey,vToKey);
        for (        JSONObject jo : results) {
          rsb.append(prepareResult(jo));
          rsb.append(""String_Node_Str"");
        }
        rsb.append(R_DONE);
      }
 else       if (cmd.equals(CMD_SET)) {
        String key=args[0];
        String attr=args[1];
        String val=args[2];
        log.info(""String_Node_Str"" + key + ""String_Node_Str""+ attr+ ""String_Node_Str""+ val);
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(""String_Node_Str"");
          if (_type.equals(""String_Node_Str"")) {
            JSONVertex jv=gr.getVertex(key);
            jv.put(attr,val);
            gr.indexObject(key,_type,jv);
            rsb.append(R_DONE);
          }
 else           if (_type.equals(""String_Node_Str"")) {
            JSONEdge je=gr.getEdge(key);
            je.put(attr,val);
            gr.indexObject(key,_type,je.asJSONObject());
            rsb.append(R_DONE);
          }
 else {
            rsb.append(R_ERR);
            rsb.append(""String_Node_Str"");
          }
        }
      }
 else       if (cmd.equals(CMD_SPY)) {
        String key=args[0];
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(""String_Node_Str"");
          if (_type.startsWith(""String_Node_Str"")) {
            JSONEdge je=gr.getEdge(key);
            if (null == je) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(je.asJSONObject().toString(4) + ""String_Node_Str"");
              rsb.append(R_DONE);
            }
          }
 else           if (_type.startsWith(""String_Node_Str"")) {
            JSONVertex jv=gr.getVertex(key);
            if (null == jv) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(jv.toString(4) + ""String_Node_Str"");
              rsb.append(R_DONE);
            }
          }
 else {
            rsb.append(R_ERR);
            rsb.append(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (rsb.toString().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + cmd);
    rsb.append(R_UNK);
    rsb.append(""String_Node_Str"");
    rsb.append(cmd);
  }
  rsb.append(""String_Node_Str"");
  log.info(""String_Node_Str"" + rsb.toString());
  return rsb.toString();
}","public String executeRequest(String clientId,String request) throws Exception {
  ConcurrentHashMap<String,String> clientState=clientStateMap.get(clientId);
  StringBuffer rsb=new StringBuffer();
  String cmd=request.substring(0,request.indexOf(""String_Node_Str"")).trim().toLowerCase();
  String[] args=request.substring(request.indexOf(""String_Node_Str"")).trim().split(""String_Node_Str"");
  if (cmd.equals(CMD_USE)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      if (null != clientState.get(ST_DB))       clientState.remove(ST_DB);
      clientState.put(ST_DB,args[0]);
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_CREATE)) {
    if (null != dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.put(args[0],new Graph());
      rsb.append(R_OK);
    }
  }
 else   if (cmd.equals(CMD_DROP)) {
    if (null == dbs.get(args[0])) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      dbs.remove(args[0]);
      rsb.append(R_OK);
    }
  }
 else {
    if (null == clientState.get(ST_DB)) {
      rsb.append(R_ERR);
      rsb.append(""String_Node_Str"");
    }
 else {
      String cldb=clientState.get(ST_DB);
      Graph gr=dbs.get(cldb);
      if (cmd.equals(CMD_EXISTS)) {
        String key=args[0];
        log.info(""String_Node_Str"" + key);
        rsb.append(""String_Node_Str"" + gr.exists(key));
      }
 else       if (cmd.equals(CMD_CVERT)) {
        String key=args[0];
        String json=request.substring(request.indexOf(""String_Node_Str"" + key) + (key.length() + 1)).trim();
        log.info(""String_Node_Str"" + key + ""String_Node_Str""+ json);
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          gr.addVertex(key,jo);
          rsb.append(R_OK);
          rsb.append(""String_Node_Str"");
          rsb.append(key);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          log.info(""String_Node_Str"");
          log.info(json);
          log.info(""String_Node_Str"");
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(ex.toString());
        }
      }
 else       if (cmd.equals(CMD_CEDGE)) {
        String key=args[0];
        String vFromKey=args[1];
        String vToKey=args[2];
        String rel=args[3];
        String json=request.substring(request.indexOf(""String_Node_Str"" + rel) + (rel.length() + 1)).trim();
        log.info(""String_Node_Str"" + key + ""String_Node_Str""+ vFromKey+ ""String_Node_Str""+ vToKey+ ""String_Node_Str""+ rel+ ""String_Node_Str"");
        JSONObject jo=null;
        try {
          jo=new JSONObject(json);
          jo.put(""String_Node_Str"",vFromKey);
          jo.put(""String_Node_Str"",vToKey);
          jo.put(""String_Node_Str"",1.0);
          jo.put(""String_Node_Str"",rel);
          gr.addEdge(key,jo,vFromKey,vToKey,rel);
          rsb.append(R_OK);
          rsb.append(""String_Node_Str"");
          rsb.append(key);
        }
 catch (        org.json.JSONException jsonEx) {
          jsonEx.printStackTrace();
          log.info(""String_Node_Str"");
          log.info(json);
          log.info(""String_Node_Str"");
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
        }
catch (        Exception ex) {
          ex.printStackTrace();
          rsb.append(R_ERR);
          rsb.append(""String_Node_Str"");
          rsb.append(ex.toString());
        }
      }
 else       if (cmd.equals(CMD_DEL)) {
        String key=args[0];
        log.info(""String_Node_Str"" + key);
        rsb.append(R_NOT_IMPL);
      }
 else       if (cmd.equals(CMD_GET)) {
        String key=args[0];
        log.info(""String_Node_Str"" + key);
        JSONObject jo=gr.get(key);
        if (jo == null) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          rsb.append(prepareResult(jo));
          rsb.append(""String_Node_Str"");
          rsb.append(R_DONE);
        }
      }
 else       if (cmd.equals(CMD_Q)) {
        String q=request.substring(request.indexOf(""String_Node_Str"")).trim();
        log.info(""String_Node_Str"" + q);
        List<JSONObject> results=gr.query(q);
        for (        JSONObject jo : results) {
          rsb.append(prepareResult(jo));
          rsb.append(""String_Node_Str"");
        }
        rsb.append(R_DONE);
      }
 else       if (cmd.equals(CMD_SPATH)) {
        String vFromKey=args[0];
        String vToKey=args[1];
        log.info(""String_Node_Str"" + vFromKey + ""String_Node_Str""+ vToKey);
        List<JSONObject> results=gr.getShortestPath(vFromKey,vToKey);
        for (        JSONObject jo : results) {
          rsb.append(prepareResult(jo));
          rsb.append(""String_Node_Str"");
        }
        rsb.append(R_DONE);
      }
 else       if (cmd.equals(CMD_SET)) {
        String key=args[0];
        String attr=args[1];
        String val=args[2];
        log.info(""String_Node_Str"" + key + ""String_Node_Str""+ attr+ ""String_Node_Str""+ val);
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(""String_Node_Str"");
          if (_type.equals(""String_Node_Str"")) {
            JSONVertex jv=gr.getVertex(key);
            jv.put(attr,val);
            gr.indexObject(key,_type,jv.getJSONObject(""String_Node_Str""));
            rsb.append(R_DONE);
          }
 else           if (_type.equals(""String_Node_Str"")) {
            JSONEdge je=gr.getEdge(key);
            je.put(attr,val);
            gr.indexObject(key,_type,je.asJSONObject().getJSONObject(""String_Node_Str""));
            rsb.append(R_DONE);
          }
 else {
            rsb.append(R_ERR);
            rsb.append(""String_Node_Str"");
          }
        }
      }
 else       if (cmd.equals(CMD_SPY)) {
        String key=args[0];
        JSONObject obj=gr.get(key);
        if (null == obj) {
          rsb.append(R_NOT_FOUND);
        }
 else {
          String _type=obj.getString(""String_Node_Str"");
          if (_type.startsWith(""String_Node_Str"")) {
            JSONEdge je=gr.getEdge(key);
            if (null == je) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(je.asJSONObject().toString(4) + ""String_Node_Str"");
              rsb.append(R_DONE);
            }
          }
 else           if (_type.startsWith(""String_Node_Str"")) {
            JSONVertex jv=gr.getVertex(key);
            if (null == jv) {
              rsb.append(R_NOT_FOUND);
            }
 else {
              rsb.append(jv.toString(4) + ""String_Node_Str"");
              rsb.append(R_DONE);
            }
          }
 else {
            rsb.append(R_ERR);
            rsb.append(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (rsb.toString().equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + cmd);
    rsb.append(R_UNK);
    rsb.append(""String_Node_Str"");
    rsb.append(cmd);
  }
  rsb.append(""String_Node_Str"");
  log.info(""String_Node_Str"" + rsb.toString());
  return rsb.toString();
}",0.9954369469026548
39473,"/** 
 * Start the playback. This function goes through an infinite loop (until it is stopped using the stop() method). The matrix of samples and beats is divided by the number of beats. On each iteration, a BPM callback is sent back to the objects that were registered on the OnBPMListener().
 */
public void play(){
  playback=new Runnable(){
    int count=0;
    public void run(){
      if (mOnBPMListener != null)       mOnBPMListener.onBPM(count);
      while (playing) {
        long millis=System.currentTimeMillis();
        for (int i=0; i < rows; i++)         if (matrix[i][count] != 0)         sound.play(samples[i],100,100,1,0,1);
        count=(count + 1) % beats;
        long next=(60 * 1000) / bpm;
        try {
          Thread.sleep(next - (System.currentTimeMillis() - millis));
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  playing=true;
  Thread thandler=new Thread(playback);
  thandler.start();
}","/** 
 * Start the playback. This function goes through an infinite loop (until it is stopped using the stop() method). The matrix of samples and beats is divided by the number of beats. On each iteration, a BPM callback is sent back to the objects that were registered on the OnBPMListener().
 */
public void play(){
  playback=new Runnable(){
    int count=0;
    public void run(){
      while (playing) {
        if (mOnBPMListener != null)         mOnBPMListener.onBPM(count);
        long millis=System.currentTimeMillis();
        for (int i=0; i < rows; i++)         if (matrix[i][count] != 0)         sound.play(samples[i],100,100,1,0,1);
        count=(count + 1) % beats;
        long next=(60 * 1000) / bpm;
        try {
          Thread.sleep(next - (System.currentTimeMillis() - millis));
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  playing=true;
  Thread thandler=new Thread(playback);
  thandler.start();
}",0.9737638748738648
39474,"public void run(){
  if (mOnBPMListener != null)   mOnBPMListener.onBPM(count);
  while (playing) {
    long millis=System.currentTimeMillis();
    for (int i=0; i < rows; i++)     if (matrix[i][count] != 0)     sound.play(samples[i],100,100,1,0,1);
    count=(count + 1) % beats;
    long next=(60 * 1000) / bpm;
    try {
      Thread.sleep(next - (System.currentTimeMillis() - millis));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","public void run(){
  while (playing) {
    if (mOnBPMListener != null)     mOnBPMListener.onBPM(count);
    long millis=System.currentTimeMillis();
    for (int i=0; i < rows; i++)     if (matrix[i][count] != 0)     sound.play(samples[i],100,100,1,0,1);
    count=(count + 1) % beats;
    long next=(60 * 1000) / bpm;
    try {
      Thread.sleep(next - (System.currentTimeMillis() - millis));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9535864978902954
39475,"@Override public void validate() throws ConfigurationException {
  super.validate();
  Validate.configurationDirectoryExists(catalinaHome,""String_Node_Str"" + ""String_Node_Str"" + catalinaHome + ""String_Node_Str"");
  Validate.configurationDirectoryExists(javaHome,""String_Node_Str"" + ""String_Node_Str"" + javaHome + ""String_Node_Str"");
  Validate.isValidFile(catalinaHome + ""String_Node_Str"" + serverConfig,""String_Node_Str"" + catalinaHome + ""String_Node_Str""+ serverConfig+ ""String_Node_Str"");
  this.setOutputToConsole(AccessController.doPrivileged(new PrivilegedAction<Boolean>(){
    @Override public Boolean run(){
      final String val=System.getProperty(""String_Node_Str"");
      return val == null || !""String_Node_Str"".equals(val);
    }
  }
));
}","@Override public void validate() throws ConfigurationException {
  super.validate();
  Validate.configurationDirectoryExists(catalinaHome,""String_Node_Str"" + ""String_Node_Str"" + catalinaHome + ""String_Node_Str"");
  Validate.configurationDirectoryExists(javaHome,""String_Node_Str"" + ""String_Node_Str"" + javaHome + ""String_Node_Str"");
  Validate.isValidFile(getCatalinaBase() + ""String_Node_Str"" + serverConfig,""String_Node_Str"" + getCatalinaBase() + ""String_Node_Str""+ serverConfig+ ""String_Node_Str"");
  this.setOutputToConsole(AccessController.doPrivileged(new PrivilegedAction<Boolean>(){
    @Override public Boolean run(){
      final String val=System.getProperty(""String_Node_Str"");
      return val == null || !""String_Node_Str"".equals(val);
    }
  }
));
}",0.9235836627140976
39476,"@Override public ContainerMethodExecutor deploy(Context context,Archive<?> archive) throws DeploymentException {
  if (archive instanceof WebArchive) {
    ArchivePath sunWebXmlPath=ArchivePaths.create(""String_Node_Str"");
    if (!archive.contains(sunWebXmlPath)) {
      ((WebArchive)archive).addWebResource(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return super.deploy(context,archive);
}","@Override public ContainerMethodExecutor deploy(Context context,Archive<?> archive) throws DeploymentException {
  if (WebArchive.class.isInstance(archive)) {
    ArchivePath sunWebXmlPath=ArchivePaths.create(""String_Node_Str"");
    if (!archive.contains(sunWebXmlPath)) {
      ((WebArchive)archive).addWebResource(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return super.deploy(context,archive);
}",0.9439601494396016
39477,"@Override public ContainerMethodExecutor deploy(Context context,Archive<?> archive) throws DeploymentException {
  if (WebArchive.class.isInstance(archive)) {
    ArchivePath sunWebXmlPath=ArchivePaths.create(""String_Node_Str"");
    if (!archive.contains(sunWebXmlPath)) {
      ((WebArchive)archive).addWebResource(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return super.deploy(context,archive);
}","@Override public ContainerMethodExecutor deploy(Context context,Archive<?> archive) throws DeploymentException {
  if (WebArchive.class.isInstance(archive)) {
    ArchivePath sunWebXmlPath=ArchivePaths.create(""String_Node_Str"");
    if (!archive.contains(sunWebXmlPath)) {
      WebArchive.class.cast(archive).addWebResource(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return super.deploy(context,archive);
}",0.9816849816849816
39478,"public static <T>ClassExecutorWithInput<T> classExecutorWithInput(Class<T> applyingClass,Object... constructorParameters){
  return new FunkyExecutorWithInput<T>(classExecutor(applyingClass,constructorParameters));
}","public static <T>ClassExecutorWithInput<T> classExecutorWithInput(Class<T> applyingClass,Object... constructorArguments){
  return new FunkyExecutorWithInput<T>(classExecutor(applyingClass,constructorArguments));
}",0.9395348837209302
39479,"public static <T>ClassExecutor<T> classExecutor(Class<T> applyingClass,Object... constructorParameters){
  return new FunkyExecutor<T>(applyingClass,constructorParameters);
}","/** 
 * @param constructorArguments if you want the  {@link ClassExecutor} to be serialized, allconstructorArguments elements should be  {@link Serializable}.
 */
public static <T>ClassExecutor<T> classExecutor(Class<T> applyingClass,Object... constructorArguments){
  return new FunkyExecutor<T>(applyingClass,constructorArguments);
}",0.6129666011787819
39480,"FunkyExecutor(Class<T> applyingClass,Object... constructorArguments){
  constructor=extractConstructor(applyingClass);
  constructionArguments=extractConstructionArguments(constructor,constructorArguments);
}","/** 
 * @param constructorArguments if you want the  {@link ClassExecutor} to be serialized, allconstructorArguments elements should be  {@link Serializable}.
 */
FunkyExecutor(Class<T> applyingClass,Object... constructorArguments){
  this.applyingClass=applyingClass;
  constructor=extractConstructor(applyingClass);
  constructionArguments=extractConstructionArguments(constructor,constructorArguments);
}",0.6764227642276422
39481,"@Override public String toString(){
  return getClass().getSimpleName() + ""String_Node_Str"";
}","@Override public String toString(){
  return executor.getClassSimpleName() + ""String_Node_Str"";
}",0.9214659685863874
39482,"@Test(expected=IllegalArgumentException.class) public void invalidInput(){
class NotFortyTwo extends Const<String> {
{
      if (""String_Node_Str"".equals(t))       invalid(""String_Node_Str"");
    }
  }
  List<String> list=Lists.newArrayList();
  Collection<String> strings=Constraints.constrainedCollection(list,withConst(NotFortyTwo.class));
  strings.add(""String_Node_Str"");
}","@Test(expected=IllegalArgumentException.class) public void invalidInput(){
  strings.add(""String_Node_Str"");
}",0.4508196721311475
39483,"@Test public void validInput(){
class NotFortyTwo extends Const<String> {
{
      if (""String_Node_Str"".equals(t))       invalid(""String_Node_Str"");
    }
  }
  List<String> list=Lists.newArrayList();
  Collection<String> strings=Constraints.constrainedCollection(list,withConst(NotFortyTwo.class));
  strings.add(""String_Node_Str"");
}","@Test public void validInput(){
  strings.add(""String_Node_Str"");
}",0.3333333333333333
39484,"public Func(){
  f=FunkyExecutorWithInput.getThreadLocalParameter();
}","public Func(){
  f=FunkyExecutorWithInput.<From>getThreadLocalParameter();
}",0.958904109589041
39485,"public Pred(){
  t=FunkyExecutorWithInput.getThreadLocalParameter();
}","public Pred(){
  t=FunkyExecutorWithInput.<T>getThreadLocalParameter();
}",0.9790209790209792
39486,"@Test public void testThrows(){
class Fails extends Comp<Object> {
{
      r=42 / 0;
    }
  }
  try {
    withComp(Fails.class).compare(null,null);
    fail();
  }
 catch (  RuntimeException e) {
    assertTrue(e.getCause() instanceof InvocationTargetException);
    assertTrue(e.getCause().getCause() instanceof ArithmeticException);
  }
}","@Test public void testThrows(){
class Fails extends Comp<Object> {
{
      r=42 / 0;
    }
  }
  try {
    withComp(Fails.class).compare(null,null);
    fail();
  }
 catch (  RuntimeException e) {
    assertTrue(e instanceof ArithmeticException);
  }
}",0.806070826306914
39487,"@Test public void testThrows(){
class Fails extends Func<Object,Integer> {
{
      t=42 / 0;
    }
  }
  try {
    withFunc(Fails.class).apply(null);
    fail();
  }
 catch (  RuntimeException e) {
    assertTrue(e.getCause() instanceof InvocationTargetException);
    assertTrue(e.getCause().getCause() instanceof ArithmeticException);
  }
}","@Test public void testThrows(){
class Fails extends Func<Object,Integer> {
{
      t=42 / 0;
    }
  }
  try {
    withFunc(Fails.class).apply(null);
    fail();
  }
 catch (  RuntimeException e) {
    assertTrue(e instanceof ArithmeticException);
  }
}",0.8067226890756303
39488,"@Test public void testThrows(){
class Fails extends Pred<Object> {
{
      r=42 / 0 > 69;
    }
  }
  try {
    withPred(Fails.class).apply(null);
    fail();
  }
 catch (  RuntimeException e) {
    assertTrue(e.getCause() instanceof InvocationTargetException);
    assertTrue(e.getCause().getCause() instanceof ArithmeticException);
  }
}","@Test public void testThrows(){
class Fails extends Pred<Object> {
{
      r=42 / 0 > 69;
    }
  }
  try {
    withPred(Fails.class).apply(null);
    fail();
  }
 catch (  RuntimeException e) {
    assertTrue(e instanceof ArithmeticException);
  }
}",0.8047538200339559
39489,"protected Stopped(StoppedAnimationFactory factory,BaseMovement movement) throws SlickException {
  String movementName=movement.toString();
  name=""String_Node_Str"" + movementName;
  factory.from(movementName,MOVEMENT_ANIMATION_DELAY);
}","protected Stopped(StoppedAnimationFactory factory,BaseMovement movement) throws SlickException {
  name=""String_Node_Str"" + movement.name();
  factory.from(movement.name(),MOVEMENT_ANIMATION_DELAY);
}",0.851258581235698
39490,"public void move(){
  currentCollisionPolygon=currentMovement.move(currentCollisionPolygon,SPEED);
}","public void move(){
  currentMovement=movementStrategy.availableMovement(currentCollisionPolygon,SPEED);
  currentCollisionPolygon=currentMovement.move(currentCollisionPolygon,SPEED);
}",0.7017543859649122
39491,"public void updateDirection(Movement movement){
  currentMovement=movementStrategy.next(movement,currentCollisionPolygon,SPEED);
}","public void updateDirection(Movement movement){
  movementStrategy.update(movement,currentCollisionPolygon,SPEED);
}",0.902439024390244
39492,"public PacMan from(CollisionPolygon collisionPolygon,Board board) throws SlickException {
  movementBuilder.buildMovements();
  return new PacMan(collisionPolygon,new BufferedMovementStrategy(board,movementBuilder.defaultMovement(),new NullMovement()),board);
}","public PacMan from(CollisionPolygon collisionPolygon,Board board) throws SlickException {
  movementBuilder.buildMovements();
  return new PacMan(collisionPolygon,new BufferedMovementStrategy(board,movementBuilder,new NullMovement()),board);
}",0.9642857142857144
39493,"public Down(AnimationFactory animationFactory) throws SlickException {
  super(animationFactory);
}","public Down(MovementAnimationFactory animationFactory) throws SlickException {
  super(""String_Node_Str"",animationFactory);
}",0.8839285714285714
39494,"public Left(AnimationFactory animationFactory) throws SlickException {
  super(animationFactory);
}","public Left(MovementAnimationFactory animationFactory) throws SlickException {
  super(""String_Node_Str"",animationFactory);
}",0.8839285714285714
39495,"protected Movement(){
}","public Movement(String name,MovementAnimationFactory animationFactory) throws SlickException {
  this.name=name;
  animation=animationFactory.from(name,ANIMATION_DELAY);
}",0.1649484536082474
39496,"public void buildMovements() throws SlickException {
  animationFactory=new AnimationFactory();
  defaultDirection=new Left(animationFactory);
  movements=new HashMap<Integer,Movement>();
  movements.put(KEY_DOWN,new Down(animationFactory));
  movements.put(KEY_UP,new Up(animationFactory));
  movements.put(KEY_RIGHT,new Right(animationFactory));
  movements.put(KEY_LEFT,defaultDirection);
}","public void buildMovements() throws SlickException {
  MovementAnimationFactory animationFactory=new MovementAnimationFactory();
  Left left=new Left(animationFactory);
  Down down=new Down(animationFactory);
  Up up=new Up(animationFactory);
  Right right=new Right(animationFactory);
  defaultDirection=left;
  movements=new HashMap<Integer,Movement>();
  movements.put(KEY_DOWN,down);
  movements.put(KEY_UP,up);
  movements.put(KEY_RIGHT,right);
  movements.put(KEY_LEFT,left);
  stoppedMovements=new HashMap<Movement,Stopped>();
  StoppedAnimationFactory stoppedFactory=new StoppedAnimationFactory();
  stoppedMovements.put(up,new Stopped(stoppedFactory,up));
  stoppedMovements.put(down,new Stopped(stoppedFactory,down));
  stoppedMovements.put(right,new Stopped(stoppedFactory,right));
  stoppedMovements.put(left,new Stopped(stoppedFactory,left));
}",0.4416
39497,"public Right(AnimationFactory animationFactory) throws SlickException {
  super(animationFactory);
}","public Right(MovementAnimationFactory animationFactory) throws SlickException {
  super(""String_Node_Str"",animationFactory);
}",0.8849557522123894
39498,"public Up(AnimationFactory animationFactory) throws SlickException {
  super(animationFactory);
}","public Up(MovementAnimationFactory animationFactory) throws SlickException {
  super(""String_Node_Str"",animationFactory);
}",0.8818181818181818
39499,"public Animation from(Movement movement,Integer delay,boolean stopped) throws SlickException {
  String prefix=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ movement+ File.separator+ ""String_Node_Str""+ movement+ ""String_Node_Str"";
  String extension=""String_Node_Str"";
  List<String> paths=new ArrayList<String>();
  if (stopped) {
    paths.add(prefix + 1 + extension);
  }
 else {
    for (int i=0; i < TOTAL_MOVEMENT_FRAMES; i++) {
      paths.add(prefix + i + extension);
    }
  }
  return from(paths,delay);
}","public Animation from(List<String> paths,Integer delay) throws SlickException {
  Image[] frames=new Image[paths.size()];
  for (int i=0; i < frames.length; i++) {
    frames[i]=new Image(paths.get(i));
  }
  return new Animation(frames,delay);
}",0.3303684879288437
39500,"public MovementBuilder(){
}","public MovementBuilder(){
  this.nullMovement=new NullMovement();
}",0.574468085106383
39501,"protected Stopped(StoppedAnimationFactory factory,BaseMovement movement) throws SlickException {
  name=""String_Node_Str"" + movement.name();
  factory.from(movement.name(),MOVEMENT_ANIMATION_DELAY);
}","protected Stopped(StoppedAnimationFactory factory,BaseMovement movement) throws SlickException {
  name=""String_Node_Str"" + movement.name();
  animation=factory.from(movement.name(),MOVEMENT_ANIMATION_DELAY);
}",0.975609756097561
39502,"@Override public Animation getAnimation(){
  return null;
}","@Override public Animation getAnimation(){
  return animation;
}",0.9105691056910568
39503,"@Override public Movement availableMovement(CollisionPolygon collisionPolygon,Float speed){
  if (bufferedMovement.canMove(collisionPolygon,speed,board)) {
    currentMovement=bufferedMovement;
    bufferedMovement=new NullMovement();
    return currentMovement;
  }
 else   if (currentMovement.canMove(collisionPolygon,speed,board)) {
    return currentMovement;
  }
  return movementBuilder.stoppedFrom(currentMovement);
}","@Override public Movement availableMovement(CollisionPolygon collisionPolygon,Float speed){
  if (bufferedMovement.canMove(collisionPolygon,speed,board)) {
    currentMovement=bufferedMovement;
    bufferedMovement=new NullMovement();
    return currentMovement;
  }
 else   if (currentMovement.canMove(collisionPolygon,speed,board)) {
    return currentMovement;
  }
  bufferedMovement=new NullMovement();
  return movementBuilder.stoppedFrom(currentMovement);
}",0.9560315670800452
39504,"@Test public void shouldReturnStoppedCorrespondenceIfCantMoveAnywhere() throws Exception {
  Stopped stopped=mock(Stopped.class);
  when(bufferedMovement.canMove(collisionPolygon,speed,board)).thenReturn(false);
  when(currentMovement.canMove(collisionPolygon,speed,board)).thenReturn(false);
  when(movementBuilder.stoppedFrom(currentMovement)).thenReturn(stopped);
  Movement result=movementStrategy.availableMovement(collisionPolygon,speed);
  assertSame(stopped,result);
}","@Test public void shouldReturnStoppedCorrespondenceIfCantMoveAnywhere() throws Exception {
  Stopped stopped=mock(Stopped.class);
  when(bufferedMovement.canMove(collisionPolygon,speed,board)).thenReturn(false);
  when(currentMovement.canMove(collisionPolygon,speed,board)).thenReturn(false);
  when(movementBuilder.stoppedFrom(currentMovement)).thenReturn(stopped);
  Movement result=movementStrategy.availableMovement(collisionPolygon,speed);
  assertSame(stopped,result);
  assertTrue(movementStrategy.bufferedMovement instanceof NullMovement);
}",0.928780487804878
39505,"public PacMan(CollisionPolygon collisionPolygon,Direction direction,Board board){
  currentCollisionPolygon=collisionPolygon;
  currentDirection=direction;
  bufferedDirection=direction;
  this.board=board;
}","public PacMan(CollisionPolygon collisionPolygon,Direction direction,Board board){
  currentCollisionPolygon=collisionPolygon;
  currentDirection=direction;
  bufferedDirection=new NullDirection();
  this.board=board;
}",0.9342723004694836
39506,"public void move(){
  if (bufferedDirection.canMove(currentCollisionPolygon,SPEED,board)) {
    currentCollisionPolygon=bufferedDirection.move(currentCollisionPolygon,SPEED);
    currentDirection=bufferedDirection;
  }
 else   if (currentDirection.canMove(currentCollisionPolygon,SPEED,board)) {
    currentCollisionPolygon=currentDirection.move(currentCollisionPolygon,SPEED);
  }
}","public void move(){
  if (bufferedDirection.canMove(currentCollisionPolygon,SPEED,board)) {
    currentCollisionPolygon=bufferedDirection.move(currentCollisionPolygon,SPEED);
    currentDirection=bufferedDirection;
    bufferedDirection=new NullDirection();
  }
 else   if (currentDirection.canMove(currentCollisionPolygon,SPEED,board)) {
    currentCollisionPolygon=currentDirection.move(currentCollisionPolygon,SPEED);
  }
}",0.946847960444994
39507,"@Test public void shouldMoveToBufferedIfPossible() throws Exception {
  CollisionPolygon movedCollisionPolygon=mock(CollisionPolygon.class);
  Direction bufferedDirection=mock(Direction.class);
  pacMan.bufferedDirection=bufferedDirection;
  when(bufferedDirection.canMove(collisionPolygon,PacMan.SPEED,board)).thenReturn(true);
  when(bufferedDirection.move(collisionPolygon,PacMan.SPEED)).thenReturn(movedCollisionPolygon);
  pacMan.move();
  verify(bufferedDirection).canMove(collisionPolygon,PacMan.SPEED,board);
  verify(bufferedDirection).move(collisionPolygon,PacMan.SPEED);
  assertSame(pacMan.currentCollisionPolygon,movedCollisionPolygon);
  assertSame(pacMan.currentDirection,bufferedDirection);
}","@Test public void shouldMoveToBufferedIfPossible() throws Exception {
  CollisionPolygon movedCollisionPolygon=mock(CollisionPolygon.class);
  Direction bufferedDirection=mock(Direction.class);
  pacMan.bufferedDirection=bufferedDirection;
  when(bufferedDirection.canMove(collisionPolygon,PacMan.SPEED,board)).thenReturn(true);
  when(bufferedDirection.move(collisionPolygon,PacMan.SPEED)).thenReturn(movedCollisionPolygon);
  pacMan.move();
  verify(bufferedDirection).canMove(collisionPolygon,PacMan.SPEED,board);
  verify(bufferedDirection).move(collisionPolygon,PacMan.SPEED);
  assertSame(pacMan.currentCollisionPolygon,movedCollisionPolygon);
  assertSame(pacMan.currentDirection,bufferedDirection);
  assertTrue(pacMan.bufferedDirection instanceof NullDirection);
}",0.9561107359891964
39508,"@Test public void shouldSetCurrentDirectionAsDefault() throws Exception {
  assertSame(initialDirection,pacMan.currentDirection);
}","@Test public void shouldSetCurrentDirectionAsDefault() throws Exception {
  assertSame(initialDirection,pacMan.currentDirection);
  assertTrue(pacMan.bufferedDirection instanceof NullDirection);
}",0.8012232415902141
39509,"public PacMan create() throws SlickException {
  Map<Direction,Animation> animationMap=new HashMap<Direction,Animation>();
  animationMap.put(DOWN,animationFactory.createFromPath(70,createPathsFrom(DOWN)));
  animationMap.put(UP,animationFactory.createFromPath(70,createPathsFrom(UP)));
  animationMap.put(LEFT,animationFactory.createFromPath(70,createPathsFrom(LEFT)));
  animationMap.put(RIGHT,animationFactory.createFromPath(70,createPathsFrom(RIGHT)));
  return new PacMan(new SquarePolygon(25,25,25),animationMap,RIGHT);
}","public PacMan create() throws SlickException {
  Map<Direction,Animation> animationMap=new HashMap<Direction,Animation>();
  animationMap.put(DOWN,animationFactory.createFromPath(70,createPathsFrom(DOWN)));
  animationMap.put(UP,animationFactory.createFromPath(70,createPathsFrom(UP)));
  animationMap.put(LEFT,animationFactory.createFromPath(70,createPathsFrom(LEFT)));
  animationMap.put(RIGHT,animationFactory.createFromPath(70,createPathsFrom(RIGHT)));
  return new PacMan(new SquarePolygon(24.5f,24.5f,26f),animationMap,RIGHT);
}",0.9915174363807728
39510,"public List<Block> from(TiledMap map){
  Integer blockWidth=map.getTileWidth();
  Integer width=map.getWidth();
  Integer height=map.getHeight();
  List<Block> blocks=new ArrayList<Block>();
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      int tileId=map.getTileId(x,y,COLLISION_LAYER);
      if (Boolean.valueOf(map.getTileProperty(tileId,COLLIDABLE,DEFAULT_COLLIDABLE_VALUE))) {
        blocks.add(new Block(new SquarePolygon(x * blockWidth,y * blockWidth,blockWidth)));
      }
    }
  }
  return blocks;
}","public List<Block> from(TiledMap map){
  Integer blockWidth=map.getTileWidth();
  Integer width=map.getWidth();
  Integer height=map.getHeight();
  List<Block> blocks=new ArrayList<Block>();
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      int tileId=map.getTileId(x,y,COLLISION_LAYER);
      if (isCollidable(map,tileId)) {
        blocks.add(new Block(new SquarePolygon((float)x * blockWidth,(float)y * blockWidth,(float)blockWidth)));
      }
    }
  }
  return blocks;
}",0.8835418671799807
39511,"private float[] createPoints(Integer x,Integer y,Integer width){
  Integer endingX=width - 1;
  Integer endingY=endingX;
  return new float[]{x,y,x + endingX,y,x + endingX,y + endingY,x,y + endingY};
}","private float[] createPoints(Float x,Float y,Float width){
  Float endingX=width - 1;
  Float endingY=endingX;
  return new float[]{x,y,x + endingX,y,x + endingX,y + endingY,x,y + endingY};
}",0.8724489795918368
39512,"private void draw(Renderable renderable,Graphics g,Integer x,Integer y){
  g.pushTransform();
  g.translate(x,y);
  renderable.draw(g);
  g.popTransform();
}","private void draw(Renderable renderable,Graphics g,Float x,Float y){
  g.pushTransform();
  g.translate(x,y);
  renderable.draw(g);
  g.popTransform();
}",0.935483870967742
39513,"@Override public void render(Renderable renderable,Graphics g){
  Point position=renderable.getPosition();
  draw(renderable,g,position.getX(),position.getY());
}","@Override public void render(Renderable renderable,Graphics g){
  Point position=renderable.getPosition();
  draw(renderable,g,(float)position.getX(),(float)position.getY());
}",0.9585798816568049
39514,"@Test public void shouldCreateSquarePolygon() throws Exception {
  int x=10;
  int y=20;
  int width=25;
  SquarePolygon square=new SquarePolygon(x,y,width);
  Polygon expectedPolygon=new Polygon(new float[]{x,y,x + width - 1,y,x + width - 1,y + width - 1,x,y + width - 1});
  Polygon actualPolygon=square.getPolygon();
  assertEquals(expectedPolygon.getPointCount(),actualPolygon.getPointCount());
  assertTrue(actualPolygon.closed());
  validatePolygons(expectedPolygon,actualPolygon);
}","@Test public void shouldCreateSquarePolygon() throws Exception {
  float x=10f;
  float y=20f;
  float width=25f;
  SquarePolygon square=new SquarePolygon(x,y,width);
  Polygon expectedPolygon=new Polygon(new float[]{x,y,x + width - 1,y,x + width - 1,y + width - 1,x,y + width - 1});
  Polygon actualPolygon=square.getPolygon();
  assertEquals(expectedPolygon.getPointCount(),actualPolygon.getPointCount());
  assertTrue(actualPolygon.closed());
  validatePolygons(expectedPolygon,actualPolygon);
}",0.9625126646403244
39515,"@Test public void shouldDrawItSelf() throws Exception {
  SquarePolygon squarePolygon=new SquarePolygon(0,0,10);
  Graphics g=mock(Graphics.class);
  squarePolygon.draw(g);
  verify(g).draw(eq(squarePolygon.getPolygon()));
}","@Test public void shouldDrawItSelf() throws Exception {
  SquarePolygon squarePolygon=new SquarePolygon(0f,0f,10f);
  Graphics g=mock(Graphics.class);
  squarePolygon.draw(g);
  verify(g).draw(eq(squarePolygon.getPolygon()));
}",0.9933481152993348
39516,"@Test public void shouldReturnCurrentPosition() throws Exception {
  Renderable squarePolygon=new SquarePolygon(2,1,10);
  assertEquals(2,squarePolygon.getPosition().getX());
  assertEquals(1,squarePolygon.getPosition().getY());
}","@Test public void shouldReturnCurrentPosition() throws Exception {
  Renderable squarePolygon=new SquarePolygon(2f,1f,10f);
  assertEquals(2,squarePolygon.getPosition().getX(),1);
  assertEquals(1,squarePolygon.getPosition().getY(),1);
}",0.9764453961456104
39517,"@Test public void shouldTranslateObjectBeforeRendering() throws Exception {
  Graphics g=mock(Graphics.class);
  Renderer renderer=new DefaultRenderer();
  Renderable renderable=mock(Renderable.class);
  Point point=new Point(10,10);
  when(renderable.getPosition()).thenReturn(point);
  renderer.render(renderable,g);
  verify(g).pushTransform();
  verify(g).translate(point.getX(),point.getY());
  verify(renderable).draw(g);
  verify(g).popTransform();
}","@Test public void shouldTranslateObjectBeforeRendering() throws Exception {
  Graphics g=mock(Graphics.class);
  Renderer renderer=new DefaultRenderer();
  Renderable renderable=mock(Renderable.class);
  Point point=new Point(10,10);
  when(renderable.getPosition()).thenReturn(point);
  renderer.render(renderable,g);
  verify(g).pushTransform();
  verify(g).translate((float)point.getX(),(float)point.getY());
  verify(renderable).draw(g);
  verify(g).popTransform();
}",0.9849137931034484
39518,"@Test public void shouldTranslateObjectWithGivenSpeedBeforeRendering() throws Exception {
  Graphics g=mock(Graphics.class);
  Renderer renderer=new DefaultRenderer();
  Renderable renderable=mock(Renderable.class);
  Point point=new Point(10,10);
  when(renderable.getPosition()).thenReturn(point);
  renderer.render(renderable,g);
  verify(g).pushTransform();
  verify(g).translate(point.getX(),point.getY());
  verify(renderable).draw(g);
  verify(g).popTransform();
}","@Test public void shouldTranslateObjectWithGivenSpeedBeforeRendering() throws Exception {
  Graphics g=mock(Graphics.class);
  Renderer renderer=new DefaultRenderer();
  Renderable renderable=mock(Renderable.class);
  Point point=new Point(10,10);
  when(renderable.getPosition()).thenReturn(point);
  renderer.render(renderable,g);
  verify(g).pushTransform();
  verify(g).translate((float)point.getX(),(float)point.getY());
  verify(renderable).draw(g);
  verify(g).popTransform();
}",0.9853556485355648
39519,"public List<Block> from(TiledMap map){
  Integer blockWidth=map.getTileWidth();
  Integer width=map.getWidth();
  Integer height=map.getHeight();
  List<Block> blocks=new ArrayList<Block>();
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      int tileId=map.getTileId(x,y,COLLISION_LAYER);
      if (Boolean.valueOf(map.getTileProperty(tileId,""String_Node_Str"",""String_Node_Str""))) {
        blocks.add(new Block(new SquarePolygon(x * blockWidth,y * blockWidth,blockWidth)));
      }
    }
  }
  return blocks;
}","public List<Block> from(TiledMap map){
  Integer blockWidth=map.getTileWidth();
  Integer width=map.getWidth();
  Integer height=map.getHeight();
  List<Block> blocks=new ArrayList<Block>();
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      int tileId=map.getTileId(x,y,COLLISION_LAYER);
      if (Boolean.valueOf(map.getTileProperty(tileId,COLLIDABLE,DEFAULT_COLLIDABLE_VALUE))) {
        blocks.add(new Block(new SquarePolygon(x * blockWidth,y * blockWidth,blockWidth)));
      }
    }
  }
  return blocks;
}",0.9385474860335196
39520,"public static void main(String[] args) throws Exception {
  String title=""String_Node_Str"";
  DefaultRenderer renderer=new DefaultRenderer();
  BoardFactory boardFactory=new BoardFactory(new MapFactory(),new BlockFactory());
  PacManFactory pacManFactory=new PacManFactory(new AnimationFactory());
  PacManGame pacManGame=new PacManGame(title,pacManFactory,boardFactory,renderer);
  AppGameContainer container=new AppGameContainer(pacManGame);
  container.setDisplayMode(700,775,false);
  container.start();
}","public static void main(String[] args) throws Exception {
  String title=""String_Node_Str"";
  DefaultRenderer renderer=new DefaultRenderer();
  BoardFactory boardFactory=new BoardFactory(new MapFactory(),new BlockFactory());
  PacManFactory pacManFactory=new PacManFactory(new AnimationFactory());
  PacManGame pacManGame=new PacManGame(title,pacManFactory,boardFactory,renderer);
  AppGameContainer container=new AppGameContainer(pacManGame);
  container.setDisplayMode(700,800,false);
  container.start();
}",0.9941060903732808
39521,"@Override public void update(GameContainer gc,int delta) throws SlickException {
  Direction direction=pacMan.currentDirection();
  Direction nextDirection=direction.next(gc.getInput());
  SquarePolygon squarePolygon=pacMan.translate(delta * PacMan.SPEED,nextDirection);
  if (!board.isCollidingWith(squarePolygon.getPolygon())) {
    pacMan.updateCollisionPolygon(squarePolygon);
    pacMan.updateDirection(nextDirection);
  }
}","@Override public void update(GameContainer gc,int delta) throws SlickException {
  updatePacMan(gc,delta);
}",0.37243947858473
39522,"@Test public void shouldSetInitialDirectionAndDrawPacMan() throws Exception {
  Point position=new Point(20,20);
  Polygon polygon=mock(Polygon.class);
  when(squarePolygon.getPosition()).thenReturn(position);
  when(squarePolygon.getPolygon()).thenReturn(polygon);
  pacMan.draw(null);
  verify(leftAnimation).draw(0,0,polygon.getWidth(),polygon.getHeight());
}","@Test public void shouldSetInitialDirectionAndDrawPacMan() throws Exception {
  int x=20;
  int y=30;
  Point position=new Point(x,y);
  Polygon polygon=mock(Polygon.class);
  Graphics g=mock(Graphics.class);
  when(squarePolygon.getPosition()).thenReturn(position);
  when(squarePolygon.getPolygon()).thenReturn(polygon);
  pacMan.draw(g);
  verify(leftAnimation).draw(0,0,polygon.getWidth(),polygon.getHeight());
}",0.8534704370179949
39523,"@Test public void shouldNotMovePacManIfWillColideWithBoard() throws Exception {
  Direction nextDirection=DOWN;
  SquarePolygon collisionPolygon=mock(SquarePolygon.class);
  mockPacManCollision(nextDirection,true,collisionPolygon);
  verify(pacMan,never()).updateCollisionPolygon(eq(collisionPolygon));
  verify(pacMan,never()).updateDirection(eq(nextDirection));
}","@Test public void shouldNotMovePacManIfWillColideWithBoard() throws Exception {
  Direction currentDirection=LEFT;
  int delta=1;
  GameContainer gc=mock(GameContainer.class);
  Input input=mock(Input.class);
  final SquarePolygon collisionPolygon=mock(SquarePolygon.class);
  Polygon polygonForNextDirection=mock(Polygon.class);
  final SquarePolygon collisionPolygonForCurrentDirection=mock(SquarePolygon.class);
  Polygon polygonForCurrentDirection=mock(Polygon.class);
  Answer<SquarePolygon> collisionPolygonAnswer=new Answer<SquarePolygon>(){
    private int invocationCount;
    public SquarePolygon answer(    InvocationOnMock invocation) throws Throwable {
      if (invocationCount == 0) {
        invocationCount++;
        return collisionPolygon;
      }
      return collisionPolygonForCurrentDirection;
    }
  }
;
  when(gc.getInput()).thenReturn(input);
  when(pacMan.currentDirection()).thenReturn(currentDirection);
  when(input.isKeyDown(eq(KEY_DOWN))).thenReturn(true);
  when(pacMan.translate(eq(delta * PacMan.SPEED),any(Direction.class))).thenAnswer(collisionPolygonAnswer);
  when(collisionPolygon.getPolygon()).thenReturn(polygonForNextDirection);
  when(board.isCollidingWith(eq(polygonForNextDirection))).thenReturn(true);
  when(collisionPolygonForCurrentDirection.getPolygon()).thenReturn(polygonForCurrentDirection);
  when(board.isCollidingWith(eq(polygonForCurrentDirection))).thenReturn(false);
  pacManGame.update(gc,delta);
  verify(pacMan).updateCollisionPolygon(eq(collisionPolygonForCurrentDirection));
  verify(pacMan).updateDirection(eq(currentDirection));
}",0.1507128309572301
39524,"@Test public void shouldMovePacManIfWillNotCollideWithBoard() throws Exception {
  Direction nextDirection=DOWN;
  SquarePolygon collisionPolygon=mock(SquarePolygon.class);
  mockPacManCollision(nextDirection,false,collisionPolygon);
  verify(pacMan).updateCollisionPolygon(eq(collisionPolygon));
  verify(pacMan).updateDirection(eq(nextDirection));
}","@Test public void shouldMovePacManIfWillNotCollideWithBoard() throws Exception {
  Direction nextDirection=DOWN;
  SquarePolygon collisionPolygon=mock(SquarePolygon.class);
  int delta=1;
  GameContainer gc=mock(GameContainer.class);
  Input input=mock(Input.class);
  Polygon polygon=mock(Polygon.class);
  when(gc.getInput()).thenReturn(input);
  when(pacMan.currentDirection()).thenReturn(LEFT);
  when(input.isKeyDown(eq(KEY_DOWN))).thenReturn(true);
  when(pacMan.translate(eq(delta * PacMan.SPEED),eq(nextDirection))).thenReturn(collisionPolygon);
  when(collisionPolygon.getPolygon()).thenReturn(polygon);
  when(board.isCollidingWith(eq(polygon))).thenReturn(false);
  pacManGame.update(gc,delta);
  verify(pacMan).updateCollisionPolygon(eq(collisionPolygon));
  verify(pacMan).updateDirection(eq(nextDirection));
}",0.3543441226575809
39525,"protected void doExecute() throws Exception {
  new LangBuilder(langDir,langFile,langCode);
}","protected void doExecute() throws Exception {
  new LangBuilder(langDir,langFile,langPlugin,langTranslate);
}",0.8910891089108911
39526,"protected void copyServicePropertiesFile(){
  File servicePropertiesFile=new File(resourcesDir,""String_Node_Str"");
  if (servicePropertiesFile.exists()) {
    FileUtil.copyFile(servicePropertiesFile,new File(implDir,""String_Node_Str""));
  }
}","protected void copyServicePropertiesFile() throws Exception {
  File servicePropertiesFile=new File(resourcesDir,""String_Node_Str"");
  if (servicePropertiesFile.exists()) {
    FileUtil.copyFile(servicePropertiesFile,new File(implDir,""String_Node_Str""));
  }
}",0.9641434262948207
39527,"public void start() throws LifecycleException {
  if (log.isLoggable(Level.FINER)) {
    log.entering(className,""String_Node_Str"");
  }
  String vmid;
  VirtualMachine wlpvm=null;
  String serviceURL=null;
  try {
    vmid=findVirtualMachineIdByName(containerConfiguration.getServerName());
    if (vmid != null) {
      if (!containerConfiguration.isAllowConnectingToRunningServer())       throw new LifecycleException(""String_Node_Str"");
      wlpvm=VirtualMachine.attach(vmid);
      serviceURL=getVMLocalConnectorAddress(wlpvm);
      if (serviceURL == null)       throw new LifecycleException(""String_Node_Str"");
    }
 else {
      if (containerConfiguration.isAddLocalConnector()) {
        String serverXML=getServerXML();
        if (""String_Node_Str"".equals(containerConfiguration.getServerName()) && !new File(serverXML).exists()) {
          serverXML=getDefaultServerXML();
        }
        Document document=readServerXML(serverXML);
        addFeatures(document,""String_Node_Str"");
        writeServerXML(document,serverXML);
      }
      List<String> cmd=new ArrayList<String>();
      String javaVmArguments=containerConfiguration.getJavaVmArguments();
      cmd.add(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
      if (!javaVmArguments.equals(""String_Node_Str""))       cmd.add(javaVmArguments);
      cmd.add(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      cmd.add(containerConfiguration.getServerName());
      log.finer(""String_Node_Str"" + cmd.toString());
      ProcessBuilder pb=new ProcessBuilder(cmd);
      pb.directory(new File(containerConfiguration.getWlpHome()));
      pb.redirectErrorStream();
      wlpProcess=pb.start();
      new Thread(new ConsoleConsumer()).start();
      final Process proc=wlpProcess;
      shutdownThread=new Thread(new Runnable(){
        @Override public void run(){
          if (proc != null) {
            proc.destroy();
            try {
              proc.waitFor();
            }
 catch (            InterruptedException e) {
              throw new RuntimeException(e);
            }
          }
        }
      }
);
      Runtime.getRuntime().addShutdownHook(shutdownThread);
      int startupTimeout=containerConfiguration.getServerStartTimeout() * 1000;
      while (startupTimeout > 0 && serviceURL == null) {
        startupTimeout-=500;
        Thread.sleep(500);
        int ev=Integer.MIN_VALUE;
        IllegalThreadStateException itse=null;
        try {
          ev=wlpProcess.exitValue();
        }
 catch (        IllegalThreadStateException e) {
          itse=e;
        }
        if (itse == null)         throw new LifecycleException(""String_Node_Str"" + ev);
        if (vmid == null)         vmid=findVirtualMachineIdByName(containerConfiguration.getServerName());
        if (wlpvm == null && vmid != null)         wlpvm=VirtualMachine.attach(vmid);
        if (serviceURL == null && wlpvm != null)         serviceURL=getVMLocalConnectorAddress(wlpvm);
      }
      if (serviceURL == null)       throw new LifecycleException(""String_Node_Str"");
      log.finer(""String_Node_Str"" + vmid);
    }
  }
 catch (  Exception e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
  try {
    JMXServiceURL url=new JMXServiceURL(serviceURL);
    jmxConnector=JMXConnectorFactory.connect(url);
    mbsc=jmxConnector.getMBeanServerConnection();
  }
 catch (  IOException e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
  if (log.isLoggable(Level.FINER)) {
    log.exiting(className,""String_Node_Str"");
  }
}","public void start() throws LifecycleException {
  if (log.isLoggable(Level.FINER)) {
    log.entering(className,""String_Node_Str"");
  }
  String vmid;
  VirtualMachine wlpvm=null;
  String serviceURL=null;
  try {
    vmid=findVirtualMachineIdByName(containerConfiguration.getServerName());
    if (vmid != null) {
      if (!containerConfiguration.isAllowConnectingToRunningServer())       throw new LifecycleException(""String_Node_Str"");
      wlpvm=VirtualMachine.attach(vmid);
      serviceURL=getVMLocalConnectorAddress(wlpvm);
      if (serviceURL == null)       throw new LifecycleException(""String_Node_Str"");
    }
 else {
      if (containerConfiguration.isAddLocalConnector()) {
        String serverXML=getServerXML();
        if (""String_Node_Str"".equals(containerConfiguration.getServerName()) && !new File(serverXML).exists()) {
          serverXML=getDefaultServerXML();
        }
        Document document=readServerXML(serverXML);
        addFeatures(document,""String_Node_Str"");
        writeServerXML(document,serverXML);
      }
      List<String> cmd=new ArrayList<String>();
      String javaVmArguments=containerConfiguration.getJavaVmArguments();
      cmd.add(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      if (!javaVmArguments.equals(""String_Node_Str""))       cmd.add(javaVmArguments);
      cmd.add(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
      cmd.add(containerConfiguration.getServerName());
      log.finer(""String_Node_Str"" + cmd.toString());
      ProcessBuilder pb=new ProcessBuilder(cmd);
      pb.directory(new File(containerConfiguration.getWlpHome()));
      pb.redirectErrorStream(true);
      wlpProcess=pb.start();
      new Thread(new ConsoleConsumer()).start();
      final Process proc=wlpProcess;
      shutdownThread=new Thread(new Runnable(){
        @Override public void run(){
          if (proc != null) {
            proc.destroy();
            try {
              proc.waitFor();
            }
 catch (            InterruptedException e) {
              throw new RuntimeException(e);
            }
          }
        }
      }
);
      Runtime.getRuntime().addShutdownHook(shutdownThread);
      int startupTimeout=containerConfiguration.getServerStartTimeout() * 1000;
      while (startupTimeout > 0 && serviceURL == null) {
        startupTimeout-=500;
        Thread.sleep(500);
        int ev=Integer.MIN_VALUE;
        IllegalThreadStateException itse=null;
        try {
          ev=wlpProcess.exitValue();
        }
 catch (        IllegalThreadStateException e) {
          itse=e;
        }
        if (itse == null)         throw new LifecycleException(""String_Node_Str"" + ev);
        if (vmid == null)         vmid=findVirtualMachineIdByName(containerConfiguration.getServerName());
        if (wlpvm == null && vmid != null)         wlpvm=VirtualMachine.attach(vmid);
        if (serviceURL == null && wlpvm != null)         serviceURL=getVMLocalConnectorAddress(wlpvm);
      }
      if (serviceURL == null)       throw new LifecycleException(""String_Node_Str"");
      log.finer(""String_Node_Str"" + vmid);
    }
  }
 catch (  Exception e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
  try {
    JMXServiceURL url=new JMXServiceURL(serviceURL);
    jmxConnector=JMXConnectorFactory.connect(url);
    mbsc=jmxConnector.getMBeanServerConnection();
  }
 catch (  IOException e) {
    throw new LifecycleException(""String_Node_Str"",e);
  }
  if (log.isLoggable(Level.FINER)) {
    log.exiting(className,""String_Node_Str"");
  }
}",0.994711939883106
39528,"private void waitForApplicationTargetState(String applicationName,boolean targetState,int timeout) throws DeploymentException {
  if (log.isLoggable(Level.FINER)) {
    log.entering(className,""String_Node_Str"");
  }
  ObjectName appMBean=null;
  try {
    appMBean=new ObjectName(""String_Node_Str"" + applicationName);
  }
 catch (  MalformedObjectNameException e) {
    throw new DeploymentException(""String_Node_Str"" + applicationName + ""String_Node_Str"",e);
  }
catch (  NullPointerException e) {
    throw new DeploymentException(""String_Node_Str"",e);
  }
  try {
    int timeleft=timeout * 1000;
    while (mbsc.isRegistered(appMBean) != targetState) {
      Thread.sleep(100);
      if (timeleft <= 0)       throw new DeploymentException(""String_Node_Str"");
      timeleft-=100;
    }
    if (targetState == true) {
      String applicationState=null;
      while (applicationState == null || !applicationState.contentEquals(""String_Node_Str"")) {
        Thread.sleep(100);
        applicationState=(String)mbsc.getAttribute(appMBean,""String_Node_Str"");
        if (timeleft <= 0)         throw new DeploymentException(""String_Node_Str"");
        timeleft-=100;
      }
    }
  }
 catch (  Exception e) {
    throw new DeploymentException(""String_Node_Str"",e);
  }
  if (log.isLoggable(Level.FINER)) {
    log.exiting(className,""String_Node_Str"");
  }
}","private void waitForApplicationTargetState(String applicationName,boolean targetState,int timeout) throws DeploymentException {
  if (log.isLoggable(Level.FINER)) {
    log.entering(className,""String_Node_Str"");
  }
  ObjectName appMBean=null;
  ObjectName listAllApps=null;
  try {
    appMBean=new ObjectName(""String_Node_Str"" + applicationName);
    listAllApps=new ObjectName(""String_Node_Str"");
  }
 catch (  MalformedObjectNameException e) {
    throw new DeploymentException(""String_Node_Str"" + applicationName + ""String_Node_Str"",e);
  }
catch (  NullPointerException e) {
    throw new DeploymentException(""String_Node_Str"",e);
  }
  try {
    int timeleft=timeout * 1000;
    while (mbsc.isRegistered(appMBean) != targetState) {
      Thread.sleep(100);
      if (timeleft <= 0) {
        Set<ObjectInstance> allApps=mbsc.queryMBeans(null,null);
        log.fine(""String_Node_Str"" + allApps.size());
        for (        ObjectInstance app : allApps) {
          log.fine(app.getObjectName().toString());
        }
        throw new DeploymentException(""String_Node_Str"");
      }
      timeleft-=100;
    }
    if (targetState == true) {
      String applicationState=null;
      while (applicationState == null || !applicationState.contentEquals(""String_Node_Str"")) {
        Thread.sleep(100);
        applicationState=(String)mbsc.getAttribute(appMBean,""String_Node_Str"");
        if (timeleft <= 0)         throw new DeploymentException(""String_Node_Str"");
        timeleft-=100;
      }
    }
  }
 catch (  Exception e) {
    throw new DeploymentException(""String_Node_Str"",e);
  }
  if (log.isLoggable(Level.FINER)) {
    log.exiting(className,""String_Node_Str"");
  }
}",0.8771353482260184
39529,"/** 
 * Creates a ContainerComponent object.
 * @param element an Element object containing the Java model element to use.
 * @param container a Container object containing the Container annotation to use.
 */
public ContainerComponent(Element element,Container annotation){
  super(annotation,element);
  setWidgetType(annotation.dojoType());
  setRequiredCss(annotation.requiredCss());
  setDisplayName(annotation.displayName());
  setJsfNode(annotation.jsfNode());
  setRendersChildren(annotation.rendersChildren());
  setIsContainer(annotation.isContainer());
}","/** 
 * Creates a ContainerComponent object.
 * @param element an Element object containing the Java model element to use.
 * @param container a Container object containing the Container annotation to use.
 */
public ContainerComponent(Element element,Container annotation){
  super(annotation,element);
  setWidgetType(annotation.dojoType());
  setRequiredCss(annotation.requiredCss());
  setDisplayName(annotation.displayName());
  setJsfNode(annotation.jsfNode());
  setRendersChildren(annotation.rendersChildren());
  setIsDijitContainer(annotation.isDijitContainer());
}",0.950877192982456
39530,"@Override public final void decode(FacesContext context,UIComponent component){
  PostBackHandler postBackHandler;
  if (!component.isRendered()) {
    return;
  }
  postBackHandler=((DojoWidget)component).getPostBackHandler();
  if (null == postBackHandler) {
    return;
  }
  postBackHandler.retrievePostBackValue(context,component);
}","@Override public final void decode(FacesContext context,UIComponent component){
  PostBackHandler postBackHandler;
  if (!component.isRendered()) {
    return;
  }
  postBackHandler=((DojoWidget)component).getPostBackHandler();
  if (null == postBackHandler) {
    return;
  }
  postBackHandler.retrievePostBackValue(context,component);
  if (component instanceof ClientBehaviorHolder) {
    decodeClientBehaviors(context,component);
  }
}",0.87001287001287
39531,"protected TransitionProperty(String name,String propertyName){
  super(name,propertyName,validValues);
}","public TransitionProperty(String name,String propertyName){
  super(name,propertyName,validValues);
}",0.946341463414634
39532,"public static LibraryService getInstance(){
  return instance;
}","/** 
 * @return instance of LibraryService which is loaded by ServiceLoader
 */
public static LibraryService getInstance(){
  return instance;
}",0.6153846153846154
39533,"public boolean isSet(UIComponent component){
  if (null != component.getValueExpression(name)) {
    return true;
  }
  return (null != Helper.getAttributeValue(component,name));
}","/** 
 * @param component
 * @return true if the attribute is set to a value expression or theattribute value is not null, false otherwise
 */
public boolean isSet(UIComponent component){
  if (null != component.getValueExpression(name)) {
    return true;
  }
  return (null != Helper.getAttributeValue(component,name));
}",0.7171314741035857
39534,"/** 
 * @param script
 * @param eventBehaviors
 * @param behaviorContext
 * @return A javascript function definition for the specified event thatcombines the given eventScript and any ""behavior"" script attached to the event.
 */
protected static String buildFunction(String eventScript,List<ClientBehavior> eventBehaviors,ClientBehaviorContext behaviorContext){
  if ((null != eventScript) && eventScript.isEmpty()) {
    eventScript=null;
  }
  ArrayList<String> behaviorScripts=null;
  if (null != eventBehaviors && !eventBehaviors.isEmpty()) {
    behaviorScripts=new ArrayList<String>(eventBehaviors.size());
    for (    ClientBehavior behavior : eventBehaviors) {
      String script=behavior.getScript(behaviorContext);
      if (null != script) {
        if (!(behavior instanceof BehaviorBase)) {
          UIComponent comp=behaviorContext.getComponent();
          if (comp instanceof DojoWidget) {
            if (comp instanceof ActionSource2) {
              script=script.replaceAll(""String_Node_Str"",""String_Node_Str"" + comp.getClientId() + ""String_Node_Str"");
            }
 else {
              String jsfNode=((DojoWidget)comp).getJsfNode();
              if (jsfNode != null && jsfNode.length() > 0) {
                script=script.replaceAll(""String_Node_Str"",""String_Node_Str"" + jsfNode);
              }
            }
          }
        }
        behaviorScripts.add(script);
      }
    }
  }
  StringBuilder functionDeclaration=new StringBuilder(""String_Node_Str"");
  if ((null != eventScript && (null != behaviorScripts && !behaviorScripts.isEmpty())) || (null != behaviorScripts && behaviorScripts.size() > 1)) {
    functionDeclaration.append(""String_Node_Str"");
    boolean needComma=false;
    if (null != eventScript) {
      functionDeclaration.append(""String_Node_Str"").append(eventScript).append(""String_Node_Str"");
      needComma=true;
    }
    for (    String script : behaviorScripts) {
      if (needComma) {
        functionDeclaration.append(',');
      }
 else {
        needComma=true;
      }
      functionDeclaration.append(""String_Node_Str"").append(script).append(""String_Node_Str"");
    }
    functionDeclaration.append(""String_Node_Str"");
  }
 else   if (null != eventScript) {
    functionDeclaration.append(eventScript);
  }
 else   if (null != behaviorScripts && !behaviorScripts.isEmpty()) {
    functionDeclaration.append(behaviorScripts.get(0));
  }
 else {
    return null;
  }
  functionDeclaration.append('}');
  return functionDeclaration.toString();
}","/** 
 * @param script
 * @param eventBehaviors
 * @param behaviorContext
 * @return A javascript function definition for the specified event thatcombines the given eventScript and any ""behavior"" script attached to the event.
 */
protected static String buildFunction(String eventScript,List<ClientBehavior> eventBehaviors,ClientBehaviorContext behaviorContext){
  if ((null != eventScript) && eventScript.isEmpty()) {
    eventScript=null;
  }
  ArrayList<String> behaviorScripts=null;
  boolean containsAjaxBehavior=false;
  if (null != eventBehaviors && !eventBehaviors.isEmpty()) {
    behaviorScripts=new ArrayList<String>(eventBehaviors.size());
    for (    ClientBehavior behavior : eventBehaviors) {
      String script=behavior.getScript(behaviorContext);
      if (null != script) {
        if (!(behavior instanceof BehaviorBase)) {
          UIComponent comp=behaviorContext.getComponent();
          if (comp instanceof DojoWidget) {
            if (comp instanceof ActionSource2) {
              script=script.replaceAll(""String_Node_Str"",""String_Node_Str"" + comp.getClientId() + ""String_Node_Str"");
            }
 else {
              String jsfNode=((DojoWidget)comp).getJsfNode();
              if (jsfNode != null && jsfNode.length() > 0) {
                script=script.replaceAll(""String_Node_Str"",""String_Node_Str"" + jsfNode);
              }
            }
          }
        }
        if (behavior instanceof AjaxBehavior) {
          containsAjaxBehavior=true;
        }
        behaviorScripts.add(script);
      }
    }
  }
  StringBuilder functionDeclaration=new StringBuilder(""String_Node_Str"");
  if ((null != eventScript && (null != behaviorScripts && !behaviorScripts.isEmpty())) || (null != behaviorScripts && behaviorScripts.size() > 1)) {
    functionDeclaration.append(""String_Node_Str"");
    if (!containsAjaxBehavior) {
      functionDeclaration.append(""String_Node_Str"");
    }
    functionDeclaration.append(""String_Node_Str"");
    boolean needComma=false;
    if (null != eventScript) {
      functionDeclaration.append(""String_Node_Str"").append(eventScript).append(""String_Node_Str"");
      needComma=true;
    }
    for (    String script : behaviorScripts) {
      if (needComma) {
        functionDeclaration.append(',');
      }
 else {
        needComma=true;
      }
      functionDeclaration.append(""String_Node_Str"").append(script).append(""String_Node_Str"");
    }
    functionDeclaration.append(""String_Node_Str"");
  }
 else   if (null != eventScript) {
    functionDeclaration.append(eventScript);
  }
 else   if (null != behaviorScripts && !behaviorScripts.isEmpty()) {
    functionDeclaration.append(behaviorScripts.get(0));
  }
 else {
    return null;
  }
  if (containsAjaxBehavior) {
    functionDeclaration.append(""String_Node_Str"");
  }
  functionDeclaration.append('}');
  return functionDeclaration.toString();
}",0.932961931290622
39535,"/** 
 * @param view to which to add a script block component
 */
public static void addScriptBlockToView(UIViewRoot view){
  FacesContext context=FacesContext.getCurrentInstance();
  PartialViewContext pvContext=context.getPartialViewContext();
  boolean partialUpdate=(null != pvContext) && pvContext.isAjaxRequest();
  DojoScriptBlockComponent sb=null;
  sb=findInitBlockComponent(view.getComponentResources(context,partialUpdate ? BODY_BEGIN : BODY_END));
  if (null == sb) {
    sb=new DojoScriptBlockComponent(DESTROY_BLOCK_ID);
    if (partialUpdate) {
      view.addComponentResource(context,sb,BODY_BEGIN);
      for (      String id : pvContext.getRenderIds()) {
        checkAndAddDestroyScript(sb,view.findComponent(id));
      }
      pvContext.getRenderIds().add(sb.getId());
    }
 else {
      view.addComponentResource(context,sb,BODY_END);
    }
    sb=new DojoScriptBlockComponent(INIT_BLOCK_ID);
    if (partialUpdate) {
      view.addComponentResource(context,sb,BODY_BEGIN);
      pvContext.getRenderIds().add(sb.getId());
    }
 else {
      view.addComponentResource(context,sb,BODY_END);
    }
  }
}","/** 
 * @param view to which to add a script block component
 */
public static void addScriptBlockToView(UIViewRoot view){
  FacesContext context=FacesContext.getCurrentInstance();
  PartialViewContext pvContext=context.getPartialViewContext();
  boolean partialUpdate=(null != pvContext) && pvContext.isAjaxRequest();
  DojoScriptBlockComponent sb=null;
  sb=findInitBlockComponent(view.getComponentResources(context,partialUpdate ? BODY_BEGIN : BODY_END));
  if (null == sb) {
    sb=new DojoScriptBlockComponent(DESTROY_BLOCK_ID);
    if (partialUpdate) {
      view.addComponentResource(context,sb,BODY_BEGIN);
      for (      String id : pvContext.getRenderIds()) {
        checkAndAddDestroyScript(sb,view.findComponent(id));
      }
      pvContext.getRenderIds().add(sb.getId());
    }
 else {
      view.addComponentResource(context,sb,BODY_END);
    }
    LibraryService libraryService=LibraryService.getInstance();
    sb=new DojoScriptBlockComponent(INIT_BLOCK_ID,libraryService.getRequiredDojoModules());
    if (partialUpdate) {
      view.addComponentResource(context,sb,BODY_BEGIN);
      pvContext.getRenderIds().add(sb.getId());
    }
 else {
      view.addComponentResource(context,sb,BODY_END);
    }
  }
}",0.9557446808510638
39536,"public DojoScriptBlockComponent(String id){
  super();
  setId(id);
  if (id.equals(INIT_BLOCK_ID)) {
    getFacesContext().getViewRoot().subscribeToViewEvent(javax.faces.event.PreRenderViewEvent.class,this);
  }
}","public DojoScriptBlockComponent(String id,String[] requires){
  super();
  setId(id);
  if (id.equals(INIT_BLOCK_ID)) {
    getFacesContext().getViewRoot().subscribeToViewEvent(javax.faces.event.PreRenderViewEvent.class,this);
  }
  if (requires != null && requires.length > 0) {
    for (    String requiredModule : requires) {
      addRequires(requiredModule);
    }
  }
}",0.7266553480475382
39537,"/** 
 * Add css file to list of css files to import.
 * @param requiredCss path of required css file
 */
public void addRequiredCss(String requiredCss){
  if (!requiredCssAdded.contains(requiredCss)) {
    styleBlock.append(""String_Node_Str"").append(getLibraryUrlPrefix(getFacesContext())).append(requiredCss).append(""String_Node_Str"");
    requiredCssAdded.add(requiredCss);
  }
}","/** 
 * Add css file to list of css files to import.
 * @param requiredCss path of required css file
 */
public void addRequiredCss(String requiredCss){
  if (!requiredCssAdded.contains(requiredCss)) {
    styleBlock.append(""String_Node_Str"").append(themeHandler.getCssUrl(getFacesContext(),requiredCss)).append(""String_Node_Str"");
    requiredCssAdded.add(requiredCss);
  }
}",0.8639365918097754
39538,"DojoTheme(boolean moveIfNecessary){
  super();
  if (moveIfNecessary) {
    getFacesContext().getViewRoot().subscribeToViewEvent(javax.faces.event.PostAddToViewEvent.class,this);
  }
  getFacesContext().getViewRoot().subscribeToViewEvent(javax.faces.event.PreRenderViewEvent.class,this);
  super.setId(DojoTheme.RESOURCE_ID);
}","DojoTheme(boolean moveIfNecessary){
  super();
  UIViewRoot viewRoot=getFacesContext().getViewRoot();
  if (moveIfNecessary) {
    viewRoot.subscribeToViewEvent(javax.faces.event.PostAddToViewEvent.class,this);
  }
  viewRoot.subscribeToViewEvent(javax.faces.event.PreRenderViewEvent.class,this);
  super.setId(DojoTheme.RESOURCE_ID);
  LibraryService libraryService=LibraryService.getInstance();
  themeHandler=libraryService.getThemeHandler();
  String[] requiredCss=themeHandler.getRequiredCss(getFacesContext());
  if (requiredCss != null && requiredCss.length > 0) {
    DojoStyleComponent styleComponent=DojoStyleComponent.findStyleBlockComponent(viewRoot);
    for (    String css : requiredCss) {
      styleComponent.addRequiredCss(css);
    }
  }
}",0.4
39539,"@Override public void encodeAll(FacesContext context) throws IOException {
  String linkTag=(String)context.getAttributes().get(THEME_LINK);
  if (null == linkTag) {
    String themeName=getName();
    StringBuilder themeCssLink=new StringBuilder(""String_Node_Str"");
    themeCssLink.append(getLibraryUrlPrefix(context)).append(""String_Node_Str"").append(themeName).append('/').append(themeName).append(""String_Node_Str"");
    themeCssLink.append(""String_Node_Str"");
    linkTag=themeCssLink.toString();
    context.getAttributes().put(THEME_LINK,linkTag);
  }
  context.getResponseWriter().write(linkTag);
}","@Override public void encodeAll(FacesContext context) throws IOException {
  String linkTag=(String)context.getAttributes().get(THEME_LINK);
  if (null == linkTag) {
    String themeName=getName();
    StringBuilder themeCssLink=new StringBuilder(""String_Node_Str"");
    themeCssLink.append(themeHandler.getThemeUrl(context,themeName));
    themeCssLink.append(""String_Node_Str"");
    linkTag=themeCssLink.toString();
    context.getAttributes().put(THEME_LINK,linkTag);
  }
  context.getResponseWriter().write(linkTag);
}",0.853852967227635
39540,"@Override public void encodeEnd(FacesContext context,UIComponent component) throws IOException {
  DojoWidget dojoWidget=(DojoWidget)component;
  component.popComponentFromEL(context);
  if (dojoWidget.getWidgetType().isDijit()) {
    String closeTag=dojoWidget.getElement().getElementClose(context,component);
    if (null != closeTag) {
      ResponseWriter writer=context.getResponseWriter();
      writer.write(closeTag);
    }
  }
  addInitScriptToScriptBlock(context,component);
}","@Override public void encodeEnd(FacesContext context,UIComponent component) throws IOException {
  DojoWidget dojoWidget=(DojoWidget)component;
  component.popComponentFromEL(context);
  if (dojoWidget.getWidgetType().isDijit()) {
    String closeTag=dojoWidget.getElement().getElementClose(context,component);
    if (null != closeTag) {
      ResponseWriter writer=context.getResponseWriter();
      writer.write(closeTag);
    }
  }
  addInitScriptToScriptBlock(context,component);
  if (component.getId().equals(context.getAttributes().get(START_UP_CONTAINER_ID))) {
    context.getAttributes().remove(START_UP_CONTAINER_ID);
  }
}",0.8670829616413916
39541,"/** 
 * Add init script to configure the dojo widget.
 * @param facesContext
 */
protected void addInitScriptToScriptBlock(FacesContext facesContext,UIComponent component){
  DojoWidget dojoWidget=(DojoWidget)component;
  StringBuilder widgetPostCreateInitializationScript=new StringBuilder();
  DojoType dojoType=dojoWidget.getWidgetType();
  StringBuilder widgetInitialization=new StringBuilder();
  String varName=null;
  DojoScriptBlockComponent initScriptBlock=DojoScriptBlockComponent.findInitBlockComponent(facesContext.getViewRoot());
  if (dojoWidget.getRenderChildrenType().equals(RendersChildren.YES_USE_ADD_CHILD)) {
    varName=component.getId();
    widgetInitialization.append(""String_Node_Str"").append(varName).append(""String_Node_Str"");
  }
  getWidgetInitializationScript(component,widgetInitialization,widgetPostCreateInitializationScript);
  if (dojoType.isDijit()) {
    if (dojoWidget.getRenderChildrenType().equals(RendersChildren.YES_USE_ADD_CHILD)) {
      widgetInitialization.append(""String_Node_Str"");
      addComponentChildren(initScriptBlock,component,widgetInitialization,widgetPostCreateInitializationScript,varName);
      widgetInitialization.append(varName);
    }
    widgetInitialization.append(""String_Node_Str"");
    initScriptBlock.addWidgetCreateScript(widgetInitialization.toString());
  }
 else {
    StringBuilder widgetCreation=new StringBuilder(DojoScriptBlockComponent.getGlobalReference((DojoWidget)component)).append(""String_Node_Str"").append(widgetInitialization.toString()).append(';');
    initScriptBlock.addCreateGlobalSpaceScript();
    initScriptBlock.addPreWidgetCreateScript(widgetCreation.toString());
  }
  addComponentRequires(initScriptBlock,component);
  if (widgetPostCreateInitializationScript.length() > 0) {
    initScriptBlock.addPostWidgetCreateScript(widgetPostCreateInitializationScript.toString());
  }
}","/** 
 * Add init script to configure the dojo widget.
 * @param facesContext
 */
protected void addInitScriptToScriptBlock(FacesContext facesContext,UIComponent component){
  DojoWidget dojoWidget=(DojoWidget)component;
  StringBuilder widgetPostCreateInitializationScript=new StringBuilder();
  DojoType dojoType=dojoWidget.getWidgetType();
  StringBuilder widgetInitialization=new StringBuilder();
  String varName=null;
  DojoScriptBlockComponent initScriptBlock=DojoScriptBlockComponent.findInitBlockComponent(facesContext.getViewRoot());
  if (dojoWidget.getRenderChildrenType().equals(RendersChildren.YES_USE_ADD_CHILD)) {
    varName=component.getId();
    widgetInitialization.append(""String_Node_Str"").append(varName).append(""String_Node_Str"");
  }
  getWidgetInitializationScript(component,widgetInitialization,widgetPostCreateInitializationScript);
  if (dojoType.isDijit()) {
    if (dojoWidget.getRenderChildrenType().equals(RendersChildren.YES_USE_ADD_CHILD)) {
      widgetInitialization.append(""String_Node_Str"");
      addComponentChildren(initScriptBlock,component,widgetInitialization,widgetPostCreateInitializationScript,varName);
      widgetInitialization.append(varName);
    }
    String startUpContainerId=(String)facesContext.getAttributes().get(START_UP_CONTAINER_ID);
    if (startUpContainerId == null || component.getId().equals(startUpContainerId)) {
      widgetInitialization.append(""String_Node_Str"");
    }
 else {
      widgetInitialization.append(""String_Node_Str"");
    }
    initScriptBlock.addWidgetCreateScript(widgetInitialization.toString());
  }
 else {
    StringBuilder widgetCreation=new StringBuilder(DojoScriptBlockComponent.getGlobalReference((DojoWidget)component)).append(""String_Node_Str"").append(widgetInitialization.toString()).append(';');
    initScriptBlock.addCreateGlobalSpaceScript();
    initScriptBlock.addPreWidgetCreateScript(widgetCreation.toString());
  }
  addComponentRequires(initScriptBlock,component);
  if (widgetPostCreateInitializationScript.length() > 0) {
    initScriptBlock.addPostWidgetCreateScript(widgetPostCreateInitializationScript.toString());
  }
}",0.9359262029419098
39542,"@Override public void encodeBegin(FacesContext context,UIComponent component) throws IOException {
  DojoWidget dojoWidget=(DojoWidget)component;
  if (dojoWidget.getWidgetType().isDijit()) {
    ResponseWriter writer=context.getResponseWriter();
    writer.write(dojoWidget.getElement().getElement(context,component));
  }
  component.pushComponentToEL(context,component);
}","@Override public void encodeBegin(FacesContext context,UIComponent component) throws IOException {
  DojoWidget dojoWidget=(DojoWidget)component;
  if (dojoWidget.getWidgetType().isDijit()) {
    ResponseWriter writer=context.getResponseWriter();
    writer.write(dojoWidget.getElement().getElement(context,component));
  }
  component.pushComponentToEL(context,component);
  if (component instanceof UIPanel && !context.getAttributes().containsKey(START_UP_CONTAINER_ID)) {
    context.getAttributes().put(START_UP_CONTAINER_ID,component.getId());
  }
}",0.8073196986006459
39543,"@Override public String getAsPropertyValue(UIComponent component){
  Object value=getAttributeValue(component);
  if (null == value) {
    if (null != component.getAttributes().get(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
  }
  return super.getAsPropertyValue(component);
}","@Override public String getAsPropertyValue(UIComponent component){
  Object value=getAttributeValue(component);
  if (null == value) {
    if (null != component.getAttributes().get(""String_Node_Str"") || ((UICommand)component).getActionListeners().length > 0) {
      return Helper.quote(""String_Node_Str"");
    }
  }
  return super.getAsPropertyValue(component);
}",0.8902439024390244
39544,"String getAsJavascriptDate(String valueAsString){
  StringBuffer newDate=new StringBuffer(""String_Node_Str"").append(Helper.makeStringVar(valueAsString.replaceAll(""String_Node_Str"",""String_Node_Str""))).append(')');
  return newDate.toString();
}","String getAsJavascriptDate(String valueAsString){
  if (valueAsString != null) {
    StringBuffer newDate=new StringBuffer(""String_Node_Str"").append(Helper.makeStringVar(valueAsString.replaceAll(""String_Node_Str"",""String_Node_Str""))).append(')');
    return newDate.toString();
  }
  return valueAsString;
}",0.8856624319419237
39545,"public ShowCaseResourceBundle(){
  setTaglibXmlFilePath(""String_Node_Str"");
  try {
    init();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","public ShowCaseResourceBundle() throws IOException {
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=dbf.newDocumentBuilder();
    for (    String taglibXmlFilePath : taglibXmlFilePaths) {
      Enumeration<URL> enumer=Thread.currentThread().getContextClassLoader().getResources(taglibXmlFilePath);
      while (enumer.hasMoreElements()) {
        Document doc=builder.parse(enumer.nextElement().openStream());
        parse(doc);
      }
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.3379888268156424
39546,"private Validator getDataStroeValidator(SelectItemStoreComponent selectItemStore){
  Collection<org.dojoserverfaces.widget.property.Property> propertyHandlers=((DojoWidget)selectItemStore).getPropertyHandlers();
  for (  org.dojoserverfaces.widget.property.Property property : propertyHandlers) {
    if (""String_Node_Str"".equals(property.getName()) && property instanceof Validator) {
      return (Validator)property;
    }
  }
  return null;
}","private Validator getDataStroeValidator(DojoWidget selectItemStore){
  Collection<org.dojoserverfaces.widget.property.Property> propertyHandlers=selectItemStore.getPropertyHandlers();
  for (  org.dojoserverfaces.widget.property.Property property : propertyHandlers) {
    if (""String_Node_Str"".equals(property.getName()) && property instanceof Validator) {
      return (Validator)property;
    }
  }
  return null;
}",0.7615740740740741
39547,"@Override public void validate(FacesContext context,UIComponent comp,Object value) throws ValidatorException {
  String storeId=(String)comp.getAttributes().get(this.getName());
  if (storeId == null || value == null)   return;
  UIComponent storeComp=context.getViewRoot().findComponent(storeId);
  if (storeComp != null && (storeComp instanceof SelectItemStoreComponent)) {
    Validator validator=getDataStroeValidator((SelectItemStoreComponent)storeComp);
    if (validator != null) {
      validator.validate(context,(UIComponent)storeComp,value);
    }
  }
}","@Override public void validate(FacesContext context,UIComponent comp,Object value) throws ValidatorException {
  String storeId=(String)comp.getAttributes().get(this.getName());
  if (storeId == null || value == null)   return;
  UIComponent storeComp=context.getViewRoot().findComponent(storeId);
  if (storeComp != null && (storeComp instanceof DojoWidget)) {
    Validator validator=getDataStroeValidator((DojoWidget)storeComp);
    if (validator != null) {
      validator.validate(context,(UIComponent)storeComp,value);
    }
  }
}",0.8654545454545455
39548,"private Validator getDataStroeValidator(SelectItemStoreComponent selectItemStore){
  Collection<org.dojoserverfaces.widget.property.Property> propertyHandlers=((DojoWidget)selectItemStore).getPropertyHandlers();
  for (  org.dojoserverfaces.widget.property.Property property : propertyHandlers) {
    if (""String_Node_Str"".equals(property.getName()) && property instanceof Validator) {
      return (Validator)property;
    }
  }
  return null;
}","private Validator getDataStroeValidator(DojoWidget selectItemStore){
  Collection<org.dojoserverfaces.widget.property.Property> propertyHandlers=selectItemStore.getPropertyHandlers();
  for (  org.dojoserverfaces.widget.property.Property property : propertyHandlers) {
    if (""String_Node_Str"".equals(property.getName()) && property instanceof Validator) {
      return (Validator)property;
    }
  }
  return null;
}",0.7615740740740741
39549,"@Override public void validate(FacesContext context,UIComponent comp,Object value) throws ValidatorException {
  String storeId=(String)comp.getAttributes().get(this.getName());
  if (storeId == null || value == null)   return;
  UIComponent storeComp=context.getViewRoot().findComponent(storeId);
  if (storeComp != null && (storeComp instanceof SelectItemStoreComponent)) {
    Validator validator=getDataStroeValidator((SelectItemStoreComponent)storeComp);
    if (validator != null) {
      validator.validate(context,(UIComponent)storeComp,value);
    }
  }
}","@Override public void validate(FacesContext context,UIComponent comp,Object value) throws ValidatorException {
  String storeId=(String)comp.getAttributes().get(this.getName());
  if (storeId == null || value == null)   return;
  UIComponent storeComp=context.getViewRoot().findComponent(storeId);
  if (storeComp != null && (storeComp instanceof DojoWidget)) {
    Validator validator=getDataStroeValidator((DojoWidget)storeComp);
    if (validator != null) {
      validator.validate(context,(UIComponent)storeComp,value);
    }
  }
}",0.8654545454545455
39550,"public static void extract(@Required(message=""String_Node_Str"") String rawHtml){
  GooseResponseData responseData=new GooseResponseData();
  if (validation.hasErrors()) {
    String em=""String_Node_Str"";
    for (    Error e : validation.errors())     em+=e.message() + ""String_Node_Str"";
    responseData.setStatusError();
    responseData.setErrorMsg(em);
    renderJSON(responseData);
  }
  try {
    ContentExtractor extractor=new ContentExtractor();
    String result=extractor.extractContentFromHtmlString(rawHtml);
    responseData.setResult(result);
  }
 catch (  Exception e) {
    responseData.setStatusError();
    responseData.setErrorMsg(""String_Node_Str"" + e.getMessage());
  }
  renderJSON(responseData);
}","public static void extract(@Required(message=""String_Node_Str"") String rawHtml){
  GooseResponseData responseData=new GooseResponseData();
  if (validation.hasErrors()) {
    String em=""String_Node_Str"";
    for (    Error e : validation.errors())     em+=e.message() + ""String_Node_Str"";
    responseData.setStatusError();
    responseData.setErrorMsg(em);
    renderJSON(responseData);
  }
  try {
    ContentExtractor extractor=new ContentExtractor();
    String result=extractor.extractContentFromHtmlString(rawHtml);
    responseData.setResult(result);
  }
 catch (  Exception e) {
    responseData.setStatusError();
    responseData.setErrorMsg(""String_Node_Str"" + e.getMessage());
    renderJSON(responseData);
  }
  renderJSON(responseData);
}",0.9769021739130436
39551,"public void renderType(RenderType $type){
  _renderType=$type;
  _renderTypeInt=renderTypeToInt(_renderType);
}","public void renderType(RenderType $type){
  _renderType=$type;
}",0.7314285714285714
39552,"protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled()&& $o.lightingEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderTypeInt(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderTypeInt(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}","protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled()&& $o.lightingEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES || $o.renderType() == RenderType.LINE_STRIP || $o.renderType() == RenderType.LINE_LOOP) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderType().glValue(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderType().glValue(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}",0.983086364316719
39553,"protected void drawSetupLights(){
  for (int glIndex=0; glIndex < NUM_GLLIGHTS; glIndex++) {
    if (_scene.lights().glIndexEnabledDirty()[glIndex] == true) {
      if (_scene.lights().glIndexEnabled()[glIndex] == true) {
        _gl.glEnable(GL10.GL_LIGHT0 + glIndex);
        _scene.lights().getLightByGlIndex(glIndex).setAllDirty();
      }
 else {
        _gl.glDisable(GL10.GL_LIGHT0 + glIndex);
      }
      _scene.lights().glIndexEnabledDirty()[glIndex]=false;
    }
  }
  Light[] lights=_scene.lights().toArray();
  for (int i=0; i < lights.length; i++) {
    Light light=lights[i];
    if (light.isDirty()) {
      int glLightId=GL10.GL_LIGHT0 + _scene.lights().getGlIndexByLight(light);
      if (light.position.isDirty()) {
        light.commitPositionAndTypeBuffer();
        _gl.glLightfv(glLightId,GL10.GL_POSITION,light.positionAndTypeBuffer());
        light.position.clearDirtyFlag();
      }
      if (light.ambient.isDirty()) {
        light.ambient.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_AMBIENT,light.ambient.floatBuffer());
        light.ambient.clearDirtyFlag();
      }
      if (light.diffuse.isDirty()) {
        light.diffuse.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_DIFFUSE,light.diffuse.floatBuffer());
        light.diffuse.clearDirtyFlag();
      }
      if (light.specular.isDirty()) {
        light.specular.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPECULAR,light.specular.floatBuffer());
        light.specular.clearDirtyFlag();
      }
      if (light.emissive.isDirty()) {
        light.emissive.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_EMISSION,light.emissive.floatBuffer());
        light.emissive.clearDirtyFlag();
      }
      if (light.type() == LightType.DIRECTIONAL && light.direction.isDirty()) {
        light.direction.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPOT_DIRECTION,light.direction.floatBuffer());
        _gl.glLightf(glLightId,GL10.GL_SPOT_CUTOFF,60.0f);
        light.direction.clearDirtyFlag();
      }
      if (light.isVisibleBm().isDirty()) {
        if (light.isVisible()) {
          _gl.glEnable(glLightId);
        }
 else {
          _gl.glDisable(glLightId);
        }
        light.isVisibleBm().clearDirtyFlag();
      }
      if (light.attenuation().isDirty()) {
        _gl.glLightf(glLightId,GL10.GL_CONSTANT_ATTENUATION,light.attenuation().getX());
        _gl.glLightf(glLightId,GL10.GL_LINEAR_ATTENUATION,light.attenuation().getY());
        _gl.glLightf(glLightId,GL10.GL_QUADRATIC_ATTENUATION,light.attenuation().getZ());
      }
      light.clearDirtyFlag();
    }
  }
}","protected void drawSetupLights(){
  for (int glIndex=0; glIndex < NUM_GLLIGHTS; glIndex++) {
    if (_scene.lights().glIndexEnabledDirty()[glIndex] == true) {
      if (_scene.lights().glIndexEnabled()[glIndex] == true) {
        _gl.glEnable(GL10.GL_LIGHT0 + glIndex);
        _scene.lights().getLightByGlIndex(glIndex).setAllDirty();
      }
 else {
        _gl.glDisable(GL10.GL_LIGHT0 + glIndex);
      }
      _scene.lights().glIndexEnabledDirty()[glIndex]=false;
    }
  }
  Light[] lights=_scene.lights().toArray();
  for (int i=0; i < lights.length; i++) {
    Light light=lights[i];
    if (light.isDirty()) {
      int glLightId=GL10.GL_LIGHT0 + _scene.lights().getGlIndexByLight(light);
      if (light.position.isDirty()) {
        light.commitPositionAndTypeBuffer();
        _gl.glLightfv(glLightId,GL10.GL_POSITION,light.positionAndTypeBuffer());
        light.position.clearDirtyFlag();
      }
      if (light.ambient.isDirty()) {
        light.ambient.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_AMBIENT,light.ambient.floatBuffer());
        light.ambient.clearDirtyFlag();
      }
      if (light.diffuse.isDirty()) {
        light.diffuse.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_DIFFUSE,light.diffuse.floatBuffer());
        light.diffuse.clearDirtyFlag();
      }
      if (light.specular.isDirty()) {
        light.specular.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPECULAR,light.specular.floatBuffer());
        light.specular.clearDirtyFlag();
      }
      if (light.emissive.isDirty()) {
        light.emissive.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_EMISSION,light.emissive.floatBuffer());
        light.emissive.clearDirtyFlag();
      }
      if (light.type() == LightType.DIRECTIONAL && light.direction.isDirty()) {
        light.direction.commitToFloatBuffer();
        _gl.glLightfv(glLightId,GL10.GL_SPOT_DIRECTION,light.direction.floatBuffer());
        _gl.glLightf(glLightId,GL10.GL_SPOT_CUTOFF,45f);
        light.direction.clearDirtyFlag();
      }
      if (light.isVisibleBm().isDirty()) {
        if (light.isVisible()) {
          _gl.glEnable(glLightId);
        }
 else {
          _gl.glDisable(glLightId);
        }
        light.isVisibleBm().clearDirtyFlag();
      }
      if (light.attenuation().isDirty()) {
        _gl.glLightf(glLightId,GL10.GL_CONSTANT_ATTENUATION,light.attenuation().getX());
        _gl.glLightf(glLightId,GL10.GL_LINEAR_ATTENUATION,light.attenuation().getY());
        _gl.glLightf(glLightId,GL10.GL_QUADRATIC_ATTENUATION,light.attenuation().getZ());
      }
      light.clearDirtyFlag();
    }
  }
}",0.9988730277986476
39554,"public Light(){
  super(null);
  ambient=new Color4Managed(128,128,128,255,this);
  diffuse=new Color4Managed(255,255,255,255,this);
  specular=new Color4Managed(0,0,0,255,this);
  emissive=new Color4Managed(0,0,0,255,this);
  position=new Number3dManaged(0f,0f,5f,this);
  direction=new Number3dManaged(0,0,-1,this);
  _attenuation=new Number3dManaged(1f,0f,0f,this);
  _isVisible=new BooleanManaged(true,this);
  type(LightType.DIRECTIONAL);
  _positionAndTypeFloatBuffer=Utils.makeFloatBuffer4(0,0,0,0);
  setDirtyFlag();
}","public Light(){
  super(null);
  ambient=new Color4Managed(128,128,128,255,this);
  diffuse=new Color4Managed(255,255,255,255,this);
  specular=new Color4Managed(0,0,0,255,this);
  emissive=new Color4Managed(0,0,0,255,this);
  position=new Number3dManaged(0f,0f,5f,this);
  direction=new Number3dManaged(0f,0f,-1f,this);
  _attenuation=new Number3dManaged(1f,0f,0f,this);
  _isVisible=new BooleanManaged(true,this);
  type(LightType.DIRECTIONAL);
  _positionAndTypeFloatBuffer=Utils.makeFloatBuffer4(0,0,0,0);
  setDirtyFlag();
}",0.9933649289099526
39555,"/** 
 * Used by Renderer
 */
public void commitToFloatBuffer(){
  this.toFloatBuffer(_fb);
}","/** 
 * Used by Renderer
 */
public void commitToFloatBuffer(){
  toFloatBuffer(_fb);
}",0.9720670391061452
39556,"/** 
 * Convenience method
 */
public void toFloatBuffer(FloatBuffer $floatBuffer){
  $floatBuffer.position(0);
  $floatBuffer.put((float)_x / 255f);
  $floatBuffer.put((float)_y / 255f);
  $floatBuffer.put((float)_z / 255f);
  $floatBuffer.position(0);
}","/** 
 * Convenience method
 */
public void toFloatBuffer(FloatBuffer $floatBuffer){
  $floatBuffer.position(0);
  $floatBuffer.put(_x);
  $floatBuffer.put(_y);
  $floatBuffer.put(_z);
  $floatBuffer.position(0);
}",0.7222222222222222
39557,"private void build(){
  color=new Color4();
  faces=new Rectangle[6];
  Rectangle north=new Rectangle(size,size,quality,quality,color);
  Rectangle east=new Rectangle(size,size,quality,quality,color);
  Rectangle south=new Rectangle(size,size,quality,quality,color);
  Rectangle west=new Rectangle(size,size,quality,quality,color);
  Rectangle up=new Rectangle(size,size,quality,quality,color);
  Rectangle down=new Rectangle(size,size,quality,quality,color);
  north.position().z=halfSize;
  north.lightingEnabled(false);
  east.rotation().y=-90;
  east.position().x=-halfSize;
  east.lightingEnabled(false);
  south.rotation().y=180;
  south.position().z=-halfSize;
  south.lightingEnabled(false);
  west.rotation().y=90;
  west.position().x=halfSize;
  west.lightingEnabled(false);
  up.rotation().x=-90;
  up.position().y=halfSize;
  up.lightingEnabled(false);
  down.rotation().x=90;
  down.position().y=-halfSize;
  down.lightingEnabled(false);
  faces[Face.North.ordinal()]=north;
  faces[Face.East.ordinal()]=east;
  faces[Face.South.ordinal()]=south;
  faces[Face.West.ordinal()]=west;
  faces[Face.Up.ordinal()]=up;
  faces[Face.Down.ordinal()]=down;
  addChild(north);
  addChild(east);
  addChild(south);
  addChild(west);
  addChild(up);
  addChild(down);
}","private void build(){
  color=new Color4();
  faces=new Rectangle[6];
  Rectangle north=new Rectangle(size,size,quality,quality,color);
  Rectangle east=new Rectangle(size,size,quality,quality,color);
  Rectangle south=new Rectangle(size,size,quality,quality,color);
  Rectangle west=new Rectangle(size,size,quality,quality,color);
  Rectangle up=new Rectangle(size,size,quality,quality,color);
  Rectangle down=new Rectangle(size,size,quality,quality,color);
  north.position().z=halfSize;
  north.lightingEnabled(false);
  east.rotation().y=-90;
  east.position().x=halfSize;
  east.doubleSidedEnabled(true);
  east.lightingEnabled(false);
  south.rotation().y=180;
  south.position().z=-halfSize;
  south.lightingEnabled(false);
  west.rotation().y=90;
  west.position().x=-halfSize;
  west.doubleSidedEnabled(true);
  west.lightingEnabled(false);
  up.rotation().x=90;
  up.position().y=halfSize;
  up.doubleSidedEnabled(true);
  up.lightingEnabled(false);
  down.rotation().x=-90;
  down.position().y=-halfSize;
  down.doubleSidedEnabled(true);
  down.lightingEnabled(false);
  faces[Face.North.ordinal()]=north;
  faces[Face.East.ordinal()]=east;
  faces[Face.South.ordinal()]=south;
  faces[Face.West.ordinal()]=west;
  faces[Face.Up.ordinal()]=up;
  faces[Face.Down.ordinal()]=down;
  addChild(north);
  addChild(east);
  addChild(south);
  addChild(west);
  addChild(up);
  addChild(down);
}",0.8794007490636704
39558,"/** 
 * Clear object for garbage collection.
 */
public void clear(){
  this.vertices().points().clear();
  this.vertices().uvs().clear();
  this.vertices().normals().clear();
  this.vertices().colors().clear();
  _textures.clear();
  if (this.parent() != null)   this.parent().removeChild(this);
}","/** 
 * Clear object for garbage collection.
 */
public void clear(){
  this.vertices().points().clear();
  this.vertices().uvs().clear();
  this.vertices().normals().clear();
  if (this.vertices().colors() != null)   this.vertices().colors().clear();
  _textures.clear();
  if (this.parent() != null)   this.parent().removeChild(this);
}",0.7389937106918238
39559,"/** 
 * Color used to render object, but only when colorsEnabled is false.
 */
public Color4 defaultColor(){
  return _defaultColor;
}","public void defaultColor(Color4 color){
  _defaultColor=color;
}",0.4343434343434343
39560,"@Override public Object3d getChildAt(int $index){
  return _children.get($index);
}","public Object3d getChildAt(int $index){
  return _children.get($index);
}",0.935897435897436
39561,"/** 
 * TODO: Use better lookup 
 */
@Override public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(i).name().equals($name))     return _children.get(i);
  }
  return null;
}","/** 
 * TODO: Use better lookup 
 */
public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(i).name().equals($name))     return _children.get(i);
  }
  return null;
}",0.9781659388646288
39562,"@Override public void addChildAt(Object3d $o,int $index){
  _children.add($index,$o);
  $o.parent(this);
  $o.scene(this.scene());
}","public void addChildAt(Object3d $o,int $index){
  _children.add($index,$o);
  $o.parent(this);
  $o.scene(this.scene());
}",0.9606299212598424
39563,"@Override public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}","public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}",0.9691358024691358
39564,"@Override public boolean removeChild(Object3d $o){
  boolean b=_children.remove($o);
  if (b) {
    $o.parent(null);
    $o.scene(null);
  }
  return b;
}","public boolean removeChild(Object3d $o){
  boolean b=_children.remove($o);
  if (b) {
    $o.parent(null);
    $o.scene(null);
  }
  return b;
}",0.9664429530201344
39565,"@Override public int numChildren(){
  return _children.size();
}","public int numChildren(){
  return _children.size();
}",0.9152542372881356
39566,"@Override public void addChild(Object3d $o){
  _children.add($o);
  $o.parent(this);
  $o.scene(this.scene());
}","public void addChild(Object3d $o){
  _children.add($o);
  $o.parent(this);
  $o.scene(this.scene());
}",0.9532710280373832
39567,"@Override public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}","public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}",0.9367088607594936
39568,"protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderTypeInt(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderTypeInt(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}","protected void drawObject(Object3d $o){
  if ($o.isVisible() == false)   return;
  if ($o.hasNormals() && $o.normalsEnabled()) {
    $o.vertices().normals().buffer().position(0);
    _gl.glNormalPointer(GL10.GL_FLOAT,0,$o.vertices().normals().buffer());
    _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  }
 else {
    _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  }
  boolean useLighting=(_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled()&& $o.lightingEnabled());
  if (useLighting) {
    _gl.glEnable(GL10.GL_LIGHTING);
  }
 else {
    _gl.glDisable(GL10.GL_LIGHTING);
  }
  _gl.glGetIntegerv(GL11.GL_SHADE_MODEL,_scratchIntBuffer);
  if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {
    _gl.glShadeModel($o.shadeModel().glConstant());
  }
  if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {
    $o.vertices().colors().buffer().position(0);
    _gl.glColorPointer(4,GL10.GL_UNSIGNED_BYTE,0,$o.vertices().colors().buffer());
    _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  }
 else {
    _gl.glColor4f((float)$o.defaultColor().r / 255f,(float)$o.defaultColor().g / 255f,(float)$o.defaultColor().b / 255f,(float)$o.defaultColor().a / 255f);
    _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  }
  _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL,_scratchIntBuffer);
  _scratchB=(_scratchIntBuffer.get(0) != 0);
  if ($o.colorMaterialEnabled() != _scratchB) {
    if ($o.colorMaterialEnabled())     _gl.glEnable(GL10.GL_COLOR_MATERIAL);
 else     _gl.glDisable(GL10.GL_COLOR_MATERIAL);
  }
  if ($o.renderType() == RenderType.POINTS) {
    if ($o.pointSmoothing())     _gl.glEnable(GL10.GL_POINT_SMOOTH);
 else     _gl.glDisable(GL10.GL_POINT_SMOOTH);
    _gl.glPointSize($o.pointSize());
  }
  if ($o.renderType() == RenderType.LINES) {
    if ($o.lineSmoothing() == true) {
      _gl.glEnable(GL10.GL_LINE_SMOOTH);
    }
 else {
      _gl.glDisable(GL10.GL_LINE_SMOOTH);
    }
    _gl.glLineWidth($o.lineWidth());
  }
  if ($o.doubleSidedEnabled()) {
    _gl.glDisable(GL10.GL_CULL_FACE);
  }
 else {
    _gl.glEnable(GL10.GL_CULL_FACE);
  }
  drawObject_textures($o);
  _gl.glPushMatrix();
  _gl.glTranslatef($o.position().x,$o.position().y,$o.position().z);
  _gl.glRotatef($o.rotation().x,1,0,0);
  _gl.glRotatef($o.rotation().y,0,1,0);
  _gl.glRotatef($o.rotation().z,0,0,1);
  _gl.glScalef($o.scale().x,$o.scale().y,$o.scale().z);
  $o.vertices().points().buffer().position(0);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,$o.vertices().points().buffer());
  if (!$o.ignoreFaces()) {
    int pos, len;
    if (!$o.faces().renderSubsetEnabled()) {
      pos=0;
      len=$o.faces().size();
    }
 else {
      pos=$o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;
      len=$o.faces().renderSubsetLength();
    }
    $o.faces().buffer().position(pos);
    _gl.glDrawElements($o.renderTypeInt(),len * FacesBufferedList.PROPERTIES_PER_ELEMENT,GL10.GL_UNSIGNED_SHORT,$o.faces().buffer());
  }
 else {
    _gl.glDrawArrays($o.renderTypeInt(),0,$o.vertices().size());
  }
  if ($o instanceof Object3dContainer) {
    Object3dContainer container=(Object3dContainer)$o;
    for (int i=0; i < container.children().size(); i++) {
      Object3d o=container.children().get(i);
      drawObject(o);
    }
  }
  _gl.glPopMatrix();
}",0.9964922983071528
39569,"/** 
 * TODO: Use better lookup 
 */
@Override public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(0).name() == $name)     return _children.get(0);
  }
  return null;
}","/** 
 * TODO: Use better lookup 
 */
public Object3d getChildByName(String $name){
  for (int i=0; i < _children.size(); i++) {
    if (_children.get(0).name() == $name)     return _children.get(0);
  }
  return null;
}",0.9776785714285714
39570,"/** 
 * Removes Object3d from Scene. Returns false if unsuccessful
 */
@Override public boolean removeChild(Object3d $o){
  $o.parent(null);
  $o.scene(null);
  return _children.remove($o);
}","/** 
 * Removes Object3d from Scene. Returns false if unsuccessful
 */
public boolean removeChild(Object3d $o){
  $o.parent(null);
  $o.scene(null);
  return _children.remove($o);
}",0.9731182795698924
39571,"@Override public void onDirty(){
}","public void onDirty(){
}",0.8275862068965517
39572,"@Override public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}","public int getChildIndexOf(Object3d $o){
  return _children.indexOf($o);
}",0.9367088607594936
39573,"@Override public Object3d getChildAt(int $index){
  return _children.get($index);
}","public Object3d getChildAt(int $index){
  return _children.get($index);
}",0.935897435897436
39574,"@Override public void addChildAt(Object3d $o,int $index){
  if (_children.contains($o))   return;
  _children.add($index,$o);
}","public void addChildAt(Object3d $o,int $index){
  if (_children.contains($o))   return;
  _children.add($index,$o);
}",0.9590163934426228
39575,"@Override public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}","public Object3d removeChildAt(int $index){
  Object3d o=_children.remove($index);
  if (o != null) {
    o.parent(null);
    o.scene(null);
  }
  return o;
}",0.9691358024691358
39576,"@Override public int numChildren(){
  return _children.size();
}","public int numChildren(){
  return _children.size();
}",0.9152542372881356
39577,"/** 
 * Adds Object3d to Scene. Object3d's must be added to Scene in order to be rendered Returns always true. 
 */
@Override public void addChild(Object3d $o){
  if (_children.contains($o))   return;
  _children.add($o);
  $o.parent(this);
  $o.scene(this);
}","/** 
 * Adds Object3d to Scene. Object3d's must be added to Scene in order to be rendered Returns always true. 
 */
public void addChild(Object3d $o){
  if (_children.contains($o))   return;
  _children.add($o);
  $o.parent(this);
  $o.scene(this);
}",0.5882352941176471
39578,"public Rectangle(float $width,float $height,int $segsW,int $segsH,long $colorRgba){
  super(4 * $segsW * $segsH,2 * $segsW * $segsH);
  int row, col;
  float w=$width / $segsW;
  float h=$height / $segsH;
  float width5=$width / 2f;
  float height5=$height / 2f;
  Color4 c=new Color4();
  c.setAll($colorRgba);
  for (row=0; row <= $segsH; row++) {
    for (col=0; col <= $segsW; col++) {
      this.vertices().addVertex((float)col * w - width5,(float)row * h - height5,0f,(float)col / (float)$segsW,1 - (float)row / (float)$segsH,0,0,1f,c.r,c.g,c.b,c.a);
    }
  }
  int colspan=$segsW + 1;
  for (row=1; row <= $segsH; row++) {
    for (col=1; col <= $segsW; col++) {
      int lr=row * colspan + col;
      int ll=lr - 1;
      int ur=lr - colspan;
      int ul=ur - 1;
      Utils.addQuad(this,ul,ur,lr,ll);
    }
  }
}","public Rectangle(float $width,float $height,int $segsW,int $segsH,Color4 color){
  super(4 * $segsW * $segsH,2 * $segsW * $segsH);
  int row, col;
  float w=$width / $segsW;
  float h=$height / $segsH;
  float width5=$width / 2f;
  float height5=$height / 2f;
  for (row=0; row <= $segsH; row++) {
    for (col=0; col <= $segsW; col++) {
      this.vertices().addVertex((float)col * w - width5,(float)row * h - height5,0f,(float)col / (float)$segsW,1 - (float)row / (float)$segsH,0,0,1f,color.r,color.g,color.b,color.a);
    }
  }
  int colspan=$segsW + 1;
  for (row=1; row <= $segsH; row++) {
    for (col=1; col <= $segsW; col++) {
      int lr=row * colspan + col;
      int ll=lr - 1;
      int ur=lr - colspan;
      int ul=ur - 1;
      Utils.addQuad(this,ul,ur,lr,ll);
    }
  }
}",0.9429280397022332
39579,"/** 
 * Override this in the concrete parser
 */
@Override public void parse(){
}","/** 
 * Override this in the concrete parser
 */
public void parse(){
}",0.9342105263157896
39580,"/** 
 * Override this in the concrete parser
 */
@Override public Object3dContainer getParsedObject(){
  return null;
}","/** 
 * Override this in the concrete parser
 */
public Object3dContainer getParsedObject(){
  return null;
}",0.956140350877193
39581,"/** 
 * Override this in the concrete parser if applicable 
 */
@Override public AnimationObject3d getParsedAnimationObject(){
  return null;
}","/** 
 * Override this in the concrete parser if applicable 
 */
public AnimationObject3d getParsedAnimationObject(){
  return null;
}",0.9637681159420288
39582,"private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    name=name.subSequence(0,name.lastIndexOf(""String_Node_Str"")).toString();
    Log.d(Min3d.TAG,""String_Node_Str"" + name);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}","private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    if (name.indexOf(""String_Node_Str"") > 0)     name=name.subSequence(0,name.lastIndexOf(""String_Node_Str"")).toString();
 else     name=name.substring(0,6).replaceAll(""String_Node_Str"",""String_Node_Str"");
    Log.d(Min3d.TAG,""String_Node_Str"" + name);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}",0.9524160826263371
39583,"public void play(String name){
  currentFrameIndex=0;
  for (int i=0; i < numFrames; i++) {
    if (frames[i].getName().equals(name))     currentFrameIndex=i;
  }
  play();
}","public void play(String name,boolean loop){
  this.loop=loop;
  play(name);
}",0.3824701195219123
39584,"public void update(){
  if (!isPlaying || !updateVertices)   return;
  currentTime=System.currentTimeMillis();
  KeyFrame currentFrame=frames[currentFrameIndex];
  KeyFrame nextFrame=frames[(currentFrameIndex + 1) % numFrames];
  float[] currentVerts=currentFrame.getVertices();
  float[] nextVerts=nextFrame.getVertices();
  float[] currentNormals=currentFrame.getNormals();
  float[] nextNormals=nextFrame.getNormals();
  int numVerts=currentVerts.length;
  float[] interPolatedVerts=new float[numVerts];
  float[] interPolatedNormals=new float[numVerts];
  for (int i=0; i < numVerts; i+=3) {
    interPolatedVerts[i]=currentVerts[i] + interpolation * (nextVerts[i] - currentVerts[i]);
    interPolatedVerts[i + 1]=currentVerts[i + 1] + interpolation * (nextVerts[i + 1] - currentVerts[i + 1]);
    interPolatedVerts[i + 2]=currentVerts[i + 2] + interpolation * (nextVerts[i + 2] - currentVerts[i + 2]);
    interPolatedNormals[i]=currentNormals[i] + interpolation * (nextNormals[i] - currentNormals[i]);
    interPolatedNormals[i + 1]=currentNormals[i + 1] + interpolation * (nextNormals[i + 1] - currentNormals[i + 1]);
    interPolatedNormals[i + 2]=currentNormals[i + 2] + interpolation * (nextNormals[i + 2] - currentNormals[i + 2]);
  }
  interpolation+=fps * (currentTime - startTime) / 1000;
  vertices().overwriteNormals(interPolatedNormals);
  vertices().overwriteVerts(interPolatedVerts);
  if (interpolation > 1) {
    interpolation=0;
    currentFrameIndex++;
    if (currentFrameIndex >= numFrames)     currentFrameIndex=0;
  }
  startTime=System.currentTimeMillis();
}","public void update(){
  if (!isPlaying || !updateVertices)   return;
  currentTime=System.currentTimeMillis();
  KeyFrame currentFrame=frames[currentFrameIndex];
  KeyFrame nextFrame=frames[(currentFrameIndex + 1) % numFrames];
  if (currentFrameName != null && !currentFrameName.equals(currentFrame.getName())) {
    if (!loop)     stop();
 else     currentFrameIndex=loopStartIndex;
    return;
  }
  float[] currentVerts=currentFrame.getVertices();
  float[] nextVerts=nextFrame.getVertices();
  float[] currentNormals=currentFrame.getNormals();
  float[] nextNormals=nextFrame.getNormals();
  int numVerts=currentVerts.length;
  float[] interPolatedVerts=new float[numVerts];
  float[] interPolatedNormals=new float[numVerts];
  for (int i=0; i < numVerts; i+=3) {
    interPolatedVerts[i]=currentVerts[i] + interpolation * (nextVerts[i] - currentVerts[i]);
    interPolatedVerts[i + 1]=currentVerts[i + 1] + interpolation * (nextVerts[i + 1] - currentVerts[i + 1]);
    interPolatedVerts[i + 2]=currentVerts[i + 2] + interpolation * (nextVerts[i + 2] - currentVerts[i + 2]);
    interPolatedNormals[i]=currentNormals[i] + interpolation * (nextNormals[i] - currentNormals[i]);
    interPolatedNormals[i + 1]=currentNormals[i + 1] + interpolation * (nextNormals[i + 1] - currentNormals[i + 1]);
    interPolatedNormals[i + 2]=currentNormals[i + 2] + interpolation * (nextNormals[i + 2] - currentNormals[i + 2]);
  }
  interpolation+=fps * (currentTime - startTime) / 1000;
  vertices().overwriteNormals(interPolatedNormals);
  vertices().overwriteVerts(interPolatedVerts);
  if (interpolation > 1) {
    interpolation=0;
    currentFrameIndex++;
    if (currentFrameIndex >= numFrames)     currentFrameIndex=0;
  }
  startTime=System.currentTimeMillis();
}",0.9482810164424514
39585,"private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}","private void getFrames(BufferedInputStream stream,byte[] bytes) throws IOException {
  ByteArrayInputStream ba=new ByteArrayInputStream(bytes,header.offsetFrames - 68,bytes.length - header.offsetFrames);
  LittleEndianDataInputStream is=new LittleEndianDataInputStream(ba);
  ArrayList<Number3d> firstFrameVerts=new ArrayList<Number3d>();
  for (int i=0; i < header.numFrames; i++) {
    float scaleX=is.readFloat();
    float scaleY=is.readFloat();
    float scaleZ=is.readFloat();
    float translateX=is.readFloat();
    float translateY=is.readFloat();
    float translateZ=is.readFloat();
    String name=is.readString(16);
    name=name.subSequence(0,name.lastIndexOf(""String_Node_Str"")).toString();
    Log.d(Min3d.TAG,""String_Node_Str"" + name);
    float vertices[]=new float[header.numVerts * 3];
    int index=0;
    for (int j=0; j < header.numVerts; j++) {
      vertices[index++]=scaleX * is.readUnsignedByte() + translateX;
      vertices[index++]=scaleY * is.readUnsignedByte() + translateY;
      vertices[index++]=scaleZ * is.readUnsignedByte() + translateZ;
      int normalIndex=is.readUnsignedByte();
      if (i == 0)       co.vertices.add(new Number3d(vertices[index - 3],vertices[index - 2],vertices[index - 1]));
    }
    frames[i]=new KeyFrame(name,vertices);
  }
}",0.9495524816924328
39586,"/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  if (bitmaps.size() == 0)   return;
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    if (bitmaps.get(i).useForAtlasDimensions)     totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    BitmapAsset existingBA=getBitmapAssetByResourceID(ba.resourceID);
    if (ba.useForAtlasDimensions) {
      Bitmap b=ba.bitmap;
      int w=b.getWidth();
      int h=b.getHeight();
      int[] pixels=new int[w * h];
      b.getPixels(pixels,0,w,0,0,w,h);
      atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
      ba.uOffset=(float)uOffset / totalWidth;
      ba.vOffset=0;
      ba.uScale=(float)w / (float)totalWidth;
      ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
      uOffset+=w;
      b.recycle();
    }
 else {
      ba.uOffset=existingBA.uOffset;
      ba.vOffset=existingBA.vOffset;
      ba.uScale=existingBA.uScale;
      ba.vScale=existingBA.vScale;
    }
  }
}","/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  if (bitmaps.size() == 0)   return;
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    if (bitmaps.get(i).useForAtlasDimensions)     totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    BitmapAsset existingBA=getBitmapAssetByResourceID(ba.resourceID);
    if (ba.useForAtlasDimensions) {
      Bitmap b=ba.bitmap;
      int w=b.getWidth();
      int h=b.getHeight();
      int[] pixels=new int[w * h];
      b.getPixels(pixels,0,w,0,0,w,h);
      atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
      ba.uOffset=(float)uOffset / totalWidth;
      ba.vOffset=0;
      ba.uScale=(float)w / (float)totalWidth;
      ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
      uOffset+=w;
      b.recycle();
    }
 else {
      ba.uOffset=existingBA.uOffset;
      ba.vOffset=existingBA.vOffset;
      ba.uScale=existingBA.uScale;
      ba.vScale=existingBA.vScale;
    }
  }
  setId(Shared.textureManager().getNewAtlasId());
}",0.9810462471569372
39587,"@Override public AnimationObject3d getParsedAnimationObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Bitmap texture=null;
  AnimationObject3d animObj;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"",generateMipMap);
  }
  Log.d(Min3d.TAG,""String_Node_Str"" + co.name);
  animObj=co.getParsedObject(textureAtlas,frames);
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return animObj;
}","@Override public AnimationObject3d getParsedAnimationObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Bitmap texture=null;
  AnimationObject3d animObj;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,textureAtlas.getId(),generateMipMap);
  }
  Log.d(Min3d.TAG,""String_Node_Str"" + co.name);
  animObj=co.getParsedObject(textureAtlas,frames);
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return animObj;
}",0.9694971145919208
39588,"public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"",generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return obj;
}","public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,textureAtlas.getId(),generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  super.cleanup();
  return obj;
}",0.9747095010252904
39589,"public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"",generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}","public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,textureAtlas.getId(),generateMipMap);
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}",0.974500344589938
39590,"private void parseObject(Object3d obj,TextureAtlas textureAtlas){
  int numFaces=faces.size();
  int faceIndex=0;
  boolean hasBitmaps=textureAtlas.hasBitmaps();
  for (int i=0; i < numFaces; i++) {
    ParseObjectFace face=faces.get(i);
    BitmapAsset ba=textureAtlas.getBitmapAssetByName(face.materialKey);
    for (int j=0; j < face.faceLength; j++) {
      Number3d newVertex=vertices.get(face.v[j]);
      Uv newUv=face.hasuv ? texCoords.get(face.uv[j]).clone() : new Uv();
      Number3d newNormal=face.hasn ? normals.get(face.n[j]) : new Number3d();
      Color4 newColor=new Color4(255,255,0,255);
      if (hasBitmaps) {
        newUv.u=ba.uOffset + newUv.u * ba.uScale;
        newUv.v=ba.vOffset + ((newUv.v + 1) * ba.vScale) - 1;
      }
      obj.vertices().addVertex(newVertex,newUv,newNormal,newColor);
    }
    if (face.faceLength == 3) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 2));
    }
 else     if (face.faceLength == 4) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 3));
      obj.faces().add(new Face(faceIndex + 1,faceIndex + 2,faceIndex + 3));
    }
    faceIndex+=face.faceLength;
  }
  if (hasBitmaps) {
    obj.textures().addById(""String_Node_Str"");
  }
  cleanup();
}","private void parseObject(Object3d obj,TextureAtlas textureAtlas){
  int numFaces=faces.size();
  int faceIndex=0;
  boolean hasBitmaps=textureAtlas.hasBitmaps();
  for (int i=0; i < numFaces; i++) {
    ParseObjectFace face=faces.get(i);
    BitmapAsset ba=textureAtlas.getBitmapAssetByName(face.materialKey);
    for (int j=0; j < face.faceLength; j++) {
      Number3d newVertex=vertices.get(face.v[j]);
      Uv newUv=face.hasuv ? texCoords.get(face.uv[j]).clone() : new Uv();
      Number3d newNormal=face.hasn ? normals.get(face.n[j]) : new Number3d();
      Color4 newColor=new Color4(255,255,0,255);
      if (hasBitmaps) {
        newUv.u=ba.uOffset + newUv.u * ba.uScale;
        newUv.v=ba.vOffset + ((newUv.v + 1) * ba.vScale) - 1;
      }
      obj.vertices().addVertex(newVertex,newUv,newNormal,newColor);
    }
    if (face.faceLength == 3) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 2));
    }
 else     if (face.faceLength == 4) {
      obj.faces().add(new Face(faceIndex,faceIndex + 1,faceIndex + 3));
      obj.faces().add(new Face(faceIndex + 1,faceIndex + 2,faceIndex + 3));
    }
    faceIndex+=face.faceLength;
  }
  if (hasBitmaps) {
    obj.textures().addById(textureAtlas.getId());
  }
  cleanup();
}",0.9859943977591036
39591,"/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  for (int i=0; i < numBitmaps; i++) {
    totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    Bitmap b=ba.bitmap;
    int w=b.getWidth();
    int h=b.getHeight();
    int[] pixels=new int[w * h];
    b.getPixels(pixels,0,w,0,0,w,h);
    atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
    ba.uOffset=(float)uOffset / totalWidth;
    ba.vOffset=0;
    ba.uScale=(float)w / (float)totalWidth;
    ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
    uOffset+=w;
    b.recycle();
  }
}","/** 
 * Generates a new texture atlas
 */
public void generate(){
  Collections.sort(bitmaps,new BitmapHeightComparer());
  if (bitmaps.size() == 0)   return;
  BitmapAsset largestBitmap=bitmaps.get(0);
  int totalWidth=0;
  int numBitmaps=bitmaps.size();
  for (int i=0; i < numBitmaps; i++) {
    totalWidth+=bitmaps.get(i).bitmap.getWidth();
  }
  atlas=Bitmap.createBitmap(totalWidth,largestBitmap.bitmap.getHeight(),Config.ARGB_8888);
  int uOffset=0;
  int vOffset=0;
  for (int i=0; i < numBitmaps; i++) {
    BitmapAsset ba=bitmaps.get(i);
    Bitmap b=ba.bitmap;
    int w=b.getWidth();
    int h=b.getHeight();
    int[] pixels=new int[w * h];
    b.getPixels(pixels,0,w,0,0,w,h);
    atlas.setPixels(pixels,0,w,uOffset,vOffset,w,h);
    ba.uOffset=(float)uOffset / totalWidth;
    ba.vOffset=0;
    ba.uScale=(float)w / (float)totalWidth;
    ba.vScale=(float)h / (float)largestBitmap.bitmap.getHeight();
    uOffset+=w;
    b.recycle();
  }
}",0.980224478888295
39592,"public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  textureAtlas.generate();
  Bitmap texture=textureAtlas.getBitmap();
  Shared.textureManager().addTextureId(texture,""String_Node_Str"");
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  texture.recycle();
  textureAtlas.cleanup();
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}","public Object3dContainer getParsedObject(){
  Log.d(Min3d.TAG,""String_Node_Str"");
  Object3dContainer obj=new Object3dContainer(0,0);
  int numObjects=parseObjects.size();
  Bitmap texture=null;
  if (textureAtlas.hasBitmaps()) {
    textureAtlas.generate();
    texture=textureAtlas.getBitmap();
    Shared.textureManager().addTextureId(texture,""String_Node_Str"");
  }
  for (int i=0; i < numObjects; i++) {
    ParseObjectData o=parseObjects.get(i);
    Log.d(Min3d.TAG,""String_Node_Str"" + o.name);
    obj.addChild(o.getParsedObject(textureAtlas));
  }
  if (textureAtlas.hasBitmaps()) {
    if (texture != null)     texture.recycle();
    textureAtlas.cleanup();
  }
  Log.d(Min3d.TAG,""String_Node_Str"");
  cleanup();
  return obj;
}",0.8
39593,"public ObjFace(StringTokenizer parts,String materialKey,int faceLength){
  super();
  this.materialKey=materialKey;
  this.faceLength=faceLength;
  StringTokenizer subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
  int partLength=subParts.countTokens();
  boolean emptyVt=parts.toString().indexOf(""String_Node_Str"") > -1;
  hasuv=partLength >= 2 && !emptyVt;
  hasn=partLength == 3;
  v=new short[faceLength];
  if (hasuv)   uv=new short[faceLength];
  if (hasn)   n=new short[faceLength];
  for (int i=1; i < faceLength + 1; i++) {
    if (i > 1)     subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
    int index=i - 1;
    v[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasuv)     uv[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasn)     n[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
  }
}","public ObjFace(String line,String materialKey,int faceLength){
  super();
  this.materialKey=materialKey;
  this.faceLength=faceLength;
  boolean emptyVt=line.indexOf(""String_Node_Str"") > -1;
  if (emptyVt)   line=line.replace(""String_Node_Str"",""String_Node_Str"");
  StringTokenizer parts=new StringTokenizer(line);
  parts.nextToken();
  StringTokenizer subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
  int partLength=subParts.countTokens();
  hasuv=partLength >= 2 && !emptyVt;
  hasn=partLength == 3 || (partLength == 2 && emptyVt);
  v=new short[faceLength];
  if (hasuv)   uv=new short[faceLength];
  if (hasn)   n=new short[faceLength];
  for (int i=1; i < faceLength + 1; i++) {
    if (i > 1)     subParts=new StringTokenizer(parts.nextToken(),""String_Node_Str"");
    int index=i - 1;
    v[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasuv)     uv[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
    if (hasn)     n[index]=(short)(Short.parseShort(subParts.nextToken()) - 1);
  }
}",0.4739287558079504
39594,"@Override public void parse(){
  long startTime=Calendar.getInstance().getTimeInMillis();
  InputStream fileIn=resources.openRawResource(resources.getIdentifier(resourceID,null,null));
  BufferedReader buffer=new BufferedReader(new InputStreamReader(fileIn));
  String line;
  co=new ParseObjectData(vertices,texCoords,normals);
  parseObjects.add(co);
  materialMap=new HashMap<String,ObjMaterial>();
  Log.d(Min3d.TAG,""String_Node_Str"" + resourceID);
  Log.d(Min3d.TAG,""String_Node_Str"" + startTime);
  try {
    while ((line=buffer.readLine()) != null) {
      StringTokenizer parts=new StringTokenizer(line,""String_Node_Str"");
      int numTokens=parts.countTokens();
      if (numTokens == 0)       continue;
      String type=parts.nextToken();
      if (type.equals(VERTEX)) {
        Number3d vertex=new Number3d();
        vertex.x=Float.parseFloat(parts.nextToken());
        vertex.y=Float.parseFloat(parts.nextToken());
        vertex.z=Float.parseFloat(parts.nextToken());
        vertices.add(vertex);
      }
 else       if (type.equals(FACE)) {
        if (numTokens == 4) {
          co.numFaces++;
          co.faces.add(new ObjFace(parts,currentMaterialKey,3));
        }
 else         if (numTokens == 5) {
          co.numFaces+=2;
          co.faces.add(new ObjFace(parts,currentMaterialKey,4));
        }
      }
 else       if (type.equals(TEXCOORD)) {
        Uv texCoord=new Uv();
        texCoord.u=Float.parseFloat(parts.nextToken());
        texCoord.v=Float.parseFloat(parts.nextToken()) * -1f;
        texCoords.add(texCoord);
      }
 else       if (type.equals(NORMAL)) {
        Number3d normal=new Number3d();
        normal.x=Float.parseFloat(parts.nextToken());
        normal.y=Float.parseFloat(parts.nextToken());
        normal.z=Float.parseFloat(parts.nextToken());
        normals.add(normal);
      }
 else       if (type.equals(MATERIAL_LIB)) {
        readMaterialLib(parts.nextToken());
      }
 else       if (type.equals(USE_MATERIAL)) {
        currentMaterialKey=parts.nextToken();
      }
 else       if (type.equals(OBJECT)) {
        String objName=parts.hasMoreTokens() ? parts.nextToken() : ""String_Node_Str"";
        if (firstObject) {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co.name=objName;
          firstObject=false;
        }
 else {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co=new ParseObjectData(vertices,texCoords,normals);
          co.name=objName;
          parseObjects.add(co);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  long endTime=Calendar.getInstance().getTimeInMillis();
  Log.d(Min3d.TAG,""String_Node_Str"" + (endTime - startTime));
}","@Override public void parse(){
  long startTime=Calendar.getInstance().getTimeInMillis();
  InputStream fileIn=resources.openRawResource(resources.getIdentifier(resourceID,null,null));
  BufferedReader buffer=new BufferedReader(new InputStreamReader(fileIn));
  String line;
  co=new ParseObjectData(vertices,texCoords,normals);
  parseObjects.add(co);
  materialMap=new HashMap<String,ObjMaterial>();
  Log.d(Min3d.TAG,""String_Node_Str"" + resourceID);
  Log.d(Min3d.TAG,""String_Node_Str"" + startTime);
  try {
    while ((line=buffer.readLine()) != null) {
      StringTokenizer parts=new StringTokenizer(line,""String_Node_Str"");
      int numTokens=parts.countTokens();
      if (numTokens == 0)       continue;
      String type=parts.nextToken();
      if (type.equals(VERTEX)) {
        Number3d vertex=new Number3d();
        vertex.x=Float.parseFloat(parts.nextToken());
        vertex.y=Float.parseFloat(parts.nextToken());
        vertex.z=Float.parseFloat(parts.nextToken());
        vertices.add(vertex);
      }
 else       if (type.equals(FACE)) {
        if (numTokens == 4) {
          co.numFaces++;
          co.faces.add(new ObjFace(line,currentMaterialKey,3));
        }
 else         if (numTokens == 5) {
          co.numFaces+=2;
          co.faces.add(new ObjFace(line,currentMaterialKey,4));
        }
      }
 else       if (type.equals(TEXCOORD)) {
        Uv texCoord=new Uv();
        texCoord.u=Float.parseFloat(parts.nextToken());
        texCoord.v=Float.parseFloat(parts.nextToken()) * -1f;
        texCoords.add(texCoord);
      }
 else       if (type.equals(NORMAL)) {
        Number3d normal=new Number3d();
        normal.x=Float.parseFloat(parts.nextToken());
        normal.y=Float.parseFloat(parts.nextToken());
        normal.z=Float.parseFloat(parts.nextToken());
        normals.add(normal);
      }
 else       if (type.equals(MATERIAL_LIB)) {
        readMaterialLib(parts.nextToken());
      }
 else       if (type.equals(USE_MATERIAL)) {
        currentMaterialKey=parts.nextToken();
      }
 else       if (type.equals(OBJECT)) {
        String objName=parts.hasMoreTokens() ? parts.nextToken() : ""String_Node_Str"";
        if (firstObject) {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co.name=objName;
          firstObject=false;
        }
 else {
          Log.d(Min3d.TAG,""String_Node_Str"" + objName);
          co=new ParseObjectData(vertices,texCoords,normals);
          co.name=objName;
          parseObjects.add(co);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  long endTime=Calendar.getInstance().getTimeInMillis();
  Log.d(Min3d.TAG,""String_Node_Str"" + (endTime - startTime));
}",0.9966691339748336
39595,"@Override public void updateTwitterData(User user){
  Connection connection=null;
  PreparedStatement ps=null;
  try {
    connection=dbMgr.getConnection();
    ps=connection.prepareStatement(""String_Node_Str"");
    ps.setString(1,user.getUserName());
    ps.setString(2,user.getPictureUrl());
    ps.setString(3,user.getLocation());
    ps.setString(4,user.getDescription());
    ps.setString(5,user.getLongName());
    ps.setString(6,user.getLanguage());
    ps.setString(7,user.getUrl());
    ps.setLong(8,user.getId());
    ps.executeUpdate();
    logger.debug(DBConstants.QUERY_EXECUTION_SUCC + ps.toString());
  }
 catch (  SQLException ex) {
    logger.error(DBConstants.QUERY_EXECUTION_FAIL + ps.toString(),ex);
  }
 finally {
    dbMgr.closeResources(connection,ps,null);
  }
}","@Override public void updateTwitterData(User user){
  Connection connection=null;
  PreparedStatement ps=null;
  try {
    connection=dbMgr.getConnection();
    ps=connection.prepareStatement(""String_Node_Str"");
    ps.setString(1,user.getUserName());
    ps.setString(2,user.getPictureUrl());
    ps.setString(3,user.getLocation());
    ps.setString(4,user.getDescription());
    ps.setString(5,user.getLongName());
    ps.setString(6,user.getLanguage());
    ps.setString(7,user.getUrl());
    ps.setLong(8,user.getId());
    ps.executeUpdate();
    logger.debug(DBConstants.QUERY_EXECUTION_SUCC + ps.toString());
  }
 catch (  MySQLIntegrityConstraintViolationException e) {
  }
catch (  SQLException ex) {
    logger.error(DBConstants.QUERY_EXECUTION_FAIL + ps.toString(),ex);
  }
 finally {
    dbMgr.closeResources(connection,ps,null);
  }
}",0.962645437844458
39596,"public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  super.doPost(request,response);
  response.setContentType(""String_Node_Str"");
  try {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 catch (  ServletException e) {
    logger.error(""String_Node_Str"",e);
  }
}","public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  loadUserFromCookie(request);
  try {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 catch (  ServletException e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.6747252747252748
39597,"@Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  super.doPost(request,response);
  response.setContentType(""String_Node_Str"");
  setPageAttributes();
  if (user != null) {
    String stock=request.getParameter(""String_Node_Str"");
    String amount=request.getParameter(""String_Node_Str"");
    try {
      Stock stockObj=stockMgr.getStockById(Long.parseLong(stock));
      if (user != null && stockObj != null) {
        BuySellResponse buySellResponse=portfolioMgr.buy(user,stockObj,Integer.parseInt(amount));
        request.setAttribute(HomePageServlet.STOCK,stockObj);
        getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
      }
    }
 catch (    NumberFormatException e) {
      logger.error(""String_Node_Str"" + stock + ""String_Node_Str""+ amount,e);
    }
catch (    ServletException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","@Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  loadUserFromCookie(request);
  User user=(User)request.getAttribute(User.USER);
  if (user != null) {
    String stock=request.getParameter(""String_Node_Str"");
    String amount=request.getParameter(""String_Node_Str"");
    try {
      Stock stockObj=stockMgr.getStockById(Long.parseLong(stock));
      if (user != null && stockObj != null) {
        portfolioMgr.buy(user,stockObj,Integer.parseInt(amount));
        request.setAttribute(HomePageServlet.STOCK,stockObj);
        getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
      }
    }
 catch (    NumberFormatException e) {
      logger.error(""String_Node_Str"" + stock + ""String_Node_Str""+ amount,e);
    }
catch (    ServletException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}",0.8526315789473684
39598,"public Cookie[] createCookie(long userId,String oauthToken){
  Cookie ck1=new Cookie(COOKIE_ID,String.valueOf(userId));
  Cookie ck2=new Cookie(COOKIE_OAUTHTOKEN,oauthToken);
  ck1.setMaxAge(COOKIE_EXPIRE);
  ck2.setMaxAge(COOKIE_EXPIRE);
  return new Cookie[]{ck1,ck2};
}","public Cookie[] createCookie(long userId,String oauthToken){
  Cookie ck1=new Cookie(COOKIE_ID,String.valueOf(userId));
  Cookie ck2=new Cookie(COOKIE_OAUTHTOKEN,oauthToken);
  Cookie ck3=new Cookie(COOKIE_ACTIVE,String.valueOf(true));
  ck1.setMaxAge(COOKIE_EXPIRE);
  ck2.setMaxAge(COOKIE_EXPIRE);
  ck3.setMaxAge(COOKIE_EXPIRE);
  return new Cookie[]{ck1,ck2,ck3};
}",0.8486739469578783
39599,"protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  Twitter twitter=new TwitterFactory().getInstance();
  twitter.setOAuthConsumer(configMgr.getConsumerKey(),configMgr.getConsumerSecret());
  RequestToken requestToken=configMgr.getRequestToken();
  String verifier=request.getParameter(OAUTH_VERIFIER);
  try {
    AccessToken accessToken=twitter.getOAuthAccessToken(requestToken,verifier);
    long userId=accessToken.getUserId();
    String screenName=accessToken.getScreenName();
    String oauthToken=accessToken.getToken();
    String oauthTokenSecret=accessToken.getTokenSecret();
    User user=null;
    user=userMgr.getUserById(userId);
    twitter4j.User twUser=twitter.showUser(userId);
    if (user == null) {
      user=new User();
      user.setId(userId);
      user.setUserName(screenName);
      user.setFirstLogin(Calendar.getInstance().getTime());
      user.setLastIp(request.getRemoteAddr());
      user.setLastLogin(Calendar.getInstance().getTime());
      user.setOauthToken(oauthToken);
      user.setOauthTokenSecret(oauthTokenSecret);
      user.setCash(configMgr.getInitialMoney());
      user.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
      userMgr.saveUser(user);
      request.setAttribute(User.USER,user);
    }
 else {
      user=new User();
      user.setId(userId);
      user.setLastLogin(Calendar.getInstance().getTime());
      user.setUserName(screenName);
      user.setLastIp(request.getRemoteHost());
      user.setOauthToken(oauthToken);
      user.setOauthTokenSecret(oauthTokenSecret);
      user.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
      userMgr.updateUser(user);
      request.setAttribute(User.USER,user);
    }
    request.getSession().removeAttribute(REQUEST_TOKEN);
    Cookie cookies[]=createCookie(userId,oauthToken);
    writeCookies(response,cookies);
  }
 catch (  TwitterException e) {
    throw new ServletException(e);
  }
  response.sendRedirect(request.getContextPath() + ""String_Node_Str"");
}","protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  Twitter twitter=new TwitterFactory().getInstance();
  twitter.setOAuthConsumer(configMgr.getConsumerKey(),configMgr.getConsumerSecret());
  RequestToken requestToken=(RequestToken)request.getSession().getAttribute(REQUEST_TOKEN);
  String verifier=request.getParameter(OAUTH_VERIFIER);
  try {
    AccessToken accessToken=twitter.getOAuthAccessToken(requestToken,verifier);
    long userId=accessToken.getUserId();
    String screenName=accessToken.getScreenName();
    String oauthToken=accessToken.getToken();
    String oauthTokenSecret=accessToken.getTokenSecret();
    User user=null;
    user=userMgr.getUserById(userId);
    twitter4j.User twUser=twitter.showUser(userId);
    if (user == null) {
      user=new User();
      user.setId(userId);
      user.setUserName(screenName);
      user.setFirstLogin(Calendar.getInstance().getTime());
      user.setLastIp(request.getRemoteAddr());
      user.setLastLogin(Calendar.getInstance().getTime());
      user.setOauthToken(oauthToken);
      user.setOauthTokenSecret(oauthTokenSecret);
      user.setCash(configMgr.getInitialMoney());
      user.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
      userMgr.saveUser(user);
    }
 else {
      user=new User();
      user.setId(userId);
      user.setLastLogin(Calendar.getInstance().getTime());
      user.setUserName(screenName);
      user.setLastIp(request.getRemoteHost());
      user.setOauthToken(oauthToken);
      user.setOauthTokenSecret(oauthTokenSecret);
      user.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
      userMgr.updateUser(user);
    }
    Cookie cookies[]=createCookie(userId,oauthToken);
    writeCookies(response,cookies);
  }
 catch (  TwitterException e) {
    throw new ServletException(e);
  }
  response.sendRedirect(request.getContextPath() + ""String_Node_Str"");
}",0.9433541480820696
39600,"public void queryStockByQuote(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  User userTmp=getUser() == null ? userMgr.random() : getUser();
  String twUserName=(String)request.getParameter(QUOTE);
  twUserName=new String(twUserName.getBytes(""String_Node_Str""),""String_Node_Str"");
  if (twUserName != null && twUserName.length() > 0) {
    request.setAttribute(QUOTE,twUserName);
    TwitterProxy twitterProxy=null;
    Response resp=Response.create();
    twitterProxy=twitterProxyFactory.create(userTmp.getOauthToken(),userTmp.getOauthTokenSecret());
    SimpleTwitterUser twUser=null;
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    if (twitterProxy != null) {
      try {
        twitter4j.User twitterUser=null;
        if (Util.isValidTwitterUserName(twUserName)) {
          twitterUser=twitterProxy.getTwUser(twUserName);
          if (twitterUser != null) {
            twUser=new SimpleTwitterUser(twitterUser);
          }
        }
        searchResultList=twitterProxy.searchUsers(twUserName);
        if (twUser == null) {
          if (searchResultList != null && searchResultList.size() > 0) {
            twUser=searchResultList.get(0);
            searchResultList.remove(0);
          }
        }
 else         if (searchResultList.size() > 0 && twUser.getScreenName().equalsIgnoreCase(searchResultList.get(0).getScreenName())) {
          searchResultList.remove(0);
        }
        request.setAttribute(OTHER_SEARCH_RESULTS,searchResultList);
      }
 catch (      TwitterException e1) {
        resp.fail().reason(""String_Node_Str"");
        return;
      }
      Stock stock=null;
      if (twUser != null) {
        stock=stockMgr.getStockById(twUser.getId());
        if (stock == null) {
          logger.debug(""String_Node_Str"" + twUserName);
          stock=new Stock();
          stock.setId(twUser.getId());
          stock.setName(twUser.getScreenName());
          stock.setTotal(twUser.getFollowerCount());
          stock.setPictureUrl(twUser.getPictureUrl());
          stock.setSold(0.0D);
          stock.setVerified(twUser.isVerified());
          stockMgr.saveStock(stock);
        }
 else {
          stockMgr.updateTwitterData(stock.getId(),twUser.getFollowerCount(),twUser.getPictureUrl(),twUser.getScreenName(),twUser.isVerified());
        }
        request.setAttribute(STOCK,stock);
        logger.debug(""String_Node_Str"" + stock.getName());
      }
 else {
        logger.error(""String_Node_Str"" + twUserName);
        request.setAttribute(RESULT,USER_NOT_FOUND);
        request.setAttribute(REASON,twUserName + ""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + twUserName);
      resp.fail().reason(""String_Node_Str"");
    }
  }
}","public void queryStockByQuote(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  User userTmp=(User)request.getAttribute(User.USER) == null ? userMgr.random() : (User)request.getAttribute(User.USER);
  String twUserName=(String)request.getParameter(QUOTE);
  twUserName=new String(twUserName.getBytes(""String_Node_Str""),""String_Node_Str"");
  if (twUserName != null && twUserName.length() > 0) {
    request.setAttribute(QUOTE,twUserName);
    TwitterProxy twitterProxy=null;
    Response resp=Response.create();
    twitterProxy=twitterProxyFactory.create(userTmp.getOauthToken(),userTmp.getOauthTokenSecret());
    SimpleTwitterUser twUser=null;
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    if (twitterProxy != null) {
      try {
        twitter4j.User twitterUser=null;
        if (Util.isValidTwitterUserName(twUserName)) {
          twitterUser=twitterProxy.getTwUser(twUserName);
          if (twitterUser != null) {
            twUser=new SimpleTwitterUser(twitterUser);
          }
        }
        searchResultList=twitterProxy.searchUsers(twUserName);
        if (twUser == null) {
          if (searchResultList != null && searchResultList.size() > 0) {
            twUser=searchResultList.get(0);
            searchResultList.remove(0);
          }
        }
 else         if (searchResultList.size() > 0 && twUser.getScreenName().equalsIgnoreCase(searchResultList.get(0).getScreenName())) {
          searchResultList.remove(0);
        }
        request.setAttribute(OTHER_SEARCH_RESULTS,searchResultList);
      }
 catch (      TwitterException e1) {
        resp.fail().reason(""String_Node_Str"");
        return;
      }
      Stock stock=null;
      if (twUser != null) {
        stock=stockMgr.getStockById(twUser.getId());
        if (stock == null) {
          logger.debug(""String_Node_Str"" + twUserName);
          stock=new Stock();
          stock.setId(twUser.getId());
          stock.setName(twUser.getScreenName());
          stock.setTotal(twUser.getFollowerCount());
          stock.setPictureUrl(twUser.getPictureUrl());
          stock.setSold(0.0D);
          stock.setVerified(twUser.isVerified());
          stockMgr.saveStock(stock);
        }
 else {
          stockMgr.updateTwitterData(stock.getId(),twUser.getFollowerCount(),twUser.getPictureUrl(),twUser.getScreenName(),twUser.isVerified());
        }
        request.setAttribute(STOCK,stock);
        logger.debug(""String_Node_Str"" + stock.getName());
      }
 else {
        logger.error(""String_Node_Str"" + twUserName);
        request.setAttribute(RESULT,USER_NOT_FOUND);
        request.setAttribute(REASON,twUserName + ""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + twUserName);
      resp.fail().reason(""String_Node_Str"");
    }
  }
}",0.9844632768361582
39601,"public void queryStockById(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String stockIdStr=request.getParameter(STOCK);
  if (user != null && stockIdStr != null && stockIdStr.length() > 0) {
    long stockId=Long.parseLong(stockIdStr);
    TwitterProxy twitterProxy=user == null ? null : twitterProxyFactory.create(user.getOauthToken(),user.getOauthTokenSecret());
    Stock stock=stockMgr.getStockById(stockId);
    if (stock == null) {
      try {
        twitter4j.User twUser=twitterProxy.getTwUser(stockId);
        stock=new Stock();
        stock.setId(twUser.getId());
        stock.setName(twUser.getScreenName());
        stock.setTotal(twUser.getFollowersCount());
        stock.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
        stock.setSold(0.0D);
        stock.setVerified(twUser.isVerified());
        stockMgr.saveStock(stock);
      }
 catch (      TwitterException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    try {
      searchResultList=twitterProxy.searchUsers(stock.getName());
    }
 catch (    TwitterException e) {
      e.printStackTrace();
    }
    request.setAttribute(GetQuoteServlet.QUOTE_DISPLAY,stock.getName());
    request.setAttribute(STOCK,stock);
    request.setAttribute(STOCK_ID,new Long(stock.getId()));
    request.setAttribute(GetQuoteServlet.OTHER_SEARCH_RESULTS,searchResultList);
  }
}","public void queryStockById(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String stockIdStr=request.getParameter(STOCK);
  User user=(User)request.getAttribute(User.USER);
  if (user != null && stockIdStr != null && stockIdStr.length() > 0) {
    long stockId=Long.parseLong(stockIdStr);
    TwitterProxy twitterProxy=user == null ? null : twitterProxyFactory.create(user.getOauthToken(),user.getOauthTokenSecret());
    Stock stock=stockMgr.getStockById(stockId);
    if (stock == null) {
      try {
        twitter4j.User twUser=twitterProxy.getTwUser(stockId);
        stock=new Stock();
        stock.setId(twUser.getId());
        stock.setName(twUser.getScreenName());
        stock.setTotal(twUser.getFollowersCount());
        stock.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
        stock.setSold(0.0D);
        stock.setVerified(twUser.isVerified());
        stockMgr.saveStock(stock);
      }
 catch (      TwitterException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    try {
      searchResultList=twitterProxy.searchUsers(stock.getName());
    }
 catch (    TwitterException e) {
      e.printStackTrace();
    }
    request.setAttribute(GetQuoteServlet.QUOTE_DISPLAY,stock.getName());
    request.setAttribute(STOCK,stock);
    request.setAttribute(STOCK_ID,new Long(stock.getId()));
    request.setAttribute(GetQuoteServlet.OTHER_SEARCH_RESULTS,searchResultList);
  }
}",0.9833822091886608
39602,"@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  super.doGet(request,response);
  setPageAttributes();
  response.setContentType(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  long start=0;
  long end=0;
  start=System.currentTimeMillis();
  if (!twitstreet.isInitialized()) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  start=System.currentTimeMillis();
  queryStockById(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  start=System.currentTimeMillis();
  queryStockByQuote(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  if (getUser() != null) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 else {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
}","@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  long start=0;
  long end=0;
  start=System.currentTimeMillis();
  if (!twitstreet.isInitialized()) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  loadUserFromCookie(request);
  start=System.currentTimeMillis();
  queryStockById(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  start=System.currentTimeMillis();
  queryStockByQuote(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  if (request.getAttribute(User.USER) != null) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 else {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
}",0.8887134964483031
39603,"public void queryUserFromTwitter(String searchText) throws ServletException, IOException {
  User userTmp=getUser() == null ? userMgr.random() : getUser();
  if (searchText != null && searchText.length() > 0) {
    TwitterProxy twitterProxy=null;
    Response resp=Response.create();
    twitterProxy=userTmp == null ? null : twitterProxyFactory.create(userTmp.getOauthToken(),userTmp.getOauthTokenSecret());
    User twUser=null;
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    if (twitterProxy != null) {
      try {
        try {
          twitter4j.User twitterUser=twitterProxy.getTwUser(searchText);
          if (twitterUser != null) {
            twUser=userMgr.getUserById(twitterUser.getId());
            searchResultUsers.remove(twUser);
            searchResultUsers.add(twUser);
          }
        }
 catch (        TwitterException ex) {
        }
        searchResultList=twitterProxy.searchUsers(searchText);
        if (searchResultList != null && searchResultList.size() > 0) {
          ArrayList<Long> idList=new ArrayList<Long>();
          for (          SimpleTwitterUser stu : searchResultList) {
            idList.add(stu.getId());
          }
          ArrayList<User> tempList=userMgr.getUsersByIdList(idList);
          searchResultUsers.removeAll(tempList);
          searchResultUsers.addAll(tempList);
        }
      }
 catch (      TwitterException e1) {
        resp.fail().reason(""String_Node_Str"");
        return;
      }
    }
 else {
      logger.error(""String_Node_Str"" + searchText);
      resp.fail().reason(""String_Node_Str"");
    }
  }
}","public void queryUserFromTwitter(String searchText,HttpServletRequest request) throws ServletException, IOException {
  User userTmp=request.getAttribute(User.USER) == null ? userMgr.random() : (User)request.getAttribute(User.USER);
  if (searchText != null && searchText.length() > 0) {
    TwitterProxy twitterProxy=null;
    Response resp=Response.create();
    twitterProxy=userTmp == null ? null : twitterProxyFactory.create(userTmp.getOauthToken(),userTmp.getOauthTokenSecret());
    User twUser=null;
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    if (twitterProxy != null) {
      try {
        try {
          twitter4j.User twitterUser=twitterProxy.getTwUser(searchText);
          if (twitterUser != null) {
            twUser=userMgr.getUserById(twitterUser.getId());
            searchResultUsers.remove(twUser);
            searchResultUsers.add(twUser);
          }
        }
 catch (        TwitterException ex) {
        }
        searchResultList=twitterProxy.searchUsers(searchText);
        if (searchResultList != null && searchResultList.size() > 0) {
          ArrayList<Long> idList=new ArrayList<Long>();
          for (          SimpleTwitterUser stu : searchResultList) {
            idList.add(stu.getId());
          }
          ArrayList<User> tempList=userMgr.getUsersByIdList(idList);
          searchResultUsers.removeAll(tempList);
          searchResultUsers.addAll(tempList);
        }
      }
 catch (      TwitterException e1) {
        resp.fail().reason(""String_Node_Str"");
        return;
      }
    }
 else {
      logger.error(""String_Node_Str"" + searchText);
      resp.fail().reason(""String_Node_Str"");
    }
  }
}",0.9672574346650644
39604,"@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  super.doGet(request,response);
  searchResultUsers=new ArrayList<User>();
  setPageAttributes();
  response.setContentType(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  long start=0;
  long end=0;
  start=System.currentTimeMillis();
  if (!twitstreet.isInitialized()) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  start=System.currentTimeMillis();
  String searchText=(String)request.getParameter(GET_USER_PARAM);
  queryUserFromDB(searchText);
  queryUserFromTwitter(searchText);
  searchResultUsers.removeAll(Collections.singleton(null));
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  User user=searchResultUsers.remove(0);
  request.setAttribute(GET_USER,user);
  request.setAttribute(GET_USER_OTHER_SEARCH_RESULTS,searchResultUsers);
  if (user != null) {
    request.setAttribute(GetUserServlet.GET_USER_DISPLAY,user.getUserName());
  }
  request.setAttribute(GET_USER_TEXT,searchText);
  if (getUser() != null) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 else {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
}","@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  searchResultUsers=new ArrayList<User>();
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  long start=0;
  long end=0;
  start=System.currentTimeMillis();
  if (!twitstreet.isInitialized()) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  start=System.currentTimeMillis();
  loadUserFromCookie(request);
  String searchText=(String)request.getParameter(GET_USER_PARAM);
  queryUserFromDB(searchText);
  queryUserFromTwitter(searchText,request);
  searchResultUsers.removeAll(Collections.singleton(null));
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  User user=searchResultUsers.remove(0);
  request.setAttribute(GET_USER,user);
  request.setAttribute(GET_USER_OTHER_SEARCH_RESULTS,searchResultUsers);
  if (user != null) {
    request.setAttribute(GetUserServlet.GET_USER_DISPLAY,user.getUserName());
  }
  request.setAttribute(GET_USER_TEXT,searchText);
  if (request.getAttribute(User.USER) != null) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 else {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
}",0.8888202594193947
39605,"private void invalidateCookies(String[] cookieNames,HttpServletRequest request,HttpServletResponse response){
  List<String> cookieNameList=Arrays.asList(cookieNames);
  for (  Cookie cookie : request.getCookies()) {
    if (cookieNameList.contains(cookie.getName())) {
      cookie.setMaxAge(0);
      cookie.setValue(""String_Node_Str"");
      cookie.setPath(""String_Node_Str"");
      cookie.setDomain(request.getHeader(""String_Node_Str""));
      response.addCookie(cookie);
    }
  }
}","private void invalidateCookies(String[] cookieNames,HttpServletRequest request,HttpServletResponse response){
  List<String> cookieNameList=Arrays.asList(cookieNames);
  for (  Cookie cookie : request.getCookies()) {
    if (cookieNameList.contains(cookie.getName())) {
      if (CallBackServlet.COOKIE_ACTIVE.equalsIgnoreCase(cookie.getName())) {
        cookie.setValue(String.valueOf(false));
      }
      cookie.setMaxAge(0);
      cookie.setDomain(request.getHeader(""String_Node_Str""));
      response.addCookie(cookie);
    }
  }
}",0.7882926829268293
39606,"public void queryStockByQuote(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String twUserName=(String)request.getParameter(QUOTE);
  if (twUserName != null && twUserName.length() > 0) {
    User userTmp=getUser() == null ? userMgr.random() : getUser();
    request.setAttribute(QUOTE,twUserName);
    TwitterProxy twitterProxy=null;
    Response resp=Response.create();
    twitterProxy=twitterProxyFactory.create(userTmp.getOauthToken(),userTmp.getOauthTokenSecret());
    SimpleTwitterUser twUser=null;
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    if (twitterProxy != null) {
      try {
        try {
          twitter4j.User twitterUser=twitterProxy.getTwUser(twUserName);
          if (twitterUser != null) {
            twUser=new SimpleTwitterUser(twitterUser);
          }
        }
 catch (        TwitterException ex) {
        }
        searchResultList=twitterProxy.searchUsers(twUserName);
        if (twUser == null) {
          if (searchResultList != null && searchResultList.size() > 0) {
            twUser=searchResultList.get(0);
            searchResultList.remove(0);
          }
        }
 else         if (searchResultList.size() > 0 && twUser.getScreenName().equalsIgnoreCase(searchResultList.get(0).getScreenName())) {
          searchResultList.remove(0);
        }
        request.setAttribute(OTHER_SEARCH_RESULTS,searchResultList);
      }
 catch (      TwitterException e1) {
        resp.fail().reason(""String_Node_Str"");
        return;
      }
      Stock stock=null;
      if (twUser != null) {
        stock=stockMgr.getStockById(twUser.getId());
        if (stock == null) {
          logger.debug(""String_Node_Str"" + twUserName);
          stock=new Stock();
          stock.setId(twUser.getId());
          stock.setName(twUser.getScreenName());
          stock.setTotal(twUser.getFollowerCount());
          stock.setPictureUrl(twUser.getPictureUrl());
          stock.setSold(0.0D);
          stock.setVerified(twUser.isVerified());
          stockMgr.saveStock(stock);
        }
 else {
          stockMgr.updateTwitterData(stock.getId(),twUser.getFollowerCount(),twUser.getPictureUrl(),twUser.getScreenName(),twUser.isVerified());
        }
        request.setAttribute(STOCK,stock);
        logger.debug(""String_Node_Str"" + stock.getName());
      }
 else {
        logger.error(""String_Node_Str"" + twUserName);
        request.setAttribute(RESULT,USER_NOT_FOUND);
        request.setAttribute(REASON,twUserName + ""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + twUserName);
      resp.fail().reason(""String_Node_Str"");
    }
  }
}","public void queryStockByQuote(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String twUserName=(String)request.getParameter(QUOTE);
  if (twUserName != null && twUserName.length() > 0) {
    User userTmp=(User)(request.getAttribute(User.USER) == null ? userMgr.random() : request.getAttribute(User.USER));
    request.setAttribute(QUOTE,twUserName);
    TwitterProxy twitterProxy=null;
    Response resp=Response.create();
    twitterProxy=twitterProxyFactory.create(userTmp.getOauthToken(),userTmp.getOauthTokenSecret());
    SimpleTwitterUser twUser=null;
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    if (twitterProxy != null) {
      try {
        try {
          twitter4j.User twitterUser=twitterProxy.getTwUser(twUserName);
          if (twitterUser != null) {
            twUser=new SimpleTwitterUser(twitterUser);
          }
        }
 catch (        TwitterException ex) {
        }
        searchResultList=twitterProxy.searchUsers(twUserName);
        if (twUser == null) {
          if (searchResultList != null && searchResultList.size() > 0) {
            twUser=searchResultList.get(0);
            searchResultList.remove(0);
          }
        }
 else         if (searchResultList.size() > 0 && twUser.getScreenName().equalsIgnoreCase(searchResultList.get(0).getScreenName())) {
          searchResultList.remove(0);
        }
        request.setAttribute(OTHER_SEARCH_RESULTS,searchResultList);
      }
 catch (      TwitterException e1) {
        resp.fail().reason(""String_Node_Str"");
        return;
      }
      Stock stock=null;
      if (twUser != null) {
        stock=stockMgr.getStockById(twUser.getId());
        if (stock == null) {
          logger.debug(""String_Node_Str"" + twUserName);
          stock=new Stock();
          stock.setId(twUser.getId());
          stock.setName(twUser.getScreenName());
          stock.setTotal(twUser.getFollowerCount());
          stock.setPictureUrl(twUser.getPictureUrl());
          stock.setSold(0.0D);
          stock.setVerified(twUser.isVerified());
          stockMgr.saveStock(stock);
        }
 else {
          stockMgr.updateTwitterData(stock.getId(),twUser.getFollowerCount(),twUser.getPictureUrl(),twUser.getScreenName(),twUser.isVerified());
        }
        request.setAttribute(STOCK,stock);
        logger.debug(""String_Node_Str"" + stock.getName());
      }
 else {
        logger.error(""String_Node_Str"" + twUserName);
        request.setAttribute(RESULT,USER_NOT_FOUND);
        request.setAttribute(REASON,twUserName + ""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + twUserName);
      resp.fail().reason(""String_Node_Str"");
    }
  }
}",0.9846210179421456
39607,"public void queryStockById(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String stockIdStr=request.getParameter(STOCK);
  if (user != null && stockIdStr != null && stockIdStr.length() > 0) {
    long stockId=Long.parseLong(stockIdStr);
    TwitterProxy twitterProxy=user == null ? null : twitterProxyFactory.create(user.getOauthToken(),user.getOauthTokenSecret());
    Stock stock=stockMgr.getStockById(stockId);
    if (stock == null) {
      try {
        twitter4j.User twUser=twitterProxy.getTwUser(stockId);
        stock=new Stock();
        stock.setId(twUser.getId());
        stock.setName(twUser.getScreenName());
        stock.setTotal(twUser.getFollowersCount());
        stock.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
        stock.setSold(0.0D);
        stock.setVerified(twUser.isVerified());
        stockMgr.saveStock(stock);
      }
 catch (      TwitterException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    try {
      searchResultList=twitterProxy.searchUsers(stock.getName());
    }
 catch (    TwitterException e) {
      e.printStackTrace();
    }
    request.setAttribute(HomePageServlet.QUOTE_DISPLAY,stock.getName());
    request.setAttribute(STOCK,stock);
    request.setAttribute(STOCK_ID,new Long(stock.getId()));
    request.setAttribute(HomePageServlet.OTHER_SEARCH_RESULTS,searchResultList);
  }
}","public void queryStockById(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String stockIdStr=request.getParameter(STOCK);
  User user=(User)request.getAttribute(User.USER);
  if (user != null && stockIdStr != null && stockIdStr.length() > 0) {
    long stockId=Long.parseLong(stockIdStr);
    TwitterProxy twitterProxy=user == null ? null : twitterProxyFactory.create(user.getOauthToken(),user.getOauthTokenSecret());
    Stock stock=stockMgr.getStockById(stockId);
    if (stock == null) {
      try {
        twitter4j.User twUser=twitterProxy.getTwUser(stockId);
        stock=new Stock();
        stock.setId(twUser.getId());
        stock.setName(twUser.getScreenName());
        stock.setTotal(twUser.getFollowersCount());
        stock.setPictureUrl(twUser.getProfileImageURL().toExternalForm());
        stock.setSold(0.0D);
        stock.setVerified(twUser.isVerified());
        stockMgr.saveStock(stock);
      }
 catch (      TwitterException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    ArrayList<SimpleTwitterUser> searchResultList=new ArrayList<SimpleTwitterUser>();
    try {
      searchResultList=twitterProxy.searchUsers(stock.getName());
    }
 catch (    TwitterException e) {
      e.printStackTrace();
    }
    request.setAttribute(HomePageServlet.QUOTE_DISPLAY,stock.getName());
    request.setAttribute(STOCK,stock);
    request.setAttribute(STOCK_ID,new Long(stock.getId()));
    request.setAttribute(HomePageServlet.OTHER_SEARCH_RESULTS,searchResultList);
  }
}",0.9833822091886608
39608,"@Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  super.doGet(request,response);
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  long start=0;
  long end=0;
  start=System.currentTimeMillis();
  if (!twitstreet.isInitialized()) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  if (request.getParameter(""String_Node_Str"") != null) {
    request.removeAttribute(User.USER);
    invalidateCookies(new String[]{CallBackServlet.COOKIE_ID,CallBackServlet.COOKIE_OAUTHTOKEN},request,response);
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  start=System.currentTimeMillis();
  queryStockById(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  start=System.currentTimeMillis();
  queryStockByQuote(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  if (getUser() != null) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 else {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
}","@Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  long start=0;
  long end=0;
  start=System.currentTimeMillis();
  if (!twitstreet.isInitialized()) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  if (request.getParameter(""String_Node_Str"") != null) {
    request.getSession().invalidate();
    request.removeAttribute(User.USER);
    invalidateCookies(new String[]{CallBackServlet.COOKIE_ID,CallBackServlet.COOKIE_OAUTHTOKEN,CallBackServlet.COOKIE_ACTIVE},request,response);
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
    return;
  }
  loadUserFromCookie(request);
  start=System.currentTimeMillis();
  queryStockById(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  start=System.currentTimeMillis();
  queryStockByQuote(request,response);
  end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start));
  if (request.getAttribute(User.USER) != null) {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 else {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
}",0.8856601389766267
39609,"public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  super.doPost(request,response);
  try {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 catch (  ServletException e) {
    logger.error(""String_Node_Str"",e);
  }
}","public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  loadUserFromCookie(request);
  try {
    getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 catch (  ServletException e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.7106481481481481
39610,"public void loadUserFromCookie(HttpServletRequest request){
  if (request.getAttribute(User.USER) != null) {
    return;
  }
  Cookie[] cookies=request.getCookies() == null ? new Cookie[]{} : request.getCookies();
  boolean idFound=false;
  boolean oAuthFound=false;
  boolean active=false;
  String idStr=""String_Node_Str"";
  String oAuth=""String_Node_Str"";
  User user=null;
  for (  Cookie cookie : cookies) {
    if (cookie.getName().equals(CallBackServlet.COOKIE_ID)) {
      idStr=cookie.getValue();
      idFound=true;
    }
    if (cookie.getName().equals(CallBackServlet.COOKIE_OAUTHTOKEN)) {
      oAuth=cookie.getValue();
      oAuthFound=true;
    }
    if (idFound && oAuthFound && active) {
      try {
        long id=Long.parseLong(idStr);
        user=userMgr.getUserById(id);
        if (user != null && oAuth.equals(user.getOauthToken())) {
          request.setAttribute(User.USER,user);
          request.getSession().setAttribute(User.USER_ID,user.getId());
          break;
        }
      }
 catch (      NumberFormatException nfe) {
      }
      break;
    }
  }
}","public void loadUserFromCookie(HttpServletRequest request){
  if (request.getAttribute(User.USER) != null) {
    return;
  }
  Cookie[] cookies=request.getCookies() == null ? new Cookie[]{} : request.getCookies();
  boolean idFound=false;
  boolean oAuthFound=false;
  boolean active=false;
  String idStr=""String_Node_Str"";
  String oAuth=""String_Node_Str"";
  User user=null;
  for (  Cookie cookie : cookies) {
    if (cookie.getName().equals(CallBackServlet.COOKIE_ID)) {
      idStr=cookie.getValue();
      idFound=true;
    }
    if (cookie.getName().equals(CallBackServlet.COOKIE_OAUTHTOKEN)) {
      oAuth=cookie.getValue();
      oAuthFound=true;
    }
    if (idFound && oAuthFound) {
      try {
        long id=Long.parseLong(idStr);
        user=userMgr.getUserById(id);
        if (user != null && oAuth.equals(user.getOauthToken())) {
          request.setAttribute(User.USER,user);
          request.getSession().setAttribute(User.USER_ID,user.getId());
          break;
        }
      }
 catch (      NumberFormatException nfe) {
      }
      break;
    }
  }
}",0.9953917050691244
39611,"public Stock getStock(String name){
  Connection connection=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  Stock stockDO=null;
  try {
    connection=dbMgr.getConnection();
    ps=connection.prepareStatement(""String_Node_Str"");
    ps.setString(1,name);
    rs=ps.executeQuery();
    while (rs.next()) {
      stockDO=new Stock();
      stockDO.setId(rs.getLong(""String_Node_Str""));
      stockDO.setName(rs.getString(""String_Node_Str""));
      stockDO.setTotal(rs.getInt(""String_Node_Str""));
      stockDO.setSold(rs.getDouble(""String_Node_Str""));
      stockDO.setPictureUrl(rs.getString(""String_Node_Str""));
      stockDO.setLastUpdate(rs.getTimestamp(""String_Node_Str""));
      break;
    }
    logger.debug(""String_Node_Str"" + ps.toString());
  }
 catch (  SQLException ex) {
    logger.error(""String_Node_Str"" + ps.toString(),ex);
  }
 finally {
    try {
      if (rs != null && !rs.isClosed()) {
        rs.close();
      }
      if (ps != null && !ps.isClosed()) {
        ps.close();
      }
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  return stockDO;
}","public Stock getStock(String name){
  Connection connection=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  Stock stockDO=null;
  try {
    connection=dbMgr.getConnection();
    ps=connection.prepareStatement(""String_Node_Str"");
    ps.setString(1,name);
    rs=ps.executeQuery();
    while (rs.next()) {
      stockDO=new Stock();
      stockDO.setId(rs.getLong(""String_Node_Str""));
      stockDO.setName(rs.getString(""String_Node_Str""));
      stockDO.setTotal(rs.getInt(""String_Node_Str""));
      stockDO.setPictureUrl(rs.getString(""String_Node_Str""));
      stockDO.setLastUpdate(rs.getTimestamp(""String_Node_Str""));
      break;
    }
    logger.debug(""String_Node_Str"" + ps.toString());
  }
 catch (  SQLException ex) {
    logger.error(""String_Node_Str"" + ps.toString(),ex);
  }
 finally {
    try {
      if (rs != null && !rs.isClosed()) {
        rs.close();
      }
      if (ps != null && !ps.isClosed()) {
        ps.close();
      }
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  return stockDO;
}",0.9763713080168775
39612,"public void updateStockHistory(){
  Connection connection=null;
  PreparedStatement ps=null;
  try {
    connection=dbMgr.getConnection();
    ps=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    ps.executeUpdate();
    logger.debug(""String_Node_Str"" + ps.toString());
  }
 catch (  SQLException ex) {
    logger.error(""String_Node_Str"" + ps.toString(),ex);
  }
 finally {
    try {
      if (ps != null && !ps.isClosed()) {
        ps.close();
      }
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","public void updateStockHistory(){
  Connection connection=null;
  PreparedStatement ps=null;
  try {
    connection=dbMgr.getConnection();
    ps=connection.prepareStatement(""String_Node_Str"");
    ps.executeUpdate();
    logger.debug(""String_Node_Str"" + ps.toString());
  }
 catch (  MySQLIntegrityConstraintViolationException uniqueKeyException) {
  }
catch (  SQLException ex) {
    logger.error(""String_Node_Str"" + ps.toString(),ex);
  }
 finally {
    try {
      if (ps != null && !ps.isClosed()) {
        ps.close();
      }
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}",0.8309037900874635
39613,"public void load(){
  Connection connection=null;
  Statement stmt=null;
  ResultSet rs=null;
  try {
    connection=dbMgr.getConnection();
    stmt=connection.createStatement();
    rs=stmt.executeQuery(""String_Node_Str"");
    while (rs.next()) {
      Config config=new Config();
      config.setId(rs.getLong(Config.ID));
      config.setParm(rs.getString(Config.PARM));
      config.setVal(rs.getString(Config.VAL));
      configMap.put(config.getParm(),config);
    }
    logger.debug(""String_Node_Str"" + stmt.toString());
    logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + stmt.toString(),e);
    logger.debug(""String_Node_Str"");
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null && !rs.isClosed()) {
        rs.close();
      }
      if (stmt != null && !stmt.isClosed()) {
        stmt.close();
      }
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    Exception ex) {
      logger.debug(""String_Node_Str"",ex);
    }
  }
}","public void load(){
  Connection connection=null;
  Statement stmt=null;
  ResultSet rs=null;
  try {
    connection=dbMgr.getConnection();
    stmt=connection.createStatement();
    rs=stmt.executeQuery(""String_Node_Str"");
    while (rs.next()) {
      Config config=new Config();
      config.setId(rs.getLong(Config.ID));
      config.setParm(rs.getString(Config.PARM));
      config.setVal(rs.getString(Config.VAL));
      configMap.put(config.getParm(),config);
    }
    logger.debug(""String_Node_Str"" + stmt.toString());
    logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + stmt == null ? ""String_Node_Str"" : stmt.toString(),e);
    logger.error(""String_Node_Str"");
  }
 finally {
    try {
      if (rs.isClosed()) {
        rs.close();
      }
      if (stmt.isClosed()) {
        stmt.close();
      }
      if (connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}",0.8027149321266969
39614,"@Override public BuySellResponse sell(long seller,long stock,int amount){
  User user=userMgr.getUserById(seller);
  int amount2Buy=user.getCash() < amount ? user.getCash() : amount;
  Stock stockObj=stockMgr.getStockById(stock);
  double sold=(double)amount2Buy / (double)stockObj.getTotal();
  stockObj.setSold(stockObj.getSold() - sold);
  UserStock userStock=getStockInPortfolio(seller,stock);
  if (userStock != null) {
    int soldAmount=(int)(userStock.getPercent() * stockObj.getTotal());
    if (amount >= soldAmount) {
      deleteStockInPortfolio(seller,stock);
    }
 else {
      updateStockInPortfolio(seller,stock,-sold);
    }
  }
  stockMgr.updateSold(stock,-sold);
  userMgr.updateCashAndPortfolio(seller,-amount2Buy);
  transactionMgr.recordTransaction(user,stockObj,amount2Buy,TransactionMgr.SELL);
  user.setCash(user.getCash() + amount2Buy);
  user.setPortfolio(user.getPortfolio() - amount2Buy);
  UserStock updateUserStock=getStockInPortfolio(seller,stock);
  int userStockValue=updateUserStock == null ? 0 : (int)(updateUserStock.getPercent() * stockObj.getTotal());
  return new BuySellResponse(user,stockObj,userStockValue);
}","@Override public BuySellResponse sell(long seller,long stock,int amount){
  User user=userMgr.getUserById(seller);
  UserStock userStock=getStockInPortfolio(seller,stock);
  Stock stockObj=stockMgr.getStockById(stock);
  double sold=(double)amount / (double)stockObj.getTotal();
  stockObj.setSold(stockObj.getSold() - sold);
  if (userStock != null) {
    int soldAmount=(int)(userStock.getPercent() * stockObj.getTotal());
    if (amount >= soldAmount) {
      deleteStockInPortfolio(seller,stock);
    }
 else {
      updateStockInPortfolio(seller,stock,-sold);
    }
  }
  stockMgr.updateSold(stock,-sold);
  userMgr.updateCashAndPortfolio(seller,-amount);
  transactionMgr.recordTransaction(user,stockObj,amount,TransactionMgr.SELL);
  user.setCash(user.getCash() + amount);
  user.setPortfolio(user.getPortfolio() - amount);
  UserStock updateUserStock=getStockInPortfolio(seller,stock);
  int userStockValue=updateUserStock == null ? 0 : (int)(updateUserStock.getPercent() * stockObj.getTotal());
  return new BuySellResponse(user,stockObj,userStockValue);
}",0.9134355275022544
39615,"/** 
 * Checks that buyer has enough enough money and updates buyer's portfolio adding stocks.
 * @param buyer is the twitter id of Buyer
 * @param price is the total money to be paid.
 * @param stock is the twitter id of stock.
 * @param percent is the ratio of bought followers to the total followers.
 * @return
 */
Result<Object> buy(String buyer,int price,String stock,double percent);","/** 
 * Checks that buyer has enough enough money and updates buyer's portfolio adding stocks.
 * @param buyer is the twitter id of Buyer
 * @param price is the total money to be paid.
 * @param stock is the twitter id of stock.
 * @param percent is the ratio of bought followers to the total followers.
 * @return
 */
public Result<Object> buy(String buyer,int price,String stock,double percent);",0.9911054637865312
39616,"@Inject private @Override public Result<Object> buy(String buyer,int price,String stock,double percent){
  return null;
}","@Override public Result<Object> buy(String buyer,int price,String stock,double percent){
  return null;
}",0.9292035398230089
39617,"public void modelGroupAdded(NSNotification n){
  EOModelGroup group=(EOModelGroup)n.object();
  if (group.modelNamed(""String_Node_Str"") != null && group.modelNamed(""String_Node_Str"") != null) {
    ERXEOAccessUtilities.createRelationship(""String_Node_Str"",ERCMailAddress.ENTITY_NAME,""String_Node_Str"",SESComplaintNotification.ENTITY_NAME,""String_Node_Str"",true,EOClassDescription.DeleteRuleDeny,false,true,false);
    ERXEOAccessUtilities.createRelationship(""String_Node_Str"",ERCMailAddress.ENTITY_NAME,""String_Node_Str"",SESBounceNotification.ENTITY_NAME,""String_Node_Str"",true,EOClassDescription.DeleteRuleDeny,false,true,false);
  }
}","public void modelGroupAdded(NSNotification n){
  EOModelGroup group=(EOModelGroup)n.object();
  if (group.modelNamed(""String_Node_Str"") != null && group.modelNamed(""String_Node_Str"") != null) {
    createRelationship(""String_Node_Str"",ERCMailAddress.ENTITY_NAME,""String_Node_Str"",SESComplaintNotification.ENTITY_NAME,""String_Node_Str"",true,EOClassDescription.DeleteRuleDeny,false,true,false);
    createRelationship(""String_Node_Str"",ERCMailAddress.ENTITY_NAME,""String_Node_Str"",SESBounceNotification.ENTITY_NAME,""String_Node_Str"",true,EOClassDescription.DeleteRuleDeny,false,true,false);
  }
}",0.9658536585365852
39618,"public void setObject(EOEnterpriseObject object){
  this.object=object;
}","public void setObject(EOEnterpriseObject object){
  this.object=new ERXEOSerializationUtilities.SerialEOWrapper(object);
}",0.7487179487179487
39619,"public EOEnterpriseObject object(){
  return object;
}","public EOEnterpriseObject object(){
  return object.eo();
}",0.9557522123893806
39620,"public String rowClass(){
  String classes=index() % 2 == 1 ? ""String_Node_Str"" : ""String_Node_Str"";
  String level=(logger().getLevel() == null) ? ""String_Node_Str"" : logger().getLevel().toString().toLowerCase();
  classes=ERXStringUtilities.stringByAppendingCSSClass(classes,level);
  return classes;
}","public String rowClass(){
  String classes=index() % 2 == 0 ? ""String_Node_Str"" : ""String_Node_Str"";
  String level=(logger().getLevel() == null) ? ""String_Node_Str"" : logger().getLevel().toString().toLowerCase();
  classes=ERXStringUtilities.stringByAppendingCSSClass(classes,level);
  return classes;
}",0.9967105263157896
39621,"public int hashCode(){
  return (new Long(getTime()).hashCode()) ^ (new Long(duration()).hashCode());
}","public int hashCode(){
  return Long.valueOf(getTime()).hashCode() ^ Long.valueOf(duration()).hashCode();
}",0.8666666666666667
39622,"public Boolean canUpdateProperty(D2WContext c){
  EOEnterpriseObject eo=object(c);
  String propertyKey=c.propertyKey();
  if (eo == null || propertyKey == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  boolean b=CRUDUtility.canReadProperty(auth(c),eo,propertyKey);
  return Boolean.valueOf(b);
}","public Boolean canUpdateProperty(D2WContext c){
  EOEnterpriseObject eo=object(c);
  String propertyKey=c.propertyKey();
  if (eo == null || propertyKey == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  boolean b=CRUDUtility.canUpdateProperty(auth(c),eo,propertyKey);
  return Boolean.valueOf(b);
}",0.9875
39623,"protected void configureServices(Environment environment){
  services.add(TransactionServices.class,new MockTransactionServices());
  if (environment.equals(Environments.EE) || environment.equals(Environments.EE_INJECT)) {
    services.add(EjbServices.class,new MockEjBServices());
    services.add(SecurityServices.class,new MockSecurityServices());
  }
}","protected void configureServices(Environment environment){
  if (environment.equals(Environments.EE) || environment.equals(Environments.EE_INJECT)) {
    services.add(TransactionServices.class,new MockTransactionServices());
    services.add(EjbServices.class,new MockEjBServices());
    services.add(SecurityServices.class,new MockSecurityServices());
  }
}",0.7927170868347339
39624,"public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  if (manager == null) {
    throw new IllegalStateException(""String_Node_Str"" + WeldManager.class.getName() + ""String_Node_Str"");
  }
  ConversationManager2 conversationManager=BeanUtils.getBeanReference(manager,ConversationManager2.class);
  CDIConversationID id=context.get(CDIConversationID.class);
  if (id == null) {
    id=new CDIConversationID(null);
  }
  conversationManager.setupContext();
  conversationManager.setupConversation(id.getId());
}","public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  if (manager == null) {
    throw new IllegalStateException(""String_Node_Str"" + WeldManager.class.getName() + ""String_Node_Str"");
  }
  ConversationManager2 conversationManager=BeanUtils.getBeanReference(manager,ConversationManager2.class);
  CDIConversationID id=context.get(CDIConversationID.class);
  if (id == null) {
    id=new CDIConversationID(null);
  }
  if (!conversationManager.isContextActive()) {
    conversationManager.setupContext();
  }
  conversationManager.setupConversation(id.getId());
}",0.9553719008264464
39625,"public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  Conversation conversation=BeanUtils.getBeanReference(manager,Conversation.class);
  if (!conversation.isTransient()) {
    context.add(CDIConversationID.class,new CDIConversationID(conversation.getId()));
  }
 else {
    context.add(CDIConversationID.class,new CDIConversationID(null));
  }
  ConversationManager2 conversationManager=BeanUtils.getBeanReference(manager,ConversationManager2.class);
  conversationManager.teardownConversation();
  conversationManager.teardownContext();
}","public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  Conversation conversation=BeanUtils.getBeanReference(manager,Conversation.class);
  if (!conversation.isTransient()) {
    context.add(CDIConversationID.class,new CDIConversationID(conversation.getId()));
  }
 else {
    context.add(CDIConversationID.class,new CDIConversationID(null));
  }
  ConversationManager2 conversationManager=BeanUtils.getBeanReference(manager,ConversationManager2.class);
  conversationManager.teardownConversation();
}",0.9652836579170194
39626,"public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  if (manager == null) {
    throw new IllegalStateException(""String_Node_Str"" + WeldManager.class.getName() + ""String_Node_Str"");
  }
  ContextLifecycle lifeCycle=manager.getServices().get(ContextLifecycle.class);
  String requestId=UUID.randomUUID().toString();
  BeanStore beanStore=new ConcurrentHashMapBeanStore();
  lifeCycle.beginRequest(requestId,beanStore);
  context.add(CDIRequestID.class,new CDIRequestID(requestId,beanStore));
}","public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  if (manager == null) {
    throw new IllegalStateException(""String_Node_Str"" + WeldManager.class.getName() + ""String_Node_Str"");
  }
  ContextLifecycle lifeCycle=manager.getServices().get(ContextLifecycle.class);
  String requestId=UUID.randomUUID().toString();
  BeanStore beanStore=new ConcurrentHashMapBeanStore();
  lifeCycle.getDependentContext().setActive(true);
  lifeCycle.getRequestContext().setActive(true);
  lifeCycle.getRequestContext().setBeanStore(beanStore);
  context.add(CDIRequestID.class,new CDIRequestID(requestId,beanStore));
}",0.789983844911147
39627,"public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  CDIRequestID id=context.get(CDIRequestID.class);
  if (id != null) {
    manager.getServices().get(ContextLifecycle.class).endRequest(id.getId(),id.getBeanStore());
  }
}","public void callback(Context context,Event event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  CDIRequestID id=context.get(CDIRequestID.class);
  if (id != null) {
    ContextLifecycle lifeCycle=manager.getServices().get(ContextLifecycle.class);
    lifeCycle.getDependentContext().setActive(false);
    lifeCycle.getRequestContext().setActive(false);
  }
}",0.7683284457478006
39628,"public void callback(Context context,TestEvent event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  CDISessionID id=context.get(CDISessionID.class);
  if (id != null) {
    BeanUtils.getBeanReference(manager,HttpSessionManager.class).setSession(new MockHttpSession(id.getId(),new MockServletContext(""String_Node_Str"")));
  }
}","public void callback(Context context,TestEvent event) throws Exception {
  WeldManager manager=context.get(WeldManager.class);
  CDISessionID id=context.get(CDISessionID.class);
  if (id != null) {
    HttpSessionManager sessionManager=BeanUtils.getBeanReference(manager,HttpSessionManager.class);
    HttpSession session=sessionStore.get(id.getId());
    if (session == null) {
      session=new MockHttpSession(id.getId(),new MockServletContext(""String_Node_Str""));
    }
    sessionManager.setSession(session);
    sessionStore.put(id.getId(),session);
  }
}",0.74235807860262
39629,"public ContainerMethodExecutor deploy(Context context,Archive<?> archive) throws DeploymentException {
  boolean enableConversation=context.get(Configuration.class).getContainerConfig(WeldEEMockConfiguration.class).isEnableConversationScope();
  MockEELifecycle lifecycle=new MockEELifecycle(archive.as(ShrinkwrapBeanDeploymentArchive.class));
  TestContainer container=new TestContainer(lifecycle);
  container.startContainer();
  context.add(TestContainer.class,container);
  context.add(WeldBootstrap.class,lifecycle.getBootstrap());
  context.add(WeldManager.class,container.getBeanManager());
  context.register(AfterDeploy.class,new SessionLifeCycleCreator());
  context.register(BeforeUnDeploy.class,new SessionLifeCycleDestoryer());
  context.register(Before.class,new RequestLifeCycleCreator());
  context.register(Before.class,new EventHandler<TestEvent>(){
    public void callback(    Context context,    TestEvent event) throws Exception {
      WeldManager manager=context.get(WeldManager.class);
      CDISessionID id=context.get(CDISessionID.class);
      if (id != null) {
        BeanUtils.getBeanReference(manager,HttpSessionManager.class).setSession(new MockHttpSession(id.getId(),new MockServletContext(""String_Node_Str"")));
      }
    }
  }
);
  if (enableConversation) {
    context.register(Before.class,new ConversationLifeCycleCreator());
    context.register(After.class,new ConversationLifeCycleDestoryer());
  }
  context.register(After.class,new RequestLifeCycleDestroyer());
  return new LocalMethodExecutor();
}","public ContainerMethodExecutor deploy(Context context,Archive<?> archive) throws DeploymentException {
  boolean enableConversation=context.get(Configuration.class).getContainerConfig(WeldEEMockConfiguration.class).isEnableConversationScope();
  MockEELifecycle lifecycle=new MockEELifecycle(archive.as(ShrinkwrapBeanDeploymentArchive.class));
  TestContainer container=new TestContainer(lifecycle);
  container.startContainer();
  context.add(TestContainer.class,container);
  context.add(WeldBootstrap.class,lifecycle.getBootstrap());
  context.add(WeldManager.class,container.getBeanManager());
  context.register(AfterDeploy.class,new SessionLifeCycleCreator());
  context.register(BeforeUnDeploy.class,new SessionLifeCycleDestoryer());
  context.register(Before.class,new RequestLifeCycleCreator());
  context.register(Before.class,new EventHandler<TestEvent>(){
    private Map<String,HttpSession> sessionStore=new HashMap<String,HttpSession>();
    public void callback(    Context context,    TestEvent event) throws Exception {
      WeldManager manager=context.get(WeldManager.class);
      CDISessionID id=context.get(CDISessionID.class);
      if (id != null) {
        HttpSessionManager sessionManager=BeanUtils.getBeanReference(manager,HttpSessionManager.class);
        HttpSession session=sessionStore.get(id.getId());
        if (session == null) {
          session=new MockHttpSession(id.getId(),new MockServletContext(""String_Node_Str""));
        }
        sessionManager.setSession(session);
        sessionStore.put(id.getId(),session);
      }
    }
  }
);
  if (enableConversation) {
    context.register(Before.class,new ConversationLifeCycleCreator());
    context.register(After.class,new ConversationLifeCycleDestoryer());
  }
  context.register(After.class,new RequestLifeCycleDestroyer());
  return new LocalMethodExecutor();
}",0.9006466784244562
39630,"public String getName(){
  return ""String_Node_Str"";
}","public String getName(){
  return name;
}",0.8210526315789474
39631,"@Override protected URL findResource(final String name){
  final Asset a=archive.get(name).getAsset();
  if (a == null) {
    return null;
  }
  try {
    return new URL(null,ARCHIVE_PROTOCOL + name,new URLStreamHandler(){
      @Override protected java.net.URLConnection openConnection(      URL u) throws java.io.IOException {
        return new URLConnection(u){
          @Override public void connect() throws IOException {
          }
          @Override public InputStream getInputStream() throws IOException {
            return a.openStream();
          }
        }
;
      }
    }
);
  }
 catch (  Exception e) {
    return null;
  }
}","@Override protected URL findResource(final String name){
  final Node a=archive.get(name);
  if (a == null) {
    return null;
  }
  try {
    return new URL(null,ARCHIVE_PROTOCOL + name,new URLStreamHandler(){
      @Override protected java.net.URLConnection openConnection(      URL u) throws java.io.IOException {
        return new URLConnection(u){
          @Override public void connect() throws IOException {
          }
          @Override public InputStream getInputStream() throws IOException {
            return a.getAsset().openStream();
          }
        }
;
      }
    }
);
  }
 catch (  Exception e) {
    return null;
  }
}",0.9759503491078356
39632,"@Override protected java.net.URLConnection openConnection(URL u) throws java.io.IOException {
  return new URLConnection(u){
    @Override public void connect() throws IOException {
    }
    @Override public InputStream getInputStream() throws IOException {
      return a.openStream();
    }
  }
;
}","@Override protected java.net.URLConnection openConnection(URL u) throws java.io.IOException {
  return new URLConnection(u){
    @Override public void connect() throws IOException {
    }
    @Override public InputStream getInputStream() throws IOException {
      return a.getAsset().openStream();
    }
  }
;
}",0.9820554649265906
39633,"@Override public InputStream getInputStream() throws IOException {
  return a.openStream();
}","@Override public InputStream getInputStream() throws IOException {
  return a.getAsset().openStream();
}",0.9441624365482234
39634,"public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {
}","public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {
  if (!sbLastWasWhitespace) {
    textBuffer.append(' ');
    tokenBuffer.append(' ');
  }
  sbLastWasWhitespace=true;
}",0.5938566552901023
39635,"public void characters(char[] ch,int start,int length) throws SAXException {
  textElementIdx++;
  if (flush) {
    flushBlock();
    flush=false;
  }
  if (inIgnorableElement != 0) {
    return;
  }
  char c;
  boolean startWhitespace=false;
  boolean endWhitespace=false;
switch (length) {
case 0:
    return;
case 1:
  c=ch[start];
startWhitespace=Character.isWhitespace(c);
endWhitespace=startWhitespace;
if (sbLastWasWhitespace) {
if (startWhitespace) {
lastEvent=Event.WHITESPACE;
return;
}
}
 else if (startWhitespace) {
textBuffer.append(' ');
tokenBuffer.append(' ');
}
 else {
textBuffer.append(c);
tokenBuffer.append(c);
}
break;
default :
final int end=start + length;
for (int i=start; i < end; i++) {
if (Character.isWhitespace(ch[i])) {
ch[i]=' ';
}
}
while (start < end) {
c=ch[start];
if (c == ' ') {
startWhitespace=true;
start++;
length--;
}
 else {
break;
}
}
while (length > 0) {
c=ch[start + length - 1];
if (c == ' ') {
endWhitespace=true;
length--;
}
 else {
break;
}
}
if (length == 0) {
if (startWhitespace || endWhitespace) {
if (!sbLastWasWhitespace) {
textBuffer.append(' ');
tokenBuffer.append(' ');
}
sbLastWasWhitespace=true;
}
 else {
sbLastWasWhitespace=false;
}
lastEvent=Event.WHITESPACE;
return;
}
if (startWhitespace) {
if (!sbLastWasWhitespace) {
textBuffer.append(' ');
tokenBuffer.append(' ');
}
}
textBuffer.append(ch,start,length);
tokenBuffer.append(ch,start,length);
if (endWhitespace) {
textBuffer.append(' ');
tokenBuffer.append(' ');
}
}
sbLastWasWhitespace=endWhitespace;
lastEvent=Event.CHARACTERS;
currentContainedTextElements.set(textElementIdx);
}","public void characters(char[] ch,int start,int length) throws SAXException {
  textElementIdx++;
  if (flush) {
    flushBlock();
    flush=false;
  }
  if (inIgnorableElement != 0) {
    return;
  }
  char c;
  boolean startWhitespace=false;
  boolean endWhitespace=false;
  if (length == 0) {
    return;
  }
  final int end=start + length;
  for (int i=start; i < end; i++) {
    if (Character.isWhitespace(ch[i])) {
      ch[i]=' ';
    }
  }
  while (start < end) {
    c=ch[start];
    if (c == ' ') {
      startWhitespace=true;
      start++;
      length--;
    }
 else {
      break;
    }
  }
  while (length > 0) {
    c=ch[start + length - 1];
    if (c == ' ') {
      endWhitespace=true;
      length--;
    }
 else {
      break;
    }
  }
  if (length == 0) {
    if (startWhitespace || endWhitespace) {
      if (!sbLastWasWhitespace) {
        textBuffer.append(' ');
        tokenBuffer.append(' ');
      }
      sbLastWasWhitespace=true;
    }
 else {
      sbLastWasWhitespace=false;
    }
    lastEvent=Event.WHITESPACE;
    return;
  }
  if (startWhitespace) {
    if (!sbLastWasWhitespace) {
      textBuffer.append(' ');
      tokenBuffer.append(' ');
    }
  }
  textBuffer.append(ch,start,length);
  tokenBuffer.append(ch,start,length);
  if (endWhitespace) {
    textBuffer.append(' ');
    tokenBuffer.append(' ');
  }
  sbLastWasWhitespace=endWhitespace;
  lastEvent=Event.CHARACTERS;
  currentContainedTextElements.set(textElementIdx);
}",0.3446254071661238
39636,"public MethodHandler getHandler(Object o){
  return instrumentors.get(o.getClass()).getInvoker(o);
}","public MethodHandler getHandler(Object o){
  Instrumentor instrumentor=instrumentors.get(o.getClass());
  return instrumentor != null ? instrumentor.getInvoker(o) : null;
}",0.7205882352941176
39637,"protected void createDomain(){
  addClass(TCK_A.class);
  addClass(Object.class);
}","protected void createDomain(){
  addClass(TCK_A.class);
}",0.8142857142857143
39638,"/** 
 * Compiles the specified classes and returns a map with a data object path as key and the corresponding compiled data object class.
 * @param source the compilation source
 * @param doPaths the data object paths
 * @return the compiled data object classes
 * @throws DataObjectException anything that would prevent data object compilation
 * @throws NullPointerException if any argument is null
 * @throws IllegalArgumentException if any data object path is null
 */
public Map<String,Class<?>> generateClasses(CompilationSource source,String... doPaths) throws DataObjectException, NullPointerException, IllegalArgumentException {
  if (source == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  for (  String doPath : doPaths) {
    if (doPath == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  try {
    URL url=new URL(""String_Node_Str"" + source.getRepositoryRef() + ""String_Node_Str""+ source.getWorkspaceRef()+ ""String_Node_Str""+ source.getPath());
    JcrGroovyCompiler compiler=new JcrGroovyCompiler();
    compiler.getGroovyClassLoader().setResourceLoader(new JcrGroovyResourceLoader(new URL[]{url}));
    UnifiedNodeReference[] doRefs=new UnifiedNodeReference[doPaths.length];
    for (int i=0; i < doPaths.length; i++) {
      doRefs[i]=new UnifiedNodeReference(source.getRepositoryRef(),source.getWorkspaceRef(),doPaths[i]);
    }
    Class[] classes=compiler.compile(doRefs);
    Map<String,Class<?>> doClasses=new HashMap<String,Class<?>>();
    for (int i=0; i < doPaths.length; i++) {
      doClasses.put(doPaths[i],classes[i]);
    }
    return doClasses;
  }
 catch (  IOException e) {
    throw new DataObjectException(""String_Node_Str"",e);
  }
}","/** 
 * Compiles the specified classes and returns a map with a data object path as key and the corresponding compiled data object class.
 * @param source the compilation source
 * @param doPaths the data object paths
 * @return the compiled data object classes
 * @throws DataObjectException anything that would prevent data object compilation
 * @throws NullPointerException if any argument is null
 * @throws IllegalArgumentException if any data object path is null
 */
public Map<String,Class<?>> generateClasses(CompilationSource source,String... doPaths) throws DataObjectException, NullPointerException, IllegalArgumentException {
  if (source == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  for (  String doPath : doPaths) {
    if (doPath == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  try {
    URL url=new UnifiedNodeReference(source.getRepositoryRef(),source.getWorkspaceRef(),source.getPath()).getURL();
    JcrGroovyCompiler compiler=new JcrGroovyCompiler();
    compiler.getGroovyClassLoader().setResourceLoader(new JcrGroovyResourceLoader(new URL[]{url}));
    UnifiedNodeReference[] doRefs=new UnifiedNodeReference[doPaths.length];
    for (int i=0; i < doPaths.length; i++) {
      doRefs[i]=new UnifiedNodeReference(source.getRepositoryRef(),source.getWorkspaceRef(),doPaths[i]);
    }
    Class[] classes=compiler.compile(doRefs);
    Map<String,Class<?>> doClasses=new HashMap<String,Class<?>>();
    for (int i=0; i < doPaths.length; i++) {
      doClasses.put(doPaths[i],classes[i]);
    }
    return doClasses;
  }
 catch (  IOException e) {
    throw new DataObjectException(""String_Node_Str"",e);
  }
}",0.9352096159484022
39639,"/** 
 * Builds the runtime and return a configured   {@link org.chromattic.api.Chromattic} instance.
 * @return the chromattic instance
 * @throws BuilderException any builder exception
 */
public Chromattic build() throws BuilderException {
  Options options=new Options(this.options);
  if (!Boolean.FALSE.equals(options.getValue(USE_SYSTEM_PROPERTIES))) {
    for (    Option<?> option : getSystemOptions()) {
      String value=System.getProperty(option.getName());
      if (value != null) {
        options.setValue(option,value,false);
      }
    }
  }
  options.setValue(INSTRUMENTOR_CLASSNAME,""String_Node_Str"",false);
  options.setValue(SESSION_LIFECYCLE_CLASSNAME,""String_Node_Str"",false);
  options.setValue(OBJECT_FORMATTER_CLASSNAME,DefaultObjectFormatter.class.getName(),false);
  options.setValue(PROPERTY_CACHE_ENABLED,false,false);
  options.setValue(PROPERTY_READ_AHEAD_ENABLED,false,false);
  options.setValue(JCR_OPTIMIZE_HAS_PROPERTY_ENABLED,false,false);
  options.setValue(JCR_OPTIMIZE_HAS_NODE_ENABLED,false,false);
  options.setValue(ROOT_NODE_PATH,""String_Node_Str"",false);
  options.setValue(CREATE_ROOT_NODE,false,false);
  options.setValue(LAZY_CREATE_ROOT_NODE,false,false);
  return boot(options,new HashSet<Class>(classes));
}","/** 
 * Builds the runtime and return a configured   {@link org.chromattic.api.Chromattic} instance.
 * @return the chromattic instance
 * @throws BuilderException any builder exception
 */
public Chromattic build() throws BuilderException {
  Options options=new Options(this.options);
  if (!Boolean.FALSE.equals(options.getValue(USE_SYSTEM_PROPERTIES))) {
    for (    Option<?> option : getSystemOptions()) {
      String value=System.getProperty(option.getName());
      if (value != null) {
        options._setValue(option,value,false);
      }
    }
  }
  options.setValue(INSTRUMENTOR_CLASSNAME,""String_Node_Str"",false);
  options.setValue(SESSION_LIFECYCLE_CLASSNAME,""String_Node_Str"",false);
  options.setValue(OBJECT_FORMATTER_CLASSNAME,DefaultObjectFormatter.class.getName(),false);
  options.setValue(PROPERTY_CACHE_ENABLED,false,false);
  options.setValue(PROPERTY_READ_AHEAD_ENABLED,false,false);
  options.setValue(JCR_OPTIMIZE_HAS_PROPERTY_ENABLED,false,false);
  options.setValue(JCR_OPTIMIZE_HAS_NODE_ENABLED,false,false);
  options.setValue(ROOT_NODE_PATH,""String_Node_Str"",false);
  options.setValue(CREATE_ROOT_NODE,false,false);
  options.setValue(LAZY_CREATE_ROOT_NODE,false,false);
  return boot(options,new HashSet<Class>(classes));
}",0.9996033320111068
39640,"private void visitClass(ClassNode classNode) throws ChromatticASTTransformationException {
  try {
    constructor.setProtectedDefaultConstructor(classNode);
  }
 catch (  NoSuchDefaultConstructor e) {
    constructor.generateProtectedDefaultConstructor(classNode);
  }
  constructor.generatePublicHandlerConstructor(classNode);
  for (  FieldNode fieldNode : classNode.getFields()) {
    if (GroovyUtils.isChromatticAnnoted(fieldNode)) {
      try {
        annotationMover.addSetterDelegationAnnotation(classNode,fieldNode);
      }
 catch (      NoSuchSetterException e) {
        annotationMover.generateSetter(classNode,fieldNode);
      }
      for (      AnnotationNode annotationNode : (List<AnnotationNode>)fieldNode.getAnnotations()) {
        if (annotationNode.getClassNode().getName().startsWith(GroovyUtils.ANNOTATIONS_PACKAGE)) {
          fieldChecker.checkChromaticFieldType(fieldNode);
          try {
            annotationMover.addFieldAnnotationToMethod(classNode,fieldNode,annotationNode);
          }
 catch (          NoSuchGetterException e) {
            annotationMover.generateGetter(classNode,fieldNode,annotationNode);
          }
        }
      }
    }
 else     if (GroovyUtils.isChromatticAnnotedInHierarchy(null,fieldNode)) {
      annotationMover.generateGetter(classNode,fieldNode,new AnnotationNode(new ClassNode(ChromatticDelegation.class)));
      annotationMover.generateSetter(classNode,fieldNode);
    }
    annotationMover.removeChromatticAnnotation(fieldNode);
  }
  delegate.setGroovyInterceptable(classNode);
  delegate.addInvokerField(classNode);
  try {
    delegate.plugGetProperty(classNode);
  }
 catch (  NoSuchMethodException e) {
    delegate.generateGetProperty(classNode);
  }
  try {
    delegate.plugSetProperty(classNode);
  }
 catch (  NoSuchMethodException e) {
    delegate.generateSetProperty(classNode);
  }
  try {
    delegate.plugInvokeMethod(classNode);
  }
 catch (  NoSuchMethodException e) {
    delegate.generateInvokeMethod(classNode);
  }
  for (  MethodNode methodNode : classNode.getMethods()) {
    if (methodNode.isAbstract()) {
      implementor.implement(methodNode);
    }
  }
}","private void visitClass(ClassNode classNode) throws ChromatticASTTransformationException {
  try {
    constructor.setProtectedDefaultConstructor(classNode);
  }
 catch (  NoSuchDefaultConstructor e) {
    constructor.generateProtectedDefaultConstructor(classNode);
  }
  constructor.generatePublicHandlerConstructor(classNode);
  for (  FieldNode fieldNode : classNode.getFields()) {
    if (GroovyUtils.isChromatticAnnoted(fieldNode)) {
      try {
        annotationMover.addSetterDelegationAnnotation(classNode,fieldNode);
      }
 catch (      NoSuchSetterException e) {
        annotationMover.generateSetter(classNode,fieldNode);
      }
      for (      AnnotationNode annotationNode : (List<AnnotationNode>)fieldNode.getAnnotations()) {
        if (annotationNode.getClassNode().getName().startsWith(GroovyUtils.ANNOTATIONS_PACKAGE)) {
          fieldChecker.checkChromaticFieldType(fieldNode);
          try {
            annotationMover.addFieldAnnotationToMethod(classNode,fieldNode,annotationNode);
          }
 catch (          NoSuchGetterException e) {
            annotationMover.generateGetter(classNode,fieldNode,annotationNode);
          }
        }
      }
    }
 else     if (GroovyUtils.isChromatticAnnotedInHierarchy(null,fieldNode)) {
      annotationMover.generateGetter(classNode,fieldNode,new AnnotationNode(new ClassNode(ChromatticDelegation.class)));
      annotationMover.generateSetter(classNode,fieldNode);
    }
    annotationMover.removeChromatticAnnotation(fieldNode);
  }
  delegate.setGroovyInterceptable(classNode);
  delegate.addInvokerField(classNode);
  try {
    delegate.plugGetProperty(classNode);
  }
 catch (  NoSuchMethodException e) {
    delegate.generateGetProperty(classNode);
  }
  try {
    delegate.plugSetProperty(classNode);
  }
 catch (  NoSuchMethodException e) {
    delegate.generateSetProperty(classNode);
  }
  try {
    delegate.plugInvokeMethod(classNode);
  }
 catch (  NoSuchMethodException e) {
    delegate.generateInvokeMethod(classNode);
  }
  for (  MethodNode methodNode : classNode.getMethods()) {
    if (methodNode.isAbstract()) {
      implementor.implement(methodNode);
    }
  }
  if (classNode.getName().equals(""String_Node_Str"")) {
    for (    MethodNode methodNode : classNode.getMethods()) {
      System.out.println(methodNode.getName());
    }
  }
}",0.9608540925266904
39641,"public static Object invokeMethod(Object target,String m,Object p,MethodHandler handler){
  System.out.println(target.getClass().getName() + ""String_Node_Str"" + m);
  Method method;
  try {
    method=target.getClass().getMethod(m,args2Class(p));
  }
 catch (  NoSuchMethodException _) {
    try {
      method=foundMethod(target.getClass(),m,p);
    }
 catch (    NoSuchMethodException __) {
      try {
        Field field=target.getClass().getField(GroovyUtils.fieldName(m));
        return field.get(target);
      }
 catch (      Exception e) {
        throw new AssertionError(e);
      }
    }
  }
  try {
    if (isChromatticAnnoted(method)) {
      return handler.invoke(target,method,(Object[])p);
    }
 else     return method.invoke(target,(Object[])p);
  }
 catch (  RuntimeException re) {
    throw re;
  }
catch (  Error e) {
    throw e;
  }
catch (  Throwable t) {
    throw new AssertionError(t);
  }
}","public static Object invokeMethod(Object target,String m,Object p,MethodHandler handler){
  Method method;
  try {
    method=target.getClass().getMethod(m,args2Class(p));
  }
 catch (  NoSuchMethodException _) {
    try {
      method=foundMethod(target.getClass(),m,p);
    }
 catch (    NoSuchMethodException __) {
      try {
        Field field=target.getClass().getField(GroovyUtils.fieldName(m));
        return field.get(target);
      }
 catch (      Exception e) {
        throw new AssertionError(e);
      }
    }
  }
  try {
    if (isChromatticAnnoted(method)) {
      return handler.invoke(target,method,(Object[])p);
    }
 else     return method.invoke(target,(Object[])p);
  }
 catch (  RuntimeException re) {
    throw re;
  }
catch (  Error e) {
    throw e;
  }
catch (  Throwable t) {
    throw new AssertionError(t);
  }
}",0.9575070821529744
39642,"public static String fieldName(String getsetName){
  if (getsetName.length() <= 4 || (!""String_Node_Str"".equals(getsetName.substring(0,3)) && !""String_Node_Str"".equals(getsetName.substring(0,3))))   throw new IllegalArgumentException(""String_Node_Str"" + getsetName);
  return String.format(""String_Node_Str"",getsetName.substring(3,4).toLowerCase(),getsetName.substring(4));
}","public static String fieldName(String getsetName){
  if (!""String_Node_Str"".equals(getsetName.substring(0,3)) && !""String_Node_Str"".equals(getsetName.substring(0,3)))   throw new IllegalArgumentException(""String_Node_Str"" + getsetName);
  return String.format(""String_Node_Str"",getsetName.substring(3,4).toLowerCase(),getsetName.substring(4));
}",0.9583333333333334
39643,"private void process(RoundEnvironment roundEnv,Set<Element> elts,Map<String,PackageMetaData> packageMetaDatas) throws Exception {
  Filer filer=processingEnv.getFiler();
  NodeTypeBuilder visitor=new NodeTypeBuilder();
  SetMap<String,ClassTypeInfo> packageToClassTypes=new SetMap<String,ClassTypeInfo>();
  for (  Element elt : elts) {
    TypeElement typeElt=(TypeElement)elt;
    ClassTypeInfo cti=(ClassTypeInfo)domain.resolve(typeElt);
    for (    String packageName : PackageNameIterator.with(cti.getPackageName())) {
      PackageMetaData packageMetaData=packageMetaDatas.get(packageName);
      if (packageMetaData != null) {
        Set<ClassTypeInfo> set=packageToClassTypes.get(packageName);
        set.add(cti);
        break;
      }
    }
    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + cti.getName());
    visitor.addType(cti);
    try {
      JavaFileObject jfo=filer.createSourceFile(typeElt.getQualifiedName() + ""String_Node_Str"",typeElt);
      PrintWriter out=new PrintWriter(jfo.openWriter());
      StringBuilder builder=new StringBuilder();
      writeClass(roundEnv,builder,cti);
      out.write(builder.toString());
      out.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  visitor.generate();
  for (  String packageName : packageToClassTypes.keySet()) {
    env.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + packageName);
    List<NodeType> nodeTypes=new ArrayList<NodeType>();
    Map<String,String> mappings=Collections.emptyMap();
    for (    ClassTypeInfo cti : packageToClassTypes.get(packageName)) {
      PackageMetaData packageMetaData=packageMetaDatas.get(packageName);
      if (packageMetaData.namespacePrefix.length() > 0 || packageMetaData.namespaceURI.length() > 0) {
        mappings=Collections.singletonMap(packageMetaData.namespacePrefix,packageMetaData.namespaceURI);
      }
      nodeTypes.add(visitor.getNodeType(cti));
    }
    FileObject cndFile=filer.createResource(StandardLocation.SOURCE_OUTPUT,packageName,""String_Node_Str"");
    NodeTypeSerializer cndSerializer=new CNDNodeTypeSerializer(nodeTypes,mappings);
    Writer cndWriter=cndFile.openWriter();
    cndSerializer.writeTo(cndWriter);
    cndWriter.close();
    FileObject xmlFile=filer.createResource(StandardLocation.SOURCE_OUTPUT,packageName,""String_Node_Str"");
    NodeTypeSerializer xmlSerializer=new XMLNodeTypeSerializer(nodeTypes,mappings);
    Writer xmlWriter=xmlFile.openWriter();
    xmlSerializer.writeTo(xmlWriter);
    xmlWriter.close();
  }
}","private void process(RoundEnvironment roundEnv,Set<Element> elts,Map<String,PackageMetaData> packageMetaDatas) throws Exception {
  Filer filer=processingEnv.getFiler();
  NodeTypeBuilder visitor=new NodeTypeBuilder();
  SetMap<String,ClassTypeInfo> packageToClassTypes=new SetMap<String,ClassTypeInfo>();
  for (  Element elt : elts) {
    TypeElement typeElt=(TypeElement)elt;
    ClassTypeInfo cti=(ClassTypeInfo)domain.resolve(typeElt);
    TreeMap<Integer,PackageMetaData> packageSorter=new TreeMap<Integer,PackageMetaData>();
    for (    PackageMetaData packageMetaData : packageMetaDatas.values()) {
      int dist=packageMetaData.distance(cti);
      if (dist >= 0) {
        packageSorter.put(dist,packageMetaData);
      }
    }
    if (packageSorter.size() > 0) {
      PackageMetaData packageMetaData=packageSorter.values().iterator().next();
      Set<ClassTypeInfo> set=packageToClassTypes.get(packageMetaData.packageName);
      set.add(cti);
    }
    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + cti.getName());
    visitor.addType(cti);
    try {
      JavaFileObject jfo=filer.createSourceFile(typeElt.getQualifiedName() + ""String_Node_Str"",typeElt);
      PrintWriter out=new PrintWriter(jfo.openWriter());
      StringBuilder builder=new StringBuilder();
      writeClass(roundEnv,builder,cti);
      out.write(builder.toString());
      out.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  visitor.generate();
  for (  String packageName : packageToClassTypes.keySet()) {
    env.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + packageName);
    List<NodeType> nodeTypes=new ArrayList<NodeType>();
    Map<String,String> mappings=Collections.emptyMap();
    for (    ClassTypeInfo cti : packageToClassTypes.get(packageName)) {
      PackageMetaData packageMetaData=packageMetaDatas.get(packageName);
      if (packageMetaData.namespacePrefix.length() > 0 || packageMetaData.namespaceURI.length() > 0) {
        mappings=Collections.singletonMap(packageMetaData.namespacePrefix,packageMetaData.namespaceURI);
      }
      nodeTypes.add(visitor.getNodeType(cti));
    }
    FileObject cndFile=filer.createResource(StandardLocation.SOURCE_OUTPUT,packageName,""String_Node_Str"");
    NodeTypeSerializer cndSerializer=new CNDNodeTypeSerializer(nodeTypes,mappings);
    Writer cndWriter=cndFile.openWriter();
    cndSerializer.writeTo(cndWriter);
    cndWriter.close();
    FileObject xmlFile=filer.createResource(StandardLocation.SOURCE_OUTPUT,packageName,""String_Node_Str"");
    NodeTypeSerializer xmlSerializer=new XMLNodeTypeSerializer(nodeTypes,mappings);
    Writer xmlWriter=xmlFile.openWriter();
    xmlSerializer.writeTo(xmlWriter);
    xmlWriter.close();
  }
}",0.8945210585165859
39644,"private boolean _process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Map<String,PackageMetaData> packageMetaData=new HashMap<String,PackageMetaData>();
  Set<? extends Element> a=roundEnv.getElementsAnnotatedWith(NodeTypeDefs.class);
  for (  Element e : a) {
    PackageElement pkgElt=(PackageElement)e;
    String s=new StringBuilder().append(pkgElt.getQualifiedName()).toString();
    NodeTypeDefs ntDefs=pkgElt.getAnnotation(NodeTypeDefs.class);
    packageMetaData.put(s,new PackageMetaData(ntDefs.namespacePrefix(),ntDefs.namespaceValue()));
  }
  Set<Element> elts=new HashSet<Element>();
  elts.addAll(roundEnv.getElementsAnnotatedWith(PrimaryType.class));
  elts.addAll(roundEnv.getElementsAnnotatedWith(MixinType.class));
  try {
    process(roundEnv,elts,packageMetaData);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return true;
}","private boolean _process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Map<String,PackageMetaData> packageMetaData=new HashMap<String,PackageMetaData>();
  Set<? extends Element> a=roundEnv.getElementsAnnotatedWith(NodeTypeDefs.class);
  for (  Element e : a) {
    PackageElement pkgElt=(PackageElement)e;
    String packageName=new StringBuilder().append(pkgElt.getQualifiedName()).toString();
    NodeTypeDefs ntDefs=pkgElt.getAnnotation(NodeTypeDefs.class);
    packageMetaData.put(packageName,new PackageMetaData(packageName,ntDefs.namespacePrefix(),ntDefs.namespaceValue(),ntDefs.deep()));
  }
  Set<Element> elts=new HashSet<Element>();
  elts.addAll(roundEnv.getElementsAnnotatedWith(PrimaryType.class));
  elts.addAll(roundEnv.getElementsAnnotatedWith(MixinType.class));
  try {
    process(roundEnv,elts,packageMetaData);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return true;
}",0.972707423580786
39645,"public PackageMetaData(String namespacePrefix,String namespaceURI){
  this.namespacePrefix=namespacePrefix;
  this.namespaceURI=namespaceURI;
}","public PackageMetaData(String packageName,String namespacePrefix,String namespaceURI,boolean deep){
  this.packageName=packageName;
  this.namespacePrefix=namespacePrefix;
  this.namespaceURI=namespaceURI;
  this.deep=deep;
}",0.7771739130434783
39646,"public Domain(SimpleTypeResolver resolver,Set<NodeTypeMapping> typeMappings,Instrumentor instrumentor,ObjectFormatter objectFormatter,boolean propertyCacheEnabled,boolean propertyReadAheadEnabled,boolean hasPropertyOptimized,boolean hasNodeOptimized,String rootNodePath,int rootCreateMode){
  MapperBuilder builder=new MapperBuilder(resolver,typeMappings,instrumentor);
  if (!CREATE_MODES.contains(rootCreateMode)) {
    throw new IllegalArgumentException(""String_Node_Str"" + rootCreateMode);
  }
  Map<String,ObjectMapper> typeMapperByNodeType=new HashMap<String,ObjectMapper>();
  Map<Class<?>,ObjectMapper> typeMapperByClass=new HashMap<Class<?>,ObjectMapper>();
  for (  ObjectMapper typeMapper : builder.build()) {
    if (typeMapperByNodeType.containsKey(typeMapper.getNodeTypeName())) {
      throw new IllegalStateException(""String_Node_Str"" + typeMapper);
    }
    typeMapperByNodeType.put(typeMapper.getNodeTypeName(),typeMapper);
    typeMapperByClass.put(typeMapper.getObjectClass(),typeMapper);
  }
  final List<String> rootNodePathSegments;
  try {
    rootNodePathSegments=Path.splitAbsolutePath(Path.normalizeAbsolutePath(rootNodePath));
  }
 catch (  PathException e) {
    throw new BuilderException(""String_Node_Str"");
  }
  this.typeMapperByClass=typeMapperByClass;
  this.typeMapperByNodeType=typeMapperByNodeType;
  this.instrumentor=instrumentor;
  this.objectFormatter=objectFormatter;
  this.propertyCacheEnabled=propertyCacheEnabled;
  this.propertyReadAheadEnabled=propertyReadAheadEnabled;
  this.hasPropertyOptimized=hasPropertyOptimized;
  this.hasNodeOptimized=hasNodeOptimized;
  this.rootNodePath=rootNodePath;
  this.rootNodePathSegments=rootNodePathSegments;
  this.nodeInfoManager=new NodeInfoManager();
  this.queryManager=new QueryManager(rootNodePath);
  this.rootCreateMode=rootCreateMode;
}","public Domain(SimpleTypeResolver resolver,Set<NodeTypeMapping> typeMappings,Instrumentor instrumentor,ObjectFormatter objectFormatter,boolean propertyCacheEnabled,boolean propertyReadAheadEnabled,boolean hasPropertyOptimized,boolean hasNodeOptimized,String rootNodePath,int rootCreateMode,String rootNodeType){
  MapperBuilder builder=new MapperBuilder(resolver,typeMappings,instrumentor);
  if (!CREATE_MODES.contains(rootCreateMode)) {
    throw new IllegalArgumentException(""String_Node_Str"" + rootCreateMode);
  }
  Map<String,ObjectMapper> typeMapperByNodeType=new HashMap<String,ObjectMapper>();
  Map<Class<?>,ObjectMapper> typeMapperByClass=new HashMap<Class<?>,ObjectMapper>();
  for (  ObjectMapper typeMapper : builder.build()) {
    if (typeMapperByNodeType.containsKey(typeMapper.getNodeTypeName())) {
      throw new IllegalStateException(""String_Node_Str"" + typeMapper);
    }
    typeMapperByNodeType.put(typeMapper.getNodeTypeName(),typeMapper);
    typeMapperByClass.put(typeMapper.getObjectClass(),typeMapper);
  }
  final List<String> rootNodePathSegments;
  try {
    rootNodePathSegments=Path.splitAbsolutePath(Path.normalizeAbsolutePath(rootNodePath));
  }
 catch (  PathException e) {
    throw new BuilderException(""String_Node_Str"");
  }
  this.typeMapperByClass=typeMapperByClass;
  this.typeMapperByNodeType=typeMapperByNodeType;
  this.instrumentor=instrumentor;
  this.objectFormatter=objectFormatter;
  this.propertyCacheEnabled=propertyCacheEnabled;
  this.propertyReadAheadEnabled=propertyReadAheadEnabled;
  this.hasPropertyOptimized=hasPropertyOptimized;
  this.hasNodeOptimized=hasNodeOptimized;
  this.rootNodePath=rootNodePath;
  this.rootNodePathSegments=rootNodePathSegments;
  this.nodeInfoManager=new NodeInfoManager();
  this.queryManager=new QueryManager(rootNodePath);
  this.rootCreateMode=rootCreateMode;
  this.rootNodeType=rootNodeType;
}",0.985483870967742
39647,"protected boolean _setReferenced(EntityContext referentCtx,String name,EntityContext referencedCtx,LinkType linkType) throws RepositoryException {
  if (referentCtx.getStatus() != Status.PERSISTENT) {
    throw new IllegalStateException(""String_Node_Str"" + this);
  }
  Node referent=referentCtx.state.getNode();
  if (referencedCtx != null) {
    if (referencedCtx.getStatus() != Status.PERSISTENT) {
      throw new IllegalStateException();
    }
    Node referenced=referencedCtx.state.getNode();
    return referenced != sessionWrapper.setReferenced(referent,name,referenced,linkType);
  }
 else {
    return null != sessionWrapper.setReferenced(referent,name,null,linkType);
  }
}","protected boolean _setReferenced(EntityContext referentCtx,String name,EntityContext referencedCtx,LinkType linkType) throws RepositoryException {
  if (referentCtx.getStatus() != Status.PERSISTENT) {
    throw new IllegalStateException(""String_Node_Str"" + this);
  }
  Node referent=referentCtx.state.getNode();
  if (referencedCtx != null) {
    if (referencedCtx.getStatus() != Status.PERSISTENT) {
      throw new IllegalStateException();
    }
    Node referenced=referencedCtx.state.getNode();
    Node previouslyReferenced=sessionWrapper.setReferenced(referent,name,referenced,linkType);
    if (previouslyReferenced != null) {
      String previousReferencedId=previouslyReferenced.getUUID();
      String referencedId=referenced.getUUID();
      return !referencedId.equals(previousReferencedId);
    }
 else {
      return true;
    }
  }
 else {
    return null != sessionWrapper.setReferenced(referent,name,null,linkType);
  }
}",0.8184615384615385
39648,"protected Node _getRoot() throws RepositoryException {
  Session session=sessionWrapper.getSession();
  List<String> pathSegments=domain.rootNodePathSegments;
  Node current=session.getRootNode();
  boolean created=false;
  if (!pathSegments.isEmpty()) {
    for (int i=0; i < pathSegments.size(); i++) {
      String pathSegment=pathSegments.get(i);
      if (current.hasNode(pathSegment)) {
        current=current.getNode(pathSegment);
      }
 else {
        if (domain.rootCreateMode == Domain.NO_CREATE_MODE) {
          throw new NoSuchNodeException(""String_Node_Str"" + domain.rootNodePath);
        }
 else {
          current=current.addNode(pathSegment);
          created=true;
        }
      }
    }
  }
  if (created) {
    if (domain.rootCreateMode == Domain.CREATE_MODE) {
      Node toSave=current;
      while (toSave.isNew()) {
        toSave=toSave.getParent();
      }
      toSave.save();
    }
  }
  return current;
}","protected Node _getRoot() throws RepositoryException {
  Session session=sessionWrapper.getSession();
  List<String> pathSegments=domain.rootNodePathSegments;
  Node current=session.getRootNode();
  String rootNodeType=domain.rootNodeType;
  boolean created=false;
  if (!pathSegments.isEmpty()) {
    for (int i=0; i < pathSegments.size(); i++) {
      String pathSegment=pathSegments.get(i);
      if (current.hasNode(pathSegment)) {
        current=current.getNode(pathSegment);
      }
 else {
        if (domain.rootCreateMode == Domain.NO_CREATE_MODE) {
          throw new NoSuchNodeException(""String_Node_Str"" + domain.rootNodePath);
        }
 else {
          if (rootNodeType != null) {
            current=current.addNode(pathSegment,rootNodeType);
          }
 else {
            current=current.addNode(pathSegment);
          }
          created=true;
        }
      }
    }
  }
  if (created) {
    if (domain.rootCreateMode == Domain.CREATE_MODE) {
      Node toSave=current;
      while (toSave.isNew()) {
        toSave=toSave.getParent();
      }
      toSave.save();
    }
  }
  return current;
}",0.8775510204081632
39649,"@Override protected Chromattic boot(Options options,Set<Class> classes) throws BuilderException {
  TypeResolver<Type> typeResolver=TypeResolverImpl.create(JavaLangReflectReflectionModel.getInstance());
  SimpleTypeResolver propertyTypeResolver=new SimpleTypeResolver();
  TypeMappingDomain mappingBuilder=new TypeMappingDomain(propertyTypeResolver,true);
  Set<NodeTypeMapping> mappings=new HashSet<NodeTypeMapping>();
  for (  Class clazz : classes) {
    ClassTypeInfo typeInfo=(ClassTypeInfo)typeResolver.resolve(clazz);
    mappingBuilder.add(typeInfo);
  }
  mappings.addAll(mappingBuilder.build());
  Boolean optimizeJCREnabled=options.getValue(JCR_OPTIMIZE_ENABLED);
  final boolean hasPropertyOptimized;
  if (optimizeJCREnabled != null) {
    hasPropertyOptimized=optimizeJCREnabled;
  }
 else {
    hasPropertyOptimized=options.getValue(JCR_OPTIMIZE_HAS_PROPERTY_ENABLED);
  }
  final boolean hasNodeOptimized;
  if (optimizeJCREnabled != null) {
    hasNodeOptimized=optimizeJCREnabled;
  }
 else {
    hasNodeOptimized=options.getValue(JCR_OPTIMIZE_HAS_NODE_ENABLED);
  }
  String rootNodePath;
  try {
    rootNodePath=Path.normalizeAbsolutePath(options.getValue(ROOT_NODE_PATH));
  }
 catch (  PathException e) {
    throw new BuilderException(""String_Node_Str"");
  }
  int rootCreateMode;
  if (options.getValue(CREATE_ROOT_NODE)) {
    boolean lazyCreateMode=options.getValue(LAZY_CREATE_ROOT_NODE);
    if (lazyCreateMode) {
      rootCreateMode=Domain.LAZY_CREATE_MODE;
    }
 else {
      rootCreateMode=Domain.CREATE_MODE;
    }
  }
 else {
    rootCreateMode=Domain.NO_CREATE_MODE;
  }
  boolean propertyCacheEnabled=options.getValue(PROPERTY_CACHE_ENABLED);
  boolean propertyReadAheadEnabled=options.getValue(PROPERTY_READ_AHEAD_ENABLED);
  Instrumentor instrumentor=create(options.getInstance(INSTRUMENTOR_CLASSNAME),Instrumentor.class);
  ObjectFormatter objectFormatter=create(options.getInstance(OBJECT_FORMATTER_CLASSNAME),ObjectFormatter.class);
  SessionLifeCycle sessionLifeCycle=create(options.getInstance(SESSION_LIFECYCLE_CLASSNAME),SessionLifeCycle.class);
  Domain domain=new Domain(propertyTypeResolver,mappings,instrumentor,objectFormatter,propertyCacheEnabled,propertyReadAheadEnabled,hasPropertyOptimized,hasNodeOptimized,rootNodePath,rootCreateMode);
  return new ChromatticImpl(domain,sessionLifeCycle);
}","@Override protected Chromattic boot(Options options,Set<Class> classes) throws BuilderException {
  TypeResolver<Type> typeResolver=TypeResolverImpl.create(JavaLangReflectReflectionModel.getInstance());
  SimpleTypeResolver propertyTypeResolver=new SimpleTypeResolver();
  TypeMappingDomain mappingBuilder=new TypeMappingDomain(propertyTypeResolver,true);
  Set<NodeTypeMapping> mappings=new HashSet<NodeTypeMapping>();
  for (  Class clazz : classes) {
    ClassTypeInfo typeInfo=(ClassTypeInfo)typeResolver.resolve(clazz);
    mappingBuilder.add(typeInfo);
  }
  mappings.addAll(mappingBuilder.build());
  Boolean optimizeJCREnabled=options.getValue(JCR_OPTIMIZE_ENABLED);
  final boolean hasPropertyOptimized;
  if (optimizeJCREnabled != null) {
    hasPropertyOptimized=optimizeJCREnabled;
  }
 else {
    hasPropertyOptimized=options.getValue(JCR_OPTIMIZE_HAS_PROPERTY_ENABLED);
  }
  final boolean hasNodeOptimized;
  if (optimizeJCREnabled != null) {
    hasNodeOptimized=optimizeJCREnabled;
  }
 else {
    hasNodeOptimized=options.getValue(JCR_OPTIMIZE_HAS_NODE_ENABLED);
  }
  String rootNodePath;
  try {
    rootNodePath=Path.normalizeAbsolutePath(options.getValue(ROOT_NODE_PATH));
  }
 catch (  PathException e) {
    throw new BuilderException(""String_Node_Str"");
  }
  int rootCreateMode;
  if (options.getValue(CREATE_ROOT_NODE)) {
    boolean lazyCreateMode=options.getValue(LAZY_CREATE_ROOT_NODE);
    if (lazyCreateMode) {
      rootCreateMode=Domain.LAZY_CREATE_MODE;
    }
 else {
      rootCreateMode=Domain.CREATE_MODE;
    }
  }
 else {
    rootCreateMode=Domain.NO_CREATE_MODE;
  }
  String rootNodeType=options.getValue(ROOT_NODE_TYPE);
  boolean propertyCacheEnabled=options.getValue(PROPERTY_CACHE_ENABLED);
  boolean propertyReadAheadEnabled=options.getValue(PROPERTY_READ_AHEAD_ENABLED);
  Instrumentor instrumentor=create(options.getInstance(INSTRUMENTOR_CLASSNAME),Instrumentor.class);
  ObjectFormatter objectFormatter=create(options.getInstance(OBJECT_FORMATTER_CLASSNAME),ObjectFormatter.class);
  SessionLifeCycle sessionLifeCycle=create(options.getInstance(SESSION_LIFECYCLE_CLASSNAME),SessionLifeCycle.class);
  Domain domain=new Domain(propertyTypeResolver,mappings,instrumentor,objectFormatter,propertyCacheEnabled,propertyReadAheadEnabled,hasPropertyOptimized,hasNodeOptimized,rootNodePath,rootCreateMode,rootNodeType);
  return new ChromatticImpl(domain,sessionLifeCycle);
}",0.9855194123819516
39650,"public void orderBefore(Node parentNode,Node srcNode,Node dstNode) throws RepositoryException {
  Node srcParentNode=srcNode.getParent();
  if (!srcParentNode.equals(parentNode)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (dstNode != null) {
    Node dstParentNode=dstNode.getParent();
    if (!dstParentNode.equals(parentNode)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    parentNode.orderBefore(srcNode.getName(),dstNode.getName());
  }
 else {
    long size=parentNode.getNodes().getSize();
    if (size > 1) {
      parentNode.orderBefore(srcNode.getName(),null);
    }
  }
}","public void orderBefore(Node parentNode,Node srcNode,Node dstNode) throws RepositoryException {
  if (dstNode != null) {
    parentNode.orderBefore(srcNode.getName(),dstNode.getName());
  }
 else {
    long size=parentNode.getNodes().getSize();
    if (size > 1) {
      parentNode.orderBefore(srcNode.getName(),null);
    }
  }
}",0.3195020746887966
39651,"@Override public final void run(TestResult result){
  result.addListener(listener);
  List<Config> configs=new LinkedList<Config>();
  boolean aptEnabled=false;
  try {
    Thread.currentThread().getContextClassLoader().loadClass(APT_INSTRUMENTOR);
    aptEnabled=true;
  }
 catch (  ClassNotFoundException ignore) {
  }
  String testMode=System.getProperty(CHROMATTIC_TEST_MODE);
  if (testMode == null) {
    testMode=MODE_ALL;
  }
  if (MODE_ALL.equals(testMode)) {
    if (aptEnabled) {
      configs.add(new Config(APT_INSTRUMENTOR,false,false,false));
    }
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,false));
    configs.add(new Config(CGLIB_INSTRUMENTOR,true,false,false));
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,true,false));
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,true));
  }
 else   if (MODE_APT.equals(testMode)) {
    configs.add(new Config(APT_INSTRUMENTOR,false,false,false));
  }
 else   if (MODE_CGLIB.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,false));
  }
 else   if (MODE_CACHE.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,true,false,false));
  }
 else   if (MODE_HAS_NODE.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,true));
  }
 else   if (MODE_HAS_PROPERTY.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,true,true,false));
  }
  for (  Config config : configs) {
    this.config=config;
    super.run(result);
  }
  result.removeListener(listener);
}","@Override public final void run(TestResult result){
  result.addListener(listener);
  List<Config> configs=new LinkedList<Config>();
  boolean aptEnabled=false;
  try {
    Thread.currentThread().getContextClassLoader().loadClass(APT_INSTRUMENTOR);
    aptEnabled=true;
  }
 catch (  ClassNotFoundException ignore) {
  }
  String testMode=System.getProperty(CHROMATTIC_TEST_MODE);
  if (testMode == null) {
    testMode=MODE_ALL;
  }
  if (MODE_ALL.equals(testMode)) {
    if (aptEnabled) {
      configs.add(new Config(APT_INSTRUMENTOR,false,false,false));
    }
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,false));
    configs.add(new Config(CGLIB_INSTRUMENTOR,true,false,false));
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,true,false));
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,true));
  }
 else   if (MODE_APT.equals(testMode)) {
    configs.add(new Config(APT_INSTRUMENTOR,false,false,false));
  }
 else   if (MODE_CGLIB.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,false));
  }
 else   if (MODE_CACHE.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,true,false,false));
  }
 else   if (MODE_HAS_NODE.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,false,false,true));
  }
 else   if (MODE_HAS_PROPERTY.equals(testMode)) {
    configs.add(new Config(CGLIB_INSTRUMENTOR,true,true,false));
  }
  for (  Config config : configs) {
    this.config=config;
    try {
      super.run(result);
    }
  finally {
      ArrayList<ChromatticSessionImpl> copy=new ArrayList<ChromatticSessionImpl>(sessions);
      sessions.clear();
      for (      ChromatticSession session : copy) {
        if (!session.isClosed()) {
          session.close();
        }
      }
    }
  }
  result.removeListener(listener);
}",0.9093085902424424
39652,"public final ChromatticSessionImpl login(){
  SimpleCredentials credentials=new SimpleCredentials(""String_Node_Str"",""String_Node_Str"".toCharArray());
  return (ChromatticSessionImpl)chromattic.openSession(credentials);
}","public final ChromatticSessionImpl login(){
  ChromatticSessionImpl session=(ChromatticSessionImpl)chromattic.openSession();
  sessions.add(session);
  return session;
}",0.5347043701799485
39653,"@Override protected void setUp() throws Exception {
  String p1=getClass().getName().replace('.','_');
  String p2=config.propertyCacheEnabled ? ""String_Node_Str"" : ""String_Node_Str"";
  String p3=config.optimizeHasNodeEnabled ? ""String_Node_Str"" : ""String_Node_Str"";
  String p4=config.optimizeHasPropertyEnabled ? ""String_Node_Str"" : ""String_Node_Str"";
  String p5=config.instrumentorClassName.lastIndexOf('.') == -1 ? config.instrumentorClassName : config.instrumentorClassName.substring(config.instrumentorClassName.lastIndexOf('.') + 1);
  String p6=testName;
  rootNodePath=""String_Node_Str"" + p1 + ""String_Node_Str""+ p2+ ""String_Node_Str""+ p3+ ""String_Node_Str""+ p4+ ""String_Node_Str""+ p5+ ""String_Node_Str""+ p6;
  builder=ChromatticBuilder.create();
  createDomain();
  boolean pingRootNode=pingRootNode();
  builder.setOptionValue(ChromatticBuilder.ROOT_NODE_PATH,rootNodePath);
  builder.setOptionValue(ChromatticBuilder.PROPERTY_CACHE_ENABLED,config.propertyCacheEnabled);
  builder.setOptionValue(ChromatticBuilder.INSTRUMENTOR_CLASSNAME,config.instrumentorClassName);
  builder.setOptionValue(ChromatticBuilder.JCR_OPTIMIZE_HAS_PROPERTY_ENABLED,config.optimizeHasPropertyEnabled);
  builder.setOptionValue(ChromatticBuilder.JCR_OPTIMIZE_HAS_NODE_ENABLED,config.optimizeHasNodeEnabled);
  if (pingRootNode) {
    builder.setOptionValue(ChromatticBuilder.CREATE_ROOT_NODE,true);
    builder.setOptionValue(ChromatticBuilder.LAZY_CREATE_ROOT_NODE,false);
  }
  chromattic=builder.build();
  if (pingRootNode) {
    ChromatticSessionImpl sess=login();
    sess.getRoot();
    sess.save();
  }
}","@Override protected void setUp() throws Exception {
  String p1=getClass().getName().replace('.','_');
  String p2=config.propertyCacheEnabled ? ""String_Node_Str"" : ""String_Node_Str"";
  String p3=config.optimizeHasNodeEnabled ? ""String_Node_Str"" : ""String_Node_Str"";
  String p4=config.optimizeHasPropertyEnabled ? ""String_Node_Str"" : ""String_Node_Str"";
  String p5=config.instrumentorClassName.lastIndexOf('.') == -1 ? config.instrumentorClassName : config.instrumentorClassName.substring(config.instrumentorClassName.lastIndexOf('.') + 1);
  String p6=testName;
  rootNodePath=""String_Node_Str"" + p1 + ""String_Node_Str""+ p2+ ""String_Node_Str""+ p3+ ""String_Node_Str""+ p4+ ""String_Node_Str""+ p5+ ""String_Node_Str""+ p6;
  builder=ChromatticBuilder.create();
  createDomain();
  boolean pingRootNode=pingRootNode();
  builder.setOptionValue(ChromatticBuilder.ROOT_NODE_PATH,rootNodePath);
  builder.setOptionValue(ChromatticBuilder.ROOT_NODE_TYPE,""String_Node_Str"");
  builder.setOptionValue(ChromatticBuilder.PROPERTY_CACHE_ENABLED,config.propertyCacheEnabled);
  builder.setOptionValue(ChromatticBuilder.INSTRUMENTOR_CLASSNAME,config.instrumentorClassName);
  builder.setOptionValue(ChromatticBuilder.JCR_OPTIMIZE_HAS_PROPERTY_ENABLED,config.optimizeHasPropertyEnabled);
  builder.setOptionValue(ChromatticBuilder.JCR_OPTIMIZE_HAS_NODE_ENABLED,config.optimizeHasNodeEnabled);
  if (pingRootNode) {
    builder.setOptionValue(ChromatticBuilder.CREATE_ROOT_NODE,true);
    builder.setOptionValue(ChromatticBuilder.LAZY_CREATE_ROOT_NODE,false);
  }
  chromattic=builder.build();
  if (pingRootNode) {
    ChromatticSessionImpl sess=login();
    sess.getRoot();
    sess.save();
  }
}",0.9762340036563072
39654,"public void testNotFound() throws RepositoryException {
  ChromatticSession session=login();
  TFI_A a=session.findById(TFI_A.class,""String_Node_Str"");
  assertNull(a);
}","public void testNotFound() throws RepositoryException {
  ChromatticSession session=login();
  TFI_A a=session.insert(TFI_A.class,""String_Node_Str"");
  assertNotNull(a);
  String id=session.getId(a);
  session.remove(a);
  a=session.findById(TFI_A.class,id);
  assertNull(a);
}",0.6845637583892618
39655,"/** 
 * Creates a persistent instance of the specified object.
 * @param parent the parent object
 * @param clazz the object class
 * @param name the object name
 * @param < O > the object class parameter
 * @return the persistent object
 * @throws NullPointerException if any argument is null
 * @throws IllegalArgumentException if any argument is not valid
 * @throws ChromatticException any chromattic exception
 */
<O>O insert(Object parent,Class<O> clazz,String name) throws NullPointerException, IllegalArgumentException, ChromatticException ;","/** 
 * Creates a persistent instance of the specified object.
 * @param parent the parent object
 * @param clazz the object class
 * @param name the object name
 * @param < O > the object class parameter
 * @return the persistent object
 * @throws NullPointerException if any argument is null
 * @throws IllegalArgumentException if the name is not valid or the class is not a chromattic class or the parent isnot a persistent object
 * @throws ChromatticException any chromattic exception
 */
<O>O insert(Object parent,Class<O> clazz,String name) throws NullPointerException, IllegalArgumentException, ChromatticException ;",0.9156010230179028
39656,"/** 
 * Creates a transient instance of the specified object. The name if it is not null will be used later when the object is inserted in the JCR session. The clazz argument must be annotated class with the <tt>NodeMapping</tt> annotation.
 * @param clazz the object class
 * @param name the node name
 * @param < O > the object class parameter
 * @return the transient object
 * @throws NullPointerException if the clazz argument is null
 * @throws IllegalArgumentException if the name format is not valid
 * @throws ChromatticException any chromattic exception
 */
<O>O create(Class<O> clazz,String name) throws NullPointerException, IllegalArgumentException, ChromatticException ;","/** 
 * Creates a transient instance of the specified object. The name if it is not null will be used later when the object is inserted in the JCR session. The clazz argument must be annotated class with the <tt>NodeMapping</tt> annotation.
 * @param clazz the object class
 * @param name the node name
 * @param < O > the object class parameter
 * @return the transient object
 * @throws NullPointerException if the clazz argument is null
 * @throws IllegalArgumentException if the name format is not valid or the class is not a chromattic class
 * @throws ChromatticException any chromattic exception
 */
<O>O create(Class<O> clazz,String name) throws NullPointerException, IllegalArgumentException, ChromatticException ;",0.9722814498933902
39657,"/** 
 * Persists a transient object.
 * @param parent the parent object
 * @param o the object to persist
 * @param name the object relative name to the parent
 * @return the object id
 * @throws NullPointerException if the parent or object argument is null
 * @throws IllegalArgumentException if any argument is not valid
 * @throws ChromatticException any chromattic exception
 */
String persist(Object parent,Object o,String name) throws NullPointerException, IllegalArgumentException, ChromatticException ;","/** 
 * Persists a transient object.
 * @param parent the parent object
 * @param o the object to persist
 * @param name the object relative name to the parent
 * @return the object id
 * @throws NullPointerException if the parent or object argument is null
 * @throws IllegalArgumentException if the parent is not a persistent object or the name is not valid or the objectis not a chromattic transient object
 * @throws ChromatticException any chromattic exception
 */
String persist(Object parent,Object o,String name) throws NullPointerException, IllegalArgumentException, ChromatticException ;",0.8997289972899729
39658,"private void writeClass(RoundEnvironment roundEnv,StringBuilder out,ClassTypeInfo cti){
  String simpleClassName=cti.getSimpleName() + ""String_Node_Str"";
  out.append(""String_Node_Str"").append(cti.getPackageName()).append(""String_Node_Str"");
  out.append(""String_Node_Str"").append(Invoker.class.getName()).append(""String_Node_Str"");
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(simpleClassName);
  sb.append(""String_Node_Str"");
  if (cti.getKind() == ClassKind.INTERFACE) {
    sb.append(Object.class.getName());
    sb.append(""String_Node_Str"");
    sb.append(cti.getSimpleName());
  }
 else {
    sb.append(cti.getSimpleName());
  }
  sb.append(""String_Node_Str"");
  out.append(sb.toString());
  appendContructor(roundEnv,out,cti);
  appendAbstractMethods(simpleClassName,roundEnv,out,cti);
  out.append(""String_Node_Str"");
}","private void writeClass(RoundEnvironment roundEnv,StringBuilder out,ClassTypeInfo cti){
  String simpleClassName=cti.getSimpleName() + ""String_Node_Str"";
  out.append(""String_Node_Str"").append(cti.getPackageName()).append(""String_Node_Str"");
  out.append(""String_Node_Str"").append(Invoker.class.getName()).append(""String_Node_Str"");
  out.append(""String_Node_Str"").append(Instrumented.class.getName()).append(""String_Node_Str"");
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(simpleClassName);
  sb.append(""String_Node_Str"");
  if (cti.getKind() == ClassKind.INTERFACE) {
    sb.append(Object.class.getName());
    sb.append(""String_Node_Str"");
    sb.append(cti.getSimpleName());
    sb.append(""String_Node_Str"");
    sb.append(Instrumented.class.getSimpleName());
  }
 else {
    sb.append(cti.getSimpleName());
    sb.append(""String_Node_Str"");
    sb.append(Instrumented.class.getSimpleName());
  }
  sb.append(""String_Node_Str"");
  out.append(sb.toString());
  appendContructor(roundEnv,out,cti);
  appendAbstractMethods(simpleClassName,roundEnv,out,cti);
  out.append(""String_Node_Str"");
}",0.8645621181262729
39659,"public MethodHandler getInvoker(Object proxy){
  try {
    Field f=proxy.getClass().getField(""String_Node_Str"");
    return (MethodHandler)f.get(proxy);
  }
 catch (  NoSuchFieldException e) {
    throw new AssertionError(e);
  }
catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
}","public MethodHandler getInvoker(Object proxy){
  if (proxy instanceof Instrumented) {
    try {
      Field f=proxy.getClass().getField(""String_Node_Str"");
      return (MethodHandler)f.get(proxy);
    }
 catch (    NoSuchFieldException e) {
      throw new AssertionError(e);
    }
catch (    IllegalAccessException e) {
      throw new AssertionError(e);
    }
  }
 else {
    return null;
  }
}",0.7891737891737892
39660,"public MethodHandler getInvoker(Object proxy){
  return ((MethodInterceptorInvoker)((Factory)proxy).getCallback(0)).invoker;
}","public MethodHandler getInvoker(Object proxy){
  if (proxy instanceof Factory) {
    Factory factory=(Factory)proxy;
    Callback callback=factory.getCallback(0);
    if (callback instanceof MethodInterceptorInvoker) {
      return ((MethodInterceptorInvoker)callback).invoker;
    }
  }
  return null;
}",0.413953488372093
39661,"public final EntityContext unwrapEntity(Object o){
  if (o == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return (EntityContext)domain.getInstrumentor().getInvoker(o);
}","/** 
 * Unwraps the object to an entity context
 * @param o the object to unwrap
 * @return the related entity context
 * @throws NullPointerException if the object is null
 * @throws IllegalArgumentException if the object is not a proxy
 */
public final EntityContext unwrapEntity(Object o) throws NullPointerException, IllegalArgumentException {
  return unwrap(o,EntityContext.class);
}",0.2024013722126929
39662,"public final EmbeddedContext unwrapMixin(Object o){
  if (o == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return (EmbeddedContext)domain.getInstrumentor().getInvoker(o);
}","/** 
 * Unwraps the object to an embedded context
 * @param o the object to unwrap
 * @return the related embedded context
 * @throws NullPointerException if the object is null
 * @throws IllegalArgumentException if the object is not a proxy
 */
public final EmbeddedContext unwrapMixin(Object o){
  return unwrap(o,EmbeddedContext.class);
}",0.2267657992565055
39663,"protected <O>O _create(Class<O> clazz,String name) throws NullPointerException, IllegalArgumentException, RepositoryException {
  if (clazz == null) {
    throw new NullPointerException();
  }
  ObjectMapper<?> typeMapper=domain.getTypeMapper(clazz);
  TransientEntityContextState state=new TransientEntityContextState(this);
  ObjectContext octx;
  if (typeMapper.getKind() == NodeTypeKind.PRIMARY) {
    EntityContext ctx=new EntityContext((ObjectMapper<EntityContext>)typeMapper,state);
    if (name != null) {
      ctx.setName(name);
    }
    broadcaster.created(ctx.getObject());
    octx=ctx;
  }
 else {
    if (name != null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    octx=new EmbeddedContext((ObjectMapper<EmbeddedContext>)typeMapper,this);
  }
  return clazz.cast(octx.getObject());
}","protected <O>O _create(Class<O> clazz,String name) throws NullPointerException, IllegalArgumentException, RepositoryException {
  if (clazz == null) {
    throw new NullPointerException();
  }
  ObjectMapper<?> typeMapper=domain.getTypeMapper(clazz);
  if (typeMapper == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
  TransientEntityContextState state=new TransientEntityContextState(this);
  ObjectContext octx;
  if (typeMapper.getKind() == NodeTypeKind.PRIMARY) {
    EntityContext ctx=new EntityContext((ObjectMapper<EntityContext>)typeMapper,state);
    if (name != null) {
      ctx.setName(name);
    }
    broadcaster.created(ctx.getObject());
    octx=ctx;
  }
 else {
    if (name != null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    octx=new EmbeddedContext((ObjectMapper<EmbeddedContext>)typeMapper,this);
  }
  return clazz.cast(octx.getObject());
}",0.92756878158338
39664,"@Override protected EmbeddedContext _getEmbedded(EntityContext entityCtx,Class<?> embeddedClass) throws RepositoryException {
  if (entityCtx == null) {
    throw new NullPointerException();
  }
  if (embeddedClass == null) {
    throw new NullPointerException();
  }
  ObjectMapper<EmbeddedContext> mapper=(ObjectMapper<EmbeddedContext>)domain.getTypeMapper(embeddedClass);
  EmbeddedContext embeddedCtx=entityCtx.embeddeds.get(mapper);
  if (embeddedCtx == null) {
    Node node=entityCtx.state.getNode();
    if (mapper.getKind() == NodeTypeKind.MIXIN) {
      String mixinTypeName=mapper.getNodeTypeName();
      if (sessionWrapper.haxMixin(node,mixinTypeName)) {
        NodeType mixinType=sessionWrapper.getNodeType(mixinTypeName);
        MixinTypeInfo mixinTypeInfo=domain.nodeInfoManager.getMixinTypeInfo(mixinType);
        embeddedCtx=new EmbeddedContext(mapper,this);
        entityCtx.embeddeds.put(embeddedCtx.mapper,embeddedCtx);
        embeddedCtx.relatedEntity=entityCtx;
        embeddedCtx.typeInfo=mixinTypeInfo;
      }
    }
 else {
      PrimaryTypeInfo typeInfo=entityCtx.state.getTypeInfo();
      PrimaryTypeInfo superTI=(PrimaryTypeInfo)typeInfo.getSuperType(mapper.getNodeTypeName());
      if (superTI != null) {
        embeddedCtx=new EmbeddedContext(mapper,this);
        entityCtx.embeddeds.put(embeddedCtx.mapper,embeddedCtx);
        embeddedCtx.relatedEntity=entityCtx;
        embeddedCtx.typeInfo=superTI;
      }
    }
  }
  return embeddedCtx;
}","@Override protected EmbeddedContext _getEmbedded(EntityContext entityCtx,Class<?> embeddedClass) throws RepositoryException {
  if (entityCtx == null) {
    throw new NullPointerException();
  }
  if (embeddedClass == null) {
    throw new NullPointerException();
  }
  ObjectMapper<EmbeddedContext> mapper=(ObjectMapper<EmbeddedContext>)domain.getTypeMapper(embeddedClass);
  EmbeddedContext embeddedCtx=null;
  if (mapper != null) {
    embeddedCtx=entityCtx.embeddeds.get(mapper);
    if (embeddedCtx == null) {
      Node node=entityCtx.state.getNode();
      if (mapper.getKind() == NodeTypeKind.MIXIN) {
        String mixinTypeName=mapper.getNodeTypeName();
        if (sessionWrapper.haxMixin(node,mixinTypeName)) {
          NodeType mixinType=sessionWrapper.getNodeType(mixinTypeName);
          MixinTypeInfo mixinTypeInfo=domain.nodeInfoManager.getMixinTypeInfo(mixinType);
          embeddedCtx=new EmbeddedContext(mapper,this);
          entityCtx.embeddeds.put(embeddedCtx.mapper,embeddedCtx);
          embeddedCtx.relatedEntity=entityCtx;
          embeddedCtx.typeInfo=mixinTypeInfo;
        }
      }
 else {
        PrimaryTypeInfo typeInfo=entityCtx.state.getTypeInfo();
        PrimaryTypeInfo superTI=(PrimaryTypeInfo)typeInfo.getSuperType(mapper.getNodeTypeName());
        if (superTI != null) {
          embeddedCtx=new EmbeddedContext(mapper,this);
          entityCtx.embeddeds.put(embeddedCtx.mapper,embeddedCtx);
          embeddedCtx.relatedEntity=entityCtx;
          embeddedCtx.typeInfo=superTI;
        }
      }
    }
  }
  return embeddedCtx;
}",0.9452411994784876
39665,"@Override public Object get(EntityContext context) throws Throwable {
  Object parent=context.getParent();
  Class<?> relatedClass=getRelatedClass();
  if (relatedClass.isInstance(parent)) {
    return parent;
  }
 else {
    EntityContext parentCtx=context.getSession().unwrapEntity(parent);
    EmbeddedContext mixinCtx=parentCtx.getEmbedded(relatedClass);
    if (mixinCtx != null) {
      return mixinCtx.getObject();
    }
    return null;
  }
}","@Override public Object get(EntityContext context) throws Throwable {
  Object parent=context.getParent();
  Class<?> relatedClass=getRelatedClass();
  if (relatedClass.isInstance(parent)) {
    return parent;
  }
 else {
    EntityContext parentCtx=context.getSession().unwrapEntity(parent);
    EmbeddedContext embeddedCtx=parentCtx.getEmbedded(relatedClass);
    if (embeddedCtx != null) {
      return embeddedCtx.getObject();
    }
    return null;
  }
}",0.9636963696369636
39666,"public void testLoad() throws Exception {
  DomainSession session=login();
  Node rootNode=session.getRoot();
  Node aNode=rootNode.addNode(""String_Node_Str"",""String_Node_Str"");
  String aId=aNode.getUUID();
  Node bNode=aNode.addNode(""String_Node_Str"",""String_Node_Str"");
  String bId=bNode.getUUID();
  Node cNode=bNode.addNode(""String_Node_Str"",""String_Node_Str"");
  String cId=cNode.getUUID();
  rootNode.save();
  session=login();
  A a=session.findById(A.class,aId);
  B b=session.findById(B.class,bId);
  B c=session.findById(B.class,cId);
  assertSame(b,c.getBParent());
  assertNull(c.getAParent());
  assertSame(a,b.getAParent());
  assertNull(b.getBParent());
}","public void testLoad() throws Exception {
  DomainSession session=login();
  Node rootNode=session.getRoot();
  Node aNode=rootNode.addNode(""String_Node_Str"",""String_Node_Str"");
  String aId=aNode.getUUID();
  Node bNode=aNode.addNode(""String_Node_Str"",""String_Node_Str"");
  String bId=bNode.getUUID();
  Node cNode=bNode.addNode(""String_Node_Str"",""String_Node_Str"");
  String cId=cNode.getUUID();
  rootNode.save();
  session=login();
  A a=session.findById(A.class,aId);
  B b=session.findById(B.class,bId);
  B c=session.findById(B.class,cId);
  assertNull(c.getAParent());
  assertSame(b,c.getBParent());
  assertNull(c.getCParent());
  assertSame(a,b.getAParent());
  assertNull(b.getBParent());
  assertNull(b.getCParent());
}",0.9116809116809116
39667,"public void remove(Node node,LinkedList<String> ids) throws RepositoryException {
  for (NodeIterator i=node.getNodes(); i.hasNext(); ) {
    Node child=i.nextNode();
    remove(child,ids);
  }
  for (PropertyIterator i=node.getReferences(); i.hasNext(); ) {
    Property property=i.nextProperty();
    property.setValue((Node)null);
  }
  for (PropertyIterator i=node.getProperties(); i.hasNext(); ) {
    Property property=i.nextProperty();
    if (property.getType() == PropertyType.REFERENCE) {
      linkMgrs[LinkType.REFERENCE.index].setReferenced(node,property.getName(),null);
    }
 else     if (property.getType() == PropertyType.PATH) {
      linkMgrs[LinkType.PATH.index].setReferenced(node,property.getName(),null);
    }
  }
  String id=node.getUUID();
  node.remove();
  ids.add(id);
}","/** 
 * Remove a node recursively in order to have one remove event generated for every descendants of the node in order to keep the contexts state corrects. It also remove all existing references to that node.
 * @param node the node to remove
 * @throws RepositoryException any repository exception
 */
public Iterator<String> remove(Node node) throws RepositoryException {
  LinkedList<String> ids=new LinkedList<String>();
  collectRemovedIds(node,ids);
  node.remove();
  return ids.iterator();
}",0.0830130668716372
39668,"protected void createDomain(){
  addClass(TLF_A.class);
}","protected void createDomain(){
  addClass(TLF_A.class);
  addClass(M1.class);
  addClass(M2.class);
}",0.7215189873417721
39669,"private Option(String name,String displayName){
  ParameterizedType pt=(ParameterizedType)getClass().getGenericSuperclass();
  Class clazz=(Class)pt.getActualTypeArguments()[0];
  Type<T> type;
  if (clazz == String.class) {
    type=(Type<T>)Type.STRING;
  }
 else   if (clazz == Boolean.class) {
    type=(Type<T>)Type.BOOLEAN;
  }
 else {
    throw new UnsupportedOperationException();
  }
  this.name=name;
  this.displayName=displayName;
  this.type=type;
}","private Option(Type<T> type,String name,String displayName){
  this.name=name;
  this.displayName=displayName;
  this.type=type;
}",0.3952702702702703
39670,"private Iterable<MethodInfo> getMethodsToImplement(ClassTypeInfo cti){
  List<MethodInfo> methods=new ArrayList<MethodInfo>();
  MethodIntrospector introspector=new MethodIntrospector(TypeScope.CLASS_HIERARCHY);
  for (  MethodInfo method : introspector.getMethods(cti)) {
    if (method.isAbstract()) {
      methods.add(method);
    }
  }
  return methods;
}","private Iterable<MethodInfo> getMethodsToImplement(ClassTypeInfo cti){
  List<MethodInfo> methods=new ArrayList<MethodInfo>();
  MethodIntrospector introspector=new MethodIntrospector(HierarchyScope.ALL,true);
  for (  MethodInfo method : introspector.getMethods(cti)) {
    if (method.isAbstract()) {
      methods.add(method);
    }
  }
  return methods;
}",0.9554317548746518
39671,"private static Map<String,PropertyInfo> buildProperties(ClassTypeInfo type){
  ClassIntrospector introspector=new ClassIntrospector(type);
  Map<String,MethodInfo> getterMap=introspector.getGetterMap();
  Map<String,Set<MethodInfo>> setterMap=introspector.getSetterMap();
  Map<String,PropertyInfo> properties=new HashMap<String,PropertyInfo>();
  for (  Map.Entry<String,MethodInfo> getterEntry : getterMap.entrySet()) {
    String name=getterEntry.getKey();
    MethodInfo getter=getterEntry.getValue();
    TypeInfo getterTypeInfo=getter.getReturnType();
    Set<MethodInfo> setters=setterMap.get(name);
    PropertyInfo property=null;
    if (setters != null) {
      for (      MethodInfo setter : setters) {
        TypeInfo setterTypeInfo=setter.getParameterTypes().get(0);
        if (getterTypeInfo.equals(setterTypeInfo)) {
          property=createPropertyInfo(type,name,getterTypeInfo,getter,setter);
        }
      }
    }
    if (property == null) {
      property=createPropertyInfo(type,name,getterTypeInfo,getter,null);
    }
    if (property != null) {
      properties.put(name,property);
    }
  }
  setterMap.keySet().removeAll(properties.keySet());
  for (  Map.Entry<String,Set<MethodInfo>> setterEntry : setterMap.entrySet()) {
    String name=setterEntry.getKey();
    for (    MethodInfo setter : setterEntry.getValue()) {
      TypeInfo setterTypeInfo=setter.getParameterTypes().get(0);
      PropertyInfo property=createPropertyInfo(type,name,setterTypeInfo,null,setter);
      if (property != null) {
        properties.put(name,property);
        break;
      }
    }
  }
  return properties;
}","private static Map<String,PropertyInfo> buildProperties(ClassTypeInfo type){
  MethodIntrospector introspector=new MethodIntrospector(HierarchyScope.ALL,true);
  Map<String,MethodInfo> getterMap=introspector.getGetterMap(type);
  Map<String,Set<MethodInfo>> setterMap=introspector.getSetterMap(type);
  Map<String,PropertyInfo> properties=new HashMap<String,PropertyInfo>();
  for (  Map.Entry<String,MethodInfo> getterEntry : getterMap.entrySet()) {
    String name=getterEntry.getKey();
    MethodInfo getter=getterEntry.getValue();
    TypeInfo getterTypeInfo=getter.getReturnType();
    Set<MethodInfo> setters=setterMap.get(name);
    PropertyInfo property=null;
    if (setters != null) {
      for (      MethodInfo setter : setters) {
        TypeInfo setterTypeInfo=setter.getParameterTypes().get(0);
        if (getterTypeInfo.equals(setterTypeInfo)) {
          property=createPropertyInfo(type,name,getterTypeInfo,getter,setter);
        }
      }
    }
    if (property == null) {
      property=createPropertyInfo(type,name,getterTypeInfo,getter,null);
    }
    if (property != null) {
      properties.put(name,property);
    }
  }
  setterMap.keySet().removeAll(properties.keySet());
  for (  Map.Entry<String,Set<MethodInfo>> setterEntry : setterMap.entrySet()) {
    String name=setterEntry.getKey();
    for (    MethodInfo setter : setterEntry.getValue()) {
      TypeInfo setterTypeInfo=setter.getParameterTypes().get(0);
      PropertyInfo property=createPropertyInfo(type,name,setterTypeInfo,null,setter);
      if (property != null) {
        properties.put(name,property);
        break;
      }
    }
  }
  return properties;
}",0.98322659347362
39672,"private TypeMapping _build(){
  NodeMapping nodeMapping=javaClass.getDeclaredAnnotation(NodeMapping.class);
  if (nodeMapping == null) {
    throw new IllegalStateException(""String_Node_Str"" + javaClass + ""String_Node_Str"");
  }
  String primaryNodeTypeName=nodeMapping.name();
  Set<PropertyMapping> propertyMappings=new HashSet<PropertyMapping>();
  Set<MethodMapping> methodMappings=new HashSet<MethodMapping>();
  BeanInfo info=new BeanInfo(javaClass);
  Mixin mixin=new AnnotationIntrospector<Mixin>(Mixin.class).resolve(javaClass);
  Set<String> mixinNames=new HashSet<String>();
  if (mixin != null) {
    for (    String mixinName : mixin.name()) {
      mixinNames.add(mixinName);
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(Property.class)) {
    Property propertyAnnotation=propertyInfo.getAnnotation(Property.class);
    ValueInfo value;
    if (propertyInfo instanceof SingleValuedPropertyInfo) {
      SingleValuedPropertyInfo svp=(SingleValuedPropertyInfo)propertyInfo;
      value=svp.getValue();
    }
 else     if (propertyInfo instanceof MultiValuedPropertyInfo) {
      MultiValuedPropertyInfo mvp=(MultiValuedPropertyInfo)propertyInfo;
      value=mvp.getElementValue();
    }
 else {
      throw new IllegalStateException();
    }
    if (value instanceof SimpleValueInfo) {
      JCRPropertyMapping memberMapping=new JCRPropertyMapping(propertyAnnotation.name());
      SimpleMapping<JCRPropertyMapping> simpleMapping=new SimpleMapping<JCRPropertyMapping>(memberMapping);
      PropertyMapping<SimpleMapping<JCRPropertyMapping>> propertyMapping=new PropertyMapping<SimpleMapping<JCRPropertyMapping>>(propertyInfo,simpleMapping);
      propertyMappings.add(propertyMapping);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + value);
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(Properties.class)) {
    Properties propertyAnnotation=propertyInfo.getAnnotation(Properties.class);
    if (propertyInfo instanceof MapPropertyInfo) {
      MapPropertyInfo mapPropertyInfo=(MapPropertyInfo)propertyInfo;
      PropertyMapMapping simpleMapping=new PropertyMapMapping();
      PropertyMapping<PropertyMapMapping> propertyMapping=new PropertyMapping<PropertyMapMapping>(mapPropertyInfo,simpleMapping);
      propertyMappings.add(propertyMapping);
    }
 else {
      throw new IllegalStateException();
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties()) {
    NodeAttributeType nat=null;
    if (propertyInfo.getAnnotation(Name.class) != null) {
      nat=NodeAttributeType.NAME;
    }
 else     if (propertyInfo.getAnnotation(Id.class) != null) {
      nat=NodeAttributeType.ID;
    }
 else     if (propertyInfo.getAnnotation(Path.class) != null) {
      if (propertyInfo.getAnnotation(Property.class) == null) {
        nat=NodeAttributeType.PATH;
      }
    }
 else     if (propertyInfo.getAnnotation(WorkspaceName.class) != null) {
      nat=NodeAttributeType.WORKSPACE_NAME;
    }
    if (nat != null) {
      if (propertyInfo instanceof SingleValuedPropertyInfo) {
        SingleValuedPropertyInfo svpi=(SingleValuedPropertyInfo)propertyInfo;
        ValueInfo vi=svpi.getValue();
        if (vi instanceof SimpleValueInfo) {
          SimpleValueInfo svi=(SimpleValueInfo)vi;
          JCRNodeAttributeMapping memberMapping=new JCRNodeAttributeMapping(nat);
          SimpleType simpleType=svi.getSimpleType();
          if (nat == NodeAttributeType.PATH) {
            if (simpleType != SimpleType.PATH) {
              throw new IllegalStateException(""String_Node_Str"" + simpleType + ""String_Node_Str"");
            }
          }
 else {
            if (simpleType != SimpleType.STRING) {
              throw new IllegalStateException(""String_Node_Str"" + simpleType + ""String_Node_Str"");
            }
          }
          SimpleMapping<JCRNodeAttributeMapping> simpleMapping=new SimpleMapping<JCRNodeAttributeMapping>(memberMapping);
          PropertyMapping<SimpleMapping<JCRNodeAttributeMapping>> propertyMapping=new PropertyMapping<SimpleMapping<JCRNodeAttributeMapping>>(propertyInfo,simpleMapping);
          propertyMappings.add(propertyMapping);
        }
 else {
          throw new IllegalStateException();
        }
      }
 else {
        throw new IllegalStateException();
      }
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(OneToOne.class)) {
    if (propertyInfo instanceof SingleValuedPropertyInfo) {
      SingleValuedPropertyInfo svpi=(SingleValuedPropertyInfo)propertyInfo;
      ValueInfo vi=svpi.getValue();
      if (vi instanceof BeanValueInfo) {
        BeanValueInfo bvi=(BeanValueInfo)vi;
        ClassTypeInfo typeInfo=bvi.getTypeInfo();
        OneToOne oneToOneAnn=propertyInfo.getAnnotation(OneToOne.class);
        RelationshipMapping hierarchyMapping;
        MappedBy mappedBy=propertyInfo.getAnnotation(MappedBy.class);
        if (mappedBy != null) {
          hierarchyMapping=new NamedOneToOneMapping(typeInfo,mappedBy.value(),RelationshipType.HIERARCHIC,true);
        }
 else {
          RelatedMappedBy relatedMappedBy=propertyInfo.getAnnotation(RelatedMappedBy.class);
          if (relatedMappedBy != null) {
            hierarchyMapping=new NamedOneToOneMapping(typeInfo,relatedMappedBy.value(),RelationshipType.HIERARCHIC,false);
          }
 else {
            throw new IllegalStateException(""String_Node_Str"" + propertyInfo + ""String_Node_Str""+ info);
          }
        }
        PropertyMapping<RelationshipMapping> oneToOneMapping=new PropertyMapping<RelationshipMapping>(propertyInfo,hierarchyMapping);
        propertyMappings.add(oneToOneMapping);
      }
 else {
        throw new IllegalStateException();
      }
    }
 else {
      throw new IllegalStateException();
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(OneToMany.class)) {
    OneToMany oneToManyAnn=propertyInfo.getAnnotation(OneToMany.class);
    if (propertyInfo instanceof MultiValuedPropertyInfo) {
      MultiValuedPropertyInfo multiValuedProperty=(MultiValuedPropertyInfo)propertyInfo;
      if (multiValuedProperty instanceof MapPropertyInfo) {
        MapPropertyInfo mapProperty=(MapPropertyInfo)multiValuedProperty;
        if (!(mapProperty.getKeyValue() instanceof SimpleValueInfo)) {
          throw new IllegalStateException(""String_Node_Str"" + mapProperty.getKeyValue());
        }
        SimpleValueInfo svi=(SimpleValueInfo)mapProperty.getKeyValue();
        if (svi.getSimpleType() != SimpleType.STRING) {
          throw new IllegalStateException();
        }
      }
      ValueInfo beanElementType=multiValuedProperty.getElementValue();
      if (beanElementType instanceof BeanValueInfo) {
        BeanValueInfo bvi=(BeanValueInfo)beanElementType;
        OneToManyMapping mapping;
        RelationshipType type=oneToManyAnn.type();
        if (type == RelationshipType.HIERARCHIC) {
          MappedBy mappedBy=propertyInfo.getAnnotation(MappedBy.class);
          if (mappedBy != null) {
            throw new IllegalStateException();
          }
          mapping=new OneToManyMapping(bvi.getTypeInfo(),RelationshipType.HIERARCHIC);
        }
 else {
          RelatedMappedBy mappedBy=propertyInfo.getAnnotation(RelatedMappedBy.class);
          if (mappedBy == null) {
            throw new IllegalStateException();
          }
          mapping=new NamedOneToManyMapping(bvi.getTypeInfo(),mappedBy.value(),type);
        }
        PropertyMapping<OneToManyMapping> oneToManyMapping=new PropertyMapping<OneToManyMapping>(propertyInfo,mapping);
        propertyMappings.add(oneToManyMapping);
      }
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(ManyToOne.class)) {
    if (propertyInfo instanceof SingleValuedPropertyInfo) {
      SingleValuedPropertyInfo svpi=(SingleValuedPropertyInfo)propertyInfo;
      ValueInfo vi=svpi.getValue();
      if (vi instanceof BeanValueInfo) {
        BeanValueInfo bvi=(BeanValueInfo)vi;
        ManyToOne manyToOneAnn=propertyInfo.getAnnotation(ManyToOne.class);
        RelationshipType type=manyToOneAnn.type();
        if (type == RelationshipType.HIERARCHIC) {
          RelationshipMapping hierarchyMapping=new ManyToOneMapping(bvi.getTypeInfo(),RelationshipType.HIERARCHIC);
          PropertyMapping<RelationshipMapping> manyToOneMapping=new PropertyMapping<RelationshipMapping>(propertyInfo,hierarchyMapping);
          propertyMappings.add(manyToOneMapping);
        }
 else {
          MappedBy mappedBy=propertyInfo.getAnnotation(MappedBy.class);
          if (mappedBy == null) {
            throw new IllegalStateException();
          }
          NamedManyToOneMapping referenceMapping=new NamedManyToOneMapping(bvi.getTypeInfo(),mappedBy.value(),type);
          PropertyMapping<NamedManyToOneMapping> manyToOneMapping=new PropertyMapping<NamedManyToOneMapping>(propertyInfo,referenceMapping);
          propertyMappings.add(manyToOneMapping);
        }
      }
    }
 else {
      throw new IllegalStateException();
    }
  }
  ClassIntrospector introspector=new ClassIntrospector(javaClass);
  for (  MethodInfo method : introspector.resolveMethods(Create.class)) {
    if (!method.isStatic()) {
      List<TypeInfo> parameterTypes=method.getParameterTypes();
      if (parameterTypes.size() < 2) {
        if (parameterTypes.size() == 1) {
          TypeInfo argTI=parameterTypes.get(0);
          if (argTI instanceof ClassTypeInfo) {
            ClassTypeInfo argCTI=(ClassTypeInfo)argTI;
            if (!argCTI.getName().equals(String.class.getName())) {
              throw new IllegalStateException();
            }
          }
 else {
            throw new IllegalStateException();
          }
        }
        ClassTypeInfo cti=(ClassTypeInfo)javaClass.resolve(method.getReturnType());
        methodMappings.add(new CreateMapping(method,cti));
      }
 else {
        throw new IllegalStateException();
      }
    }
  }
  for (  MethodInfo method : introspector.resolveMethods(Destroy.class)) {
    if (!method.isStatic()) {
      List<TypeInfo> parameterTypes=method.getParameterTypes();
      if (parameterTypes.size() != 0) {
        throw new IllegalStateException();
      }
      if (!(method.getReturnType() instanceof VoidTypeInfo)) {
        throw new IllegalStateException();
      }
      methodMappings.add(new DestroyMapping(method));
    }
  }
  for (  MethodInfo method : introspector.resolveMethods(FindById.class)) {
    if (!method.isStatic()) {
      List<TypeInfo> parameterTypes=method.getParameterTypes();
      if (parameterTypes.size() == 1) {
        TypeInfo argTI=parameterTypes.get(0);
        if (argTI instanceof ClassTypeInfo) {
          ClassTypeInfo argCTI=(ClassTypeInfo)argTI;
          if (argCTI.getName().equals(String.class.getName())) {
            ClassTypeInfo cti=(ClassTypeInfo)javaClass.resolve(method.getReturnType());
            methodMappings.add(new FindByIdMapping(method,cti));
          }
 else {
            throw new IllegalStateException();
          }
        }
 else {
          throw new IllegalStateException();
        }
      }
    }
  }
  return new TypeMapping(javaClass,propertyMappings,methodMappings,primaryNodeTypeName,mixinNames);
}","private TypeMapping _build(){
  NodeMapping nodeMapping=javaClass.getDeclaredAnnotation(NodeMapping.class);
  if (nodeMapping == null) {
    throw new IllegalStateException(""String_Node_Str"" + javaClass + ""String_Node_Str"");
  }
  String primaryNodeTypeName=nodeMapping.name();
  Set<PropertyMapping> propertyMappings=new HashSet<PropertyMapping>();
  Set<MethodMapping> methodMappings=new HashSet<MethodMapping>();
  BeanInfo info=new BeanInfo(javaClass);
  Mixin mixin=new AnnotationIntrospector<Mixin>(Mixin.class).resolve(javaClass);
  Set<String> mixinNames=new HashSet<String>();
  if (mixin != null) {
    for (    String mixinName : mixin.name()) {
      mixinNames.add(mixinName);
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(Property.class)) {
    Property propertyAnnotation=propertyInfo.getAnnotation(Property.class);
    ValueInfo value;
    if (propertyInfo instanceof SingleValuedPropertyInfo) {
      SingleValuedPropertyInfo svp=(SingleValuedPropertyInfo)propertyInfo;
      value=svp.getValue();
    }
 else     if (propertyInfo instanceof MultiValuedPropertyInfo) {
      MultiValuedPropertyInfo mvp=(MultiValuedPropertyInfo)propertyInfo;
      value=mvp.getElementValue();
    }
 else {
      throw new IllegalStateException();
    }
    if (value instanceof SimpleValueInfo) {
      JCRPropertyMapping memberMapping=new JCRPropertyMapping(propertyAnnotation.name());
      SimpleMapping<JCRPropertyMapping> simpleMapping=new SimpleMapping<JCRPropertyMapping>(memberMapping);
      PropertyMapping<SimpleMapping<JCRPropertyMapping>> propertyMapping=new PropertyMapping<SimpleMapping<JCRPropertyMapping>>(propertyInfo,simpleMapping);
      propertyMappings.add(propertyMapping);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + value);
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(Properties.class)) {
    Properties propertyAnnotation=propertyInfo.getAnnotation(Properties.class);
    if (propertyInfo instanceof MapPropertyInfo) {
      MapPropertyInfo mapPropertyInfo=(MapPropertyInfo)propertyInfo;
      PropertyMapMapping simpleMapping=new PropertyMapMapping();
      PropertyMapping<PropertyMapMapping> propertyMapping=new PropertyMapping<PropertyMapMapping>(mapPropertyInfo,simpleMapping);
      propertyMappings.add(propertyMapping);
    }
 else {
      throw new IllegalStateException();
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties()) {
    NodeAttributeType nat=null;
    if (propertyInfo.getAnnotation(Name.class) != null) {
      nat=NodeAttributeType.NAME;
    }
 else     if (propertyInfo.getAnnotation(Id.class) != null) {
      nat=NodeAttributeType.ID;
    }
 else     if (propertyInfo.getAnnotation(Path.class) != null) {
      if (propertyInfo.getAnnotation(Property.class) == null) {
        nat=NodeAttributeType.PATH;
      }
    }
 else     if (propertyInfo.getAnnotation(WorkspaceName.class) != null) {
      nat=NodeAttributeType.WORKSPACE_NAME;
    }
    if (nat != null) {
      if (propertyInfo instanceof SingleValuedPropertyInfo) {
        SingleValuedPropertyInfo svpi=(SingleValuedPropertyInfo)propertyInfo;
        ValueInfo vi=svpi.getValue();
        if (vi instanceof SimpleValueInfo) {
          SimpleValueInfo svi=(SimpleValueInfo)vi;
          JCRNodeAttributeMapping memberMapping=new JCRNodeAttributeMapping(nat);
          SimpleType simpleType=svi.getSimpleType();
          if (nat == NodeAttributeType.PATH) {
            if (simpleType != SimpleType.PATH) {
              throw new IllegalStateException(""String_Node_Str"" + simpleType + ""String_Node_Str"");
            }
          }
 else {
            if (simpleType != SimpleType.STRING) {
              throw new IllegalStateException(""String_Node_Str"" + simpleType + ""String_Node_Str"");
            }
          }
          SimpleMapping<JCRNodeAttributeMapping> simpleMapping=new SimpleMapping<JCRNodeAttributeMapping>(memberMapping);
          PropertyMapping<SimpleMapping<JCRNodeAttributeMapping>> propertyMapping=new PropertyMapping<SimpleMapping<JCRNodeAttributeMapping>>(propertyInfo,simpleMapping);
          propertyMappings.add(propertyMapping);
        }
 else {
          throw new IllegalStateException();
        }
      }
 else {
        throw new IllegalStateException();
      }
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(OneToOne.class)) {
    if (propertyInfo instanceof SingleValuedPropertyInfo) {
      SingleValuedPropertyInfo svpi=(SingleValuedPropertyInfo)propertyInfo;
      ValueInfo vi=svpi.getValue();
      if (vi instanceof BeanValueInfo) {
        BeanValueInfo bvi=(BeanValueInfo)vi;
        ClassTypeInfo typeInfo=bvi.getTypeInfo();
        OneToOne oneToOneAnn=propertyInfo.getAnnotation(OneToOne.class);
        RelationshipMapping hierarchyMapping;
        MappedBy mappedBy=propertyInfo.getAnnotation(MappedBy.class);
        if (mappedBy != null) {
          hierarchyMapping=new NamedOneToOneMapping(typeInfo,mappedBy.value(),RelationshipType.HIERARCHIC,true);
        }
 else {
          RelatedMappedBy relatedMappedBy=propertyInfo.getAnnotation(RelatedMappedBy.class);
          if (relatedMappedBy != null) {
            hierarchyMapping=new NamedOneToOneMapping(typeInfo,relatedMappedBy.value(),RelationshipType.HIERARCHIC,false);
          }
 else {
            throw new IllegalStateException(""String_Node_Str"" + propertyInfo + ""String_Node_Str""+ info);
          }
        }
        PropertyMapping<RelationshipMapping> oneToOneMapping=new PropertyMapping<RelationshipMapping>(propertyInfo,hierarchyMapping);
        propertyMappings.add(oneToOneMapping);
      }
 else {
        throw new IllegalStateException();
      }
    }
 else {
      throw new IllegalStateException();
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(OneToMany.class)) {
    OneToMany oneToManyAnn=propertyInfo.getAnnotation(OneToMany.class);
    if (propertyInfo instanceof MultiValuedPropertyInfo) {
      MultiValuedPropertyInfo multiValuedProperty=(MultiValuedPropertyInfo)propertyInfo;
      if (multiValuedProperty instanceof MapPropertyInfo) {
        MapPropertyInfo mapProperty=(MapPropertyInfo)multiValuedProperty;
        if (!(mapProperty.getKeyValue() instanceof SimpleValueInfo)) {
          throw new IllegalStateException(""String_Node_Str"" + mapProperty.getKeyValue());
        }
        SimpleValueInfo svi=(SimpleValueInfo)mapProperty.getKeyValue();
        if (svi.getSimpleType() != SimpleType.STRING) {
          throw new IllegalStateException();
        }
      }
      ValueInfo beanElementType=multiValuedProperty.getElementValue();
      if (beanElementType instanceof BeanValueInfo) {
        BeanValueInfo bvi=(BeanValueInfo)beanElementType;
        OneToManyMapping mapping;
        RelationshipType type=oneToManyAnn.type();
        if (type == RelationshipType.HIERARCHIC) {
          MappedBy mappedBy=propertyInfo.getAnnotation(MappedBy.class);
          if (mappedBy != null) {
            throw new IllegalStateException();
          }
          mapping=new OneToManyMapping(bvi.getTypeInfo(),RelationshipType.HIERARCHIC);
        }
 else {
          RelatedMappedBy mappedBy=propertyInfo.getAnnotation(RelatedMappedBy.class);
          if (mappedBy == null) {
            throw new IllegalStateException();
          }
          mapping=new NamedOneToManyMapping(bvi.getTypeInfo(),mappedBy.value(),type);
        }
        PropertyMapping<OneToManyMapping> oneToManyMapping=new PropertyMapping<OneToManyMapping>(propertyInfo,mapping);
        propertyMappings.add(oneToManyMapping);
      }
    }
  }
  for (  PropertyInfo propertyInfo : info.getProperties(ManyToOne.class)) {
    if (propertyInfo instanceof SingleValuedPropertyInfo) {
      SingleValuedPropertyInfo svpi=(SingleValuedPropertyInfo)propertyInfo;
      ValueInfo vi=svpi.getValue();
      if (vi instanceof BeanValueInfo) {
        BeanValueInfo bvi=(BeanValueInfo)vi;
        ManyToOne manyToOneAnn=propertyInfo.getAnnotation(ManyToOne.class);
        RelationshipType type=manyToOneAnn.type();
        if (type == RelationshipType.HIERARCHIC) {
          RelationshipMapping hierarchyMapping=new ManyToOneMapping(bvi.getTypeInfo(),RelationshipType.HIERARCHIC);
          PropertyMapping<RelationshipMapping> manyToOneMapping=new PropertyMapping<RelationshipMapping>(propertyInfo,hierarchyMapping);
          propertyMappings.add(manyToOneMapping);
        }
 else {
          MappedBy mappedBy=propertyInfo.getAnnotation(MappedBy.class);
          if (mappedBy == null) {
            throw new IllegalStateException();
          }
          NamedManyToOneMapping referenceMapping=new NamedManyToOneMapping(bvi.getTypeInfo(),mappedBy.value(),type);
          PropertyMapping<NamedManyToOneMapping> manyToOneMapping=new PropertyMapping<NamedManyToOneMapping>(propertyInfo,referenceMapping);
          propertyMappings.add(manyToOneMapping);
        }
      }
    }
 else {
      throw new IllegalStateException();
    }
  }
  MethodIntrospector introspector=new MethodIntrospector(HierarchyScope.ALL);
  for (  MethodInfo method : introspector.resolveMethods(javaClass,Create.class)) {
    if (!method.isStatic()) {
      List<TypeInfo> parameterTypes=method.getParameterTypes();
      if (parameterTypes.size() < 2) {
        if (parameterTypes.size() == 1) {
          TypeInfo argTI=parameterTypes.get(0);
          if (argTI instanceof ClassTypeInfo) {
            ClassTypeInfo argCTI=(ClassTypeInfo)argTI;
            if (!argCTI.getName().equals(String.class.getName())) {
              throw new IllegalStateException();
            }
          }
 else {
            throw new IllegalStateException();
          }
        }
        ClassTypeInfo cti=(ClassTypeInfo)javaClass.resolve(method.getReturnType());
        methodMappings.add(new CreateMapping(method,cti));
      }
 else {
        throw new IllegalStateException();
      }
    }
  }
  for (  MethodInfo method : introspector.resolveMethods(javaClass,Destroy.class)) {
    if (!method.isStatic()) {
      List<TypeInfo> parameterTypes=method.getParameterTypes();
      if (parameterTypes.size() != 0) {
        throw new IllegalStateException();
      }
      if (!(method.getReturnType() instanceof VoidTypeInfo)) {
        throw new IllegalStateException();
      }
      methodMappings.add(new DestroyMapping(method));
    }
  }
  for (  MethodInfo method : introspector.resolveMethods(javaClass,FindById.class)) {
    if (!method.isStatic()) {
      List<TypeInfo> parameterTypes=method.getParameterTypes();
      if (parameterTypes.size() == 1) {
        TypeInfo argTI=parameterTypes.get(0);
        if (argTI instanceof ClassTypeInfo) {
          ClassTypeInfo argCTI=(ClassTypeInfo)argTI;
          if (argCTI.getName().equals(String.class.getName())) {
            ClassTypeInfo cti=(ClassTypeInfo)javaClass.resolve(method.getReturnType());
            methodMappings.add(new FindByIdMapping(method,cti));
          }
 else {
            throw new IllegalStateException();
          }
        }
 else {
          throw new IllegalStateException();
        }
      }
    }
  }
  return new TypeMapping(javaClass,propertyMappings,methodMappings,primaryNodeTypeName,mixinNames);
}",0.9877281449417644
39673,"public ListIterator<E> listIterator(int index){
  return new AbstractBufferingListIterator<E>(model);
}","public ListIterator<E> listIterator(int index){
  BufferingListIterator<E> iterator=new BufferingListIterator<E>(model);
  while (index-- > 0) {
    iterator.next();
  }
  return iterator;
}",0.6348122866894198
39674,"void add(ElementPosition<E> position,E addedElement);",void add(ElementInsertion<E> insertion);,0.6881720430107527
39675,"protected void createDomain(){
  addClass(A.class);
  addClass(C.class);
}","protected void createDomain(){
  addClass(A.class);
  addClass(C.class);
  addClass(D2Impl.class);
}",0.8505747126436781
39676,"private Iterable<MethodInfo> getMethodsToImplement(ClassTypeInfo cti){
  List<MethodInfo> methods=new ArrayList<MethodInfo>();
  ClassIntrospector introspector=new ClassIntrospector(cti);
  for (  MethodInfo method : introspector.getMethods()) {
    if (method.isAbstract()) {
      methods.add(method);
    }
  }
  return methods;
}","private Iterable<MethodInfo> getMethodsToImplement(ClassTypeInfo cti){
  List<MethodInfo> methods=new ArrayList<MethodInfo>();
  MethodIntrospector introspector=new MethodIntrospector(TypeScope.CLASS_HIERARCHY);
  for (  MethodInfo method : introspector.getMethods(cti)) {
    if (method.isAbstract()) {
      methods.add(method);
    }
  }
  return methods;
}",0.8051948051948052
39677,"public Object invoke(ObjectContext ctx,Method method,Object[] args) throws Throwable {
  MethodInvoker invoker=dispatchers.get(method);
  if (invoker != null) {
    return invoker.invoke(ctx,method,args);
  }
 else {
    throw new AssertionError();
  }
}","public Object invoke(ObjectContext ctx,Method method,Object[] args) throws Throwable {
  MethodInvoker invoker=dispatchers.get(method);
  if (invoker != null) {
    return invoker.invoke(ctx,method,args);
  }
 else {
    StringBuilder msg=new StringBuilder(""String_Node_Str"").append(method.getName()).append(""String_Node_Str"");
    Class[] parameterTypes=method.getParameterTypes();
    for (int i=0; i < parameterTypes.length; i++) {
      if (i > 0) {
        msg.append(',');
      }
      msg.append(parameterTypes[i].getName());
    }
    msg.append(""String_Node_Str"");
    for (int i=0; i < args.length; i++) {
      if (i > 0) {
        msg.append(',');
      }
      msg.append(String.valueOf(args[i]));
    }
    msg.append(""String_Node_Str"");
    throw new AssertionError(msg);
  }
}",0.4737344794651384
39678,"protected void createDomain(){
  addClass(A.class);
}","protected void createDomain(){
  addClass(A.class);
  addClass(C.class);
}",0.8346456692913385
39679,<O>void addLifeCycleListener(LifeCycleListener<O> listener);,"/** 
 * Returns a virtual object from the specified object
 * @param o the real object
 * @param < O > the object type parameter
 * @return the corresponding virtual object
 * @throws ChromatticException any exception
 */
<O>void addLifeCycleListener(LifeCycleListener<O> listener);",0.3508771929824561
39680,"void setPropertyValue(String propertyName,SimpleValueInfo type,Object o){
  try {
    Value value;
    if (o != null) {
      ValueFactory valueFactory=session.getJCRSession().getValueFactory();
      SimpleType st=type != null ? type.getSimpleType() : null;
      value=ValueMapper.instance.get(valueFactory,o,st);
    }
 else {
      value=null;
    }
    PropertyDefinition def=JCR.findPropertyDefinition(node,propertyName);
    if (def == null) {
      throw new NoSuchPropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ node.getPath()+ ""String_Node_Str""+ node.getPrimaryNodeType().getName());
    }
    if (value != null) {
      int neededType=def.getRequiredType();
      if (neededType != PropertyType.UNDEFINED) {
        if (neededType != value.getType()) {
          throw new ClassCastException();
        }
      }
    }
    if (def.isMultiple()) {
      if (value == null) {
        node.setProperty(propertyName,new Value[0]);
      }
 else {
        node.setProperty(propertyName,new Value[]{value});
      }
    }
 else {
      node.setProperty(propertyName,value);
    }
  }
 catch (  RepositoryException e) {
    throw new UndeclaredRepositoryException(e);
  }
}","void setPropertyValue(String propertyName,SimpleValueInfo type,Object o){
  try {
    Value value;
    if (o != null) {
      ValueFactory valueFactory=session.getJCRSession().getValueFactory();
      SimpleType st=type != null ? type.getSimpleType() : null;
      value=ValueMapper.instance.get(valueFactory,o,st);
    }
 else {
      value=null;
    }
    PropertyDefinition def=JCR.findPropertyDefinition(node,propertyName);
    if (def == null) {
      throw new NoSuchPropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ node.getPath()+ ""String_Node_Str""+ node.getPrimaryNodeType().getName());
    }
    if (value != null) {
      int neededType=def.getRequiredType();
      if (neededType != PropertyType.UNDEFINED) {
        if (neededType != value.getType()) {
          throw new ClassCastException(""String_Node_Str"" + value.getType() + ""String_Node_Str""+ neededType+ ""String_Node_Str""+ propertyName);
        }
      }
    }
    if (def.isMultiple()) {
      if (value == null) {
        node.setProperty(propertyName,new Value[0]);
      }
 else {
        node.setProperty(propertyName,new Value[]{value});
      }
    }
 else {
      node.setProperty(propertyName,value);
    }
  }
 catch (  RepositoryException e) {
    throw new UndeclaredRepositoryException(e);
  }
}",0.9600319744204636
39681,"public Node setReferenced(Node referent,String propertyName,Node referenced) throws RepositoryException {
  Node oldReferenced=null;
  if (referent.hasProperty(propertyName)) {
    Property property=referent.getProperty(propertyName);
    oldReferenced=_getReferenced(property);
    Entry entry=getEntry(oldReferenced);
    boolean scheduleForAddition=true;
    Set<Node> propertyScheduledForAddition=entry.propertiesScheduledForAddition.get(propertyName);
    if (propertyScheduledForAddition != null) {
      if (propertyScheduledForAddition.contains(referent)) {
        propertyScheduledForAddition.remove(referent);
        scheduleForAddition=false;
      }
    }
    if (scheduleForAddition) {
      Set<Node> propertyScheduledForRemoval=entry.propertiesScheduledForRemoval.get(propertyName);
      if (propertyScheduledForRemoval == null) {
        propertyScheduledForRemoval=new HashSet<Node>();
        entry.propertiesScheduledForRemoval.put(propertyName,propertyScheduledForRemoval);
      }
      propertyScheduledForRemoval.add(referent);
      entry.version++;
    }
  }
  _setReferenced(referent,propertyName,referenced);
  if (referenced != null) {
    Entry entry=getEntry(referenced);
    Set<Node> srcs=entry.propertiesScheduledForAddition.get(propertyName);
    if (srcs == null) {
      srcs=new HashSet<Node>();
      entry.propertiesScheduledForAddition.put(propertyName,srcs);
    }
    srcs.add(referent);
    entry.version++;
  }
 else {
  }
  return oldReferenced;
}","public Node setReferenced(Node referent,String propertyName,Node referenced) throws RepositoryException {
  Node oldReferenced=null;
  if (referent.hasProperty(propertyName)) {
    Property property=referent.getProperty(propertyName);
    oldReferenced=_getReferenced(property);
    if (oldReferenced != null) {
      Entry entry=getEntry(oldReferenced);
      boolean scheduleForAddition=true;
      Set<Node> propertyScheduledForAddition=entry.propertiesScheduledForAddition.get(propertyName);
      if (propertyScheduledForAddition != null) {
        if (propertyScheduledForAddition.contains(referent)) {
          propertyScheduledForAddition.remove(referent);
          scheduleForAddition=false;
        }
      }
      if (scheduleForAddition) {
        Set<Node> propertyScheduledForRemoval=entry.propertiesScheduledForRemoval.get(propertyName);
        if (propertyScheduledForRemoval == null) {
          propertyScheduledForRemoval=new HashSet<Node>();
          entry.propertiesScheduledForRemoval.put(propertyName,propertyScheduledForRemoval);
        }
        propertyScheduledForRemoval.add(referent);
        entry.version++;
      }
    }
  }
  _setReferenced(referent,propertyName,referenced);
  if (referenced != null) {
    Entry entry=getEntry(referenced);
    Set<Node> srcs=entry.propertiesScheduledForAddition.get(propertyName);
    if (srcs == null) {
      srcs=new HashSet<Node>();
      entry.propertiesScheduledForAddition.put(propertyName,srcs);
    }
    srcs.add(referent);
    entry.version++;
  }
 else {
  }
  return oldReferenced;
}",0.9755301794453508
39682,"public Node getReferenced(Node referent,String propertyName) throws RepositoryException {
  if (referent.hasProperty(propertyName)) {
    Property property=referent.getProperty(propertyName);
    if (property.getType() == PropertyType.REFERENCE) {
      return property.getNode();
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}","public Node getReferenced(Node referent,String propertyName) throws RepositoryException {
  if (referent.hasProperty(propertyName)) {
    Property property=referent.getProperty(propertyName);
    if (property.getType() == PropertyType.REFERENCE) {
      try {
        return property.getNode();
      }
 catch (      ItemNotFoundException e) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}",0.885
39683,"public void nodeRemoved(String nodeId) throws RepositoryException {
  log.trace(""String_Node_Str"",nodeId);
  ObjectContext ctx=contexts.remove(nodeId);
  ctx.state=new RemovedContextState(nodeId,ctx.state.getPrimaryNodeType());
  fireEvent(LifeCycleType.REMOVED,ctx);
  log.trace(""String_Node_Str"",ctx,nodeId);
}","public void nodeRemoved(String nodeId) throws RepositoryException {
  log.trace(""String_Node_Str"",nodeId);
  ObjectContext ctx=contexts.remove(nodeId);
  if (ctx != null) {
    ctx.state=new RemovedContextState(nodeId,ctx.state.getPrimaryNodeType());
    fireEvent(LifeCycleType.REMOVED,ctx);
    log.trace(""String_Node_Str"",ctx,nodeId);
  }
 else {
    log.trace(""String_Node_Str"",ctx,nodeId);
  }
}",0.8764044943820225
39684,"protected <T>Iterator<T> _getRelateds(ObjectContext ctx,String name,Class<T> filterClass) throws RepositoryException {
  Node node=ctx.state.getNode();
  Iterator<Node> nodes=sessionWrapper.getRelateds(node,name);
  return new ReferentCollectionIterator<T>(this,nodes,filterClass,name);
}","protected <T>Iterator<T> _getRelateds(ObjectContext ctx,String name,Class<T> filterClass) throws RepositoryException {
  Node node=ctx.state.getNode();
  Iterator<Node> nodes=sessionWrapper.getReferents(node,name);
  return new ReferentCollectionIterator<T>(this,nodes,filterClass,name);
}",0.9809358752166378
39685,"protected boolean _setRelated(ObjectContext ctx,String name,ObjectContext relatedCtx) throws RepositoryException {
  if (ctx.getStatus() != Status.PERSISTENT) {
    throw new IllegalStateException(""String_Node_Str"" + this);
  }
  Node node=ctx.state.getNode();
  if (relatedCtx != null) {
    if (relatedCtx.getStatus() != Status.PERSISTENT) {
      throw new IllegalStateException();
    }
    Node relatedNode=relatedCtx.state.getNode();
    return relatedNode != sessionWrapper.setRelated(node,name,relatedNode);
  }
 else {
    return null != sessionWrapper.setRelated(node,name,null);
  }
}","protected boolean _setRelated(ObjectContext ctx,String name,ObjectContext relatedCtx) throws RepositoryException {
  if (ctx.getStatus() != Status.PERSISTENT) {
    throw new IllegalStateException(""String_Node_Str"" + this);
  }
  Node node=ctx.state.getNode();
  if (relatedCtx != null) {
    if (relatedCtx.getStatus() != Status.PERSISTENT) {
      throw new IllegalStateException();
    }
    Node relatedNode=relatedCtx.state.getNode();
    return relatedNode != sessionWrapper.setReferenced(node,name,relatedNode);
  }
 else {
    return null != sessionWrapper.setReferenced(node,name,null);
  }
}",0.9849498327759196
39686,"protected Object _getRelated(ObjectContext ctx,String name) throws RepositoryException {
  if (ctx.getStatus() != Status.PERSISTENT) {
    throw new IllegalStateException();
  }
  Node node=ctx.state.getNode();
  Node related=sessionWrapper.getRelated(node,name);
  if (related != null) {
    return findByNode(Object.class,related);
  }
 else {
    return null;
  }
}","protected Object _getRelated(ObjectContext ctx,String name) throws RepositoryException {
  if (ctx.getStatus() != Status.PERSISTENT) {
    throw new IllegalStateException();
  }
  Node node=ctx.state.getNode();
  Node related=sessionWrapper.getReferenced(node,name);
  if (related != null) {
    return findByNode(Object.class,related);
  }
 else {
    return null;
  }
}",0.9878213802435724
39687,"private Entry(Node dst){
  this.version=0;
  this.dst=dst;
  this.propertiesScheduledForAddition=new HashMap<String,Set<Node>>();
  this.propertiesScheduledForRemoval=new HashMap<String,Set<Node>>();
}","private Entry(Node referenced){
  this.version=0;
  this.referenced=referenced;
  this.propertiesScheduledForAddition=new HashMap<String,Set<Node>>();
  this.propertiesScheduledForRemoval=new HashMap<String,Set<Node>>();
}",0.9030732860520094
39688,"public Iterator<Node> iterator(final String name) throws RepositoryException {
  PropertyIterator properties=dst.getReferences();
  Set<Node> blah=propertiesScheduledForRemoval.get(name);
  if (blah == null) {
    blah=Collections.emptySet();
  }
  final Set<Node> tutu=blah;
  AbstractFilterIterator<Node,Property> i1=new AbstractFilterIterator<Node,Property>((Iterator<Property>)properties){
    protected Node adapt(    Property property){
      try {
        String propertyName=property.getName();
        if (propertyName.equals(name)) {
          Node src=property.getParent();
          if (!tutu.contains(src)) {
            return src;
          }
        }
        return null;
      }
 catch (      RepositoryException e) {
        throw new UndeclaredRepositoryException(e);
      }
    }
  }
;
  Set<Node> srcs=propertiesScheduledForAddition.get(name);
  if (srcs == null) {
    srcs=new HashSet<Node>();
    propertiesScheduledForAddition.put(name,srcs);
  }
  final Iterator<Node> i2=srcs.iterator();
  return new CompoundIterator<Node>(i1,i2){
    int version=Entry.this.version;
    private void check(){
      if (version != Entry.this.version) {
        throw new ConcurrentModificationException();
      }
    }
    @Override public boolean hasNext(){
      check();
      return super.hasNext();
    }
    @Override public Node next(){
      check();
      return super.next();
    }
    @Override public void remove(){
      check();
      super.remove();
      version=Entry.this.version++;
    }
  }
;
}","public Iterator<Node> iterator(final String name) throws RepositoryException {
  PropertyIterator properties=referenced.getReferences();
  Set<Node> blah=propertiesScheduledForRemoval.get(name);
  if (blah == null) {
    blah=Collections.emptySet();
  }
  final Set<Node> tutu=blah;
  AbstractFilterIterator<Node,Property> i1=new AbstractFilterIterator<Node,Property>((Iterator<Property>)properties){
    protected Node adapt(    Property property){
      try {
        String propertyName=property.getName();
        if (propertyName.equals(name)) {
          Node src=property.getParent();
          if (!tutu.contains(src)) {
            return src;
          }
        }
        return null;
      }
 catch (      RepositoryException e) {
        throw new UndeclaredRepositoryException(e);
      }
    }
  }
;
  Set<Node> srcs=propertiesScheduledForAddition.get(name);
  if (srcs == null) {
    srcs=new HashSet<Node>();
    propertiesScheduledForAddition.put(name,srcs);
  }
  final Iterator<Node> i2=srcs.iterator();
  return new CompoundIterator<Node>(i1,i2){
    int version=Entry.this.version;
    private void check(){
      if (version != Entry.this.version) {
        throw new ConcurrentModificationException();
      }
    }
    @Override public boolean hasNext(){
      check();
      return super.hasNext();
    }
    @Override public Node next(){
      check();
      return super.next();
    }
    @Override public void remove(){
      check();
      super.remove();
      version=Entry.this.version++;
    }
  }
;
}",0.9957557949722494
39689,"private Entry getEntry(Node dst) throws RepositoryException {
  Entry entry=entries.get(dst.getUUID());
  if (entry == null) {
    entry=new Entry(dst);
    entries.put(dst.getUUID(),entry);
  }
  return entry;
}","private Entry getEntry(Node referenced) throws RepositoryException {
  Entry entry=entries.get(referenced.getUUID());
  if (entry == null) {
    entry=new Entry(referenced);
    entries.put(referenced.getUUID(),entry);
  }
  return entry;
}",0.8849557522123894
39690,"public void remove(Node node,LinkedList<String> ids) throws RepositoryException {
  for (NodeIterator i=node.getNodes(); i.hasNext(); ) {
    Node child=i.nextNode();
    remove(child,ids);
  }
  for (PropertyIterator i=node.getReferences(); i.hasNext(); ) {
    Property property=i.nextProperty();
    property.setValue((Node)null);
  }
  String id=node.getUUID();
  node.remove();
  ids.add(id);
}","public void remove(Node node,LinkedList<String> ids) throws RepositoryException {
  for (NodeIterator i=node.getNodes(); i.hasNext(); ) {
    Node child=i.nextNode();
    remove(child,ids);
  }
  for (PropertyIterator i=node.getReferences(); i.hasNext(); ) {
    Property property=i.nextProperty();
    property.setValue((Node)null);
  }
  for (PropertyIterator i=node.getProperties(); i.hasNext(); ) {
    Property property=i.nextProperty();
    if (property.getType() == PropertyType.REFERENCE) {
      refMgr.setReferenced(node,property.getName(),null);
    }
  }
  String id=node.getUUID();
  node.remove();
  ids.add(id);
}",0.7770204479065238
39691,"private void appendAbstractMethods(String simpleClassName,RoundEnvironment roundEnv,StringBuilder out,ClassTypeInfo cti){
  int id=0;
  Iterable<MethodInfo> methods=getMethodsToImplement(cti);
  for (  MethodInfo method : methods) {
    String methodId=""String_Node_Str"" + id++;
    String methodName=method.getName();
    List<TypeInfo> parameterTypes=method.getParameterTypes();
    TypeInfo rti=method.getReturnType();
    String scope;
switch (method.getAccess()) {
case PACKAGE_PROTECTED:
      scope=""String_Node_Str"";
    break;
case PROTECTED:
  scope=""String_Node_Str"";
break;
case PUBLIC:
scope=""String_Node_Str"";
break;
default :
throw new AssertionError();
}
out.append(""String_Node_Str"").append(Invoker.class.getSimpleName()).append(""String_Node_Str"").append(methodId).append(""String_Node_Str"").append(Invoker.class.getSimpleName()).append(""String_Node_Str"").append(simpleClassName).append(""String_Node_Str"").append('""').append(methodName).append('""');
for (TypeInfo parameterType : parameterTypes) {
out.append(""String_Node_Str"");
new TypeFormatter(cti,FormatterStyle.LITERAL,out).format(parameterType);
out.append(""String_Node_Str"");
}
out.append(""String_Node_Str"");
out.append(scope).append(""String_Node_Str"");
new TypeFormatter(cti,FormatterStyle.RETURN_TYPE,out).format(rti);
out.append(""String_Node_Str"").append(methodName).append(""String_Node_Str"");
StringBuffer sb1=new StringBuffer(""String_Node_Str"");
for (int i=0; i < parameterTypes.size(); i++) {
TypeInfo parameterType=parameterTypes.get(i);
if (i > 0) {
out.append(""String_Node_Str"");
sb1.append(""String_Node_Str"");
}
new TypeFormatter(cti,FormatterStyle.TYPE_PARAMETER,out).format(parameterType);
out.append(""String_Node_Str"").append(i);
sb1.append(""String_Node_Str"").append(i);
}
sb1.append(""String_Node_Str"");
out.append(""String_Node_Str"");
out.append(sb1.toString());
if (rti instanceof VoidTypeInfo) {
out.append(methodId).append(""String_Node_Str"");
}
 else {
out.append(""String_Node_Str"");
new TypeFormatter(cti,FormatterStyle.CAST,out).format(rti);
out.append(""String_Node_Str"").append(methodId).append(""String_Node_Str"");
}
out.append(""String_Node_Str"");
}
}","private void appendAbstractMethods(String simpleClassName,RoundEnvironment roundEnv,StringBuilder out,ClassTypeInfo cti){
  int id=0;
  Iterable<MethodInfo> methods=getMethodsToImplement(cti);
  for (  MethodInfo method : methods) {
    String methodId=""String_Node_Str"" + id++;
    String methodName=method.getName();
    List<TypeInfo> parameterTypes=method.getParameterTypes();
    TypeInfo rti=method.getReturnType();
    String scope;
switch (method.getAccess()) {
case PACKAGE_PROTECTED:
      scope=""String_Node_Str"";
    break;
case PROTECTED:
  scope=""String_Node_Str"";
break;
case PUBLIC:
scope=""String_Node_Str"";
break;
default :
throw new AssertionError();
}
out.append(""String_Node_Str"").append(Invoker.class.getSimpleName()).append(""String_Node_Str"").append(methodId).append(""String_Node_Str"").append(Invoker.class.getSimpleName()).append(""String_Node_Str"").append(method.getOwner().getName()).append(""String_Node_Str"").append('""').append(methodName).append('""');
for (TypeInfo parameterType : parameterTypes) {
out.append(""String_Node_Str"");
new TypeFormatter(cti,FormatterStyle.LITERAL,out).format(parameterType);
out.append(""String_Node_Str"");
}
out.append(""String_Node_Str"");
out.append(scope).append(""String_Node_Str"");
new TypeFormatter(cti,FormatterStyle.RETURN_TYPE,out).format(rti);
out.append(""String_Node_Str"").append(methodName).append(""String_Node_Str"");
StringBuffer sb1=new StringBuffer(""String_Node_Str"");
for (int i=0; i < parameterTypes.size(); i++) {
TypeInfo parameterType=parameterTypes.get(i);
if (i > 0) {
out.append(""String_Node_Str"");
sb1.append(""String_Node_Str"");
}
new TypeFormatter(cti,FormatterStyle.TYPE_PARAMETER,out).format(parameterType);
out.append(""String_Node_Str"").append(i);
sb1.append(""String_Node_Str"").append(i);
}
sb1.append(""String_Node_Str"");
out.append(""String_Node_Str"");
out.append(sb1.toString());
if (rti instanceof VoidTypeInfo) {
out.append(methodId).append(""String_Node_Str"");
}
 else {
out.append(""String_Node_Str"");
new TypeFormatter(cti,FormatterStyle.CAST,out).format(rti);
out.append(""String_Node_Str"").append(methodId).append(""String_Node_Str"");
}
out.append(""String_Node_Str"");
}
}",0.990228013029316
39692,"public static Invoker getDeclaredMethod(Class<?> clazz,final String methodName,final Class<?>... parameterTypes){
  MethodFinder visitor=new MethodFinder(methodName,parameterTypes);
  visitor.accept(clazz.getSuperclass());
  if (visitor.method == null) {
    throw new AssertionError(""String_Node_Str"" + methodName);
  }
  return new Invoker(visitor.method);
}","public static Invoker getDeclaredMethod(Class<?> clazz,final String methodName,final Class<?>... parameterTypes){
  MethodFinder visitor=new MethodFinder(methodName,parameterTypes);
  visitor.accept(clazz);
  if (visitor.method == null) {
    throw new AssertionError(""String_Node_Str"" + methodName);
  }
  return new Invoker(visitor.method);
}",0.9772727272727272
39693,"/** 
 * when created, starts mindrunner thread
 * @param mind
 * @param period 
 */
public MindRunner(OCMind mind,double period){
  this(mind,period,0,null);
  restart();
}","public MindRunner(OCMind mind,double period,boolean newThread){
  this(mind,period,0,null);
  if (newThread)   restart();
 else {
    running=true;
    run();
  }
}",0.5238095238095238
39694,"public void updateAttentionSort(){
  attentionSortedBySTI=new TreeMap<Atom,AttentionValue>(new Comparator<Atom>(){
    @Override public int compare(    Atom a,    Atom b){
      short sa=getSTI(a);
      short sb=getSTI(b);
      if (sa == sb)       return 0;
      return (sa > sb) ? -1 : 1;
    }
  }
);
  attentionSortedBySTI.putAll(attention);
}","public void updateAttentionSort(){
  List<Atom> toRemoveFromAttentionAndTruth=new LinkedList();
  for (  Atom a : attention.keySet()) {
    if (!atomspace.hasAtom(a)) {
      toRemoveFromAttentionAndTruth.add(a);
    }
  }
  for (  Atom a : toRemoveFromAttentionAndTruth) {
    attention.remove(a);
    truth.remove(a);
  }
  attentionSortedBySTI=new TreeMap<Atom,AttentionValue>(new Comparator<Atom>(){
    @Override public int compare(    Atom a,    Atom b){
      short sa=getSTI(a);
      short sb=getSTI(b);
      if (sa == sb)       return 0;
      return (sa > sb) ? -1 : 1;
    }
  }
);
  attentionSortedBySTI.putAll(attention);
}",0.707193515704154
39695,"public Collection<Atom> getAtoms(){
  return atomspace.getAtoms();
}","@Override public List<Atom> getAtoms(Class<? extends AtomType> type,boolean includeSubtypes){
  Builder<Atom> ib=new ImmutableList.Builder<Atom>();
  Collection<Atom> v=atomspace.getAtoms(type,includeSubtypes);
  if (v != null) {
    ib.addAll(v);
    for (    ReadableAtomSpace ra : subspaces) {
      ib.addAll(ra.getAtoms(type,includeSubtypes));
    }
  }
  return ib.build();
}",0.111358574610245
39696,"/** 
 * @param increasingOrDecreasing decreasing=true, increasing=false
 * @param include
 * @return 
 */
public Iterator<Atom> iterateAtomsBySTI(final boolean increasingOrDecreasing,final Predicate<Atom> include){
  return new Iterator<Atom>(){
    Atom next=null;
    @Override public boolean hasNext(){
      if (attentionSortedBySTI == null)       return false;
      if (attentionSortedBySTI.size() == 0)       return false;
      if (next == null) {
        if (increasingOrDecreasing == true)         next=attentionSortedBySTI.firstKey();
 else         next=attentionSortedBySTI.lastKey();
      }
 else {
        if (increasingOrDecreasing == true)         next=attentionSortedBySTI.higherKey(next);
 else         next=attentionSortedBySTI.lowerKey(next);
      }
      if (next == null)       return false;
      if (include == null)       return true;
 else {
        if (include.isTrue(next))         return true;
 else {
          while (!include.isTrue(next)) {
            if (increasingOrDecreasing == true)             next=attentionSortedBySTI.higherKey(next);
 else             next=attentionSortedBySTI.lowerKey(next);
            if (next == null)             return false;
          }
          return true;
        }
      }
    }
    @Override public Atom next(){
      return next;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
;
}","/** 
 * @param increasingOrDecreasing decreasing=true, increasing=false
 * @param include
 * @return 
 */
public Iterator<Atom> iterateAtomsBySTI(final boolean increasingOrDecreasing,final Predicate<Atom> include){
  Iterator<Atom> i;
  if (increasingOrDecreasing)   i=attentionSortedBySTI.navigableKeySet().iterator();
 else   i=attentionSortedBySTI.navigableKeySet().descendingIterator();
  if (include != null)   return IteratorUtils.filteredIterator(i,include);
 else   return i;
}",0.2939330543933054
39697,"public boolean remove(Atom a){
  if (atomspace.remove(a)) {
    attention.remove(a);
    truth.remove(a);
    return true;
  }
  return false;
}","public boolean remove(Atom a){
  if (atomspace.remove(a)) {
    return true;
  }
  return false;
}",0.8099173553719008
39698,"public Iterator<Atom> iterateAtoms(){
  return atomToType.keySet().iterator();
}","public Iterator<Atom> iterateAtoms(){
  return IteratorUtils.chainedIterator(iterateVertices(),iterateEdges());
}",0.6528497409326425
39699,"@Override public boolean visitVertices(Predicate<Atom> predicate,Operation<ReadableAtomSpace,Atom> op){
  for (  Atom e : getVertices()) {
    if (predicate.isTrue(e)) {
      boolean result=op.operate(this,e);
      if (!result)       return false;
    }
  }
  return true;
}","@Override public boolean visitVertices(Predicate<Atom> predicate,Operation<ReadableAtomSpace,Atom> op){
  for (  Atom e : getVertices()) {
    if (predicate.evaluate(e)) {
      boolean result=op.operate(this,e);
      if (!result)       return false;
    }
  }
  return true;
}",0.9783393501805054
39700,"@Override public boolean visitEdges(Predicate<Atom> predicate,Operation<ReadableAtomSpace,Atom> op){
  for (  Atom e : getEdges()) {
    if (predicate.isTrue(e)) {
      boolean result=op.operate(this,e);
      if (!result)       return false;
    }
  }
  return true;
}","@Override public boolean visitEdges(Predicate<Atom> predicate,Operation<ReadableAtomSpace,Atom> op){
  for (  Atom e : getEdges()) {
    if (predicate.evaluate(e)) {
      boolean result=op.operate(this,e);
      if (!result)       return false;
    }
  }
  return true;
}",0.977859778597786
39701,"public Collection<Atom> getAtoms(){
  return atomToType.keySet();
}","public Collection<Atom> getAtoms(Class<? extends AtomType> type,boolean includeSubtypes){
  if (!includeSubtypes) {
    return typesToAtom.get(type);
  }
 else {
    logger.error(""String_Node_Str"");
    return null;
  }
}",0.3125
39702,"@Override protected void run(final OCMind mind){
  Iterator<Atom> ci=mind.iterateAtomsByDecreasingSTI(new Predicate<Atom>(){
    @Override public boolean isTrue(    Atom x){
      return (mind.getType(x).equals(AtomType.conceptNode));
    }
  }
);
  while (ci.hasNext()) {
    Atom leading=ci.next();
    if (speakable(leading)) {
      speak(leading);
      last=leading;
      break;
    }
  }
}","@Override protected void run(final OCMind mind){
  Iterator<Atom> ci=mind.iterateAtomsByDecreasingSTI(new Predicate<Atom>(){
    @Override public boolean evaluate(    Atom x){
      return (mind.getType(x).equals(AtomType.conceptNode));
    }
  }
);
  while (ci.hasNext()) {
    Atom leading=ci.next();
    if (speakable(leading)) {
      speak(leading);
      last=leading;
      break;
    }
  }
}",0.984924623115578
39703,"@Override protected void run(OCMind mind){
  List<Atom> c=new ArrayList(mind.getAtoms());
  if (c != null) {
    if (c.size() > 0) {
      for (int n=0; n < numAtoms; n++) {
        int i=RandomNumber.getInt(0,c.size() - 1);
        Atom x=c.get(i);
        addStimulus(x,getBoost());
      }
    }
  }
}","@Override protected void run(OCMind mind){
  List<Atom> c=IteratorUtils.toList(mind.iterateAtoms());
  if (c != null) {
    if (c.size() > 0) {
      for (int n=0; n < numAtoms; n++) {
        int i=RandomNumber.getInt(0,c.size() - 1);
        Atom x=c.get(i);
        addStimulus(x,getBoost());
      }
    }
  }
}",0.9499192245557352
39704,"@Override public void run(OCMind mind){
  for (  Atom a : mind.getAtoms()) {
    final int sti=mind.getSTI(a);
    int avgSurroundingSTI=0;
    int count=0;
    final Collection<Atom> ie=mind.getIncidentEdges(a);
    if (ie != null) {
      for (      Atom e : ie) {
        avgSurroundingSTI+=mind.getSTI(e);
        count++;
      }
    }
    final Collection<Atom> iv=mind.getIncidentVertices(a);
    if (iv != null) {
      for (      Atom e : iv) {
        avgSurroundingSTI+=mind.getSTI(e);
        count++;
      }
    }
    if (count != 0) {
      avgSurroundingSTI/=count;
    }
 else {
      continue;
    }
    final int diffusion_momentum=60;
    short difference=(short)(sti - avgSurroundingSTI);
    if (avgSurroundingSTI < sti) {
      difference/=diffusion_momentum;
      if (difference < 1)       difference=1;
      addStimulus(a,(short)-difference);
      totalSurplus+=difference;
    }
 else     if (avgSurroundingSTI > sti) {
      difference=(short)(avgSurroundingSTI - sti);
      difference/=diffusion_momentum;
      if (difference < 1)       difference=1;
      difference=(short)Math.min(difference,totalSurplus);
      if (totalSurplus >= difference) {
        addStimulus(a,(short)difference);
        totalSurplus-=difference;
      }
    }
  }
}","@Override public void run(OCMind mind){
  Iterator<Atom> ia=mind.iterateAtoms();
  while (ia.hasNext()) {
    Atom a=ia.next();
    final int sti=mind.getSTI(a);
    int avgSurroundingSTI=0;
    int count=0;
    final Collection<Atom> ie=mind.getIncidentEdges(a);
    if (ie != null) {
      for (      Atom e : ie) {
        avgSurroundingSTI+=mind.getSTI(e);
        count++;
      }
    }
    final Collection<Atom> iv=mind.getIncidentVertices(a);
    if (iv != null) {
      for (      Atom e : iv) {
        avgSurroundingSTI+=mind.getSTI(e);
        count++;
      }
    }
    if (count != 0) {
      avgSurroundingSTI/=count;
    }
 else {
      continue;
    }
    final int diffusion_momentum=60;
    short difference=(short)(sti - avgSurroundingSTI);
    if (avgSurroundingSTI < sti) {
      difference/=diffusion_momentum;
      if (difference < 1)       difference=1;
      addStimulus(a,(short)-difference);
      totalSurplus+=difference;
    }
 else     if (avgSurroundingSTI > sti) {
      difference=(short)(avgSurroundingSTI - sti);
      difference/=diffusion_momentum;
      if (difference < 1)       difference=1;
      difference=(short)Math.min(difference,totalSurplus);
      if (totalSurplus >= difference) {
        addStimulus(a,(short)difference);
        totalSurplus-=difference;
      }
    }
  }
}",0.9689298043728424
39705,"public void testForget(){
  final int numVertices=500;
  final int numEdges=2000;
  final int targetVertices=numVertices / 2;
  final int targetEdges=numEdges / 2;
  OCMind m=new OCMind();
  printMemory(""String_Node_Str"");
  new RandomGraphGenerator(m,numVertices,numEdges);
  assertEquals(m.getVertexCount(),numVertices);
  assertEquals(m.getEdgeCount(),numEdges);
  printMemory(""String_Node_Str"");
  m.cycle();
  RandomStimulation rs=new RandomStimulation(0,(short)0,numVertices * 10){
    @Override public short getBoost(){
      return (short)RandomNumber.getInt(0,127);
    }
  }
;
  m.addAgent(rs);
  m.cycle();
  m.cycle();
  printGraphSize(m);
  Forget f=new Forget(0,targetVertices,targetEdges){
    @Override public void run(    OCMind mind){
      super.run(mind);
      System.out.println(""String_Node_Str"" + mind.getVertexCount() + ""String_Node_Str""+ mind.getEdgeCount());
      System.out.println(mind.attention.size() + ""String_Node_Str"" + IteratorUtils.toList(mind.iterateAtomsByIncreasingSTI()).size()+ ""String_Node_Str""+ mind.getAtoms().size());
    }
  }
;
  m.addAgent(f);
  int cyclesToFinish=0;
  while ((targetVertices < m.getVertexCount()) || (targetEdges < m.getEdgeCount())) {
    m.cycle();
    cyclesToFinish++;
  }
  System.out.println(""String_Node_Str"" + cyclesToFinish + ""String_Node_Str"");
  printGraphSize(m);
}","public void testForget(){
  final int numVertices=1500;
  final int numEdges=3000;
  final int targetVertices=numVertices / 2;
  final int targetEdges=numEdges / 2;
  OCMind m=new OCMind();
  printMemory(""String_Node_Str"");
  new RandomGraphGenerator(m,numVertices,numEdges);
  assertEquals(m.getVertexCount(),numVertices);
  assertEquals(m.getEdgeCount(),numEdges);
  printMemory(""String_Node_Str"");
  m.cycle();
  RandomStimulation rs=new RandomStimulation(0,(short)0,numVertices * 100){
    @Override public short getBoost(){
      return (short)RandomNumber.getInt(0,127);
    }
  }
;
  m.addAgent(rs);
  m.cycle();
  m.cycle();
  printGraphSize(m);
  Forget f=new Forget(0,targetVertices,targetEdges);
  m.addAgent(f);
  int cyclesToFinish=0;
  while ((targetVertices < m.getVertexCount()) || (targetEdges < m.getEdgeCount())) {
    m.cycle();
    System.out.println(""String_Node_Str"" + m.getVertexCount() + ""String_Node_Str""+ m.getEdgeCount());
    System.out.println(""String_Node_Str"" + IteratorUtils.toList(m.iterateAtomsByDecreasingSTI()).size() + ""String_Node_Str""+ IteratorUtils.toList(m.iterateAtoms()).size());
    cyclesToFinish++;
  }
  System.out.println(""String_Node_Str"" + cyclesToFinish + ""String_Node_Str"");
  printGraphSize(m);
}",0.7494217424826523
39706,"@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  this.calculateBC(g);
  double[] cb=new double[cbs.length];
  for (int i=0; i < cbs.length; i++) {
    cb[i]=(double)cbs[i] / (double)this.spSum;
  }
  double[][] binned=gtna.util.Statistics.binnedDistribution(cb,0d,1d,100);
  betweennessCentrality=new NodeValueList(""String_Node_Str"",cbs);
  binnedBetwennessCentrality=new Distribution(""String_Node_Str"",binned);
  this.nodes=g.getNodes().length;
  this.edges=g.getEdges().size();
  this.bcMax=getMax(cbs);
  this.bcMin=getMin(cbs);
  this.bcAvg=getAvg(cbs);
  this.bcMed=getMed(cbs);
}","@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  this.calculateBC(g);
  double[][] binned=new double[][]{{}};
  if (this.spSum != 0) {
    double[] cb=new double[cbs.length];
    for (int i=0; i < cbs.length; i++) {
      cb[i]=(double)cbs[i] / (double)this.spSum;
    }
    binned=gtna.util.Statistics.binnedDistribution(cb,0d,1d,100);
  }
  betweennessCentrality=new NodeValueList(""String_Node_Str"",cbs);
  binnedBetwennessCentrality=new Distribution(""String_Node_Str"",binned);
  this.nodes=g.getNodes().length;
  this.edges=g.getEdges().size();
  this.bcMax=getMax(cbs);
  this.bcMin=getMin(cbs);
  this.bcAvg=getAvg(cbs);
  this.bcMed=getMed(cbs);
}",0.9078341013824884
39707,"private void computeTrustDistributions(Graph g){
  int[] trustedNodes=new int[sampleSize];
  int[] edgesInSubtree=new int[sampleSize];
  int maxTrustedNodes=0;
  int maxEdges=0;
  for (int i=0; i < sampleSize; i++) {
    Node n=getRandomNode(g);
    prepareNode(n);
    trustedNodes[i]=getNoOfTrustedNodes(n);
    edgesInSubtree[i]=getNoOfEdgesInSubtree(n);
    if (trustedNodes[i] > maxTrustedNodes)     maxTrustedNodes=trustedNodes[i];
    if (edgesInSubtree[i] > maxEdges)     maxEdges=edgesInSubtree[i];
  }
  double trustedDist[]=new double[maxTrustedNodes + 1];
  for (  int c : trustedNodes)   trustedDist[c]++;
  for (int i=0; i < trustedDist.length; i++)   trustedDist[i]/=sampleSize;
  double subtreeEdgesDist[]=new double[maxEdges + 1];
  for (  int c : edgesInSubtree)   subtreeEdgesDist[c]++;
  for (int i=0; i < subtreeEdgesDist.length; i++)   subtreeEdgesDist[i]/=sampleSize;
  trustedNodesDistribution=new Distribution(""String_Node_Str"",trustedDist);
  edgesInSubtreeDistribution=new Distribution(""String_Node_Str"",subtreeEdgesDist);
}","private void computeTrustDistributions(Graph g){
  int[] trustedNodes=new int[sampleSize];
  int[] edgesInSubtree=new int[sampleSize];
  int maxTrustedNodes=0;
  int maxEdges=0;
  double trustedDist[]=new double[maxTrustedNodes + 1];
  for (  int c : trustedNodes)   trustedDist[c]++;
  for (int i=0; i < trustedDist.length; i++)   trustedDist[i]/=sampleSize;
  double subtreeEdgesDist[]=new double[maxEdges + 1];
  for (  int c : edgesInSubtree)   subtreeEdgesDist[c]++;
  for (int i=0; i < subtreeEdgesDist.length; i++)   subtreeEdgesDist[i]/=sampleSize;
  trustedNodesDistribution=new Distribution(""String_Node_Str"",trustedDist);
  edgesInSubtreeDistribution=new Distribution(""String_Node_Str"",subtreeEdgesDist);
}",0.5882352941176471
39708,"@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  long t0=System.nanoTime();
  prepareGraph(g);
  long t1=System.nanoTime();
  runtimeGraphPreparation=t1 - t0;
  computeRuntimes(g);
}","@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  long t0=System.nanoTime();
  prepareGraph(g);
  long t1=System.nanoTime();
  runtimeGraphPreparation=t1 - t0;
  computeTrustDistributions(g);
  computeRuntimes(g);
}",0.9304347826086956
39709,"private void generateCommunitiySizes(){
  double[] sizeDist=generateSizeDistribution(min,max,ple);
  List<Integer> sizes=new ArrayList<Integer>();
  int largestC=(int)(lc * getNodes());
  if (largestC > 0)   sizes.add(largestC);
  int nodeSum=largestC;
  while (nodeSum < getNodes()) {
    int size=min;
    double z=rnd.nextDouble();
    while (z > sizeDist[size]) {
      size++;
    }
    if ((getNodes() - nodeSum) < size || (getNodes() - nodeSum - size) < min)     size=(getNodes() - nodeSum);
    sizes.add(size);
    nodeSum+=size;
  }
  communitySizes=new int[sizes.size()];
  firstNode=new int[sizes.size()];
  lastNode=new int[sizes.size()];
  for (int i=0; i < sizes.size(); i++) {
    if (i > 0)     firstNode[i]=firstNode[i - 1] + communitySizes[i - 1];
    communitySizes[i]=sizes.get(i);
    lastNode[i]=firstNode[i] + communitySizes[i] - 1;
    System.out.println(i + ""String_Node_Str"" + firstNode[i]+ ""String_Node_Str""+ lastNode[i]);
  }
}","private void generateCommunitiySizes(){
  double[] sizeDist=generateSizeDistribution(min,max,ple);
  List<Integer> sizes=new ArrayList<Integer>();
  int largestC=(int)(lc * getNodes());
  if (largestC > 0)   sizes.add(largestC);
  int nodeSum=largestC;
  while (nodeSum < getNodes()) {
    int size=min;
    double z=rnd.nextDouble();
    while (z > sizeDist[size]) {
      size++;
    }
    if ((getNodes() - nodeSum) < size || (getNodes() - nodeSum - size) < min)     size=(getNodes() - nodeSum);
    sizes.add(size);
    nodeSum+=size;
  }
  communitySizes=new int[sizes.size()];
  firstNode=new int[sizes.size()];
  lastNode=new int[sizes.size()];
  for (int i=0; i < sizes.size(); i++) {
    if (i > 0)     firstNode[i]=firstNode[i - 1] + communitySizes[i - 1];
    communitySizes[i]=sizes.get(i);
    lastNode[i]=firstNode[i] + communitySizes[i] - 1;
  }
}",0.9482948294829484
39710,"private int drawPANode(int a,int b){
  int sum1=0;
  for (int i=a; i <= b; i++)   sum1+=g.getNode(a).getDegree();
  int zz=rnd.nextInt(sum1);
  int node=a;
  int sum2=g.getNode(a).getDegree();
  while (zz > sum2) {
    node++;
    sum2=sum2 + g.getNode(a).getDegree();
  }
  return node;
}","private int drawPANode(int a,int b){
  int sum1=0;
  for (int i=a; i <= b; i++)   sum1+=g.getNode(i).getDegree();
  int zz=rnd.nextInt(sum1);
  int node=a;
  int sum2=g.getNode(a).getDegree();
  while (zz > sum2) {
    node++;
    sum2=sum2 + g.getNode(node).getDegree();
  }
  return node;
}",0.9879518072289156
39711,"@Override public Graph generate(){
  rnd=new Random(System.currentTimeMillis());
  generateCommunitiySizes();
  g=new Graph(this.getDescription());
  nodes=Node.init(this.getNodes(),g);
  edges=new Edges(nodes,m * getNodes() + 2 * z);
  for (int i=0; i < communitySizes.length; i++) {
    int size=communitySizes[i];
    Graph c=new WoTModelSingleCommunity(size,8,0,1,0.52,""String_Node_Str"",null).generate();
    for (    Node n : c.getNodes()) {
      int out[]=n.getOutgoingEdges();
      for (      int dst : out)       edges.add(n.getIndex() + firstNode[i],dst + firstNode[i]);
    }
  }
  edges.fill();
  g.setNodes(nodes);
  bridgeNode=new int[communitySizes.length];
  for (int i=0; i < communitySizes.length; i++) {
    bridgeNode[i]=drawPANode(firstNode[i],lastNode[i]);
  }
  int bridge=getNodeWithMaxDegree();
  for (int i=0; i < communitySizes.length; i++) {
    int c=0;
    int a=drawPANode(firstNode[i],lastNode[i]);
    int b=drawPANode(firstNode[c],lastNode[c]);
    edges.add(a,b);
    edges.add(b,a);
  }
  int addedEdges=0;
  while (addedEdges < z * communitySizes.length) {
    int c1=drawPACommunity(-1);
    int c2=drawPACommunity(c1);
    int n1=drawPANode(firstNode[c1],lastNode[c1]);
    int n2=drawPANode(firstNode[c2],lastNode[c2]);
    if (!edges.contains(n1,n2) && !edges.contains(n2,n1)) {
      edges.add(n1,n2);
      edges.add(n2,n1);
      addedEdges++;
    }
  }
  edges.fill();
  g.setNodes(nodes);
  return g;
}","@Override public Graph generate(){
  rnd=new Random(System.currentTimeMillis());
  generateCommunitiySizes();
  g=new Graph(this.getDescription());
  nodes=Node.init(this.getNodes(),g);
  edges=new Edges(nodes,m * getNodes() + 2 * z);
  for (int i=0; i < communitySizes.length; i++) {
    int size=communitySizes[i];
    Graph c=new WoTModelSingleCommunity(size,8,0,1,0.52,""String_Node_Str"",null).generate();
    for (    Node n : c.getNodes()) {
      int out[]=n.getOutgoingEdges();
      for (      int dst : out)       edges.add(n.getIndex() + firstNode[i],dst + firstNode[i]);
    }
  }
  edges.fill();
  g.setNodes(nodes);
  for (int i=0; i < communitySizes.length; i++) {
    int c=0;
    int a=drawPANode(firstNode[i],lastNode[i]);
    int b=drawPANode(firstNode[c],lastNode[c]);
    edges.add(a,b);
    edges.add(b,a);
  }
  int addedEdges=0;
  while (addedEdges < z * communitySizes.length) {
    int c1=drawPACommunity(-1);
    int c2=drawPACommunity(c1);
    int n1=drawPANode(firstNode[c1],lastNode[c1]);
    int n2=drawPANode(firstNode[c2],lastNode[c2]);
    if (!edges.contains(n1,n2) && !edges.contains(n2,n1)) {
      edges.add(n1,n2);
      edges.add(n2,n1);
      addedEdges++;
    }
  }
  edges.fill();
  g.setNodes(nodes);
  return g;
}",0.9290465631929048
39712,"/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  Set<Metric> metrics=new HashSet<Metric>();
  if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      printHelp();
      System.exit(0);
    }
  }
  for (  String s : args) {
    if (s.startsWith(""String_Node_Str"")) {
      sampling.add(s.substring(9));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      net.add(s.substring(8));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      scaledown.add(Double.parseDouble(s.substring(10)));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      size.add(Integer.parseInt(s.substring(5)));
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new DegreeDistribution());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ClusteringCoefficient());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ShortestPaths());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new BetweennessCentrality());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new PageRank());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new Assortativity());
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      suffix=s.substring(7);
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      String seq=s.substring(4);
      String[] se=seq.split(""String_Node_Str"");
      startIndex.add(Integer.parseInt(se[0]));
      endIndex.add(Integer.parseInt(se[1]));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      targetdir=s.substring(7);
      File f=new File(targetdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      plotdir=s.substring(8);
      File f=new File(plotdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      if (s.equals(""String_Node_Str"")) {
        aggregate=true;
      }
 else {
        aggregate=false;
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      dirs.add(s.substring(8));
    }
 else {
      printHelp();
      System.exit(0);
    }
  }
  Collection<Network> rfc=new ArrayList<Network>();
  for (int i=0; i < dirs.size(); i++) {
    String d=dirs.get(i);
    name=net.get(i) + ""String_Node_Str"" + sampling.get(i)+ ""String_Node_Str""+ size.get(i)+ ""String_Node_Str""+ scaledown.get(i);
    ReadableFolder rf=new ReadableFolder(name,""String_Node_Str"",d,suffix,null);
    DescriptionWrapper dwrf=new DescriptionWrapper(rf,name);
    rfc.add(dwrf);
  }
  Network[] rfa=rfc.toArray(new Network[0]);
  if (!aggregate) {
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + sampling.get(i)+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
  }
 else {
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + sampling.get(i)+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Plotting.single(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
    Plotting.multi(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
  }
}","/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  Set<Metric> metrics=new HashSet<Metric>();
  if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      printHelp();
      System.exit(0);
    }
  }
  for (  String s : args) {
    if (s.startsWith(""String_Node_Str"")) {
      sampling.add(s.substring(9));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      net.add(s.substring(8));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      scaledown.add(Double.parseDouble(s.substring(10)));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      size.add(Integer.parseInt(s.substring(5)));
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new DegreeDistribution());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ClusteringCoefficient());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ShortestPaths());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new BetweennessCentrality());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new PageRank());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new Assortativity());
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      suffix=s.substring(7);
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      String seq=s.substring(4);
      String[] se=seq.split(""String_Node_Str"");
      startIndex.add(Integer.parseInt(se[0]));
      endIndex.add(Integer.parseInt(se[1]));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      targetdir=s.substring(7);
      File f=new File(targetdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      plotdir=s.substring(8);
      File f=new File(plotdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      if (s.equals(""String_Node_Str"")) {
        aggregate=true;
      }
 else {
        aggregate=false;
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      if (s.equals(""String_Node_Str"")) {
        skipping=""String_Node_Str"";
      }
 else {
        skipping=""String_Node_Str"";
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      dirs.add(s.substring(8));
    }
 else {
      printHelp();
      System.exit(0);
    }
  }
  Collection<Network> rfc=new ArrayList<Network>();
  for (int i=0; i < dirs.size(); i++) {
    String d=dirs.get(i);
    name=net.get(i) + ""String_Node_Str"" + sampling.get(i).trim()+ ""String_Node_Str""+ size.get(i)+ ""String_Node_Str""+ scaledown.get(i);
    ReadableFolder rf=new ReadableFolder(name,net.get(0),d,suffix,null);
    DescriptionWrapper dwrf=new DescriptionWrapper(rf,name);
    rfc.add(dwrf);
  }
  Network[] rfa=rfc.toArray(new Network[0]);
  if (!aggregate) {
    Config.overwrite(""String_Node_Str"",skipping);
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + ""String_Node_Str""+ sampling.get(i)+ ""String_Node_Str""+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
  }
 else {
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + ""String_Node_Str""+ sampling.get(i)+ ""String_Node_Str""+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Plotting.single(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
    Plotting.multi(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
  }
}",0.9609924847906476
39713,"/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  for (  String s : args) {
    matchArgument(s);
  }
  srcdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str"";
  File f=new File(srcdir);
  if (!f.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + srcdir + ""String_Node_Str"");
  }
  targetdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str""+ scaledown+ ""String_Node_Str"";
  f=new File(targetdir);
  if (!f.isDirectory()) {
    f.mkdirs();
  }
  System.out.println(""String_Node_Str"" + srcdir);
  System.out.println(""String_Node_Str"" + targetdir);
  if (!initialized()) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  Transformation[] samplingTransformation=new Transformation[2];
  samplingTransformation[0]=instantiateSamplingTransformation(samplingAlgorithm,scaledown,dim,rev,seed);
  if (subgraph != null) {
    samplingTransformation[1]=subgraph;
  }
  ReadableFolder rf=new ReadableFolder(net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),srcdir,suffix,null);
  if (startIndex > 0) {
    for (int i=0; i < startIndex; i++) {
      rf.incIndex();
    }
  }
  Graph g;
  for (int j=startIndex; j <= endIndex; j++) {
    g=rf.generate();
    if (g != null) {
      for (int si=samplingStartIndex; si < samplingEndIndex; si++) {
        Graph gi=samplingTransformation[0].transform(g);
        ((ExtractSampledSubgraph)samplingTransformation[1]).setIndex(si - samplingStartIndex);
        gi=samplingTransformation[1].transform(gi);
        writeGraphToFile(gi,targetdir + j + ""String_Node_Str"",net.name() + ""String_Node_Str"" + samplingAlgorithm.name()+ ""String_Node_Str""+ si);
        if (plotting)         plotGraph(gi,targetdir + j + ""String_Node_Str""+ ""String_Node_Str"",gi.toString() + ""String_Node_Str"" + si);
        gi=null;
      }
      writeOriginalGraphWithPropertiesToFile(g,targetdir + j + ""String_Node_Str"",g.toString());
      if (plotting)       plotGraph(g,targetdir + j + ""String_Node_Str"",g.toString());
    }
  }
}","/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  for (  String s : args) {
    matchArgument(s);
  }
  srcdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str"";
  File f=new File(srcdir);
  if (!f.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + srcdir + ""String_Node_Str"");
  }
  targetdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str""+ scaledown+ ""String_Node_Str""+ samplingAlgorithm+ ""String_Node_Str"";
  f=new File(targetdir);
  if (!f.isDirectory()) {
    f.mkdirs();
  }
  System.out.println(""String_Node_Str"" + srcdir);
  System.out.println(""String_Node_Str"" + targetdir);
  if (!initialized()) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  Transformation[] samplingTransformation=new Transformation[2];
  samplingTransformation[0]=instantiateSamplingTransformation(samplingAlgorithm,scaledown,dim,rev,seed);
  if (subgraph != null) {
    samplingTransformation[1]=subgraph;
  }
  ReadableFolder rf=new ReadableFolder(net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),srcdir,suffix,null);
  if (startIndex > 0) {
    for (int i=0; i < startIndex; i++) {
      rf.incIndex();
    }
  }
  Graph g;
  for (int j=startIndex; j <= endIndex; j++) {
    g=rf.generate();
    if (g != null) {
      for (int si=samplingStartIndex; si < samplingEndIndex; si++) {
        Graph gi=samplingTransformation[0].transform(g);
        ((ExtractSampledSubgraph)samplingTransformation[1]).setIndex(si - samplingStartIndex);
        gi=samplingTransformation[1].transform(gi);
        writeGraphToFile(gi,targetdir + j + ""String_Node_Str"",net.name() + ""String_Node_Str"" + samplingAlgorithm.name()+ ""String_Node_Str""+ si);
        if (plotting)         plotGraph(gi,targetdir + j + ""String_Node_Str""+ ""String_Node_Str"",gi.toString() + ""String_Node_Str"" + si);
        gi=null;
      }
      writeOriginalGraphWithPropertiesToFile(g,targetdir + j + ""String_Node_Str"",g.toString());
      if (plotting)       plotGraph(g,targetdir + j + ""String_Node_Str"",g.toString());
    }
  }
}",0.9913518434228492
39714,"/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  for (  String s : args) {
    matchArgument(s);
  }
  GraphReader gr=null;
  if (snap) {
    gr=new SnapGraphReader();
  }
 else   if (caida) {
    gr=new CaidaGraphReader();
  }
  File f=new File(path);
  List<File> lof=Arrays.asList(f.listFiles());
  ArrayList<File> alof=new ArrayList<File>();
  ArrayList<String> names=new ArrayList<String>();
  for (  File fi : lof) {
    if (fi.isFile() && !fi.isHidden()) {
      alof.add(fi);
      names.add(fi.getName());
    }
  }
  File[] arlof=alof.toArray(new File[0]);
  String[] gNames=names.toArray(new String[0]);
  for (int i=0; i < arlof.length; i++) {
    Graph g=gr.read(arlof[i].getAbsolutePath());
    writeGraphToFile(g,path + ""String_Node_Str"" + gNames[i]);
    g=null;
  }
}","/** 
 * @param args
 * @throws ParseException
 * @throws IOException 
 */
public static void main(String[] args) throws ParseException, IOException {
  for (  String s : args) {
    matchArgument(s);
  }
  GraphReader gr=null;
  System.out.print(""String_Node_Str"");
  if (snap) {
    System.out.println(""String_Node_Str"");
    gr=new SnapGraphReader();
  }
 else   if (caida) {
    System.out.println(""String_Node_Str"");
    gr=new CaidaGraphReader();
  }
  System.out.println(""String_Node_Str"" + gr.hashCode());
  File f=new File(path);
  List<File> lof=Arrays.asList(f.listFiles());
  ArrayList<File> alof=new ArrayList<File>();
  ArrayList<String> names=new ArrayList<String>();
  for (  File fi : lof) {
    if (fi.isFile() && !fi.isHidden()) {
      System.out.println(""String_Node_Str"" + fi.getAbsolutePath());
      System.out.println(""String_Node_Str"" + fi.getName());
      alof.add(fi);
      names.add(fi.getName());
    }
  }
  for (int i=0; i < alof.size(); i++) {
    String p=alof.get(i).getAbsolutePath();
    System.out.println(""String_Node_Str"" + p);
    Graph g=gr.read(p);
    writeGraphToFile(g,path + ""String_Node_Str"" + names.get(i));
    g=null;
  }
}",0.6271604938271605
39715,"public static Network[] instantiateNetworkModels(){
  Network nw1=new ErdosRenyi(100,3,false,null);
  Network nw2=new BarabasiAlbert(500,2,null);
  Network nw3=new WattsStrogatz(500,6,0.2,null);
  Network nw4=new CondonAndKarp(500,3,0.05,0.0005,null);
  Network nw5=new Regular(100,2,true,false,null);
  Network[] n=new Network[]{nw4};
  return n;
}","public static Network[] instantiateNetworkModels(){
  Network nw1=new ErdosRenyi(100,3,false,null);
  Network nw2=new BarabasiAlbert(500,2,null);
  Network nw3=new WattsStrogatz(500,6,0.2,null);
  Network nw4=new CondonAndKarp(500,3,0.05,0.0005,null);
  Network nw5=new Regular(100,2,true,false,null);
  Network[] n=new Network[]{nw1};
  return n;
}",0.997134670487106
39716,"private static Transformation[] instantiateSamplingTransformation(double scaledown,int dimension,boolean revisiting,Long randomSeed){
  Transformation sampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.SNOWBALLSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling2=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling3=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMJUMP,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling4=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMWALK,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling5=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL_DEGREECORRECTION,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling6=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling7=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.BFS,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling8=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RESPONDENTDRIVENSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling9=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.FORESTFIRE,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling10=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.DFS,scaledown,revisiting,dimension,randomSeed);
  Transformation subgraphing=new ColorSampledSubgraph();
  Transformation[] t1=new Transformation[]{sampling10,subgraphing};
  return t1;
}","private static Transformation[] instantiateSamplingTransformation(double scaledown,int dimension,boolean revisiting,Long randomSeed){
  Transformation sampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.SNOWBALLSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling2=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling3=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMJUMP,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling4=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMWALK,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling5=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL_DEGREECORRECTION,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling6=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling7=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.BFS,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling8=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RESPONDENTDRIVENSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling9=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.FORESTFIRE,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling10=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.DFS,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling11=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMWALK_METROPOLIZED,scaledown,revisiting,dimension,randomSeed);
  Transformation subgraphing=new ColorSampledSubgraph();
  Transformation[] t1=new Transformation[]{sampling11,subgraphing};
  return t1;
}",0.9562517640417724
39717,"@Override protected Node selectNextNode(Collection<Node> candidates,Node current){
  Random r=new Random();
  int next=r.nextInt(candidates.size());
  next=next % candidates.size();
  Node nextStepCandidate=candidates.toArray(new Node[0])[next];
  int nscDegree=nextStepCandidate.getDegree();
  int cDegree=current.getDegree();
  double d=(double)cDegree / (double)nscDegree;
  d=Math.min(d,1);
  double p=r.nextDouble();
  if (d < p) {
    return nextStepCandidate;
  }
 else {
    return current;
  }
}","@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=this.getRNG();
  Collection<Node> c=this.getCurrentNodes();
  if (c.size() > 0) {
    Node current=c.toArray(new Node[0])[0];
    int next=r.nextInt(candidates.size());
    next=next % candidates.size();
    Node nextStepCandidate=candidates.toArray(new Node[0])[next];
    int nscDegree=nextStepCandidate.getDegree();
    int cDegree=current.getDegree();
    double d=(double)cDegree / (double)nscDegree;
    d=Math.min(d,1);
    double p=r.nextDouble();
    if (d < p) {
      return nextStepCandidate;
    }
 else {
      System.err.println(""String_Node_Str"" + cDegree + ""String_Node_Str""+ nscDegree);
      return current;
    }
  }
 else {
    c=this.getRestartNodes();
    return c.toArray(new Node[0])[0];
  }
}",0.4497313891020721
39718,"/** 
 * returns the list of neighbors as candidates
 * @param g Graph
 * @param n Current node
 * @return List of candidates
 */
@Override public Collection<Node> resolveCandidates(Graph g,Node n){
  int[] nids=n.getOutgoingEdges();
  ArrayList<Node> nn=new ArrayList<Node>();
  for (  int i : nids) {
    nn.add(g.getNode(i));
  }
  return nn;
}","public Collection<Node> resolveCandidates(Graph g,Node n){
  int[] nids=n.getOutgoingEdges();
  ArrayList<Node> nn=new ArrayList<Node>();
  for (  int i : nids) {
    nn.add(g.getNode(i));
  }
  return nn;
}",0.7486437613019892
39719,"private boolean addRandomEdges(Node[] nodes,Edges edges,int toAdd){
  ArrayList<Node> listDst=new ArrayList<Node>();
  ArrayList<Node> listSrc=new ArrayList<Node>();
  for (int i=0; i < DEGREE; i++) {
    listDst.addAll(Arrays.asList(nodes));
    listSrc.addAll(Arrays.asList(nodes));
  }
  Random rand=new Random();
  int retries=30;
  while (!listSrc.isEmpty() && !listDst.isEmpty() && retries > 0) {
    int srcId=rand.nextInt();
    srcId=(srcId < 0) ? srcId * (-1) : srcId;
    srcId=srcId % listSrc.size();
    Node srcN=listSrc.get(srcId);
    int src=srcN.getIndex();
    int dstId=rand.nextInt();
    dstId=(dstId < 0) ? dstId * (-1) : dstId;
    dstId=dstId % listDst.size();
    Node dstN=listDst.get(dstId);
    int dst=dstN.getIndex();
    if (src == dst) {
      System.err.println(""String_Node_Str"" + src + ""String_Node_Str""+ dst);
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
      retries--;
      continue;
    }
    if (this.BIDIRECTIONAL) {
      edges.add(src,dst);
      edges.add(dst,src);
      listSrc.remove(srcN);
      listDst.remove(srcN);
      listDst.remove(dstN);
      listSrc.remove(dstN);
    }
 else {
      edges.add(src,dst);
      listSrc.remove(srcN);
      listDst.remove(dstN);
    }
    retries=30;
  }
  if (edges.size() != toAdd) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + edges.size() + ""String_Node_Str""+ toAdd+ ""String_Node_Str"");
    edges=null;
    edges=new Edges(nodes,toAdd);
    return addRandomEdges(nodes,edges,toAdd);
  }
  return true;
}","private boolean addRandomEdges(Node[] nodes,Edges edges,int toAdd){
  ArrayList<Node> listDst=new ArrayList<Node>();
  ArrayList<Node> listSrc=new ArrayList<Node>();
  for (int i=0; i < DEGREE; i++) {
    listDst.addAll(Arrays.asList(nodes));
    listSrc.addAll(Arrays.asList(nodes));
  }
  Random rand=new Random();
  int retries=30;
  while (!listSrc.isEmpty() && !listDst.isEmpty() && retries > 0) {
    int srcId=rand.nextInt();
    srcId=(srcId < 0) ? srcId * (-1) : srcId;
    srcId=srcId % listSrc.size();
    Node srcN=listSrc.get(srcId);
    int src=srcN.getIndex();
    int dstId=rand.nextInt();
    dstId=(dstId < 0) ? dstId * (-1) : dstId;
    dstId=dstId % listDst.size();
    Node dstN=listDst.get(dstId);
    int dst=dstN.getIndex();
    while ((src == dst || edges.contains(src,dst)) && retries > 0) {
      System.err.println(""String_Node_Str"" + src + ""String_Node_Str""+ dst);
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
      dstId=(dstId + 1) % listDst.size();
      dstN=listDst.get(dstId);
      dst=dstN.getIndex();
      retries--;
      continue;
    }
    if (retries == 0) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + edges.size() + ""String_Node_Str""+ toAdd+ ""String_Node_Str"");
      edges=null;
      edges=new Edges(nodes,toAdd);
      return addRandomEdges(nodes,edges,toAdd);
    }
    if (this.BIDIRECTIONAL) {
      edges.add(src,dst);
      edges.add(dst,src);
      listSrc.remove(srcN);
      listDst.remove(srcN);
      listDst.remove(dstN);
      listSrc.remove(dstN);
    }
 else {
      edges.add(src,dst);
      listSrc.remove(srcN);
      listDst.remove(dstN);
    }
    retries=30;
  }
  return true;
}",0.7896919431279621
39720,"/** 
 * @param args
 */
public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  boolean get=false;
  int times=1;
  double scaledown=0.5;
  int dimension=1;
  boolean revisiting=false;
  Transformation uniformSampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension);
  Transformation[] t=new Transformation[]{uniformSampling};
  Network nw1=new ErdosRenyi(10,3,false,t);
  Network[] n=new Network[]{nw1};
  Metric[] metrics=new Metric[]{new DegreeDistribution(),new ShortestPaths(),new ClusteringCoefficient()};
  Series[] s=get ? Series.get(n,metrics) : Series.generate(n,metrics,times);
  Plotting.single(s,metrics,""String_Node_Str"");
  Plotting.multi(s,metrics,""String_Node_Str"");
  for (  Network i : n) {
    System.out.println(""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes()+ ""String_Node_Str"");
    plot(i,""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes(),times);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  boolean get=false;
  int times=1;
  double scaledown=0.1;
  int dimension=1;
  boolean revisiting=false;
  Transformation uniformSampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension);
  Transformation[] t=new Transformation[]{uniformSampling};
  Network nw1=new ErdosRenyi(10000,12,false,t);
  Network[] n=new Network[]{nw1};
  Metric[] metrics=new Metric[]{new DegreeDistribution(),new ShortestPaths(),new ClusteringCoefficient()};
  Series[] s=get ? Series.get(n,metrics) : Series.generate(n,metrics,times);
  Plotting.single(s,metrics,""String_Node_Str"");
  Plotting.multi(s,metrics,""String_Node_Str"");
  for (  Network i : n) {
    System.out.println(""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes()+ ""String_Node_Str"");
    plot(i,""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes(),times);
  }
}",0.995049504950495
39721,"/** 
 * Move walker by one step
 */
public void takeAStep(Graph g,NetworkSample ns){
  Map<Node,Collection<Node>> cc=this.getCurrentCandidates(g);
  Set<Node> c=cc.keySet();
  for (  Node n : c) {
    Collection<Node> candidates=controller.filterCandidates(cc.get(n),ns);
    Node next=this.selectNextNode(candidates);
    currents.remove(n);
    currents.add(next);
  }
}","/** 
 * Move walker by one step
 */
public void takeAStep(Graph g,NetworkSample ns){
}",0.3755458515283842
39722,"/** 
 * Get new nodes for restarting the walk if the walker blocks
 * @return collection of new start nodes
 */
protected Collection<Node> getRestartNodes(){
  return this.controller.getRestartNodes();
}","/** 
 * @return
 */
private Collection<Node> getRestartNodes(){
  return this.controller.getRestartNodes();
}",0.6794871794871795
39723,"/** 
 * This default implementation returns the list of neighbors as candidates
 * @param g Graph
 * @param n Current node
 * @return List of candidates
 */
private Collection<Node> resolveCandidates(Graph g,Node n){
  int[] nids=n.getOutgoingEdges();
  ArrayList<Node> nn=new ArrayList<Node>();
  for (  int i : nids) {
    nn.add(g.getNode(i));
  }
  return nn;
}","/** 
 * This default implementation returns the list of neighbors as candidates
 * @param g Graph
 * @param n Current node
 * @return List of candidates
 */
private Collection<Node> resolveCandidates(Graph g,Node n){
}",0.7478559176672385
39724,"public AWalkerController(String walkercontroller,Collection<AWalker> w,CandidateFilter cf){
  super(""String_Node_Str"",walkercontroller);
  walkers=w;
  candidateFilter=cf;
}","public AWalkerController(String walkercontroller,Collection<AWalker> w,CandidateFilter cf,StartNodeSelector sns){
  super(""String_Node_Str"",walkercontroller);
  this.walkers=w;
  this.candidateFilter=cf;
  this.startNodeSelector=sns;
}",0.8480392156862745
39725,"/** 
 * get new start nodes for restarting a walker instance
 * @return collection of new start nodes
 */
public Collection<Node> getRestartNodes(){
  Node[] rn;
  Collection<Node> frn, c;
  do {
    rn=samplingController.getStartNodeSelector().selectStartNodes(this.getGraph(),1,samplingController.getRng());
    c=Arrays.asList(rn);
    frn=filterCandidates(c);
  }
 while (frn.size() == 0);
  return frn;
}","/** 
 * @return
 */
public Collection<Node> getRestartNodes(){
  Node[] rn;
  Collection<Node> frn, c;
  do {
    rn=startNodeSelector.selectStartNodes(graph,1);
    c=Arrays.asList(rn);
    frn=filterCandidates(c,currentSample);
  }
 while (frn.size() == 0);
  return frn;
}",0.4970760233918128
39726,"/** 
 * Perform one step of walking with all active walker. The number of active walkers depends on the used walking-strategy
 */
public void walkOneStep(Graph g,NetworkSample ns){
  if (!isInitialized()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  Collection<AWalker> activeWalkers=this.getActiveWalkers();
  for (  AWalker w : activeWalkers) {
    w.takeAStep(g,ns);
  }
}","/** 
 * Perform one step of walking with all active walker. The number of active walkers depends on the used walking-strategy
 */
public void walkOneStep(Graph g,NetworkSample ns){
  this.setCurrentSample(ns);
  if (!isInitialized()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Collection<AWalker> activeWalkers=this.getActiveWalkers();
  for (  AWalker w : activeWalkers) {
    w.takeAStep(g,ns);
  }
}",0.9194865810968494
39727,"public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf);
aw.setWalkerController(awc);
as.setWalkerController(awc);
sns=new StartNodeSelector(""String_Node_Str"");
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}","public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
sns=new StartNodeSelector(""String_Node_Str"");
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf,sns);
aw.setWalkerController(awc);
as.setWalkerController(awc);
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}",0.7575030012004802
39728,"public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(g,networkSample,targetSampleSize);
  sampleOneStep(g,maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    walkerController.walkOneStep(g,networkSample);
    sampleOneStep(g,maxNodesInThisRound,round);
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}","public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(g,networkSample,targetSampleSize);
  walkerController.setGraph(g);
  sampleOneStep(g,maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    System.out.println(""String_Node_Str"" + round);
    walkerController.walkOneStep(g,networkSample);
    System.out.println(""String_Node_Str"");
    sampleOneStep(g,maxNodesInThisRound,round);
    System.out.println(""String_Node_Str"");
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}",0.8933753943217666
39729,"@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt(candidates.size() - 1);
  return candidates.toArray(new Node[0])[next];
}","@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt(candidates.size());
  next=next % candidates.size();
  return candidates.toArray(new Node[0])[next];
}",0.9090909090909092
39730,"/** 
 * @param key
 * @param value
 * @param w
 * @param cf
 */
public UniformSamplingWalkerController(Collection<AWalker> w,CandidateFilter cf){
  super(w.size() + ""String_Node_Str"" + w.toArray(new AWalker[0])[0].getValue(),w,cf);
  this.walkers=w;
  this.cf=cf;
}","/** 
 * @param key
 * @param value
 * @param w
 * @param cf
 */
public UniformSamplingWalkerController(Collection<AWalker> w,CandidateFilter cf,StartNodeSelector sns){
  super(w.size() + ""String_Node_Str"" + w.toArray(new AWalker[0])[0].getValue(),w,cf,sns);
  this.walkers=w;
  this.cf=cf;
}",0.9532374100719424
39731,"public Collection<Node> sampleOneStepNodes(int maxNodes){
  Collection<AWalker> walkers=walkerController.getActiveWalkers();
  Collection<Node> sampled=new LinkedList<Node>();
  for (  AWalker w : walkers) {
    Map<Node,Collection<Node>> wcc=w.getCurrentCandidates();
    Map<Node,Collection<Node>> fc=walkerController.filterCandidates(wcc);
    sampled.addAll(sampleNodes(fc));
  }
  return sampled;
}","public Collection<Node> sampleOneStepNodes(Graph g,NetworkSample ns,int maxNodes){
}",0.2422997946611909
39732,"/** 
 * Initializes the ASampler implementation This default implementation calls sampleOneStepNodes to sample the startnode(s)!
 * @param targetSampleSize  max nodes sampled in this round 
 * @param walkerController 
 */
public Collection<Node> initialize(AWalkerController walkerController,int maxNodes){
  this.walkerController=walkerController;
  return sampleOneStepNodes(maxNodes);
}","/** 
 * Initializes the ASampler implementation This default implementation calls sampleOneStepNodes to sample the startnode(s)!
 * @param targetSampleSize  max nodes sampled in this round 
 * @param walkerController 
 */
public Collection<Node> initialize(Graph g,NetworkSample ns,int maxNodes){
  return sampleOneStepNodes(g,ns,maxNodes);
}",0.8590971272229823
39733,"/** 
 * Set the used walker controller instance
 * @param awc
 */
public void setWalkerController(AWalkerController awc){
  this.walkerController=awc;
}","public void setWalkerController(AWalkerController awc){
  this.walkerController=awc;
}",0.7226890756302521
39734,"/** 
 * Returns the current neighbors of current nodes of the walker
 * @return Map: key: current node value: neighbors of the current node
 */
private Map<Node,Collection<Node>> getCurrentCandidates(Graph g){
  Map<Node,Collection<Node>> cn=new HashMap<Node,Collection<Node>>();
  for (  Node n : currents) {
    Collection<Node> nn=resolveCandidates(g,n);
    cn.put(n,nn);
  }
  return cn;
}","/** 
 * Returns the current neighbors of current nodes of the walker
 * @return Map: key: current node value: neighbors of the current node
 */
public Map<Node,Collection<Node>> getCurrentCandidates(Graph g){
  Map<Node,Collection<Node>> cn=new HashMap<Node,Collection<Node>>();
  for (  Node n : currents) {
    Collection<Node> nn=resolveCandidates(g,n);
    cn.put(n,nn);
  }
  return cn;
}",0.4066073697585768
39735,"/** 
 * @param key
 * @param value
 */
public NetworkSample(String key,String value){
  super(key,value);
  sampleNodeMapping=new HashMap<Integer,Integer>();
  revisitFrequency=new HashMap<Integer,List<Integer>>();
}","/** 
 * @param key
 * @param value
 */
public NetworkSample(){
  super(""String_Node_Str"",""String_Node_Str"");
  sampleNodeMapping=new HashMap<Integer,Integer>();
  revisitFrequency=new HashMap<Integer,List<Integer>>();
}",0.8
39736,"public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf);
aw.setWalkerController(awc);
sns=new StartNodeSelector(""String_Node_Str"");
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}","public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf);
aw.setWalkerController(awc);
as.setWalkerController(awc);
sns=new StartNodeSelector(""String_Node_Str"");
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}",0.9822412737293326
39737,"public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(walkerController,targetSampleSize);
  sampleOneStep(maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    walkerController.walkOneStep();
    sampleOneStep(maxNodesInThisRound,round);
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}","public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(g,networkSample,targetSampleSize);
  sampleOneStep(g,maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    walkerController.walkOneStep(g,networkSample);
    sampleOneStep(g,maxNodesInThisRound,round);
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}",0.9670958512160228
39738,"/** 
 * Sample eventually nodes in the specified round
 * @param maxNodesInThisRound number of maximal added nodes
 * @param round current round
 * @return true if at least one node is sampled, else false
 */
private boolean sampleOneStep(int maxNodesInThisRound,int round){
  Collection<Node> chosenNodes=sampler.sampleOneStepNodes(maxNodesInThisRound);
  if (chosenNodes.size() > 0)   return networkSample.addNodeToSample(chosenNodes,round);
  return false;
}","/** 
 * Sample eventually nodes in the specified round
 * @param maxNodesInThisRound number of maximal added nodes
 * @param round current round
 * @return true if at least one node is sampled, else false
 */
private boolean sampleOneStep(Graph g,int maxNodesInThisRound,int round){
  Collection<Node> chosenNodes=sampler.sampleOneStepNodes(g,networkSample,maxNodesInThisRound);
  if (chosenNodes.size() > 0)   return networkSample.addNodeToSample(chosenNodes,round);
  return false;
}",0.9746300211416492
39739,"/** 
 * Select start nodes from the original graph The default implementation choses dimension random nodes
 * @param g 			Graph
 * @param dimension		Number of chosen startnodes
 * @return				Array of chosen startnodes
 */
public Node[] selectStartNodes(Graph g,int dimension){
  Collection<Node> sn=new ArrayList<Node>();
  Random r=new Random();
  int gsize=g.getNodeCount();
  int nid;
  Node n;
  int i=0;
  while (sn.size() < dimension) {
    nid=r.nextInt() % gsize;
    n=g.getNode(nid);
    if (!sn.contains(n)) {
      sn.add(n);
    }
  }
  return sn.toArray(new Node[dimension]);
}","/** 
 * Select start nodes from the original graph The default implementation choses dimension random nodes
 * @param g 			Graph
 * @param dimension		Number of chosen startnodes
 * @return				Array of chosen startnodes
 */
public Node[] selectStartNodes(Graph g,int dimension){
  Collection<Node> sn=new ArrayList<Node>();
  Random r=new Random();
  int gsize=g.getNodeCount();
  int nid;
  Node n;
  int i=0;
  while (sn.size() < dimension) {
    nid=r.nextInt(gsize - 1);
    nid=nid % gsize;
    n=g.getNode(nid);
    if (!sn.contains(n)) {
      sn.add(n);
    }
  }
  return sn.toArray(new Node[0]);
}",0.9716193656093488
39740,"@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt() % candidates.size();
  return candidates.toArray(new Node[0])[next];
}","@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt(candidates.size() - 1);
  return candidates.toArray(new Node[0])[next];
}",0.9761273209549072
39741,"/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  for (  String s : args) {
    matchArgument(s);
  }
  GraphReader gr=null;
  if (snap) {
    gr=new SnapGraphReader();
  }
 else   if (caida) {
    gr=new CaidaGraphReader();
  }
  File f=new File(path);
  List<File> lof=Arrays.asList(f.listFiles());
  ArrayList<File> alof=new ArrayList<File>();
  ArrayList<String> names=new ArrayList<String>();
  for (  File fi : lof) {
    if (fi.isFile() && !fi.isHidden()) {
      alof.add(fi);
      names.add(fi.getName());
    }
  }
  File[] arlof=alof.toArray(new File[0]);
  String[] gNames=names.toArray(new String[0]);
  for (int i=0; i < arlof.length; i++) {
    Graph g=gr.read(arlof[i].getAbsolutePath());
    writeGraphToFile(g,path + ""String_Node_Str"" + gNames[i]);
    g=null;
  }
}","/** 
 * @param args
 * @throws ParseException
 * @throws IOException 
 */
public static void main(String[] args) throws ParseException, IOException {
  for (  String s : args) {
    matchArgument(s);
  }
  GraphReader gr=null;
  System.out.print(""String_Node_Str"");
  if (snap) {
    System.out.println(""String_Node_Str"");
    gr=new SnapGraphReader();
  }
 else   if (caida) {
    System.out.println(""String_Node_Str"");
    gr=new CaidaGraphReader();
  }
  System.out.println(""String_Node_Str"" + gr.hashCode());
  File f=new File(path);
  List<File> lof=Arrays.asList(f.listFiles());
  ArrayList<File> alof=new ArrayList<File>();
  ArrayList<String> names=new ArrayList<String>();
  for (  File fi : lof) {
    if (fi.isFile() && !fi.isHidden()) {
      System.out.println(""String_Node_Str"" + fi.getAbsolutePath());
      System.out.println(""String_Node_Str"" + fi.getName());
      alof.add(fi);
      names.add(fi.getName());
    }
  }
  for (int i=0; i < alof.size(); i++) {
    String p=alof.get(i).getAbsolutePath();
    System.out.println(""String_Node_Str"" + p);
    Graph g=gr.read(p);
    writeGraphToFile(g,path + ""String_Node_Str"" + names.get(i));
    g=null;
  }
}",0.6271604938271605
39742,"/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  Set<Metric> metrics=new HashSet<Metric>();
  if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      printHelp();
      System.exit(0);
    }
  }
  for (  String s : args) {
    if (s.startsWith(""String_Node_Str"")) {
      sampling.add(s.substring(9));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      net.add(s.substring(8));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      scaledown.add(Double.parseDouble(s.substring(10)));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      size.add(Integer.parseInt(s.substring(5)));
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new DegreeDistribution());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ClusteringCoefficient());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ShortestPaths());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new BetweennessCentrality());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new PageRank());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new Assortativity());
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      suffix=s.substring(7);
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      String seq=s.substring(4);
      String[] se=seq.split(""String_Node_Str"");
      startIndex.add(Integer.parseInt(se[0]));
      endIndex.add(Integer.parseInt(se[1]));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      targetdir=s.substring(7);
      File f=new File(targetdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      plotdir=s.substring(8);
      File f=new File(plotdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      if (s.equals(""String_Node_Str"")) {
        aggregate=true;
      }
 else {
        aggregate=false;
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      dirs.add(s.substring(8));
    }
 else {
      printHelp();
      System.exit(0);
    }
  }
  Collection<Network> rfc=new ArrayList<Network>();
  for (int i=0; i < dirs.size(); i++) {
    String d=dirs.get(i);
    name=net.get(i) + ""String_Node_Str"" + sampling.get(i)+ ""String_Node_Str""+ size.get(i)+ ""String_Node_Str""+ scaledown.get(i);
    ReadableFolder rf=new ReadableFolder(name,""String_Node_Str"",d,suffix,null);
    DescriptionWrapper dwrf=new DescriptionWrapper(rf,name);
    rfc.add(dwrf);
  }
  Network[] rfa=rfc.toArray(new Network[0]);
  if (!aggregate) {
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + sampling.get(i)+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
  }
 else {
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + sampling.get(i)+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Plotting.single(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
    Plotting.multi(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
  }
}","/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  Set<Metric> metrics=new HashSet<Metric>();
  if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      printHelp();
      System.exit(0);
    }
  }
  for (  String s : args) {
    if (s.startsWith(""String_Node_Str"")) {
      sampling.add(s.substring(9));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      net.add(s.substring(8));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      scaledown.add(Double.parseDouble(s.substring(10)));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      size.add(Integer.parseInt(s.substring(5)));
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new DegreeDistribution());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ClusteringCoefficient());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new ShortestPaths());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new BetweennessCentrality());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new PageRank());
    }
 else     if (s.equalsIgnoreCase(""String_Node_Str"")) {
      metrics.add(new Assortativity());
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      suffix=s.substring(7);
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      String seq=s.substring(4);
      String[] se=seq.split(""String_Node_Str"");
      startIndex.add(Integer.parseInt(se[0]));
      endIndex.add(Integer.parseInt(se[1]));
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      targetdir=s.substring(7);
      File f=new File(targetdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      plotdir=s.substring(8);
      File f=new File(plotdir);
      if (!f.isDirectory()) {
        f.mkdir();
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      if (s.equals(""String_Node_Str"")) {
        aggregate=true;
      }
 else {
        aggregate=false;
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      if (s.equals(""String_Node_Str"")) {
        skipping=""String_Node_Str"";
      }
 else {
        skipping=""String_Node_Str"";
      }
    }
 else     if (s.startsWith(""String_Node_Str"")) {
      dirs.add(s.substring(8));
    }
 else {
      printHelp();
      System.exit(0);
    }
  }
  Collection<Network> rfc=new ArrayList<Network>();
  for (int i=0; i < dirs.size(); i++) {
    String d=dirs.get(i);
    name=net.get(i) + ""String_Node_Str"" + sampling.get(i).trim()+ ""String_Node_Str""+ size.get(i)+ ""String_Node_Str""+ scaledown.get(i);
    ReadableFolder rf=new ReadableFolder(name,net.get(0),d,suffix,null);
    DescriptionWrapper dwrf=new DescriptionWrapper(rf,name);
    rfc.add(dwrf);
  }
  Network[] rfa=rfc.toArray(new Network[0]);
  if (!aggregate) {
    Config.overwrite(""String_Node_Str"",skipping);
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + ""String_Node_Str""+ sampling.get(i)+ ""String_Node_Str""+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
  }
 else {
    Config.overwrite(""String_Node_Str"",""String_Node_Str"");
    Series[] series=new Series[rfa.length];
    for (int i=0; i < rfa.length; i++) {
      Config.overwrite(""String_Node_Str"",targetdir + net.get(i) + ""String_Node_Str""+ sampling.get(i)+ ""String_Node_Str""+ rfa[i].getNodes()+ ""String_Node_Str"");
      series[i]=Series.generate(rfa[i],metrics.toArray(new Metric[0]),startIndex.get(i),endIndex.get(i));
    }
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Config.overwrite(""String_Node_Str"",plotdir + ""String_Node_Str"");
    Plotting.single(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
    Plotting.multi(series,metrics.toArray(new Metric[0]),""String_Node_Str"",Type.confidence1,Style.candlesticks);
  }
}",0.9609924847906476
39743,"/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  for (  String s : args) {
    matchArgument(s);
  }
  srcdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str"";
  File f=new File(srcdir);
  if (!f.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + srcdir + ""String_Node_Str"");
  }
  targetdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str""+ scaledown+ ""String_Node_Str"";
  f=new File(targetdir);
  if (!f.isDirectory()) {
    f.mkdirs();
  }
  System.out.println(""String_Node_Str"" + srcdir);
  System.out.println(""String_Node_Str"" + targetdir);
  if (!initialized()) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  Transformation[] samplingTransformation=new Transformation[2];
  samplingTransformation[0]=instantiateSamplingTransformation(samplingAlgorithm,scaledown,dim,rev,seed);
  if (subgraph != null) {
    samplingTransformation[1]=subgraph;
  }
  ReadableFolder rf=new ReadableFolder(net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),srcdir,suffix,null);
  if (startIndex > 0) {
    for (int i=0; i < startIndex; i++) {
      rf.incIndex();
    }
  }
  Graph g;
  for (int j=startIndex; j <= endIndex; j++) {
    g=rf.generate();
    if (g != null) {
      for (int si=samplingStartIndex; si < samplingEndIndex; si++) {
        Graph gi=samplingTransformation[0].transform(g);
        ((ExtractSampledSubgraph)samplingTransformation[1]).setIndex(si - samplingStartIndex);
        gi=samplingTransformation[1].transform(gi);
        writeGraphToFile(gi,targetdir + j + ""String_Node_Str"",net.name() + ""String_Node_Str"" + samplingAlgorithm.name()+ ""String_Node_Str""+ si);
        if (plotting)         plotGraph(gi,targetdir + j + ""String_Node_Str""+ ""String_Node_Str"",gi.toString() + ""String_Node_Str"" + si);
        gi=null;
      }
      writeOriginalGraphWithPropertiesToFile(g,targetdir + j + ""String_Node_Str"",g.toString());
      if (plotting)       plotGraph(g,targetdir + j + ""String_Node_Str"",g.toString());
    }
  }
}","/** 
 * @param args
 * @throws ParseException
 */
public static void main(String[] args) throws ParseException {
  for (  String s : args) {
    matchArgument(s);
  }
  srcdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str"";
  File f=new File(srcdir);
  if (!f.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + srcdir + ""String_Node_Str"");
  }
  targetdir=dir + ""String_Node_Str"" + size+ ""String_Node_Str""+ net.name()+ ""String_Node_Str""+ scaledown+ ""String_Node_Str""+ samplingAlgorithm+ ""String_Node_Str"";
  f=new File(targetdir);
  if (!f.isDirectory()) {
    f.mkdirs();
  }
  System.out.println(""String_Node_Str"" + srcdir);
  System.out.println(""String_Node_Str"" + targetdir);
  if (!initialized()) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  Transformation[] samplingTransformation=new Transformation[2];
  samplingTransformation[0]=instantiateSamplingTransformation(samplingAlgorithm,scaledown,dim,rev,seed);
  if (subgraph != null) {
    samplingTransformation[1]=subgraph;
  }
  ReadableFolder rf=new ReadableFolder(net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),net.name() + ""String_Node_Str"" + samplingAlgorithm.name(),srcdir,suffix,null);
  if (startIndex > 0) {
    for (int i=0; i < startIndex; i++) {
      rf.incIndex();
    }
  }
  Graph g;
  for (int j=startIndex; j <= endIndex; j++) {
    g=rf.generate();
    if (g != null) {
      for (int si=samplingStartIndex; si < samplingEndIndex; si++) {
        Graph gi=samplingTransformation[0].transform(g);
        ((ExtractSampledSubgraph)samplingTransformation[1]).setIndex(si - samplingStartIndex);
        gi=samplingTransformation[1].transform(gi);
        writeGraphToFile(gi,targetdir + j + ""String_Node_Str"",net.name() + ""String_Node_Str"" + samplingAlgorithm.name()+ ""String_Node_Str""+ si);
        if (plotting)         plotGraph(gi,targetdir + j + ""String_Node_Str""+ ""String_Node_Str"",gi.toString() + ""String_Node_Str"" + si);
        gi=null;
      }
      writeOriginalGraphWithPropertiesToFile(g,targetdir + j + ""String_Node_Str"",g.toString());
      if (plotting)       plotGraph(g,targetdir + j + ""String_Node_Str"",g.toString());
    }
  }
}",0.9913518434228492
39744,"public static Network[] instantiateNetworkModels(){
  Network nw1=new ErdosRenyi(100,3,false,null);
  Network nw2=new BarabasiAlbert(500,2,null);
  Network nw3=new WattsStrogatz(500,6,0.2,null);
  Network nw4=new CondonAndKarp(500,3,0.05,0.0005,null);
  Network nw5=new Regular(100,2,true,false,null);
  Network[] n=new Network[]{nw4};
  return n;
}","public static Network[] instantiateNetworkModels(){
  Network nw1=new ErdosRenyi(100,3,false,null);
  Network nw2=new BarabasiAlbert(500,2,null);
  Network nw3=new WattsStrogatz(500,6,0.2,null);
  Network nw4=new CondonAndKarp(500,3,0.05,0.0005,null);
  Network nw5=new Regular(100,2,true,false,null);
  Network[] n=new Network[]{nw1};
  return n;
}",0.997134670487106
39745,"private static Transformation[] instantiateSamplingTransformation(double scaledown,int dimension,boolean revisiting,Long randomSeed){
  Transformation sampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.SNOWBALLSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling2=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling3=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMJUMP,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling4=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMWALK,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling5=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL_DEGREECORRECTION,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling6=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling7=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.BFS,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling8=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RESPONDENTDRIVENSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling9=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.FORESTFIRE,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling10=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.DFS,scaledown,revisiting,dimension,randomSeed);
  Transformation subgraphing=new ColorSampledSubgraph();
  Transformation[] t1=new Transformation[]{sampling10,subgraphing};
  return t1;
}","private static Transformation[] instantiateSamplingTransformation(double scaledown,int dimension,boolean revisiting,Long randomSeed){
  Transformation sampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.SNOWBALLSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling2=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling3=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMJUMP,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling4=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMWALK,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling5=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMSTROLL_DEGREECORRECTION,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling6=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling7=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.BFS,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling8=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RESPONDENTDRIVENSAMPLING,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling9=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.FORESTFIRE,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling10=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.DFS,scaledown,revisiting,dimension,randomSeed);
  Transformation sampling11=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.RANDOMWALK_METROPOLIZED,scaledown,revisiting,dimension,randomSeed);
  Transformation subgraphing=new ColorSampledSubgraph();
  Transformation[] t1=new Transformation[]{sampling11,subgraphing};
  return t1;
}",0.9562517640417724
39746,"/** 
 * Move walker one step
 */
public void takeAStep(Graph g,NetworkSample ns){
  Map<Node,Collection<Node>> cc=this.getCurrentCandidates();
  Collection<Node> c;
  if (cc.size() > 0) {
    c=cc.keySet();
  }
 else {
    System.err.println(""String_Node_Str"");
    c=getRestartNodes();
  }
  for (  Node n : c) {
    Collection<Node> candidates=new ArrayList<Node>();
    do {
      if (cc.size() > 0) {
        candidates=controller.filterCandidates(cc.get(n));
      }
 else {
        candidates=controller.filterCandidates(c);
      }
      if (candidates.size() == 0) {
        System.err.println(""String_Node_Str"");
        cc.clear();
        c=getRestartNodes();
      }
    }
 while (candidates.size() == 0);
    Node next=this.selectNextNode(candidates,n);
    currents.remove(n);
    currents.add(next);
  }
}","/** 
 * Move walker one step
 */
public void takeAStep(Graph g,NetworkSample ns){
  Map<Node,Collection<Node>> cc=this.getCurrentCandidates();
  Collection<Node> c;
  if (cc.size() > 0) {
    c=cc.keySet();
  }
 else {
    System.err.println(""String_Node_Str"");
    c=getRestartNodes();
  }
  for (  Node n : c) {
    Collection<Node> candidates=new ArrayList<Node>();
    do {
      if (cc.size() > 0) {
        candidates=controller.filterCandidates(cc.get(n));
      }
 else {
        candidates=controller.filterCandidates(c);
      }
      if (candidates.size() == 0) {
        System.err.println(""String_Node_Str"");
        cc.clear();
        c=getRestartNodes();
      }
    }
 while (candidates.size() == 0);
    Node next=this.selectNextNode(candidates);
    currents.remove(n);
    currents.add(next);
  }
}",0.9987789987789988
39747,"/** 
 * @param candidates
 * @return
 */
protected abstract Node selectNextNode(Collection<Node> candidates,Node current);","/** 
 * @param candidates
 * @return
 */
protected abstract Node selectNextNode(Collection<Node> candidates);",0.9437229437229436
39748,"@Override protected Node selectNextNode(Collection<Node> candidates,Node current){
  Random r=new Random();
  int next=r.nextInt(candidates.size());
  next=next % candidates.size();
  Node nextStepCandidate=candidates.toArray(new Node[0])[next];
  int nscDegree=nextStepCandidate.getDegree();
  int cDegree=current.getDegree();
  double d=(double)cDegree / (double)nscDegree;
  d=Math.min(d,1);
  double p=r.nextDouble();
  if (d < p) {
    return nextStepCandidate;
  }
 else {
    return current;
  }
}","@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=this.getRNG();
  Collection<Node> c=this.getCurrentNodes();
  if (c.size() > 0) {
    Node current=c.toArray(new Node[0])[0];
    int next=r.nextInt(candidates.size());
    next=next % candidates.size();
    Node nextStepCandidate=candidates.toArray(new Node[0])[next];
    int nscDegree=nextStepCandidate.getDegree();
    int cDegree=current.getDegree();
    double d=(double)cDegree / (double)nscDegree;
    d=Math.min(d,1);
    double p=r.nextDouble();
    if (d < p) {
      return nextStepCandidate;
    }
 else {
      System.err.println(""String_Node_Str"" + cDegree + ""String_Node_Str""+ nscDegree);
      return current;
    }
  }
 else {
    c=this.getRestartNodes();
    return c.toArray(new Node[0])[0];
  }
}",0.4497313891020721
39749,"/** 
 * @param args
 */
public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  boolean get=false;
  int times=1;
  double scaledown=0.5;
  int dimension=1;
  boolean revisiting=false;
  Transformation uniformSampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension);
  Transformation[] t=new Transformation[]{uniformSampling};
  Network nw1=new ErdosRenyi(10,3,false,t);
  Network[] n=new Network[]{nw1};
  Metric[] metrics=new Metric[]{new DegreeDistribution(),new ShortestPaths(),new ClusteringCoefficient()};
  Series[] s=get ? Series.get(n,metrics) : Series.generate(n,metrics,times);
  Plotting.single(s,metrics,""String_Node_Str"");
  Plotting.multi(s,metrics,""String_Node_Str"");
  for (  Network i : n) {
    System.out.println(""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes()+ ""String_Node_Str"");
    plot(i,""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes(),times);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  boolean get=false;
  int times=1;
  double scaledown=0.1;
  int dimension=1;
  boolean revisiting=false;
  Transformation uniformSampling=SamplingAlgorithmFactory.getInstanceOf(SamplingAlgorithm.UNIFORMSAMPLING,scaledown,revisiting,dimension);
  Transformation[] t=new Transformation[]{uniformSampling};
  Network nw1=new ErdosRenyi(10000,12,false,t);
  Network[] n=new Network[]{nw1};
  Metric[] metrics=new Metric[]{new DegreeDistribution(),new ShortestPaths(),new ClusteringCoefficient()};
  Series[] s=get ? Series.get(n,metrics) : Series.generate(n,metrics,times);
  Plotting.single(s,metrics,""String_Node_Str"");
  Plotting.multi(s,metrics,""String_Node_Str"");
  for (  Network i : n) {
    System.out.println(""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes()+ ""String_Node_Str"");
    plot(i,""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes(),times);
  }
}",0.995049504950495
39750,"/** 
 * @return
 */
public Collection<Node> sampleOneStepNodes(Graph g,NetworkSample ns,int maxNodes){
  Collection<AWalker> walkers=walkerController.getActiveWalkers();
  Collection<Node> sampled=new LinkedList<Node>();
  for (  AWalker w : walkers) {
    Map<Node,Collection<Node>> wcc=w.getCurrentCandidates(g);
    Map<Node,Collection<Node>> fc=walkerController.filterCandidates(wcc,ns);
    sampled.addAll(sampleNodes(fc));
  }
  return sampled;
}","/** 
 * @return
 */
public Collection<Node> sampleOneStepNodes(Graph g,NetworkSample ns,int maxNodes){
  Collection<AWalker> walkers=walkerController.getActiveWalkers();
  Collection<Node> sampled=new LinkedList<Node>();
  for (  AWalker w : walkers) {
    Map<Node,Collection<Node>> wcc=w.getCurrentCandidates(g);
    Map<Node,Collection<Node>> fc=walkerController.filterCandidates(wcc,ns);
    sampled.addAll(sampleNodes(fc));
  }
  System.out.println(""String_Node_Str"" + sampled.size() + ""String_Node_Str"");
  return sampled;
}",0.9144602851323828
39751,"/** 
 * Move walker by one step
 */
public void takeAStep(Graph g,NetworkSample ns){
  Map<Node,Collection<Node>> cc=this.getCurrentCandidates(g);
  Set<Node> c=cc.keySet();
  for (  Node n : c) {
    Collection<Node> candidates=controller.filterCandidates(cc.get(n),ns);
    Node next=this.selectNextNode(candidates);
    currents.remove(n);
    currents.add(next);
  }
}","/** 
 * Move walker by one step
 */
public void takeAStep(Graph g,NetworkSample ns){
  Map<Node,Collection<Node>> cc=this.getCurrentCandidates(g);
  Collection<Node> c;
  if (cc.size() > 0) {
    c=cc.keySet();
  }
 else {
    c=getRestartNodes();
  }
  for (  Node n : c) {
    Collection<Node> candidates=null;
    do {
      if (cc.size() > 0) {
        candidates=controller.filterCandidates(cc.get(n),ns);
      }
 else {
        candidates=controller.filterCandidates(c,ns);
      }
      if (candidates != null && candidates.size() == 0) {
        cc.clear();
        c=getRestartNodes();
      }
    }
 while (candidates.size() == 0);
    Node next=this.selectNextNode(candidates);
    System.out.println(""String_Node_Str"" + next);
    currents.remove(n);
    currents.add(next);
  }
}",0.6128755364806867
39752,"public AWalkerController(String walkercontroller,Collection<AWalker> w,CandidateFilter cf){
  super(""String_Node_Str"",walkercontroller);
  walkers=w;
  candidateFilter=cf;
}","public AWalkerController(String walkercontroller,Collection<AWalker> w,CandidateFilter cf,StartNodeSelector sns){
  super(""String_Node_Str"",walkercontroller);
  this.walkers=w;
  this.candidateFilter=cf;
  this.startNodeSelector=sns;
}",0.8480392156862745
39753,"/** 
 * Perform one step of walking with all active walker. The number of active walkers depends on the used walking-strategy
 */
public void walkOneStep(Graph g,NetworkSample ns){
  if (!isInitialized()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  Collection<AWalker> activeWalkers=this.getActiveWalkers();
  for (  AWalker w : activeWalkers) {
    w.takeAStep(g,ns);
  }
}","/** 
 * Perform one step of walking with all active walker. The number of active walkers depends on the used walking-strategy
 */
public void walkOneStep(Graph g,NetworkSample ns){
  this.setCurrentSample(ns);
  if (!isInitialized()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Collection<AWalker> activeWalkers=this.getActiveWalkers();
  for (  AWalker w : activeWalkers) {
    w.takeAStep(g,ns);
  }
}",0.9194865810968494
39754,"/** 
 * build an instance of a default sampling transformation
 * @param sg
 * @param revisiting
 * @param dimension IGNORED BY SINGLEDIMENSIONAL SAMPLING ALGORITHMS!
 * @return
 */
public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf);
aw.setWalkerController(awc);
as.setWalkerController(awc);
sns=new StartNodeSelector(""String_Node_Str"");
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}","/** 
 * build an instance of a default sampling transformation
 * @param sg
 * @param revisiting
 * @param dimension IGNORED BY SINGLEDIMENSIONAL SAMPLING ALGORITHMS!
 * @return
 */
public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
sns=new StartNodeSelector(""String_Node_Str"");
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf,sns);
aw.setWalkerController(awc);
as.setWalkerController(awc);
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}",0.9527093596059112
39755,"public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(g,networkSample,targetSampleSize);
  sampleOneStep(g,maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    walkerController.walkOneStep(g,networkSample);
    sampleOneStep(g,maxNodesInThisRound,round);
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}","public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(g,networkSample,targetSampleSize);
  walkerController.setGraph(g);
  sampleOneStep(g,maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    System.out.println(""String_Node_Str"" + round);
    walkerController.walkOneStep(g,networkSample);
    System.out.println(""String_Node_Str"");
    sampleOneStep(g,maxNodesInThisRound,round);
    System.out.println(""String_Node_Str"");
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}",0.8933753943217666
39756,"@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt(candidates.size() - 1);
  return candidates.toArray(new Node[0])[next];
}","@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt(candidates.size());
  next=next % candidates.size();
  return candidates.toArray(new Node[0])[next];
}",0.9090909090909092
39757,"/** 
 * @param key
 * @param value
 * @param w
 * @param cf
 */
public UniformSamplingWalkerController(Collection<AWalker> w,CandidateFilter cf){
  super(w.size() + ""String_Node_Str"" + w.toArray(new AWalker[0])[0].getValue(),w,cf);
  this.walkers=w;
  this.cf=cf;
}","/** 
 * @param key
 * @param value
 * @param w
 * @param cf
 */
public UniformSamplingWalkerController(Collection<AWalker> w,CandidateFilter cf,StartNodeSelector sns){
  super(w.size() + ""String_Node_Str"" + w.toArray(new AWalker[0])[0].getValue(),w,cf,sns);
  this.walkers=w;
  this.cf=cf;
}",0.9532374100719424
39758,"/** 
 * @return
 */
public Collection<Node> sampleOneStepNodes(int maxNodes){
  Collection<AWalker> walkers=walkerController.getActiveWalkers();
  Collection<Node> sampled=new LinkedList<Node>();
  for (  AWalker w : walkers) {
    Map<Node,Collection<Node>> wcc=w.getCurrentCandidates();
    Map<Node,Collection<Node>> fc=walkerController.filterCandidates(wcc);
    sampled.addAll(sampleNodes(fc));
  }
  return sampled;
}","/** 
 * @return
 */
public Collection<Node> sampleOneStepNodes(Graph g,NetworkSample ns,int maxNodes){
  Collection<AWalker> walkers=walkerController.getActiveWalkers();
  Collection<Node> sampled=new LinkedList<Node>();
  for (  AWalker w : walkers) {
    Map<Node,Collection<Node>> wcc=w.getCurrentCandidates(g);
    Map<Node,Collection<Node>> fc=walkerController.filterCandidates(wcc,ns);
    sampled.addAll(sampleNodes(fc));
  }
  return sampled;
}",0.9668571428571427
39759,"/** 
 * Initializes the ASampler implementation This default implementation calls sampleOneStepNodes to sample the startnode(s)!
 * @param targetSampleSize  max nodes sampled in this round 
 * @param walkerController 
 */
public Collection<Node> initialize(AWalkerController walkerController,int maxNodes){
  this.walkerController=walkerController;
  return sampleOneStepNodes(maxNodes);
}","/** 
 * Initializes the ASampler implementation This default implementation calls sampleOneStepNodes to sample the startnode(s)!
 * @param targetSampleSize  max nodes sampled in this round 
 * @param walkerController 
 */
public Collection<Node> initialize(Graph g,NetworkSample ns,int maxNodes){
  return sampleOneStepNodes(g,ns,maxNodes);
}",0.8590971272229823
39760,"/** 
 * Returns the current neighbors of current nodes of the walker
 * @return Map: key: current node value: neighbors of the current node
 */
private Map<Node,Collection<Node>> getCurrentCandidates(Graph g){
  Map<Node,Collection<Node>> cn=new HashMap<Node,Collection<Node>>();
  for (  Node n : currents) {
    Collection<Node> nn=resolveCandidates(g,n);
    cn.put(n,nn);
  }
  return cn;
}","/** 
 * Returns the current neighbors of current nodes of the walker
 * @return Map: key: current node value: neighbors of the current node
 */
public Map<Node,Collection<Node>> getCurrentCandidates(Graph g){
  Map<Node,Collection<Node>> cn=new HashMap<Node,Collection<Node>>();
  for (  Node n : currents) {
    Collection<Node> nn=resolveCandidates(g,n);
    cn.put(n,nn);
  }
  return cn;
}",0.4066073697585768
39761,"/** 
 * @param key
 * @param value
 */
public NetworkSample(String key,String value){
  super(key,value);
  sampleNodeMapping=new HashMap<Integer,Integer>();
  revisitFrequency=new HashMap<Integer,List<Integer>>();
}","/** 
 * @param key
 * @param value
 */
public NetworkSample(){
  super(""String_Node_Str"",""String_Node_Str"");
  sampleNodeMapping=new HashMap<Integer,Integer>();
  revisitFrequency=new HashMap<Integer,List<Integer>>();
}",0.8
39762,"/** 
 * build an instance of a default sampling transformation
 * @param sg
 * @param revisiting
 * @param dimension IGNORED BY SINGLEDIMENSIONAL SAMPLING ALGORITHMS!
 * @return
 */
public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf);
aw.setWalkerController(awc);
sns=new StartNodeSelector(""String_Node_Str"");
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}","/** 
 * build an instance of a default sampling transformation
 * @param sg
 * @param revisiting
 * @param dimension IGNORED BY SINGLEDIMENSIONAL SAMPLING ALGORITHMS!
 * @return
 */
public static SamplingController getInstanceOf(SamplingAlgorithm sg,double scaledown,boolean revisiting,int dimension){
  SamplingController sc;
  ASampler as;
  AWalker aw;
  AWalkerController awc;
  CandidateFilter cf;
  NetworkSample ns;
  StartNodeSelector sns;
  String algorithm;
switch (sg) {
case UNIFORMSAMPLING:
    as=new VisitedNodeSampler();
  aw=new UniformRandomWalker();
cf=new CandidateFilter(revisiting);
Collection<AWalker> cw=new ArrayList<AWalker>();
cw.add(aw);
awc=new UniformSamplingWalkerController(cw,cf);
aw.setWalkerController(awc);
as.setWalkerController(awc);
sns=new StartNodeSelector(""String_Node_Str"");
algorithm=""String_Node_Str"";
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
sc=new SamplingController(algorithm,awc,as,sns,scaledown,dimension,revisiting);
return sc;
}",0.985478217325989
39763,"@Override public Graph transform(Graph g){
  if (!initialized()) {
    return g;
  }
 else {
    sampleGraph(g);
    return g;
  }
}","@Override public Graph transform(Graph g){
  if (!initialized()) {
    return g;
  }
 else {
    long startTime=System.currentTimeMillis();
    sampleGraph(g);
    long finishTime=System.currentTimeMillis();
    long duration=finishTime - startTime;
    System.out.println(""String_Node_Str"" + networkSample.getSampleSize() + ""String_Node_Str""+ g.getNodeCount()+ ""String_Node_Str""+ duration+ ""String_Node_Str"");
    return g;
  }
}",0.4697508896797153
39764,"/** 
 * Sample eventually nodes in the specified round
 * @param maxNodesInThisRound number of maximal added nodes
 * @param round current round
 * @return true if at least one node is sampled, else false
 */
private boolean sampleOneStep(int maxNodesInThisRound,int round){
  Collection<Node> chosenNodes=sampler.sampleOneStepNodes(maxNodesInThisRound);
  if (chosenNodes.size() > 0)   return networkSample.addNodeToSample(chosenNodes,round);
  return false;
}","/** 
 * Sample eventually nodes in the specified round
 * @param maxNodesInThisRound number of maximal added nodes
 * @param round current round
 * @return true if at least one node is sampled, else false
 */
private boolean sampleOneStep(Graph g,int maxNodesInThisRound,int round){
  Collection<Node> chosenNodes=sampler.sampleOneStepNodes(g,networkSample,maxNodesInThisRound);
  if (chosenNodes.size() > 0)   return networkSample.addNodeToSample(chosenNodes,round);
  return false;
}",0.9746300211416492
39765,"public SamplingController(String algorithm,AWalkerController awc,ASampler as,StartNodeSelector asns,double scaledown,int dimension,boolean revisiting){
  super(""String_Node_Str"" + algorithm + ""String_Node_Str""+ awc.getValue()+ ""String_Node_Str""+ as.getValue(),new Parameter[]{awc,as,asns,new DoubleParameter(""String_Node_Str"",scaledown),new IntParameter(""String_Node_Str"",dimension),new BooleanParameter(""String_Node_Str"",revisiting)});
  if (dimension < 1) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimension);
  }
  if (scaledown < 0.0 || scaledown > 1.0) {
    throw new IllegalArgumentException(""String_Node_Str"" + scaledown);
  }
  this.scaledown=scaledown;
  this.dimension=dimension;
  this.revisiting=revisiting;
}","public SamplingController(String algorithm,AWalkerController awc,ASampler as,StartNodeSelector asns,double scaledown,int dimension,boolean revisiting){
  super(""String_Node_Str"",new Parameter[]{new StringParameter(""String_Node_Str"",algorithm),awc,as,asns,new DoubleParameter(""String_Node_Str"",scaledown),new IntParameter(""String_Node_Str"",dimension),new BooleanParameter(""String_Node_Str"",revisiting)});
  if (dimension < 1) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimension);
  }
  if (scaledown < 0.0 || scaledown > 1.0) {
    throw new IllegalArgumentException(""String_Node_Str"" + scaledown);
  }
  this.scaledown=scaledown;
  this.dimension=dimension;
  this.revisiting=revisiting;
  this.sampler=as;
  this.walkerController=awc;
  this.startNodeSelector=asns;
  this.networkSample=new NetworkSample();
}",0.8394904458598726
39766,"@Override public boolean applicable(Graph g){
  if (!initialized()) {
    return false;
  }
  return true;
}","@Override public boolean applicable(Graph g){
  if (!initialized()) {
    System.out.println(""String_Node_Str"");
    if (dimension <= 0)     System.out.println(""String_Node_Str"");
    if (networkSample == null)     System.out.println(""String_Node_Str"");
    if (walkerController == null || !walkerController.isInitialized())     System.out.println(""String_Node_Str"");
    if (sampler == null || !sampler.isInitialized())     System.out.println(""String_Node_Str"");
    if (startNodeSelector == null)     System.out.println(""String_Node_Str"");
    return false;
  }
  return true;
}",0.313953488372093
39767,"public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(walkerController,targetSampleSize);
  sampleOneStep(maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    walkerController.walkOneStep();
    sampleOneStep(maxNodesInThisRound,round);
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}","public boolean sampleGraph(Graph g){
  Node[] startNodes=startNodeSelector.selectStartNodes(g,dimension);
  int targetSampleSize=(int)Math.ceil(g.getNodeCount() * scaledown);
  int maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
  int round=0;
  walkerController.initialize(g,startNodes);
  sampler.initialize(g,networkSample,targetSampleSize);
  sampleOneStep(g,maxNodesInThisRound,round);
  boolean running=true;
  do {
    round++;
    walkerController.walkOneStep(g,networkSample);
    sampleOneStep(g,maxNodesInThisRound,round);
    maxNodesInThisRound=calculateResidualBudget(targetSampleSize);
    running=(maxNodesInThisRound > 0) ? true : false;
  }
 while (running);
  return true;
}",0.9670958512160228
39768,"/** 
 * Select start nodes from the original graph The default implementation choses dimension random nodes
 * @param g 			Graph
 * @param dimension		Number of chosen startnodes
 * @return				Array of chosen startnodes
 */
public Node[] selectStartNodes(Graph g,int dimension){
  Collection<Node> sn=new ArrayList<Node>();
  Random r=new Random();
  int gsize=g.getNodeCount();
  int nid;
  Node n;
  int i=0;
  while (sn.size() < dimension) {
    nid=r.nextInt() % gsize;
    n=g.getNode(nid);
    if (!sn.contains(n)) {
      sn.add(n);
    }
  }
  return sn.toArray(new Node[dimension]);
}","/** 
 * Select start nodes from the original graph The default implementation choses dimension random nodes
 * @param g 			Graph
 * @param dimension		Number of chosen startnodes
 * @return				Array of chosen startnodes
 */
public Node[] selectStartNodes(Graph g,int dimension){
  Collection<Node> sn=new ArrayList<Node>();
  Random r=new Random();
  int gsize=g.getNodeCount();
  int nid;
  Node n;
  int i=0;
  while (sn.size() < dimension) {
    nid=r.nextInt(gsize - 1);
    nid=nid % gsize;
    n=g.getNode(nid);
    if (!sn.contains(n)) {
      sn.add(n);
    }
  }
  return sn.toArray(new Node[0]);
}",0.9716193656093488
39769,"@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt() % candidates.size();
  return candidates.toArray(new Node[0])[next];
}","@Override protected Node selectNextNode(Collection<Node> candidates){
  Random r=new Random();
  int next=r.nextInt(candidates.size() - 1);
  return candidates.toArray(new Node[0])[next];
}",0.9761273209549072
39770,"public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  boolean get=false;
  int times=1;
  boolean b=false;
  boolean r=false;
  Network nw0=new Regular(1000,3,r,b,null);
  Network nw1=new Regular(2000,3,r,b,null);
  Network nw2=new Regular(3000,3,r,b,null);
  Network nw3=new Regular(4000,3,r,b,null);
  Network nw4=new Regular(5000,3,r,b,null);
  Network nw5=new Regular(6000,3,r,b,null);
  Network nw6=new Regular(7000,3,r,b,null);
  Network nw7=new Regular(8000,3,r,b,null);
  Network nw8=new Regular(9000,3,r,b,null);
  Network nw9=new Regular(10000,3,r,b,null);
  Network[] n=new Network[]{nw0,nw1,nw2,nw3,nw4,nw5,nw6,nw7,nw8,nw9};
  Metric[] metrics=new Metric[]{new DegreeDistribution(),new ShortestPaths(),new ClusteringCoefficient()};
  Series[] s=get ? Series.get(n,metrics) : Series.generate(n,metrics,times);
  Plotting.single(s,metrics,""String_Node_Str"");
  Plotting.multi(s,metrics,""String_Node_Str"");
  for (  Network i : n) {
    System.out.println(""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes()+ ""String_Node_Str"");
    plot(i,""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes(),times);
  }
}","public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  boolean get=false;
  int times=1;
  boolean b=false;
  boolean r=false;
  Network nw0=new Regular(100,4,r,b,null);
  Network nw1=new Regular(200,4,r,b,null);
  Network nw2=new Regular(300,4,r,b,null);
  Network nw3=new Regular(400,4,r,b,null);
  Network nw4=new Regular(500,4,r,b,null);
  Network nw5=new Regular(600,4,r,b,null);
  Network nw6=new Regular(700,4,r,b,null);
  Network nw7=new Regular(800,4,r,b,null);
  Network nw8=new Regular(900,4,r,b,null);
  Network nw9=new Regular(1000,4,r,b,null);
  Network[] n=new Network[]{nw0,nw1,nw2,nw3,nw4,nw5,nw6,nw7,nw8,nw9};
  Metric[] metrics=new Metric[]{new DegreeDistribution(),new ShortestPaths(),new ClusteringCoefficient()};
  Series[] s=get ? Series.get(n,metrics) : Series.generate(n,metrics,times);
  Plotting.single(s,metrics,""String_Node_Str"");
  Plotting.multi(s,metrics,""String_Node_Str"");
  for (  Network i : n) {
    System.out.println(""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes()+ ""String_Node_Str"");
    plot(i,""String_Node_Str"" + i.getKey() + ""String_Node_Str""+ i.getNodes(),times);
  }
}",0.6669491525423729
39771,"private boolean addRandomEdges(Node[] nodes,Edges edges,int toAdd){
  ArrayList<Node> listDst=new ArrayList<Node>();
  ArrayList<Node> listSrc=new ArrayList<Node>();
  for (int i=0; i < DEGREE; i++) {
    listDst.addAll(Arrays.asList(nodes));
    listSrc.addAll(Arrays.asList(nodes));
  }
  Random rand=new Random();
  int retries=30;
  while (!listSrc.isEmpty() && !listDst.isEmpty() && retries > 0) {
    int srcId=rand.nextInt();
    srcId=(srcId < 0) ? srcId * (-1) : srcId;
    srcId=srcId % listSrc.size();
    Node srcN=listSrc.get(srcId);
    int src=srcN.getIndex();
    int dstId=rand.nextInt();
    dstId=(dstId < 0) ? dstId * (-1) : dstId;
    dstId=dstId % listDst.size();
    Node dstN=listDst.get(dstId);
    int dst=dstN.getIndex();
    if (src == dst) {
      System.err.println(""String_Node_Str"" + src + ""String_Node_Str""+ dst);
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
      retries--;
      continue;
    }
    if (this.BIDIRECTIONAL) {
      edges.add(src,dst);
      edges.add(dst,src);
      listSrc.remove(srcN);
      listDst.remove(srcN);
      listDst.remove(dstN);
      listSrc.remove(dstN);
    }
 else {
      edges.add(src,dst);
      listSrc.remove(srcN);
      listDst.remove(dstN);
    }
    retries=30;
  }
  if (edges.size() != toAdd) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + edges.size() + ""String_Node_Str""+ toAdd+ ""String_Node_Str"");
    edges=null;
    edges=new Edges(nodes,toAdd);
    return addRandomEdges(nodes,edges,toAdd);
  }
  return true;
}","private boolean addRandomEdges(Node[] nodes,Edges edges,int toAdd){
  ArrayList<Node> listDst=new ArrayList<Node>();
  ArrayList<Node> listSrc=new ArrayList<Node>();
  for (int i=0; i < DEGREE; i++) {
    listDst.addAll(Arrays.asList(nodes));
    listSrc.addAll(Arrays.asList(nodes));
  }
  Random rand=new Random();
  int retries=30;
  while (!listSrc.isEmpty() && !listDst.isEmpty() && retries > 0) {
    int srcId=rand.nextInt();
    srcId=(srcId < 0) ? srcId * (-1) : srcId;
    srcId=srcId % listSrc.size();
    Node srcN=listSrc.get(srcId);
    int src=srcN.getIndex();
    int dstId=rand.nextInt();
    dstId=(dstId < 0) ? dstId * (-1) : dstId;
    dstId=dstId % listDst.size();
    Node dstN=listDst.get(dstId);
    int dst=dstN.getIndex();
    while ((src == dst || edges.contains(src,dst)) && retries > 0) {
      System.err.println(""String_Node_Str"" + src + ""String_Node_Str""+ dst);
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
      dstId=(dstId + 1) % listDst.size();
      dstN=listDst.get(dstId);
      dst=dstN.getIndex();
      retries--;
      continue;
    }
    if (retries == 0) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + edges.size() + ""String_Node_Str""+ toAdd+ ""String_Node_Str"");
      edges=null;
      edges=new Edges(nodes,toAdd);
      return addRandomEdges(nodes,edges,toAdd);
    }
    if (this.BIDIRECTIONAL) {
      edges.add(src,dst);
      edges.add(dst,src);
      listSrc.remove(srcN);
      listDst.remove(srcN);
      listDst.remove(dstN);
      listSrc.remove(dstN);
    }
 else {
      edges.add(src,dst);
      listSrc.remove(srcN);
      listDst.remove(dstN);
    }
    retries=30;
  }
  return true;
}",0.7896919431279621
39772,"public int compare(Node n1,Node n2){
  double point1=map.get(n1).doubleValue();
  double point2=map.get(n2).doubleValue();
  int result;
  if (point1 == point2) {
    result=0;
  }
 else   if (point1 > point2) {
    result=1;
  }
 else {
    result=-1;
  }
  return result;
}","public int compare(Node n1,Node n2){
  double point1=ClosenessCentralityNodeSorter.this.map.get(n1).doubleValue();
  double point2=ClosenessCentralityNodeSorter.this.map.get(n2).doubleValue();
  int result;
  if (point1 == point2) {
    result=0;
  }
 else   if (point1 > point2) {
    result=1;
  }
 else {
    result=-1;
  }
  return result;
}",0.8870967741935484
39773,"/** 
 */
private void calculate(Graph g){
  GraphSPallFloyd floyd=new GraphSPallFloyd(g);
  for (int i=0; i < g.getNodes().length; i++) {
    double sum=0;
    for (int j=0; j < g.getNodes().length; j++) {
      if (j == i) {
        continue;
      }
      if (floyd.dist(i,j) < floyd.INF) {
        sum+=floyd.dist(i,j);
      }
    }
    map.put(g.getNode(i),1 / sum);
  }
}","/** 
 */
private void calculate(Graph g){
  GraphSPallFloyd floyd=new GraphSPallFloyd(g);
  for (int i=0; i < g.getNodes().length; i++) {
    double sum=0;
    for (int j=0; j < g.getNodes().length; j++) {
      if (floyd.dist(i,j) < floyd.INF) {
        sum+=floyd.dist(i,j);
      }
    }
    map.put(g.getNode(i),1.0 / sum);
  }
}",0.9323943661971832
39774,"/** 
 * @param g
 */
public GraphSPallFloyd(Graph g){
  super(g);
  int V=g.getNodes().length;
  p=new Edge[V][V];
  d=new int[V][V];
  System.out.println(""String_Node_Str"");
  for (int s=0; s < V; s++) {
    for (int t=0; t < V; t++) {
      d[s][t]=INF;
    }
  }
  System.out.println(""String_Node_Str"");
  for (int s=0; s < V; s++) {
    for (int t=0; t < V; t++) {
      if (g.getEdges().contains(s,t)) {
        p[s][t]=g.getEdges().getEdge(s,t);
        d[s][t]=1;
      }
    }
  }
  System.out.println(""String_Node_Str"");
  for (int s=0; s < V; s++) {
    d[s][s]=0;
  }
  System.out.println(""String_Node_Str"");
  for (int i=0; i < V; i++) {
    System.out.println(""String_Node_Str"" + i);
    for (int s=0; s < V; s++) {
      if (p[s][i] != null) {
        for (int t=0; t < V; t++) {
          if (s != t) {
            if (d[s][t] > d[s][i] + d[i][t]) {
              p[s][t]=p[s][i];
              d[s][t]=d[s][i] + d[i][t];
            }
          }
        }
      }
    }
  }
}","/** 
 * @param g
 */
public GraphSPallFloyd(Graph g){
  super(g);
  int V=g.getNodes().length;
  p=new Edge[V][V];
  d=new int[V][V];
  System.out.println(""String_Node_Str"");
  for (int s=0; s < V; s++) {
    for (int t=0; t < V; t++) {
      d[s][t]=INF;
    }
  }
  System.out.println(""String_Node_Str"");
  for (int s=0; s < V; s++) {
    for (int t=0; t < V; t++) {
      if (g.getEdges().contains(s,t)) {
        p[s][t]=g.getEdges().getEdge(s,t);
        d[s][t]=1;
      }
    }
  }
  System.out.println(""String_Node_Str"");
  for (int s=0; s < V; s++) {
    d[s][s]=0;
  }
  System.out.println(""String_Node_Str"");
  for (int i=0; i < V; i++) {
    System.out.println(""String_Node_Str"" + i);
    for (int s=0; s < V; s++) {
      if (p[s][i] != null) {
        for (int t=0; t < V; t++) {
          if (s != t) {
            if (d[s][t] > d[s][i] + d[i][t]) {
              p[s][t]=p[s][i];
              d[s][t]=d[s][i] + d[i][t];
            }
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"");
  for (int i=0; i < V; i++) {
    for (int j=0; j < V; j++) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ j+ ""String_Node_Str""+ d[i][j]);
    }
  }
}",0.9021392808375056
39775,"public static void main(String[] args){
  Utils u=new Utils();
  Graph g=u.importGraphFromFile(""String_Node_Str"");
}","public static void main(String[] args){
  Utils u=new Utils();
  Graph g=u.importGraphFromFile(""String_Node_Str"");
  u.printCentrality(GraphDistance.CLOSENESS);
  NodeSorter sorter=new ClosenessCentralityNodeSorter(NodeSorter.NodeSorterMode.ASC);
  sorter.sort(g,new Random());
  System.out.println(""String_Node_Str"");
  for (  Node n : g.getNodes()) {
    System.out.println(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ ((ClosenessCentralityNodeSorter)sorter).getCentrality(n));
  }
}",0.380327868852459
39776,"public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  Network nw=new ErdosRenyi(1000,10,true,null);
  Graph g=nw.generate();
  System.out.println(""String_Node_Str"");
  Node[] nodes=g.getNodes();
  NodeSorter sorter=new BetweennessCentralityNodeSorter(NodeSorter.NodeSorterMode.ASC);
  Node[] sorted=sorter.sort(g,new Random());
  System.out.println(""String_Node_Str"");
  for (int i=0; i < nodes.length; i++) {
    System.out.println(i + ""String_Node_Str"" + nodes[i]);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (int i=0; i < sorted.length; i++) {
    System.out.println(i + ""String_Node_Str"" + sorted[i]);
  }
}","public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  Utils u=new Utils();
  Graph g=u.importGraphFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  Node[] nodes=g.getNodes();
  NodeSorter sorter=new ClosenessCentralityNodeSorter(NodeSorter.NodeSorterMode.ASC);
  Node[] sorted=sorter.sort(g,new Random());
  System.out.println(""String_Node_Str"");
  for (int i=0; i < nodes.length; i++) {
    System.out.println(i + ""String_Node_Str"" + nodes[i]);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (int i=0; i < sorted.length; i++) {
    System.out.println(i + ""String_Node_Str"" + sorted[i]+ ""String_Node_Str""+ ((ClosenessCentralityNodeSorter)sorter).getCentrality(g.getNode(i)));
  }
  System.out.println(""String_Node_Str"");
  for (  Node n : g.getNodes()) {
    System.out.println(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ ((ClosenessCentralityNodeSorter)sorter).getCentrality(n));
  }
  u.printCentrality(GraphDistance.CLOSENESS);
}",0.719166184134337
39777,"public Graph importGraphFromFile(String s){
  Graph gtna=new Graph(s);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.newProject();
  Workspace workspace=pc.getCurrentWorkspace();
  ImportController importController=Lookup.getDefault().lookup(ImportController.class);
  Container container;
  try {
    File file=new File(getClass().getResource(s).toURI());
    container=importController.importFile(file);
    container.getLoader().setEdgeDefault(EdgeDefault.UNDIRECTED);
    container.setAllowAutoNode(true);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + s);
    return null;
  }
  importController.process(container,new DefaultProcessor(),workspace);
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  UndirectedGraph gephi=graphModel.getUndirectedGraph();
  gtna.graph.Node[] nodes=new gtna.graph.Node[gephi.getNodeCount()];
  for (  Node n : gephi.getNodes()) {
    gtna.graph.Node node=new gtna.graph.Node(n.getId(),gtna);
    nodes[n.getId() - 1]=node;
  }
  int importedEdges=0;
  for (  Edge e : gephi.getEdges()) {
    importedEdges++;
    System.out.println(""String_Node_Str"" + importedEdges + ""String_Node_Str""+ e.toString());
    int src=e.getSource().getId() - 1;
    int dst=e.getTarget().getId() - 1;
    System.out.println(""String_Node_Str"" + src + ""String_Node_Str""+ dst);
    nodes[src].addOut(dst);
    nodes[dst].addIn(src);
  }
  gtna.setNodes(nodes);
  gtna.generateEdges();
  System.out.println(""String_Node_Str"" + gtna.getNodes().length + ""String_Node_Str""+ gtna.getEdges().size()+ ""String_Node_Str"");
  for (  gtna.graph.Node n : gtna.getNodes()) {
    n.generateAllEdges();
    System.out.println(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ gephi.getNeighbors(gephi.getNode(n.getIndex())).toArray().length);
  }
  return gtna;
}","public Graph importGraphFromFile(String s){
  Graph gtnaGraph=new Graph(s);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.newProject();
  Workspace workspace=pc.getCurrentWorkspace();
  ImportController importController=Lookup.getDefault().lookup(ImportController.class);
  Container container;
  try {
    File file=new File(getClass().getResource(s).toURI());
    container=importController.importFile(file);
    container.getLoader().setEdgeDefault(EdgeDefault.UNDIRECTED);
    container.setAllowAutoNode(true);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + s);
    return null;
  }
  importController.process(container,new DefaultProcessor(),workspace);
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  gephi=graphModel.getUndirectedGraph();
  gtna.graph.Node[] nodes=gtna.graph.Node.init(gephi.getNodeCount(),gtnaGraph);
  int importedEdges=0;
  Edges edges=new Edges(nodes,gephi.getEdgeCount() * 2);
  for (  Edge e : gephi.getEdges()) {
    importedEdges++;
    System.out.println(""String_Node_Str"" + importedEdges + ""String_Node_Str""+ e.toString());
    int src=e.getSource().getId() - 1;
    int dst=e.getTarget().getId() - 1;
    System.out.println(""String_Node_Str"" + src + ""String_Node_Str""+ dst);
    edges.add(src,dst);
    edges.add(dst,src);
  }
  edges.fill();
  gtnaGraph.setNodes(nodes);
  System.out.println(""String_Node_Str"" + gtnaGraph.getNodes().length + ""String_Node_Str""+ gtnaGraph.getEdges().size()+ ""String_Node_Str"");
  return gtnaGraph;
}",0.8171478565179353
39778,"/** 
 * Creates the graph for this network by first placing the hotspots, then placing the nodes within those hotspots. The coordinates of the nodes are stored in an <code>IdentifierSpace</code>, which is added as ""ID_SPACE_0"" to the attributes of the graph. In the end, the nodes are connected based on that id-space.
 */
@Override public Graph generate(){
  Point center=new Point(getNodeBoxWidth() / 2,getNodeBoxHeight() / 2);
  Point[] hotspotCoords=hotspotPlacer.place(hotspots,center,center,getHotspotBoxWidth(),getHotspotBoxHeight());
  PlanePartitionSimple[] coords=new PlanePartitionSimple[nodes];
  int[] nodesPerSpot=partitioner.partition(nodes,hotspots);
  int temp=0;
  int curNodes;
  for (int i=0; i < hotspots; i++) {
    curNodes=nodesPerSpot[i];
    addNodeCoords(coords,nodePlacer.place(curNodes,hotspotCoords[i],center,getNodeBoxWidth(),getNodeBoxHeight()),temp);
    temp+=curNodes;
  }
  Graph g=new Graph(this.getDescription());
  idSpace=new PlaneIdentifierSpaceSimple(coords,getNodeBoxWidth(),getNodeBoxHeight(),false);
  g.addProperty(g.getNextKey(""String_Node_Str""),idSpace);
  Node[] nodes=Node.init(this.getNodes(),g);
  connector.connect(nodes,idSpace,g);
  g.setNodes(nodes);
  return g;
}","/** 
 * Creates the graph for this network by first placing the hotspots, then placing the nodes within those hotspots. The coordinates of the nodes are stored in an <code>IdentifierSpace</code>, which is added as ""ID_SPACE_0"" to the attributes of the graph. In the end, the nodes are connected based on that id-space.
 */
@Override public Graph generate(){
  Point center=new Point(getNodeBoxWidth() / 2,getNodeBoxHeight() / 2);
  Point[] hotspotCoords=hotspotPlacer.place(hotspots,center,center,getHotspotBoxWidth(),getHotspotBoxHeight());
  PlanePartitionSimple[] coords=new PlanePartitionSimple[nodes];
  idSpace=new PlaneIdentifierSpaceSimple(coords,getNodeBoxWidth(),getNodeBoxHeight(),false);
  int[] nodesPerSpot=partitioner.partition(nodes,hotspots);
  int temp=0;
  int curNodes;
  for (int i=0; i < hotspots; i++) {
    curNodes=nodesPerSpot[i];
    addNodeCoords(coords,nodePlacer.place(curNodes,hotspotCoords[i],center,getNodeBoxWidth(),getNodeBoxHeight()),temp);
    temp+=curNodes;
  }
  Graph g=new Graph(this.getDescription());
  g.addProperty(g.getNextKey(""String_Node_Str""),idSpace);
  Node[] nodes=Node.init(this.getNodes(),g);
  connector.connect(nodes,idSpace,g);
  g.setNodes(nodes);
  return g;
}",0.9237704918032786
39779,"/** 
 */
private void calculate(Graph g){
  Node[] nodes=g.getNodes();
  for (int i=0; i < nodes.length; i++) {
    map.put(nodes[i],0.0);
  }
  for (int i=0; i < nodes.length; i++) {
    Node s=nodes[i];
    Stack<Node> S=new Stack<Node>();
    HashMap<Node,ArrayList<Node>> P=new HashMap<Node,ArrayList<Node>>();
    for (    Node n : nodes) {
      P.put(n,new ArrayList<Node>());
    }
    HashMap<Node,Integer> sigma=new HashMap<Node,Integer>();
    for (    Node n : nodes) {
      sigma.put(n,0);
    }
    sigma.put(s,1);
    HashMap<Node,Integer> d=new HashMap<Node,Integer>();
    for (    Node n : nodes) {
      d.put(n,-1);
    }
    d.put(s,0);
    LinkedList<Node> Q=new LinkedList<Node>();
    Q.add(s);
    while (!Q.isEmpty()) {
      Node v=Q.remove();
      S.add(v);
      for (      int outIndex : v.getOutgoingEdges()) {
        Node w=nodes[outIndex];
        if (d.get(w) < 0) {
          Q.add(w);
          d.put(w,d.get(v) + 1);
        }
        if (d.get(w).intValue() == d.get(v).intValue() + 1) {
          sigma.put(w,sigma.get(w) + sigma.get(v));
          P.get(w).add(v);
        }
      }
    }
    HashMap<Node,Double> delta=new HashMap<Node,Double>();
    for (    Node n : nodes) {
      delta.put(n,0.0);
    }
    while (!S.isEmpty()) {
      Node w=S.pop();
      for (      Node v : P.get(w)) {
        delta.put(v,delta.get(v) + ((double)sigma.get(v)) / sigma.get(w) * (1 + sigma.get(w)));
      }
      if (w != s) {
        map.put(w,map.get(w) + delta.get(w));
      }
    }
  }
}","/** 
 */
private void calculate(Graph g){
  Node[] nodes=g.getNodes();
  for (  Node n : nodes) {
    this.map.put(n,0.0);
  }
  for (  Node s : nodes) {
    Stack<Node> S=new Stack<Node>();
    S.clear();
    HashMap<Node,ArrayList<Node>> P=new HashMap<Node,ArrayList<Node>>();
    for (    Node n : nodes) {
      P.put(n,new ArrayList<Node>());
    }
    HashMap<Node,Integer> sigma=new HashMap<Node,Integer>();
    for (    Node n : nodes) {
      sigma.put(n,0);
    }
    sigma.put(s,1);
    HashMap<Node,Integer> d=new HashMap<Node,Integer>();
    for (    Node n : nodes) {
      d.put(n,-1);
    }
    d.put(s,0);
    LinkedList<Node> Q=new LinkedList<Node>();
    Q.clear();
    Q.add(s);
    while (!Q.isEmpty()) {
      Node v=Q.remove();
      System.out.println(""String_Node_Str"" + v.getIndex());
      S.add(v);
      for (      int outIndex : v.getOutgoingEdges()) {
        Node w=nodes[outIndex];
        System.out.println(""String_Node_Str"" + w.getIndex());
        if (d.get(w).intValue() < 0) {
          Q.add(w);
          d.put(w,d.get(v).intValue() + 1);
          System.out.println(""String_Node_Str"");
        }
        if (d.get(w).intValue() == d.get(v).intValue() + 1) {
          sigma.put(w,sigma.get(w).intValue() + sigma.get(v).intValue());
          P.get(w).add(v);
          System.out.println(""String_Node_Str"" + w.getIndex() + ""String_Node_Str""+ v.getIndex());
        }
      }
    }
    HashMap<Node,Double> delta=new HashMap<Node,Double>();
    for (    Node n : nodes) {
      delta.put(n,0.0);
    }
    while (!S.isEmpty()) {
      Node w=S.pop();
      for (      Node v : P.get(w)) {
        delta.put(v,delta.get(v).doubleValue() + sigma.get(v).doubleValue() / sigma.get(w).doubleValue() * (1 + delta.get(w).doubleValue()));
      }
      if (w.getIndex() != s.getIndex()) {
        map.put(w,map.get(w).doubleValue() + delta.get(w).doubleValue());
      }
    }
  }
}",0.8147502903600464
39780,"public static void main(String[] args){
  Utils u=new Utils();
  Graph g=u.importGraphFromFile(""String_Node_Str"");
  u.printCentrality(GraphDistance.CLOSENESS);
  NodeSorter sorter=new ClosenessCentralityNodeSorter(NodeSorter.NodeSorterMode.ASC);
  sorter.sort(g,new Random());
  System.out.println(""String_Node_Str"");
  for (  Node n : g.getNodes()) {
    System.out.println(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ ((ClosenessCentralityNodeSorter)sorter).getCentrality(n));
  }
}","public static void main(String[] args){
  Utils u=new Utils();
  Graph g=u.importGraphFromFile(""String_Node_Str"");
  NodeSorter sorter=new ClosenessCentralityNodeSorter(NodeSorter.NodeSorterMode.ASC);
  sorter.sort(g,new Random());
  System.out.println(""String_Node_Str"");
  for (  Node n : g.getNodes()) {
    System.out.println(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ ((ClosenessCentralityNodeSorter)sorter).getCentrality(n));
  }
}",0.3397027600849256
39781,"public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  Utils u=new Utils();
  Graph g=u.importGraphFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  Node[] nodes=g.getNodes();
  NodeSorter sorter=new ClosenessCentralityNodeSorter(NodeSorter.NodeSorterMode.ASC);
  Node[] sorted=sorter.sort(g,new Random());
  System.out.println(""String_Node_Str"");
  for (int i=0; i < nodes.length; i++) {
    System.out.println(i + ""String_Node_Str"" + nodes[i]);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  for (int i=0; i < sorted.length; i++) {
    System.out.println(i + ""String_Node_Str"" + sorted[i]+ ""String_Node_Str""+ ((ClosenessCentralityNodeSorter)sorter).getCentrality(g.getNode(i)));
  }
  System.out.println(""String_Node_Str"");
  for (  Node n : g.getNodes()) {
    System.out.println(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ ((ClosenessCentralityNodeSorter)sorter).getCentrality(n));
  }
  u.printCentrality(GraphDistance.CLOSENESS);
}","public static void main(String[] args){
  NodeSortingTest.test1();
}",0.1157323688969258
39782,"/** 
 * @param args
 */
public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  int times=1;
  Metric greedy=new Routing(new Greedy());
  Metric lookahead=new Routing(new LookaheadSimple());
  Metric[] metrics=new Metric[]{greedy,lookahead};
  Network[] nw=Chord.get(new int[]{1000,2000,3000,4000},128,IDSelection.RANDOM,null);
  Series[] series=Series.generate(nw,metrics,times);
  Plotting.multi(series,metrics,""String_Node_Str"");
}","/** 
 * @param args
 */
public static void main(String[] args){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  int times=1;
  Metric greedy=new Routing(new Greedy());
  Metric lookahead=new Routing(new LookaheadSimple());
  Metric[] metrics=new Metric[]{greedy,lookahead};
  Network[] nw=Chord.get(new int[]{1000,2000,3000,4000},128,0,IDSelection.RANDOM,null);
  Series[] series=Series.generate(nw,metrics,times);
  Plotting.multi(series,metrics,""String_Node_Str"");
}",0.9981308411214952
39783,"@Override public void computeData(Graph graph,Network network,HashMap<String,Metric> metrics){
  this.ra.preprocess(graph);
  Random rand=new Random();
  this.routes=new Route[graph.getNodes().length * this.routesPerNode];
  int index=0;
  for (  Node start : graph.getNodes()) {
    for (int i=0; i < this.routesPerNode; i++) {
      this.routes[index++]=ra.routeToRandomTarget(graph,start.getIndex(),rand);
    }
  }
  RoutingThread[] threads=new RoutingThread[Config.getInt(""String_Node_Str"")];
  for (int i=0; i < threads.length; i++) {
    int start=graph.getNodes().length / threads.length * i;
    int end=graph.getNodes().length / threads.length * (i + 1) - 1;
    if (i == threads.length - 1) {
      end=graph.getNodes().length - 1;
    }
    threads[i]=new RoutingThread(start,end,this.routesPerNode,graph,ra,rand);
    threads[i].start();
  }
  index=0;
  for (  RoutingThread t : threads) {
    try {
      t.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    for (    Route r : t.getRoutes()) {
      this.routes[index++]=r;
    }
  }
  this.hopDistribution=this.computeHopDistribution();
  this.hopDistributionAbsolute=this.computeHopDistributionAbsolute();
  this.betweennessCentrality=this.computeBetweennessCentrality(graph.getNodes().length);
  this.successRate=this.computeSuccessRate();
  this.failureRate=1 - this.successRate;
}","@Override public void computeData(Graph graph,Network network,HashMap<String,Metric> metrics){
  this.ra.preprocess(graph);
  Random rand=new Random();
  this.routes=new Route[graph.getNodes().length * this.routesPerNode];
  int index=0;
  int parallel=Config.getInt(""String_Node_Str"");
  if (parallel > 1) {
    for (    Node start : graph.getNodes()) {
      for (int i=0; i < this.routesPerNode; i++) {
        this.routes[index++]=ra.routeToRandomTarget(graph,start.getIndex(),rand);
      }
    }
  }
 else {
    RoutingThread[] threads=new RoutingThread[parallel];
    for (int i=0; i < threads.length; i++) {
      int start=graph.getNodes().length / threads.length * i;
      int end=graph.getNodes().length / threads.length * (i + 1) - 1;
      if (i == threads.length - 1) {
        end=graph.getNodes().length - 1;
      }
      threads[i]=new RoutingThread(start,end,this.routesPerNode,graph,ra,rand);
      threads[i].start();
    }
    index=0;
    for (    RoutingThread t : threads) {
      try {
        t.join();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      for (      Route r : t.getRoutes()) {
        this.routes[index++]=r;
      }
    }
  }
  this.hopDistribution=this.computeHopDistribution();
  this.hopDistributionAbsolute=this.computeHopDistributionAbsolute();
  this.betweennessCentrality=this.computeBetweennessCentrality(graph.getNodes().length);
  this.successRate=this.computeSuccessRate();
  this.failureRate=1 - this.successRate;
}",0.9313556398758192
39784,"public static SingleList read(Metric metric,String filename){
  if (!(new File(filename)).exists()) {
    return null;
  }
  Filereader fr=new Filereader(filename);
  ArrayList<Single> list=new ArrayList<Single>();
  String line=null;
  String delimiter=Config.get(""String_Node_Str"");
  while ((line=fr.readLine()) != null) {
    if (line.trim().length() == 0) {
      continue;
    }
    String[] temp=line.split(""String_Node_Str"");
    if (temp[1].contains(delimiter)) {
      String[] temp2=temp[1].split(delimiter);
      double[] data=new double[temp2.length];
      for (int i=0; i < temp2.length; i++) {
        data[i]=Double.parseDouble(temp2[i]);
      }
      list.add(new Single(temp[0],Double.parseDouble(temp2[0]),data));
    }
 else {
      list.add(new Single(temp[0],Double.parseDouble(temp[1])));
    }
  }
  return new SingleList(metric,list);
}","public static SingleList read(Metric metric,String filename){
  if (!(new File(filename)).exists()) {
    return null;
  }
  Filereader fr=new Filereader(filename);
  ArrayList<Single> list=new ArrayList<Single>();
  String line=null;
  String delimiter=Config.get(""String_Node_Str"");
  while ((line=fr.readLine()) != null) {
    if (line.trim().length() == 0) {
      continue;
    }
    String[] temp=line.split(""String_Node_Str"");
    if (temp[1].contains(delimiter)) {
      String[] temp2=temp[1].split(delimiter);
      double[] data=new double[temp2.length];
      for (int i=0; i < temp2.length; i++) {
        data[i]=Double.parseDouble(temp2[i]);
      }
      list.add(new Single(temp[0],Double.parseDouble(temp2[0]),data));
    }
 else {
      list.add(new Single(temp[0],Double.parseDouble(temp[1])));
    }
  }
  fr.close();
  return new SingleList(metric,list);
}",0.9919632606199772
39785,"@Override public Node[] sort(Graph g,Random rand){
  Node[] sorted=this.clone(g.getNodes());
  this.roles=(RoleList)g.getProperty(""String_Node_Str"");
  RolesAsc asc=new RolesAsc(this.order,this.roles);
  Arrays.sort(sorted,asc);
  this.randomize(sorted,rand);
  return sorted;
}","@Override public Node[] sort(Graph g,Random rand){
  Node[] sorted=this.clone(g.getNodes());
  this.roles=(RoleList)g.getProperty(""String_Node_Str"" + this.key + ""String_Node_Str"");
  RolesAsc asc=new RolesAsc(this.order,this.roles);
  Arrays.sort(sorted,asc);
  this.randomize(sorted,rand);
  return sorted;
}",0.9471890971039182
39786,"private static boolean generateRun(Series s,int run){
  System.out.println(""String_Node_Str"" + run + ""String_Node_Str"");
  ArrayList<Single> runtimes=new ArrayList<Single>();
  File folder=new File(s.getSeriesFolderRun(run));
  if (folder.exists() && Config.getBoolean(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    return true;
  }
  Timer timer=new Timer(""String_Node_Str"" + s.getNetwork().getDescriptionShort());
  Graph g=s.getNetwork().generate();
  timer.end();
  runtimes.add(new Single(""String_Node_Str"",timer.getRuntime()));
  if (s.getNetwork().getTransformations() != null) {
    for (    Transformation t : s.getNetwork().getTransformations()) {
      if (t.applicable(g)) {
        timer=new Timer(""String_Node_Str"" + t.getDescriptionShort());
        for (int i=0; i < t.getTimes(); i++) {
          g=t.transform(g);
        }
        timer.end();
        runtimes.add(new Single(t.getFolderName(),timer.getRuntime()));
      }
 else {
        System.out.println(""String_Node_Str"" + t.getDescriptionShort() + ""String_Node_Str"");
      }
    }
  }
  if (Config.getBoolean(""String_Node_Str"")) {
    new GtnaGraphWriter().writeWithProperties(g,s.getGraphFilename(run));
  }
  StringBuffer p=new StringBuffer();
  ArrayList<String> properties=new ArrayList<String>(g.getProperties().size());
  for (  String gp : g.getProperties().keySet()) {
    properties.add(gp);
  }
  Collections.sort(properties);
  for (  String gp : properties) {
    if (p.length() == 0) {
      p.append(gp);
    }
 else {
      p.append(""String_Node_Str"" + gp);
    }
  }
  System.out.println(""String_Node_Str"" + p.toString());
  HashMap<String,Metric> metrics=new HashMap<String,Metric>();
  for (  Metric m : s.getMetrics()) {
    folder=new File(s.getMetricFolder(run,m));
    if (!m.applicable(g,s.getNetwork(),metrics)) {
      System.out.println(""String_Node_Str"" + m.getDescriptionShort() + ""String_Node_Str"");
      continue;
    }
    if (!folder.exists()) {
      folder.mkdirs();
    }
    timer=new Timer(""String_Node_Str"" + m.getDescriptionShort());
    m.computeData(g,s.getNetwork(),metrics);
    timer.end();
    runtimes.add(new Single(m.getFolderName(),timer.getRuntime()));
    m.writeData(s.getMetricFolder(run,m));
    SingleList singleList=new SingleList(m,m.getSingles());
    singleList.write(s.getSinglesFilenameRun(run,m));
    metrics.put(m.getKey(),m);
    metrics.put(m.getFolder(),m);
  }
  SingleList rt=new SingleList(null,runtimes);
  rt.write(s.getRuntimesFilenameRun(run));
  return true;
}","private static boolean generateRun(Series s,int run){
  System.out.println(""String_Node_Str"" + run + ""String_Node_Str"");
  ArrayList<Single> runtimes=new ArrayList<Single>();
  File folder=new File(s.getSeriesFolderRun(run));
  if (folder.exists() && Config.getBoolean(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    if (s.getNetwork() instanceof ReadableFolder) {
      ((ReadableFolder)s.getNetwork()).incIndex();
    }
    return true;
  }
  Timer timer=new Timer(""String_Node_Str"" + s.getNetwork().getDescriptionShort());
  Graph g=s.getNetwork().generate();
  timer.end();
  runtimes.add(new Single(""String_Node_Str"",timer.getRuntime()));
  if (s.getNetwork().getTransformations() != null) {
    for (    Transformation t : s.getNetwork().getTransformations()) {
      if (t.applicable(g)) {
        timer=new Timer(""String_Node_Str"" + t.getDescriptionShort());
        for (int i=0; i < t.getTimes(); i++) {
          g=t.transform(g);
        }
        timer.end();
        runtimes.add(new Single(t.getFolderName(),timer.getRuntime()));
      }
 else {
        System.out.println(""String_Node_Str"" + t.getDescriptionShort() + ""String_Node_Str"");
      }
    }
  }
  if (Config.getBoolean(""String_Node_Str"")) {
    new GtnaGraphWriter().writeWithProperties(g,s.getGraphFilename(run));
  }
  StringBuffer p=new StringBuffer();
  ArrayList<String> properties=new ArrayList<String>(g.getProperties().size());
  for (  String gp : g.getProperties().keySet()) {
    properties.add(gp);
  }
  Collections.sort(properties);
  for (  String gp : properties) {
    if (p.length() == 0) {
      p.append(gp);
    }
 else {
      p.append(""String_Node_Str"" + gp);
    }
  }
  System.out.println(""String_Node_Str"" + p.toString());
  HashMap<String,Metric> metrics=new HashMap<String,Metric>();
  for (  Metric m : s.getMetrics()) {
    folder=new File(s.getMetricFolder(run,m));
    if (!m.applicable(g,s.getNetwork(),metrics)) {
      System.out.println(""String_Node_Str"" + m.getDescriptionShort() + ""String_Node_Str"");
      continue;
    }
    if (!folder.exists()) {
      folder.mkdirs();
    }
    timer=new Timer(""String_Node_Str"" + m.getDescriptionShort());
    m.computeData(g,s.getNetwork(),metrics);
    timer.end();
    runtimes.add(new Single(m.getFolderName(),timer.getRuntime()));
    m.writeData(s.getMetricFolder(run,m));
    SingleList singleList=new SingleList(m,m.getSingles());
    singleList.write(s.getSinglesFilenameRun(run,m));
    metrics.put(m.getKey(),m);
    metrics.put(m.getFolder(),m);
  }
  SingleList rt=new SingleList(null,runtimes);
  rt.write(s.getRuntimesFilenameRun(run));
  return true;
}",0.9789534659200618
39787,"public ReadableFolder(String name,String folder,String srcFolder,String extension,Parameter[] parameters,Transformation[] t){
  super(ReadableFolder.key(name,folder),ReadableFolder.getNodes(srcFolder,extension),parameters,t);
  File d=new File(srcFolder);
  if (!d.exists()) {
    this.files=new ArrayList<String>();
  }
 else {
    File[] f=d.listFiles();
    this.files=new ArrayList<String>();
    for (int i=0; i < f.length; i++) {
      if (f[i].getName().endsWith(extension)) {
        this.files.add(f[i].getAbsolutePath());
      }
    }
  }
  this.index=-1;
}","public ReadableFolder(String name,String folder,String srcFolder,String suffix,Parameter[] parameters,Transformation[] t){
  super(ReadableFolder.key(name,folder),ReadableFolder.getNodes(srcFolder,suffix),parameters,t);
  File d=new File(srcFolder);
  if (!d.exists()) {
    this.files=new File[0];
  }
 else {
    this.files=d.listFiles(new SuffixFilenameFilter(suffix));
    Arrays.sort(this.files);
  }
  this.index=0;
}",0.6074672048435923
39788,"private static int getNodes(String srcFolder,String extension){
  File d=new File(srcFolder);
  if (!d.exists()) {
    return 0;
  }
  File[] f=d.listFiles();
  if (f.length == 0) {
    return 0;
  }
  int index=0;
  while (!f[index].getName().endsWith(extension)) {
    index++;
  }
  return new GtnaGraphReader().nodes(f[index].getAbsolutePath());
}","private static int getNodes(String srcFolder,String suffix){
  File d=new File(srcFolder);
  if (!d.exists()) {
    return 0;
  }
  File[] f=d.listFiles(new SuffixFilenameFilter(suffix));
  if (f.length == 0) {
    return 0;
  }
  return new GtnaGraphReader().nodes(f[0].getAbsolutePath());
}",0.7869362363919129
39789,"public Graph generate(){
  if (this.files.size() == 0) {
    return null;
  }
  this.index=(this.index + 1) % this.files.size();
  Graph graph=new GtnaGraphReader().readWithProperties(this.files.get(this.index));
  graph.setName(this.getDescription());
  return graph;
}","public Graph generate(){
  if (this.files.length == 0) {
    return null;
  }
  Graph graph=new GtnaGraphReader().readWithProperties(this.files[this.index].getAbsolutePath());
  graph.setName(this.getDescription());
  this.incIndex();
  return graph;
}",0.4137931034482758
39790,"public ArrayList<String> getFiles(){
  return this.files;
}","public File[] getFiles(){
  return this.files;
}",0.8037383177570093
39791,"@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  double newID=this.getDecision(rand,q);
  if (this.partnerID != -1) {
    ((IQDNode)this.getGraph().getNode(this.partnerID)).setID(this,this.getID());
  }
  this.setID(newID);
}","@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  int newID=this.getDecision(rand,q);
  if (this.partnerID != -1) {
    ((IQDNode)this.getGraph().getNode(this.partnerID)).setID(this,this.getID());
  }
  this.setID(ids[newID]);
}",0.97682119205298
39792,"/** 
 * init IdSpace from a graph g
 * @param g
 */
public void initIds(Graph g){
  GraphProperty[] gp=g.getProperties(""String_Node_Str"");
  GraphProperty p=gp[gp.length - 1];
  DIdentifierSpace idSpaceD=(DIdentifierSpace)p;
  this.ids=new RingIdentifier[g.getNodes().length];
  for (int i=0; i < ids.length; i++) {
    ids[i]=(RingIdentifier)idSpaceD.getPartitions()[i].getRepresentativeID();
  }
}","/** 
 * init IdSpace from a graph g
 * @param g
 */
public void initIds(){
  DIdentifierSpace idSpaceD=this.getIdspace();
  this.ids=new RingIdentifier[idSpaceD.getPartitions().length];
  for (int i=0; i < ids.length; i++) {
    ids[i]=(RingIdentifier)idSpaceD.getPartitions()[i].getRepresentativeID();
  }
}",0.6025459688826026
39793,"public Graph transform(Graph g){
  Random rand=new Random();
  AttackableEmbeddingNode[] nodes=this.generateNodes(g,rand);
  AttackableEmbeddingNode[] selectionSet=this.generateSelectionSet(nodes,rand);
  g.setNodes(nodes);
  GraphProperty[] prop=g.getProperties(""String_Node_Str"");
  DIdentifierSpace idSpace;
  int k=-1;
  for (int i=0; i < prop.length; i++) {
    if (prop[i] instanceof RingIdentifierSpaceSimple) {
      k=i;
    }
  }
  if (k == -1) {
    Transformation idTrans=new RandomRingIDSpaceSimple();
    g=idTrans.transform(g);
    prop=g.getProperties(""String_Node_Str"");
    k=prop.length - 1;
  }
  idSpace=(DIdentifierSpace)prop[k];
  this.setIdspace(idSpace);
  RingIdentifier[] ids=this.getIds();
  for (int i=0; i < ids.length; i++) {
    ((IQDNode)nodes[i]).setID(ids[i].getPosition());
  }
  for (int i=0; i < ids.length; i++) {
    ((IQDNode)nodes[i]).updateNeighbors(rand);
  }
  for (int i=0; i < this.iterations * selectionSet.length; i++) {
    int index=rand.nextInt(selectionSet.length);
    if (selectionSet[index].getOutDegree() > 0) {
      if (this.adjustOneDegree && selectionSet[index].getDegree() == 2) {
        IQDNode node=(IQDNode)selectionSet[index];
        double neighPos=((IQDNode)nodes[node.getOutgoingEdges()[0]]).getID();
        if (Math.abs(this.computeDistance(neighPos,node.getID())) > this.epsilon) {
          double id=neighPos - rand.nextDouble() * this.epsilon;
          if (id < 0)           id++;
          node.setID(id);
        }
      }
 else {
        selectionSet[index].updateNeighbors(rand);
        selectionSet[index].turn(rand);
      }
    }
  }
  for (int i=0; i < ids.length; i++) {
    ids[i].setPosition(((IQDNode)nodes[i]).getID());
  }
  Partition<Double>[] parts=new RingPartitionSimple[g.getNodes().length];
  for (int i=0; i < parts.length; i++) {
    parts[i]=new RingPartitionSimple(ids[i]);
  }
  idSpace.setPartitions(parts);
  return g;
}","public Graph transform(Graph g){
  GraphProperty[] prop=g.getProperties(""String_Node_Str"");
  DIdentifierSpace idSpace;
  int k=-1;
  for (int i=0; i < prop.length; i++) {
    if (prop[i] instanceof RingIdentifierSpaceSimple) {
      k=i;
    }
  }
  if (k == -1) {
    Transformation idTrans=new RandomRingIDSpaceSimple();
    g=idTrans.transform(g);
    prop=g.getProperties(""String_Node_Str"");
    k=prop.length - 1;
  }
  idSpace=(DIdentifierSpace)prop[k];
  this.setIdspace(idSpace);
  Random rand=new Random();
  AttackableEmbeddingNode[] nodes=this.generateNodes(g,rand);
  AttackableEmbeddingNode[] selectionSet=this.generateSelectionSet(nodes,rand);
  g.setNodes(nodes);
  RingIdentifier[] ids=this.getIds();
  for (int i=0; i < ids.length; i++) {
    ((IQDNode)nodes[i]).setID(ids[i].getPosition());
  }
  for (int i=0; i < ids.length; i++) {
    ((IQDNode)nodes[i]).updateNeighbors(rand);
  }
  for (int i=0; i < this.iterations * selectionSet.length; i++) {
    int index=rand.nextInt(selectionSet.length);
    if (selectionSet[index].getOutDegree() > 0) {
      if (this.adjustOneDegree && selectionSet[index].getDegree() == 2) {
        IQDNode node=(IQDNode)selectionSet[index];
        double neighPos=((IQDNode)nodes[node.getOutgoingEdges()[0]]).getID();
        if (Math.abs(this.computeDistance(neighPos,node.getID())) > this.epsilon) {
          double id=neighPos - rand.nextDouble() * this.epsilon;
          if (id < 0)           id++;
          node.setID(id);
        }
      }
 else {
        selectionSet[index].updateNeighbors(rand);
        selectionSet[index].turn(rand);
      }
    }
  }
  for (int i=0; i < ids.length; i++) {
    ids[i].setPosition(((IQDNode)nodes[i]).getID());
  }
  Partition<Double>[] parts=new RingPartitionSimple[g.getNodes().length];
  for (int i=0; i < parts.length; i++) {
    parts[i]=new RingPartitionSimple(ids[i]);
  }
  idSpace.setPartitions(parts);
  return g;
}",0.7632398753894081
39794,"@Override protected AttackableEmbeddingNode[] generateNodes(Graph g,Random rand){
  AttackableEmbeddingNode[] nodes=new AttackableEmbeddingNode[g.getNodes().length];
  HashSet<Integer> map=this.getAttackers(g,rand);
  for (int i=0; i < g.getNodes().length; i++) {
    if (map.contains(i)) {
      nodes[i]=new KleinbergNode(i,g,this,true);
    }
 else {
      nodes[i]=new KleinbergNode(i,g,this,false);
    }
  }
  this.init(g,nodes);
  this.initIds(g);
  return nodes;
}","@Override protected AttackableEmbeddingNode[] generateNodes(Graph g,Random rand){
  AttackableEmbeddingNode[] nodes=new AttackableEmbeddingNode[g.getNodes().length];
  HashSet<Integer> map=this.getAttackers(g,rand);
  for (int i=0; i < g.getNodes().length; i++) {
    if (map.contains(i)) {
      nodes[i]=new KleinbergNode(i,g,this,true);
    }
 else {
      nodes[i]=new KleinbergNode(i,g,this,false);
    }
  }
  this.init(g,nodes);
  this.initIds();
  return nodes;
}",0.9989395546129376
39795,"@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  int newID=this.getDecision(rand,q);
  if (this.partnerID != -1) {
    ((IQDNode)this.getGraph().getNode(this.partnerID)).setID(this,this.getID());
  }
  this.setID(ids[newID]);
}","@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  int newID=this.getDecision(rand,q);
  if (this.partnerID != -1 && q[newID] != this.id) {
    ((IQDNode)this.getGraph().getNode(this.partnerID)).setID(this,this.getID());
  }
  this.setID(ids[newID]);
}",0.9634340222575516
39796,"@Override protected double[][] swap(double callerID,double[] neighborsID,int ttl,Random rand){
  if (this.isAttacker) {
    double[][] res=new double[2][];
    AttackerIQDEmbedding attEmbedding=(AttackerIQDEmbedding)this.embedding;
    if (attEmbedding.getAttackertype() == AttackerIQDEmbedding.AttackerType.CONTRACTION) {
      res[0]=new double[]{this.ask(rand,this)};
      res[1]=new double[this.knownIDs.length];
      for (int i=0; i < res[1].length; i++) {
        res[1][i]=(callerID + close * rand.nextDouble()) % 1;
      }
    }
    if (attEmbedding.getAttackertype() == AttackerIQDEmbedding.AttackerType.DIVERGENCE) {
      res[0]=new double[]{rand.nextDouble()};
      res[1]=new double[this.knownIDs.length];
      for (int i=0; i < res[1].length; i++) {
        res[1][i]=(callerID + close * rand.nextDouble()) % 1;
      }
    }
    if (attEmbedding.getAttackertype() == AttackerIQDEmbedding.AttackerType.REJECTION) {
      res[0]=new double[]{(maxMiddle(neighborsID) + rand.nextDouble() * close) % 1.0};
      res[1]=new double[this.knownIDs.length];
      for (int i=0; i < res[1].length; i++) {
        res[1][i]=(callerID + close * rand.nextDouble()) % 1;
      }
    }
    return res;
  }
 else {
    return super.swap(callerID,neighborsID,ttl,rand);
  }
}","@Override protected double[][] swap(double callerID,double[] neighborsID,int ttl,Random rand){
  if (this.isAttacker) {
    double[][] res=new double[2][];
    AttackerIQDEmbedding attEmbedding=(AttackerIQDEmbedding)this.embedding;
    if (attEmbedding.getAttackertype() == AttackerIQDEmbedding.AttackerType.CONTRACTION) {
      res[0]=new double[]{this.ask(rand,this),-1};
      res[1]=new double[this.knownIDs.length];
      for (int i=0; i < res[1].length; i++) {
        res[1][i]=(callerID + close * rand.nextDouble()) % 1;
      }
    }
    if (attEmbedding.getAttackertype() == AttackerIQDEmbedding.AttackerType.DIVERGENCE) {
      res[0]=new double[]{rand.nextDouble(),-1};
      res[1]=new double[this.knownIDs.length];
      for (int i=0; i < res[1].length; i++) {
        res[1][i]=(callerID + close * rand.nextDouble()) % 1;
      }
    }
    if (attEmbedding.getAttackertype() == AttackerIQDEmbedding.AttackerType.REJECTION) {
      res[0]=new double[]{(maxMiddle(neighborsID) + rand.nextDouble() * close) % 1.0,-1};
      res[1]=new double[this.knownIDs.length];
      for (int i=0; i < res[1].length; i++) {
        res[1][i]=(callerID + close * rand.nextDouble()) % 1;
      }
    }
    return res;
  }
 else {
    return super.swap(callerID,neighborsID,ttl,rand);
  }
}",0.9964884900507218
39797,"public Graph transform(Graph g){
  Random rand=new Random();
  AttackableEmbeddingNode[] nodes=this.generateNodes(g,rand);
  AttackableEmbeddingNode[] selectionSet=this.generateSelectionSet(nodes,rand);
  g.setNodes(nodes);
  GraphProperty[] prop=g.getProperties(""String_Node_Str"");
  DIdentifierSpace idSpace=(DIdentifierSpace)prop[prop.length - 1];
  this.setIdspace(idSpace);
  RingIdentifier[] ids=this.getIds();
  for (int i=0; i < ids.length; i++) {
    ((IQDNode)nodes[i]).setID(ids[i].getPosition());
  }
  for (int i=0; i < this.iterations * selectionSet.length; i++) {
    int index=rand.nextInt(selectionSet.length);
    if (selectionSet[index].getOutDegree() > 0) {
      if (this.adjustOneDegree && selectionSet[index].getDegree() == 2) {
        IQDNode node=(IQDNode)selectionSet[index];
        double neighPos=((IQDNode)nodes[node.getOutgoingEdges()[0]]).getID();
        if (Math.abs(this.computeDistance(neighPos,node.getID())) > this.epsilon) {
          double id=neighPos - rand.nextDouble() * this.epsilon;
          if (id < 0)           id++;
          node.setID(id);
        }
      }
 else {
        selectionSet[index].updateNeighbors(rand);
        selectionSet[index].turn(rand);
      }
    }
  }
  for (int i=0; i < ids.length; i++) {
    ids[i].setPosition(((IQDNode)nodes[i]).getID());
  }
  Partition<Double>[] parts=new RingPartitionSimple[g.getNodes().length];
  for (int i=0; i < parts.length; i++) {
    parts[i]=new RingPartitionSimple(ids[i]);
  }
  idSpace.setPartitions(parts);
  return g;
}","public Graph transform(Graph g){
  Random rand=new Random();
  AttackableEmbeddingNode[] nodes=this.generateNodes(g,rand);
  AttackableEmbeddingNode[] selectionSet=this.generateSelectionSet(nodes,rand);
  g.setNodes(nodes);
  GraphProperty[] prop=g.getProperties(""String_Node_Str"");
  DIdentifierSpace idSpace=(DIdentifierSpace)prop[prop.length - 1];
  this.setIdspace(idSpace);
  RingIdentifier[] ids=this.getIds();
  for (int i=0; i < ids.length; i++) {
    ((IQDNode)nodes[i]).setID(ids[i].getPosition());
  }
  for (int i=0; i < ids.length; i++) {
    ((IQDNode)nodes[i]).updateNeighbors(rand);
  }
  for (int i=0; i < this.iterations * selectionSet.length; i++) {
    int index=rand.nextInt(selectionSet.length);
    if (selectionSet[index].getOutDegree() > 0) {
      if (this.adjustOneDegree && selectionSet[index].getDegree() == 2) {
        IQDNode node=(IQDNode)selectionSet[index];
        double neighPos=((IQDNode)nodes[node.getOutgoingEdges()[0]]).getID();
        if (Math.abs(this.computeDistance(neighPos,node.getID())) > this.epsilon) {
          double id=neighPos - rand.nextDouble() * this.epsilon;
          if (id < 0)           id++;
          node.setID(id);
        }
      }
 else {
        selectionSet[index].updateNeighbors(rand);
        selectionSet[index].turn(rand);
      }
    }
  }
  for (int i=0; i < ids.length; i++) {
    ids[i].setPosition(((IQDNode)nodes[i]).getID());
  }
  Partition<Double>[] parts=new RingPartitionSimple[g.getNodes().length];
  for (int i=0; i < parts.length; i++) {
    parts[i]=new RingPartitionSimple(ids[i]);
  }
  idSpace.setPartitions(parts);
  return g;
}",0.9525316455696202
39798,"@Override public double[] getQuality(Random rand,double[] ids){
  double[] q=new double[ids.length];
  for (int i=0; i < ids.length; i++) {
    q[i]=1;
    for (int j=0; j < this.knownIDs.length; j++) {
      if (ids[i] != this.knownIDs[j])       q[i]=q[i] * this.embedding.computeDistance(this.knownIDs[j],ids[i]);
    }
    if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.SWAPPING) {
      for (int k=0; k < this.swapped.length; k++) {
        if (ids[i] != this.swapped[k])         q[i]=q[i] * this.embedding.computeDistance(this.swapped[k],ids[i]);
      }
    }
    q[i]=1 / q[i];
  }
  return q;
}","@Override public double[] getQuality(Random rand,double[] ids){
  double[] q=new double[ids.length];
  for (int i=0; i < ids.length; i++) {
    q[i]=1;
    for (int j=0; j < this.knownIDs.length; j++) {
      if (ids[i] != this.knownIDs[j]) {
        q[i]=q[i] * this.embedding.computeDistance(ids[i],this.knownIDs[j]);
      }
 else {
        q[i]=q[i] * this.embedding.computeDistance(ids[i],ids[(i + 1) % 2]);
      }
    }
    if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.SWAPPING) {
      for (int k=0; k < this.swapped.length; k++) {
        if (ids[i] != this.swapped[k]) {
          q[i]=q[i] * this.embedding.computeDistance(ids[(i + 1) % 2],this.swapped[k]);
        }
 else {
          q[i]=q[i] * this.embedding.computeDistance(ids[i],ids[(i + 1) % 2]);
        }
      }
    }
    q[i]=1 / q[i];
  }
  return q;
}",0.8337874659400545
39799,"public LMCEmbedding(int iterations,Distance distance,double epsilon,AttackerType type,AttackerSelection selection,int attackercount){
  super(""String_Node_Str"",iterations,IQDEmbedding.IdentifierMethod.ONERANDOM,IQDEmbedding.DecisionMethod.METROPOLIS,distance,epsilon,false,false,type,selection,attackercount);
}","public LMCEmbedding(int iterations,Distance distance,double epsilon,AttackerType type,AttackerSelection selection,int attackercount){
  super(iterations,IQDEmbedding.IdentifierMethod.ONERANDOM,IQDEmbedding.DecisionMethod.METROPOLIS,distance,epsilon,false,false,type,selection,attackercount);
}",0.9701986754966888
39800,"public SwappingEmbedding(int iterations,Distance distance,double epsilon,AttackerType type,AttackerSelection selection,int attackercount){
  super(""String_Node_Str"",iterations,IQDEmbedding.IdentifierMethod.SWAPPING,IQDEmbedding.DecisionMethod.METROPOLIS,distance,epsilon,false,false,type,selection,attackercount);
}","public SwappingEmbedding(int iterations,Distance distance,double epsilon,AttackerType type,AttackerSelection selection,int attackercount){
  super(iterations,IQDEmbedding.IdentifierMethod.SWAPPING,IQDEmbedding.DecisionMethod.METROPOLIS,distance,epsilon,false,false,type,selection,attackercount);
}",0.9705882352941176
39801,"@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  int newID=this.getDecision(rand,q);
  if (this.partnerID != -1 && q[newID] != this.id) {
    ((IQDNode)this.getGraph().getNode(this.partnerID)).setID(this,this.getID());
  }
  this.setID(ids[newID]);
}","@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  int newID=this.getDecision(rand,q);
  if (this.partnerID != -1 && ids[newID] != this.id) {
    ((IQDNode)this.getGraph().getNode(this.partnerID)).setID(this,this.getID());
  }
  this.setID(ids[newID]);
}",0.9938837920489296
39802,"public void setID(double id){
  this.id=id;
}","public void setID(Node caller,double id){
  this.id=id;
}",0.8823529411764706
39803,"@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  this.setID(ids[this.getDecision(rand,q)]);
}","@Override public void turn(Random rand){
  double[] ids=this.getIdentifiers(rand);
  double[] q=this.getQuality(rand,ids);
  double newID=this.getDecision(rand,q);
  if (this.partnerID != -1) {
    ((IQDNode)this.getGraph().getNode(this.partnerID)).setID(this,this.getID());
  }
  this.setID(newID);
}",0.6382978723404256
39804,"protected double[][] swap(double callerID,double[] neighborsID,int ttl,Random rand){
  if (ttl <= 1) {
    double[][] res=new double[2][];
    res[0]=new double[]{this.getID()};
    res[1]=this.knownIDs;
    return res;
  }
 else {
    int[] out=this.getOutgoingEdges();
    return ((IdentifierNode)this.getGraph().getNode(out[rand.nextInt(out.length)])).swap(callerID,neighborsID,ttl - 1,rand);
  }
}","protected double[][] swap(double callerID,double[] neighborsID,int ttl,Random rand){
  if (ttl <= 1) {
    double[][] res=new double[2][];
    res[0]=new double[]{this.getID(),this.getIndex()};
    res[1]=this.knownIDs;
    return res;
  }
 else {
    int[] out=this.getOutgoingEdges();
    return ((IdentifierNode)this.getGraph().getNode(out[rand.nextInt(out.length)])).swap(callerID,neighborsID,ttl - 1,rand);
  }
}",0.980440097799511
39805,"@Override public double[] getIdentifiers(Random rand){
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.ONERANDOM) {
    return new double[]{rand.nextDouble(),this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.TWORANDOM) {
    return new double[]{rand.nextDouble(),rand.nextDouble(),this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.SWAPPING) {
    double[][] ids=this.swap(this.getID(),this.knownIDs,TTL,rand);
    this.swapped=ids[1];
    return new double[]{ids[0][0],this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.RANDNEIGHBOR) {
    double next=this.knownIDs[rand.nextInt(this.knownIDs.length)] - this.embedding.getEpsilon() * rand.nextDouble();
    if (next < 0) {
      next++;
    }
    if (this.embedding.isCheckold()) {
      boolean found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance(knownIDs[i],this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
      if (!found) {
        return new double[]{next};
      }
    }
    return new double[]{next,this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.RANDNEIGHBORMIDDLE) {
    double[] sort=this.knownIDs.clone();
    Arrays.sort(sort);
    int chosen=rand.nextInt(this.knownIDs.length);
    double next=(sort[chosen] + sort[(chosen + 1) % sort.length]) / (double)2 - this.embedding.getEpsilon() * rand.nextDouble();
    if (next < 0) {
      next++;
    }
    if (this.embedding.isCheckold()) {
      boolean found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance((sort[i] + sort[(i + 1) % sort.length]) / (double)2,this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
      if (!found) {
        return new double[]{next};
      }
    }
    return new double[]{next,this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.ALLNEIGHBOR) {
    boolean found=true;
    if (this.embedding.isCheckold()) {
      found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance(knownIDs[i],this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
    }
    double[] res;
    if (found) {
      res=new double[this.knownIDs.length + 1];
      res[res.length - 1]=this.getID();
    }
 else {
      res=new double[this.knownIDs.length];
    }
    for (int i=0; i < this.knownIDs.length; i++) {
      double next=this.knownIDs[i] - this.embedding.getEpsilon() * rand.nextDouble();
      if (next < 0) {
        next++;
      }
      res[i]=next;
    }
    return res;
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.ALLNEIGHBORMIDDLE) {
    double[] sort=this.knownIDs.clone();
    Arrays.sort(sort);
    boolean found=true;
    if (this.embedding.isCheckold()) {
      found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance((sort[i] + sort[(i + 1) % sort.length]) / (double)2,this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
    }
    double[] res;
    if (found) {
      res=new double[this.knownIDs.length + 1];
      res[res.length - 1]=this.getID();
    }
 else {
      res=new double[this.knownIDs.length];
    }
    for (int i=1; i < this.knownIDs.length; i++) {
      res[i]=(sort[i] + sort[i - 1]) / (double)2 - this.embedding.getEpsilon() * rand.nextDouble();
    }
    res[this.knownIDs.length - 1]=(1 + sort[0] + sort[sort.length - 1]) / 2 - this.embedding.getEpsilon() * rand.nextDouble();
    while (res[res.length - 1] > 1) {
      res[res.length - 1]--;
    }
    return res;
  }
  return null;
}","@Override public double[] getIdentifiers(Random rand){
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.ONERANDOM) {
    return new double[]{rand.nextDouble(),this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.TWORANDOM) {
    return new double[]{rand.nextDouble(),rand.nextDouble(),this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.SWAPPING) {
    double[][] ids=this.swap(this.getID(),this.knownIDs,TTL,rand);
    this.partnerID=(int)ids[0][1];
    this.swapped=ids[1];
    return new double[]{ids[0][0],this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.RANDNEIGHBOR) {
    double next=this.knownIDs[rand.nextInt(this.knownIDs.length)] - this.embedding.getEpsilon() * rand.nextDouble();
    if (next < 0) {
      next++;
    }
    if (this.embedding.isCheckold()) {
      boolean found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance(knownIDs[i],this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
      if (!found) {
        return new double[]{next};
      }
    }
    return new double[]{next,this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.RANDNEIGHBORMIDDLE) {
    double[] sort=this.knownIDs.clone();
    Arrays.sort(sort);
    int chosen=rand.nextInt(this.knownIDs.length);
    double next=(sort[chosen] + sort[(chosen + 1) % sort.length]) / (double)2 - this.embedding.getEpsilon() * rand.nextDouble();
    if (next < 0) {
      next++;
    }
    if (this.embedding.isCheckold()) {
      boolean found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance((sort[i] + sort[(i + 1) % sort.length]) / (double)2,this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
      if (!found) {
        return new double[]{next};
      }
    }
    return new double[]{next,this.getID()};
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.ALLNEIGHBOR) {
    boolean found=true;
    if (this.embedding.isCheckold()) {
      found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance(knownIDs[i],this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
    }
    double[] res;
    if (found) {
      res=new double[this.knownIDs.length + 1];
      res[res.length - 1]=this.getID();
    }
 else {
      res=new double[this.knownIDs.length];
    }
    for (int i=0; i < this.knownIDs.length; i++) {
      double next=this.knownIDs[i] - this.embedding.getEpsilon() * rand.nextDouble();
      if (next < 0) {
        next++;
      }
      res[i]=next;
    }
    return res;
  }
  if (this.embedding.getIdMethod() == IQDEmbedding.IdentifierMethod.ALLNEIGHBORMIDDLE) {
    double[] sort=this.knownIDs.clone();
    Arrays.sort(sort);
    boolean found=true;
    if (this.embedding.isCheckold()) {
      found=false;
      for (int i=0; i < knownIDs.length; i++) {
        if (Math.abs(this.embedding.computeDistance((sort[i] + sort[(i + 1) % sort.length]) / (double)2,this.id)) < this.embedding.getEpsilon()) {
          found=true;
          break;
        }
      }
    }
    double[] res;
    if (found) {
      res=new double[this.knownIDs.length + 1];
      res[res.length - 1]=this.getID();
    }
 else {
      res=new double[this.knownIDs.length];
    }
    for (int i=1; i < this.knownIDs.length; i++) {
      res[i]=(sort[i] + sort[i - 1]) / (double)2 - this.embedding.getEpsilon() * rand.nextDouble();
    }
    res[this.knownIDs.length - 1]=(1 + sort[0] + sort[sort.length - 1]) / 2 - this.embedding.getEpsilon() * rand.nextDouble();
    while (res[res.length - 1] > 1) {
      res[res.length - 1]--;
    }
    return res;
  }
  return null;
}",0.9955305835780872
39806,"@Override public double[] getQuality(Random rand,double[] ids){
  double[] res=new double[ids.length];
  double log2=Math.log(2);
  double dist;
  int r;
  int max=((DistanceDiversityEmbedding)this.embedding).getMax();
  double exp=((DistanceDiversityEmbedding)this.embedding).getExponent();
  for (int i=0; i < res.length; i++) {
    Vector<Integer> numb=new Vector<Integer>(this.knownIDs.length);
    for (int j=0; j < this.knownIDs.length; j++) {
      dist=this.embedding.computeDistance(this.knownIDs[j],ids[i]);
      r=(int)(Math.min(Math.ceil(-Math.log(Math.abs(dist)) / log2),max) * Math.signum(dist));
      if (!numb.contains(r)) {
        numb.add(r);
      }
      if (this.embedding.getDistance() == Distance.SIGNED && numb.size() == 2 * (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.RING && numb.size() == (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.CLOCKWISE && numb.size() == max) {
        break;
      }
    }
    for (int j=0; j < numb.size(); j++) {
      for (int k=j + 1; k < numb.size(); k++) {
        res[i]=res[i] + Math.pow(Math.abs(numb.get(j) - numb.get(k)),exp);
      }
    }
  }
  return res;
}","@Override public double[] getQuality(Random rand,double[] ids){
  double[] res=new double[ids.length];
  double log2=Math.log(2);
  double dist;
  int r;
  int max=((DistanceDiversityEmbedding)this.embedding).getMax();
  double exp=((DistanceDiversityEmbedding)this.embedding).getExponent();
  for (int i=0; i < res.length; i++) {
    Vector<Integer> numb=new Vector<Integer>(this.knownIDs.length);
    for (int j=0; j < this.knownIDs.length; j++) {
      if (ids[i] != this.knownIDs[j]) {
        dist=this.embedding.computeDistance(ids[i],this.knownIDs[j]);
      }
 else {
        dist=this.embedding.computeDistance(ids[i],ids[(i + 1) % 2]);
      }
      r=(int)(Math.min(Math.ceil(-Math.log(Math.abs(dist)) / log2),max) * Math.signum(dist));
      if (!numb.contains(r)) {
        numb.add(r);
      }
      if (this.embedding.getDistance() == Distance.SIGNED && numb.size() == 2 * (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.RING && numb.size() == (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.CLOCKWISE && numb.size() == max) {
        break;
      }
    }
    for (int j=0; j < numb.size(); j++) {
      for (int k=j + 1; k < numb.size(); k++) {
        res[i]=res[i] + Math.pow(Math.abs(numb.get(j) - numb.get(k)),exp);
      }
    }
    if (this.embedding.getIdMethod() == IdentifierMethod.SWAPPING) {
      numb=new Vector<Integer>(this.swapped.length);
      for (int j=0; j < this.swapped.length; j++) {
        if (ids[i] != this.swapped[j]) {
          dist=this.embedding.computeDistance(ids[(i + 1) % 2],this.swapped[j]);
        }
 else {
          dist=this.embedding.computeDistance(ids[(i + 1) % 2],ids[i]);
        }
        r=(int)(Math.min(Math.ceil(-Math.log(Math.abs(dist)) / log2),max) * Math.signum(dist));
        if (!numb.contains(r)) {
          numb.add(r);
        }
        if (this.embedding.getDistance() == Distance.SIGNED && numb.size() == 2 * (max - 1)) {
          break;
        }
        if (this.embedding.getDistance() == Distance.RING && numb.size() == (max - 1)) {
          break;
        }
        if (this.embedding.getDistance() == Distance.CLOCKWISE && numb.size() == max) {
          break;
        }
      }
      for (int j=0; j < numb.size(); j++) {
        for (int k=j + 1; k < numb.size(); k++) {
          res[i]=res[i] + Math.pow(Math.abs(numb.get(j) - numb.get(k)),exp);
        }
      }
    }
  }
  return res;
}",0.6312636165577342
39807,"@Override public double[] getQuality(Random rand,double[] ids){
  double[] res=new double[ids.length];
  double log2=Math.log(2);
  double dist;
  int r;
  int max=((RegionCoverageEmbedding)this.embedding).getMax();
  for (int i=0; i < res.length; i++) {
    Vector<Integer> numb=new Vector<Integer>(this.knownIDs.length);
    for (int j=0; j < this.knownIDs.length; j++) {
      dist=this.embedding.computeDistance(this.knownIDs[j],ids[i]);
      r=(int)(Math.min(Math.ceil(-Math.log(Math.abs(dist)) / log2),max) * Math.signum(dist));
      if (!numb.contains(r)) {
        numb.add(r);
      }
      if (this.embedding.getDistance() == Distance.SIGNED && numb.size() == 2 * (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.RING && numb.size() == (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.CLOCKWISE && numb.size() == max) {
        break;
      }
    }
    res[i]=numb.size();
  }
  return res;
}","@Override public double[] getQuality(Random rand,double[] ids){
  double[] res=new double[ids.length];
  double log2=Math.log(2);
  double dist;
  int r;
  int max=((RegionCoverageEmbedding)this.embedding).getMax();
  for (int i=0; i < res.length; i++) {
    Vector<Integer> numb=new Vector<Integer>(this.knownIDs.length);
    for (int j=0; j < this.knownIDs.length; j++) {
      if (ids[i] != this.knownIDs[j]) {
        dist=this.embedding.computeDistance(ids[i],this.knownIDs[j]);
      }
 else {
        dist=this.embedding.computeDistance(ids[i],ids[(i + 1) % 2]);
      }
      r=(int)(Math.min(Math.ceil(-Math.log(Math.abs(dist)) / log2),max) * Math.signum(dist));
      if (!numb.contains(r)) {
        numb.add(r);
      }
      if (this.embedding.getDistance() == Distance.SIGNED && numb.size() == 2 * (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.RING && numb.size() == (max - 1)) {
        break;
      }
      if (this.embedding.getDistance() == Distance.CLOCKWISE && numb.size() == max) {
        break;
      }
    }
    res[i]=numb.size();
    if (this.embedding.getIdMethod() == IdentifierMethod.SWAPPING) {
      numb=new Vector<Integer>(this.swapped.length);
      for (int j=0; j < this.swapped.length; j++) {
        if (ids[i] != this.swapped[j]) {
          dist=this.embedding.computeDistance(ids[(i + 1) % 2],this.swapped[j]);
        }
 else {
          dist=this.embedding.computeDistance(ids[(i + 1) % 2],ids[i]);
        }
        r=(int)(Math.min(Math.ceil(-Math.log(Math.abs(dist)) / log2),max) * Math.signum(dist));
        if (!numb.contains(r)) {
          numb.add(r);
        }
        if (this.embedding.getDistance() == Distance.SIGNED && numb.size() == 2 * (max - 1)) {
          break;
        }
        if (this.embedding.getDistance() == Distance.RING && numb.size() == (max - 1)) {
          break;
        }
        if (this.embedding.getDistance() == Distance.CLOCKWISE && numb.size() == max) {
          break;
        }
      }
      res[i]=res[i] + numb.size();
    }
  }
  return res;
}",0.6073298429319371
39808,"private static Parameter[] combineParameter(IdentifierMethod idMethod,DecisionMethod deMethod,Distance distance,double epsilon,boolean checkold,boolean adjustone,Parameter[] parameters){
  Parameter[] res=new Parameter[parameters.length + 6];
  res[0]=new StringParameter(""String_Node_Str"",idMethod.toString());
  res[1]=new StringParameter(""String_Node_Str"",deMethod.toString());
  res[2]=new DoubleParameter(""String_Node_Str"",epsilon);
  res[3]=new BooleanParameter(""String_Node_Str"",checkold);
  res[4]=new StringParameter(""String_Node_Str"",distance.toString());
  res[5]=new BooleanParameter(""String_Node_Str"",adjustone);
  for (int i=6; i < res.length; i++) {
    res[i]=parameters[i - 4];
  }
  return res;
}","private static Parameter[] combineParameter(IdentifierMethod idMethod,DecisionMethod deMethod,Distance distance,double epsilon,boolean checkold,boolean adjustone,Parameter[] parameters){
  Parameter[] res=new Parameter[parameters.length + 6];
  res[0]=new StringParameter(""String_Node_Str"",idMethod.toString());
  res[1]=new StringParameter(""String_Node_Str"",deMethod.toString());
  res[2]=new DoubleParameter(""String_Node_Str"",epsilon);
  res[3]=new BooleanParameter(""String_Node_Str"",checkold);
  res[4]=new StringParameter(""String_Node_Str"",distance.toString());
  res[5]=new BooleanParameter(""String_Node_Str"",adjustone);
  for (int i=6; i < res.length; i++) {
    res[i]=parameters[i - 6];
  }
  return res;
}",0.9985994397759104
39809,"public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}","public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}",0.8369565217391305
39810,"public ReadableFile(String name,String folder,String filename,Parameter[] parameters,Transformation[] t){
  super(ReadableFile.key(name,folder),GraphReader.nodes(filename),parameters,t);
  this.filename=filename;
}","public ReadableFile(String name,String folder,String filename,Parameter[] parameters,Transformation[] t){
  super(ReadableFile.key(name,folder),new GtnaGraphReader().nodes(filename),parameters,t);
  this.filename=filename;
}",0.9771689497716894
39811,"private static int getNodes(String srcFolder,String extension){
  File d=new File(srcFolder);
  if (!d.exists()) {
    return 0;
  }
  File[] f=d.listFiles();
  if (f.length == 0) {
    return 0;
  }
  int index=0;
  while (!f[index].getName().endsWith(extension)) {
    index++;
  }
  return GraphReader.nodes(f[index].getAbsolutePath());
}","private static int getNodes(String srcFolder,String extension){
  File d=new File(srcFolder);
  if (!d.exists()) {
    return 0;
  }
  File[] f=d.listFiles();
  if (f.length == 0) {
    return 0;
  }
  int index=0;
  while (!f[index].getName().endsWith(extension)) {
    index++;
  }
  return new GtnaGraphReader().nodes(f[index].getAbsolutePath());
}",0.9855491329479767
39812,"public Graph generate(){
  if (this.files.size() == 0) {
    return null;
  }
  this.index=(this.index + 1) % this.files.size();
  Graph graph=GraphReader.readWithProperties(this.files.get(this.index));
  graph.setName(this.getDescription());
  return graph;
}","public Graph generate(){
  if (this.files.size() == 0) {
    return null;
  }
  this.index=(this.index + 1) % this.files.size();
  Graph graph=new GtnaGraphReader().readWithProperties(this.files.get(this.index));
  graph.setName(this.getDescription());
  return graph;
}",0.981132075471698
39813,"/** 
 * @param args
 */
public static void main(String[] args){
  if (false) {
    String filename1=""String_Node_Str"";
    String filename2=""String_Node_Str"";
    Graph g=GraphReader.readOld(filename1);
    GraphWriter.write(g,filename2);
    return;
  }
  if (false) {
    Network nw=new ErdosRenyi(10,3,true,null);
    Transformation cd=new CommunityDetectionLPA(20);
    Transformation ce1=new SimpleCommunityEmbedding1();
    Transformation ce2=new SimpleCommunityEmbedding2();
    Transformation ce_1=new CommunityEmbedding(new OriginalCommunitySorter(),new RelativeSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
    Transformation ce_2=new CommunityEmbedding(new OriginalCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
    Transformation ce_3=new CommunityEmbedding(new NeighborsByEdgesCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
    Graph g=nw.generate();
    g=cd.transform(g);
    g=ce_3.transform(g);
    System.out.println(nw.getDescription());
    return;
  }
  Stats stats=new Stats();
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Metric dd=new DegreeDistribution();
  Metric communities=new Communities();
  Metric routing1=new Routing(new GreedyBacktracking(100));
  Metric routing2=new Routing(new Greedy());
  Metric routing3=new Routing(new DepthFirstGreedy(100));
  Metric idsd=new DIdentifierSpaceDistances(100);
  Metric[] metrics=new Metric[]{dd,communities,idsd};
  Transformation scp=new StrongConnectivityPartition();
  Transformation gcc=new GiantConnectedComponent();
  Transformation cd=new CommunityDetectionLPA(20);
  Transformation re=new RandomRingIDSpaceSimple();
  Transformation lmc=new LMC(1000,LMC.MODE_UNRESTRICTED,0,LMC.DELTA_1_N,0);
  Transformation sw=new Swapping(1000);
  Transformation ce1=new SimpleCommunityEmbedding1();
  Transformation ce2=new SimpleCommunityEmbedding2();
  Transformation ce_1=new CommunityEmbedding(new OriginalCommunitySorter(),new RelativeSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation ce_2=new CommunityEmbedding(new OriginalCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation ce_3=new CommunityEmbedding(new NeighborsByEdgesCommunitySorter(),new RelativeSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation ce_4=new CommunityEmbedding(new NeighborsByEdgesCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation[] tr=new Transformation[]{scp,gcc,cd,re};
  Transformation[] tlmc=new Transformation[]{scp,gcc,cd,re,lmc};
  Transformation[] tsw=new Transformation[]{scp,gcc,cd,re,sw};
  Transformation[] t1=new Transformation[]{scp,gcc,cd,ce1};
  Transformation[] t2=new Transformation[]{scp,gcc,cd,ce2};
  Transformation[] t3=new Transformation[]{scp,gcc,cd,ce_1};
  Transformation[] t4=new Transformation[]{scp,gcc,cd,ce_2};
  Transformation[] t5=new Transformation[]{scp,gcc,cd,ce_3};
  Transformation[] t6=new Transformation[]{scp,gcc,cd,ce_4};
  Map<Transformation[],String> names=new HashMap<Transformation[],String>();
  names.put(tr,""String_Node_Str"");
  names.put(tlmc,""String_Node_Str"");
  names.put(tsw,""String_Node_Str"");
  names.put(t1,""String_Node_Str"");
  names.put(t3,""String_Node_Str"");
  names.put(t2,""String_Node_Str"");
  names.put(t4,""String_Node_Str"");
  names.put(t5,""String_Node_Str"");
  names.put(t6,""String_Node_Str"");
  String folder=""String_Node_Str"";
  Transformation[][] t=new Transformation[][]{tr,tlmc,tsw,t1,t3,t2,t4,t5,t6};
  t=new Transformation[][]{tr,tsw,t1,t3};
  String spi=""String_Node_Str"";
  String wot=""String_Node_Str"";
  boolean GET=true;
  int TIMES=2;
  int networkType=3;
  int nodes=2000;
  Network[] nw=new Network[t.length];
  String name=null;
  for (int i=0; i < t.length; i++) {
    if (networkType == 1) {
      nw[i]=new ReadableFile(""String_Node_Str"",""String_Node_Str"",spi,t[i]);
      name=""String_Node_Str"";
    }
    if (networkType == 2) {
      nw[i]=new ReadableFile(""String_Node_Str"",""String_Node_Str"",wot,t[i]);
      name=""String_Node_Str"";
    }
    if (networkType == 3) {
      nw[i]=CommunityEmbeddingsTest.nwCC(nodes,t[i]);
      name=""String_Node_Str"";
    }
    nw[i]=new DescriptionWrapper(nw[i],name + ""String_Node_Str"" + names.get(t[i]));
  }
  Series[] s=GET ? Series.get(nw,metrics) : Series.generate(nw,metrics,TIMES);
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Plotting.multi(s,metrics,name + ""String_Node_Str"" + folder,Type.average,Style.linespoint);
  stats.end();
}","/** 
 * @param args
 */
public static void main(String[] args){
  if (false) {
    String filename1=""String_Node_Str"";
    String filename2=""String_Node_Str"";
    Graph g=new GtnaV1GraphReader().read(filename1);
    new GtnaGraphWriter().write(g,filename2);
    return;
  }
  if (false) {
    Network nw=new ErdosRenyi(10,3,true,null);
    Transformation cd=new CommunityDetectionLPA(20);
    Transformation ce1=new SimpleCommunityEmbedding1();
    Transformation ce2=new SimpleCommunityEmbedding2();
    Transformation ce_1=new CommunityEmbedding(new OriginalCommunitySorter(),new RelativeSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
    Transformation ce_2=new CommunityEmbedding(new OriginalCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
    Transformation ce_3=new CommunityEmbedding(new NeighborsByEdgesCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
    Graph g=nw.generate();
    g=cd.transform(g);
    g=ce_3.transform(g);
    System.out.println(nw.getDescription());
    return;
  }
  Stats stats=new Stats();
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Metric dd=new DegreeDistribution();
  Metric communities=new Communities();
  Metric routing1=new Routing(new GreedyBacktracking(100));
  Metric routing2=new Routing(new Greedy());
  Metric routing3=new Routing(new DepthFirstGreedy(100));
  Metric idsd=new DIdentifierSpaceDistances(100);
  Metric[] metrics=new Metric[]{dd,communities,idsd};
  Transformation scp=new StrongConnectivityPartition();
  Transformation gcc=new GiantConnectedComponent();
  Transformation cd=new CommunityDetectionLPA(20);
  Transformation re=new RandomRingIDSpaceSimple();
  Transformation lmc=new LMC(1000,LMC.MODE_UNRESTRICTED,0,LMC.DELTA_1_N,0);
  Transformation sw=new Swapping(1000);
  Transformation ce1=new SimpleCommunityEmbedding1();
  Transformation ce2=new SimpleCommunityEmbedding2();
  Transformation ce_1=new CommunityEmbedding(new OriginalCommunitySorter(),new RelativeSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation ce_2=new CommunityEmbedding(new OriginalCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation ce_3=new CommunityEmbedding(new NeighborsByEdgesCommunitySorter(),new RelativeSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation ce_4=new CommunityEmbedding(new NeighborsByEdgesCommunitySorter(),new EqualSizeIdSpacePartitioner(0.0),new OriginalNodeSorter(),new EqualSizeCommunityPartitioner(),1.0,true);
  Transformation[] tr=new Transformation[]{scp,gcc,cd,re};
  Transformation[] tlmc=new Transformation[]{scp,gcc,cd,re,lmc};
  Transformation[] tsw=new Transformation[]{scp,gcc,cd,re,sw};
  Transformation[] t1=new Transformation[]{scp,gcc,cd,ce1};
  Transformation[] t2=new Transformation[]{scp,gcc,cd,ce2};
  Transformation[] t3=new Transformation[]{scp,gcc,cd,ce_1};
  Transformation[] t4=new Transformation[]{scp,gcc,cd,ce_2};
  Transformation[] t5=new Transformation[]{scp,gcc,cd,ce_3};
  Transformation[] t6=new Transformation[]{scp,gcc,cd,ce_4};
  Map<Transformation[],String> names=new HashMap<Transformation[],String>();
  names.put(tr,""String_Node_Str"");
  names.put(tlmc,""String_Node_Str"");
  names.put(tsw,""String_Node_Str"");
  names.put(t1,""String_Node_Str"");
  names.put(t3,""String_Node_Str"");
  names.put(t2,""String_Node_Str"");
  names.put(t4,""String_Node_Str"");
  names.put(t5,""String_Node_Str"");
  names.put(t6,""String_Node_Str"");
  String folder=""String_Node_Str"";
  Transformation[][] t=new Transformation[][]{tr,tlmc,tsw,t1,t3,t2,t4,t5,t6};
  t=new Transformation[][]{tr,tsw,t1,t3};
  String spi=""String_Node_Str"";
  String wot=""String_Node_Str"";
  boolean GET=true;
  int TIMES=2;
  int networkType=3;
  int nodes=2000;
  Network[] nw=new Network[t.length];
  String name=null;
  for (int i=0; i < t.length; i++) {
    if (networkType == 1) {
      nw[i]=new ReadableFile(""String_Node_Str"",""String_Node_Str"",spi,t[i]);
      name=""String_Node_Str"";
    }
    if (networkType == 2) {
      nw[i]=new ReadableFile(""String_Node_Str"",""String_Node_Str"",wot,t[i]);
      name=""String_Node_Str"";
    }
    if (networkType == 3) {
      nw[i]=CommunityEmbeddingsTest.nwCC(nodes,t[i]);
      name=""String_Node_Str"";
    }
    nw[i]=new DescriptionWrapper(nw[i],name + ""String_Node_Str"" + names.get(t[i]));
  }
  Series[] s=GET ? Series.get(nw,metrics) : Series.generate(nw,metrics,TIMES);
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Plotting.multi(s,metrics,name + ""String_Node_Str"" + folder,Type.average,Style.linespoint);
  stats.end();
}",0.9975540553761862
39814,"@Override public int toInt(){
switch (this.type) {
case COMMON:
    return 0;
case BRIDGE:
  return 1;
case STAR:
return 2;
case HUB_COMMON:
return 3;
case HUB_STAR:
return 4;
case HUB_BRIDGE:
return 5;
}
return -1;
}","@Override public int toInt(){
switch (this.type) {
case COMMON:
    return 0;
case BRIDGE:
  return 1;
case STAR:
return 2;
case HUB_COMMON:
return 3;
case HUB_BRIDGE:
return 4;
case HUB_STAR:
return 5;
}
return -1;
}",0.8847926267281107
39815,"@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  if (!applicable(g,n,m))   return;
  results=new int[n.getNodes()][Roles.Role.values().length];
  resultsR2=new int[n.getNodes()][Roles2.Role2.values().length];
  GraphProperty[] p=g.getProperties(""String_Node_Str"");
  countRoles=p.length;
  System.out.println(""String_Node_Str"" + p.length + ""String_Node_Str"");
  Roles r;
  for (  GraphProperty akt : p) {
    r=(Roles)akt;
    for (int i=0; i < n.getNodes(); i++) {
      results[i][r.getRoleOfNode(i).ordinal()]++;
    }
  }
  p=g.getProperties(""String_Node_Str"");
  countRoles2=p.length;
  Roles2 r2;
  for (  GraphProperty akt : p) {
    r2=(Roles2)akt;
    for (int i=0; i < n.getNodes(); i++) {
      resultsR2[i][r2.getRoleOfNode(i).ordinal()]++;
    }
  }
  erg=new TreeSet<MaxRolePercRole>();
  for (int i=0; i < results.length; i++) {
    erg.add(new MaxRolePercRole(results[i],countRoles,i));
  }
  erg2=new TreeSet<MaxRolePercRole2>();
  for (int i=0; i < results.length; i++) {
    erg2.add(new MaxRolePercRole2(resultsR2[i],countRoles2,i));
  }
}","@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  if (!applicable(g,n,m))   return;
  results=new int[n.getNodes()][Roles.Role.values().length];
  resultsR2=new int[n.getNodes()][Roles2.Role2.values().length];
  GraphProperty[] p=g.getProperties(""String_Node_Str"");
  countRoles=p.length;
  System.out.println(""String_Node_Str"" + p.length + ""String_Node_Str"");
  Roles r;
  for (  GraphProperty akt : p) {
    r=(Roles)akt;
    for (int i=0; i < g.getNodes().length; i++) {
      results[i][r.getRoleOfNode(i).ordinal()]++;
    }
  }
  p=g.getProperties(""String_Node_Str"");
  countRoles2=p.length;
  Roles2 r2;
  for (  GraphProperty akt : p) {
    r2=(Roles2)akt;
    for (int i=0; i < g.getNodes().length; i++) {
      resultsR2[i][r2.getRoleOfNode(i).ordinal()]++;
    }
  }
  erg=new TreeSet<MaxRolePercRole>();
  for (int i=0; i < results.length; i++) {
    erg.add(new MaxRolePercRole(results[i],countRoles,i));
  }
  erg2=new TreeSet<MaxRolePercRole2>();
  for (int i=0; i < results.length; i++) {
    erg2.add(new MaxRolePercRole2(resultsR2[i],countRoles2,i));
  }
}",0.9918032786885246
39816,"@Override public boolean writeData(String folder){
  System.out.println(folder);
  boolean ret=true;
  ret&=DataWriter.writeWithIndex(toValueArray(erg),getKey() + ""String_Node_Str"",folder);
  for (  Role akt : Roles.Role.values()) {
    System.out.println(""String_Node_Str"" + akt);
    System.out.println(""String_Node_Str"" + erg.size());
    System.out.println(""String_Node_Str"" + filter(erg,akt).size());
    System.out.println(""String_Node_Str"" + toValueArray(filter(erg,akt)).length);
    for (int i=0; i < toValueArray(filter(erg,akt)).length; i++)     System.out.println(i + ""String_Node_Str"" + toValueArray(filter(erg,akt))[i]);
    ret&=DataWriter.writeWithIndex(toValueArray(filter(erg,akt)),getKey() + ""String_Node_Str"" + akt.name(),folder);
  }
  ret&=DataWriter.writeWithIndex(calcAverages(erg),getKey() + ""String_Node_Str"",folder);
  ret&=DataWriter.writeWithIndex(toValueArray2(erg2),getKey() + ""String_Node_Str"",folder);
  for (  Role2 akt : Roles2.Role2.values())   ret&=DataWriter.writeWithIndex(toValueArray2(filter2(erg2,akt)),getKey() + ""String_Node_Str"" + akt.name(),folder);
  ret&=DataWriter.writeWithIndex(calcAverages2(erg2),getKey() + ""String_Node_Str"",folder);
  return ret;
}","@Override public boolean writeData(String folder){
  boolean ret=true;
  ret&=DataWriter.writeWithIndex(toValueArray(erg),getKey() + ""String_Node_Str"",folder);
  for (  Role akt : Roles.Role.values()) {
    System.out.println(""String_Node_Str"" + akt);
    System.out.println(""String_Node_Str"" + erg.size());
    System.out.println(""String_Node_Str"" + filter(erg,akt).size());
    System.out.println(""String_Node_Str"" + toValueArray(filter(erg,akt)).length);
    for (int i=0; i < toValueArray(filter(erg,akt)).length; i++)     System.out.println(i + ""String_Node_Str"" + toValueArray(filter(erg,akt))[i]);
    ret&=DataWriter.writeWithIndex(toValueArray(filter(erg,akt)),getKey() + ""String_Node_Str"" + akt.name(),folder);
  }
  ret&=DataWriter.writeWithIndex(calcAverages(erg),getKey() + ""String_Node_Str"",folder);
  ret&=DataWriter.writeWithIndex(toValueArray2(erg2),getKey() + ""String_Node_Str"",folder);
  for (  Role2 akt : Roles2.Role2.values())   ret&=DataWriter.writeWithIndex(toValueArray2(filter2(erg2,akt)),getKey() + ""String_Node_Str"" + akt.name(),folder);
  ret&=DataWriter.writeWithIndex(calcAverages2(erg2),getKey() + ""String_Node_Str"",folder);
  return ret;
}",0.987363100252738
39817,"/** 
 * @param node
 * @param communities
 * @return participation coefficient z
 */
private double getParticipationCoefficient(Node node,Communities communities){
  HashMap<Community,Integer> counter=new HashMap<Community,Integer>();
  for (  int dst : node.getOutgoingEdges()) {
    Community community=communities.getCommunityOfNode(dst);
    int count=counter.containsKey(community) ? counter.get(community) + 1 : 1;
    counter.put(community,count);
  }
  double psum=0;
  for (  Community community : counter.keySet()) {
    psum+=Math.pow(counter.get(community) / node.getOutDegree(),2);
  }
  return 1.0 - psum;
}","/** 
 * @param node
 * @param communities
 * @return participation coefficient z
 */
private double getParticipationCoefficient(Node node,Communities communities){
  HashMap<Community,Integer> counter=new HashMap<Community,Integer>();
  for (  int dst : node.getOutgoingEdges()) {
    Community community=communities.getCommunityOfNode(dst);
    int count=counter.containsKey(community) ? counter.get(community) + 1 : 1;
    counter.put(community,count);
  }
  double psum=0;
  for (  Community community : counter.keySet()) {
    psum+=Math.pow((double)counter.get(community) / (double)node.getOutDegree(),2);
  }
  return 1.0 - psum;
}",0.9872813990461048
39818,"/** 
 * add a node to the subgraph and change inDegree accordingly
 * @param added
 * @param degree
 * @param n
 * @param inDegree
 * @param nodes
 * @return
 */
private Vector<Integer> addNode(boolean[] added,int[] degree,Node n,Vector<Vector<Integer>> inDegree,Node[] nodes){
  int[] out=n.getIncomingEdges();
  Vector<Integer> neighbors=new Vector<Integer>();
  added[n.getIndex()]=true;
  for (int i=0; i < out.length; i++) {
    if (added[out[i]] && degree[out[i]] < this.maxDegree && neighbors.size() < this.maxDegree) {
      neighbors.add(out[i]);
      degree[out[i]]++;
      if (degree[out[i]] == this.maxDegree) {
        int[] o=nodes[out[i]].getOutgoingEdges();
        for (int k=0; k < o.length; k++) {
          if (!added[o[k]] && degree[o[k]] > 0) {
            inDegree.get(degree[o[k]]).removeElement(o[k]);
            degree[o[k]]--;
            if (degree[o[k]] > 0)             inDegree.get(degree[o[k]]).add(o[k]);
          }
        }
      }
    }
    if (!added[out[i]] && degree[out[i]] < this.maxDegree && degree[out[i]] > 0) {
      inDegree.get(degree[out[i]]).removeElement(out[i]);
      degree[out[i]]++;
      inDegree.get(degree[out[i]]).add(out[i]);
    }
  }
  return neighbors;
}","/** 
 * add a node to the subgraph and change inDegree accordingly
 * @param added
 * @param degree
 * @param n
 * @param inDegree
 * @param nodes
 * @return
 */
private Vector<Integer> addNode(boolean[] added,int[] degree,Node n,Vector<Vector<Integer>> inDegree,Node[] nodes){
  int[] out=n.getIncomingEdges();
  Vector<Integer> neighbors=new Vector<Integer>();
  added[n.getIndex()]=true;
  for (int i=0; i < out.length; i++) {
    if (added[out[i]] && degree[out[i]] < this.maxDegree && neighbors.size() < this.maxDegree) {
      neighbors.add(out[i]);
      degree[out[i]]++;
      if (degree[out[i]] == this.maxDegree) {
        int[] o=nodes[out[i]].getOutgoingEdges();
        for (int k=0; k < o.length; k++) {
          if (!added[o[k]] && degree[o[k]] > 0) {
            inDegree.get(degree[o[k]]).removeElement(o[k]);
            degree[o[k]]--;
            if (degree[o[k]] > 0)             inDegree.get(degree[o[k]]).add(o[k]);
          }
        }
      }
    }
    if (!added[out[i]] && degree[out[i]] < this.maxDegree) {
      inDegree.get(degree[out[i]]).removeElement(out[i]);
      degree[out[i]]++;
      inDegree.get(degree[out[i]]).add(out[i]);
    }
  }
  return neighbors;
}",0.990909090909091
39819,"@Override public Graph transform(Graph g){
  Node[] nodesOld=g.getNodes();
  boolean[] added=new boolean[nodesOld.length];
  int[] degree=new int[nodesOld.length];
  Random rand=new Random();
  int[] out;
  int maxdeg=nodesOld[this.getMaxDegree(nodesOld,rand)].getOutDegree();
  if (this.maxDegree < maxdeg) {
    maxdeg=this.maxDegree;
  }
  int[] start=this.getStartIndex(nodesOld,rand);
  HashMap<Integer,Integer> newIndex=new HashMap<Integer,Integer>(Math.min(nodesOld.length,this.include));
  HashMap<Integer,Vector<Integer>> neighs=new HashMap<Integer,Vector<Integer>>(nodesOld.length);
  Vector<Vector<Integer>> inDegree=new Vector<Vector<Integer>>(maxdeg + 1);
  for (int i=0; i < maxdeg + 1; i++) {
    inDegree.add(new Vector<Integer>());
  }
  int count=start.length;
  Vector<Integer> list;
  for (int i=0; i < start.length; i++) {
    added[start[i]]=true;
    degree[start[i]]=start.length - 1;
    Vector<Integer> neighbors=new Vector<Integer>();
    for (int k=0; k < i; k++) {
      neighbors.add(start[k]);
    }
    neighs.put(start[i],neighbors);
  }
  for (int i=0; i < start.length; i++) {
    if (degree[start[i]] == this.maxDegree) {
    }
 else {
      out=nodesOld[start[i]].getOutgoingEdges();
      for (int j=0; j < out.length; j++) {
        if (!added[out[j]] && degree[out[j]] < this.maxDegree) {
          inDegree.get(degree[out[j]]).removeElement(out[j]);
          degree[out[j]]++;
          inDegree.get(degree[out[j]]).add(out[j]);
        }
      }
    }
  }
  while (count < this.include && count < nodesOld.length) {
    int chosen=this.getNext(inDegree,rand);
    if (chosen == -1) {
      break;
    }
    neighs.put(chosen,this.addNode(added,degree,nodesOld[chosen],inDegree,nodesOld));
    count++;
  }
  Node[] nodesNew=new Node[count];
  Edges edges=new Edges(nodesNew,g.computeNumberOfEdges());
  int c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      nodesNew[c]=nodesOld[i];
      newIndex.put(i,c);
      nodesNew[c].setIndex(c);
      c++;
    }
  }
  c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      list=neighs.get(i);
      for (int j=0; j < list.size(); j++) {
        edges.add(c,newIndex.get(list.get(j)));
        edges.add(newIndex.get(list.get(j)),c);
      }
      c++;
    }
  }
  edges.fill();
  g.setNodes(nodesNew);
  return g;
}","@Override public Graph transform(Graph g){
  Node[] nodesOld=g.getNodes();
  boolean[] added=new boolean[nodesOld.length];
  int[] degree=new int[nodesOld.length];
  Random rand=new Random();
  int[] out;
  int maxdeg=nodesOld[this.getMaxDegree(nodesOld,rand)].getDegree();
  if (this.maxDegree < maxdeg) {
    maxdeg=this.maxDegree;
  }
  int[] start=this.getStartIndex(nodesOld,rand);
  HashMap<Integer,Integer> newIndex=new HashMap<Integer,Integer>(Math.min(nodesOld.length,this.include));
  HashMap<Integer,Vector<Integer>> neighs=new HashMap<Integer,Vector<Integer>>(nodesOld.length);
  Vector<Vector<Integer>> inDegree=new Vector<Vector<Integer>>(maxdeg + 1);
  for (int i=0; i < maxdeg + 1; i++) {
    inDegree.add(new Vector<Integer>());
  }
  int count=start.length;
  Vector<Integer> list;
  for (int i=0; i < start.length; i++) {
    added[start[i]]=true;
    System.out.println(""String_Node_Str"" + start[i]);
    degree[start[i]]=start.length - 1;
    Vector<Integer> neighbors=new Vector<Integer>();
    for (int k=0; k < i; k++) {
      neighbors.add(start[k]);
    }
    neighs.put(start[i],neighbors);
  }
  for (int i=0; i < start.length; i++) {
    if (degree[start[i]] == this.maxDegree) {
    }
 else {
      out=nodesOld[start[i]].getOutgoingEdges();
      for (int j=0; j < out.length; j++) {
        if (!added[out[j]] && degree[out[j]] < this.maxDegree) {
          inDegree.get(degree[out[j]]).removeElement(out[j]);
          degree[out[j]]++;
          inDegree.get(degree[out[j]]).add(out[j]);
        }
      }
    }
  }
  while (count < this.include && count < nodesOld.length) {
    int chosen=this.getNext(inDegree,rand);
    if (chosen == -1) {
      break;
    }
    neighs.put(chosen,this.addNode(added,degree,nodesOld[chosen],inDegree,nodesOld));
    count++;
  }
  Node[] nodesNew=new Node[count];
  Edges edges=new Edges(nodesNew,g.computeNumberOfEdges());
  int c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      nodesNew[c]=nodesOld[i];
      newIndex.put(i,c);
      nodesNew[c].setIndex(c);
      c++;
    }
  }
  c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      list=neighs.get(i);
      for (int j=0; j < list.size(); j++) {
        edges.add(c,newIndex.get(list.get(j)));
        edges.add(newIndex.get(list.get(j)),c);
      }
      c++;
    }
  }
  edges.fill();
  g.setNodes(nodesNew);
  return g;
}",0.9879518072289156
39820,"/** 
 * @param include: nodes that are MAXIMALLY included in subgraph
 * @param minDegree: minimum number of links a node has to have to nodes that are already included in the subgraph to be added
 * @param maxDegree: maximum degree a node in the subgraph is allowed to have
 * @param startNodes: size of the initial clique
 * @param selection: selection of the initial clique:a) RANDOM: choose a clique randomly from all cliques in the graph b) OUTDEGREE: choose the clique for which the number of outgoing links is highest
 */
public BuildSubGraphMax(int include,int minDegree,int maxDegree,int startNodes,String selection){
  super(""String_Node_Str"",new Parameter[]{new IntParameter(""String_Node_Str"",include),new IntParameter(""String_Node_Str"",minDegree),new IntParameter(""String_Node_Str"",maxDegree),new IntParameter(""String_Node_Str"",startNodes),new StringParameter(""String_Node_Str"",selection)});
  this.selection=selection;
  this.minDegree=Math.max(minDegree,1);
  this.maxDegree=maxDegree;
  this.include=include;
  this.startNodes=startNodes;
}","/** 
 * @param include: nodes that are MAXIMALLY included in subgraph
 * @param minDegree: minimum number of links a node has to have to nodes that are already included in the subgraph to be added
 * @param maxDegree: maximum degree a node in the subgraph is allowed to have
 * @param startNodes: size of the initial clique
 * @param selection: selection of the initial clique:a) RANDOM: choose a clique randomly from all cliques in the graph b) OUTDEGREE: choose the clique for which the number of outgoing links is highest
 */
public BuildSubGraphMax(int include,int minDegree,int maxDegree,int startNodes,String selection){
  super(""String_Node_Str"",new Parameter[]{new IntParameter(""String_Node_Str"",include),new IntParameter(""String_Node_Str"",minDegree),new IntParameter(""String_Node_Str"",maxDegree),new IntParameter(""String_Node_Str"",startNodes),new StringParameter(""String_Node_Str"",selection)});
  this.selection=selection;
  this.minDegree=Math.max(minDegree,1);
  this.maxDegree=maxDegree;
  this.include=include;
  this.startNodes=startNodes;
  if (maxDegree < startNodes - 1 || minDegree > maxDegree) {
    throw new IllegalArgumentException(""String_Node_Str"" + maxDegree);
  }
}",0.9394479073909172
39821,"@Override public Graph transform(Graph g){
  Node[] nodesOld=g.getNodes();
  boolean[] added=new boolean[nodesOld.length];
  Vector<Vector<Integer>> in=new Vector<Vector<Integer>>();
  HashMap<Integer,Integer> newIndex=new HashMap<Integer,Integer>();
  HashMap<Integer,Integer> inDegree=new HashMap<Integer,Integer>();
  HashMap<Integer,Vector<Integer>> neighs=new HashMap<Integer,Vector<Integer>>();
  Random rand=new Random();
  int[] out;
  int[] start=this.getStartIndex(nodesOld,rand);
  Integer inDeg;
  Vector<Integer> list;
  for (int s=0; s < start.length; s++) {
    added[start[s]]=true;
    list=new Vector<Integer>();
    neighs.put(start[s],list);
    inDegree.put(start[s],0);
  }
  Vector<Integer> f;
  for (int s=0; s < start.length; s++) {
    out=nodesOld[start[s]].getOutgoingEdges();
    for (int i=0; i < out.length; i++) {
      f=neighs.get(out[i]);
      if (f == null) {
        f=new Vector<Integer>();
        neighs.put(out[i],f);
      }
      if (f.size() < this.maxDegree) {
        f.add(start[s]);
      }
      if (!added[out[i]]) {
        inDeg=inDegree.remove(out[i]);
        if (inDeg == null) {
          inDeg=0;
        }
        inDeg++;
        inDegree.put(out[i],inDeg);
        if (inDeg > 1) {
          list=in.get(inDeg - 2);
          list.removeElement(out[i]);
        }
        if (inDeg > in.size()) {
          list=new Vector<Integer>();
          in.add(list);
        }
 else {
          list=in.get(inDeg - 1);
        }
        list.add(out[i]);
      }
    }
  }
  int count=start.length;
  int max;
  Node last;
  while (count < this.include && count < nodesOld.length) {
    max=in.size() - 1;
    while (max > -1 && in.get(max).size() == 0) {
      max--;
    }
    if (max < this.minDegree - 1) {
      break;
    }
    int s=in.get(max).remove(rand.nextInt(in.get(max).size()));
    last=nodesOld[s];
    added[s]=true;
    list=neighs.get(s);
    for (int i=0; i < list.size(); i++) {
      f=neighs.get(list.get(i));
      f.add(s);
      if (f.size() == this.maxDegree) {
        out=nodesOld[list.get(i)].getOutgoingEdges();
        for (int k=0; k < out.length; k++) {
          if (!added[out[k]]) {
            Vector<Integer> cur=neighs.get(out[k]);
            cur.removeElement(list.get(i));
            System.out.println(cur.size() + ""String_Node_Str"" + in.size());
            in.get(cur.size()).removeElement(out[k]);
            if (cur.size() > 0)             in.get(cur.size() - 1).add(out[k]);
            inDeg=inDegree.remove(out[k]);
            inDeg--;
            inDegree.put(out[i],inDeg);
          }
        }
      }
    }
    out=last.getOutgoingEdges();
    count++;
    for (int i=0; i < out.length; i++) {
      f=neighs.get(out[i]);
      if (f == null) {
        f=new Vector<Integer>();
        neighs.put(out[i],f);
      }
      if (f.size() < this.maxDegree) {
        f.add(s);
      }
      if (!added[out[i]]) {
        inDeg=inDegree.remove(out[i]);
        if (inDeg == null) {
          inDeg=0;
        }
        inDeg++;
        inDegree.put(out[i],inDeg);
        if (inDeg > 1) {
          list=in.get(inDeg - 2);
          list.removeElement(out[i]);
        }
        if (inDeg > in.size()) {
          list=new Vector<Integer>();
          in.add(list);
        }
 else {
          list=in.get(inDeg - 1);
        }
        list.add(out[i]);
      }
    }
  }
  Node[] nodesNew=new Node[count];
  System.out.println(""String_Node_Str"" + count);
  Edges edges=new Edges(nodesNew,g.computeNumberOfEdges());
  int c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      nodesNew[c]=nodesOld[i];
      newIndex.put(i,c);
      c++;
    }
  }
  System.out.println(""String_Node_Str"" + c);
  c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      list=neighs.get(i);
      for (int j=0; j < list.size(); j++) {
        edges.add(c,newIndex.get(list.get(j)));
      }
      c++;
    }
  }
  edges.fill();
  g.setNodes(nodesNew);
  return g;
}","@Override public Graph transform(Graph g){
  Node[] nodesOld=g.getNodes();
  boolean[] added=new boolean[nodesOld.length];
  int[] degree=new int[nodesOld.length];
  Random rand=new Random();
  int[] out;
  int maxdeg=nodesOld[this.getMaxDegree(nodesOld,rand)].getOutDegree();
  if (this.maxDegree < maxdeg) {
    maxdeg=this.maxDegree;
  }
  int[] start=this.getStartIndex(nodesOld,rand);
  HashMap<Integer,Integer> newIndex=new HashMap<Integer,Integer>(Math.min(nodesOld.length,this.include));
  HashMap<Integer,Vector<Integer>> neighs=new HashMap<Integer,Vector<Integer>>(nodesOld.length);
  Vector<Vector<Integer>> inDegree=new Vector<Vector<Integer>>(maxdeg + 1);
  for (int i=0; i < maxdeg + 1; i++) {
    inDegree.add(new Vector<Integer>());
  }
  int count=start.length;
  Vector<Integer> list;
  for (int i=0; i < start.length; i++) {
    added[start[i]]=true;
    degree[start[i]]=start.length - 1;
    Vector<Integer> neighbors=new Vector<Integer>();
    for (int k=0; k < i; k++) {
      neighbors.add(start[k]);
    }
    neighs.put(start[i],neighbors);
  }
  for (int i=0; i < start.length; i++) {
    if (degree[start[i]] == this.maxDegree) {
    }
 else {
      out=nodesOld[start[i]].getOutgoingEdges();
      for (int j=0; j < out.length; j++) {
        if (!added[out[j]] && degree[out[j]] < this.maxDegree) {
          inDegree.get(degree[out[j]]).removeElement(out[j]);
          degree[out[j]]++;
          inDegree.get(degree[out[j]]).add(out[j]);
        }
      }
    }
  }
  while (count < this.include && count < nodesOld.length) {
    while (inDegree.get(maxdeg).size() > 0) {
      int chosen=inDegree.get(maxdeg).remove(rand.nextInt(inDegree.get(maxdeg).size()));
      neighs.put(chosen,this.addNode(added,degree,nodesOld[chosen],inDegree,nodesOld));
      count++;
    }
    int max=maxdeg - 1;
    while (max > 0 && inDegree.get(max).size() == 0)     max--;
    if (max < this.minDegree) {
      break;
    }
    int chosen=inDegree.get(max).remove(rand.nextInt(inDegree.get(max).size()));
    neighs.put(chosen,this.addNode(added,degree,nodesOld[chosen],inDegree,nodesOld));
    count++;
  }
  Node[] nodesNew=new Node[count];
  Edges edges=new Edges(nodesNew,g.computeNumberOfEdges());
  int c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      nodesNew[c]=nodesOld[i];
      newIndex.put(i,c);
      nodesNew[c].setIndex(c);
      c++;
    }
  }
  c=0;
  for (int i=0; i < added.length; i++) {
    if (added[i]) {
      list=neighs.get(i);
      for (int j=0; j < list.size(); j++) {
        edges.add(c,newIndex.get(list.get(j)));
        edges.add(newIndex.get(list.get(j)),c);
      }
      c++;
    }
  }
  edges.fill();
  g.setNodes(nodesNew);
  return g;
}",0.3049380874235416
39822,"private Graph generateDirected(){
  int[] sequenceIn=new int[this.getNodes()];
  int[] sequenceOut=new int[this.getNodes()];
  Random rand=new Random(System.currentTimeMillis());
  int sumIn=0, sumOut=0;
  int k=0;
  for (int i=0; i < sequenceIn.length; i++) {
    double bound=rand.nextDouble();
    k=0;
    while (this.cdfIn[k] < bound) {
      k++;
    }
    sequenceIn[i]=k;
    sumIn=sumIn + k;
    bound=rand.nextDouble();
    k=0;
    while (this.cdfOut[k] < bound) {
      k++;
    }
    sequenceOut[i]=k;
    sumOut=sumOut + k;
  }
  while (sumOut > sumIn) {
    boolean out=rand.nextBoolean();
    if (out) {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceOut[c] < 2) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceOut[c]--;
    }
 else {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceIn[c] >= cdfIn.length - 1) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceIn[c]++;
    }
  }
  while (sumOut < sumIn) {
    boolean out=rand.nextBoolean();
    if (out) {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceOut[c] >= cdfOut.length) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceOut[c]++;
    }
 else {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceIn[c] < 2) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceIn[c]--;
    }
  }
  return (new ArbitraryDegreeSequence(this.getNodes(),this.getName(),sequenceIn,sequenceOut,null)).generate();
}","private Graph generateDirected(){
  int[] sequenceIn=new int[this.getNodes()];
  int[] sequenceOut=new int[this.getNodes()];
  Random rand=new Random(System.currentTimeMillis());
  int sumIn=0, sumOut=0;
  int k=0;
  for (int i=0; i < sequenceIn.length; i++) {
    double bound=rand.nextDouble();
    k=0;
    while (this.cdfIn[k] < bound) {
      k++;
    }
    sequenceIn[i]=k;
    sumIn=sumIn + k;
    bound=rand.nextDouble();
    k=0;
    while (this.cdfOut[k] < bound) {
      k++;
    }
    sequenceOut[i]=k;
    sumOut=sumOut + k;
  }
  while (sumOut > sumIn) {
    boolean out=rand.nextBoolean();
    if (out) {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceOut[c] < 2) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceOut[c]--;
      sumOut--;
    }
 else {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceIn[c] >= cdfIn.length - 1) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceIn[c]++;
      sumIn++;
    }
  }
  while (sumOut < sumIn) {
    boolean out=rand.nextBoolean();
    if (out) {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceOut[c] >= cdfOut.length) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceOut[c]++;
      sumOut++;
    }
 else {
      int c=rand.nextInt(sequenceIn.length);
      while (sequenceIn[c] < 2) {
        c=rand.nextInt(sequenceIn.length);
      }
      sequenceIn[c]--;
      sumIn--;
    }
  }
  return (new ArbitraryDegreeSequence(this.getNodes(),this.getName(),sequenceIn,sequenceOut,null)).generate();
}",0.9797913950456324
39823,"private Graph generateDirected(){
  Graph graph=new Graph(this.getDescription());
  Random rand=new Random(System.currentTimeMillis());
  Node[] nodes=Node.init(this.getNodes(),graph);
  int sum=0;
  for (int j=0; j < this.sequenceIn.length; j++) {
    sum=sum + this.sequenceIn[j];
  }
  Edges edges=new Edges(nodes,sum);
  Vector<Integer> stubsOut=new Vector<Integer>(sum);
  Vector<Integer> stubsIn=new Vector<Integer>(sum);
  for (int i=0; i < this.sequenceOut.length; i++) {
    for (int j=0; j < this.sequenceOut[i]; j++) {
      stubsOut.add(i);
    }
    for (int j=0; j < this.sequenceIn[i]; j++) {
      stubsIn.add(i);
    }
  }
  if (stubsIn.size() != stubsOut.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int src, dst;
  while (stubsIn.size() > 0 && stubsOut.size() > 0) {
    src=stubsOut.remove(stubsOut.size() - 1);
    dst=stubsIn.remove(rand.nextInt(stubsIn.size()));
    edges.add(src,dst);
  }
  graph.setNodes(nodes);
  return graph;
}","private Graph generateDirected(){
  Graph graph=new Graph(this.getDescription());
  Random rand=new Random(System.currentTimeMillis());
  Node[] nodes=Node.init(this.getNodes(),graph);
  int sum=0;
  for (int j=0; j < this.sequenceIn.length; j++) {
    sum=sum + this.sequenceIn[j];
  }
  Edges edges=new Edges(nodes,sum);
  Vector<Integer> stubsOut=new Vector<Integer>(sum);
  Vector<Integer> stubsIn=new Vector<Integer>(sum);
  for (int i=0; i < this.sequenceOut.length; i++) {
    for (int j=0; j < this.sequenceOut[i]; j++) {
      stubsOut.add(i);
    }
    for (int j=0; j < this.sequenceIn[i]; j++) {
      stubsIn.add(i);
    }
  }
  if (stubsIn.size() != stubsOut.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int src, dst;
  while (stubsIn.size() > 0 && stubsOut.size() > 0) {
    src=stubsOut.remove(stubsOut.size() - 1);
    dst=stubsIn.remove(rand.nextInt(stubsIn.size()));
    edges.add(src,dst);
  }
  edges.fill();
  graph.setNodes(nodes);
  return graph;
}",0.9919517102615694
39824,"public PowerLawRandomGraph(int nodes,double alphaOut,double alphaIn,int minDegreeOut,int minDegreeIn,int maxDegreeOut,int maxDegreeIn,Transformation[] t,boolean directed){
  super(""String_Node_Str"",nodes,new Parameter[]{new StringParameter(""String_Node_Str"",""String_Node_Str"" + alphaOut + ""String_Node_Str""+ alphaIn+ ""String_Node_Str""),new StringParameter(""String_Node_Str"",""String_Node_Str"" + minDegreeOut + ""String_Node_Str""+ minDegreeIn+ ""String_Node_Str""),new StringParameter(""String_Node_Str"",""String_Node_Str"" + maxDegreeOut + ""String_Node_Str""+ maxDegreeIn+ ""String_Node_Str""),new BooleanParameter(""String_Node_Str"",directed)},t);
  this.alpha=new double[]{alphaOut,alphaIn};
  this.max=new int[]{maxDegreeOut,maxDegreeOut};
  this.min=new int[]{minDegreeIn,minDegreeIn};
  this.directed=directed;
}","public PowerLawRandomGraph(int nodes,double alphaOut,double alphaIn,int minDegreeOut,int minDegreeIn,int maxDegreeOut,int maxDegreeIn,Transformation[] t){
  super(""String_Node_Str"",nodes,new Parameter[]{new StringParameter(""String_Node_Str"",""String_Node_Str"" + alphaOut + ""String_Node_Str""+ alphaIn+ ""String_Node_Str""),new StringParameter(""String_Node_Str"",""String_Node_Str"" + minDegreeOut + ""String_Node_Str""+ minDegreeIn+ ""String_Node_Str""),new StringParameter(""String_Node_Str"",""String_Node_Str"" + maxDegreeOut + ""String_Node_Str""+ maxDegreeIn+ ""String_Node_Str""),new BooleanParameter(""String_Node_Str"",true)},t);
  this.alpha=new double[]{alphaOut,alphaIn};
  this.max=new int[]{maxDegreeOut,maxDegreeOut};
  this.min=new int[]{minDegreeIn,minDegreeIn};
  this.directed=true;
}",0.9741650913673598
39825,"public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}","public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}",0.7660256410256411
39826,"public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}","public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}",0.7660256410256411
39827,"public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}","public static String key(String name,String folder){
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",name);
  Config.overwrite(""String_Node_Str"" + folder + ""String_Node_Str"",folder);
  return ""String_Node_Str"" + folder;
}",0.7660256410256411
39828,"public Network(String key,int nodes,Parameter[] parameters,Transformation[] transformations){
  super(key,Network.add(parameters,nodes));
  this.nodes=nodes;
  this.transformations=transformations;
}","public Network(String key,int nodes,Parameter[] parameters,Transformation[] transformations){
  super(key,Network.add(parameters,nodes));
  this.nodes=nodes;
  this.transformations=transformations;
  if (this.transformations == null) {
    this.transformations=new Transformation[0];
  }
}",0.8155737704918032
39829,"/** 
 * Places the nodes uniformly in the field.
 */
@Override public Point[] place(int count,Point center,double maxX,double maxY){
  Random rnd=new Random();
  double dx=0;
  double dy=0;
  int i=0;
  Point[] ret=new Point[count];
  if (getInCenter()) {
    ret[0]=new Point(center.getX(),center.getY());
    i++;
  }
  int tries;
  while (i < count) {
    tries=0;
    do {
      dx=center.getX() + width * (rnd.nextDouble());
      dy=center.getY() + height * (rnd.nextDouble());
      tries++;
    }
 while ((dx < 0 || dx > maxX || dy < 0 || dy > maxY) && tries <= maxTries);
    if ((dx < 0 || dx > maxX || dy < 0 || dy > maxY))     throw new PlacementNotPossibleException(""String_Node_Str"" + i + ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ count+ ""String_Node_Str""+ getInCenter());
    ret[i]=new Point(dx,dy);
    i++;
  }
  return ret;
}","/** 
 * Places the nodes uniformly in the field.
 */
@Override public Point[] place(int count,Point center,double maxX,double maxY){
  Random rnd=new Random();
  double dx=0;
  double dy=0;
  int i=0;
  Point[] ret=new Point[count];
  if (getInCenter()) {
    ret[0]=new Point(center.getX(),center.getY());
    i++;
  }
  int tries;
  while (i < count) {
    tries=0;
    do {
      double x=(this.width / 2.0) * (rnd.nextBoolean() ? 1.0 : -1.0);
      double y=(this.width / 2.0) * (rnd.nextBoolean() ? 1.0 : -1.0);
      dx=center.getX() + x * (rnd.nextDouble());
      dy=center.getY() + y * (rnd.nextDouble());
      tries++;
    }
 while ((dx < 0 || dx > maxX || dy < 0 || dy > maxY) && tries <= maxTries);
    if ((dx < 0 || dx > maxX || dy < 0 || dy > maxY))     throw new PlacementNotPossibleException(""String_Node_Str"" + i + ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ count+ ""String_Node_Str""+ getInCenter());
    ret[i]=new Point(dx,dy);
    i++;
  }
  return ret;
}",0.9185737094199042
39830,"private double calculateModularity(Graph g,gtna.communities.Communities communities){
  double E=0;
  for (  Community c : communities.getCommunities()) {
    for (    int aktNode : c.getNodes()) {
      E+=g.getNode(aktNode).getOutDegree();
    }
  }
  double Q=0;
  for (  Community c : communities.getCommunities()) {
    double IC=0;
    double OC=0;
    for (    int src : c.getNodes()) {
      for (      int dst : g.getNode(src).getOutgoingEdges()) {
        if (communities.getCommunityOfNode(dst) == c) {
          IC++;
        }
 else {
          OC++;
        }
      }
    }
    Q+=IC / E - Math.pow((2 * IC + OC) / (2 * E),2);
  }
  return Q;
}","private double calculateModularity(Graph g,gtna.communities.Communities communities){
  double E=g.getEdges().size();
  double Q=0;
  for (  Community c : communities.getCommunities()) {
    double IC=0;
    double OC=0;
    for (    int node : c.getNodes()) {
      for (      int out : g.getNode(node).getOutgoingEdges()) {
        if (communities.getCommunityOfNode(out).getIndex() == c.getIndex()) {
          IC++;
        }
 else {
          OC++;
        }
      }
      for (      int in : g.getNode(node).getIncomingEdges()) {
        if (communities.getCommunityOfNode(in).getIndex() != c.getIndex()) {
          OC++;
        }
      }
    }
    Q+=IC / E - Math.pow((IC + OC) / E,2);
  }
  return Q;
}",0.7060539752005836
39831,"public static void main(String[] args){
  Transformation t_lpa=new CommunityDetectionLPA();
  Transformation t_dq=new CommunityDetectionDeltaQ();
  Transformation t_cc=new CommunityColors();
  Transformation t_r=new RolesGeneration();
  Transformation t_r2=new Roles2Generation(true);
  int[] nodes=new int[]{1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
  Transformation[] t1=new Transformation[]{t_lpa,t_r,t_r2};
  Transformation[] t2=new Transformation[]{t_dq,t_r,t_r2};
  Network nw1=new DescriptionWrapper(Resilience.communityNew(2000,t1),""String_Node_Str"");
  Network nw2=new DescriptionWrapper(Resilience.communityNew(2000,t2),""String_Node_Str"");
  Network[] nw=new Network[]{nw1,nw2};
  Network[] nw_lpa=new Network[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    nw_lpa[i]=new DescriptionWrapper(Resilience.communityNew(nodes[i],t1),""String_Node_Str"" + nodes[i]);
  }
  Network[] nw_dq=new Network[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    nw_dq[i]=new DescriptionWrapper(Resilience.communityNew(nodes[i],t2),""String_Node_Str"" + nodes[i]);
  }
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Series[] s_lpa=Series.generate(nw_lpa,20);
  Series[] s_dq=Series.generate(nw_dq,20);
  Plot.multiAvg(s_lpa,""String_Node_Str"");
  Plot.multiAvg(s_dq,""String_Node_Str"");
  Plot.singlesAvg(new Series[][]{s_lpa,s_dq},""String_Node_Str"");
}","public static void main(String[] args){
  Transformation t_lpa=new CommunityDetectionLPA();
  Transformation t_dq=new CommunityDetectionDeltaQ();
  Transformation t_cc=new CommunityColors();
  Transformation t_r=new RolesGeneration();
  Transformation t_r2=new Roles2Generation(true);
  int[] nodes=new int[]{1000,2000,3000,4000,5000,6000,7000};
  Transformation[] t1=new Transformation[]{t_lpa,t_r,t_r2};
  Transformation[] t2=new Transformation[]{t_dq,t_r,t_r2};
  Network nw1=new DescriptionWrapper(Resilience.communityNew(2000,t1),""String_Node_Str"");
  Network nw2=new DescriptionWrapper(Resilience.communityNew(2000,t2),""String_Node_Str"");
  Network[] nw=new Network[]{nw1,nw2};
  Network[] nw_lpa=new Network[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    nw_lpa[i]=new DescriptionWrapper(Resilience.communityNew(nodes[i],t1),""String_Node_Str"" + nodes[i]);
  }
  Network[] nw_dq=new Network[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    nw_dq[i]=new DescriptionWrapper(Resilience.communityNew(nodes[i],t2),""String_Node_Str"" + nodes[i]);
  }
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Series[] s_lpa=Series.generate(nw_lpa,1);
  Series[] s_dq=Series.generate(nw_dq,1);
  Plot.multiAvg(s_lpa,""String_Node_Str"");
  Plot.singlesAvg(s_lpa,""String_Node_Str"");
  Plot.multiAvg(s_dq,""String_Node_Str"");
  Plot.singlesAvg(new Series[][]{s_lpa,s_dq},""String_Node_Str"");
}",0.9700255102040816
39832,"/** 
 * Places the nodes uniformly in the field.
 */
@Override public Point[] place(int count,Point center,double maxX,double maxY){
  Random rnd=new Random();
  double dx=0;
  double dy=0;
  int i=0;
  Point[] ret=new Point[count];
  if (getInCenter()) {
    ret[0]=new Point(center.getX(),center.getY());
    i++;
  }
  int tries;
  while (i < count) {
    tries=0;
    do {
      double x=(this.width / 2.0) * (rnd.nextBoolean() ? 1.0 : -1.0);
      double y=(this.width / 2.0) * (rnd.nextBoolean() ? 1.0 : -1.0);
      dx=center.getX() + x * (rnd.nextDouble());
      dy=center.getY() + y * (rnd.nextDouble());
      tries++;
    }
 while ((dx < 0 || dx > maxX || dy < 0 || dy > maxY) && tries <= maxTries);
    if ((dx < 0 || dx > maxX || dy < 0 || dy > maxY))     throw new PlacementNotPossibleException(""String_Node_Str"" + i + ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ count+ ""String_Node_Str""+ getInCenter());
    ret[i]=new Point(dx,dy);
    i++;
  }
  return ret;
}","/** 
 * Places the nodes uniformly in the field.
 */
@Override public Point[] place(int count,Point center,double maxX,double maxY){
  Random rnd=new Random();
  double dx=0;
  double dy=0;
  int i=0;
  Point[] ret=new Point[count];
  if (getInCenter()) {
    ret[0]=new Point(center.getX(),center.getY());
    i++;
  }
  int tries;
  while (i < count) {
    tries=0;
    do {
      double x=(this.width / 2.0) * (rnd.nextBoolean() ? 1.0 : -1.0);
      double y=(this.height / 2.0) * (rnd.nextBoolean() ? 1.0 : -1.0);
      dx=center.getX() + x * (rnd.nextDouble());
      dy=center.getY() + y * (rnd.nextDouble());
      tries++;
    }
 while ((dx < 0 || dx > maxX || dy < 0 || dy > maxY) && tries <= maxTries);
    if ((dx < 0 || dx > maxX || dy < 0 || dy > maxY))     throw new PlacementNotPossibleException(""String_Node_Str"" + i + ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ count+ ""String_Node_Str""+ getInCenter());
    ret[i]=new Point(dx,dy);
    i++;
  }
  return ret;
}",0.9945300845350572
39833,"public static void main(String[] args){
  Stats stats=new Stats();
  boolean deltaQ=true;
  boolean lpa=true;
  boolean random=true;
  boolean community=true;
  int[] Nodes=new int[]{3000};
  int times=10;
  for (  int nodes : Nodes) {
    if (random) {
      Network nw=CommunityDetection.random(nodes);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,false,lpa);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,deltaQ,false);
    }
    if (community) {
      Network nw=CommunityDetection.community(nodes);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,false,lpa);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,deltaQ,false);
    }
  }
  stats.end();
}","public static void main(String[] args){
  Stats stats=new Stats();
  boolean deltaQ=true;
  boolean lpa=true;
  boolean random=true;
  boolean community=false;
  boolean communityNew=false;
  int[] Nodes=new int[]{2000};
  int times=5;
  for (  int nodes : Nodes) {
    if (random) {
      Network nw=CommunityDetection.random(nodes);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,false,lpa);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,deltaQ,false);
    }
    if (community) {
      Network nw=CommunityDetection.community(nodes);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,false,lpa);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,deltaQ,false);
    }
    if (communityNew) {
      Network nw=CommunityDetection.communityNew(nodes);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,false,lpa);
      CommunityDetection.plot(nw,""String_Node_Str"" + nodes,times,deltaQ,false);
    }
  }
  stats.end();
}",0.8342989571263036
39834,"@Override public int getNextD(int current,DIdentifier target,Random rand,Node[] nodes){
  double currentDist=this.idSpaceD.getPartitions()[current].distance(target);
  double minDist=this.idSpaceD.getMaxDistance();
  int minNode=-1;
  for (  int out : nodes[current].getOutgoingEdges()) {
    double dist=this.pD[out].distance(target);
    if (dist < minDist && !done[out]) {
      minDist=dist;
      minNode=out;
    }
  }
  if (minNode == -1 && from.containsKey(current)) {
    return from.get(current);
  }
  if (minNode == -1) {
    return minNode;
  }
  if (!from.containsKey(minNode)) {
    from.put(minNode,current);
  }
  if (minDist >= currentDist) {
    done[current]=true;
  }
  return minNode;
}","@Override public int getNextD(int current,DIdentifier target,Random rand,Node[] nodes){
  double currentDist=this.idSpaceD.getPartitions()[current].distance(target);
  double minDist=this.idSpaceD.getMaxDistance();
  int minNode=-1;
  for (  int out : nodes[current].getOutgoingEdges()) {
    double dist=this.pD[out].distance(target);
    if (dist < minDist && !done[out]) {
      minDist=dist;
      minNode=out;
    }
  }
  if (minNode == -1 && from.containsKey(current)) {
    done[current]=true;
    return from.get(current);
  }
  if (minNode == -1) {
    return minNode;
  }
  if (!from.containsKey(minNode)) {
    from.put(minNode,current);
  }
  if (minDist >= currentDist) {
    done[current]=true;
  }
  return minNode;
}",0.9833333333333332
39835,"@Override public int getNextD(int current,DIdentifier target,Random rand,Node[] nodes){
  double currentDist=this.idSpaceD.getPartitions()[current].distance(target);
  double minDist=this.idSpaceD.getMaxDistance();
  int minNode=-1;
  for (  int out : nodes[current].getOutgoingEdges()) {
    double dist=this.pD[out].distance(target);
    if (dist < minDist && !done[out]) {
      minDist=dist;
      minNode=out;
    }
  }
  if (minNode == -1 && from.containsKey(current)) {
    done[current]=true;
    return from.get(current);
  }
  if (minNode == -1) {
    return minNode;
  }
  if (!from.containsKey(minNode)) {
    from.put(minNode,current);
  }
  if (minDist >= currentDist) {
    done[current]=true;
  }
  return minNode;
}","@Override public int getNextD(int current,DIdentifier target,Random rand,Node[] nodes){
  if (!from.containsKey(current)) {
    from.put(current,-1);
  }
  double currentDist=this.idSpaceD.getPartitions()[current].distance(target);
  double minDist=this.idSpaceD.getMaxDistance();
  int minNode=-1;
  for (  int out : nodes[current].getOutgoingEdges()) {
    double dist=this.pD[out].distance(target);
    if (dist < minDist && !done[out]) {
      minDist=dist;
      minNode=out;
    }
  }
  if (minNode == -1 && from.containsKey(current)) {
    done[current]=true;
    return from.get(current);
  }
  if (minNode == -1) {
    return minNode;
  }
  if (!from.containsKey(minNode)) {
    from.put(minNode,current);
  }
  if (minDist >= currentDist) {
    done[current]=true;
  }
  return minNode;
}",0.9568627450980391
39836,"public String compareValue(Network nw){
  for (int i=0; i < this.configValues.length; i++) {
    if (!this.configValues[i].equals(nw.configValues()[i])) {
      return this.configValues[i];
    }
  }
  if (this.nodes != nw.nodes()) {
    return ""String_Node_Str"" + this.nodes;
  }
  if (this.ra != null && nw.routingAlgorithm() != null) {
    String compared=this.ra.compareValue(nw.routingAlgorithm());
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  for (int i=0; i < Math.min(this.t.length,nw.transformations().length); i++) {
    String compared=this.t[i].compareValue(nw.transformations()[i]);
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  return Config.get(""String_Node_Str"");
}","public String compareValue(Network nw){
  if (this.configValues.length != nw.configValues().length) {
    return ""String_Node_Str"";
  }
  for (int i=0; i < this.configValues.length; i++) {
    if (!this.configValues[i].equals(nw.configValues()[i])) {
      return this.configValues[i];
    }
  }
  if (this.nodes != nw.nodes()) {
    return ""String_Node_Str"" + this.nodes;
  }
  if (this.ra != null && nw.routingAlgorithm() != null) {
    String compared=this.ra.compareValue(nw.routingAlgorithm());
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  for (int i=0; i < Math.min(this.t.length,nw.transformations().length); i++) {
    String compared=this.t[i].compareValue(nw.transformations()[i]);
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  return Config.get(""String_Node_Str"");
}",0.9418886198547216
39837,"public String compareName(Network nw,String key){
  for (int i=0; i < this.configValues.length; i++) {
    if (!this.configValues[i].equals(nw.configValues()[i])) {
      return Config.get(this.key + ""String_Node_Str"" + this.configKeys[i]+ ""String_Node_Str""+ key);
    }
  }
  if (this.nodes != nw.nodes()) {
    return Config.get(""String_Node_Str"" + key);
  }
  if (this.ra != null && nw.routingAlgorithm() != null) {
    String compared=this.ra.compareName(nw.routingAlgorithm(),key);
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  for (int i=0; i < Math.min(this.t.length,nw.transformations().length); i++) {
    String compared=this.t[i].compareName(nw.transformations()[i],key);
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  return Config.get(""String_Node_Str"");
}","public String compareName(Network nw,String key){
  if (this.configValues.length != nw.configValues().length) {
    return ""String_Node_Str"";
  }
  for (int i=0; i < this.configValues.length; i++) {
    if (!this.configValues[i].equals(nw.configValues()[i])) {
      return Config.get(this.key + ""String_Node_Str"" + this.configKeys[i]+ ""String_Node_Str""+ key);
    }
  }
  if (this.nodes != nw.nodes()) {
    return Config.get(""String_Node_Str"" + key);
  }
  if (this.ra != null && nw.routingAlgorithm() != null) {
    String compared=this.ra.compareName(nw.routingAlgorithm(),key);
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  for (int i=0; i < Math.min(this.t.length,nw.transformations().length); i++) {
    String compared=this.t[i].compareName(nw.transformations()[i],key);
    if (!compared.equals(Config.get(""String_Node_Str""))) {
      return compared;
    }
  }
  return Config.get(""String_Node_Str"");
}",0.9473684210526316
39838,"@Override public Graph transform(Graph graph){
  Random rand=new Random();
  ChordIdentifierSpace idSpace=new ChordIdentifierSpace(this.bits);
  for (int r=0; r < this.realities; r++) {
    ChordIdentifier[] ids=new ChordIdentifier[graph.getNodes().length];
    if (this.uniform) {
      BigInteger stepSize=idSpace.getModulus().divide(new BigInteger(""String_Node_Str"" + graph.getNodes().length));
      for (int i=0; i < ids.length; i++) {
        ids[i]=new ChordIdentifier(idSpace,stepSize.multiply(new BigInteger(""String_Node_Str"" + i)));
      }
    }
 else {
      HashSet<String> idSet=new HashSet<String>();
      for (int i=0; i < ids.length; i++) {
        ChordIdentifier id=(ChordIdentifier)idSpace.randomID(rand);
        while (idSet.contains(id.toString())) {
          id=(ChordIdentifier)idSpace.randomID(rand);
        }
        ids[i]=id;
        idSet.add(id.toString());
      }
    }
    Arrays.sort(ids);
    ChordPartition[] partitions=new ChordPartition[ids.length];
    partitions[0]=new ChordPartition(ids[ids.length - 1],ids[0]);
    for (int i=1; i < partitions.length; i++) {
      partitions[i]=new ChordPartition(ids[i - 1],ids[i]);
    }
    idSpace.setPartitions(partitions);
    graph.addProperty(graph.getNextKey(""String_Node_Str""),idSpace);
  }
  return graph;
}","@Override public Graph transform(Graph graph){
  Random rand=new Random();
  for (int r=0; r < this.realities; r++) {
    ChordIdentifierSpace idSpace=new ChordIdentifierSpace(this.bits);
    ChordIdentifier[] ids=new ChordIdentifier[graph.getNodes().length];
    if (this.uniform) {
      BigInteger stepSize=idSpace.getModulus().divide(new BigInteger(""String_Node_Str"" + graph.getNodes().length));
      for (int i=0; i < ids.length; i++) {
        ids[i]=new ChordIdentifier(idSpace,stepSize.multiply(new BigInteger(""String_Node_Str"" + i)));
      }
    }
 else {
      HashSet<String> idSet=new HashSet<String>();
      for (int i=0; i < ids.length; i++) {
        ChordIdentifier id=(ChordIdentifier)idSpace.randomID(rand);
        while (idSet.contains(id.toString())) {
          id=(ChordIdentifier)idSpace.randomID(rand);
        }
        ids[i]=id;
        idSet.add(id.toString());
      }
    }
    Arrays.sort(ids);
    ChordPartition[] partitions=new ChordPartition[ids.length];
    partitions[0]=new ChordPartition(ids[ids.length - 1],ids[0]);
    for (int i=1; i < partitions.length; i++) {
      partitions[i]=new ChordPartition(ids[i - 1],ids[i]);
    }
    idSpace.setPartitions(partitions);
    graph.addProperty(graph.getNextKey(""String_Node_Str""),idSpace);
  }
  return graph;
}",0.946923076923077
39839,"private void firstWalk(int node){
  np[node]=new NodeParameter();
  np[node].d=0;
  double s=0;
  int[] sons=tree.getChildren(node);
  for (  int k : sons) {
    firstWalk(k);
    np[node].d=Math.max(np[node].d,np[k].r);
    np[k].alpha=Math.atan(np[k].r / (np[node].d + np[k].r));
    s+=np[k].alpha;
  }
  adjustChildren(node,s);
  setRadius(node);
}","private void firstWalk(int node){
  np[node]=new NodeParameter();
  np[node].d=0;
  double s=0;
  int[] sons=tree.getChildren(node);
  for (  int k : sons) {
    firstWalk(k);
    np[node].d=Math.max(np[node].d,np[k].r);
  }
  for (  int k : sons) {
    np[k].alpha=Math.atan(np[k].r / (np[node].d + np[k].r));
    s+=np[k].alpha;
  }
  adjustChildren(node,s);
  setRadius(node);
}",0.96043656207367
39840,"private void secondWalk(int node,double x,double y,double lambda,double theta){
  nodePositionsX[node]=x;
  nodePositionsY[node]=y;
  double dd=lambda * np[node].d;
  double gamma=theta + Math.PI;
  double freeSpace=np[node].f / (tree.getChildren(node).length + 1);
  double previous=0;
  double currAlpha, currRadius;
  for (  int singleSon : tree.getChildren(node)) {
    currAlpha=np[node].c * np[singleSon].alpha;
    currRadius=np[node].d * (Math.tan(currAlpha) / (1 - Math.tan(currAlpha)));
    gamma=(gamma + previous + np[singleSon].alpha+ freeSpace);
    double kX=(lambda * currRadius + dd) * Math.cos(gamma);
    double kY=(lambda * currRadius + dd) * Math.sin(gamma);
    previous=np[singleSon].alpha;
    secondWalk(singleSon,kX + x,kY + y,lambda * (currRadius / np[singleSon].r),gamma);
  }
}","private void secondWalk(int node,double x,double y,double lambda,double theta){
  nodePositionsX[node]=x;
  nodePositionsY[node]=y;
  int[] children=tree.getChildren(node);
  double dd=lambda * np[node].d;
  double gamma=theta + Math.PI;
  double freeSpace=np[node].f / children.length;
  double previous=0;
  double currAlpha, currRadius;
  for (  int singleSon : children) {
    currAlpha=np[node].c * np[singleSon].alpha;
    currRadius=np[node].d * (Math.tan(currAlpha) / (1 - Math.tan(currAlpha)));
    gamma=gamma + previous + np[singleSon].alpha+ freeSpace;
    double kX=(lambda * currRadius + dd) * Math.cos(gamma);
    double kY=(lambda * currRadius + dd) * Math.sin(gamma);
    previous=np[singleSon].alpha;
    secondWalk(singleSon,kX + x,kY + y,lambda * (currRadius / np[singleSon].r),gamma);
  }
}",0.608534322820037
39841,"/** 
 * @return
 */
public String[] getConfigKeys();","/** 
 * Getter for all the configuration keys.
 * @return A string array containing all the configuration values.
 */
public String[] getConfigKeys();",0.5148514851485149
39842,"/** 
 * @return
 */
public String getKey();","/** 
 * Getter for the key of the particular placement model.
 * @return The key of the placement model.
 */
public String getKey();",0.4914285714285714
39843,"/** 
 * @return
 */
public double getHeight();","/** 
 * Getter for the height of the field in which the positions are to be determined.
 * @return The height of the field.
 */
public double getHeight();",0.46
39844,"/** 
 * @return
 */
public String[] getConfigValues();","/** 
 * Getter for all the configuration values.
 * @return A string array containing all the configuration values.
 */
public String[] getConfigValues();",0.5192307692307693
39845,"/** 
 * @param hotspots
 * @return
 */
public Point[] place(int hotspots);","/** 
 * Finds and returns <code>number</code> positions.
 * @param number The number of positions to be returned.
 * @return An array of positions.
 */
public Point[] place(int number);",0.4942084942084942
39846,"/** 
 * @return
 */
public double getWidth();","/** 
 * Getter for the width of the field in which the positions are to be determined.
 * @return The width of the field.
 */
public double getWidth();",0.4591836734693877
39847,"public PlacementModelContainer(int nodes,int hotspots,PlacementModel hotspotPlacer,PlacementModel nodePlacer,Partitioner partitioner,NodeConnector nodeConnector,RoutingAlgorithm r,Transformation[] t){
  super(""String_Node_Str"",nodes,getConfigKeys(hotspotPlacer,nodePlacer,nodeConnector,partitioner),getConfigValues(hotspotPlacer,nodePlacer,nodeConnector,partitioner),r,t);
  this.nodes=nodes;
  this.hotspots=hotspots;
  this.hotspotPlacer=hotspotPlacer;
  this.nodePlacer=nodePlacer;
  this.partitioner=partitioner;
  this.connector=nodeConnector;
  idSpace=new PlaneIdentifierSpaceSimple(null,hotspotPlacer.getWidth(),hotspotPlacer.getHeight(),false);
}","/** 
 * Standard and only constructor for this class, gets all needed classes and all the needed information.
 * @param nodes The number of nodes in the network.
 * @param hotspots The number of hotspots in the network.
 * @param hotspotPlacer The <code>PlacementModel</code> used to place the hotspots.
 * @param nodePlacer The <code>PlacementModel</code> used to place the nodes within the hotspots.
 * @param partitioner The <code>Partitioner</code> used to determine how much nodes are placed in each hotspot.
 * @param nodeConnector The <code>NodeConnector</code> used to connect nodes depending on their position.
 * @param r The routing to be used in the network.
 * @param t The transformations that should be applied to the graph of the network.
 */
public PlacementModelContainer(int nodes,int hotspots,PlacementModel hotspotPlacer,PlacementModel nodePlacer,Partitioner partitioner,NodeConnector nodeConnector,RoutingAlgorithm r,Transformation[] t){
  super(""String_Node_Str"",nodes,getConfigKeys(hotspotPlacer,nodePlacer,nodeConnector,partitioner),getConfigValues(hotspotPlacer,nodePlacer,nodeConnector,partitioner),r,t);
  this.nodes=nodes;
  this.hotspots=hotspots;
  this.hotspotPlacer=hotspotPlacer;
  this.nodePlacer=nodePlacer;
  this.partitioner=partitioner;
  this.connector=nodeConnector;
  idSpace=new PlaneIdentifierSpaceSimple(null,hotspotPlacer.getWidth(),hotspotPlacer.getHeight(),false);
}",0.6331561140647656
39848,"/** 
 * @param hotspotPlacer
 * @param nodePlacer
 * @return
 */
private static String[] getConfigKeys(PlacementModel hotspotPlacer,PlacementModel nodePlacer,NodeConnector connector,Partitioner partitioner){
  return Util.mergeArrays(new String[]{getKey(hotspotPlacer,nodePlacer)},Util.mergeArrays(Util.addPrefix(""String_Node_Str"",partitioner.getConfigKeys()),Util.mergeArrays(Util.addPrefix(""String_Node_Str"",connector.getConfigKeys()),Util.mergeArrays(Util.addPrefix(""String_Node_Str"",hotspotPlacer.getConfigKeys()),Util.addPrefix(""String_Node_Str"",nodePlacer.getConfigKeys())))));
}","/** 
 * Constructs an array containing all the configuration keys used for the particular <code>PlacementModelContainer</code>. Basically combines all the configuration keys of both <code>PlacementModels</code> (prefixed by ""HP_"" and ""NP_"" respectively), the <code>Partitioner</code> (prefixed by ""PART_"") and the <code>NodeConnector</code> (prefixed by ""NC_"") into one big string array and adds ""KEY"" without a prefix to it.
 * @param hotspotPlacer The <code>PlacementModel</code> used to place the hotspots.
 * @param nodePlacer The <code>PlacementModel</code> used to place the nodes within the hotspots.
 * @param partitioner The <code>Partitioner</code> used to determine the number of nodes in each hotspot.
 * @param nodeConnector The <code>NodeConnector</code> used to connect the nodes after placing them.
 * @return A string array containg all the configuration keys.
 */
private static String[] getConfigKeys(PlacementModel hotspotPlacer,PlacementModel nodePlacer,NodeConnector connector,Partitioner partitioner){
  return Util.mergeArrays(new String[]{""String_Node_Str""},Util.mergeArrays(Util.addPrefix(""String_Node_Str"",partitioner.getConfigKeys()),Util.mergeArrays(Util.addPrefix(""String_Node_Str"",connector.getConfigKeys()),Util.mergeArrays(Util.addPrefix(""String_Node_Str"",hotspotPlacer.getConfigKeys()),Util.addPrefix(""String_Node_Str"",nodePlacer.getConfigKeys())))));
}",0.5557809330628803
39849,"/** 
 * @param hotspotPlacer
 * @param nodePlacer
 * @return
 */
private static String getKey(PlacementModel hotspotPlacer,PlacementModel nodePlacer){
  return ""String_Node_Str"" + hotspotPlacer.getKey() + ""String_Node_Str""+ nodePlacer.getKey();
}","/** 
 * Constructs the key of this network, which will be HSM_<hotspotPlacer.getKey()>_<nodePlacer.getKey()>.
 * @param hotspotPlacer The <code>PlacementModel</code> used to place the hotspots.
 * @param nodePlacer The <code>PlacementModel</code> used to place the nodes within the hotspots.
 * @return The key of this network.
 */
private static String getKey(PlacementModel hotspotPlacer,PlacementModel nodePlacer){
  return ""String_Node_Str"" + hotspotPlacer.getKey() + ""String_Node_Str""+ nodePlacer.getKey();
}",0.6482213438735178
39850,"/** 
 * @param hotspotPlacer
 * @param nodePlacer
 * @param partitioner2
 * @param nodeConnector
 * @return
 */
private static String[] getConfigValues(PlacementModel hotspotPlacer,PlacementModel nodePlacer,NodeConnector connector,Partitioner partitioner){
  return Util.mergeArrays(new String[]{""String_Node_Str""},Util.mergeArrays(partitioner.getConfigValues(),Util.mergeArrays(connector.getConfigValues(),Util.mergeArrays(hotspotPlacer.getConfigValues(),nodePlacer.getConfigValues()))));
}","/** 
 * Constructs an array containing all the configuration values used for the particular <code>PlacementModelContainer</code>. Basically combines all the configuration values of both <code>PlacementModels</code>, the <code>Partitioner</code> and the <code>NodeConnector</code> into one big string array and adds the key of the <code>PlacementModelContainer</code> to this array.
 * @param hotspotPlacer The <code>PlacementModel</code> used to place the hotspots.
 * @param nodePlacer The <code>PlacementModel</code> used to place the nodes within the hotspots.
 * @param partitioner The <code>Partitioner</code> used to determine the number of nodes in each hotspot.
 * @param nodeConnector The <code>NodeConnector</code> used to connect the nodes after placing them.
 * @return A string array containg all the configuration values.
 */
private static String[] getConfigValues(PlacementModel hotspotPlacer,PlacementModel nodePlacer,NodeConnector connector,Partitioner partitioner){
  return Util.mergeArrays(new String[]{getKey(hotspotPlacer,nodePlacer)},Util.mergeArrays(partitioner.getConfigValues(),Util.mergeArrays(connector.getConfigValues(),Util.mergeArrays(hotspotPlacer.getConfigValues(),nodePlacer.getConfigValues()))));
}",0.5484057971014493
39851,"@Override public Graph generate(){
  Point[] hotspotCoords=hotspotPlacer.place(hotspots);
  PlanePartitionSimple[] coords=new PlanePartitionSimple[nodes];
  int[] nodesPerSpot=partitioner.partition(nodes,hotspots);
  int temp=0;
  int curNodes;
  for (int i=0; i < hotspots; i++) {
    curNodes=nodesPerSpot[i];
    addNodeCoords(coords,nodePlacer.place(curNodes),hotspotCoords[i],temp);
    temp+=curNodes;
  }
  Graph g=new Graph(description());
  idSpace.setPartitions(coords);
  g.addProperty(""String_Node_Str"",idSpace);
  Node[] nodes=Node.init(this.nodes(),g);
  connector.connect(nodes,idSpace);
  g.setNodes(nodes);
  return g;
}","/** 
 * Creates the graph for this network by first placing the hotspots, then placing the nodes within those hotspots. The coordinates of the nodes are stored in an <code>IdentifierSpace</code>, which is added as ""id_space_0"" to the attributes of the graph. In the end, the nodes are connected based on that id-space.
 */
@Override public Graph generate(){
  Point[] hotspotCoords=hotspotPlacer.place(hotspots);
  PlanePartitionSimple[] coords=new PlanePartitionSimple[nodes];
  int[] nodesPerSpot=partitioner.partition(nodes,hotspots);
  int temp=0;
  int curNodes;
  for (int i=0; i < hotspots; i++) {
    curNodes=nodesPerSpot[i];
    addNodeCoords(coords,nodePlacer.place(curNodes),hotspotCoords[i],temp);
    temp+=curNodes;
  }
  Graph g=new Graph(description());
  idSpace.setPartitions(coords);
  g.addProperty(""String_Node_Str"",idSpace);
  Node[] nodes=Node.init(this.nodes(),g);
  connector.connect(nodes,idSpace);
  g.setNodes(nodes);
  return g;
}",0.7977457733249843
39852,"/** 
 * @param pps
 * @param nodeCoords
 * @param ds
 */
private void addNodeCoords(PlanePartitionSimple[] pps,Point[] nodeCoords,Point coordOffset,int arrayOffset){
  for (int i=0; i < nodeCoords.length; i++) {
    pps[i + arrayOffset]=new PlanePartitionSimple(new PlaneIdentifier(nodeCoords[i].getX() + coordOffset.getX(),nodeCoords[i].getY() + coordOffset.getY(),idSpace));
  }
}","/** 
 * Convenience method to convert all the node coordinates from <code>Point</code> objects to <code>PlanePartitionSimple</code> objects. In the process, the supplied offset is added to all those coordinates. Instead of returning a newly created array, the <code>PlanePartitionSimple</code>s are stored in the supplied array, starting from the supplied offset. If the array is shorter than required, an Exception will be thrown.
 * @param pps The array to which the resulting <code>PlanePartitionSimple</code>s are to be written, starting at <code>arrayOffset</code>.
 * @param nodeCoords The coordinates at which nodes are to be placed.
 * @param coordOffset The offset for the coordinates.
 * @param arrayOffset The offset for the array, pointing to the first EMPTY element.
 */
private void addNodeCoords(PlanePartitionSimple[] pps,Point[] nodeCoords,Point coordOffset,int arrayOffset){
  for (int i=0; i < nodeCoords.length; i++) {
    pps[i + arrayOffset]=new PlanePartitionSimple(new PlaneIdentifier(nodeCoords[i].getX() + coordOffset.getX(),nodeCoords[i].getY() + coordOffset.getY(),idSpace));
  }
}",0.5097250167672703
39853,"/** 
 * @return
 */
public String[] getConfigKeys(){
  return Util.mergeArrays(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},additionalConfigKeys);
}","/** 
 * Getter for the configuration keys. Returns ""KEY"", ""WIDTH"", ""HEIGHT"" as well as any additional configuration keys set by <code>setAdditionalConfigKeys()</code>.
 * @return A string array containing all the configuration keys.
 */
public String[] getConfigKeys(){
  return Util.mergeArrays(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},additionalConfigKeys);
}",0.6118067978533095
39854,"/** 
 * @return
 */
public String getKey(){
  return key;
}","/** 
 * Getter for the key of the particular <code>PlacementModel</code>.
 * @return The key of the <code>PlacementModel</code>.
 */
public String getKey(){
  return key;
}",0.5108225108225108
39855,"public void setAdditionalConfigKeys(String[] arr){
  additionalConfigKeys=arr;
}","/** 
 * Setter for the additional configuration keys. Those will be returned in addition to ""KEY"", ""WIDTH"", ""HEIGHT"" by <code>getConfigKeys()</code>.
 * @param arr The new additional configuration keys.
 */
public void setAdditionalConfigKeys(String[] arr){
  additionalConfigKeys=arr;
}",0.4359673024523161
39856,"/** 
 * @return
 */
public double getHeight(){
  return height;
}","/** 
 * Getter for the height of the field.
 * @return The height of field.
 */
public double getHeight(){
  return height;
}",0.6842105263157895
39857,"/** 
 * @return
 */
public String[] getConfigValues(){
  return Util.mergeArrays(new String[]{getKey(),Double.toString(getWidth()),Double.toString(getHeight())},additionalConfigValues);
}","/** 
 * Getter for the configuration values. Returns key, width and height as well as any additional configuration keys set by <code>setAdditionalConfigValues()</code>.
 * @return A string array containing all the configuration values.
 */
public String[] getConfigValues(){
  return Util.mergeArrays(new String[]{getKey(),Double.toString(getWidth()),Double.toString(getHeight())},additionalConfigValues);
}",0.6296296296296297
39858,"public void setAdditionalConfigValues(String[] arr){
  additionalConfigValues=arr;
}","/** 
 * Setter for the additional configuration values. Those will be returned in addition to the key, the width and the height by <code>getConfigValues()</code>.
 * @param arr The new additional configuration values.
 */
public void setAdditionalConfigValues(String[] arr){
  additionalConfigValues=arr;
}",0.4307692307692308
39859,"/** 
 * @return
 */
public double getWidth(){
  return width;
}","/** 
 * Getter for the width of the field.
 * @return The width of the field.
 */
public double getWidth(){
  return width;
}",0.6702127659574468
39860,"public void setHeight(double height){
  this.height=height;
}","/** 
 * Setter for the height of the field.
 * @param height The new height of the field.
 */
public void setHeight(double height){
  this.height=height;
}",0.5648148148148148
39861,"public void setWidth(double width){
  this.width=width;
}","/** 
 * Setter for the width of the field.
 * @param width The new width of the field.
 */
public void setWidth(double width){
  this.width=width;
}",0.5560975609756098
39862,"public void setKey(String key){
  this.key=key;
}","/** 
 * Setter for the key of the particular <code>PlacementModel</code>.
 * @param key The new key of the <code>PlacementModel</code>.
 */
public void setKey(String key){
  this.key=key;
}",0.4117647058823529
39863,"public Graph generate(){
  Graph graph=new Graph(this.description());
  Random rand=new Random(System.currentTimeMillis());
  Node[] nodes=Node.init(this.nodes(),graph);
  int[] in=new int[nodes.length];
  int[] out=new int[nodes.length];
  int initNodes=Math.max(this.INIT_NETWORK_SIZE,this.EDGES_PER_NODE + 5);
  int initEdges=initNodes * this.EDGES_PER_NODE;
  Graph temp=new ErdosRenyi(initNodes,initEdges,true,this.routingAlgorithm(),this.transformations()).generate();
  Edges edges=new Edges(nodes,initEdges + (nodes.length - initNodes) * this.EDGES_PER_NODE);
  for (int i=0; i < temp.getNodes().length; i++) {
    in[i]=temp.getNodes()[i].getInDegree();
    out[i]=temp.getNodes()[i].getOutDegree();
    int[] Out=temp.getNodes()[i].getOutgoingEdges();
    for (int j=0; j < Out.length; j++) {
      edges.add(i,Out[j]);
    }
  }
  int edgeCounter=initEdges;
  for (int i=initNodes; i < nodes.length; i++) {
    int added=0;
    while (added < this.EDGES_PER_NODE) {
      int dest=rand.nextInt(i);
      if (edges.contains(i,dest)) {
        continue;
      }
      double pi=(double)(in[i] + out[i]) / (double)(2 * edgeCounter);
      if (rand.nextDouble() <= pi) {
        in[i]++;
        out[i]++;
        in[dest]++;
        out[dest]++;
        edgeCounter++;
        added++;
      }
    }
  }
  edges.fill();
  graph.setNodes(nodes);
  return graph;
}","public Graph generate(){
  System.out.println(""String_Node_Str"");
  Graph graph=new Graph(this.description());
  Random rand=new Random(System.currentTimeMillis());
  Node[] nodes=Node.init(this.nodes(),graph);
  int[] in=new int[nodes.length];
  int[] out=new int[nodes.length];
  int initNodes=Math.max(this.INIT_NETWORK_SIZE,this.EDGES_PER_NODE + 5);
  int initEdges=initNodes * this.EDGES_PER_NODE;
  Graph temp=new ErdosRenyi(initNodes,this.EDGES_PER_NODE,true,this.routingAlgorithm(),this.transformations()).generate();
  Edges edges=new Edges(nodes,initEdges + (nodes.length - initNodes) * this.EDGES_PER_NODE);
  for (int i=0; i < temp.getNodes().length; i++) {
    in[i]=temp.getNodes()[i].getInDegree();
    out[i]=temp.getNodes()[i].getOutDegree();
    int[] Out=temp.getNodes()[i].getOutgoingEdges();
    for (int j=0; j < Out.length; j++) {
      edges.add(i,Out[j]);
    }
  }
  int edgeCounter=initEdges;
  for (int i=initNodes; i < nodes.length; i++) {
    int added=0;
    double[] rands=new double[this.EDGES_PER_NODE];
    for (int j=0; j < rands.length; j++) {
      rands[j]=rand.nextDouble() * 2 * edgeCounter;
    }
    Arrays.sort(rands);
    double sum2=0;
    int current=0;
    while (added < rands.length && current < i) {
      sum2=sum2 + (double)(in[current] + out[current]);
      if (sum2 >= rands[added]) {
        edges.add(i,current);
        edges.add(current,i);
        added++;
        in[i]++;
        out[i]++;
        in[current]++;
        out[current]++;
        edgeCounter++;
      }
      current++;
    }
  }
  edges.fill();
  graph.setNodes(nodes);
  return graph;
}",0.3328868050904219
39864,"public static void main(String[] args){
  Stats stats=new Stats();
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"" + true);
  Transformation[] sTArray;
  BFS bfs=new BFS(""String_Node_Str"");
  RoutingAlgorithm rA=new GreedyBacktracking(25);
  Transformation[] t=new Transformation[]{new CanonicalCircularCrossing(1,100,true,null),new SixTollis(1,100,true,null),new WetherellShannon(100,100,null),new Knuth(100,100,null),new MelanconHerman(100,100,null),new BubbleTree(100,100,null),new FruchtermanReingold(1,new double[]{100,100},false,100,null)};
  for (  Transformation sT : t) {
    if (sT instanceof HierarchicalAbstract) {
      sTArray=new Transformation[]{bfs,sT};
    }
 else {
      sTArray=new Transformation[]{sT};
    }
    Network[] nw=new Network[]{new ErdosRenyi(500,10,true,rA,sTArray),new BarabasiAlbert(500,10,rA,sTArray),new ReadableFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",rA,sTArray)};
    for (    Network sN : nw) {
      Series[] s=Series.generate(nw,50);
    }
  }
  stats.end();
}","public static void main(String[] args){
  Stats stats=new Stats();
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"" + true);
  Transformation[] sTArray;
  BFS bfs=new BFS(""String_Node_Str"");
  RoutingAlgorithm rA=new GreedyBacktracking(25);
  Transformation[] t=new Transformation[]{new CanonicalCircularCrossing(1,100,true,null),new SixTollis(1,100,true,null),new WetherellShannon(100,100,null),new Knuth(100,100,null),new MelanconHerman(100,100,null),new BubbleTree(100,100,null),new FruchtermanReingold(1,new double[]{100,100},false,100,null)};
  for (  Transformation sT : t) {
    if (sT instanceof HierarchicalAbstract) {
      sTArray=new Transformation[]{bfs,sT};
    }
 else {
      sTArray=new Transformation[]{sT};
    }
    Network[] nw=new Network[]{new ErdosRenyi(500,10,true,rA,sTArray),new BarabasiAlbert(500,10,rA,sTArray),new ReadableFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",rA,sTArray)};
    Series[] s=Series.generate(nw,50);
  }
  stats.end();
}",0.9733441033925686
39865,"private void fill(int nodes,ArrayList<ParentChild> pcs){
  this.parent=Util.initIntArray(nodes,-1);
  this.children=new int[nodes][];
  this.depth=Util.initIntArray(nodes,0);
  this.src=-1;
  int[] counter=new int[nodes];
  for (  ParentChild pc : pcs) {
    this.parent[pc.getChild()]=pc.getParent();
    this.depth[pc.getChild()]=pc.getDepth();
    counter[pc.getParent()]++;
  }
  for (int i=0; i < this.children.length; i++) {
    this.children[i]=new int[counter[i]];
  }
  for (  ParentChild pc : pcs) {
    this.children[pc.getParent()][this.children[pc.getParent()].length - counter[pc.getParent()]]=pc.getChild();
    counter[pc.getParent()]--;
  }
  for (int i=0; i < this.parent.length; i++) {
    if (this.parent[i] == -1) {
      this.src=i;
      break;
    }
  }
}","private void fill(int nodes,ArrayList<ParentChild> pcs){
  this.parent=Util.initIntArray(nodes,-1);
  this.children=new int[nodes][];
  this.depth=Util.initIntArray(nodes,-1);
  this.src=-1;
  int[] counter=new int[nodes];
  for (  ParentChild pc : pcs) {
    this.parent[pc.getChild()]=pc.getParent();
    this.depth[pc.getChild()]=pc.getDepth();
    counter[pc.getParent()]++;
  }
  for (int i=0; i < this.children.length; i++) {
    this.children[i]=new int[counter[i]];
  }
  for (  ParentChild pc : pcs) {
    this.children[pc.getParent()][this.children[pc.getParent()].length - counter[pc.getParent()]]=pc.getChild();
    counter[pc.getParent()]--;
  }
  for (int i=0; i < this.parent.length; i++) {
    if (this.parent[i] == -1) {
      this.src=i;
      this.depth[i]=0;
      break;
    }
  }
}",0.965865992414665
39866,"@Override public Graph transform(Graph graph){
  Node root=selectRoot(graph,rootSelector);
  Node tempNodeFromList;
  int[] edges;
  Node[] nodes=graph.getNodes();
  int depth;
  LinkedList<Node> todoList=new LinkedList<Node>();
  LinkedList<Integer> handledNodes=new LinkedList<Integer>();
  LinkedList<Integer> linkedNodes=new LinkedList<Integer>();
  HashMap<Integer,ParentChild> parentChildMap=new HashMap<Integer,ParentChild>();
  todoList.add(root);
  linkedNodes.add(root.getIndex());
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    if (handledNodes.contains(tempNodeFromList.getIndex())) {
      continue;
    }
    ParentChild parent=parentChildMap.get(tempNodeFromList.getIndex());
    if (parent == null) {
      depth=0;
    }
 else {
      depth=parent.getDepth();
    }
    edges=tempNodeFromList.getOutgoingEdges();
    for (    int e : edges) {
      if (!linkedNodes.contains(e)) {
        todoList.add(nodes[e]);
        linkedNodes.add(e);
        parentChildMap.put(e,new ParentChild(tempNodeFromList.getIndex(),e,depth + 1));
      }
    }
    handledNodes.add(tempNodeFromList.getIndex());
  }
  int graphNodeSize=graph.getNodes().length;
  int spanningTreeSize=parentChildMap.size() + 1;
  if (spanningTreeSize < graphNodeSize) {
    throw new RuntimeException(""String_Node_Str"" + graphNodeSize + ""String_Node_Str""+ spanningTreeSize+ ""String_Node_Str"");
  }
  ArrayList<ParentChild> parentChildList=new ArrayList<ParentChild>();
  parentChildList.addAll(parentChildMap.values());
  SpanningTree result=new SpanningTree(graph,parentChildList);
  graph.addProperty(""String_Node_Str"",result);
  return graph;
}","@Override public Graph transform(Graph graph){
  Node root=selectRoot(graph,rootSelector);
  Node tempNodeFromList;
  int[] edges;
  Node[] nodes=graph.getNodes();
  int depth;
  LinkedList<Node> todoList=new LinkedList<Node>();
  LinkedList<Integer> handledNodes=new LinkedList<Integer>();
  LinkedList<Integer> linkedNodes=new LinkedList<Integer>();
  HashMap<Integer,ParentChild> parentChildMap=new HashMap<Integer,ParentChild>();
  todoList.add(root);
  linkedNodes.add(root.getIndex());
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    if (handledNodes.contains(tempNodeFromList.getIndex())) {
      continue;
    }
    ParentChild parent=parentChildMap.get(tempNodeFromList.getIndex());
    if (parent == null) {
      depth=1;
    }
 else {
      depth=parent.getDepth() + 1;
    }
    edges=tempNodeFromList.getOutgoingEdges();
    for (    int e : edges) {
      if (!linkedNodes.contains(e)) {
        todoList.add(nodes[e]);
        linkedNodes.add(e);
        parentChildMap.put(e,new ParentChild(tempNodeFromList.getIndex(),e,depth));
      }
    }
    handledNodes.add(tempNodeFromList.getIndex());
  }
  int graphNodeSize=graph.getNodes().length;
  int spanningTreeSize=parentChildMap.size() + 1;
  if (spanningTreeSize < graphNodeSize) {
    throw new RuntimeException(""String_Node_Str"" + graphNodeSize + ""String_Node_Str""+ spanningTreeSize+ ""String_Node_Str"");
  }
  ArrayList<ParentChild> parentChildList=new ArrayList<ParentChild>();
  parentChildList.addAll(parentChildMap.values());
  SpanningTree result=new SpanningTree(graph,parentChildList);
  graph.addProperty(""String_Node_Str"",result);
  return graph;
}",0.9969788519637462
39867,"@Override public Graph transform(Graph g){
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings=-1;
  System.out.println(""String_Node_Str"" + countCrossings);
  this.g=g;
  edges=new Edge[g.getNodes().length][];
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=0;
    while (triangulationEdgesCount > 0) {
      secondCounter++;
      if (secondCounter == currentNodeDegree) {
        firstCounter++;
        secondCounter=firstCounter;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex() + ""String_Node_Str""+ currentNodeDegree);
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2)) {
        continue;
      }
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
    System.out.println(""String_Node_Str"" + currentNode.getIndex() + ""String_Node_Str"");
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      if (errors++ == 50) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  RingIdentifier[] ids=new RingIdentifier[g.getNodes().length];
  for (  Node n : longestPath) {
    ids[n.getIndex()]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  lastNode=longestPath.getLast();
  for (  Node n : longestPath) {
    partitions[n.getIndex()]=new RingPartition(ids[lastNode.getIndex()],ids[n.getIndex()]);
    lastNode=n;
  }
  System.out.println(""String_Node_Str"" + countCrossings);
  if (graphPlotter != null)   graphPlotter.plot(g,idSpace,graphPlotter.getBasename() + ""String_Node_Str"");
  reduceCrossingsBySwapping(g);
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  System.out.println(""String_Node_Str"" + countCrossings);
  return g;
}","@Override public Graph transform(Graph g){
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings=-1;
  System.out.println(""String_Node_Str"" + countCrossings);
  this.g=g;
  edges=new Edge[g.getNodes().length][];
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (!randDst1.equals(randDst2) && !removedNodes.contains(randDst1) && !removedNodes.contains(randDst2)) {
        if (!connected(randDst1,randDst2)) {
          tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
          tempEdgeString=getEdgeString(tempEdge);
          if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
            additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
            additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
            triangulationEdgesCount--;
          }
        }
 else {
        }
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1) && triangulationEdgesCount > 0)       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      if (errors++ == 50) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  RingIdentifier[] ids=new RingIdentifier[g.getNodes().length];
  for (  Node n : longestPath) {
    ids[n.getIndex()]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  lastNode=longestPath.getLast();
  for (  Node n : longestPath) {
    partitions[n.getIndex()]=new RingPartition(ids[lastNode.getIndex()],ids[n.getIndex()]);
    lastNode=n;
  }
  System.out.println(""String_Node_Str"" + countCrossings);
  if (graphPlotter != null)   graphPlotter.plot(g,idSpace,graphPlotter.getBasename() + ""String_Node_Str"");
  reduceCrossingsBySwapping(g);
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  System.out.println(""String_Node_Str"" + countCrossings);
  return g;
}",0.7099523181495384
39868,"@Override public Graph transform(Graph g){
  System.err.println(""String_Node_Str"");
  initIDSpace(g);
  this.g=g;
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new TreeSet<Node>(new NodeComparator());
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode(lastNode);
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2))       continue;
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree - 1)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  if (longestPath == null)   throw new RuntimeException(""String_Node_Str"");
  for (  Node n : nodeList)   System.out.println(n + ""String_Node_Str"" + n.getDegree());
  writeIDSpace(g);
  return g;
}","@Override public Graph transform(Graph g){
  System.err.println(""String_Node_Str"");
  initIDSpace(g);
  this.g=g;
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new TreeSet<Node>(new NodeComparator());
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode(lastNode);
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2))       continue;
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree - 1)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  if (longestPath == null)   throw new RuntimeException(""String_Node_Str"");
  for (  Node n : nodeList)   System.out.println(n + ""String_Node_Str"" + n.getDegree());
  writeIDSpace(g);
  return g;
}",0.9908060067422616
39869,"/** 
 * @return
 */
private Node getNode(Node lastNode){
  if (waveFrontNodes != null) {
    for (    Node tempNode : waveFrontNodes) {
      if (!removedNodes.contains(tempNode)) {
        return tempNode;
      }
    }
  }
  if (waveCenterNodes != null) {
    for (    Node tempNode : waveCenterNodes) {
      if (!removedNodes.contains(tempNode)) {
        return tempNode;
      }
    }
  }
  for (  Node tempNode : nodeList) {
    if (!removedNodes.contains(tempNode)) {
      return tempNode;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * @return
 */
private Node getNode(Node lastNode){
  if (waveFrontNodes != null) {
    for (    Node tempNode : waveFrontNodes) {
      if (!removedNodes.contains(tempNode)) {
        waveFrontNodes.remove(tempNode);
        return tempNode;
      }
    }
  }
  if (waveCenterNodes != null) {
    for (    Node tempNode : waveCenterNodes) {
      if (!removedNodes.contains(tempNode)) {
        waveCenterNodes.remove(tempNode);
        return tempNode;
      }
    }
  }
  for (  Node tempNode : nodeList) {
    if (!removedNodes.contains(tempNode)) {
      return tempNode;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.9308909242298083
39870,"private LinkedList<Node> longestPath(Graph g){
  TreeNode root=new TreeNode(null,0,0);
  deepestNode=root;
  dfs(g,g.getNode(0),root,new ArrayList<Integer>());
  return null;
}","private LinkedList<Node> longestPath(){
  filterRemovalList=true;
  TreeNode root=new TreeNode(null,0,0);
  deepestNode=root;
  dfs(g.getNode(0),root,new ArrayList<Integer>());
  return null;
}",0.9051490514905148
39871,"private void dfs(Graph g,Node n,TreeNode root,ArrayList<Integer> visited){
  int otherEnd;
  if (visited.contains(n.getIndex())) {
    return;
  }
  visited.add(n.getIndex());
  TreeNode current=new TreeNode(root,n.getIndex(),root.depth + 1);
  root.children.add(current);
  if (current.depth > deepestNode.depth) {
    deepestNode=current;
  }
  for (  Edge mEdge : getEdges(g,n).values()) {
    if (removalList.containsKey(mEdge.toString())) {
      continue;
    }
    if (mEdge.getDst() == n.getIndex()) {
      otherEnd=mEdge.getSrc();
    }
 else {
      otherEnd=mEdge.getDst();
    }
    Node mNode=g.getNode(otherEnd);
    dfs(g,mNode,current,visited);
  }
}","private void dfs(Node n,TreeNode root,ArrayList<Integer> visited){
  int otherEnd;
  if (visited.contains(n.getIndex())) {
    return;
  }
  visited.add(n.getIndex());
  TreeNode current=new TreeNode(root,n.getIndex(),root.depth + 1);
  root.children.add(current);
  if (current.depth > deepestNode.depth) {
    deepestNode=current;
  }
  for (  Edge mEdge : getEdges(n).values()) {
    if (filterRemovalList && removalList.containsKey(mEdge.toString())) {
      continue;
    }
    if (mEdge.getDst() == n.getIndex()) {
      otherEnd=mEdge.getSrc();
    }
 else {
      otherEnd=mEdge.getDst();
    }
    Node mNode=g.getNode(otherEnd);
    dfs(mNode,current,visited);
  }
}",0.9560685033507074
39872,"@Override public Graph transform(Graph g){
  System.err.println(""String_Node_Str"");
  initIDSpace(g);
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new TreeSet<Node>(new NodeComparator());
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode(lastNode);
    pairEdges=getPairEdges(g,currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    int currentNodeDegree=getEdges(g,currentNode).size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=currentNode.getOutgoingEdges();
    int loopCounter=0;
    while (triangulationEdgesCount > 0) {
      if (currentNodeDegree == 2) {
        randDst1=g.getNode(outgoingEdges[0]);
        randDst2=g.getNode(outgoingEdges[1]);
      }
 else {
        randDst1=g.getNode(outgoingEdges[rand.nextInt(outgoingEdges.length)]);
        randDst2=g.getNode(outgoingEdges[rand.nextInt(outgoingEdges.length)]);
      }
      if (!randDst1.isConnectedTo(randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
          loopCounter=0;
        }
 else {
        }
      }
      if (loopCounter++ > 10)       throw new RuntimeException(""String_Node_Str"");
    }
    for (    Edge i : getEdges(g,currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath(g);
  if (longestPath == null)   throw new RuntimeException(""String_Node_Str"");
  for (  Node n : nodeList)   System.out.println(n + ""String_Node_Str"" + n.getDegree());
  writeIDSpace(g);
  return g;
}","@Override public Graph transform(Graph g){
  System.err.println(""String_Node_Str"");
  initIDSpace(g);
  this.g=g;
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new TreeSet<Node>(new NodeComparator());
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode(lastNode);
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2))       continue;
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree - 1)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  if (longestPath == null)   throw new RuntimeException(""String_Node_Str"");
  for (  Node n : nodeList)   System.out.println(n + ""String_Node_Str"" + n.getDegree());
  writeIDSpace(g);
  return g;
}",0.7843579015127132
39873,"private HashMap<String,Edge> getPairEdges(Graph g,Node n){
  HashMap<String,Edge> result=new HashMap<String,Edge>();
  Node tempInnerNode;
  Edge tempEdge;
  int otherOuterEnd, otherInnerEnd;
  HashMap<String,Edge> allOuterEdges=getEdges(g,n);
  for (  Edge tempOuterEdge : allOuterEdges.values()) {
    if (tempOuterEdge.getDst() == n.getIndex()) {
      otherOuterEnd=tempOuterEdge.getSrc();
    }
 else {
      otherOuterEnd=tempOuterEdge.getDst();
    }
    HashMap<String,Edge> allInnerEdges=getEdges(g,g.getNode(otherOuterEnd));
    for (    Edge tempInnerEdge : allInnerEdges.values()) {
      if (tempInnerEdge.getDst() == otherOuterEnd) {
        otherInnerEnd=tempInnerEdge.getSrc();
      }
 else {
        otherInnerEnd=tempInnerEdge.getDst();
      }
      if (otherInnerEnd == n.getIndex()) {
        continue;
      }
      tempInnerNode=g.getNode(otherInnerEnd);
      if (tempInnerNode.isConnectedTo(n)) {
        tempEdge=new Edge(Math.min(otherInnerEnd,otherOuterEnd),Math.max(otherInnerEnd,otherOuterEnd));
        result.put(getEdgeString(tempEdge),tempEdge);
      }
 else {
      }
    }
  }
  return result;
}","private HashMap<String,Edge> getPairEdges(Node n){
  HashMap<String,Edge> result=new HashMap<String,Edge>();
  Node tempInnerNode;
  Edge tempEdge;
  int otherOuterEnd, otherInnerEnd;
  HashMap<String,Edge> allOuterEdges=getEdges(n);
  for (  Edge tempOuterEdge : allOuterEdges.values()) {
    if (tempOuterEdge.getDst() == n.getIndex()) {
      otherOuterEnd=tempOuterEdge.getSrc();
    }
 else {
      otherOuterEnd=tempOuterEdge.getDst();
    }
    HashMap<String,Edge> allInnerEdges=getEdges(g.getNode(otherOuterEnd));
    for (    Edge tempInnerEdge : allInnerEdges.values()) {
      if (tempInnerEdge.getDst() == otherOuterEnd) {
        otherInnerEnd=tempInnerEdge.getSrc();
      }
 else {
        otherInnerEnd=tempInnerEdge.getDst();
      }
      if (otherInnerEnd == n.getIndex()) {
        continue;
      }
      tempInnerNode=g.getNode(otherInnerEnd);
      if (connected(n,tempInnerNode)) {
        tempEdge=new Edge(Math.min(otherInnerEnd,otherOuterEnd),Math.max(otherInnerEnd,otherOuterEnd));
        result.put(getEdgeString(tempEdge),tempEdge);
      }
 else {
      }
    }
  }
  return result;
}",0.6373333333333333
39874,"private ArrayList<Edge> getAllEdges(Graph g,Node n){
  ArrayList<Edge> edges=new ArrayList<Edge>();
  for (  Edge e : n.generateAllEdges())   edges.add(e);
  edges.addAll(additionalEdges[n.getIndex()].values());
  return edges;
}","private ArrayList<Edge> getAllEdges(Node n){
  ArrayList<Edge> edges=new ArrayList<Edge>();
  for (  Edge e : n.generateAllEdges())   edges.add(e);
  edges.addAll(additionalEdges[n.getIndex()].values());
  return edges;
}",0.9822222222222222
39875,"private HashMap<String,Edge> getEdges(Graph g,Node n){
  Node tempNode=null;
  HashMap<String,Edge> edges=new HashMap<String,Edge>();
  for (  Edge i : getAllEdges(g,n)) {
    int otherEnd;
    if (i.getDst() == n.getIndex()) {
      otherEnd=i.getSrc();
    }
 else {
      otherEnd=i.getDst();
    }
    tempNode=g.getNode(otherEnd);
    if (removedNodes.contains(tempNode)) {
      continue;
    }
    edges.put(getEdgeString(i),i);
  }
  return edges;
}","private HashMap<String,Edge> getEdges(Node n){
  Node tempNode=null;
  HashMap<String,Edge> edges=new HashMap<String,Edge>();
  for (  Edge i : getAllEdges(n)) {
    int otherEnd;
    if (i.getDst() == n.getIndex()) {
      otherEnd=i.getSrc();
    }
 else {
      otherEnd=i.getDst();
    }
    tempNode=g.getNode(otherEnd);
    if (removedNodes.contains(tempNode)) {
      continue;
    }
    edges.put(getEdgeString(i),i);
  }
  return edges;
}",0.3606194690265487
39876,"@Override public Graph transform(Graph g){
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings;
  this.g=g;
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2))       continue;
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree - 1)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      System.err.println(""String_Node_Str"" + singleNode + ""String_Node_Str""+ errors);
      if (errors++ == 50) {
        System.exit(0);
      }
    }
  }
  partitions=new RingPartition[g.getNodes().length];
  idSpace=new RingIdentifierSpace(partitions,this.modulus,this.wrapAround);
  RingIdentifier[] ids=new RingIdentifier[partitions.length];
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  for (int i=0; i < partitions.length; i++) {
    ids[i]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  for (int i=0; i < partitions.length; i++) {
    partitions[i]=new RingPartition(ids[i],ids[(i + 1) % ids.length]);
  }
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  return g;
}","@Override public Graph transform(Graph g){
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings;
  this.g=g;
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2))       continue;
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree - 1)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      System.err.println(""String_Node_Str"" + singleNode + ""String_Node_Str""+ errors);
      if (errors++ == 50) {
        System.exit(0);
      }
    }
  }
  partitions=new RingPartition[g.getNodes().length];
  idSpace=new RingIdentifierSpace(partitions,this.modulus,this.wrapAround);
  RingIdentifier[] ids=new RingIdentifier[partitions.length];
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  for (  Node n : longestPath) {
    ids[n.getIndex()]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  for (int i=0; i < partitions.length; i++) {
    partitions[i]=new RingPartition(ids[i],ids[(i + 1) % ids.length]);
  }
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  return g;
}",0.992437337942956
39877,"public int calculateCrossings(Node n,Node m,IdentifierSpace idSpace){
  int numCross=0;
  Edge[] nEdges=n.generateAllEdges();
  Edge[] mEdges=m.generateAllEdges();
  handledEdges=new HashSet<String>();
  for (  Edge nEdge : nEdges) {
    for (    Edge mEdge : mEdges) {
      if (hasCrossing(nEdge,mEdge,idSpace,true))       numCross++;
    }
  }
  return numCross;
}","public int calculateCrossings(Node n,Node m,IdentifierSpace idSpace){
  int numCross=0;
  Edge[] nEdges=n.generateAllEdges();
  Edge[] mEdges=m.generateAllEdges();
  handledEdges=new HashSet<String>();
  partitions=idSpace.getPartitions();
  for (  Edge nEdge : nEdges) {
    for (    Edge mEdge : mEdges) {
      if (hasCrossing(nEdge,mEdge,idSpace,true))       numCross++;
    }
  }
  return numCross;
}",0.9507772020725388
39878,"@Override public Graph transform(Graph g){
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings=-1;
  System.out.println(""String_Node_Str"" + countCrossings);
  this.g=g;
  edges=new Edge[g.getNodes().length][];
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (!randDst1.equals(randDst2) && !removedNodes.contains(randDst1) && !removedNodes.contains(randDst2)) {
        if (!connected(randDst1,randDst2)) {
          tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
          tempEdgeString=getEdgeString(tempEdge);
          if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
            additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
            additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
            triangulationEdgesCount--;
          }
        }
 else {
        }
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1) && triangulationEdgesCount > 0)       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      if (errors++ == 50) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  RingIdentifier[] ids=new RingIdentifier[g.getNodes().length];
  for (  Node n : longestPath) {
    ids[n.getIndex()]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  lastNode=longestPath.getLast();
  for (  Node n : longestPath) {
    partitions[n.getIndex()]=new RingPartition(ids[lastNode.getIndex()],ids[n.getIndex()]);
    lastNode=n;
  }
  System.out.println(""String_Node_Str"" + countCrossings);
  if (graphPlotter != null)   graphPlotter.plot(g,idSpace,graphPlotter.getBasename() + ""String_Node_Str"");
  reduceCrossingsBySwapping(g);
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  System.out.println(""String_Node_Str"" + countCrossings);
  return g;
}","@Override public Graph transform(Graph g){
  useOriginalGraphWithoutRemovalList=false;
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings=-1;
  System.out.println(""String_Node_Str"" + countCrossings);
  this.g=g;
  edges=new Edge[g.getNodes().length][];
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (!randDst1.equals(randDst2) && !removedNodes.contains(randDst1) && !removedNodes.contains(randDst2)) {
        if (!connected(randDst1,randDst2)) {
          tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
          tempEdgeString=getEdgeString(tempEdge);
          if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
            additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
            additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
            triangulationEdgesCount--;
          }
        }
 else {
        }
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1) && triangulationEdgesCount > 0)       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      if (errors++ == 50) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  RingIdentifier[] ids=new RingIdentifier[g.getNodes().length];
  for (  Node n : longestPath) {
    ids[n.getIndex()]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  lastNode=longestPath.getLast();
  for (  Node n : longestPath) {
    partitions[n.getIndex()]=new RingPartition(ids[lastNode.getIndex()],ids[n.getIndex()]);
    lastNode=n;
  }
  System.out.println(""String_Node_Str"" + countCrossings);
  if (graphPlotter != null)   graphPlotter.plot(g,idSpace,graphPlotter.getBasename() + ""String_Node_Str"");
  reduceCrossingsBySwapping(g);
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  System.out.println(""String_Node_Str"" + countCrossings);
  return g;
}",0.9955010224948876
39879,"private void fill(int nodes,ArrayList<ParentChild> pcs){
  this.parent=Util.initIntArray(nodes,-1);
  this.children=new int[nodes][];
  this.depth=Util.initIntArray(nodes,-1);
  this.src=-1;
  int[] counter=new int[nodes];
  for (  ParentChild pc : pcs) {
    this.parent[pc.getChild()]=pc.getParent();
    this.depth[pc.getChild()]=pc.getDepth();
    counter[pc.getParent()]++;
  }
  for (int i=0; i < this.children.length; i++) {
    this.children[i]=new int[counter[i]];
  }
  for (  ParentChild pc : pcs) {
    this.children[pc.getParent()][this.children[pc.getParent()].length - counter[pc.getParent()]]=pc.getChild();
    counter[pc.getParent()]--;
  }
  for (int i=0; i < this.parent.length; i++) {
    if (this.parent[i] == -1) {
      this.src=i;
      this.depth[i]=0;
      break;
    }
  }
}","private void fill(int nodes,ArrayList<ParentChild> pcs){
  this.parent=Util.initIntArray(nodes,-1);
  this.children=new int[nodes][];
  this.depth=Util.initIntArray(nodes,-1);
  this.src=-1;
  int[] counter=new int[nodes];
  for (  ParentChild pc : pcs) {
    if (pc.getParent() == -1)     continue;
    this.parent[pc.getChild()]=pc.getParent();
    this.depth[pc.getChild()]=pc.getDepth();
    counter[pc.getParent()]++;
  }
  for (int i=0; i < this.children.length; i++) {
    this.children[i]=new int[counter[i]];
  }
  for (  ParentChild pc : pcs) {
    if (pc.getParent() == -1)     continue;
    this.children[pc.getParent()][this.children[pc.getParent()].length - counter[pc.getParent()]]=pc.getChild();
    counter[pc.getParent()]--;
  }
  for (int i=0; i < this.parent.length; i++) {
    if (this.parent[i] == -1) {
      this.src=i;
      this.depth[i]=0;
      break;
    }
  }
}",0.948051948051948
39880,"@Override public Graph transform(Graph graph){
  Node root=selectRoot(graph,rootSelector);
  Node tempNodeFromList;
  Integer[] edges;
  Node[] nodes=graph.getNodes();
  int depth;
  LinkedList<Node> todoList=new LinkedList<Node>();
  LinkedList<Integer> linkedNodes=new LinkedList<Integer>();
  HashMap<Integer,ParentChild> parentChildMap=new HashMap<Integer,ParentChild>();
  todoList.add(root);
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    if (linkedNodes.contains(tempNodeFromList.getIndex())) {
      continue;
    }
    ParentChild parent=parentChildMap.get(tempNodeFromList.getIndex());
    if (parent == null) {
      depth=1;
    }
 else {
      depth=parent.getDepth() + 1;
    }
    edges=tempNodeFromList.generateOutgoingEdgesByDegree();
    for (    int e : edges) {
      if (!linkedNodes.contains(e)) {
        todoList.add(nodes[e]);
        parentChildMap.put(e,new ParentChild(tempNodeFromList.getIndex(),e,depth));
      }
    }
    linkedNodes.add(tempNodeFromList.getIndex());
  }
  int graphNodeSize=graph.getNodes().length;
  int spanningTreeSize=parentChildMap.size();
  if ((spanningTreeSize + 1) < graphNodeSize) {
    throw new RuntimeException(""String_Node_Str"" + graphNodeSize + ""String_Node_Str""+ spanningTreeSize+ ""String_Node_Str"");
  }
  ArrayList<ParentChild> parentChildList=new ArrayList<ParentChild>();
  parentChildList.addAll(parentChildMap.values());
  SpanningTree result=new SpanningTree(graph,parentChildList);
  graph.addProperty(""String_Node_Str"",result);
  return graph;
}","@Override public Graph transform(Graph graph){
  Node root=selectRoot(graph,rootSelector);
  Node tempNodeFromList;
  Integer[] edges;
  Node[] nodes=graph.getNodes();
  int depth;
  LinkedList<Node> todoList=new LinkedList<Node>();
  HashMap<Integer,ParentChild> parentChildMap=new HashMap<Integer,ParentChild>();
  todoList.add(root);
  parentChildMap.put(root.getIndex(),new ParentChild(-1,root.getIndex(),0));
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    ParentChild parent=parentChildMap.get(tempNodeFromList.getIndex());
    if (parent == null) {
      depth=1;
    }
 else {
      depth=parent.getDepth() + 1;
    }
    edges=tempNodeFromList.generateOutgoingEdgesByDegree();
    for (    int e : edges) {
      if (!parentChildMap.containsKey(e)) {
        todoList.add(nodes[e]);
        parentChildMap.put(e,new ParentChild(tempNodeFromList.getIndex(),e,depth));
      }
    }
  }
  int graphNodeSize=graph.getNodes().length;
  int spanningTreeSize=parentChildMap.size();
  if ((spanningTreeSize + 1) < graphNodeSize) {
    throw new RuntimeException(""String_Node_Str"" + graphNodeSize + ""String_Node_Str""+ spanningTreeSize+ ""String_Node_Str"");
  }
  ArrayList<ParentChild> parentChildList=new ArrayList<ParentChild>();
  parentChildList.addAll(parentChildMap.values());
  SpanningTree result=new SpanningTree(graph,parentChildList);
  graph.addProperty(""String_Node_Str"",result);
  return graph;
}",0.8721905400872191
39881,"@Override public Graph transform(Graph g){
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings;
  countCrossings=ec.calculateCrossings(g.generateEdges(),idSpace,true);
  System.out.println(""String_Node_Str"" + countCrossings);
  this.g=g;
  edges=new Edge[g.getNodes().length][];
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=1;
    while (triangulationEdgesCount > 0) {
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2))       continue;
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
      secondCounter++;
      if (secondCounter == (currentNodeDegree - 1)) {
        firstCounter++;
        secondCounter=firstCounter + 1;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex());
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      if (errors++ == 50) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  RingIdentifier[] ids=new RingIdentifier[g.getNodes().length];
  for (  Node n : longestPath) {
    ids[n.getIndex()]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  lastNode=longestPath.getLast();
  for (  Node n : longestPath) {
    partitions[n.getIndex()]=new RingPartition(ids[lastNode.getIndex()],ids[n.getIndex()]);
    lastNode=n;
  }
  countCrossings=ec.calculateCrossings(g.generateEdges(),idSpace,true);
  System.out.println(""String_Node_Str"" + countCrossings);
  if (graphPlotter != null)   graphPlotter.plot(g,idSpace,graphPlotter.getBasename() + ""String_Node_Str"");
  reduceCrossingsBySwapping(g);
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  countCrossings=ec.calculateCrossings(g.generateEdges(),idSpace,true);
  System.out.println(""String_Node_Str"" + countCrossings);
  return g;
}","@Override public Graph transform(Graph g){
  initIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotStartGraph(g,idSpace);
  EdgeCrossings ec=new EdgeCrossings();
  int countCrossings=-1;
  System.out.println(""String_Node_Str"" + countCrossings);
  this.g=g;
  edges=new Edge[g.getNodes().length][];
  Node tempNode=null;
  Node currentNode=null;
  Node lastNode=null;
  Node randDst1, randDst2;
  Edge tempEdge;
  String tempEdgeString;
  removalList=new HashMap<String,Edge>();
  HashMap<String,Edge> pairEdges=null;
  removedNodes=new ArrayList<Node>();
  waveCenterNodes=new TreeSet<Node>(new NodeComparator());
  waveFrontNodes=new TreeSet<Node>(new NodeComparator());
  additionalEdges=new HashMap[g.getNodes().length];
  for (int i=0; i < g.getNodes().length; i++) {
    additionalEdges[i]=new HashMap<String,Edge>();
  }
  nodeList=Arrays.asList(g.getNodes().clone());
  Collections.sort(nodeList,new NodeDegreeComparator());
  for (int counter=1; counter < (nodeList.size() - 3); counter++) {
    currentNode=getNode();
    pairEdges=getPairEdges(currentNode);
    for (    Edge singleEdge : pairEdges.values()) {
      removalList.put(getEdgeString(singleEdge),singleEdge);
    }
    HashMap<String,Edge> currentNodeConnections=getEdges(currentNode);
    int currentNodeDegree=currentNodeConnections.size();
    int triangulationEdgesCount=(currentNodeDegree - 1) - pairEdges.size();
    int[] outgoingEdges=filterOutgoingEdges(currentNode,currentNodeConnections);
    int firstCounter=0;
    int secondCounter=0;
    while (triangulationEdgesCount > 0) {
      secondCounter++;
      if (secondCounter == currentNodeDegree) {
        firstCounter++;
        secondCounter=firstCounter;
      }
      if (firstCounter == (currentNodeDegree - 1))       throw new RuntimeException(""String_Node_Str"" + currentNode.getIndex() + ""String_Node_Str""+ currentNodeDegree);
      randDst1=g.getNode(outgoingEdges[firstCounter]);
      randDst2=g.getNode(outgoingEdges[secondCounter]);
      if (randDst1.equals(randDst2)) {
        continue;
      }
      if (removedNodes.contains(randDst1) || removedNodes.contains(randDst2)) {
        continue;
      }
      if (!connected(randDst1,randDst2)) {
        tempEdge=new Edge(Math.min(randDst1.getIndex(),randDst2.getIndex()),Math.max(randDst1.getIndex(),randDst2.getIndex()));
        tempEdgeString=getEdgeString(tempEdge);
        if (randDst1.getIndex() != randDst2.getIndex() && !additionalEdges[randDst1.getIndex()].containsKey(tempEdgeString)) {
          additionalEdges[randDst1.getIndex()].put(tempEdgeString,tempEdge);
          additionalEdges[randDst2.getIndex()].put(tempEdgeString,tempEdge);
          triangulationEdgesCount--;
        }
      }
 else {
      }
    }
    waveFrontNodes=new TreeSet<Node>(new NodeComparator());
    for (    Edge i : getEdges(currentNode).values()) {
      int otherEnd;
      if (i.getDst() == currentNode.getIndex()) {
        otherEnd=i.getSrc();
      }
 else {
        otherEnd=i.getDst();
      }
      tempNode=g.getNode(otherEnd);
      if (removedNodes.contains(tempNode)) {
        continue;
      }
      waveFrontNodes.add(tempNode);
      waveCenterNodes.add(tempNode);
    }
    lastNode=currentNode;
    removedNodes.add(currentNode);
    System.out.println(""String_Node_Str"" + currentNode.getIndex() + ""String_Node_Str"");
  }
  LinkedList<Node> longestPath=longestPath();
  ArrayList<Node> todoList=new ArrayList<Node>();
  todoList.addAll(nodeList);
  todoList.removeAll(longestPath);
  Node neighbor, singleNode;
  int neighborPosition=-1;
  int errors=0;
  int modCounter=0;
  while (!todoList.isEmpty()) {
    singleNode=todoList.get(modCounter % todoList.size());
    for (    int singleNeighbor : singleNode.getOutgoingEdges()) {
      neighbor=g.getNode(singleNeighbor);
      neighborPosition=longestPath.indexOf(neighbor);
      if (neighborPosition > -1) {
        break;
      }
    }
    if (neighborPosition != -1) {
      todoList.remove(singleNode);
      longestPath.add(neighborPosition,singleNode);
    }
 else {
      modCounter=(modCounter + 1) % todoList.size();
      if (errors++ == 50) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  double lastPos=0;
  double posDiff=modulus / partitions.length;
  RingIdentifier[] ids=new RingIdentifier[g.getNodes().length];
  for (  Node n : longestPath) {
    ids[n.getIndex()]=new RingIdentifier(lastPos,idSpace);
    lastPos+=posDiff;
  }
  lastNode=longestPath.getLast();
  for (  Node n : longestPath) {
    partitions[n.getIndex()]=new RingPartition(ids[lastNode.getIndex()],ids[n.getIndex()]);
    lastNode=n;
  }
  System.out.println(""String_Node_Str"" + countCrossings);
  if (graphPlotter != null)   graphPlotter.plot(g,idSpace,graphPlotter.getBasename() + ""String_Node_Str"");
  reduceCrossingsBySwapping(g);
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  System.out.println(""String_Node_Str"" + countCrossings);
  return g;
}",0.8169350029815146
39882,"public void computeData(Graph graph,Network nw,HashMap<String,Metric> m){
  this.runtime=new Timer();
  Edge[] edges=graph.generateEdges();
  DIdentifierSpace idSpace=(DIdentifierSpace)graph.getProperty(""String_Node_Str"");
  int result=calculateCrossings(edges,idSpace,false);
  double[] finalCD=new double[maxCrossingNumber];
  for (int i=0; i < maxCrossingNumber; i++) {
    finalCD[i]=cd[i] / result;
  }
  this.crossingDistribution=new Distribution(finalCD);
  this.runtime.end();
}","public void computeData(Graph graph,Network nw,HashMap<String,Metric> m){
  this.runtime=new Timer();
  Edge[] edges=graph.generateEdges();
  DIdentifierSpace idSpace=(DIdentifierSpace)graph.getProperty(""String_Node_Str"");
  int result=calculateCrossings(edges,idSpace,false);
  double[] finalCD=new double[maxCrossingNumber + 1];
  for (int i=0; i < maxCrossingNumber + 1; i++) {
    finalCD[i]=cd[i] / edges.length;
  }
  this.crossingDistribution=new Distribution(finalCD);
  this.runtime.end();
}",0.973630831643002
39883,"private boolean hasCrossingMD(Edge x,Edge y){
  return hasCrossing(getPlaneEdgeFromMD(x),getPlaneEdgeFromMD(y));
}","private boolean hasCrossingMD(Edge x,Edge y,Boolean useShortcut){
  return hasCrossing(getPlaneEdgeFromMD(x),getPlaneEdgeFromMD(y),useShortcut);
}",0.8769230769230769
39884,"public int calculateCrossings(Node n,Node m,IdentifierSpace idSpace){
  int numCross=0;
  Edge[] nEdges=n.generateAllEdges();
  Edge[] mEdges=m.generateAllEdges();
  handledEdges=new HashSet<String>();
  for (  Edge nEdge : nEdges) {
    for (    Edge mEdge : mEdges) {
      if (hasCrossing(nEdge,mEdge,idSpace))       numCross++;
    }
  }
  return numCross;
}","public int calculateCrossings(Node n,Node m,IdentifierSpace idSpace){
  int numCross=0;
  Edge[] nEdges=n.generateAllEdges();
  Edge[] mEdges=m.generateAllEdges();
  handledEdges=new HashSet<String>();
  for (  Edge nEdge : nEdges) {
    for (    Edge mEdge : mEdges) {
      if (hasCrossing(nEdge,mEdge,idSpace,true))       numCross++;
    }
  }
  return numCross;
}",0.9931412894375856
39885,"private boolean hasCrossingPlane(Edge x,Edge y){
  return hasCrossing(getPlaneEdgeFromPI(x),getPlaneEdgeFromPI(y));
}","private boolean hasCrossingPlane(Edge x,Edge y,Boolean useShortcut){
  return hasCrossing(getPlaneEdgeFromPI(x),getPlaneEdgeFromPI(y),useShortcut);
}",0.8796992481203008
39886,"private boolean hasCrossing(PlaneEdge x,PlaneEdge y){
  String edgeString=x + ""String_Node_Str"" + y;
  if (y.startX < x.startX) {
    edgeString=y + ""String_Node_Str"" + x;
  }
  if (handledEdges.contains(edgeString)) {
    return false;
  }
  handledEdges.add(edgeString);
  double d=(x.startX - x.endX) * (y.startY - y.endY) - (x.startY - x.endY) * (y.startX - y.endX);
  if (d == 0) {
    return false;
  }
  double xi=((y.startX - y.endX) * (x.startX * x.endY - x.startY * x.endX) - (x.startX - x.endX) * (y.startX * y.endY - y.startY * y.endX)) / d;
  double yi=((y.startY - y.endY) * (x.startX * x.endY - x.startY * x.endX) - (x.startY - x.endY) * (y.startX * y.endY - y.startY * y.endX)) / d;
  if (isBetween(x.startX,x.endX,xi) && isBetween(x.startY,x.endY,yi) && isBetween(y.startX,y.endX,xi)&& isBetween(y.startY,y.endY,yi)) {
    return true;
  }
  return false;
}","private boolean hasCrossing(PlaneEdge x,PlaneEdge y,Boolean useShortcut){
  String edgeString=x + ""String_Node_Str"" + y;
  if (y.startX < x.startX) {
    edgeString=y + ""String_Node_Str"" + x;
  }
  if (useShortcut) {
    if (handledEdges.contains(edgeString)) {
      return false;
    }
    handledEdges.add(edgeString);
  }
  double d=(x.startX - x.endX) * (y.startY - y.endY) - (x.startY - x.endY) * (y.startX - y.endX);
  if (d == 0) {
    return false;
  }
  double xi=((y.startX - y.endX) * (x.startX * x.endY - x.startY * x.endX) - (x.startX - x.endX) * (y.startX * y.endY - y.startY * y.endX)) / d;
  double yi=((y.startY - y.endY) * (x.startX * x.endY - x.startY * x.endX) - (x.startY - x.endY) * (y.startX * y.endY - y.startY * y.endX)) / d;
  if (isBetween(x.startX,x.endX,xi) && isBetween(x.startY,x.endY,yi) && isBetween(y.startX,y.endX,xi)&& isBetween(y.startY,y.endY,yi)) {
    return true;
  }
  return false;
}",0.9705719044975014
39887,"@Override public Partition<Double>[] getPartitions(){
  return this.partitions;
}","@Override public DPartition[] getPartitions(){
  return this.partitions;
}",0.9419354838709676
39888,"@Override public Partition<Double>[] getPartitions(){
  return this.partitions;
}","@Override public DPartition[] getPartitions(){
  return this.partitions;
}",0.9419354838709676
39889,"@Override public Graph transform(Graph g){
  tree=(SpanningTree)g.getProperty(""String_Node_Str"");
  int source=tree.getSrc();
  radiuses=new double[g.getNodes().length];
  delta=new double[g.getNodes().length];
  angularSector=new double[g.getNodes().length];
  calculateRadius(tree,source);
  Point center=new Point(0,0);
  coordAssign(tree,source,center);
  return g;
}","@Override public Graph transform(Graph g){
  tree=(SpanningTree)g.getProperty(""String_Node_Str"");
  int source=tree.getSrc();
  int numNodes=g.getNodes().length;
  nodePositionsX=new double[numNodes];
  nodePositionsY=new double[numNodes];
  radiuses=new double[numNodes];
  delta=new double[numNodes];
  angularSector=new double[numNodes];
  calculateRadius(tree,source);
  Point center=new Point(0,0);
  coordAssign(tree,source,center);
  writeIDSpace(g);
  if (graphPlotter != null)   graphPlotter.plotFinalGraph(g,idSpace);
  if (graphPlotter != null)   graphPlotter.plotSpanningTree(g,idSpace);
  return g;
}",0.5853658536585366
39890,"public Edge[] getAllEdges(){
  ArrayList<Edge> edgeList=new ArrayList<Edge>();
  for (  int dst : getOutgoingEdges()) {
    edgeList.add(new Edge(this.index,dst));
  }
  for (  int src : getIncomingEdges()) {
    edgeList.add(new Edge(src,this.index));
  }
  return (Edge[])edgeList.toArray();
}","public Edge[] getAllEdges(){
  ArrayList<Edge> edgeList=new ArrayList<Edge>();
  for (  int dst : getOutgoingEdges()) {
    edgeList.add(new Edge(this.index,dst));
  }
  for (  int src : getIncomingEdges()) {
    edgeList.add(new Edge(src,this.index));
  }
  Edge[] arrayEdgeList=new Edge[edgeList.size()];
  for (int i=0; i < arrayEdgeList.length; i++) {
    arrayEdgeList[i]=edgeList.get(i);
  }
  return arrayEdgeList;
}",0.7437325905292479
39891,"protected int countAllCrossings(Graph g){
  int numCross=0;
  Edge[] edgeList=g.generateEdges();
  handledEdges=new ArrayList<String>();
  for (  Edge e : edgeList) {
    numCross+=countCrossings(e,edgeList);
  }
  System.out.println(""String_Node_Str"" + numCross + ""String_Node_Str"");
  return numCross;
}","protected int countAllCrossings(Graph g){
  int numCross=0;
  Edge[] edgeList=g.generateEdges();
  handledEdges=new ArrayList<String>();
  for (  Edge e : edgeList) {
    numCross+=countCrossings(e,edgeList);
  }
  return numCross;
}",0.8327137546468402
39892,"private Boolean hasCrossing(Edge x,Edge y){
  if (x.equals(y))   return false;
  double xStart=Math.min(getPosition(x.getSrc()),getPosition(x.getDst()));
  double xEnd=Math.max(getPosition(x.getSrc()),getPosition(x.getDst()));
  String xString=xStart + ""String_Node_Str"" + xEnd;
  double yStart=Math.min(getPosition(y.getSrc()),getPosition(y.getDst()));
  double yEnd=Math.max(getPosition(y.getSrc()),getPosition(y.getDst()));
  String yString=yStart + ""String_Node_Str"" + yEnd;
  String edgeString;
  if (xStart < yStart)   edgeString=xString + ""String_Node_Str"" + yString;
 else   edgeString=yString + ""String_Node_Str"" + xString;
  if (handledEdges.contains(edgeString)) {
    return false;
  }
  handledEdges.add(edgeString);
  if ((xStart < yStart && xEnd > yEnd) || (yStart < xStart && yEnd > xEnd) || (yStart > xEnd || xStart > yEnd)|| (yStart == xEnd || xStart == yEnd || xStart == yStart || xEnd == yEnd)) {
    System.out.println(""String_Node_Str"" + edgeString);
    return false;
  }
  if ((xStart < yStart && xEnd < yEnd) || (xStart > yStart && xEnd > yEnd)) {
    System.out.println(""String_Node_Str"" + edgeString);
    return true;
  }
  System.err.println(""String_Node_Str"" + edgeString);
  return false;
}","private Boolean hasCrossing(Edge x,Edge y){
  if (x.equals(y))   return false;
  double xStart=Math.min(getPosition(x.getSrc()),getPosition(x.getDst()));
  double xEnd=Math.max(getPosition(x.getSrc()),getPosition(x.getDst()));
  String xString=xStart + ""String_Node_Str"" + xEnd;
  double yStart=Math.min(getPosition(y.getSrc()),getPosition(y.getDst()));
  double yEnd=Math.max(getPosition(y.getSrc()),getPosition(y.getDst()));
  String yString=yStart + ""String_Node_Str"" + yEnd;
  String edgeString;
  if (xStart < yStart)   edgeString=xString + ""String_Node_Str"" + yString;
 else   edgeString=yString + ""String_Node_Str"" + xString;
  if (handledEdges.contains(edgeString)) {
    return false;
  }
  handledEdges.add(edgeString);
  if ((xStart < yStart && xEnd > yEnd) || (yStart < xStart && yEnd > xEnd) || (yStart > xEnd || xStart > yEnd)|| (yStart == xEnd || xStart == yEnd || xStart == yStart || xEnd == yEnd)) {
    return false;
  }
  if ((xStart < yStart && xEnd < yEnd) || (xStart > yStart && xEnd > yEnd)) {
    return true;
  }
  System.err.println(""String_Node_Str"" + edgeString);
  return false;
}",0.8472103004291845
39893,"@Override public int compareTo(PlaneIdentifier o){
  return 0;
}","@Override public int compareTo(MDIdentifier o){
  return 0;
}",0.944
39894,"public void plot(Graph g,String filename){
  if (!disabled) {
    gephi.Plot(g,filename + ""String_Node_Str"" + extension);
  }
}","public void plot(Graph g,String filename){
  gephi.Plot(g,filename + ""String_Node_Str"" + extension);
}",0.8908296943231441
39895,"public void Plot(Graph g,String fileName){
  gephiNodes=new org.gephi.graph.api.Node[g.getNodes().length];
  this.plotGraph(g);
  ExportController ec=Lookup.getDefault().lookup(ExportController.class);
  try {
    ec.exportFile(new File(Config.get(""String_Node_Str"") + fileName));
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return;
  }
}","public void Plot(Graph g,String fileName){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.newProject();
  graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  gephiGraph=graphModel.getGraph();
  PreviewModel model=Lookup.getDefault().lookup(PreviewController.class).getModel();
  model.getUndirectedEdgeSupervisor().setCurvedFlag(false);
  model.getBiEdgeSupervisor().setCurvedFlag(false);
  gephiNodes=new org.gephi.graph.api.Node[g.getNodes().length];
  this.plotGraph(g);
  ExportController ec=Lookup.getDefault().lookup(ExportController.class);
  try {
    ec.exportFile(new File(Config.get(""String_Node_Str"") + fileName));
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return;
  }
}",0.6385650224215247
39896,"public Graph getSpanningTree(Node root){
  Graph result=new Graph(this.name + ""String_Node_Str"");
  Node[] resultNodes=new Node[this.nodes.length];
  int[] edges;
  int nodeCounter=0;
  Node tempNodeFromList, tempNewNode;
  LinkedList<Node> todoList=new LinkedList<Node>();
  LinkedList<Integer> handledNodes=new LinkedList<Integer>();
  LinkedList<Integer> linkedNodes=new LinkedList<Integer>();
  LinkedList<Integer> newEdges;
  todoList.add(root);
  linkedNodes.add(root.getIndex());
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    if (handledNodes.contains(tempNodeFromList.getIndex())) {
      continue;
    }
    edges=tempNodeFromList.getOutgoingEdges();
    newEdges=new LinkedList<Integer>();
    for (    int e : edges) {
      if (!linkedNodes.contains(e)) {
        todoList.add(this.nodes[e]);
        newEdges.add(e);
        linkedNodes.add(e);
      }
    }
    tempNewNode=new Node(tempNodeFromList.getIndex(),result);
    edges=new int[newEdges.size()];
    for (int i=0; i < newEdges.size(); i++) {
      edges[i]=newEdges.get(i);
    }
    tempNewNode.setOutgoingEdges(edges);
    resultNodes[nodeCounter]=tempNewNode;
    handledNodes.add(tempNodeFromList.getIndex());
    nodeCounter++;
  }
  result.setNodes(resultNodes);
  return result;
}","public Graph getSpanningTree(Node root){
  Graph result=new Graph(this.name + ""String_Node_Str"");
  Node[] resultNodes=new Node[this.nodes.length];
  int[] edges;
  Node tempNodeFromList, tempNewNode;
  LinkedList<Node> todoList=new LinkedList<Node>();
  LinkedList<Integer> handledNodes=new LinkedList<Integer>();
  LinkedList<Integer> linkedNodes=new LinkedList<Integer>();
  LinkedList<Integer> newEdges;
  todoList.add(root);
  linkedNodes.add(root.getIndex());
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    if (handledNodes.contains(tempNodeFromList.getIndex())) {
      continue;
    }
    edges=tempNodeFromList.getOutgoingEdges();
    newEdges=new LinkedList<Integer>();
    for (    int e : edges) {
      if (!linkedNodes.contains(e)) {
        todoList.add(this.nodes[e]);
        newEdges.add(e);
        linkedNodes.add(e);
      }
    }
    tempNewNode=new Node(tempNodeFromList.getIndex(),result);
    edges=new int[newEdges.size()];
    for (int i=0; i < newEdges.size(); i++) {
      edges[i]=newEdges.get(i);
    }
    tempNewNode.setOutgoingEdges(edges);
    resultNodes[tempNodeFromList.getIndex()]=tempNewNode;
    handledNodes.add(tempNodeFromList.getIndex());
  }
  result.setNodes(resultNodes);
  return result;
}",0.1857366771159874
39897,"@Override public Double distance(Identifier<Double> id){
  MDIdentifier to=(MDIdentifier)id;
  if (this.idSpace.getDimensions() != to.getIdSpace().getDimensions()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  double squarredResult=0;
  for (int i=0; i < this.idSpace.getDimensions(); i++) {
    if (this.idSpace.isWrapAround()) {
      squarredResult+=Math.abs(this.coordinates[i] - to.getCoordinate(i)) % (this.idSpace.getModulus(i) / 2.0);
    }
 else {
      squarredResult+=Math.abs(this.coordinates[i] - to.getCoordinate(i));
    }
  }
  return Math.sqrt(squarredResult);
}","@Override public Double distance(Identifier<Double> id){
  MDIdentifier to=(MDIdentifier)id;
  if (this.idSpace.getDimensions() != to.getIdSpace().getDimensions()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  double squarredResult=0;
  double temp;
  for (int i=0; i < this.idSpace.getDimensions(); i++) {
    if (this.idSpace.isWrapAround()) {
      temp=Math.abs(this.coordinates[i] - to.getCoordinate(i)) % (this.idSpace.getModulus(i) / 2.0);
    }
 else {
      temp=Math.abs(this.coordinates[i] - to.getCoordinate(i));
    }
    squarredResult+=Math.pow(temp,2);
  }
  return Math.sqrt(squarredResult);
}",0.6139917695473252
39898,"@Override public int compareTo(PlaneIdentifier o){
  return 0;
}","@Override public int compareTo(MDIdentifier o){
  return 0;
}",0.944
39899,"public Edge[] generateEdgesUnidirectional(){
  int index=0;
  Edge[] edges=new Edge[this.parent.length - 1];
  for (int i=0; i < this.parent.length; i++) {
    if (i != -1) {
      edges[index++]=new Edge(this.parent[i],i);
    }
  }
  return edges;
}","public Edge[] generateEdgesUnidirectional(){
  int index=0;
  Edge[] edges=new Edge[this.parent.length - 1];
  for (int i=0; i < this.parent.length; i++) {
    if (this.parent[i] != -1) {
      edges[index++]=new Edge(this.parent[i],i);
    }
  }
  return edges;
}",0.970873786407767
39900,"public Edge[] generateEdgesBidirectional(){
  int index=0;
  Edge[] edges=new Edge[this.parent.length * 2 - 2];
  for (int i=0; i < this.parent.length; i++) {
    if (i != -1) {
      edges[index++]=new Edge(this.parent[i],i);
      edges[index++]=new Edge(i,this.parent[i]);
    }
  }
  return edges;
}","public Edge[] generateEdgesBidirectional(){
  int index=0;
  Edge[] edges=new Edge[this.parent.length * 2 - 2];
  for (int i=0; i < this.parent.length; i++) {
    if (this.parent[i] != -1) {
      edges[index++]=new Edge(this.parent[i],i);
      edges[index++]=new Edge(i,this.parent[i]);
    }
  }
  return edges;
}",0.975767366720517
39901,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"" + false);
  Network nw1=new ReadableFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
  Network nw2=new ReadableFolder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
  Network nw3=new ReadableList(""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},null,null);
  Series s1=Series.generate(nw1,1);
  Series s2=Series.generate(nw2,10);
  Series s3=Series.generate(nw3,17);
  Plot.multiAvg(s1,""String_Node_Str"");
  Network er=new ErdosRenyi(100,10,false,null,null);
  GraphWriter.write(er.generate(),""String_Node_Str"");
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"" + false);
  Network nw1=new ReadableFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
  Network nw2=new ReadableFolder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
  Network nw3=new ReadableList(""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},null,null);
  Series s1=Series.generate(nw1,1);
  Series s2=Series.generate(nw2,10);
  Series s3=Series.generate(nw3,17);
  Plot.multiAvg(s1,""String_Node_Str"");
  Network er=new ErdosRenyi(100,10,false,null,null);
  GraphWriter.write(er.generate(),""String_Node_Str"");
}",0.9906832298136646
39902,"@Override public void computeData(Graph graph,Network nw,HashMap<String,Metric> metrics){
  this.runtime=new Timer();
  this.localCharacteristicPathLength=new double[graph.getNodes().length];
  long[] SPL=this.computeShortestPathLengths(graph.getNodes());
  this.shortestPathLengthDistribution=new Distribution(this.computeShortestPathLengthDistribution(SPL));
  this.shortestPathLengthDistributionAbsolute=new Distribution(this.computeShortestPathLengthDistributionAbsolute(SPL,graph));
  this.connectivity=(double)Util.sum(SPL) / (double)(graph.getNodes().length * (graph.getNodes().length - 1));
  this.runtime.end();
}","@Override public void computeData(Graph graph,Network nw,HashMap<String,Metric> metrics){
  this.runtime=new Timer();
  this.localCharacteristicPathLength=new double[graph.getNodes().length];
  long[] SPL=this.computeShortestPathLengths(graph.getNodes());
  this.shortestPathLengthDistribution=new Distribution(this.computeShortestPathLengthDistribution(SPL));
  this.shortestPathLengthDistributionAbsolute=new Distribution(this.computeShortestPathLengthDistributionAbsolute(SPL,graph));
  this.connectivity=(double)Util.sum(SPL) / (double)((double)graph.getNodes().length * (double)(graph.getNodes().length - 1));
  this.runtime.end();
}",0.9873015873015872
39903,"private double[] computeShortestPathLengthDistributionAbsolute(long[] SPL,Graph graph){
  long sum=graph.getNodes().length * (graph.getNodes().length - 1);
  double[] spld=new double[SPL.length];
  for (int i=0; i < SPL.length; i++) {
    spld[i]=(double)SPL[i] / sum;
  }
  return spld;
}","private double[] computeShortestPathLengthDistributionAbsolute(long[] SPL,Graph graph){
  long sum=(long)graph.getNodes().length * (long)(graph.getNodes().length - 1);
  double[] spld=new double[SPL.length];
  for (int i=0; i < SPL.length; i++) {
    spld[i]=(double)SPL[i] / sum;
  }
  return spld;
}",0.9796610169491524
39904,"public Edge[] getAllEdges(){
  ArrayList<Edge> edgeList=new ArrayList<Edge>();
  for (  int dst : getOutgoingEdges()) {
    edgeList.add(new Edge(this.index,dst));
  }
  for (  int src : getIncomingEdges()) {
    edgeList.add(new Edge(src,this.index));
  }
  return (Edge[])edgeList.toArray();
}","public Edge[] getAllEdges(){
  ArrayList<Edge> edgeList=new ArrayList<Edge>();
  for (  int dst : getOutgoingEdges()) {
    edgeList.add(new Edge(this.index,dst));
  }
  for (  int src : getIncomingEdges()) {
    edgeList.add(new Edge(src,this.index));
  }
  Edge[] arrayEdgeList=new Edge[edgeList.size()];
  for (int i=0; i < arrayEdgeList.length; i++) {
    arrayEdgeList[i]=edgeList.get(i);
  }
  return arrayEdgeList;
}",0.7437325905292479
39905,"protected int countAllCrossings(Graph g){
  int numCross=0;
  Edge[] edgeList=g.generateEdges();
  handledEdges=new ArrayList<String>();
  for (  Edge e : edgeList) {
    numCross+=countCrossings(e,edgeList);
  }
  System.out.println(""String_Node_Str"" + numCross + ""String_Node_Str"");
  return numCross;
}","protected int countAllCrossings(Graph g){
  int numCross=0;
  Edge[] edgeList=g.generateEdges();
  handledEdges=new ArrayList<String>();
  for (  Edge e : edgeList) {
    numCross+=countCrossings(e,edgeList);
  }
  return numCross;
}",0.8327137546468402
39906,"private Boolean hasCrossing(Edge x,Edge y){
  if (x.equals(y))   return false;
  double xStart=Math.min(getPosition(x.getSrc()),getPosition(x.getDst()));
  double xEnd=Math.max(getPosition(x.getSrc()),getPosition(x.getDst()));
  String xString=xStart + ""String_Node_Str"" + xEnd;
  double yStart=Math.min(getPosition(y.getSrc()),getPosition(y.getDst()));
  double yEnd=Math.max(getPosition(y.getSrc()),getPosition(y.getDst()));
  String yString=yStart + ""String_Node_Str"" + yEnd;
  String edgeString;
  if (xStart < yStart)   edgeString=xString + ""String_Node_Str"" + yString;
 else   edgeString=yString + ""String_Node_Str"" + xString;
  if (handledEdges.contains(edgeString)) {
    return false;
  }
  handledEdges.add(edgeString);
  if ((xStart < yStart && xEnd > yEnd) || (yStart < xStart && yEnd > xEnd) || (yStart > xEnd || xStart > yEnd)|| (yStart == xEnd || xStart == yEnd || xStart == yStart || xEnd == yEnd)) {
    System.out.println(""String_Node_Str"" + edgeString);
    return false;
  }
  if ((xStart < yStart && xEnd < yEnd) || (xStart > yStart && xEnd > yEnd)) {
    System.out.println(""String_Node_Str"" + edgeString);
    return true;
  }
  System.err.println(""String_Node_Str"" + edgeString);
  return false;
}","private Boolean hasCrossing(Edge x,Edge y){
  if (x.equals(y))   return false;
  double xStart=Math.min(getPosition(x.getSrc()),getPosition(x.getDst()));
  double xEnd=Math.max(getPosition(x.getSrc()),getPosition(x.getDst()));
  String xString=xStart + ""String_Node_Str"" + xEnd;
  double yStart=Math.min(getPosition(y.getSrc()),getPosition(y.getDst()));
  double yEnd=Math.max(getPosition(y.getSrc()),getPosition(y.getDst()));
  String yString=yStart + ""String_Node_Str"" + yEnd;
  String edgeString;
  if (xStart < yStart)   edgeString=xString + ""String_Node_Str"" + yString;
 else   edgeString=yString + ""String_Node_Str"" + xString;
  if (handledEdges.contains(edgeString)) {
    return false;
  }
  handledEdges.add(edgeString);
  if ((xStart < yStart && xEnd > yEnd) || (yStart < xStart && yEnd > xEnd) || (yStart > xEnd || xStart > yEnd)|| (yStart == xEnd || xStart == yEnd || xStart == yStart || xEnd == yEnd)) {
    return false;
  }
  if ((xStart < yStart && xEnd < yEnd) || (xStart > yStart && xEnd > yEnd)) {
    return true;
  }
  System.err.println(""String_Node_Str"" + edgeString);
  return false;
}",0.8472103004291845
39907,"public Graph getSpanningTree(Node root){
  Graph result=new Graph(this.name + ""String_Node_Str"");
  Node[] resultNodes=new Node[this.nodes.length];
  int[] edges;
  int nodeCounter=0;
  Node tempNodeFromList, tempNewNode;
  LinkedList<Node> todoList=new LinkedList<Node>();
  LinkedList<Integer> handledNodes=new LinkedList<Integer>();
  LinkedList<Integer> linkedNodes=new LinkedList<Integer>();
  LinkedList<Integer> newEdges;
  todoList.add(root);
  linkedNodes.add(root.getIndex());
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    if (handledNodes.contains(tempNodeFromList.getIndex())) {
      continue;
    }
    edges=tempNodeFromList.getOutgoingEdges();
    newEdges=new LinkedList<Integer>();
    for (    int e : edges) {
      if (!linkedNodes.contains(e)) {
        todoList.add(this.nodes[e]);
        newEdges.add(e);
        linkedNodes.add(e);
      }
    }
    tempNewNode=new Node(tempNodeFromList.getIndex(),result);
    edges=new int[newEdges.size()];
    for (int i=0; i < newEdges.size(); i++) {
      edges[i]=newEdges.get(i);
    }
    tempNewNode.setOutgoingEdges(edges);
    resultNodes[nodeCounter]=tempNewNode;
    handledNodes.add(tempNodeFromList.getIndex());
    nodeCounter++;
  }
  result.setNodes(resultNodes);
  return result;
}","public Graph getSpanningTree(Node root){
  Graph result=new Graph(this.name + ""String_Node_Str"");
  Node[] resultNodes=new Node[this.nodes.length];
  int[] edges;
  Node tempNodeFromList, tempNewNode;
  LinkedList<Node> todoList=new LinkedList<Node>();
  LinkedList<Integer> handledNodes=new LinkedList<Integer>();
  LinkedList<Integer> linkedNodes=new LinkedList<Integer>();
  LinkedList<Integer> newEdges;
  todoList.add(root);
  linkedNodes.add(root.getIndex());
  while (!todoList.isEmpty()) {
    tempNodeFromList=todoList.pop();
    if (handledNodes.contains(tempNodeFromList.getIndex())) {
      continue;
    }
    edges=tempNodeFromList.getOutgoingEdges();
    newEdges=new LinkedList<Integer>();
    for (    int e : edges) {
      if (!linkedNodes.contains(e)) {
        todoList.add(this.nodes[e]);
        newEdges.add(e);
        linkedNodes.add(e);
      }
    }
    tempNewNode=new Node(tempNodeFromList.getIndex(),result);
    edges=new int[newEdges.size()];
    for (int i=0; i < newEdges.size(); i++) {
      edges[i]=newEdges.get(i);
    }
    tempNewNode.setOutgoingEdges(edges);
    resultNodes[tempNodeFromList.getIndex()]=tempNewNode;
    handledNodes.add(tempNodeFromList.getIndex());
  }
  result.setNodes(resultNodes);
  return result;
}",0.1857366771159874
39908,"public void plot(Graph g,String filename){
  if (!disabled) {
    gephi.Plot(g,filename + ""String_Node_Str"" + extension);
  }
}","public void plot(Graph g,String filename){
  gephi.Plot(g,filename + ""String_Node_Str"" + extension);
}",0.8908296943231441
39909,"public void Plot(Graph g,String fileName){
  gephiNodes=new org.gephi.graph.api.Node[g.getNodes().length];
  this.plotGraph(g);
  ExportController ec=Lookup.getDefault().lookup(ExportController.class);
  try {
    ec.exportFile(new File(Config.get(""String_Node_Str"") + fileName));
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return;
  }
}","public void Plot(Graph g,String fileName){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.newProject();
  graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  gephiGraph=graphModel.getGraph();
  PreviewModel model=Lookup.getDefault().lookup(PreviewController.class).getModel();
  model.getUndirectedEdgeSupervisor().setCurvedFlag(false);
  model.getBiEdgeSupervisor().setCurvedFlag(false);
  gephiNodes=new org.gephi.graph.api.Node[g.getNodes().length];
  this.plotGraph(g);
  ExportController ec=Lookup.getDefault().lookup(ExportController.class);
  try {
    ec.exportFile(new File(Config.get(""String_Node_Str"") + fileName));
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return;
  }
}",0.6385650224215247
39910,"/** 
 * @param args
 */
public static void main(String[] args){
  Stats stats=new Stats();
  boolean generate=true;
  int times=1;
  boolean wot=false;
  boolean skipExistingFolders=false;
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"" + skipExistingFolders);
  Network nw1=new ErdosRenyi(1000,20,true,new Greedy(),new Transformation[]{new RandomRingIDSpace()});
  Network nw2=new Chord(1000,20,true,new Greedy(),null);
  Network[] nw=new Network[]{nw1,nw2};
  Series[] s=Series.generate(nw,1);
  Plot.allMulti(s,""String_Node_Str"");
  stats.end();
}","/** 
 * @param args
 */
public static void main(String[] args){
  Stats stats=new Stats();
  boolean generate=true;
  int times=1;
  boolean wot=false;
  boolean skipExistingFolders=false;
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"" + skipExistingFolders);
  Network nw1=new ReadableFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null);
  Graph g=nw1.generate();
  Transformation t=new RandomRingIDSpaceSimple();
  g=t.transform(g);
  GraphWriter.writeWithProperties(g,""String_Node_Str"");
  Graph g2=GraphReader.readWithProperties(""String_Node_Str"");
  GraphWriter.writeWithProperties(g2,""String_Node_Str"");
  stats.end();
}",0.6654654654654655
39911,"@Override public Double distance(Identifier<Double> id){
  MDIdentifier to=(MDIdentifier)id;
  if (this.idSpace.getDimensions() != to.getIdSpace().getDimensions()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  double squarredResult=0;
  for (int i=0; i < this.idSpace.getDimensions(); i++) {
    if (this.idSpace.isWrapAround()) {
      squarredResult+=Math.abs(this.coordinates[i] - to.getCoordinate(i)) % (this.idSpace.getModulus(i) / 2.0);
    }
 else {
      squarredResult+=Math.abs(this.coordinates[i] - to.getCoordinate(i));
    }
  }
  return Math.sqrt(squarredResult);
}","@Override public Double distance(Identifier<Double> id){
  MDIdentifier to=(MDIdentifier)id;
  if (this.idSpace.getDimensions() != to.getIdSpace().getDimensions()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  double squarredResult=0;
  double temp;
  for (int i=0; i < this.idSpace.getDimensions(); i++) {
    if (this.idSpace.isWrapAround()) {
      temp=Math.abs(this.coordinates[i] - to.getCoordinate(i)) % (this.idSpace.getModulus(i) / 2.0);
    }
 else {
      temp=Math.abs(this.coordinates[i] - to.getCoordinate(i));
    }
    squarredResult+=Math.pow(temp,2);
  }
  return Math.sqrt(squarredResult);
}",0.6139917695473252
39912,"protected NeighborsFirstObfuscatedLookaheadList(String key,boolean randomizeOrder){
  super(key,new String[]{},new String[]{});
  this.randomizeOrder=randomizeOrder;
}","protected NeighborsFirstObfuscatedLookaheadList(String key,boolean randomizeOrder){
  super(key,new String[]{""String_Node_Str""},new String[]{""String_Node_Str"" + randomizeOrder});
  this.randomizeOrder=randomizeOrder;
}",0.8675324675324675
39913,"@Override public Graph transform(Graph g){
  Random rand=new Random();
  GraphProperty[] gps=g.getProperties(""String_Node_Str"");
  for (  GraphProperty p : gps) {
    IdentifierSpace ids=(IdentifierSpace)p;
    ArrayList<LookaheadList> lists=new ArrayList<LookaheadList>();
    for (    Node n : g.getNodes()) {
      ArrayList<LookaheadElement> list=new ArrayList<LookaheadElement>();
      for (      int outIndex : n.getOutgoingEdges()) {
        list.add(new LookaheadElement(ids.getPartitions()[outIndex],outIndex));
        Node out=g.getNode(outIndex);
        for (        int lookaheadIndex : out.getOutgoingEdges()) {
          if (lookaheadIndex == n.getIndex()) {
            continue;
          }
          list.add(new LookaheadElement(this.obfuscatePartition(ids.getPartitions()[lookaheadIndex],rand),outIndex));
        }
      }
      lists.add(new LookaheadList(n.getIndex(),list));
    }
    g.addProperty(g.getNextKey(""String_Node_Str""),new LookaheadLists(lists));
  }
  return g;
}","@Override public Graph transform(Graph g){
  Random rand=new Random();
  GraphProperty[] gps=g.getProperties(""String_Node_Str"");
  for (  GraphProperty p : gps) {
    IdentifierSpace ids=(IdentifierSpace)p;
    ArrayList<LookaheadList> lists=new ArrayList<LookaheadList>();
    for (    Node n : g.getNodes()) {
      ArrayList<LookaheadElement> list=new ArrayList<LookaheadElement>();
      if (this.randomizeOrder) {
        ArrayList<LookaheadElement> neighbors=new ArrayList<LookaheadElement>(n.getOutDegree());
        for (        int outIndex : n.getOutgoingEdges()) {
          neighbors.add(new LookaheadElement(ids.getPartitions()[outIndex],outIndex));
        }
        for (        LookaheadElement neighbor : neighbors) {
          ArrayList<LookaheadElement> lookahead=new ArrayList<LookaheadElement>(g.getNode(neighbor.getVia()).getOutDegree());
          Node out=g.getNode(neighbor.getVia());
          for (          int lookaheadIndex : out.getOutgoingEdges()) {
            if (lookaheadIndex == n.getIndex()) {
              continue;
            }
            lookahead.add(new LookaheadElement(this.obfuscatePartition(ids.getPartitions()[lookaheadIndex],rand),neighbor.getVia()));
          }
          list.add(neighbor);
          list.addAll(lookahead);
        }
      }
 else {
        for (        int outIndex : n.getOutgoingEdges()) {
          list.add(new LookaheadElement(ids.getPartitions()[outIndex],outIndex));
          Node out=g.getNode(outIndex);
          for (          int lookaheadIndex : out.getOutgoingEdges()) {
            if (lookaheadIndex == n.getIndex()) {
              continue;
            }
            list.add(new LookaheadElement(this.obfuscatePartition(ids.getPartitions()[lookaheadIndex],rand),outIndex));
          }
        }
      }
      lists.add(new LookaheadList(n.getIndex(),list));
    }
    g.addProperty(g.getNextKey(""String_Node_Str""),new LookaheadLists(lists));
  }
  return g;
}",0.6393775372124493
39914,"protected NeighborsGroupedObfuscatedLookaheadList(String key,boolean randomizeOrder){
  super(key,new String[]{},new String[]{});
  this.randomizeOrder=randomizeOrder;
}","protected NeighborsGroupedObfuscatedLookaheadList(String key,boolean randomizeOrder){
  super(key,new String[]{""String_Node_Str""},new String[]{""String_Node_Str"" + randomizeOrder});
  this.randomizeOrder=randomizeOrder;
}",0.8688946015424165
39915,"@SuppressWarnings(""String_Node_Str"") protected Partition obfuscatePartition(Partition partition,Random rand){
  if (partition instanceof RingPartitionSimple) {
    RingPartitionSimple p=(RingPartitionSimple)partition;
    double sign=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon=minEpsilon + rand.nextDouble() * this.size;
    double position=p.getId().getPosition() + sign * epsilon;
    return new RingPartitionSimple(new RingIdentifier(position,p.getId().getIdSpace()));
  }
 else   if (partition instanceof RingPartition) {
    RingPartition p=(RingPartition)partition;
    double sign1=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon1=minEpsilon + rand.nextDouble() * this.size;
    double position1=p.getStart().getPosition() + sign1 * epsilon1;
    double sign2=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon2=minEpsilon + rand.nextDouble() * this.size;
    double position2=p.getEnd().getPosition() + sign2 * epsilon2;
    return new RingPartition(new RingIdentifier(position1,p.getStart().getIdSpace()),new RingIdentifier(position2,p.getEnd().getIdSpace()));
  }
 else   if (partition instanceof PlanePartitionSimple) {
    PlanePartitionSimple p=(PlanePartitionSimple)partition;
    double sign1=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon1=minEpsilon + rand.nextDouble() * this.size;
    double position1=p.getId().getX() + sign1 * epsilon1;
    double sign2=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon2=minEpsilon + rand.nextDouble() * this.size;
    double position2=p.getId().getY() + sign2 * epsilon2;
    return new PlanePartitionSimple(new PlaneIdentifier(position1,position2,p.getId().getIdSpace()));
  }
 else   if (partition instanceof ChordPartition) {
    ChordPartition p=(ChordPartition)partition;
    BigInteger epsilon1=new BigInteger(this.diff,rand);
    BigInteger position1=rand.nextBoolean() ? p.getPred().getId().add(this.min).add(epsilon1).mod(p.getPred().getIdSpace().getModulus()) : p.getPred().getId().subtract(this.min).subtract(epsilon1).abs().mod(p.getPred().getIdSpace().getModulus());
    BigInteger epsilon2=new BigInteger(this.diff,rand);
    BigInteger position2=rand.nextBoolean() ? p.getPred().getId().add(this.min).add(epsilon2).mod(p.getPred().getIdSpace().getModulus()) : p.getPred().getId().subtract(this.min).subtract(epsilon2).abs().mod(p.getPred().getIdSpace().getModulus());
    return new ChordPartition(new ChordIdentifier(p.getPred().getIdSpace(),position1),new ChordIdentifier(p.getSucc().getIdSpace(),position2));
  }
 else {
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") protected Partition obfuscatePartition(Partition partition,Random rand){
  if (this.minBits == 0 && this.maxBits == 0) {
    return this.copyPartition(partition);
  }
  if (partition instanceof RingPartitionSimple) {
    RingPartitionSimple p=(RingPartitionSimple)partition;
    double sign=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon=minEpsilon + rand.nextDouble() * this.size;
    double position=p.getId().getPosition() + sign * epsilon;
    return new RingPartitionSimple(new RingIdentifier(position,p.getId().getIdSpace()));
  }
 else   if (partition instanceof RingPartition) {
    RingPartition p=(RingPartition)partition;
    double sign1=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon1=minEpsilon + rand.nextDouble() * this.size;
    double position1=p.getStart().getPosition() + sign1 * epsilon1;
    double sign2=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon2=minEpsilon + rand.nextDouble() * this.size;
    double position2=p.getEnd().getPosition() + sign2 * epsilon2;
    return new RingPartition(new RingIdentifier(position1,p.getStart().getIdSpace()),new RingIdentifier(position2,p.getEnd().getIdSpace()));
  }
 else   if (partition instanceof PlanePartitionSimple) {
    PlanePartitionSimple p=(PlanePartitionSimple)partition;
    double sign1=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon1=minEpsilon + rand.nextDouble() * this.size;
    double position1=p.getId().getX() + sign1 * epsilon1;
    double sign2=rand.nextBoolean() ? 1.0 : -1.0;
    double epsilon2=minEpsilon + rand.nextDouble() * this.size;
    double position2=p.getId().getY() + sign2 * epsilon2;
    return new PlanePartitionSimple(new PlaneIdentifier(position1,position2,p.getId().getIdSpace()));
  }
 else   if (partition instanceof ChordPartition) {
    ChordPartition p=(ChordPartition)partition;
    BigInteger epsilon1=new BigInteger(this.diff,rand);
    BigInteger position1=rand.nextBoolean() ? p.getPred().getId().add(this.min).add(epsilon1).mod(p.getPred().getIdSpace().getModulus()) : p.getPred().getId().subtract(this.min).subtract(epsilon1).abs().mod(p.getPred().getIdSpace().getModulus());
    BigInteger epsilon2=new BigInteger(this.diff,rand);
    BigInteger position2=rand.nextBoolean() ? p.getSucc().getId().add(this.min).add(epsilon2).mod(p.getSucc().getIdSpace().getModulus()) : p.getSucc().getId().subtract(this.min).subtract(epsilon2).mod(p.getSucc().getIdSpace().getModulus());
    return new ChordPartition(new ChordIdentifier(p.getPred().getIdSpace(),position1),new ChordIdentifier(p.getSucc().getIdSpace(),position2));
  }
 else {
    return null;
  }
}",0.9744384198295896
39916,"protected ObfuscatedLookaheadList(String key,int minBits,int maxBits,String[] configKeys,String[] configValues){
  super(key,ObfuscatedLookaheadList.add(configKeys,""String_Node_Str"",""String_Node_Str""),ObfuscatedLookaheadList.add(configValues,""String_Node_Str"" + BigInteger.ONE.shiftLeft(minBits),""String_Node_Str"" + BigInteger.ONE.shiftLeft(maxBits)));
  this.minBits=minBits;
  this.maxBits=maxBits;
  this.min=BigInteger.ONE.shiftLeft(minBits);
  this.diff=maxBits - minBits;
}","protected ObfuscatedLookaheadList(String key,int minBits,int maxBits,String[] configKeys,String[] configValues){
  super(key,ObfuscatedLookaheadList.add(configKeys,""String_Node_Str"",""String_Node_Str""),ObfuscatedLookaheadList.add(configValues,""String_Node_Str"" + (minBits == 0 ? BigInteger.ZERO : BigInteger.ONE.shiftLeft(minBits)),""String_Node_Str"" + (maxBits == 0 ? BigInteger.ZERO : BigInteger.ONE.shiftLeft(maxBits))));
  this.minBits=minBits;
  this.maxBits=maxBits;
  this.diff=maxBits - minBits;
  if (this.minBits == 0) {
    this.min=BigInteger.ZERO;
  }
 else {
    this.min=BigInteger.ONE.shiftLeft(minBits);
  }
}",0.8159564823209429
39917,"public BigInteger distance(Identifier<BigInteger> id){
  BigInteger value=((ChordIdentifier)id).getId();
  BigInteger sub1=this.id.subtract(value).abs();
  BigInteger sub2=this.idSpace.getModulus().subtract(sub1);
  return sub1.min(sub2);
}","public BigInteger distance(Identifier<BigInteger> id){
  BigInteger dest=((ChordIdentifier)id).getId();
  if (this.id.compareTo(dest) == -1) {
    return dest.subtract(this.id);
  }
 else {
    return this.idSpace.getModulus().subtract(this.id).add(dest);
  }
}",0.4391217564870259
39918,"@Override public BigInteger distance(Identifier<BigInteger> id){
  if (this.contains(id)) {
    return BigInteger.ZERO;
  }
  BigInteger compare=((ChordIdentifier)id).getId();
  if (this.succ.getId().compareTo(compare) == -1) {
    return compare.subtract(this.succ.getId()).mod(this.succ.getIdSpace().getModulus());
  }
 else {
    return compare.add(this.succ.getIdSpace().getModulus()).subtract(this.succ.getId()).mod(this.succ.getIdSpace().getModulus());
  }
}","@Override public BigInteger distance(Identifier<BigInteger> id){
  if (this.contains(id)) {
    return BigInteger.ZERO;
  }
  BigInteger compare=((ChordIdentifier)id).getId();
  return this.succ.distance(id);
}",0.56973293768546
39919,"private Route route(ArrayList<Integer> route,int current,Identifier target,Random rand,Node[] nodes,HashSet<Integer> seen){
  route.add(current);
  seen.add(current);
  if (this.idSpace.getPartitions()[current].contains(target)) {
    return new RouteImpl(route,true);
  }
  if (route.size() > this.ttl) {
    return new RouteImpl(route,false);
  }
  LookaheadList list=this.lists.getList(current);
  int via=-1;
  if (list.getList()[0].getPartition() instanceof DPartition) {
    double currentDist=(Double)this.p[current].distance(target);
    double minDist=(Double)this.idSpace.getMaxDistance();
    for (    LookaheadElement l : list.getList()) {
      double dist=((DPartition)l.getPartition()).distance(target);
      if (dist < minDist && dist < currentDist && !seen.contains(l.getVia())) {
        minDist=dist;
        via=l.getVia();
      }
    }
  }
 else   if (list.getList()[0].getPartition() instanceof BIPartition) {
    BigInteger currentDist=(BigInteger)this.p[current].distance(target);
    BigInteger minDist=(BigInteger)this.idSpace.getMaxDistance();
    for (    LookaheadElement l : list.getList()) {
      BigInteger dist=((BIPartition)l.getPartition()).distance(target);
      if (dist.compareTo(minDist) == -1 && dist.compareTo(currentDist) == -1 && !seen.contains(l.getVia())) {
        minDist=dist;
        via=l.getVia();
      }
    }
  }
 else {
    return null;
  }
  if (via == -1) {
    return new RouteImpl(route,false);
  }
  return this.route(route,via,target,rand,nodes,seen);
}","private Route route(ArrayList<Integer> route,int current,Identifier target,Random rand,Node[] nodes,HashSet<Integer> seen){
  route.add(current);
  seen.add(current);
  if (this.idSpace.getPartitions()[current].contains(target)) {
    return new RouteImpl(route,true);
  }
  if (route.size() > this.ttl) {
    return new RouteImpl(route,false);
  }
  LookaheadList list=this.lists.getList(current);
  int via=-1;
  if (list.getList().length == 0) {
    return new RouteImpl(route,false);
  }
  if (list.getList()[0].getPartition() instanceof DPartition) {
    double currentDist=(Double)this.p[current].distance(target);
    double minDist=(Double)this.idSpace.getMaxDistance();
    for (    LookaheadElement l : list.getList()) {
      double dist=((DPartition)l.getPartition()).distance(target);
      if (dist < minDist && dist < currentDist && !seen.contains(l.getVia())) {
        minDist=dist;
        via=l.getVia();
      }
    }
  }
 else   if (list.getList()[0].getPartition() instanceof BIPartition) {
    BigInteger currentDist=(BigInteger)this.p[current].distance(target);
    BigInteger minDist=(BigInteger)this.idSpace.getMaxDistance();
    for (    LookaheadElement l : list.getList()) {
      BigInteger dist=((BIPartition)l.getPartition()).distance(target);
      if (dist.compareTo(minDist) == -1 && dist.compareTo(currentDist) == -1 && !seen.contains(l.getVia())) {
        minDist=dist;
        via=l.getVia();
      }
    }
  }
 else {
    return null;
  }
  if (via == -1) {
    return new RouteImpl(route,false);
  }
  return this.route(route,via,target,rand,nodes,seen);
}",0.9746388443017656
39920,"@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  if (!g.hasProperty(""String_Node_Str"")) {
    this.runtime=new Timer();
    this.communitySize=new Distribution(new double[]{0.0});
    this.runtime.end();
  }
  this.runtime=new Timer();
  gtna.communities.Communities communities=(gtna.communities.Communities)g.getProperty(""String_Node_Str"");
  double[] c=new double[communities.getCommunities().length];
  for (int i=0; i < c.length; i++) {
    c[i]=(double)communities.getCommunities()[i].getNodes().length / (double)g.getNodes().length;
  }
  Arrays.sort(c);
  for (int i=0; i < c.length / 2; i++) {
    double temp=c[i];
    c[i]=c[c.length - i - 1];
    c[c.length - i - 1]=temp;
  }
  this.communitySize=new Distribution(c);
  this.runtime.end();
}","@Override public void computeData(Graph g,Network n,HashMap<String,Metric> m){
  if (!g.hasProperty(""String_Node_Str"")) {
    this.runtime=new Timer();
    this.communitySize=new Distribution(new double[]{0.0});
    this.runtime.end();
    return;
  }
  this.runtime=new Timer();
  gtna.communities.Communities communities=(gtna.communities.Communities)g.getProperty(""String_Node_Str"");
  double[] c=new double[communities.getCommunities().length];
  for (int i=0; i < c.length; i++) {
    c[i]=(double)communities.getCommunities()[i].getNodes().length / (double)g.getNodes().length;
  }
  Arrays.sort(c);
  for (int i=0; i < c.length / 2; i++) {
    double temp=c[i];
    c[i]=c[c.length - i - 1];
    c[c.length - i - 1]=temp;
  }
  this.communitySize=new Distribution(c);
  this.runtime.end();
}",0.9924242424242424
39921,"public Edge[] generateEdges(){
  int E=0;
  for (  Node n : this.nodes) {
    E+=n.getDegree();
  }
  Edge[] edges=new Edge[E];
  int index=0;
  for (  Node n : this.nodes) {
    for (    int out : n.getOutgoingEdges()) {
      edges[index++]=new Edge(n.getIndex(),out);
    }
    for (    int in : n.getIncomingEdges()) {
      edges[index++]=new Edge(in,n.getIndex());
    }
  }
  return edges;
}","public Edge[] generateEdges(){
  int E=0;
  for (  Node n : this.nodes) {
    E+=n.getOutDegree();
  }
  Edge[] edges=new Edge[E];
  int index=0;
  for (  Node n : this.nodes) {
    for (    int out : n.getOutgoingEdges()) {
      edges[index++]=new Edge(n.getIndex(),out);
    }
  }
  return edges;
}",0.8125894134477826
39922,"public void computeData(Graph graph,Network nw,HashMap<String,Metric> m){
  this.runtime=new Timer();
  double[] dd=new double[this.maxDegree(graph) + 1];
  double[] ddi=new double[this.maxInDegree(graph) + 1];
  double[] ddo=new double[this.maxOutDegree(graph) + 1];
  for (  Node n : graph.getNodes()) {
    dd[n.getDegree()]++;
    ddi[n.getInDegree()]++;
    ddo[n.getOutDegree()]++;
  }
  for (int i=0; i < dd.length; i++) {
    dd[i]/=(double)graph.getNodes().length;
  }
  for (int i=0; i < ddi.length; i++) {
    ddi[i]/=(double)graph.getNodes().length;
  }
  for (int i=0; i < ddo.length; i++) {
    ddo[i]/=(double)graph.getNodes().length;
  }
  this.degreeDistribution=new Distribution(dd);
  this.inDegreeDistribution=new Distribution(ddi);
  this.outDegreeDistribution=new Distribution(ddo);
  this.nodes=graph.getNodes().length;
  this.edges=graph.generateIncomingEdges().length;
  this.runtime.end();
}","public void computeData(Graph graph,Network nw,HashMap<String,Metric> m){
  this.runtime=new Timer();
  double[] dd=new double[this.maxDegree(graph) + 1];
  double[] ddi=new double[this.maxInDegree(graph) + 1];
  double[] ddo=new double[this.maxOutDegree(graph) + 1];
  for (  Node n : graph.getNodes()) {
    dd[n.getDegree()]++;
    ddi[n.getInDegree()]++;
    ddo[n.getOutDegree()]++;
  }
  for (int i=0; i < dd.length; i++) {
    dd[i]/=(double)graph.getNodes().length;
  }
  for (int i=0; i < ddi.length; i++) {
    ddi[i]/=(double)graph.getNodes().length;
  }
  for (int i=0; i < ddo.length; i++) {
    ddo[i]/=(double)graph.getNodes().length;
  }
  this.degreeDistribution=new Distribution(dd);
  this.inDegreeDistribution=new Distribution(ddi);
  this.outDegreeDistribution=new Distribution(ddo);
  this.nodes=graph.getNodes().length;
  this.edges=graph.generateEdges().length;
  this.runtime.end();
}",0.9649507119386638
39923,"public static void chordTest(){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Network nw=new Chord(10000,128,null,null);
  Series s=Series.generate(nw,10);
  Plot.multiConf(s,""String_Node_Str"");
}","public static void chordTest(){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  RoutingAlgorithm r=new GreedyBI();
  Network nw0=new Chord(16,5,r,null);
  Network[] nw=new Network[]{nw0};
  Series[] s=Series.generate(nw,1);
  Plot.multiConf(s,""String_Node_Str"");
}",0.8978723404255319
39924,"@Override public Graph generate(){
  Graph graph=new Graph(this.description());
  Node[] nodes=Node.init(this.nodes(),graph);
  graph.setNodes(nodes);
  RandomChordIDSpace t=new RandomChordIDSpace(this.bits);
  graph=t.transform(graph);
  ChordIDSpace idSpace=(ChordIDSpace)graph.getProperty(""String_Node_Str"");
  ChordPartition[] partitions=(ChordPartition[])idSpace.getPartitions();
  Edges edges=new Edges(nodes,nodes.length * this.bits);
  for (  Node node : nodes) {
    ChordPartition p=partitions[node.getIndex()];
    BigInteger id=p.getSucc().getId();
    BigInteger predID=p.getPred().getId();
    BigInteger succID=id.add(BigInteger.ONE).mod(idSpace.getModulus());
    int predIndex=this.find(partitions,p.getPred(),node.getIndex());
    int succIndex=this.find(partitions,new ChordID(idSpace,succID),node.getIndex());
    BigInteger add=BigInteger.ONE;
    int[] fingerIndex=new int[this.bits];
    BigInteger[] fingerID=new BigInteger[this.bits];
    for (int i=0; i < this.bits; i++) {
      fingerID[i]=id.add(add).mod(idSpace.getModulus());
      fingerIndex[i]=this.find(partitions,new ChordID(idSpace,fingerID[i]),node.getIndex());
      add=add.shiftLeft(1);
    }
    edges.add(node.getIndex(),predIndex);
    edges.add(node.getIndex(),succIndex);
    for (    int finger : fingerIndex) {
      edges.add(node.getIndex(),finger);
    }
  }
  edges.fill();
  graph.getTimer().end();
  return graph;
}","@Override public Graph generate(){
  Graph graph=new Graph(this.description());
  Node[] nodes=Node.init(this.nodes(),graph);
  graph.setNodes(nodes);
  RandomChordIDSpace t=new RandomChordIDSpace(this.bits);
  graph=t.transform(graph);
  ChordIDSpace idSpace=(ChordIDSpace)graph.getProperty(""String_Node_Str"");
  ChordPartition[] partitions=(ChordPartition[])idSpace.getPartitions();
  Edges edges=new Edges(nodes,nodes.length * this.bits);
  for (  Node node : nodes) {
    ChordPartition p=partitions[node.getIndex()];
    BigInteger id=p.getSucc().getId();
    BigInteger predID=p.getPred().getId();
    BigInteger succID=id.add(BigInteger.ONE).mod(idSpace.getModulus());
    int predIndex=this.find(partitions,p.getPred(),node.getIndex());
    int succIndex=this.find(partitions,new ChordID(idSpace,succID),node.getIndex());
    BigInteger add=BigInteger.ONE;
    int[] fingerIndex=new int[this.bits];
    BigInteger[] fingerID=new BigInteger[this.bits];
    for (int i=0; i < this.bits; i++) {
      fingerID[i]=id.add(add).mod(idSpace.getModulus());
      fingerIndex[i]=this.find(partitions,new ChordID(idSpace,fingerID[i]),node.getIndex());
      add=add.shiftLeft(1);
    }
    edges.add(node.getIndex(),succIndex);
    for (    int finger : fingerIndex) {
      edges.add(node.getIndex(),finger);
    }
  }
  edges.fill();
  graph.getTimer().end();
  return graph;
}",0.9849785407725322
39925,"@Override public BigInteger distance(BIID id){
  return this.succ.distance(id);
}","@Override public BigInteger distance(BIID id){
  if (this.contains(id)) {
    return BigInteger.ZERO;
  }
  BigInteger compare=((ChordID)id).getId();
  if (this.succ.getId().compareTo(compare) == -1) {
    return compare.subtract(this.succ.getId()).mod(this.succ.getIdSpace().getModulus());
  }
 else {
    return compare.add(this.succ.getIdSpace().getModulus()).subtract(this.succ.getId()).mod(this.succ.getIdSpace().getModulus());
  }
}",0.2003853564547206
39926,"@Override public boolean applicable(Graph graph){
  return graph.hasProperty(""String_Node_Str"") && graph.getProperty(""String_Node_Str"") instanceof IDSpace;
}","@Override public boolean applicable(Graph graph){
  return graph.hasProperty(""String_Node_Str"") && graph.getProperty(""String_Node_Str"") instanceof BIIDSpace;
}",0.9936708860759492
39927,"@Override public void read(String filename,Graph graph){
  Filereader fr=new Filereader(filename);
  fr.readLine();
  String key=fr.readLine();
  int partitions=Integer.parseInt(fr.readLine());
  this.partitions=new RingPartitionSimple[partitions];
  String line=null;
  while ((line=fr.readLine()) != null) {
    String[] temp=line.split(""String_Node_Str"");
    int index=Integer.parseInt(temp[0]);
    this.partitions[index++]=new RingPartitionSimple(temp[1]);
  }
  fr.close();
  graph.addProperty(key,this);
}","@Override public void read(String filename,Graph graph){
  Filereader fr=new Filereader(filename);
  fr.readLine();
  String key=fr.readLine();
  int partitions=Integer.parseInt(fr.readLine());
  this.partitions=new RingPartitionSimple[partitions];
  String line=null;
  while ((line=fr.readLine()) != null) {
    String[] temp=line.split(""String_Node_Str"");
    int index=Integer.parseInt(temp[0]);
    this.partitions[index]=new RingPartitionSimple(temp[1]);
  }
  fr.close();
  graph.addProperty(key,this);
}",0.998046875
39928,"@Override public double distance(ID id){
  return this.id.distance((RingID)id);
}","@Override public double distance(ID id){
  return this.id.distance(id);
}",0.948051948051948
39929,"private static void testRouting(){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Transformation t1=new RandomRingIDSpaceSimple();
  Transformation[] t=new Transformation[]{t1};
  RoutingAlgorithm r1=new Greedy();
  RoutingAlgorithm r2=new GreedyBacktracking();
  Network nw1=new ReadableFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",r1,t);
  Network nw2=new ReadableFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",r2,t);
  Network[] nw=new Network[]{nw1,nw2};
  Series[] s=Series.generate(nw,100);
  Plot.multiAvg(s,""String_Node_Str"");
  Plot.singlesAvg(s,""String_Node_Str"");
}","private static void testRouting(){
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Config.overwrite(""String_Node_Str"",""String_Node_Str"");
  Transformation t1=new RandomRingIDSpaceSimple();
  Transformation[] t=new Transformation[]{t1};
  RoutingAlgorithm r1=new Greedy();
  RoutingAlgorithm r2=new GreedyBacktracking();
  Network nw1=new ErdosRenyi(100,10,true,r1,t);
  Network nw2=new ErdosRenyi(100,10,true,r2,t);
  Network[] nw=new Network[]{nw1,nw2};
  Series[] s=Series.generate(nw,1);
  Plot.multiAvg(s,""String_Node_Str"");
  Plot.singlesAvg(s,""String_Node_Str"");
}",0.8933500627352572
39930,"@Override public Route routeToRandomTarget(Graph graph,int start,Random rand){
  ID target=this.idSpace.randomID(rand);
  while (this.p[start].contains(target)) {
    target=this.idSpace.randomID(rand);
  }
  return this.route(new ArrayList<Integer>(),start,target,rand,graph.getNodes(),new HashMap<Integer,Integer>());
}","@Override public Route routeToRandomTarget(Graph graph,int start,Random rand){
  ID target=this.idSpace.randomID(rand);
  while (this.p[start].contains(target)) {
    target=this.idSpace.randomID(rand);
  }
  System.out.println(""String_Node_Str"");
  return this.route(new ArrayList<Integer>(),start,target,rand,graph.getNodes(),new HashMap<Integer,Integer>());
}",0.9399707174231332
39931,"private Route route(ArrayList<Integer> route,int current,ID target,Random rand,Node[] nodes,HashMap<Integer,Integer> from){
  route.add(current);
  if (this.idSpace.getPartitions()[current].contains(target)) {
    return new RouteImpl(route,true);
  }
  double currentDist=this.idSpace.getPartitions()[current].distance(target);
  double minDist=Double.MAX_VALUE;
  int minNode=-1;
  for (  int out : nodes[current].getOutgoingEdges()) {
    double dist=this.p[out].distance(target);
    if (dist < minDist && dist < currentDist && !from.containsKey(out)) {
      minDist=dist;
      minNode=out;
    }
  }
  if (minNode == -1 && from.containsKey(current)) {
    return this.route(route,from.get(current),target,rand,nodes,from);
  }
 else   if (minNode == -1) {
    return new RouteImpl(route,false);
  }
  from.put(current,minNode);
  return this.route(route,minNode,target,rand,nodes,from);
}","private Route route(ArrayList<Integer> route,int current,ID target,Random rand,Node[] nodes,HashMap<Integer,Integer> from){
  System.out.println(""String_Node_Str"" + current);
  route.add(current);
  if (this.idSpace.getPartitions()[current].contains(target)) {
    return new RouteImpl(route,true);
  }
  double currentDist=this.idSpace.getPartitions()[current].distance(target);
  double minDist=Double.MAX_VALUE;
  int minNode=-1;
  for (  int out : nodes[current].getOutgoingEdges()) {
    double dist=this.p[out].distance(target);
    if (dist < minDist && dist < currentDist && !from.containsKey(out)) {
      minDist=dist;
      minNode=out;
    }
  }
  if (minNode == -1 && from.containsKey(current)) {
    System.out.println(""String_Node_Str"");
    return this.route(route,from.get(current),target,rand,nodes,from);
  }
 else   if (minNode == -1) {
    System.out.println(""String_Node_Str"" + route.size() + ""String_Node_Str""+ from.size());
    System.out.println(""String_Node_Str"" + current);
    for (int i=0; i < route.size(); i++) {
      System.out.print(""String_Node_Str"" + route.get(i) + ""String_Node_Str""+ from.containsKey(current));
    }
    System.out.println(""String_Node_Str"");
    return new RouteImpl(route,false);
  }
  System.out.println(""String_Node_Str"" + current + ""String_Node_Str""+ minNode);
  from.put(minNode,current);
  return this.route(route,minNode,target,rand,nodes,from);
}",0.7574837310195228
39932,"public ReadableFolder(String name,String folder,String src,int type,RoutingAlgorithm ra,Transformation[] t){
  super(key(name,folder),Integer.MIN_VALUE,new String[]{},new String[]{},ra,t);
  this.type=type;
  File d=new File(src);
  if (!d.exists()) {
    this.files=new String[0];
  }
 else {
    File[] f=d.listFiles();
    this.files=new String[f.length];
    for (int i=0; i < f.length; i++) {
      this.files[i]=f[i].getAbsolutePath();
    }
  }
  this.index=-1;
  super.setNodes(GraphReader.nodes(this.files[0],this.type));
}","public ReadableFolder(String name,String folder,String src,int type,RoutingAlgorithm ra,Transformation[] t){
  super(key(name,folder),Integer.MIN_VALUE,new String[]{},new String[]{},ra,t);
  this.type=type;
  File d=new File(src);
  if (!d.exists()) {
    this.files=new String[0];
  }
 else {
    File[] f=d.listFiles();
    this.files=new String[f.length];
    for (int i=0; i < f.length; i++) {
      this.files[i]=f[i].getAbsolutePath();
    }
  }
  this.index=-1;
  if (this.files.length == 0) {
    super.setNodes(0);
  }
 else {
    super.setNodes(GraphReader.nodes(this.files[0],this.type));
  }
}",0.934036939313984
39933,"private double[] computeLCC(NodeImpl[] nodes,HashMap<String,Edge> map){
  double[] lcc=new double[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    Node[] neighborhood=this.neighborhood(nodes[i]);
    if (neighborhood.length == 1) {
      lcc[i]=0;
    }
 else {
      int edges=this.edgesInNeighborhood_NEW(neighborhood,nodes[i],nodes.length,map);
      lcc[i]=edges / (double)(neighborhood.length * (neighborhood.length - 1));
    }
  }
  return lcc;
}","private double[] computeLCC(NodeImpl[] nodes,boolean onlyOut){
  double[] lcc=new double[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    Set<NodeImpl> n=this.neighborhood(nodes[i],onlyOut);
    if (n.size() <= 1) {
      lcc[i]=0;
    }
 else {
      int edges=this.edgesInNeighborhood(n);
      lcc[i]=edges / (double)(n.size() * (n.size() - 1));
    }
  }
  return lcc;
}",0.7067137809187279
39934,"public Value[] getValues(Value[] values){
  Value CC=new Value(""String_Node_Str"",this.cc);
  Value CCW=new Value(""String_Node_Str"",this.ccw);
  Value CC_RT=new Value(""String_Node_Str"",this.timer.rt());
  return new Value[]{CC,CCW,CC_RT};
}","public Value[] getValues(Value[] values){
  Value CC=new Value(""String_Node_Str"",this.cc);
  Value CCW=new Value(""String_Node_Str"",this.ccw);
  Value RT=new Value(""String_Node_Str"",this.timer.rt());
  return new Value[]{CC,CCW,RT};
}",0.9872881355932204
39935,"public void computeData(Graph g,Network n,Hashtable<String,Metric> m){
  this.timer=new Timer();
  double[] lcc=this.computeLCC(g.nodes,g.map());
  Arrays.sort(lcc);
  this.lcc=lcc;
  this.lccShort=Util.avgArray(lcc,Config.getInt(""String_Node_Str""));
  this.cc=this.computeCC(this.lcc);
  this.ccw=this.computeCCW(this.lcc,g.nodes);
  this.timer.end();
}","public void computeData(Graph g,Network n,Hashtable<String,Metric> m){
  this.timer=new Timer();
  boolean onlyOut=GraphProperties.bidirectional(g) || Config.getBoolean(""String_Node_Str"");
  this.lcc=this.computeLCC(g.nodes,onlyOut);
  Arrays.sort(this.lcc);
  this.lccShort=this.computeLCCShort(this.lcc);
  this.cc=this.computeCC(this.lcc);
  this.ccw=this.computeCCW(this.lcc,g.nodes);
  this.timer.end();
}",0.6178010471204188
39936,"private Node[] neighborhood(NodeImpl node){
  ArrayList<NodeImpl> neighborhood=new ArrayList<NodeImpl>(node.out().length + node.in().length);
  neighborhood.add(node);
  NodeImpl[] out=node.out();
  for (int i=0; i < out.length; i++) {
    neighborhood.add(out[i]);
  }
  NodeImpl[] in=node.in();
  for (int i=0; i < in.length; i++) {
    if (!neighborhood.contains(in[i])) {
      neighborhood.add(in[i]);
    }
  }
  return Util.toNodeImplArray(neighborhood);
}","private Set<NodeImpl> neighborhood(NodeImpl node,boolean onlyOut){
  Set<NodeImpl> n=new HashSet<NodeImpl>();
  NodeImpl[] OUT=node.out();
  for (  NodeImpl out : OUT) {
    n.add(out);
  }
  if (!onlyOut) {
    NodeImpl[] IN=node.in();
    for (    NodeImpl in : IN) {
      n.add(in);
    }
  }
  return n;
}",0.3984476067270375
39937,"protected SortingNode[] generateNodes(Graph g,Random rand){
  HashSet<NodeImpl> attackers=ATTACK_NONE.equals(this.attack) ? new HashSet<NodeImpl>() : this.selectNodesRandomly(g.nodes,this.attackers,rand);
  SortingNode[] nodes=new SortingNode[g.nodes.length];
  for (int i=0; i < g.nodes.length; i++) {
    double pos=((RingNode)g.nodes[i]).getID().pos;
    if (attackers.contains(g.nodes[i])) {
      System.out.println(""String_Node_Str"" + i);
      if (ATTACK_CONTRACTION.equals(this.attack)) {
        nodes[i]=new SwappingAttackerContraction(i,pos,this);
      }
 else       if (ATTACK_CONVERGENCE.equals(this.attack)) {
        nodes[i]=new SwappingAttackerConvergence(i,pos,this);
      }
 else       if (ATTACK_KLEINBERG.equals(this.attack)) {
        nodes[i]=new SwappingAttackerKleinberg(i,pos,this);
      }
 else       if (ATTACK_CONTRACTION_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCAttackerContraction(i,pos,this);
      }
 else       if (ATTACK_CONVERGENCE_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCAttackerConvergence(i,pos,this);
      }
 else       if (ATTACK_KLEINBERG_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCAttackerKleinberg(i,pos,this);
      }
 else {
        throw new IllegalArgumentException(this.attack + ""String_Node_Str"");
      }
    }
 else {
      if (ATTACK_NONE.equals(this.attack) || ATTACK_CONTRACTION.equals(this.attack) || ATTACK_CONVERGENCE.equals(this.attack)|| ATTACK_KLEINBERG.equals(this.attack)) {
        nodes[i]=new SwappingNode(i,pos,this);
      }
 else       if (ATTACK_CONTRACTION_WC.equals(this.attack) || ATTACK_CONVERGENCE_WC.equals(this.attack) || ATTACK_KLEINBERG_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCNode(i,pos,this);
      }
    }
  }
  this.init(g,null);
  return nodes;
}","protected SortingNode[] generateNodes(Graph g,Random rand){
  HashSet<NodeImpl> attackers=ATTACK_NONE.equals(this.attack) ? new HashSet<NodeImpl>() : this.selectNodesRandomly(g.nodes,this.attackers,rand);
  SortingNode[] nodes=new SortingNode[g.nodes.length];
  for (int i=0; i < g.nodes.length; i++) {
    double pos=((RingNode)g.nodes[i]).getID().pos;
    if (attackers.contains(g.nodes[i])) {
      System.out.println(""String_Node_Str"" + i);
      if (ATTACK_CONTRACTION.equals(this.attack)) {
        nodes[i]=new SwappingAttackerContraction(i,pos,this);
      }
 else       if (ATTACK_CONVERGENCE.equals(this.attack)) {
        nodes[i]=new SwappingAttackerConvergence(i,pos,this);
      }
 else       if (ATTACK_KLEINBERG.equals(this.attack)) {
        nodes[i]=new SwappingAttackerKleinberg(i,pos,this);
      }
 else       if (ATTACK_CONTRACTION_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCAttackerContraction(i,pos,this);
      }
 else       if (ATTACK_CONVERGENCE_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCAttackerConvergence(i,pos,this);
      }
 else       if (ATTACK_KLEINBERG_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCAttackerKleinberg(i,pos,this);
      }
 else {
        throw new IllegalArgumentException(this.attack + ""String_Node_Str"");
      }
    }
 else {
      if (ATTACK_NONE.equals(this.attack) || ATTACK_CONTRACTION.equals(this.attack) || ATTACK_CONVERGENCE.equals(this.attack)|| ATTACK_KLEINBERG.equals(this.attack)) {
        nodes[i]=new SwappingNode(i,pos,this);
      }
 else       if (ATTACK_CONTRACTION_WC.equals(this.attack) || ATTACK_CONVERGENCE_WC.equals(this.attack) || ATTACK_KLEINBERG_WC.equals(this.attack)) {
        nodes[i]=new SwappingWCNode(i,pos,this);
      }
    }
  }
  this.init(g,nodes);
  return nodes;
}",0.9891576313594662
39938,"public static String formatNumber(double d,int decimalPlaces){
  if (decimalPlaces < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (decimalPlaces == 0) {
    long rounded=Math.round(d);
    return addCommas(rounded + ""String_Node_Str"");
  }
 else {
    long rounded=Math.round(d * Math.pow(10,decimalPlaces));
    d=rounded;
    for (int i=0; i < decimalPlaces; i++) {
      d/=10.0d;
    }
    String s=showAllDigitsFormat.format(d);
    int decimalIndex=s.indexOf('.');
    String leftSide=s.substring(0,decimalIndex);
    String rightSide=s.substring(decimalIndex + 1);
    leftSide=addCommas(leftSide);
    if (decimalPlaces < rightSide.length()) {
      rightSide=rightSide.substring(0,decimalPlaces);
    }
 else     if (decimalPlaces > rightSide.length()) {
      StringBuilder sb=new StringBuilder(rightSide);
      for (int i=0; i < decimalPlaces - rightSide.length(); i++) {
        sb.append('0');
      }
      rightSide=sb.toString();
    }
    return leftSide + ""String_Node_Str"" + rightSide;
  }
}","public static String formatNumber(double d,int decimalPlaces){
  if (decimalPlaces < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (decimalPlaces == 0) {
    long rounded=Math.round(d);
    return addCommas(rounded + ""String_Node_Str"");
  }
 else {
    long rounded=Math.round(d * Math.pow(10,decimalPlaces));
    d=rounded;
    for (int i=0; i < decimalPlaces; i++) {
      d/=10.0d;
    }
    String s=showAllDigitsFormat.format(d);
    int decimalIndex=0;
    if (s.contains(""String_Node_Str"")) {
      decimalIndex=s.indexOf('.');
    }
 else     if (s.contains(""String_Node_Str"")) {
      decimalIndex=s.indexOf(',');
    }
    String leftSide=s.substring(0,decimalIndex);
    String rightSide=s.substring(decimalIndex + 1);
    leftSide=addCommas(leftSide);
    if (decimalPlaces < rightSide.length()) {
      rightSide=rightSide.substring(0,decimalPlaces);
    }
 else     if (decimalPlaces > rightSide.length()) {
      StringBuilder sb=new StringBuilder(rightSide);
      for (int i=0; i < decimalPlaces - rightSide.length(); i++) {
        sb.append('0');
      }
      rightSide=sb.toString();
    }
    return leftSide + ""String_Node_Str"" + rightSide;
  }
}",0.9297539149888144
39939,"private void stopRunning(){
  Point before=MouseInfo.getPointerInfo().getLocation();
  clickAt(rob,origin[0],origin[1]);
  rob.keyRelease(KeyEvent.VK_Q);
  rob.keyRelease(KeyEvent.VK_W);
  rob.keyRelease(KeyEvent.VK_O);
  rob.keyRelease(KeyEvent.VK_P);
  rob.mouseMove(before.x,before.y);
}","private void stopRunning(){
  Point before=MouseInfo.getPointerInfo().getLocation();
  clickAt(rob,origin[0],origin[1]);
  rob.keyPress(KeyEvent.VK_Q);
  rob.keyPress(KeyEvent.VK_W);
  rob.keyPress(KeyEvent.VK_O);
  rob.keyPress(KeyEvent.VK_P);
  doWait(20);
  rob.keyRelease(KeyEvent.VK_Q);
  rob.keyRelease(KeyEvent.VK_W);
  rob.keyRelease(KeyEvent.VK_O);
  rob.keyRelease(KeyEvent.VK_P);
  rob.mouseMove(before.x,before.y);
}",0.807799442896936
39940,"public RunInfo playOneGame(String str,long maxDuration){
  log.log(""String_Node_Str"" + str);
  doWait(500);
  this.start=System.currentTimeMillis();
  this.nextCheck=this.start + CHECK_INTERVAL;
  if (maxDuration > 0) {
    this.timeLimit=this.start + maxDuration;
  }
 else {
    this.timeLimit=0;
  }
  while (!(isFinished() || stop)) {
    playString(str);
  }
  stopRunning();
  checkSpeed();
  long end=System.currentTimeMillis();
  float distance=Float.parseFloat(captureDistance());
  RunInfo info;
  if (stop) {
    info=new RunInfo(str,this.delay,false,true,end - this.start,distance);
  }
 else {
    info=new RunInfo(str,this.delay,distance < 100,false,end - this.start,distance);
  }
  return info;
}","public RunInfo playOneGame(String str,long maxDuration){
  log.log(""String_Node_Str"" + str);
  doWait(500);
  this.start=System.currentTimeMillis();
  this.nextCheck=this.start + CHECK_INTERVAL;
  if (maxDuration > 0) {
    this.timeLimit=this.start + maxDuration;
  }
 else {
    this.timeLimit=0;
  }
  while (!(isFinished() || stop)) {
    playString(str);
  }
  stopRunning();
  checkSpeed();
  long end=System.currentTimeMillis();
  doWait(1000);
  float distance=Float.parseFloat(captureDistance());
  RunInfo info;
  if (stop) {
    info=new RunInfo(str,this.delay,false,true,end - this.start,distance);
  }
 else {
    info=new RunInfo(str,this.delay,distance < 100,false,end - this.start,distance);
  }
  return info;
}",0.9888888888888888
39941,"public void playOneRandomGame(String str){
  log.log(""String_Node_Str"" + str);
  long start=System.currentTimeMillis();
  doWait(500);
  while (!(isFinished() || stop)) {
    playString(rob,str);
  }
  long end=System.currentTimeMillis();
  log.logf(""String_Node_Str"",(end - start) / 1000.0);
}","public void playOneRandomGame(String str){
  log.log(""String_Node_Str"" + str);
  long start=System.currentTimeMillis();
  doWait(500);
  while (!(isFinished() || stop)) {
    playString(rob,str);
  }
  long end=System.currentTimeMillis();
  if (stop) {
    log.logf(""String_Node_Str"",(end - start) / 1000.0);
  }
 else {
    log.logf(""String_Node_Str"",(end - start) / 1000.0);
  }
}",0.849112426035503
39942,"/** 
 * Start a game, either by clicking on it (at first load) or pressing space for next games.
 */
public void startGame(){
  stop=false;
  clickAt(rob,origin[0],origin[1]);
  if (finished) {
    clickKey(rob,KeyEvent.VK_SPACE);
  }
}","/** 
 * Start a game, either by clicking on it (at first load) or pressing space for next games.
 */
public void startGame(){
  stop=false;
  clickAt(rob,origin[0],origin[1]);
  if (isFinished()) {
    clickKey(rob,KeyEvent.VK_SPACE);
  }
}",0.9873949579831932
39943,"private void listenToSocket() throws IOException {
  InputStream usbdInputStream=mSocket.getInputStream();
  byte[] buffer=new byte[100];
  while (true) {
    int count=usbdInputStream.read(buffer);
    if (count < 0) {
      throw new IOException(""String_Node_Str"");
    }
    Log.e(TAG,""String_Node_Str"" + count + ""String_Node_Str"");
    int pos, start;
    for (pos=0, start=0; pos < count; pos++) {
      if (buffer[pos] == 0) {
        handleEvent(new String(buffer,start,pos - start));
        start=pos + 1;
      }
    }
  }
}","private void listenToSocket() throws IOException {
  InputStream usbdInputStream=mSocket.getInputStream();
  byte[] buffer=new byte[100];
  while (true) {
    int count=usbdInputStream.read(buffer);
    if (count < 0) {
      throw new IOException(""String_Node_Str"");
    }
    int pos, start;
    for (pos=0, start=0; pos < count; pos++) {
      if (buffer[pos] == 0) {
        handleEvent(new String(buffer,start,pos - start));
        start=pos + 1;
      }
    }
  }
}",0.9383697813121272
39944,"public synchronized void stop(){
  Log.e(TAG,""String_Node_Str"");
  mRunning=false;
  if (mSocket != null) {
    try {
      mSocket.shutdownInput();
    }
 catch (    IOException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
  mWriteThread.quit();
}","public synchronized void stop(){
  Log.d(TAG,""String_Node_Str"");
  mRunning=false;
  if (mSocket != null) {
    try {
      mSocket.shutdownInput();
    }
 catch (    IOException e) {
      Log.w(TAG,""String_Node_Str"",e);
    }
  }
  mWriteThread.quit();
}",0.99609375
39945,"private synchronized void closeSocket(){
  Log.e(TAG,""String_Node_Str"");
  try {
    if (mOutputStream != null) {
      mOutputStream.close();
    }
    mOutputStream=null;
    if (mSocket != null) {
      mSocket.close();
    }
    mSocket=null;
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
}","private synchronized void closeSocket(){
  try {
    if (mOutputStream != null) {
      mOutputStream.close();
    }
    mOutputStream=null;
    if (mSocket != null) {
      mSocket.close();
    }
    mSocket=null;
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
}",0.231023102310231
39946,"private synchronized void writeCommand(String cmd,String arg){
  Log.e(TAG,""String_Node_Str"" + cmd);
  if (mOutputStream == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  String line=cmd;
  if (arg != null) {
    line+=arg;
  }
  line+='\0';
  try {
    mOutputStream.write(line.getBytes());
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","private synchronized void writeCommand(String cmd,String arg){
  if (mOutputStream == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  String line=cmd;
  if (arg != null) {
    line+=arg;
  }
  line+='\0';
  Log.d(TAG,""String_Node_Str"" + line + ""String_Node_Str"");
  try {
    mOutputStream.write(line.getBytes());
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.8748387096774194
39947,"public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest r=(HttpServletRequest)request;
  String authorization=null;
  String userFromApiToken=null;
  if ((authorization=r.getHeader(""String_Node_Str"")) != null && authorization.toLowerCase().startsWith(""String_Node_Str"")) {
    String uidpassword=Scrambler.descramble(authorization.substring(6));
    int idx=uidpassword.indexOf(':');
    if (idx >= 0) {
      String username=uidpassword.substring(0,idx);
      String password=uidpassword.substring(idx + 1);
      User u=User.get(username,false);
      if (u != null) {
        ApiTokenProperty t=u.getProperty(ApiTokenProperty.class);
        if (t != null && t.matchesPassword(password)) {
          userFromApiToken=username;
        }
      }
    }
  }
  String userFromHeader=null;
  Authentication auth=Hudson.ANONYMOUS;
  if ((forwardedUser != null && (userFromHeader=r.getHeader(forwardedUser)) != null) || userFromApiToken != null) {
    LOGGER.log(Level.FINE,""String_Node_Str"",userFromHeader);
    if (userFromHeader == null && userFromApiToken != null) {
      userFromHeader=userFromApiToken;
    }
    if (authContext == null) {
      authContext=new Hashtable<String,GrantedAuthority[]>();
    }
    if (getLDAPURL() != null) {
      GrantedAuthority[] storedGrants=authContext.get(userFromHeader);
      if (storedGrants != null && storedGrants.length > 1) {
        authorities=retrieveAuthoritiesIfNecessary(userFromHeader,storedGrants);
      }
 else {
        try {
          LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(userFromHeader);
          authorities=userDetails.getAuthorities();
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
          tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
        }
 catch (        UsernameNotFoundException e) {
          LOGGER.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
          tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
        }
      }
    }
 else {
      String groups=r.getHeader(headerGroups);
      List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
      localAuthorities.add(AUTHENTICATED_AUTHORITY);
      if (groups != null) {
        StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
        while (tokenizer.hasMoreTokens()) {
          final String token=tokenizer.nextToken().trim();
          localAuthorities.add(new GrantedAuthorityImpl(token));
        }
      }
      authorities=localAuthorities.toArray(new GrantedAuthority[0]);
      SearchTemplate searchTemplate=new UserSearchTemplate(userFromHeader);
      Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
      Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
      String[] authString=foundAuthorities.toArray(new String[0]);
      for (int i=0; i < authString.length; i++) {
        tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
      }
      authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
      authContext.put(userFromHeader,authorities);
      auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
    }
    authContext.put(userFromHeader,authorities);
    auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
  }
  retrievedUser=userFromHeader;
  SecurityContextHolder.getContext().setAuthentication(auth);
  chain.doFilter(r,response);
}","public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest r=(HttpServletRequest)request;
  String authorization=null;
  String userFromApiToken=null;
  if ((authorization=r.getHeader(""String_Node_Str"")) != null && authorization.toLowerCase().startsWith(""String_Node_Str"")) {
    String uidpassword=Scrambler.descramble(authorization.substring(6));
    int idx=uidpassword.indexOf(':');
    if (idx >= 0) {
      String username=uidpassword.substring(0,idx);
      String password=uidpassword.substring(idx + 1);
      User u=User.get(username,false);
      if (u != null) {
        ApiTokenProperty t=u.getProperty(ApiTokenProperty.class);
        if (t != null && t.matchesPassword(password)) {
          userFromApiToken=username;
        }
      }
    }
  }
  String userFromHeader=null;
  Authentication auth=Jenkins.ANONYMOUS;
  if ((forwardedUser != null && (userFromHeader=r.getHeader(forwardedUser)) != null) || userFromApiToken != null) {
    LOGGER.log(Level.FINE,""String_Node_Str"",userFromHeader);
    if (userFromHeader == null) {
      userFromHeader=userFromApiToken;
    }
    if (authContext == null) {
      authContext=new Hashtable<>();
    }
    if (getLDAPURL() != null) {
      GrantedAuthority[] storedGrants=authContext.get(userFromHeader);
      if (storedGrants != null && storedGrants.length > 1) {
        authorities=retrieveAuthoritiesIfNecessary(userFromHeader,storedGrants);
      }
 else {
        try {
          LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(userFromHeader);
          authorities=userDetails.getAuthorities();
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
          tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
        }
 catch (        UsernameNotFoundException e) {
          LOGGER.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
          tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
        }
      }
    }
 else {
      String groups=r.getHeader(headerGroups);
      List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
      localAuthorities.add(AUTHENTICATED_AUTHORITY);
      if (groups != null) {
        StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
        while (tokenizer.hasMoreTokens()) {
          final String token=tokenizer.nextToken().trim();
          localAuthorities.add(new GrantedAuthorityImpl(token));
        }
      }
      authorities=localAuthorities.toArray(new GrantedAuthority[0]);
      SearchTemplate searchTemplate=new UserSearchTemplate(userFromHeader);
      Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
      Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
      String[] authString=foundAuthorities.toArray(new String[0]);
      for (int i=0; i < authString.length; i++) {
        tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
      }
      authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
      authContext.put(userFromHeader,authorities);
      auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
    }
    authContext.put(userFromHeader,authorities);
    auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
  }
  retrievedUser=userFromHeader;
  SecurityContextHolder.getContext().setAuthentication(auth);
  chain.doFilter(r,response);
}",0.9734996102883866
39948,"public String getServerUrl(){
  if (server == null) {
    return null;
  }
  StringBuilder buf=new StringBuilder();
  boolean first=true;
  for (  String s : server.split(""String_Node_Str"")) {
    if (s.trim().length() == 0)     continue;
    if (first)     first=false;
 else     buf.append(' ');
    buf.append(addPrefix(s));
  }
  return buf.toString();
}","@CheckForNull public String getServerUrl(){
  if (server == null) {
    return null;
  }
  StringBuilder buf=new StringBuilder();
  boolean first=true;
  for (  String s : server.split(""String_Node_Str"")) {
    if (s.trim().length() == 0)     continue;
    if (first)     first=false;
 else     buf.append(' ');
    buf.append(addPrefix(s));
  }
  return buf.toString();
}",0.9808219178082191
39949,"public static String toProviderUrl(String serverUrl,String rootDN){
  if (serverUrl == null) {
    return null;
  }
  StringBuilder buf=new StringBuilder();
  boolean first=true;
  for (  String s : serverUrl.split(""String_Node_Str"")) {
    if (s.trim().length() == 0)     continue;
    if (first)     first=false;
 else     buf.append(' ');
    s=addPrefix(s);
    buf.append(s);
    if (!s.endsWith(""String_Node_Str""))     buf.append('/');
    buf.append(fixNull(rootDN));
  }
  return buf.toString();
}","@Nullable public static String toProviderUrl(@CheckForNull String serverUrl,@CheckForNull String rootDN){
  if (serverUrl == null) {
    return null;
  }
  StringBuilder buf=new StringBuilder();
  boolean first=true;
  for (  String s : serverUrl.split(""String_Node_Str"")) {
    if (s.trim().length() == 0)     continue;
    if (first)     first=false;
 else     buf.append(' ');
    s=addPrefix(s);
    buf.append(s);
    if (!s.endsWith(""String_Node_Str""))     buf.append('/');
    buf.append(fixNull(rootDN));
  }
  return buf.toString();
}",0.9637404580152672
39950,"@Override public SecurityComponents createSecurityComponents(){
  Binding binding=new Binding();
  binding.setVariable(""String_Node_Str"",this);
  BeanBuilder builder=new BeanBuilder(Jenkins.getInstance().pluginManager.uberClassLoader);
  String fileName;
  if (getLDAPURL() != null) {
    fileName=""String_Node_Str"";
  }
 else {
    fileName=""String_Node_Str"";
  }
  try {
    File override=new File(Jenkins.getInstance().getRootDir(),fileName);
    builder.parse(override.exists() ? new AutoCloseInputStream(new FileInputStream(override)) : getClass().getResourceAsStream(fileName),binding);
  }
 catch (  FileNotFoundException e) {
    throw new Error(""String_Node_Str"" + fileName,e);
  }
  WebApplicationContext appContext=builder.createApplicationContext();
  if (getLDAPURL() == null) {
    proxyTemplate=new ReverseProxySearchTemplate();
    return new SecurityComponents(findBean(AuthenticationManager.class,appContext),new ReverseProxyUserDetailsService(appContext));
  }
 else {
    ldapTemplate=new LdapTemplate(findBean(InitialDirContextFactory.class,appContext));
    if (groupMembershipFilter != null || groupNameAttribute != null) {
      ProxyLDAPAuthoritiesPopulator authoritiesPopulator=findBean(ProxyLDAPAuthoritiesPopulator.class,appContext);
      if (groupMembershipFilter != null) {
        authoritiesPopulator.setGroupSearchFilter(groupMembershipFilter);
      }
      if (groupNameAttribute != null) {
        authoritiesPopulator.setGroupRoleAttribute(groupNameAttribute);
      }
    }
    return new SecurityComponents(findBean(AuthenticationManager.class,appContext),new ProxyLDAPUserDetailsService(this,appContext));
  }
}","@Override public SecurityComponents createSecurityComponents() throws DataAccessException {
  Binding binding=new Binding();
  binding.setVariable(""String_Node_Str"",this);
  BeanBuilder builder=new BeanBuilder(Jenkins.getActiveInstance().pluginManager.uberClassLoader);
  String fileName;
  if (getLDAPURL() != null) {
    fileName=""String_Node_Str"";
  }
 else {
    fileName=""String_Node_Str"";
  }
  File override=new File(Jenkins.getActiveInstance().getRootDir(),fileName);
  try (InputStream istream=override.exists() ? new FileInputStream(override) : getClass().getResourceAsStream(fileName)){
    if (istream == null) {
      throw new FileNotFoundException(""String_Node_Str"" + fileName);
    }
    builder.parse(istream,binding);
  }
 catch (  IOException e) {
    throw new DataAccessResourceFailureException(""String_Node_Str"" + fileName,e);
  }
  WebApplicationContext appContext=builder.createApplicationContext();
  if (getLDAPURL() == null) {
    proxyTemplate=new ReverseProxySearchTemplate();
    return new SecurityComponents(findBean(AuthenticationManager.class,appContext),new ReverseProxyUserDetailsService(appContext));
  }
 else {
    ldapTemplate=new LdapTemplate(findBean(InitialDirContextFactory.class,appContext));
    if (groupMembershipFilter != null || groupNameAttribute != null) {
      ProxyLDAPAuthoritiesPopulator authoritiesPopulator=findBean(ProxyLDAPAuthoritiesPopulator.class,appContext);
      if (groupMembershipFilter != null) {
        authoritiesPopulator.setGroupSearchFilter(groupMembershipFilter);
      }
      if (groupNameAttribute != null) {
        authoritiesPopulator.setGroupRoleAttribute(groupNameAttribute);
      }
    }
    return new SecurityComponents(findBean(AuthenticationManager.class,appContext),new ProxyLDAPUserDetailsService(this,appContext));
  }
}",0.8586266589728794
39951,"@Override public Filter createFilter(FilterConfig filterConfig){
  Filter filter=new Filter(){
    public void init(    FilterConfig filterConfig) throws ServletException {
    }
    public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      HttpServletRequest r=(HttpServletRequest)request;
      String authorization=null;
      String userFromApiToken=null;
      if ((authorization=r.getHeader(""String_Node_Str"")) != null && authorization.toLowerCase().startsWith(""String_Node_Str"")) {
        String uidpassword=Scrambler.descramble(authorization.substring(6));
        int idx=uidpassword.indexOf(':');
        if (idx >= 0) {
          String username=uidpassword.substring(0,idx);
          String password=uidpassword.substring(idx + 1);
          User u=User.get(username,false);
          if (u != null) {
            ApiTokenProperty t=u.getProperty(ApiTokenProperty.class);
            if (t != null && t.matchesPassword(password)) {
              userFromApiToken=username;
            }
          }
        }
      }
      String userFromHeader=null;
      Authentication auth=Hudson.ANONYMOUS;
      if ((forwardedUser != null && (userFromHeader=r.getHeader(forwardedUser)) != null) || userFromApiToken != null) {
        LOGGER.log(Level.FINE,""String_Node_Str"",userFromHeader);
        if (userFromHeader == null && userFromApiToken != null) {
          userFromHeader=userFromApiToken;
        }
        if (authContext == null) {
          authContext=new Hashtable<String,GrantedAuthority[]>();
        }
        if (getLDAPURL() != null) {
          GrantedAuthority[] storedGrants=authContext.get(userFromHeader);
          if (storedGrants != null && storedGrants.length > 1) {
            authorities=retrieveAuthoritiesIfNecessary(userFromHeader,storedGrants);
          }
 else {
            try {
              LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(userFromHeader);
              authorities=userDetails.getAuthorities();
              Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
              tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
              authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
            }
 catch (            UsernameNotFoundException e) {
              LOGGER.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
              Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
              tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
              authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
            }
          }
        }
 else {
          String groups=r.getHeader(headerGroups);
          List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
          localAuthorities.add(AUTHENTICATED_AUTHORITY);
          if (groups != null) {
            StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
            while (tokenizer.hasMoreTokens()) {
              final String token=tokenizer.nextToken().trim();
              localAuthorities.add(new GrantedAuthorityImpl(token));
            }
          }
          authorities=localAuthorities.toArray(new GrantedAuthority[0]);
          SearchTemplate searchTemplate=new UserSearchTemplate(userFromHeader);
          Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
          String[] authString=foundAuthorities.toArray(new String[0]);
          for (int i=0; i < authString.length; i++) {
            tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
          }
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
          authContext.put(userFromHeader,authorities);
          auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
        }
        authContext.put(userFromHeader,authorities);
        auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
      }
      retrievedUser=userFromHeader;
      SecurityContextHolder.getContext().setAuthentication(auth);
      chain.doFilter(r,response);
    }
    public void destroy(){
    }
  }
;
  Filter defaultFilter=super.createFilter(filterConfig);
  return new ChainedServletFilter(filter,defaultFilter);
}","@Override public Filter createFilter(FilterConfig filterConfig){
  Filter filter=new Filter(){
    public void init(    FilterConfig filterConfig) throws ServletException {
    }
    public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      HttpServletRequest r=(HttpServletRequest)request;
      String authorization=null;
      String userFromApiToken=null;
      if ((authorization=r.getHeader(""String_Node_Str"")) != null && authorization.toLowerCase().startsWith(""String_Node_Str"")) {
        String uidpassword=Scrambler.descramble(authorization.substring(6));
        int idx=uidpassword.indexOf(':');
        if (idx >= 0) {
          String username=uidpassword.substring(0,idx);
          String password=uidpassword.substring(idx + 1);
          User u=User.get(username,false);
          if (u != null) {
            ApiTokenProperty t=u.getProperty(ApiTokenProperty.class);
            if (t != null && t.matchesPassword(password)) {
              userFromApiToken=username;
            }
          }
        }
      }
      String userFromHeader=null;
      Authentication auth=Jenkins.ANONYMOUS;
      if ((forwardedUser != null && (userFromHeader=r.getHeader(forwardedUser)) != null) || userFromApiToken != null) {
        LOGGER.log(Level.FINE,""String_Node_Str"",userFromHeader);
        if (userFromHeader == null) {
          userFromHeader=userFromApiToken;
        }
        if (authContext == null) {
          authContext=new Hashtable<>();
        }
        if (getLDAPURL() != null) {
          GrantedAuthority[] storedGrants=authContext.get(userFromHeader);
          if (storedGrants != null && storedGrants.length > 1) {
            authorities=retrieveAuthoritiesIfNecessary(userFromHeader,storedGrants);
          }
 else {
            try {
              LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(userFromHeader);
              authorities=userDetails.getAuthorities();
              Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
              tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
              authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
            }
 catch (            UsernameNotFoundException e) {
              LOGGER.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
              Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
              tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
              authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
            }
          }
        }
 else {
          String groups=r.getHeader(headerGroups);
          List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
          localAuthorities.add(AUTHENTICATED_AUTHORITY);
          if (groups != null) {
            StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
            while (tokenizer.hasMoreTokens()) {
              final String token=tokenizer.nextToken().trim();
              localAuthorities.add(new GrantedAuthorityImpl(token));
            }
          }
          authorities=localAuthorities.toArray(new GrantedAuthority[0]);
          SearchTemplate searchTemplate=new UserSearchTemplate(userFromHeader);
          Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
          String[] authString=foundAuthorities.toArray(new String[0]);
          for (int i=0; i < authString.length; i++) {
            tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
          }
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
          authContext.put(userFromHeader,authorities);
          auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
        }
        authContext.put(userFromHeader,authorities);
        auth=new UsernamePasswordAuthenticationToken(userFromHeader,""String_Node_Str"",authorities);
      }
      retrievedUser=userFromHeader;
      SecurityContextHolder.getContext().setAuthentication(auth);
      chain.doFilter(r,response);
    }
    public void destroy(){
    }
  }
;
  Filter defaultFilter=super.createFilter(filterConfig);
  return new ChainedServletFilter(filter,defaultFilter);
}",0.9747060128688706
39952,"public FormValidation doServerCheck(@QueryParameter final String server,@QueryParameter final String managerDN,@QueryParameter final String managerPassword){
  if (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {
    return FormValidation.ok();
  }
  try {
    Hashtable<String,String> props=new Hashtable<String,String>();
    if (managerDN != null && managerDN.trim().length() > 0 && !""String_Node_Str"".equals(managerDN)) {
      props.put(Context.SECURITY_PRINCIPAL,managerDN);
    }
    if (managerPassword != null && managerPassword.trim().length() > 0 && !""String_Node_Str"".equals(managerPassword)) {
      props.put(Context.SECURITY_CREDENTIALS,managerPassword);
    }
    props.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    props.put(Context.PROVIDER_URL,toProviderUrl(server,""String_Node_Str""));
    DirContext ctx=new InitialDirContext(props);
    ctx.getAttributes(""String_Node_Str"");
    return FormValidation.ok();
  }
 catch (  NamingException e) {
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(server.trim());
    if (!m.matches())     return FormValidation.error(hudson.security.Messages.LDAPSecurityRealm_SyntaxOfServerField());
    try {
      InetAddress adrs=InetAddress.getByName(m.group(2));
      int port=m.group(1) != null ? 636 : 389;
      if (m.group(3) != null)       port=Integer.parseInt(m.group(3));
      Socket s=new Socket(adrs,port);
      s.close();
    }
 catch (    UnknownHostException x) {
      return FormValidation.error(hudson.security.Messages.LDAPSecurityRealm_UnknownHost(x.getMessage()));
    }
catch (    IOException x) {
      return FormValidation.error(x,hudson.security.Messages.LDAPSecurityRealm_UnableToConnect(server,x.getMessage()));
    }
    return FormValidation.error(e,hudson.security.Messages.LDAPSecurityRealm_UnableToConnect(server,e));
  }
catch (  NumberFormatException x) {
    return FormValidation.error(hudson.security.Messages.LDAPSecurityRealm_InvalidPortNumber());
  }
}","public FormValidation doServerCheck(@QueryParameter final String server,@QueryParameter final String managerDN,@QueryParameter final String managerPassword){
  final String trimmedServer=fixEmptyAndTrim(server);
  if (trimmedServer == null) {
    return FormValidation.error(""String_Node_Str"");
  }
  if (!Jenkins.getActiveInstance().hasPermission(Jenkins.ADMINISTER)) {
    return FormValidation.ok();
  }
  try {
    Hashtable<String,String> props=new Hashtable<String,String>();
    if (managerDN != null && managerDN.trim().length() > 0 && !""String_Node_Str"".equals(managerDN)) {
      props.put(Context.SECURITY_PRINCIPAL,managerDN);
    }
    if (managerPassword != null && managerPassword.trim().length() > 0 && !""String_Node_Str"".equals(managerPassword)) {
      props.put(Context.SECURITY_CREDENTIALS,managerPassword);
    }
    props.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    props.put(Context.PROVIDER_URL,toProviderUrl(trimmedServer,""String_Node_Str""));
    DirContext ctx=new InitialDirContext(props);
    ctx.getAttributes(""String_Node_Str"");
    return FormValidation.ok();
  }
 catch (  NamingException e) {
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(trimmedServer.trim());
    if (!m.matches())     return FormValidation.error(hudson.security.Messages.LDAPSecurityRealm_SyntaxOfServerField());
    try {
      InetAddress adrs=InetAddress.getByName(m.group(2));
      int port=m.group(1) != null ? 636 : 389;
      if (m.group(3) != null)       port=Integer.parseInt(m.group(3));
      Socket s=new Socket(adrs,port);
      s.close();
    }
 catch (    UnknownHostException x) {
      return FormValidation.error(hudson.security.Messages.LDAPSecurityRealm_UnknownHost(x.getMessage()));
    }
catch (    IOException x) {
      return FormValidation.error(x,hudson.security.Messages.LDAPSecurityRealm_UnableToConnect(trimmedServer,x.getMessage()));
    }
    return FormValidation.error(e,hudson.security.Messages.LDAPSecurityRealm_UnableToConnect(trimmedServer,e));
  }
catch (  NumberFormatException x) {
    return FormValidation.error(hudson.security.Messages.LDAPSecurityRealm_InvalidPortNumber());
  }
}",0.9557650471356056
39953,"public DefaultReverseProxyAuthenticator(String username,GrantedAuthority[] authorities){
  this.username=username;
  this.authorities=authorities;
}","public DefaultReverseProxyAuthenticator(String username,@CheckForNull GrantedAuthority[] authorities){
  this.username=username;
  this.authorities=authorities != null ? Arrays.copyOf(authorities,authorities.length) : null;
}",0.7935656836461126
39954,"public void setMessageSource(MessageSource messageSource){
  Assert.notNull(""String_Node_Str"");
  messages=new MessageSourceAccessor(messageSource);
}","public void setMessageSource(@Nonnull MessageSource messageSource){
  Assert.notNull(""String_Node_Str"");
  messages=new MessageSourceAccessor(messageSource);
}",0.970873786407767
39955,"/** 
 * Constructor for group search scenarios. <tt>userRoleAttributes</tt> may still be set as a property.
 */
public DefaultReverseProxyAuthoritiesPopulator(Hashtable<String,GrantedAuthority[]> authContext){
  this.authContext=authContext;
  reverseProxyTemplate=new ReverseProxySearchTemplate();
}","/** 
 * Constructor for group search scenarios. <tt>userRoleAttributes</tt> may still be set as a property.
 */
public DefaultReverseProxyAuthoritiesPopulator(Hashtable<String,GrantedAuthority[]> authContext){
  this.authContext=new Hashtable<>(authContext);
  reverseProxyTemplate=new ReverseProxySearchTemplate();
}",0.9724473257698542
39956,"public void setAuthorities(GrantedAuthority[] authorities){
  this.authorities=authorities;
}","public void setAuthorities(@CheckForNull GrantedAuthority[] authorities){
  this.authorities=authorities != null ? Arrays.copyOf(authorities,authorities.length) : null;
}",0.7072243346007605
39957,"public GrantedAuthority[] getAuthorities(){
  return authorities;
}","@CheckForNull @SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") public GrantedAuthority[] getAuthorities(){
  return authorities;
}",0.5955555555555555
39958,"public String getUsername(){
  return username;
}","@CheckForNull public String getUsername(){
  return username;
}",0.875
39959,"public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest r=(HttpServletRequest)request;
  retrievedUsername=r.getHeader(forwardedUser);
  Authentication auth=Hudson.ANONYMOUS;
  if (retrievedUsername != null) {
    if (getLDAPURL() != null) {
      GrantedAuthority[] storedGrants=authContext.get(retrievedUsername);
      if (storedGrants != null && storedGrants.length > 1) {
        authorities=storedGrants;
      }
 else {
        LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(retrievedUsername);
        authorities=userDetails.getAuthorities();
        Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
        tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
        authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
      }
    }
 else {
      String groups=r.getHeader(headerGroups);
      List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
      localAuthorities.add(AUTHENTICATED_AUTHORITY);
      if (groups != null) {
        StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
        while (tokenizer.hasMoreTokens()) {
          final String token=tokenizer.nextToken().trim();
          localAuthorities.add(new GrantedAuthorityImpl(token));
        }
      }
      authorities=localAuthorities.toArray(new GrantedAuthority[0]);
      SearchTemplate searchTemplate=new UserSearchTemplate(retrievedUsername);
      Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
      Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
      String[] authString=foundAuthorities.toArray(new String[0]);
      for (int i=0; i < authString.length; i++) {
        tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
      }
      authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
      authContext.put(retrievedUsername,authorities);
      auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
    }
    authContext.put(retrievedUsername,authorities);
    auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
  }
  SecurityContextHolder.getContext().setAuthentication(auth);
  chain.doFilter(r,response);
}","public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest r=(HttpServletRequest)request;
  retrievedUsername=r.getHeader(forwardedUser);
  Authentication auth=Hudson.ANONYMOUS;
  if (retrievedUsername != null) {
    if (getLDAPURL() != null) {
      GrantedAuthority[] storedGrants=authContext.get(retrievedUsername);
      if (storedGrants != null && storedGrants.length > 1) {
        authorities=storedGrants;
      }
 else {
        try {
          LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(retrievedUsername);
          authorities=userDetails.getAuthorities();
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
        }
 catch (        UsernameNotFoundException e) {
          LOGGER.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
        }
 finally {
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
          tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
        }
      }
    }
 else {
      String groups=r.getHeader(headerGroups);
      List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
      localAuthorities.add(AUTHENTICATED_AUTHORITY);
      if (groups != null) {
        StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
        while (tokenizer.hasMoreTokens()) {
          final String token=tokenizer.nextToken().trim();
          localAuthorities.add(new GrantedAuthorityImpl(token));
        }
      }
      authorities=localAuthorities.toArray(new GrantedAuthority[0]);
      SearchTemplate searchTemplate=new UserSearchTemplate(retrievedUsername);
      Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
      Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
      String[] authString=foundAuthorities.toArray(new String[0]);
      for (int i=0; i < authString.length; i++) {
        tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
      }
      authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
      authContext.put(retrievedUsername,authorities);
      auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
    }
    authContext.put(retrievedUsername,authorities);
    auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
  }
  SecurityContextHolder.getContext().setAuthentication(auth);
  chain.doFilter(r,response);
}",0.9333077070920622
39960,"@Override public SecurityComponents createSecurityComponents(){
  Binding binding=new Binding();
  binding.setVariable(""String_Node_Str"",this);
  BeanBuilder builder=new BeanBuilder(Jenkins.getInstance().pluginManager.uberClassLoader);
  String fileName;
  if (getLDAPURL() != null) {
    fileName=""String_Node_Str"";
  }
 else {
    fileName=""String_Node_Str"";
  }
  try {
    File override=new File(Jenkins.getInstance().getRootDir(),fileName);
    builder.parse(override.exists() ? new AutoCloseInputStream(new FileInputStream(override)) : getClass().getResourceAsStream(fileName),binding);
  }
 catch (  FileNotFoundException e) {
    throw new Error(""String_Node_Str"" + fileName,e);
  }
  WebApplicationContext appContext=builder.createApplicationContext();
  if (getLDAPURL() != null) {
    ldapTemplate=new LdapTemplate(findBean(InitialDirContextFactory.class,appContext));
  }
  if (getLDAPURL() != null) {
    proxyTemplate=new ReverseProxySearchTemplate();
    return new SecurityComponents(findBean(AuthenticationManager.class,appContext),new ReverseProxyUserDetailsService(appContext));
  }
 else {
    return new SecurityComponents(new AuthenticationManager(){
      public Authentication authenticate(      Authentication authentication){
        return authentication;
      }
    }
,new UserDetailsService(){
      public UserDetails loadUserByUsername(      String username) throws UsernameNotFoundException, DataAccessException {
        throw new UsernameNotFoundException(username);
      }
    }
);
  }
}","@Override public SecurityComponents createSecurityComponents(){
  Binding binding=new Binding();
  binding.setVariable(""String_Node_Str"",this);
  BeanBuilder builder=new BeanBuilder(Jenkins.getInstance().pluginManager.uberClassLoader);
  String fileName;
  if (getLDAPURL() != null) {
    fileName=""String_Node_Str"";
  }
 else {
    fileName=""String_Node_Str"";
  }
  try {
    File override=new File(Jenkins.getInstance().getRootDir(),fileName);
    builder.parse(override.exists() ? new AutoCloseInputStream(new FileInputStream(override)) : getClass().getResourceAsStream(fileName),binding);
  }
 catch (  FileNotFoundException e) {
    throw new Error(""String_Node_Str"" + fileName,e);
  }
  WebApplicationContext appContext=builder.createApplicationContext();
  if (getLDAPURL() == null) {
    proxyTemplate=new ReverseProxySearchTemplate();
    return new SecurityComponents(findBean(AuthenticationManager.class,appContext),new ReverseProxyUserDetailsService(appContext));
  }
 else {
    ldapTemplate=new LdapTemplate(findBean(InitialDirContextFactory.class,appContext));
    return new SecurityComponents(new AuthenticationManager(){
      public Authentication authenticate(      Authentication authentication){
        return authentication;
      }
    }
,new UserDetailsService(){
      public UserDetails loadUserByUsername(      String username) throws UsernameNotFoundException, DataAccessException {
        throw new UsernameNotFoundException(username);
      }
    }
);
  }
}",0.9303251493032516
39961,"@Override public Filter createFilter(FilterConfig filterConfig){
  return new Filter(){
    public void init(    FilterConfig filterConfig) throws ServletException {
    }
    public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      HttpServletRequest r=(HttpServletRequest)request;
      retrievedUsername=r.getHeader(forwardedUser);
      Authentication auth=Hudson.ANONYMOUS;
      if (retrievedUsername != null) {
        if (getLDAPURL() != null) {
          GrantedAuthority[] storedGrants=authContext.get(retrievedUsername);
          if (storedGrants != null && storedGrants.length > 1) {
            authorities=storedGrants;
          }
 else {
            LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(retrievedUsername);
            authorities=userDetails.getAuthorities();
            Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
            tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
            authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
          }
        }
 else {
          String groups=r.getHeader(headerGroups);
          List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
          localAuthorities.add(AUTHENTICATED_AUTHORITY);
          if (groups != null) {
            StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
            while (tokenizer.hasMoreTokens()) {
              final String token=tokenizer.nextToken().trim();
              localAuthorities.add(new GrantedAuthorityImpl(token));
            }
          }
          authorities=localAuthorities.toArray(new GrantedAuthority[0]);
          SearchTemplate searchTemplate=new UserSearchTemplate(retrievedUsername);
          Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
          String[] authString=foundAuthorities.toArray(new String[0]);
          for (int i=0; i < authString.length; i++) {
            tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
          }
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
          authContext.put(retrievedUsername,authorities);
          auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
        }
        authContext.put(retrievedUsername,authorities);
        auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
      }
      SecurityContextHolder.getContext().setAuthentication(auth);
      chain.doFilter(r,response);
    }
    public void destroy(){
    }
  }
;
}","@Override public Filter createFilter(FilterConfig filterConfig){
  return new Filter(){
    public void init(    FilterConfig filterConfig) throws ServletException {
    }
    public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      HttpServletRequest r=(HttpServletRequest)request;
      retrievedUsername=r.getHeader(forwardedUser);
      Authentication auth=Hudson.ANONYMOUS;
      if (retrievedUsername != null) {
        if (getLDAPURL() != null) {
          GrantedAuthority[] storedGrants=authContext.get(retrievedUsername);
          if (storedGrants != null && storedGrants.length > 1) {
            authorities=storedGrants;
          }
 else {
            try {
              LdapUserDetails userDetails=(LdapUserDetails)loadUserByUsername(retrievedUsername);
              authorities=userDetails.getAuthorities();
              Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>(Arrays.asList(authorities));
              authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
            }
 catch (            UsernameNotFoundException e) {
              LOGGER.log(Level.WARNING,""String_Node_Str"" + e.getMessage());
            }
 finally {
              Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
              tempLocalAuthorities.add(AUTHENTICATED_AUTHORITY);
              authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
            }
          }
        }
 else {
          String groups=r.getHeader(headerGroups);
          List<GrantedAuthority> localAuthorities=new ArrayList<GrantedAuthority>();
          localAuthorities.add(AUTHENTICATED_AUTHORITY);
          if (groups != null) {
            StringTokenizer tokenizer=new StringTokenizer(groups,headerGroupsDelimiter);
            while (tokenizer.hasMoreTokens()) {
              final String token=tokenizer.nextToken().trim();
              localAuthorities.add(new GrantedAuthorityImpl(token));
            }
          }
          authorities=localAuthorities.toArray(new GrantedAuthority[0]);
          SearchTemplate searchTemplate=new UserSearchTemplate(retrievedUsername);
          Set<String> foundAuthorities=proxyTemplate.searchForSingleAttributeValues(searchTemplate,authorities);
          Set<GrantedAuthority> tempLocalAuthorities=new HashSet<GrantedAuthority>();
          String[] authString=foundAuthorities.toArray(new String[0]);
          for (int i=0; i < authString.length; i++) {
            tempLocalAuthorities.add(new GrantedAuthorityImpl(authString[i]));
          }
          authorities=tempLocalAuthorities.toArray(new GrantedAuthority[0]);
          authContext.put(retrievedUsername,authorities);
          auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
        }
        authContext.put(retrievedUsername,authorities);
        auth=new UsernamePasswordAuthenticationToken(retrievedUsername,""String_Node_Str"",authorities);
      }
      SecurityContextHolder.getContext().setAuthentication(auth);
      chain.doFilter(r,response);
    }
    public void destroy(){
    }
  }
;
}",0.9373035566583954
39962,"public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,Preference preference){
  boolean value;
  if (preference == mLauncherEndlessLoop) {
    value=mLauncherEndlessLoop.isChecked();
    Settings.System.putInt(getContentResolver(),Settings.System.LAUNCHER_ENDLESS_LOOP,value ? 1 : 0);
    restartLauncher2(activityManager);
  }
  return true;
}","public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,Preference preference){
  boolean value;
  if (preference == mLauncherEndlessLoop) {
    value=mLauncherEndlessLoop.isChecked();
    Settings.System.putInt(getContentResolver(),Settings.System.LAUNCHER_ENDLESS_LOOP,value ? 1 : 0);
    restartLauncher2(activityManager);
  }
  if (preference == mScreenPreference) {
    alertbox(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  }
  return true;
}",0.8305489260143198
39963,"public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  if (DBG)   Log.v(TAG,""String_Node_Str"");
  if (key == mScreenPreference.getKey()) {
    if (DBG)     Log.v(TAG,""String_Node_Str"");
    registerScreenChange(mScreenPreference.getEntry().toString());
    restartLauncher2(activityManager);
  }
}","public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  if (DBG)   Log.v(TAG,""String_Node_Str"");
  if (key == mScreenPreference.getKey()) {
    if (DBG)     Log.v(TAG,""String_Node_Str"");
    registerScreenChange(mScreenPreference.getEntry().toString());
    PackageUtils packageUtility=new PackageUtils(this,LAUNCHER);
    packageUtility.initiateClearUserData();
  }
}",0.819672131147541
39964,"public void printDependenciesMap(){
  for (  DeployableServiceSpec spec : deployableServiceSpecs) {
    System.out.print(spec.getName() + ""String_Node_Str"");
    if (spec.getDependencies() != null) {
      for (      ServiceDependency dep : spec.getDependencies()) {
        System.out.print(dep.getServiceSpecName() + ""String_Node_Str"");
      }
    }
    System.out.println(""String_Node_Str"");
  }
}","public void printDependenciesMap(){
  for (  DeployableServiceSpec spec : deployableServiceSpecs) {
    System.out.print(spec.getName() + ""String_Node_Str"" + spec.getEndpointName()+ ""String_Node_Str"");
    if (spec.getDependencies() != null) {
      for (      ServiceDependency dep : spec.getDependencies()) {
        System.out.print(dep.getServiceSpecName() + ""String_Node_Str"");
      }
    }
    System.out.println(""String_Node_Str"");
  }
}",0.9479905437352246
39965,"@Override public void setInvocationAddress(final String role,final String name,final List<String> endpoints){
  super.setInvocationAddress(role,name,endpoints);
  if (endpoints.size() == 2) {
    secondTargetType=TrackerType.valueOf(role);
  }
}","@Override public void setInvocationAddress(final String role,final String name,final List<String> endpoints){
  super.setInvocationAddress(role,name,endpoints);
  if (targets.size() == 2) {
    secondTargetType=TrackerType.valueOf(role);
  }
}",0.9754098360655736
39966,"public AlwaysCreateESBNodeSelector(){
  String npmUri=ChoreographyDeployerConfiguration.get(DEPLOYMENT_MANAGER_URI_PROPERTY);
  NodePoolManager npm=new NodesClient(npmUri);
  ESBNodeFactory nodeFac=new ESBNodeFactory(npm);
  this.selector=new AlwaysCreateSelector<EasyESBNode,ResourceImpact>(nodeFac);
}","public AlwaysCreateESBNodeSelector(){
  String npmUri=Owners.getDefault();
  NodePoolManager npm=new NodesClient(npmUri);
  ESBNodeFactory nodeFac=new ESBNodeFactory(npm);
  this.selector=new AlwaysCreateSelector<EasyESBNode,ResourceImpact>(nodeFac);
}",0.8612612612612612
39967,"public LimitedRoundRobinESBNodeSelector(){
  int nodeLimit=this.getNodeLimit();
  String npmUri=ChoreographyDeployerConfiguration.get(DEPLOYMENT_MANAGER_URI_PROPERTY);
  NodePoolManager npm=new NodesClient(npmUri);
  ESBNodeFactory factory=new ESBNodeFactory(npm);
  ESBNodeRetriever retriever=new ESBNodeRetriever();
  this.selector=new LimitedRoundRobinSelector<EasyESBNode,ResourceImpact>(nodeLimit,retriever,factory);
}","public LimitedRoundRobinESBNodeSelector(){
  int nodeLimit=this.getNodeLimit();
  String npmUri=Owners.getDefault();
  NodePoolManager npm=new NodesClient(npmUri);
  ESBNodeFactory factory=new ESBNodeFactory(npm);
  ESBNodeRetriever retriever=new ESBNodeRetriever();
  this.selector=new LimitedRoundRobinSelector<EasyESBNode,ResourceImpact>(nodeLimit,retriever,factory);
}",0.9031446540880504
39968,"public SingletonESBNodeSelector(){
  String npmUri=ChoreographyDeployerConfiguration.get(DEPLOYMENT_MANAGER_URI_PROPERTY);
  NodePoolManager npm=new NodesClient(npmUri);
  ESBNodeFactory nodeFac=new ESBNodeFactory(npm);
  this.selector=new SingletonSelector<EasyESBNode,ResourceImpact>(nodeFac);
}","public SingletonESBNodeSelector(){
  String npmUri=Owners.getDefault();
  NodePoolManager npm=new NodesClient(npmUri);
  ESBNodeFactory nodeFac=new ESBNodeFactory(npm);
  this.selector=new SingletonSelector<EasyESBNode,ResourceImpact>(nodeFac);
}",0.85451197053407
39969,"@Override public void run(){
  logger.info(""String_Node_Str"" + enacter.getId());
  try {
    long t0=System.nanoTime();
    ok=enacter.verifyAnswer();
    long tf=System.nanoTime();
    report.addCheckTime(tf - t0);
    if (ok) {
      int all=Experiment.CHORS_QTY * Experiment.CHORS_SIZE;
      logger.info(""String_Node_Str"" + all + ""String_Node_Str""+ enacter.getId());
      servicesWorking=all;
    }
 else {
      verifyServicePerService();
    }
  }
 catch (  MalformedURLException e) {
    logger.error(""String_Node_Str"" + enacter.getId());
    ok=false;
  }
  logger.info(""String_Node_Str"" + enacter.getId() + ""String_Node_Str""+ ok);
}","@Override public void run(){
  logger.info(""String_Node_Str"" + enacter.getId());
  try {
    long t0=System.nanoTime();
    ok=enacter.verifyAnswer();
    long tf=System.nanoTime();
    report.addCheckTime(tf - t0);
    if (ok) {
      int all=Experiment.CHORS_SIZE;
      logger.info(""String_Node_Str"" + all + ""String_Node_Str""+ enacter.getId());
      servicesWorking=all;
    }
 else {
      verifyServicePerService();
    }
  }
 catch (  MalformedURLException e) {
    logger.error(""String_Node_Str"" + enacter.getId());
    ok=false;
  }
  logger.info(""String_Node_Str"" + enacter.getId() + ""String_Node_Str""+ ok);
}",0.9817605075337034
39970,"public String getExpectedPathIds(final int chorSize){
  final StringBuffer answer=new StringBuffer();
  for (int i=0; i < chorSize; i++) {
    answer.append(i);
    answer.append(' ');
  }
  answer.deleteCharAt(answer.length() - 1);
  return answer.toString();
}","public String getExpectedPathIds(final int chorSize){
  final StringBuffer answer=new StringBuffer();
  for (int i=0; i < chorSize; i++) {
    answer.append(i);
    answer.append(' ');
  }
  if (answer.length() > 0) {
    answer.deleteCharAt(answer.length() - 1);
  }
  return answer.toString();
}",0.8443649373881932
39971,"private void initTravelAgencySpecs(){
  if (packageType == PackageType.COMMAND_LINE) {
    travelSpec=new DeployableServiceSpec(serviceType,packageType,null,null,TRAVEL_AGENCY_JAR,TRAVEL_AGENCY_PORT,TRAVEL_AGENCY,1);
  }
 else {
    travelSpec=new DeployableServiceSpec(serviceType,packageType,null,null,TRAVEL_AGENCY_JAR,TRAVEL_AGENCY,1);
  }
  List<String> roles=new ArrayList<String>();
  roles.add(TRAVEL_AGENCY);
  List<ChoreographyServiceDependency> dependencies=new ArrayList<ChoreographyServiceDependency>();
  dependencies.add(new ChoreographyServiceDependency(AIRLINE,AIRLINE));
  travelAgencyChoreographyServiceSpec=new ChoreographyServiceSpec(travelSpec,null,null,roles,dependencies,TRAVEL_AGENCY);
}","private void initTravelAgencySpecs(){
  if (packageType == PackageType.COMMAND_LINE) {
    travelSpec=new DeployableServiceSpec(serviceType,packageType,null,null,TRAVEL_AGENCY_JAR,TRAVEL_AGENCY_PORT,TRAVEL_AGENCY,1);
  }
 else {
    travelSpec=new DeployableServiceSpec(serviceType,packageType,null,null,TRAVEL_AGENCY_WAR,TRAVEL_AGENCY,1);
  }
  List<String> roles=new ArrayList<String>();
  roles.add(TRAVEL_AGENCY);
  List<ChoreographyServiceDependency> dependencies=new ArrayList<ChoreographyServiceDependency>();
  dependencies.add(new ChoreographyServiceDependency(AIRLINE,AIRLINE));
  travelAgencyChoreographyServiceSpec=new ChoreographyServiceSpec(travelSpec,null,null,roles,dependencies,TRAVEL_AGENCY);
}",0.9985955056179776
39972,"private void initAirlineSpecs(){
  if (packageType == PackageType.COMMAND_LINE) {
    airlineSpec=new DeployableServiceSpec(serviceType,packageType,null,null,AIRLINE_JAR,AIRLINE_PORT,AIRLINE,1);
  }
 else {
    airlineSpec=new DeployableServiceSpec(serviceType,packageType,null,null,AIRLINE_JAR,AIRLINE,1);
  }
  List<String> roles=new ArrayList<String>();
  roles.add(AIRLINE);
  airlineChoreographyServiceSpec=new ChoreographyServiceSpec(airlineSpec,null,null,roles,AIRLINE);
}","private void initAirlineSpecs(){
  if (packageType == PackageType.COMMAND_LINE) {
    airlineSpec=new DeployableServiceSpec(serviceType,packageType,null,null,AIRLINE_JAR,AIRLINE_PORT,AIRLINE,1);
  }
 else {
    airlineSpec=new DeployableServiceSpec(serviceType,packageType,null,null,AIRLINE_WAR,AIRLINE,1);
  }
  List<String> roles=new ArrayList<String>();
  roles.add(AIRLINE);
  airlineChoreographyServiceSpec=new ChoreographyServiceSpec(airlineSpec,null,null,roles,AIRLINE);
}",0.9979123173277662
39973,"@Override public void sendContext(String serviceEndpoint,String partnerRole,String partnerName,List<String> partnerEndpoints) throws ContextNotSentException {
  try {
    SOAPConnectionFactory sfc=SOAPConnectionFactory.newInstance();
    SOAPConnection connection=sfc.createConnection();
    MessageFactory mf=MessageFactory.newInstance();
    SOAPMessage sm=mf.createMessage();
    SOAPEnvelope envelope=sm.getSOAPPart().getEnvelope();
    String namespace=parseNamespace(serviceEndpoint);
    envelope.addNamespaceDeclaration(""String_Node_Str"",namespace);
    SOAPHeader sh=sm.getSOAPHeader();
    SOAPBody sb=sm.getSOAPBody();
    sh.detachNode();
    QName bodyName=new QName(""String_Node_Str"");
    SOAPBodyElement bodyElement=sb.addBodyElement(bodyName);
    bodyElement.setPrefix(""String_Node_Str"");
    QName role=new QName(""String_Node_Str"");
    SOAPElement quotation1=bodyElement.addChildElement(role);
    quotation1.addTextNode(partnerRole);
    QName name=new QName(""String_Node_Str"");
    SOAPElement quotation2=bodyElement.addChildElement(name);
    quotation2.addTextNode(partnerRole);
    for (    String partnerEndpoint : partnerEndpoints) {
      QName address=new QName(""String_Node_Str"");
      SOAPElement quotation3=bodyElement.addChildElement(address);
      quotation3.addTextNode(partnerEndpoint);
    }
    if (serviceEndpoint.trim().endsWith(""String_Node_Str""))     serviceEndpoint=serviceEndpoint.substring(0,serviceEndpoint.length() - 1);
    URL endpoint=new URL(serviceEndpoint);
    connection.call(sm,endpoint);
  }
 catch (  Exception e) {
    throw new ContextNotSentException(serviceEndpoint,partnerRole,partnerName,partnerEndpoints);
  }
}","@Override public void sendContext(String serviceEndpoint,String partnerRole,String partnerName,List<String> partnerEndpoints) throws ContextNotSentException {
  try {
    SOAPConnectionFactory sfc=SOAPConnectionFactory.newInstance();
    SOAPConnection connection=sfc.createConnection();
    MessageFactory mf=MessageFactory.newInstance();
    SOAPMessage sm=mf.createMessage();
    SOAPEnvelope envelope=sm.getSOAPPart().getEnvelope();
    String namespace=parseNamespace(serviceEndpoint);
    envelope.addNamespaceDeclaration(""String_Node_Str"",namespace);
    SOAPHeader sh=sm.getSOAPHeader();
    SOAPBody sb=sm.getSOAPBody();
    sh.detachNode();
    QName bodyName=new QName(""String_Node_Str"");
    SOAPBodyElement bodyElement=sb.addBodyElement(bodyName);
    bodyElement.setPrefix(""String_Node_Str"");
    QName role=new QName(""String_Node_Str"");
    SOAPElement quotation1=bodyElement.addChildElement(role);
    quotation1.addTextNode(partnerRole);
    QName name=new QName(""String_Node_Str"");
    SOAPElement quotation2=bodyElement.addChildElement(name);
    quotation2.addTextNode(partnerName);
    for (    String partnerEndpoint : partnerEndpoints) {
      QName address=new QName(""String_Node_Str"");
      SOAPElement quotation3=bodyElement.addChildElement(address);
      quotation3.addTextNode(partnerEndpoint);
    }
    if (serviceEndpoint.trim().endsWith(""String_Node_Str""))     serviceEndpoint=serviceEndpoint.substring(0,serviceEndpoint.length() - 1);
    URL endpoint=new URL(serviceEndpoint);
    connection.call(sm,endpoint);
  }
 catch (  Exception e) {
    throw new ContextNotSentException(serviceEndpoint,partnerRole,partnerName,partnerEndpoints);
  }
}",0.9982121573301548
39974,"public List<ServiceInstance> getInstances(){
  return Collections.unmodifiableList(serviceInstances);
}","public List<ServiceInstance> getInstances(){
  return serviceInstances;
}",0.8295454545454546
39975,"/** 
 * Client requests a service instances by ID
 * @param serviceID of service of required instances
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstances(@PathParam(""String_Node_Str"") String serviceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId + ""String_Node_Str""+ serviceId);
  Service service;
  try {
    service=serviceDeployer.getService(serviceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service.getInstances()).build();
}","/** 
 * Client requests a service instances by ID
 * @param serviceID of service of required instances
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstances(@PathParam(""String_Node_Str"") String serviceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId + ""String_Node_Str""+ serviceId);
  Service service;
  try {
    service=servicesManager.getService(serviceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service.getInstances()).build();
}",0.9916782246879334
39976,"/** 
 * Client requests remove a service by ID
 * @param serviceID
 */
@DELETE @Path(""String_Node_Str"") public Response deleteService(@PathParam(""String_Node_Str"") String serviceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId);
  try {
    serviceDeployer.deleteService(serviceId);
  }
 catch (  ServiceNotDeletedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceNotFoundException e) {
    return Response.status(Status.NOT_FOUND).build();
  }
  logger.info(""String_Node_Str"" + serviceId + ""String_Node_Str"");
  return Response.ok().build();
}","/** 
 * Client requests remove a service by ID
 * @param serviceID
 */
@DELETE @Path(""String_Node_Str"") public Response deleteService(@PathParam(""String_Node_Str"") String serviceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId);
  try {
    servicesManager.deleteService(serviceId);
  }
 catch (  ServiceNotDeletedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceNotFoundException e) {
    return Response.status(Status.NOT_FOUND).build();
  }
  logger.info(""String_Node_Str"" + serviceId + ""String_Node_Str"");
  return Response.ok().build();
}",0.9915014164305948
39977,"/** 
 * Update a service
 * @param serviceSpecXML Request's body content with a ServiceSpec XML
 * @return HTTP code 201 and Location header if the service was successfully deployed;HTTP code 400 if request can not be properly parsed;  HTTP code 500 if any other error occurs.
 * @throws UnhandledModificationException 
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Response updateService(JAXBElement<ServiceSpec> serviceSpecXML,@PathParam(""String_Node_Str"") String serviceId,@Context UriInfo uriInfo){
  ServiceSpec serviceSpec=serviceSpecXML.getValue();
  if (serviceSpec.getPackageUri() == null || serviceSpec.getPackageUri().isEmpty() || serviceSpec.getPackageType() == null)   return Response.status(Status.BAD_REQUEST).build();
  logger.debug(""String_Node_Str"" + serviceSpec.getName());
  Service service;
  try {
    service=serviceDeployer.updateService(serviceId,serviceSpec);
  }
 catch (  ServiceNotModifiedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  UnhandledModificationException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  logger.info(serviceSpec.getName() + ""String_Node_Str"" + service.getUris());
  UriBuilder uriBuilder=uriInfo.getBaseUriBuilder();
  uriBuilder=uriBuilder.path(ServicesResource.class).path(service.getName());
  Response build=Response.ok(service).build();
  return build;
}","/** 
 * Update a service
 * @param serviceSpecXML Request's body content with a ServiceSpec XML
 * @return HTTP code 201 and Location header if the service was successfully deployed;HTTP code 400 if request can not be properly parsed;  HTTP code 500 if any other error occurs.
 * @throws UnhandledModificationException 
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Response updateService(JAXBElement<ServiceSpec> serviceSpecXML,@PathParam(""String_Node_Str"") String serviceId,@Context UriInfo uriInfo){
  ServiceSpec serviceSpec=serviceSpecXML.getValue();
  if (serviceSpec.getPackageUri() == null || serviceSpec.getPackageUri().isEmpty() || serviceSpec.getPackageType() == null)   return Response.status(Status.BAD_REQUEST).build();
  logger.debug(""String_Node_Str"" + serviceSpec.getName());
  Service service;
  try {
    service=servicesManager.updateService(serviceId,serviceSpec);
  }
 catch (  ServiceNotModifiedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  UnhandledModificationException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  logger.info(serviceSpec.getName() + ""String_Node_Str"" + service.getUris());
  UriBuilder uriBuilder=uriInfo.getBaseUriBuilder();
  uriBuilder=uriBuilder.path(ServicesResource.class).path(service.getName());
  Response build=Response.ok(service).build();
  return build;
}",0.995893223819302
39978,"/** 
 * Client requests a service instance by ID
 * @param serviceID of service of required instance
 * @param instanceID of required instance
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstance(@PathParam(""String_Node_Str"") String serviceId,@PathParam(""String_Node_Str"") String instanceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId + ""String_Node_Str""+ serviceId);
  Service service;
  ServiceInstance instance;
  try {
    service=serviceDeployer.getService(serviceId);
    instance=service.getInstance(instanceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceInstanceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(instance).build();
}","/** 
 * Client requests a service instance by ID
 * @param serviceID of service of required instance
 * @param instanceID of required instance
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstance(@PathParam(""String_Node_Str"") String serviceId,@PathParam(""String_Node_Str"") String instanceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId + ""String_Node_Str""+ serviceId);
  Service service;
  ServiceInstance instance;
  try {
    service=servicesManager.getService(serviceId);
    instance=service.getInstance(instanceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceInstanceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(instance).build();
}",0.9939086294416244
39979,"/** 
 * Client requests a service by ID
 * @param serviceID of required service
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getService(@PathParam(""String_Node_Str"") String serviceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId);
  Service service;
  try {
    service=serviceDeployer.getService(serviceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service).build();
}","/** 
 * Client requests a service by ID
 * @param serviceID of required service
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getService(@PathParam(""String_Node_Str"") String serviceId){
  if (serviceId == null || serviceId.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + serviceId);
  Service service;
  try {
    service=servicesManager.getService(serviceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service).build();
}",0.9906687402799378
39980,"@Test public void shouldDeployAWarServiceInANode() throws Exception {
  Service service=deployer.createService(spec);
  ServiceInstance instance=service.getInstances().get(0);
  String url=instance.getNativeUri();
  System.out.println(""String_Node_Str"" + url);
  npm.upgradeNode(instance.getNode().getId());
  Thread.sleep(1000);
  client=WebClient.create(url);
  String body=client.get(String.class);
  String excerpt=""String_Node_Str"";
  assertTrue(body.contains(excerpt));
}","@Test public void shouldDeployAWarServiceInANode() throws Exception {
  Service service=servicesManager.createService(spec);
  ServiceInstance instance=service.getInstances().get(0);
  String url=instance.getNativeUri();
  System.out.println(""String_Node_Str"" + url);
  npm.upgradeNode(instance.getNode().getId());
  Thread.sleep(1000);
  client=WebClient.create(url);
  String body=client.get(String.class);
  String excerpt=""String_Node_Str"";
  assertTrue(body.contains(excerpt));
}",0.980228928199792
39981,"@Before public void setUp() throws Exception {
  Configuration.set(""String_Node_Str"",""String_Node_Str"");
  npm=new NodesClient(deploymentManagerHost);
  deployer=new ServicesClient(deploymentManagerHost);
  spec.setName(""String_Node_Str"");
  spec.setPackageUri(JAR_LOCATION);
  spec.setPackageType(PackageType.COMMAND_LINE);
  spec.setEndpointName(""String_Node_Str"");
  spec.setPort(8042);
}","@Before public void setUp() throws Exception {
  Configuration.set(""String_Node_Str"",""String_Node_Str"");
  npm=new NodesClient(deploymentManagerHost);
  servicesManager=new ServicesClient(deploymentManagerHost);
  spec.setName(""String_Node_Str"");
  spec.setPackageUri(JAR_LOCATION);
  spec.setPackageType(PackageType.COMMAND_LINE);
  spec.setEndpointName(""String_Node_Str"");
  spec.setPort(8042);
}",0.9759188846641318
39982,"@Override public String toString(){
  return ""String_Node_Str"" + legacyHostname + ""String_Node_Str""+ legacyIp+ ""String_Node_Str""+ node+ ""String_Node_Str""+ easyEsbNodeAdminEndpoint+ ""String_Node_Str""+ nativeUri+ ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ serviceId+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + node.getHostname() + ""String_Node_Str""+ node.getIp()+ ""String_Node_Str""+ node+ ""String_Node_Str""+ easyEsbNodeAdminEndpoint+ ""String_Node_Str""+ nativeUri+ ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ service.getSpec().getUUID()+ ""String_Node_Str"";
}",0.8426229508196721
39983,"/** 
 * Client requests a service instances by ID
 * @param serviceID of service of required instances
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstances(@PathParam(""String_Node_Str"") String uuid){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + uuid);
  DeployedService service;
  try {
    service=serviceDeployer.getService(uuid);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service.getInstances()).build();
}","/** 
 * Client requests a service instances by ID
 * @param serviceID of service of required instances
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstances(@PathParam(""String_Node_Str"") String uuid){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + uuid);
  DeployedService service;
  try {
    service=servicesManager.getService(uuid);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service.getInstances()).build();
}",0.9910846953937592
39984,"/** 
 * Client requests remove a service by ID
 * @param serviceID
 */
@DELETE @Path(""String_Node_Str"") public Response deleteService(@PathParam(""String_Node_Str"") String uuid){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + uuid);
  try {
    serviceDeployer.deleteService(uuid);
  }
 catch (  ServiceNotDeletedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceNotFoundException e) {
    return Response.status(Status.NOT_FOUND).build();
  }
  logger.info(""String_Node_Str"" + uuid + ""String_Node_Str"");
  return Response.ok().build();
}","/** 
 * Client requests remove a service by ID
 * @param serviceID
 */
@DELETE @Path(""String_Node_Str"") public Response deleteService(@PathParam(""String_Node_Str"") String uuid){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + uuid);
  try {
    servicesManager.deleteService(uuid);
  }
 catch (  ServiceNotDeletedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceNotFoundException e) {
    return Response.status(Status.NOT_FOUND).build();
  }
  logger.info(""String_Node_Str"" + uuid + ""String_Node_Str"");
  return Response.ok().build();
}",0.9911242603550297
39985,"/** 
 * Update a service
 * @param serviceSpecXML Request's body content with a ServiceSpec XML
 * @return HTTP code 201 and Location header if the service was successfully deployed;HTTP code 400 if request can not be properly parsed;  HTTP code 500 if any other error occurs.
 * @throws UnhandledModificationException 
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Response updateService(JAXBElement<DeployedServiceSpec> serviceSpecXML,@PathParam(""String_Node_Str"") String uuid,@Context UriInfo uriInfo){
  DeployedServiceSpec serviceSpec=serviceSpecXML.getValue();
  if (serviceSpec.getPackageUri() == null || serviceSpec.getPackageUri().isEmpty() || serviceSpec.getPackageType() == null)   return Response.status(Status.BAD_REQUEST).build();
  logger.debug(""String_Node_Str"" + uuid);
  DeployedService service;
  try {
    service=servicesManager.updateService(serviceId,serviceSpec);
  }
 catch (  ServiceNotModifiedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  UnhandledModificationException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  logger.info(uuid + ""String_Node_Str"" + service.getUris());
  UriBuilder uriBuilder=uriInfo.getBaseUriBuilder();
  uriBuilder=uriBuilder.path(ServicesResource.class).path(service.getSpec().getUUID());
  Response build=Response.ok(service).build();
  return build;
}","/** 
 * Update a service
 * @param serviceSpecXML Request's body content with a ServiceSpec XML
 * @return HTTP code 201 and Location header if the service was successfully deployed;HTTP code 400 if request can not be properly parsed;  HTTP code 500 if any other error occurs.
 * @throws UnhandledModificationException 
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Response updateService(JAXBElement<DeployedServiceSpec> serviceSpecXML,@PathParam(""String_Node_Str"") String uuid,@Context UriInfo uriInfo){
  DeployedServiceSpec serviceSpec=serviceSpecXML.getValue();
  if (serviceSpec.getPackageUri() == null || serviceSpec.getPackageUri().isEmpty() || serviceSpec.getPackageType() == null)   return Response.status(Status.BAD_REQUEST).build();
  logger.debug(""String_Node_Str"" + uuid);
  DeployedService service;
  try {
    service=servicesManager.updateService(uuid,serviceSpec);
  }
 catch (  ServiceNotModifiedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  UnhandledModificationException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  logger.info(uuid + ""String_Node_Str"" + service.getUris());
  UriBuilder uriBuilder=uriInfo.getBaseUriBuilder();
  uriBuilder=uriBuilder.path(ServicesResource.class).path(service.getSpec().getUUID());
  Response build=Response.ok(service).build();
  return build;
}",0.996216030271758
39986,"/** 
 * Client requests a service instance by ID
 * @param serviceID of service of required instance
 * @param instanceID of required instance
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstance(@PathParam(""String_Node_Str"") String uuid,@PathParam(""String_Node_Str"") String instanceId){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + instanceId + ""String_Node_Str""+ uuid);
  DeployedService service;
  ServiceInstance instance;
  try {
    service=serviceDeployer.getService(uuid);
    instance=service.getInstance(instanceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceInstanceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(instance).build();
}","/** 
 * Client requests a service instance by ID
 * @param serviceID of service of required instance
 * @param instanceID of required instance
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getServiceInstance(@PathParam(""String_Node_Str"") String uuid,@PathParam(""String_Node_Str"") String instanceId){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + instanceId + ""String_Node_Str""+ uuid);
  DeployedService service;
  ServiceInstance instance;
  try {
    service=servicesManager.getService(uuid);
    instance=service.getInstance(instanceId);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
catch (  ServiceInstanceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(instance).build();
}",0.9938080495356038
39987,"/** 
 * Deploys a service
 * @param serviceSpecXML Request's body content with a ServiceSpec XML
 * @return HTTP code 201 and Location header if the service was successfully deployed;HTTP code 400 if request can not be properly parsed;  HTTP code 500 if any other error occurs.
 */
@POST @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Response deployService(JAXBElement<DeployedServiceSpec> serviceSpecXML,@Context UriInfo uriInfo){
  DeployedServiceSpec serviceSpec=serviceSpecXML.getValue();
  if (serviceSpec.getPackageUri() == null || serviceSpec.getPackageUri().isEmpty() || serviceSpec.getPackageType() == null)   return Response.status(Status.BAD_REQUEST).build();
  logger.debug(""String_Node_Str"" + serviceSpec.getPackageUri());
  Service service;
  try {
    service=servicesManager.createService(serviceSpec);
  }
 catch (  ServiceNotDeployedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  logger.info(service.getSpec().getUUID() + ""String_Node_Str"" + service.getUris());
  UriBuilder uriBuilder=uriInfo.getBaseUriBuilder();
  uriBuilder=uriBuilder.path(ServicesResource.class).path(service.getSpec().getUUID());
  URI location=uriBuilder.build();
  return Response.created(location).entity(service).build();
}","/** 
 * Deploys a service
 * @param serviceSpecXML Request's body content with a ServiceSpec XML
 * @return HTTP code 201 and Location header if the service was successfully deployed;HTTP code 400 if request can not be properly parsed;  HTTP code 500 if any other error occurs.
 */
@POST @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Response deployService(DeployedServiceSpec serviceSpec,@Context UriInfo uriInfo){
  if (serviceSpec.getPackageUri() == null || serviceSpec.getPackageUri().isEmpty() || serviceSpec.getPackageType() == null)   return Response.status(Status.BAD_REQUEST).build();
  logger.debug(""String_Node_Str"" + serviceSpec.getPackageUri());
  Service service;
  try {
    service=servicesManager.createService(serviceSpec);
  }
 catch (  ServiceNotDeployedException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  logger.info(service.getSpec().getUUID() + ""String_Node_Str"" + service.getUris());
  UriBuilder uriBuilder=uriInfo.getBaseUriBuilder();
  uriBuilder=uriBuilder.path(ServicesResource.class).path(service.getSpec().getUUID());
  URI location=uriBuilder.build();
  return Response.created(location).entity(service).build();
}",0.9597449182941412
39988,"/** 
 * Client requests a service by ID
 * @param serviceID of required service
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getService(@PathParam(""String_Node_Str"") String uuid){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + uuid);
  DeployedService service;
  try {
    service=serviceDeployer.getService(uuid);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service).build();
}","/** 
 * Client requests a service by ID
 * @param serviceID of required service
 * @return a service found
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_XML) public Response getService(@PathParam(""String_Node_Str"") String uuid){
  if (uuid == null || uuid.isEmpty()) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  logger.debug(""String_Node_Str"" + uuid);
  DeployedService service;
  try {
    service=servicesManager.getService(uuid);
  }
 catch (  ServiceNotFoundException e) {
    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
  }
  return Response.ok(service).build();
}",0.9904153354632588
39989,"@Test public void shouldDeployAWarServiceInANode() throws Exception {
  Service service=servicesManager.createService(spec);
  ServiceInstance instance=service.getInstances().get(0);
  String url=instance.getNativeUri();
  System.out.println(""String_Node_Str"" + url);
  npm.upgradeNode(instance.getNode().getId());
  Thread.sleep(1000);
  client=WebClient.create(url);
  String body=client.get(String.class);
  String excerpt=""String_Node_Str"";
  assertTrue(body.contains(excerpt));
}","@Test public void shouldDeployAWarServiceInANode() throws Exception {
  Service service=servicesManager.createService(spec);
  ServiceInstance instance=((DeployedService)service).getInstances().get(0);
  String url=instance.getNativeUri();
  System.out.println(""String_Node_Str"" + url);
  npm.upgradeNode(instance.getNode().getId());
  Thread.sleep(1000);
  client=WebClient.create(url);
  String body=client.get(String.class);
  String excerpt=""String_Node_Str"";
  assertTrue(body.contains(excerpt));
}",0.9665653495440728
39990,"private ServiceSpec getSpec(){
  ServiceSpec airlineSpec=new ServiceSpec();
  airlineSpec.setName(""String_Node_Str"");
  airlineSpec.setPackageUri(""String_Node_Str"");
  airlineSpec.setType(ServiceType.SOAP);
  airlineSpec.setEndpointName(""String_Node_Str"");
  airlineSpec.setPort(1234);
  airlineSpec.setPackageType(PackageType.COMMAND_LINE);
  return airlineSpec;
}","private DeployedServiceSpec getSpec(){
  return new DeployedServiceSpec(ServiceType.SOAP,PackageType.COMMAND_LINE,null,null,""String_Node_Str"",1234,""String_Node_Str"",1);
}",0.3327102803738317
39991,"@Before public void setUp() throws ServiceNotDeployedException {
  ServicesManager servicesManagerMock=mock(ServicesManager.class);
  when(servicesManagerMock.createService(getSpec())).thenReturn(getService());
  this.servicesResources=new ServicesResource(servicesManagerMock,null);
}","@Before public void setUp() throws ServiceNotDeployedException {
  ServicesManager servicesManagerMock=mock(ServicesManager.class);
  when(servicesManagerMock.createService(getSpec())).thenReturn(getService());
  this.servicesResources=new ServicesResourceForTest(servicesManagerMock,null);
}",0.9878682842287696
39992,"@Test public void shouldCreateService() throws IllegalArgumentException, UriBuilderException, URISyntaxException, ServiceInstanceNotFoundException {
  String uri=""String_Node_Str"";
  UriBuilder uriBuilder=mock(UriBuilder.class);
  UriInfo uriInfo=mock(UriInfo.class);
  when(uriInfo.getBaseUriBuilder()).thenReturn(uriBuilder);
  when(uriBuilder.path(any(Class.class))).thenReturn(uriBuilder);
  when(uriBuilder.path(any(String.class))).thenReturn(uriBuilder);
  when(uriBuilder.build()).thenReturn(new URI(uri));
  Response response=this.servicesResources.createService(getSpec(),uriInfo);
  assertEquals(201,response.getStatus());
  Service entity=(Service)response.getEntity();
  assertEquals(""String_Node_Str"",entity.getName());
  assertEquals(getSpec(),entity.getSpec());
  assertEquals(1,entity.getInstances().size());
  assertEquals(getService().getInstance(""String_Node_Str""),entity.getInstance(""String_Node_Str""));
  assertEquals(uri,response.getMetadata().get(""String_Node_Str"").get(0));
}","@Test public void shouldCreateService() throws IllegalArgumentException, UriBuilderException, URISyntaxException, ServiceInstanceNotFoundException {
  String uri=""String_Node_Str"";
  UriBuilder uriBuilder=mock(UriBuilder.class);
  UriInfo uriInfo=mock(UriInfo.class);
  when(uriInfo.getBaseUriBuilder()).thenReturn(uriBuilder);
  when(uriBuilder.path(any(Class.class))).thenReturn(uriBuilder);
  when(uriBuilder.path(any(String.class))).thenReturn(uriBuilder);
  when(uriBuilder.build()).thenReturn(new URI(uri));
  Response response=this.servicesResources.deployService(getSpec(),uriInfo);
  assertEquals(201,response.getStatus());
  Service entity=(Service)response.getEntity();
  assertEquals(""String_Node_Str"",entity.getSpec().getUUID());
  assertEquals(getSpec(),entity.getSpec());
  assertEquals(1,((DeployedService)entity).getInstances().size());
  assertEquals(getService().getInstance(""String_Node_Str""),((DeployedService)entity).getInstance(""String_Node_Str""));
  assertEquals(uri,response.getMetadata().get(""String_Node_Str"").get(0));
}",0.9550342130987292
39993,"private Service getService(){
  Service airline=new Service();
  airline.setName(""String_Node_Str"");
  airline.setSpec(getSpec());
  ServiceInstance instance=new ServiceInstance();
  instance.setInstanceId(""String_Node_Str"");
  instance.setNativeUri(""String_Node_Str"");
  airline.addInstance(instance);
  return airline;
}","private DeployedService getService(){
  DeployedService airline=new DeployedService(getSpec());
  ServiceInstance instance=new ServiceInstance();
  instance.setInstanceId(""String_Node_Str"");
  instance.setNativeUri(""String_Node_Str"");
  airline.addInstance(instance);
  return airline;
}",0.4006568144499179
39994,"public Service getDeployedServiceByName(String serviceName){
  List<Service> deployedServices=this.getDeployedServices();
  for (  Service svc : deployedServices) {
    if (serviceName.equals(svc.getName()))     return svc;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + serviceName + ""String_Node_Str"");
}","public Service getDeployedServiceByName(String serviceName){
  List<Service> deployedServices=this.getDeployedServices();
  for (  Service svc : deployedServices) {
    System.out.println(""String_Node_Str"" + serviceName + ""String_Node_Str""+ svc.toString());
    if (serviceName.equals(svc.getName()))     return svc;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + serviceName + ""String_Node_Str"");
}",0.8731241473396999
39995,"@Before public void setUp(){
  ModelsForTest models=new ModelsForTest(PackageType.COMMAND_LINE);
  smallSpec=models.getChorSpecWithResourceImpact(ResourceImpactDefs.MemoryTypes.SMALL);
  mediumSpec=models.getChorSpecWithResourceImpact(ResourceImpactDefs.MemoryTypes.MEDIUM);
  largeSpec=models.getChorSpecWithResourceImpact(ResourceImpactDefs.MemoryTypes.LARGE);
}","@Before public void setUp(){
  ModelsForTest models=new ModelsForTest(PackageType.COMMAND_LINE);
  smallSpec=models.getChorSpecWithResourceImpact(ResourceImpactDefs.MemoryTypes.SMALL);
  mediumSpec=models.getChorSpecWithResourceImpact(ResourceImpactDefs.MemoryTypes.MEDIUM);
}",0.8625
39996,"private void migrateServiceInstances(Service currentService,ServiceSpec requestedSpec) throws UnhandledModificationException {
  currentService.setSpec(requestedSpec);
  try {
    deployNoLegacyService(currentService);
  }
 catch (  ServiceNotDeployedException e) {
    throw new UnhandledModificationException();
  }
}","private void migrateServiceInstances(Service currentService,ServiceSpec requestedSpec) throws UnhandledModificationException {
  currentService.setSpec(requestedSpec);
  currentService.getInstances().clear();
  try {
    deployNoLegacyService(currentService);
  }
 catch (  ServiceNotDeployedException e) {
    throw new UnhandledModificationException();
  }
}",0.9396170839469808
39997,"private void executeDeployment(Service service,int numberOfNewInstances){
  Recipe serviceRecipe=service.getRecipe();
  String configName=serviceRecipe.getCookbookName() + ""String_Node_Str"" + serviceRecipe.getName();
  Config config=new Config(configName,null,numberOfNewInstances);
  List<Node> nodes=new ArrayList<Node>();
  try {
    nodes=npm.applyConfig(config);
  }
 catch (  ConfigNotAppliedException e) {
    logger.error(e.getMessage());
  }
catch (  Exception e) {
    logger.error(e.getMessage());
  }
  for (  Node node : nodes) {
    if (!((node.getHostname() == null || node.getHostname().isEmpty()) && (node.getIp() == null || node.getIp().isEmpty()))) {
      logger.debug(""String_Node_Str"" + node.getHostname() + ""String_Node_Str""+ node.getIp());
      @SuppressWarnings(""String_Node_Str"") ServiceInstance serviceInstance=new ServiceInstance(node,service);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
}","private void executeDeployment(Service service,int numberOfNewInstances){
  Recipe serviceRecipe=service.getRecipe();
  String configName=serviceRecipe.getCookbookName() + ""String_Node_Str"" + serviceRecipe.getName();
  Config config=new Config(configName,service.getSpec().getResourceImpact(),numberOfNewInstances);
  List<Node> nodes=new ArrayList<Node>();
  try {
    nodes=npm.applyConfig(config);
  }
 catch (  ConfigNotAppliedException e) {
    logger.error(e.getMessage());
  }
catch (  Exception e) {
    logger.error(e.getMessage());
  }
  for (  Node node : nodes) {
    if (!((node.getHostname() == null || node.getHostname().isEmpty()) && (node.getIp() == null || node.getIp().isEmpty()))) {
      logger.debug(""String_Node_Str"" + node.getHostname() + ""String_Node_Str""+ node.getIp());
      @SuppressWarnings(""String_Node_Str"") ServiceInstance serviceInstance=new ServiceInstance(node,service);
    }
 else {
      logger.debug(""String_Node_Str"");
    }
  }
}",0.9795704557359874
39998,"public Service(ServiceSpec serviceSpec){
  if (serviceSpec == null)   throw new IllegalArgumentException();
  this.spec=serviceSpec;
  if (this.spec.getPackageType() == null) {
    this.spec.setPackageType(PackageType.OTHER);
  }
  if (serviceSpec.getName() == null || serviceSpec.getName().isEmpty()) {
    throw new IllegalArgumentException();
  }
 else {
    name=serviceSpec.getName();
  }
  if (serviceSpec.packageType == PackageType.LEGACY) {
    setLegacyServiceInstances(serviceSpec);
  }
}","public Service(ServiceSpec serviceSpec){
  if (serviceSpec == null)   throw new IllegalArgumentException();
  this.serviceInstances=new ArrayList<ServiceInstance>();
  this.spec=serviceSpec;
  if (this.spec.getPackageType() == null) {
    this.spec.setPackageType(PackageType.OTHER);
  }
  if (serviceSpec.getName() == null || serviceSpec.getName().isEmpty()) {
    throw new IllegalArgumentException();
  }
 else {
    name=serviceSpec.getName();
  }
  if (serviceSpec.packageType == PackageType.LEGACY) {
    setLegacyServiceInstances(serviceSpec);
  }
}",0.9449715370018976
39999,"public Service(ServiceSpec serviceSpec){
  if (serviceSpec == null)   throw new IllegalArgumentException();
  this.spec=serviceSpec;
  if (this.spec.getPackageType() == null) {
    this.spec.setPackageType(PackageType.OTHER);
  }
  if (serviceSpec.getName() == null || serviceSpec.getName().isEmpty()) {
    throw new IllegalArgumentException();
  }
 else {
    name=serviceSpec.getName();
  }
  if (serviceSpec.packageType == PackageType.LEGACY) {
    setLegacyServiceInstances(serviceSpec);
  }
}","public Service(ServiceSpec serviceSpec){
  if (serviceSpec == null)   throw new IllegalArgumentException();
  serviceInstances=new ArrayList<ServiceInstance>();
  this.spec=serviceSpec;
  if (this.spec.getPackageType() == null) {
    this.spec.setPackageType(PackageType.OTHER);
  }
  if (serviceSpec.getName() == null || serviceSpec.getName().isEmpty()) {
    throw new IllegalArgumentException();
  }
 else {
    name=serviceSpec.getName();
  }
  if (serviceSpec.packageType == PackageType.LEGACY) {
    setLegacyServiceInstances(serviceSpec);
  }
}",0.9494756911344138
40000,"/** 
 * Runs chef-client in a given node
 * @param node
 * @throws JSchException if could not connect into the node
 * @throws NodeNotUpgradedException if chef-client ends in error
 */
public void upgradeNodeConfiguration(Node node) throws JSchException, NodeNotUpgradedException {
  needUpdate.put(node,true);
  if (updating.containsKey(node) && updating.get(node)) {
    while (updating.get(node)) {
      this.sleep(10000);
    }
    return;
  }
  SshUtil ssh=new SshUtil(node.getIp(),node.getUser(),node.getPrivateKeyFile());
  while (needUpdate.get(node)) {
    needUpdate.put(node,false);
    updating.put(node,true);
    logger.debug(""String_Node_Str"" + node);
    try {
      this.runChefClient(ssh);
    }
 catch (    SshCommandFailed e) {
      String message=""String_Node_Str"" + node.toString();
      logger.error(message);
      throw new NodeNotUpgradedException(node.getId(),message);
    }
    updating.put(node,false);
  }
}","/** 
 * Runs chef-client in a given node
 * @param node
 * @throws JSchException if could not connect into the node
 * @throws NodeNotUpgradedException if chef-client ends in error
 */
public void upgradeNodeConfiguration(Node node) throws JSchException, NodeNotUpgradedException {
  needUpdate.put(node,true);
  if (updating.containsKey(node) && updating.get(node)) {
    while (updating.get(node)) {
      this.sleep(10000);
    }
    return;
  }
  SshUtil ssh=new SshUtil(node.getIp(),node.getUser(),node.getPrivateKeyFile());
  while (needUpdate.get(node)) {
    needUpdate.put(node,false);
    updating.put(node,true);
    logger.debug(""String_Node_Str"" + node);
    try {
      this.runChefClient(ssh);
    }
 catch (    SshCommandFailed e) {
      needUpdate.remove(node);
      updating.remove(node);
      String message=""String_Node_Str"" + node.toString();
      logger.error(message);
      throw new NodeNotUpgradedException(node.getId(),message);
    }
    updating.put(node,false);
  }
}",0.969104016477858
