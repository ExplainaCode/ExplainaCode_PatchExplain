record_number,buggy_code,fixed_code,code_similarity
145001,"public void setMessage(String message){
  this.messageItem.setText(message);
}","public void setMessage(String message,boolean showSpinner){
  this.messageItem.setText(message);
  gauge.setVisible(showSpinner);
}",0.7464114832535885
145002,"public CommCareSuiteController(CommCareSessionController controller,Menu m){
  this.m=m;
  this.controller=controller;
  view=new CommCareListView(m.getName().evaluate());
  view.setCommandListener(this);
}","public CommCareSuiteController(CommCareSessionController controller,Menu m){
  this.m=m;
  this.controller=controller;
  view=new CommCareListView(m.getName().evaluate());
  view.setCommandListener(this);
  view.addCommand(BACK);
}",0.94279176201373
145003,"public void _commandAction(Command c,Displayable d){
  if (c.equals(List.SELECT_COMMAND)) {
    controller.chooseSessionItem(view.getSelectedIndex());
    controller.next();
  }
 else   if (c.equals(CommCareListView.BACK)) {
    transitions.exitMenuTransition();
  }
}","public void _commandAction(Command c,Displayable d){
  if (c.equals(List.SELECT_COMMAND)) {
    controller.chooseSessionItem(view.getSelectedIndex());
    controller.next();
  }
 else   if (c.equals(BACK)) {
    transitions.exitMenuTransition();
  }
}",0.9672447013487476
145004,"/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Vector<Resource> v=GetUnreadyResources();
  int round=-1;
  while (v.size() > 0 || (toInitialize != null && this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    for (    Resource r : v) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              handled=r.getInstaller().install(r,location,ref,this,instance,upgrade);
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=r.getInstaller().install(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
        }
      }
      if (!handled) {
        throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}","/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Vector<Resource> v=GetUnreadyResources();
  int round=-1;
  while (v.size() > 0 && (toInitialize == null || this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    for (    Resource r : v) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              handled=r.getInstaller().install(r,location,ref,this,instance,upgrade);
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=r.getInstaller().install(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
        }
      }
      if (!handled) {
        throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}",0.9915796564499832
145005,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash);
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
  return false;
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      Logger.exception(e);
      return false;
    }
  }
  return false;
}",0.9435975609756098
145006,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  try {
    if (getlocal().containsKey(r.getRecordGuid()) && r.getStatus() == Resource.RESOURCE_STATUS_LOCAL) {
      Profile local=getlocal().get(r.getRecordGuid());
      installInternal(local);
      table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      localTable.remove(r.getRecordGuid());
      for (      Resource child : table.getResourcesForParent(r.getRecordGuid())) {
        table.commit(child,Resource.RESOURCE_STATUS_UNINITIALIZED);
      }
      return true;
    }
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      ProfileParser parser=new ProfileParser(ref.getStream(),instance,table,r.getRecordGuid(),upgrade ? Resource.RESOURCE_STATUS_PENDING : Resource.RESOURCE_STATUS_UNINITIALIZED,forceVersion);
      Profile p=parser.parse();
      if (upgrade) {
        getlocal().put(r.getRecordGuid(),p);
        table.commit(r,Resource.RESOURCE_STATUS_LOCAL,p.getVersion());
      }
 else {
        p.initializeProperties(true);
        installInternal(p);
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED,p.getVersion());
      }
      return true;
    }
  }
 catch (  InvalidStructureException e) {
    e.printStackTrace();
    return false;
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  XmlPullParserException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  try {
    if (getlocal().containsKey(r.getRecordGuid()) && r.getStatus() == Resource.RESOURCE_STATUS_LOCAL) {
      Profile local=getlocal().get(r.getRecordGuid());
      installInternal(local);
      table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      localTable.remove(r.getRecordGuid());
      for (      Resource child : table.getResourcesForParent(r.getRecordGuid())) {
        table.commit(child,Resource.RESOURCE_STATUS_UNINITIALIZED);
      }
      return true;
    }
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      ProfileParser parser=new ProfileParser(ref.getStream(),instance,table,r.getRecordGuid(),upgrade ? Resource.RESOURCE_STATUS_PENDING : Resource.RESOURCE_STATUS_UNINITIALIZED,forceVersion);
      if (Resource.RESOURCE_AUTHORITY_REMOTE == location.getAuthority()) {
        parser.setMaximumAuthority(Resource.RESOURCE_AUTHORITY_REMOTE);
      }
      Profile p=parser.parse();
      if (upgrade) {
        getlocal().put(r.getRecordGuid(),p);
        table.commit(r,Resource.RESOURCE_STATUS_LOCAL,p.getVersion());
      }
 else {
        p.initializeProperties(true);
        installInternal(p);
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED,p.getVersion());
      }
      return true;
    }
  }
 catch (  InvalidStructureException e) {
    e.printStackTrace();
    return false;
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  XmlPullParserException e) {
    e.printStackTrace();
    return false;
  }
}",0.955928348023884
145007,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
    return false;
  }
 else {
    try {
      SuiteParser parser=new SuiteParser(ref.getStream(),table,r.getRecordGuid());
      Suite s=parser.parse();
      storage().write(s);
      cacheLocation=s.getID();
      table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      return true;
    }
 catch (    InvalidStructureException e) {
      e.printStackTrace();
      return false;
    }
catch (    StorageFullException e) {
      e.printStackTrace();
      return false;
    }
catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
catch (    XmlPullParserException e) {
      e.printStackTrace();
      return false;
    }
  }
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
    return false;
  }
 else {
    try {
      SuiteParser parser=new SuiteParser(ref.getStream(),table,r.getRecordGuid());
      if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
        parser.setMaximumAuthority(Resource.RESOURCE_AUTHORITY_REMOTE);
      }
      Suite s=parser.parse();
      storage().write(s);
      cacheLocation=s.getID();
      table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      return true;
    }
 catch (    InvalidStructureException e) {
      e.printStackTrace();
      return false;
    }
catch (    StorageFullException e) {
      e.printStackTrace();
      return false;
    }
catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
catch (    XmlPullParserException e) {
      e.printStackTrace();
      return false;
    }
  }
}",0.9207971384772612
145008,"public ResourceTable stageUpgradeTable(ResourceTable global,ResourceTable temporary,String profileRef) throws UnfullfilledRequirementsException, StorageFullException, UnresolvedResourceException {
  temporary.clear();
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_LOCAL,profileRef));
  Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
  temporary.addResource(r,temporary.getInstallers().getProfileInstaller(false),null);
  temporary.prepareResources(global,this,APP_PROFILE_RESOURCE_ID);
  return temporary;
}","public ResourceTable stageUpgradeTable(ResourceTable global,ResourceTable temporary,String profileRef) throws UnfullfilledRequirementsException, StorageFullException, UnresolvedResourceException {
  temporary.clear();
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_REMOTE,profileRef));
  Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
  temporary.addResource(r,temporary.getInstallers().getProfileInstaller(false),null);
  temporary.prepareResources(global,this,APP_PROFILE_RESOURCE_ID);
  return temporary;
}",0.99153194765204
145009,"public void init(String profileReference,ResourceTable global,boolean forceInstall) throws UnfullfilledRequirementsException, UnresolvedResourceException {
  try {
    if (!global.isReady()) {
      global.prepareResources(null,this);
    }
    Resource profile=global.getResourceWithId(APP_PROFILE_RESOURCE_ID);
    if (profile == null) {
      Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
      locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_REMOTE,profileReference));
      Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
      global.addResource(r,global.getInstallers().getProfileInstaller(forceInstall),""String_Node_Str"");
      global.prepareResources(null,this);
    }
 else {
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
  }
}","public void init(String profileReference,ResourceTable global,boolean forceInstall) throws UnfullfilledRequirementsException, UnresolvedResourceException {
  try {
    if (!global.isReady()) {
      global.prepareResources(null,this);
    }
    Resource profile=global.getResourceWithId(APP_PROFILE_RESOURCE_ID);
    if (profile == null) {
      Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
      locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_LOCAL,profileReference));
      Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
      global.addResource(r,global.getInstallers().getProfileInstaller(forceInstall),""String_Node_Str"");
      global.prepareResources(null,this);
    }
 else {
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
  }
}",0.9935408103347034
145010,"public void upgrade(ResourceTable global,ResourceTable temporary) throws UnfullfilledRequirementsException {
  if (!global.isReady()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    temporary.prepareResources(global,this);
    global.upgradeTable(temporary);
    temporary.destroy();
  }
 catch (  UnresolvedResourceException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
  profile=-1;
  suites.removeAllElements();
  initialize(global);
}","public void upgrade(ResourceTable global,ResourceTable temporary) throws UnfullfilledRequirementsException {
  if (!global.isReady()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    temporary.prepareResources(global,this);
    global.upgradeTable(temporary);
    temporary.destroy();
  }
 catch (  UnresolvedResourceException e) {
    Logger.exception(e);
    throw new RuntimeException(""String_Node_Str"");
  }
  profile=-1;
  suites.removeAllElements();
  initialize(global);
}",0.9639278557114228
145011,"public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if (!forceVersion && this.instance != null) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() < major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}","public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if (!forceVersion && this.instance != null) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() < major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}",0.9955436720142602
145012,"public ResourceParser(KXmlParser parser){
  super(parser);
}","public ResourceParser(KXmlParser parser,int maximumAuthority){
  super(parser);
  this.maximumAuthority=maximumAuthority;
}",0.6557377049180327
145013,"public Resource parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(parser.getAttributeValue(null,""String_Node_Str""));
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  while (nextTagInBlock(""String_Node_Str"")) {
    String sAuthority=parser.getAttributeValue(null,""String_Node_Str"");
    String location=parser.nextText();
    int authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_LOCAL;
    }
 else     if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    }
    locations.addElement(new ResourceLocation(authority,location));
  }
  return new Resource(version,id,locations);
}","public Resource parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(parser.getAttributeValue(null,""String_Node_Str""));
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  while (nextTagInBlock(""String_Node_Str"")) {
    String sAuthority=parser.getAttributeValue(null,""String_Node_Str"");
    String location=parser.nextText();
    int authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_LOCAL;
    }
 else     if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    }
    if (authority >= maximumAuthority) {
      locations.addElement(new ResourceLocation(authority,location));
    }
  }
  return new Resource(version,id,locations);
}",0.9736983360171766
145014,"public Suite parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=Integer.parseInt(sVersion);
  Hashtable<String,Detail> details=new Hashtable<String,Detail>();
  Hashtable<String,Entry> entries=new Hashtable<String,Entry>();
  Vector<Menu> menus=new Vector<Menu>();
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new EntryParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new ViewParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String localeKey=parser.getAttributeValue(null,""String_Node_Str"");
          parser.nextTag();
          Resource r=new ResourceParser(parser).parse();
          table.addResource(r,table.getInstallers().getLocaleFileInstaller(localeKey),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String path=parser.getAttributeValue(null,""String_Node_Str"");
          while (this.nextTagInBlock(""String_Node_Str"")) {
            Resource r=new ResourceParser(parser).parse();
            table.addResource(r,table.getInstallers().getMediaInstaller(path),resourceGuid);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          parser.nextTag();
          Resource r=new ResourceParser(parser).parse();
          table.addResource(r,table.getInstallers().getXFormInstaller(),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Detail d=new DetailParser(parser).parse();
          details.put(d.getId(),d);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Menu m=new MenuParser(parser).parse();
          menus.addElement(m);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    suite=new Suite(version,details,entries,menus);
    return suite;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}","public Suite parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=Integer.parseInt(sVersion);
  Hashtable<String,Detail> details=new Hashtable<String,Detail>();
  Hashtable<String,Entry> entries=new Hashtable<String,Entry>();
  Vector<Menu> menus=new Vector<Menu>();
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new EntryParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new ViewParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String localeKey=parser.getAttributeValue(null,""String_Node_Str"");
          parser.nextTag();
          Resource r=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(r,table.getInstallers().getLocaleFileInstaller(localeKey),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String path=parser.getAttributeValue(null,""String_Node_Str"");
          while (this.nextTagInBlock(""String_Node_Str"")) {
            Resource r=new ResourceParser(parser,maximumResourceAuthority).parse();
            table.addResource(r,table.getInstallers().getMediaInstaller(path),resourceGuid);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          parser.nextTag();
          Resource r=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(r,table.getInstallers().getXFormInstaller(),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Detail d=new DetailParser(parser).parse();
          details.put(d.getId(),d);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Menu m=new MenuParser(parser).parse();
          menus.addElement(m);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    suite=new Suite(version,details,entries,menus);
    return suite;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}",0.9879012743990966
145015,"private void completeDeleteAction(Object transactionKey){
synchronized (getAccessLock()) {
    if (this.transactionKey == null || deleteActionCache == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (!this.transactionKey.equals(transactionKey)) {
      return;
    }
    RMSStorageInfo info=(RMSStorageInfo)deleteActionCache[0];
    Hashtable idIndex=(Hashtable)deleteActionCache[1];
    commitIndex(info,idIndex);
    deleteActionCache=null;
    transactionKey=null;
    setClean();
    storageModified();
  }
}","private void completeDeleteAction(Object transactionKey){
synchronized (getAccessLock()) {
    if (this.transactionKey == null || deleteActionCache == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (!this.transactionKey.equals(transactionKey)) {
      return;
    }
    RMSStorageInfo info=(RMSStorageInfo)deleteActionCache[0];
    Hashtable idIndex=(Hashtable)deleteActionCache[1];
    commitIndex(info,idIndex);
    this.deleteActionCache=null;
    this.transactionKey=null;
    setClean();
    storageModified();
  }
}",0.990791896869245
145016,"public JRDemoFormListController(){
  formInfo=JRDemoUtil.getFormList();
  Vector formNames=new Vector();
  for (Enumeration e=formInfo.elements(); e.hasMoreElements(); )   formNames.addElement(e.nextElement());
  view=new JRDemoFormListView(Localization.get(""String_Node_Str""),formNames,JRDemoContext._().getUser().isAdminUser());
  view.setCommandListener(this);
}","public JRDemoFormListController(){
  formInfo=JRDemoUtil.getFormList();
  Vector formNames=new Vector();
  for (Enumeration e=formInfo.elements(); e.hasMoreElements(); ) {
    formNames.addElement(e.nextElement());
  }
  view=new JRDemoFormListView(Localization.get(""String_Node_Str""),formNames,JRDemoContext._().getUser().isAdminUser());
  view.setCommandListener(this);
}",0.989159891598916
145017,"public void init(MIDlet m){
  DumpRMS.RMSRecoveryHook(m);
  loadModules();
  setMidlet(m);
  addCustomLanguages();
  setProperties();
  UserUtility.populateAdminUser(m);
  loadRootTranslator();
  try {
    StorageManager.getStorage(FormDef.STORAGE_KEY).write(XFormUtils.getFormFromResource(""String_Node_Str""));
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
  }
}","public void init(MIDlet m){
  DumpRMS.RMSRecoveryHook(m);
  loadModules();
  setMidlet(m);
  addCustomLanguages();
  setProperties();
  UserUtility.populateAdminUser(m);
  loadRootTranslator();
}",0.6770833333333334
145018,"public void next(){
  String next=session.getNeededData();
  if (next == null) {
    Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
    String xmlns=session.getForm();
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers()){
      protected void goHome(){
        J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(CommCareSession.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
  if (next.equals(CommCareSession.STATE_REFERRAL_ID)) {
    Entity<PatientReferral> entity=new CommCareEntity<PatientReferral>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new ReferralInstanceLoader(entry.getReferences()));
    CommCareSelectState<PatientReferral> select=new CommCareSelectState<PatientReferral>(entity,PatientReferral.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        PatientReferral r=CommCareUtil.getReferral(id);
        Case c=CommCareUtil.getCase(r.getLinkedId());
        CommCareSessionController.this.session.setReferral(r.getReferralId(),r.getType());
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_CASE_ID)) {
    Entity<Case> entity=new CommCareEntity<Case>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new CaseInstanceLoader(entry.getReferences()));
    CommCareSelectState<Case> select=new CommCareSelectState<Case>(entity,Case.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        Case c=CommCareUtil.getCase(id);
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_FORM_XMLNS)) {
    Entity<FormDef> entity=new CommCareEntity<FormDef>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new FormDefInstanceLoader(entry.getReferences()));
    CommCareSelectState<FormDef> select=new CommCareSelectState<FormDef>(entity,FormDef.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        FormDef r=CommCareUtil.getForm(id);
        CommCareSessionController.this.session.setXmlns(r.getInstance().schema);
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
}","public void next(){
  String next=session.getNeededData();
  if (next == null) {
    String xmlns=session.getForm();
    if (xmlns == null) {
      this.back();
      return;
    }
    Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers()){
      protected void goHome(){
        J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(CommCareSession.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
  if (next.equals(CommCareSession.STATE_REFERRAL_ID)) {
    Entity<PatientReferral> entity=new CommCareEntity<PatientReferral>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new ReferralInstanceLoader(entry.getReferences()));
    CommCareSelectState<PatientReferral> select=new CommCareSelectState<PatientReferral>(entity,PatientReferral.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        PatientReferral r=CommCareUtil.getReferral(id);
        Case c=CommCareUtil.getCase(r.getLinkedId());
        CommCareSessionController.this.session.setReferral(r.getReferralId(),r.getType());
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_CASE_ID)) {
    Entity<Case> entity=new CommCareEntity<Case>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new CaseInstanceLoader(entry.getReferences()));
    CommCareSelectState<Case> select=new CommCareSelectState<Case>(entity,Case.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        Case c=CommCareUtil.getCase(id);
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_FORM_XMLNS)) {
    Entity<FormDef> entity=new CommCareEntity<FormDef>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new FormDefInstanceLoader(entry.getReferences()));
    CommCareSelectState<FormDef> select=new CommCareSelectState<FormDef>(entity,FormDef.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        FormDef r=CommCareUtil.getForm(id);
        CommCareSessionController.this.session.setXmlns(r.getInstance().schema);
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
}",0.9824380165289256
145019,"public Vector<Entry> getEntriesForCommand(String commandId){
  Hashtable<String,Entry> map=platform.getMenuMap();
  Menu menu=null;
  Entry entry=null;
  top:   for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      if (currentCmd.equals(m.getId())) {
        menu=m;
        break top;
      }
      if (s.getEntries().containsKey(currentCmd)) {
        entry=s.getEntries().get(currentCmd);
        break top;
      }
    }
  }
  Vector<Entry> entries=new Vector<Entry>();
  if (entry != null) {
    entries.addElement(entry);
  }
  if (menu != null) {
    for (    String cmd : menu.getCommandIds()) {
      Entry e=map.get(cmd);
      entries.addElement(e);
    }
  }
  return entries;
}","public Vector<Entry> getEntriesForCommand(String commandId){
  Hashtable<String,Entry> map=platform.getMenuMap();
  Menu menu=null;
  Entry entry=null;
  top:   for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      if (commandId.equals(m.getId())) {
        menu=m;
        break top;
      }
      if (s.getEntries().containsKey(commandId)) {
        entry=s.getEntries().get(commandId);
        break top;
      }
    }
  }
  Vector<Entry> entries=new Vector<Entry>();
  if (entry != null) {
    entries.addElement(entry);
  }
  if (menu != null) {
    for (    String cmd : menu.getCommandIds()) {
      Entry e=map.get(cmd);
      entries.addElement(e);
    }
  }
  return entries;
}",0.3953328757721345
145020,"/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    long l=(long)d;
    boolean isIntegral=Math.abs(d - l) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (Integer.MAX_VALUE >= l) && (Integer.MIN_VALUE <= l))) {
      return new IntegerData((int)d);
    }
 else     if (Constants.DATATYPE_LONG == dataType || isIntegral) {
      return new LongData((long)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    return (dataType == Constants.DATATYPE_DATE_TIME ? new DateTimeData((Date)val) : new DateData((Date)val));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}","/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    long l=(long)d;
    boolean isIntegral=Math.abs(d - l) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (Integer.MAX_VALUE >= l) && (Integer.MIN_VALUE <= l))) {
      return new IntegerData((int)d);
    }
 else     if (Constants.DATATYPE_LONG == dataType || isIntegral) {
      return new LongData((long)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    if (dataType == Constants.DATATYPE_DATE_TIME) {
      return new DateTimeData((Date)val);
    }
 else     if (dataType == Constants.DATATYPE_TIME) {
      return new TimeData((Date)val);
    }
 else {
      return new DateData((Date)val);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}",0.9411418481459682
145021,"/** 
 * Creates a new entry model for the form with the appropriate repeat structure
 * @param form
 * @param repeatStructure The structure of repeats (the repeat signals which shouldbe sent during form entry)
 * @throws IllegalArgumentException If repeatStructure is not valid
 */
public FormEntryModel(FormDef form,int repeatStructure){
  this.form=form;
  if (repeatStructure != REPEAT_STRUCTURE_LINEAR && repeatStructure != REPEAT_STRUCTURE_NON_LINEAR) {
    throw new IllegalArgumentException(repeatStructure + ""String_Node_Str"");
  }
  this.repeatStructure=repeatStructure;
  this.currentFormIndex=FormIndex.createBeginningOfFormIndex();
}","/** 
 * Creates a new entry model for the form with the appropriate repeat structure
 * @param form
 * @param repeatStructure The structure of repeats (the repeat signals which shouldbe sent during form entry)
 * @throws IllegalArgumentException If repeatStructure is not valid
 */
public FormEntryModel(FormDef form,int repeatStructure){
  this.form=form;
  if (repeatStructure != REPEAT_STRUCTURE_LINEAR && repeatStructure != REPEAT_STRUCTURE_NON_LINEAR) {
    throw new IllegalArgumentException(repeatStructure + ""String_Node_Str"");
  }
  if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR && containsRepeatGuesses(form)) {
    repeatStructure=REPEAT_STRUCTURE_LINEAR;
  }
  this.repeatStructure=repeatStructure;
  this.currentFormIndex=FormIndex.createBeginningOfFormIndex();
}",0.9046283309957924
145022,"/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param The index to be evaluated as to whether the underlying model ishinted to exist
 */
private void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getInstance().getDataValue(g.getCountReference());
        if (count != null) {
          int fullcount=((Integer)count.getValue()).intValue();
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param The index to be evaluated as to whether the underlying model ishinted to exist
 */
private void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getInstance().getDataValue(g.getCountReference());
        if (count != null) {
          long fullcount=((Integer)count.getValue()).intValue();
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}",0.9978428351309708
145023,"/** 
 * convert a value to a date. note that xpath has no intrinsic representation of dates, so this is off-spec. dates convert to strings as 'yyyy-mm-dd', convert to numbers as # of days since the unix epoch, and convert to booleans always as 'true' string and int conversions are reversable, however: * cannot convert bool to date * empty string and NaN (xpath's 'null values') go unchanged, instead of being converted into a date (which would cause an error, since Date has no null value (other than java null, which the xpath engine can't handle)) * note, however, than non-empty strings that aren't valid dates _will_ cause an error during conversion
 * @param o
 * @return
 */
public static Object toDate(Object o){
  o=unpack(o);
  if (o instanceof Double) {
    Double n=toInt(o);
    if (n.isNaN()) {
      return n;
    }
    if (n.isInfinite() || n.doubleValue() > Integer.MAX_VALUE || n.doubleValue() < Integer.MIN_VALUE) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    return DateUtils.dateAdd(DateUtils.getDate(1970,1,1),n.intValue());
  }
 else   if (o instanceof String) {
    String s=(String)o;
    if (s.length() == 0) {
      return s;
    }
    Date d=DateUtils.parseDate(s);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}","/** 
 * convert a value to a date. note that xpath has no intrinsic representation of dates, so this is off-spec. dates convert to strings as 'yyyy-mm-dd', convert to numbers as # of days since the unix epoch, and convert to booleans always as 'true' string and int conversions are reversable, however: * cannot convert bool to date * empty string and NaN (xpath's 'null values') go unchanged, instead of being converted into a date (which would cause an error, since Date has no null value (other than java null, which the xpath engine can't handle)) * note, however, than non-empty strings that aren't valid dates _will_ cause an error during conversion
 * @param o
 * @return
 */
public static Object toDate(Object o){
  o=unpack(o);
  if (o instanceof Double) {
    Double n=toInt(o);
    if (n.isNaN()) {
      return n;
    }
    if (n.isInfinite() || n.doubleValue() > Integer.MAX_VALUE || n.doubleValue() < Integer.MIN_VALUE) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    return DateUtils.dateAdd(DateUtils.getDate(1970,1,1),n.intValue());
  }
 else   if (o instanceof String) {
    String s=(String)o;
    if (s.length() == 0) {
      return s;
    }
    Date d=DateUtils.parseDateTime(s);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}",0.9986684420772304
145024,"/** 
 * NOTE: Only applicable for Questions right now, not any other kind of IFormElement
 * @param questionIndex
 * @param form
 * @param initViewState
 * @return
 */
public ChatterboxWidget getWidget(FormIndex questionIndex,FormEntryModel model,int initViewState){
  IWidgetStyle collapsedStyle=null;
  IWidgetStyleEditable expandedStyle=null;
  FormEntryPrompt prompt=model.getQuestionPrompt(questionIndex);
  int controlType=prompt.getControlType();
  int dataType=prompt.getDataType();
  String appearanceAttr=prompt.getPromptAttributes();
  collapsedStyle=new CollapsedWidget();
  ((CollapsedWidget)collapsedStyle).setSeekable(this.readOnly);
switch (controlType) {
case Constants.CONTROL_INPUT:
case Constants.CONTROL_SECRET:
switch (dataType) {
case Constants.DATATYPE_INTEGER:
      expandedStyle=new NumericEntryWidget();
case Constants.DATATYPE_LONG:
    expandedStyle=new NumericEntryWidget(false,new LongData());
  if (controlType == Constants.CONTROL_SECRET) {
    ((NumericEntryWidget)expandedStyle).setConstraint(TextField.PASSWORD);
  }
break;
case Constants.DATATYPE_DECIMAL:
expandedStyle=new NumericEntryWidget(true,new DecimalData());
if (controlType == Constants.CONTROL_SECRET) {
((NumericEntryWidget)expandedStyle).setConstraint(TextField.PASSWORD);
}
break;
case Constants.DATATYPE_DATE_TIME:
expandedStyle=new DateEntryWidget(true);
break;
case Constants.DATATYPE_DATE:
expandedStyle=new SimpleDateEntryWidget();
expandedStyle=new DateEntryWidget();
break;
case Constants.DATATYPE_TIME:
expandedStyle=new TimeEntryWidget();
break;
case Constants.DATATYPE_GEOPOINT:
expandedStyle=new GeoPointWidget();
break;
}
break;
case Constants.CONTROL_SELECT_ONE:
int style;
if (""String_Node_Str"".equals(appearanceAttr)) style=ChoiceGroup.POPUP;
 else style=ChoiceGroup.EXCLUSIVE;
expandedStyle=new SelectOneEntryWidget(style,optimizeEntry);
break;
case Constants.CONTROL_SELECT_MULTI:
expandedStyle=new SelectMultiEntryWidget(optimizeEntry);
break;
case Constants.CONTROL_TEXTAREA:
expandedStyle=new TextEntryWidget();
break;
case Constants.CONTROL_TRIGGER:
expandedStyle=new MessageWidget();
break;
case Constants.CONTROL_IMAGE_CHOOSE:
expandedStyle=new ImageChooserWidget();
break;
case Constants.CONTROL_AUDIO_CAPTURE:
expandedStyle=new AudioCaptureWidget();
break;
}
if (expandedStyle == null) {
expandedStyle=new TextEntryWidget();
if (controlType == Constants.CONTROL_SECRET) {
((TextEntryWidget)expandedStyle).setConstraint(TextField.PASSWORD);
}
String name=String.valueOf(controlType);
Object widget=widgetFactory.getNewInstance(name);
if (widget != null) {
expandedStyle=(IWidgetStyleEditable)widget;
}
}
if (collapsedStyle == null || expandedStyle == null) throw new IllegalStateException(""String_Node_Str"");
expandedStyle.registerMultimediaController(mediaController);
ChatterboxWidget widget=new ChatterboxWidget(cbox,prompt,initViewState,collapsedStyle,expandedStyle);
prompt.register(widget);
return widget;
}","/** 
 * NOTE: Only applicable for Questions right now, not any other kind of IFormElement
 * @param questionIndex
 * @param form
 * @param initViewState
 * @return
 */
public ChatterboxWidget getWidget(FormIndex questionIndex,FormEntryModel model,int initViewState){
  IWidgetStyle collapsedStyle=null;
  IWidgetStyleEditable expandedStyle=null;
  FormEntryPrompt prompt=model.getQuestionPrompt(questionIndex);
  int controlType=prompt.getControlType();
  int dataType=prompt.getDataType();
  String appearanceAttr=prompt.getPromptAttributes();
  collapsedStyle=new CollapsedWidget();
  ((CollapsedWidget)collapsedStyle).setSeekable(this.readOnly);
switch (controlType) {
case Constants.CONTROL_INPUT:
case Constants.CONTROL_SECRET:
switch (dataType) {
case Constants.DATATYPE_INTEGER:
      expandedStyle=new NumericEntryWidget();
    pw(controlType,(NumericEntryWidget)expandedStyle);
  break;
case Constants.DATATYPE_LONG:
expandedStyle=new NumericEntryWidget(false,new LongData());
pw(controlType,(NumericEntryWidget)expandedStyle);
break;
case Constants.DATATYPE_DECIMAL:
expandedStyle=new NumericEntryWidget(true,new DecimalData());
pw(controlType,(NumericEntryWidget)expandedStyle);
break;
case Constants.DATATYPE_DATE_TIME:
expandedStyle=new DateEntryWidget(true);
break;
case Constants.DATATYPE_DATE:
expandedStyle=new SimpleDateEntryWidget();
expandedStyle=new DateEntryWidget();
break;
case Constants.DATATYPE_TIME:
expandedStyle=new TimeEntryWidget();
break;
case Constants.DATATYPE_GEOPOINT:
expandedStyle=new GeoPointWidget();
break;
}
break;
case Constants.CONTROL_SELECT_ONE:
int style;
if (""String_Node_Str"".equals(appearanceAttr)) style=ChoiceGroup.POPUP;
 else style=ChoiceGroup.EXCLUSIVE;
expandedStyle=new SelectOneEntryWidget(style,optimizeEntry);
break;
case Constants.CONTROL_SELECT_MULTI:
expandedStyle=new SelectMultiEntryWidget(optimizeEntry);
break;
case Constants.CONTROL_TEXTAREA:
expandedStyle=new TextEntryWidget();
break;
case Constants.CONTROL_TRIGGER:
expandedStyle=new MessageWidget();
break;
case Constants.CONTROL_IMAGE_CHOOSE:
expandedStyle=new ImageChooserWidget();
break;
case Constants.CONTROL_AUDIO_CAPTURE:
expandedStyle=new AudioCaptureWidget();
break;
}
if (expandedStyle == null) {
expandedStyle=new TextEntryWidget();
if (controlType == Constants.CONTROL_SECRET) {
((TextEntryWidget)expandedStyle).setConstraint(TextField.PASSWORD);
}
String name=String.valueOf(controlType);
Object widget=widgetFactory.getNewInstance(name);
if (widget != null) {
expandedStyle=(IWidgetStyleEditable)widget;
}
}
if (collapsedStyle == null || expandedStyle == null) throw new IllegalStateException(""String_Node_Str"");
expandedStyle.registerMultimediaController(mediaController);
ChatterboxWidget widget=new ChatterboxWidget(cbox,prompt,initViewState,collapsedStyle,expandedStyle);
prompt.register(widget);
return widget;
}",0.9513121546961326
145025,"/** 
 * @param stream
 * @throws IOException If there was a problem which resulted in the cachedfile being corrupted or unavailable _and_ the input stream becoming invalidated such that a retry is necessary.
 */
private void downloadRemoteData(InputStream stream) throws IOException {
  J2MEDisplay.setView(view);
  Reference ref;
  try {
    ref=ReferenceManager._().DeriveReference(getCacheRef());
    if (ref.isReadOnly()) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      OutputStream output;
      try {
        if (ref.doesBinaryExist()) {
          ref.remove();
        }
        output=ref.getOutputStream();
      }
 catch (      Exception e) {
        noCache(stream);
        return;
      }
      StreamsUtil.writeFromInputToOutput(stream,output);
      view.addToMessage(Localization.get(""String_Node_Str""));
      startRestore(ref.getStream());
    }
  }
 catch (  InvalidReferenceException e) {
    noCache(stream);
  }
}","/** 
 * @param stream
 * @throws IOException If there was a problem which resulted in the cachedfile being corrupted or unavailable _and_ the input stream becoming invalidated such that a retry is necessary.
 */
private void downloadRemoteData(InputStream stream) throws IOException {
  J2MEDisplay.setView(view);
  Reference ref;
  try {
    ref=ReferenceManager._().DeriveReference(getCacheRef());
    if (ref.isReadOnly()) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      OutputStream output;
      try {
        if (ref.doesBinaryExist()) {
          ref.remove();
        }
        output=ref.getOutputStream();
      }
 catch (      Exception e) {
        noCache(stream);
        return;
      }
      StreamsUtil.writeFromInputToOutput(stream,output);
      output.close();
      view.addToMessage(Localization.get(""String_Node_Str""));
      startRestore(ref.getStream());
    }
  }
 catch (  InvalidReferenceException e) {
    noCache(stream);
  }
}",0.9887983706720976
145026,"/** 
 * Process the response to the current message (may have side effects).
 * @param message A completed transport message with an available response.
 * @return A string with the user facing messages which were parsed out from that response. 
 * @throws InvalidStructureException If the response is present, but incorrectly structured
 * @throws IOException 
 * @throws UnfullfilledRequirementsException If the isn't capable of processing the provided messagefor well recognized reasons (Like the API version of the response being above that currently understood) 
 * @throws XmlPullParserException
 */
public String processResponse(SimpleHttpTransportMessage message) throws InvalidStructureException, IOException, UnfullfilledRequirementsException, XmlPullParserException {
  if (message.getResponseProperties() != null && message.getResponseProperties().getORApiVersion().equals(ONE_OH)) {
    byte[] response=message.getResponseBody();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(true);
    DataModelPullParser parser=new DataModelPullParser(new ByteArrayInputStream(response),factory);
    boolean success=parser.parse();
    if (factory.getResponseMessage() != null) {
      return factory.getResponseMessage();
    }
 else {
      return null;
    }
  }
  throw new UnfullfilledRequirementsException(""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_ENVIRONMENT);
}","/** 
 * Process the response to the current message (may have side effects).
 * @param message A completed transport message with an available response.
 * @return A string with the user facing messages which were parsed out from that response. 
 * @throws InvalidStructureException If the response is present, but incorrectly structured
 * @throws IOException 
 * @throws UnfullfilledRequirementsException If the isn't capable of processing the provided messagefor well recognized reasons (Like the API version of the response being above that currently understood) 
 * @throws XmlPullParserException
 */
public String processResponse(SimpleHttpTransportMessage message) throws InvalidStructureException, IOException, UnfullfilledRequirementsException, XmlPullParserException {
  if (message.getResponseProperties() != null && ONE_OH.equals(message.getResponseProperties().getORApiVersion())) {
    byte[] response=message.getResponseBody();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(true);
    DataModelPullParser parser=new DataModelPullParser(new ByteArrayInputStream(response),factory);
    boolean success=parser.parse();
    if (factory.getResponseMessage() != null) {
      return factory.getResponseMessage();
    }
 else {
      return null;
    }
  }
  throw new UnfullfilledRequirementsException(""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_ENVIRONMENT);
}",0.9599719101123596
145027,"/** 
 * Whether the processor knows that it is capable of processing the response to the current message.
 * @param message A completed transport message with an available response.
 * @return true if the processor should be able to handle the response. false otherwise.
 */
public boolean handlesResponse(SimpleHttpTransportMessage message){
  if (message.getResponseProperties() != null && message.getResponseProperties().getORApiVersion().equals(ONE_OH)) {
    return true;
  }
  return false;
}","/** 
 * Whether the processor knows that it is capable of processing the response to the current message.
 * @param message A completed transport message with an available response.
 * @return true if the processor should be able to handle the response. false otherwise.
 */
public boolean handlesResponse(SimpleHttpTransportMessage message){
  if (message.getResponseProperties() != null && ONE_OH.equals(message.getResponseProperties().getORApiVersion())) {
    return true;
  }
  return false;
}",0.8855421686746988
145028,"private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      pivots.addElement(new CmpPivot(((Double)b).doubleValue(),op));
      return true;
    }
  }
  return false;
}","private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      Double val=null;
      if (b instanceof Double) {
        val=(Double)b;
      }
 else {
        if (b instanceof Integer) {
          val=new Double(((Integer)b).doubleValue());
        }
        if (b instanceof Long) {
          val=new Double(((Long)b).doubleValue());
        }
        if (b instanceof Float) {
          val=new Double(((Float)b).doubleValue());
        }
        if (b instanceof Short) {
          val=new Double(((Short)b).shortValue());
        }
        if (b instanceof Byte) {
          val=new Double(((Byte)b).byteValue());
        }
 else {
          throw new UnpivotableExpressionException(""String_Node_Str"" + b);
        }
      }
      pivots.addElement(new CmpPivot(val.doubleValue(),op));
      return true;
    }
  }
  return false;
}",0.550098231827112
145029,"public void loggedIn(User u,String password){
  CommCareContext._().setUser(u,password == null ? null : new DefaultHttpCredentialProvider(u.getUsername(),password));
  Logger.log(""String_Node_Str"",PropertyUtils.trim(u.getUniqueId(),8) + ""String_Node_Str"" + u.getUsername());
  CommCareContext._().toggleDemoMode(User.DEMO_USER.equals(u.getUserType()));
  J2MEDisplay.startStateWithLoadingScreen(new DeviceReportState(){
    public String getDestURL(){
      String url=PropertyManager._().getSingularProperty(LogPropertyRules.LOG_SUBMIT_URL);
      if (url == null) {
        url=CommCareContext._().getSubmitURL();
      }
      return url;
    }
    public void done(){
      J2MEDisplay.startStateWithLoadingScreen(new PeriodicWrapperState(CommCareContext._().getEventDescriptors()){
        public void done(){
          J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
        }
      }
);
    }
  }
);
}","public void loggedIn(User u,String password){
  CommCareContext._().setUser(u,password == null ? null : new DefaultHttpCredentialProvider(u.getUsername(),password));
  Logger.log(""String_Node_Str"",PropertyUtils.trim(u.getUniqueId(),8) + ""String_Node_Str"" + u.getUsername());
  CommCareContext._().toggleDemoMode(User.DEMO_USER.equals(u.getUserType()));
  CommCareUtil.launchHomeWithSchedulers();
}",0.5532879818594104
145030,"public static void launchFirstState(){
  if (!CommCareContext._().getManager().getCurrentProfile().isFeatureActive(""String_Node_Str"")) {
    CommCareUtil.launchHomeState();
    return;
  }
  if (CommCareProperties.FIRST_RUN_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.IS_FIRST_RUN))) {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareFirstStartState());
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareLoginState());
  }
}","public static void launchFirstState(){
  if (!CommCareContext._().getManager().getCurrentProfile().isFeatureActive(""String_Node_Str"")) {
    CommCareUtil.launchHomeWithSchedulers();
    return;
  }
  if (CommCareProperties.FIRST_RUN_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.IS_FIRST_RUN))) {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareFirstStartState());
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareLoginState());
  }
}",0.980228928199792
145031,"public void requestConstraintHint(ConstraintHint hint) throws UnpivotableExpressionException {
  hint.init(new EvaluationContext(new EvaluationContext(),mTreeElement.getRef()),mTreeElement.getConstraint().constraint,this.form.getInstance());
}","public void requestConstraintHint(ConstraintHint hint) throws UnpivotableExpressionException {
  Constraint c=mTreeElement.getConstraint();
  if (c != null) {
    hint.init(new EvaluationContext(new EvaluationContext(),mTreeElement.getRef()),c.constraint,this.form.getInstance());
  }
 else {
    throw new UnpivotableExpressionException();
  }
}",0.6587436332767402
145032,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  return eval(model,evalContext);
}","/** 
 * Pivot this expression, returning values if appropriate, and adding any pivots to the list. 
 * @param model The model to evaluate the current expression against
 * @param evalContext The evaluation context to evaluate against
 * @param pivots The list of pivot points in the xpath being evaluated. Pivots should be added to this list.
 * @param sentinal The value which is being pivoted around.
 * @return null - If a pivot was identified in this expression sentinal - If the current expression represents the sentinal being pivoted any other value - The result of the expression if no pivots are detected
 * @throws UnpivotableExpressionException If the expression is too complex to pivot
 */
public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  return eval(model,evalContext);
}",0.3426966292134831
145033,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return (!isNull(argVals[0]) ? argVals[0] : argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return (!isNull(argVals[0]) ? argVals[0] : argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.9891005398798004
145034,"protected Item getEntryWidget(FormEntryPrompt prompt){
  return wec.wrapEntryWidget(textField);
}","protected Item getEntryWidget(FormEntryPrompt prompt){
  try {
    StringLengthRangeHint hint=new StringLengthRangeHint();
    prompt.requestConstraintHint(hint);
    StringData maxexample=hint.getMax();
    if (maxexample.getValue() != null) {
      textField.setMaxSize(((String)maxexample.getValue()).length());
    }
  }
 catch (  UnpivotableExpressionException e) {
  }
  return wec.wrapEntryWidget(textField);
}",0.377431906614786
145035,"public void _commandAction(Command c,Displayable d){
  if (c.equals(CommCareOTACredentialEntry.DOWNLOAD)) {
    if (userExists(entry.getUsername())) {
      entry.sendMessage(Localization.get(""String_Node_Str""));
      return;
    }
    tryDownload(getClientMessage());
  }
 else   if (d == entry && c.equals(CommCareOTACredentialEntry.CANCEL)) {
    transitions.cancel();
  }
 else   if (c.equals(view.FINISHED)) {
    transitions.done(errorsOccurred);
  }
}","public void _commandAction(Command c,Displayable d){
  if (c.equals(CommCareOTACredentialEntry.DOWNLOAD)) {
    if (userExists(entry.getUsername()) && !isSync) {
      entry.sendMessage(Localization.get(""String_Node_Str""));
      return;
    }
    tryDownload(getClientMessage());
  }
 else   if (d == entry && c.equals(CommCareOTACredentialEntry.CANCEL)) {
    transitions.cancel();
  }
 else   if (c.equals(view.FINISHED)) {
    transitions.done(errorsOccurred);
  }
}",0.9881593110871906
145036,"public CommCareAddUserState(){
  super(PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),CommCareContext._().getPreloaders(),CommCareContext._().getFuncHandlers());
}","public CommCareAddUserState(){
  super(PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),filterPreloaders(CommCareContext._().getPreloaders()),CommCareContext._().getFuncHandlers());
}",0.9558823529411764
145037,"public CommCareEditUserState(User u){
  super(u,PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),CommCareContext._().getPreloaders(),CommCareContext._().getFuncHandlers());
}","public CommCareEditUserState(User u){
  super(u,PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),CommCareAddUserState.filterPreloaders(CommCareContext._().getPreloaders()),CommCareContext._().getFuncHandlers());
}",0.912751677852349
145038,"public void done(boolean errorsOccurred){
  done();
}",public abstract void done();,0.4691358024691358
145039,"public void createView(){
  if (prompt.isRequired()) {
    cg=new ChoiceGroup(""String_Node_Str"" + prompt.getLongText(),ChoiceGroup.MULTIPLE);
  }
 else {
    cg=new ChoiceGroup(prompt.getLongText(),ChoiceGroup.MULTIPLE);
  }
  Vector<SelectChoice> choices=prompt.getSelectChoices();
  Enumeration itr=choices.elements();
  int i=0;
  boolean[] selectedFlags=new boolean[choices.size()];
  IAnswerData data=this.prompt.getAnswerValue();
  Vector<Selection> selected=null;
  if (data != null) {
    selected=(Vector<Selection>)data;
  }
  while (itr.hasMoreElements()) {
    SelectChoice choice=(SelectChoice)itr.nextElement();
    selectedFlags[i]=false;
    if (selected != null) {
      for (      Selection s : selected) {
        if (s.xmlValue.equals(choice.selection().xmlValue)) {
          selectedFlags[i]=true;
        }
      }
    }
    String label=this.prompt.getSelectChoiceText(choice);
    cg.append(label,null);
    i++;
  }
  cg.setSelectedFlags(selectedFlags);
  this.append(cg);
  this.addNavigationWidgets();
  if (prompt.getHelpText() != null) {
    setHint(prompt.getHelpText());
  }
}","public void createView(){
  if (prompt.isRequired()) {
    cg=new ChoiceGroup(""String_Node_Str"" + prompt.getLongText(),ChoiceGroup.MULTIPLE);
  }
 else {
    cg=new ChoiceGroup(prompt.getLongText(),ChoiceGroup.MULTIPLE);
  }
  Vector<SelectChoice> choices=prompt.getSelectChoices();
  Enumeration itr=choices.elements();
  int i=0;
  boolean[] selectedFlags=new boolean[choices.size()];
  IAnswerData data=this.prompt.getAnswerValue();
  Vector<Selection> selected=null;
  if (data != null) {
    selected=(Vector<Selection>)new SelectMultiData().cast(data.uncast()).getValue();
  }
  while (itr.hasMoreElements()) {
    SelectChoice choice=(SelectChoice)itr.nextElement();
    selectedFlags[i]=false;
    if (selected != null) {
      for (      Selection s : selected) {
        if (s.xmlValue.equals(choice.selection().xmlValue)) {
          selectedFlags[i]=true;
        }
      }
    }
    String label=this.prompt.getSelectChoiceText(choice);
    cg.append(label,null);
    i++;
  }
  cg.setSelectedFlags(selectedFlags);
  this.append(cg);
  this.addNavigationWidgets();
  if (prompt.getHelpText() != null) {
    setHint(prompt.getHelpText());
  }
}",0.9752650176678446
145040,"public void createView(){
  if (prompt.isRequired()) {
    cg=new CustomChoiceGroup(""String_Node_Str"" + prompt.getLongText(),ChoiceGroup.EXCLUSIVE,true);
  }
 else {
    cg=new CustomChoiceGroup(prompt.getLongText(),ChoiceGroup.EXCLUSIVE,true);
  }
  Enumeration itr=(prompt.getSelectChoices().elements());
  int preselectionIndex=-1;
  String presetAnswerLabel=prompt.getAnswerValue() != null ? prompt.getAnswerValue().getDisplayText() : null;
  int count=0;
  while (itr.hasMoreElements()) {
    SelectChoice choice=(SelectChoice)itr.nextElement();
    if ((presetAnswerLabel != null) && (choice.getValue().equals(presetAnswerLabel))) {
      preselectionIndex=count;
    }
    cg.append(prompt.getSelectChoiceText(choice),null);
    count++;
  }
  this.append(cg);
  if ((preselectionIndex > -1) && (preselectionIndex < cg.size())) {
    cg.setSelectedIndex(preselectionIndex,true);
  }
  this.addNavigationWidgets();
  if (prompt.getHelpText() != null) {
    setHint(prompt.getHelpText());
  }
  cg.setItemStateListener(this);
}","public void createView(){
  if (prompt.isRequired()) {
    cg=new CustomChoiceGroup(""String_Node_Str"" + prompt.getLongText(),ChoiceGroup.EXCLUSIVE,true);
  }
 else {
    cg=new CustomChoiceGroup(prompt.getLongText(),ChoiceGroup.EXCLUSIVE,true);
  }
  Enumeration itr=(prompt.getSelectChoices().elements());
  int preselectionIndex=-1;
  String xmlValue=null;
  if (prompt.getAnswerValue() != null) {
    xmlValue=((Selection)new SelectOneData().cast(prompt.getAnswerValue().uncast()).getValue()).xmlValue;
  }
  int count=0;
  while (itr.hasMoreElements()) {
    SelectChoice choice=(SelectChoice)itr.nextElement();
    if ((xmlValue != null) && (choice.getValue().equals(xmlValue))) {
      preselectionIndex=count;
    }
    cg.append(prompt.getSelectChoiceText(choice),null);
    count++;
  }
  this.append(cg);
  if ((preselectionIndex > -1) && (preselectionIndex < cg.size())) {
    cg.setSelectedIndex(preselectionIndex,true);
  }
  this.addNavigationWidgets();
  if (prompt.getHelpText() != null) {
    setHint(prompt.getHelpText());
  }
  cg.setItemStateListener(this);
}",0.8630980577925154
145041,"public void registerModule(){
  PropertyManager._().addRules(new FormManagerProperties());
  PropertyUtils.initializeProperty(FormManagerProperties.VIEW_TYPE_PROPERTY,FormManagerProperties.VIEW_CHATTERBOX);
  PropertyUtils.initializeProperty(FormManagerProperties.EXTRA_KEY_FORMAT,FormManagerProperties.EXTRA_KEY_LANGUAGE_CYCLE);
}","public void registerModule(){
  PropertyManager._().addRules(new FormManagerProperties());
}",0.4349881796690307
145042,"public CommCareOTARestoreState(boolean isSync,HttpAuthenticator authenticator){
  this.isSync=isSync;
  this.authenticator=authenticator;
  this.noPartial=getPartialRestoreSetting();
  controller=getController();
}","public CommCareOTARestoreState(boolean isSync,HttpAuthenticator authenticator){
  this.isSync=isSync;
  this.authenticator=authenticator;
  this.partial=getPartialRestoreSetting();
  controller=getController();
}",0.9906103286384976
145043,"protected CommCareOTARestoreController getController(){
  return new CommCareOTARestoreController(this,CommCareContext._().getOTAURL(),authenticator,isSync,noPartial);
}","protected CommCareOTARestoreController getController(){
  return new CommCareOTARestoreController(this,CommCareContext._().getOTAURL(),authenticator,isSync,!partial);
}",0.9851632047477744
145044,"public TransactionParser getParser(String name,String namespace,KXmlParser parser){
  if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new CaseXmlParser(parser,caseTallies);
  }
 else   if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new UserXmlParser(parser);
  }
 else   if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return new TransactionParser<String>(parser,""String_Node_Str"",null){
      public void commit(      String parsed) throws IOException {
      }
      public String parse() throws XmlPullParserException, IOException {
        String restoreID=parser.nextText().trim();
        restoreIDWrapper[0]=restoreID;
        return restoreID;
      }
    }
;
  }
  return null;
}","public TransactionParser getParser(String name,String namespace,KXmlParser parser){
  if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new CaseXmlParser(parser,caseTallies,!noPartial);
  }
 else   if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new UserXmlParser(parser);
  }
 else   if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return new TransactionParser<String>(parser,""String_Node_Str"",null){
      public void commit(      String parsed) throws IOException {
      }
      public String parse() throws XmlPullParserException, IOException {
        String restoreID=parser.nextText().trim();
        restoreIDWrapper[0]=restoreID;
        return restoreID;
      }
    }
;
  }
  return null;
}",0.9924502402196294
145045,"public boolean startRestore(InputStream input){
  J2MEDisplay.setView(view);
  view.addToMessage(Localization.get(""String_Node_Str""));
  final String[] restoreIDWrapper={null};
  errorsOccurred=false;
  boolean success=false;
  String restoreID=null;
  String[] parseErrors=new String[0];
  try {
    beginTransaction();
    DataModelPullParser parser=new DataModelPullParser(input,new TransactionParserFactory(){
      public TransactionParser getParser(      String name,      String namespace,      KXmlParser parser){
        if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new CaseXmlParser(parser,caseTallies);
        }
 else         if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new UserXmlParser(parser);
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          return new TransactionParser<String>(parser,""String_Node_Str"",null){
            public void commit(            String parsed) throws IOException {
            }
            public String parse() throws XmlPullParserException, IOException {
              String restoreID=parser.nextText().trim();
              restoreIDWrapper[0]=restoreID;
              return restoreID;
            }
          }
;
        }
        return null;
      }
    }
);
    success=parser.parse();
    restoreID=restoreIDWrapper[0];
    if (success) {
      PropertyManager._().setProperty(CommCareProperties.LAST_SUCCESSFUL_SYNC,restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  InvalidStructureException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  XmlPullParserException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  RuntimeException e) {
    success=false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    view.addToMessage(Localization.get(""String_Node_Str""));
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      view.addToMessage(Localization.get(""String_Node_Str"") + ""String_Node_Str"" + parseErrors.length);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  done();
  return success || !noPartial;
}","public boolean startRestore(InputStream input){
  J2MEDisplay.setView(view);
  view.addToMessage(Localization.get(""String_Node_Str""));
  final String[] restoreIDWrapper={null};
  errorsOccurred=false;
  boolean success=false;
  String restoreID=null;
  String[] parseErrors=new String[0];
  try {
    beginTransaction();
    DataModelPullParser parser=new DataModelPullParser(input,new TransactionParserFactory(){
      public TransactionParser getParser(      String name,      String namespace,      KXmlParser parser){
        if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new CaseXmlParser(parser,caseTallies,!noPartial);
        }
 else         if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new UserXmlParser(parser);
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          return new TransactionParser<String>(parser,""String_Node_Str"",null){
            public void commit(            String parsed) throws IOException {
            }
            public String parse() throws XmlPullParserException, IOException {
              String restoreID=parser.nextText().trim();
              restoreIDWrapper[0]=restoreID;
              return restoreID;
            }
          }
;
        }
        return null;
      }
    }
);
    success=parser.parse();
    restoreID=restoreIDWrapper[0];
    if (success) {
      PropertyManager._().setProperty(CommCareProperties.LAST_SUCCESSFUL_SYNC,restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  InvalidStructureException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  XmlPullParserException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  RuntimeException e) {
    success=false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    view.addToMessage(Localization.get(""String_Node_Str""));
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      view.addToMessage(Localization.get(""String_Node_Str"") + ""String_Node_Str"" + parseErrors.length);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  done();
  return success || !noPartial;
}",0.9981742738589212
145046,"protected void setProperties(){
  PropertyManager._().addRules(new JavaRosaPropertyRules());
  PropertyManager._().addRules(new CommCareProperties());
  PropertyManager._().addRules(new FormManagerProperties());
  PropertyUtils.initializeProperty(""String_Node_Str"",PropertyUtils.genGUID(25));
  PropertyUtils.initializeProperty(CommCareProperties.IS_FIRST_RUN,CommCareProperties.FIRST_RUN_YES);
  PropertyUtils.initializeProperty(FormManagerProperties.EXTRA_KEY_FORMAT,FormManagerProperties.EXTRA_KEY_LANGUAGE_CYCLE);
  PropertyUtils.initializeProperty(CommCareProperties.ENTRY_MODE,CommCareProperties.ENTRY_MODE_QUICK);
  PropertyManager._().setProperty(CommCareProperties.COMMCARE_VERSION,CommCareUtil.getVersion());
  PropertyUtils.initializeProperty(CommCareProperties.DEPLOYMENT_MODE,CommCareProperties.DEPLOY_DEFAULT);
}","protected void setProperties(){
  PropertyManager._().addRules(new JavaRosaPropertyRules());
  PropertyManager._().addRules(new CommCareProperties());
  PropertyManager._().addRules(new FormManagerProperties());
  PropertyUtils.initializeProperty(""String_Node_Str"",PropertyUtils.genGUID(25));
  PropertyUtils.initializeProperty(CommCareProperties.IS_FIRST_RUN,CommCareProperties.FIRST_RUN_YES);
  PropertyManager._().setProperty(CommCareProperties.COMMCARE_VERSION,CommCareUtil.getVersion());
  PropertyUtils.initializeProperty(CommCareProperties.DEPLOYMENT_MODE,CommCareProperties.DEPLOY_DEFAULT);
}",0.8415147265077139
145047,"private void postProfilePropertyInit(){
  PropertyUtils.initializeProperty(CommCareProperties.SEND_STYLE,CommCareProperties.SEND_STYLE_HTTP);
  PropertyUtils.initializeProperty(CommCareProperties.OTA_RESTORE_OFFLINE,""String_Node_Str"");
  PropertyUtils.initializeProperty(CommCareProperties.RESTORE_TOLERANCE,CommCareProperties.REST_TOL_LOOSE);
  PropertyUtils.initializeProperty(CommCareProperties.DEMO_MODE,CommCareProperties.DEMO_ENABLED);
  PropertyUtils.initializeProperty(CommCareProperties.TETHER_MODE,CommCareProperties.TETHER_PUSH_ONLY);
}","private void postProfilePropertyInit(){
  PropertyUtils.initializeProperty(FormManagerProperties.EXTRA_KEY_FORMAT,FormManagerProperties.EXTRA_KEY_LANGUAGE_CYCLE);
  PropertyUtils.initializeProperty(CommCareProperties.ENTRY_MODE,CommCareProperties.ENTRY_MODE_QUICK);
  PropertyUtils.initializeProperty(CommCareProperties.SEND_STYLE,CommCareProperties.SEND_STYLE_HTTP);
  PropertyUtils.initializeProperty(CommCareProperties.OTA_RESTORE_OFFLINE,""String_Node_Str"");
  PropertyUtils.initializeProperty(CommCareProperties.RESTORE_TOLERANCE,CommCareProperties.REST_TOL_LOOSE);
  PropertyUtils.initializeProperty(CommCareProperties.DEMO_MODE,CommCareProperties.DEMO_ENABLED);
  PropertyUtils.initializeProperty(CommCareProperties.TETHER_MODE,CommCareProperties.TETHER_PUSH_ONLY);
}",0.8287878787878787
145048,"public CaseXmlParser(KXmlParser parser,int[] tallies){
  super(parser,""String_Node_Str"",null);
  this.tallies=tallies;
}","public CaseXmlParser(KXmlParser parser,int[] tallies,boolean acceptCreateOverwrites){
  super(parser,""String_Node_Str"",null);
  this.tallies=tallies;
  this.acceptCreateOverwrites=acceptCreateOverwrites;
}",0.7384615384615385
145049,"public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String caseId=parser.nextText().trim();
  this.nextTag(""String_Node_Str"");
  String dateModified=parser.nextText().trim();
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[4];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[3]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      for (      String s : data) {
        if (s == null) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
        }
      }
      Case c=new Case(data[3],data[0]);
      c.setUserId(data[2]);
      c.setExternalId(data[1]);
      c.setCaseId(caseId);
      commit(c);
      create=true;
      Logger.log(""String_Node_Str"",c.getID() + ""String_Node_Str"" + PropertyUtils.trim(c.getCaseId(),12)+ ""String_Node_Str""+ c.getTypeId());
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        c.setProperty(key,value);
      }
      commit(c);
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      c.setClosed(true);
      commit(c);
      Logger.log(""String_Node_Str"",PropertyUtils.trim(c.getCaseId(),12));
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      new ReferralXmlParser(parser,caseId,modified).parse();
    }
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}","public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String caseId=parser.nextText().trim();
  this.nextTag(""String_Node_Str"");
  String dateModified=parser.nextText().trim();
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[4];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[3]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      for (      String s : data) {
        if (s == null) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
        }
      }
      Case c=null;
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        c=retrieve(caseId);
        if (c != null) {
          c.setName(data[3]);
          c.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (c == null) {
        c=new Case(data[3],data[0]);
        c.setCaseId(caseId);
      }
      c.setUserId(data[2]);
      c.setExternalId(data[1]);
      commit(c);
      if (!overriden) {
        create=true;
      }
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
      Logger.log(succesfulAction,c.getID() + ""String_Node_Str"" + PropertyUtils.trim(c.getCaseId(),12)+ ""String_Node_Str""+ c.getTypeId());
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        c.setProperty(key,value);
      }
      commit(c);
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      c.setClosed(true);
      commit(c);
      Logger.log(""String_Node_Str"",PropertyUtils.trim(c.getCaseId(),12));
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      new ReferralXmlParser(parser,caseId,modified,acceptCreateOverwrites).parse();
    }
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}",0.9108978752570254
145050,"public ReferralXmlParser(KXmlParser parser,String caseId,Date created){
  super(parser,""String_Node_Str"",null);
  this.caseId=caseId;
  this.created=created;
}","public ReferralXmlParser(KXmlParser parser,String caseId,Date created,boolean acceptCreateOverwrites){
  super(parser,""String_Node_Str"",null);
  this.caseId=caseId;
  this.created=created;
  this.acceptCreateOverwrites=acceptCreateOverwrites;
}",0.7890818858560794
145051,"public PatientReferral parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String refId=parser.nextText().trim();
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    Date followup=created;
    if (action.equals(""String_Node_Str"")) {
      String followupDate=parser.nextText();
      followup=DateUtils.parseDate(followupDate);
    }
    if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String referralTypes=parser.nextText();
      for (      Object s : DateUtils.split(referralTypes,""String_Node_Str"",true)) {
        PatientReferral pr=new PatientReferral((String)s,created,refId,caseId,followup);
        commit(pr);
        Logger.log(""String_Node_Str"",pr.getID() + ""String_Node_Str"" + PropertyUtils.trim(pr.getReferralId(),12)+ ""String_Node_Str""+ pr.getType());
      }
      if (this.nextTagInBlock(""String_Node_Str"")) {
        throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String refType=parser.nextText().trim();
      PatientReferral r=retrieve(refId,refType);
      if (r == null) {
        throw new InvalidStructureException(""String_Node_Str"" + refId,parser);
      }
      r.setDateDue(followup);
      if (this.nextTagInBlock(""String_Node_Str"")) {
        String dateClosed=parser.nextText();
        r.close();
        commit(r);
        Logger.log(""String_Node_Str"",PropertyUtils.trim(r.getReferralId(),12) + ""String_Node_Str"" + r.getType());
        if (this.nextTagInBlock(""String_Node_Str"")) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
    }
  }
  return null;
}","public PatientReferral parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String refId=parser.nextText().trim();
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    Date followup=created;
    if (action.equals(""String_Node_Str"")) {
      String followupDate=parser.nextText();
      followup=DateUtils.parseDate(followupDate);
    }
    if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String referralTypes=parser.nextText();
      for (      Object s : DateUtils.split(referralTypes,""String_Node_Str"",true)) {
        PatientReferral pr=new PatientReferral((String)s,created,refId,caseId,followup);
        boolean overriden=false;
        if (acceptCreateOverwrites) {
          PatientReferral old=retrieve(refId,(String)s);
          if (old != null) {
            pr.setID(old.getID());
            overriden=true;
          }
        }
        commit(pr);
        String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
        Logger.log(succesfulAction,pr.getID() + ""String_Node_Str"" + PropertyUtils.trim(pr.getReferralId(),12)+ ""String_Node_Str""+ pr.getType());
      }
      if (this.nextTagInBlock(""String_Node_Str"")) {
        throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String refType=parser.nextText().trim();
      PatientReferral r=retrieve(refId,refType);
      if (r == null) {
        throw new InvalidStructureException(""String_Node_Str"" + refId,parser);
      }
      r.setDateDue(followup);
      if (this.nextTagInBlock(""String_Node_Str"")) {
        String dateClosed=parser.nextText();
        r.close();
        commit(r);
        Logger.log(""String_Node_Str"",PropertyUtils.trim(r.getReferralId(),12) + ""String_Node_Str"" + r.getType());
        if (this.nextTagInBlock(""String_Node_Str"")) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
    }
  }
  return null;
}",0.916822429906542
145052,"/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}","/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (sel.index == -1) {
    sel.attachChoice(this.getQuestion());
  }
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}",0.9614340032590984
145053,"/** 
 * Attempts to return the specified Item (from a select or 1select) text. Will check for text in the following order:<br/> Localized Text (long form) -> Localized Text (no special form) <br /> If no textID is available, method will return this item's labelInnerText.
 * @param sel the selection (item), if <code>null</code> will throw a IllegalArgumentException
 * @return Question Text.  <code>null</code> if no text for this element exists (after all fallbacks).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if Selection is <code>null</code>
 */
public String getSelectItemText(Selection sel){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String tid=sel.choice.getTextID();
  if (tid == null || tid == ""String_Node_Str"")   return substituteStringArgs(sel.choice.getLabelInnerText());
  String returnText;
  returnText=getIText(tid,""String_Node_Str"");
  if (returnText == null)   returnText=getIText(tid,null);
  return substituteStringArgs(returnText);
}","/** 
 * Attempts to return the specified Item (from a select or 1select) text. Will check for text in the following order:<br/> Localized Text (long form) -> Localized Text (no special form) <br /> If no textID is available, method will return this item's labelInnerText.
 * @param sel the selection (item), if <code>null</code> will throw a IllegalArgumentException
 * @return Question Text.  <code>null</code> if no text for this element exists (after all fallbacks).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if Selection is <code>null</code>
 */
public String getSelectItemText(Selection sel){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (sel.index == -1) {
    sel.attachChoice(this.getQuestion());
  }
  String tid=sel.choice.getTextID();
  if (tid == null || tid == ""String_Node_Str"")   return substituteStringArgs(sel.choice.getLabelInnerText());
  String returnText;
  returnText=getIText(tid,""String_Node_Str"");
  if (returnText == null)   returnText=getIText(tid,null);
  return substituteStringArgs(returnText);
}",0.970721649484536
145054,"public int getContentLength(){
  return getContent().length;
}","public int getContentLength(){
  if (this.getContent() != null) {
    return getContent().length;
  }
 else {
    return -1;
  }
}",0.6458333333333334
145055,"public void send(){
  HttpConnection conn=null;
  DataInputStream is=null;
  OutputStream os=null;
  try {
    System.out.println(""String_Node_Str"" + this);
    conn=getConnection(this.getConnectionMethod());
    System.out.println(""String_Node_Str"" + conn);
    os=conn.openOutputStream();
    byte[] o=(byte[])this.getContent();
    System.out.println(""String_Node_Str"" + new String(o));
    StreamsUtil.writeToOutput(o,os);
    os.close();
    is=(DataInputStream)conn.openDataInputStream();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    StreamsUtil.writeFromInputToOutput(is,baos);
    is.close();
    int responseCode=conn.getResponseCode();
    System.out.println(""String_Node_Str"" + responseCode);
    this.setResponseBody(baos.toByteArray());
    this.setResponseCode(responseCode);
    if (responseCode >= 200 && responseCode <= 299) {
      this.setStatus(TransportMessageStatus.SENT);
    }
 else {
      Logger.log(""String_Node_Str"",this.getTag() + ""String_Node_Str"" + responseCode);
    }
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + e.getClass() + ""String_Node_Str""+ e.getMessage());
    this.setFailureReason(WrappedException.printException(e));
    this.incrementFailureCount();
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
    if (conn != null)     try {
      conn.close();
    }
 catch (    IOException e) {
    }
  }
}","public void send(){
  HttpConnection conn=null;
  DataInputStream is=null;
  OutputStream os=null;
  try {
    System.out.println(""String_Node_Str"" + this);
    conn=getConnection(this.getConnectionMethod());
    System.out.println(""String_Node_Str"" + conn);
    os=conn.openOutputStream();
    byte[] o=(byte[])this.getContent();
    if (o != null) {
      System.out.println(""String_Node_Str"" + new String(o));
      StreamsUtil.writeToOutput(o,os);
    }
 else {
      System.out.println(""String_Node_Str"");
    }
    os.close();
    is=(DataInputStream)conn.openDataInputStream();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    StreamsUtil.writeFromInputToOutput(is,baos);
    is.close();
    int responseCode=conn.getResponseCode();
    System.out.println(""String_Node_Str"" + responseCode);
    this.setResponseBody(baos.toByteArray());
    this.setResponseCode(responseCode);
    if (responseCode >= 200 && responseCode <= 299) {
      this.setStatus(TransportMessageStatus.SENT);
    }
 else {
      Logger.log(""String_Node_Str"",this.getTag() + ""String_Node_Str"" + responseCode);
    }
    conn.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + e.getClass() + ""String_Node_Str""+ e.getMessage());
    this.setFailureReason(WrappedException.printException(e));
    this.incrementFailureCount();
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
    if (conn != null)     try {
      conn.close();
    }
 catch (    IOException e) {
    }
  }
}",0.972809667673716
145056,"public void fetchList(){
  SimpleHttpTransportMessage message=new SimpleHttpTransportMessage(getListUrl + credentials);
  try {
    thread=TransportService.send(message,1,0);
    thread.addListener(this);
  }
 catch (  TransportException e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","public void fetchList(){
  SimpleHttpTransportMessage message=new SimpleHttpTransportMessage(getListUrl);
  try {
    thread=TransportService.send(message,1,0);
    thread.addListener(this);
  }
 catch (  TransportException e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}",0.975609756097561
145057,"public boolean markSupported(){
  return is.markSupported();
}","public boolean markSupported(){
  System.err.println(""String_Node_Str"");
  return is.markSupported();
}",0.7515151515151515
145058,"public int available() throws IOException {
  return is.available();
}","public int available() throws IOException {
  System.err.println(""String_Node_Str"");
  return is.available();
}",0.7734806629834254
145059,"public int read(byte[] b,int off,int len) throws IOException {
  try {
    int k=is.read(b,off,len);
    read+=k;
    return k;
  }
 catch (  IOException ioe) {
    log(true);
    throw ioe;
  }
}","public int read(byte[] b,int off,int len) throws IOException {
  try {
    int k=is.read(b,off,len);
    read+=Math.max(k,0);
    return k;
  }
 catch (  IOException ioe) {
    log(true);
    throw ioe;
  }
}",0.9702970297029704
145060,"public void reset() throws IOException {
  is.reset();
}","public void reset() throws IOException {
  System.err.println(""String_Node_Str"");
  is.reset();
}",0.7320261437908496
145061,"public void mark(int rl){
  is.mark(rl);
}","public void mark(int rl){
  System.err.println(""String_Node_Str"");
  is.mark(rl);
}",0.672
145062,"public void setHttpConnectionMethod(String method){
  if (HttpConnection.GET.equals(method)) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void setHttpConnectionMethod(String method){
  if (HttpConnection.GET.equals(method)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  super.setHttpConnectionMethod(method);
}",0.880466472303207
145063,"public void setCacheable(boolean cacheable){
  if (cacheable) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void setCacheable(boolean cacheable){
  if (cacheable) {
    throw new RuntimeException(""String_Node_Str"");
  }
  super.setCacheable(cacheable);
}",0.8791208791208791
145064,"public void start(){
  if (reportFormat == LogReportUtils.REPORT_FORMAT_SKIP) {
    if (Logger.isLoggingEnabled()) {
      determineLogFallback(LOG_ROLLOVER_SIZE);
    }
    done();
    return;
  }
  try {
    TransportMessage message=new StreamingHTTPMessage(getDestURL()){
      public void writeBody(      OutputStream os) throws IOException {
        KXmlSerializer serializer=new KXmlSerializer();
        serializer.setOutput(os,""String_Node_Str"");
        createReport(serializer);
      }
    }
;
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    SenderThread s=TransportService.send(message);
    if (message.isCacheable()) {
      onSuccess();
    }
    s.addListener(this);
  }
 catch (  Exception e) {
    e.printStackTrace();
    dumpLogFallback();
  }
  done();
}","public void start(){
  if (reportFormat == LogReportUtils.REPORT_FORMAT_SKIP) {
    if (Logger.isLoggingEnabled()) {
      determineLogFallback(LOG_ROLLOVER_SIZE);
    }
    done();
    return;
  }
  try {
    TransportMessage message=new StreamingHTTPMessage(getDestURL()){
      public void writeBody(      OutputStream os) throws IOException {
        KXmlSerializer serializer=new KXmlSerializer();
        serializer.setOutput(os,""String_Node_Str"");
        createReport(serializer);
      }
    }
;
    Logger.log(""String_Node_Str"",""String_Node_Str"");
    SenderThread s=TransportService.send(message);
    if (message.isCacheable()) {
      onSuccess();
    }
    s.addListener(this);
  }
 catch (  Exception e) {
    e.printStackTrace();
    dumpLogFallback();
    Logger.exception(""String_Node_Str"",e);
  }
  done();
}",0.973308504034761
145065,"/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    return (Triggerable)triggerables.elementAt(existingIx);
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int i=0; i < targets.size(); i++) {
        TreeReference target=(TreeReference)targets.elementAt(i);
        if (instance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
    return t;
  }
}","/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    return (Triggerable)triggerables.elementAt(existingIx);
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}",0.8155759870200108
145066,"public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector triggered=(Vector)triggerIndex.get(target);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!deps.contains(u))             deps.addElement(u);
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
}","public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector triggered=(Vector)triggerIndex.get(target);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!deps.contains(u))             deps.addElement(u);
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
  conditionRepeatTargetIndex=new Hashtable();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int j=0; j < targets.size(); j++) {
        TreeReference target=(TreeReference)targets.elementAt(j);
        if (instance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
  }
}",0.8854888835763806
145067,"/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  conditionRepeatTargetIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext());
  outputFragments=new Vector();
}","/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext());
  outputFragments=new Vector();
}",0.9098039215686274
145068,"private static void parseInstance(FormDef f,Element e){
  TreeElement root=buildInstanceStructure(e,null);
  FormInstance instanceModel=new FormInstance(root);
  instanceModel.setName(f.getTitle());
  Vector usedAtts=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  String schema=e.getNamespace();
  if (schema != null && schema.length() > 0 && !schema.equals(defaultNamespace)) {
    instanceModel.schema=schema;
  }
  instanceModel.formVersion=e.getAttributeValue(null,""String_Node_Str"");
  instanceModel.uiVersion=e.getAttributeValue(null,""String_Node_Str"");
  loadNamespaces(e,instanceModel);
  processRepeats(instanceModel);
  verifyBindings(f,instanceModel);
  applyInstanceProperties(instanceModel);
  loadInstanceData(e,root,f);
  checkDependencyCycles(f);
  f.finalizeTriggerables();
  f.setInstance(instanceModel);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}","private static void parseInstance(FormDef f,Element e){
  TreeElement root=buildInstanceStructure(e,null);
  FormInstance instanceModel=new FormInstance(root);
  instanceModel.setName(f.getTitle());
  Vector usedAtts=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  String schema=e.getNamespace();
  if (schema != null && schema.length() > 0 && !schema.equals(defaultNamespace)) {
    instanceModel.schema=schema;
  }
  instanceModel.formVersion=e.getAttributeValue(null,""String_Node_Str"");
  instanceModel.uiVersion=e.getAttributeValue(null,""String_Node_Str"");
  loadNamespaces(e,instanceModel);
  processRepeats(instanceModel);
  verifyBindings(f,instanceModel);
  applyInstanceProperties(instanceModel);
  loadInstanceData(e,root,f);
  checkDependencyCycles(f);
  f.setInstance(instanceModel);
  f.finalizeTriggerables();
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}",0.9681592039800996
145069,"public void start(){
  view=new CommCareSuiteView(m.getName().evaluate());
  view.setCommandListener(this);
  configView();
  J2MEDisplay.setView(view);
}","public void start(){
  view=new CommCareSuiteView(m.getName().evaluate());
  view.setCommandListener(this);
  J2MEDisplay.setView(view);
}",0.9452054794520548
145070,"public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 0;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}","public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}",0.9450441609421
145071,"public int getMinorVersion(){
  return 0;
}","public int getMinorVersion(){
  return 1;
}",0.9767441860465116
145072,"/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 * @param index
 * @return
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=instance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=instance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  triggerTriggerables(parentRef);
  return newIndex;
}","/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 * @param index
 * @return
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=instance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=instance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  triggerTriggerables(deleteRef);
  return newIndex;
}",0.9957356076759062
145073,"public FormIndex descendIntoRepeat(FormIndex index,int repIndex){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  if (!index.isInForm()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  collapseIndex(index,indexes,multiplicities,elements);
  if (!(elements.lastElement() instanceof GroupDef) || !((GroupDef)elements.lastElement()).getRepeat()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  String name=node.getName();
  int numRepetitions=node.getParent().getChildMultiplicity(name);
  if (repIndex < 0 || repIndex >= numRepetitions) {
    throw new RuntimeException(""String_Node_Str"");
  }
  multiplicities.setElementAt(new Integer(repIndex),multiplicities.size() - 1);
  return buildIndex(indexes,multiplicities,elements);
}","public FormIndex descendIntoRepeat(FormIndex index,int repIndex){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  if (!index.isInForm()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  collapseIndex(index,indexes,multiplicities,elements);
  if (!(elements.lastElement() instanceof GroupDef) || !((GroupDef)elements.lastElement()).getRepeat()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  int numRepetitions=0;
  if (node != null) {
    String name=node.getName();
    numRepetitions=node.getParent().getChildMultiplicity(name);
  }
  if (repIndex < 0 || repIndex >= numRepetitions) {
    throw new RuntimeException(""String_Node_Str"");
  }
  multiplicities.setElementAt(new Integer(repIndex),multiplicities.size() - 1);
  return buildIndex(indexes,multiplicities,elements);
}",0.969598262757872
145074,"public Vector<String> getAvailableRepetitions(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  String name=node.getName();
  int numRepetitions=node.getParent().getChildMultiplicity(name);
  Vector<String> reps=new Vector<String>();
  for (int i=0; i < numRepetitions; i++) {
    reps.addElement(""String_Node_Str"" + (i + 1));
  }
  return reps;
}","public Vector<String> getAvailableRepetitions(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  int numRepetitions=0;
  if (node != null) {
    String name=node.getName();
    numRepetitions=node.getParent().getChildMultiplicity(name);
  }
  Vector<String> reps=new Vector<String>();
  for (int i=0; i < numRepetitions; i++) {
    reps.addElement(""String_Node_Str"" + (i + 1));
  }
  return reps;
}",0.9526226734348562
145075,"private void jumpToQuestion(FormIndex questionIndex){
  System.out.println(this.questionIndexes.toString());
  boolean newRepeat=false;
  if (questionIndex.isInForm() && !model.isIndexRelevant(questionIndex))   throw new IllegalStateException();
  updatePins(questionIndex);
  IFormElement last=model.getForm().getChild(questionIndex);
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  model.getForm().collapseIndex(questionIndex,indexes,multiplicities,elements);
  int mult=((Integer)multiplicities.lastElement()).intValue();
  if (last instanceof GroupDef) {
    if (!FormIndex.EXPERIMENTAL_API && ((GroupDef)last).getRepeat() && model.getForm().getInstance().resolveReference(model.getForm().getChildInstanceRef(questionIndex)) == null) {
      if (((GroupDef)last).noAddRemove) {
        boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
        if (forwards) {
          step(controller.stepToNextEvent());
        }
 else {
          step(controller.stepToPreviousEvent());
        }
        return;
      }
 else {
        newRepeat=true;
      }
    }
 else     if (FormIndex.EXPERIMENTAL_API && ((GroupDef)last).getRepeat() && mult == TreeReference.INDEX_REPEAT_JUNCTURE) {
      System.out.println(""String_Node_Str"");
      newRepeat=true;
    }
 else {
      boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
      if (forwards) {
        createHeaderForElement(questionIndex,false);
        step(controller.stepToNextEvent());
      }
 else {
        removeHeaderForElement(questionIndex);
        step(controller.stepToPreviousEvent());
      }
      return;
    }
  }
 else   if (questionIndex.isInForm() && model.isIndexReadonly(questionIndex)) {
    boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
    if (forwards) {
      step(controller.stepToNextEvent());
    }
 else {
      step(controller.stepToPreviousEvent());
    }
    return;
  }
  if (questionIndex.compareTo(activeQuestionIndex) > 0) {
    if (activeQuestionIndex.isInForm()) {
      if (activeIsInterstitial) {
        removeFrame(activeQuestionIndex);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
      }
    }
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      index=model.getForm().incrementIndex(index);
      putQuestion(index,index.equals(questionIndex),newRepeat ? Q_REPEAT_JUNCTURE : Q_NORMAL);
    }
  }
 else   if (questionIndex.compareTo(activeQuestionIndex) <= 0) {
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      removeFrame(index);
      index=model.getForm().decrementIndex(index);
    }
    if (questionIndex.isInForm()) {
      if (newRepeat) {
        removeFrame(questionIndex);
        putQuestion(questionIndex,true,newRepeat ? (deleteInterstitial ? Q_REPEAT_DELETE : Q_REPEAT_JUNCTURE) : Q_NORMAL);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(questionIndex,true))).setViewState(ChatterboxWidget.VIEW_EXPANDED);
      }
    }
  }
  if (!questionIndex.equals(activeQuestionIndex)) {
    activeQuestionIndex=questionIndex;
    if (activeQuestionIndex.isInForm()) {
      int index=questionIndexes.indexOf(activeQuestionIndex,true);
      ChatterboxWidget widget=(ChatterboxWidget)get(index);
      widget.setPinned(true);
      widget.showCommands();
      int prevheight=this.container.getScrollHeight();
      this.container.setScrollHeight(-1);
      this.focus(widget,true);
      this.container.setScrollHeight(prevheight);
    }
    progressBar.setMaxValue(model.getNumQuestions());
    progressBar.setValue(questionIndexes.size());
  }
  if (this.questionIndexes.size() <= 1) {
    this.removeCommand(backCommand);
  }
 else {
    addBackCommand();
  }
  babysitStyles();
}","private void jumpToQuestion(FormIndex questionIndex){
  System.out.println(this.questionIndexes.toString());
  boolean newRepeat=false;
  if (questionIndex.isInForm() && !model.isIndexRelevant(questionIndex))   throw new IllegalStateException();
  updatePins(questionIndex);
  IFormElement last=model.getForm().getChild(questionIndex);
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  model.getForm().collapseIndex(questionIndex,indexes,multiplicities,elements);
  int mult=((Integer)multiplicities.lastElement()).intValue();
  if (last instanceof GroupDef) {
    if (!FormIndex.EXPERIMENTAL_API && ((GroupDef)last).getRepeat() && model.getForm().getInstance().resolveReference(model.getForm().getChildInstanceRef(questionIndex)) == null) {
      if (((GroupDef)last).noAddRemove) {
        boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
        if (forwards) {
          step(controller.stepToNextEvent());
        }
 else {
          step(controller.stepToPreviousEvent());
        }
        return;
      }
 else {
        newRepeat=true;
      }
    }
 else     if (FormIndex.EXPERIMENTAL_API && ((GroupDef)last).getRepeat() && mult == TreeReference.INDEX_REPEAT_JUNCTURE) {
      System.out.println(""String_Node_Str"");
      newRepeat=true;
    }
 else {
      boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
      if (forwards) {
        createHeaderForElement(questionIndex,false);
        step(controller.stepToNextEvent());
      }
 else {
        removeHeaderForElement(questionIndex);
        step(controller.stepToPreviousEvent());
      }
      return;
    }
  }
 else   if (questionIndex.isInForm() && model.isIndexReadonly(questionIndex)) {
    boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
    if (forwards) {
      step(controller.stepToNextEvent());
    }
 else {
      step(controller.stepToPreviousEvent());
    }
    return;
  }
  if (questionIndex.compareTo(activeQuestionIndex) > 0) {
    if (activeQuestionIndex.isInForm()) {
      if (activeIsInterstitial) {
        removeFrame(activeQuestionIndex);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
      }
    }
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      index=model.getForm().incrementIndex(index);
      putQuestion(index,index.equals(questionIndex),newRepeat ? Q_REPEAT_JUNCTURE : Q_NORMAL);
    }
  }
 else   if (questionIndex.compareTo(activeQuestionIndex) <= 0) {
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      removeFrame(index);
      index=model.getForm().decrementIndex(index);
    }
    if (questionIndex.isInForm()) {
      if (newRepeat) {
        removeFrame(questionIndex);
        putQuestion(questionIndex,true,newRepeat ? (deleteInterstitial ? Q_REPEAT_DELETE : Q_REPEAT_JUNCTURE) : Q_NORMAL);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(questionIndex,true))).setViewState(ChatterboxWidget.VIEW_EXPANDED);
      }
    }
  }
  if (!questionIndex.equals(activeQuestionIndex) || activeIsInterstitial) {
    activeQuestionIndex=questionIndex;
    if (activeQuestionIndex.isInForm()) {
      int index=questionIndexes.indexOf(activeQuestionIndex,true);
      ChatterboxWidget widget=(ChatterboxWidget)get(index);
      widget.setPinned(true);
      widget.showCommands();
      int prevheight=this.container.getScrollHeight();
      this.container.setScrollHeight(-1);
      this.focus(widget,true);
      this.container.setScrollHeight(prevheight);
    }
    progressBar.setMaxValue(model.getNumQuestions());
    progressBar.setValue(questionIndexes.size());
  }
  if (this.questionIndexes.size() <= 1) {
    this.removeCommand(backCommand);
  }
 else {
    addBackCommand();
  }
  babysitStyles();
}",0.9969285897107756
145076,"public void questionAnswered(){
  ChatterboxWidget frame=activeFrame();
  if (activeQuestionIndex != this.model.getFormIndex()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (activeIsInterstitial) {
    if (!FormIndex.EXPERIMENTAL_API) {
      String answer=((Selection)frame.getData().getValue()).getValue();
      if (answer.equals(""String_Node_Str"")) {
        controller.newRepeat(this.model.getFormIndex());
        createHeaderForElement(this.model.getFormIndex(),true);
      }
      step(controller.stepToNextEvent());
    }
 else {
      String answer=((Selection)frame.getData().getValue()).getValue();
      if (answer.startsWith(""String_Node_Str"")) {
        int n=Integer.parseInt(answer.substring(3));
        controller.jumpToIndex(model.getForm().descendIntoRepeat(activeQuestionIndex,n));
        removeFrame(this.activeQuestionIndex);
        this.activeQuestionIndex=this.model.getFormIndex();
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        controller.jumpToIndex(model.getForm().descendIntoRepeat(activeQuestionIndex,-1));
        controller.newRepeat(this.model.getFormIndex());
        removeFrame(this.activeQuestionIndex);
        this.activeQuestionIndex=this.model.getFormIndex();
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        deleteInterstitial=true;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.startsWith(""String_Node_Str"")) {
        int n=Integer.parseInt(answer.substring(3));
        controller.deleteRepeat(model.getForm().descendIntoRepeat(activeQuestionIndex,n));
        deleteInterstitial=false;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.equals(""String_Node_Str"")) {
      }
      step(controller.stepToNextEvent());
    }
  }
 else {
    int status=controller.answerQuestion(this.model.getFormIndex(),frame.getData());
    if (status == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION);
    }
 else     if (status == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
      String msg=frame.getPrompt().getConstraintText();
      this.queueError(null,msg != null ? msg : PROMPT_DEFAULT_CONSTRAINT_VIOL);
    }
 else {
      step(controller.stepToNextEvent());
    }
  }
}","public void questionAnswered(){
  ChatterboxWidget frame=activeFrame();
  if (activeQuestionIndex != this.model.getFormIndex()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (activeIsInterstitial) {
    if (frame.getData() == null) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION);
      return;
    }
    String answer=((Selection)frame.getData().getValue()).getValue();
    if (!FormIndex.EXPERIMENTAL_API) {
      if (answer.equals(""String_Node_Str"")) {
        controller.newRepeat(this.model.getFormIndex());
        createHeaderForElement(this.model.getFormIndex(),true);
      }
      step(controller.stepToNextEvent());
    }
 else {
      if (answer.startsWith(""String_Node_Str"")) {
        int n=Integer.parseInt(answer.substring(3));
        controller.jumpToIndex(model.getForm().descendIntoRepeat(activeQuestionIndex,n));
        removeFrame(this.activeQuestionIndex);
        this.activeQuestionIndex=this.model.getFormIndex();
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        controller.jumpToIndex(model.getForm().descendIntoRepeat(activeQuestionIndex,-1));
        controller.newRepeat(this.model.getFormIndex());
        removeFrame(this.activeQuestionIndex);
        this.activeQuestionIndex=this.model.getFormIndex();
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        deleteInterstitial=true;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.startsWith(""String_Node_Str"")) {
        int n=Integer.parseInt(answer.substring(3));
        controller.deleteRepeat(model.getForm().descendIntoRepeat(activeQuestionIndex,n));
        deleteInterstitial=false;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.equals(""String_Node_Str"")) {
      }
      step(controller.stepToNextEvent());
    }
  }
 else {
    int status=controller.answerQuestion(this.model.getFormIndex(),frame.getData());
    if (status == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION);
    }
 else     if (status == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
      String msg=frame.getPrompt().getConstraintText();
      this.queueError(null,msg != null ? msg : PROMPT_DEFAULT_CONSTRAINT_VIOL);
    }
 else {
      step(controller.stepToNextEvent());
    }
  }
}",0.2378926038500506
145077,"public int add(FormIndex index){
  int i=indexOf(index,false);
  if (i != -1 && get(i) == index) {
    return -1;
  }
 else {
    v.insertElementAt(index,i + 1);
    return i + 1;
  }
}","public int add(FormIndex index){
  int i=indexOf(index,false);
  if (i != -1 && get(i).equals(index)) {
    return -1;
  }
 else {
    v.insertElementAt(index,i + 1);
    return i + 1;
  }
}",0.9653333333333334
145078,"private void createHeaderForElement(FormIndex questionIndex){
  FormEntryCaption prompt=model.getCaptionPrompt(questionIndex);
  String headerText;
  if (prompt.getAvailableTextForms().contains(FormEntryCaption.TEXT_FORM_LONG)) {
    headerText=prompt.getLongText();
  }
 else   if (prompt.getAvailableTextForms().contains(FormEntryCaption.TEXT_FORM_SHORT)) {
    headerText=prompt.getShortText();
  }
 else {
    headerText=prompt.getDefaultText();
  }
  if (headerText != null) {
    ChatterboxWidget headerWidget=widgetFactory.getNewLabelWidget(questionIndex,headerText);
    this.append(headerWidget);
    this.questionIndexes.add(questionIndex);
    headerWidget.setPinned(true);
  }
}","private void createHeaderForElement(FormIndex questionIndex,boolean newRepeat){
  FormEntryCaption prompt=model.getCaptionPrompt(questionIndex);
  String headerText;
  if (prompt.getAvailableTextForms().contains(FormEntryCaption.TEXT_FORM_LONG)) {
    headerText=prompt.getLongText();
  }
 else   if (prompt.getAvailableTextForms().contains(FormEntryCaption.TEXT_FORM_SHORT)) {
    headerText=prompt.getShortText();
  }
 else {
    headerText=prompt.getDefaultText();
  }
  if (headerText != null) {
    if (newRepeat) {
      removeFrame(activeQuestionIndex);
    }
    ChatterboxWidget headerWidget=widgetFactory.getNewLabelWidget(questionIndex,headerText);
    this.append(headerWidget);
    this.questionIndexes.add(questionIndex);
    headerWidget.setPinned(true);
  }
}",0.9419795221843004
145079,"private void jumpToQuestion(FormIndex questionIndex){
  boolean newRepeat=false;
  if (questionIndex.isInForm() && !model.isIndexRelevant(questionIndex))   throw new IllegalStateException();
  updatePins(questionIndex);
  IFormElement last=model.getForm().getChild(questionIndex);
  if (last instanceof GroupDef) {
    if (((GroupDef)last).getRepeat() && model.getForm().getInstance().resolveReference(model.getForm().getChildInstanceRef(questionIndex)) == null) {
      if (((GroupDef)last).noAddRemove) {
        boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
        if (forwards) {
          step(controller.stepToNextEvent());
        }
 else {
          step(controller.stepToPreviousEvent());
        }
        return;
      }
 else {
        newRepeat=true;
      }
    }
 else {
      boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
      if (forwards) {
        createHeaderForElement(questionIndex);
      }
 else {
        removeHeaderForElement(questionIndex);
      }
      if (forwards) {
        step(controller.stepToNextEvent());
      }
 else {
        step(controller.stepToPreviousEvent());
      }
      return;
    }
  }
 else   if (questionIndex.isInForm() && model.isIndexReadonly(questionIndex)) {
    boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
    if (forwards) {
      step(controller.stepToNextEvent());
    }
 else {
      step(controller.stepToPreviousEvent());
    }
    return;
  }
  if (questionIndex.compareTo(activeQuestionIndex) > 0) {
    if (activeQuestionIndex.isInForm()) {
      if (activeIsInterstitial) {
        removeFrame(activeQuestionIndex);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
      }
    }
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      index=model.getForm().incrementIndex(index);
      putQuestion(index,index.equals(questionIndex),newRepeat);
    }
  }
 else   if (questionIndex.compareTo(activeQuestionIndex) <= 0) {
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      removeFrame(index);
      index=model.getForm().decrementIndex(index);
    }
    if (questionIndex.isInForm()) {
      if (newRepeat) {
        putQuestion(questionIndex,true,newRepeat);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(questionIndex,true))).setViewState(ChatterboxWidget.VIEW_EXPANDED);
      }
    }
  }
  if (!questionIndex.equals(activeQuestionIndex)) {
    activeQuestionIndex=questionIndex;
    if (activeQuestionIndex.isInForm()) {
      int index=questionIndexes.indexOf(activeQuestionIndex,true);
      ChatterboxWidget widget=(ChatterboxWidget)get(index);
      widget.setPinned(true);
      widget.showCommands();
      int prevheight=this.container.getScrollHeight();
      this.container.setScrollHeight(-1);
      this.focus(widget,true);
      this.container.setScrollHeight(prevheight);
    }
    progressBar.setMaxValue(model.getNumQuestions());
    progressBar.setValue(questionIndexes.size());
  }
  if (this.questionIndexes.size() <= 1) {
    this.removeCommand(backCommand);
  }
 else {
    addBackCommand();
  }
  babysitStyles();
}","private void jumpToQuestion(FormIndex questionIndex){
  boolean newRepeat=false;
  if (questionIndex.isInForm() && !model.isIndexRelevant(questionIndex))   throw new IllegalStateException();
  updatePins(questionIndex);
  IFormElement last=model.getForm().getChild(questionIndex);
  if (last instanceof GroupDef) {
    if (((GroupDef)last).getRepeat() && model.getForm().getInstance().resolveReference(model.getForm().getChildInstanceRef(questionIndex)) == null) {
      if (((GroupDef)last).noAddRemove) {
        boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
        if (forwards) {
          step(controller.stepToNextEvent());
        }
 else {
          step(controller.stepToPreviousEvent());
        }
        return;
      }
 else {
        newRepeat=true;
      }
    }
 else {
      boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
      if (forwards) {
        createHeaderForElement(questionIndex,false);
        step(controller.stepToNextEvent());
      }
 else {
        removeHeaderForElement(questionIndex);
        step(controller.stepToPreviousEvent());
      }
      return;
    }
  }
 else   if (questionIndex.isInForm() && model.isIndexReadonly(questionIndex)) {
    boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
    if (forwards) {
      step(controller.stepToNextEvent());
    }
 else {
      step(controller.stepToPreviousEvent());
    }
    return;
  }
  if (questionIndex.compareTo(activeQuestionIndex) > 0) {
    if (activeQuestionIndex.isInForm()) {
      if (activeIsInterstitial) {
        removeFrame(activeQuestionIndex);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
      }
    }
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      index=model.getForm().incrementIndex(index);
      putQuestion(index,index.equals(questionIndex),newRepeat);
    }
  }
 else   if (questionIndex.compareTo(activeQuestionIndex) <= 0) {
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      removeFrame(index);
      index=model.getForm().decrementIndex(index);
    }
    if (questionIndex.isInForm()) {
      if (newRepeat) {
        putQuestion(questionIndex,true,newRepeat);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(questionIndex,true))).setViewState(ChatterboxWidget.VIEW_EXPANDED);
      }
    }
  }
  if (!questionIndex.equals(activeQuestionIndex)) {
    activeQuestionIndex=questionIndex;
    if (activeQuestionIndex.isInForm()) {
      int index=questionIndexes.indexOf(activeQuestionIndex,true);
      ChatterboxWidget widget=(ChatterboxWidget)get(index);
      widget.setPinned(true);
      widget.showCommands();
      int prevheight=this.container.getScrollHeight();
      this.container.setScrollHeight(-1);
      this.focus(widget,true);
      this.container.setScrollHeight(prevheight);
    }
    progressBar.setMaxValue(model.getNumQuestions());
    progressBar.setValue(questionIndexes.size());
  }
  if (this.questionIndexes.size() <= 1) {
    this.removeCommand(backCommand);
  }
 else {
    addBackCommand();
  }
  babysitStyles();
}",0.9784615384615384
145080,"public void questionAnswered(){
  ChatterboxWidget frame=activeFrame();
  if (activeQuestionIndex != this.model.getFormIndex()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (activeIsInterstitial) {
    String answer=((Selection)frame.getData().getValue()).getValue();
    if (answer.equals(""String_Node_Str"")) {
      controller.newRepeat(this.model.getFormIndex());
      createHeaderForElement(this.model.getFormIndex());
    }
    step(controller.stepToNextEvent());
  }
 else {
    int status=controller.answerQuestion(this.model.getFormIndex(),frame.getData());
    if (status == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION);
    }
 else     if (status == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
      String msg=frame.getPrompt().getConstraintText();
      this.queueError(null,msg != null ? msg : PROMPT_DEFAULT_CONSTRAINT_VIOL);
    }
 else {
      step(controller.stepToNextEvent());
    }
  }
}","public void questionAnswered(){
  ChatterboxWidget frame=activeFrame();
  if (activeQuestionIndex != this.model.getFormIndex()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (activeIsInterstitial) {
    String answer=((Selection)frame.getData().getValue()).getValue();
    if (answer.equals(""String_Node_Str"")) {
      controller.newRepeat(this.model.getFormIndex());
      createHeaderForElement(this.model.getFormIndex(),true);
    }
    step(controller.stepToNextEvent());
  }
 else {
    int status=controller.answerQuestion(this.model.getFormIndex(),frame.getData());
    if (status == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION);
    }
 else     if (status == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
      String msg=frame.getPrompt().getConstraintText();
      this.queueError(null,msg != null ? msg : PROMPT_DEFAULT_CONSTRAINT_VIOL);
    }
 else {
      step(controller.stepToNextEvent());
    }
  }
}",0.9974861739567622
145081,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    Object o=(Date)toDate(argVals[0]);
    if (o instanceof Date) {
      return DateUtils.shortDateHack((Date)o);
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    Object o=toDate(argVals[0]);
    if (o instanceof Date) {
      return DateUtils.shortDateHack((Date)o);
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.999395039322444
145082,"/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent() != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  boolean hasConstraints=false;
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    return ANSWER_CONSTRAINT_VIOLATED;
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else   if (complexQuestion && hasConstraints) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}","/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent(index) != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  boolean hasConstraints=false;
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    return ANSWER_CONSTRAINT_VIOLATED;
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else   if (complexQuestion && hasConstraints) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}",0.9979927739863508
145083,"/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}","/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}",0.8475120385232745
145084,"private void createHeaderForElement(FormIndex questionIndex){
  FormEntryCaption prompt=model.getCaptionPrompt(questionIndex);
  String headerText;
  headerText=prompt.getLongText();
  if (headerText.equals(null)) {
    headerText=prompt.getShortText();
  }
  if (headerText != null) {
    ChatterboxWidget headerWidget=widgetFactory.getNewLabelWidget(questionIndex,headerText);
    this.append(headerWidget);
    this.questionIndexes.add(questionIndex);
    headerWidget.setPinned(true);
  }
}","private void createHeaderForElement(FormIndex questionIndex){
  FormEntryCaption prompt=model.getCaptionPrompt(questionIndex);
  String headerText;
  headerText=prompt.getLongText();
  if (headerText == null) {
    headerText=prompt.getShortText();
  }
  if (headerText != null) {
    ChatterboxWidget headerWidget=widgetFactory.getNewLabelWidget(questionIndex,headerText);
    this.append(headerWidget);
    this.questionIndexes.add(questionIndex);
    headerWidget.setPinned(true);
  }
}",0.9786368260427264
145085,"protected void updateWidget(FormEntryPrompt prompt){
  for (int i=0; i < choiceGroup().size(); i++) {
    SelectChoice sc=prompt.getSelectChoices().elementAt(i);
    Selection s=sc.selection();
    Image im=this.getImage(prompt.getSpecialFormSelectChoiceText(sc,FormEntryCaption.TEXT_FORM_IMAGE));
    choiceGroup().getItem(i).setText(prompt.getSelectChoiceText(sc));
    if (im != null) {
      choiceGroup().getItem(i).setImage(im);
    }
  }
}","protected void updateWidget(FormEntryPrompt prompt){
  for (int i=0; i < choiceGroup().size(); i++) {
    SelectChoice sc=prompt.getSelectChoices().elementAt(i);
    Image im=this.getImage(prompt.getSpecialFormSelectChoiceText(sc,FormEntryCaption.TEXT_FORM_IMAGE));
    choiceGroup().getItem(i).setText(prompt.getSelectChoiceText(sc));
    if (im != null) {
      choiceGroup().getItem(i).setImage(im);
    }
  }
}",0.9627906976744186
145086,"public void visit(FormInstance tree){
  theXmlDoc=new Document();
  TreeElement root=tree.resolveReference(rootRef);
  for (int i=0; i < root.getNumChildren(); i++) {
    TreeElement childAt=root.getChildAt(i);
  }
  if (root != null) {
    theXmlDoc.addChild(Node.ELEMENT,serializeNode(root));
  }
  Element top=theXmlDoc.getElement(0);
  String[] prefixes=tree.getNamespacePrefixes();
  for (int i=0; i < prefixes.length; ++i) {
    top.setPrefix(prefixes[i],tree.getNamespaceURI(prefixes[i]));
  }
  if (tree.schema != null) {
    top.setNamespace(tree.schema);
    top.setPrefix(""String_Node_Str"",tree.schema);
  }
}","public void visit(FormInstance tree){
  theXmlDoc=new Document();
  TreeElement root=tree.resolveReference(rootRef);
  if (root == null) {
    root=tree.getRoot();
  }
  for (int i=0; i < root.getNumChildren(); i++) {
    TreeElement childAt=root.getChildAt(i);
  }
  if (root != null) {
    theXmlDoc.addChild(Node.ELEMENT,serializeNode(root));
  }
  Element top=theXmlDoc.getElement(0);
  String[] prefixes=tree.getNamespacePrefixes();
  for (int i=0; i < prefixes.length; ++i) {
    top.setPrefix(prefixes[i],tree.getNamespaceURI(prefixes[i]));
  }
  if (tree.schema != null) {
    top.setNamespace(tree.schema);
    top.setPrefix(""String_Node_Str"",tree.schema);
  }
}",0.9604957397366384
145087,"public TransportMessage buildMessage(FormInstance tree,SubmissionProfile profile){
  if (profile == null) {
    try {
      IDataPayload payload=new XFormSerializingVisitor().createSerializedPayload(tree);
      return new SimpleHttpTransportMessage(payload.getPayloadStream(),PropertyManager._().getSingularProperty(DemoAppProperties.POST_URL_PROPERTY));
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  if (profile.getMethod().toLowerCase().equals(""String_Node_Str"")) {
    String url=profile.getAction();
    try {
      IDataPayload payload=new XFormSerializingVisitor().createSerializedPayload(tree,profile.getRef());
      return new SimpleHttpTransportMessage(payload.getPayloadStream(),url);
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else   if (profile.getMethod().toLowerCase().equals(""String_Node_Str"")) {
    String phoneUri=profile.getAction();
    try {
      String payload=new String(new SMSSerializingVisitor().serializeInstance(tree,profile.getRef()));
      return new SMSTransportMessage(payload,phoneUri);
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return null;
}","public TransportMessage buildMessage(FormInstance tree,SubmissionProfile profile){
  if (profile == null) {
    profile=SubmissionTransportHelper.defaultPostSubmission(PropertyManager._().getSingularProperty(DemoAppProperties.POST_URL_PROPERTY));
  }
  return SubmissionTransportHelper.createMessage(tree,profile);
}",0.2455927051671732
145088,"public void start(){
  J2MEDisplay.setView(view);
}","public void start(){
  view=new CommCareSuiteView(m.getName().evaluate());
  view.setCommandListener(this);
  configView();
  J2MEDisplay.setView(view);
}",0.4975609756097561
145089,"public Text parse() throws InvalidStructureException, IOException, XmlPullParserException {
  Vector<Text> texts=new Vector<Text>();
  checkNode(""String_Node_Str"");
  int entryLevel=parser.getDepth();
  try {
    parser.next();
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  while (parser.getDepth() > entryLevel) {
    Text t=parseBody();
    if (t != null) {
      texts.addElement(t);
    }
  }
  if (texts.size() == 1) {
    return texts.elementAt(0);
  }
 else {
    Text c=Text.CompositeText(texts);
    return c;
  }
}","public Text parse() throws InvalidStructureException, IOException, XmlPullParserException {
  Vector<Text> texts=new Vector<Text>();
  checkNode(""String_Node_Str"");
  int entryLevel=parser.getDepth();
  try {
    parser.next();
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  while (parser.getDepth() > entryLevel || parser.getEventType() == KXmlParser.TEXT) {
    Text t=parseBody();
    if (t != null) {
      texts.addElement(t);
    }
  }
  if (texts.size() == 1) {
    return texts.elementAt(0);
  }
 else {
    Text c=Text.CompositeText(texts);
    return c;
  }
}",0.964968152866242
145090,"public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}","public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 0;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}",0.9450441609421
145091,"public int getMinorVersion(){
  return 1;
}","public int getMinorVersion(){
  return 0;
}",0.9767441860465116
145092,"/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=new CommCareConfigEngine(System.out);
    engine.addLocalFileResource(args[1]);
    engine.resolveTable();
    engine.validateResources();
    engine.describeApplication();
    System.exit(0);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=new CommCareConfigEngine(System.out);
    engine.addLocalFileResource(args[1]);
    if (args.length > 2) {
      if (args[2].equals(""String_Node_Str"")) {
      }
 else {
        engine.addJarResources(args[2]);
      }
    }
 else {
      engine.addJarResources(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
      engine.addJarResources(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
    }
    engine.resolveTable();
    engine.validateResources();
    engine.describeApplication();
    System.exit(0);
  }
}",0.6599462365591398
145093,"public JavaFileReference(String localPart,String uri){
  this.localPart=localPart;
  this.uri=uri;
}","public JavaFileReference(String localPart,String uri,String authority){
  this.localPart=localPart;
  this.uri=uri;
  this.authority=authority;
}",0.8163265306122449
145094,"public String getURI(){
  return ""String_Node_Str"" + uri;
}","public String getURI(){
  return ""String_Node_Str"" + authority + ""String_Node_Str""+ uri;
}",0.7919463087248322
145095,"protected Reference factory(String terminal,String URI){
  return new JavaFileReference(localRoot,terminal);
}","protected Reference factory(String terminal,String URI){
  if (authority != null) {
    return new JavaFileReference(localRoot,terminal,authority);
  }
 else {
    return new JavaFileReference(localRoot,terminal);
  }
}",0.668693009118541
145096,"public JavaFileRoot(String localRoot){
  super(new String[]{""String_Node_Str""});
  this.localRoot=localRoot;
}","public JavaFileRoot(String[] uriRoots,String localRoot){
  super(uriRoots);
  if (uriRoots.length == 1) {
    authority=uriRoots[0];
  }
  this.localRoot=localRoot;
}",0.6376811594202898
145097,"/** 
 * Convenience method Get longText form of text for THIS element (if available)  !!Falls back to default form if 'long' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return longText form 
 */
public String getLongText(){
  String returnText=getSpecialFormQuestionText(getTextID(),TEXT_FORM_LONG);
  if (returnText == null)   returnText=getQuestionText(getTextID());
  return returnText;
}","/** 
 * Convenience method Get longText form of text for THIS element (if available)  !!Falls back to default form if 'long' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return longText form 
 */
public String getLongText(){
  return getQuestionText(getTextID());
}",0.8026845637583893
145098,"/** 
 * Same as getSpecialFormQuestionText(String textID,String form) except that the textID defaults to the textID of the current element.
 * @param form - special text form of textID you're trying to retrieve. 
 * @return Special Form Question Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 */
public String getSpecialFormQuestionText(String form){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  return getSpecialFormQuestionText(getTextID(),form);
}","/** 
 * Same as getSpecialFormQuestionText(String textID,String form) except that the textID defaults to the textID of the current element.
 * @param form - special text form of textID you're trying to retrieve. 
 * @return Special Form Question Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 */
public String getSpecialFormQuestionText(String form){
  return getSpecialFormQuestionText(getTextID(),form);
}",0.9171548117154812
145099,"/** 
 * Convenience method Get shortText form of text for THIS element (if available)  !!Falls back to default form if 'short' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return shortText form 
 */
public String getShortText(){
  String returnText=getSpecialFormQuestionText(getTextID(),TEXT_FORM_SHORT);
  if (returnText == null)   returnText=getQuestionText(getTextID());
  return returnText;
}","/** 
 * Convenience method Get shortText form of text for THIS element (if available)  !!Falls back to default form if 'short' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return shortText form 
 */
public String getShortText(){
  String returnText=getSpecialFormQuestionText(getTextID(),TEXT_FORM_SHORT);
  if (returnText == null)   returnText=getSpecialFormQuestionText(null);
  return returnText;
}",0.9706546275395034
145100,"public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  Vector<Text> templates=new Vector<Text>();
  Vector<Integer> headerHints=new Vector<Integer>();
  Vector<Integer> templateHints=new Vector<Integer>();
  Vector<String> headerForms=new Vector<String>();
  Vector<String> templateForms=new Vector<String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      headerHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      headerForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      templateHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      templateForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter,toArray(headerHints),toArray(templateHints),toArray(headerForms),toArray(templateForms));
  return d;
}","public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  Vector<Text> templates=new Vector<Text>();
  Vector<Integer> headerHints=new Vector<Integer>();
  Vector<Integer> templateHints=new Vector<Integer>();
  Vector<String> headerForms=new Vector<String>();
  Vector<String> templateForms=new Vector<String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      headerHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      headerForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      templateHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      templateForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter,toIntArray(headerHints),toIntArray(templateHints),toStringArray(headerForms),toStringArray(templateForms));
  return d;
}",0.9955730447614364
145101,"/** 
 * Remove a message from the send queue
 * @param success
 * @throws IOException
 */
public void decache(TransportMessage message) throws TransportException {
  storage(Q_STORENAME).remove(message);
  message.setID(-1);
  if (message.isSuccess()) {
    IStorageUtilityIndexed recent=storage(RECENTLY_SENT_STORENAME);
    if (recent.getNumRecords() == RECENTLY_SENT_STORE_MAXSIZE) {
      int first=recent.iterate().nextID();
      recent.remove(first);
    }
    try {
      recent.write(message);
    }
 catch (    StorageFullException e) {
      throw new TransportException(e);
    }
  }
  updateCachedCounts();
}","/** 
 * Remove a message from the send queue
 * @param success
 * @throws IOException
 */
public void decache(TransportMessage message) throws TransportException {
  try {
    storage(Q_STORENAME).remove(message);
  }
 catch (  IllegalArgumentException iae) {
    Logger._().log(""String_Node_Str"",""String_Node_Str"",new Date());
    return;
  }
  message.setID(-1);
  if (message.isSuccess()) {
    IStorageUtilityIndexed recent=storage(RECENTLY_SENT_STORENAME);
    boolean entered=false;
    int attempts=0;
    while (attempts < 5 && !entered) {
      attempts++;
      if (recent.getNumRecords() == RECENTLY_SENT_STORE_MAXSIZE) {
        try {
          int first=recent.iterate().nextID();
          recent.remove(first);
        }
 catch (        StorageModifiedException sme) {
          Logger._().log(""String_Node_Str"",""String_Node_Str"",new Date());
        }
catch (        IllegalArgumentException iae) {
        }
      }
      try {
        recent.write(message);
        entered=true;
      }
 catch (      StorageFullException e) {
        throw new TransportException(e);
      }
    }
  }
  updateCachedCounts();
}",0.7093089663049685
145102,"/** 
 * @param message
 * @return
 * @throws TransportException
 */
public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    CACHE.cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.isCacheable()) {
    if (message.getStatus() == TransportMessageStatus.SENT) {
      CACHE.decache(message);
    }
 else {
      message.setStatus(TransportMessageStatus.CACHED);
      CACHE.updateMessage(message);
    }
  }
  return message;
}","/** 
 * @param message
 * @return
 * @throws TransportException
 */
public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    CACHE().cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.isCacheable()) {
    if (message.getStatus() == TransportMessageStatus.SENT) {
      CACHE().decache(message);
    }
 else {
      message.setStatus(TransportMessageStatus.CACHED);
      CACHE().updateMessage(message);
    }
  }
  return message;
}",0.995
145103,"/** 
 * Any messages which aren't successfully sent in SendingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  Vector messages=getCachedMessages();
  if (messages.size() > 0) {
    TransportMessage m=(TransportMessage)messages.elementAt(0);
    Transporter transporter=m.createTransporter();
    TransporterSharingSender sender=new TransporterSharingSender(transporter,messages,CACHE,listener);
    sender.send();
  }
}","/** 
 * Any messages which aren't successfully sent in SendingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  Vector messages=getCachedMessages();
  if (messages.size() > 0) {
    TransportMessage m=(TransportMessage)messages.elementAt(0);
    Transporter transporter=m.createTransporter();
    TransporterSharingSender sender=new TransporterSharingSender(transporter,messages,CACHE(),listener);
    sender.send();
  }
}",0.9982847341337908
145104,"/** 
 * @return
 */
public static Vector getCachedMessages(){
  return CACHE.getCachedMessages();
}","/** 
 * @return
 */
public static Vector getCachedMessages(){
  return CACHE().getCachedMessages();
}",0.99
145105,"/** 
 * @return
 */
public static int getCachedMessagesSize(){
  return CACHE.getCachedMessagesCount();
}","/** 
 * @return
 */
public static int getCachedMessagesSize(){
  return CACHE().getCachedMessagesCount();
}",0.9905660377358492
145106,"/** 
 * A TransportMessage is assigned a uniqueId when persisted. Applications can access the message again via this method
 * @param id The unique id assigned to the TransportMessage when it was queued for sending
 * @return The TransportMessage identified by the id (or null if no suchmessage was found)
 */
public static TransportMessage retrieve(String id){
  return CACHE.findMessage(id);
}","/** 
 * A TransportMessage is assigned a uniqueId when persisted. Applications can access the message again via this method
 * @param id The unique id assigned to the TransportMessage when it was queued for sending
 * @return The TransportMessage identified by the id (or null if no suchmessage was found)
 */
public static TransportMessage retrieve(String id){
  return CACHE().findMessage(id);
}",0.9974747474747476
145107,"/** 
 * Send a message, specifying a number of tries and the pause between the tries (in seconds)
 * @param message
 * @param tries
 * @param delay
 * @return
 * @throws IOException
 */
public static SenderThread send(TransportMessage message,int tries,int delay) throws TransportException {
  Transporter transporter=message.createTransporter();
  SenderThread thread=new SimpleSenderThread(transporter,CACHE,tries,delay);
  if (message.isCacheable()) {
    message.setSendingThreadDeadline(getSendingThreadDeadline(thread.getTries(),thread.getDelay()));
synchronized (CACHE) {
      CACHE.cache(message);
    }
  }
 else {
    message.setStatus(TransportMessageStatus.QUEUED);
  }
  thread.start();
  return thread;
}","/** 
 * Send a message, specifying a number of tries and the pause between the tries (in seconds)
 * @param message
 * @param tries
 * @param delay
 * @return
 * @throws IOException
 */
public static SenderThread send(TransportMessage message,int tries,int delay) throws TransportException {
  Transporter transporter=message.createTransporter();
  SenderThread thread=new SimpleSenderThread(transporter,CACHE(),tries,delay);
  if (message.isCacheable()) {
    message.setSendingThreadDeadline(getSendingThreadDeadline(thread.getTries(),thread.getDelay()));
synchronized (CACHE()) {
      CACHE().cache(message);
    }
  }
 else {
    message.setStatus(TransportMessageStatus.QUEUED);
  }
  thread.start();
  return thread;
}",0.9958448753462604
145108,"/** 
 * @param testing
 */
public TransportMessageStore(){
  updateCachedCounts();
}","/** 
 * @param testing
 */
public TransportMessageStore(){
  cachedCounts=new Hashtable();
  storage(Q_STORENAME).repair();
  storage(RECENTLY_SENT_STORENAME).repair();
  updateCachedCounts();
}",0.60431654676259
145109,"public void clearLogs(){
  Vector ids=new Vector();
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    ids.addElement(new Integer(li.nextID()));
  }
  for (int i=0; i < ids.size(); i++) {
    int id=((Integer)ids.elementAt(i)).intValue();
    logStorage.remove(id);
  }
}","public void clearLogs(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return;
    }
    Vector ids=new Vector();
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      ids.addElement(new Integer(li.nextID()));
    }
    for (int i=0; i < ids.size(); i++) {
      int id=((Integer)ids.elementAt(i)).intValue();
      logStorage.remove(id);
    }
  }
}",0.8433382137628112
145110,"public void log(String type,String message,Date logDate){
  LogEntry log=new LogEntry(type,message,logDate);
  try {
    logStorage.add(log);
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void log(String type,String message,Date logDate){
synchronized (logStorage) {
    LogEntry log=new LogEntry(type,message,logDate);
    try {
      logStorage.add(log);
    }
 catch (    StorageFullException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}",0.8773946360153256
145111,"public boolean serializeLogs(IAtomicLogSerializer serializer){
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    if (!serializer.serializeLog((LogEntry)li.nextRecord()))     ;
    return false;
  }
  return true;
}","public boolean serializeLogs(IAtomicLogSerializer serializer){
synchronized (logStorage) {
    if (!checkStorage()) {
      return false;
    }
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      if (!serializer.serializeLog((LogEntry)li.nextRecord()))       ;
      return false;
    }
    return true;
  }
}",0.774869109947644
145112,"public int logSize(){
  return logStorage.getNumRecords();
}","public int logSize(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return -1;
    }
    return logStorage.getNumRecords();
  }
}",0.5882352941176471
145113,"private void dumpLogFallback(){
  try {
    String dumpRef=""String_Node_Str"" + DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_TIMESTAMP_SUFFIX) + ""String_Node_Str"";
    Reference ref=ReferenceManager._().DeriveReference(dumpRef);
    if (!ref.isReadOnly()) {
      if (Logger._().serializeLogs(new StreamLogSerializer(ref.getOutputStream()))) {
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Logger._().clearLogs();
}","private void dumpLogFallback(){
  try {
    String dumpRef=""String_Node_Str"" + DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_TIMESTAMP_SUFFIX) + ""String_Node_Str"";
    Reference ref=ReferenceManager._().DeriveReference(dumpRef);
    if (!ref.isReadOnly()) {
      if (Logger._().serializeLogs(new StreamLogSerializer(ref.getOutputStream()))) {
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    if (Logger._() == null) {
      System.out.println(""String_Node_Str"");
    }
    Logger._().clearLogs();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.849213691026827
145114,"/** 
 * @param message
 * @return
 * @throws TransportException
 */
public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    CACHE.cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.isCacheable()) {
    if (message.getStatus() == TransportMessageStatus.SENT) {
      CACHE.decache(message);
    }
 else {
      message.setStatus(TransportMessageStatus.CACHED);
      CACHE.updateMessage(message);
    }
  }
  return message;
}","/** 
 * @param message
 * @return
 * @throws TransportException
 */
public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    CACHE().cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.isCacheable()) {
    if (message.getStatus() == TransportMessageStatus.SENT) {
      CACHE().decache(message);
    }
 else {
      message.setStatus(TransportMessageStatus.CACHED);
      CACHE().updateMessage(message);
    }
  }
  return message;
}",0.995
145115,"/** 
 * Any messages which aren't successfully sent in SendingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  Vector messages=getCachedMessages();
  if (messages.size() > 0) {
    TransportMessage m=(TransportMessage)messages.elementAt(0);
    Transporter transporter=m.createTransporter();
    TransporterSharingSender sender=new TransporterSharingSender(transporter,messages,CACHE,listener);
    sender.send();
  }
}","/** 
 * Any messages which aren't successfully sent in SendingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  Vector messages=getCachedMessages();
  if (messages.size() > 0) {
    TransportMessage m=(TransportMessage)messages.elementAt(0);
    Transporter transporter=m.createTransporter();
    TransporterSharingSender sender=new TransporterSharingSender(transporter,messages,CACHE(),listener);
    sender.send();
  }
}",0.9982847341337908
145116,"/** 
 * @return
 */
public static Vector getCachedMessages(){
  return CACHE.getCachedMessages();
}","/** 
 * @return
 */
public static Vector getCachedMessages(){
  return CACHE().getCachedMessages();
}",0.99
145117,"/** 
 * @return
 */
public static int getCachedMessagesSize(){
  return CACHE.getCachedMessagesCount();
}","/** 
 * @return
 */
public static int getCachedMessagesSize(){
  return CACHE().getCachedMessagesCount();
}",0.9905660377358492
145118,"/** 
 * A TransportMessage is assigned a uniqueId when persisted. Applications can access the message again via this method
 * @param id The unique id assigned to the TransportMessage when it was queued for sending
 * @return The TransportMessage identified by the id (or null if no suchmessage was found)
 */
public static TransportMessage retrieve(String id){
  return CACHE.findMessage(id);
}","/** 
 * A TransportMessage is assigned a uniqueId when persisted. Applications can access the message again via this method
 * @param id The unique id assigned to the TransportMessage when it was queued for sending
 * @return The TransportMessage identified by the id (or null if no suchmessage was found)
 */
public static TransportMessage retrieve(String id){
  return CACHE().findMessage(id);
}",0.9974747474747476
145119,"/** 
 * Send a message, specifying a number of tries and the pause between the tries (in seconds)
 * @param message
 * @param tries
 * @param delay
 * @return
 * @throws IOException
 */
public static SenderThread send(TransportMessage message,int tries,int delay) throws TransportException {
  Transporter transporter=message.createTransporter();
  SenderThread thread=new SimpleSenderThread(transporter,CACHE,tries,delay);
  if (message.isCacheable()) {
    message.setSendingThreadDeadline(getSendingThreadDeadline(thread.getTries(),thread.getDelay()));
synchronized (CACHE) {
      CACHE.cache(message);
    }
  }
 else {
    message.setStatus(TransportMessageStatus.QUEUED);
  }
  thread.start();
  return thread;
}","/** 
 * Send a message, specifying a number of tries and the pause between the tries (in seconds)
 * @param message
 * @param tries
 * @param delay
 * @return
 * @throws IOException
 */
public static SenderThread send(TransportMessage message,int tries,int delay) throws TransportException {
  Transporter transporter=message.createTransporter();
  SenderThread thread=new SimpleSenderThread(transporter,CACHE(),tries,delay);
  if (message.isCacheable()) {
    message.setSendingThreadDeadline(getSendingThreadDeadline(thread.getTries(),thread.getDelay()));
synchronized (CACHE()) {
      CACHE().cache(message);
    }
  }
 else {
    message.setStatus(TransportMessageStatus.QUEUED);
  }
  thread.start();
  return thread;
}",0.9958448753462604
145120,"/** 
 * @param testing
 */
public TransportMessageStore(){
  updateCachedCounts();
}","/** 
 * @param testing
 */
public TransportMessageStore(){
  cachedCounts=new Hashtable();
  storage(Q_STORENAME).repair();
  storage(RECENTLY_SENT_STORENAME).repair();
  updateCachedCounts();
}",0.60431654676259
145121,"public void clearLogs(){
  Vector ids=new Vector();
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    ids.addElement(new Integer(li.nextID()));
  }
  for (int i=0; i < ids.size(); i++) {
    int id=((Integer)ids.elementAt(i)).intValue();
    logStorage.remove(id);
  }
}","public void clearLogs(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return;
    }
    Vector ids=new Vector();
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      ids.addElement(new Integer(li.nextID()));
    }
    for (int i=0; i < ids.size(); i++) {
      int id=((Integer)ids.elementAt(i)).intValue();
      logStorage.remove(id);
    }
  }
}",0.8433382137628112
145122,"public void log(String type,String message,Date logDate){
  LogEntry log=new LogEntry(type,message,logDate);
  try {
    logStorage.add(log);
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void log(String type,String message,Date logDate){
synchronized (logStorage) {
    LogEntry log=new LogEntry(type,message,logDate);
    try {
      logStorage.add(log);
    }
 catch (    StorageFullException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}",0.8773946360153256
145123,"public boolean serializeLogs(IAtomicLogSerializer serializer){
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    if (!serializer.serializeLog((LogEntry)li.nextRecord()))     ;
    return false;
  }
  return true;
}","public boolean serializeLogs(IAtomicLogSerializer serializer){
synchronized (logStorage) {
    if (!checkStorage()) {
      return false;
    }
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      if (!serializer.serializeLog((LogEntry)li.nextRecord()))       ;
      return false;
    }
    return true;
  }
}",0.774869109947644
145124,"public int logSize(){
  return logStorage.getNumRecords();
}","public int logSize(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return -1;
    }
    return logStorage.getNumRecords();
  }
}",0.5882352941176471
145125,"private void dumpLogFallback(){
  try {
    String dumpRef=""String_Node_Str"" + DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_TIMESTAMP_SUFFIX) + ""String_Node_Str"";
    Reference ref=ReferenceManager._().DeriveReference(dumpRef);
    if (!ref.isReadOnly()) {
      if (Logger._().serializeLogs(new StreamLogSerializer(ref.getOutputStream()))) {
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Logger._().clearLogs();
}","private void dumpLogFallback(){
  try {
    String dumpRef=""String_Node_Str"" + DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_TIMESTAMP_SUFFIX) + ""String_Node_Str"";
    Reference ref=ReferenceManager._().DeriveReference(dumpRef);
    if (!ref.isReadOnly()) {
      if (Logger._().serializeLogs(new StreamLogSerializer(ref.getOutputStream()))) {
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    if (Logger._() == null) {
      System.out.println(""String_Node_Str"");
    }
    Logger._().clearLogs();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.849213691026827
145126,"/** 
 * Remove a message from the send queue
 * @param success
 * @throws IOException
 */
public void decache(TransportMessage message) throws TransportException {
  storage(Q_STORENAME).remove(message);
  message.setID(-1);
  if (message.isSuccess()) {
    IStorageUtilityIndexed recent=storage(RECENTLY_SENT_STORENAME);
    if (recent.getNumRecords() == RECENTLY_SENT_STORE_MAXSIZE) {
      int first=recent.iterate().nextID();
      recent.remove(first);
    }
    try {
      recent.write(message);
    }
 catch (    StorageFullException e) {
      throw new TransportException(e);
    }
  }
  updateCachedCounts();
}","/** 
 * Remove a message from the send queue
 * @param success
 * @throws IOException
 */
public void decache(TransportMessage message) throws TransportException {
  try {
    storage(Q_STORENAME).remove(message);
  }
 catch (  IllegalArgumentException iae) {
    Logger._().log(""String_Node_Str"",""String_Node_Str"",new Date());
    return;
  }
  message.setID(-1);
  if (message.isSuccess()) {
    IStorageUtilityIndexed recent=storage(RECENTLY_SENT_STORENAME);
    boolean entered=false;
    int attempts=0;
    while (attempts < 5 && !entered) {
      attempts++;
      if (recent.getNumRecords() == RECENTLY_SENT_STORE_MAXSIZE) {
        try {
          int first=recent.iterate().nextID();
          recent.remove(first);
        }
 catch (        StorageModifiedException sme) {
          Logger._().log(""String_Node_Str"",""String_Node_Str"",new Date());
        }
catch (        IllegalArgumentException iae) {
        }
      }
      try {
        recent.write(message);
        entered=true;
      }
 catch (      StorageFullException e) {
        throw new TransportException(e);
      }
    }
  }
  updateCachedCounts();
}",0.7093089663049685
145127,"private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (u == null) {
    u=new User(username,password,uuid);
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}","private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (!u.getPassword().equals(password)) {
    u.setPassword(password);
  }
  if (u == null) {
    u=new User(username,password,uuid);
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}",0.9589189189189188
145128,"public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue()];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}","public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue() - 1];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}",0.9946666666666668
145129,"/** 
 * @return
 */
private String getCurrentDisplay(){
  return Localization.get(""String_Node_Str"",new String[]{String.valueOf(currentid),String.valueOf(ids.size()),String.valueOf(currentid + 1),String.valueOf(ids.size())});
}","/** 
 * @return
 */
private String getCurrentDisplay(){
  return Localization.get(""String_Node_Str"",new String[]{String.valueOf(currentid + 1),String.valueOf(ids.size()),String.valueOf(currentid),String.valueOf(ids.size())});
}",0.9823788546255506
145130,"/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    boolean isIntegral=Math.abs(d - (int)d) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || isIntegral) {
      return new IntegerData((int)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    return new DateData((Date)val);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}","/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    boolean isIntegral=Math.abs(d - (int)d) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || isIntegral) {
      return new IntegerData((int)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    return (dataType == Constants.DATATYPE_DATE_TIME ? new DateTimeData((Date)val) : new DateData((Date)val));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}",0.9634881247784474
145131,"public void setValue(Object o){
  if (o == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  d=new Date(((Date)o).getTime());
}","public void setValue(Object o){
  if (o == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  d=DateUtils.roundDate((Date)o);
}",0.8934707903780069
145132,"/** 
 * @return
 */
private String getCurrentDisplay(){
  return Localization.get(""String_Node_Str"",new String[]{String.valueOf(currentid),String.valueOf(ids.size()),String.valueOf(currentid + 1),String.valueOf(ids.size())});
}","/** 
 * @return
 */
private String getCurrentDisplay(){
  return Localization.get(""String_Node_Str"",new String[]{String.valueOf(currentid + 1),String.valueOf(ids.size()),String.valueOf(currentid),String.valueOf(ids.size())});
}",0.9823788546255506
145133,"private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (!u.getPassword().equals(password)) {
    u.setPassword(password);
  }
  if (u == null) {
    u=new User(username,password,uuid);
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}","private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (u == null) {
    u=new User(username,password,uuid);
  }
 else {
    if (!u.getPassword().equals(password)) {
      u.setPassword(password);
    }
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}",0.9300411522633744
145134,"private static String formatDateColloquial(DateFields f){
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ (new Integer(f.year)).toString().substring(2,4);
}","private static String formatDateColloquial(DateFields f){
  String year=new Integer(f.year).toString();
  if (year.length() == 4) {
    year=year.substring(2,4);
  }
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ year;
}",0.647450110864745
145135,"private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (!u.getPassword().equals(password)) {
    u.setPassword(password);
  }
  if (u == null) {
    u=new User(username,password,uuid);
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}","private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (u == null) {
    u=new User(username,password,uuid);
  }
 else {
    if (!u.getPassword().equals(password)) {
      u.setPassword(password);
    }
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}",0.9300411522633744
145136,"private static String formatDateColloquial(DateFields f){
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ (new Integer(f.year)).toString().substring(2,4);
}","private static String formatDateColloquial(DateFields f){
  String year=new Integer(f.year).toString();
  if (year.length() == 4) {
    year=year.substring(2,4);
  }
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ year;
}",0.647450110864745
145137,"private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (u == null) {
    u=new User(username,password,uuid);
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}","private void parseRegistration(TreeElement head) throws MalformedUserModelException, StorageFullException {
  String username=getString(getChild(head,""String_Node_Str""),head);
  String password=getString(getChild(head,""String_Node_Str""),head);
  String uuid=getString(getChild(head,""String_Node_Str""),head);
  User u=getUserFromStorage(uuid);
  if (!u.getPassword().equals(password)) {
    u.setPassword(password);
  }
  if (u == null) {
    u=new User(username,password,uuid);
  }
  TreeElement data=getChild(head,""String_Node_Str"");
  for (int i=0; i < data.getNumChildren(); ++i) {
    TreeElement datum=data.getChildAt(i);
    if (!datum.isRelevant()) {
      continue;
    }
    String keyName=datum.getAttributeValue(null,""String_Node_Str"");
    if (keyName == null) {
      throw new MalformedUserModelException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    u.setProperty(keyName,getString(datum,data));
  }
  storage().write(u);
  user=u;
}",0.9589189189189188
145138,"private void jumpToQuestion(FormIndex questionIndex){
  boolean newRepeat=false;
  if (questionIndex.isInForm() && !model.isIndexRelevant(questionIndex))   throw new IllegalStateException();
  updatePins(questionIndex);
  IFormElement last=model.getForm().getChild(questionIndex);
  if (last instanceof GroupDef) {
    if (((GroupDef)last).getRepeat() && model.getForm().getInstance().resolveReference(model.getForm().getChildInstanceRef(questionIndex)) == null) {
      if (((GroupDef)last).noAddRemove) {
        boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
        if (forwards) {
          step(controller.stepToNextEvent());
        }
 else {
          step(controller.stepToPreviousEvent());
        }
        return;
      }
 else {
        newRepeat=true;
      }
    }
 else {
      boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
      if (forwards) {
        createHeaderForElement(questionIndex);
      }
 else {
        removeHeaderForElement(questionIndex);
      }
      if (forwards) {
        step(controller.stepToNextEvent());
      }
 else {
        step(controller.stepToPreviousEvent());
      }
      return;
    }
  }
 else   if (questionIndex.isInForm() && model.isIndexReadonly(questionIndex)) {
    boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
    if (forwards) {
      step(controller.stepToNextEvent());
    }
 else {
      step(controller.stepToPreviousEvent());
    }
    return;
  }
  if (questionIndex.compareTo(activeQuestionIndex) > 0) {
    if (activeQuestionIndex.isInForm()) {
      if (activeIsInterstitial) {
        removeFrame(activeQuestionIndex);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
      }
    }
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      index=model.getForm().incrementIndex(index);
      putQuestion(index,index.equals(questionIndex),newRepeat);
    }
  }
 else   if (questionIndex.compareTo(activeQuestionIndex) <= 0) {
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      removeFrame(index);
      index=model.getForm().decrementIndex(index);
    }
    if (questionIndex.isInForm()) {
      if (newRepeat) {
        putQuestion(questionIndex,true,newRepeat);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(questionIndex,true))).setViewState(ChatterboxWidget.VIEW_EXPANDED);
      }
    }
  }
  if (!questionIndex.equals(activeQuestionIndex)) {
    activeQuestionIndex=questionIndex;
    if (activeQuestionIndex.isInForm()) {
      int index=questionIndexes.indexOf(activeQuestionIndex,true);
      ChatterboxWidget widget=(ChatterboxWidget)get(index);
      widget.setPinned(true);
      widget.showCommands();
      int prevheight=this.container.getScrollHeight();
      this.container.setScrollHeight(-1);
      this.focus(widget,true);
      this.container.setScrollHeight(prevheight);
    }
    progressBar.setMaxValue(model.getNumQuestions());
    progressBar.setValue(questionIndexes.size());
  }
  if (this.questionIndexes.size() <= 1) {
    this.removeCommand(backCommand);
  }
 else {
    this.addCommand(backCommand);
  }
  babysitStyles();
}","private void jumpToQuestion(FormIndex questionIndex){
  boolean newRepeat=false;
  if (questionIndex.isInForm() && !model.isIndexRelevant(questionIndex))   throw new IllegalStateException();
  updatePins(questionIndex);
  IFormElement last=model.getForm().getChild(questionIndex);
  if (last instanceof GroupDef) {
    if (((GroupDef)last).getRepeat() && model.getForm().getInstance().resolveReference(model.getForm().getChildInstanceRef(questionIndex)) == null) {
      if (((GroupDef)last).noAddRemove) {
        boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
        if (forwards) {
          step(controller.stepToNextEvent());
        }
 else {
          step(controller.stepToPreviousEvent());
        }
        return;
      }
 else {
        newRepeat=true;
      }
    }
 else {
      boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
      if (forwards) {
        createHeaderForElement(questionIndex);
      }
 else {
        removeHeaderForElement(questionIndex);
      }
      if (forwards) {
        step(controller.stepToNextEvent());
      }
 else {
        step(controller.stepToPreviousEvent());
      }
      return;
    }
  }
 else   if (questionIndex.isInForm() && model.isIndexReadonly(questionIndex)) {
    boolean forwards=questionIndex.compareTo(activeQuestionIndex) > 0;
    if (forwards) {
      step(controller.stepToNextEvent());
    }
 else {
      step(controller.stepToPreviousEvent());
    }
    return;
  }
  if (questionIndex.compareTo(activeQuestionIndex) > 0) {
    if (activeQuestionIndex.isInForm()) {
      if (activeIsInterstitial) {
        removeFrame(activeQuestionIndex);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
      }
    }
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      index=model.getForm().incrementIndex(index);
      putQuestion(index,index.equals(questionIndex),newRepeat);
    }
  }
 else   if (questionIndex.compareTo(activeQuestionIndex) <= 0) {
    FormIndex index=activeQuestionIndex;
    while (!index.equals(questionIndex)) {
      removeFrame(index);
      index=model.getForm().decrementIndex(index);
    }
    if (questionIndex.isInForm()) {
      if (newRepeat) {
        putQuestion(questionIndex,true,newRepeat);
      }
 else {
        ((ChatterboxWidget)get(questionIndexes.indexOf(questionIndex,true))).setViewState(ChatterboxWidget.VIEW_EXPANDED);
      }
    }
  }
  if (!questionIndex.equals(activeQuestionIndex)) {
    activeQuestionIndex=questionIndex;
    if (activeQuestionIndex.isInForm()) {
      int index=questionIndexes.indexOf(activeQuestionIndex,true);
      ChatterboxWidget widget=(ChatterboxWidget)get(index);
      widget.setPinned(true);
      widget.showCommands();
      int prevheight=this.container.getScrollHeight();
      this.container.setScrollHeight(-1);
      this.focus(widget,true);
      this.container.setScrollHeight(prevheight);
    }
    progressBar.setMaxValue(model.getNumQuestions());
    progressBar.setValue(questionIndexes.size());
  }
  if (this.questionIndexes.size() <= 1) {
    this.removeCommand(backCommand);
  }
 else {
    addBackCommand();
  }
  babysitStyles();
}",0.9966422466422468
145139,"private void setUpCommands(){
  backCommand=new Command(Localization.get(""String_Node_Str""),Command.BACK,2);
  exitNoSaveCommand=new Command(Localization.get(""String_Node_Str""),Command.EXIT,4);
  exitSaveCommand=new Command(Localization.get(""String_Node_Str""),Command.SCREEN,4);
  saveCommand=new Command(Localization.get(""String_Node_Str""),Command.SCREEN,4);
  if (multiLingual) {
    languageSubMenu=new Command(Localization.get(""String_Node_Str""),Command.SCREEN,2);
    populateLanguages();
  }
  if (!model.isReadOnlyMode()) {
    addCommand(backCommand);
  }
  addCommand(exitNoSaveCommand);
  if (languageSubMenu != null) {
    addCommand(languageSubMenu);
    for (int i=0; i < languageCommands.length; i++)     addSubCommand(languageCommands[i],languageSubMenu);
  }
  setCommandListener(this);
}","private void setUpCommands(){
  backCommand=new Command(Localization.get(""String_Node_Str""),Command.BACK,2);
  exitNoSaveCommand=new Command(Localization.get(""String_Node_Str""),Command.EXIT,4);
  exitSaveCommand=new Command(Localization.get(""String_Node_Str""),Command.SCREEN,4);
  saveCommand=new Command(Localization.get(""String_Node_Str""),Command.SCREEN,4);
  if (multiLingual) {
    languageSubMenu=new Command(Localization.get(""String_Node_Str""),Command.SCREEN,2);
    populateLanguages();
  }
  addBackCommand();
  if (!model.isReadOnlyMode()) {
  }
  addCommand(exitNoSaveCommand);
  if (languageSubMenu != null) {
    addCommand(languageSubMenu);
    for (int i=0; i < languageCommands.length; i++)     addSubCommand(languageCommands[i],languageSubMenu);
  }
  setCommandListener(this);
}",0.969355847404628
145140,"public void _commandAction(Command command,Displayable s){
  System.out.println(""String_Node_Str"");
  if (command == backCommand) {
    System.out.println(""String_Node_Str"");
    step(controller.stepToPreviousEvent());
  }
 else   if (command == exitNoSaveCommand) {
    controller.abort();
  }
 else   if (command == exitSaveCommand) {
    commitAndSave();
  }
 else   if (command == saveCommand) {
    commitAndSave();
  }
 else   if (command.getLabel() == Constants.ACTIVITY_TYPE_GET_IMAGES) {
    suspendActivity(FormEntryTransitions.MEDIA_IMAGE);
  }
 else   if (command.getLabel() == Constants.ACTIVITY_TYPE_GET_AUDIO) {
    suspendActivity(FormEntryTransitions.MEDIA_AUDIO);
  }
 else   if (command.getLabel() == ""String_Node_Str"") {
    doCapture();
  }
 else   if (command.getLabel() == ""String_Node_Str"") {
    backFromCamera();
  }
 else   if (command.getLabel().equals(CollapsedWidget.UPDATE_TEXT)) {
    System.out.println(""String_Node_Str"");
  }
 else {
    String language=null;
    if (multiLingual) {
      for (int i=0; i < languageCommands.length; i++) {
        if (command == languageCommands[i]) {
          language=localeCommandMap[i];
        }
      }
    }
    if (language != null) {
      controller.setLanguage(language);
    }
 else {
      System.err.println(""String_Node_Str"" + command.getLabel() + ""String_Node_Str"");
    }
  }
}","public void _commandAction(Command command,Displayable s){
  System.out.println(""String_Node_Str"");
  if (command == backCommand) {
    step(controller.stepToPreviousEvent());
  }
 else   if (command == exitNoSaveCommand) {
    controller.abort();
  }
 else   if (command == exitSaveCommand) {
    commitAndSave();
  }
 else   if (command == saveCommand) {
    commitAndSave();
  }
 else   if (command.getLabel() == Constants.ACTIVITY_TYPE_GET_IMAGES) {
    suspendActivity(FormEntryTransitions.MEDIA_IMAGE);
  }
 else   if (command.getLabel() == Constants.ACTIVITY_TYPE_GET_AUDIO) {
    suspendActivity(FormEntryTransitions.MEDIA_AUDIO);
  }
 else   if (command.getLabel() == ""String_Node_Str"") {
    doCapture();
  }
 else   if (command.getLabel() == ""String_Node_Str"") {
    backFromCamera();
  }
 else   if (command.getLabel().equals(CollapsedWidget.UPDATE_TEXT)) {
    System.out.println(""String_Node_Str"");
  }
 else {
    String language=null;
    if (multiLingual) {
      for (int i=0; i < languageCommands.length; i++) {
        if (command == languageCommands[i]) {
          language=localeCommandMap[i];
        }
      }
    }
    if (language != null) {
      controller.setLanguage(language);
    }
 else {
      System.err.println(""String_Node_Str"" + command.getLabel() + ""String_Node_Str"");
    }
  }
}",0.9839731643682446
145141,"public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue()];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}","public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue() - 1];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}",0.9946666666666668
145142,"protected String getFormOrDefault(String textID,String form){
  String t=null;
  if (textID == null) {
    return this.getText(null,null);
  }
  try {
    t=getText(textID,form);
  }
 catch (  NoLocalizedTextException nlte) {
    System.out.println(""String_Node_Str"" + form + ""String_Node_Str""+ textID+ ""String_Node_Str"");
    t=getDefaultText(textID);
  }
  return t;
}","protected String getFormOrDefault(String textID,String form){
  String t=null;
  if (textID == null) {
    return this.getText(null,null);
  }
  try {
    t=getText(textID,form);
  }
 catch (  NoLocalizedTextException nlte) {
    System.out.println(""String_Node_Str"" + form + ""String_Node_Str""+ textID+ ""String_Node_Str"");
    t=getDefaultText(textID);
  }
catch (  IllegalArgumentException iae) {
    System.out.println(""String_Node_Str"" + textID + ""String_Node_Str"");
    t=getDefaultText(textID);
  }
  return t;
}",0.8072153325817362
145143,"/** 
 * Convenience method Get shortText form of text for THIS element (if available) 
 * @return shortText form 
 */
public String getShortText(){
  return getFormOrDefault(getTextID(),TEXT_FORM_SHORT);
}","/** 
 * Convenience method System.out.println(""Warning, Short text form requested for [""+textID+""] but doesn't exist. (Falling back to Default form).""); t = getDefaultText(textID); }catch(IllegalArgumentException iae){ Get shortText form of text for THIS element (if available) 
 * @return shortText form 
 */
public String getShortText(){
  return getFormOrDefault(getTextID(),TEXT_FORM_SHORT);
}",0.6810631229235881
145144,"private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  Vector usedAtts=new Vector();
  Vector labelUA=new Vector();
  Vector valueUA=new Vector();
  Vector copyUA=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  labelUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  copyUA.addElement(""String_Node_Str"");
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.contextRef=getFormElementRef(qparent);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),itemset.contextRef));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (XFormUtils.showUnusedAttributeWarning(child,labelUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,labelUA));
      }
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,copyUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,copyUA));
      }
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,valueUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,valueUA));
      }
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  if (itemset.copyRef != null) {
    if (itemset.valueRef == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (!itemset.copyRef.isParentOf(itemset.valueRef,false)) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}","private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  Vector usedAtts=new Vector();
  Vector labelUA=new Vector();
  Vector valueUA=new Vector();
  Vector copyUA=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  labelUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  copyUA.addElement(""String_Node_Str"");
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  if (nodesetStr == null)   throw new RuntimeException(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ XFormSerializer.elementToString(e)+ ""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.contextRef=getFormElementRef(qparent);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),itemset.contextRef));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (XFormUtils.showUnusedAttributeWarning(child,labelUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,labelUA));
      }
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,copyUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,copyUA));
      }
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,valueUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,valueUA));
      }
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  if (itemset.copyRef != null) {
    if (itemset.valueRef == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (!itemset.copyRef.isParentOf(itemset.valueRef,false)) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}",0.9790816326530613
145145,"private static void listQuestion(FormDef f,QuestionDef q,FormEntryController fec,int indent,StringBuffer sb){
  FormEntryModel femodel=fec.getModel();
  TreeElement instanceNode=getInstanceNode(f.getInstance(),q.getBind());
  String caption=""String_Node_Str"";
  FormEntryPrompt fep=femodel.getQuestionPrompt();
  caption=getAppropriateTextForm(fep,fep.getTextID());
  int type=instanceNode.dataType;
  if (q.getControlType() != Constants.CONTROL_TRIGGER) {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
    println(sb,indent + 1,""String_Node_Str"" + printType(type));
  }
 else {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
  }
  if (q.getControlType() == Constants.CONTROL_SELECT_ONE || q.getControlType() == Constants.CONTROL_SELECT_MULTI) {
    printChoices(f,q,fec,indent + 1,sb);
  }
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  String defaultValue=printDefault(instanceNode);
  if (defaultValue != null) {
    println(sb,indent + 1,""String_Node_Str"" + defaultValue);
  }
  if (instanceNode.getConstraint() != null) {
    println(sb,indent + 1,""String_Node_Str"" + printCondition(instanceNode.getConstraint().constraint));
  }
  println(sb);
}","private static void listQuestion(FormDef f,QuestionDef q,FormEntryController fec,int indent,StringBuffer sb){
  FormEntryModel femodel=fec.getModel();
  TreeElement instanceNode=getInstanceNode(f.getInstance(),q.getBind());
  String caption=""String_Node_Str"";
  FormEntryPrompt fep=femodel.getQuestionPrompt();
  caption=fep.getLongText();
  int type=instanceNode.dataType;
  if (q.getControlType() != Constants.CONTROL_TRIGGER) {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
    println(sb,indent + 1,""String_Node_Str"" + printType(type));
  }
 else {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
  }
  if (q.getControlType() == Constants.CONTROL_SELECT_ONE || q.getControlType() == Constants.CONTROL_SELECT_MULTI) {
    printChoices(f,q,fec,indent + 1,sb);
  }
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  String defaultValue=printDefault(instanceNode);
  if (defaultValue != null) {
    println(sb,indent + 1,""String_Node_Str"" + defaultValue);
  }
  if (instanceNode.getConstraint() != null) {
    println(sb,indent + 1,""String_Node_Str"" + printCondition(instanceNode.getConstraint().constraint));
  }
  println(sb);
}",0.9813293502613892
145146,"/** 
 * Get the Itext for a specific SelectChoice and specific itext form
 * @param s
 * @param form
 * @return
 */
public String getSelectChoiceText(SelectChoice sel,String form){
  return getText(sel.getTextID(),form);
}","/** 
 * Get the Itext for a specific SelectChoice and specific itext form, returns null if the form requested is not available for the select choice
 * @param s
 * @param form
 * @return
 */
public String getSelectChoiceText(SelectChoice sel,String form){
  if (getSelectTextForms(sel).contains(form)) {
    return getText(sel.getTextID(),form);
  }
 else {
    return null;
  }
}",0.7375415282392026
145147,"public XPathNodeset eval(FormInstance m,EvaluationContext evalContext){
  TreeReference genericRef=getReference();
  if (m.getTemplatePath(genericRef) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  TreeReference ref=genericRef.contextualize(evalContext.getContextRef());
  Vector<TreeReference> nodesetRefs=m.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,evalContext);
}","public XPathNodeset eval(FormInstance m,EvaluationContext evalContext){
  TreeReference genericRef=getReference();
  if (genericRef.isAbsolute() && m.getTemplatePath(genericRef) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  TreeReference ref=genericRef.contextualize(evalContext.getContextRef());
  Vector<TreeReference> nodesetRefs=m.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,evalContext);
}",0.9797145003756574
145148,"/** 
 * get value of attribute with namespace:name' in the vector
 * @param index
 * @return String
 */
public String getAttributeValue(String namespace,String name){
  return getAttributeValue(getAttribute(namespace,name));
}","/** 
 * get value of attribute with namespace:name' in the vector
 * @param index
 * @return String
 */
public String getAttributeValue(String namespace,String name){
  TreeElement element=getAttribute(namespace,name);
  return element == null ? null : getAttributeValue(element);
}",0.7874015748031497
145149,"/** 
 * Sets the given attribute; a value of null removes the attribute
 */
public void setAttribute(String namespace,String name,String value){
  if (namespace == null)   namespace=""String_Node_Str"";
  for (int i=attributes.size() - 1; i >= 0; i--) {
    TreeElement attribut=attributes.elementAt(i);
    if (attribut.name.equals(name) && namespace == null || namespace.equals(attribut.namespace)) {
      if (value == null) {
        attributes.removeElementAt(i);
      }
 else {
        attribut.setValue(new UncastData(value));
      }
      return;
    }
  }
  TreeElement attr=TreeElement.constructAttributeElement(namespace,name);
  attr.setValue(new UncastData(value));
  attr.setParent(this);
  attributes.addElement(attr);
}","/** 
 * Sets the given attribute; a value of null removes the attribute
 */
public void setAttribute(String namespace,String name,String value){
  for (int i=attributes.size() - 1; i >= 0; i--) {
    TreeElement attribut=attributes.elementAt(i);
    if (attribut.name.equals(name) && (namespace == null || namespace.equals(attribut.namespace))) {
      if (value == null) {
        attributes.removeElementAt(i);
      }
 else {
        attribut.setValue(new UncastData(value));
      }
      return;
    }
  }
  if (namespace == null) {
    namespace=""String_Node_Str"";
  }
  TreeElement attr=TreeElement.constructAttributeElement(namespace,name);
  attr.setValue(new UncastData(value));
  attr.setParent(this);
  attributes.addElement(attr);
}",0.504054054054054
145150,"/** 
 * Retrieves the TreeElement representing the attribute at the provided namespace and name, or null if none exists. If 'null' is provided for the namespace, it will match the first attribute with the matching name.
 * @param index
 * @return TreeElement
 */
public TreeElement getAttribute(String namespace,String name){
  for (  TreeElement attribute : attributes) {
    if (attribute.getName().equals(name) && namespace == null || namespace.equals(attribute)) {
      return attribute;
    }
  }
  return null;
}","/** 
 * Retrieves the TreeElement representing the attribute at the provided namespace and name, or null if none exists. If 'null' is provided for the namespace, it will match the first attribute with the matching name.
 * @param index
 * @return TreeElement
 */
public TreeElement getAttribute(String namespace,String name){
  for (  TreeElement attribute : attributes) {
    if (attribute.getName().equals(name) && (namespace == null || namespace.equals(attribute.namespace))) {
      return attribute;
    }
  }
  return null;
}",0.9885714285714284
145151,"/** 
 * true if the answer to this question yields xml tree data, not a simple string value
 */
public boolean isComplex(){
  return (dynamicChoices != null && dynamicChoices.copyMode);
}","/** 
 * true if the answer to this question yields xml tree data, not a simple string value
 */
public boolean isComplex(){
  System.out.println(""String_Node_Str"" + dynamicChoices);
  if (dynamicChoices != null)   System.out.println(""String_Node_Str"" + dynamicChoices.copyMode);
  return (dynamicChoices != null && dynamicChoices.copyMode);
}",0.6843100189035917
145152,"/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent() != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}","/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent() != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    return ANSWER_CONSTRAINT_VIOLATED;
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else   if (complexQuestion) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}",0.8598615916955017
145153,"private static String getLabel(Element e,FormDef f){
  boolean outputFound=false;
  boolean otherStuffFound=false;
  Vector outputs=new Vector();
  for (int i=0; i < e.getChildCount(); i++) {
    if (e.getType(i) != Node.TEXT) {
      if (e.getType(i) == Node.ELEMENT && ""String_Node_Str"".equals(e.getElement(i).getName())) {
        outputFound=true;
        outputs.addElement(new Integer(i));
      }
 else {
        otherStuffFound=true;
      }
    }
  }
  if (outputFound && !otherStuffFound) {
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < outputs.size() + 1; i++) {
      int ixStart=(i == 0 ? 0 : ((Integer)outputs.elementAt(i - 1)).intValue() + 1);
      if (ixStart < e.getChildCount()) {
        String piece=getXMLText(e,ixStart,false);
        if (piece != null) {
          sb.append(piece);
        }
      }
      if (i < outputs.size()) {
        int ix=((Integer)outputs.elementAt(i)).intValue();
        sb.append(""String_Node_Str"" + parseOutput(e.getElement(ix),f) + ""String_Node_Str"");
      }
    }
    return sb.toString().trim();
  }
 else {
    return getXMLText(e,true);
  }
}","private static String getLabel(Element e,FormDef f){
  if (e.getChildCount() == 0)   return null;
  recurseForOutput(e,f);
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < e.getChildCount(); i++) {
    if (e.getType(i) != Node.TEXT && !(e.getChild(i) instanceof String)) {
      Object b=e.getChild(i);
      if (b instanceof String)       System.out.println(""String_Node_Str"");
      sb.append(XFormSerializer.elementToString((Element)b));
    }
 else {
      sb.append(e.getText(i));
    }
  }
  String s=sb.toString().trim();
  return s;
}",0.2347305389221557
145154,"public DummyReference(){
}","public DummyReference(){
  super();
}",0.8253968253968254
145155,"public Externalizable getRecordForValue(String fieldName,Object value) throws NoSuchElementException, InvalidIndexException {
  return indexedStorage().getRecordForValue(fieldName,value);
}","public Externalizable getRecordForValue(String fieldName,Object value) throws NoSuchElementException, InvalidIndexException {
  return ((SerializationWrapper)indexedStorage().getRecordForValue(fieldName,value)).getData();
}",0.9174757281553398
145156,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  contentType=ExtUtil.nullIfEmpty(ExtUtil.readString(in));
  status=(int)ExtUtil.readNumeric(in);
  if (status == TransportMessageStatus.QUEUED) {
    status=TransportMessageStatus.CACHED;
  }
  failureReason=ExtUtil.readString(in);
  failureCount=(int)ExtUtil.readNumeric(in);
  failureCount=0;
  queueIdentifier=ExtUtil.readString(in);
  created=ExtUtil.readDate(in);
  created=created.getTime() == 0 ? null : created;
  sent=ExtUtil.readDate(in);
  sent=sent.getTime() == 0 ? null : sent;
  queuingDeadline=ExtUtil.readNumeric(in);
  recordId=(int)ExtUtil.readNumeric(in);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  contentType=ExtUtil.nullIfEmpty(ExtUtil.readString(in));
  status=(int)ExtUtil.readNumeric(in);
  failureReason=ExtUtil.readString(in);
  failureCount=(int)ExtUtil.readNumeric(in);
  failureCount=0;
  queueIdentifier=ExtUtil.readString(in);
  created=ExtUtil.readDate(in);
  created=created.getTime() == 0 ? null : created;
  sent=ExtUtil.readDate(in);
  sent=sent.getTime() == 0 ? null : sent;
  queuingDeadline=ExtUtil.readNumeric(in);
  recordId=(int)ExtUtil.readNumeric(in);
  if (status == TransportMessageStatus.QUEUED && queuingDeadline < new Date().getTime()) {
    status=TransportMessageStatus.CACHED;
  }
}",0.4126760563380282
145157,"public void sendData(){
  initDisplay();
  if (this.message == null)   throw new RuntimeException(""String_Node_Str"");
  try {
    System.out.println(""String_Node_Str"" + this.message.getCacheIdentifier());
    SenderThread thread=TransportService.send(message);
    thread.addListener(observer);
  }
 catch (  TransportException e) {
    e.printStackTrace();
    if (observer != null) {
      observer.receiveError(e.getMessage());
    }
  }
}","public void sendData(){
  FormTransportSubmitStatusScreen screen=createDisplay();
  if (this.message == null)   throw new RuntimeException(""String_Node_Str"");
  try {
    System.out.println(""String_Node_Str"" + this.message.getCacheIdentifier());
    SenderThread thread=TransportService.send(message);
    screen.reinit(this.message.getCacheIdentifier());
    thread.addListener(observer);
  }
 catch (  TransportException e) {
    e.printStackTrace();
    if (observer != null) {
      observer.receiveError(e.getMessage());
    }
  }
}",0.8947906026557712
145158,"public void reinit(String cacheId){
  setCacheId(cacheId);
  this.okCommand=new Command(Localization.get(""String_Node_Str""),Command.OK,1);
  this.msg=new StringItem(null,Localization.get(""String_Node_Str""));
  addCommand(this.okCommand);
  append(new Spacer(80,0));
  append(this.msg);
  initTimer();
}","public void reinit(String cacheId){
  setCacheId(cacheId);
  this.okCommand=new Command(Localization.get(""String_Node_Str""),Command.OK,1);
  addCommand(this.okCommand);
  initTimer();
}",0.7597535934291582
145159,"public FormTransportSubmitStatusScreen(CommandListener listener,TransportResponseProcessor responder){
  super(Localization.get(""String_Node_Str""));
  setCommandListener(listener);
  this.responder=responder;
}","public FormTransportSubmitStatusScreen(CommandListener listener,TransportResponseProcessor responder){
  super(Localization.get(""String_Node_Str""));
  setCommandListener(listener);
  this.responder=responder;
  this.msg=new StringItem(null,Localization.get(""String_Node_Str""));
  append(new Spacer(80,0));
  append(this.msg);
}",0.7821229050279329
145160,"/** 
 * @param status
 */
public void updateStatus(TransportMessage transportMessage){
  this.counter+=REFRESH_INTERVAL;
  int status=transportMessage.getStatus();
  if (status != TransportMessageStatus.QUEUED)   this.timer.cancel();
  String message;
switch (status) {
case TransportMessageStatus.QUEUED:
    message=(this.counter < TIMEOUT ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str""));
  break;
case TransportMessageStatus.SENT:
message=getResponseMessage(transportMessage);
break;
case TransportMessageStatus.CACHED:
message=Localization.get(""String_Node_Str"");
break;
default :
message=Localization.get(""String_Node_Str"");
break;
}
this.msg.setText(message);
}","/** 
 * @param status
 */
public void updateStatus(TransportMessage transportMessage){
  this.counter+=REFRESH_INTERVAL;
  int status=transportMessage.getStatus();
  if (status != TransportMessageStatus.QUEUED) {
    this.timer.cancel();
  }
  String message;
switch (status) {
case TransportMessageStatus.QUEUED:
    message=(this.counter < TIMEOUT ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str""));
  break;
case TransportMessageStatus.SENT:
message=getResponseMessage(transportMessage);
break;
case TransportMessageStatus.CACHED:
message=Localization.get(""String_Node_Str"");
break;
default :
message=Localization.get(""String_Node_Str"");
break;
}
this.msg.setText(message);
}",0.9942857142857144
145161,"public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  prompt.setText(fep.getShortText());
  IAnswerData data=fep.getAnswerValue();
  if (data != null) {
    answer.setText(data.getDisplayText());
  }
}","public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  prompt.setText(WidgetUtil.getAppropriateTextForm(fep,fep.getTextID()));
  IAnswerData data=fep.getAnswerValue();
  if (data != null) {
    answer.setText(data.getDisplayText());
  }
}",0.8484848484848485
145162,"public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  ImageItem imItem=getImageItem(fep);
  if (imItem != null)   c.add(imItem);
  String caption;
  if (fep.getAvailableTextFormTypes(fep.getTextID()).contains(""String_Node_Str"")) {
    caption=fep.getLongText();
  }
 else   if (fep.getAvailableTextFormTypes(fep.getTextID()).contains(""String_Node_Str"")) {
    caption=fep.getShortText();
  }
 else {
    caption=fep.getDefaultText();
  }
  prompt.setText(caption);
  updateWidget(fep);
  IAnswerData data=fep.getAnswerValue();
  if (data != null && changeFlags == FormElementStateListener.CHANGE_INIT) {
    setWidgetValue(data.getValue());
  }
}","public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  ImageItem imItem=getImageItem(fep);
  if (imItem != null)   c.add(imItem);
  prompt.setText(WidgetUtil.getAppropriateTextForm(fep,fep.getTextID()));
  updateWidget(fep);
  IAnswerData data=fep.getAnswerValue();
  if (data != null && changeFlags == FormElementStateListener.CHANGE_INIT) {
    setWidgetValue(data.getValue());
  }
}",0.6641366223908919
145163,"public void refreshWidget(FormEntryPrompt prompt,int changeFlags){
  String caption=prompt.getLongText();
  if (multiplicity != -1) {
    caption+=""String_Node_Str"" + multiplicity;
  }
  label.setText(caption);
}","public void refreshWidget(FormEntryPrompt prompt,int changeFlags){
  String caption=WidgetUtil.getAppropriateTextForm(prompt,prompt.getTextID());
  if (multiplicity != -1) {
    caption+=""String_Node_Str"" + multiplicity;
  }
  label.setText(caption);
}",0.8663793103448276
145164,"public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  prompt.setText(fep.getLongText());
}","public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  prompt.setText(WidgetUtil.getAppropriateTextForm(fep,fep.getTextID()));
}",0.8132780082987552
145165,"/** 
 * @param status
 */
public void handleInvalidUser(int status,CommandListener listener){
  String s=Localization.get(""String_Node_Str"");
  if (status == UserValidator.USER_EXISTS) {
    s+=""String_Node_Str"" + Localization.get(""String_Node_Str"",new String[]{this.view.getUsername()});
  }
  if (status == UserValidator.USERORPASSWD_MISSING) {
    s+=""String_Node_Str"" + Localization.get(""String_Node_Str"");
  }
  if (status == UserValidator.MISMATCHED_PASSWORDS) {
    s+=""String_Node_Str"" + Localization.get(""String_Node_Str"");
  }
  J2MEDisplay.showError(""String_Node_Str"",s);
}","/** 
 * @param status
 */
public void handleInvalidUser(int status,CommandListener listener){
  String s=Localization.get(""String_Node_Str"");
  if (status == UserValidator.USER_EXISTS) {
    s+=""String_Node_Str"" + Localization.get(""String_Node_Str"",new String[]{this.view.getUsername()});
  }
  if (status == UserValidator.USERORPASSWD_MISSING) {
    s+=""String_Node_Str"" + Localization.get(""String_Node_Str"");
  }
  if (status == UserValidator.MISMATCHED_PASSWORDS) {
    s+=""String_Node_Str"" + Localization.get(""String_Node_Str"");
  }
  J2MEDisplay.showError(null,s);
}",0.9818181818181818
145166,"public String[] getHeaders(boolean detailed){
  Text[] text;
  text=shortDetail.getHeaders();
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(instance);
  }
  return output;
}","public String[] getHeaders(boolean detailed){
  Text[] text;
  if (!detailed) {
    text=shortDetail.getHeaders();
  }
 else {
    text=longDetail.getHeaders();
  }
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(instance);
  }
  return output;
}",0.8725314183123878
145167,"public String[] getLongFields(E e){
  Text[] text=shortDetail.getTemplates();
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(instance);
  }
  return output;
}","public String[] getLongFields(E e){
  loader.prepare(e);
  FormInstance specificInstance=loader.loadInstance(longDetail.getInstance());
  Text[] text=longDetail.getTemplates();
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(specificInstance);
  }
  return output;
}",0.7878787878787878
145168,"public void prepare(PatientReferral r){
  this.r=r;
  this.c=null;
}","public void prepare(PatientReferral r){
  this.r=r;
  preloader=new PatientReferralPreloader(r);
  this.c=null;
}",0.7513812154696132
145169,"protected Object resolveReferenceData(String reference,String key){
  String refType=references.get(reference).toLowerCase();
  if (refType.equals(""String_Node_Str"")) {
  }
 else   if (refType.equals(""String_Node_Str"")) {
    return getCase().getProperty(key);
  }
  return null;
}","protected Object resolveReferenceData(String reference,String key){
  String refType=references.get(reference).toLowerCase();
  if (refType.equals(""String_Node_Str"")) {
    return preloader.handlePreload(key);
  }
 else   if (refType.equals(""String_Node_Str"")) {
    return getCase().getProperty(key);
  }
  return null;
}",0.9320066334991708
145170,"public String evaluate(FormInstance context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument == null) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
XPathExpression expression=XPathParseTool.parseXPath(argument);
EvaluationContext temp=new EvaluationContext(new EvaluationContext(),context.getRoot().getRef());
return (String)expression.eval(context,temp);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (Enumeration en=arguments.elements(); en.hasMoreElements(); ) {
ret+=((Text)en.nextElement()).evaluate() + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}","public String evaluate(FormInstance context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument.equals(""String_Node_Str"")) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
XPathExpression expression=XPathParseTool.parseXPath(argument);
EvaluationContext temp=new EvaluationContext(new EvaluationContext(),context.getRoot().getRef());
for (Enumeration en=arguments.keys(); en.hasMoreElements(); ) {
String key=(String)en.nextElement();
temp.setVariable(key,arguments.get(key));
}
return (String)expression.eval(context,temp);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (Enumeration en=arguments.elements(); en.hasMoreElements(); ) {
ret+=((Text)en.nextElement()).evaluate() + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}",0.8988128886376484
145171,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.write(out,filter);
  ExtUtil.write(out,context);
  ExtUtil.write(out,new ExtWrapList(headers));
  ExtUtil.write(out,new ExtWrapList(templates));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.write(out,filter);
  ExtUtil.write(out,context);
  ExtUtil.write(out,new ExtWrapList(headers));
  ExtUtil.write(out,new ExtWrapList(templates));
  ExtUtil.writeInts(out,headerHints);
  ExtUtil.writeInts(out,templateHints);
}",0.8792569659442725
145172,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  filter=(Filter)ExtUtil.read(in,Filter.class,pf);
  context=(FormInstance)ExtUtil.read(in,FormInstance.class,pf);
  headers=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
  templates=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  filter=(Filter)ExtUtil.read(in,Filter.class,pf);
  context=(FormInstance)ExtUtil.read(in,FormInstance.class,pf);
  headers=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
  templates=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
  headerHints=(int[])ExtUtil.readInts(in);
  templateHints=(int[])ExtUtil.readInts(in);
}",0.9111111111111112
145173,"public Detail(String id,Text title,FormInstance context,Vector<Text> headers,Vector<Text> templates,Filter filter){
  this.id=id;
  this.title=title;
  this.context=context;
  this.headers=headers;
  this.templates=templates;
  this.filter=filter;
}","public Detail(String id,Text title,FormInstance context,Vector<Text> headers,Vector<Text> templates,Filter filter,int[] headerHints,int[] templateHints){
  this.id=id;
  this.title=title;
  this.context=context;
  this.headers=headers;
  this.templates=templates;
  this.filter=filter;
  this.headerHints=headerHints;
  this.templateHints=templateHints;
}",0.8245033112582781
145174,"public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  ;
  Vector<Text> templates=new Vector<Text>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter);
  return d;
}","public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  Vector<Text> templates=new Vector<Text>();
  Vector<Integer> headerHints=new Vector<Integer>();
  Vector<Integer> templateHints=new Vector<Integer>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      headerHints.addElement(new Integer(getWidth()));
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      templateHints.addElement(new Integer(getWidth()));
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter,toArray(headerHints),toArray(templateHints));
  return d;
}",0.8956343792633015
145175,"public void configureApp(MIDlet m){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  J2MEDisplay.init(m);
  loadModules();
  setProperties();
  registerAddtlStorage();
  StorageManager.repairAll();
  manager=new CommCareManager();
  manager.init(CommCareUtil.getProfileReference());
  UserUtility.populateAdminUser();
  inDemoMode=false;
  purgeScheduler();
  manager.initialize();
  LanguageUtils.initializeLanguage(true,""String_Node_Str"");
}","public void configureApp(MIDlet m){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  J2MEDisplay.init(m);
  loadModules();
  setProperties();
  registerAddtlStorage();
  StorageManager.repairAll();
  manager=new CommCareManager();
  manager.init(CommCareUtil.getProfileReference());
  UserUtility.populateAdminUser();
  inDemoMode=false;
  purgeScheduler();
  Localization.setLocale(""String_Node_Str"");
  manager.initialize();
  LanguageUtils.initializeLanguage(true,""String_Node_Str"");
}",0.9159248269040554
145176,"public CommCareHomeScreen(CommCareHomeController controller,Vector<Suite> suites,boolean adminMode,boolean reviewEnabled){
  super(""String_Node_Str"",List.IMPLICIT);
  this.controller=controller;
  Enumeration en=suites.elements();
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      if (""String_Node_Str"".equals(m.getId())) {
        for (        String id : m.getCommandIds()) {
          Entry e=suite.getEntries().get(id);
          int location=append(e.getText().evaluate(),null);
          suiteTable.put(new Integer(location),suite);
          entryTable.put(new Integer(location),e);
        }
      }
 else       if (m.getRoot().equals(""String_Node_Str"")) {
        int location=append(m.getName().evaluate(),null);
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
  if (reviewEnabled) {
    append(reviewRecent);
  }
  append(sendAllUnsent);
  setSendUnsent();
  setCommandListener(controller);
  setSelectCommand(select);
  addCommand(exit);
  if (adminMode) {
    addCommand(admSettings);
    addCommand(admNewUser);
    addCommand(admEditUsers);
    addCommand(admBackupRestore);
    addCommand(admResetDemo);
    addCommand(admUpgrade);
  }
}","public CommCareHomeScreen(CommCareHomeController controller,Vector<Suite> suites,boolean adminMode,boolean reviewEnabled){
  super(""String_Node_Str"",List.IMPLICIT);
  this.controller=controller;
  Enumeration en=suites.elements();
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      if (""String_Node_Str"".equals(m.getId())) {
        for (        String id : m.getCommandIds()) {
          Entry e=suite.getEntries().get(id);
          int location=append(e.getText().evaluate(),null);
          suiteTable.put(new Integer(location),suite);
          entryTable.put(new Integer(location),e);
        }
      }
 else       if (m.getRoot().equals(""String_Node_Str"")) {
        int location=append(m.getName().evaluate(),null);
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
  if (reviewEnabled) {
    reviewRecent=new ChoiceItem(Localization.get(""String_Node_Str""),null,List.IMPLICIT);
    append(reviewRecent);
  }
  append(sendAllUnsent);
  setSendUnsent();
  setCommandListener(controller);
  setSelectCommand(select);
  addCommand(exit);
  if (adminMode) {
    addCommand(admSettings);
    addCommand(admNewUser);
    addCommand(admEditUsers);
    addCommand(admBackupRestore);
    addCommand(admResetDemo);
    addCommand(admUpgrade);
  }
}",0.9615814994405072
145177,"public void populateDynamicChoices(ItemsetBinding itemset,TreeElement questionElement){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  TreeReference contextRef=questionElement.getParent().getRef();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getInstance(),new EvaluationContext(exprEvalContext,contextRef));
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
 else {
      value=itemset.valueExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  itemset.setChoices(choices,this.getLocalizer());
}","public void populateDynamicChoices(ItemsetBinding itemset){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getInstance(),new EvaluationContext(exprEvalContext,itemset.contextRef));
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
 else {
      value=itemset.valueExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  if (choices.size() == 0) {
    throw new RuntimeException(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
  }
  itemset.setChoices(choices,this.getLocalizer());
}",0.9018245004344048
145178,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,nodesetRef);
  ExtUtil.write(out,new ExtWrapTagged(nodesetExpr));
  ExtUtil.write(out,labelRef);
  ExtUtil.write(out,new ExtWrapTagged(labelExpr));
  ExtUtil.write(out,new ExtWrapNullable(valueRef));
  ExtUtil.write(out,new ExtWrapNullable(valueExpr == null ? null : new ExtWrapTagged(valueExpr)));
  ExtUtil.write(out,new ExtWrapNullable(copyRef));
  ExtUtil.writeBool(out,labelIsItext);
  ExtUtil.writeBool(out,copyMode);
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,nodesetRef);
  ExtUtil.write(out,new ExtWrapTagged(nodesetExpr));
  ExtUtil.write(out,contextRef);
  ExtUtil.write(out,labelRef);
  ExtUtil.write(out,new ExtWrapTagged(labelExpr));
  ExtUtil.write(out,new ExtWrapNullable(valueRef));
  ExtUtil.write(out,new ExtWrapNullable(valueExpr == null ? null : new ExtWrapTagged(valueExpr)));
  ExtUtil.write(out,new ExtWrapNullable(copyRef));
  ExtUtil.writeBool(out,labelIsItext);
  ExtUtil.writeBool(out,copyMode);
}",0.9688972667295004
145179,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  nodesetRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  nodesetExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  labelRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  labelExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  valueRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  valueExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapNullable(new ExtWrapTagged()),pf);
  copyRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  labelIsItext=ExtUtil.readBool(in);
  copyMode=ExtUtil.readBool(in);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  nodesetRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  nodesetExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  contextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  labelRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  labelExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  valueRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  valueExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapNullable(new ExtWrapTagged()),pf);
  copyRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  labelIsItext=ExtUtil.readBool(in);
  copyMode=ExtUtil.readBool(in);
}",0.954515491100857
145180,"public Vector<SelectChoice> getSelectChoices(){
  QuestionDef q=getQuestion();
  ItemsetBinding itemset=q.getDynamicChoices();
  if (itemset != null) {
    if (!dynamicChoicesPopulated) {
      form.populateDynamicChoices(itemset,mTreeElement);
      dynamicChoicesPopulated=true;
    }
    Vector<SelectChoice> choices=itemset.getChoices();
    if (choices.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    return choices;
  }
 else {
    return getQuestion().getChoices();
  }
}","public Vector<SelectChoice> getSelectChoices(){
  QuestionDef q=getQuestion();
  ItemsetBinding itemset=q.getDynamicChoices();
  if (itemset != null) {
    if (!dynamicChoicesPopulated) {
      form.populateDynamicChoices(itemset);
      dynamicChoicesPopulated=true;
    }
    return itemset.getChoices();
  }
 else {
    return getQuestion().getChoices();
  }
}",0.7072330654420207
145181,"private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),qparent));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
}","private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.contextRef=getFormElementRef(qparent);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),itemset.contextRef));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
}",0.9819548872180452
145182,"/** 
 * Write everything from input stream to output stream, byte by byte then close the streams
 * @param in
 * @param out
 * @throws IOException
 */
public static void writeFromInputToOutput(InputStream in,OutputStream out) throws IOException {
  int val=in.read();
  while (val != -1) {
    System.out.println(""String_Node_Str"" + val);
    out.write(val);
    val=in.read();
  }
}","/** 
 * Write everything from input stream to output stream, byte by byte then close the streams
 * @param in
 * @param out
 * @throws IOException
 */
public static void writeFromInputToOutput(InputStream in,OutputStream out) throws IOException {
  int val=in.read();
  while (val != -1) {
    out.write(val);
    val=in.read();
  }
}",0.8507670850767085
145183,"public static Long toInt(Object o){
  Double val=toNumeric(o);
  return new Long((long)Math.floor(val.doubleValue()));
}","public static Double toInt(Object o){
  Double val=toNumeric(o);
  if (val.isInfinite() || val.isNaN()) {
    return val;
  }
 else   if (val.doubleValue() >= Long.MAX_VALUE || val.doubleValue() <= Long.MIN_VALUE) {
    return val;
  }
 else {
    long l=val.longValue();
    Double dbl=new Double(l);
    if (l == 0 && (val.doubleValue() < 0. || val.equals(new Double(-0.)))) {
      dbl=new Double(-0.);
    }
    return dbl;
  }
}",0.104882459312839
145184,"public static Date toDate(Object o){
  if (o instanceof Double) {
    double d=((Double)o).doubleValue();
    if (Math.abs(d - (int)d) > 1.0e-12) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    o=toInt(o);
  }
  if (o instanceof Long) {
    Date dt=DateUtils.getDate(1970,1,1);
    dt.setTime(dt.getTime() + ((Long)o).longValue() * 86400000l + 43200000l);
    return DateUtils.roundDate(dt);
  }
 else   if (o instanceof String) {
    Date d=DateUtils.parseDate((String)o);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}","public static Date toDate(Object o){
  if (o instanceof Double) {
    Double n=toInt(o);
    if (n.isInfinite() || n.isNaN() || n.doubleValue() > Integer.MAX_VALUE || n.doubleValue() < Integer.MIN_VALUE) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    return DateUtils.dateAdd(DateUtils.getDate(1970,1,1),n.intValue());
  }
 else   if (o instanceof String) {
    Date d=DateUtils.parseDate((String)o);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}",0.7678812415654521
145185,"public String substituteStringArgs(String templateStr){
  return form.fillTemplateString(templateStr,index.getReference());
}","public String substituteStringArgs(String templateStr){
  if (templateStr == null) {
    return null;
  }
  return form.fillTemplateString(templateStr,index.getReference());
}",0.8333333333333334
145186,"public void saveAndExit(){
  transitions.formEntrySaved(this.getModel().getForm(),this.getModel().getForm().getInstance(),true);
}","public void saveAndExit(){
  this.getModel().getForm().postProcessInstance();
  transitions.formEntrySaved(this.getModel().getForm(),this.getModel().getForm().getInstance(),true);
}",0.8360128617363344
145187,"public TreeReference getRef(){
  TreeElement elem=this;
  TreeReference ref=TreeReference.selfRef();
  while (elem != null) {
    TreeReference step;
    if (name != null) {
      step=TreeReference.selfRef();
      step.add(this.name,this.multiplicity);
    }
 else {
      step=TreeReference.rootRef();
    }
    ref=ref.parent(step);
    elem=elem.parent;
  }
  return ref;
}","public TreeReference getRef(){
  TreeElement elem=this;
  TreeReference ref=TreeReference.selfRef();
  while (elem != null) {
    TreeReference step;
    if (elem.name != null) {
      step=TreeReference.selfRef();
      step.add(elem.name,elem.multiplicity);
    }
 else {
      step=TreeReference.rootRef();
    }
    ref=ref.parent(step);
    elem=elem.parent;
  }
  return ref;
}",0.9724047306176083
145188,"public static Object getRefValue(FormInstance model,TreeReference ref){
  TreeElement node=((FormInstance)model).resolveReference(ref);
  if (node == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString() + ""String_Node_Str"");
  }
  return unpackValue(node.isRelevant() ? node.getValue() : null);
}","public static Object getRefValue(FormInstance model,TreeReference ref){
  TreeElement node=model.resolveReference(ref);
  if (node == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString() + ""String_Node_Str"");
  }
  return unpackValue(node.isRelevant() ? node.getValue() : null);
}",0.9592476489028212
145189,"protected FormEntryController getController(){
  Vector<IPreloadHandler> preloaders=JRDemoContext._().getPreloaders();
  FormDefFetcher fetcher=new FormDefFetcher(new RMSRetreivalMethod(formID),preloaders);
  return new FormEntryController(new FormEntryViewFactory(),fetcher,false);
}","protected FormEntryController getController(){
  Vector<IPreloadHandler> preloaders=JRDemoContext._().getPreloaders();
  FormDefFetcher fetcher=new FormDefFetcher(new RMSRetreivalMethod(formID),preloaders);
  return new FormEntryController(new JRDemoFormEntryViewFactory(),fetcher,false);
}",0.989547038327526
145190,"public FormEntryController(int savedInstanceID,IFormEntryViewFactory viewFactory,FormDefFetcher fetcher,boolean readOnly,FormIndex firstQuestion,DataCaptureServiceRegistry dataCapture){
  FormDef theForm=fetcher.getFormDef();
  this.dataCapture=dataCapture;
  model=new FormEntryModel(theForm,savedInstanceID,firstQuestion,readOnly);
  viewFactory.getFormEntryView(""String_Node_Str"",model,this);
}","public FormEntryController(int savedInstanceID,IFormEntryViewFactory viewFactory,FormDefFetcher fetcher,boolean readOnly,FormIndex firstQuestion,DataCaptureServiceRegistry dataCapture){
  FormDef theForm=fetcher.getFormDef();
  this.dataCapture=dataCapture;
  model=new FormEntryModel(theForm,savedInstanceID,firstQuestion,readOnly);
  viewFactory.getFormEntryView(model,this);
}",0.9768041237113402
145191,"IFormEntryView getFormEntryView(String viewType,FormEntryModel model,FormEntryController controller);","IFormEntryView getFormEntryView(FormEntryModel model,FormEntryController controller);",0.913978494623656
145192,"public IFormEntryView getFormEntryView(String viewType,FormEntryModel model,FormEntryController controller){
  return new Chatterbox(viewType,model,controller);
}","public IFormEntryView getFormEntryView(FormEntryModel model,FormEntryController controller){
  return new Chatterbox(title,model,controller);
}",0.918032786885246
145193,"public void removeAll(){
  storage.removeAll();
}","public void removeAll(EntityFilter ef){
  storage.removeAll(ef);
}",0.8521739130434782
145194,"/** 
 * @param message
 * @throws IOException
 */
public void updateMessage(TransportMessage message) throws TransportException {
  try {
    if (message.getStatus() == TransportMessageStatus.CACHED) {
      IStorageUtilityIndexed cache=storage(Q_STORENAME);
      if (cache.getIDsForValue(""String_Node_Str"",message.getCacheIdentifier()).size() > 0) {
        storage(Q_STORENAME).write(message);
      }
    }
  }
 catch (  StorageFullException e) {
    throw new TransportException(e);
  }
}","/** 
 * @param message
 * @throws IOException
 */
public void updateMessage(TransportMessage message) throws TransportException {
  try {
    if (message.getStatus() == TransportMessageStatus.CACHED) {
      IStorageUtilityIndexed cache=storage(Q_STORENAME);
      if (cache.getIDsForValue(""String_Node_Str"",message.getCacheIdentifier()).size() > 0) {
        storage(Q_STORENAME).write(message);
      }
      updateCachedCounts();
    }
  }
 catch (  StorageFullException e) {
    throw new TransportException(e);
  }
}",0.9723865877712032
145195,"private void processCaseReferral(TreeElement referral,Case c,Date date) throws MalformedCaseModelException {
  Vector referralIds=referral.getChildrenWithName(""String_Node_Str"");
  if (referralIds.size() < 1) {
    throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
  }
  String referralId=(String)serializer.serializeAnswerData(((TreeElement)referralIds.elementAt(0)).getValue());
  Date followup=DateUtils.dateAdd(date,3);
  Vector followupDates=referral.getChildrenWithName(""String_Node_Str"");
  if (followupDates.size() >= 1 && ((TreeElement)followupDates.elementAt(0)).isRelevant()) {
    followup=(Date)(((TreeElement)followupDates.elementAt(0))).getValue().getValue();
  }
  Vector childElements=referral.getChildren();
  for (int i=0; i < childElements.size(); ++i) {
    TreeElement kid=(TreeElement)childElements.elementAt(i);
    if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String typeString=(String)serializer.serializeAnswerData(((TreeElement)types.elementAt(0)).getValue());
      Vector referralTypeList=DateUtils.split(typeString,""String_Node_Str"",false);
      for (int ir=0; ir < referralTypeList.size(); ++ir) {
        String referralType=(String)referralTypeList.elementAt(ir);
        PatientReferral r=new PatientReferral(referralType,date,referralId,c.getCaseId(),followup);
        commit(r);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String refType=(String)serializer.serializeAnswerData((((TreeElement)types.elementAt(0)).getValue()));
      PatientReferral r=getReferral(referralId,refType);
      r.setDateDue(followup);
      Vector dateCloseds=kid.getChildrenWithName(""String_Node_Str"");
      if (dateCloseds.size() > 0) {
        r.close();
      }
      commit(r);
    }
  }
}","private void processCaseReferral(TreeElement referral,Case c,Date date) throws MalformedCaseModelException {
  Vector referralIds=referral.getChildrenWithName(""String_Node_Str"");
  if (referralIds.size() < 1) {
    throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
  }
  String referralId=(String)serializer.serializeAnswerData(((TreeElement)referralIds.elementAt(0)).getValue());
  Date followup=DateUtils.dateAdd(date,3);
  Vector followupDates=referral.getChildrenWithName(""String_Node_Str"");
  if (followupDates.size() >= 1 && ((TreeElement)followupDates.elementAt(0)).isRelevant()) {
    followup=(Date)(((TreeElement)followupDates.elementAt(0))).getValue().getValue();
  }
  Vector childElements=referral.getChildren();
  for (int i=0; i < childElements.size(); ++i) {
    TreeElement kid=(TreeElement)childElements.elementAt(i);
    if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String typeString=(String)serializer.serializeAnswerData(((TreeElement)types.elementAt(0)).getValue());
      Vector referralTypeList=DateUtils.split(typeString,""String_Node_Str"",false);
      for (int ir=0; ir < referralTypeList.size(); ++ir) {
        String referralType=(String)referralTypeList.elementAt(ir);
        PatientReferral r=new PatientReferral(referralType,date,referralId,c.getCaseId(),followup);
        commit(r);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String refType=(String)serializer.serializeAnswerData((((TreeElement)types.elementAt(0)).getValue()));
      PatientReferral r=getReferral(referralId,refType);
      r.setDateDue(followup);
      Vector dateCloseds=kid.getChildrenWithName(""String_Node_Str"");
      if (dateCloseds.size() > 0 && ((TreeElement)dateCloseds.elementAt(0)).isRelevant()) {
        r.close();
      }
      commit(r);
    }
  }
}",0.9871382636655948
145196,"public Object getMetaData(String fieldName){
  if (fieldName.equals(""String_Node_Str"")) {
    return name;
  }
  if (fieldName.equals(""String_Node_Str"")) {
    return model.schema;
  }
 else {
    throw new IllegalArgumentException();
  }
}","public Object getMetaData(String fieldName){
  if (fieldName.equals(""String_Node_Str"")) {
    return name;
  }
  if (fieldName.equals(""String_Node_Str"")) {
    return ExtUtil.emptyIfNull(model.schema);
  }
 else {
    throw new IllegalArgumentException();
  }
}",0.7105788423153693
145197,"/** 
 * Write an object to the store. Will either add a new record, or update the existing record (if one exists) for the object's ID. This function should never be used in conjunction with add() and update() within the same StorageUtility
 * @param p object to store
 * @throws StorageFullException if there is not enough room to store the object
 */
public void write(Persistable p) throws StorageFullException {
  typeCheck(p);
  RMSRecordLoc newLoc=null;
synchronized (getAccessLock()) {
    RMSStorageInfo info=getInfoRecord();
    int id=p.getID();
    if (id == -1 && allocateIDs) {
      id=info.nextRecordID;
      p.setID(id);
      info.nextRecordID++;
    }
    byte[] data=ExtUtil.serialize(p);
    Hashtable idIndex=getIDIndexRecord();
    boolean recordExists=idIndex.containsKey(new Integer(id));
    setDirty();
    int bytesNeededEstimate=(recordExists ? 20 : 40);
    if (!setReserveBuffer(bytesNeededEstimate)) {
      setClean();
      throw new StorageFullException();
    }
    if (recordExists) {
      RMSRecordLoc loc=(RMSRecordLoc)idIndex.get(new Integer(id));
      newLoc=updateRecord(loc,data,info);
    }
 else {
      newLoc=addRecord(data,info);
      if (newLoc != null) {
        info.numRecords++;
      }
    }
    setReserveBuffer(0);
    if (newLoc == null) {
      setClean();
      throw new StorageFullException();
    }
    idIndex.put(new Integer(id),newLoc);
    commitIndex(info,idIndex);
    setClean();
    storageModified();
  }
}","/** 
 * Write an object to the store. Will either add a new record, or update the existing record (if one exists) for the object's ID. This function should never be used in conjunction with add() and update() within the same StorageUtility
 * @param p object to store
 * @throws StorageFullException if there is not enough room to store the object
 */
public void write(Persistable p) throws StorageFullException {
  typeCheck(p);
  RMSRecordLoc newLoc=null;
synchronized (getAccessLock()) {
    RMSStorageInfo info=getInfoRecord();
    int id=p.getID();
    if (allocateIDs) {
      if (id == -1) {
        id=info.nextRecordID;
        p.setID(id);
        info.nextRecordID++;
      }
 else       if (id >= info.nextRecordID) {
        info.nextRecordID=id + 1;
      }
    }
    byte[] data=ExtUtil.serialize(p);
    Hashtable idIndex=getIDIndexRecord();
    boolean recordExists=idIndex.containsKey(new Integer(id));
    setDirty();
    int bytesNeededEstimate=(recordExists ? 20 : 40);
    if (!setReserveBuffer(bytesNeededEstimate)) {
      setClean();
      throw new StorageFullException();
    }
    if (recordExists) {
      RMSRecordLoc loc=(RMSRecordLoc)idIndex.get(new Integer(id));
      newLoc=updateRecord(loc,data,info);
    }
 else {
      newLoc=addRecord(data,info);
      if (newLoc != null) {
        info.numRecords++;
      }
    }
    setReserveBuffer(0);
    if (newLoc == null) {
      setClean();
      throw new StorageFullException();
    }
    idIndex.put(new Integer(id),newLoc);
    commitIndex(info,idIndex);
    setClean();
    storageModified();
  }
}",0.924682099771764
145198,"public PropertyUpdateController(PropertiesScreen screen){
  this.screen=screen;
  changes=new Hashtable();
  this.screen.setCommandListener(this);
  this.screen.setItemStateListener(this);
  this.screen.addCommand(CMD_DONE);
  this.screen.addCommand(CMD_CANCEL);
}","public PropertyUpdateController(PropertyUpdateState listener,PropertiesScreen screen){
  this.screen=screen;
  this.listener=listener;
  changes=new Hashtable();
  this.screen.setCommandListener(this);
  this.screen.setItemStateListener(this);
  this.screen.addCommand(CMD_DONE);
  this.screen.addCommand(CMD_CANCEL);
}",0.8953687821612349
145199,"public void save(){
  boolean postProcessModified=model.getForm().postProcessModel();
  if (!model.isSaved() || postProcessModified) {
    FormDef form=model.getForm();
    IStorageUtility instances=StorageManager.getStorage(DataModelTree.STORAGE_KEY);
    DataModelTree instance=(DataModelTree)form.getDataModel();
    int instanceID=model.getInstanceID();
    instance.setName(form.getTitle());
    instance.setFormId(form.getID());
    instance.setDateSaved(new Date());
    try {
      instances.write(instance);
    }
 catch (    StorageFullException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
    model.modelSaved(instanceID);
  }
}","public void save(){
  boolean postProcessModified=model.getForm().postProcessModel();
  if (!model.isSaved() || postProcessModified) {
    FormDef form=model.getForm();
    IStorageUtility instances=StorageManager.getStorage(DataModelTree.STORAGE_KEY);
    DataModelTree instance=(DataModelTree)form.getDataModel();
    instance.setName(form.getTitle());
    instance.setFormId(form.getID());
    instance.setDateSaved(new Date());
    try {
      instances.write(instance);
    }
 catch (    StorageFullException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
    model.modelSaved(instance.getID());
  }
}",0.9625585023400935
145200,"public static Alert showError(String title,String message,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,null,AlertType.ERROR);
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    display.setCurrent(alert);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
  return alert;
}","public static Alert showError(String title,String message,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,null,AlertType.ERROR);
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    display.setCurrent(alert);
  }
 else {
    display.setCurrent(alert,next);
  }
  return alert;
}",0.9284994964753271
145201,"public void registerModule(Context context){
}","public void registerModule(){
}",0.8051948051948052
145202,"private static Selection getSelection(String choice,QuestionDef q){
  Selection s=new Selection(choice);
  if (q != null) {
    q.localizeSelectMap(null);
    int index=q.getSelectedItemIndex(choice);
    s.attachQuestionDef(q);
    return (index != -1 ? s : null);
  }
  return s;
}","private static Selection getSelection(String choice,QuestionDef q){
  Selection s=new Selection(choice);
  if (q != null) {
    if (q.getSelectItems() == null)     q.localizeSelectMap(null);
    int index=q.getSelectedItemIndex(choice);
    s.attachQuestionDef(q);
    return (index != -1 ? s : null);
  }
  return s;
}",0.8039867109634552
145203,"/** 
 * @param loginActivity
 */
private void init(){
  this.users=StorageManager.getStorage(User.STORAGE_KEY);
  boolean recordsExist=this.users.getNumRecords() > 0;
  System.out.println(""String_Node_Str"" + recordsExist);
  User tempUser=new User();
  tempUser.setUsername(""String_Node_Str"");
  if (recordsExist) {
    int lowestID=-1;
    IStorageIterator ui=users.iterate();
    while (ui.hasMore()) {
      int userID=ui.nextID();
      if (lowestID == -1 || userID < lowestID)       lowestID=userID;
    }
    tempUser=(User)users.read(lowestID);
  }
  initLoginControls(tempUser.getUsername());
  showVersions();
}","/** 
 * @param loginActivity
 */
private void init(){
  this.users=StorageManager.getStorage(User.STORAGE_KEY);
  boolean recordsExist=this.users.getNumRecords() > 0;
  System.out.println(""String_Node_Str"" + recordsExist);
  User tempUser=new User();
  tempUser.setUsername(""String_Node_Str"");
  if (recordsExist) {
    int highestID=-1;
    IStorageIterator ui=users.iterate();
    while (ui.hasMore()) {
      int userID=ui.nextID();
      if (highestID == -1 || userID > highestID)       highestID=userID;
    }
    tempUser=(User)users.read(highestID);
  }
  initLoginControls(tempUser.getUsername());
  showVersions();
}",0.9477911646586346
145204,"public String getName(){
  return null;
}","public String getName(){
  return getType();
}",0.8505747126436781
145205,"private Date getBeginningOfWeek(){
  Calendar c=Calendar.getInstance();
  int dow=c.get(Calendar.DAY_OF_WEEK);
  int dom=c.get(Calendar.DAY_OF_MONTH);
  c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
  c.set(Calendar.DAY_OF_MONTH,dom - (dow - 1));
  return DateUtils.roundDate(c.getTime());
}","private Date getBeginningOfWeek(int weeksago){
  return DateUtils.getPastPeriodDate(new Date(),""String_Node_Str"",""String_Node_Str"",true,true,weeksago);
}",0.3386004514672686
145206,"private DataModelDateFilter getFilterForOption(int i){
  Date start=new Date(0);
  Date end=new Date();
  if (i == 0) {
    start=DateUtils.roundDate(new Date());
  }
 else   if (i == 1) {
    end=DateUtils.roundDate(new Date());
    start=new Date(end.getTime() - DateUtils.DAY_IN_MS);
  }
 else   if (i == 2) {
    start=getBeginningOfWeek();
  }
 else   if (i == 3) {
    end=getBeginningOfWeek();
    start=new Date(end.getTime() - DateUtils.DAY_IN_MS * 7);
  }
  return new DataModelDateFilter(start,end);
}","private DataModelDateFilter getFilterForOption(int i){
  Date start=new Date(0);
  Date end=new Date();
  if (i == 0) {
    start=DateUtils.roundDate(new Date());
  }
 else   if (i == 1) {
    end=DateUtils.roundDate(new Date());
    start=new Date(end.getTime() - DateUtils.DAY_IN_MS);
  }
 else   if (i == 2) {
    start=getBeginningOfWeek(0);
  }
 else   if (i == 3) {
    end=getBeginningOfWeek(0);
    start=getBeginningOfWeek(1);
  }
  System.out.println(DateUtils.formatDate(start,DateUtils.FORMAT_HUMAN_READABLE_SHORT) + ""String_Node_Str"" + DateUtils.formatDate(end,DateUtils.FORMAT_HUMAN_READABLE_SHORT));
  return new DataModelDateFilter(start,end);
}",0.6939471440750213
145207,"public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}","public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,k);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i++;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}",0.901666361472258
145208,"public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    MESSAGE_STORE.cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.getStatus() == TransportMessageStatus.SENT) {
    MESSAGE_STORE.decache(message);
  }
 else {
    message.setStatus(TransportMessageStatus.CACHED);
    MESSAGE_STORE.updateMessage(message);
  }
  return message;
}","public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    MESSAGE_STORE.cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.isCacheable()) {
    if (message.getStatus() == TransportMessageStatus.SENT) {
      MESSAGE_STORE.decache(message);
    }
 else {
      message.setStatus(TransportMessageStatus.CACHED);
      MESSAGE_STORE.updateMessage(message);
    }
  }
  return message;
}",0.9254013220018886
145209,"/** 
 * Write everything from input stream to output stream, byte by byte then close the streams
 * @param in
 * @param out
 * @throws IOException
 */
public static void writeFromInputToOutput(InputStream in,OutputStream out) throws IOException {
  int val=in.read();
  while (val != -1) {
    out.write(val);
    val=in.read();
  }
}","/** 
 * Write everything from input stream to output stream, byte by byte then close the streams
 * @param in
 * @param out
 * @throws IOException
 */
public static void writeFromInputToOutput(InputStream in,OutputStream out) throws IOException {
  int val=in.read();
  while (val != -1) {
    System.out.println(""String_Node_Str"" + val);
    out.write(val);
    val=in.read();
  }
}",0.9037656903765692
145210,"public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    MESSAGE_STORE.cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.isCacheable()) {
    if (message.getStatus() == TransportMessageStatus.SENT) {
      MESSAGE_STORE.decache(message);
    }
 else {
      message.setStatus(TransportMessageStatus.CACHED);
      MESSAGE_STORE.updateMessage(message);
    }
  }
  return message;
}","/** 
 * @param message
 * @return
 * @throws TransportException
 */
public static TransportMessage sendBlocking(TransportMessage message) throws TransportException {
  if (message.isCacheable()) {
    MESSAGE_STORE.cache(message);
  }
  Transporter transporter=message.createTransporter();
  transporter.setMessage(message);
  transporter.send();
  if (message.isCacheable()) {
    if (message.getStatus() == TransportMessageStatus.SENT) {
      MESSAGE_STORE.decache(message);
    }
 else {
      message.setStatus(TransportMessageStatus.CACHED);
      MESSAGE_STORE.updateMessage(message);
    }
  }
  return message;
}",0.9420783645655876
145211,"/** 
 * Any messages which aren't successfully sent in QueuingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  Vector messages=getCachedMessages();
  if (messages.size() > 0) {
    TransportMessage m=(TransportMessage)messages.elementAt(0);
    Transporter transporter=m.createTransporter();
    BulkSender sender=new BulkSender(transporter,messages,MESSAGE_STORE,listener);
    sender.send();
  }
  throw new TransportException(""String_Node_Str"");
}","/** 
 * Any messages which aren't successfully sent in SendingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  Vector messages=getCachedMessages();
  if (messages.size() > 0) {
    TransportMessage m=(TransportMessage)messages.elementAt(0);
    Transporter transporter=m.createTransporter();
    BulkSender sender=new BulkSender(transporter,messages,MESSAGE_STORE,listener);
    sender.send();
  }
  throw new TransportException(""String_Node_Str"");
}",0.9934747145187602
145212,"/** 
 * @param url
 * @return
 * @throws IOException
 */
private HttpConnection getConnection(String url) throws IOException {
  HttpConnection conn;
  Object o=Connector.open(url);
  if (o instanceof HttpConnection) {
    conn=(HttpConnection)o;
    conn.setRequestMethod(HttpConnection.POST);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
  return conn;
}","/** 
 * @param url
 * @return
 * @throws IOException
 */
private HttpConnection getConnection(String url) throws IOException {
  HttpConnection conn=(HttpConnection)Connector.open(url);
  conn.setRequestMethod(HttpConnection.POST);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  return conn;
}",0.7513711151736746
145213,"public TransportMessage send(){
  HttpConnection conn=null;
  try {
    String url=message.getDestinationURL();
    System.out.println(""String_Node_Str"" + url);
    conn=getConnection(url);
    if (conn.getResponseCode() == HttpConnection.HTTP_OK) {
      writeToConnection(conn,this.message.getContentStream());
      readResponse(conn,this.message);
    }
    conn.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    this.message.setFailureReason(e.getMessage());
    this.message.incrementFailureCount();
  }
 finally {
    if (conn != null)     try {
      conn.close();
    }
 catch (    IOException e) {
    }
  }
  return message;
}","public TransportMessage send(){
  HttpConnection conn=null;
  byte[] o=(byte[])this.message.getContent();
  String content=new String(o);
  System.out.println(""String_Node_Str"" + content);
  DataInputStream is=null;
  DataOutputStream os=null;
  try {
    HttpConnectionWrapper.logger.setLevel(Level.FINE);
    conn=new HttpConnectionWrapper(getConnection(message.getDestinationURL()));
    conn.setRequestProperty(""String_Node_Str"",new Integer(content.length()).toString());
    os=(DataOutputStream)conn.openDataOutputStream();
    os.writeUTF(content);
    is=(DataInputStream)conn.openDataInputStream();
    int ch;
    StringBuffer sb=new StringBuffer();
    while ((ch=is.read()) != -1) {
      sb.append((char)ch);
    }
    System.out.println(""String_Node_Str"" + sb.toString());
    message.setResponseBody(sb.toString());
    is.close();
    this.message.setResponseCode(conn.getResponseCode());
    conn.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getClass() + ""String_Node_Str""+ e.getMessage());
    message.setFailureReason(e.getMessage());
    message.incrementFailureCount();
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
    if (conn != null)     try {
      conn.close();
    }
 catch (    IOException e) {
    }
  }
  return message;
}",0.3811742777260019
145214,"public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k + 1);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}","public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}",0.9020825721592984
145215,"public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k + 1);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}","public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k + 1);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}",0.999269272926562
145216,"/** 
 * Provides text representing a span of time. NOTE: Should probably just be a ""format date"" entry
 * @param d The date to be compared against the current date.
 * @return a string which is a human readable representation of the difference betweenthe provided date and the current date.  
 */
public static String getDifferenceFromToday(Date d){
  String daysAgoStr;
  double daysAgo=(int)(DateUtils.daysSinceEpoch(new Date()) - DateUtils.daysSinceEpoch(d));
  daysAgoStr=(daysAgo < 0 ? ""String_Node_Str"" : daysAgo == 0 ? ""String_Node_Str"" : daysAgo == 1 ? ""String_Node_Str"" : daysAgo == 2 ? ""String_Node_Str"" : daysAgo + ""String_Node_Str"");
  if (daysAgo >= 0 && daysAgo < 1) {
    return ""String_Node_Str"";
  }
 else   if (daysAgo >= 1 && daysAgo < 2) {
    return ""String_Node_Str"";
  }
 else   if (daysAgo >= 2 && daysAgo < 30) {
    return daysAgo + ""String_Node_Str"";
  }
 else   if (daysAgo < 0 && daysAgo > -1) {
    return ""String_Node_Str"";
  }
 else   if (daysAgo < -1) {
    return daysAgo + ""String_Node_Str"";
  }
  return daysAgoStr;
}","/** 
 * Provides text representing a span of time. NOTE: Should probably just be a ""format date"" entry
 * @param d The date to be compared against the current date.
 * @return a string which is a human readable representation of the difference betweenthe provided date and the current date.  
 */
public static String getDifferenceFromToday(Date d){
  String daysAgoStr=""String_Node_Str"";
  double daysAgo=(int)(DateUtils.daysSinceEpoch(new Date()) - DateUtils.daysSinceEpoch(d));
  daysAgoStr=(daysAgo < 0 ? ""String_Node_Str"" : daysAgo == 0 ? ""String_Node_Str"" : daysAgo == 1 ? ""String_Node_Str"" : daysAgo == 2 ? ""String_Node_Str"" : daysAgo + ""String_Node_Str"");
  if (daysAgo >= 0 && daysAgo < 1) {
    return ""String_Node_Str"";
  }
 else   if (daysAgo >= 1 && daysAgo < 2) {
    return ""String_Node_Str"";
  }
 else   if (daysAgo >= 2 && daysAgo < 30) {
    return daysAgo + ""String_Node_Str"";
  }
 else   if (daysAgo < 0 && daysAgo > -1) {
    return ""String_Node_Str"";
  }
 else   if (daysAgo < -1) {
    return daysAgo + ""String_Node_Str"";
  }
  return daysAgoStr;
}",0.9915254237288136
145217,"/** 
 * send all unsent forms
 */
private void executeSendAllUnsentCommand(){
  Enumeration en=this.models.elements();
  Vector unsent=new Vector();
  while (en.hasMoreElements()) {
    DataModelTreeMetaData data=(DataModelTreeMetaData)en.nextElement();
    DataModelTree model=new DataModelTree();
    ITransportManager tm=JavaRosaServiceProvider.instance().getTransportManager();
    try {
      this.dataModelRMSUtility.retrieveFromRMS(data.getRecordId(),model);
    }
 catch (    IOException e) {
      handleModelRetrieveException(e);
      return;
    }
catch (    DeserializationException e) {
      handleModelRetrieveException(e);
      return;
    }
    if (TransportMessage.STATUS_DELIVERED == tm.getModelDeliveryStatus(data.getRecordId(),true)) {
    }
 else {
      unsent.addElement(model);
    }
  }
  if (unsent.size() > 0) {
    Hashtable formSendArgs=new Hashtable();
    formSendArgs.put(returnKey,CMD_SEND_ALL_UNSENT);
    formSendArgs.put(""String_Node_Str"",unsent);
    this.parent.returnFromActivity(this,Constants.ACTIVITY_NEEDS_RESOLUTION,formSendArgs);
  }
 else {
    initView();
  }
}","/** 
 * send all unsent forms
 */
private void executeSendAllUnsentCommand(){
  Enumeration en=this.models.elements();
  Vector unsent=new Vector();
  while (en.hasMoreElements()) {
    DataModelTreeMetaData data=(DataModelTreeMetaData)en.nextElement();
    DataModelTree model=new DataModelTree();
    ITransportManager tm=JavaRosaServiceProvider.instance().getTransportManager();
    try {
      this.dataModelRMSUtility.retrieveFromRMS(data.getRecordId(),model);
    }
 catch (    IOException e) {
      handleModelRetrieveException(e);
      return;
    }
catch (    DeserializationException e) {
      handleModelRetrieveException(e);
      return;
    }
    if (TransportMessage.STATUS_DELIVERED == tm.getModelDeliveryStatus(data.getRecordId(),true)) {
    }
 else {
      XFormSerializingVisitor visitor=new XFormSerializingVisitor();
      IDataPayload payload;
      try {
        payload=visitor.createSerializedPayload(model);
        unsent.addElement(payload);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + model.getId());
        e.printStackTrace();
      }
    }
  }
  if (unsent.size() > 0) {
    Hashtable formSendArgs=new Hashtable();
    formSendArgs.put(returnKey,CMD_SEND_ALL_UNSENT);
    formSendArgs.put(""String_Node_Str"",unsent);
    this.parent.returnFromActivity(this,Constants.ACTIVITY_NEEDS_RESOLUTION,formSendArgs);
  }
 else {
    initView();
  }
}",0.8584980237154151
145218,"private void writeProperties(){
  Properties p=new Properties();
  p.setProperty(this.WTK_PATH,this.wtkPath);
  p.setProperty(this.NEW_FORM,this.newForm);
  p.setProperty(this.ORIGINAL_JAR_DIR,this.origJarDir);
  p.setProperty(this.OPEN_XML_WITH,openXMLWith);
  p.setProperty(this.OPEN_AT_END,openAtEnd.toString());
  p.setProperty(this.DEPLOY_JAR_PATH,deployJarTF.getText());
  File f=new File(this.PROPERTIES_FILE);
  try {
    if (!f.exists())     f.createNewFile();
    FileOutputStream fos=new FileOutputStream(f);
    p.store(fos,this.PROPERTIES_FILE);
    fos.flush();
    fos.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","private void writeProperties(){
  Properties p=new Properties();
  p.setProperty(this.WTK_PATH,this.wtkPath);
  p.setProperty(this.NEW_FORM,this.newForm);
  p.setProperty(this.ORIGINAL_JAR_DIR,this.origJarDir);
  p.setProperty(this.OPEN_XML_WITH,openXMLWith);
  p.setProperty(this.OPEN_AT_END,openAtEnd.toString());
  String deploy=deployJarTF == null ? ""String_Node_Str"" : deployJarTF.getText();
  p.setProperty(this.DEPLOY_JAR_PATH,deploy);
  File f=new File(this.PROPERTIES_FILE);
  try {
    if (!f.exists())     f.createNewFile();
    FileOutputStream fos=new FileOutputStream(f);
    p.store(fos,this.PROPERTIES_FILE);
    fos.flush();
    fos.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.5492021276595744
145219,"/** 
 * Clean out the RMS when it's getting too full. Only deletes saved forms that have not been successfully sent.
 * @param triggerThreshold how full the RMS must be to commence purging (.8 == 80% full)
 * @param clearThreshold how full it should be before we stop purging (0. == purge every available record)
 * @param ageThreshold how old a record must be before it may be purged (in days)
 * @return whether the RMS fullness is less than the trigger threshold when done purging. if it's notwe're in serious trouble
 */
public boolean purge(double triggerThreshold,double clearThreshold,double ageThreshold){
  this.open();
  boolean ok;
  System.out.println(""String_Node_Str"" + (100. * getUsageFactor()) + ""String_Node_Str"");
  if (getUsageFactor() >= triggerThreshold) {
    System.out.println(""String_Node_Str"");
    Vector deletables=new Vector();
    Date now=new Date();
    IRecordStoreEnumeration instances=metaDataRMS.enumerateMetaData();
    while (instances.hasNextElement()) {
      DataModelTreeMetaData meta=null;
      try {
        meta=getMetaDataFromId(instances.nextRecordId());
      }
 catch (      RecordStorageException e) {
        e.printStackTrace();
      }
      if ((now.getTime() - meta.getDateSaved().getTime()) > ageThreshold * 86400000l)       deletables.addElement(new Integer(meta.getRecordId()));
    }
    ITransportManager tm=JavaRosaServiceProvider.instance().getTransportManager();
    Vector sendStatuses=tm.getModelDeliveryStatuses(deletables,true);
    for (int i=0, j=0; i < deletables.size(); i++, j++) {
      if (((Integer)sendStatuses.elementAt(j)).intValue() != TransportMessage.STATUS_DELIVERED) {
        deletables.removeElementAt(i);
        i--;
      }
    }
    System.out.println(""String_Node_Str"" + deletables.size() + ""String_Node_Str"");
    boolean emptyEnough=false;
    Vector purged=new Vector();
    for (int i=0; i < deletables.size() && !emptyEnough; i++) {
      int modelID=((Integer)deletables.elementAt(i)).intValue();
      deleteRecord(modelID);
      purged.addElement(new Integer(modelID));
      if (getUsageFactor() <= clearThreshold)       emptyEnough=true;
    }
    tm.wipeAssociatedMessages(purged);
    System.out.println(""String_Node_Str"" + purged.size() + ""String_Node_Str""+ (100. * getUsageFactor())+ ""String_Node_Str"");
    ok=getUsageFactor() < triggerThreshold;
  }
 else {
    ok=true;
  }
  return ok;
}","/** 
 * Clean out the RMS when it's getting too full. Only deletes saved forms that have not been successfully sent.
 * @param triggerThreshold how full the RMS must be to commence purging (.8 == 80% full)
 * @param clearThreshold how full it should be before we stop purging (0. == purge every available record)
 * @param ageThreshold how old a record must be before it may be purged (in days)
 * @return whether the RMS fullness is less than the trigger threshold when done purging. if it's notwe're in serious trouble
 */
public boolean purge(double triggerThreshold,double clearThreshold,double ageThreshold){
  this.open();
  boolean ok;
  System.out.println(""String_Node_Str"" + (100. * getUsageFactor()) + ""String_Node_Str"");
  if (getUsageFactor() >= triggerThreshold) {
    System.out.println(""String_Node_Str"");
    Vector deletables=new Vector();
    Date now=new Date();
    IRecordStoreEnumeration instances=metaDataRMS.enumerateMetaData();
    while (instances.hasNextElement()) {
      DataModelTreeMetaData meta=null;
      try {
        meta=getMetaDataFromId(instances.nextRecordId());
        if ((now.getTime() - meta.getDateSaved().getTime()) > ageThreshold * 86400000l)         deletables.addElement(new Integer(meta.getRecordId()));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    ITransportManager tm=JavaRosaServiceProvider.instance().getTransportManager();
    Vector sendStatuses=tm.getModelDeliveryStatuses(deletables,true);
    for (int i=0, j=0; i < deletables.size(); i++, j++) {
      if (((Integer)sendStatuses.elementAt(j)).intValue() != TransportMessage.STATUS_DELIVERED) {
        deletables.removeElementAt(i);
        i--;
      }
    }
    System.out.println(""String_Node_Str"" + deletables.size() + ""String_Node_Str"");
    boolean emptyEnough=false;
    Vector purged=new Vector();
    for (int i=0; i < deletables.size() && !emptyEnough; i++) {
      int modelID=((Integer)deletables.elementAt(i)).intValue();
      deleteRecord(modelID);
      purged.addElement(new Integer(modelID));
      if (getUsageFactor() <= clearThreshold)       emptyEnough=true;
    }
    tm.wipeAssociatedMessages(purged);
    System.out.println(""String_Node_Str"" + purged.size() + ""String_Node_Str""+ (100. * getUsageFactor())+ ""String_Node_Str"");
    ok=getUsageFactor() < triggerThreshold;
  }
 else {
    ok=true;
  }
  return ok;
}",0.9663531870428422
145220,"private static String printConditionalProperty(String property,FormDef f,TreeElement instanceNode){
  int action=-1;
  String conditionHeader=null;
  boolean absolute=false;
  boolean absoluteReportable=false;
  String absoluteHeader=null;
  if (property.equals(""String_Node_Str"")) {
    action=Condition.ACTION_SHOW;
    conditionHeader=""String_Node_Str"";
    absolute=instanceNode.relevant;
    absoluteReportable=false;
    absoluteHeader=""String_Node_Str"";
  }
 else   if (property.equals(""String_Node_Str"")) {
    action=Condition.ACTION_REQUIRE;
    conditionHeader=""String_Node_Str"";
    absolute=instanceNode.required;
    absoluteReportable=true;
    absoluteHeader=""String_Node_Str"";
  }
 else   if (property.equals(""String_Node_Str"")) {
    action=Condition.ACTION_DISABLE;
    conditionHeader=""String_Node_Str"";
    absolute=instanceNode.enabled;
    absoluteReportable=false;
    absoluteHeader=""String_Node_Str"";
  }
  IConditionExpr expr=null;
  for (int i=0; i < f.conditions.size() && expr == null; i++) {
    Condition c=(Condition)f.conditions.elementAt(i);
    if (c.trueAction == action) {
      for (int j=0; j < c.targets.size() && expr == null; j++) {
        TreeReference target=(TreeReference)c.targets.elementAt(j);
        if (instanceNode == getInstanceNode(f.getDataModel(),new XPathReference(target))) {
          expr=c.expr;
        }
      }
    }
  }
  String line=null;
  if (expr != null) {
    line=conditionHeader + ""String_Node_Str"" + printCondition(expr);
  }
 else   if (absolute == absoluteReportable) {
    line=absoluteHeader;
  }
  return line;
}","private static String printConditionalProperty(String property,FormDef f,TreeElement instanceNode){
  int action=-1;
  String conditionHeader=null;
  boolean absolute=false;
  boolean absoluteReportable=false;
  String absoluteHeader=null;
  if (property.equals(""String_Node_Str"")) {
    action=Condition.ACTION_SHOW;
    conditionHeader=""String_Node_Str"";
    absolute=instanceNode.relevant;
    absoluteReportable=false;
    absoluteHeader=""String_Node_Str"";
  }
 else   if (property.equals(""String_Node_Str"")) {
    action=Condition.ACTION_REQUIRE;
    conditionHeader=""String_Node_Str"";
    absolute=instanceNode.required;
    absoluteReportable=true;
    absoluteHeader=""String_Node_Str"";
  }
 else   if (property.equals(""String_Node_Str"")) {
    action=Condition.ACTION_DISABLE;
    conditionHeader=""String_Node_Str"";
    absolute=instanceNode.isEnabled();
    absoluteReportable=false;
    absoluteHeader=""String_Node_Str"";
  }
  IConditionExpr expr=null;
  for (int i=0; i < f.conditions.size() && expr == null; i++) {
    Condition c=(Condition)f.conditions.elementAt(i);
    if (c.trueAction == action) {
      for (int j=0; j < c.targets.size() && expr == null; j++) {
        TreeReference target=(TreeReference)c.targets.elementAt(j);
        if (instanceNode == getInstanceNode(f.getDataModel(),new XPathReference(target))) {
          expr=c.expr;
        }
      }
    }
  }
  String line=null;
  if (expr != null) {
    line=conditionHeader + ""String_Node_Str"" + printCondition(expr);
  }
 else   if (absolute == absoluteReportable) {
    line=absoluteHeader;
  }
  return line;
}",0.9943573667711598
145221,"private static void listQuestion(FormDef f,QuestionDef q,int indent,StringBuffer sb){
  TreeElement instanceNode=getInstanceNode(f.getDataModel(),q.getBind());
  String caption=q.getLongText();
  int type=instanceNode.dataType;
  if (q.getControlType() != Constants.CONTROL_TRIGGER) {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
    println(sb,indent + 1,""String_Node_Str"" + printType(type));
  }
 else {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
  }
  if (q.getControlType() == Constants.CONTROL_SELECT_ONE || q.getControlType() == Constants.CONTROL_SELECT_MULTI) {
    printChoices(q,indent + 1,sb);
  }
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  String defaultValue=printDefault(instanceNode);
  if (defaultValue != null) {
    println(sb,indent + 1,""String_Node_Str"" + defaultValue);
  }
  if (instanceNode.constraint != null) {
    println(sb,indent + 1,""String_Node_Str"" + printCondition(instanceNode.constraint.constraint));
  }
  println(sb);
}","private static void listQuestion(FormDef f,QuestionDef q,int indent,StringBuffer sb){
  TreeElement instanceNode=getInstanceNode(f.getDataModel(),q.getBind());
  String caption=q.getLongText();
  int type=instanceNode.dataType;
  if (q.getControlType() != Constants.CONTROL_TRIGGER) {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
    println(sb,indent + 1,""String_Node_Str"" + printType(type));
  }
 else {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
  }
  if (q.getControlType() == Constants.CONTROL_SELECT_ONE || q.getControlType() == Constants.CONTROL_SELECT_MULTI) {
    printChoices(q,indent + 1,sb);
  }
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  String defaultValue=printDefault(instanceNode);
  if (defaultValue != null) {
    println(sb,indent + 1,""String_Node_Str"" + defaultValue);
  }
  if (instanceNode.getConstraint() != null) {
    println(sb,indent + 1,""String_Node_Str"" + printCondition(instanceNode.getConstraint().constraint));
  }
  println(sb);
}",0.9786142001710864
145222,"private static String printDefault(TreeElement node){
  String value=null;
  if (node.preloadHandler != null) {
    if (node.preloadHandler.equals(""String_Node_Str"")) {
      if (node.preloadParams.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.preloadHandler.equals(""String_Node_Str"")) {
      if (node.preloadParams.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.preloadHandler.equals(""String_Node_Str"")) {
      if (node.preloadParams.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
 else       if (node.preloadParams.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.preloadHandler.equals(""String_Node_Str"")) {
      if (node.preloadParams.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
 else       if (node.preloadParams.equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.preloadHandler.equals(""String_Node_Str"")) {
      value=""String_Node_Str"" + node.preloadParams;
    }
    if (value == null) {
      value=""String_Node_Str"" + node.preloadHandler;
      if (node.preloadParams != null) {
        value=value + ""String_Node_Str"" + node.preloadParams;
      }
    }
  }
 else {
    if (node.getValue() != null) {
      XFormAnswerDataSerializer xfads=new XFormAnswerDataSerializer();
      if (xfads.canSerialize(node.getValue())) {
        value=(String)xfads.serializeAnswerData(node.getValue(),node.dataType);
      }
 else {
        value=""String_Node_Str"";
      }
    }
  }
  return value;
}","private static String printDefault(TreeElement node){
  String value=null;
  if (node.getPreloadHandler() != null) {
    if (node.getPreloadHandler().equals(""String_Node_Str"")) {
      if (node.getPreloadParams().equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.getPreloadHandler().equals(""String_Node_Str"")) {
      if (node.getPreloadParams().equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.getPreloadHandler().equals(""String_Node_Str"")) {
      if (node.getPreloadParams().equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
 else       if (node.getPreloadParams().equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.getPreloadHandler().equals(""String_Node_Str"")) {
      if (node.getPreloadParams().equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
 else       if (node.getPreloadParams().equals(""String_Node_Str"")) {
        value=""String_Node_Str"";
      }
    }
 else     if (node.getPreloadHandler().equals(""String_Node_Str"")) {
      value=""String_Node_Str"" + node.getPreloadParams();
    }
    if (value == null) {
      value=""String_Node_Str"" + node.getPreloadHandler();
      if (node.getPreloadParams() != null) {
        value=value + ""String_Node_Str"" + node.getPreloadParams();
      }
    }
  }
 else {
    if (node.getValue() != null) {
      XFormAnswerDataSerializer xfads=new XFormAnswerDataSerializer();
      if (xfads.canSerialize(node.getValue())) {
        value=(String)xfads.serializeAnswerData(node.getValue(),node.dataType);
      }
 else {
        value=""String_Node_Str"";
      }
    }
  }
  return value;
}",0.966547192353644
145223,"private void init(){
  new J2MEModule().registerModule(context);
  new XFormsModule().registerModule(context);
  new CoreModelModule().registerModule(context);
  new HttpTransportModule().registerModule(context);
  new FormManagerModule().registerModule(context);
  FormDefRMSUtility formDef=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
  int formID=formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
  launchFormEntryActivity(context,formID,-1);
}","private void init(){
  new J2MEModule().registerModule(context);
  new LanguagePackModule().registerModule(context);
  new XFormsModule().registerModule(context);
  new CoreModelModule().registerModule(context);
  new HttpTransportModule().registerModule(context);
  new FormManagerModule().registerModule(context);
  FormDefRMSUtility formDef=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
  int formID=formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
  launchFormEntryActivity(context,formID,-1);
}",0.9563025210084034
145224,"public ChatterboxWidget getNewRepeatWidget(FormIndex index,FormDef f,Chatterbox cbox){
  GroupDef repeat=(GroupDef)f.explodeIndex(index).lastElement();
  FormIndex end=index;
  while (!end.isTerminal()) {
    end=end.getNextLevel();
  }
  int multiplicity=end.getInstanceIndex();
  QuestionDef q=new QuestionDef(-1,""String_Node_Str"",Constants.CONTROL_SELECT_ONE);
  String label=repeat.getLongText();
  q.setLongText(""String_Node_Str"" + (multiplicity > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + (label == null || label.length() == 0 ? ""String_Node_Str"" : label)+ ""String_Node_Str"");
  q.addSelectItem(""String_Node_Str"",""String_Node_Str"");
  q.addSelectItem(""String_Node_Str"",""String_Node_Str"");
  FormElementBinding binding=new FormElementBinding(null,q,new TreeElement(null,0));
  return new ChatterboxWidget(cbox,binding,ChatterboxWidget.VIEW_EXPANDED,new CollapsedWidget(),new SelectOneEntryWidget(ChoiceGroup.EXCLUSIVE));
}","public ChatterboxWidget getNewRepeatWidget(FormIndex index,FormDef f,Chatterbox cbox){
  GroupDef repeat=(GroupDef)f.explodeIndex(index).lastElement();
  FormIndex end=index;
  while (!end.isTerminal()) {
    end=end.getNextLevel();
  }
  int multiplicity=end.getInstanceIndex();
  QuestionDef q=new QuestionDef(-1,""String_Node_Str"",Constants.CONTROL_SELECT_ONE);
  String label=repeat.getLongText();
  q.setLongText(""String_Node_Str"" + (multiplicity > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + (label == null || label.length() == 0 ? ""String_Node_Str"" : label)+ ""String_Node_Str"");
  q.addSelectItem(""String_Node_Str"",""String_Node_Str"");
  q.addSelectItem(""String_Node_Str"",""String_Node_Str"");
  q.addSelectItemID(""String_Node_Str"",false,""String_Node_Str"");
  q.addSelectItemID(""String_Node_Str"",false,""String_Node_Str"");
  FormElementBinding binding=new FormElementBinding(null,q,new TreeElement(null,0));
  binding.form=f;
  return new ChatterboxWidget(cbox,binding,ChatterboxWidget.VIEW_EXPANDED,new CollapsedWidget(),new SelectOneEntryWidget(ChoiceGroup.EXCLUSIVE));
}",0.9272183449651048
145225,"/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int useExistingIx=-1;
  if (t instanceof Condition) {
    int p=triggerables.indexOf(t);
    if (p >= 0) {
      useExistingIx=p;
    }
  }
  if (useExistingIx != -1) {
    return (Condition)triggerables.elementAt(useExistingIx);
  }
 else {
    triggerables.addElement(t);
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int i=0; i < targets.size(); i++) {
        TreeReference target=(TreeReference)targets.elementAt(i);
        if (model.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
    return t;
  }
}","/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    return (Triggerable)triggerables.elementAt(existingIx);
  }
 else {
    triggerables.addElement(t);
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int i=0; i < targets.size(); i++) {
        TreeReference target=(TreeReference)targets.elementAt(i);
        if (model.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
    return t;
  }
}",0.2589406971480308
145226,"public Command getAcquireCommand(){
  return new Command(Locale.get(""String_Node_Str""),Command.SCREEN,3);
  return new Command(""String_Node_Str"",Command.SCREEN,3);
}","public Command getAcquireCommand(){
  Command acquire;
  acquire=new Command(Locale.get(""String_Node_Str""),Command.SCREEN,3);
  acquire=new Command(""String_Node_Str"",Command.SCREEN,3);
  return acquire;
}",0.8184281842818428
145227,"public void registerModule(Context context){
  ReminderRMSUtility reminderRms=new ReminderRMSUtility(ReminderRMSUtility.getUtilityName());
  JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().registerRMSUtility(reminderRms);
  IDaemon newDaemon=new ReminderNotifierDaemon();
  JavaRosaServiceProvider.instance().registerDaemon(newDaemon,ReminderNotifierDaemon.DEFAULT_NAME);
  PropertyManager propManager=JavaRosaServiceProvider.instance().getPropertyManager();
  propManager.addRules(new ReminderPropertyRules());
  PropertyUtils.initializeProperty(ReminderPropertyRules.REMINDERS_ENABLED_PROPERTY,ReminderPropertyRules.REMINDERS_ENABLED);
  String enabled=propManager.getSingularProperty(ReminderPropertyRules.REMINDERS_ENABLED_PROPERTY);
  if (ReminderPropertyRules.REMINDERS_ENABLED.equals(enabled)) {
    newDaemon.start();
  }
}","public void registerModule(Context context){
  ReminderRMSUtility reminderRms=new ReminderRMSUtility(ReminderRMSUtility.getUtilityName());
  JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().registerRMSUtility(reminderRms);
  IDaemon newDaemon=new ReminderNotifierDaemon();
  JavaRosaServiceProvider.instance().registerDaemon(newDaemon,ReminderNotifierDaemon.DEFAULT_NAME);
  IPropertyManager propManager=JavaRosaServiceProvider.instance().getPropertyManager();
  propManager.addRules(new ReminderPropertyRules());
  PropertyUtils.initializeProperty(ReminderPropertyRules.REMINDERS_ENABLED_PROPERTY,ReminderPropertyRules.REMINDERS_ENABLED);
  String enabled=propManager.getSingularProperty(ReminderPropertyRules.REMINDERS_ENABLED_PROPERTY);
  if (ReminderPropertyRules.REMINDERS_ENABLED.equals(enabled)) {
    newDaemon.start();
  }
}",0.9994202898550724
145228,"private void showError(String title,String message){
  Alert alert=new Alert(title,message,null,AlertType.ERROR);
  alert.setTimeout(Alert.FOREVER);
  Alert.setCurrent((Display)JavaRosaServiceProvider.instance().getDisplay().getDisplayObject(),alert,null);
}","private void showError(String title,String message){
  Alert alert=new Alert(title,message,null,AlertType.ERROR);
  alert.setTimeout(Alert.FOREVER);
  Alert.setCurrent((Display)JavaRosaServiceProvider.instance().getDisplay().getDisplayObject(),alert,this);
}",0.9844961240310076
145229,"public ChatterboxWidget generateHeader(){
  int mult=-1;
  if (this.activeStyle instanceof LabelWidget) {
    LabelWidget label=(LabelWidget)this.activeStyle;
    mult=label.getMultiplicity();
  }
  LabelWidget labelStyle=new LabelWidget(mult);
  ChatterboxWidget widget=new ChatterboxWidget(cbox,this.getBinding(),ChatterboxWidget.VIEW_LABEL,labelStyle,null);
  return widget;
}","public ChatterboxWidget generateHeader(){
  int mult=-1;
  if (this.activeStyle instanceof LabelWidget) {
    LabelWidget label=(LabelWidget)this.activeStyle;
    mult=label.getMultiplicity();
  }
  LabelWidget labelStyle=new LabelWidget(mult);
  ChatterboxWidget widget=new ChatterboxWidget(cbox,(FormElementBinding)this.getBinding().clone(),ChatterboxWidget.VIEW_LABEL,labelStyle,null);
  return widget;
}",0.9643765903307888
145230,"public Object clone(){
  if (this.getViewState() == ChatterboxWidget.VIEW_LABEL) {
    LabelWidget label=(LabelWidget)this.activeStyle;
    ChatterboxWidget widget=new ChatterboxWidget(cbox,binding,this.getViewState(),(LabelWidget)label.clone(),null);
    return widget;
  }
  return null;
}","public Object clone(){
  if (this.getViewState() == ChatterboxWidget.VIEW_LABEL) {
    LabelWidget label=(LabelWidget)this.activeStyle;
    FormElementBinding newBinding=(FormElementBinding)binding.clone();
    ChatterboxWidget widget=new ChatterboxWidget(cbox,newBinding,this.getViewState(),(LabelWidget)label.clone(),null);
    return widget;
  }
  return null;
}",0.8841463414634146
145231,"private void computeHeaders(){
  int threshold=this.contentY;
  if (this.topFrame != null && this.topFrame.size() != 0) {
    threshold+=this.topFrame.getContentHeight();
  }
  Vector headers=new Vector();
  for (int i=0; i < size(); i++) {
    ChatterboxWidget cw=getWidgetAtIndex(i);
    if (cw.getAbsoluteY() + cw.getContentHeight() > threshold) {
    }
    if (cw.isPinned()) {
      if (cw.getAbsoluteY() + cw.getPinnableHeight() < threshold) {
        StringItem item2=new StringItem(""String_Node_Str"",""String_Node_Str"");
        headers.addElement(cw.generateHeader());
      }
    }
  }
  Item[] newHeaders=new Item[headers.size()];
  headers.copyInto(newHeaders);
  if ((this.topFrame == null && headers.size() > 0) || (this.topFrame != null && !itemArraysEqual(newHeaders,this.topFrame.getItems()))) {
    if (topFrame != null) {
      this.topFrame.clear();
    }
    for (int i=0; i < newHeaders.length; ++i) {
      append(Graphics.TOP,newHeaders[i]);
    }
    if (newHeaders.length == 0) {
      this.calculateContentArea(0,0,this.getWidth(),this.getHeight());
    }
  }
}","private void computeHeaders(){
  int threshold=0;
  if (this.topFrame != null && this.topFrame.size() != 0) {
    threshold+=this.topFrame.getContentHeight();
  }
  Vector headers=new Vector();
  for (int i=0; i < size(); i++) {
    ChatterboxWidget cw=getWidgetAtIndex(i);
    if (cw.getAbsoluteY() + cw.getContentHeight() > threshold) {
    }
    if (cw.isPinned()) {
      if (cw.getAbsoluteY() + cw.getPinnableHeight() < threshold) {
        System.out.println(""String_Node_Str"" + cw.getAbsoluteY() + cw.getPinnableHeight()+ ""String_Node_Str""+ threshold);
        StringItem item2=new StringItem(""String_Node_Str"",""String_Node_Str"");
        headers.addElement(cw.generateHeader());
      }
    }
  }
  Item[] newHeaders=new Item[headers.size()];
  headers.copyInto(newHeaders);
  if ((this.topFrame == null && headers.size() > 0) || (this.topFrame != null && !itemArraysEqual(newHeaders,this.topFrame.getItems()))) {
    if (topFrame != null) {
      this.topFrame.clear();
    }
    for (int i=0; i < newHeaders.length; ++i) {
      append(Graphics.TOP,newHeaders[i]);
    }
    if (newHeaders.length == 0) {
      this.calculateContentArea(0,0,this.getWidth(),this.getHeight());
    }
  }
}",0.9404553415061296
145232,"public AcquiringQuestionScreen getWidget(FormElementBinding prompt,char str){
  BarcodeQuestionWidget barcodeWidget=new BarcodeQuestionWidget(prompt,str);
  ;
  try {
    IBarcodeProcessingService barcodeProcessor=(IBarcodeProcessingService)JavaRosaServiceProvider.instance().getService(""String_Node_Str"");
    barcodeWidget.setBarcodeProcessor(barcodeProcessor);
    return barcodeWidget;
  }
 catch (  UnavailableServiceException se) {
    return null;
  }
}","public AcquiringQuestionScreen getWidget(FormElementBinding prompt,char str){
  BarcodeQuestionWidget barcodeWidget=new BarcodeQuestionWidget(prompt,str);
  try {
    IBarcodeProcessingService barcodeProcessor=(IBarcodeProcessingService)JavaRosaServiceProvider.instance().getService(""String_Node_Str"");
    barcodeWidget.setBarcodeProcessor(barcodeProcessor);
    return barcodeWidget;
  }
 catch (  UnavailableServiceException se) {
    return null;
  }
}",0.9956331877729258
145233,"private void unjar(String filename,String destDir){
  final int BUFFER=2048;
  if (destDir.charAt(destDir.length() - 1) != '/')   destDir+=""String_Node_Str"";
  try {
    BufferedOutputStream dest=null;
    BufferedInputStream is=null;
    JarEntry entry;
    JarFile jarfile=new JarFile(filename);
    Enumeration e=jarfile.entries();
    while (e.hasMoreElements()) {
      entry=(JarEntry)e.nextElement();
      if (entry.isDirectory()) {
        File d=new File(destDir + entry.getName());
        d.mkdirs();
        continue;
      }
      File f=new File(destDir + entry.getName());
      if (!f.exists()) {
        File f2=new File(f.getParent());
        f2.mkdirs();
        f.createNewFile();
      }
 else {
      }
      is=new BufferedInputStream(jarfile.getInputStream(entry));
      int count;
      byte data[]=new byte[BUFFER];
      FileOutputStream fos=new FileOutputStream(f);
      dest=new BufferedOutputStream(fos,BUFFER);
      while ((count=is.read(data,0,BUFFER)) != -1) {
        dest.write(data,0,count);
      }
      dest.flush();
      dest.close();
      is.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private boolean unjar(String filename,String destDir){
  final int BUFFER=2048;
  if (destDir.charAt(destDir.length() - 1) != '/')   destDir+=""String_Node_Str"";
  try {
    BufferedOutputStream dest=null;
    BufferedInputStream is=null;
    JarEntry entry;
    JarFile jarfile;
    try {
      jarfile=new JarFile(filename);
    }
 catch (    Exception e) {
      addToTextArea(""String_Node_Str"" + filename);
      return false;
    }
    Enumeration e=jarfile.entries();
    while (e.hasMoreElements()) {
      entry=(JarEntry)e.nextElement();
      if (entry.isDirectory()) {
        File d=new File(destDir + entry.getName());
        d.mkdirs();
        continue;
      }
      File f=new File(destDir + entry.getName());
      if (!f.exists()) {
        File f2=new File(f.getParent());
        f2.mkdirs();
        f.createNewFile();
      }
 else {
      }
      is=new BufferedInputStream(jarfile.getInputStream(entry));
      int count;
      byte data[]=new byte[BUFFER];
      FileOutputStream fos=new FileOutputStream(f);
      dest=new BufferedOutputStream(fos,BUFFER);
      while ((count=is.read(data,0,BUFFER)) != -1) {
        dest.write(data,0,count);
      }
      dest.flush();
      dest.close();
      is.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}",0.9351068117694478
145234,"public XFormValidatorGUI(){
  super();
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      dispose();
      System.exit(0);
    }
  }
);
  File f=new File(""String_Node_Str"");
  try {
    this.origJarDir=f.getCanonicalPath();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  readProperties();
  this.setTitle(""String_Node_Str"");
  createGUI();
  this.pack();
  setVisible(true);
  Font orig=this.formName.getFont();
  Font bold=orig.deriveFont(orig.getStyle() ^ Font.BOLD);
  this.formName.setFont(bold);
  this.status.setFont(bold);
  Timer t=new Timer();
  t.schedule(new CheckOutput(),100,100);
  if (!checkParams()) {
    addToTextArea(""String_Node_Str"");
  }
 else {
    addToTextArea(""String_Node_Str"");
  }
}","public XFormValidatorGUI(){
  super();
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      dispose();
      System.exit(0);
    }
  }
);
  File f=new File(""String_Node_Str"");
  try {
    this.origJarDir=f.getCanonicalPath() + ""String_Node_Str"";
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  readProperties();
  this.setTitle(""String_Node_Str"");
  createGUI();
  this.pack();
  setVisible(true);
  Font orig=this.formName.getFont();
  Font bold=orig.deriveFont(orig.getStyle() ^ Font.BOLD);
  this.formName.setFont(bold);
  this.status.setFont(bold);
  Timer t=new Timer();
  t.schedule(new CheckOutput(),100,100);
  if (!checkParams()) {
    addToTextArea(""String_Node_Str"");
  }
 else {
    addToTextArea(""String_Node_Str"");
  }
}",0.9872448979591836
145235,"private void tryForm(){
  addToTextArea(""String_Node_Str"");
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  File workDir=new File(this.origJarDir + ""String_Node_Str"");
  if (workDir.exists()) {
    deleteDirectory(workDir);
  }
  workDir.mkdirs();
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  unjar(this.origJarDir + this.JAR_NAME,workDir.getAbsolutePath());
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  File form=new File(workDir.getAbsolutePath() + ""String_Node_Str"" + this.FORM_NAME);
  File newForm=new File(this.newForm);
  if (!form.exists()) {
    System.err.println(""String_Node_Str"");
    addToTextArea(""String_Node_Str"");
    deleteDirectory(workDir);
    return;
  }
  if (!newForm.exists()) {
    System.err.println(""String_Node_Str"");
    deleteDirectory(workDir);
    return;
  }
  form.delete();
  try {
    byte[] data=new byte[BUFFER];
    form.createNewFile();
    FileInputStream in=new FileInputStream(newForm);
    FileOutputStream out=new FileOutputStream(form);
    int count;
    while ((count=in.read(data,0,BUFFER)) != -1) {
      out.write(data,0,count);
    }
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  File testDir=new File(this.origJarDir + ""String_Node_Str"");
  if (testDir.exists()) {
    deleteDirectory(testDir);
  }
  testDir.mkdirs();
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  long size=jar(workDir.getAbsolutePath(),testDir.getAbsolutePath(),this.JAR_NAME);
  deleteDirectory(workDir);
  String jarSize=new String(""String_Node_Str"" + size);
  String outJad=new String(testDir.getAbsolutePath() + ""String_Node_Str"" + this.JAD_NAME);
  try {
    PrintWriter pw=new PrintWriter(outJad);
    pw.print(this.JAD_START);
    pw.print(jarSize);
    pw.print(this.JAD_FINISH);
    pw.flush();
    pw.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  updateStatus(""String_Node_Str"");
  emulate(this.wtkPath,outJad);
}","private void tryForm(){
  addToTextArea(""String_Node_Str"");
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  File workDir=new File(this.origJarDir + ""String_Node_Str"");
  if (workDir.exists()) {
    deleteDirectory(workDir);
  }
  workDir.mkdirs();
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  if (!unjar(this.origJarDir + this.JAR_NAME,workDir.getAbsolutePath()))   return;
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  File form=new File(workDir.getAbsolutePath() + ""String_Node_Str"" + this.FORM_NAME);
  File newForm=new File(this.newForm);
  if (!form.exists()) {
    System.err.println(""String_Node_Str"");
    addToTextArea(""String_Node_Str"");
    deleteDirectory(workDir);
    return;
  }
  if (!newForm.exists()) {
    System.err.println(""String_Node_Str"");
    deleteDirectory(workDir);
    return;
  }
  form.delete();
  try {
    byte[] data=new byte[BUFFER];
    form.createNewFile();
    FileInputStream in=new FileInputStream(newForm);
    FileOutputStream out=new FileOutputStream(form);
    int count;
    while ((count=in.read(data,0,BUFFER)) != -1) {
      out.write(data,0,count);
    }
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
catch (  IOException e1) {
    e1.printStackTrace();
  }
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  File testDir=new File(this.origJarDir + ""String_Node_Str"");
  if (testDir.exists()) {
    deleteDirectory(testDir);
  }
  testDir.mkdirs();
  updateStatus(""String_Node_Str"");
  addToTextArea(""String_Node_Str"");
  long size=jar(workDir.getAbsolutePath(),testDir.getAbsolutePath(),this.JAR_NAME);
  deleteDirectory(workDir);
  String jarSize=new String(""String_Node_Str"" + size);
  String outJad=new String(testDir.getAbsolutePath() + ""String_Node_Str"" + this.JAD_NAME);
  try {
    PrintWriter pw=new PrintWriter(outJad);
    pw.print(this.JAD_START);
    pw.print(jarSize);
    pw.print(this.JAD_FINISH);
    pw.flush();
    pw.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  updateStatus(""String_Node_Str"");
  emulate(this.wtkPath,outJad);
}",0.9965172974228
145236,"private void initGUI(){
  setUpCommands();
  initProgressBar();
  if (model.isReadOnly()) {
    while (!model.getQuestionIndex().isEndOfFormIndex()) {
      controller.stepQuestion(true);
    }
  }
 else   if (model.getStartIndex() != null) {
    while (!model.getQuestionIndex().equals(model.getStartIndex())) {
      controller.stepQuestion(true);
    }
  }
 else {
    controller.stepQuestion(true);
  }
}","private void initGUI(){
  setUpCommands();
  initProgressBar();
  if (model.isReadOnly()) {
    while (!model.getQuestionIndex().isEndOfFormIndex()) {
      controller.stepQuestion(true);
    }
  }
 else   if (model.getStartIndex() != null) {
    while (!model.getQuestionIndex().equals(model.getStartIndex())) {
      controller.stepQuestion(true);
    }
  }
 else {
    controller.stepQuestion(true);
  }
  this.currentlyActiveContainer=this.container;
}",0.9421296296296297
145237,"public AddUserActivity(IShell p){
  this.parent=p;
}","public AddUserActivity(IShell p){
  this.parent=p;
  success=false;
}",0.859504132231405
145238,"public void commandAction(Command c,Displayable d){
  if (!d.equals(addUser)) {
    Hashtable returnArgs=new Hashtable();
    returnArgs.put(Constants.RETURN_ARG_KEY,addUser.getConstructedUser());
    parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
  }
  if (c == this.CMD_SAVE) {
    String answer=addUser.readyToSave();
    if (answer.equals(""String_Node_Str"")) {
      final javax.microedition.lcdui.Alert successfulNewUser=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,javax.microedition.lcdui.AlertType.CONFIRMATION);
      successfulNewUser.setCommandListener(this);
      successfulNewUser.setTimeout(Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return successfulNewUser;
        }
      }
);
    }
 else     if (answer.substring(0,10).equals(""String_Node_Str"")) {
      final javax.microedition.lcdui.Alert nameTakenError=new javax.microedition.lcdui.Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return nameTakenError;
        }
      }
);
      parent.setDisplay(this,this.addUser);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final javax.microedition.lcdui.Alert noInputError=new javax.microedition.lcdui.Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return noInputError;
        }
      }
);
      parent.setDisplay(this,this.addUser);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final javax.microedition.lcdui.Alert passwordMismatchError=new javax.microedition.lcdui.Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      passwordMismatchError.setTimeout(javax.microedition.lcdui.Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return passwordMismatchError;
        }
      }
);
      parent.setDisplay(this,this.addUser);
    }
  }
 else   if (c == this.CMD_CANCEL) {
    Hashtable returnArgs=new Hashtable();
    returnArgs.put(Constants.RETURN_ARG_KEY,addUser.getConstructedUser());
    parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
  }
}","public void commandAction(Command c,Displayable d){
  if (!d.equals(addUser)) {
    if (!success) {
      parent.setDisplay(this,addUser);
    }
 else {
      System.out.println(""String_Node_Str"");
      Hashtable returnArgs=new Hashtable();
      returnArgs.put(Constants.RETURN_ARG_KEY,addUser.getConstructedUser());
      parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
    }
  }
  if (c == this.CMD_SAVE) {
    final Alert successfulNewUser=new Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.CONFIRMATION);
    String answer=addUser.readyToSave();
    if (answer.equals(""String_Node_Str"")) {
      successfulNewUser.setCommandListener(this);
      successfulNewUser.setTimeout(Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return successfulNewUser;
        }
      }
);
      success=true;
    }
 else     if (answer.substring(0,10).equals(""String_Node_Str"")) {
      final Alert nameTakenError=new Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      nameTakenError.setCommandListener(this);
      nameTakenError.setTimeout(Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return nameTakenError;
        }
      }
);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final Alert noInputError=new Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      noInputError.setTimeout(Alert.FOREVER);
      noInputError.setCommandListener(this);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return noInputError;
        }
      }
);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final Alert passwordMismatchError=new Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      passwordMismatchError.setTimeout(Alert.FOREVER);
      passwordMismatchError.setCommandListener(this);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return passwordMismatchError;
        }
      }
);
    }
  }
 else   if (c == this.CMD_CANCEL) {
    Hashtable returnArgs=new Hashtable();
    parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
  }
}",0.6498013798871002
145239,"public EditUserActivity(IShell p){
  this.parent=p;
}","public EditUserActivity(IShell p){
  this.parent=p;
  success=false;
}",0.8617886178861789
145240,"public void commandAction(Command c,Displayable d){
  if (!d.equals(addUser)) {
    Hashtable returnArgs=new Hashtable();
    returnArgs.put(Constants.RETURN_ARG_KEY,addUser.getConstructedUser());
    parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
  }
  if (c == this.CMD_SAVE) {
    String answer=addUser.readyToSave();
    if (answer.equals(""String_Node_Str"")) {
      final javax.microedition.lcdui.Alert successfulNewUser=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,javax.microedition.lcdui.AlertType.CONFIRMATION);
      successfulNewUser.setCommandListener(this);
      successfulNewUser.setTimeout(Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return successfulNewUser;
        }
      }
);
    }
 else     if (answer.substring(0,10).equals(""String_Node_Str"")) {
      final javax.microedition.lcdui.Alert nameTakenError=new javax.microedition.lcdui.Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return nameTakenError;
        }
      }
);
      parent.setDisplay(this,this.addUser);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final javax.microedition.lcdui.Alert noInputError=new javax.microedition.lcdui.Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return noInputError;
        }
      }
);
      parent.setDisplay(this,this.addUser);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final javax.microedition.lcdui.Alert passwordMismatchError=new javax.microedition.lcdui.Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      passwordMismatchError.setTimeout(javax.microedition.lcdui.Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return passwordMismatchError;
        }
      }
);
      parent.setDisplay(this,this.addUser);
    }
  }
 else   if (c == this.CMD_CANCEL) {
    Hashtable returnArgs=new Hashtable();
    parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
  }
}","public void commandAction(Command c,Displayable d){
  if (!d.equals(addUser)) {
    if (!success) {
      parent.setDisplay(this,addUser);
    }
 else {
      System.out.println(""String_Node_Str"");
      Hashtable returnArgs=new Hashtable();
      returnArgs.put(Constants.RETURN_ARG_KEY,addUser.getConstructedUser());
      parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
    }
  }
  if (c == this.CMD_SAVE) {
    final Alert successfulNewUser=new Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.CONFIRMATION);
    String answer=addUser.readyToSave();
    if (answer.equals(""String_Node_Str"")) {
      successfulNewUser.setCommandListener(this);
      successfulNewUser.setTimeout(Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return successfulNewUser;
        }
      }
);
      success=true;
    }
 else     if (answer.substring(0,10).equals(""String_Node_Str"")) {
      final Alert nameTakenError=new Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      nameTakenError.setCommandListener(this);
      nameTakenError.setTimeout(Alert.FOREVER);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return nameTakenError;
        }
      }
);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final Alert noInputError=new Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      noInputError.setTimeout(Alert.FOREVER);
      noInputError.setCommandListener(this);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return noInputError;
        }
      }
);
    }
 else     if (answer.substring(0,9).equals(""String_Node_Str"")) {
      System.out.println(answer.substring(9));
      final Alert passwordMismatchError=new Alert(""String_Node_Str"",answer,null,AlertType.ERROR);
      passwordMismatchError.setTimeout(Alert.FOREVER);
      passwordMismatchError.setCommandListener(this);
      parent.setDisplay(this,new IView(){
        public Object getScreenObject(){
          return passwordMismatchError;
        }
      }
);
    }
  }
 else   if (c == this.CMD_CANCEL) {
    Hashtable returnArgs=new Hashtable();
    parent.returnFromActivity(this,Constants.ACTIVITY_COMPLETE,returnArgs);
  }
}",0.6601529311809685
145241,"public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String MD5=null;
  try {
    Enumeration headers=req.getHeaderNames();
    String postData=""String_Node_Str"";
    long totalBytesRead=0;
    while (headers.hasMoreElements()) {
      String nextName=(String)headers.nextElement();
      String nextValue=req.getHeader(nextName);
      if (nextName.equalsIgnoreCase(""String_Node_Str"")) {
        resp.addHeader(""String_Node_Str"",nextValue);
        MD5=nextValue;
        if (md5toLastByteRead.containsKey(MD5)) {
          totalBytesRead=md5toLastByteRead.get(MD5).longValue();
        }
 else {
          md5toLastByteRead.put(MD5,new Long(0));
        }
      }
      postData+=nextName + ""String_Node_Str"" + nextValue+ ""String_Node_Str"";
    }
    int bufSize=1400;
    byte[] temp=new byte[bufSize];
    InputStream stream=req.getInputStream();
    int bytesRead=stream.read(temp);
    ByteArrayOutputStream body=new ByteArrayOutputStream();
    File f;
    if (MD5 != null) {
      f=new File(_storageRoot + MD5 + ""String_Node_Str"");
    }
 else     f=new File(this.getNewFileName(""String_Node_Str""));
    if (!f.exists())     f.createNewFile();
    OutputStream output=new BufferedOutputStream(new FileOutputStream(f,true));
    try {
      while (bytesRead != -1) {
        totalBytesRead+=bytesRead;
        if (MD5 != null)         md5toLastByteRead.put(MD5,new Long(totalBytesRead));
        if (bytesRead < bufSize) {
          byte[] newTemp=new byte[bytesRead];
          for (int i=0; i < bytesRead; i++) {
            newTemp[i]=temp[i];
          }
          output.write(newTemp);
          body.write(newTemp);
        }
 else {
          output.write(temp);
          body.write(temp);
        }
        bytesRead=req.getInputStream().read(temp);
      }
    }
  finally {
      output.close();
    }
    if (MD5 != null) {
      String localMD5=hashcode(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
      if (localMD5 != null && !MD5.equalsIgnoreCase(localMD5)) {
        return;
      }
 else {
        File g=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        File h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        for (int i=1; h.exists(); i++) {
          h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str""+ i+ ""String_Node_Str"");
        }
        g.renameTo(h);
        md5toLastByteRead.remove(MD5);
        body.close();
        body=new ByteArrayOutputStream();
        InputStream in=new BufferedInputStream(new FileInputStream(h));
        bufSize=8192;
        temp=new byte[bufSize];
        bytesRead=in.read(temp);
        while (bytesRead != -1) {
          if (bytesRead < bufSize) {
            byte[] newTemp=new byte[bytesRead];
            for (int i=0; i < bytesRead; i++) {
              newTemp[i]=temp[i];
            }
            body.write(newTemp);
          }
 else {
            body.write(temp);
          }
          bytesRead=in.read(temp);
        }
        body.flush();
      }
    }
    postData+=""String_Node_Str"" + totalBytesRead + ""String_Node_Str"";
    postData+=new String(body.toByteArray());
    parseAndSaveHtml(req,body.toByteArray());
    postData+=_lastPostParsable=trim(postData);
    _lastFileName=saveFile(postData);
  }
 catch (  Exception e) {
    logException(e);
    _lastError=HEADER + ""String_Node_Str"" + e.getMessage();
    _lastError+=""String_Node_Str"";
    e.printStackTrace(resp.getWriter());
  }
}","public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String MD5=null;
  try {
    Enumeration headers=req.getHeaderNames();
    String postData=""String_Node_Str"";
    long totalBytesRead=0;
    while (headers.hasMoreElements()) {
      String nextName=(String)headers.nextElement();
      String nextValue=req.getHeader(nextName);
      if (nextName.equalsIgnoreCase(""String_Node_Str"")) {
        resp.addHeader(""String_Node_Str"",nextValue);
        MD5=nextValue;
        if (md5toLastByteRead.containsKey(MD5)) {
          totalBytesRead=md5toLastByteRead.get(MD5).longValue();
        }
 else {
          md5toLastByteRead.put(MD5,new Long(0));
        }
      }
      postData+=nextName + ""String_Node_Str"" + nextValue+ ""String_Node_Str"";
    }
    int bufSize=1400;
    byte[] temp=new byte[bufSize];
    ByteArrayOutputStream body=new ByteArrayOutputStream();
    File f;
    if (MD5 != null) {
      f=new File(_storageRoot + MD5 + ""String_Node_Str"");
    }
 else     f=new File(this.getNewFileName(""String_Node_Str""));
    if (!f.exists())     f.createNewFile();
    if (!f.canWrite())     throw new IOException(""String_Node_Str"");
    OutputStream output=new BufferedOutputStream(new FileOutputStream(f,true));
    int bytesRead=req.getInputStream().read(temp);
    try {
      while (bytesRead != -1) {
        if (bytesRead < bufSize) {
          byte[] newTemp=new byte[bytesRead];
          for (int i=0; i < bytesRead; i++) {
            newTemp[i]=temp[i];
          }
          output.write(newTemp);
          body.write(newTemp);
        }
 else {
          output.write(temp);
          body.write(temp);
        }
        output.flush();
        totalBytesRead+=bytesRead;
        if (MD5 != null)         md5toLastByteRead.put(MD5,new Long(totalBytesRead));
        bytesRead=req.getInputStream().read(temp);
      }
    }
  finally {
      output.close();
    }
    if (MD5 != null) {
      String localMD5=hashcode(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
      if (localMD5 != null && !MD5.equalsIgnoreCase(localMD5)) {
        return;
      }
 else {
        File g=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        File h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        for (int i=1; h.exists(); i++) {
          h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str""+ i+ ""String_Node_Str"");
        }
        g.renameTo(h);
        md5toLastByteRead.remove(MD5);
        body.close();
        body=new ByteArrayOutputStream();
        InputStream in=new BufferedInputStream(new FileInputStream(h));
        bufSize=8192;
        temp=new byte[bufSize];
        bytesRead=in.read(temp);
        while (bytesRead != -1) {
          if (bytesRead < bufSize) {
            byte[] newTemp=new byte[bytesRead];
            for (int i=0; i < bytesRead; i++) {
              newTemp[i]=temp[i];
            }
            body.write(newTemp);
          }
 else {
            body.write(temp);
          }
          bytesRead=in.read(temp);
        }
        body.flush();
      }
    }
    postData+=""String_Node_Str"" + totalBytesRead + ""String_Node_Str"";
    postData+=new String(body.toByteArray());
    parseAndSaveHtml(req,body.toByteArray());
    postData+=_lastPostParsable=trim(postData);
    _lastFileName=saveFile(postData);
  }
 catch (  Exception e) {
    logException(e);
    _lastError=HEADER + ""String_Node_Str"" + e.getMessage();
    _lastError+=""String_Node_Str"";
    e.printStackTrace(resp.getWriter());
  }
}",0.8769492486532464
145242,"private void readProperties(){
  File f=new File(this.PROPERTIES_FILE);
  if (!f.exists()) {
    System.out.println(""String_Node_Str"");
    writeProperties();
    return;
  }
  Properties props=new java.util.Properties();
  try {
    FileInputStream fis=new FileInputStream(f);
    props.load(fis);
    fis.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  this.wtkPath=props.getProperty(this.WTK_PATH);
  this.newForm=props.getProperty(this.NEW_FORM);
  this.origJarDir=props.getProperty(this.ORIGINAL_JAR_DIR);
  openXMLWith=props.getProperty(this.OPEN_XML_WITH);
  openAtEnd=new Boolean(props.getProperty(this.OPEN_AT_END));
}","private void readProperties(){
  File f=new File(this.PROPERTIES_FILE);
  if (!f.exists() && !noRecurse) {
    System.out.println(""String_Node_Str"");
    writeProperties();
    noRecurse=true;
    readProperties();
    return;
  }
  Properties props=new java.util.Properties();
  try {
    FileInputStream fis=new FileInputStream(f);
    props.load(fis);
    fis.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  this.wtkPath=props.getProperty(this.WTK_PATH);
  this.newForm=props.getProperty(this.NEW_FORM);
  this.origJarDir=props.getProperty(this.ORIGINAL_JAR_DIR);
  openXMLWith=props.getProperty(this.OPEN_XML_WITH);
  openAtEnd=new Boolean(props.getProperty(this.OPEN_AT_END));
}",0.962314939434724
145243,"public XFormValidatorGUI(){
  super();
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      dispose();
      System.exit(0);
    }
  }
);
  File f=new File(""String_Node_Str"");
  try {
    this.origJarDir=f.getCanonicalPath() + ""String_Node_Str"" + JAR_NAME;
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  readProperties();
  this.setTitle(""String_Node_Str"");
  createGUI();
  this.pack();
  setVisible(true);
  Font orig=this.formName.getFont();
  Font bold=orig.deriveFont(orig.getStyle() ^ Font.BOLD);
  this.formName.setFont(bold);
  this.status.setFont(bold);
  Timer t=new Timer();
  t.schedule(new CheckOutput(),100,100);
  if (!checkParams()) {
    addToTextArea(""String_Node_Str"");
  }
 else {
    addToTextArea(""String_Node_Str"");
  }
}","public XFormValidatorGUI(){
  super();
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      dispose();
      System.exit(0);
    }
  }
);
  File f=new File(""String_Node_Str"");
  try {
    this.origJarDir=f.getCanonicalPath();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  readProperties();
  this.setTitle(""String_Node_Str"");
  createGUI();
  this.pack();
  setVisible(true);
  Font orig=this.formName.getFont();
  Font bold=orig.deriveFont(orig.getStyle() ^ Font.BOLD);
  this.formName.setFont(bold);
  this.status.setFont(bold);
  Timer t=new Timer();
  t.schedule(new CheckOutput(),100,100);
  if (!checkParams()) {
    addToTextArea(""String_Node_Str"");
  }
 else {
    addToTextArea(""String_Node_Str"");
  }
}",0.980367321089297
145244,"public GetURLForm(ITransportDestination preload){
  super(""String_Node_Str"");
  textField=new TextField(""String_Node_Str"",((HttpTransportDestination)preload).getURL(),140,TextField.ANY);
  append(textField);
  addCommand(CMD_OK);
  addCommand(CMD_BACK);
}","public GetURLForm(ITransportDestination preload){
  super(""String_Node_Str"");
  String prefill=""String_Node_Str"";
  HttpTransportDestination def=((HttpTransportDestination)preload);
  if (def != null) {
    prefill=def.getURL();
  }
  textField=new TextField(""String_Node_Str"",prefill,140,TextField.ANY);
  append(textField);
  addCommand(CMD_OK);
  addCommand(CMD_BACK);
}",0.697452229299363
145245,"public int getRelativeScrollYOffset(){
  if (!this.enableScrolling && this.parent instanceof Container) {
    return ((Container)this.parent).getScrollYOffset() + this.relativeY + this.parent.relativeY;
  }
  int offset=this.targetYOffset;
  if (!this.scrollSmooth) {
    offset=this.yOffset;
  }
  return offset;
}","public int getRelativeScrollYOffset(){
  if (!this.enableScrolling && this.parent instanceof Container) {
    Item walker=this.parent;
    int offset=0;
    while (walker instanceof Container) {
      offset+=walker.relativeY;
      walker=walker.getParent();
    }
    return ((Container)this.parent).getScrollYOffset() + this.relativeY + offset;
  }
  int offset=this.targetYOffset;
  if (!this.scrollSmooth) {
    offset=this.yOffset;
  }
  return offset;
}",0.7587096774193548
145246,"protected Item getEntryWidget(QuestionDef question){
  this.question=question;
  ChoiceGroup cg=new ChoiceGroup(""String_Node_Str"",style){
    public int getRelativeScrollYOffset(){
      if (!this.enableScrolling && this.parent instanceof Container) {
        return ((Container)this.parent).getScrollYOffset() + this.relativeY + this.parent.relativeY;
      }
      int offset=this.targetYOffset;
      if (!this.scrollSmooth) {
        offset=this.yOffset;
      }
      return offset;
    }
  }
;
  for (int i=0; i < question.getSelectItems().size(); i++)   cg.append(""String_Node_Str"",null);
  this.choicegroup=cg;
  return cg;
}","protected Item getEntryWidget(QuestionDef question){
  this.question=question;
  ChoiceGroup cg=new ChoiceGroup(""String_Node_Str"",style){
    public int getRelativeScrollYOffset(){
      if (!this.enableScrolling && this.parent instanceof Container) {
        Item walker=this.parent;
        int offset=0;
        while (walker instanceof Container) {
          offset+=walker.relativeY;
          walker=walker.getParent();
        }
        return ((Container)this.parent).getScrollYOffset() + this.relativeY + offset;
      }
      int offset=this.targetYOffset;
      if (!this.scrollSmooth) {
        offset=this.yOffset;
      }
      return offset;
    }
  }
;
  for (int i=0; i < question.getSelectItems().size(); i++)   cg.append(""String_Node_Str"",null);
  this.choicegroup=cg;
  return cg;
}",0.8529616724738676
145247,"protected static QuestionDef parseControl(IFormElement parent,Element e,FormDef f,int controlType){
  QuestionDef question=new QuestionDef();
  question.setID(serialQuestionID++);
  IDataReference dataRef=null;
  boolean refFromBind=false;
  String ref=e.getAttributeValue(null,""String_Node_Str"");
  String bind=e.getAttributeValue(null,""String_Node_Str"");
  if (bind != null) {
    DataBinding binding=(DataBinding)bindingsByID.get(bind);
    if (binding == null) {
      throw new XFormParseException(""String_Node_Str"" + bind + ""String_Node_Str"");
    }
    dataRef=binding.getReference();
    refFromBind=true;
  }
 else   if (ref != null) {
    dataRef=new XPathReference(ref);
  }
 else {
    if (controlType == Constants.CONTROL_TRIGGER) {
    }
 else {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  if (dataRef != null) {
    if (!refFromBind) {
      dataRef=getAbsRef(dataRef,parent);
    }
    question.setBind(dataRef);
    if (controlType == Constants.CONTROL_SELECT_ONE) {
      selectOnes.addElement((TreeReference)dataRef.getReference());
    }
 else     if (controlType == Constants.CONTROL_SELECT_MULTI) {
      selectMultis.addElement((TreeReference)dataRef.getReference());
    }
  }
  question.setControlType(controlType);
  question.setAppearanceAttr(e.getAttributeValue(null,""String_Node_Str""));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      parseQuestionLabel(f,question,child);
    }
 else     if (""String_Node_Str"".equals(childName)) {
      parseHint(f,question,child);
    }
 else     if ((controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE) && ""String_Node_Str"".equals(childName)) {
      parseItem(f,question,child);
    }
  }
  parent.addChild(question);
  return question;
}","protected static QuestionDef parseControl(IFormElement parent,Element e,FormDef f,int controlType){
  QuestionDef question=new QuestionDef();
  question.setID(serialQuestionID++);
  IDataReference dataRef=null;
  boolean refFromBind=false;
  String ref=e.getAttributeValue(null,""String_Node_Str"");
  String bind=e.getAttributeValue(null,""String_Node_Str"");
  if (bind != null) {
    DataBinding binding=(DataBinding)bindingsByID.get(bind);
    if (binding == null) {
      throw new XFormParseException(""String_Node_Str"" + bind + ""String_Node_Str"");
    }
    dataRef=binding.getReference();
    refFromBind=true;
  }
 else   if (ref != null) {
    dataRef=new XPathReference(ref);
  }
 else {
    if (controlType == Constants.CONTROL_TRIGGER) {
    }
 else {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  if (dataRef != null) {
    if (!refFromBind) {
      dataRef=getAbsRef(dataRef,parent);
    }
    question.setBind(dataRef);
    if (controlType == Constants.CONTROL_SELECT_ONE) {
      selectOnes.addElement((TreeReference)dataRef.getReference());
    }
 else     if (controlType == Constants.CONTROL_SELECT_MULTI) {
      selectMultis.addElement((TreeReference)dataRef.getReference());
    }
  }
  boolean isSelect=(controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE);
  question.setControlType(controlType);
  question.setAppearanceAttr(e.getAttributeValue(null,""String_Node_Str""));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      parseQuestionLabel(f,question,child);
    }
 else     if (""String_Node_Str"".equals(childName)) {
      parseHint(f,question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(f,question,child);
    }
  }
  if (isSelect)   question.localizeSelectMap(null);
  parent.addChild(question);
  return question;
}",0.7224560534785838
145248,"/** 
 * Get the default root directory
 * @return
 */
public String getDefaultRoot() throws FileException {
  Enumeration root=getRootNames();
  String rootName=""String_Node_Str"";
  while (root.hasMoreElements()) {
    rootName=(String)root.nextElement();
  }
  return rootName;
}","/** 
 * Get the default root directory
 * @return
 */
public String getDefaultRoot() throws FileException {
  Vector v=new Vector();
  addArrtoVec(v,getRootNames());
  Enumeration root=v.elements();
  String rootName=""String_Node_Str"";
  while (root.hasMoreElements()) {
    rootName=(String)root.nextElement();
  }
  return rootName;
}",0.8733766233766234
145249,"/** 
 * Create a file 
 * @param fullName
 * @param data
 * @return whether the file was created
 */
public boolean createFile(String fullName,byte[] data) throws FileException {
  OutputStream fos=null;
  FileConnection file=null;
  boolean isSaved=false;
  try {
    file=(FileConnection)Connector.open(fullName);
    if (!file.exists()) {
      file.create();
    }
    fos=file.openOutputStream();
    fos.write(data);
  }
 catch (  IOException ex) {
    throw new FileException(""String_Node_Str"");
    return false;
  }
 finally {
    close(fos);
    close(file);
  }
  return true;
}","/** 
 * Create a file 
 * @param fullName
 * @param data
 * @return whether the file was created
 */
public boolean createFile(String fullName,byte[] data) throws FileException {
  OutputStream fos=null;
  FileConnection file=null;
  boolean isSaved=false;
  try {
    file=(FileConnection)Connector.open(fullName);
    if (!file.exists()) {
      file.create();
    }
    fos=file.openOutputStream();
    fos.write(data);
    isSaved=true;
  }
 catch (  IOException ex) {
    isSaved=false;
    throw new FileException(""String_Node_Str"");
  }
 finally {
    close(fos);
    close(file);
  }
  return isSaved;
}",0.945
145250,"/** 
 * Gets the directory with the most recent changes below the one passed in. This call is recursive
 * @param directory
 * @return
 */
public String getMostRecentlyModifiedDirectoryBelow(String directory){
  if (!directory.endsWith(""String_Node_Str"")) {
    directory=directory + ""String_Node_Str"";
  }
  String toReturn=directory;
  try {
    Date latestFoundDate=getModifiedDate(directory);
    Enumeration filesBelow=listDirectory(directory);
    while (filesBelow.hasMoreElements()) {
      FileConnection subFile=null;
      String subFileName=(String)filesBelow.nextElement();
      try {
        String fullPathConstructed=directory + subFileName;
        subFile=(FileConnection)Connector.open(fullPathConstructed);
        if (subFile.isDirectory()) {
          Date subFileDate=getModifiedDateRecursive(fullPathConstructed);
          if (subFileDate.getTime() > latestFoundDate.getTime()) {
            latestFoundDate=subFileDate;
            toReturn=fullPathConstructed;
          }
        }
      }
  finally {
        close(subFile);
      }
    }
    if (toReturn != directory) {
      return getMostRecentlyModifiedDirectoryBelow(toReturn);
    }
  }
 catch (  IOException e) {
    handleException(e);
    toReturn=null;
  }
  return toReturn;
}","/** 
 * Gets the directory with the most recent changes below the one passed in. This call is recursive
 * @param directory
 * @return
 */
public String getMostRecentlyModifiedDirectoryBelow(String directory){
  if (!directory.endsWith(""String_Node_Str"")) {
    directory=directory + ""String_Node_Str"";
  }
  String toReturn=directory;
  try {
    Date latestFoundDate=getModifiedDate(directory);
    Vector v=new Vector();
    addArrtoVec(v,listDirectory(directory));
    Enumeration filesBelow=v.elements();
    while (filesBelow.hasMoreElements()) {
      FileConnection subFile=null;
      String subFileName=(String)filesBelow.nextElement();
      try {
        String fullPathConstructed=directory + subFileName;
        subFile=(FileConnection)Connector.open(fullPathConstructed);
        if (subFile.isDirectory()) {
          Date subFileDate=getModifiedDateRecursive(fullPathConstructed);
          if (subFileDate.getTime() > latestFoundDate.getTime()) {
            latestFoundDate=subFileDate;
            toReturn=fullPathConstructed;
          }
        }
      }
  finally {
        close(subFile);
      }
    }
    if (toReturn != directory) {
      return getMostRecentlyModifiedDirectoryBelow(toReturn);
    }
  }
 catch (  IOException e) {
    handleException(e);
    toReturn=null;
  }
catch (  FileException fe) {
  }
  return toReturn;
}",0.9471281856219096
145251,"private static String[] enumtoStringArr(Enumeration enumer){
}","private static String[] enumtoStringArr(Enumeration enumer){
  Vector enumerationList=new Vector();
  Enumeration e=enumer;
  while (e.hasMoreElements())   enumerationList.addElement((String)e.nextElement());
  return vectorToStringArr(enumerationList);
}",0.3911671924290221
145252,"public InputStream getFileDataStream(String fileName) throws FileException {
  InputStream fis=null;
  FileConnection file=null;
  try {
    file=(FileConnection)Connector.open(fileName);
    fis=file.openInputStream();
    return fis;
  }
 catch (  Exception ex) {
    handleException(ex);
    throw new FileException(""String_Node_Str"");
  }
 finally {
    close(file);
  }
  return null;
}","public InputStream getFileDataStream(String fileName) throws FileException {
  InputStream fis=null;
  FileConnection file=null;
  try {
    file=(FileConnection)Connector.open(fileName);
    fis=file.openInputStream();
  }
 catch (  Exception ex) {
    handleException(ex);
    throw new FileException(""String_Node_Str"");
  }
 finally {
    close(file);
  }
  return fis;
}",0.9699346405228758
145253,"public String[] listDirectory(String directoryPath) throws FileException {
  FileConnection dir=null;
  System.out.println(""String_Node_Str"" + directoryPath);
  try {
    dir=(FileConnection)Connector.open(directoryPath);
    return enumtoStringArr(dir.list());
  }
 catch (  IOException ioe) {
    throw new FileException(""String_Node_Str"" + directoryPath + ""String_Node_Str"");
  }
catch (  Exception ex) {
    handleException(ex);
  }
 finally {
    close(dir);
  }
}","public String[] listDirectory(String directoryPath) throws FileException {
  FileConnection dir=null;
  System.out.println(""String_Node_Str"" + directoryPath);
  try {
    dir=(FileConnection)Connector.open(directoryPath);
  }
 catch (  IOException ioe) {
    throw new FileException(""String_Node_Str"" + directoryPath + ""String_Node_Str"");
  }
catch (  Exception ex) {
    handleException(ex);
  }
 finally {
    close(dir);
  }
  if (dir != null) {
    try {
      return enumtoStringArr(dir.list());
    }
 catch (    IOException ioe) {
      throw new FileException(""String_Node_Str"");
    }
  }
  return null;
}",0.7903970452446907
145254,"/** 
 * Create a directory from the path
 * @param path
 * @return true if the operation succeeded or the directory already existed
 */
public boolean createDirectory(String path) throws FileException {
  FileConnection directory=null;
  try {
    directory=(FileConnection)Connector.open(path);
    if (!directory.exists())     directory.mkdir();
  }
 catch (  IOException ex) {
    throw new FileException(""String_Node_Str"");
    return false;
  }
 finally {
    close(directory);
  }
  return true;
}","/** 
 * Create a directory from the path
 * @param path
 * @return true if the operation succeeded or the directory already existed
 */
public boolean createDirectory(String path) throws FileException {
  FileConnection directory=null;
  boolean dirCreated=false;
  try {
    directory=(FileConnection)Connector.open(path);
    if (!directory.exists()) {
      directory.mkdir();
      dirCreated=true;
    }
  }
 catch (  IOException ex) {
    dirCreated=false;
    throw new FileException(""String_Node_Str"");
  }
 finally {
    close(directory);
  }
  return dirCreated=false;
}",0.8901200369344414
145255,"public boolean deleteDirectory(String path) throws FileException {
  FileConnection directory=null;
  try {
    directory=(FileConnection)Connector.open(path);
    if (!directory.exists())     directory.rmdir();
  }
 catch (  IOException ex) {
    throw new FileException(""String_Node_Str"");
    return false;
  }
 finally {
    close(directory);
  }
  return true;
}","public boolean deleteDirectory(String path) throws FileException {
  FileConnection directory=null;
  boolean dirDeleted=false;
  try {
    directory=(FileConnection)Connector.open(path);
    if (directory.exists() && directory.isDirectory()) {
      directory.delete();
      dirDeleted=true;
    }
  }
 catch (  IOException ex) {
    dirDeleted=false;
    throw new FileException(""String_Node_Str"");
  }
 finally {
    close(directory);
  }
  return dirDeleted;
}",0.6971153846153846
145256,"private Date getModifiedDateRecursive(String fileName) throws FileException {
  FileConnection file=null;
  System.out.println(""String_Node_Str"" + fileName);
  if (!fileName.endsWith(""String_Node_Str"")) {
    fileName+=""String_Node_Str"";
  }
  try {
    file=(FileConnection)Connector.open(fileName);
    Date toReturn=new Date(file.lastModified());
    if (file.isDirectory()) {
      Enumeration filesBelow=listDirectory(fileName);
      while (filesBelow.hasMoreElements()) {
        String subFileName=(String)filesBelow.nextElement();
        String fullPathConstructed=fileName + subFileName;
        System.out.println(""String_Node_Str"" + fullPathConstructed);
        Date thisFileDate=getModifiedDateRecursive(fullPathConstructed);
        if (thisFileDate.getTime() > toReturn.getTime()) {
          toReturn=thisFileDate;
        }
      }
    }
 else {
    }
    return toReturn;
  }
 catch (  IOException ie) {
    throw new FileException(""String_Node_Str"");
  }
 finally {
    close(file);
  }
}","private Date getModifiedDateRecursive(String fileName) throws FileException {
  FileConnection file=null;
  System.out.println(""String_Node_Str"" + fileName);
  if (!fileName.endsWith(""String_Node_Str"")) {
    fileName+=""String_Node_Str"";
  }
  try {
    file=(FileConnection)Connector.open(fileName);
    Date toReturn=new Date(file.lastModified());
    if (file.isDirectory()) {
      Vector v=new Vector();
      addArrtoVec(v,listDirectory(fileName));
      Enumeration filesBelow=v.elements();
      while (filesBelow.hasMoreElements()) {
        String subFileName=(String)filesBelow.nextElement();
        String fullPathConstructed=fileName + subFileName;
        System.out.println(""String_Node_Str"" + fullPathConstructed);
        Date thisFileDate=getModifiedDateRecursive(fullPathConstructed);
        if (thisFileDate.getTime() > toReturn.getTime()) {
          toReturn=thisFileDate;
        }
      }
    }
 else {
    }
    return toReturn;
  }
 catch (  IOException ie) {
    throw new FileException(""String_Node_Str"");
  }
 finally {
    close(file);
  }
}",0.9481268011527376
145257,"public void registerService(IService service){
  services.put(service,service.getName());
}","public void registerService(IService service){
  services.put(service.getName(),service);
}",0.912087912087912
145258,"private void reliableHttpPost(String url,int MD5,String contentType,IDataPayload pl) throws IOException, OtherIOException {
  boolean sendFailed;
  InputStream in=pl.getPayloadStream();
  int numTries=0;
  while (numTries < MAX_NUM_RETRIES) {
    numTries++;
    sendFailed=false;
    con=(HttpConnection)Connector.open(url);
    con.setRequestMethod(HttpConnection.POST);
    setDefaultRequestProperties(con);
    con.setRequestProperty(""String_Node_Str"",contentType);
    con.setRequestProperty(""String_Node_Str"",String.valueOf(MD5));
    out=con.openOutputStream();
    try {
      int c=inputStreamReadCastExceptions(in);
      while (c != -1) {
        out.write(c);
        c=inputStreamReadCastExceptions(in);
      }
      out.flush();
      int responseCode=con.getResponseCode();
      String ETag=con.getHeaderField(""String_Node_Str"");
      if (responseCode != HttpConnection.HTTP_OK) {
        if (ETag != null) {
          sendFailed=true;
        }
 else {
          throw new OtherIOException(""String_Node_Str"" + responseCode);
        }
      }
    }
 catch (    IOException e) {
      sendFailed=true;
    }
    if (sendFailed) {
      cleanUp(out);
      cleanUp(con);
      int lastByte=reliableRequestLastByte(url,MD5);
      if (lastByte != -1) {
        cleanUp(in);
        in=pl.getPayloadStream();
        in.skip(lastByte);
        continue;
      }
      cleanUp(in);
      in=pl.getPayloadStream();
      continue;
    }
    in.close();
    in=con.openInputStream();
    int len=(int)con.getLength();
    if (len > 0) {
      int actual=0;
      int bytesread=0;
      byte[] data=new byte[len];
      while ((bytesread != len) && (actual != -1)) {
        actual=in.read(data,bytesread,len - bytesread);
        bytesread+=actual;
      }
      process(data);
    }
 else {
      int ch;
      while ((ch=in.read()) != -1) {
        process((byte)ch);
      }
    }
    break;
  }
  if (numTries == MAX_NUM_RETRIES) {
    throw new IOException();
  }
}","private void reliableHttpPost(String url,int MD5,String contentType,IDataPayload pl) throws IOException, OtherIOException {
  boolean sendFailed;
  InputStream in=pl.getPayloadStream();
  int numTries=0;
  while (numTries < MAX_NUM_RETRIES) {
    numTries++;
    sendFailed=false;
    try {
      con=(HttpConnection)Connector.open(url);
      con.setRequestMethod(HttpConnection.POST);
      setDefaultRequestProperties(con);
      con.setRequestProperty(""String_Node_Str"",contentType);
      con.setRequestProperty(""String_Node_Str"",String.valueOf(MD5));
      out=con.openOutputStream();
    }
 catch (    IOException e) {
      throw new IOException(""String_Node_Str"");
    }
    try {
      int c=inputStreamReadCastExceptions(in);
      while (c != -1) {
        out.write(c);
        c=inputStreamReadCastExceptions(in);
      }
      out.flush();
      int responseCode=con.getResponseCode();
      String ETag=con.getHeaderField(""String_Node_Str"");
      if (responseCode != HttpConnection.HTTP_OK) {
        if (ETag != null) {
          sendFailed=true;
        }
 else {
          throw new OtherIOException(""String_Node_Str"" + responseCode);
        }
      }
    }
 catch (    IOException e) {
      sendFailed=true;
    }
    if (sendFailed) {
      cleanUp(out);
      cleanUp(con);
      int lastByte=reliableRequestLastByte(url,MD5);
      cleanUp(in);
      in=pl.getPayloadStream();
      if (lastByte != -1) {
        in.skip(lastByte);
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      continue;
    }
    if (numTries == MAX_NUM_RETRIES) {
      throw new IOException(""String_Node_Str"");
    }
    in.close();
    in=con.openInputStream();
    int len=(int)con.getLength();
    if (len > 0) {
      int actual=0;
      int bytesread=0;
      byte[] data=new byte[len];
      while ((bytesread != len) && (actual != -1)) {
        actual=in.read(data,bytesread,len - bytesread);
        bytesread+=actual;
      }
      process(data);
    }
 else {
      int ch;
      while ((ch=in.read()) != -1) {
        process((byte)ch);
      }
    }
    break;
  }
}",0.6867265226886679
145259,"public void run(){
  try {
    IDataPayload payload=message.getPayloadData();
    HttpHeaderAppendingVisitor visitor=new HttpHeaderAppendingVisitor();
    IDataPayload httpload=(IDataPayload)payload.accept(visitor);
    HttpTransportDestination destination=(HttpTransportDestination)message.getDestination();
    reliableHttpPost(destination.getURL(),MD5,visitor.getOverallContentType(),httpload);
    message.setStatus(TransportMessage.STATUS_DELIVERED);
    System.out.println(""String_Node_Str"" + message.getStatus());
    message.setChanged();
    message.notifyObservers(message.getReplyloadData());
  }
 catch (  ClassCastException e) {
    Alert alert=new Alert(""String_Node_Str"",e.getMessage(),null,AlertType.ERROR);
    throw new IllegalArgumentException(message.getDestination() + ""String_Node_Str"");
  }
catch (  IOException e) {
    Alert alert=new Alert(""String_Node_Str"",e.getMessage(),null,AlertType.ERROR);
    System.out.println(e.getMessage());
  }
catch (  OtherIOException e) {
    Alert alert=new Alert(""String_Node_Str"",e.getMessage(),null,AlertType.ERROR);
    System.out.println(e.getMessage());
  }
catch (  java.lang.SecurityException se) {
    Alert alert=new Alert(""String_Node_Str"",se.getMessage(),null,AlertType.ERROR);
    message.setStatus(TransportMessage.STATUS_FAILED);
    System.out.println(""String_Node_Str"" + message.getStatus());
    message.setChanged();
    message.notifyObservers(null);
  }
 finally {
    cleanUp(in);
    cleanUp(out);
    cleanUp(con);
  }
}","public void run(){
  try {
    IDataPayload payload=message.getPayloadData();
    HttpHeaderAppendingVisitor visitor=new HttpHeaderAppendingVisitor();
    IDataPayload httpload=(IDataPayload)payload.accept(visitor);
    HttpTransportDestination destination=(HttpTransportDestination)message.getDestination();
    reliableHttpPost(destination.getURL(),MD5,visitor.getOverallContentType(),httpload);
    message.setStatus(TransportMessage.STATUS_DELIVERED);
    System.out.println(""String_Node_Str"" + message.getStatus());
    message.setChanged();
    message.notifyObservers(message.getReplyloadData());
  }
 catch (  ClassCastException e) {
    Alert alert=new Alert(""String_Node_Str"",e.getMessage(),null,AlertType.ERROR);
    throw new IllegalArgumentException(message.getDestination() + ""String_Node_Str"");
  }
catch (  IOException e) {
    Alert alert=new Alert(""String_Node_Str"",e.getMessage(),null,AlertType.ERROR);
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  OtherIOException e) {
    Alert alert=new Alert(""String_Node_Str"",e.getMessage(),null,AlertType.ERROR);
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  java.lang.SecurityException se) {
    Alert alert=new Alert(""String_Node_Str"",se.getMessage(),null,AlertType.ERROR);
    message.setStatus(TransportMessage.STATUS_FAILED);
    System.out.println(""String_Node_Str"" + message.getStatus());
    message.setChanged();
    message.notifyObservers(null);
  }
 finally {
    cleanUp(in);
    cleanUp(out);
    cleanUp(con);
  }
}",0.9709302325581396
145260,"private int reliableRequestLastByte(String url,int MD5) throws IOException {
  int numTries=0;
  int r=-1;
  while (numTries < MAX_NUM_RETRIES) {
    numTries++;
    try {
      HttpConnection con=(HttpConnection)Connector.open(url);
      con.setRequestMethod(HttpConnection.HEAD);
      setDefaultRequestProperties(con);
      con.setRequestProperty(""String_Node_Str"",String.valueOf(MD5));
      OutputStream out=con.openOutputStream();
      out.flush();
      out.close();
      r=readLastByteReceived(con);
    }
 catch (    IOException e) {
      cleanUp(out);
      cleanUp(con);
      continue;
    }
    break;
  }
  if (numTries >= MAX_NUM_RETRIES) {
    throw new IOException();
  }
  cleanUp(con);
  return r;
}","private int reliableRequestLastByte(String url,int MD5) throws IOException {
  int numTries=0;
  int r=-1;
  while (numTries < MAX_NUM_RETRIES) {
    numTries++;
    try {
      HttpConnection con=(HttpConnection)Connector.open(url);
      con.setRequestMethod(HttpConnection.HEAD);
      setDefaultRequestProperties(con);
      con.setRequestProperty(""String_Node_Str"",String.valueOf(MD5));
      OutputStream out=con.openOutputStream();
      out.flush();
      out.close();
      r=readLastByteReceived(con);
    }
 catch (    IOException e) {
      cleanUp(out);
      cleanUp(con);
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e2) {
      }
      continue;
    }
    break;
  }
  if (numTries >= MAX_NUM_RETRIES) {
    throw new IOException(""String_Node_Str"");
  }
  cleanUp(con);
  return r;
}",0.926923076923077
145261,"public void stopPlaying() throws MediaException {
  playP.stop();
  System.err.println(""String_Node_Str"");
  form.removeCommand(stopCommand);
  form.addCommand(playCommand);
  form.addCommand(recordCommand);
}","public void stopPlaying() throws MediaException {
  playP.stop();
  System.err.println(""String_Node_Str"");
  messageItem.setText(""String_Node_Str"");
  form.removeCommand(stopCommand);
  form.addCommand(playCommand);
  form.addCommand(recordCommand);
  form.addCommand(saveCommand);
}",0.8495934959349594
145262,"public void stopCapturing() throws MediaException, IOException {
  System.err.println(""String_Node_Str"");
  recordControl.commit();
  form.removeCommand(stopCommand);
  form.addCommand(recordCommand);
  form.addCommand(finishCommand);
  form.addCommand(saveCommand);
  messageItem.setText(""String_Node_Str"");
  recordP.stop();
}","public void stopCapturing() throws MediaException, IOException {
  System.err.println(""String_Node_Str"");
  recordControl.commit();
  form.removeCommand(stopCommand);
  form.addCommand(recordCommand);
  form.addCommand(finishCommand);
  form.addCommand(saveCommand);
  messageItem.setText(""String_Node_Str"");
  recordP.stop();
  messageItem.setText(""String_Node_Str"");
}",0.9398280802292264
145263,"public AudioCaptureActivity(IShell shell){
  parentShell=shell;
  display=JavaRosaServiceProvider.instance().getDisplay();
  ++counter;
}","public AudioCaptureActivity(IShell shell){
  parentShell=shell;
  display=JavaRosaServiceProvider.instance().getDisplay();
}",0.950191570881226
145264,"public FileDataPointer getRecordedAudio(){
  recordFile=new FileDataPointer(fullName);
  return recordFile;
}","public FileDataPointer getRecordedAudio(){
  if (recordFile == null)   recordFile=new FileDataPointer(fullName);
  return recordFile;
}",0.8934426229508197
145265,"private String saveFile(String filename,byte[] sound){
  String rootName=FileUtility.getDefaultRoot();
  String restorepath=""String_Node_Str"" + rootName + ""String_Node_Str"";
  FileUtility.createDirectory(restorepath);
  String fullName=restorepath + ""String_Node_Str"" + filename;
  if (FileUtility.createFile(fullName,sound)) {
    System.out.println(""String_Node_Str"" + fullName);
    return fullName;
  }
 else {
    return ""String_Node_Str"";
  }
}","private String saveFile(String filename,byte[] sound){
  try {
    if (recordP.getState() == Player.STARTED && recordP.getState() != Player.CLOSED) {
      stopCapturing();
      recordControl.reset();
    }
  }
 catch (  MediaException me) {
    System.err.println(""String_Node_Str"");
  }
catch (  IOException ioe) {
    System.err.println(""String_Node_Str"");
  }
  String rootName=FileUtility.getDefaultRoot();
  String restorepath=""String_Node_Str"" + rootName + ""String_Node_Str"";
  FileUtility.createDirectory(restorepath);
  String fullName=restorepath + ""String_Node_Str"" + filename;
  if (FileUtility.createFile(fullName,sound)) {
    System.out.println(""String_Node_Str"" + fullName);
    messageItem.setText(""String_Node_Str"" + fullName);
    recordFile=new FileDataPointer(fullName);
    ++counter;
    return fullName;
  }
 else {
    return ""String_Node_Str"";
  }
}",0.6787330316742082
145266,"public void playAudio() throws MediaException, IOException {
  System.err.println(""String_Node_Str"");
  ByteArrayInputStream recordedInputStream=new ByteArrayInputStream(audioDataStream.toByteArray());
  checkStreamSize(audioDataStream);
  playP=Manager.createPlayer(recordedInputStream,""String_Node_Str"");
  playP.prefetch();
  playP.start();
  System.err.println(""String_Node_Str"");
  form.removeCommand(saveCommand);
  form.removeCommand(playCommand);
  form.removeCommand(recordCommand);
  form.addCommand(stopCommand);
}","public void playAudio() throws MediaException, IOException {
  System.err.println(""String_Node_Str"");
  ByteArrayInputStream recordedInputStream=new ByteArrayInputStream(audioDataStream.toByteArray());
  checkStreamSize(audioDataStream);
  playP=Manager.createPlayer(recordedInputStream,""String_Node_Str"");
  messageItem.setText(""String_Node_Str"");
  playP.prefetch();
  playP.start();
  System.err.println(""String_Node_Str"");
  messageItem.setText(""String_Node_Str"");
  form.removeCommand(saveCommand);
  form.removeCommand(playCommand);
  form.removeCommand(recordCommand);
  form.addCommand(stopCommand);
}",0.925925925925926
145267,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  ExtUtil.read(in,new ExtWrapTagged());
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  pointer=(IDataPointer)ExtUtil.read(in,new ExtWrapTagged());
}",0.9329268292682928
145268,"public void run(){
  String destinationUrl=((SmsTransportDestination)message.getDestination()).getSmsAddress();
  try {
    SMSSplitTransportMessage sp=new SMSSplitTransportMessage(message);
    sp.splitMessage();
    mconn=(MessageConnection)Connector.open(destinationUrl);
    Enumeration e=sp.getMessageParts().elements();
    TextMessage tmsg;
    while (e.hasMoreElements()) {
      tmsg=(TextMessage)mconn.newMessage(MessageConnection.TEXT_MESSAGE);
      tmsg.setAddress(destinationUrl);
      String payload=new String(((ByteArrayOutputStream)e.nextElement()).toByteArray());
      System.out.println(""String_Node_Str"" + payload);
      mconn.send(tmsg);
      tmsg=null;
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","public void run(){
  String destinationUrl=((SmsTransportDestination)message.getDestination()).getSmsAddress();
  try {
    SMSSplitTransportMessage sp=new SMSSplitTransportMessage(message);
    sp.splitMessage();
    mconn=(MessageConnection)Connector.open(destinationUrl);
    Enumeration e=sp.getMessageParts().elements();
    TextMessage tmsg;
    while (e.hasMoreElements()) {
      tmsg=(TextMessage)mconn.newMessage(MessageConnection.TEXT_MESSAGE);
      tmsg.setAddress(destinationUrl);
      String payload=new String(((ByteArrayOutputStream)e.nextElement()).toByteArray());
      System.out.println(""String_Node_Str"" + payload);
      tmsg.setPayloadText(payload);
      mconn.send(tmsg);
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9468417761100688
145269,"private HttpHeaderAppendingVisitor(String divider){
  this.divider=divider;
}","private HttpHeaderAppendingVisitor(String divider){
  this.divider=divider;
  this.top=false;
}",0.8953488372093024
145270,"public HttpTransportHeader(){
  headers.put(""String_Node_Str"",""String_Node_Str"");
}","public HttpTransportHeader(){
}",0.543859649122807
145271,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapList(payloads));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapListPoly(payloads));
}",0.9833333333333332
145272,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  payloads=(Vector)ExtUtil.read(in,new ExtWrapList(new ExtWrapTagged()),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  payloads=(Vector)ExtUtil.read(in,new ExtWrapListPoly(),pf);
}",0.936986301369863
145273,"public int read() throws IOException {
  if (currentStream == -1) {
    throw new IOException(""String_Node_Str"");
  }
  InputStream cur=((InputStream)streams.elementAt(currentStream));
  int next=cur.read();
  if (next != -1) {
    return next;
  }
  while (next != -1 && currentStream + 1 < streams.size()) {
    currentStream++;
    cur=((InputStream)streams.elementAt(currentStream));
    next=cur.read();
  }
  return next;
}","public int read() throws IOException {
  if (currentStream == -1) {
    throw new IOException(""String_Node_Str"");
  }
  InputStream cur=((InputStream)streams.elementAt(currentStream));
  int next=cur.read();
  if (next != -1) {
    return next;
  }
  while (next == -1 && currentStream + 1 < streams.size()) {
    currentStream++;
    cur=((InputStream)streams.elementAt(currentStream));
    next=cur.read();
  }
  return next;
}",0.9976689976689976
145274,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  name=ExtUtil.readString(in);
  reference=(IDataReference)ExtUtil.read(in,new ExtWrapTagged(),pf);
  Vector attStrings=ExtUtil.nullIfEmpty((Vector)ExtUtil.read(in,new ExtWrapList(),pf));
  setAttributesFromSingleStringVector(attStrings);
  value=(IAnswerData)ExtUtil.read(in,new ExtWrapNullable(new ExtWrapTagged()),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  name=ExtUtil.readString(in);
  reference=(IDataReference)ExtUtil.read(in,new ExtWrapTagged(),pf);
  Vector attStrings=ExtUtil.nullIfEmpty((Vector)ExtUtil.read(in,new ExtWrapList(String.class),pf));
  setAttributesFromSingleStringVector(attStrings);
  value=(IAnswerData)ExtUtil.read(in,new ExtWrapNullable(new ExtWrapTagged()),pf);
}",0.9863945578231292
145275,"private IAnswerData preloadContext(String preloadParams){
  String value=""String_Node_Str"";
  String userVal=this.context.getCurrentUser();
  System.out.println(""String_Node_Str"" + userVal);
  if (""String_Node_Str"".equals(preloadParams) && userVal != ""String_Node_Str"") {
    value=userVal;
  }
  System.out.println(value);
  return new StringData(value);
}","private IAnswerData preloadContext(String preloadParams){
  String value=""String_Node_Str"";
  if (""String_Node_Str"".equals(preloadParams)) {
    String userVal=this.context.getCurrentUser();
    System.out.println(""String_Node_Str"" + userVal);
    if (userVal != null && userVal.length() > 0)     value=userVal;
  }
  System.out.println(value);
  return new StringData(value);
}",0.7727891156462585
145276,"public Chatterbox(String formTitle,FormEntryModel model,FormEntryController controller){
  super(formTitle);
  this.model=model;
  this.controller=controller;
  controller.setView(this);
  widgetFactory=new ChatterboxWidgetFactory(this);
  multiLingual=(model.getForm().getLocalizer() != null);
  questionIndexes=new SortedIntSet();
  activeQuestionIndex=INDEX_NOT_SET;
  model.registerObservable(this);
  initGUI();
  KEY_CENTER_LETS_HOPE=13;
}","public Chatterbox(String formTitle,FormEntryModel model,FormEntryController controller){
  super(formTitle);
  this.model=model;
  this.controller=controller;
  controller.setFormEntryView(this);
  widgetFactory=new ChatterboxWidgetFactory(this);
  multiLingual=(model.getForm().getLocalizer() != null);
  questionIndexes=new SortedIntSet();
  activeQuestionIndex=INDEX_NOT_SET;
  model.registerObservable(this);
  initGUI();
  KEY_CENTER_LETS_HOPE=13;
}",0.9899888765294772
145277,"private void init(){
  loadModules();
  registerPrototypes();
  loadProperties();
  JavaRosaServiceProvider.instance().getTransportManager().registerTransportMethod(new HttpTransportMethod());
  FormDefRMSUtility formDef=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
  formDef.addReferencePrototype(new XPathReference());
  if (formDef.getNumberOfRecords() == 0) {
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
  }
}","private void init(){
  loadModules();
  loadProperties();
  JavaRosaServiceProvider.instance().getTransportManager().registerTransportMethod(new HttpTransportMethod());
  FormDefRMSUtility formDef=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
  formDef.addReferencePrototype(new XPathReference());
  if (formDef.getNumberOfRecords() == 0) {
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
    formDef.writeToRMS(XFormUtils.getFormFromResource(""String_Node_Str""));
  }
}",0.6288546255506607
145278,"private void registerPrototypes(){
  String[] classes={""String_Node_Str"",""String_Node_Str""};
  JavaRosaServiceProvider.instance().registerPrototypes(classes);
  JavaRosaServiceProvider.instance().registerPrototypes(XPathParseTool.xpathClasses);
}","private void registerPrototypes(){
  String[] classes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  JavaRosaServiceProvider.instance().registerPrototypes(classes);
  JavaRosaServiceProvider.instance().registerPrototypes(XPathParseTool.xpathClasses);
}",0.9318181818181818
145279,"public void registerModule(Context context){
  DataModelTreeRMSUtility dataModel=new DataModelTreeRMSUtility(DataModelTreeRMSUtility.getUtilityName());
  FormDefRMSUtility formDef=new FormDefRMSUtility(FormDefRMSUtility.getUtilityName());
  formDef.addModelPrototype(new DataModelTree());
  JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().registerRMSUtility(dataModel);
  JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().registerRMSUtility(formDef);
}","public void registerModule(Context context){
  DataModelTreeRMSUtility dataModel=new DataModelTreeRMSUtility(DataModelTreeRMSUtility.getUtilityName());
  FormDefRMSUtility formDef=new FormDefRMSUtility(FormDefRMSUtility.getUtilityName());
  formDef.addModelPrototype(new DataModelTree());
  JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().registerRMSUtility(dataModel);
  JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().registerRMSUtility(formDef);
  String[] classes={""String_Node_Str"",""String_Node_Str""};
  JavaRosaServiceProvider.instance().registerPrototypes(classes);
}",0.89198606271777
145280,"/** 
 * Write the group definition object to the supplied stream. 
 */
public void writeExternal(DataOutputStream dos) throws IOException {
  dos.writeInt(getID());
  ExternalizableHelperDeprecated.writeUTF(dos,getName());
  ExternalizableHelperDeprecated.writeUTF(dos,getLongText());
  ExternalizableHelperDeprecated.writeUTF(dos,getShortText());
  ExternalizableHelperDeprecated.writeUTF(dos,getLongTextID());
  ExternalizableHelperDeprecated.writeUTF(dos,getShortTextID());
  dos.writeBoolean(getRepeat());
  ExternalizableHelperDeprecated.writeExternalGeneric(getChildren(),dos);
}","/** 
 * Write the group definition object to the supplied stream. 
 */
public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.write(dos,new ExtWrapNullable(getName()));
  ExtUtil.write(dos,new ExtWrapNullable(getLongText()));
  ExtUtil.write(dos,new ExtWrapNullable(getShortText()));
  ExtUtil.write(dos,new ExtWrapNullable(getLongTextID()));
  ExtUtil.write(dos,new ExtWrapNullable(getShortTextID()));
  ExtUtil.writeBool(dos,getRepeat());
  ExtUtil.write(dos,new ExtWrapListPoly(getChildren()));
}",0.4419213973799126
145281,"/** 
 * Reads a group definition object from the supplied stream. 
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  if (!ExternalizableHelperDeprecated.isEOF(dis)) {
    PrototypeFactoryDeprecated factory=new PrototypeFactoryDeprecated();
    factory.addNewPrototype(QuestionDef.class.getName(),QuestionDef.class);
    factory.addNewPrototype(GroupDef.class.getName(),GroupDef.class);
    setID(dis.readInt());
    setName(ExternalizableHelperDeprecated.readUTF(dis));
    setLongText(ExternalizableHelperDeprecated.readUTF(dis));
    setShortText(ExternalizableHelperDeprecated.readUTF(dis));
    setLongTextID(ExternalizableHelperDeprecated.readUTF(dis),null);
    setShortTextID(ExternalizableHelperDeprecated.readUTF(dis),null);
    setRepeat(dis.readBoolean());
    ExternalizableHelperDeprecated.readExternal(dis,factory);
  }
}","/** 
 * Reads a group definition object from the supplied stream. 
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setLongText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setShortText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setLongTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf),null);
  setShortTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf),null);
  setRepeat(ExtUtil.readBool(dis));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
}",0.350920245398773
145282,"public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)));
  setAppearanceAttr((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)));
  setLongText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)));
  setShortText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)));
  setHelpText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)));
  setLongTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)),null);
  setShortTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)),null);
  setHelpTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class)),null);
  setDataType(ExtUtil.readInt(dis));
  setControlType(ExtUtil.readInt(dis));
  setRequired(ExtUtil.readBool(dis));
  setVisible(ExtUtil.readBool(dis));
  setEnabled(ExtUtil.readBool(dis));
  setLocked(ExtUtil.readBool(dis));
  setSelectItemIDs((OrderedHashtable)ExtUtil.nullIfEmpty((OrderedHashtable)ExtUtil.read(dis,new ExtWrapMap(String.class,String.class,true))),ExtUtil.nullIfEmpty((Vector)ExtUtil.read(dis,new ExtWrapList(Boolean.class))),null);
  if (getSelectItemIDs() != null && (controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE)) {
    localizeSelectMap(null);
  }
  binding=(IDataReference)ExtUtil.read(dis,new ExtWrapNullable(new ExtWrapTagged()));
}","public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setAppearanceAttr((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setLongText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setShortText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setHelpText((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setLongTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf),null);
  setShortTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf),null);
  setHelpTextID((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf),null);
  setDataType(ExtUtil.readInt(dis));
  setControlType(ExtUtil.readInt(dis));
  setRequired(ExtUtil.readBool(dis));
  setVisible(ExtUtil.readBool(dis));
  setEnabled(ExtUtil.readBool(dis));
  setLocked(ExtUtil.readBool(dis));
  setSelectItemIDs((OrderedHashtable)ExtUtil.nullIfEmpty((OrderedHashtable)ExtUtil.read(dis,new ExtWrapMap(String.class,String.class,true),pf)),ExtUtil.nullIfEmpty((Vector)ExtUtil.read(dis,new ExtWrapList(Boolean.class),pf)),null);
  if (getSelectItemIDs() != null && (controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE)) {
    localizeSelectMap(null);
  }
  binding=(IDataReference)ExtUtil.read(dis,new ExtWrapNullable(new ExtWrapTagged()),pf);
}",0.9783116449783116
145283,"protected void readNodeAttributes(DataInputStream in) throws IOException {
  this.name=ExternalizableHelperDeprecated.readUTF(in);
}","protected void readNodeAttributes(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  this.name=ExternalizableHelperDeprecated.readUTF(in);
}",0.8516129032258064
145284,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  readNodeAttributes(in);
  int numChildren=in.readInt();
  for (int i=0; i < numChildren; ++i) {
    boolean group=in.readBoolean();
    if (group) {
      String className=in.readUTF();
      QuestionDataGroup newGroup=(QuestionDataGroup)this.getRoot().factory.getNewInstance(className);
      if (newGroup == null) {
        throw new DeserializationException(""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str"");
      }
      newGroup.setRoot(this.getRoot());
      newGroup.readExternal(in,pf);
      newGroup.setRoot(newGroup);
      addChild(newGroup);
    }
 else {
      QuestionDataElement element=new QuestionDataElement();
      element.setRoot(this.getRoot());
      element.readExternal(in,pf);
      addChild(element);
    }
  }
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  readNodeAttributes(in,pf);
  int numChildren=in.readInt();
  for (int i=0; i < numChildren; ++i) {
    boolean group=in.readBoolean();
    if (group) {
      String className=in.readUTF();
      QuestionDataGroup newGroup=(QuestionDataGroup)this.getRoot().factory.getNewInstance(className);
      if (newGroup == null) {
        throw new DeserializationException(""String_Node_Str"" + ""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str"");
      }
      newGroup.setRoot(this.getRoot());
      newGroup.readExternal(in,pf);
      newGroup.setRoot(newGroup);
      addChild(newGroup);
    }
 else {
      QuestionDataElement element=new QuestionDataElement();
      element.setRoot(this.getRoot());
      element.readExternal(in,pf);
      addChild(element);
    }
  }
}",0.9983268265476856
145285,"public static PrototypeFactory convertPrototypeFactory(PrototypeFactoryDeprecated pfd){
  PrototypeFactory pf=new PrototypeFactory();
  for (Enumeration e=pfd.prototypes.keys(); e.hasMoreElements(); ) {
    pf.addClass((Class)pfd.prototypes.get(e.nextElement()));
  }
  return pf;
}","public static PrototypeFactory convertPrototypeFactory(PrototypeFactoryDeprecated pfd){
  PrototypeFactory pf=ExtUtil.defaultPrototypes();
  for (Enumeration e=pfd.prototypes.keys(); e.hasMoreElements(); ) {
    pf.addClass((Class)pfd.prototypes.get(e.nextElement()));
  }
  return pf;
}",0.92091388400703
145286,"public void readNodeAttributes(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readNodeAttributes(in);
  String className=in.readUTF();
  reference=(IDataReference)this.getRoot().getFactory().getNewInstance(className);
  if (reference == null) {
    throw new DeserializationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  reference.readExternal(in,pf);
}","public void readNodeAttributes(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readNodeAttributes(in,pf);
  String className=in.readUTF();
  reference=(IDataReference)this.getRoot().getFactory().getNewInstance(className);
  if (reference == null) {
    throw new DeserializationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  reference.readExternal(in,pf);
}",0.9963547995139732
145287,"public void writeExternal(DataOutputStream out) throws IOException {
  ExternalizableHelperDeprecated.writeUTF(out,nodeset);
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,nodeset);
}",0.8362068965517241
145288,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  nodeset=ExternalizableHelperDeprecated.readUTF(in);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  nodeset=ExtUtil.readString(in);
}",0.8789808917197452
145289,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  expr=(XPathExpression)ExtUtil.read(in,new ExtWrapTagged());
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  expr=(XPathExpression)ExtUtil.read(in,new ExtWrapTagged(),pf);
}",0.9915014164305948
145290,"private void workflowLaunch(IActivity returningActivity,String returnCode,Hashtable returnVals){
  if (returningActivity == null) {
    launchActivity(new SplashScreenActivity(this,""String_Node_Str""),context);
  }
 else   if (returningActivity instanceof SplashScreenActivity) {
    launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    String passwordVAR=midlet.getAppProperty(""String_Node_Str"");
    String usernameVAR=midlet.getAppProperty(""String_Node_Str"");
    if ((usernameVAR == null) || (passwordVAR == null)) {
      context.setElement(""String_Node_Str"",""String_Node_Str"");
      context.setElement(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      context.setElement(""String_Node_Str"",usernameVAR);
      context.setElement(""String_Node_Str"",passwordVAR);
    }
    context.setElement(""String_Node_Str"",""String_Node_Str"");
    launchActivity(new LoginActivity(this,""String_Node_Str""),context);
  }
 else   if (returningActivity instanceof LoginActivity) {
    Object returnVal=returnVals.get(LoginActivity.COMMAND_KEY);
    if (returnVal == ""String_Node_Str"") {
      User user=(User)returnVals.get(LoginActivity.USER);
      if (user != null)       context.setCurrentUser(user.getUsername());
      launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    }
 else     if (returnVal == ""String_Node_Str"") {
      exitShell();
    }
  }
 else   if (returningActivity instanceof FormListActivity) {
    String returnVal=(String)returnVals.get(FormListActivity.COMMAND_KEY);
    if (returnVal == Commands.CMD_SETTINGS) {
      launchActivity(new PropertyScreenActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_VIEW_DATA) {
      launchActivity(new ModelListActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_SELECT_XFORM) {
      launchFormEntryActivity(context,((Integer)returnVals.get(FormListActivity.FORM_ID_KEY)).intValue(),-1);
    }
 else     if (returnVal == Commands.CMD_EXIT) {
      exitShell();
    }
  }
 else   if (returningActivity instanceof ModelListActivity) {
    Object returnVal=returnVals.get(ModelListActivity.returnKey);
    if (returnVal == ModelListActivity.CMD_MSGS) {
      launchFormTransportActivity(context,TransportContext.MESSAGE_VIEW,null);
    }
 else     if (returnVal == ModelListActivity.CMD_EDIT) {
      launchFormEntryActivity(context,((FormDef)returnVals.get(""String_Node_Str"")).getID(),((DataModelTree)returnVals.get(""String_Node_Str"")).getId());
    }
 else     if (returnVal == ModelListActivity.CMD_SEND) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else     if (returnVal == ModelListActivity.CMD_BACK) {
      launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    }
  }
 else   if (returningActivity instanceof FormEntryActivity) {
    if (((Boolean)returnVals.get(""String_Node_Str"")).booleanValue()) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else {
      relaunchListActivity();
    }
  }
 else   if (returningActivity instanceof FormTransportActivity) {
    relaunchListActivity();
  }
}","private void workflowLaunch(IActivity returningActivity,String returnCode,Hashtable returnVals){
  if (returningActivity == null) {
    launchActivity(new SplashScreenActivity(this,""String_Node_Str""),context);
  }
 else   if (returningActivity instanceof SplashScreenActivity) {
    launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    String passwordVAR=midlet.getAppProperty(""String_Node_Str"");
    String usernameVAR=midlet.getAppProperty(""String_Node_Str"");
    if ((usernameVAR == null) || (passwordVAR == null)) {
      context.setElement(""String_Node_Str"",""String_Node_Str"");
      context.setElement(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      context.setElement(""String_Node_Str"",usernameVAR);
      context.setElement(""String_Node_Str"",passwordVAR);
    }
    context.setElement(""String_Node_Str"",""String_Node_Str"");
    launchActivity(new LoginActivity(this,""String_Node_Str""),context);
  }
 else   if (returningActivity instanceof LoginActivity) {
    Object returnVal=returnVals.get(LoginActivity.COMMAND_KEY);
    if (returnVal == ""String_Node_Str"") {
      User user=(User)returnVals.get(LoginActivity.USER);
      if (user != null) {
        context.setCurrentUser(user.getUsername());
        context.setElement(""String_Node_Str"",user);
      }
      launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    }
 else     if (returnVal == ""String_Node_Str"") {
      exitShell();
    }
  }
 else   if (returningActivity instanceof FormListActivity) {
    String returnVal=(String)returnVals.get(FormListActivity.COMMAND_KEY);
    if (returnVal == Commands.CMD_SETTINGS) {
      launchActivity(new PropertyScreenActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_VIEW_DATA) {
      launchActivity(new ModelListActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_SELECT_XFORM) {
      launchFormEntryActivity(context,((Integer)returnVals.get(FormListActivity.FORM_ID_KEY)).intValue(),-1);
    }
 else     if (returnVal == Commands.CMD_EXIT) {
      exitShell();
    }
  }
 else   if (returningActivity instanceof ModelListActivity) {
    Object returnVal=returnVals.get(ModelListActivity.returnKey);
    if (returnVal == ModelListActivity.CMD_MSGS) {
      launchFormTransportActivity(context,TransportContext.MESSAGE_VIEW,null);
    }
 else     if (returnVal == ModelListActivity.CMD_EDIT) {
      launchFormEntryActivity(context,((FormDef)returnVals.get(""String_Node_Str"")).getID(),((DataModelTree)returnVals.get(""String_Node_Str"")).getId());
    }
 else     if (returnVal == ModelListActivity.CMD_SEND) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else     if (returnVal == ModelListActivity.CMD_BACK) {
      launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    }
  }
 else   if (returningActivity instanceof FormEntryActivity) {
    if (((Boolean)returnVals.get(""String_Node_Str"")).booleanValue()) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else {
      relaunchListActivity();
    }
  }
 else   if (returningActivity instanceof FormTransportActivity) {
    relaunchListActivity();
  }
}",0.9901659496004918
145291,"private void workflowLaunch(IActivity returningActivity,String returnCode,Hashtable returnVals){
  if (returningActivity == null) {
    returningActivity=null;
    launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    String passwordVAR=midlet.getAppProperty(""String_Node_Str"");
    String usernameVAR=midlet.getAppProperty(""String_Node_Str"");
    if ((usernameVAR == null) || (passwordVAR == null)) {
      context.setElement(""String_Node_Str"",""String_Node_Str"");
      context.setElement(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      context.setElement(""String_Node_Str"",usernameVAR);
      context.setElement(""String_Node_Str"",passwordVAR);
    }
    context.setElement(""String_Node_Str"",""String_Node_Str"");
    launchActivity(new LoginActivity(this,""String_Node_Str""),context);
  }
 else   if (returningActivity instanceof LoginActivity) {
    Object returnVal=returnVals.get(LoginActivity.COMMAND_KEY);
    if (returnVal == ""String_Node_Str"") {
      User user=(User)returnVals.get(LoginActivity.USER);
      FormListActivity formList=new FormListActivity(this,""String_Node_Str"");
      if (user != null) {
        context.setCurrentUser(user.getUsername());
      }
      launchActivity(formList,context);
    }
 else     if (returnVal == ""String_Node_Str"") {
      exitShell();
    }
  }
 else   if (returningActivity instanceof FormListActivity) {
    String returnVal=(String)returnVals.get(FormListActivity.COMMAND_KEY);
    if (returnVal == Commands.CMD_SETTINGS) {
      launchActivity(new PropertyScreenActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_VIEW_DATA) {
      launchActivity(new ModelListActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_SELECT_XFORM) {
      launchFormEntryActivity(context,((Integer)returnVals.get(FormListActivity.FORM_ID_KEY)).intValue(),-1);
    }
 else     if (returnVal == Commands.CMD_EXIT) {
      exitShell();
    }
  }
 else   if (returningActivity instanceof ModelListActivity) {
    Object returnVal=returnVals.get(ModelListActivity.returnKey);
    if (returnVal == ModelListActivity.CMD_MSGS) {
      launchFormTransportActivity(context,TransportContext.MESSAGE_VIEW,null);
    }
 else     if (returnVal == ModelListActivity.CMD_EDIT) {
      launchFormEntryActivity(context,((FormDef)returnVals.get(""String_Node_Str"")).getID(),((DataModelTree)returnVals.get(""String_Node_Str"")).getId());
    }
 else     if (returnVal == ModelListActivity.CMD_SEND) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else     if (returnVal == ModelListActivity.CMD_BACK) {
      launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    }
  }
 else   if (returningActivity instanceof FormEntryActivity) {
    if (((Boolean)returnVals.get(""String_Node_Str"")).booleanValue()) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else {
      relaunchListActivity();
    }
  }
 else   if (returningActivity instanceof FormTransportActivity) {
    relaunchListActivity();
  }
}","private void workflowLaunch(IActivity returningActivity,String returnCode,Hashtable returnVals){
  if (returningActivity == null) {
    returningActivity=null;
    launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    String passwordVAR=midlet.getAppProperty(""String_Node_Str"");
    String usernameVAR=midlet.getAppProperty(""String_Node_Str"");
    if ((usernameVAR == null) || (passwordVAR == null)) {
      context.setElement(""String_Node_Str"",""String_Node_Str"");
      context.setElement(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      context.setElement(""String_Node_Str"",usernameVAR);
      context.setElement(""String_Node_Str"",passwordVAR);
    }
    context.setElement(""String_Node_Str"",""String_Node_Str"");
    launchActivity(new LoginActivity(this,""String_Node_Str""),context);
  }
 else   if (returningActivity instanceof LoginActivity) {
    Object returnVal=returnVals.get(LoginActivity.COMMAND_KEY);
    if (returnVal == ""String_Node_Str"") {
      User user=(User)returnVals.get(LoginActivity.USER);
      FormListActivity formList=new FormListActivity(this,""String_Node_Str"");
      if (user != null) {
        context.setCurrentUser(user.getUsername());
        context.setElement(""String_Node_Str"",user);
      }
      launchActivity(formList,context);
    }
 else     if (returnVal == ""String_Node_Str"") {
      exitShell();
    }
  }
 else   if (returningActivity instanceof FormListActivity) {
    String returnVal=(String)returnVals.get(FormListActivity.COMMAND_KEY);
    if (returnVal == Commands.CMD_SETTINGS) {
      launchActivity(new PropertyScreenActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_VIEW_DATA) {
      launchActivity(new ModelListActivity(this),context);
    }
 else     if (returnVal == Commands.CMD_SELECT_XFORM) {
      launchFormEntryActivity(context,((Integer)returnVals.get(FormListActivity.FORM_ID_KEY)).intValue(),-1);
    }
 else     if (returnVal == Commands.CMD_EXIT) {
      exitShell();
    }
  }
 else   if (returningActivity instanceof ModelListActivity) {
    Object returnVal=returnVals.get(ModelListActivity.returnKey);
    if (returnVal == ModelListActivity.CMD_MSGS) {
      launchFormTransportActivity(context,TransportContext.MESSAGE_VIEW,null);
    }
 else     if (returnVal == ModelListActivity.CMD_EDIT) {
      launchFormEntryActivity(context,((FormDef)returnVals.get(""String_Node_Str"")).getID(),((DataModelTree)returnVals.get(""String_Node_Str"")).getId());
    }
 else     if (returnVal == ModelListActivity.CMD_SEND) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else     if (returnVal == ModelListActivity.CMD_BACK) {
      launchActivity(new FormListActivity(this,""String_Node_Str""),context);
    }
  }
 else   if (returningActivity instanceof FormEntryActivity) {
    if (((Boolean)returnVals.get(""String_Node_Str"")).booleanValue()) {
      launchFormTransportActivity(context,TransportContext.SEND_DATA,(DataModelTree)returnVals.get(""String_Node_Str""));
    }
 else {
      relaunchListActivity();
    }
  }
 else   if (returningActivity instanceof FormTransportActivity) {
    relaunchListActivity();
  }
}",0.9918316054037072
145292,"public void start(Context context){
  this.listOfForms=new Map();
  this.formIDs=new Vector();
  getXForms();
  User loggedInUser=(User)context.getElement(""String_Node_Str"");
  if (loggedInUser.isAdminUser())   this.formsList.addCommand(CMD_ADD_USER);
  this.positionToId=this.formsList.loadView(listOfForms);
  parent.setDisplay(this,this.formsList);
  this.context=context;
}","public void start(Context context){
  this.listOfForms=new Map();
  this.formIDs=new Vector();
  getXForms();
  if (context.getElement(""String_Node_Str"") != null) {
    User loggedInUser=(User)context.getElement(""String_Node_Str"");
    if (loggedInUser.isAdminUser())     this.formsList.addCommand(CMD_ADD_USER);
  }
  this.positionToId=this.formsList.loadView(listOfForms);
  parent.setDisplay(this,this.formsList);
  this.context=context;
}",0.8424908424908425
145293,"public void commandAction(Command command,Displayable s){
  if (command == backCommand) {
    this.show();
  }
 else   if (command == exitNoSaveCommand) {
    controller.exit();
  }
 else   if (command == exitSaveCommand) {
    controller.save();
    controller.exit();
  }
 else   if (command == saveCommand) {
    controller.save();
  }
 else   if (command == List.SELECT_COMMAND) {
    int i=((List)screen).getSelectedIndex();
    QuestionDef a=(QuestionDef)indexHash.elementAt(i);
    controller.selectQuestion(a.getID() - 1);
    int b=model.getQuestionIndex();
    backCommand=new Command(""String_Node_Str"",Command.BACK,2);
    FormViewManager manager=new FormViewManager(""String_Node_Str"",model,controller,b,this);
    manager.show();
  }
}","public void commandAction(Command command,Displayable s){
  if (command == backCommand) {
    this.show();
  }
 else   if (command == exitNoSaveCommand) {
    controller.exit();
  }
 else   if (command == exitSaveCommand) {
    controller.save();
    controller.exit();
  }
 else   if (command == saveCommand) {
    controller.save();
  }
 else   if (command == List.SELECT_COMMAND) {
    int i=((List)screen).getSelectedIndex();
    int b=indexHash.get(i);
    FormViewManager manager=new FormViewManager(""String_Node_Str"",model,controller,b,this);
    controller.selectQuestion(indexHash.get(i));
  }
}",0.7594374537379719
145294,"protected void createView(){
  ((List)screen).deleteAll();
  indexHash=new Vector();
  for (int i=0; i < model.getNumQuestions(); i++) {
    if (model.isRelevant(i)) {
      String stringVal;
      IAnswerData val=model.getForm().getValue(model.getQuestion(i));
      if (val == null) {
        stringVal=""String_Node_Str"";
      }
 else {
        stringVal=val.getDisplayText();
      }
      ((List)screen).append(model.getQuestion(i).getShortText() + ""String_Node_Str"" + stringVal,null);
      indexHash.addElement(model.getQuestion(i));
    }
  }
}","protected void createView(){
  ((List)screen).deleteAll();
  indexHash=new SortedIntSet();
  for (int i=0; i < model.getNumQuestions(); i++) {
    if (model.isRelevant(i)) {
      String stringVal;
      IAnswerData val=model.getForm().getValue(model.getQuestion(i));
      if (val == null) {
        stringVal=""String_Node_Str"";
      }
 else {
        stringVal=val.getDisplayText();
      }
      ((List)screen).append(model.getQuestion(i).getShortText() + ""String_Node_Str"" + stringVal,null);
      indexHash.add(i);
    }
  }
}",0.955719557195572
145295,"/** 
 * Preload the Data Model with the preload values that are enumerated in the data bindings.
 */
public void preloadModel(){
  IAnswerData preload=null;
  Enumeration en=getBindings().elements();
  while (en.hasMoreElements()) {
    DataBinding binding=(DataBinding)en.nextElement();
    preload=null;
    if (binding.getPreload() != null)     preload=preloader.getQuestionPreload(binding.getPreload(),binding.getPreloadParams());
    if (preload != null) {
      setValue(binding.getReference(),preload);
    }
  }
}","/** 
 * Preload the Data Model with the preload values that are enumerated in the data bindings.
 */
public void preloadModel(){
  IAnswerData preload=null;
  if (getBindings() == null)   return;
  Enumeration en=getBindings().elements();
  while (en.hasMoreElements()) {
    DataBinding binding=(DataBinding)en.nextElement();
    preload=null;
    if (binding.getPreload() != null)     preload=preloader.getQuestionPreload(binding.getPreload(),binding.getPreloadParams());
    if (preload != null) {
      setValue(binding.getReference(),preload);
    }
  }
}",0.9639222941720628
145296,"public void getView(int qIndex){
  prompt=model.getQuestion(qIndex);
  int qType=prompt.getDataType();
  int contType=prompt.getControlType();
  System.out.println(""String_Node_Str"" + qType + ""String_Node_Str""+ contType);
  System.out.println(""String_Node_Str"" + Constants.DATATYPE_LIST_EXCLUSIVE);
switch (contType) {
case Constants.CONTROL_INPUT:
switch (qType) {
case Constants.DATATYPE_TEXT:
      widget=new TextQuestionWidget(prompt);
    widget.setCommandListener(this);
  widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_DATE:
widget=new DateQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_TIME:
widget=new TimeQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_INTEGER:
widget=new NumericQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
}
break;
case Constants.CONTROL_SELECT_ONE:
widget=new Select1QuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_SELECT_MULTI:
widget=new SelectQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_TEXTAREA:
widget=new TextQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}","public void getView(int qIndex){
  prompt=model.getQuestion(qIndex);
  int qType=prompt.getDataType();
  int contType=prompt.getControlType();
  System.out.println(""String_Node_Str"" + qType + ""String_Node_Str""+ contType);
  System.out.println(""String_Node_Str"" + Constants.DATATYPE_LIST_EXCLUSIVE);
switch (contType) {
case Constants.CONTROL_INPUT:
switch (qType) {
case Constants.DATATYPE_DATE:
      widget=new DateQuestionWidget(prompt);
    widget.setCommandListener(this);
  widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_TIME:
widget=new TimeQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_INTEGER:
widget=new NumericQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
}
break;
case Constants.CONTROL_SELECT_ONE:
widget=new Select1QuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_SELECT_MULTI:
widget=new SelectQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_TEXTAREA:
widget=new TextQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}",0.9405940594059404
145297,"public void commandAction(Command command,Displayable s){
  if (command == backCommand) {
    this.show();
  }
 else   if (command == exitNoSaveCommand) {
    controller.exit();
  }
 else   if (command == exitSaveCommand) {
    controller.save();
    controller.exit();
  }
 else   if (command == saveCommand) {
    controller.save();
  }
 else   if (command == List.SELECT_COMMAND) {
    int i=((List)screen).getSelectedIndex();
    System.out.println(""String_Node_Str"" + i);
    QuestionDef a=(QuestionDef)indexHash.elementAt(i);
    controller.selectQuestion(a.getID() - 1);
    System.out.println(""String_Node_Str"" + a.getID());
    int b=model.getQuestionIndex();
    System.out.println(""String_Node_Str"" + b);
    backCommand=new Command(""String_Node_Str"",Command.BACK,2);
    FormViewManager manager=new FormViewManager(""String_Node_Str"",model,controller,b,this);
    manager.show();
  }
}","public void commandAction(Command command,Displayable s){
  if (command == backCommand) {
    this.show();
  }
 else   if (command == exitNoSaveCommand) {
    controller.exit();
  }
 else   if (command == exitSaveCommand) {
    controller.save();
    controller.exit();
  }
 else   if (command == saveCommand) {
    controller.save();
  }
 else   if (command == List.SELECT_COMMAND) {
    int i=((List)screen).getSelectedIndex();
    QuestionDef a=(QuestionDef)indexHash.elementAt(i);
    controller.selectQuestion(a.getID() - 1);
    int b=model.getQuestionIndex();
    backCommand=new Command(""String_Node_Str"",Command.BACK,2);
    FormViewManager manager=new FormViewManager(""String_Node_Str"",model,controller,b,this);
    manager.show();
  }
}",0.9093122337188072
145298,"public void commandAction(Command c,Item i){
  System.out.println(""String_Node_Str"");
  if (i == expandedStyle.getInteractiveWidget() && c == nextCommand) {
    cbox.questionAnswered();
  }
 else {
    cbox.commandAction(c,cbox);
  }
}","public void commandAction(Command c,Item i){
  System.out.println(""String_Node_Str"");
  if (i == expandedStyle.getInteractiveWidget() && c == nextCommand) {
    if (!cbox.isMenuOpened())     cbox.questionAnswered();
  }
 else {
    cbox.commandAction(c,cbox);
  }
}",0.94
145299,"public void getView(int qIndex){
  prompt=model.getQuestion(qIndex);
  int qType=prompt.getDataType();
switch (qType) {
case Constants.DATATYPE_DATE:
    widget=new DateQuestionWidget(prompt);
  controller.setDisplay(widget);
break;
case Constants.DATATYPE_LIST_MULTIPLE:
widget=new SelectQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_LIST_EXCLUSIVE:
widget=new Select1QuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_TEXT:
widget=new TextQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_TIME:
widget=new TimeQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_INTEGER:
widget=new NumericQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}","public void getView(int qIndex){
  prompt=model.getQuestion(qIndex);
  int qType=prompt.getDataType();
  int contType=prompt.getControlType();
  System.out.println(""String_Node_Str"" + qType + ""String_Node_Str""+ contType);
  System.out.println(""String_Node_Str"" + Constants.DATATYPE_LIST_EXCLUSIVE);
switch (contType) {
case Constants.CONTROL_INPUT:
switch (qType) {
case Constants.DATATYPE_DATE:
      widget=new DateQuestionWidget(prompt);
    controller.setDisplay(widget);
  break;
case Constants.DATATYPE_TIME:
widget=new TimeQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_INTEGER:
widget=new NumericQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
}
break;
case Constants.CONTROL_SELECT_ONE:
widget=new Select1QuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_SELECT_MULTI:
widget=new SelectQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_TEXTAREA:
widget=new TextQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}",0.6779406238256295
145300,"public void commandAction(Command command,Displayable s){
  if (command == backCommand) {
    this.show();
  }
 else   if (command == exitNoSaveCommand) {
    controller.exit();
  }
 else   if (command == exitSaveCommand) {
    controller.save();
    controller.exit();
  }
 else   if (command == saveCommand) {
    controller.save();
  }
 else   if (command == List.SELECT_COMMAND) {
    int i=((List)screen).getSelectedIndex();
    controller.selectQuestion(i);
    backCommand=new Command(""String_Node_Str"",Command.BACK,2);
    FormViewManager manager=new FormViewManager(""String_Node_Str"",model,controller,i,this);
    manager.show();
  }
}","public void commandAction(Command command,Displayable s){
  if (command == backCommand) {
    this.show();
  }
 else   if (command == exitNoSaveCommand) {
    controller.exit();
  }
 else   if (command == exitSaveCommand) {
    controller.save();
    controller.exit();
  }
 else   if (command == saveCommand) {
    controller.save();
  }
 else   if (command == List.SELECT_COMMAND) {
    int i=((List)screen).getSelectedIndex();
    System.out.println(""String_Node_Str"" + i);
    QuestionDef a=(QuestionDef)indexHash.elementAt(i);
    controller.selectQuestion(a.getID() - 1);
    System.out.println(""String_Node_Str"" + a.getID());
    int b=model.getQuestionIndex();
    System.out.println(""String_Node_Str"" + b);
    backCommand=new Command(""String_Node_Str"",Command.BACK,2);
    FormViewManager manager=new FormViewManager(""String_Node_Str"",model,controller,b,this);
    manager.show();
  }
}",0.8103896103896104
145301,"protected void createView(){
  ((List)screen).deleteAll();
  for (int i=0; i < model.getNumQuestions(); i++) {
    if (model.isRelevant(i)) {
      String stringVal;
      IAnswerData val=model.getForm().getValue(model.getQuestion(i));
      if (val == null) {
        System.out.println(""String_Node_Str"");
        stringVal=null;
      }
 else {
        stringVal=val.getDisplayText();
      }
      if (stringVal == null) {
        stringVal=new String(""String_Node_Str"");
      }
      ((List)screen).append(model.getQuestion(i).getShortText() + ""String_Node_Str"" + stringVal,null);
    }
  }
}","protected void createView(){
  ((List)screen).deleteAll();
  indexHash=new Vector();
  for (int i=0; i < model.getNumQuestions(); i++) {
    if (model.isRelevant(i)) {
      String stringVal;
      IAnswerData val=model.getForm().getValue(model.getQuestion(i));
      if (val == null) {
        System.out.println(""String_Node_Str"");
        stringVal=null;
      }
 else {
        stringVal=val.getDisplayText();
      }
      if (stringVal == null) {
        stringVal=new String(""String_Node_Str"");
      }
      ((List)screen).append(model.getQuestion(i).getShortText() + ""String_Node_Str"" + stringVal,null);
      indexHash.addElement(model.getQuestion(i));
    }
  }
}",0.940251572327044
145302,"public Select1QuestionWidget(QuestionDef question){
  super(question);
}","public Select1QuestionWidget(QuestionDef question){
  super(question);
  this.q=question;
}",0.8834355828220859
145303,"public IAnswerData getWidgetValue(){
  return null;
}","public IAnswerData getWidgetValue(){
  int selectedIndex=-1;
  for (int i=0; i < cg.size(); i++) {
    if (cg.isSelected(i)) {
      selectedIndex=i;
      break;
    }
  }
  return (selectedIndex == -1 ? null : new SelectOneData(new Selection(selectedIndex,q)));
}",0.2515723270440251
145304,"public SelectQuestionWidget(QuestionDef question){
  super(question);
}","public SelectQuestionWidget(QuestionDef question){
  super(question);
  this.q=question;
}",0.8819875776397516
145305,"public IAnswerData getWidgetValue(){
  return null;
}","public IAnswerData getWidgetValue(){
  Vector vs=new Vector();
  for (int i=0; i < cg.size(); i++) {
    if (cg.isSelected(i))     vs.addElement(new Selection(i,q));
  }
  return (vs.size() == 0 ? null : new SelectMultiData(vs));
}",0.2816901408450704
145306,"public IAnswerData getWidgetValue(){
  if (timePicker.getDate() != null) {
    return new DateData(timePicker.getDate());
  }
 else {
    return null;
  }
}","public IAnswerData getWidgetValue(){
  if (timePicker.getDate() != null) {
    return new TimeData(timePicker.getDate());
  }
 else {
    return null;
  }
}",0.9807692307692308
145307,"public void getView(int qIndex){
  prompt=model.getQuestion(qIndex);
  int qType=prompt.getDataType();
  int contType=prompt.getControlType();
  System.out.println(""String_Node_Str"" + qType + ""String_Node_Str""+ contType);
  System.out.println(""String_Node_Str"" + Constants.DATATYPE_LIST_EXCLUSIVE);
switch (contType) {
case Constants.CONTROL_INPUT:
switch (qType) {
case Constants.DATATYPE_DATE:
      widget=new DateQuestionWidget(prompt);
    controller.setDisplay(widget);
  break;
case Constants.DATATYPE_TIME:
widget=new TimeQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_INTEGER:
widget=new NumericQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
}
break;
case Constants.CONTROL_SELECT_ONE:
widget=new Select1QuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_SELECT_MULTI:
widget=new SelectQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_TEXTAREA:
widget=new TextQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}","public void getView(int qIndex){
  prompt=model.getQuestion(qIndex);
  int qType=prompt.getDataType();
  int contType=prompt.getControlType();
  System.out.println(""String_Node_Str"" + qType + ""String_Node_Str""+ contType);
  System.out.println(""String_Node_Str"" + Constants.DATATYPE_LIST_EXCLUSIVE);
switch (contType) {
case Constants.CONTROL_INPUT:
switch (qType) {
case Constants.DATATYPE_DATE:
      widget=new DateQuestionWidget(prompt);
    widget.setCommandListener(this);
  widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_TIME:
widget=new TimeQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.DATATYPE_INTEGER:
widget=new NumericQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
}
break;
case Constants.CONTROL_SELECT_ONE:
widget=new Select1QuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_SELECT_MULTI:
widget=new SelectQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
case Constants.CONTROL_TEXTAREA:
widget=new TextQuestionWidget(prompt);
widget.setCommandListener(this);
widget.setItemCommandListner(this);
controller.setDisplay(widget);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}",0.9755607633076664
145308,"private void jumpToQuestion(int questionIndex){
  if (questionIndex != INDEX_NOT_SET && !model.isRelevant(questionIndex))   throw new IllegalStateException();
  if (questionIndex > activeQuestionIndex) {
    if (activeQuestionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
    }
    for (int i=activeQuestionIndex + 1; i <= questionIndex; i++) {
      putQuestion(i,i == questionIndex);
    }
  }
 else   if (questionIndex <= activeQuestionIndex) {
    for (int i=activeQuestionIndex; i > questionIndex; i--) {
      removeFrame(i);
    }
    if (questionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndex)).setViewState(ChatterboxWidget.VIEW_EXPANDED);
    }
  }
  if (activeQuestionIndex != questionIndex) {
    activeQuestionIndex=questionIndex;
    ChatterboxWidget widget=(ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true));
    this.focus(widget,true);
    widget.showCommands();
    progressBar.setValue(questionIndex);
  }
  babysitStyles();
}","private void jumpToQuestion(int questionIndex){
  if (questionIndex != INDEX_NOT_SET && !model.isRelevant(questionIndex))   throw new IllegalStateException();
  if (questionIndex > activeQuestionIndex) {
    if (activeQuestionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true))).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
    }
    for (int i=activeQuestionIndex + 1; i <= questionIndex; i++) {
      putQuestion(i,i == questionIndex);
    }
  }
 else   if (questionIndex <= activeQuestionIndex) {
    for (int i=activeQuestionIndex; i > questionIndex; i--) {
      removeFrame(i);
    }
    if (questionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndexes.indexOf(questionIndex,true))).setViewState(ChatterboxWidget.VIEW_EXPANDED);
    }
  }
  if (activeQuestionIndex != questionIndex) {
    activeQuestionIndex=questionIndex;
    ChatterboxWidget widget=(ChatterboxWidget)get(questionIndexes.indexOf(activeQuestionIndex,true));
    this.focus(widget,true);
    widget.showCommands();
    progressBar.setValue(questionIndex);
  }
  babysitStyles();
}",0.9865107913669064
145309,"public void readExternal(DataInputStream in) throws IOException {
  super.readExternal(in);
  this.formName=in.readUTF();
  this.version=in.readInt();
  this.dateSaved=new Date(in.readLong());
  this.formIdReference=in.readInt();
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  super.readExternal(in);
  this.formName=in.readUTF();
  this.version=in.readInt();
  this.dateSaved=new Date(in.readLong());
  this.formIdReference=in.readInt();
}",0.8492647058823529
145310,"public void readExternal(DataInputStream in) throws IOException {
  super.readExternal(in);
  this.formName=ExternalizableHelper.readUTF(in);
  this.version=in.readInt();
  this.type=in.readInt();
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  super.readExternal(in);
  this.formName=ExternalizableHelper.readUTF(in);
  this.version=in.readInt();
  this.type=in.readInt();
}",0.8284518828451883
145311,"/** 
 * (non-Javadoc)
 * @see org.javarosa.core.util.clforms.storage.Externalizable#readExternal(DataInputStream)
 */
public void readExternal(DataInputStream in) throws IOException {
  this.name=in.readUTF();
}","/** 
 * (non-Javadoc)
 * @see org.javarosa.core.util.clforms.storage.Externalizable#readExternal(DataInputStream)
 */
public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  this.name=in.readUTF();
}",0.8373015873015873
145312,"public void readExternal(DataInputStream in) throws IOException {
  this.recordId=in.readInt();
  this.size=in.readInt();
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  this.recordId=in.readInt();
  this.size=in.readInt();
}",0.75
145313,"public void readExternal(DataInputStream in) throws IOException {
  super.readExternal(in);
  this.patientRecordId=in.readInt();
  this.patientName=in.readUTF();
  this.patientId=ExternalizableHelper.readUTF(in);
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  super.readExternal(in);
  this.patientRecordId=in.readInt();
  this.patientName=in.readUTF();
  this.patientId=ExternalizableHelper.readUTF(in);
}",0.8392156862745098
145314,"public void readExternal(DataInputStream in) throws IOException {
  super.readExternal(in);
  this.formId=in.readInt();
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  super.readExternal(in);
  this.formId=in.readInt();
}",0.7469135802469136
145315,"/** 
 * Preloads a StringData object for the preload type 'property'
 * @param preloadParams The parameters determining the property to be retrieved
 * @return A preload property value if the parameters can be parsed,null otherwise
 */
private IAnswerData preloadProperty(String preloadParams){
  String propname=preloadParams;
  String propval=JavaRosaServiceProvider.instance().getPropertyManager().getSingularProperty(propname);
  String preloadVal=null;
  if (propval != null && propval.length() > 0) {
    preloadVal=propval;
  }
  StringData data=new StringData(preloadVal);
  return data;
}","/** 
 * Preloads a StringData object for the preload type 'property'
 * @param preloadParams The parameters determining the property to be retrieved
 * @return A preload property value if the parameters can be parsed,null otherwise
 */
private IAnswerData preloadProperty(String preloadParams){
  String propname=preloadParams;
  String propval=JavaRosaServiceProvider.instance().getPropertyManager().getSingularProperty(propname);
  StringData preloadVal=null;
  if (propval != null && propval.length() > 0) {
    preloadVal=new StringData(propval);
  }
  return preloadVal;
}",0.9250425894378196
145316,"/** 
 * Preloads a StringData object for the preload type 'timestamp' s
 * @param preloadParams The parameters determining the timestamp
 * @return A preload string value if the parameters can be parsed,null otherwise
 */
private IAnswerData preloadTimestamp(String preloadParams){
  String value=null;
  if (""String_Node_Str"".equals(preloadParams)) {
    value=DateUtils.formatDateToTimeStamp(new Date());
  }
  return new StringData(value);
}","/** 
 * Preloads a StringData object for the preload type 'timestamp' s
 * @param preloadParams The parameters determining the timestamp
 * @return A preload string value if the parameters can be parsed,null otherwise
 */
private IAnswerData preloadTimestamp(String preloadParams){
  StringData value=null;
  if (""String_Node_Str"".equals(preloadParams)) {
    value=new StringData(DateUtils.formatDateToTimeStamp(new Date()));
  }
  return value;
}",0.9596412556053812
145317,"public boolean handlePostProcess(IFormDataModel model,IDataReference ref,String params){
  IAnswerData data=model.getDataValue(ref);
  if (""String_Node_Str"".equals(params)) {
    patient.setVaccinations((ImmunizationData)data);
    return true;
  }
 else {
  }
  return false;
}","public boolean handlePostProcess(IFormDataModel model,IDataReference ref,String params){
  IAnswerData data=model.getDataValue(ref);
  if (""String_Node_Str"".equals(params)) {
    patient.setVaccinations((ImmunizationData)((ImmunizationAnswerData)data).getValue());
    return true;
  }
 else {
  }
  return false;
}",0.924114671163575
145318,"protected void paint(Graphics g,int w,int h){
  for (int i=0; i <= rows; i++) {
    g.drawLine(0,i * dy,cols * dx,i * dy);
  }
  for (int i=0; i <= cols; i++) {
    g.drawLine(i * dx,0,i * dx,rows * dy);
  }
  int oldColor=g.getColor();
  g.setColor(0x00D0D0D0);
  g.fillRect((currentX * dx) + 1,(currentY * dy) + 1,dx - 1,dy - 1);
  g.setColor(oldColor);
  for (int i=0; i < rows; i++) {
    for (int j=0; j < cols; j++) {
      if (data[i][j] != null) {
        int oldClipX=g.getClipX();
        int oldClipY=g.getClipY();
        int oldClipWidth=g.getClipWidth();
        int oldClipHeight=g.getClipHeight();
        g.setClip((j * dx) + 1,i * dy,dx - 1,dy - 1);
        g.drawString(data[i][j],(j * dx) + 2,((i + 1) * dy) - 2,Graphics.BOTTOM | Graphics.LEFT);
        g.setClip(oldClipX,oldClipY,oldClipWidth,oldClipHeight);
      }
    }
  }
}","protected void paint(Graphics g,int w,int h){
  this.border=null;
  for (int i=0; i <= rows; i++) {
    g.drawLine(0,i * dy,cols * dx,i * dy);
  }
  for (int i=0; i <= cols; i++) {
    g.drawLine(i * dx,0,i * dx,rows * dy);
  }
  int oldColor=g.getColor();
  g.setColor(0x00D0D0D0);
  g.fillRect((currentX * dx) + 1,(currentY * dy) + 1,dx - 1,dy - 1);
  g.setColor(oldColor);
  for (int i=0; i < rows; i++) {
    for (int j=0; j < cols; j++) {
      if (data[i][j] != null) {
        int oldClipX=g.getClipX();
        int oldClipY=g.getClipY();
        int oldClipWidth=g.getClipWidth();
        int oldClipHeight=g.getClipHeight();
        g.setClip((j * dx) + 1,i * dy,dx - 1,dy - 1);
        g.drawString(data[i][j],(j * dx) + 2,((i + 1) * dy) - 2,Graphics.BOTTOM | Graphics.LEFT);
        g.setClip(oldClipX,oldClipY,oldClipWidth,oldClipHeight);
      }
    }
  }
}",0.9883720930232558
145319,"/** 
 * Preload the Data Model with the preload values that are enumerated in the data bindings.
 */
public void preloadModel(){
  IAnswerData preload=null;
  Enumeration en=getBindings().elements();
  while (en.hasMoreElements()) {
    DataBinding binding=(DataBinding)en.nextElement();
    if (binding.getPreload() != null)     preload=preloader.getQuestionPreload(binding.getPreload(),binding.getPreloadParams());
    if (preload != null) {
      model.updateDataValue(binding.getReference(),preload);
    }
  }
}","/** 
 * Preload the Data Model with the preload values that are enumerated in the data bindings.
 */
public void preloadModel(){
  IAnswerData preload=null;
  Enumeration en=getBindings().elements();
  while (en.hasMoreElements()) {
    DataBinding binding=(DataBinding)en.nextElement();
    preload=null;
    if (binding.getPreload() != null)     preload=preloader.getQuestionPreload(binding.getPreload(),binding.getPreloadParams());
    if (preload != null) {
      model.updateDataValue(binding.getReference(),preload);
    }
  }
}",0.9828571428571428
145320,"public void writeExternal(DataOutputStream out) throws IOException {
  out.writeInt(recordId);
  ExternalizableHelper.writeInteger(out,getPatientId());
  ExternalizableHelper.writeUTF(out,getPrefix());
  ExternalizableHelper.writeUTF(out,getFamilyName());
  ExternalizableHelper.writeUTF(out,getMiddleName());
  ExternalizableHelper.writeUTF(out,getGivenName());
  ExternalizableHelper.writeUTF(out,getGender());
  ExternalizableHelper.writeDate(out,getBirthDate());
  ExternalizableHelper.writeUTF(out,getPatientIdentifier());
  out.writeBoolean(isNewPatient());
  ExternalizableHelper.writeExternalStringValueMap(out,records);
}","public void writeExternal(DataOutputStream out) throws IOException {
  out.writeInt(recordId);
  ExternalizableHelper.writeInteger(out,getPatientId());
  ExternalizableHelper.writeUTF(out,getPrefix());
  ExternalizableHelper.writeUTF(out,getFamilyName());
  ExternalizableHelper.writeUTF(out,getMiddleName());
  ExternalizableHelper.writeUTF(out,getGivenName());
  ExternalizableHelper.writeUTF(out,getGender());
  ExternalizableHelper.writeDate(out,getBirthDate());
  ExternalizableHelper.writeUTF(out,getPatientIdentifier());
  out.writeBoolean(isNewPatient());
  vaccinationData.writeExternal(out);
  ExternalizableHelper.writeExternalStringValueMap(out,records);
}",0.970724191063174
145321,"public Patient(){
  records.put(""String_Node_Str"",weightRecord);
  records.put(""String_Node_Str"",heightRecord);
  records.put(""String_Node_Str"",cd4CountRecord);
  Vector rows=new Vector();
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  vaccinationData.setValue(rows);
}","public Patient(){
  records.put(""String_Node_Str"",weightRecord);
  records.put(""String_Node_Str"",heightRecord);
  records.put(""String_Node_Str"",cd4CountRecord);
  Vector rows=new Vector();
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  rows.addElement(new ImmunizationRow(""String_Node_Str""));
  vaccinationData=new ImmunizationData(rows);
}",0.9714285714285714
145322,"public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  recordId=in.readInt();
  setPatientId(ExternalizableHelper.readInteger(in));
  setPrefix(ExternalizableHelper.readUTF(in));
  setFamilyName(ExternalizableHelper.readUTF(in));
  setMiddleName(ExternalizableHelper.readUTF(in));
  setGivenName(ExternalizableHelper.readUTF(in));
  setGender(ExternalizableHelper.readUTF(in));
  setBirthDate(ExternalizableHelper.readDate(in));
  setPatientIdentifier(ExternalizableHelper.readUTF(in));
  setNewPatient(in.readBoolean());
  records=ExternalizableHelper.readExternalStringValueMap(in,NumericListData.class);
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  recordId=in.readInt();
  setPatientId(ExternalizableHelper.readInteger(in));
  setPrefix(ExternalizableHelper.readUTF(in));
  setFamilyName(ExternalizableHelper.readUTF(in));
  setMiddleName(ExternalizableHelper.readUTF(in));
  setGivenName(ExternalizableHelper.readUTF(in));
  setGender(ExternalizableHelper.readUTF(in));
  setBirthDate(ExternalizableHelper.readDate(in));
  setPatientIdentifier(ExternalizableHelper.readUTF(in));
  setNewPatient(in.readBoolean());
  vaccinationData=new ImmunizationData();
  vaccinationData.readExternal(in);
  records=ExternalizableHelper.readExternalStringValueMap(in,NumericListData.class);
}",0.9474393530997304
145323,"/** 
 */
public IAnswerData handlePreload(String preloadParams){
  IAnswerData returnVal=null;
  if (preloadParams == ""String_Node_Str"") {
    returnVal=new IntegerData(12);
  }
 else {
    int selectorStart=preloadParams.indexOf(""String_Node_Str"");
    if (selectorStart == -1) {
      returnVal=(IAnswerData)patient.getRecord(preloadParams);
    }
 else {
      String type=preloadParams.substring(0,selectorStart);
      String selector=preloadParams.substring(selectorStart,preloadParams.length());
      Vector data=patient.getRecordSet(type,selector);
      returnVal=new NumericListData();
      returnVal.setValue(data);
    }
  }
  return returnVal;
}","/** 
 */
public IAnswerData handlePreload(String preloadParams){
  IAnswerData returnVal=null;
  if (preloadParams == ""String_Node_Str"") {
    returnVal=new IntegerData(12);
  }
 else   if (""String_Node_Str"".equals(preloadParams)) {
    returnVal=new ImmunizationAnswerData(patient.getVaccinations());
  }
 else {
    int selectorStart=preloadParams.indexOf(""String_Node_Str"");
    if (selectorStart == -1) {
      returnVal=(IAnswerData)patient.getRecord(preloadParams);
    }
 else {
      String type=preloadParams.substring(0,selectorStart);
      String selector=preloadParams.substring(selectorStart,preloadParams.length());
      Vector data=patient.getRecordSet(type,selector);
      returnVal=new NumericListData();
      returnVal.setValue(data);
    }
  }
  return returnVal;
}",0.9116022099447514
145324,"protected void setWidgetValue(Object o){
  if (o instanceof Vector) {
    Vector data=reverseVector((Vector)o);
    int numPoints=data.size();
    int scaledRes=resolution / numPoints;
    chartXPointsArray=new Integer[numPoints];
    chartYPointsArray=new Integer[numPoints];
    Long minDate=null;
    Long maxDate=null;
    Integer minVal=null;
    Integer maxVal=null;
    Enumeration en=data.elements();
    while (en.hasMoreElements()) {
      DateValueTuple tuple=(DateValueTuple)en.nextElement();
      long time=tuple.date.getTime();
      if (minDate == null || minDate.longValue() > time) {
        minDate=new Long(time);
      }
      if (maxDate == null || maxDate.longValue() < time) {
        maxDate=new Long(time);
      }
      int val=tuple.value;
      if (minVal == null || minVal.intValue() > val) {
        minVal=new Integer(val);
      }
      if (maxVal == null || maxVal.intValue() < val) {
        maxVal=new Integer(val);
      }
    }
    long dateSpan=maxDate.longValue() - minDate.longValue();
    int valSpan=maxVal.intValue() - minVal.intValue();
    long dateRes=dateSpan / numPoints;
    int valRes=valSpan / numPoints;
    Vector xpoints=new Vector();
    Vector ypoints=new Vector();
    en=data.elements();
    while (en.hasMoreElements()) {
      DateValueTuple tuple=(DateValueTuple)en.nextElement();
      long time=tuple.date.getTime();
      System.out.println(""String_Node_Str"" + time);
      long timeUnit=(time - minDate.longValue()) * scaledRes;
      System.out.println(""String_Node_Str"" + timeUnit);
      System.out.println(""String_Node_Str"" + dateRes);
      long scaledTime=(timeUnit / dateRes);
      System.out.println(""String_Node_Str"" + scaledTime);
      int intScaled=(int)scaledTime;
      System.out.println(""String_Node_Str"" + intScaled);
      int finalTime=intScaled;
      System.out.println(""String_Node_Str"" + finalTime);
      Integer xPoint=new Integer(finalTime);
      Integer val=new Integer(tuple.value);
      xpoints.addElement(xPoint);
      ypoints.addElement(val);
    }
    xpoints.copyInto(chartXPointsArray);
    ypoints.copyInto(chartYPointsArray);
    chart.resetData();
    applyTemplate();
    applyData();
  }
}","protected void setWidgetValue(Object o){
  if (o instanceof Vector) {
    Vector data=reverseVector((Vector)o);
    int numPoints=data.size();
    int scaledRes=resolution / numPoints;
    chartXPointsArray=new Integer[numPoints];
    chartYPointsArray=new Integer[numPoints];
    Long minDate=null;
    Long maxDate=null;
    Integer minVal=null;
    Integer maxVal=null;
    Enumeration en=data.elements();
    while (en.hasMoreElements()) {
      DateValueTuple tuple=(DateValueTuple)en.nextElement();
      long time=tuple.date.getTime();
      if (minDate == null || minDate.longValue() > time) {
        minDate=new Long(time);
      }
      if (maxDate == null || maxDate.longValue() < time) {
        maxDate=new Long(time);
      }
      int val=tuple.value;
      if (minVal == null || minVal.intValue() > val) {
        minVal=new Integer(val);
      }
      if (maxVal == null || maxVal.intValue() < val) {
        maxVal=new Integer(val);
      }
    }
    long dateSpan=maxDate.longValue() - minDate.longValue();
    int valSpan=maxVal.intValue() - minVal.intValue();
    long dateRes=dateSpan / numPoints;
    int valRes=valSpan / numPoints;
    Vector xpoints=new Vector();
    Vector ypoints=new Vector();
    en=data.elements();
    while (en.hasMoreElements()) {
      DateValueTuple tuple=(DateValueTuple)en.nextElement();
      long time=tuple.date.getTime();
      long timeUnit=(time - minDate.longValue()) * scaledRes;
      long scaledTime=(timeUnit / dateRes);
      int intScaled=(int)scaledTime;
      int finalTime=intScaled;
      Integer xPoint=new Integer(finalTime);
      Integer val=new Integer(tuple.value);
      xpoints.addElement(xPoint);
      ypoints.addElement(val);
    }
    xpoints.copyInto(chartXPointsArray);
    ypoints.copyInto(chartYPointsArray);
    chart.resetData();
    applyTemplate();
    applyData();
  }
}",0.8367397192809652
145325,"protected IAnswerData getWidgetValue(){
  return d;
}","protected IAnswerData getWidgetValue(){
  return new ImmunizationAnswerData(d);
}",0.7910447761194029
145326,"public void keyPressed(int code){
switch (code) {
case Canvas.KEY_NUM1:
    question1.setLabel(""String_Node_Str"");
  question1.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentX][currentY]=1;
checkdatefield();
break;
case Canvas.KEY_NUM2:
question2.setLabel(""String_Node_Str"");
question2.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentX][currentY]=2;
checkdatefield();
break;
case Canvas.KEY_NUM3:
question3.setLabel(""String_Node_Str"");
question3.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentX][currentY]=3;
checkdatefield();
break;
case Canvas.KEY_NUM4:
isDatefield=true;
question4.setLabel(""String_Node_Str"");
question4.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
Calendar calendar=Calendar.getInstance();
calendar.setTime(new Date());
calendar.set(Calendar.MONTH,calendar.get(Calendar.MONTH) - 6);
calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR));
calendar.set(Calendar.DAY_OF_MONTH,calendar.get(Calendar.DAY_OF_MONTH));
datefield.setDate(calendar.getTime());
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentX][currentY]=4;
recorddate[currentX][currentY]=calendar.getTime().getTime();
break;
}
}","public void keyPressed(int code){
switch (code) {
case Canvas.KEY_NUM1:
    question1.setLabel(""String_Node_Str"");
  question1.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentY][currentX]=1;
checkdatefield();
break;
case Canvas.KEY_NUM2:
question2.setLabel(""String_Node_Str"");
question2.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentY][currentX]=2;
checkdatefield();
break;
case Canvas.KEY_NUM3:
question3.setLabel(""String_Node_Str"");
question3.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentY][currentX]=3;
checkdatefield();
break;
case Canvas.KEY_NUM4:
isDatefield=true;
question4.setLabel(""String_Node_Str"");
question4.setText(""String_Node_Str"");
question1.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question2.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question3.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));
question4.setFont(Font.getFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM));
Calendar calendar=Calendar.getInstance();
calendar.setTime(new Date());
calendar.set(Calendar.MONTH,calendar.get(Calendar.MONTH) - 6);
calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR));
calendar.set(Calendar.DAY_OF_MONTH,calendar.get(Calendar.DAY_OF_MONTH));
datefield.setDate(calendar.getTime());
setText(""String_Node_Str"",currentX,currentY);
selectedindex[currentY][currentX]=4;
recorddate[currentY][currentX]=calendar.getTime().getTime();
break;
}
}",0.9930981595092024
145327,"public ImmunizationData getData(){
  ImmunizationData data=new ImmunizationData();
  for (int i=1; i < rows; ++i) {
    ImmunizationRow row=new ImmunizationRow(this.data[i][0]);
    for (int j=1; j < cols; j++) {
      if (selectedindex[i][j] == ExtensionConstants.VACCINATION_GIVEN_ON_DATE) {
        row.setDose(j,selectedindex[i][j],new Date(recorddate[i][j]));
      }
 else {
        row.setVaccinationDose(j,selectedindex[i][j]);
      }
    }
    data.addRow(row);
  }
  return data;
}","public ImmunizationData getData(){
  ImmunizationData data=new ImmunizationData();
  for (int i=1; i < rows; ++i) {
    ImmunizationRow row=new ImmunizationRow(this.data[i][0]);
    for (int j=1; j < cols; j++) {
      if (selectedindex[i][j] == ExtensionConstants.VACCINATION_GIVEN_ON_DATE) {
        row.setDose(j - 1,selectedindex[i][j],new Date(recorddate[i][j]));
      }
 else {
        row.setVaccinationDose(j - 1,selectedindex[i][j]);
      }
    }
    data.addRow(row);
  }
  return data;
}",0.9919354838709676
145328,"public void refreshWidget(QuestionDef question,IAnswerData data,int changeFlags){
  prompt.setText(question.getLongText());
  updateWidget(question);
  if (data != null) {
    setWidgetValue(data.getValue());
  }
}","public void refreshWidget(QuestionDef question,IAnswerData data,int changeFlags){
  prompt.setText(question.getLongText());
  updateWidget(question);
  if (data != null && changeFlags == QuestionStateListener.CHANGE_INIT) {
    setWidgetValue(data.getValue());
  }
}",0.8916666666666667
145329,"private void jumpToQuestion(int questionIndex){
  if (questionIndex != INDEX_NOT_SET && !model.isRelevant(questionIndex))   throw new IllegalStateException();
  if (questionIndex > activeQuestionIndex) {
    if (activeQuestionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(activeQuestionIndex)).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
    }
    for (int i=activeQuestionIndex + 1; i <= questionIndex; i++) {
      putQuestion(i,i == questionIndex);
    }
  }
 else   if (questionIndex <= activeQuestionIndex) {
    for (int i=activeQuestionIndex; i > questionIndex; i--) {
      removeFrame(i);
    }
    if (questionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndex)).setViewState(ChatterboxWidget.VIEW_EXPANDED);
    }
  }
  if (activeQuestionIndex != questionIndex) {
    activeQuestionIndex=questionIndex;
    ChatterboxWidget widget=(ChatterboxWidget)get(activeQuestionIndex);
    this.focus(widget,true);
    progressBar.setValue(questionIndex);
  }
  babysitStyles();
}","private void jumpToQuestion(int questionIndex){
  if (questionIndex != INDEX_NOT_SET && !model.isRelevant(questionIndex))   throw new IllegalStateException();
  if (questionIndex > activeQuestionIndex) {
    if (activeQuestionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(activeQuestionIndex)).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
    }
    for (int i=activeQuestionIndex + 1; i <= questionIndex; i++) {
      putQuestion(i,i == questionIndex);
    }
  }
 else   if (questionIndex <= activeQuestionIndex) {
    for (int i=activeQuestionIndex; i > questionIndex; i--) {
      removeFrame(i);
    }
    if (questionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndex)).setViewState(ChatterboxWidget.VIEW_EXPANDED);
    }
  }
  if (activeQuestionIndex != questionIndex) {
    activeQuestionIndex=questionIndex;
    ChatterboxWidget widget=(ChatterboxWidget)get(activeQuestionIndex);
    this.focus(widget,true);
    widget.showCommands();
    progressBar.setValue(questionIndex);
  }
  babysitStyles();
}",0.986809965803615
145330,"/** 
 * Converts the date into a string formatted according to the xsd:dateTime specifications
 * @param date The date to be converted
 * @return The date represented by 'date' in the XML dateTime format.
 */
public static String formatDateToTimeStamp(Date date){
  String dateElement=getXMLStringValue(date);
  Calendar cd=Calendar.getInstance();
  cd.setTime(date);
  String hour=String.valueOf(cd.get(Calendar.HOUR));
  hour=hour.length() < 2 ? ""String_Node_Str"" + hour : hour;
  String minute=String.valueOf(cd.get(Calendar.MINUTE));
  minute=minute.length() < 2 ? ""String_Node_Str"" + minute : minute;
  String time=hour + ""String_Node_Str"" + minute+ ""String_Node_Str""+ String.valueOf(cd.get(Calendar.MILLISECOND)).substring(0,2);
  return dateElement + ""String_Node_Str"" + time;
}","/** 
 * Converts the date into a string formatted according to the xsd:dateTime specifications
 * @param date The date to be converted
 * @return The date represented by 'date' in the XML dateTime format.
 */
public static String formatDateToTimeStamp(Date date){
  String dateElement=getXMLStringValue(date);
  Calendar cd=Calendar.getInstance();
  cd.setTime(date);
  String hour=String.valueOf(cd.get(Calendar.HOUR_OF_DAY));
  hour=hour.length() < 2 ? ""String_Node_Str"" + hour : hour;
  String minute=String.valueOf(cd.get(Calendar.MINUTE));
  minute=minute.length() < 2 ? ""String_Node_Str"" + minute : minute;
  String second=String.valueOf(cd.get(Calendar.SECOND));
  second=second.length() < 2 ? ""String_Node_Str"" + second : second;
  String time=hour + ""String_Node_Str"" + minute+ ""String_Node_Str""+ second;
  return dateElement + ""String_Node_Str"" + time;
}",0.8587022437841115
145331,"/** 
 * Preloads a StringData object for the preload type 'timestamp'
 * @param preloadParams The parameters determining the timestamp
 * @return A preload string value if the parameters can be parsed,null otherwise
 */
private IAnswerData preloadTimestamp(String preloadParams){
  String value=null;
  if (preloadParams.equals(""String_Node_Str"") || preloadParams.equals(""String_Node_Str"")) {
    value=DateUtils.formatDateToTimeStamp(new Date());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return new StringData(value);
}","/** 
 * Preloads a StringData object for the preload type 'timestamp'
 * @param preloadParams The parameters determining the timestamp
 * @return A preload string value if the parameters can be parsed,null otherwise
 */
private IAnswerData preloadTimestamp(String preloadParams){
  String value=null;
  if (""String_Node_Str"".equals(preloadParams)) {
    value=DateUtils.formatDateToTimeStamp(new Date());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return new StringData(value);
}",0.9448082319925164
145332,"public void keyPressed(int keyCode){
  int keyDownSelectedWidget=this.activeQuestionIndex;
  super.keyPressed(keyCode);
  if (multiLingual && keyCode == LANGUAGE_CYCLE_KEYCODE) {
    controller.cycleLanguage();
  }
 else   if (keyCode == KEY_CENTER_LETS_HOPE) {
    ChatterboxWidget widget=activeFrame();
    if (widget != null) {
      widget.UIHack(UIHACK_SELECT_PRESS);
    }
    indexWhenKeyPressed=keyDownSelectedWidget;
  }
}","public void keyPressed(int keyCode){
  int keyDownSelectedWidget=this.activeQuestionIndex;
  super.keyPressed(keyCode);
  if (multiLingual && keyCode == LANGUAGE_CYCLE_KEYCODE) {
    controller.cycleLanguage();
  }
 else   if (keyCode == KEY_CENTER_LETS_HOPE) {
    if (keyDownSelectedWidget == this.activeQuestionIndex) {
      ChatterboxWidget widget=activeFrame();
      if (widget != null) {
        widget.UIHack(UIHACK_SELECT_PRESS);
      }
    }
    indexWhenKeyPressed=keyDownSelectedWidget;
  }
}",0.919957310565635
145333,"private void attachWidget(){
  Item widget=expandedStyle.getInteractiveWidget();
  widget.addCommand(nextCommand);
  widget.setItemCommandListener(this);
switch (expandedStyle.getNextMode()) {
case NEXT_ON_MANUAL:
    break;
case NEXT_ON_ENTRY:
  widget.setItemStateListener(this);
break;
case NEXT_ON_SELECT:
widget.setDefaultCommand(nextCommand);
break;
}
}","private void attachWidget(){
  Item widget=expandedStyle.getInteractiveWidget();
  widget.addCommand(nextCommand);
  widget.setItemCommandListener(this);
switch (expandedStyle.getNextMode()) {
case NEXT_ON_MANUAL:
    break;
case NEXT_ON_ENTRY:
  widget.setItemStateListener(this);
break;
case NEXT_ON_SELECT:
widget.setDefaultCommand(nextCommand);
break;
}
this.focus(this.itemsList.size() - 1);
}",0.9484808454425364
145334,"public void setViewState(int viewState){
  if (viewState != this.viewState) {
    if (this.viewState != VIEW_NOT_SET)     reset();
    this.viewState=viewState;
    activeStyle=getActiveStyle();
    activeStyle.initWidget(question,this);
    activeStyle.refreshWidget(question,form.getValue(question),QuestionStateListener.CHANGE_INIT);
    if (viewState == VIEW_EXPANDED)     attachWidget();
  }
}","public void setViewState(int viewState){
  if (viewState != this.viewState) {
    if (this.viewState != VIEW_NOT_SET)     reset();
    this.viewState=viewState;
    activeStyle=getActiveStyle();
    activeStyle.initWidget(question,this);
    activeStyle.refreshWidget(question,form.getValue(question),QuestionStateListener.CHANGE_INIT);
    if (viewState == VIEW_EXPANDED) {
      attachWidget();
    }
  }
}",0.9875930521091812
145335,"public void keyReleased(int keyCode){
  if (indexWhenKeyPressed == this.activeQuestionIndex) {
    super.keyReleased(keyCode);
  }
}","public void keyReleased(int keyCode){
  if (keyCode == KEY_CENTER_LETS_HOPE && !(indexWhenKeyPressed == this.activeQuestionIndex)) {
  }
 else {
    super.keyReleased(keyCode);
  }
}",0.8407643312101911
145336,"public void itemStateChanged(Item item){
  if (item.getClass() == ChoiceGroup.class) {
    ChoiceGroup cg=(ChoiceGroup)item;
    Vector choices=(Vector)screen.getItemChoices().get(cg);
    String propertyName=cg.getLabel();
    if (cg.getSelectedIndex() >= 0) {
      String selection=(String)choices.elementAt(cg.getSelectedIndex());
      if (JavaRosaServiceProvider.instance().getPropertyManager().getProperty(propertyName).contains(selection)) {
        changes.remove(propertyName);
      }
 else {
        changes.put(propertyName,selection);
      }
    }
  }
 else   if (item.getClass() == TextField.class) {
    TextField tf=(TextField)item;
    String propertyName=tf.getLabel();
    if (JavaRosaServiceProvider.instance().getPropertyManager().getProperty(propertyName).contains(tf.toString())) {
      changes.remove(propertyName);
    }
 else {
      changes.put(propertyName,tf.toString());
    }
  }
}","public void itemStateChanged(Item item){
  if (item instanceof ChoiceGroup) {
    ChoiceGroup cg=(ChoiceGroup)item;
    Vector choices=(Vector)screen.getItemChoices().get(cg);
    String propertyName=cg.getLabel();
    if (cg.getSelectedIndex() >= 0) {
      String selection=(String)choices.elementAt(cg.getSelectedIndex());
      if (JavaRosaServiceProvider.instance().getPropertyManager().getProperty(propertyName).contains(selection)) {
        changes.remove(propertyName);
      }
 else {
        changes.put(propertyName,selection);
      }
    }
  }
 else   if (item instanceof TextField) {
    TextField tf=(TextField)item;
    String propertyName=tf.getLabel();
    Vector prop=JavaRosaServiceProvider.instance().getPropertyManager().getProperty(propertyName);
    if (prop == null) {
      prop=new Vector();
    }
    if (prop.contains(tf.toString())) {
      changes.remove(propertyName);
    }
 else {
      changes.put(propertyName,tf.getString());
    }
  }
}",0.1333333333333333
145337,"public void start(Context context){
  changes=new Hashtable();
  screen=new PropertiesScreen(JavaRosaServiceProvider.instance().getPropertyManager());
  screen.addCommand(CMD_DONE);
  screen.addCommand(CMD_CANCEL);
  screen.setCommandListener(this);
  shell.setDisplay(this,screen);
}","public void start(Context context){
  changes=new Hashtable();
  screen=new PropertiesScreen(JavaRosaServiceProvider.instance().getPropertyManager());
  screen.addCommand(CMD_DONE);
  screen.addCommand(CMD_CANCEL);
  screen.setCommandListener(this);
  screen.setItemStateListener(this);
  shell.setDisplay(this,screen);
}",0.9388429752066116
145338,"public boolean canSerialize(IAnswerData data){
  if (data.getClass() == StringData.class || data.getClass() == DateData.class || data.getClass() == SelectMultiData.class || data.getClass() == SelectOneData.class) {
    return true;
  }
 else {
    return false;
  }
}","public boolean canSerialize(IAnswerData data){
  if (data instanceof StringData || data instanceof DateData || data instanceof SelectMultiData|| data instanceof SelectOneData) {
    return true;
  }
 else {
    return false;
  }
}",0.4587525150905432
145339,"public static void numericEncodingUnitTestSuite(){
  numericEncodingUnitTest(0);
  numericEncodingUnitTest(-1);
  numericEncodingUnitTest(1);
  numericEncodingUnitTest(-2);
  for (int i=3; i <= 64; i++) {
    long min=(i < 64 ? -((long)0x01 << (i - 1)) : -9223372036854775808l);
    long max=(i < 64 ? ((long)0x01 << (i - 1)) - 1 : 9223372036854775807l);
    numericEncodingUnitTest(max - 1);
    numericEncodingUnitTest(max);
    if (i < 64)     numericEncodingUnitTest(max + 1);
    numericEncodingUnitTest(min + 1);
    numericEncodingUnitTest(min);
    if (i < 64)     numericEncodingUnitTest(min - 1);
  }
}","public static void numericEncodingUnitTestSuite(){
  numericEncodingUnitTest(0);
  numericEncodingUnitTest(-1);
  numericEncodingUnitTest(1);
  numericEncodingUnitTest(-2);
  for (int i=3; i <= 64; i++) {
    long min=(i < 64 ? -((long)0x01 << (i - 1)) : Long.MIN_VALUE);
    long max=(i < 64 ? ((long)0x01 << (i - 1)) - 1 : Long.MAX_VALUE);
    numericEncodingUnitTest(max - 1);
    numericEncodingUnitTest(max);
    if (i < 64)     numericEncodingUnitTest(max + 1);
    numericEncodingUnitTest(min + 1);
    numericEncodingUnitTest(min);
    if (i < 64)     numericEncodingUnitTest(min - 1);
  }
}",0.9430222956234516
145340,"public static boolean numericEncodingUnitTest(long valIn){
  byte[] bytesOut;
  long valOut;
  System.out.println(""String_Node_Str"" + valIn);
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream(100);
    ExternalizableHelper.writeNumeric(new DataOutputStream(baos),valIn);
    bytesOut=baos.toByteArray();
    ByteArrayInputStream bais=new ByteArrayInputStream(bytesOut);
    valOut=ExternalizableHelper.readNumeric(new DataInputStream(bais));
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  System.out.print(""String_Node_Str"");
  for (int i=0; i < bytesOut.length; i++) {
    String hex=Integer.toHexString(bytesOut[i]);
    if (hex.length() == 1)     hex=""String_Node_Str"" + hex;
 else     hex=hex.substring(hex.length() - 2);
    System.out.print(hex + ""String_Node_Str"");
    i++;
  }
  System.out.print(""String_Node_Str"");
  if (valIn == valOut) {
    System.out.println(""String_Node_Str"");
    return true;
  }
 else {
    System.out.println(""String_Node_Str"" + valOut + ""String_Node_Str"");
    return false;
  }
}","public static boolean numericEncodingUnitTest(long valIn){
  byte[] bytesOut;
  long valOut;
  System.out.print(""String_Node_Str"" + valIn);
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream(100);
    ExternalizableHelper.writeNumeric(new DataOutputStream(baos),valIn);
    bytesOut=baos.toByteArray();
    ByteArrayInputStream bais=new ByteArrayInputStream(bytesOut);
    valOut=ExternalizableHelper.readNumeric(new DataInputStream(bais));
  }
 catch (  IOException ioe) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  System.out.print(""String_Node_Str"");
  for (int i=0; i < bytesOut.length; i++) {
    String hex=Integer.toHexString(bytesOut[i]);
    if (hex.length() == 1)     hex=""String_Node_Str"" + hex;
 else     hex=hex.substring(hex.length() - 2);
    System.out.print(hex);
    if (i < bytesOut.length - 1)     System.out.print(""String_Node_Str"");
  }
  System.out.print(""String_Node_Str"");
  if (valIn == valOut) {
    System.out.println(""String_Node_Str"");
    return true;
  }
 else {
    System.out.println(""String_Node_Str"" + valOut + ""String_Node_Str"");
    return false;
  }
}",0.9679168549480344
145341,"public static FormDef getFormDef(Document doc){
  FormDef formDef=new FormDef();
  initStateVars();
  parseElement(formDef,doc.getRootElement(),formDef,topLevelHandlers);
  if (instanceNode != null) {
    parseInstance(formDef,instanceNode);
  }
  initStateVars();
  return formDef;
}","public static FormDef getFormDef(Document doc){
  FormDef formDef=new FormDef();
  initStateVars();
  parseElement(formDef,doc.getRootElement(),formDef,topLevelHandlers);
  if (instanceNode != null) {
    parseInstance(formDef,instanceNode);
  }
  verifyBindings(formDef);
  initStateVars();
  return formDef;
}",0.9546218487394958
145342,"private static TreeElement parseInstanceNodes(Element node,String currentPath){
  int childNum=node.getChildCount();
  TreeElement element;
  XPathReference reference=new XPathReference(currentPath + node.getName());
  if (bindingsByRef.containsKey(reference)) {
    DataBinding binding=(DataBinding)bindingsByRef.get(reference);
    element=new QuestionDataElement(node.getName(),reference);
    ((QuestionDataElement)element).setValue(XFormAnswerDataParser.getAnswerData(binding,node));
  }
 else {
    if (childNum == 0) {
      element=new QuestionDataElement(node.getName(),reference);
    }
 else     if (childNum == 1) {
      if (node.getType(0) == Node.TEXT) {
        element=new QuestionDataElement(node.getName(),reference);
        ((QuestionDataElement)element).setValue(new StringData((String)node.getChild(0)));
      }
 else {
        element=new QuestionDataGroup(node.getName());
        String newPath=currentPath + node.getName() + ""String_Node_Str"";
        ((QuestionDataGroup)element).addChild(parseInstanceNodes(node.getElement(0),newPath));
      }
    }
 else {
      element=new QuestionDataGroup(node.getName());
      for (int i=0; i < childNum; ++i) {
        if (node.getType(i) != Node.ELEMENT) {
          continue;
        }
 else {
          String newPath=currentPath + node.getName() + ""String_Node_Str"";
          ((QuestionDataGroup)element).addChild(parseInstanceNodes(node.getElement(i),newPath));
        }
      }
    }
  }
  return element;
}","private static TreeElement parseInstanceNodes(Element node,String currentPath){
  int childNum=node.getChildCount();
  TreeElement element;
  String refStr=currentPath + node.getName();
  XPathReference reference=new XPathReference(refStr);
  if (bindingsByRef.containsKey(refStr)) {
    DataBinding binding=(DataBinding)bindingsByRef.get(refStr);
    element=new QuestionDataElement(node.getName(),reference);
    ((QuestionDataElement)element).setValue(XFormAnswerDataParser.getAnswerData(binding,node));
  }
 else {
    if (childNum == 0) {
      element=new QuestionDataElement(node.getName(),reference);
    }
 else     if (childNum == 1) {
      if (node.getType(0) == Node.TEXT) {
        element=new QuestionDataElement(node.getName(),reference);
        ((QuestionDataElement)element).setValue(new StringData((String)node.getChild(0)));
      }
 else {
        element=new QuestionDataGroup(node.getName());
        String newPath=currentPath + node.getName() + ""String_Node_Str"";
        ((QuestionDataGroup)element).addChild(parseInstanceNodes(node.getElement(0),newPath));
      }
    }
 else {
      element=new QuestionDataGroup(node.getName());
      for (int i=0; i < childNum; ++i) {
        if (node.getType(i) != Node.ELEMENT) {
          continue;
        }
 else {
          String newPath=currentPath + node.getName() + ""String_Node_Str"";
          ((QuestionDataGroup)element).addChild(parseInstanceNodes(node.getElement(i),newPath));
        }
      }
    }
  }
  return element;
}",0.9672459893048128
145343,"private static void addBinding(FormDef f,DataBinding binding){
  f.addBinding(binding);
  if (binding.getId() != null) {
    if (bindingsByID.put(binding.getId(),binding) != null) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  bindingsByRef.put(binding.getId(),binding);
}","private static void addBinding(FormDef f,DataBinding binding){
  f.addBinding(binding);
  if (binding.getId() != null) {
    if (bindingsByID.put(binding.getId(),binding) != null) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  bindingsByRef.put((String)binding.getReference().getReference(),binding);
}",0.9096774193548388
145344,"public static Document getXMLDocument(Reader reader){
  Document doc=new Document();
  try {
    KXmlParser parser=new KXmlParser();
    parser.setInput(reader);
    parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);
    doc.parse(parser);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return doc;
}","public static Document getXMLDocument(Reader reader){
  Document doc=new Document();
  try {
    KXmlParser parser=new KXmlParser();
    parser.setInput(reader);
    parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);
    doc.parse(parser);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return doc;
}",0.938483547925608
145345,"public static IAnswerData getAnswerData(DataBinding binding,Element node){
  String value;
switch (binding.getDataType()) {
case Constants.DATATYPE_DATE:
    value=(String)node.getChild(0);
  return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_DATE_TIME:
value=(String)node.getChild(0);
return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_INTEGER:
value=(String)node.getChild(0);
return new IntegerData(Integer.parseInt(value));
case Constants.DATATYPE_TEXT:
value=(String)node.getChild(0);
return new StringData(value);
case Constants.DATATYPE_TIME:
return null;
}
return null;
}","public static IAnswerData getAnswerData(DataBinding binding,Element node){
  String value=XFormParser.getXMLText(node,false);
  if (value == null)   return null;
switch (binding.getDataType()) {
case Constants.DATATYPE_DATE:
    return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_DATE_TIME:
  return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_INTEGER:
return new IntegerData(Integer.parseInt(value));
case Constants.DATATYPE_TEXT:
return new StringData(value);
case Constants.DATATYPE_TIME:
return null;
}
return null;
}",0.8334700574241182
145346,"public void keyPressed(int keyCode){
  if (multiLingual && keyCode == LANGUAGE_CYCLE_KEYCODE) {
    controller.cycleLanguage();
  }
 else   if (keyCode == KEY_CENTER_LETS_HOPE) {
    ChatterboxWidget widget=activeFrame();
    if (widget != null)     ;
  }
  super.keyPressed(keyCode);
}","public void keyPressed(int keyCode){
  int keyDownSelectedWidget=this.activeQuestionIndex;
  super.keyPressed(keyCode);
  if (multiLingual && keyCode == LANGUAGE_CYCLE_KEYCODE) {
    controller.cycleLanguage();
  }
 else   if (keyCode == KEY_CENTER_LETS_HOPE) {
    ChatterboxWidget widget=activeFrame();
    if (widget != null) {
    }
    indexWhenKeyPressed=keyDownSelectedWidget;
  }
}",0.7762962962962963
145347,"/** 
 * Resolves a binding to a particular question data element
 * @param binding The binding representing a particular question
 * @param group 
 * @return A QuestionDataElement corresponding to the bindingprovided. Null if none exists in this tree.
 */
private QuestionDataElement resolveReference(IDataReference binding,QuestionDataGroup group){
  Enumeration en=group.getChildren().elements();
  while (en.hasMoreElements()) {
    TreeElement dme=(TreeElement)en.nextElement();
    if (!dme.isLeaf()) {
      return resolveReference(binding,(QuestionDataGroup)dme);
    }
 else {
      if ((dme instanceof QuestionDataElement) && ((QuestionDataElement)dme).matchesReference(binding)) {
        return (QuestionDataElement)dme;
      }
    }
  }
  return null;
}","/** 
 * Resolves a binding to a particular question data element
 * @param binding The binding representing a particular question
 * @param group 
 * @return A QuestionDataElement corresponding to the bindingprovided. Null if none exists in this tree.
 */
private QuestionDataElement resolveReference(IDataReference binding,QuestionDataGroup group){
  QuestionDataElement target=null;
  Enumeration en=group.getChildren().elements();
  while (target == null && en.hasMoreElements()) {
    TreeElement dme=(TreeElement)en.nextElement();
    if (!dme.isLeaf()) {
      target=resolveReference(binding,(QuestionDataGroup)dme);
    }
 else {
      if ((dme instanceof QuestionDataElement) && ((QuestionDataElement)dme).matchesReference(binding)) {
        target=(QuestionDataElement)dme;
      }
    }
  }
  return target;
}",0.9426591052299936
145348,"private void jumpToQuestion(int questionIndex){
  if (questionIndex != INDEX_NOT_SET && !model.isRelevant(questionIndex))   throw new IllegalStateException();
  if (questionIndex > activeQuestionIndex) {
    if (activeQuestionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(activeQuestionIndex)).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
    }
    for (int i=activeQuestionIndex + 1; i <= questionIndex; i++) {
      putQuestion(i,i == questionIndex);
    }
  }
 else   if (questionIndex <= activeQuestionIndex) {
    for (int i=activeQuestionIndex; i > questionIndex; i--) {
      removeFrame(i);
    }
    if (questionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndex)).setViewState(ChatterboxWidget.VIEW_EXPANDED);
    }
  }
  if (activeQuestionIndex != questionIndex) {
    activeQuestionIndex=questionIndex;
    ChatterboxWidget widget=(ChatterboxWidget)get(activeQuestionIndex);
    focus(widget);
    progressBar.setValue(questionIndex);
  }
  babysitStyles();
}","private void jumpToQuestion(int questionIndex){
  if (questionIndex != INDEX_NOT_SET && !model.isRelevant(questionIndex))   throw new IllegalStateException();
  if (questionIndex > activeQuestionIndex) {
    if (activeQuestionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(activeQuestionIndex)).setViewState(ChatterboxWidget.VIEW_COLLAPSED);
    }
    for (int i=activeQuestionIndex + 1; i <= questionIndex; i++) {
      putQuestion(i,i == questionIndex);
    }
  }
 else   if (questionIndex <= activeQuestionIndex) {
    for (int i=activeQuestionIndex; i > questionIndex; i--) {
      removeFrame(i);
    }
    if (questionIndex != INDEX_NOT_SET) {
      ((ChatterboxWidget)get(questionIndex)).setViewState(ChatterboxWidget.VIEW_EXPANDED);
    }
  }
  if (activeQuestionIndex != questionIndex) {
    activeQuestionIndex=questionIndex;
    ChatterboxWidget widget=(ChatterboxWidget)get(activeQuestionIndex);
    this.focus(widget,true);
    progressBar.setValue(questionIndex);
  }
  babysitStyles();
  Timer t=new Timer();
  t.schedule(new TimerTask(){
    public void run(){
      UiAccess.emitKeyPress(-2);
      UiAccess.emitKeyPress(DOWN);
      UiAccess.emitKeyRelease(DOWN);
    }
  }
,50);
}",0.9062075215224288
145349,"public void setFocus(){
  if (viewState == VIEW_EXPANDED) {
    if (expandedStyle.focus())     repaint();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","public void setFocus(){
  if (viewState == VIEW_EXPANDED) {
    if (expandedStyle.focus()) {
      repaint();
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9728260869565216
145350,"public void setSelectItemIDs(SimpleOrderedHashtable selectItemIDs,Vector selectItemsLocalizable,Localizer localizer){
  this.selectItemIDs=selectItemIDs;
  this.selectItemsLocalizable=selectItemsLocalizable;
  if (localizer != null) {
    localizeSelectMap(localizer);
  }
}","public void setSelectItemIDs(SimpleOrderedHashtable selectItemIDs,Vector selectItemsLocalizable,Localizer localizer){
  this.selectItemIDs=selectItemIDs;
  this.selectItemsLocalizable=selectItemsLocalizable;
  if (selectItemIDs != null) {
    localizeSelectMap(localizer);
  }
}",0.960144927536232
145351,"public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  this.setId(ExternalizableHelper.readUTF(in));
  this.setDataType(in.readInt());
  this.setPreload(ExternalizableHelper.readUTF(in));
  this.setPreloadParams(ExternalizableHelper.readUTF(in));
  this.setRequired(in.readBoolean());
  condition=new Condition();
  ExternalizableHelper.readExternalizable(in,condition);
  String factoryName=in.readUTF();
  FormDefRMSUtility fdrms=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
  PrototypeFactory factory=fdrms.getQuestionElementsFactory();
  ref=(IDataReference)factory.getNewInstance(factoryName);
  if (ref == null) {
    throw new UnavailableExternalizerException(""String_Node_Str"" + ""String_Node_Str"" + factoryName + ""String_Node_Str""+ ""String_Node_Str""+ this.getId());
  }
  ref.readExternal(in);
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  this.setId(ExternalizableHelper.readUTF(in));
  this.setDataType(in.readInt());
  this.setPreload(ExternalizableHelper.readUTF(in));
  this.setPreloadParams(ExternalizableHelper.readUTF(in));
  this.setRequired(in.readBoolean());
  condition=(Condition)ExternalizableHelper.readExternalizable(in,new Condition());
  String factoryName=in.readUTF();
  FormDefRMSUtility fdrms=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
  PrototypeFactory factory=fdrms.getQuestionElementsFactory();
  ref=(IDataReference)factory.getNewInstance(factoryName);
  if (ref == null) {
    throw new UnavailableExternalizerException(""String_Node_Str"" + ""String_Node_Str"" + factoryName + ""String_Node_Str""+ ""String_Node_Str""+ this.getId());
  }
  ref.readExternal(in);
}",0.9448897795591182
145352,"public void setLocalizer(Localizer l){
  if (this.localizer != null) {
    this.localizer.unregisterLocalizable(this);
  }
  this.localizer=l;
  this.localizer.registerLocalizable(this);
}","public void setLocalizer(Localizer l){
  if (this.localizer != null) {
    this.localizer.unregisterLocalizable(this);
  }
  this.localizer=l;
  if (this.localizer != null) {
    this.localizer.registerLocalizable(this);
  }
}",0.9082125603864736
145353,"/** 
 * Reads the form definition object from the supplied stream. Requires that the model has been set to a prototype of the model that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  if (!ExternalizableHelper.isEOF(dis)) {
    PrototypeFactory factory=new PrototypeFactory();
    factory.addNewPrototype(QuestionDef.class.getName(),QuestionDef.class);
    factory.addNewPrototype(GroupDef.class.getName(),GroupDef.class);
    setID(dis.readInt());
    setName(ExternalizableHelper.readUTF(dis));
    setChildren(ExternalizableHelper.readExternal(dis,factory));
    setBindings(ExternalizableHelper.readExternal(dis,new DataBinding().getClass()));
    String modelType=dis.readUTF();
    model=(IFormDataModel)modelFactory.getNewInstance(modelType);
    if (model == null) {
      throw new UnavailableExternalizerException(""String_Node_Str"" + ""String_Node_Str"");
    }
    model.setFormReferenceId(this.getID());
    model.readExternal(dis);
    Localizer l=new Localizer();
    ExternalizableHelper.readExternalizable(dis,l);
    setLocalizer(l);
  }
}","/** 
 * Reads the form definition object from the supplied stream. Requires that the model has been set to a prototype of the model that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  if (!ExternalizableHelper.isEOF(dis)) {
    PrototypeFactory factory=new PrototypeFactory();
    factory.addNewPrototype(QuestionDef.class.getName(),QuestionDef.class);
    factory.addNewPrototype(GroupDef.class.getName(),GroupDef.class);
    setID(dis.readInt());
    setName(ExternalizableHelper.readUTF(dis));
    setChildren(ExternalizableHelper.readExternal(dis,factory));
    setBindings(ExternalizableHelper.readExternal(dis,new DataBinding().getClass()));
    String modelType=dis.readUTF();
    model=(IFormDataModel)modelFactory.getNewInstance(modelType);
    if (model == null) {
      throw new UnavailableExternalizerException(""String_Node_Str"" + ""String_Node_Str"");
    }
    model.setFormReferenceId(this.getID());
    model.readExternal(dis);
    setLocalizer((Localizer)ExternalizableHelper.readExternalizable(dis,new Localizer()));
  }
}",0.9482041587901702
145354,"public static void readExternalizable(DataInputStream dis,Externalizable item) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  if (dis.readBoolean()) {
    item.readExternal(dis);
  }
}","public static Externalizable readExternalizable(DataInputStream dis,Externalizable item) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  if (dis.readBoolean()) {
    item.readExternal(dis);
  }
 else {
    item=null;
  }
  return item;
}",0.3955223880597014
145355,"/** 
 * Read the object from stream.
 */
public void readExternal(DataInputStream dis) throws IOException, IllegalAccessException, InstantiationException {
  if (!ExternalizableHelper.isEOF(dis)) {
    fallbackDefaultLocale=ExternalizableHelper.readBoolean(dis).booleanValue();
    fallbackDefaultForm=ExternalizableHelper.readBoolean(dis).booleanValue();
    localeData=ExternalizableHelper.readExternalSOH(dis);
    if (localeData == null)     localeData=new SimpleOrderedHashtable();
    setDefaultLocale(ExternalizableHelper.readUTF(dis));
    setLocale(ExternalizableHelper.readUTF(dis));
  }
}","/** 
 * Read the object from stream.
 */
public void readExternal(DataInputStream dis) throws IOException, IllegalAccessException, InstantiationException {
  if (!ExternalizableHelper.isEOF(dis)) {
    fallbackDefaultLocale=ExternalizableHelper.readBoolean(dis).booleanValue();
    fallbackDefaultForm=ExternalizableHelper.readBoolean(dis).booleanValue();
    localeData=ExternalizableHelper.readExternalCompoundSOH(dis);
    if (localeData == null)     localeData=new SimpleOrderedHashtable();
    setDefaultLocale(ExternalizableHelper.readUTF(dis));
    String currentLocale=ExternalizableHelper.readUTF(dis);
    if (currentLocale != null) {
      setLocale(currentLocale);
    }
  }
}",0.9246309246309248
145356,"/** 
 * Reads the form definition object from the supplied stream.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  if (!ExternalizableHelper.isEOF(dis)) {
    PrototypeFactory factory=new PrototypeFactory();
    factory.addNewPrototype(QuestionDef.class.getName(),QuestionDef.class);
    factory.addNewPrototype(GroupDef.class.getName(),GroupDef.class);
    setID(dis.readInt());
    setName(ExternalizableHelper.readUTF(dis));
    setChildren(ExternalizableHelper.readExternal(dis,factory));
    setBindings(ExternalizableHelper.readExternal(dis,new DataBinding().getClass()));
    Localizer l=new Localizer();
    l.readExternal(dis);
    setLocalizer(l);
  }
}","/** 
 * Reads the form definition object from the supplied stream.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  if (!ExternalizableHelper.isEOF(dis)) {
    PrototypeFactory factory=new PrototypeFactory();
    factory.addNewPrototype(QuestionDef.class.getName(),QuestionDef.class);
    factory.addNewPrototype(GroupDef.class.getName(),GroupDef.class);
    setID(dis.readInt());
    setName(ExternalizableHelper.readUTF(dis));
    setChildren(ExternalizableHelper.readExternal(dis,factory));
    setBindings(ExternalizableHelper.readExternal(dis,new DataBinding().getClass()));
    Localizer l=new Localizer();
    ExternalizableHelper.readExternalizable(dis,l);
    setLocalizer(l);
  }
}",0.965592572364828
145357,"private void workflow(IActivity lastActivity,String returnCode,Hashtable returnVals){
  if (stack.size() != 0) {
    IActivity activity=stack.pop();
    this.currentActivity=activity;
    activity.resume(context);
  }
 else {
    if (lastActivity == this.splashScreen) {
      currentActivity=formListActivity;
      this.formListActivity.start(context);
    }
    if (lastActivity == this.modelActivity) {
      if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
        Object returnVal=returnVals.get(ModelListActivity.returnKey);
        if (returnVal == ModelListActivity.CMD_MSGS) {
          TransportContext msgContext=new TransportContext(context);
          msgContext.setRequestedTask(TransportContext.MESSAGE_VIEW);
          currentActivity=formTransport;
          formTransport.start(msgContext);
        }
      }
      if (returnCode == Constants.ACTIVITY_COMPLETE) {
        Object returnVal=returnVals.get(ModelListActivity.returnKey);
        if (returnVal == ModelListActivity.CMD_EDIT) {
          FormDef form=(FormDef)returnVals.get(""String_Node_Str"");
          FormData data=(FormData)returnVals.get(""String_Node_Str"");
          FormEntryContext newContext=new FormEntryContext(context);
          newContext.setFormID(form.getId());
          newContext.setInstanceID(data.getRecordId());
          currentActivity=this.modelActivity;
          this.modelActivity.start(newContext);
        }
        if (returnVal == ModelListActivity.CMD_SEND) {
          FormData data=(FormData)returnVals.get(""String_Node_Str"");
          formTransport.setData(data);
          TransportContext msgContext=new TransportContext(context);
          msgContext.setRequestedTask(TransportContext.SEND_DATA);
          currentActivity=formTransport;
          formTransport.start(msgContext);
        }
      }
    }
    if (lastActivity == this.formTransport) {
      if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
        String returnVal=(String)returnVals.get(FormTransportActivity.RETURN_KEY);
        if (returnVal == FormTransportActivity.VIEW_MODELS) {
          currentActivity=this.modelActivity;
          this.modelActivity.start(context);
        }
      }
      if (returnCode == Constants.ACTIVITY_COMPLETE) {
      }
    }
    if (lastActivity == this.formListActivity) {
      if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
        String returnVal=(String)returnVals.get(FormListActivity.COMMAND_KEY);
        if (returnVal == Commands.CMD_VIEW_DATA) {
          currentActivity=this.modelActivity;
          this.modelActivity.start(context);
        }
        if (returnVal == Commands.CMD_SETTINGS) {
          currentActivity=this.propertyActivity;
          this.propertyActivity.start(context);
        }
        if (returnVal == Commands.CMD_SELECT_XFORM) {
          FormEntryContext newContext=new FormEntryContext(context);
          newContext.setFormID(((Integer)returnVals.get(FormListActivity.FORM_ID_KEY)).intValue());
          currentActivity=this.entryActivity;
          this.entryActivity.start(newContext);
        }
      }
      if (returnCode == Constants.ACTIVITY_COMPLETE) {
      }
    }
    if (currentActivity == lastActivity) {
      currentActivity=formListActivity;
      formListActivity.start(context);
    }
  }
}","private void workflow(IActivity lastActivity,String returnCode,Hashtable returnVals){
  if (stack.size() != 0) {
    IActivity activity=stack.pop();
    this.currentActivity=activity;
    activity.resume(context);
  }
 else {
    if (lastActivity == this.splashScreen) {
      currentActivity=formListActivity;
      this.formListActivity.start(context);
    }
    if (lastActivity == this.modelActivity) {
      if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
        Object returnVal=returnVals.get(ModelListActivity.returnKey);
        if (returnVal == ModelListActivity.CMD_MSGS) {
          TransportContext msgContext=new TransportContext(context);
          msgContext.setRequestedTask(TransportContext.MESSAGE_VIEW);
          currentActivity=formTransport;
          formTransport.start(msgContext);
        }
      }
      if (returnCode == Constants.ACTIVITY_COMPLETE) {
        Object returnVal=returnVals.get(ModelListActivity.returnKey);
        if (returnVal == ModelListActivity.CMD_EDIT) {
          FormDef form=(FormDef)returnVals.get(""String_Node_Str"");
          FormData data=(FormData)returnVals.get(""String_Node_Str"");
          FormEntryContext newContext=new FormEntryContext(context);
          newContext.setFormID(form.getID());
          newContext.setInstanceID(data.getRecordId());
          currentActivity=this.modelActivity;
          this.modelActivity.start(newContext);
        }
        if (returnVal == ModelListActivity.CMD_SEND) {
          FormData data=(FormData)returnVals.get(""String_Node_Str"");
          formTransport.setData(data);
          TransportContext msgContext=new TransportContext(context);
          msgContext.setRequestedTask(TransportContext.SEND_DATA);
          currentActivity=formTransport;
          formTransport.start(msgContext);
        }
      }
    }
    if (lastActivity == this.formTransport) {
      if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
        String returnVal=(String)returnVals.get(FormTransportActivity.RETURN_KEY);
        if (returnVal == FormTransportActivity.VIEW_MODELS) {
          currentActivity=this.modelActivity;
          this.modelActivity.start(context);
        }
      }
      if (returnCode == Constants.ACTIVITY_COMPLETE) {
      }
    }
    if (lastActivity == this.formListActivity) {
      if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
        String returnVal=(String)returnVals.get(FormListActivity.COMMAND_KEY);
        if (returnVal == Commands.CMD_VIEW_DATA) {
          currentActivity=this.modelActivity;
          this.modelActivity.start(context);
        }
        if (returnVal == Commands.CMD_SETTINGS) {
          currentActivity=this.propertyActivity;
          this.propertyActivity.start(context);
        }
        if (returnVal == Commands.CMD_SELECT_XFORM) {
          FormEntryContext newContext=new FormEntryContext(context);
          newContext.setFormID(((Integer)returnVals.get(FormListActivity.FORM_ID_KEY)).intValue());
          currentActivity=this.entryActivity;
          this.entryActivity.start(newContext);
        }
      }
      if (returnCode == Constants.ACTIVITY_COMPLETE) {
      }
    }
    if (currentActivity == lastActivity) {
      currentActivity=formListActivity;
      formListActivity.start(context);
    }
  }
}",0.9996972449288526
145358,"public void accept(IDataModelVisitor visitor){
  visitor.visit(this);
  if (root != null) {
    if (visitor.getClass() == ITreeVisitor.class) {
      root.accept((ITreeVisitor)visitor);
    }
  }
}","public void accept(IDataModelVisitor visitor){
  visitor.visit(this);
  if (root != null) {
    if (visitor instanceof ITreeVisitor) {
      root.accept((ITreeVisitor)visitor);
    }
  }
}",0.9246753246753248
145359,"public void start(Context context){
  FormDef theForm=null;
  if (context.getClass() == FormEntryContext.class) {
    this.context=(FormEntryContext)context;
    FormDefRMSUtility utility=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
    theForm=new FormDef();
    try {
      utility.retrieveFromRMS(this.context.getFormID(),theForm);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    UnavailableExternalizerException uee) {
      e.printStackTrace();
    }
  }
  if (theForm != null) {
    model=new FormEntryModel(theForm);
    controller=new FormEntryController(model,this);
    view=new Chatterbox(""String_Node_Str"",model,controller);
    controller.setView(view);
  }
 else {
    displayError(LOAD_ERROR);
  }
}","public void start(Context context){
  FormDef theForm=null;
  if (context.getClass() == FormEntryContext.class) {
    this.context=(FormEntryContext)context;
    FormDefRMSUtility utility=(FormDefRMSUtility)JavaRosaServiceProvider.instance().getStorageManager().getRMSStorageProvider().getUtility(FormDefRMSUtility.getUtilityName());
    theForm=new FormDef();
    try {
      utility.retrieveFromRMS(this.context.getFormID(),theForm);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    UnavailableExternalizerException uee) {
      uee.printStackTrace();
    }
  }
  if (theForm != null) {
    model=new FormEntryModel(theForm);
    controller=new FormEntryController(model,this);
    view=new Chatterbox(""String_Node_Str"",model,controller);
    controller.setView(view);
  }
 else {
    displayError(LOAD_ERROR);
  }
}",0.9989909182643796
145360,"private static void parseInstance(FormDef f,Element e){
  int numChildElements=0;
  for (int i=0; i < e.getChildCount(); i++) {
    if (e.getType(i) == Node.ELEMENT) {
      numChildElements++;
    }
  }
  if (numChildElements > 1) {
    throw new XFormParseException(""String_Node_Str"");
  }
  TreeElement root=parseInstanceNodes(e,""String_Node_Str"").getRoot();
  DataModelTree instanceModel=new DataModelTree(root);
  f.setDataModel(instanceModel);
}","private static void parseInstance(FormDef f,Element e){
  Element dataElement=null;
  for (int i=0; i < e.getChildCount(); i++) {
    if (e.getType(i) == Node.ELEMENT) {
      if (dataElement != null) {
        throw new XFormParseException(""String_Node_Str"");
      }
 else {
        dataElement=e.getElement(i);
      }
    }
  }
  TreeElement root=parseInstanceNodes(dataElement,""String_Node_Str"").getRoot();
  DataModelTree instanceModel=new DataModelTree(root);
  f.setDataModel(instanceModel);
}",0.7899159663865546
145361,"private static TreeElement parseInstanceNodes(Element node,String currentPath){
  int childNum=node.getChildCount();
  TreeElement element;
  if (childNum == 0) {
    XPathReference reference=new XPathReference(currentPath + node.getName());
    element=new QuestionDataElement(node.getName(),reference);
  }
 else {
    element=new QuestionDataGroup(node.getName());
    for (int i=0; i < childNum; ++i) {
      String newPath=currentPath + node.getName() + ""String_Node_Str"";
      ((QuestionDataGroup)element).addChild(parseInstanceNodes((Element)node.getChild(i),newPath));
    }
  }
  return element;
}","private static TreeElement parseInstanceNodes(Element node,String currentPath){
  int childNum=node.getChildCount();
  TreeElement element;
  if (childNum == 0) {
    XPathReference reference=new XPathReference(currentPath + node.getName());
    element=new QuestionDataElement(node.getName(),reference);
  }
 else {
    element=new QuestionDataGroup(node.getName());
    for (int i=0; i < childNum; ++i) {
      if (node.getType(i) != Node.ELEMENT)       continue;
      String newPath=currentPath + node.getName() + ""String_Node_Str"";
      ((QuestionDataGroup)element).addChild(parseInstanceNodes(node.getElement(i),newPath));
    }
  }
  return element;
}",0.924170616113744
145362,"public FormDef(){
}","public FormDef(){
  setChildren(null);
}",0.6440677966101694
145363,"/** 
 * Creates a new QuestionDataGroup.
 * @param name The name of this TreeElement
 */
public QuestionDataGroup(String name){
  this();
  this.name=name;
}","/** 
 * Creates a new QuestionDataGroup.
 * @param name The name of this TreeElement
 */
public QuestionDataGroup(String name){
  this();
  this.name=name;
  this.children=new Vector();
}",0.9127906976744186
145364,"private void workflow(IModule lastModule,String cmd,Hashtable returnVals){
  if (stack.size() != 0) {
    stack.pop().resume(context);
  }
  if (lastModule == this.splashScreen) {
    currentModule=formTransport;
    this.formTransport.start(context);
  }
}","private void workflow(IModule lastModule,String returnCode,Hashtable returnVals){
  if (stack.size() != 0) {
    stack.pop().resume(context);
  }
  if (lastModule == this.splashScreen) {
    currentModule=modelModule;
    this.modelModule.start(context);
  }
  if (lastModule == this.modelModule) {
    if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
      Object returnVal=returnVals.get(ModelListModule.returnKey);
      if (returnVal == ModelListModule.CMD_MSGS) {
        TransportContext msgContext=new TransportContext(context);
        msgContext.setRequestedView(TransportContext.MESSAGE_VIEW);
        currentModule=formTransport;
        formTransport.start(msgContext);
      }
    }
    if (returnCode == Constants.ACTIVITY_COMPLETE) {
      Object returnVal=returnVals.get(ModelListModule.returnKey);
      if (returnVal == ModelListModule.CMD_EDIT) {
        FormDef form=(FormDef)returnVals.get(""String_Node_Str"");
        FormData data=(FormData)returnVals.get(""String_Node_Str"");
      }
      if (returnVal == ModelListModule.CMD_SEND) {
        FormData data=(FormData)returnVals.get(""String_Node_Str"");
      }
    }
  }
  if (lastModule == this.formTransport) {
    if (returnCode == Constants.ACTIVITY_NEEDS_RESOLUTION) {
    }
    if (returnCode == Constants.ACTIVITY_COMPLETE) {
    }
  }
}",0.2949367088607595
145365,"public void resume(Context globalContext){
  createView();
}","public void resume(Context globalContext){
  createView(currentView);
}",0.916030534351145
145366,"public void start(Context context){
  this.context=context;
  createView();
}","public void start(Context context){
  this.context=new TransportContext(context);
  createView(this.context.getRequestedView());
}",0.7439613526570048
145367,"public void halt(){
}","public void halt(){
  currentView=TransportContext.MAIN_MENU;
}",0.5
145368,"public void createView(){
  transportMethods=new Vector();
  Enumeration availableMethods=JavaRosaPlatform.instance().getTransportManager().getTransportMethods();
  Vector menuItems=new Vector();
  while (availableMethods.hasMoreElements()) {
    TransportMethod method=(TransportMethod)availableMethods.nextElement();
    menuItems.addElement(""String_Node_Str"" + method.getName());
    transportMethods.addElement(new Integer(method.getId()));
  }
  String[] elements=new String[]{""String_Node_Str"",""String_Node_Str""};
  menuItems.copyInto(elements);
  mainMenu=new List(""String_Node_Str"",List.IMPLICIT,elements,null);
  mainMenu.addCommand(CMD_BACK);
  mainMenu.addCommand(CMD_DEBUG);
  mainMenu.setSelectCommand(CMD_OK);
  mainMenu.setCommandListener(this);
  messageList=new List(""String_Node_Str"",List.IMPLICIT);
  messageList.addCommand(CMD_BACK);
  messageList.addCommand(CMD_DETAILS);
  messageList.addCommand(CMD_DELETEMSG);
  messageList.setSelectCommand(CMD_DETAILS);
  messageList.setCommandListener(this);
  loggingTextBox=new TextBox(""String_Node_Str"",null,1000,TextField.UNEDITABLE);
  loggingTextBox.addCommand(CMD_BACK);
  messageDetailTextBox=new TextBox(""String_Node_Str"",null,250,TextField.UNEDITABLE);
  messageDetailTextBox.addCommand(CMD_BACK);
  messageDetailTextBox.addCommand(CMD_SEND);
  messageDetailTextBox.setCommandListener(this);
  shell.setDisplay(this,mainMenu);
  System.out.println(this.data);
}","public void createView(String view){
  transportMethods=new Vector();
  Enumeration availableMethods=JavaRosaPlatform.instance().getTransportManager().getTransportMethods();
  Vector menuItems=new Vector();
  while (availableMethods.hasMoreElements()) {
    TransportMethod method=(TransportMethod)availableMethods.nextElement();
    menuItems.addElement(""String_Node_Str"" + method.getName());
    transportMethods.addElement(new Integer(method.getId()));
  }
  String[] elements=new String[]{""String_Node_Str"",""String_Node_Str""};
  menuItems.copyInto(elements);
  mainMenu=new List(""String_Node_Str"",List.IMPLICIT,elements,null);
  mainMenu.addCommand(CMD_BACK);
  mainMenu.addCommand(CMD_DEBUG);
  mainMenu.setSelectCommand(CMD_OK);
  mainMenu.setCommandListener(this);
  messageList=new List(""String_Node_Str"",List.IMPLICIT);
  messageList.addCommand(CMD_BACK);
  messageList.addCommand(CMD_DETAILS);
  messageList.addCommand(CMD_DELETEMSG);
  messageList.setSelectCommand(CMD_DETAILS);
  messageList.setCommandListener(this);
  loggingTextBox=new TextBox(""String_Node_Str"",null,1000,TextField.UNEDITABLE);
  loggingTextBox.addCommand(CMD_BACK);
  messageDetailTextBox=new TextBox(""String_Node_Str"",null,250,TextField.UNEDITABLE);
  messageDetailTextBox.addCommand(CMD_BACK);
  messageDetailTextBox.addCommand(CMD_SEND);
  messageDetailTextBox.setCommandListener(this);
  if (view.equals(TransportContext.MAIN_MENU)) {
    shell.setDisplay(this,mainMenu);
  }
 else   if (view.equals(TransportContext.MESSAGE_VIEW)) {
    shell.setDisplay(this,messageList);
  }
}",0.9275942609275942
145369,"public void commandAction(Command c,Displayable d){
  System.out.println(""String_Node_Str"");
  if (c == CMD_EDIT) {
    try {
      if (this.getSelectedIndex() == -1) {
      }
 else {
        FormDataMetaData data=(FormDataMetaData)modelIDs.elementAt(this.getSelectedIndex());
        System.out.println(data.toString());
        FormDef selectedForm=new FormDef();
        System.out.println(""String_Node_Str"" + data.getFormIdReference());
        this.formDefRMSUtility.retrieveFromRMS(data.getFormIdReference(),selectedForm);
        System.out.println(""String_Node_Str"" + data.getRecordId());
        FormData formData=new FormData();
        this.formDataRMSUtility.retrieveFromRMS(data.getRecordId(),formData);
        selectedForm.setName(this.formDefRMSUtility.getName(data.getFormIdReference()));
        Hashtable formEditArgs=new Hashtable();
        formEditArgs.put(returnKey,CMD_EDIT);
        formEditArgs.put(""String_Node_Str"",selectedForm);
        formEditArgs.put(""String_Node_Str"",formData);
        mainShell.returnFromModule(this,Constants.ACTIVITY_COMPLETE,formEditArgs);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else   if (c == CMD_SEND) {
    if (this.getSelectedIndex() != -1) {
      FormDataMetaData data=(FormDataMetaData)modelIDs.elementAt(this.getSelectedIndex());
      FormData model=new FormData();
      try {
        this.formDataRMSUtility.retrieveFromRMS(data.getRecordId(),model);
        model.setRecordId(data.getRecordId());
      }
 catch (      IOException e) {
        javax.microedition.lcdui.Alert a=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.ERROR);
        mainShell.setDisplay(this,a);
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        javax.microedition.lcdui.Alert a=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.ERROR);
        mainShell.setDisplay(this,a);
        e.printStackTrace();
      }
catch (      InstantiationException e) {
        javax.microedition.lcdui.Alert a=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.ERROR);
        mainShell.setDisplay(this,a);
        e.printStackTrace();
      }
      Hashtable formSendArgs=new Hashtable();
      formSendArgs.put(returnKey,CMD_SEND);
      formSendArgs.put(""String_Node_Str"",model);
      mainShell.returnFromModule(this,Constants.ACTIVITY_COMPLETE,formSendArgs);
    }
  }
 else   if (c == CMD_EMPTY) {
    this.formDataRMSUtility.tempEmpty();
    createView();
  }
 else   if (c == CMD_BACK) {
    mainShell.returnFromModule(this,Constants.ACTIVITY_COMPLETE,null);
  }
 else   if (c == CMD_DELETE) {
    FormDataMetaData data=(FormDataMetaData)modelIDs.elementAt(this.getSelectedIndex());
    formDataRMSUtility.deleteRecord(data.getRecordId());
    this.createView();
  }
 else   if (c == CMD_MSGS) {
    Hashtable returnArgs=new Hashtable();
    returnArgs.put(returnKey,CMD_MSGS);
  }
 else   if (c == CMD_REFRESH) {
    this.createView();
  }
}","public void commandAction(Command c,Displayable d){
  System.out.println(""String_Node_Str"");
  if (c == CMD_EDIT) {
    try {
      if (this.getSelectedIndex() == -1) {
      }
 else {
        FormDataMetaData data=(FormDataMetaData)modelIDs.elementAt(this.getSelectedIndex());
        System.out.println(data.toString());
        FormDef selectedForm=new FormDef();
        System.out.println(""String_Node_Str"" + data.getFormIdReference());
        this.formDefRMSUtility.retrieveFromRMS(data.getFormIdReference(),selectedForm);
        System.out.println(""String_Node_Str"" + data.getRecordId());
        FormData formData=new FormData();
        this.formDataRMSUtility.retrieveFromRMS(data.getRecordId(),formData);
        selectedForm.setName(this.formDefRMSUtility.getName(data.getFormIdReference()));
        Hashtable formEditArgs=new Hashtable();
        formEditArgs.put(returnKey,CMD_EDIT);
        formEditArgs.put(""String_Node_Str"",selectedForm);
        formEditArgs.put(""String_Node_Str"",formData);
        mainShell.returnFromModule(this,Constants.ACTIVITY_COMPLETE,formEditArgs);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else   if (c == CMD_SEND) {
    if (this.getSelectedIndex() != -1) {
      FormDataMetaData data=(FormDataMetaData)modelIDs.elementAt(this.getSelectedIndex());
      FormData model=new FormData();
      try {
        this.formDataRMSUtility.retrieveFromRMS(data.getRecordId(),model);
        model.setRecordId(data.getRecordId());
      }
 catch (      IOException e) {
        javax.microedition.lcdui.Alert a=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.ERROR);
        mainShell.setDisplay(this,a);
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        javax.microedition.lcdui.Alert a=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.ERROR);
        mainShell.setDisplay(this,a);
        e.printStackTrace();
      }
catch (      InstantiationException e) {
        javax.microedition.lcdui.Alert a=new javax.microedition.lcdui.Alert(""String_Node_Str"",""String_Node_Str"",null,AlertType.ERROR);
        mainShell.setDisplay(this,a);
        e.printStackTrace();
      }
      Hashtable formSendArgs=new Hashtable();
      formSendArgs.put(returnKey,CMD_SEND);
      formSendArgs.put(""String_Node_Str"",model);
      mainShell.returnFromModule(this,Constants.ACTIVITY_COMPLETE,formSendArgs);
    }
  }
 else   if (c == CMD_EMPTY) {
    this.formDataRMSUtility.tempEmpty();
    createView();
  }
 else   if (c == CMD_BACK) {
    mainShell.returnFromModule(this,Constants.ACTIVITY_COMPLETE,null);
  }
 else   if (c == CMD_DELETE) {
    FormDataMetaData data=(FormDataMetaData)modelIDs.elementAt(this.getSelectedIndex());
    formDataRMSUtility.deleteRecord(data.getRecordId());
    this.createView();
  }
 else   if (c == CMD_MSGS) {
    Hashtable returnArgs=new Hashtable();
    returnArgs.put(returnKey,CMD_MSGS);
    mainShell.returnFromModule(this,Constants.ACTIVITY_NEEDS_RESOLUTION,returnArgs);
  }
 else   if (c == CMD_REFRESH) {
    this.createView();
  }
}",0.986323411102172
145370,"/** 
 * Draws the Small (read only) Version of the frame onto a Screen
 * @param target the Screen to which the Frame will be Added
 */
public void drawSmallFormOnScreen(ChatScreen target){
  questiontext=new StringItem(null,questiontext.getText());
  questiontext.setStyle(StyleSheet.getStyle(""String_Node_Str""));
  target.append(questiontext);
  questionResponse=new StringItem(null,questionValueToString(thePrompt));
  target.append(questionResponse);
  displayedItems=new Item[]{questiontext,questionResponse};
}","/** 
 * Draws the Small (read only) Version of the frame onto a Screen
 * @param target the Screen to which the Frame will be Added
 */
public void drawSmallFormOnScreen(ChatScreen target){
  questiontext=new StringItem(null,questiontext.getText());
  target.append(questiontext);
  questionResponse=new StringItem(null,questionValueToString(thePrompt));
  target.append(questionResponse);
  displayedItems=new Item[]{questiontext,questionResponse};
}",0.9327817993795244
145371,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isHeaderRefreshing && isHeaderShowing) {
  }
  if (lockScrollWhileRefreshing && (state == State.REFRESHING || getAnimation() != null && !getAnimation().hasEnded())) {
    return true;
  }
switch (event.getAction()) {
case MotionEvent.ACTION_UP:
    if (isPull(event) && (state == State.RELEASE_TO_REFRESH || getFirstVisiblePosition() == 0)) {
switch (state) {
case RELEASE_TO_REFRESH:
        setState(State.REFRESHING);
      bounceBackHeader();
    break;
case PULL_TO_REFRESH:
  resetHeader();
break;
default :
break;
}
}
break;
case MotionEvent.ACTION_MOVE:
if (isPull(event)) {
float y=event.getY();
float diff=y - previousY;
if (diff > 0) diff/=PULL_RESISTANCE;
previousY=y;
int newHeaderPadding=Math.max(Math.round(headerPadding + diff),-header.getHeight());
if (newHeaderPadding != headerPadding && state != State.REFRESHING) {
setHeaderPadding(newHeaderPadding);
if (state == State.PULL_TO_REFRESH && headerPadding > 0) {
setState(State.RELEASE_TO_REFRESH);
image.clearAnimation();
image.startAnimation(flipAnimation);
}
 else if (state == State.RELEASE_TO_REFRESH && headerPadding < 0) {
setState(State.PULL_TO_REFRESH);
image.clearAnimation();
image.startAnimation(reverseFlipAnimation);
}
}
}
break;
}
return super.onTouchEvent(event);
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isHeaderRefreshing && isHeaderShowing) {
  }
  if (lockScrollWhileRefreshing && (state == State.REFRESHING || getAnimation() != null && !getAnimation().hasEnded())) {
    return true;
  }
switch (event.getAction()) {
case MotionEvent.ACTION_UP:
    if (couldRefresh() && (state == State.RELEASE_TO_REFRESH || getFirstVisiblePosition() == 0)) {
switch (state) {
case RELEASE_TO_REFRESH:
        setState(State.REFRESHING);
      bounceBackHeader();
    break;
case PULL_TO_REFRESH:
  resetHeader();
break;
default :
break;
}
}
break;
case MotionEvent.ACTION_MOVE:
if (couldRefresh()) {
float y=event.getY();
float diff=y - previousY;
if (diff > 0) diff/=PULL_RESISTANCE;
previousY=y;
int newHeaderPadding=Math.max(Math.round(headerPadding + diff),-header.getHeight());
if (newHeaderPadding != headerPadding && state != State.REFRESHING) {
setHeaderPadding(newHeaderPadding);
if (state == State.PULL_TO_REFRESH && headerPadding > 0) {
setState(State.RELEASE_TO_REFRESH);
image.clearAnimation();
image.startAnimation(flipAnimation);
}
 else if (state == State.RELEASE_TO_REFRESH && headerPadding < 0) {
setState(State.PULL_TO_REFRESH);
image.clearAnimation();
image.startAnimation(reverseFlipAnimation);
}
}
}
break;
}
return super.onTouchEvent(event);
}",0.9809741248097412
145372,"private void addDatas(){
  int j=i + 30;
  for (; i < j; ++i) {
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"");
    builder.append(i);
    builder.append(""String_Node_Str"");
    char[] chars=new char[mRand.nextInt(500)];
    Arrays.fill(chars,'1');
    builder.append(chars);
    mAdapter.add(builder.toString());
  }
}","private void addDatas(){
  int j=i + 15;
  for (; i < j; ++i) {
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"");
    builder.append(i);
    builder.append(""String_Node_Str"");
    char[] chars=new char[mRand.nextInt(500)];
    Arrays.fill(chars,'1');
    builder.append(chars);
    mAdapter.add(builder.toString());
  }
}",0.9943977591036416
145373,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isHeaderRefreshing && isHeaderShowing) {
  }
  if (lockScrollWhileRefreshing && (state == State.REFRESHING || getAnimation() != null && !getAnimation().hasEnded())) {
    return true;
  }
switch (event.getAction()) {
case MotionEvent.ACTION_UP:
    if (couldRefresh() && (state == State.RELEASE_TO_REFRESH || getFirstVisiblePosition() == 0)) {
switch (state) {
case RELEASE_TO_REFRESH:
        setState(State.REFRESHING);
      bounceBackHeader();
    break;
case PULL_TO_REFRESH:
  resetHeader();
break;
default :
break;
}
}
break;
case MotionEvent.ACTION_MOVE:
if (couldRefresh()) {
float y=event.getY();
float diff=y - previousY;
if (diff > 0) diff/=PULL_RESISTANCE;
previousY=y;
int newHeaderPadding=Math.max(Math.round(headerPadding + diff),-header.getHeight());
if (newHeaderPadding != headerPadding && state != State.REFRESHING) {
setHeaderPadding(newHeaderPadding);
if (state == State.PULL_TO_REFRESH && headerPadding > 0) {
setState(State.RELEASE_TO_REFRESH);
image.clearAnimation();
image.startAnimation(flipAnimation);
}
 else if (state == State.RELEASE_TO_REFRESH && headerPadding < 0) {
setState(State.PULL_TO_REFRESH);
image.clearAnimation();
image.startAnimation(reverseFlipAnimation);
}
}
}
break;
}
return super.onTouchEvent(event);
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isHeaderRefreshing && isHeaderShowing) {
  }
  if (lockScrollWhileRefreshing && (state == State.REFRESHING || getAnimation() != null && !getAnimation().hasEnded())) {
    return true;
  }
switch (event.getAction()) {
case MotionEvent.ACTION_UP:
    if (couldRefresh() && (state == State.RELEASE_TO_REFRESH || getFirstVisiblePosition() == 0)) {
switch (state) {
case RELEASE_TO_REFRESH:
        setState(State.REFRESHING);
      bounceBackHeader();
    break;
case PULL_TO_REFRESH:
  resetHeader();
break;
default :
break;
}
}
break;
case MotionEvent.ACTION_MOVE:
if (couldRefresh()) {
float y=event.getY();
float diff=y - previousY;
if (diff > 0) diff/=PULL_RESISTANCE;
previousY=y;
int newHeaderPadding=Math.max(Math.round(headerPadding + diff),-header.getHeight());
if (newHeaderPadding != headerPadding && state != State.REFRESHING) {
setHeaderPadding(newHeaderPadding);
if (hackGetScrollY() < 50) {
if (state == State.PULL_TO_REFRESH && headerPadding > 0) {
setState(State.RELEASE_TO_REFRESH);
image.clearAnimation();
image.startAnimation(flipAnimation);
}
 else if (state == State.RELEASE_TO_REFRESH && headerPadding < 0) {
setState(State.PULL_TO_REFRESH);
image.clearAnimation();
image.startAnimation(reverseFlipAnimation);
}
}
}
}
break;
}
return super.onTouchEvent(event);
}",0.9883502442690718
145374,"public void loadRegions() throws IOException {
  if (!Files.isDirectory(path))   throw new InvalidSaveFormatException(""String_Node_Str"");
  try (DirectoryStream<Path> ds=Files.newDirectoryStream(path)){
    Pattern fileNamePattern=Pattern.compile(""String_Node_Str"");
    for (    Path regionPath : ds) {
      Matcher fileNameMatcher=fileNamePattern.matcher(regionPath.getFileName().toString());
      if (!fileNameMatcher.matches())       continue;
      System.out.println(""String_Node_Str"" + regionPath);
      int regionX=Integer.parseInt(fileNameMatcher.group(1));
      int regionZ=Integer.parseInt(fileNameMatcher.group(2));
      try (AnvilReader reader=new AnvilReader(regionPath)){
        int i=0;
        while (reader.hasMore()) {
          try (InputStream chunkStream=reader.readChunkColumn()){
            try {
              ChunkColumn column=ChunkColumn.load(chunkStream,regionX,regionZ);
              i++;
              System.out.print(""String_Node_Str"");
              items.addAll(column.getDroppedItems());
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
         }
      }
     }
  }
 }","public void loadRegions() throws IOException {
  if (!Files.isDirectory(path))   throw new InvalidSaveFormatException(""String_Node_Str"");
  try (DirectoryStream<Path> ds=Files.newDirectoryStream(path)){
    Pattern fileNamePattern=Pattern.compile(""String_Node_Str"");
    for (    Path regionPath : ds) {
      Matcher fileNameMatcher=fileNamePattern.matcher(regionPath.getFileName().toString());
      if (!fileNameMatcher.matches())       continue;
      System.out.println(""String_Node_Str"" + regionPath);
      int regionX=Integer.parseInt(fileNameMatcher.group(1));
      int regionZ=Integer.parseInt(fileNameMatcher.group(2));
      try (AnvilReader reader=new AnvilReader(regionPath)){
        while (reader.hasMore()) {
          try (InputStream chunkStream=reader.readChunkColumn()){
            ChunkColumn column=ChunkColumn.load(chunkStream,regionX,regionZ);
            items.addAll(column.getDroppedItems());
          }
         }
      }
     }
  }
 }",0.8678187762727697
145375,"public World(Path path) throws IOException {
  this.path=path;
  overworld=new Dimension(path.resolve(""String_Node_Str""));
  Path p=path.resolve(""String_Node_Str"").resolve(""String_Node_Str"");
  if (Files.isDirectory(p))   nether=new Dimension(p);
  p=path.resolve(""String_Node_Str"").resolve(""String_Node_Str"");
  if (Files.isDirectory(p))   end=new Dimension(p);
}","public World(Path path) throws IOException {
  overworld=new Dimension(path.resolve(""String_Node_Str""));
  Path p=path.resolve(""String_Node_Str"").resolve(""String_Node_Str"");
  if (Files.isDirectory(p))   nether=new Dimension(p);
  p=path.resolve(""String_Node_Str"").resolve(""String_Node_Str"");
  if (Files.isDirectory(p))   end=new Dimension(p);
}",0.9746478873239436
145376,"protected void addTableFieldsToSelectResults(SqlQuery aQuery,Table aFieldsSource) throws Exception {
  FieldsResult fieldsRes=getTablyFields(aQuery.getDatasourceName(),aFieldsSource.getWholeTableName());
  if (fieldsRes != null && fieldsRes.fields != null) {
    TypesResolver resolver=basesProxy.getMetadataCache(aQuery.getDatasourceName()).getDatasourceSqlDriver().getTypesResolver();
    fieldsRes.fields.toCollection().stream().forEach((    Field field) -> {
      Field copied=new Field();
      copied.assignFrom(field);
      if (fieldsRes.fromRealTable) {
        JdbcField jField=(JdbcField)field;
        copied.setType(resolver.toApplicationType(jField.getJdbcType(),jField.getType()));
        if (jField.getSchemaName() != null && !jField.getSchemaName().isEmpty()) {
          copied.setTableName(jField.getSchemaName() + ""String_Node_Str"" + copied.getTableName());
        }
      }
      if (aliasesToTableNames && aFieldsSource.getAlias() != null && !aFieldsSource.getAlias().getName().isEmpty()) {
        copied.setTableName(aFieldsSource.getAlias().getName());
      }
      aQuery.getFields().add(copied);
    }
);
  }
}","protected void addTableFieldsToSelectResults(SqlQuery aQuery,Table aFieldsSource) throws Exception {
  FieldsResult fieldsRes=getTablyFields(aQuery.getDatasourceName(),aFieldsSource.getWholeTableName());
  if (fieldsRes != null && fieldsRes.fields != null) {
    MetadataCache mdCache=basesProxy.getMetadataCache(aQuery.getDatasourceName());
    if (mdCache != null) {
      TypesResolver resolver=mdCache.getDatasourceSqlDriver().getTypesResolver();
      fieldsRes.fields.toCollection().stream().forEach((      Field field) -> {
        Field copied=new Field();
        copied.assignFrom(field);
        if (fieldsRes.fromRealTable) {
          JdbcField jField=(JdbcField)field;
          copied.setType(resolver.toApplicationType(jField.getJdbcType(),jField.getType()));
          if (jField.getSchemaName() != null && !jField.getSchemaName().isEmpty()) {
            copied.setTableName(jField.getSchemaName() + ""String_Node_Str"" + copied.getTableName());
          }
        }
        if (aliasesToTableNames && aFieldsSource.getAlias() != null && !aFieldsSource.getAlias().getName().isEmpty()) {
          copied.setTableName(aFieldsSource.getAlias().getName());
        }
        aQuery.getFields().add(copied);
      }
);
    }
  }
}",0.9387583892617448
145377,"@ScriptFunction public ModelWidget getView(){
  return ((ModelColumn)getTableColumn()).getView();
}","@Undesignable @ScriptFunction public ModelWidget getView(){
  return ((ModelColumn)getTableColumn()).getView();
}",0.9339622641509434
145378,"@ScriptFunction public ModelWidget getEditor(){
  return ((ModelColumn)getTableColumn()).getEditor();
}","@Undesignable @ScriptFunction public ModelWidget getEditor(){
  return ((ModelColumn)getTableColumn()).getEditor();
}",0.9363636363636364
145379,"protected void bind(){
  if (data != null && field != null && !field.isEmpty() && Scripts.isInitialized()) {
    boundToData=Scripts.getSpace().listen(data,field,new AbstractJSObject(){
      @Override public Object call(      Object thiz,      Object... args){
        rebind();
        return null;
      }
    }
);
    Object oData=ModelWidget.getPathData(data,field);
    setJsValue(oData);
    boundToValue=(    PropertyChangeEvent evt) -> {
      if (!settingValueFromJs) {
        settingValueToJs=true;
        try {
          ModelWidget.setPathData(data,field,Scripts.getSpace().toJs(evt.getNewValue()));
        }
  finally {
          settingValueToJs=false;
        }
      }
    }
;
    addValueChangeListener(boundToValue);
  }
}","protected void bind(){
  if (data != null && field != null && !field.isEmpty() && Scripts.isInitialized()) {
    boundToData=Scripts.getSpace().listen(data,field,new AbstractJSObject(){
      @Override public Object call(      Object thiz,      Object... args){
        rebind();
        return null;
      }
    }
);
    Object oData=ModelWidget.getPathData(data,field);
    setJsValue(oData);
    boundToValue=(    PropertyChangeEvent evt) -> {
      if (!settingValueFromJs) {
        settingValueToJs=true;
        try {
          ModelWidget.setPathData(data,field,Scripts.getSpace().toJs(evt.getNewValue()));
        }
  finally {
          settingValueToJs=false;
        }
      }
    }
;
    addValueChangeListener(boundToValue);
  }
 else {
    setJsValue(null);
  }
}",0.97634691195795
145380,"@Override public void focusLost(FocusEvent e){
  checkValueChanged();
}","@Override public void focusLost(FocusEvent e){
  String text=getText();
  if (text != null && !""String_Node_Str"".equals(text)) {
    nullValue=false;
  }
  checkValueChanged();
}",0.570281124497992
145381,"public static Path lookupPlatypusJs() throws URISyntaxException {
  URL platypusURL=Thread.currentThread().getContextClassLoader().getResource(Scripts.PLATYPUS_JS_FILENAME);
  Path apiPath=Paths.get(platypusURL.toURI());
  apiPath=apiPath.getParent();
  return apiPath;
}","public static Path lookupPlatypusJs() throws URISyntaxException {
  URL platypusURL=Thread.currentThread().getContextClassLoader().getResource(Scripts.INTERNALS_JS_FILENAME);
  Path apiPath=Paths.get(platypusURL.toURI());
  apiPath=apiPath.getParent();
  return apiPath;
}",0.9760589318600368
145382,"public static void init(Path aAbsoluteApiPath,boolean aGlobalAPI) throws MalformedURLException {
  globalAPI=aGlobalAPI;
  platypusJsUrl=aAbsoluteApiPath.resolve(PLATYPUS_JS_FILENAME).toUri().toURL();
  internalsUrl=aAbsoluteApiPath.resolve(INTERNALS_JS_FILENAME).toUri().toURL();
  absoluteApiPath=aAbsoluteApiPath;
}","public static void init(Path aAbsoluteApiPath,boolean aGlobalAPI) throws MalformedURLException {
  globalAPI=aGlobalAPI;
  internalsUrl=aAbsoluteApiPath.resolve(INTERNALS_JS_FILENAME).toUri().toURL();
  absoluteApiPath=aAbsoluteApiPath;
}",0.7482014388489209
145383,"public static String lookupCallerJsFile(){
  String calledFromFile=null;
  try {
    throw new Exception(""String_Node_Str"");
  }
 catch (  Exception ex) {
    StackTraceElement[] stackFrames=ex.getStackTrace();
    String firstFileName=extractFileName(stackFrames[0]);
    if (firstFileName != null) {
      for (int frameIdx=1; frameIdx < stackFrames.length; frameIdx++) {
        String fileName=extractFileName(stackFrames[frameIdx]);
        if (fileName != null && !fileName.equals(firstFileName)) {
          calledFromFile=fileName;
          int lastQuestionIndex=calledFromFile.lastIndexOf('?');
          return calledFromFile.substring(0,lastQuestionIndex);
        }
      }
    }
  }
  return calledFromFile;
}","public static String lookupCallerJsFile(){
  String calledFromFile=null;
  try {
    throw new Exception(""String_Node_Str"");
  }
 catch (  Exception ex) {
    StackTraceElement[] stackFrames=ex.getStackTrace();
    String firstFileName=extractFileName(stackFrames[0]);
    if (firstFileName != null) {
      for (int frameIdx=1; frameIdx < stackFrames.length; frameIdx++) {
        String fileName=extractFileName(stackFrames[frameIdx]);
        if (fileName != null && !fileName.equals(firstFileName)) {
          calledFromFile=fileName;
          int lastQuestionIndex=calledFromFile.lastIndexOf('?');
          return lastQuestionIndex != -1 ? calledFromFile.substring(0,lastQuestionIndex) : calledFromFile;
        }
      }
    }
  }
  return calledFromFile;
}",0.9711215580926796
145384,"private void validate(final String aDatasourceName,final List<Change> aLog,Consumer<Void> onSuccess,Consumer<Exception> onFailure,Scripts.Space aSpace){
  List<CallPoint> toBeCalled=new ArrayList<>();
  validators.keySet().stream().forEach((validatorName) -> {
    Collection<String> datasourcesUnderControl=validators.get(validatorName);
    if (((datasourcesUnderControl == null || datasourcesUnderControl.isEmpty()) && aDatasourceName == null) || (datasourcesUnderControl != null && datasourcesUnderControl.contains(aDatasourceName))) {
      try {
        JSObject module=createModule(validatorName,aSpace);
        if (module != null) {
          Object oValidate=module.getMember(""String_Node_Str"");
          if (oValidate instanceof JSObject) {
            JSObject validateFunction=(JSObject)oValidate;
            toBeCalled.add(new CallPoint(module,validateFunction));
          }
 else {
            Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
          }
        }
 else {
          Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
        }
      }
 catch (      Exception ex) {
        Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
);
  if (onSuccess != null) {
    if (toBeCalled.isEmpty()) {
      onSuccess.accept(null);
    }
 else {
      ValidateProcess process=new ValidateProcess(toBeCalled.size(),onSuccess,onFailure);
      toBeCalled.stream().forEach((v) -> {
        v.function.call(v.module,new Object[]{aSpace.toJs(aLog.toArray()),aDatasourceName,new AbstractJSObject(){
          @Override public Object call(          final Object thiz,          final Object... args){
            process.complete(null);
            return null;
          }
        }
,new AbstractJSObject(){
          @Override public Object call(          final Object thiz,          final Object... args){
            if (args.length > 0) {
              if (args[0] instanceof Exception) {
                process.complete((Exception)args[0]);
              }
 else {
                process.complete(new Exception(String.valueOf(aSpace.toJava(args[0]))));
              }
            }
 else {
              process.complete(new Exception(""String_Node_Str""));
            }
            return null;
          }
        }
});
      }
);
    }
  }
 else {
    toBeCalled.stream().forEach((v) -> {
      v.function.call(v.module,new Object[]{aSpace.toJs(aLog.toArray()),aDatasourceName});
    }
);
  }
}","private void validate(final String aDatasourceName,final List<Change> aLog,Consumer<Void> onSuccess,Consumer<Exception> onFailure,Scripts.Space aSpace){
  List<CallPoint> toBeCalled=new ArrayList<>();
  validators.keySet().stream().forEach((validatorName) -> {
    Collection<String> datasourcesUnderControl=validators.get(validatorName);
    if (((datasourcesUnderControl == null || datasourcesUnderControl.isEmpty()) && aDatasourceName == null) || (datasourcesUnderControl != null && datasourcesUnderControl.contains(aDatasourceName))) {
      try {
        JSObject module=createModule(validatorName,aSpace);
        if (module != null) {
          Object oValidate=module.getMember(""String_Node_Str"");
          if (oValidate instanceof JSObject) {
            JSObject validateFunction=(JSObject)oValidate;
            toBeCalled.add(new CallPoint(module,validateFunction));
          }
 else {
            Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
          }
        }
 else {
          Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
        }
      }
 catch (      Exception ex) {
        Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
);
  if (onSuccess != null) {
    if (toBeCalled.isEmpty()) {
      onSuccess.accept(null);
    }
 else {
      ValidateProcess process=new ValidateProcess(toBeCalled.size(),onSuccess,onFailure);
      toBeCalled.stream().forEach((v) -> {
        try {
          v.function.call(v.module,new Object[]{aSpace.toJs(aLog.toArray()),aDatasourceName,new AbstractJSObject(){
            @Override public Object call(            final Object thiz,            final Object... args){
              process.complete(null);
              return null;
            }
          }
,new AbstractJSObject(){
            @Override public Object call(            final Object thiz,            final Object... args){
              if (args.length > 0) {
                if (args[0] instanceof Exception) {
                  process.complete((Exception)args[0]);
                }
 else {
                  process.complete(new Exception(String.valueOf(aSpace.toJava(args[0]))));
                }
              }
 else {
                process.complete(new Exception(""String_Node_Str""));
              }
              return null;
            }
          }
});
        }
 catch (        ECMAException ex) {
          process.complete(ex);
        }
      }
);
    }
  }
 else {
    toBeCalled.stream().forEach((v) -> {
      v.function.call(v.module,new Object[]{aSpace.toJs(aLog.toArray()),aDatasourceName});
    }
);
  }
}",0.9722013523666416
145385,"@Override protected void projectClosed(){
  try {
    if (datasourceListener != null) {
      datasourceListener.remove();
    }
    GlobalPathRegistry.getDefault().unregister(PlatypusPathRecognizer.SOURCE_CP,new ClassPath[]{sourceCp});
    GlobalPathRegistry.getDefault().unregister(PlatypusPathRecognizer.API_CP,new ClassPath[]{apiCp});
    GlobalPathRegistry.getDefault().unregister(ClassPath.SOURCE,new ClassPath[]{sourceCp});
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.INFO,""String_Node_Str"");
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override protected void projectClosed(){
  try {
    if (datasourceListener != null) {
      datasourceListener.remove();
    }
    GlobalPathRegistry.getDefault().unregister(PlatypusPathRecognizer.API_CP,new ClassPath[]{apiCp});
    GlobalPathRegistry.getDefault().unregister(PlatypusPathRecognizer.SOURCE_CP,new ClassPath[]{sourceCp});
    GlobalPathRegistry.getDefault().unregister(ClassPath.SOURCE,new ClassPath[]{apiCp,sourceCp});
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.INFO,""String_Node_Str"",getDisplayName());
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.8100686498855835
145386,"@Override protected void projectOpened(){
  try {
    datasourceListener=DatabaseConnections.getDefault().addListener(this);
    sourceCp=ClassPath.getClassPath(getSrcRoot(),PlatypusPathRecognizer.SOURCE_CP);
    apiCp=ClassPath.getClassPath(getApiRoot(),PlatypusPathRecognizer.API_CP);
    GlobalPathRegistry.getDefault().register(PlatypusPathRecognizer.SOURCE_CP,new ClassPath[]{sourceCp});
    GlobalPathRegistry.getDefault().register(PlatypusPathRecognizer.API_CP,new ClassPath[]{apiCp});
    GlobalPathRegistry.getDefault().register(ClassPath.SOURCE,new ClassPath[]{sourceCp});
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.INFO,""String_Node_Str"");
    settings.load();
    startConnecting2db(getSettings().getDefaultDataSourceName());
    updatePlatypusRuntime();
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override protected void projectOpened(){
  try {
    datasourceListener=DatabaseConnections.getDefault().addListener(this);
    apiCp=ClassPath.getClassPath(getApiRoot(),PlatypusPathRecognizer.API_CP);
    sourceCp=ClassPath.getClassPath(getSrcRoot(),PlatypusPathRecognizer.SOURCE_CP);
    GlobalPathRegistry.getDefault().register(PlatypusPathRecognizer.API_CP,new ClassPath[]{apiCp});
    GlobalPathRegistry.getDefault().register(PlatypusPathRecognizer.SOURCE_CP,new ClassPath[]{sourceCp});
    GlobalPathRegistry.getDefault().register(ClassPath.SOURCE,new ClassPath[]{apiCp,sourceCp});
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.INFO,""String_Node_Str"",getDisplayName());
    settings.load();
    startConnecting2db(getSettings().getDefaultDataSourceName());
    updatePlatypusRuntime();
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusProjectImpl.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.8229561451001625
145387,"public static String getApiClasspath(String executablePath){
  StringBuilder classpathStr=new StringBuilder(executablePath);
  File apiDir=getPlatformApiDirectory();
  if (apiDir.exists() && apiDir.isDirectory()) {
    classpathStr.append(File.pathSeparator);
    classpathStr.append(apiDir);
  }
  return classpathStr.toString();
}","public static String getApiClasspath(PlatypusProject aProject,String executablePath){
  StringBuilder classpathStr=new StringBuilder(executablePath);
  File apiDir=FileUtil.toFile(aProject.getApiRoot());
  if (apiDir.exists() && apiDir.isDirectory()) {
    classpathStr.append(File.pathSeparator);
    classpathStr.append(apiDir);
  }
  return classpathStr.toString();
}",0.886039886039886
145388,"private static void start(PlatypusProject project,String appElementName,boolean debug) throws Exception {
}","private static void start(PlatypusProject aProject,String appElementName,boolean aDebug) throws Exception {
}",0.9722222222222222
145389,"public List<Change> getChangeLog(String aDatasourceName){
  List<Change> changeLog=changeLogs.get(aDatasourceName);
  if (changeLog == null) {
    changeLog=new ArrayList<>();
    changeLogs.put(aDatasourceName,changeLog);
  }
  return changeLog;
}","public List<Change> getChangeLog(String aDatasourceName){
  String datasourceName=aDatasourceName;
  if (datasourceName == null || datasourceName.isEmpty())   datasourceName=basesProxy.getDefaultDatasourceName();
  List<Change> changeLog=changeLogs.get(datasourceName);
  if (changeLog == null) {
    changeLog=new ArrayList<>();
    changeLogs.put(datasourceName,changeLog);
  }
  return changeLog;
}",0.7519260400616333
145390,"public ChangesSortProcess(List<Change> aChanges,Consumer<Map<String,List<Change>>> aOnSuccess,Consumer<Exception> aOnFailure){
  super();
  expectedChanges=aChanges;
  onSuccess=aOnSuccess;
  onFailure=aOnFailure;
}","public ChangesSortProcess(List<Change> aChanges,String aDefaultDatasource,Consumer<Map<String,List<Change>>> aOnSuccess,Consumer<Exception> aOnFailure){
  super();
  expectedChanges=aChanges;
  defaultDatasource=aDefaultDatasource;
  onSuccess=aOnSuccess;
  onFailure=aOnFailure;
}",0.8669354838709677
145391,"@Override public void handle(Session aSession,Consumer<CommitRequest.Response> onSuccess,Consumer<Exception> onFailure){
  try {
    DatabasesClient client=getServerCore().getDatabasesClient();
    List<Change> changes=ChangesJSONReader.read(getRequest().getChangesJson(),Scripts.getSpace());
    ChangesSortProcess process=new ChangesSortProcess(changes,(    Map<String,List<Change>> changeLogs) -> {
      try {
        client.commit(changeLogs,(        Integer aUpdated) -> {
          if (onSuccess != null) {
            onSuccess.accept(new CommitRequest.Response(aUpdated));
          }
        }
,onFailure);
      }
 catch (      Exception ex) {
        Logger.getLogger(CommitRequestHandler.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
,onFailure);
    if (changes.isEmpty()) {
      if (onSuccess != null) {
        onSuccess.accept(new CommitRequest.Response(0));
      }
    }
 else {
      changes.stream().forEach((change) -> {
        try {
          ((LocalQueriesProxy)serverCore.getQueries()).getQuery(change.entityName,Scripts.getSpace(),(          SqlQuery aQuery) -> {
            if (aQuery.isPublicAccess()) {
              AccessControlException aex=checkWritePrincipalPermission((PlatypusPrincipal)Scripts.getContext().getPrincipal(),change.entityName,aQuery.getWriteRoles());
              if (aex != null) {
                process.complete(null,null,aex,null);
              }
 else {
                process.complete(change,aQuery,null,null);
              }
            }
 else {
              process.complete(null,null,new AccessControlException(String.format(""String_Node_Str"",change.entityName)),null);
            }
          }
,(          Exception ex) -> {
            process.complete(null,null,null,ex);
          }
);
        }
 catch (        Exception ex) {
          Logger.getLogger(CommitRequestHandler.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
);
    }
  }
 catch (  Exception ex) {
    onFailure.accept(ex);
  }
}","@Override public void handle(Session aSession,Consumer<CommitRequest.Response> onSuccess,Consumer<Exception> onFailure){
  try {
    DatabasesClient client=getServerCore().getDatabasesClient();
    List<Change> changes=ChangesJSONReader.read(getRequest().getChangesJson(),Scripts.getSpace());
    ChangesSortProcess process=new ChangesSortProcess(changes,client.getDefaultDatasourceName(),(    Map<String,List<Change>> changeLogs) -> {
      try {
        client.commit(changeLogs,(        Integer aUpdated) -> {
          if (onSuccess != null) {
            onSuccess.accept(new CommitRequest.Response(aUpdated));
          }
        }
,onFailure);
      }
 catch (      Exception ex) {
        Logger.getLogger(CommitRequestHandler.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
,onFailure);
    if (changes.isEmpty()) {
      if (onSuccess != null) {
        onSuccess.accept(new CommitRequest.Response(0));
      }
    }
 else {
      changes.stream().forEach((change) -> {
        try {
          ((LocalQueriesProxy)serverCore.getQueries()).getQuery(change.entityName,Scripts.getSpace(),(          SqlQuery aQuery) -> {
            if (aQuery.isPublicAccess()) {
              AccessControlException aex=checkWritePrincipalPermission((PlatypusPrincipal)Scripts.getContext().getPrincipal(),change.entityName,aQuery.getWriteRoles());
              if (aex != null) {
                process.complete(null,null,aex,null);
              }
 else {
                process.complete(change,aQuery,null,null);
              }
            }
 else {
              process.complete(null,null,new AccessControlException(String.format(""String_Node_Str"",change.entityName)),null);
            }
          }
,(          Exception ex) -> {
            process.complete(null,null,null,ex);
          }
);
        }
 catch (        Exception ex) {
          Logger.getLogger(CommitRequestHandler.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
);
    }
  }
 catch (  Exception ex) {
    onFailure.accept(ex);
  }
}",0.991546494281452
145392,"public void complete(Change aChange,SqlQuery aQuery,AccessControlException accessDenied,Exception failed){
  if (aChange != null && aQuery != null) {
    try {
      SqlCompiledQuery entity=entities.get(aChange.entityName);
      if (entity == null) {
        entity=aQuery.compile();
        entities.put(aChange.entityName,entity);
      }
      if (aChange instanceof Command) {
        ((Command)aChange).command=entity.getSqlClause();
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(CommitRequestHandler.class.getName()).log(Level.SEVERE,null,ex);
      notRetrievedEntities.add(ex);
    }
  }
  if (accessDenied != null) {
    accessDeniedEntities.add(accessDenied);
  }
  if (failed != null) {
    notRetrievedEntities.add(failed);
  }
  if (++factCalls == expectedChanges.size()) {
    if (accessDeniedEntities.isEmpty() && notRetrievedEntities.isEmpty()) {
      if (onSuccess != null) {
        Map<String,List<Change>> changeLogs=new HashMap<>();
        expectedChanges.stream().forEach((        Change aSortedChange) -> {
          SqlCompiledQuery entity=entities.get(aSortedChange.entityName);
          List<Change> targetChangeLog=changeLogs.get(entity.getDatasourceName());
          if (targetChangeLog == null) {
            targetChangeLog=new ArrayList<>();
            changeLogs.put(entity.getDatasourceName(),targetChangeLog);
          }
          targetChangeLog.add(aSortedChange);
        }
);
        onSuccess.accept(changeLogs);
      }
    }
 else {
      if (onFailure != null) {
        onFailure.accept(new IllegalStateException(assembleErrors()));
      }
    }
  }
}","public void complete(Change aChange,SqlQuery aQuery,AccessControlException accessDenied,Exception failed){
  if (aChange != null && aQuery != null) {
    try {
      SqlCompiledQuery entity=entities.get(aChange.entityName);
      if (entity == null) {
        entity=aQuery.compile();
        entities.put(aChange.entityName,entity);
      }
      if (aChange instanceof Command) {
        ((Command)aChange).command=entity.getSqlClause();
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(CommitRequestHandler.class.getName()).log(Level.SEVERE,null,ex);
      notRetrievedEntities.add(ex);
    }
  }
  if (accessDenied != null) {
    accessDeniedEntities.add(accessDenied);
  }
  if (failed != null) {
    notRetrievedEntities.add(failed);
  }
  if (++factCalls == expectedChanges.size()) {
    if (accessDeniedEntities.isEmpty() && notRetrievedEntities.isEmpty()) {
      if (onSuccess != null) {
        Map<String,List<Change>> changeLogs=new HashMap<>();
        expectedChanges.stream().forEach((        Change aSortedChange) -> {
          SqlCompiledQuery entity=entities.get(aSortedChange.entityName);
          String datasourceName=entity.getDatasourceName();
          if (datasourceName == null || datasourceName.isEmpty()) {
            datasourceName=defaultDatasource;
          }
          List<Change> targetChangeLog=changeLogs.get(datasourceName);
          if (targetChangeLog == null) {
            targetChangeLog=new ArrayList<>();
            changeLogs.put(entity.getDatasourceName(),targetChangeLog);
          }
          targetChangeLog.add(aSortedChange);
        }
);
        onSuccess.accept(changeLogs);
      }
    }
 else {
      if (onFailure != null) {
        onFailure.accept(new IllegalStateException(assembleErrors()));
      }
    }
  }
}",0.9414519906323184
145393,"public static void initUsersSpace(DataSource aSource) throws Exception {
  try (Connection lconn=aSource.getConnection()){
    lconn.setAutoCommit(false);
    String dialect=dialectByConnection(lconn);
    SqlDriver driver=SQLUtils.getSqlDriver(dialect);
    driver.initializeUsersSpace(lconn);
  }
 }","public static void initUsersSpace(DataSource aSource) throws Exception {
  try (Connection lconn=aSource.getConnection()){
    boolean autoCommit=lconn.getAutoCommit();
    try {
      lconn.setAutoCommit(false);
      String dialect=dialectByConnection(lconn);
      SqlDriver driver=SQLUtils.getSqlDriver(dialect);
      driver.initializeUsersSpace(lconn);
    }
  finally {
      lconn.setAutoCommit(autoCommit);
    }
  }
 }",0.8065843621399177
145394,"public static void initVersioning(DataSource aSource) throws Exception {
  try (Connection lconn=aSource.getConnection()){
    lconn.setAutoCommit(false);
    String dialect=dialectByConnection(lconn);
    SqlDriver driver=SQLUtils.getSqlDriver(dialect);
    driver.initializeVersion(lconn);
  }
 }","public static void initVersioning(DataSource aSource) throws Exception {
  try (Connection lconn=aSource.getConnection()){
    boolean autoCommit=lconn.getAutoCommit();
    try {
      lconn.setAutoCommit(false);
      String dialect=dialectByConnection(lconn);
      SqlDriver driver=SQLUtils.getSqlDriver(dialect);
      driver.initializeVersion(lconn);
    }
  finally {
      lconn.setAutoCommit(autoCommit);
    }
  }
 }",0.8049792531120332
145395,"public ApplyResult(int rowsAffected,Connection connection){
  this.rowsAffected=rowsAffected;
  this.connection=connection;
}","public ApplyResult(int aRowsAffected,Connection aConnection,boolean aAutoCommit){
  super();
  rowsAffected=aRowsAffected;
  connection=aConnection;
  autoCommit=aAutoCommit;
}",0.7441860465116279
145396,"public int executeUpdate(SqlCompiledQuery aQuery,Consumer<Integer> onSuccess,Consumer<Exception> onFailure) throws Exception {
  Callable<Integer> doWork=() -> {
    int rowsAffected=0;
    DataSource dataSource=obtainDataSource(aQuery.getDatasourceName());
    if (dataSource != null) {
      try (Connection connection=dataSource.getConnection();PreparedStatement stmt=connection.prepareStatement(aQuery.getSqlClause())){
        connection.setAutoCommit(false);
        Parameters params=aQuery.getParameters();
        for (int i=1; i <= params.getParametersCount(); i++) {
          Parameter param=params.get(i);
          int jdbcType=JdbcFlowProvider.assumeJdbcType(param.getValue());
          JdbcFlowProvider.assign(param.getValue(),i,stmt,jdbcType,null);
        }
        try {
          rowsAffected+=stmt.executeUpdate();
          connection.commit();
        }
 catch (        SQLException ex) {
          connection.rollback();
          throw ex;
        }
      }
     }
    return rowsAffected;
  }
;
  if (onSuccess != null) {
    Scripts.Space space=Scripts.getSpace();
    startJdbcTask(() -> {
      try {
        Integer affected=doWork.call();
        space.process(() -> {
          onSuccess.accept(affected);
        }
);
      }
 catch (      Exception ex) {
        if (onFailure != null) {
          space.process(() -> {
            onFailure.accept(ex);
          }
);
        }
      }
    }
);
    return 0;
  }
 else {
    return doWork.call();
  }
}","public int executeUpdate(SqlCompiledQuery aQuery,Consumer<Integer> onSuccess,Consumer<Exception> onFailure) throws Exception {
  Callable<Integer> doWork=() -> {
    int rowsAffected=0;
    DataSource dataSource=obtainDataSource(aQuery.getDatasourceName());
    if (dataSource != null) {
      try (Connection connection=dataSource.getConnection()){
        boolean autoCommit=connection.getAutoCommit();
        try {
          connection.setAutoCommit(false);
          try (PreparedStatement stmt=connection.prepareStatement(aQuery.getSqlClause())){
            Parameters params=aQuery.getParameters();
            for (int i=1; i <= params.getParametersCount(); i++) {
              Parameter param=params.get(i);
              int jdbcType=JdbcFlowProvider.assumeJdbcType(param.getValue());
              JdbcFlowProvider.assign(param.getValue(),i,stmt,jdbcType,null);
            }
            try {
              rowsAffected+=stmt.executeUpdate();
              connection.commit();
            }
 catch (            SQLException ex) {
              connection.rollback();
              throw ex;
            }
          }
         }
  finally {
          connection.setAutoCommit(autoCommit);
        }
      }
     }
    return rowsAffected;
  }
;
  if (onSuccess != null) {
    Scripts.Space space=Scripts.getSpace();
    startJdbcTask(() -> {
      try {
        Integer affected=doWork.call();
        space.process(() -> {
          onSuccess.accept(affected);
        }
);
      }
 catch (      Exception ex) {
        if (onFailure != null) {
          space.process(() -> {
            onFailure.accept(ex);
          }
);
        }
      }
    }
);
    return 0;
  }
 else {
    return doWork.call();
  }
}",0.8895113600995954
145397,"public static void applyScript(String scriptText,Connection aConnection) throws Exception {
  String[] commandsTexts=scriptText.split(EAS_SQL_SCRIPT_DELIMITER);
  aConnection.setAutoCommit(false);
  if (commandsTexts != null) {
    try (Statement stmt=aConnection.createStatement()){
      for (int i=0; i < commandsTexts.length; i++) {
        try {
          String queryText=commandsTexts[i];
          queryText=queryText.replace('\r',' ');
          queryText=queryText.replace('\n',' ');
          if (!queryText.isEmpty()) {
            stmt.execute(queryText);
            aConnection.commit();
          }
        }
 catch (        Exception ex) {
          aConnection.rollback();
          Logger.getLogger(SqlDriver.class.getName()).log(Level.WARNING,""String_Node_Str"",ex.getMessage());
        }
      }
    }
   }
}","public static void applyScript(String scriptText,Connection aConnection) throws Exception {
  String[] commandsTexts=scriptText.split(EAS_SQL_SCRIPT_DELIMITER);
  if (commandsTexts != null) {
    boolean autoCommit=aConnection.getAutoCommit();
    try {
      aConnection.setAutoCommit(false);
      try (Statement stmt=aConnection.createStatement()){
        for (        String commandText : commandsTexts) {
          String queryText=commandText;
          queryText=queryText.replace('\r',' ');
          queryText=queryText.replace('\n',' ');
          if (!queryText.isEmpty()) {
            try {
              stmt.execute(queryText);
              aConnection.commit();
            }
 catch (            Exception ex) {
              aConnection.rollback();
              Logger.getLogger(SqlDriver.class.getName()).log(Level.WARNING,""String_Node_Str"",ex.getMessage());
            }
          }
        }
      }
     }
  finally {
      aConnection.setAutoCommit(autoCommit);
    }
  }
}",0.7319474835886215
145398,"@Override protected ApplyResult apply(final String aDatasourceName,final List<Change> aLog,Scripts.Space aSpace,Consumer<ApplyResult> onSuccess,Consumer<Exception> onFailure) throws Exception {
  if (onSuccess != null) {
    validate(aDatasourceName,aLog,(    Void v) -> {
      try {
        AppElementFiles files=indexer.nameToFiles(aDatasourceName);
        if (files != null && files.isModule()) {
          JSObject module=createModule(aDatasourceName,aSpace);
          if (module != null) {
            Object oApply=module.getMember(""String_Node_Str"");
            if (oApply instanceof JSObject && ((JSObject)oApply).isFunction()) {
              JSObject applyFunction=(JSObject)oApply;
              aSpace.toJava(applyFunction.call(module,new Object[]{aSpace.toJs(aLog.toArray()),new AbstractJSObject(){
                @Override public Object call(                final Object thiz,                final Object... args){
                  int affected=0;
                  if (args.length > 0) {
                    Object oAffected=aSpace.toJava(args[0]);
                    if (oAffected instanceof Number) {
                      affected=((Number)oAffected).intValue();
                    }
                  }
                  onSuccess.accept(new ApplyResult(affected,new DummySqlConnection()));
                  return null;
                }
              }
,new AbstractJSObject(){
                @Override public Object call(                final Object thiz,                final Object... args){
                  if (onFailure != null) {
                    if (args.length > 0) {
                      if (args[0] instanceof Exception) {
                        onFailure.accept((Exception)args[0]);
                      }
 else {
                        onFailure.accept(new Exception(String.valueOf(aSpace.toJava(args[0]))));
                      }
                    }
 else {
                      onFailure.accept(new Exception(""String_Node_Str""));
                    }
                  }
                  return null;
                }
              }
}));
            }
 else {
              onFailure.accept(new IllegalStateException(String.format(APPLY_MISSING_MSG,aDatasourceName)));
            }
          }
 else {
            onFailure.accept(new IllegalStateException(String.format(CANT_CREATE_MODULE_MSG,aDatasourceName)));
          }
        }
 else {
          super.apply(aDatasourceName,aLog,aSpace,onSuccess,onFailure);
        }
      }
 catch (      Exception ex) {
        onFailure.accept(ex);
      }
    }
,onFailure,aSpace);
    return null;
  }
 else {
    validate(aDatasourceName,aLog,null,null,aSpace);
    AppElementFiles files=indexer.nameToFiles(aDatasourceName);
    if (files != null && files.isModule()) {
      JSObject module=createModule(aDatasourceName,aSpace);
      if (module != null) {
        Object oApply=module.getMember(""String_Node_Str"");
        if (oApply instanceof JSObject && ((JSObject)oApply).isFunction()) {
          JSObject applyFunction=(JSObject)oApply;
          int affectedInModules=0;
          Object oAffected=aSpace.toJava(applyFunction.call(module,new Object[]{aSpace.toJs(aLog.toArray())}));
          if (oAffected instanceof Number) {
            affectedInModules=((Number)oAffected).intValue();
          }
          return new ApplyResult(affectedInModules,new DummySqlConnection());
        }
 else {
          throw new IllegalStateException(String.format(APPLY_MISSING_MSG,aDatasourceName));
        }
      }
 else {
        throw new IllegalStateException(String.format(CANT_CREATE_MODULE_MSG,aDatasourceName));
      }
    }
 else {
      return super.apply(aDatasourceName,aLog,null,null,null);
    }
  }
}","@Override protected ApplyResult apply(final String aDatasourceName,final List<Change> aLog,Scripts.Space aSpace,Consumer<ApplyResult> onSuccess,Consumer<Exception> onFailure) throws Exception {
  if (onSuccess != null) {
    validate(aDatasourceName,aLog,(    Void v) -> {
      try {
        AppElementFiles files=indexer.nameToFiles(aDatasourceName);
        if (files != null && files.isModule()) {
          JSObject module=createModule(aDatasourceName,aSpace);
          if (module != null) {
            Object oApply=module.getMember(""String_Node_Str"");
            if (oApply instanceof JSObject && ((JSObject)oApply).isFunction()) {
              JSObject applyFunction=(JSObject)oApply;
              aSpace.toJava(applyFunction.call(module,new Object[]{aSpace.toJs(aLog.toArray()),new AbstractJSObject(){
                @Override public Object call(                final Object thiz,                final Object... args){
                  int affected=0;
                  if (args.length > 0) {
                    Object oAffected=aSpace.toJava(args[0]);
                    if (oAffected instanceof Number) {
                      affected=((Number)oAffected).intValue();
                    }
                  }
                  onSuccess.accept(new ApplyResult(affected,new DummySqlConnection(),true));
                  return null;
                }
              }
,new AbstractJSObject(){
                @Override public Object call(                final Object thiz,                final Object... args){
                  if (onFailure != null) {
                    if (args.length > 0) {
                      if (args[0] instanceof Exception) {
                        onFailure.accept((Exception)args[0]);
                      }
 else {
                        onFailure.accept(new Exception(String.valueOf(aSpace.toJava(args[0]))));
                      }
                    }
 else {
                      onFailure.accept(new Exception(""String_Node_Str""));
                    }
                  }
                  return null;
                }
              }
}));
            }
 else {
              onFailure.accept(new IllegalStateException(String.format(APPLY_MISSING_MSG,aDatasourceName)));
            }
          }
 else {
            onFailure.accept(new IllegalStateException(String.format(CANT_CREATE_MODULE_MSG,aDatasourceName)));
          }
        }
 else {
          super.apply(aDatasourceName,aLog,aSpace,onSuccess,onFailure);
        }
      }
 catch (      Exception ex) {
        onFailure.accept(ex);
      }
    }
,onFailure,aSpace);
    return null;
  }
 else {
    validate(aDatasourceName,aLog,null,null,aSpace);
    AppElementFiles files=indexer.nameToFiles(aDatasourceName);
    if (files != null && files.isModule()) {
      JSObject module=createModule(aDatasourceName,aSpace);
      if (module != null) {
        Object oApply=module.getMember(""String_Node_Str"");
        if (oApply instanceof JSObject && ((JSObject)oApply).isFunction()) {
          JSObject applyFunction=(JSObject)oApply;
          int affectedInModules=0;
          Object oAffected=aSpace.toJava(applyFunction.call(module,new Object[]{aSpace.toJs(aLog.toArray())}));
          if (oAffected instanceof Number) {
            affectedInModules=((Number)oAffected).intValue();
          }
          return new ApplyResult(affectedInModules,new DummySqlConnection(),true);
        }
 else {
          throw new IllegalStateException(String.format(APPLY_MISSING_MSG,aDatasourceName));
        }
      }
 else {
        throw new IllegalStateException(String.format(CANT_CREATE_MODULE_MSG,aDatasourceName));
      }
    }
 else {
      return super.apply(aDatasourceName,aLog,null,null,null);
    }
  }
}",0.998661670235546
145399,"public void applyColumns(){
  for (int i=getDataColumnCount() - 1; i >= 0; i--) {
    removeColumn(i);
  }
  List<HeaderNode<JavaScriptObject>> leaves=new ArrayList<>();
  HeaderAnalyzer.achieveLeaves(header,leaves);
  for (  HeaderNode<JavaScriptObject> leaf : leaves) {
    Header<String> header=leaf.getHeader();
    ModelColumn column=(ModelColumn)leaf.getColumn();
    column.setGrid(this);
    addColumn(column,column.getWidth() + ""String_Node_Str"",header,null,!column.isVisible());
  }
  ThemedHeaderOrFooterBuilder<JavaScriptObject> leftBuilder=(ThemedHeaderOrFooterBuilder<JavaScriptObject>)headerLeft.getHeaderBuilder();
  ThemedHeaderOrFooterBuilder<JavaScriptObject> rightBuilder=(ThemedHeaderOrFooterBuilder<JavaScriptObject>)headerRight.getHeaderBuilder();
  List<HeaderNode<JavaScriptObject>> leftHeader=HeaderSplitter.split(header,0,frozenColumns);
  leftBuilder.setHeaderNodes(leftHeader);
  List<HeaderNode<JavaScriptObject>> rightHeader=HeaderSplitter.split(header,frozenColumns,getDataColumnCount());
  rightBuilder.setHeaderNodes(rightHeader);
  checkTreeIndicatorColumnDataProvider();
  redrawHeaders();
}","public void applyColumns(){
  clearColumns();
  List<HeaderNode<JavaScriptObject>> leaves=new ArrayList<>();
  HeaderAnalyzer.achieveLeaves(header,leaves);
  for (  HeaderNode<JavaScriptObject> leaf : leaves) {
    Header<String> header=leaf.getHeader();
    ModelColumn column=(ModelColumn)leaf.getColumn();
    column.setGrid(this);
    addColumn(column,column.getWidth() + ""String_Node_Str"",header,null,!column.isVisible());
  }
  ThemedHeaderOrFooterBuilder<JavaScriptObject> leftBuilder=(ThemedHeaderOrFooterBuilder<JavaScriptObject>)headerLeft.getHeaderBuilder();
  ThemedHeaderOrFooterBuilder<JavaScriptObject> rightBuilder=(ThemedHeaderOrFooterBuilder<JavaScriptObject>)headerRight.getHeaderBuilder();
  List<HeaderNode<JavaScriptObject>> leftHeader=HeaderSplitter.split(header,0,frozenColumns);
  leftBuilder.setHeaderNodes(leftHeader);
  List<HeaderNode<JavaScriptObject>> rightHeader=HeaderSplitter.split(header,frozenColumns,getDataColumnCount());
  rightBuilder.setHeaderNodes(rightHeader);
  checkTreeIndicatorColumnDataProvider();
  redrawHeaders();
}",0.9639762881896944
145400,"@Override public void setFrozenColumns(int aValue){
  if (aValue >= 0 && frozenColumns != aValue) {
    if (aValue >= 0) {
      frozenColumns=aValue;
      if (autoRefreshHeader && getDataColumnCount() > 0 && aValue <= getDataColumnCount()) {
        applyColumns();
      }
    }
  }
}","@Override public void setFrozenColumns(int aValue){
  if (aValue >= 0 && frozenColumns != aValue) {
    frozenColumns=aValue;
    if (autoRefreshHeader && getDataColumnCount() > 0 && aValue <= getDataColumnCount()) {
      applyColumns();
    }
  }
}",0.931098696461825
145401,"public static SqlDriver getSqlDriver(String aDialect){
  if (aDialect != null) {
    if (ClientConstants.SERVER_PROPERTY_ORACLE_DIALECT.equalsIgnoreCase(aDialect)) {
      return easOraDriver;
    }
 else     if (ClientConstants.SERVER_PROPERTY_MSSQL_DIALECT.equalsIgnoreCase(aDialect)) {
      return easMsSqlDriver;
    }
 else     if (ClientConstants.SERVER_PROPERTY_POSTGRE_DIALECT.equalsIgnoreCase(aDialect)) {
      return easPostgreSqlDriver;
    }
 else     if (ClientConstants.SERVER_PROPERTY_MYSQL_DIALECT.equalsIgnoreCase(aDialect)) {
      return easMySqlSqlDriver;
    }
 else     if (ClientConstants.SERVER_PROPERTY_DB2_DIALECT.equalsIgnoreCase(aDialect)) {
      return easDb2Driver;
    }
 else     if (ClientConstants.SERVER_PROPERTY_H2_DIALECT.equalsIgnoreCase(aDialect)) {
      return easH2Driver;
    }
  }
  return null;
}","public static SqlDriver getSqlDriver(String aDialect){
  if (ClientConstants.SERVER_PROPERTY_ORACLE_DIALECT.equalsIgnoreCase(aDialect)) {
    return new OracleSqlDriver();
  }
 else   if (ClientConstants.SERVER_PROPERTY_MSSQL_DIALECT.equalsIgnoreCase(aDialect)) {
    return new MsSqlSqlDriver();
  }
 else   if (ClientConstants.SERVER_PROPERTY_POSTGRE_DIALECT.equalsIgnoreCase(aDialect)) {
    return new PostgreSqlDriver();
  }
 else   if (ClientConstants.SERVER_PROPERTY_MYSQL_DIALECT.equalsIgnoreCase(aDialect)) {
    return new MySqlSqlDriver();
  }
 else   if (ClientConstants.SERVER_PROPERTY_DB2_DIALECT.equalsIgnoreCase(aDialect)) {
    return new Db2SqlDriver();
  }
 else   if (ClientConstants.SERVER_PROPERTY_H2_DIALECT.equalsIgnoreCase(aDialect)) {
    return new H2SqlDriver();
  }
  return null;
}",0.851963746223565
145402,"@Override public void onDrag(DragEvent event){
  if (DraggedColumn.instance != null && DraggedColumn.instance.isResize()) {
    event.stopPropagation();
    Element hostElement=Grid.this.getElement();
    int clientX=event.getNativeEvent().getClientX();
    int hostAbsX=hostElement.getAbsoluteLeft();
    int hostScrollX=hostElement.getScrollLeft();
    int docScrollX=hostElement.getOwnerDocument().getScrollLeft();
    int relativeX=clientX - hostAbsX + hostScrollX + docScrollX;
    ghostLine.getStyle().setLeft(relativeX,Style.Unit.PX);
    ghostLine.getStyle().setHeight(hostElement.getClientHeight(),Style.Unit.PX);
    if (ghostLine.getParentElement() != hostElement) {
      hostElement.appendChild(ghostLine);
    }
    int newWidth=event.getNativeEvent().getClientX() - DraggedColumn.instance.getCellElement().getAbsoluteLeft();
    if (newWidth > MINIMUM_COLUMN_WIDTH) {
      event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
    }
 else {
      event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
    }
  }
}","@Override public void onDrag(DragEvent event){
  if (DraggedColumn.instance != null && DraggedColumn.instance.isResize()) {
    event.stopPropagation();
  }
}",0.2552504038772213
145403,"public Grid(ProvidesKey<T> aKeyProvider){
  super();
  getElement().getStyle().setPosition(Style.Position.RELATIVE);
  getElement().appendChild(tdsStyleElement);
  getElement().appendChild(cellsStyleElement);
  getElement().appendChild(oddRowsStyleElement);
  getElement().appendChild(evenRowsStyleElement);
  setRowsHeight(25);
  hive=new FlexTable();
  setWidget(hive);
  hive.setCellPadding(0);
  hive.setCellSpacing(0);
  hive.setBorderWidth(0);
  headerLeft=new GridSection<T>(aKeyProvider);
  headerLeftContainer=new ScrollPanel(headerLeft);
  headerRight=new GridSection<T>(aKeyProvider);
  headerRightContainer=new ScrollPanel(headerRight);
  frozenLeft=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerLeft.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerLeft.redrawFooters();
    }
  }
;
  frozenLeftContainer=new ScrollPanel(frozenLeft);
  frozenRight=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerRight.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerRight.redrawFooters();
    }
  }
;
  frozenRightContainer=new ScrollPanel(frozenRight);
  scrollableLeft=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerLeft.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerLeft.redrawFooters();
    }
  }
;
  scrollableLeftContainer=new ScrollPanel(scrollableLeft);
  scrollableRight=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerRight.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerRight.redrawFooters();
    }
  }
;
  scrollableRightContainer=new ScrollPanel(scrollableRight);
  footerLeft=new GridSection<>(aKeyProvider);
  footerLeftContainer=new ScrollPanel(footerLeft);
  footerRight=new GridSection<>(aKeyProvider);
  footerRightContainer=new ScrollPanel(footerRight);
  for (  Widget w : new Widget[]{headerLeftContainer,headerRightContainer,frozenLeftContainer,frozenRightContainer,scrollableLeftContainer,footerLeftContainer,footerRightContainer}) {
    w.getElement().getStyle().setOverflow(Style.Overflow.HIDDEN);
  }
  for (  Widget w : new Widget[]{headerLeftContainer,headerRightContainer,frozenLeftContainer,frozenRightContainer,scrollableLeftContainer,scrollableRightContainer,footerLeftContainer,footerRightContainer}) {
    w.getElement().getFirstChildElement().getStyle().setPosition(Style.Position.ABSOLUTE);
  }
  headerLeft.setWidthPropagator(new GridWidthPropagator<T>(headerLeft){
    @Override public void changed(){
      super.changed();
      propagateHeaderWidth();
    }
  }
);
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerRight,frozenLeft,frozenRight,scrollableLeft,scrollableRight,footerLeft,footerRight}) {
    section.setWidthPropagator(new GridWidthPropagator<>(section));
  }
  headerLeft.setColumnsPartners(new AbstractCellTable[]{frozenLeft,scrollableLeft,footerLeft});
  headerRight.setColumnsPartners(new AbstractCellTable[]{frozenRight,scrollableRight,footerRight});
  ColumnsRemover leftColumnsRemover=new ColumnsRemoverAdapter<T>(headerLeft,frozenLeft,scrollableLeft,footerLeft);
  ColumnsRemover rightColumnsRemover=new ColumnsRemoverAdapter<T>(headerRight,frozenRight,scrollableRight,footerRight);
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerLeft,frozenLeft,scrollableLeft,footerLeft}) {
    section.setColumnsRemover(leftColumnsRemover);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerRight,frozenRight,scrollableRight,footerRight}) {
    section.setColumnsRemover(rightColumnsRemover);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{frozenLeft,scrollableLeft,footerLeft}) {
    section.setHeaderSource(headerLeft);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{frozenRight,scrollableRight,footerRight}) {
    section.setHeaderSource(headerRight);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerLeft,frozenLeft,scrollableLeft}) {
    section.setFooterSource(footerLeft);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerRight,frozenRight,scrollableRight}) {
    section.setFooterSource(footerRight);
  }
  hive.setWidget(0,0,headerLeftContainer);
  hive.setWidget(0,1,headerRightContainer);
  hive.setWidget(1,0,frozenLeftContainer);
  hive.setWidget(1,1,frozenRightContainer);
  hive.setWidget(2,0,scrollableLeftContainer);
  hive.setWidget(2,1,scrollableRightContainer);
  hive.setWidget(3,0,footerLeftContainer);
  hive.setWidget(3,1,footerRightContainer);
  for (  Widget w : new Widget[]{headerLeftContainer,headerRightContainer,frozenLeftContainer,frozenRightContainer,scrollableLeftContainer,scrollableRightContainer,footerLeftContainer,footerRightContainer}) {
    w.setWidth(""String_Node_Str"");
    w.setHeight(""String_Node_Str"");
  }
  for (  Widget w : new Widget[]{headerRightContainer,frozenRightContainer,footerRightContainer,scrollableLeftContainer}) {
    w.getElement().getParentElement().getStyle().setOverflow(Style.Overflow.HIDDEN);
  }
  hive.getElement().getStyle().setTableLayout(Style.TableLayout.FIXED);
  hive.getElement().getStyle().setPosition(Style.Position.RELATIVE);
  for (  CellTable<?> tbl : new CellTable<?>[]{headerLeft,headerRight,frozenLeft,frozenRight,scrollableLeft,scrollableRight,footerLeft,footerRight}) {
    tbl.setTableLayoutFixed(true);
  }
  headerLeft.setHeaderBuilder(new ThemedHeaderOrFooterBuilder<T>(headerLeft,false,this));
  headerLeft.setFooterBuilder(new NullHeaderOrFooterBuilder<T>(headerLeft,true));
  headerRight.setHeaderBuilder(new ThemedHeaderOrFooterBuilder<T>(headerRight,false,this));
  headerRight.setFooterBuilder(new NullHeaderOrFooterBuilder<T>(headerRight,true));
  footerLeft.setHeaderBuilder(new NullHeaderOrFooterBuilder<T>(footerLeft,false));
  footerLeft.setFooterBuilder(new ThemedHeaderOrFooterBuilder<T>(footerLeft,true));
  footerRight.setHeaderBuilder(new NullHeaderOrFooterBuilder<T>(footerRight,false));
  footerRight.setFooterBuilder(new ThemedHeaderOrFooterBuilder<T>(footerRight,true));
  for (  GridSection<?> section : new GridSection<?>[]{frozenLeft,frozenRight,scrollableLeft,scrollableRight}) {
    GridSection<T> gSection=(GridSection<T>)section;
    gSection.setHeaderBuilder(new NullHeaderOrFooterBuilder<T>(gSection,false));
    gSection.setFooterBuilder(new NullHeaderOrFooterBuilder<T>(gSection,true));
  }
  for (  GridSection<?> section : new GridSection<?>[]{headerLeft,headerRight,frozenLeft,frozenRight,scrollableLeft,scrollableRight,footerLeft,footerRight}) {
    section.setAutoHeaderRefreshDisabled(true);
  }
  for (  GridSection<?> section : new GridSection<?>[]{headerLeft,headerRight,footerLeft,footerRight}) {
    section.setAutoFooterRefreshDisabled(true);
  }
  installCellBuilders();
  scrollableRightContainer.addScrollHandler(new ScrollHandler(){
    @Override public void onScroll(    ScrollEvent event){
      int aimTop=scrollableRightContainer.getElement().getScrollTop();
      int aimLeft=scrollableRightContainer.getElement().getScrollLeft();
      scrollableLeftContainer.getElement().setScrollTop(aimTop);
      int factTopDelta=aimTop - scrollableLeftContainer.getElement().getScrollTop();
      if (factTopDelta > 0) {
        scrollableLeftContainer.getElement().getStyle().setBottom(factTopDelta,Style.Unit.PX);
      }
 else {
        scrollableLeftContainer.getElement().getStyle().clearBottom();
      }
      headerRightContainer.getElement().setScrollLeft(aimLeft);
      int factLeftDelta0=aimLeft - headerRightContainer.getElement().getScrollLeft();
      if (factLeftDelta0 > 0) {
        headerRightContainer.getElement().getStyle().setRight(factLeftDelta0,Style.Unit.PX);
      }
 else {
        headerRightContainer.getElement().getStyle().clearRight();
      }
      frozenRightContainer.getElement().setScrollLeft(aimLeft);
      int factLeftDelta1=aimLeft - frozenRightContainer.getElement().getScrollLeft();
      if (factLeftDelta1 > 0) {
        frozenRightContainer.getElement().getStyle().setRight(factLeftDelta1,Style.Unit.PX);
      }
 else {
        frozenRightContainer.getElement().getStyle().clearRight();
      }
      footerRightContainer.getElement().setScrollLeft(scrollableRightContainer.getElement().getScrollLeft());
      int factLeftDelta2=aimLeft - footerRightContainer.getElement().getScrollLeft();
      if (factLeftDelta2 > 0) {
        footerRightContainer.getElement().getStyle().setRight(factLeftDelta2,Style.Unit.PX);
      }
 else {
        footerRightContainer.getElement().getStyle().clearRight();
      }
    }
  }
);
  ghostLine=Document.get().createDivElement();
  ghostLine.addClassName(RULER_STYLE);
  ghostLine.getStyle().setPosition(Style.Position.ABSOLUTE);
  ghostLine.getStyle().setTop(0,Style.Unit.PX);
  ghostColumn=Document.get().createDivElement();
  ghostColumn.addClassName(COLUMN_PHANTOM_STYLE);
  ghostColumn.getStyle().setPosition(Style.Position.ABSOLUTE);
  ghostColumn.getStyle().setTop(0,Style.Unit.PX);
  addDomHandler(new DragEnterHandler(){
    @Override public void onDragEnter(    DragEnterEvent event){
      if (DraggedColumn.instance != null) {
        if (DraggedColumn.instance.isMove()) {
          event.preventDefault();
          event.stopPropagation();
          DraggedColumn<T> target=findTargetDraggedColumn(event.getNativeEvent().getEventTarget());
          if (target != null) {
            showColumnMoveDecorations(target);
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
 else {
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
        }
 else {
        }
      }
 else {
        event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
      }
    }
  }
,DragEnterEvent.getType());
  addDomHandler(new DragHandler(){
    @Override public void onDrag(    DragEvent event){
      if (DraggedColumn.instance != null && DraggedColumn.instance.isResize()) {
        event.stopPropagation();
        Element hostElement=Grid.this.getElement();
        int clientX=event.getNativeEvent().getClientX();
        int hostAbsX=hostElement.getAbsoluteLeft();
        int hostScrollX=hostElement.getScrollLeft();
        int docScrollX=hostElement.getOwnerDocument().getScrollLeft();
        int relativeX=clientX - hostAbsX + hostScrollX + docScrollX;
        ghostLine.getStyle().setLeft(relativeX,Style.Unit.PX);
        ghostLine.getStyle().setHeight(hostElement.getClientHeight(),Style.Unit.PX);
        if (ghostLine.getParentElement() != hostElement) {
          hostElement.appendChild(ghostLine);
        }
        int newWidth=event.getNativeEvent().getClientX() - DraggedColumn.instance.getCellElement().getAbsoluteLeft();
        if (newWidth > MINIMUM_COLUMN_WIDTH) {
          event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
        }
 else {
          event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
        }
      }
    }
  }
,DragEvent.getType());
  addDomHandler(new DragOverHandler(){
    @Override public void onDragOver(    DragOverEvent event){
      if (DraggedColumn.instance != null) {
        event.preventDefault();
        event.stopPropagation();
        if (DraggedColumn.instance.isMove()) {
          DraggedColumn<T> target=findTargetDraggedColumn(event.getNativeEvent().getEventTarget());
          if (target != null) {
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
 else {
            hideColumnDecorations();
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
        }
 else {
        }
      }
    }
  }
,DragOverEvent.getType());
  addDomHandler(new DragLeaveHandler(){
    @Override public void onDragLeave(    DragLeaveEvent event){
      if (DraggedColumn.instance != null) {
        event.stopPropagation();
        if (DraggedColumn.instance.isMove()) {
          if (event.getNativeEvent().getEventTarget() == (JavaScriptObject)Grid.this.getElement()) {
            hideColumnDecorations();
          }
        }
      }
    }
  }
,DragLeaveEvent.getType());
  addDomHandler(new DragEndHandler(){
    @Override public void onDragEnd(    DragEndEvent event){
      event.stopPropagation();
      hideColumnDecorations();
      DraggedColumn.instance=null;
    }
  }
,DragEndEvent.getType());
  addDomHandler(new DropHandler(){
    @Override public void onDrop(    DropEvent event){
      DraggedColumn<?> source=DraggedColumn.instance;
      DraggedColumn<T> target=targetDraggedColumn;
      hideColumnDecorations();
      DraggedColumn.instance=null;
      if (source != null) {
        event.preventDefault();
        event.stopPropagation();
        if (source.isMove()) {
          AbstractCellTable<T> sourceSection=(AbstractCellTable<T>)source.getTable();
          if (target != null) {
            Header<?> sourceHeader=source.getHeader();
            Header<?> targetHeader=target.getHeader();
            if (sourceHeader instanceof DraggableHeader<?> && targetHeader instanceof DraggableHeader<?>) {
              DraggableHeader<T> sourceDH=(DraggableHeader<T>)sourceHeader;
              DraggableHeader<T> targetDH=(DraggableHeader<T>)targetHeader;
              moveColumnNode(sourceDH.getHeaderNode(),targetDH.getHeaderNode());
            }
 else {
              int sourceIndex=source.getColumnIndex();
              int targetIndex=target.getColumnIndex();
              GridSection<T> targetSection=(GridSection<T>)target.getTable();
              boolean isSourceLeft=sourceSection == headerLeft || sourceSection == frozenLeft || sourceSection == scrollableLeft || sourceSection == footerLeft;
              boolean isTargetLeft=targetSection == headerLeft || targetSection == frozenLeft || targetSection == scrollableLeft || targetSection == footerLeft;
              sourceSection=isSourceLeft ? headerLeft : headerRight;
              targetSection=isTargetLeft ? headerLeft : headerRight;
              int generalSourceIndex=isSourceLeft ? sourceIndex : sourceIndex + frozenColumns;
              int generalTargetIndex=isTargetLeft ? targetIndex : targetIndex + frozenColumns;
              Header<?> header=sourceSection.getHeader(sourceIndex);
              if (header instanceof DraggableHeader) {
                ((DraggableHeader)header).setTable(targetSection);
              }
              if (generalSourceIndex != generalTargetIndex) {
                Column<T,?> column=(Column<T,?>)source.getColumn();
                if (!(header instanceof DraggableHeader) || ((DraggableHeader)header).isMoveable()) {
                  moveColumn(generalSourceIndex,generalTargetIndex);
                }
              }
            }
          }
        }
 else {
          Header<?> header=source.getHeader();
          if (!(header instanceof DraggableHeader) || ((DraggableHeader)header).isResizable()) {
            int newWidth=Math.max(event.getNativeEvent().getClientX() - source.getCellElement().getAbsoluteLeft(),MINIMUM_COLUMN_WIDTH);
            setColumnWidthFromHeaderDrag(((DraggedColumn<T>)source).getColumn(),newWidth,Style.Unit.PX);
          }
        }
      }
    }
  }
,DropEvent.getType());
  columnsChevron.getElement().getStyle().setPosition(Style.Position.ABSOLUTE);
  columnsChevron.getElement().addClassName(COLUMNS_CHEVRON_STYLE);
  getElement().appendChild(columnsChevron.getElement());
  columnsChevron.addDomHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      PopupPanel pp=new PopupPanel();
      pp.setAutoHideEnabled(true);
      pp.setAutoHideOnHistoryEventsEnabled(true);
      pp.setAnimationEnabled(true);
      MenuBar columnsMenu=new MenuBar(true);
      fillColumns(columnsMenu,headerLeft);
      fillColumns(columnsMenu,headerRight);
      pp.setWidget(columnsMenu);
      pp.setPopupPosition(columnsChevron.getAbsoluteLeft(),columnsChevron.getAbsoluteTop());
      pp.showRelativeTo(columnsChevron);
    }
    private void fillColumns(    MenuBar aTarget,    final GridSection<T> aSection){
      for (int i=0; i < aSection.getColumnCount(); i++) {
        Header<?> h=aSection.getHeader(i);
        final Column<T,?> column=aSection.getColumn(i);
        SafeHtml rendered;
        if (h.getValue() instanceof String) {
          String hVal=(String)h.getValue();
          rendered=hVal.startsWith(""String_Node_Str"") ? SafeHtmlUtils.fromTrustedString(hVal.substring(6)) : SafeHtmlUtils.fromString(hVal);
        }
 else {
          Cell.Context context=new Cell.Context(0,i,h.getKey());
          SafeHtmlBuilder sb=new SafeHtmlBuilder();
          h.render(context,sb);
          rendered=sb.toSafeHtml();
        }
        MenuItemCheckBox miCheck=new MenuItemCheckBox(!aSection.isColumnHidden(column),rendered.asString(),true);
        miCheck.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
          @Override public void onValueChange(          ValueChangeEvent<Boolean> event){
            if (Boolean.TRUE.equals(event.getValue())) {
              showColumn(column);
            }
 else {
              hideColumn(column);
            }
            Grid.this.onResize();
          }
        }
);
        aTarget.addItem(miCheck);
      }
    }
  }
,ClickEvent.getType());
  ColumnSortEvent.Handler sectionSortHandler=new ColumnSortEvent.Handler(){
    @Override public void onColumnSort(    ColumnSortEvent event){
      boolean isCtrlKey=((GridSection<?>)event.getSource()).isCtrlKey();
      boolean contains=false;
      int containsAt=-1;
      for (int i=0; i < sortList.size(); i++) {
        if (sortList.get(i).getColumn() == event.getColumn()) {
          contains=true;
          containsAt=i;
          break;
        }
      }
      if (!contains) {
        if (!isCtrlKey) {
          sortList.clear();
        }
        sortList.insert(sortList.size(),new ColumnSortList.ColumnSortInfo(event.getColumn(),true));
      }
 else {
        boolean wasAscending=sortList.get(containsAt).isAscending();
        if (!isCtrlKey) {
          sortList.clear();
          if (wasAscending) {
            sortList.push(new ColumnSortList.ColumnSortInfo(event.getColumn(),false));
          }
        }
 else {
          sortList.remove(sortList.get(containsAt));
          if (wasAscending) {
            sortList.insert(containsAt,new ColumnSortList.ColumnSortInfo(event.getColumn(),false));
          }
        }
      }
      ColumnSortEvent.fire(Grid.this,sortList);
    }
  }
;
  headerLeft.getColumnSortList().setLimit(1);
  headerLeft.addColumnSortHandler(sectionSortHandler);
  headerRight.getColumnSortList().setLimit(1);
  headerRight.addColumnSortHandler(sectionSortHandler);
  gridColor=PublishedColor.create(211,211,211,255);
  regenerateDynamicTDStyles();
  regenerateDynamicOddRowsStyles();
  getElement().<XElement>cast().addResizingTransitionEnd(this);
}","public Grid(ProvidesKey<T> aKeyProvider){
  super();
  getElement().getStyle().setPosition(Style.Position.RELATIVE);
  getElement().appendChild(tdsStyleElement);
  getElement().appendChild(cellsStyleElement);
  getElement().appendChild(oddRowsStyleElement);
  getElement().appendChild(evenRowsStyleElement);
  setRowsHeight(25);
  hive=new FlexTable();
  setWidget(hive);
  hive.setCellPadding(0);
  hive.setCellSpacing(0);
  hive.setBorderWidth(0);
  headerLeft=new GridSection<T>(aKeyProvider);
  headerLeftContainer=new ScrollPanel(headerLeft);
  headerRight=new GridSection<T>(aKeyProvider);
  headerRightContainer=new ScrollPanel(headerRight);
  frozenLeft=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerLeft.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerLeft.redrawFooters();
    }
  }
;
  frozenLeftContainer=new ScrollPanel(frozenLeft);
  frozenRight=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerRight.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerRight.redrawFooters();
    }
  }
;
  frozenRightContainer=new ScrollPanel(frozenRight);
  scrollableLeft=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerLeft.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerLeft.redrawFooters();
    }
  }
;
  scrollableLeftContainer=new ScrollPanel(scrollableLeft);
  scrollableRight=new GridSection<T>(aKeyProvider){
    @Override protected void replaceAllChildren(    List<T> values,    SafeHtml html){
      super.replaceAllChildren(values,html);
      footerRight.redrawFooters();
    }
    @Override protected void replaceChildren(    List<T> values,    int start,    SafeHtml html){
      super.replaceChildren(values,start,html);
      footerRight.redrawFooters();
    }
  }
;
  scrollableRightContainer=new ScrollPanel(scrollableRight);
  footerLeft=new GridSection<>(aKeyProvider);
  footerLeftContainer=new ScrollPanel(footerLeft);
  footerRight=new GridSection<>(aKeyProvider);
  footerRightContainer=new ScrollPanel(footerRight);
  for (  Widget w : new Widget[]{headerLeftContainer,headerRightContainer,frozenLeftContainer,frozenRightContainer,scrollableLeftContainer,footerLeftContainer,footerRightContainer}) {
    w.getElement().getStyle().setOverflow(Style.Overflow.HIDDEN);
  }
  for (  Widget w : new Widget[]{headerLeftContainer,headerRightContainer,frozenLeftContainer,frozenRightContainer,scrollableLeftContainer,scrollableRightContainer,footerLeftContainer,footerRightContainer}) {
    w.getElement().getFirstChildElement().getStyle().setPosition(Style.Position.ABSOLUTE);
  }
  headerLeft.setWidthPropagator(new GridWidthPropagator<T>(headerLeft){
    @Override public void changed(){
      super.changed();
      propagateHeaderWidth();
    }
  }
);
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerRight,frozenLeft,frozenRight,scrollableLeft,scrollableRight,footerLeft,footerRight}) {
    section.setWidthPropagator(new GridWidthPropagator<>(section));
  }
  headerLeft.setColumnsPartners(new AbstractCellTable[]{frozenLeft,scrollableLeft,footerLeft});
  headerRight.setColumnsPartners(new AbstractCellTable[]{frozenRight,scrollableRight,footerRight});
  ColumnsRemover leftColumnsRemover=new ColumnsRemoverAdapter<T>(headerLeft,frozenLeft,scrollableLeft,footerLeft);
  ColumnsRemover rightColumnsRemover=new ColumnsRemoverAdapter<T>(headerRight,frozenRight,scrollableRight,footerRight);
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerLeft,frozenLeft,scrollableLeft,footerLeft}) {
    section.setColumnsRemover(leftColumnsRemover);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerRight,frozenRight,scrollableRight,footerRight}) {
    section.setColumnsRemover(rightColumnsRemover);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{frozenLeft,scrollableLeft,footerLeft}) {
    section.setHeaderSource(headerLeft);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{frozenRight,scrollableRight,footerRight}) {
    section.setHeaderSource(headerRight);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerLeft,frozenLeft,scrollableLeft}) {
    section.setFooterSource(footerLeft);
  }
  for (  GridSection<T> section : (GridSection<T>[])new GridSection<?>[]{headerRight,frozenRight,scrollableRight}) {
    section.setFooterSource(footerRight);
  }
  hive.setWidget(0,0,headerLeftContainer);
  hive.setWidget(0,1,headerRightContainer);
  hive.setWidget(1,0,frozenLeftContainer);
  hive.setWidget(1,1,frozenRightContainer);
  hive.setWidget(2,0,scrollableLeftContainer);
  hive.setWidget(2,1,scrollableRightContainer);
  hive.setWidget(3,0,footerLeftContainer);
  hive.setWidget(3,1,footerRightContainer);
  for (  Widget w : new Widget[]{headerLeftContainer,headerRightContainer,frozenLeftContainer,frozenRightContainer,scrollableLeftContainer,scrollableRightContainer,footerLeftContainer,footerRightContainer}) {
    w.setWidth(""String_Node_Str"");
    w.setHeight(""String_Node_Str"");
  }
  for (  Widget w : new Widget[]{headerRightContainer,frozenRightContainer,footerRightContainer,scrollableLeftContainer}) {
    w.getElement().getParentElement().getStyle().setOverflow(Style.Overflow.HIDDEN);
  }
  hive.getElement().getStyle().setTableLayout(Style.TableLayout.FIXED);
  hive.getElement().getStyle().setPosition(Style.Position.RELATIVE);
  for (  CellTable<?> tbl : new CellTable<?>[]{headerLeft,headerRight,frozenLeft,frozenRight,scrollableLeft,scrollableRight,footerLeft,footerRight}) {
    tbl.setTableLayoutFixed(true);
  }
  headerLeft.setHeaderBuilder(new ThemedHeaderOrFooterBuilder<T>(headerLeft,false,this));
  headerLeft.setFooterBuilder(new NullHeaderOrFooterBuilder<T>(headerLeft,true));
  headerRight.setHeaderBuilder(new ThemedHeaderOrFooterBuilder<T>(headerRight,false,this));
  headerRight.setFooterBuilder(new NullHeaderOrFooterBuilder<T>(headerRight,true));
  footerLeft.setHeaderBuilder(new NullHeaderOrFooterBuilder<T>(footerLeft,false));
  footerLeft.setFooterBuilder(new ThemedHeaderOrFooterBuilder<T>(footerLeft,true));
  footerRight.setHeaderBuilder(new NullHeaderOrFooterBuilder<T>(footerRight,false));
  footerRight.setFooterBuilder(new ThemedHeaderOrFooterBuilder<T>(footerRight,true));
  for (  GridSection<?> section : new GridSection<?>[]{frozenLeft,frozenRight,scrollableLeft,scrollableRight}) {
    GridSection<T> gSection=(GridSection<T>)section;
    gSection.setHeaderBuilder(new NullHeaderOrFooterBuilder<T>(gSection,false));
    gSection.setFooterBuilder(new NullHeaderOrFooterBuilder<T>(gSection,true));
  }
  for (  GridSection<?> section : new GridSection<?>[]{headerLeft,headerRight,frozenLeft,frozenRight,scrollableLeft,scrollableRight,footerLeft,footerRight}) {
    section.setAutoHeaderRefreshDisabled(true);
  }
  for (  GridSection<?> section : new GridSection<?>[]{headerLeft,headerRight,footerLeft,footerRight}) {
    section.setAutoFooterRefreshDisabled(true);
  }
  installCellBuilders();
  scrollableRightContainer.addScrollHandler(new ScrollHandler(){
    @Override public void onScroll(    ScrollEvent event){
      int aimTop=scrollableRightContainer.getElement().getScrollTop();
      int aimLeft=scrollableRightContainer.getElement().getScrollLeft();
      scrollableLeftContainer.getElement().setScrollTop(aimTop);
      int factTopDelta=aimTop - scrollableLeftContainer.getElement().getScrollTop();
      if (factTopDelta > 0) {
        scrollableLeftContainer.getElement().getStyle().setBottom(factTopDelta,Style.Unit.PX);
      }
 else {
        scrollableLeftContainer.getElement().getStyle().clearBottom();
      }
      headerRightContainer.getElement().setScrollLeft(aimLeft);
      int factLeftDelta0=aimLeft - headerRightContainer.getElement().getScrollLeft();
      if (factLeftDelta0 > 0) {
        headerRightContainer.getElement().getStyle().setRight(factLeftDelta0,Style.Unit.PX);
      }
 else {
        headerRightContainer.getElement().getStyle().clearRight();
      }
      frozenRightContainer.getElement().setScrollLeft(aimLeft);
      int factLeftDelta1=aimLeft - frozenRightContainer.getElement().getScrollLeft();
      if (factLeftDelta1 > 0) {
        frozenRightContainer.getElement().getStyle().setRight(factLeftDelta1,Style.Unit.PX);
      }
 else {
        frozenRightContainer.getElement().getStyle().clearRight();
      }
      footerRightContainer.getElement().setScrollLeft(scrollableRightContainer.getElement().getScrollLeft());
      int factLeftDelta2=aimLeft - footerRightContainer.getElement().getScrollLeft();
      if (factLeftDelta2 > 0) {
        footerRightContainer.getElement().getStyle().setRight(factLeftDelta2,Style.Unit.PX);
      }
 else {
        footerRightContainer.getElement().getStyle().clearRight();
      }
    }
  }
);
  ghostLine=Document.get().createDivElement();
  ghostLine.addClassName(RULER_STYLE);
  ghostLine.getStyle().setPosition(Style.Position.ABSOLUTE);
  ghostLine.getStyle().setTop(0,Style.Unit.PX);
  ghostColumn=Document.get().createDivElement();
  ghostColumn.addClassName(COLUMN_PHANTOM_STYLE);
  ghostColumn.getStyle().setPosition(Style.Position.ABSOLUTE);
  ghostColumn.getStyle().setTop(0,Style.Unit.PX);
  addDomHandler(new DragEnterHandler(){
    @Override public void onDragEnter(    DragEnterEvent event){
      if (DraggedColumn.instance != null) {
        if (DraggedColumn.instance.isMove()) {
          event.preventDefault();
          event.stopPropagation();
          DraggedColumn<T> target=findTargetDraggedColumn(event.getNativeEvent().getEventTarget());
          if (target != null) {
            showColumnMoveDecorations(target);
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
 else {
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
        }
 else {
        }
      }
 else {
        event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
      }
    }
  }
,DragEnterEvent.getType());
  addDomHandler(new DragHandler(){
    @Override public void onDrag(    DragEvent event){
      if (DraggedColumn.instance != null && DraggedColumn.instance.isResize()) {
        event.stopPropagation();
      }
    }
  }
,DragEvent.getType());
  addDomHandler(new DragOverHandler(){
    @Override public void onDragOver(    DragOverEvent event){
      if (DraggedColumn.instance != null) {
        event.preventDefault();
        event.stopPropagation();
        if (DraggedColumn.instance.isMove()) {
          DraggedColumn<T> target=findTargetDraggedColumn(event.getNativeEvent().getEventTarget());
          if (target != null) {
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
 else {
            hideColumnDecorations();
            event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
          }
        }
 else {
          Element hostElement=Grid.this.getElement();
          int clientX=event.getNativeEvent().getClientX();
          int hostAbsX=hostElement.getAbsoluteLeft();
          int hostScrollX=hostElement.getScrollLeft();
          int docScrollX=hostElement.getOwnerDocument().getScrollLeft();
          int relativeX=clientX - hostAbsX + hostScrollX + docScrollX;
          ghostLine.getStyle().setLeft(relativeX,Style.Unit.PX);
          ghostLine.getStyle().setHeight(hostElement.getClientHeight(),Style.Unit.PX);
          if (ghostLine.getParentElement() != hostElement) {
            hostElement.appendChild(ghostLine);
          }
        }
      }
    }
  }
,DragOverEvent.getType());
  addDomHandler(new DragLeaveHandler(){
    @Override public void onDragLeave(    DragLeaveEvent event){
      if (DraggedColumn.instance != null) {
        event.stopPropagation();
        if (DraggedColumn.instance.isMove()) {
          if (event.getNativeEvent().getEventTarget() == (JavaScriptObject)Grid.this.getElement()) {
            hideColumnDecorations();
          }
        }
      }
    }
  }
,DragLeaveEvent.getType());
  addDomHandler(new DragEndHandler(){
    @Override public void onDragEnd(    DragEndEvent event){
      event.stopPropagation();
      hideColumnDecorations();
      DraggedColumn.instance=null;
    }
  }
,DragEndEvent.getType());
  addDomHandler(new DropHandler(){
    @Override public void onDrop(    DropEvent event){
      DraggedColumn<?> source=DraggedColumn.instance;
      DraggedColumn<T> target=targetDraggedColumn;
      hideColumnDecorations();
      DraggedColumn.instance=null;
      if (source != null) {
        event.preventDefault();
        event.stopPropagation();
        if (source.isMove()) {
          AbstractCellTable<T> sourceSection=(AbstractCellTable<T>)source.getTable();
          if (target != null) {
            Header<?> sourceHeader=source.getHeader();
            Header<?> targetHeader=target.getHeader();
            if (sourceHeader instanceof DraggableHeader<?> && targetHeader instanceof DraggableHeader<?>) {
              DraggableHeader<T> sourceDH=(DraggableHeader<T>)sourceHeader;
              DraggableHeader<T> targetDH=(DraggableHeader<T>)targetHeader;
              moveColumnNode(sourceDH.getHeaderNode(),targetDH.getHeaderNode());
            }
 else {
              int sourceIndex=source.getColumnIndex();
              int targetIndex=target.getColumnIndex();
              GridSection<T> targetSection=(GridSection<T>)target.getTable();
              boolean isSourceLeft=sourceSection == headerLeft || sourceSection == frozenLeft || sourceSection == scrollableLeft || sourceSection == footerLeft;
              boolean isTargetLeft=targetSection == headerLeft || targetSection == frozenLeft || targetSection == scrollableLeft || targetSection == footerLeft;
              sourceSection=isSourceLeft ? headerLeft : headerRight;
              targetSection=isTargetLeft ? headerLeft : headerRight;
              int generalSourceIndex=isSourceLeft ? sourceIndex : sourceIndex + frozenColumns;
              int generalTargetIndex=isTargetLeft ? targetIndex : targetIndex + frozenColumns;
              Header<?> header=sourceSection.getHeader(sourceIndex);
              if (header instanceof DraggableHeader) {
                ((DraggableHeader)header).setTable(targetSection);
              }
              if (generalSourceIndex != generalTargetIndex) {
                Column<T,?> column=(Column<T,?>)source.getColumn();
                if (!(header instanceof DraggableHeader) || ((DraggableHeader)header).isMoveable()) {
                  moveColumn(generalSourceIndex,generalTargetIndex);
                }
              }
            }
          }
        }
 else {
          Header<?> header=source.getHeader();
          if (!(header instanceof DraggableHeader) || ((DraggableHeader)header).isResizable()) {
            int newWidth=Math.max(event.getNativeEvent().getClientX() - source.getCellElement().getAbsoluteLeft(),MINIMUM_COLUMN_WIDTH);
            setColumnWidthFromHeaderDrag(((DraggedColumn<T>)source).getColumn(),newWidth,Style.Unit.PX);
          }
        }
      }
    }
  }
,DropEvent.getType());
  columnsChevron.getElement().getStyle().setPosition(Style.Position.ABSOLUTE);
  columnsChevron.getElement().addClassName(COLUMNS_CHEVRON_STYLE);
  getElement().appendChild(columnsChevron.getElement());
  columnsChevron.addDomHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      PopupPanel pp=new PopupPanel();
      pp.setAutoHideEnabled(true);
      pp.setAutoHideOnHistoryEventsEnabled(true);
      pp.setAnimationEnabled(true);
      MenuBar columnsMenu=new MenuBar(true);
      fillColumns(columnsMenu,headerLeft);
      fillColumns(columnsMenu,headerRight);
      pp.setWidget(columnsMenu);
      pp.setPopupPosition(columnsChevron.getAbsoluteLeft(),columnsChevron.getAbsoluteTop());
      pp.showRelativeTo(columnsChevron);
    }
    private void fillColumns(    MenuBar aTarget,    final GridSection<T> aSection){
      for (int i=0; i < aSection.getColumnCount(); i++) {
        Header<?> h=aSection.getHeader(i);
        final Column<T,?> column=aSection.getColumn(i);
        SafeHtml rendered;
        if (h.getValue() instanceof String) {
          String hVal=(String)h.getValue();
          rendered=hVal.startsWith(""String_Node_Str"") ? SafeHtmlUtils.fromTrustedString(hVal.substring(6)) : SafeHtmlUtils.fromString(hVal);
        }
 else {
          Cell.Context context=new Cell.Context(0,i,h.getKey());
          SafeHtmlBuilder sb=new SafeHtmlBuilder();
          h.render(context,sb);
          rendered=sb.toSafeHtml();
        }
        MenuItemCheckBox miCheck=new MenuItemCheckBox(!aSection.isColumnHidden(column),rendered.asString(),true);
        miCheck.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
          @Override public void onValueChange(          ValueChangeEvent<Boolean> event){
            if (Boolean.TRUE.equals(event.getValue())) {
              showColumn(column);
            }
 else {
              hideColumn(column);
            }
            Grid.this.onResize();
          }
        }
);
        aTarget.addItem(miCheck);
      }
    }
  }
,ClickEvent.getType());
  ColumnSortEvent.Handler sectionSortHandler=new ColumnSortEvent.Handler(){
    @Override public void onColumnSort(    ColumnSortEvent event){
      boolean isCtrlKey=((GridSection<?>)event.getSource()).isCtrlKey();
      boolean contains=false;
      int containsAt=-1;
      for (int i=0; i < sortList.size(); i++) {
        if (sortList.get(i).getColumn() == event.getColumn()) {
          contains=true;
          containsAt=i;
          break;
        }
      }
      if (!contains) {
        if (!isCtrlKey) {
          sortList.clear();
        }
        sortList.insert(sortList.size(),new ColumnSortList.ColumnSortInfo(event.getColumn(),true));
      }
 else {
        boolean wasAscending=sortList.get(containsAt).isAscending();
        if (!isCtrlKey) {
          sortList.clear();
          if (wasAscending) {
            sortList.push(new ColumnSortList.ColumnSortInfo(event.getColumn(),false));
          }
        }
 else {
          sortList.remove(sortList.get(containsAt));
          if (wasAscending) {
            sortList.insert(containsAt,new ColumnSortList.ColumnSortInfo(event.getColumn(),false));
          }
        }
      }
      ColumnSortEvent.fire(Grid.this,sortList);
    }
  }
;
  headerLeft.getColumnSortList().setLimit(1);
  headerLeft.addColumnSortHandler(sectionSortHandler);
  headerRight.getColumnSortList().setLimit(1);
  headerRight.addColumnSortHandler(sectionSortHandler);
  gridColor=PublishedColor.create(211,211,211,255);
  regenerateDynamicTDStyles();
  regenerateDynamicOddRowsStyles();
  getElement().<XElement>cast().addResizingTransitionEnd(this);
}",0.9370136618254632
145404,"@Override public void onDragOver(DragOverEvent event){
  if (DraggedColumn.instance != null) {
    event.preventDefault();
    event.stopPropagation();
    if (DraggedColumn.instance.isMove()) {
      DraggedColumn<T> target=findTargetDraggedColumn(event.getNativeEvent().getEventTarget());
      if (target != null) {
        event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
      }
 else {
        hideColumnDecorations();
        event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
      }
    }
 else {
    }
  }
}","@Override public void onDragOver(DragOverEvent event){
  if (DraggedColumn.instance != null) {
    event.preventDefault();
    event.stopPropagation();
    if (DraggedColumn.instance.isMove()) {
      DraggedColumn<T> target=findTargetDraggedColumn(event.getNativeEvent().getEventTarget());
      if (target != null) {
        event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
      }
 else {
        hideColumnDecorations();
        event.getDataTransfer().<XDataTransfer>cast().setDropEffect(""String_Node_Str"");
      }
    }
 else {
      Element hostElement=Grid.this.getElement();
      int clientX=event.getNativeEvent().getClientX();
      int hostAbsX=hostElement.getAbsoluteLeft();
      int hostScrollX=hostElement.getScrollLeft();
      int docScrollX=hostElement.getOwnerDocument().getScrollLeft();
      int relativeX=clientX - hostAbsX + hostScrollX + docScrollX;
      ghostLine.getStyle().setLeft(relativeX,Style.Unit.PX);
      ghostLine.getStyle().setHeight(hostElement.getClientHeight(),Style.Unit.PX);
      if (ghostLine.getParentElement() != hostElement) {
        hostElement.appendChild(ghostLine);
      }
    }
  }
}",0.6598056032018296
145405,"public CheckBoxCell(String aGroupName){
  super(BrowserEvents.CHANGE,BrowserEvents.KEYDOWN);
  groupName=aGroupName;
}","public CheckBoxCell(String aGroupName){
  super(BrowserEvents.CLICK,BrowserEvents.CHANGE,BrowserEvents.KEYDOWN);
  groupName=aGroupName;
}",0.921875
145406,"@Override public void onBrowserEvent(Context context,Element parent,Object value,NativeEvent event,ValueUpdater<Object> valueUpdater){
  String type=event.getType();
  boolean enterPressed=(BrowserEvents.KEYDOWN.equals(type) && event.getKeyCode() == KeyCodes.KEY_ENTER);
  if (BrowserEvents.CHANGE.equals(type) || enterPressed) {
    InputElement input=parent.getFirstChild().cast();
    Boolean isChecked=input.isChecked();
    if (enterPressed && (handlesSelection() || !dependsOnSelection())) {
      isChecked=!isChecked;
      input.setChecked(isChecked);
    }
    if (value != isChecked && !dependsOnSelection()) {
      setViewData(context.getKey(),isChecked);
    }
 else {
      clearViewData(context.getKey());
    }
    if (valueUpdater != null) {
      valueUpdater.update(isChecked);
    }
  }
}","@Override public void onBrowserEvent(Context context,Element parent,Object value,NativeEvent event,ValueUpdater<Object> valueUpdater){
  String type=event.getType();
  boolean enterPressed=(BrowserEvents.KEYDOWN.equals(type) && event.getKeyCode() == KeyCodes.KEY_ENTER);
  if (BrowserEvents.CLICK.equals(type) || BrowserEvents.CHANGE.equals(type) || enterPressed) {
    InputElement input=parent.getFirstChild().cast();
    Boolean isChecked=input.isChecked();
    if (enterPressed && (handlesSelection() || !dependsOnSelection())) {
      isChecked=!isChecked;
      input.setChecked(isChecked);
    }
    if (value != isChecked && !dependsOnSelection()) {
      setViewData(context.getKey(),isChecked);
    }
 else {
      clearViewData(context.getKey());
    }
    if (valueUpdater != null) {
      valueUpdater.update(isChecked);
    }
  }
}",0.9782345828295044
145407,"public DataSource obtainDataSource(String aDataSourceName) throws Exception {
  if (aDataSourceName == null) {
    aDataSourceName=defaultDatasourceName;
  }
  if (aDataSourceName != null) {
    Context initContext=new InitialContext();
    try {
      return (DataSource)initContext.lookup(aDataSourceName);
    }
 catch (    NamingException ex) {
      try {
        Context envContext=(Context)initContext.lookup(""String_Node_Str"");
        return (DataSource)envContext.lookup(aDataSourceName);
      }
 catch (      NamingException ex1) {
        return GeneralResourceProvider.getInstance().getPooledDataSource(aDataSourceName);
      }
    }
  }
 else {
    throw new NamingException(""String_Node_Str"");
  }
}","public DataSource obtainDataSource(String aDataSourceName) throws Exception {
  if (aDataSourceName == null) {
    aDataSourceName=defaultDatasourceName;
  }
  if (aDataSourceName != null && !aDataSourceName.isEmpty()) {
    Context initContext=new InitialContext();
    try {
      return (DataSource)initContext.lookup(aDataSourceName);
    }
 catch (    NamingException ex) {
      try {
        Context envContext=(Context)initContext.lookup(""String_Node_Str"");
        return (DataSource)envContext.lookup(aDataSourceName);
      }
 catch (      NamingException ex1) {
        return GeneralResourceProvider.getInstance().getPooledDataSource(aDataSourceName);
      }
    }
  }
 else {
    throw new NamingException(""String_Node_Str"");
  }
}",0.9794801641586868
145408,"public static Map<String,String> getUserProperties(DatabasesClient aClient,String aUserName,Scripts.Space aSpace,Consumer<Map<String,String>> onSuccess,Consumer<Exception> onFailure) throws Exception {
  if (aUserName != null && aClient != null) {
    final SqlQuery q=new SqlQuery(aClient,USER_QUERY_TEXT);
    q.putParameter(USERNAME_PARAMETER_NAME,DataTypeInfo.VARCHAR,aUserName.toUpperCase());
    aClient.initUsersSpace(q.getDatasourceName());
    SqlCompiledQuery compiled=q.compile();
    CallableConsumer<Map<String,String>,ResultSet> doWork=(    ResultSet r) -> {
      Map<String,String> properties=new HashMap<>();
      ColumnsIndicies idxs=new ColumnsIndicies(r.getMetaData());
      if (r.next()) {
        properties.put(ClientConstants.F_USR_NAME,aUserName);
        properties.put(ClientConstants.F_USR_CONTEXT,r.getString(idxs.find(ClientConstants.F_USR_CONTEXT)));
        properties.put(ClientConstants.F_USR_EMAIL,r.getString(idxs.find(ClientConstants.F_USR_EMAIL)));
        properties.put(ClientConstants.F_USR_PHONE,r.getString(idxs.find(ClientConstants.F_USR_PHONE)));
        properties.put(ClientConstants.F_USR_FORM,r.getString(idxs.find(ClientConstants.F_USR_FORM)));
        properties.put(ClientConstants.F_USR_PASSWD,r.getString(idxs.find(ClientConstants.F_USR_PASSWD)));
      }
      return properties;
    }
;
    if (onSuccess != null) {
      compiled.<Map<String,String>>executeQuery(doWork,(      Runnable aTask) -> {
        aSpace.process(aTask);
      }
,(      Map<String,String> props) -> {
        onSuccess.accept(props);
      }
,onFailure);
      return null;
    }
 else {
      return compiled.<Map<String,String>>executeQuery(doWork,null,null,null);
    }
  }
 else {
    if (onSuccess != null) {
      aSpace.process(() -> {
        onSuccess.accept(new HashMap<>());
      }
);
      return null;
    }
 else {
      return null;
    }
  }
}","public static Map<String,String> getUserProperties(DatabasesClient aClient,String aUserName,Scripts.Space aSpace,Consumer<Map<String,String>> onSuccess,Consumer<Exception> onFailure) throws Exception {
  if (aUserName != null && aClient != null) {
    final SqlQuery q=new SqlQuery(aClient,USER_QUERY_TEXT);
    q.putParameter(USERNAME_PARAMETER_NAME,DataTypeInfo.VARCHAR,aUserName.toUpperCase());
    SqlCompiledQuery compiled=q.compile();
    CallableConsumer<Map<String,String>,ResultSet> doWork=(    ResultSet r) -> {
      Map<String,String> properties=new HashMap<>();
      ColumnsIndicies idxs=new ColumnsIndicies(r.getMetaData());
      if (r.next()) {
        properties.put(ClientConstants.F_USR_NAME,aUserName);
        properties.put(ClientConstants.F_USR_CONTEXT,r.getString(idxs.find(ClientConstants.F_USR_CONTEXT)));
        properties.put(ClientConstants.F_USR_EMAIL,r.getString(idxs.find(ClientConstants.F_USR_EMAIL)));
        properties.put(ClientConstants.F_USR_PHONE,r.getString(idxs.find(ClientConstants.F_USR_PHONE)));
        properties.put(ClientConstants.F_USR_FORM,r.getString(idxs.find(ClientConstants.F_USR_FORM)));
        properties.put(ClientConstants.F_USR_PASSWD,r.getString(idxs.find(ClientConstants.F_USR_PASSWD)));
      }
      return properties;
    }
;
    if (onSuccess != null) {
      try {
        compiled.<Map<String,String>>executeQuery(doWork,(        Runnable aTask) -> {
          aSpace.process(aTask);
        }
,onSuccess,onFailure);
        return null;
      }
 catch (      Exception ex) {
        aSpace.process(() -> {
          onFailure.accept(ex);
        }
);
        return null;
      }
    }
 else {
      return compiled.<Map<String,String>>executeQuery(doWork,null,null,null);
    }
  }
 else {
    if (onSuccess != null) {
      aSpace.process(() -> {
        onSuccess.accept(new HashMap<>());
      }
);
      return null;
    }
 else {
      return null;
    }
  }
}",0.9164926931106472
145409,"/** 
 * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (!checkUpload(request,response)) {
    if (platypusCore != null) {
      HttpSession httpSession=request.getSession();
      if (httpSession != null) {
        AsyncContext async=request.startAsync();
        async.setTimeout(-1);
        Consumer<Session> requestProcessor=(        Session aSession) -> {
          try {
            Scripts.LocalContext context=Scripts.createContext(aSession.getSpace());
            context.setAsync(async);
            context.setRequest(request);
            context.setResponse(response);
            Scripts.setContext(context);
            try {
              DatabasesClient.getUserProperties(platypusCore.getDatabasesClient(),request.getUserPrincipal() != null ? request.getUserPrincipal().getName() : null,Scripts.getSpace(),(              Map<String,String> aUserProps) -> {
                String dataContext=aUserProps.get(ClientConstants.F_USR_CONTEXT);
                PlatypusPrincipal principal=servletRequestPrincipal(request,dataContext);
                context.setPrincipal(principal);
                Scripts.getSpace().process(() -> {
                  try {
                    processPlatypusRequest(request,response,httpSession,aSession,async);
                  }
 catch (                  Exception ex) {
                    Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex);
                    try {
                      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.toString());
                      async.complete();
                    }
 catch (                    IOException|IllegalStateException ex1) {
                      Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex1);
                    }
                  }
                }
);
              }
,(              Exception ex) -> {
                try {
                  response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.toString());
                  async.complete();
                }
 catch (                IOException|IllegalStateException ex1) {
                  Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex1);
                }
              }
);
            }
  finally {
              Scripts.setContext(null);
            }
          }
 catch (          Exception ex) {
            Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex);
            try {
              response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.toString());
              async.complete();
            }
 catch (            IOException|IllegalStateException ex1) {
              Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex1);
            }
          }
        }
;
        Session session=platypusSessionByHttpSession(httpSession);
        if (session == null) {
          Scripts.LocalContext queueSpaceContext=Scripts.createContext(platypusCore.getQueueSpace());
          Scripts.setContext(queueSpaceContext);
          try {
            platypusCore.getQueueSpace().process(() -> {
              try {
                String platypusSessionId=(String)httpSession.getAttribute(PLATYPUS_SESSION_ID_ATTR_NAME);
                Session lookedup=platypusSessionId != null ? SessionManager.Singleton.instance.get(platypusSessionId) : null;
                if (lookedup == null) {
                  if (platypusSessionId == null) {
                    platypusSessionId=IDGenerator.genID() + ""String_Node_Str"";
                  }
                  lookedup=SessionManager.Singleton.instance.create(platypusSessionId);
                  httpSession.setAttribute(PLATYPUS_SESSION_ID_ATTR_NAME,platypusSessionId);
                  Logger.getLogger(PlatypusSessionsSynchronizer.class.getName()).log(Level.INFO,""String_Node_Str"",lookedup.getId());
                }
                final Session effective=lookedup;
                requestProcessor.accept(effective);
              }
 catch (              ScriptException ex) {
                Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex);
              }
            }
);
          }
  finally {
            Scripts.setContext(null);
          }
        }
 else {
          requestProcessor.accept(session);
        }
      }
 else {
        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,HTTP_SESSION_MISSING_MSG);
      }
    }
 else {
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,CORE_MISSING_MSG);
    }
  }
}","/** 
 * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws Exception {
  if (!checkUpload(request,response)) {
    if (platypusCore != null) {
      HttpSession httpSession=request.getSession();
      if (httpSession != null) {
        AsyncContext async=request.startAsync();
        async.setTimeout(-1);
        Consumer<Session> requestProcessor=(        Session aSession) -> {
          String userName=request.getUserPrincipal() != null ? request.getUserPrincipal().getName() : null;
          Scripts.LocalContext context=Scripts.createContext(aSession.getSpace());
          context.setAsync(async);
          context.setRequest(request);
          context.setResponse(response);
          Scripts.setContext(context);
          try {
            Consumer<String> withDataContext=(dataContext) -> {
              PlatypusPrincipal principal=servletRequestPrincipal(request,dataContext);
              context.setPrincipal(principal);
              try {
                processPlatypusRequest(request,response,httpSession,aSession,async);
              }
 catch (              Exception ex) {
                Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex);
                try {
                  response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.toString());
                  async.complete();
                }
 catch (                IOException|IllegalStateException ex1) {
                  Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex1);
                }
              }
            }
;
            try {
              DatabasesClient.getUserProperties(platypusCore.getDatabasesClient(),userName,Scripts.getSpace(),(              Map<String,String> aUserProps) -> {
                String dataContext=aUserProps.get(ClientConstants.F_USR_CONTEXT);
                withDataContext.accept(dataContext);
              }
,(              Exception ex) -> {
                Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.FINE,""String_Node_Str"",new Object[]{userName,ex.toString()});
                withDataContext.accept(null);
              }
);
            }
 catch (            Exception ex) {
              Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex);
              try {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.toString());
                async.complete();
              }
 catch (              IOException|IllegalStateException ex1) {
                Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex1);
              }
            }
          }
  finally {
            Scripts.setContext(null);
          }
        }
;
        Session session=platypusSessionByHttpSession(httpSession);
        if (session == null) {
          Scripts.LocalContext queueSpaceContext=Scripts.createContext(platypusCore.getQueueSpace());
          Scripts.setContext(queueSpaceContext);
          try {
            platypusCore.getQueueSpace().process(() -> {
              try {
                String platypusSessionId=(String)httpSession.getAttribute(PLATYPUS_SESSION_ID_ATTR_NAME);
                Session lookedup=platypusSessionId != null ? SessionManager.Singleton.instance.get(platypusSessionId) : null;
                if (lookedup == null) {
                  if (platypusSessionId == null) {
                    platypusSessionId=IDGenerator.genID() + ""String_Node_Str"";
                  }
                  lookedup=SessionManager.Singleton.instance.create(platypusSessionId);
                  httpSession.setAttribute(PLATYPUS_SESSION_ID_ATTR_NAME,platypusSessionId);
                  Logger.getLogger(PlatypusSessionsSynchronizer.class.getName()).log(Level.INFO,""String_Node_Str"",lookedup.getId());
                }
                final Session effective=lookedup;
                requestProcessor.accept(effective);
              }
 catch (              ScriptException ex) {
                Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,null,ex);
              }
            }
);
          }
  finally {
            Scripts.setContext(null);
          }
        }
 else {
          requestProcessor.accept(session);
        }
      }
 else {
        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,HTTP_SESSION_MISSING_MSG);
      }
    }
 else {
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,CORE_MISSING_MSG);
    }
  }
}",0.6426524764633648
145410,"protected ImageParagraph(Element aContainer,String aTitle,boolean asHtml,ImageResource aImage){
  super();
  text=aTitle;
  html=asHtml;
  image=aImage;
  container=aContainer;
  container.getStyle().setPosition(Style.Position.RELATIVE);
  container.getStyle().setDisplay(Style.Display.INLINE_BLOCK);
  container.getStyle().setCursor(Cursor.DEFAULT);
  container.getStyle().setPadding(0,Unit.PX);
  content=Document.get().createPElement();
  content.getStyle().setMargin(0,Unit.PX);
  aligner=Document.get().createDivElement();
  aligner.getStyle().setDisplay(Style.Display.INLINE_BLOCK);
  aligner.getStyle().setPosition(Style.Position.RELATIVE);
  aligner.getStyle().setHeight(100,Style.Unit.PCT);
  aligner.getStyle().setVerticalAlign(Style.VerticalAlign.MIDDLE);
  aligner.getStyle().setVisibility(Style.Visibility.HIDDEN);
  container.insertFirst(content);
  container.insertAfter(aligner,content);
  setElement(container);
}","protected ImageParagraph(Element aContainer,String aTitle,boolean asHtml,ImageResource aImage){
  super();
  text=aTitle;
  html=asHtml;
  image=aImage;
  container=aContainer;
  container.getStyle().setPosition(Style.Position.RELATIVE);
  container.getStyle().setDisplay(Style.Display.INLINE_BLOCK);
  container.getStyle().setCursor(Cursor.DEFAULT);
  container.getStyle().setPadding(0,Unit.PX);
  content=Document.get().createPElement();
  content.getStyle().setMargin(0,Unit.PX);
  content.getStyle().setPosition(Style.Position.RELATIVE);
  content.getStyle().setDisplay(Style.Display.INLINE_BLOCK);
  aligner=Document.get().createDivElement();
  aligner.getStyle().setDisplay(Style.Display.INLINE_BLOCK);
  aligner.getStyle().setPosition(Style.Position.RELATIVE);
  aligner.getStyle().setHeight(100,Style.Unit.PCT);
  aligner.getStyle().setVerticalAlign(Style.VerticalAlign.MIDDLE);
  aligner.getStyle().setVisibility(Style.Visibility.HIDDEN);
  container.insertFirst(content);
  container.insertAfter(aligner,content);
  setElement(container);
}",0.8868686868686869
145411,"private void organize(){
  if (isAttached()) {
    final Style contentStyle=content.getStyle();
    organizeText();
    organizeImage();
    if (isAttached() && (getParent() instanceof FlowPanel || getParent() instanceof RootPanel || getParent() instanceof ScrollPanel)) {
      contentStyle.setPosition(Style.Position.RELATIVE);
    }
 else {
      contentStyle.setPosition(Style.Position.ABSOLUTE);
    }
    organizeHorizontalAlignment();
    organizeVerticalAlignment();
  }
}","private void organize(){
  if (isAttached()) {
    organizeText();
    organizeImage();
    organizeHorizontalAlignment();
    organizeVerticalAlignment();
  }
}",0.5023400936037441
145412,"protected void organizeVerticalAlignment(){
  final Style contentStyle=content.getStyle();
  final Style alignerStyle=aligner.getStyle();
  contentStyle.clearDisplay();
  contentStyle.clearProperty(""String_Node_Str"");
  alignerStyle.setDisplay(Style.Display.NONE);
switch (verticalAlignment) {
case TOP:
    contentStyle.setTop(0,Style.Unit.PX);
  contentStyle.clearBottom();
break;
case BOTTOM:
{
contentStyle.clearTop();
contentStyle.setBottom(0,Style.Unit.PX);
break;
}
case CENTER:
{
contentStyle.clearTop();
contentStyle.clearBottom();
contentStyle.setPosition(Style.Position.RELATIVE);
contentStyle.setDisplay(Style.Display.INLINE_BLOCK);
contentStyle.setVerticalAlign(Style.VerticalAlign.MIDDLE);
alignerStyle.setDisplay(Style.Display.INLINE_BLOCK);
break;
}
}
}","protected void organizeVerticalAlignment(){
  final Style contentStyle=content.getStyle();
  final Style alignerStyle=aligner.getStyle();
switch (verticalAlignment) {
case TOP:
    contentStyle.setVerticalAlign(Style.VerticalAlign.TOP);
  break;
case BOTTOM:
{
  contentStyle.setVerticalAlign(Style.VerticalAlign.BOTTOM);
  break;
}
case CENTER:
{
contentStyle.setVerticalAlign(Style.VerticalAlign.MIDDLE);
break;
}
}
}",0.531986531986532
145413,"public void startEditing(final Cell.Context context,final Element aBoxPositionTemplate,final Element aBoxParent,final C value,ValueUpdater<C> valueUpdater,final Runnable onEditorClose){
  Widget oldParent=editor.getParent();
  if (oldParent == null) {
    final UpdaterRef<C> updaterRef=new UpdaterRef<>(valueUpdater);
    final AutoCloseBox editorBox=new AutoCloseBox(){
      protected void superClose(){
        super.close();
      }
      @Override public void close(){
        Scheduler.get().scheduleDeferred(new ScheduledCommand(){
          @Override public void execute(){
            superClose();
          }
        }
);
      }
    }
;
    valueHost.setValue(value);
    editorBox.setWidget(editor);
    final HandlerRegistration valueChangeReg=valueHost.addValueChangeHandler(new ValueChangeHandler<C>(){
      @Override public void onValueChange(      ValueChangeEvent<C> event){
        if (updaterRef.valueUpdater != null) {
          updaterRef.valueUpdater.update(valueHost.getValue());
        }
      }
    }
);
    editorBox.getElement().setClassName(""String_Node_Str"");
    editorBox.getElement().getStyle().setPosition(Style.Position.ABSOLUTE);
    editorBox.getElement().getStyle().setDisplay(Style.Display.INLINE_BLOCK);
    editorBox.getElement().getStyle().setPaddingLeft(Grid.LEFT_RIGHT_CELL_PADDING,Style.Unit.PX);
    editorBox.getElement().getStyle().setPaddingRight(Grid.LEFT_RIGHT_CELL_PADDING,Style.Unit.PX);
    editorBox.getElement().getStyle().setFontSize(0,Style.Unit.PT);
    editorBox.getElement().getStyle().setWidth(aBoxPositionTemplate.getClientWidth(),Style.Unit.PX);
    editorBox.getElement().getStyle().setHeight(aBoxPositionTemplate.getClientHeight(),Style.Unit.PX);
    editorBox.getElement().getStyle().setLeft(aBoxPositionTemplate.getAbsoluteLeft() - aBoxParent.getAbsoluteLeft() - Grid.LEFT_RIGHT_CELL_PADDING,Style.Unit.PX);
    editorBox.getElement().getStyle().setTop(aBoxPositionTemplate.getAbsoluteTop() - aBoxParent.getAbsoluteTop(),Style.Unit.PX);
    final HandlerRegistration editorKeyDownReg=editor.addDomHandler(new KeyDownHandler(){
      @Override public void onKeyDown(      KeyDownEvent event){
        if (event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {
          updaterRef.valueUpdater=null;
          valueHost.setValue(null);
          editorBox.close();
        }
 else         if (event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ENTER) {
          Scheduler.get().scheduleDeferred(new ScheduledCommand(){
            @Override public void execute(){
              updaterRef.valueUpdater=null;
              valueHost.setValue(null);
              editorBox.close();
            }
          }
);
        }
      }
    }
,KeyDownEvent.getType());
    editorBox.addCloseHandler(new CloseHandler<AutoCloseBox>(){
      @Override public void onClose(      CloseEvent<AutoCloseBox> event){
        valueChangeReg.removeHandler();
        editorKeyDownReg.removeHandler();
        editorBox.setWidget(null);
        editor.removeFromParent();
        setViewData(context.getKey(),null);
        if (onEditorClose != null)         onEditorClose.run();
      }
    }
);
    editorBox.show(aBoxParent);
    Scheduler.get().scheduleDeferred(new ScheduledCommand(){
      @Override public void execute(){
        if (editor.isAttached() && focusHost != null) {
          focusHost.setFocus(true);
        }
      }
    }
);
  }
}","public void startEditing(final Cell.Context context,final Element aBoxPositionTemplate,final Element aBoxParent,final C value,ValueUpdater<C> valueUpdater,final Runnable onEditorClose){
  Widget oldParent=editor.getParent();
  if (oldParent == null) {
    final UpdaterRef<C> updaterRef=new UpdaterRef<>(valueUpdater);
    final AutoCloseBox editorBox=new AutoCloseBox(){
      protected void superClose(){
        super.close();
      }
      @Override public void close(){
        Scheduler.get().scheduleDeferred(new ScheduledCommand(){
          @Override public void execute(){
            superClose();
          }
        }
);
      }
    }
;
    valueHost.setValue(value);
    editorBox.setWidget(editor);
    final HandlerRegistration valueChangeReg=valueHost.addValueChangeHandler(new ValueChangeHandler<C>(){
      @Override public void onValueChange(      ValueChangeEvent<C> event){
        if (updaterRef.valueUpdater != null) {
          updaterRef.valueUpdater.update(valueHost.getValue());
        }
      }
    }
);
    editorBox.getElement().setClassName(""String_Node_Str"");
    editorBox.getElement().getStyle().setPosition(Style.Position.ABSOLUTE);
    editorBox.getElement().getStyle().setDisplay(Style.Display.INLINE_BLOCK);
    editorBox.getElement().getStyle().setPaddingLeft(Grid.LEFT_RIGHT_CELL_PADDING,Style.Unit.PX);
    editorBox.getElement().getStyle().setPaddingRight(Grid.LEFT_RIGHT_CELL_PADDING,Style.Unit.PX);
    editorBox.getElement().getStyle().setWidth(aBoxPositionTemplate.getClientWidth(),Style.Unit.PX);
    editorBox.getElement().getStyle().setHeight(aBoxPositionTemplate.getClientHeight(),Style.Unit.PX);
    editorBox.getElement().getStyle().setLeft(aBoxPositionTemplate.getAbsoluteLeft() - aBoxParent.getAbsoluteLeft() - Grid.LEFT_RIGHT_CELL_PADDING,Style.Unit.PX);
    editorBox.getElement().getStyle().setTop(aBoxPositionTemplate.getAbsoluteTop() - aBoxParent.getAbsoluteTop(),Style.Unit.PX);
    final HandlerRegistration editorKeyDownReg=editor.addDomHandler(new KeyDownHandler(){
      @Override public void onKeyDown(      KeyDownEvent event){
        if (event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {
          updaterRef.valueUpdater=null;
          valueHost.setValue(null);
          editorBox.close();
        }
 else         if (event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ENTER) {
          Scheduler.get().scheduleDeferred(new ScheduledCommand(){
            @Override public void execute(){
              updaterRef.valueUpdater=null;
              valueHost.setValue(null);
              editorBox.close();
            }
          }
);
        }
      }
    }
,KeyDownEvent.getType());
    editorBox.addCloseHandler(new CloseHandler<AutoCloseBox>(){
      @Override public void onClose(      CloseEvent<AutoCloseBox> event){
        valueChangeReg.removeHandler();
        editorKeyDownReg.removeHandler();
        editorBox.setWidget(null);
        editor.removeFromParent();
        setViewData(context.getKey(),null);
        if (onEditorClose != null)         onEditorClose.run();
      }
    }
);
    editorBox.show(aBoxParent);
    Scheduler.get().scheduleDeferred(new ScheduledCommand(){
      @Override public void execute(){
        if (editor.isAttached() && focusHost != null) {
          focusHost.setFocus(true);
        }
      }
    }
);
  }
}",0.9899348727057432
145414,"@Override public String getText(){
  return renderer.render(value);
}","@Override public String getText(){
  return super.getText();
}",0.8244274809160306
145415,"private String params(Parameters parameters){
  String[] res=new String[parameters.getParametersCount()];
  for (int i=0; i < parameters.getParametersCount(); i++) {
    Parameter p=parameters.get(i + 1);
    String sv=""String_Node_Str"";
    if (p.getValue() != null && p.getValue() != RowsetUtils.UNDEFINED_SQL_VALUE) {
      if (p.getValue() instanceof Date) {
        sv=defaultDateFormat.format((Date)p.getValue());
      }
 else {
        sv=p.getValue().toString();
      }
    }
    res[i]=param(p.getName(),sv);
  }
  return params(res);
}","private String params(Parameters parameters){
  String[] res=new String[parameters.getParametersCount()];
  for (int i=0; i < parameters.getParametersCount(); i++) {
    Parameter p=parameters.get(i + 1);
    String sv=""String_Node_Str"";
    if (p.getValue() != null && p.getValue() != RowsetUtils.UNDEFINED_SQL_VALUE) {
      if (p.getValue() instanceof Date) {
        sv=JsObject.formatDateValueWithJSON(Long.valueOf(((Date)p.getValue()).getTime()).doubleValue());
        sv=sv.substring(1,sv.length() - 1);
      }
 else {
        sv=p.getValue().toString();
      }
    }
    res[i]=param(p.getName(),sv);
  }
  return params(res);
}",0.851602023608769
145416,"private static Object adoptValue(JSONValue aValue,Field aField) throws Exception {
  if (aValue != null && aValue.isNull() == null) {
    if (aValue.isArray() != null) {
      throw new Exception(""String_Node_Str"");
    }
 else {
      JSONBoolean jsb=aValue.isBoolean();
      if (jsb != null) {
        return jsb.booleanValue();
      }
 else {
        JSONNumber jsn=aValue.isNumber();
        if (jsn != null) {
          return jsn.doubleValue();
        }
 else {
          JSONString jss=aValue.isString();
          if (jss != null) {
            String sVal=jss.stringValue();
            if (aField.getTypeInfo().getType() == Types.TIMESTAMP || aField.getTypeInfo().getType() == Types.TIME || aField.getTypeInfo().getType() == Types.DATE) {
              return ISO_DATE_FORMAT.parse(sVal);
            }
 else             return sVal;
          }
 else {
            JSONObject jso=aValue.isObject();
            if (jso != null) {
              throw new Exception(""String_Node_Str"");
            }
 else {
              throw new Exception(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
 else {
    return null;
  }
}","private static Object adoptValue(JSONValue aValue,Field aField) throws Exception {
  if (aValue != null && aValue.isNull() == null) {
    if (aValue.isArray() != null) {
      throw new Exception(""String_Node_Str"");
    }
 else {
      JSONBoolean jsb=aValue.isBoolean();
      if (jsb != null) {
        return jsb.booleanValue();
      }
 else {
        JSONNumber jsn=aValue.isNumber();
        if (jsn != null) {
          return jsn.doubleValue();
        }
 else {
          JSONString jss=aValue.isString();
          if (jss != null) {
            String sVal=jss.stringValue();
            if (aField.getTypeInfo().getType() == Types.TIMESTAMP || aField.getTypeInfo().getType() == Types.TIME || aField.getTypeInfo().getType() == Types.DATE) {
              return new Date(Math.round(JsDate.create(sVal).getTime()));
            }
 else             return sVal;
          }
 else {
            JSONObject jso=aValue.isObject();
            if (jso != null) {
              throw new Exception(""String_Node_Str"");
            }
 else {
              throw new Exception(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
 else {
    return null;
  }
}",0.9692307692307692
145417,"/** 
 * Utility method that tries to clone an object. Objects of explicitly specified types are constructed directly, other are serialized and deserialized (if not serializable exception is thrown).
 * @param o object to clone.
 * @return cloned of the given object.
 * @throws java.lang.CloneNotSupportedException when cloning wasunsuccessful.
 */
public static Object cloneObject(Object o) throws CloneNotSupportedException {
  if (o == null) {
    return null;
  }
  if ((o instanceof Byte) || (o instanceof Short) || (o instanceof Integer)|| (o instanceof Long)|| (o instanceof Float)|| (o instanceof Double)|| (o instanceof Boolean)|| (o instanceof Character)|| (o instanceof String)) {
    return o;
  }
  if (o instanceof Font) {
    return o;
  }
  if (o instanceof Dimension) {
    return new Dimension((Dimension)o);
  }
  if (o instanceof Point) {
    return new Point((Point)o);
  }
  if (o instanceof Rectangle) {
    return new Rectangle((Rectangle)o);
  }
  if (o instanceof Insets) {
    return ((Insets)o).clone();
  }
  if (o instanceof Cursor) {
    return new com.eas.gui.Cursor(((Cursor)o).getType());
  }
  if (o instanceof Paint) {
    return o;
  }
  if (o instanceof JSObject) {
    return o;
  }
  throw new CloneNotSupportedException();
}","/** 
 * Utility method that tries to clone an object. Objects of explicitly specified types are constructed directly, other are serialized and deserialized (if not serializable exception is thrown).
 * @param o object to clone.
 * @return cloned of the given object.
 * @throws java.lang.CloneNotSupportedException when cloning wasunsuccessful.
 */
public static Object cloneObject(Object o) throws CloneNotSupportedException {
  if (o == null) {
    return null;
  }
  if ((o instanceof Byte) || (o instanceof Short) || (o instanceof Integer)|| (o instanceof Long)|| (o instanceof Float)|| (o instanceof Double)|| (o instanceof Boolean)|| (o instanceof Character)|| (o instanceof String)) {
    return o;
  }
  if (o instanceof Font) {
    return o;
  }
  if (o instanceof Dimension) {
    return new Dimension((Dimension)o);
  }
  if (o instanceof Point) {
    return new Point((Point)o);
  }
  if (o instanceof Rectangle) {
    return new Rectangle((Rectangle)o);
  }
  if (o instanceof Insets) {
    return ((Insets)o).clone();
  }
  if (o instanceof Cursor) {
    return new com.eas.gui.Cursor(((Cursor)o).getType());
  }
  if (o instanceof Paint) {
    return o;
  }
  if (o instanceof JSObject) {
    return o;
  }
  if (o instanceof IconEditor.NbImageIcon) {
    return o;
  }
  throw new CloneNotSupportedException();
}",0.9757038179714616
145418,"public NbImageIcon copy(FormProperty<?> formProperty) throws Exception {
  return iconFromResourceName(dataObject,name);
}","public NbImageIcon copy() throws Exception {
  return iconFromResourceName(dataObject,name);
}",0.8703703703703703
145419,"private void publishComponentsFacades(JavaScriptObject aTarget,HasWidgets aView){
  java.util.Iterator<Widget> wIt=aView.iterator();
  while (wIt.hasNext()) {
    Widget w=wIt.next();
    if (w instanceof HasJsName && w instanceof HasPublished) {
      aTarget.<Utils.JsObject>cast().inject(((HasJsName)w).getJsName(),((HasPublished)w).getPublished());
    }
    if (w instanceof HasWidgets)     publishComponentsFacades(aTarget,(HasWidgets)w);
  }
}","private void publishComponentsFacades(JavaScriptObject aTarget,HasWidgets aView){
  java.util.Iterator<Widget> wIt=aView.iterator();
  while (wIt.hasNext()) {
    Widget w=wIt.next();
    if (w instanceof HasJsName && w instanceof HasPublished) {
      aTarget.<Utils.JsObject>cast().inject(((HasJsName)w).getJsName(),((HasPublished)w).getPublished());
    }
    if (w instanceof HasWidgets) {
      publishComponentsFacades(aTarget,(HasWidgets)w);
    }
 else     if (w instanceof PlatypusMenuBar) {
      PlatypusMenuBar bar=(PlatypusMenuBar)w;
      publishPlatypusMenuBarFacades(aTarget,bar);
    }
  }
}",0.8506616257088847
145420,"public void remove(UIObject aChild){
  boolean removed=false;
  if (aChild instanceof MenuItem) {
    removeItem((MenuItem)aChild);
    allItems.remove(aChild);
    removed=true;
  }
 else   if (aChild instanceof PlatypusMenuItemSeparator) {
    removeSeparator((PlatypusMenuItemSeparator)aChild);
    allItems.remove(aChild);
    removed=true;
  }
 else   if (aChild instanceof PlatypusMenu) {
    removeItem(((PlatypusMenu)aChild).getParentItem());
    allItems.remove(aChild);
    removed=true;
  }
  if (removed) {
    RemoveEvent.fire(this,aChild);
  }
}","public boolean remove(UIObject aChild){
  boolean removed=false;
  if (aChild instanceof MenuItem) {
    removeItem((MenuItem)aChild);
    allItems.remove(aChild);
    removed=true;
  }
 else   if (aChild instanceof PlatypusMenuItemSeparator) {
    removeSeparator((PlatypusMenuItemSeparator)aChild);
    allItems.remove(aChild);
    removed=true;
  }
 else   if (aChild instanceof PlatypusMenu) {
    removeItem(((PlatypusMenu)aChild).getParentItem());
    allItems.remove(aChild);
    removed=true;
  }
  if (removed) {
    RemoveEvent.fire(this,aChild);
  }
  return removed;
}",0.974539069359087
145421,"@OnError public void onError(Session websocketSession,Throwable aError){
  session.inContext(() -> {
    if (onerror != null) {
      JSObject errorEvent=ScriptUtils.makeObj();
      errorEvent.setMember(""String_Node_Str"",aError.getMessage());
      onerror.call(session.getPublished(),new Object[]{errorEvent});
    }
  }
);
}","@OnError public void onError(Session websocketSession,Throwable aError){
  Runnable actor=() -> {
    if (onerror != null) {
      JSObject errorEvent=ScriptUtils.makeObj();
      errorEvent.setMember(""String_Node_Str"",aError.getMessage());
      onerror.call(session.getPublished(),new Object[]{errorEvent});
    }
  }
;
  if (ScriptUtils.getLock() == null) {
    session.inContext(actor);
  }
 else {
    final Object lock=ScriptUtils.getLock();
synchronized (lock) {
      actor.run();
    }
  }
}",0.7376058041112454
145422,"@ScriptFunction public void close(Double opCode,String aReason) throws Exception {
  if (opCode == null) {
    opCode=Double.valueOf(CloseReason.CloseCodes.NO_STATUS_CODE.getCode());
  }
  if (aReason == null) {
    aReason=""String_Node_Str"";
  }
  webSocketSession.close(new CloseReason(CloseReason.CloseCodes.getCloseCode(opCode.intValue()),aReason));
}","@ScriptFunction public void close(Double opCode,String aReason) throws Exception {
  if (opCode == null) {
    opCode=Double.valueOf(CloseReason.CloseCodes.NO_STATUS_CODE.getCode());
  }
  if (aReason == null) {
    aReason=""String_Node_Str"";
  }
  if (webSocketSession.isOpen()) {
    webSocketSession.close(new CloseReason(CloseReason.CloseCodes.getCloseCode(opCode.intValue()),aReason));
  }
}",0.9241011984021305
145423,"@ScriptFunction public void close(Double opCode,String aReason) throws Exception {
  if (opCode == null) {
    opCode=Double.valueOf(CloseReason.CloseCodes.NO_STATUS_CODE.getCode());
  }
  if (aReason == null) {
    aReason=""String_Node_Str"";
  }
  session.close(new CloseReason(CloseReason.CloseCodes.getCloseCode(opCode.intValue()),aReason));
}","@ScriptFunction public void close(Double opCode,String aReason) throws Exception {
  if (opCode == null) {
    opCode=Double.valueOf(CloseReason.CloseCodes.NO_STATUS_CODE.getCode());
  }
  if (aReason == null) {
    aReason=""String_Node_Str"";
  }
  if (session.isOpen()) {
    session.close(new CloseReason(CloseReason.CloseCodes.getCloseCode(opCode.intValue()),aReason));
  }
}",0.9558011049723756
145424,"public void rolledback() throws Exception {
  final Set<RowsetListener> lrowsetListeners=rowsetChangeSupport.getRowsetListeners();
  rowsetChangeSupport.setRowsetListeners(null);
  try {
    originalToCurrent();
  }
  finally {
    rowsetChangeSupport.setRowsetListeners(lrowsetListeners);
  }
  rowsetChangeSupport.fireRolledbackEvent();
}","public void rolledback() throws Exception {
  final Set<RowsetListener> lrowsetListeners=rowsetChangeSupport.getRowsetListeners();
  rowsetChangeSupport.setRowsetListeners(null);
  try {
    originalToCurrent();
    if (currentRowPos > current.size() + 1) {
      currentRowPos=current.size() + 1;
    }
 else     if (currentRowPos < 0) {
      currentRowPos=0;
    }
    if (current.isEmpty()) {
      currentRowPos=0;
    }
  }
  finally {
    rowsetChangeSupport.setRowsetListeners(lrowsetListeners);
  }
  rowsetChangeSupport.fireRolledbackEvent();
}",0.7606263982102909
145425,"@Override protected void onDetach(){
  super.onDetach();
  orphan(columnsChevron);
}","@Override protected void onDetach(){
  orphan(columnsChevron);
  super.onDetach();
}",0.7619047619047619
145426,"@Override public void onFailure(String reason){
  if (reason == null)   reason=""String_Node_Str"";
  rowsetChangeSupport.fireNetErrorEvent(reason);
  aCallback.onFailure(reason);
}","@Override public void onFailure(String reason){
  if (reason == null)   reason=""String_Node_Str"";
  rowsetChangeSupport.fireNetErrorEvent(reason);
  if (aCallback != null) {
    aCallback.onFailure(reason);
  }
}",0.9156010230179028
145427,"@Override protected void doWork(Rowset aRowset) throws Exception {
  if (aRowset != null) {
    if (activeFilter != null && activeFilter.isApplied()) {
      activeFilter.deactivate();
      activeFilter=null;
    }
    if (fields == null) {
      setFields(aRowset.getFields());
    }
    List<Row> rows=aRowset.getCurrent();
    aRowset.setCurrent(new ArrayList<Row>());
    aRowset.currentToOriginal();
    setCurrent(rows);
    currentToOriginal();
    invalidateFilters();
    if (!current.isEmpty()) {
      currentRowPos=1;
    }
    rowsetChangeSupport.fireRequeriedEvent();
    aCallback.onSuccess(Rowset.this);
  }
 else {
    throw new FlowProviderFailedException(BAD_FLOW_PROVIDER_RESULT_MSG);
  }
}","@Override protected void doWork(Rowset aRowset) throws Exception {
  if (aRowset != null) {
    if (activeFilter != null && activeFilter.isApplied()) {
      activeFilter.deactivate();
      activeFilter=null;
    }
    if (fields == null) {
      setFields(aRowset.getFields());
    }
    List<Row> rows=aRowset.getCurrent();
    aRowset.setCurrent(new ArrayList<Row>());
    aRowset.currentToOriginal();
    setCurrent(rows);
    currentToOriginal();
    invalidateFilters();
    if (!current.isEmpty()) {
      currentRowPos=1;
    }
    rowsetChangeSupport.fireRequeriedEvent();
    if (aCallback != null) {
      aCallback.onSuccess(Rowset.this);
    }
  }
 else {
    throw new FlowProviderFailedException(BAD_FLOW_PROVIDER_RESULT_MSG);
  }
}",0.9746401644962304
145428,"/** 
 * Queries some source for data, according to supplied parameters values. It queries data using flow provider installed on this rowset instance. It fires RowsetRequeriedEvent event. Call to refresh() will uninstall any installed filter and invalidate other filters, have been created on this rowset.
 * @param aParams Parameters values, ordered with some unknown criteria.
 * @see Parameters
 */
public Cancellable refresh(Parameters aParams,final Callback<Rowset,String> aCallback) throws Exception {
  if (flow != null) {
    if (rowsetChangeSupport.fireWillRequeryEvent()) {
      rowsetChangeSupport.fireBeforeRequery();
      if (aCallback != null) {
        return flow.refresh(aParams,new CallbackAdapter<Rowset,String>(){
          @Override protected void doWork(          Rowset aRowset) throws Exception {
            if (aRowset != null) {
              if (activeFilter != null && activeFilter.isApplied()) {
                activeFilter.deactivate();
                activeFilter=null;
              }
              if (fields == null) {
                setFields(aRowset.getFields());
              }
              List<Row> rows=aRowset.getCurrent();
              aRowset.setCurrent(new ArrayList<Row>());
              aRowset.currentToOriginal();
              setCurrent(rows);
              currentToOriginal();
              invalidateFilters();
              if (!current.isEmpty()) {
                currentRowPos=1;
              }
              rowsetChangeSupport.fireRequeriedEvent();
              aCallback.onSuccess(Rowset.this);
            }
 else {
              throw new FlowProviderFailedException(BAD_FLOW_PROVIDER_RESULT_MSG);
            }
          }
          @Override public void onFailure(          String reason){
            if (reason == null)             reason=""String_Node_Str"";
            rowsetChangeSupport.fireNetErrorEvent(reason);
            aCallback.onFailure(reason);
          }
        }
);
      }
 else {
      }
    }
    return null;
  }
 else {
    throw new MissingFlowProviderException();
  }
}","/** 
 * Queries some source for data, according to supplied parameters values. It queries data using flow provider installed on this rowset instance. It fires RowsetRequeriedEvent event. Call to refresh() will uninstall any installed filter and invalidate other filters, have been created on this rowset.
 * @param aParams Parameters values, ordered with some unknown criteria.
 * @see Parameters
 */
public Cancellable refresh(Parameters aParams,final Callback<Rowset,String> aCallback) throws Exception {
  if (flow != null) {
    if (rowsetChangeSupport.fireWillRequeryEvent()) {
      rowsetChangeSupport.fireBeforeRequery();
      return flow.refresh(aParams,new CallbackAdapter<Rowset,String>(){
        @Override protected void doWork(        Rowset aRowset) throws Exception {
          if (aRowset != null) {
            if (activeFilter != null && activeFilter.isApplied()) {
              activeFilter.deactivate();
              activeFilter=null;
            }
            if (fields == null) {
              setFields(aRowset.getFields());
            }
            List<Row> rows=aRowset.getCurrent();
            aRowset.setCurrent(new ArrayList<Row>());
            aRowset.currentToOriginal();
            setCurrent(rows);
            currentToOriginal();
            invalidateFilters();
            if (!current.isEmpty()) {
              currentRowPos=1;
            }
            rowsetChangeSupport.fireRequeriedEvent();
            if (aCallback != null) {
              aCallback.onSuccess(Rowset.this);
            }
          }
 else {
            throw new FlowProviderFailedException(BAD_FLOW_PROVIDER_RESULT_MSG);
          }
        }
        @Override public void onFailure(        String reason){
          if (reason == null)           reason=""String_Node_Str"";
          rowsetChangeSupport.fireNetErrorEvent(reason);
          if (aCallback != null) {
            aCallback.onFailure(reason);
          }
        }
      }
);
    }
    return null;
  }
 else {
    throw new MissingFlowProviderException();
  }
}",0.6841466375333819
145429,"public static String relativeUri(){
  String pageUrl=GWT.getHostPageBaseURL();
  return pageUrl.substring(0,pageUrl.length() - 1);
}","public static String relativeUri(){
  NodeList<com.google.gwt.dom.client.Element> metas=com.google.gwt.dom.client.Document.get().getHead().getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < metas.getLength(); i++) {
    com.google.gwt.dom.client.Element meta=metas.getItem(i);
    if (""String_Node_Str"".equalsIgnoreCase(meta.getAttribute(""String_Node_Str""))) {
      return meta.getAttribute(""String_Node_Str"");
    }
  }
  String pageUrl=GWT.getHostPageBaseURL();
  pageUrl=pageUrl.substring(0,pageUrl.length() - 1);
  return pageUrl;
}",0.3681885125184094
145430,"public static JavaScriptObject jsUpload(PublishedFile aFile,String aName,final JavaScriptObject aCompleteCallback,final JavaScriptObject aProgresssCallback,final JavaScriptObject aErrorCallback){
  if (aFile != null) {
    Cancellable cancellable=requestUpload(aFile,aName,new Callback<ProgressEvent,String>(){
      protected boolean completed;
      public void onSuccess(      ProgressEvent aResult){
        try {
          if (!completed) {
            if (aProgresssCallback != null) {
              Utils.executeScriptEventVoid(aProgresssCallback,aProgresssCallback,aResult);
            }
            if (aResult.isComplete()) {
              completed=true;
              if (aCompleteCallback != null) {
                Utils.executeScriptEventVoid(aCompleteCallback,aCompleteCallback,Utils.toJs(""String_Node_Str""));
              }
            }
          }
        }
 catch (        Exception ex) {
          Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
      public void onFailure(      String reason){
        if (aErrorCallback != null) {
          try {
            Utils.executeScriptEventVoid(aErrorCallback,aErrorCallback,Utils.toJs(reason));
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
    }
);
    return Utils.publishCancellable(cancellable);
  }
 else   return null;
}","public static JavaScriptObject jsUpload(PublishedFile aFile,String aName,final JavaScriptObject aCompleteCallback,final JavaScriptObject aProgresssCallback,final JavaScriptObject aErrorCallback){
  if (aFile != null) {
    Cancellable cancellable=AppClient.getInstance().startUploadRequest(aFile,aName,new Callback<ProgressEvent,String>(){
      protected boolean completed;
      public void onSuccess(      ProgressEvent aResult){
        try {
          if (!completed) {
            if (aProgresssCallback != null) {
              Utils.executeScriptEventVoid(aProgresssCallback,aProgresssCallback,aResult);
            }
            if (aResult.isComplete()) {
              completed=true;
              if (aCompleteCallback != null) {
                Utils.executeScriptEventVoid(aCompleteCallback,aCompleteCallback,Utils.toJs(""String_Node_Str""));
              }
            }
          }
        }
 catch (        Exception ex) {
          Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
      public void onFailure(      String reason){
        if (aErrorCallback != null) {
          try {
            Utils.executeScriptEventVoid(aErrorCallback,aErrorCallback,Utils.toJs(reason));
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
    }
);
    return Utils.publishCancellable(cancellable);
  }
 else   return null;
}",0.98531922157733
145431,"public Object requestServerMethodExecution(final String aModuleName,final String aMethodName,final JsArrayString aParams,final JavaScriptObject onSuccess,final JavaScriptObject onFailure) throws Exception {
  String[] convertedParams=new String[aParams.length()];
  for (int i=0; i < aParams.length(); i++)   convertedParams[i]=param(PlatypusHttpRequestParams.PARAMS_ARRAY,aParams.get(i));
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteServerModuleMethod)),param(PlatypusHttpRequestParams.MODULE_NAME,aModuleName),param(PlatypusHttpRequestParams.METHOD_NAME,aMethodName),params(convertedParams));
  if (onSuccess != null) {
    startApiRequest(null,query,null,RequestBuilder.GET,new CallbackAdapter<XMLHttpRequest,XMLHttpRequest>(){
      @Override public void doWork(      XMLHttpRequest aResponse) throws Exception {
        String responseType=aResponse.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
          }
 else           if (responseType.contains(REPORT_LOCATION_CONTENT_TYPE)) {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Application.createReport(aResponse.getResponseText()));
          }
 else {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
          }
        }
 else {
          Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
        }
      }
      @Override public void onFailure(      XMLHttpRequest aResponse){
        if (onFailure != null) {
          try {
            Utils.executeScriptEventVoid(onSuccess,onFailure,Utils.toJs(aResponse.getStatusText()));
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
    }
);
    return null;
  }
 else {
    XMLHttpRequest2 executed=syncRequest(null,query,ResponseType.Default);
    if (executed != null) {
      if (executed.getStatus() == Response.SC_OK) {
        String responseType=executed.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            return Utils.toJs(executed.getResponseText());
          }
 else           if (responseType.contains(REPORT_LOCATION_CONTENT_TYPE)) {
            return Application.createReport(executed.getResponseText());
          }
 else {
            return Utils.toJs(executed.getResponseText());
          }
        }
 else {
          return Utils.toJs(executed.getResponseText());
        }
      }
 else       throw new Exception(executed.getStatusText());
    }
 else {
      return null;
    }
  }
}","public Object requestServerMethodExecution(final String aModuleName,final String aMethodName,final JsArrayString aParams,final JavaScriptObject onSuccess,final JavaScriptObject onFailure) throws Exception {
  String[] convertedParams=new String[aParams.length()];
  for (int i=0; i < aParams.length(); i++)   convertedParams[i]=param(PlatypusHttpRequestParams.PARAMS_ARRAY,aParams.get(i));
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteServerModuleMethod)),param(PlatypusHttpRequestParams.MODULE_NAME,aModuleName),param(PlatypusHttpRequestParams.METHOD_NAME,aMethodName),params(convertedParams));
  if (onSuccess != null) {
    startApiRequest(null,query,null,RequestBuilder.GET,new CallbackAdapter<XMLHttpRequest,XMLHttpRequest>(){
      @Override public void doWork(      XMLHttpRequest aResponse) throws Exception {
        String responseType=aResponse.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
          }
 else           if (responseType.contains(REPORT_LOCATION_CONTENT_TYPE)) {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Application.createReport(aResponse.getResponseText()));
          }
 else {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
          }
        }
 else {
          Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
        }
      }
      @Override public void onFailure(      XMLHttpRequest aResponse){
        if (onFailure != null) {
          try {
            Utils.executeScriptEventVoid(onSuccess,onFailure,Utils.toJs(aResponse.getStatusText()));
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
    }
);
    return null;
  }
 else {
    XMLHttpRequest2 executed=syncApiRequest(null,query,ResponseType.Default);
    if (executed != null) {
      if (executed.getStatus() == Response.SC_OK) {
        String responseType=executed.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            return Utils.toJs(executed.getResponseText());
          }
 else           if (responseType.contains(REPORT_LOCATION_CONTENT_TYPE)) {
            return Application.createReport(executed.getResponseText());
          }
 else {
            return Utils.toJs(executed.getResponseText());
          }
        }
 else {
          return Utils.toJs(executed.getResponseText());
        }
      }
 else       throw new Exception(executed.getStatusText());
    }
 else {
      return null;
    }
  }
}",0.9995087604388406
145432,"public void startDownloadRequest(String aUrlPrefix,final int aRequestType,Map<String,String> aParams,RequestBuilder.Method aMethod) throws Exception {
  final Frame frame=new Frame();
  frame.setVisible(false);
  frame.addLoadHandler(new LoadHandler(){
    @Override public void onLoad(    LoadEvent event){
      Timer timer=new Timer(){
        @Override public void run(){
          frame.removeFromParent();
        }
      }
;
      timer.schedule(2000);
    }
  }
);
  String query=""String_Node_Str"";
  for (  Entry<String,String> ent : aParams.entrySet()) {
    query+=param(ent.getKey(),ent.getValue()) + ""String_Node_Str"";
  }
  query+=param(PlatypusHttpRequestParams.TYPE,String.valueOf(aRequestType));
  frame.setUrl(apiUrl + aUrlPrefix + ""String_Node_Str""+ query);
  RootPanel.get().add(frame);
}","public void startDownloadRequest(String aUrlPrefix,final int aRequestType,Map<String,String> aParams,RequestBuilder.Method aMethod) throws Exception {
  final Frame frame=new Frame();
  frame.setVisible(false);
  frame.addLoadHandler(new LoadHandler(){
    @Override public void onLoad(    LoadEvent event){
      Timer timer=new Timer(){
        @Override public void run(){
          frame.removeFromParent();
        }
      }
;
      timer.schedule(2000);
    }
  }
);
  String query=""String_Node_Str"";
  for (  Map.Entry<String,String> ent : aParams.entrySet()) {
    query+=param(ent.getKey(),ent.getValue()) + ""String_Node_Str"";
  }
  query+=param(PlatypusHttpRequestParams.TYPE,String.valueOf(aRequestType));
  frame.setUrl(apiUrl + aUrlPrefix + ""String_Node_Str""+ query);
  RootPanel.get().add(frame);
}",0.9975308641975308
145433,"public String format(Object aValue) throws ParseException {
  if (numberFormat != null) {
    if (aValue instanceof Number)     return numberFormat.format((Number)aValue);
 else     return null;
  }
 else   if (dateFormat != null) {
    if (aValue instanceof Date)     return dateFormat.format((Date)aValue);
 else     return null;
  }
 else   if (maskFormat != null) {
    return maskFormat.format(aValue);
  }
 else   if (regExpFormat != null) {
    if (aValue instanceof String)     return regExpFormat.format((String)aValue);
 else     return null;
  }
 else   if (bypassFormat != null) {
    if (aValue instanceof String)     return bypassFormat.format((String)aValue);
 else     return null;
  }
 else {
    return aValue != null ? aValue.toString() : null;
  }
}","public String format(Object aValue) throws ParseException {
  if (numberFormat != null) {
    if (aValue instanceof Number)     return numberFormat.format((Number)aValue);
 else     return null;
  }
 else   if (dateFormat != null) {
    if (aValue instanceof Date)     return dateFormat.format((Date)aValue);
 else     return null;
  }
 else   if (maskFormat != null) {
    return maskFormat.format(aValue);
  }
 else   if (regExpFormat != null) {
    if (aValue instanceof String)     return regExpFormat.format((String)aValue);
 else     return null;
  }
 else   if (bypassFormat != null) {
    return aValue != null ? bypassFormat.format(String.valueOf(aValue)) : null;
  }
 else {
    return aValue != null ? aValue.toString() : null;
  }
}",0.9279576999339062
145434,"public StyledListBox(boolean isMultipleSelect){
  super(isMultipleSelect);
  addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      int selected=getSelectedIndex();
      if (selected == -1) {
        setValue(null,true);
      }
 else {
        setValue(associatedValues.get(selected),true);
      }
    }
  }
);
}","public StyledListBox(boolean isMultipleSelect){
  super();
  setMultipleSelect(isMultipleSelect);
  addChangeHandler(new ChangeHandler(){
    @Override public void onChange(    ChangeEvent event){
      int selected=getSelectedIndex();
      if (selected == -1) {
        setValue(null,true);
      }
 else {
        setValue(associatedValues.get(selected),true);
      }
    }
  }
);
}",0.9692923898531376
145435,"public void addItem(String aLabel,HasDirection.Direction dir,String aKey,T aAssociatedValue,String aClassName){
  super.addItem(aLabel,dir,aKey);
  associatedValues.set(getItemCount() - 1,aAssociatedValue);
  setItemStyleName(getItemCount() - 1,aClassName);
}","public void addItem(String aLabel,HasDirection.Direction dir,String aKey,T aAssociatedValue,String aClassName){
  super.addItem(aLabel != null ? aLabel : ""String_Node_Str"",dir,aKey);
  associatedValues.set(getItemCount() - 1,aAssociatedValue);
  setItemStyleName(getItemCount() - 1,aClassName);
}",0.9333333333333332
145436,"@Override public void insertItem(String item,Direction dir,String value,int index){
  super.insertItem(item,dir,value,index);
  if (index == -1) {
    associatedValues.add(null);
  }
 else {
    associatedValues.add(index,null);
  }
  indicies=null;
}","@Override public void insertItem(String aLabel,Direction dir,String value,int index){
  super.insertItem(aLabel != null ? aLabel : ""String_Node_Str"",dir,value,index);
  if (index == -1) {
    associatedValues.add(null);
  }
 else {
    associatedValues.add(index,null);
  }
  indicies=null;
}",0.7108655616942909
145437,"@Override protected Widget getMovableTarget(){
  return popup;
}","@Override protected Widget getMovableTarget(){
  return popup != null ? popup : this;
}",0.847682119205298
145438,"public void show(){
  row=0;
  col=0;
  popup.center();
  activate();
  field.setFocus(true);
}","public void show(){
  row=0;
  col=0;
  popup.center();
  activate();
  Scheduler.get().scheduleDeferred(new ScheduledCommand(){
    @Override public void execute(){
      field.setFocus(true);
    }
  }
);
}",0.6270627062706271
145439,"@Override public void onKeyDown(KeyDownEvent event){
  if (event.getNativeKeyCode() == KeyCodes.KEY_F) {
    event.stopPropagation();
    event.preventDefault();
    ModelGrid.this.find();
  }
 else   if (event.getNativeKeyCode() == KeyCodes.KEY_F3) {
    event.stopPropagation();
    event.preventDefault();
    if (finder != null) {
      finder.findNext();
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  if ((event.isMetaKeyDown() || event.isControlKeyDown()) && event.getNativeKeyCode() == KeyCodes.KEY_F) {
    event.stopPropagation();
    event.preventDefault();
    ModelGrid.this.find();
  }
 else   if (event.getNativeKeyCode() == KeyCodes.KEY_F3) {
    event.stopPropagation();
    event.preventDefault();
    if (finder != null) {
      finder.findNext();
    }
  }
}",0.93099121706399
145440,"public ModelGrid(){
  super(new RowKeyProvider());
  addDomHandler(new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      try {
        if (event.getNativeKeyCode() == KeyCodes.KEY_DELETE && deletable) {
          if (getSelectionModel() instanceof SetSelectionModel<?>) {
            SetSelectionModel<Row> rowSelection=(SetSelectionModel<Row>)getSelectionModel();
            rowsSource.getRowset().delete(rowSelection.getSelectedSet());
          }
        }
 else         if (event.getNativeKeyCode() == KeyCodes.KEY_INSERT && insertable) {
          rowsSource.getRowset().insert();
          Row inserted=rowsSource.getRowset().getCurrentRow();
          if (inserted != null && getSelectionModel() instanceof SetSelectionModel<?>) {
            SetSelectionModel<Row> rowSelection=(SetSelectionModel<Row>)getSelectionModel();
            rowSelection.clear();
            rowSelection.setSelected(inserted,true);
          }
        }
      }
 catch (      RowsetException e) {
        Logger.getLogger(ModelGrid.class.getName()).log(Level.SEVERE,null,e);
      }
    }
  }
,KeyUpEvent.getType());
  addDomHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_F) {
        event.stopPropagation();
        event.preventDefault();
        ModelGrid.this.find();
      }
 else       if (event.getNativeKeyCode() == KeyCodes.KEY_F3) {
        event.stopPropagation();
        event.preventDefault();
        if (finder != null) {
          finder.findNext();
        }
      }
    }
  }
,KeyDownEvent.getType());
}","public ModelGrid(){
  super(new RowKeyProvider());
  addDomHandler(new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      try {
        if (event.getNativeKeyCode() == KeyCodes.KEY_DELETE && deletable) {
          if (getSelectionModel() instanceof SetSelectionModel<?>) {
            SetSelectionModel<Row> rowSelection=(SetSelectionModel<Row>)getSelectionModel();
            rowsSource.getRowset().delete(rowSelection.getSelectedSet());
          }
        }
 else         if (event.getNativeKeyCode() == KeyCodes.KEY_INSERT && insertable) {
          rowsSource.getRowset().insert();
          Row inserted=rowsSource.getRowset().getCurrentRow();
          if (inserted != null && getSelectionModel() instanceof SetSelectionModel<?>) {
            SetSelectionModel<Row> rowSelection=(SetSelectionModel<Row>)getSelectionModel();
            rowSelection.clear();
            rowSelection.setSelected(inserted,true);
          }
        }
      }
 catch (      RowsetException e) {
        Logger.getLogger(ModelGrid.class.getName()).log(Level.SEVERE,null,e);
      }
    }
  }
,KeyUpEvent.getType());
  addDomHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      if ((event.isMetaKeyDown() || event.isControlKeyDown()) && event.getNativeKeyCode() == KeyCodes.KEY_F) {
        event.stopPropagation();
        event.preventDefault();
        ModelGrid.this.find();
      }
 else       if (event.getNativeKeyCode() == KeyCodes.KEY_F3) {
        event.stopPropagation();
        event.preventDefault();
        if (finder != null) {
          finder.findNext();
        }
      }
    }
  }
,KeyDownEvent.getType());
}",0.98344869094192
145441,"@Template(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + LEFT_RIGHT_CELL_PADDING + ""String_Node_Str""+ LEFT_RIGHT_CELL_PADDING+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") public SafeHtml cell(String aCssRuleName,double aRowsHeight);","@Template(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + LEFT_RIGHT_CELL_PADDING + ""String_Node_Str""+ LEFT_RIGHT_CELL_PADDING+ ""String_Node_Str""+ ""String_Node_Str"") public SafeHtml cell(String aCssRuleName,double aRowsHeight);",0.9617706237424548
145442,"@Template(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") public SafeHtml td(String aCssRuleName,double hBorderWidth,double vBorderWidth,String aLinesColor);","@Template(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") public SafeHtml td(String aCssRuleName,double hBorderWidth,double vBorderWidth,String aLinesColor);",0.9625246548323472
145443,"@Override protected void renderCell(Context context,Row valuesRow,SafeHtmlBuilder sb){
  if (getEditor() instanceof ModelCombo) {
    try {
      ModelCombo combo=(ModelCombo)getEditor();
      if (combo.isValidBindings()) {
        Rowset valuesRowset=combo.getValueElement().entity.getRowset();
        Rowset displaysRowset=combo.getDisplayElement().entity.getRowset();
        Row displayRow=valuesRow;
        if (valuesRowset != displaysRowset) {
          combo.getValueElement().entity.scrollTo(valuesRow);
          displayRow=displaysRowset.getCurrentRow();
        }
        String label=displayRow != null ? combo.getConverter().convert(displayRow.getColumnObject(combo.getDisplayElement().getColIndex())) : ""String_Node_Str"";
        sb.appendEscaped(label);
      }
    }
 catch (    Exception e) {
      sb.appendEscaped(e.getMessage());
    }
  }
 else {
    sb.appendEscaped(String.valueOf(valuesRow));
  }
}","@Override protected void renderCell(Context context,Row valuesRow,SafeHtmlBuilder sb){
  if (getEditor() instanceof ModelCombo) {
    try {
      ModelCombo combo=(ModelCombo)getEditor();
      if (combo.isValidBindings()) {
        Row displayRow=valuesRow;
        String label=displayRow != null ? combo.getConverter().convert(displayRow.getColumnObject(combo.getDisplayElement().getColIndex())) : ""String_Node_Str"";
        sb.appendEscaped(label);
      }
    }
 catch (    Exception e) {
      sb.appendEscaped(e.getMessage());
    }
  }
 else {
    sb.appendEscaped(String.valueOf(valuesRow));
  }
}",0.6492488569562378
145444,"public LookupModelGridColumn(String aName){
  super(new TreeExpandableCell<Row,Row>(new PlatypusLookupEditorCell()),aName,null,null,new RowRowValueConverter());
  setEditor(new ModelCombo());
  ((ModelCombo)getEditor()).setForceRedraw(true);
  ((PlatypusLookupEditorCell)getTargetCell()).setRenderer(new CellRenderer<Row>(){
    @Override public boolean render(    Context context,    String aId,    Row value,    SafeHtmlBuilder sb){
      LookupModelGridColumn column=LookupModelGridColumn.this;
      JavaScriptObject onRender=column.getOnRender() != null ? column.getOnRender() : column.getGrid().getOnRender();
      if (onRender != null) {
        try {
          PublishedStyle styleToRender=null;
          SafeHtmlBuilder lsb=new SafeHtmlBuilder();
          String toRender=String.valueOf(value);
          PublishedCell cellToRender=calcContextPublishedCell(column.getPublished(),onRender,context,column.getColumnModelRef(),toRender,rowsEntity);
          if (cellToRender != null) {
            styleToRender=cellToRender.getStyle();
            if (cellToRender.getDisplay() != null)             toRender=cellToRender.getDisplay();
          }
          if (toRender == null)           lsb.append(SafeHtmlUtils.fromTrustedString(""String_Node_Str""));
 else           lsb.append(SafeHtmlUtils.fromString(toRender));
          styleToRender=grid.complementPublishedStyle(styleToRender);
          String decorId=ControlsUtils.renderDecorated(lsb,aId,styleToRender,sb);
          if (cellToRender != null) {
            if (context instanceof RenderedCellContext) {
              ((RenderedCellContext)context).setStyle(styleToRender);
            }
            LookupModelGridColumn.this.bindGridDisplayCallback(decorId,cellToRender);
            if (cellToRender.getStyle() != null) {
              ModelGridColumn.bindIconCallback(cellToRender.getStyle(),decorId);
            }
          }
        }
 catch (        Exception e) {
          sb.append(SafeHtmlUtils.fromString(e.getMessage()));
        }
        return true;
      }
 else       return false;
    }
  }
);
}","public LookupModelGridColumn(String aName){
  super(new TreeExpandableCell<Row,Row>(new PlatypusLookupEditorCell()),aName,null,null,new RowRowValueConverter());
  setEditor(new ModelCombo());
  ((ModelCombo)getEditor()).setForceRedraw(true);
  ((PlatypusLookupEditorCell)getTargetCell()).setRenderer(new CellRenderer<Row>(){
    @Override public boolean render(    Context context,    String aId,    Row value,    SafeHtmlBuilder sb){
      LookupModelGridColumn column=LookupModelGridColumn.this;
      JavaScriptObject onRender=column.getOnRender() != null ? column.getOnRender() : column.getGrid().getOnRender();
      if (onRender != null) {
        try {
          PublishedStyle styleToRender=null;
          SafeHtmlBuilder lsb=new SafeHtmlBuilder();
          String toRender=value != null ? ((ModelCombo)getEditor()).getConverter().convert(value.getColumnObject(displayValueRef.getColIndex())) : ""String_Node_Str"";
          PublishedCell cellToRender=calcContextPublishedCell(column.getPublished(),onRender,context,column.getColumnModelRef(),toRender,rowsEntity);
          if (cellToRender != null) {
            styleToRender=cellToRender.getStyle();
            if (cellToRender.getDisplay() != null)             toRender=cellToRender.getDisplay();
          }
          if (toRender == null)           lsb.append(SafeHtmlUtils.fromTrustedString(""String_Node_Str""));
 else           lsb.append(SafeHtmlUtils.fromString(toRender));
          styleToRender=grid.complementPublishedStyle(styleToRender);
          String decorId=ControlsUtils.renderDecorated(lsb,aId,styleToRender,sb);
          if (cellToRender != null) {
            if (context instanceof RenderedCellContext) {
              ((RenderedCellContext)context).setStyle(styleToRender);
            }
            LookupModelGridColumn.this.bindGridDisplayCallback(decorId,cellToRender);
            if (cellToRender.getStyle() != null) {
              ModelGridColumn.bindIconCallback(cellToRender.getStyle(),decorId);
            }
          }
        }
 catch (        Exception e) {
          sb.append(SafeHtmlUtils.fromString(e.getMessage()));
        }
        return true;
      }
 else       return false;
    }
  }
);
}",0.8477500582886454
145445,"@Override public boolean render(Context context,String aId,Row value,SafeHtmlBuilder sb){
  LookupModelGridColumn column=LookupModelGridColumn.this;
  JavaScriptObject onRender=column.getOnRender() != null ? column.getOnRender() : column.getGrid().getOnRender();
  if (onRender != null) {
    try {
      PublishedStyle styleToRender=null;
      SafeHtmlBuilder lsb=new SafeHtmlBuilder();
      String toRender=String.valueOf(value);
      PublishedCell cellToRender=calcContextPublishedCell(column.getPublished(),onRender,context,column.getColumnModelRef(),toRender,rowsEntity);
      if (cellToRender != null) {
        styleToRender=cellToRender.getStyle();
        if (cellToRender.getDisplay() != null)         toRender=cellToRender.getDisplay();
      }
      if (toRender == null)       lsb.append(SafeHtmlUtils.fromTrustedString(""String_Node_Str""));
 else       lsb.append(SafeHtmlUtils.fromString(toRender));
      styleToRender=grid.complementPublishedStyle(styleToRender);
      String decorId=ControlsUtils.renderDecorated(lsb,aId,styleToRender,sb);
      if (cellToRender != null) {
        if (context instanceof RenderedCellContext) {
          ((RenderedCellContext)context).setStyle(styleToRender);
        }
        LookupModelGridColumn.this.bindGridDisplayCallback(decorId,cellToRender);
        if (cellToRender.getStyle() != null) {
          ModelGridColumn.bindIconCallback(cellToRender.getStyle(),decorId);
        }
      }
    }
 catch (    Exception e) {
      sb.append(SafeHtmlUtils.fromString(e.getMessage()));
    }
    return true;
  }
 else   return false;
}","@Override public boolean render(Context context,String aId,Row value,SafeHtmlBuilder sb){
  LookupModelGridColumn column=LookupModelGridColumn.this;
  JavaScriptObject onRender=column.getOnRender() != null ? column.getOnRender() : column.getGrid().getOnRender();
  if (onRender != null) {
    try {
      PublishedStyle styleToRender=null;
      SafeHtmlBuilder lsb=new SafeHtmlBuilder();
      String toRender=value != null ? ((ModelCombo)getEditor()).getConverter().convert(value.getColumnObject(displayValueRef.getColIndex())) : ""String_Node_Str"";
      PublishedCell cellToRender=calcContextPublishedCell(column.getPublished(),onRender,context,column.getColumnModelRef(),toRender,rowsEntity);
      if (cellToRender != null) {
        styleToRender=cellToRender.getStyle();
        if (cellToRender.getDisplay() != null)         toRender=cellToRender.getDisplay();
      }
      if (toRender == null)       lsb.append(SafeHtmlUtils.fromTrustedString(""String_Node_Str""));
 else       lsb.append(SafeHtmlUtils.fromString(toRender));
      styleToRender=grid.complementPublishedStyle(styleToRender);
      String decorId=ControlsUtils.renderDecorated(lsb,aId,styleToRender,sb);
      if (cellToRender != null) {
        if (context instanceof RenderedCellContext) {
          ((RenderedCellContext)context).setStyle(styleToRender);
        }
        LookupModelGridColumn.this.bindGridDisplayCallback(decorId,cellToRender);
        if (cellToRender.getStyle() != null) {
          ModelGridColumn.bindIconCallback(cellToRender.getStyle(),decorId);
        }
      }
    }
 catch (    Exception e) {
      sb.append(SafeHtmlUtils.fromString(e.getMessage()));
    }
    return true;
  }
 else   return false;
}",0.9554680399878824
145446,"@Override protected void clearValue(){
  super.clearValue();
  ActionEvent.fire(this,this);
}","@Override protected void clearValue(){
  try {
    setJsValue(null,true);
    ActionEvent.fire(this,this);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.6486486486486487
145447,"public static PublishedFont parseFont(Element fontTag) throws Exception {
  if (fontTag != null) {
    String fontFamily=null;
    if (fontTag.hasAttribute(""String_Node_Str"")) {
      fontFamily=fontTag.getAttribute(""String_Node_Str"");
    }
    int fontSize=0;
    if (fontTag.hasAttribute(""String_Node_Str"")) {
      fontSize=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",10);
    }
    int fontStyle=0;
    if (fontTag.hasAttribute(""String_Node_Str"")) {
      fontStyle=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",0);
    }
    return PublishedFont.create(fontFamily,fontStyle,fontSize);
  }
 else {
    return null;
  }
}","public static PublishedFont parseFont(Element fontTag) throws Exception {
  if (fontTag != null) {
    String fontFamily=null;
    if (fontTag.hasAttribute(""String_Node_Str"")) {
      fontFamily=fontTag.getAttribute(""String_Node_Str"");
    }
    int fontSize=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",10);
    int fontStyle=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",0);
    return PublishedFont.create(fontFamily,fontStyle,fontSize);
  }
 else {
    return null;
  }
}",0.738243123336291
145448,"private void setIconAndAlign(final ImageParagraph component,Element aTag) throws Exception {
  if (aTag.hasAttribute(""String_Node_Str"")) {
    String text=aTag.getAttribute(""String_Node_Str"");
    boolean html=text != null && text.startsWith(""String_Node_Str"");
    if (html) {
      component.setHTML(text.substring(""String_Node_Str"".length()));
    }
 else {
      component.setText(text);
    }
  }
  if (aTag.hasAttribute(""String_Node_Str""))   component.setIconTextGap(Utils.getIntegerAttribute(aTag,""String_Node_Str"",4));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    PlatypusImageResource.load(aTag.getAttribute(""String_Node_Str""),new CallbackAdapter<ImageResource,String>(){
      @Override public void onFailure(      String reason){
        Logger.getLogger(WidgetsFactory.class.getName()).log(Level.SEVERE,""String_Node_Str"" + reason);
      }
      @Override protected void doWork(      ImageResource aResult) throws Exception {
        component.setImageResource(aResult);
      }
    }
);
  }
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
}","private void setIconAndAlign(final ImageParagraph component,Element aTag) throws Exception {
  if (aTag.hasAttribute(""String_Node_Str"")) {
    String text=aTag.getAttribute(""String_Node_Str"");
    boolean html=text != null && text.startsWith(""String_Node_Str"");
    if (html) {
      component.setHTML(text.substring(""String_Node_Str"".length()));
    }
 else {
      component.setText(text);
    }
  }
  component.setIconTextGap(Utils.getIntegerAttribute(aTag,""String_Node_Str"",4));
  component.setHorizontalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  component.setVerticalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.CENTER));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    PlatypusImageResource.load(aTag.getAttribute(""String_Node_Str""),new CallbackAdapter<ImageResource,String>(){
      @Override public void onFailure(      String reason){
        Logger.getLogger(WidgetsFactory.class.getName()).log(Level.SEVERE,""String_Node_Str"" + reason);
      }
      @Override protected void doWork(      ImageResource aResult) throws Exception {
        component.setImageResource(aResult);
      }
    }
);
  }
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
}",0.953449983492902
145449,"@Override protected int commit(final String aDatasourceId,final List<Change> aLog) throws Exception {
  for (  String validatorName : validators.keySet()) {
    Collection<String> datasourcesUnderControl=validators.get(validatorName);
    if (((datasourcesUnderControl == null || datasourcesUnderControl.isEmpty()) && aDatasourceId == null) || (datasourcesUnderControl != null && datasourcesUnderControl.contains(aDatasourceId))) {
      JSObject validator=ScriptUtils.createModule(validatorName);
      if (validator != null) {
        Object oValidate=validator.getMember(""String_Node_Str"");
        if (oValidate instanceof JSObject) {
          JSObject fValidate=(JSObject)oValidate;
          Object oResult=ScriptUtils.toJava(fValidate.call(validator,new Object[]{ScriptUtils.toJs(aLog.toArray()),aDatasourceId}));
          if (oResult != null && Boolean.FALSE.equals(ScriptUtils.toJava(oResult))) {
            break;
          }
        }
 else {
          Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
        }
      }
 else {
        Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
      }
    }
  }
  if (aDatasourceId != null) {
    ApplicationElement appElement=getAppCache().get(aDatasourceId);
    if (appElement != null && appElement.getType() == ClientConstants.ET_COMPONENT) {
      JSObject dataSourceApplier=ScriptUtils.createModule(aDatasourceId);
      if (dataSourceApplier != null) {
        Object oApply=dataSourceApplier.getMember(""String_Node_Str"");
        if (oApply instanceof JSObject && ((JSObject)oApply).isFunction()) {
          JSObject fApply=(JSObject)oApply;
          fApply.call(dataSourceApplier,new Object[]{ScriptUtils.toJs(aLog.toArray())});
        }
      }
    }
  }
  boolean consumed=true;
  for (  Change change : aLog) {
    if (!change.consumed) {
      consumed=false;
    }
  }
  if (!consumed) {
    return super.commit(aDatasourceId,aLog);
  }
 else {
    aLog.clear();
    return 0;
  }
}","@Override protected int commit(final String aDatasourceId,final List<Change> aLog) throws Exception {
  for (  String validatorName : validators.keySet()) {
    Collection<String> datasourcesUnderControl=validators.get(validatorName);
    if (((datasourcesUnderControl == null || datasourcesUnderControl.isEmpty()) && aDatasourceId == null) || (datasourcesUnderControl != null && datasourcesUnderControl.contains(aDatasourceId))) {
      JSObject validator=ScriptUtils.createModule(validatorName);
      if (validator != null) {
        Object oValidate=validator.getMember(""String_Node_Str"");
        if (oValidate instanceof JSObject) {
          JSObject fValidate=(JSObject)oValidate;
          Object oResult=ScriptUtils.toJava(fValidate.call(validator,new Object[]{ScriptUtils.toJs(aLog.toArray()),aDatasourceId}));
          if (oResult != null && Boolean.FALSE.equals(ScriptUtils.toJava(oResult))) {
            break;
          }
        }
 else {
          Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
        }
      }
 else {
        Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
      }
    }
  }
  if (aDatasourceId != null) {
    ApplicationElement appElement=getAppCache().get(aDatasourceId);
    if (appElement != null && appElement.getType() == ClientConstants.ET_COMPONENT) {
      JSObject dataSourceApplier=createModule(aDatasourceId);
      if (dataSourceApplier != null) {
        Object oApply=dataSourceApplier.getMember(""String_Node_Str"");
        if (oApply instanceof JSObject && ((JSObject)oApply).isFunction()) {
          JSObject fApply=(JSObject)oApply;
          fApply.call(dataSourceApplier,new Object[]{ScriptUtils.toJs(aLog.toArray())});
        }
      }
    }
  }
  boolean consumed=true;
  for (  Change change : aLog) {
    if (!change.consumed) {
      consumed=false;
    }
  }
  if (!consumed) {
    return super.commit(aDatasourceId,aLog);
  }
 else {
    aLog.clear();
    return 0;
  }
}",0.9971014492753624
145450,"@Override protected SqlQuery getNewEntry(final String aQueryId) throws Exception {
  ApplicationElement ae=appCache.get(aQueryId);
  if (ae != null && ae.getType() == ClientConstants.ET_COMPONENT) {
    final String aDatasourceId=aQueryId;
    SqlQuery query=new SqlQuery(ScriptedDatabasesClient.this){
      @Override public SqlCompiledQuery compile() throws UnboundSqlParameterException, Exception {
        SqlCompiledQuery compiled=new SqlCompiledQuery(ScriptedDatabasesClient.this,aDatasourceId,aQueryId,JAVASCRIPT_QUERY_CONTENTS,getParameters(),getFields(),Collections.<String>emptySet(),Collections.<String>emptySet());
        return compiled;
      }
      @Override public boolean isPublicAccess(){
        return true;
      }
    }
;
    PlatypusScriptedResource.executeScriptResource(aQueryId);
    JSObject schemaContainer=ScriptUtils.createModule(aQueryId);
    if (schemaContainer != null) {
      Fields fields=new Fields();
      query.setFields(fields);
      query.setEntityId(aQueryId);
      query.setDbId(aDatasourceId);
      Object oSchema=schemaContainer.hasMember(""String_Node_Str"") ? schemaContainer.getMember(""String_Node_Str"") : null;
      if (oSchema instanceof JSObject) {
        readScriptFields(aQueryId,(JSObject)oSchema,fields);
        Parameters params;
        Object oParams=schemaContainer.hasMember(""String_Node_Str"") ? schemaContainer.getMember(""String_Node_Str"") : null;
        if (oParams instanceof JSObject) {
          params=new Parameters();
          readScriptFields(aQueryId,(JSObject)oParams,params);
        }
 else {
          ApplicationElement moduleQuery=getAppCache().get(aQueryId);
          ApplicationModel<?,?,?,?> model=Dom2ModelDocument.transform(ScriptedDatabasesClient.this,moduleQuery.getContent());
          params=model != null ? model.getParameters() : new Parameters();
        }
        params.toCollection().stream().forEach((p) -> {
          query.putParameter(p.getName(),p.getTypeInfo(),null);
        }
);
        return query;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + aQueryId + ""String_Node_Str"");
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + aQueryId + ""String_Node_Str"");
    }
  }
 else {
    return null;
  }
}","@Override protected SqlQuery getNewEntry(final String aQueryId) throws Exception {
  ApplicationElement ae=appCache.get(aQueryId);
  if (ae != null && ae.getType() == ClientConstants.ET_COMPONENT) {
    final String aDatasourceId=aQueryId;
    SqlQuery query=new SqlQuery(ScriptedDatabasesClient.this){
      @Override public SqlCompiledQuery compile() throws UnboundSqlParameterException, Exception {
        SqlCompiledQuery compiled=new SqlCompiledQuery(ScriptedDatabasesClient.this,aDatasourceId,aQueryId,JAVASCRIPT_QUERY_CONTENTS,getParameters(),getFields(),Collections.<String>emptySet(),Collections.<String>emptySet());
        return compiled;
      }
      @Override public boolean isPublicAccess(){
        return true;
      }
    }
;
    JSObject schemaContainer=createModule(aQueryId);
    if (schemaContainer != null) {
      Fields fields=new Fields();
      query.setFields(fields);
      query.setEntityId(aQueryId);
      query.setDbId(aDatasourceId);
      Object oSchema=schemaContainer.hasMember(""String_Node_Str"") ? schemaContainer.getMember(""String_Node_Str"") : null;
      if (oSchema instanceof JSObject) {
        readScriptFields(aQueryId,(JSObject)oSchema,fields);
        Parameters params;
        Object oParams=schemaContainer.hasMember(""String_Node_Str"") ? schemaContainer.getMember(""String_Node_Str"") : null;
        if (oParams instanceof JSObject) {
          params=new Parameters();
          readScriptFields(aQueryId,(JSObject)oParams,params);
        }
 else {
          ApplicationElement moduleQuery=getAppCache().get(aQueryId);
          ApplicationModel<?,?,?,?> model=Dom2ModelDocument.transform(ScriptedDatabasesClient.this,moduleQuery.getContent());
          params=model != null ? model.getParameters() : new Parameters();
        }
        params.toCollection().stream().forEach((p) -> {
          query.putParameter(p.getName(),p.getTypeInfo(),null);
        }
);
        return query;
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + aQueryId + ""String_Node_Str"");
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + aQueryId + ""String_Node_Str"");
    }
  }
 else {
    return null;
  }
}",0.9834303627407076
145451,"@Override public FlowProvider createFlowProvider(String aDbId,final String aEntityId,String aSqlClause,final Fields aExpectedFields,Set<String> aReadRoles,Set<String> aWriteRoles) throws Exception {
  if (JAVASCRIPT_QUERY_CONTENTS.equals(aSqlClause)) {
    JSObject dataFeeder=ScriptUtils.createModule(aEntityId);
    if (dataFeeder != null) {
      return new PlatypusScriptedFlowProvider(ScriptedDatabasesClient.this,aExpectedFields,dataFeeder);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + aEntityId + ""String_Node_Str"");
    }
  }
 else {
    return super.createFlowProvider(aDbId,aEntityId,aSqlClause,aExpectedFields,aReadRoles,aWriteRoles);
  }
}","@Override public FlowProvider createFlowProvider(String aDbId,final String aEntityId,String aSqlClause,final Fields aExpectedFields,Set<String> aReadRoles,Set<String> aWriteRoles) throws Exception {
  if (JAVASCRIPT_QUERY_CONTENTS.equals(aSqlClause)) {
    JSObject dataFeeder=createModule(aEntityId);
    if (dataFeeder != null) {
      return new PlatypusScriptedFlowProvider(ScriptedDatabasesClient.this,aExpectedFields,dataFeeder);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + aEntityId + ""String_Node_Str"");
    }
  }
 else {
    return super.createFlowProvider(aDbId,aEntityId,aSqlClause,aExpectedFields,aReadRoles,aWriteRoles);
  }
}",0.9910846953937592
145452,"public static void init(){
  initEngine((  ScriptEngine aEngine) -> {
    try {
      aEngine.eval(""String_Node_Str"");
    }
 catch (    ScriptException ex) {
      Logger.getLogger(ScriptUtils.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
);
}","public static void init(){
  if (engine == null) {
    engine=new ScriptEngineManager().getEngineByName(""String_Node_Str"");
    try {
      engine.eval(""String_Node_Str"");
    }
 catch (    ScriptException ex) {
      Logger.getLogger(ScriptUtils.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}",0.6823104693140795
145453,"public static FunctionNode extractModuleConstructor(FunctionNode jsRoot){
  final NodesContext cx=new NodesContext();
  jsRoot.accept(new BaseAnnotationsMiner(jsRoot.getSource()){
    @Override public boolean enterFunctionNode(    FunctionNode fn){
      if (scopeLevel == TOP_SCOPE_LEVEL && fn != jsRoot && !fn.isAnonymous()) {
        if (cx.result == null) {
          cx.result=fn;
        }
        cx.functions++;
      }
      return super.enterFunctionNode(fn);
    }
    @Override protected void commentedFunction(    FunctionNode fn,    String aComment){
      if (scopeLevel == TOP_CONSTRUCTORS_SCOPE_LEVEL) {
        JsDoc jsDoc=new JsDoc(aComment);
        if (jsDoc.containsModuleAnnotation()) {
          cx.result=fn;
          cx.annotatedConstructors++;
        }
      }
    }
  }
);
  if (cx.annotatedConstructors == 1) {
    return cx.result;
  }
 else   if (cx.functions == 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).finer(""String_Node_Str"");
    return cx.result;
  }
 else   if (cx.functions == 0) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors == 0 && cx.functions > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
  return null;
}","public static FunctionNode extractModuleConstructor(FunctionNode jsRoot){
  if (jsRoot != null) {
    final NodesContext cx=new NodesContext();
    jsRoot.accept(new BaseAnnotationsMiner(jsRoot.getSource()){
      @Override public boolean enterFunctionNode(      FunctionNode fn){
        if (scopeLevel == TOP_SCOPE_LEVEL && fn != jsRoot && !fn.isAnonymous()) {
          if (cx.result == null) {
            cx.result=fn;
          }
          cx.functions++;
        }
        return super.enterFunctionNode(fn);
      }
      @Override protected void commentedFunction(      FunctionNode fn,      String aComment){
        if (scopeLevel == TOP_CONSTRUCTORS_SCOPE_LEVEL) {
          JsDoc jsDoc=new JsDoc(aComment);
          if (jsDoc.containsModuleAnnotation()) {
            cx.result=fn;
            cx.annotatedConstructors++;
          }
        }
      }
    }
);
    if (cx.annotatedConstructors == 1) {
      return cx.result;
    }
 else     if (cx.functions == 1) {
      Logger.getLogger(PlatypusFilesSupport.class.getName()).finer(""String_Node_Str"");
      return cx.result;
    }
 else     if (cx.functions == 0) {
      Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
    }
 else     if (cx.annotatedConstructors > 1) {
      Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
    }
 else     if (cx.annotatedConstructors == 0 && cx.functions > 1) {
      Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
    }
  }
  return null;
}",0.9639278557114228
145454,"private String getCopyModuleContent(Project project,String aJsContent){
  FunctionNode constructorFunc=PlatypusFilesSupport.extractModuleConstructor(aJsContent);
  if (constructorFunc != null) {
    String oldName=constructorFunc.getName();
    String newName=NewApplicationElementWizardIterator.getNewValidAppElementName(project,oldName);
    StringBuilder sb=new StringBuilder(aJsContent.substring(0,constructorFunc.getStart()));
    sb.append(newName);
    sb.append(aJsContent.substring(constructorFunc.getStart() + oldName.length()));
    return sb.toString();
  }
 else {
    return aJsContent;
  }
}","private String getCopyModuleContent(Project project,String aJsContent){
  FunctionNode constructorFunc=PlatypusFilesSupport.extractModuleConstructor(aJsContent);
  if (constructorFunc != null) {
    String oldName=constructorFunc.getName();
    String newName=NewApplicationElementWizardIterator.getNewValidAppElementName(project,oldName);
    int start=Token.descPosition(constructorFunc.getIdent().getToken());
    StringBuilder sb=new StringBuilder(aJsContent.substring(0,start));
    sb.append(newName);
    sb.append(aJsContent.substring(start + oldName.length()));
    return sb.toString();
  }
 else {
    return aJsContent;
  }
}",0.8913917940466614
145455,"@Override public String translateScriptPath(String aName) throws Exception {
  ApplicationElement appElement=get(aName);
  if (appElement != null) {
    if (appElement.getType() == ClientConstants.ET_RESOURCE) {
      return basePath + File.separator + aName.replace('/',File.separatorChar);
    }
 else     if (appElement.isModule()) {
      return generateAppElementPath(aName) + File.separator + aName+ ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}","@Override public String translateScriptPath(String aName) throws Exception {
  ApplicationElement appElement=get(aName);
  if (appElement != null) {
    if (appElement.getType() == ClientConstants.ET_RESOURCE) {
      return basePath + File.separator + aName.replace('/',File.separatorChar);
    }
 else     if (appElement.isModule()) {
      return generateAppElementPath(aName) + File.separator + appElement.getName()+ ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}",0.975609756097561
145456,"protected static void compareValues(Change.Value v1,Change.Value v2){
  assertEquals(v1.name,v2.name);
  assertEquals(v1.type.getSqlType(),v2.type.getSqlType());
  assertEquals(v1.type.getSqlTypeName(),v2.type.getSqlTypeName());
  assertEquals(v1.type.getJavaClassName(),v2.type.getJavaClassName());
  if (v1.type.getSqlType() == Types.CLOB || v2.type.getSqlType() == Types.CLOB) {
    assertTrue(v1.value instanceof CompactClob);
    CompactClob clob1=(CompactClob)v1.value;
    assertTrue(v2.value instanceof CompactClob);
    CompactClob clob2=(CompactClob)v2.value;
    assertEquals(clob1.getData(),clob2.getData());
  }
 else   if (v1.type.getSqlType() == Types.BLOB || v2.type.getSqlType() == Types.BLOB) {
    assertTrue(v1.value instanceof CompactBlob);
    CompactBlob blob1=(CompactBlob)v1.value;
    assertTrue(v2.value instanceof CompactBlob);
    CompactBlob blob2=(CompactBlob)v2.value;
    assertArrayEquals(blob1.getData(),blob2.getData());
  }
 else   if (v1.type.getSqlType() == Types.STRUCT) {
    assertTrue(v1.value instanceof Point);
    Point pt1=(Point)v1.value;
    assertTrue(v2.value instanceof Point);
    Point pt2=(Point)v2.value;
    assertTrue((int)pt1.getX() == (int)pt2.getX());
    assertTrue((int)pt1.getY() == (int)pt2.getY());
  }
 else {
    assertEquals(v1.value,v2.value);
  }
}","protected static void compareValues(ChangeValue v1,ChangeValue v2){
  assertEquals(v1.name,v2.name);
  assertEquals(v1.type.getSqlType(),v2.type.getSqlType());
  assertEquals(v1.type.getSqlTypeName(),v2.type.getSqlTypeName());
  assertEquals(v1.type.getJavaClassName(),v2.type.getJavaClassName());
  if (v1.type.getSqlType() == Types.CLOB || v2.type.getSqlType() == Types.CLOB) {
    assertTrue(v1.value instanceof CompactClob);
    CompactClob clob1=(CompactClob)v1.value;
    assertTrue(v2.value instanceof CompactClob);
    CompactClob clob2=(CompactClob)v2.value;
    assertEquals(clob1.getData(),clob2.getData());
  }
 else   if (v1.type.getSqlType() == Types.BLOB || v2.type.getSqlType() == Types.BLOB) {
    assertTrue(v1.value instanceof CompactBlob);
    CompactBlob blob1=(CompactBlob)v1.value;
    assertTrue(v2.value instanceof CompactBlob);
    CompactBlob blob2=(CompactBlob)v2.value;
    assertArrayEquals(blob1.getData(),blob2.getData());
  }
 else   if (v1.type.getSqlType() == Types.STRUCT) {
    assertTrue(v1.value instanceof Point);
    Point pt1=(Point)v1.value;
    assertTrue(v2.value instanceof Point);
    Point pt2=(Point)v2.value;
    assertTrue((int)pt1.getX() == (int)pt2.getX());
    assertTrue((int)pt1.getY() == (int)pt2.getY());
  }
 else {
    assertEquals(v1.value,v2.value);
  }
}",0.9992412746585736
145457,"@Test public void serializeTest() throws Exception {
  long rqId=78347834L;
  String entityId=""String_Node_Str"";
  String command=""String_Node_Str"";
  Change.Value key1=new Change.Value(""String_Node_Str"",78.9f,DataTypeInfo.FLOAT);
  Change.Value key2=new Change.Value(""String_Node_Str"",""String_Node_Str"",DataTypeInfo.CHAR);
  Change.Value[] keys=new Change.Value[]{key1,key2};
  Timestamp date=new Timestamp((new Date()).getTime());
  CompactClob clob=new CompactClob(""String_Node_Str"");
  CompactBlob blob=new CompactBlob(""String_Node_Str"".getBytes(""String_Node_Str""));
  Point point=gFactory.createPoint(new Coordinate(52,27));
  DataTypeInfo geometryTypeInfo=DataTypeInfo.GEOMETRY.copy();
  Change.Value data1=new Change.Value(""String_Node_Str"",56,DataTypeInfo.INTEGER);
  Change.Value data2=new Change.Value(""String_Node_Str"",""String_Node_Str"",DataTypeInfo.VARCHAR);
  Change.Value data3=new Change.Value(""String_Node_Str"",true,DataTypeInfo.BOOLEAN);
  Change.Value data4=new Change.Value(""String_Node_Str"",false,DataTypeInfo.BIT);
  Change.Value data5=new Change.Value(""String_Node_Str"",date,DataTypeInfo.TIMESTAMP);
  Change.Value data6=new Change.Value(""String_Node_Str"",clob,DataTypeInfo.CLOB);
  Change.Value data7=new Change.Value(""String_Node_Str"",blob,DataTypeInfo.BLOB);
  Change.Value data8=new Change.Value(""String_Node_Str"",point,geometryTypeInfo);
  Change.Value[] data=new Change.Value[]{data1,data2,data3,data4,data5,data6,data7,data8};
  List<Change> changes=new ArrayList<>();
  Insert i=new Insert(entityId);
  i.data=data;
  Update u=new Update(entityId);
  u.data=data;
  u.keys=keys;
  Delete d=new Delete(entityId);
  d.keys=keys;
  Command c=new Command(entityId);
  c.command=command;
  c.parameters=keys;
  changes.add(i);
  changes.add(u);
  changes.add(d);
  changes.add(c);
  CommitRequest rq1=new CommitRequest(rqId,changes);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  ProtoWriter writer=new ProtoWriter(out);
  PlatypusRequestWriter.write(rq1,writer);
  writer.flush();
  ProtoReader reader=new ProtoReader(new ByteArrayInputStream(out.toByteArray()));
  Request readRq=PlatypusRequestReader.read(reader);
  assertEquals(rq1.getID(),readRq.getID());
  assertEquals(rq1.getType(),readRq.getType());
  assertTrue(readRq instanceof CommitRequest);
  CommitRequest rq2=(CommitRequest)readRq;
  assertNotNull(rq2.getChanges());
  assertEquals(changes.size(),rq2.getChanges().size());
  assertTrue(rq2.getChanges().get(0) instanceof Insert);
  assertTrue(rq2.getChanges().get(1) instanceof Update);
  assertTrue(rq2.getChanges().get(2) instanceof Delete);
  assertTrue(rq2.getChanges().get(3) instanceof Command);
  Insert i1=(Insert)rq2.getChanges().get(0);
  Update u1=(Update)rq2.getChanges().get(1);
  Delete d1=(Delete)rq2.getChanges().get(2);
  Command c1=(Command)rq2.getChanges().get(3);
  assertEquals(i1.entityId,i.entityId);
  assertEquals(u1.entityId,u.entityId);
  assertEquals(d1.entityId,d.entityId);
  assertEquals(c1.entityId,c.entityId);
  assertNull(c1.command);
  assertNotNull(i1.data);
  assertEquals(i1.data.length,i.data.length);
  assertNotNull(u1.data);
  assertEquals(u1.data.length,u.data.length);
  assertNotNull(u1.keys);
  assertEquals(u1.keys.length,u.keys.length);
  assertNotNull(d1.keys);
  assertEquals(d1.keys.length,d.keys.length);
  assertNotNull(c1.parameters);
  assertEquals(c1.parameters.length,c.parameters.length);
  for (int j=0; j < i1.data.length; j++) {
    compareValues(i1.data[j],i.data[j]);
  }
  for (int j=0; j < u1.data.length; j++) {
    compareValues(u1.data[j],u.data[j]);
  }
  for (int j=0; j < u1.keys.length; j++) {
    compareValues(u1.keys[j],u.keys[j]);
  }
  for (int j=0; j < d1.keys.length; j++) {
    compareValues(d1.keys[j],d.keys[j]);
  }
  for (int j=0; j < c1.parameters.length; j++) {
    compareValues(c1.parameters[j],c.parameters[j]);
  }
}","@Test public void serializeTest() throws Exception {
  long rqId=78347834L;
  String entityId=""String_Node_Str"";
  String command=""String_Node_Str"";
  ChangeValue key1=new ChangeValue(""String_Node_Str"",78.9f,DataTypeInfo.FLOAT);
  ChangeValue key2=new ChangeValue(""String_Node_Str"",""String_Node_Str"",DataTypeInfo.CHAR);
  ChangeValue[] keys=new ChangeValue[]{key1,key2};
  Timestamp date=new Timestamp((new Date()).getTime());
  CompactClob clob=new CompactClob(""String_Node_Str"");
  CompactBlob blob=new CompactBlob(""String_Node_Str"".getBytes(""String_Node_Str""));
  Point point=gFactory.createPoint(new Coordinate(52,27));
  DataTypeInfo geometryTypeInfo=DataTypeInfo.GEOMETRY.copy();
  ChangeValue data1=new ChangeValue(""String_Node_Str"",56,DataTypeInfo.INTEGER);
  ChangeValue data2=new ChangeValue(""String_Node_Str"",""String_Node_Str"",DataTypeInfo.VARCHAR);
  ChangeValue data3=new ChangeValue(""String_Node_Str"",true,DataTypeInfo.BOOLEAN);
  ChangeValue data4=new ChangeValue(""String_Node_Str"",false,DataTypeInfo.BIT);
  ChangeValue data5=new ChangeValue(""String_Node_Str"",date,DataTypeInfo.TIMESTAMP);
  ChangeValue data6=new ChangeValue(""String_Node_Str"",clob,DataTypeInfo.CLOB);
  ChangeValue data7=new ChangeValue(""String_Node_Str"",blob,DataTypeInfo.BLOB);
  ChangeValue data8=new ChangeValue(""String_Node_Str"",point,geometryTypeInfo);
  ChangeValue[] data=new ChangeValue[]{data1,data2,data3,data4,data5,data6,data7,data8};
  List<Change> changes=new ArrayList<>();
  Insert i=new Insert(entityId);
  i.data=data;
  Update u=new Update(entityId);
  u.data=data;
  u.keys=keys;
  Delete d=new Delete(entityId);
  d.keys=keys;
  Command c=new Command(entityId);
  c.command=command;
  c.parameters=keys;
  changes.add(i);
  changes.add(u);
  changes.add(d);
  changes.add(c);
  CommitRequest rq1=new CommitRequest(rqId,changes);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  ProtoWriter writer=new ProtoWriter(out);
  PlatypusRequestWriter.write(rq1,writer);
  writer.flush();
  ProtoReader reader=new ProtoReader(new ByteArrayInputStream(out.toByteArray()));
  Request readRq=PlatypusRequestReader.read(reader);
  assertEquals(rq1.getID(),readRq.getID());
  assertEquals(rq1.getType(),readRq.getType());
  assertTrue(readRq instanceof CommitRequest);
  CommitRequest rq2=(CommitRequest)readRq;
  assertNotNull(rq2.getChanges());
  assertEquals(changes.size(),rq2.getChanges().size());
  assertTrue(rq2.getChanges().get(0) instanceof Insert);
  assertTrue(rq2.getChanges().get(1) instanceof Update);
  assertTrue(rq2.getChanges().get(2) instanceof Delete);
  assertTrue(rq2.getChanges().get(3) instanceof Command);
  Insert i1=(Insert)rq2.getChanges().get(0);
  Update u1=(Update)rq2.getChanges().get(1);
  Delete d1=(Delete)rq2.getChanges().get(2);
  Command c1=(Command)rq2.getChanges().get(3);
  assertEquals(i1.entityId,i.entityId);
  assertEquals(u1.entityId,u.entityId);
  assertEquals(d1.entityId,d.entityId);
  assertEquals(c1.entityId,c.entityId);
  assertNull(c1.command);
  assertNotNull(i1.data);
  assertEquals(i1.data.length,i.data.length);
  assertNotNull(u1.data);
  assertEquals(u1.data.length,u.data.length);
  assertNotNull(u1.keys);
  assertEquals(u1.keys.length,u.keys.length);
  assertNotNull(d1.keys);
  assertEquals(d1.keys.length,d.keys.length);
  assertNotNull(c1.parameters);
  assertEquals(c1.parameters.length,c.parameters.length);
  for (int j=0; j < i1.data.length; j++) {
    compareValues(i1.data[j],i.data[j]);
  }
  for (int j=0; j < u1.data.length; j++) {
    compareValues(u1.data[j],u.data[j]);
  }
  for (int j=0; j < u1.keys.length; j++) {
    compareValues(u1.keys[j],u.keys[j]);
  }
  for (int j=0; j < d1.keys.length; j++) {
    compareValues(d1.keys[j],d.keys[j]);
  }
  for (int j=0; j < c1.parameters.length; j++) {
    compareValues(c1.parameters[j],c.parameters[j]);
  }
}",0.9968839262529212
145458,"public DatabaseAppCache(String aAppDatabaseJndiUrl) throws Exception {
  super(""String_Node_Str"" + String.valueOf(aAppDatabaseJndiUrl.hashCode()));
  if (!aAppDatabaseJndiUrl.startsWith(APP_URL_PREFIX)) {
    throw new IllegalArgumentException(""String_Node_Str"" + APP_URL_PREFIX + ""String_Node_Str"");
  }
  appDatabaseJndiUrl=aAppDatabaseJndiUrl;
  datasourceName=appDatabaseJndiUrl.substring(APP_URL_PREFIX.length(),appDatabaseJndiUrl.length());
  client=new DatabasesClient(null,datasourceName,false);
}","public DatabaseAppCache(String aAppDatabaseJndiUrl,String aAppCacheBasePath) throws Exception {
  super(""String_Node_Str"" + String.valueOf(aAppDatabaseJndiUrl.hashCode()),aAppCacheBasePath);
  if (!aAppDatabaseJndiUrl.startsWith(APP_URL_PREFIX)) {
    throw new IllegalArgumentException(""String_Node_Str"" + APP_URL_PREFIX + ""String_Node_Str"");
  }
  appDatabaseJndiUrl=aAppDatabaseJndiUrl;
  datasourceName=appDatabaseJndiUrl.substring(APP_URL_PREFIX.length(),appDatabaseJndiUrl.length());
  client=new DatabasesClient(null,datasourceName,false);
}",0.9591642924976258
145459,"@ScriptFunction(jsDoc=NEW_INDEX_JSDOC) public int getNewIndex(){
  return newIndex;
}","@ScriptFunction(jsDoc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"") public int getNewIndex(){
  return newIndex;
}",0.6493506493506493
145460,"@ScriptFunction(jsDoc=NEW_INDEX_JSDOC) public int getNewIndex(){
  return newIndex;
}","@ScriptFunction(jsDoc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"") public int getNewIndex(){
  return newIndex;
}",0.6493506493506493
145461,"@ScriptFunction(jsDoc=OLD_INDEX_JSDOC) public int getOldIndex(){
  return oldIndex;
}","@ScriptFunction(jsDoc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"") public int getOldIndex(){
  return oldIndex;
}",0.6406926406926406
145462,"@Test public void multiThreadedUpdatingRowsetTest() throws Exception {
  System.out.println(""String_Node_Str"");
  try (DatabasesClientWithResource resource=new DatabasesClientWithResource(settings)){
    final List<Change> commonLog=new ArrayList<>();
    final Map<String,List<Change>> changeLogs=new HashMap<>();
    changeLogs.put(null,commonLog);
    final DbClient dbClient=resource.getClient();
    Runnable clientRunnable=new Runnable(){
      @Override public void run(){
        try {
          while (!Thread.interrupted()) {
            Random rnd=new Random();
            rnd.setSeed(System.currentTimeMillis());
            int due=rnd.nextInt(10);
            try {
              Thread.sleep(due);
            }
 catch (            InterruptedException ex) {
              break;
            }
            SqlCompiledQuery query00=new SqlCompiledQuery(dbClient,""String_Node_Str"");
            Rowset rowset00=query00.executeQuery();
            rowset00.setFlowProvider(new DelegatingFlowProvider(rowset00.getFlowProvider()){
              @Override public List<Change> getChangeLog(){
                return commonLog;
              }
            }
);
            rowset00.refresh();
            SqlCompiledQuery query0=new SqlCompiledQuery(dbClient,""String_Node_Str"");
            Rowset rowset0=query0.executeQuery();
            rowset0.setFlowProvider(new DelegatingFlowProvider(rowset0.getFlowProvider()){
              @Override public List<Change> getChangeLog(){
                return commonLog;
              }
            }
);
            rowset0.refresh();
            SqlCompiledQuery query=new SqlCompiledQuery(dbClient,""String_Node_Str"");
            query.setEntityId(""String_Node_Str"");
            Rowset rowset=query.executeQuery();
            rowset.setFlowProvider(new DelegatingFlowProvider(rowset.getFlowProvider()){
              @Override public List<Change> getChangeLog(){
                return commonLog;
              }
            }
);
            rowset.getFields().get(""String_Node_Str"").setPk(true);
            assertNotNull(rowset.getFlowProvider());
            assertTrue(rowset.getFlowProvider() instanceof DatabaseFlowProvider);
            rowset.getFields().get(1).setPk(true);
            assertTrue(rowset.size() > 0);
            rowset.beforeFirst();
            boolean rowMet=false;
            int newValue=(new Random()).nextInt();
            while (rowset.next()) {
              Integer id=rowset.getInt(rowset.getFields().find(""String_Node_Str""));
              assertNotNull(id);
              if (id == 2) {
                rowMet=true;
                rowset.updateObject(rowset.getFields().find(""String_Node_Str""),newValue);
              }
            }
            assertTrue(rowMet);
            dbClient.commit(changeLogs);
            assertTrue(commonLog.isEmpty());
            dbClient.dbTableChanged(null,""String_Node_Str"",""String_Node_Str"");
          }
        }
 catch (        Exception ex) {
          boolean sleepIterrupted=(ex instanceof InterruptedException) || ((ex instanceof SQLException) && ((SQLException)ex).getCause() instanceof InterruptedException);
          if (!sleepIterrupted) {
            failedException=ex;
            Logger.getLogger(DbClientTest.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
    }
;
    List<Thread> threads=new ArrayList<>();
    for (int i=0; i < TEST_THREADS_COUNT; i++) {
      Thread thread=new Thread(clientRunnable);
      threads.add(thread);
    }
    for (int i=0; i < threads.size(); i++) {
      threads.get(i).start();
    }
    Thread.sleep(1000 * 120);
    int deadlessThreads=0;
    for (int i=0; i < threads.size(); i++) {
      Thread thread=threads.get(i);
      thread.interrupt();
    }
    for (int i=0; i < threads.size(); i++) {
      Thread thread=threads.get(i);
      thread.join(1000 * 20);
      if (thread.isAlive()) {
        deadlessThreads++;
        System.out.println(""String_Node_Str"" + String.valueOf(i) + ""String_Node_Str"");
      }
    }
    if (failedException != null) {
      throw failedException;
    }
    if (deadlessThreads > 0) {
      throw new Exception(String.valueOf(deadlessThreads) + ""String_Node_Str"");
    }
  }
 }","@Test public void multiThreadedUpdatingRowsetTest() throws Exception {
  System.out.println(""String_Node_Str"");
  try (DatabasesClientWithResource resource=new DatabasesClientWithResource(settings)){
    final List<Change> commonLog=new ArrayList<>();
    final Map<String,List<Change>> changeLogs=new HashMap<>();
    changeLogs.put(null,commonLog);
    final DbClient dbClient=resource.getClient();
    Runnable clientRunnable=() -> {
      try {
        while (!Thread.interrupted()) {
          Random rnd=new Random();
          rnd.setSeed(System.currentTimeMillis());
          int due=rnd.nextInt(10);
          try {
            Thread.sleep(due);
          }
 catch (          InterruptedException ex) {
            break;
          }
          SqlCompiledQuery query00=new SqlCompiledQuery(dbClient,""String_Node_Str"");
          Rowset rowset00=query00.executeQuery();
          rowset00.setFlowProvider(new DelegatingFlowProvider(rowset00.getFlowProvider()){
            @Override public List<Change> getChangeLog(){
              return commonLog;
            }
          }
);
          rowset00.refresh();
          SqlCompiledQuery query0=new SqlCompiledQuery(dbClient,""String_Node_Str"");
          Rowset rowset0=query0.executeQuery();
          rowset0.setFlowProvider(new DelegatingFlowProvider(rowset0.getFlowProvider()){
            @Override public List<Change> getChangeLog(){
              return commonLog;
            }
          }
);
          rowset0.refresh();
          SqlCompiledQuery query=new SqlCompiledQuery(dbClient,""String_Node_Str"");
          query.setEntityId(""String_Node_Str"");
          Rowset rowset=query.executeQuery();
          rowset.setFlowProvider(new DelegatingFlowProvider(rowset.getFlowProvider()){
            @Override public List<Change> getChangeLog(){
              return commonLog;
            }
          }
);
          rowset.getFields().get(""String_Node_Str"").setPk(true);
          assertNotNull(rowset.getFlowProvider());
          assertTrue(rowset.getFlowProvider() instanceof DatabaseFlowProvider);
          rowset.getFields().get(1).setPk(true);
          assertTrue(rowset.size() > 0);
          rowset.beforeFirst();
          boolean rowMet=false;
          int newValue=(new Random()).nextInt();
          while (rowset.next()) {
            Integer id=rowset.getInt(rowset.getFields().find(""String_Node_Str""));
            assertNotNull(id);
            if (id == 2) {
              rowMet=true;
              rowset.updateObject(rowset.getFields().find(""String_Node_Str""),newValue);
            }
          }
          assertTrue(rowMet);
          dbClient.commit(changeLogs);
          assertTrue(commonLog.isEmpty());
          dbClient.dbTableChanged(null,""String_Node_Str"",""String_Node_Str"");
        }
      }
 catch (      Exception ex) {
        boolean sleepIterrupted=(ex instanceof InterruptedException) || ((ex instanceof SQLException) && ((SQLException)ex).getCause() instanceof InterruptedException);
        if (!sleepIterrupted) {
          failedException=ex;
          Logger.getLogger(DbClientTest.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
    }
;
    List<Thread> threads=new ArrayList<>();
    for (int i=0; i < TEST_THREADS_COUNT; i++) {
      Thread thread=new Thread(clientRunnable);
      threads.add(thread);
    }
    for (int i=0; i < threads.size(); i++) {
      threads.get(i).start();
    }
    Thread.sleep(1000 * 120);
    int deadlessThreads=0;
    for (int i=0; i < threads.size(); i++) {
      Thread thread=threads.get(i);
      thread.interrupt();
    }
    for (int i=0; i < threads.size(); i++) {
      Thread thread=threads.get(i);
      thread.join(1000 * 20);
      if (thread.isAlive()) {
        deadlessThreads++;
        System.out.println(""String_Node_Str"" + String.valueOf(i) + ""String_Node_Str"");
      }
    }
    if (failedException != null) {
      throw failedException;
    }
    if (deadlessThreads > 0) {
      throw new Exception(String.valueOf(deadlessThreads) + ""String_Node_Str"");
    }
  }
 }",0.9759690858591956
145463,"@Override public void eventExecuting(PublishedSourcedEvent anEvent){
  if (anEvent.getSource() == entity.getPublished()) {
    if (anEvent instanceof ApplicationEntity.CursorPositionChangedEvent || anEvent instanceof ApplicationEntity.CursorPositionWillChangeEvent) {
      scrollEvents++;
    }
 else {
      events++;
    }
  }
}","@Override public void eventExecuting(PublishedSourcedEvent anEvent){
  if (anEvent.getSource() == entity.getPublished()) {
    if (anEvent instanceof CursorPositionChangedEvent || anEvent instanceof CursorPositionWillChangeEvent) {
      scrollEvents++;
    }
 else {
      events++;
    }
  }
}",0.9424920127795527
145464,"@Override public void init(ServletConfig config) throws ServletException {
  try {
    super.init(config);
    ServerConfig scp=ServerConfig.parse(config);
    serverCore=PlatypusServerCore.getInstance(scp.getUrl(),scp.getDefaultDatasourceName(),scp.getTasks(),scp.getAppElementId());
  }
 catch (  Exception ex) {
    throw new ServletException(ex);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  try {
    super.init(config);
    ServerConfig scp=ServerConfig.parse(config);
    String docsRoot=config.getServletContext().getRealPath(""String_Node_Str"");
    serverCore=PlatypusServerCore.getInstance(scp.getUrl(),scp.getDefaultDatasourceName(),scp.getTasks(),scp.getAppElementId(),docsRoot + File.separator + ClientConstants.ENTITIES_CACHE_DIRECTORY_NAME);
  }
 catch (  Exception ex) {
    throw new ServletException(ex);
  }
}",0.823121387283237
145465,"/** 
 * Generates path and creates it.
 * @param aAppelementName Application element name.
 * @return Generated and created path name.
 */
protected String generatePath(String aAppelementName){
  String pathName=basePath + File.separator + String.valueOf(Math.abs(aAppelementName.hashCode()) % 100);
  File path=new File(pathName);
  if (!path.exists()) {
    path.mkdir();
  }
  pathName+=File.separator + aAppelementName + File.separator+ aAppelementName;
  pathName=pathName.replace('/',File.separatorChar);
  return pathName;
}","/** 
 * Generates path and creates it.
 * @param aAppelementName Application element name.
 * @return Generated and created path name.
 */
protected String generatePath(String aAppelementName){
  String pathName=basePath + File.separator + String.valueOf(Math.abs(aAppelementName.hashCode()) % 100);
  File path=new File(pathName);
  if (!path.exists()) {
    path.mkdir();
  }
  pathName+=File.separator + aAppelementName;
  pathName=pathName.replace('/',File.separatorChar);
  return pathName;
}",0.9669260700389104
145466,"public static FunctionNode extractModuleConstructor(String aJsContent){
  Source source=new Source(""String_Node_Str"",aJsContent);
  final FunctionNode jsRoot=ScriptUtils.parseJs(source);
  final NodesContext cx=new NodesContext();
  jsRoot.accept(new AnnotationsMiner(source){
    @Override public boolean enterFunctionNode(    FunctionNode fn){
      if (scopeLevel == 1 && fn != jsRoot && !fn.isAnonymous()) {
        if (cx.functions == 0) {
          cx.result=fn;
        }
        cx.functions++;
      }
      return super.enterFunctionNode(fn);
    }
    @Override protected void commentedFunction(    FunctionNode fn,    String aComment){
      if (scopeLevel == 2) {
        JsDoc jsDoc=new JsDoc(aComment);
        if (jsDoc.containsModuleAnnotation()) {
          cx.result=fn;
          cx.annotatedConstructors++;
        }
      }
    }
    @Override protected void commentedProperty(    IdentNode aProperty,    String aComment){
    }
  }
);
  if (cx.annotatedConstructors == 1) {
    return cx.result;
  }
 else   if (cx.functions == 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).finer(""String_Node_Str"");
    return cx.result;
  }
 else   if (cx.functions == 0) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors == 0 && cx.functions > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
  return null;
}","public static FunctionNode extractModuleConstructor(String aJsContent){
  Source source=new Source(""String_Node_Str"",aJsContent);
  final FunctionNode jsRoot=ScriptUtils.parseJs(source);
  final NodesContext cx=new NodesContext();
  jsRoot.accept(new AnnotationsMiner(source){
    @Override public boolean enterFunctionNode(    FunctionNode fn){
      if (scopeLevel == 1 && fn != jsRoot && !fn.isAnonymous()) {
        if (cx.result == null) {
          cx.result=fn;
        }
        cx.functions++;
      }
      return super.enterFunctionNode(fn);
    }
    @Override protected void commentedFunction(    FunctionNode fn,    String aComment){
      if (scopeLevel == 2) {
        JsDoc jsDoc=new JsDoc(aComment);
        if (jsDoc.containsModuleAnnotation()) {
          cx.result=fn;
          cx.annotatedConstructors++;
        }
      }
    }
    @Override protected void commentedProperty(    IdentNode aProperty,    String aComment){
    }
  }
);
  if (cx.annotatedConstructors == 1) {
    return cx.result;
  }
 else   if (cx.functions == 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).finer(""String_Node_Str"");
    return cx.result;
  }
 else   if (cx.functions == 0) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors == 0 && cx.functions > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
  return null;
}",0.9912390488110138
145467,"@Override public boolean enterFunctionNode(FunctionNode fn){
  if (scopeLevel == 1 && fn != jsRoot && !fn.isAnonymous()) {
    if (cx.functions == 0) {
      cx.result=fn;
    }
    cx.functions++;
  }
  return super.enterFunctionNode(fn);
}","@Override public boolean enterFunctionNode(FunctionNode fn){
  if (scopeLevel == 1 && fn != jsRoot && !fn.isAnonymous()) {
    if (cx.result == null) {
      cx.result=fn;
    }
    cx.functions++;
  }
  return super.enterFunctionNode(fn);
}",0.941908713692946
145468,"/** 
 * Generates path and creates it.
 * @param aAppelementName Application element name.
 * @return Generated and created path name.
 */
protected String generatePath(String aAppelementName){
  String pathName=basePath + File.separator + String.valueOf(Math.abs(aAppelementName.hashCode()) % 100);
  File path=new File(pathName);
  if (!path.exists()) {
    path.mkdir();
  }
  pathName+=File.separator + aAppelementName;
  pathName=pathName.replace('/',File.separatorChar);
  return pathName;
}","/** 
 * Generates path and creates it.
 * @param aAppelementName Application element name.
 * @return Generated and created path name.
 */
protected String generatePath(String aAppelementName){
  String pathName=basePath + File.separator + String.valueOf(Math.abs(aAppelementName.hashCode()) % 100);
  File path=new File(pathName);
  if (!path.exists()) {
    path.mkdir();
  }
  pathName+=File.separator + aAppelementName + File.separator+ aAppelementName;
  pathName=pathName.replace('/',File.separatorChar);
  return pathName;
}",0.9669260700389104
145469,"@Override public String translateScriptPath(String aName) throws Exception {
  String res=calcSrcPath() + File.separator + aName;
  ApplicationElement appElement=get(aName);
  if (appElement != null && appElement.getType() != ClientConstants.ET_RESOURCE) {
    res+=""String_Node_Str"" + PlatypusFiles.JAVASCRIPT_EXTENSION;
  }
  return res;
}","@Override public String translateScriptPath(String aName) throws Exception {
  ApplicationElement appElement=get(aName);
  if (appElement != null && appElement.getType() != ClientConstants.ET_RESOURCE) {
    String path=id2Paths.get(aName).iterator().next();
    return path + ""String_Node_Str"" + PlatypusFiles.JAVASCRIPT_EXTENSION;
  }
 else {
    return calcSrcPath() + File.separator + aName;
  }
}",0.7574123989218329
145470,"@Override public String translateScriptPath(String aName) throws Exception {
  String res=generatePath(aName) + File.separator;
  ApplicationElement appElement=get(aName);
  if (appElement != null && appElement.getType() != ClientConstants.ET_RESOURCE) {
    res+=""String_Node_Str"" + PlatypusFiles.JAVASCRIPT_EXTENSION;
  }
  return res;
}","@Override public String translateScriptPath(String aName) throws Exception {
  String res=generatePath(aName);
  ApplicationElement appElement=get(aName);
  if (appElement != null && appElement.getType() != ClientConstants.ET_RESOURCE) {
    res+=""String_Node_Str"" + PlatypusFiles.JAVASCRIPT_EXTENSION;
  }
  return res;
}",0.9742813918305596
145471,"@Override protected void commentedFunction(FunctionNode fn,String aComment){
  JsDoc jsDoc=new JsDoc(aComment);
  if (jsDoc.containsModuleAnnotation()) {
    cx.result=fn;
    cx.annotatedConstructors++;
  }
}","@Override protected void commentedFunction(FunctionNode fn,String aComment){
  if (scopeLevel == 2) {
    JsDoc jsDoc=new JsDoc(aComment);
    if (jsDoc.containsModuleAnnotation()) {
      cx.result=fn;
      cx.annotatedConstructors++;
    }
  }
}",0.9146608315098468
145472,"public static FunctionNode extractModuleConstructor(String aJsContent){
  Source source=new Source(""String_Node_Str"",aJsContent);
  final FunctionNode jsRoot=ScriptUtils.parseJs(source);
  final NodesContext cx=new NodesContext();
  jsRoot.accept(new AnnotationsMiner(source){
    @Override public boolean enterFunctionNode(    FunctionNode fn){
      if (fn != jsRoot && !fn.isAnonymous()) {
        if (cx.functions == 0) {
          cx.result=fn;
        }
        cx.functions++;
      }
      return super.enterFunctionNode(fn);
    }
    @Override protected void commentedFunction(    FunctionNode fn,    String aComment){
      JsDoc jsDoc=new JsDoc(aComment);
      if (jsDoc.containsModuleAnnotation()) {
        cx.result=fn;
        cx.annotatedConstructors++;
      }
    }
    @Override protected void commentedProperty(    IdentNode aProperty,    String aComment){
    }
  }
);
  if (cx.annotatedConstructors == 1) {
    return cx.result;
  }
 else   if (cx.functions == 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).finer(""String_Node_Str"");
    return cx.result;
  }
 else   if (cx.functions == 0) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors == 0 && cx.functions > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
  return null;
}","public static FunctionNode extractModuleConstructor(String aJsContent){
  Source source=new Source(""String_Node_Str"",aJsContent);
  final FunctionNode jsRoot=ScriptUtils.parseJs(source);
  final NodesContext cx=new NodesContext();
  jsRoot.accept(new AnnotationsMiner(source){
    @Override public boolean enterFunctionNode(    FunctionNode fn){
      if (scopeLevel == 1 && fn != jsRoot && !fn.isAnonymous()) {
        if (cx.functions == 0) {
          cx.result=fn;
        }
        cx.functions++;
      }
      return super.enterFunctionNode(fn);
    }
    @Override protected void commentedFunction(    FunctionNode fn,    String aComment){
      if (scopeLevel == 2) {
        JsDoc jsDoc=new JsDoc(aComment);
        if (jsDoc.containsModuleAnnotation()) {
          cx.result=fn;
          cx.annotatedConstructors++;
        }
      }
    }
    @Override protected void commentedProperty(    IdentNode aProperty,    String aComment){
    }
  }
);
  if (cx.annotatedConstructors == 1) {
    return cx.result;
  }
 else   if (cx.functions == 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).finer(""String_Node_Str"");
    return cx.result;
  }
 else   if (cx.functions == 0) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
 else   if (cx.annotatedConstructors == 0 && cx.functions > 1) {
    Logger.getLogger(PlatypusFilesSupport.class.getName()).warning(""String_Node_Str"");
  }
  return null;
}",0.9699680511182108
145473,"@Override public boolean enterFunctionNode(FunctionNode fn){
  if (fn != jsRoot && !fn.isAnonymous()) {
    if (cx.functions == 0) {
      cx.result=fn;
    }
    cx.functions++;
  }
  return super.enterFunctionNode(fn);
}","@Override public boolean enterFunctionNode(FunctionNode fn){
  if (scopeLevel == 1 && fn != jsRoot && !fn.isAnonymous()) {
    if (cx.functions == 0) {
      cx.result=fn;
    }
    cx.functions++;
  }
  return super.enterFunctionNode(fn);
}",0.958963282937365
145474,"@ScriptFunction(params={""String_Node_Str""},jsDoc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") public static String translateScriptPath(String aResourceId) throws Exception {
  if (aResourceId != null && !aResourceId.isEmpty()) {
    Matcher htppMatcher=pattern.matcher(aResourceId);
    if (htppMatcher.matches()) {
      return aResourceId;
    }
 else {
      if (cache == null) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      String resourceId=normalizeResourcePath(aResourceId);
      String appElementCachedPath=cache.translateScriptPath(resourceId);
      if (appElementCachedPath != null) {
        return appElementCachedPath;
      }
 else {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",aResourceId));
      }
    }
  }
 else {
    return null;
  }
}","@ScriptFunction(params={""String_Node_Str""},jsDoc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") public static String translateScriptPath(String aResourceId) throws Exception {
  if (aResourceId != null && !aResourceId.isEmpty()) {
    Matcher httpMatcher=pattern.matcher(aResourceId);
    if (httpMatcher.matches()) {
      return aResourceId;
    }
 else {
      if (cache == null) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      String resourceId=normalizeResourcePath(aResourceId);
      String appElementCachedPath=cache.translateScriptPath(resourceId);
      if (appElementCachedPath != null) {
        return appElementCachedPath;
      }
 else {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",aResourceId));
      }
    }
  }
 else {
    return null;
  }
}",0.9979253112033196
145475,"public boolean bindQueryParameters() throws Exception {
  Parameters selfParameters=getQuery().getParameters();
  for (int i=1; i <= selfParameters.getFieldsCount(); i++) {
    Parameter p=selfParameters.get(i);
    boolean oldModified=p.isModified();
    p.setValue(ScriptUtils.js2Java(p.getValue()));
    p.setModified(oldModified);
  }
  boolean parametersModified=false;
  Set<Relation<E>> inRels=getInRelations();
  if (inRels != null && !inRels.isEmpty()) {
    for (    Relation<E> relation : inRels) {
      if (relation != null && relation.isRightParameter()) {
        E leftEntity=relation.getLeftEntity();
        if (leftEntity != null) {
          Object pValue=null;
          if (relation.isLeftField()) {
            Rowset leftRowset=leftEntity.getRowset();
            if (leftRowset != null && !leftRowset.isEmpty() && !leftRowset.isBeforeFirst() && !leftRowset.isAfterLast()) {
              try {
                pValue=leftRowset.getObject(leftRowset.getFields().find(relation.getLeftField().getName()));
              }
 catch (              InvalidColIndexException|InvalidCursorPositionException ex) {
                pValue=RowsetUtils.UNDEFINED_SQL_VALUE;
                Logger.getLogger(Entity.class.getName()).log(Level.SEVERE,""String_Node_Str"" + relation.getRightParameter() + ""String_Node_Str""+ getTitle()+ ""String_Node_Str""+ String.valueOf(getEntityId())+ ""String_Node_Str"",ex);
              }
            }
 else {
              pValue=RowsetUtils.UNDEFINED_SQL_VALUE;
            }
          }
 else {
            Parameter leftParameter=relation.getLeftParameter();
            if (leftParameter != null) {
              pValue=leftParameter.getValue();
              if (pValue == null) {
                pValue=leftParameter.getDefaultValue();
              }
            }
 else {
              Logger.getLogger(Entity.class.getName()).log(Level.SEVERE,""String_Node_Str"",new Object[]{getTitle(),String.valueOf(getEntityId())});
            }
          }
          Parameter selfPm=relation.getRightParameter();
          if (selfPm != null) {
            Object selfValue=selfPm.getValue();
            if (!SQLUtils.isJdbcEqual(selfValue,pValue)) {
              selfPm.setValue(pValue);
            }
          }
        }
 else {
          Logger.getLogger(Entity.class.getName()).log(Level.SEVERE,""String_Node_Str"");
        }
      }
    }
  }
  for (int i=1; i <= selfParameters.getFieldsCount(); i++) {
    Parameter param=(Parameter)selfParameters.get(i);
    if (param.isModified()) {
      parametersModified=true;
      param.setModified(false);
    }
  }
  return parametersModified;
}","public boolean bindQueryParameters() throws Exception {
  Parameters selfParameters=getQuery().getParameters();
  for (int i=1; i <= selfParameters.getFieldsCount(); i++) {
    Parameter p=selfParameters.get(i);
    boolean oldModified=p.isModified();
    p.setValue(ScriptUtils.js2Java(p.getValue()));
    p.setModified(oldModified);
  }
  boolean parametersModified=false;
  Set<Relation<E>> inRels=getInRelations();
  if (inRels != null && !inRels.isEmpty()) {
    for (    Relation<E> relation : inRels) {
      if (relation != null && relation.isRightParameter()) {
        E leftEntity=relation.getLeftEntity();
        if (leftEntity != null) {
          Object pValue=null;
          if (relation.isLeftField()) {
            Rowset leftRowset=leftEntity.getRowset();
            if (leftRowset != null && !leftRowset.isEmpty() && !leftRowset.isBeforeFirst() && !leftRowset.isAfterLast()) {
              try {
                pValue=leftRowset.getObject(leftRowset.getFields().find(relation.getLeftField().getName()));
              }
 catch (              InvalidColIndexException|InvalidCursorPositionException ex) {
                pValue=RowsetUtils.UNDEFINED_SQL_VALUE;
                Logger.getLogger(Entity.class.getName()).log(Level.SEVERE,""String_Node_Str"" + relation.getRightParameter() + ""String_Node_Str""+ getTitle()+ ""String_Node_Str""+ String.valueOf(getEntityId())+ ""String_Node_Str"",ex);
              }
            }
 else {
              pValue=RowsetUtils.UNDEFINED_SQL_VALUE;
            }
          }
 else {
            Parameter leftParameter=relation.getLeftParameter();
            if (leftParameter != null) {
              pValue=leftParameter.getValue();
              pValue=ScriptUtils.js2Java(pValue);
              if (pValue == null) {
                pValue=leftParameter.getDefaultValue();
              }
            }
 else {
              Logger.getLogger(Entity.class.getName()).log(Level.SEVERE,""String_Node_Str"",new Object[]{getTitle(),String.valueOf(getEntityId())});
            }
          }
          Parameter selfPm=relation.getRightParameter();
          if (selfPm != null) {
            Object selfValue=selfPm.getValue();
            if (!SQLUtils.isJdbcEqual(selfValue,pValue)) {
              selfPm.setValue(pValue);
            }
          }
        }
 else {
          Logger.getLogger(Entity.class.getName()).log(Level.SEVERE,""String_Node_Str"");
        }
      }
    }
  }
  for (int i=1; i <= selfParameters.getFieldsCount(); i++) {
    Parameter param=(Parameter)selfParameters.get(i);
    if (param.isModified()) {
      parametersModified=true;
      param.setModified(false);
    }
  }
  return parametersModified;
}",0.9906120916259856
145476,"@Override public Object run(Context cx) throws Exception {
  Function handler=handlers.get(aEventId);
  if (handler != null && eventThis != null) {
    return ScriptUtils.js2Java(handler.call(cx,eventThis,eventThis,new Object[]{anEvent}));
  }
 else {
    return null;
  }
}","@Override public Object run(Context cx) throws Exception {
  Function handler=handlers.get(aEventId);
  if (handler != null && eventThis != null) {
    return ScriptUtils.js2Java(handler.call(cx,handler,eventThis,new Object[]{anEvent}));
  }
 else {
    return null;
  }
}",0.9706959706959708
145477,"protected Object executeEvent(final int aEventId,final Object anEvent){
  try {
    return ScriptUtils.inContext(new ScriptAction(){
      @Override public Object run(      Context cx) throws Exception {
        Function handler=handlers.get(aEventId);
        if (handler != null && eventThis != null) {
          return ScriptUtils.js2Java(handler.call(cx,eventThis,eventThis,new Object[]{anEvent}));
        }
 else {
          return null;
        }
      }
    }
);
  }
 catch (  Exception ex) {
    Logger.getLogger(ControlEventsIProxy.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
}","protected Object executeEvent(final int aEventId,final Object anEvent){
  try {
    return ScriptUtils.inContext(new ScriptAction(){
      @Override public Object run(      Context cx) throws Exception {
        Function handler=handlers.get(aEventId);
        if (handler != null && eventThis != null) {
          return ScriptUtils.js2Java(handler.call(cx,handler,eventThis,new Object[]{anEvent}));
        }
 else {
          return null;
        }
      }
    }
);
  }
 catch (  Exception ex) {
    Logger.getLogger(ControlEventsIProxy.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
}",0.9868204283360792
145478,"protected Map<String,Fields> readTablesColumns(Rowset colsRs,String aSchema,SqlDriver sqlDriver) throws Exception {
  Map<String,Fields> tabledFields=new HashMap<>();
  if (colsRs != null) {
    Fields colsMd=colsRs.getFields();
    Map<String,Integer> colIndicies=new HashMap<>();
    for (int i=1; i <= colsMd.getFieldsCount(); i++) {
      colIndicies.put(colsMd.get(i).getName().toUpperCase(),i);
    }
    int JDBCCOLS_TABLE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_TABLE_NAME);
    int JDBCCOLS_COLUMN_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_COLUMN_NAME);
    int JDBCCOLS_DATA_TYPE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_DATA_TYPE);
    int JDBCCOLS_TYPE_NAME_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_TYPE_NAME);
    int JDBCCOLS_COLUMN_SIZE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_COLUMN_SIZE);
    int JDBCCOLS_DECIMAL_DIGITS_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_DECIMAL_DIGITS);
    int JDBCCOLS_NUM_PREC_RADIX_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_NUM_PREC_RADIX);
    int JDBCCOLS_NULLABLE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_NULLABLE);
    colsRs.beforeFirst();
    while (colsRs.next()) {
      String fTableName=colsRs.getString(JDBCCOLS_TABLE_INDEX);
      Fields fields=tabledFields.get(fTableName);
      if (fields == null) {
        fields=new Fields();
        tabledFields.put(fTableName,fields);
      }
      String fName=colsRs.getString(JDBCCOLS_COLUMN_INDEX);
      Field field=new Field(fName);
      field.setOriginalName(fName);
      String rdbmsTypeName=colsRs.getString(JDBCCOLS_TYPE_NAME_INDEX);
      Integer correctType=sqlDriver.getJdbcTypeByRDBMSTypename(rdbmsTypeName);
      if (correctType != null) {
        field.getTypeInfo().setSqlType(correctType);
      }
 else {
        field.getTypeInfo().setSqlType(colsRs.getInt(JDBCCOLS_DATA_TYPE_INDEX));
      }
      field.getTypeInfo().setSqlTypeName(rdbmsTypeName);
      Integer iSize=colsRs.getInt(JDBCCOLS_COLUMN_SIZE_INDEX);
      if (iSize != null) {
        field.setSize(iSize);
      }
      Integer iScale=colsRs.getInt(JDBCCOLS_DECIMAL_DIGITS_INDEX);
      if (iScale != null) {
        field.setScale(iScale);
      }
      Integer iPrecision=colsRs.getInt(JDBCCOLS_NUM_PREC_RADIX_INDEX);
      if (iPrecision != null) {
        field.setPrecision(iPrecision);
      }
      Integer iNullable=colsRs.getInt(JDBCCOLS_NULLABLE_INDEX);
      if (iNullable != null) {
        field.setNullable(iNullable == ResultSetMetaData.columnNullable);
      }
      field.setSchemaName(aSchema);
      field.setTableName(fTableName);
      sqlDriver.getTypesResolver().resolve2Application(field);
      field.getTypeInfo().setSqlTypeName(rdbmsTypeName);
      fields.add(field);
    }
  }
  return tabledFields;
}","protected Map<String,Fields> readTablesColumns(Rowset colsRs,String aSchema,SqlDriver sqlDriver) throws Exception {
  Map<String,Fields> tabledFields=new HashMap<>();
  if (colsRs != null) {
    Fields colsMd=colsRs.getFields();
    Map<String,Integer> colIndicies=new HashMap<>();
    for (int i=1; i <= colsMd.getFieldsCount(); i++) {
      colIndicies.put(colsMd.get(i).getName().toUpperCase(),i);
    }
    int JDBCCOLS_TABLE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_TABLE_NAME);
    int JDBCCOLS_COLUMN_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_COLUMN_NAME);
    int JDBCCOLS_DATA_TYPE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_DATA_TYPE);
    int JDBCCOLS_TYPE_NAME_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_TYPE_NAME);
    int JDBCCOLS_COLUMN_SIZE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_COLUMN_SIZE);
    int JDBCCOLS_DECIMAL_DIGITS_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_DECIMAL_DIGITS);
    int JDBCCOLS_NUM_PREC_RADIX_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_NUM_PREC_RADIX);
    int JDBCCOLS_NULLABLE_INDEX=colIndicies.get(ClientConstants.JDBCCOLS_NULLABLE);
    colsRs.beforeFirst();
    while (colsRs.next()) {
      String fTableName=colsRs.getString(JDBCCOLS_TABLE_INDEX);
      Fields fields=tabledFields.get(fTableName);
      if (fields == null) {
        fields=new Fields();
        tabledFields.put(fTableName,fields);
      }
      String fName=colsRs.getString(JDBCCOLS_COLUMN_INDEX);
      Field field=new Field(fName.toLowerCase());
      field.setOriginalName(fName);
      String rdbmsTypeName=colsRs.getString(JDBCCOLS_TYPE_NAME_INDEX);
      Integer correctType=sqlDriver.getJdbcTypeByRDBMSTypename(rdbmsTypeName);
      if (correctType != null) {
        field.getTypeInfo().setSqlType(correctType);
      }
 else {
        field.getTypeInfo().setSqlType(colsRs.getInt(JDBCCOLS_DATA_TYPE_INDEX));
      }
      field.getTypeInfo().setSqlTypeName(rdbmsTypeName);
      Integer iSize=colsRs.getInt(JDBCCOLS_COLUMN_SIZE_INDEX);
      if (iSize != null) {
        field.setSize(iSize);
      }
      Integer iScale=colsRs.getInt(JDBCCOLS_DECIMAL_DIGITS_INDEX);
      if (iScale != null) {
        field.setScale(iScale);
      }
      Integer iPrecision=colsRs.getInt(JDBCCOLS_NUM_PREC_RADIX_INDEX);
      if (iPrecision != null) {
        field.setPrecision(iPrecision);
      }
      Integer iNullable=colsRs.getInt(JDBCCOLS_NULLABLE_INDEX);
      if (iNullable != null) {
        field.setNullable(iNullable == ResultSetMetaData.columnNullable);
      }
      field.setSchemaName(aSchema);
      field.setTableName(fTableName);
      sqlDriver.getTypesResolver().resolve2Application(field);
      field.getTypeInfo().setSqlTypeName(rdbmsTypeName);
      fields.add(field);
    }
  }
  return tabledFields;
}",0.9974747474747476
145479,"@Override public int executeUpdate(SqlCompiledQuery aQuery) throws Exception {
  int rowsAffected=0;
  Converter converter=getDbMetadataCache(aQuery.getDatabaseId()).getConnectionDriver().getConverter();
  DataSource dataSource=obtainDataSource(aQuery.getDatabaseId());
  if (dataSource != null) {
    try (Connection connection=dataSource.getConnection();PreparedStatement stmt=connection.prepareStatement(aQuery.getSqlClause())){
      Parameters params=aQuery.getParameters();
      for (int i=1; i <= params.getParametersCount(); i++) {
        Parameter param=params.get(i);
        converter.convert2JdbcAndAssign(param.getValue(),param.getTypeInfo(),connection,i,stmt);
      }
      try {
        rowsAffected+=stmt.executeUpdate();
        connection.commit();
      }
 catch (      SQLException ex) {
        connection.rollback();
        throw ex;
      }
    }
   }
  return rowsAffected;
}","@Override public int executeUpdate(SqlCompiledQuery aQuery) throws Exception {
  int rowsAffected=0;
  Converter converter=getDbMetadataCache(aQuery.getDatabaseId()).getConnectionDriver().getConverter();
  DataSource dataSource=obtainDataSource(aQuery.getDatabaseId());
  if (dataSource != null) {
    try (Connection connection=dataSource.getConnection();PreparedStatement stmt=connection.prepareStatement(aQuery.getSqlClause())){
      connection.setAutoCommit(false);
      Parameters params=aQuery.getParameters();
      for (int i=1; i <= params.getParametersCount(); i++) {
        Parameter param=params.get(i);
        converter.convert2JdbcAndAssign(param.getValue(),param.getTypeInfo(),connection,i,stmt);
      }
      try {
        rowsAffected+=stmt.executeUpdate();
        connection.commit();
      }
 catch (      SQLException ex) {
        connection.rollback();
        throw ex;
      }
    }
   }
  return rowsAffected;
}",0.9788617886178862
145480,"/** 
 * Queries model's data for the first time.
 * @throws Exception 
 */
protected void doExecute() throws Exception {
  ScriptUtils.inContext(new ScriptAction(){
    @Override public Object run(    Context cx) throws Exception {
      model.setRuntime(true);
      return null;
    }
  }
);
}","/** 
 * Queries model's data for the first time.
 * @throws Exception
 */
protected void doExecute() throws Exception {
  ScriptUtils.inContext(new ScriptAction(){
    @Override public Object run(    Context cx) throws Exception {
      model.setRuntime(true);
      return null;
    }
  }
);
}",0.99830220713073
145481,"/** 
 * Loads a script document from application database or filesystem and prepares it for execution and calls module's constructor.
 * @param aAppElementId Global module name (at application level) or path to executable js file.
 * @param args Js module's constructor arguments.
 * @throws Exception 
 */
public void loadApplicationElement(String aAppElementId,Object[] args) throws Exception {
}","/** 
 * Loads a script document from application database or filesystem and prepares it for execution and calls module's constructor.
 * @param aAppElementId Global module name (at application level) or path toexecutable js file.
 * @param args Js module's constructor arguments.
 * @throws Exception
 */
public void loadApplicationElement(String aAppElementId,Object[] args) throws Exception {
}",0.9974811083123426
145482,"/** 
 * Executes a plain js resource (file).
 * @param aResourceId
 * @throws Exception 
 */
public static void executeResource(final String aResourceId) throws Exception {
  final String resourceId=PlatypusScriptedResource.translateResourcePath(aResourceId);
  if (!executedScriptResources.contains(resourceId)) {
    try {
      ScriptUtils.inContext(new ScriptAction(){
        @Override public Object run(        Context cx) throws Exception {
          String source=PlatypusScriptedResource.loadText(resourceId);
          if (source != null) {
            cx.setOptimizationLevel(-1);
            Script lib=cx.compileString(source,resourceId,0,null);
            if (System.getProperty(DEBUG_PROPERTY) != null) {
              Breakpoints.getInstance().checkPendingBreakpoints();
            }
            lib.exec(cx,checkStandardObjects(cx));
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"" + resourceId + ""String_Node_Str"");
          }
          return null;
        }
      }
);
    }
 catch (    NotResourceException ex) {
      return;
    }
    executedScriptResources.add(resourceId);
  }
}","/** 
 * Executes a plain js resource (file).
 * @param aResourceId
 * @throws Exception
 */
public static void executeResource(final String aResourceId) throws Exception {
  final String resourceId=PlatypusScriptedResource.translateResourcePath(aResourceId);
  if (!executedScriptResources.contains(resourceId)) {
    try {
      ScriptUtils.inContext(new ScriptAction(){
        @Override public Object run(        Context cx) throws Exception {
          String source=PlatypusScriptedResource.loadText(resourceId);
          if (source != null) {
            cx.setOptimizationLevel(-1);
            Script lib=cx.compileString(source,resourceId,0,null);
            if (System.getProperty(DEBUG_PROPERTY) != null) {
              Breakpoints.getInstance().checkPendingBreakpoints();
            }
            lib.exec(cx,checkStandardObjects(cx));
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"" + resourceId + ""String_Node_Str"");
          }
          return null;
        }
      }
);
    }
 catch (    NotResourceException ex) {
      return;
    }
    executedScriptResources.add(resourceId);
  }
}",0.9995627459554
145483,"/** 
 * Shrinks internal structures, allowing to reuse this instance of <code>ScriptRunner</code> with probably new content (hot reloading feature).
 * @see #refresh() 
 * @throws Exception 
 */
protected void shrink() throws Exception {
  model=null;
  functionAllowedRoles=null;
  moduleAllowedRoles=null;
  moduleAnnotations=null;
}","/** 
 * Shrinks internal structures, allowing to reuse this instance of <code>ScriptRunner</code> with probably new content (hot reloading feature).
 * @see #refresh()
 * @throws Exception
 */
protected void shrink() throws Exception {
  model=null;
  functionAllowedRoles=null;
  moduleAllowedRoles=null;
  moduleAnnotations=null;
}",0.997005988023952
145484,"/** 
 * Injects platypus features into 'this' object, calls js module's constructor with arguments and finally resolves model'd entities' events handlers.
 * @param scriptDoc
 * @param args
 * @throws Exception 
 */
protected void prepareScript(final ScriptDocument scriptDoc,final Object[] args) throws Exception {
  ScriptUtils.inContext(new ScriptAction(){
    @Override public Object run(    Context cx) throws Exception {
      model.setScriptThis(ScriptRunner.this);
      if (scriptDoc.getFunction() != null) {
        Object[] jsArgs=new Object[args != null ? args.length : 0];
        for (int i=0; i < jsArgs.length; i++) {
          jsArgs[i]=ScriptUtils.javaToJS(args[i],ScriptUtils.getScope());
        }
        scriptDoc.getFunction().call(cx,getParentScope(),ScriptRunner.this,jsArgs);
      }
      model.resolveHandlers();
      return null;
    }
  }
);
}","/** 
 * Injects platypus features into 'this' object, calls js module's constructor with arguments and finally resolves model'd entities' events handlers.
 * @param scriptDoc
 * @param args
 * @throws Exception
 */
protected void prepareScript(final ScriptDocument scriptDoc,final Object[] args) throws Exception {
  ScriptUtils.inContext(new ScriptAction(){
    @Override public Object run(    Context cx) throws Exception {
      model.setScriptThis(ScriptRunner.this);
      if (scriptDoc.getFunction() != null) {
        Object[] jsArgs=new Object[args != null ? args.length : 0];
        for (int i=0; i < jsArgs.length; i++) {
          jsArgs[i]=ScriptUtils.javaToJS(args[i],ScriptUtils.getScope());
        }
        scriptDoc.getFunction().call(cx,getParentScope(),ScriptRunner.this,jsArgs);
      }
      model.resolveHandlers();
      return null;
    }
  }
);
}",0.9994275901545506
145485,"/** 
 * Ensures that model's data is queried and fetched from sources. (Note: in asynchronous clients data in not fetched here).
 * @throws Exception 
 */
public void execute() throws Exception {
  if (!executed) {
    executed=true;
    doExecute();
  }
}","/** 
 * Ensures that model's data is queried and fetched from sources. (Note: in asynchronous clients data in not fetched here).
 * @throws Exception
 */
public void execute() throws Exception {
  if (!executed) {
    executed=true;
    doExecute();
  }
}",0.9980430528375732
145486,"private void checkPrincipalPermission() throws AccessControlException {
  try {
    PlatypusPrincipal principal=_getPrincipal();
    if (functionAllowedRoles != null && functionAllowedRoles.get(name) != null && !functionAllowedRoles.get(name).isEmpty()) {
      if (principal != null && principal.hasAnyRole(functionAllowedRoles.get(name))) {
        return;
      }
      throw new AccessControlException(String.format(""String_Node_Str"",name,ScriptRunner.this.appElementId,principal != null ? principal.getName() : null));
    }
 else {
      ScriptRunner.this.checkPrincipalPermission();
    }
  }
 catch (  Exception ex) {
    if (ex instanceof AccessControlException) {
      throw (AccessControlException)ex;
    }
 else {
      throw new AccessControlException(ex.getMessage());
    }
  }
}","private void checkPrincipalPermission(Object[] args) throws AccessControlException {
  try {
    PlatypusPrincipal principal=_getPrincipal();
    if (functionAllowedRoles != null && functionAllowedRoles.get(name) != null && !functionAllowedRoles.get(name).isEmpty()) {
      Set<String> filteredRoles=filterRoles(functionAllowedRoles.get(name),args);
      if (principal != null && principal.hasAnyRole(filteredRoles)) {
        return;
      }
      throw new AccessControlException(String.format(""String_Node_Str"",name,ScriptRunner.this.appElementId,principal != null ? principal.getName() : null));
    }
 else {
      ScriptRunner.this.checkPrincipalPermission();
    }
  }
 catch (  Exception ex) {
    if (ex instanceof AccessControlException) {
      throw (AccessControlException)ex;
    }
 else {
      throw new AccessControlException(ex.getMessage());
    }
  }
}",0.9269461077844312
145487,"/** 
 * Imports a system library js resource (file) into global js space.
 * @param libResourceName Js resource (file) name (aka standardLib.js). See use cases for convenience.
 * @param aLibName Js virtual library name. See use cases for convenience.
 * @param currentContext
 * @param aScope
 * @return
 * @throws IOException 
 */
public static Script importScriptLibrary(String libResourceName,String aLibName,Context currentContext,Scriptable aScope) throws IOException {
  try (InputStream is=ScriptRunner.class.getResourceAsStream(libResourceName);InputStreamReader isr=new InputStreamReader(is)){
    Script compiled=currentContext.compileReader(isr,aLibName,0,null);
    compiled.exec(currentContext,aScope);
    return compiled;
  }
 }","/** 
 * Imports a system library js resource (file) into global js space.
 * @param libResourceName Js resource (file) name (aka standardLib.js). Seeuse cases for convenience.
 * @param aLibName Js virtual library name. See use cases for convenience.
 * @param currentContext
 * @param aScope
 * @return
 * @throws IOException
 */
public static Script importScriptLibrary(String libResourceName,String aLibName,Context currentContext,Scriptable aScope) throws IOException {
  try (InputStream is=ScriptRunner.class.getResourceAsStream(libResourceName);InputStreamReader isr=new InputStreamReader(is)){
    Script compiled=currentContext.compileReader(isr,aLibName,0,null);
    compiled.exec(currentContext,aScope);
    return compiled;
  }
 }",0.9986541049798116
145488,"/** 
 * Refreshs content of the script runner. Reloads it from application storage and re-executes new instance of model.
 * @see #shrink() 
 * @throws Exception
 */
public synchronized void refresh() throws Exception {
}","/** 
 * Refreshs content of the script runner. Reloads it from application storage and re-executes new instance of model.
 * @see #shrink()
 * @throws Exception
 */
public synchronized void refresh() throws Exception {
}",0.9977324263038548
145489,"/** 
 * Ensures that platypus standard script scope is constructed.
 * @param currentContext
 * @return
 * @throws Exception 
 * @see #get(java.lang.String,org.mozilla.javascript.Scriptable) 
 */
public static ScriptableObject checkStandardObjects(Context currentContext) throws Exception {
synchronized (standardObjectsScopeLock) {
    if (standardObjectsScope == null) {
      standardObjectsScope=new ScriptRunner(PlatypusScriptedResource.getClient(),ScriptUtils.getScope(),PlatypusScriptedResource.getPrincipalHost(),PlatypusScriptedResource.getScriptDocumentsHost());
    }
  }
  return standardObjectsScope;
}","/** 
 * Ensures that platypus standard script scope is constructed.
 * @param currentContext
 * @return
 * @throws Exception
 * @see #get(java.lang.String,org.mozilla.javascript.Scriptable)
 */
public static ScriptableObject checkStandardObjects(Context currentContext) throws Exception {
synchronized (standardObjectsScopeLock) {
    if (standardObjectsScope == null) {
      standardObjectsScope=new ScriptRunner(PlatypusScriptedResource.getClient(),ScriptUtils.getScope(),PlatypusScriptedResource.getPrincipalHost(),PlatypusScriptedResource.getScriptDocumentsHost());
    }
  }
  return standardObjectsScope;
}",0.998371335504886
145490,"private void doWork() throws Exception {
  try {
    if (isDbParamsSetExplicitly()) {
      DbConnectionSettings settings=new DbConnectionSettings();
      settings.setUrl(url);
      settings.setUser(dbuser);
      settings.setPassword(dbpassword);
      GeneralResourceProvider.getInstance().registerDatasource(DEPLOY_TARGET_DATASOURCE,settings);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
switch (mode) {
case DEPLOY:
      initDeployer();
    deployer.deploy();
  break;
case UNDEPLOY:
initDeployer();
deployer.undeploy();
break;
case IMPORT:
initDeployer();
deployer.importApplication();
break;
case APPLY_MIGRATIONS:
initMigrator();
migrator.applyMigrations();
break;
case CREATE_MTD_SNAPSHOT:
initMigrator();
migrator.createDbMetadataMigration();
break;
case CREATE_SQL_BATCH:
initMigrator();
migrator.createSqlMigration();
break;
case CLEANUP:
initMigrator();
migrator.cleanup();
break;
case INITAPP:
initDeployer();
deployer.initApp();
break;
case INITUSERS:
initDeployer();
deployer.initUsersSpace();
break;
case INITVERSIONING:
initMigrator();
migrator.initVersioning();
break;
case GET_CURRENT_VERSION:
initMigrator();
printVersion();
break;
case SET_CURRENT_VERSION:
initMigrator();
setVersion();
break;
default :
printHelpMessage();
break;
}
}
 catch (Exception ex) {
System.out.println(""String_Node_Str"" + ex.getMessage());
}
}","private void doWork() throws Exception {
  try {
    if (isDbParamsSetExplicitly()) {
      DbConnectionSettings settings=new DbConnectionSettings();
      settings.setUrl(url);
      settings.setUser(dbuser);
      settings.setPassword(dbpassword);
      settings.setSchema(dbschema);
      GeneralResourceProvider.getInstance().registerDatasource(DEPLOY_TARGET_DATASOURCE,settings);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
switch (mode) {
case DEPLOY:
      initDeployer();
    deployer.deploy();
  break;
case UNDEPLOY:
initDeployer();
deployer.undeploy();
break;
case IMPORT:
initDeployer();
deployer.importApplication();
break;
case APPLY_MIGRATIONS:
initMigrator();
migrator.applyMigrations();
break;
case CREATE_MTD_SNAPSHOT:
initMigrator();
migrator.createDbMetadataMigration();
break;
case CREATE_SQL_BATCH:
initMigrator();
migrator.createSqlMigration();
break;
case CLEANUP:
initMigrator();
migrator.cleanup();
break;
case INITAPP:
initDeployer();
deployer.initApp();
break;
case INITUSERS:
initDeployer();
deployer.initUsersSpace();
break;
case INITVERSIONING:
initMigrator();
migrator.initVersioning();
break;
case GET_CURRENT_VERSION:
initMigrator();
printVersion();
break;
case SET_CURRENT_VERSION:
initMigrator();
setVersion();
break;
default :
printHelpMessage();
break;
}
}
 catch (Exception ex) {
System.out.println(""String_Node_Str"" + ex.getMessage());
}
}",0.9871244635193132
145491,"private void tryToInitializeAndBindSensorAcceptor(String protocol,InetSocketAddress s) throws IOException, Exception {
  Logger logger=Logger.getLogger(ServerMain.class.getName());
  if (com.eas.sensors.positioning.AcceptorsFactory.isSupported(protocol)) {
    String acceptorModuleId=findAcceptorModule(protocol);
    if (acceptorModuleId != null) {
      Integer numWorkerThreads=portsNumWorkerThreads != null ? portsNumWorkerThreads.get(s.getPort()) : null;
      if (numWorkerThreads == null || numWorkerThreads == 0) {
        numWorkerThreads=DEFAULT_EXECUTOR_POOL_SIZE;
      }
      Integer sessionIdleTime=portsSessionIdleTimeouts != null ? portsSessionIdleTimeouts.get(s.getPort()) : null;
      if (sessionIdleTime == null || sessionIdleTime == 0) {
        sessionIdleTime=360;
      }
      Integer sessionIdleCheckInterval=portsSessionIdleCheckIntervals != null ? portsSessionIdleCheckIntervals.get(s.getPort()) : null;
      if (sessionIdleCheckInterval == null || sessionIdleCheckInterval == 0) {
        sessionIdleCheckInterval=360;
      }
      IoAcceptor sensorAcceptor=com.eas.sensors.positioning.AcceptorsFactory.create(protocol,numWorkerThreads,sessionIdleTime,sessionIdleCheckInterval,new com.eas.server.handlers.PositioningPacketReciever(this,acceptorModuleId));
      if (sensorAcceptor != null) {
        sensorAcceptor.bind(s);
        logger.info(String.format(""String_Node_Str"",s.toString(),protocol));
      }
    }
 else {
      logger.info(String.format(""String_Node_Str"",protocol));
    }
  }
 else {
    logger.info(String.format(""String_Node_Str"",protocol));
  }
}","private void tryToInitializeAndBindSensorAcceptor(String protocol,InetSocketAddress s) throws IOException, Exception {
  Logger logger=Logger.getLogger(ServerMain.class.getName());
  if (com.eas.sensors.positioning.AcceptorsFactory.isSupported(protocol)) {
    String acceptorModuleId=findAcceptorModule(protocol);
    if (acceptorModuleId != null) {
      Integer numWorkerThreads=portsNumWorkerThreads != null ? portsNumWorkerThreads.get(s.getPort()) : null;
      if (numWorkerThreads == null || numWorkerThreads == 0) {
        numWorkerThreads=DEFAULT_EXECUTOR_POOL_SIZE;
      }
      Integer sessionIdleTime=portsSessionIdleTimeouts != null ? portsSessionIdleTimeouts.get(s.getPort()) : null;
      if (sessionIdleTime == null || sessionIdleTime == 0) {
        sessionIdleTime=360;
      }
      Integer sessionIdleCheckInterval=portsSessionIdleCheckIntervals != null ? portsSessionIdleCheckIntervals.get(s.getPort()) : null;
      if (sessionIdleCheckInterval == null || sessionIdleCheckInterval == 0) {
        sessionIdleCheckInterval=360;
      }
      IoAcceptor sensorAcceptor=com.eas.sensors.positioning.AcceptorsFactory.create(protocol,numWorkerThreads,sessionIdleTime,sessionIdleCheckInterval,new com.eas.server.handlers.PositioningPacketReciever(this,acceptorModuleId,numWorkerThreads));
      if (sensorAcceptor != null) {
        sensorAcceptor.bind(s);
        logger.info(String.format(""String_Node_Str"",s.toString(),protocol));
      }
    }
 else {
      logger.info(String.format(""String_Node_Str"",protocol));
    }
  }
 else {
    logger.info(String.format(""String_Node_Str"",protocol));
  }
}",0.9947188567878223
145492,"public String filterSource(String bodyPreCode,String bodyPostCode){
  String toInsert=""String_Node_Str"" + ScriptUtils.HANDLERS_PROP_NAME + ""String_Node_Str""+ generateTopLevelNamedFunctionsContainer()+ ""String_Node_Str"";
  int functionsCaptureInsertAt=firstFunction.getAbsolutePosition() + firstFunction.getLength() - 1;
  if (bodyPreCode == null) {
    return scriptSource.substring(0,functionsCaptureInsertAt) + toInsert + (bodyPostCode != null ? bodyPostCode : ""String_Node_Str"")+ scriptSource.substring(functionsCaptureInsertAt,scriptSource.length());
  }
 else {
    AstNode body=firstFunction.getBody();
    int bodyPreCodeInsertAt=body.getAbsolutePosition() + 1;
    return scriptSource.substring(0,bodyPreCodeInsertAt) + bodyPreCode + scriptSource.substring(bodyPreCodeInsertAt,functionsCaptureInsertAt)+ toInsert+ (bodyPostCode != null ? bodyPostCode : ""String_Node_Str"")+ scriptSource.substring(functionsCaptureInsertAt,scriptSource.length());
  }
}","public String filterSource(String bodyPreCode,String bodyPostCode){
  String toInsert=""String_Node_Str"" + ScriptUtils.HANDLERS_PROP_NAME + ""String_Node_Str""+ generateTopLevelNamedFunctionsContainer()+ ""String_Node_Str"";
  if (firstFunction == null) {
    throw new IllegalStateException(""String_Node_Str"" + String.valueOf(entityId) + ""String_Node_Str"");
  }
  int functionsCaptureInsertAt=firstFunction.getAbsolutePosition() + firstFunction.getLength() - 1;
  if (bodyPreCode == null) {
    return scriptSource.substring(0,functionsCaptureInsertAt) + toInsert + (bodyPostCode != null ? bodyPostCode : ""String_Node_Str"")+ scriptSource.substring(functionsCaptureInsertAt,scriptSource.length());
  }
 else {
    AstNode body=firstFunction.getBody();
    int bodyPreCodeInsertAt=body.getAbsolutePosition() + 1;
    return scriptSource.substring(0,bodyPreCodeInsertAt) + bodyPreCode + scriptSource.substring(bodyPreCodeInsertAt,functionsCaptureInsertAt)+ toInsert+ (bodyPostCode != null ? bodyPostCode : ""String_Node_Str"")+ scriptSource.substring(functionsCaptureInsertAt,scriptSource.length());
  }
}",0.9328140214216164
145493,"/** 
 * Method checks if the type is supported for datamodel's internal usage. The types are fields or parameters types. If the type is reported as unsupported by this method, it doesn't mean that the type is unsupported in our platypus system at all. It means only that platypus application designer will not be able to add fields or parameters of such types.
 * @param type - the type to check.
 * @return true if the type is supported for datamodel's internal usage.
 */
@Override public boolean isTypeSupported(int type) throws Exception {
  SqlDriver driver=client.getDbMetadataCache(null).getConnectionDriver();
  Set<Integer> supportedTypes=driver.getSupportedJdbcDataTypes();
  if (SQLUtils.isTypeSupported(type)) {
    if (SQLUtils.getTypeGroup(type) == SQLUtils.TypesGroup.NUMBERS) {
      return (type == Types.NUMERIC && supportedTypes.contains(Types.NUMERIC)) || (type == Types.DECIMAL && supportedTypes.contains(Types.DECIMAL));
    }
 else     if (SQLUtils.getTypeGroup(type) == SQLUtils.TypesGroup.STRINGS) {
      return type == Types.VARCHAR && supportedTypes.contains(Types.VARCHAR);
    }
 else     if (SQLUtils.getTypeGroup(type) == SQLUtils.TypesGroup.DATES) {
      return (type == Types.DATE && supportedTypes.contains(Types.DATE)) || (type == Types.TIMESTAMP && supportedTypes.contains(Types.TIMESTAMP));
    }
 else     if (SQLUtils.isSimpleTypesCompatible(type,Types.BLOB)) {
      return (type == Types.BLOB && supportedTypes.contains(Types.BLOB)) || (type == Types.CLOB && supportedTypes.contains(Types.CLOB));
    }
 else     if (SQLUtils.isSimpleTypesCompatible(type,Types.BIT)) {
      return type == Types.BOOLEAN && supportedTypes.contains(Types.BOOLEAN);
    }
 else     if (SQLUtils.isSimpleTypesCompatible(type,Types.STRUCT)) {
      return type == Types.STRUCT && supportedTypes.contains(Types.STRUCT);
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","/** 
 * Method checks if the type is supported for datamodel's internal usage. The types are fields or parameters types. If the type is reported as unsupported by this method, it doesn't mean that the type is unsupported in our platypus system at all. It means only that platypus application designer will not be able to add fields or parameters of such types.
 * @param type - the type to check.
 * @return true if the type is supported for datamodel's internal usage.
 */
@Override public boolean isTypeSupported(int type) throws Exception {
  SqlDriver driver=client.getDbMetadataCache(dbId).getConnectionDriver();
  Set<Integer> supportedTypes=driver.getSupportedJdbcDataTypes();
  if (SQLUtils.isTypeSupported(type)) {
    if (SQLUtils.getTypeGroup(type) == SQLUtils.TypesGroup.NUMBERS) {
      return (type == Types.NUMERIC && supportedTypes.contains(Types.NUMERIC)) || (type == Types.DECIMAL && supportedTypes.contains(Types.DECIMAL));
    }
 else     if (SQLUtils.getTypeGroup(type) == SQLUtils.TypesGroup.STRINGS) {
      return type == Types.VARCHAR && supportedTypes.contains(Types.VARCHAR);
    }
 else     if (SQLUtils.getTypeGroup(type) == SQLUtils.TypesGroup.DATES) {
      return (type == Types.DATE && supportedTypes.contains(Types.DATE)) || (type == Types.TIMESTAMP && supportedTypes.contains(Types.TIMESTAMP));
    }
 else     if (SQLUtils.isSimpleTypesCompatible(type,Types.BLOB)) {
      return (type == Types.BLOB && supportedTypes.contains(Types.BLOB)) || (type == Types.CLOB && supportedTypes.contains(Types.CLOB));
    }
 else     if (SQLUtils.isSimpleTypesCompatible(type,Types.BIT)) {
      return type == Types.BOOLEAN && supportedTypes.contains(Types.BOOLEAN);
    }
 else     if (SQLUtils.isSimpleTypesCompatible(type,Types.STRUCT)) {
      return type == Types.STRUCT && supportedTypes.contains(Types.STRUCT);
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.9979123173277662
145494,"/** 
 * @param anAppCache
 * @param aDefaultDatasourceName
 * @param aAutoFillMetadata If true, metadatacache will be filled withtables, keys and other metadata in schema automatically. Otherwise it will query metadata table by table in each case. Default is true.
 * @param aScanCallback
 * @throws Exception
 */
public DatabasesClient(AppCache anAppCache,String aDefaultDatasourceName,boolean aAutoFillMetadata,ScanCallback aScanCallback) throws Exception {
  super();
  autoFillMetadata=aAutoFillMetadata;
  defaultDatasourceName=aDefaultDatasourceName;
  appCache=anAppCache;
  if (appCache != null) {
    queries=new StoredQueryFactory(this,appCache);
  }
}","/** 
 * @param anAppCache
 * @param aDefaultDatasourceName
 * @param aAutoFillMetadata If true, metadatacache will be filled withtables, keys and other metadata in schema automatically. Otherwise it will query metadata table by table in each case. Default is true.
 * @param aScanCallback
 * @throws Exception
 */
public DatabasesClient(AppCache anAppCache,String aDefaultDatasourceName,boolean aAutoFillMetadata) throws Exception {
  super();
  autoFillMetadata=aAutoFillMetadata;
  defaultDatasourceName=aDefaultDatasourceName;
  appCache=anAppCache;
  if (appCache != null) {
    queries=new StoredQueryFactory(this,appCache);
  }
}",0.979182729375482
145495,"public static AppCache obtainTwoTierAppCache(String aApplicationUrl) throws Exception {
  AppCache appCache;
  if (aApplicationUrl.startsWith(""String_Node_Str"")) {
    appCache=new DatabaseAppCache(aApplicationUrl);
  }
 else {
    File f=new File(new URI(aApplicationUrl));
    if (f.exists() && f.isDirectory()) {
      FilesAppCache filesAppCache=new FilesAppCache(f.getPath());
      filesAppCache.watch();
      appCache=filesAppCache;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + aApplicationUrl + ""String_Node_Str"");
    }
  }
  return appCache;
}","public static AppCache obtainTwoTierAppCache(String aApplicationUrl,FilesAppCache.ScanCallback aCallBack) throws Exception {
  AppCache appCache;
  if (aApplicationUrl.startsWith(""String_Node_Str"")) {
    appCache=new DatabaseAppCache(aApplicationUrl);
  }
 else {
    File f=new File(new URI(aApplicationUrl));
    if (f.exists() && f.isDirectory()) {
      FilesAppCache filesAppCache=new FilesAppCache(f.getPath(),aCallBack);
      filesAppCache.watch();
      appCache=filesAppCache;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + aApplicationUrl + ""String_Node_Str"");
    }
  }
  return appCache;
}",0.9613168724279836
145496,"public static Client getInstance(String aApplicationUrl,String aDefaultDatasourceName) throws Exception {
  if (aApplicationUrl != null) {
    if (aApplicationUrl.endsWith(H2DB_FILE_SUFFIX) && (new File(aApplicationUrl)).exists()) {
      aDefaultDatasourceName=""String_Node_Str"" + Math.abs(aApplicationUrl.hashCode());
      String jndiUrl=""String_Node_Str"" + aDefaultDatasourceName;
      GeneralResourceProvider.getInstance().registerDatasource(aDefaultDatasourceName,new DbConnectionSettings(""String_Node_Str"" + aApplicationUrl.substring(0,aApplicationUrl.length() - H2DB_FILE_SUFFIX.length()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null));
      AppCache appCache=obtainTwoTierAppCache(jndiUrl);
      return new ScriptedDatabasesClient(appCache,aDefaultDatasourceName,true);
    }
 else {
      if (aApplicationUrl.toLowerCase().startsWith(PlatypusHttpConstants.PROTOCOL_HTTP)) {
        return new PlatypusHttpsClient(aApplicationUrl);
      }
 else       if (aApplicationUrl.toLowerCase().startsWith(PlatypusHttpConstants.PROTOCOL_HTTPS)) {
        return new PlatypusHttpClient(aApplicationUrl);
      }
 else       if (aApplicationUrl.toLowerCase().startsWith(""String_Node_Str"")) {
        return new PlatypusNativeClient(aApplicationUrl);
      }
 else       if (aApplicationUrl.toLowerCase().startsWith(""String_Node_Str"") || aApplicationUrl.toLowerCase().startsWith(""String_Node_Str"")) {
        AppCache appCache=obtainTwoTierAppCache(aApplicationUrl);
        return new ScriptedDatabasesClient(appCache,aDefaultDatasourceName,true);
      }
 else {
        throw new Exception(""String_Node_Str"" + aApplicationUrl);
      }
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public static Client getInstance(String aApplicationUrl,String aDefaultDatasourceName) throws Exception {
  if (aApplicationUrl != null) {
    if (aApplicationUrl.endsWith(H2DB_FILE_SUFFIX) && (new File(aApplicationUrl)).exists()) {
      aDefaultDatasourceName=""String_Node_Str"" + Math.abs(aApplicationUrl.hashCode());
      String jndiUrl=""String_Node_Str"" + aDefaultDatasourceName;
      GeneralResourceProvider.getInstance().registerDatasource(aDefaultDatasourceName,new DbConnectionSettings(""String_Node_Str"" + aApplicationUrl.substring(0,aApplicationUrl.length() - H2DB_FILE_SUFFIX.length()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null));
      AppCache appCache=obtainTwoTierAppCache(jndiUrl,null);
      return new ScriptedDatabasesClient(appCache,aDefaultDatasourceName,true);
    }
 else {
      if (aApplicationUrl.toLowerCase().startsWith(PlatypusHttpConstants.PROTOCOL_HTTP)) {
        return new PlatypusHttpsClient(aApplicationUrl);
      }
 else       if (aApplicationUrl.toLowerCase().startsWith(PlatypusHttpConstants.PROTOCOL_HTTPS)) {
        return new PlatypusHttpClient(aApplicationUrl);
      }
 else       if (aApplicationUrl.toLowerCase().startsWith(""String_Node_Str"")) {
        return new PlatypusNativeClient(aApplicationUrl);
      }
 else       if (aApplicationUrl.toLowerCase().startsWith(""String_Node_Str"") || aApplicationUrl.toLowerCase().startsWith(""String_Node_Str"")) {
        AppCache appCache=obtainTwoTierAppCache(aApplicationUrl,null);
        return new ScriptedDatabasesClient(appCache,aDefaultDatasourceName,true);
      }
 else {
        throw new Exception(""String_Node_Str"" + aApplicationUrl);
      }
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9971264367816092
145497,"/** 
 * @inheritDoc
 */
public ScriptedDatabasesClient(AppCache anAppCache,String aDefaultDatasourceName,boolean aAutoFillMetadata,FilesAppCache.ScanCallback aScanCallback) throws Exception {
  super(anAppCache,aDefaultDatasourceName,aAutoFillMetadata,aScanCallback);
}","/** 
 * @inheritDoc
 */
public ScriptedDatabasesClient(AppCache anAppCache,String aDefaultDatasourceName,boolean aAutoFillMetadata) throws Exception {
  super(anAppCache,aDefaultDatasourceName,aAutoFillMetadata);
}",0.8861283643892339
145498,"/** 
 * @param args the command line arguments
 * @throws IOException
 * @throws Exception
 */
public static void main(String[] args) throws IOException, Exception {
  checkUserHome();
  Set<String> tasks=new HashSet<>();
  parseArgs(args,tasks);
  if (url == null || url.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SSLContext ctx=createSSLContext();
  AppCache appCache=ClientFactory.obtainTwoTierAppCache(url);
  ScriptedDatabasesClient appDbClient=new ScriptedDatabasesClient(appCache,defDatasource,true,new ServerTasksScanner(tasks));
  if (System.getProperty(ScriptRunner.DEBUG_PROPERTY) != null) {
    Debugger debugger=Debugger.initialize(false);
    registerMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME,debugger);
    registerMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME,Breakpoints.getInstance());
  }
  PlatypusServer server=new PlatypusServer(appDbClient,ctx,getListenAddresses(),getPortsProtocols(),getPortsSessionIdleTimeouts(),getPortsSessionIdleCheckIntervals(),getPortsNumWorkerThreads(),tasks,appElement);
  server.setAnonymousEnabled(anonymousEnabled);
  appDbClient.setContextHost(server);
  appDbClient.setPrincipalHost(server);
  PlatypusScriptedResource.init(appDbClient,server,server);
  ScriptUtils.getScope().defineProperty(ServerScriptRunner.MODULES_SCRIPT_NAME,server.getScriptsCache(),ScriptableObject.READONLY);
  server.start();
}","/** 
 * @param args the command line arguments
 * @throws IOException
 * @throws Exception
 */
public static void main(String[] args) throws IOException, Exception {
  checkUserHome();
  Set<String> tasks=new HashSet<>();
  parseArgs(args,tasks);
  if (url == null || url.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SSLContext ctx=createSSLContext();
  AppCache appCache=ClientFactory.obtainTwoTierAppCache(url,new ServerTasksScanner(tasks));
  ScriptedDatabasesClient appDbClient=new ScriptedDatabasesClient(appCache,defDatasource,true);
  if (System.getProperty(ScriptRunner.DEBUG_PROPERTY) != null) {
    Debugger debugger=Debugger.initialize(false);
    registerMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME,debugger);
    registerMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME,Breakpoints.getInstance());
  }
  PlatypusServer server=new PlatypusServer(appDbClient,ctx,getListenAddresses(),getPortsProtocols(),getPortsSessionIdleTimeouts(),getPortsSessionIdleCheckIntervals(),getPortsNumWorkerThreads(),tasks,appElement);
  server.setAnonymousEnabled(anonymousEnabled);
  appDbClient.setContextHost(server);
  appDbClient.setPrincipalHost(server);
  PlatypusScriptedResource.init(appDbClient,server,server);
  ScriptUtils.getScope().defineProperty(ServerScriptRunner.MODULES_SCRIPT_NAME,server.getScriptsCache(),ScriptableObject.READONLY);
  server.start();
}",0.9783393501805054
145499,"@Override public synchronized String format(LogRecord event){
  if (event.getLoggerName().toLowerCase().contains(""String_Node_Str"".toLowerCase())) {
    StringBuilder message=new StringBuilder();
    Date date=new Date(event.getMillis());
    message.append(dateFormat.format(date)).append(""String_Node_Str"");
    message.append(event.getLevel().getName()).append(""String_Node_Str"");
    if (event.getMessage() != null)     message.append(event.getMessage()).append(""String_Node_Str"").append(""String_Node_Str"");
    if (event.getThrown() != null && showStackTraces) {
      message.append(getStackTraceAsString(event.getThrown(),""String_Node_Str"",""String_Node_Str""));
    }
    return message.toString();
  }
 else {
    return super.format(event);
  }
}","@Override public synchronized String format(LogRecord event){
  StringBuilder message=new StringBuilder();
  Date date=new Date(event.getMillis());
  message.append(dateFormat.format(date)).append(""String_Node_Str"");
  message.append(event.getLevel().getName()).append(""String_Node_Str"");
  if (event.getMessage() != null)   message.append(event.getMessage()).append(""String_Node_Str"").append(""String_Node_Str"");
  if (event.getThrown() != null && showStackTraces) {
    message.append(getStackTraceAsString(event.getThrown(),""String_Node_Str"",""String_Node_Str""));
  }
  return message.toString();
}",0.885439763488544
145500,"public static void require(JavaScriptObject aDeps,final JavaScriptObject aOnSuccess,final JavaScriptObject aOnFailure){
}","public static void require(final JavaScriptObject aDeps,final JavaScriptObject aOnSuccess,final JavaScriptObject aOnFailure){
}",0.9758064516129032
145501,"public void resolveField() throws Exception {
  if (entity != null) {
    if (entity instanceof ParametersEntity) {
      if (isField) {
        field=entity.getFields().get(fieldName);
      }
    }
 else     if (entity.getQuery() != null) {
      if (isField) {
        field=entity.getFields().get(fieldName);
      }
 else {
        field=entity.getQuery().getParameters().get(fieldName);
      }
    }
  }
}","public void resolveField() throws Exception {
  if (entity != null) {
    if (entity instanceof ParametersEntity) {
      if (isField) {
        field=entity.getFields().get(fieldName);
      }
    }
 else     if (entity.getQuery() != null) {
      if (isField) {
        field=entity.getFields().get(fieldName);
      }
 else {
        field=entity.getQuery().getParameters().get(fieldName);
      }
    }
  }
 else {
    Logger.getLogger(ModelElementRef.class.getName()).log(Level.SEVERE,""String_Node_Str"" + entityId + ""String_Node_Str""+ (isField ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ fieldName);
  }
}",0.7911453320500481
145502,"public ModelElementRef(Model aModel,String aEntityId,String aFieldName,boolean aIsField) throws Exception {
  super();
  model=aModel;
  entity=aModel.getEntityById(aEntityId);
  fieldName=aFieldName;
  isField=aIsField;
  tryResolveField();
}","public ModelElementRef(Model aModel,String aEntityId,String aFieldName,boolean aIsField) throws Exception {
  super();
  model=aModel;
  entityId=aEntityId;
  entity=aModel.getEntityById(entityId);
  fieldName=aFieldName;
  isField=aIsField;
  tryResolveField();
}",0.95069033530572
145503,"public Point getGeoPosition() throws Exception {
  if (pane != null) {
    java.awt.Point.Double position=pane.getGeoPosition();
    return GisUtilities.createPoint(position.x,position.y);
  }
 else {
    return null;
  }
}","public Point getGeoPosition() throws Exception {
  if (pane != null) {
    java.awt.Point.Double position=pane.getGeoPosition();
    return GeometryUtils.createPoint(position.x,position.y);
  }
 else {
    return null;
  }
}",0.970917225950783
145504,"public Point geo2Cartesian(Point aPt) throws FactoryException, TransformException {
  Point2D.Double res=pane.geo2Cartesian(new Point2D.Double(aPt.getX(),aPt.getY()));
  return GisUtilities.createPoint(res);
}","public Point geo2Cartesian(Point aPt) throws FactoryException, TransformException {
  Point2D.Double res=pane.geo2Cartesian(new Point2D.Double(aPt.getX(),aPt.getY()));
  return GeometryUtils.createPoint(res);
}",0.9689737470167064
145505,"public Point screen2Cartesian(Point aPt) throws NoninvertibleTransformException {
  Point2D.Double res=pane.screen2Cartesian(new java.awt.Point((int)Math.round(aPt.getX()),(int)Math.round(aPt.getY())));
  return GisUtilities.createPoint(res);
}","public Point screen2Cartesian(Point aPt) throws NoninvertibleTransformException {
  Point2D.Double res=pane.screen2Cartesian(new java.awt.Point((int)Math.round(aPt.getX()),(int)Math.round(aPt.getY())));
  return GeometryUtils.createPoint(res);
}",0.9734151329243352
145506,"public List<SelectionEntry> nonSelectableHit(Point aHitPoint) throws Exception {
  double bufferZoneWidth=calculateCurrentHitBuffer();
  Polygon hitPoly=GisUtilities.constructRectyPolygon(new Point2D.Double(aHitPoint.getX() - bufferZoneWidth,aHitPoint.getY() - bufferZoneWidth),new Point2D.Double(aHitPoint.getX() + bufferZoneWidth,aHitPoint.getY() + bufferZoneWidth));
  return hit(hitPoly,false);
}","public List<SelectionEntry> nonSelectableHit(Point aHitPoint) throws Exception {
  double bufferZoneWidth=calculateCurrentHitBuffer();
  Polygon hitPoly=GeometryUtils.constructRectyPolygon(new Point2D.Double(aHitPoint.getX() - bufferZoneWidth,aHitPoint.getY() - bufferZoneWidth),new Point2D.Double(aHitPoint.getX() + bufferZoneWidth,aHitPoint.getY() + bufferZoneWidth));
  return hit(hitPoly,false);
}",0.9837702871410736
145507,"/** 
 * Tests whether a point is on one of the selected geometries, rather than points
 * @param aPoint2HitWith Point to test selected geometries against. Thepoint must be in geo coordiantes.
 * @return True if hitted, false otherwise
 * @throws Exception
 */
public boolean selectedGeometryHitted(Point aPoint2HitWith) throws Exception {
  if (!getSelection().isEmpty()) {
    double bufferZoneWidth=calculateCurrentHitBuffer();
    Polygon hitPoly=GisUtilities.constructRectyPolygon(new Point2D.Double(aPoint2HitWith.getX() - bufferZoneWidth,aPoint2HitWith.getY() - bufferZoneWidth),new Point2D.Double(aPoint2HitWith.getX() + bufferZoneWidth,aPoint2HitWith.getY() + bufferZoneWidth));
    Set<Geometry> selectedGeometries=GisUtilities.convertSelectionEntries2Geometries(getSelection().getSelection());
    for (    Geometry geom : selectedGeometries) {
      if (geom.intersects(hitPoly)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Tests whether a point is on one of the selected geometries, rather than points
 * @param aPoint2HitWith Point to test selected geometries against. Thepoint must be in geo coordiantes.
 * @return True if hitted, false otherwise
 * @throws Exception
 */
public boolean selectedGeometryHitted(Point aPoint2HitWith) throws Exception {
  if (!getSelection().isEmpty()) {
    double bufferZoneWidth=calculateCurrentHitBuffer();
    Polygon hitPoly=GeometryUtils.constructRectyPolygon(new Point2D.Double(aPoint2HitWith.getX() - bufferZoneWidth,aPoint2HitWith.getY() - bufferZoneWidth),new Point2D.Double(aPoint2HitWith.getX() + bufferZoneWidth,aPoint2HitWith.getY() + bufferZoneWidth));
    Set<Geometry> selectedGeometries=GisUtilities.convertSelectionEntries2Geometries(getSelection().getSelection());
    for (    Geometry geom : selectedGeometries) {
      if (geom.intersects(hitPoly)) {
        return true;
      }
    }
  }
  return false;
}",0.9931542917324908
145508,"public Point cartesian2Geo(Point aPt) throws FactoryException, TransformException {
  Point2D.Double res=pane.cartesian2Geo(new Point2D.Double(aPt.getX(),aPt.getY()));
  return GisUtilities.createPoint(res);
}","public Point cartesian2Geo(Point aPt) throws FactoryException, TransformException {
  Point2D.Double res=pane.cartesian2Geo(new Point2D.Double(aPt.getX(),aPt.getY()));
  return GeometryUtils.createPoint(res);
}",0.9689737470167064
145509,"public Point cartesian2Screen(Point aPt) throws FactoryException, TransformException {
  java.awt.Point res=pane.cartesian2Screen(new Point2D.Double(aPt.getX(),aPt.getY()));
  return GisUtilities.createPoint(res.x,res.y);
}","public Point cartesian2Screen(Point aPt) throws FactoryException, TransformException {
  java.awt.Point res=pane.cartesian2Screen(new Point2D.Double(aPt.getX(),aPt.getY()));
  return GeometryUtils.createPoint(res.x,res.y);
}",0.970917225950783
145510,"private Polygon[] processHoles(Map<Integer,List<Integer>> aHoles,Polygon[] aResultHoles){
  List<Polygon> holes=new ArrayList<>(Arrays.asList(aResultHoles));
  for (  Integer key : aHoles.keySet()) {
    List<Integer> deleteCoordinates=aHoles.get(key);
    Collections.sort(deleteCoordinates,new DescComparator());
    Coordinate[] coordinate=GisUtilities.deletePointsFromCoordinates(aResultHoles[key],deleteCoordinates);
    if (coordinate != null && GisUtilities.isValidGeometryDataSection(coordinate,Polygon.class)) {
      holes.set(key,(Polygon)GisUtilities.constructGeometry(coordinate,Polygon.class));
    }
 else {
      holes.remove(key.intValue());
    }
  }
  Polygon[] res=new Polygon[0];
  return holes.toArray(res);
}","private Polygon[] processHoles(Map<Integer,List<Integer>> aHoles,Polygon[] aResultHoles){
  List<Polygon> holes=new ArrayList<>(Arrays.asList(aResultHoles));
  for (  Integer key : aHoles.keySet()) {
    List<Integer> deleteCoordinates=aHoles.get(key);
    Collections.sort(deleteCoordinates,new DescComparator());
    Coordinate[] coordinate=GeometryUtils.deletePointsFromCoordinates(aResultHoles[key],deleteCoordinates);
    if (coordinate != null && GeometryUtils.isValidGeometryDataSection(coordinate,Polygon.class)) {
      holes.set(key,(Polygon)GeometryUtils.constructGeometry(coordinate,Polygon.class));
    }
 else {
      holes.remove(key.intValue());
    }
  }
  Polygon[] res=new Polygon[0];
  return holes.toArray(res);
}",0.9733788395904436
145511,"public void configureCursors(MouseEvent e) throws Exception {
  Object mode=map.getTools().getInstalled();
  if (mode == MouseTools.VIEW) {
    ensureCursor(Cursors.ZOOM);
  }
 else   if (mode == MouseTools.NAVIGATION) {
    Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(e.getPoint());
    Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
    boolean shapeSelected=map.selectedGeometryHitted(GisUtilities.createPoint(goePt));
    boolean pointSelected=map.selectedPointHitted(GisUtilities.createPoint(goePt));
    if (shapeSelected || pointSelected) {
      if (pointSelected) {
        ensureCursor(Cursors.PAN_POINT);
      }
 else {
        ensureCursor(Cursors.HAND);
      }
    }
 else {
      ensureCursor(Cursors.ZOOM);
    }
  }
 else   if (mode == MouseTools.SELECTION) {
    Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(e.getPoint());
    Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
    boolean shapeSelected=map.selectedGeometryHitted(GisUtilities.createPoint(goePt));
    boolean pointSelected=map.selectedPointHitted(GisUtilities.createPoint(goePt));
    if (shapeSelected || pointSelected) {
      if (pointSelected) {
        ensureCursor(Cursors.PAN_POINT);
      }
 else {
        ensureCursor(Cursors.HAND);
      }
    }
 else {
      ensureCursor(Cursors.CROSS);
    }
  }
 else   if (mode == MouseTools.EDITING) {
    ensureCursor(Cursors.DRAW);
  }
 else   if (mode == MouseTools.VERTICES_EDITING) {
    Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(e.getPoint());
    Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
    boolean shapeSelected=map.selectedPointHitted(GisUtilities.createPoint(goePt));
    if (shapeSelected) {
      ensureCursor(Cursors.PAN_POINT);
    }
 else {
      ensureCursor(Cursors.CROSS);
    }
  }
}","public void configureCursors(MouseEvent e) throws Exception {
  Object mode=map.getTools().getInstalled();
  if (mode == MouseTools.VIEW) {
    ensureCursor(Cursors.ZOOM);
  }
 else   if (mode == MouseTools.NAVIGATION) {
    Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(e.getPoint());
    Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
    boolean shapeSelected=map.selectedGeometryHitted(GeometryUtils.createPoint(goePt));
    boolean pointSelected=map.selectedPointHitted(GeometryUtils.createPoint(goePt));
    if (shapeSelected || pointSelected) {
      if (pointSelected) {
        ensureCursor(Cursors.PAN_POINT);
      }
 else {
        ensureCursor(Cursors.HAND);
      }
    }
 else {
      ensureCursor(Cursors.ZOOM);
    }
  }
 else   if (mode == MouseTools.SELECTION) {
    Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(e.getPoint());
    Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
    boolean shapeSelected=map.selectedGeometryHitted(GeometryUtils.createPoint(goePt));
    boolean pointSelected=map.selectedPointHitted(GeometryUtils.createPoint(goePt));
    if (shapeSelected || pointSelected) {
      if (pointSelected) {
        ensureCursor(Cursors.PAN_POINT);
      }
 else {
        ensureCursor(Cursors.HAND);
      }
    }
 else {
      ensureCursor(Cursors.CROSS);
    }
  }
 else   if (mode == MouseTools.EDITING) {
    ensureCursor(Cursors.DRAW);
  }
 else   if (mode == MouseTools.VERTICES_EDITING) {
    Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(e.getPoint());
    Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
    boolean shapeSelected=map.selectedPointHitted(GeometryUtils.createPoint(goePt));
    if (shapeSelected) {
      ensureCursor(Cursors.PAN_POINT);
    }
 else {
      ensureCursor(Cursors.CROSS);
    }
  }
}",0.9820887296775972
145512,"private void showHint(Point aPoint){
  if (aPoint != null) {
    try {
      Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(aPoint);
      Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
      com.vividsolutions.jts.geom.Point pt=GisUtilities.createPoint(goePt);
      List<SelectionEntry> geoms=map.nonSelectableHit(pt);
      if (geoms != null && geoms.size() > 0) {
        String hintText=map.beforeToolTipShow(geoms.get(0).getRow(),geoms.get(0).getEntity());
        if (hintText != null && !hintText.isEmpty()) {
          hint.setToolTipText(hintText);
          map.getPane().add(hint,pt,0);
          map.getPane().repaint();
        }
      }
 else {
        map.getPane().remove(hint);
        map.getPane().repaint();
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(MouseCursorer.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","private void showHint(Point aPoint){
  if (aPoint != null) {
    try {
      Point2D.Double cartPt=map.getPane().awtScreen2Cartesian(aPoint);
      Point2D.Double goePt=map.getPane().cartesian2Geo(cartPt);
      com.vividsolutions.jts.geom.Point pt=GeometryUtils.createPoint(goePt);
      List<SelectionEntry> geoms=map.nonSelectableHit(pt);
      if (geoms != null && geoms.size() > 0) {
        String hintText=map.beforeToolTipShow(geoms.get(0).getRow(),geoms.get(0).getEntity());
        if (hintText != null && !hintText.isEmpty()) {
          hint.setToolTipText(hintText);
          map.getPane().add(hint,pt,0);
          map.getPane().repaint();
        }
      }
 else {
        map.getPane().remove(hint);
        map.getPane().repaint();
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(MouseCursorer.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}",0.9926428975664968
145513,"@Override protected boolean isBeginDragValid() throws Exception {
  Point2D.Double cartesianPt=pane.awtScreen2Cartesian(mouseDown);
  Point2D.Double geoPt=pane.cartesian2Geo(cartesianPt);
  return !map.selectedPointHitted(GisUtilities.createPoint(geoPt));
}","@Override protected boolean isBeginDragValid() throws Exception {
  Point2D.Double cartesianPt=pane.awtScreen2Cartesian(mouseDown);
  Point2D.Double geoPt=pane.cartesian2Geo(cartesianPt);
  return !map.selectedPointHitted(GeometryUtils.createPoint(geoPt));
}",0.974757281553398
145514,"public void updatePreferences(){
  try {
    Preferences connectionsPref=Preferences.userRoot().node(ClientFactory.CONNECTIONS_SETTINGS_NODE);
    connectionsPref.removeNode();
    connectionsPref=Preferences.userRoot().node(ClientFactory.CONNECTIONS_SETTINGS_NODE);
    for (int i=0; i < connectionsListModel.getSize(); i++) {
      ConnectionSettings settings=(ConnectionSettings)connectionsListModel.getElementAt(i);
      if (settings.isEditable()) {
        String strIndex=String.valueOf(i);
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_TITLE_SETTING,settings.getName() != null ? settings.getName() : ""String_Node_Str"");
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_URL_SETTING,settings.getUrl() != null ? settings.getUrl() : ""String_Node_Str"");
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_USER_SETTING,settings.getUser() != null ? settings.getUser() : ""String_Node_Str"");
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_PASSWORD_SETTING,settings.getPassword() != null ? settings.getPassword() : ""String_Node_Str"");
      }
    }
  }
 catch (  BackingStoreException ex) {
    exSupport.exceptionThrown(ex);
  }
}","public void updatePreferences(){
  try {
    Preferences connectionsPref=Preferences.userRoot().node(ClientFactory.CONNECTIONS_SETTINGS_NODE);
    connectionsPref.removeNode();
    connectionsPref=Preferences.userRoot().node(ClientFactory.CONNECTIONS_SETTINGS_NODE);
    int defaultSettingsIndex=-1;
    for (int i=0; i < connectionsListModel.getSize(); i++) {
      ConnectionSettings settings=(ConnectionSettings)connectionsListModel.getElementAt(i);
      if (settings == ClientFactory.getDefaultSettings()) {
        defaultSettingsIndex=i;
      }
      if (settings.isEditable()) {
        String strIndex=String.valueOf(i);
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_TITLE_SETTING,settings.getName() != null ? settings.getName() : ""String_Node_Str"");
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_URL_SETTING,settings.getUrl() != null ? settings.getUrl() : ""String_Node_Str"");
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_USER_SETTING,settings.getUser() != null ? settings.getUser() : ""String_Node_Str"");
        connectionsPref.node(strIndex).put(ClientFactory.CONNECTION_PASSWORD_SETTING,settings.getPassword() != null ? settings.getPassword() : ""String_Node_Str"");
      }
    }
    if (defaultSettingsIndex != -1) {
      Preferences.userRoot().node(SETTINGS_NODE).putInt(DEFAULT_CONNECTION_INDEX_SETTING,defaultSettingsIndex);
    }
  }
 catch (  BackingStoreException ex) {
    exSupport.exceptionThrown(ex);
  }
}",0.8931608133086876
145515,"private void updateCredentialsControls(){
  ConnectionSettings selectedSettings=(ConnectionSettings)lstConnections.getSelectedValue();
  if (selectedSettings != null) {
    tfUserName.setText(selectedSettings.getUser());
    tfPassword.setText(selectedSettings.getPassword());
  }
  if (tfUserName.getText() != null && !tfUserName.getText().isEmpty()) {
    tfPassword.requestFocus();
  }
}","private void updateCredentialsControls(){
  ConnectionSettings selectedSettings=(ConnectionSettings)lstConnections.getSelectedValue();
  if (selectedSettings != null) {
    tfUserName.setText(selectedSettings.getUser());
    tfPassword.setText(selectedSettings.getPassword());
  }
  if (tfUserName.getText() != null && !tfUserName.getText().isEmpty()) {
    tfPassword.requestFocus();
  }
  if (tfPassword.getPassword() != null && tfPassword.getPassword().length > 0) {
    checkRememberPassword.setSelected(true);
  }
}",0.8571428571428571
145516,"public static void readSettings() throws Exception {
  settings=null;
  defaultSettings=null;
  int defaultConnectionIndex=Preferences.userRoot().node(SETTINGS_NODE).getInt(DEFAULT_CONNECTION_INDEX_SETTING,0);
  if (defaultConnectionIndex < 0) {
    defaultConnectionIndex=0;
  }
  Map<String,ConnectionSettings> settingsMap=new TreeMap<>();
  Preferences userConnectionsPrefs=Preferences.userRoot().node(CONNECTIONS_SETTINGS_NODE);
  settingsNodeToSettings(userConnectionsPrefs,settingsMap,true);
  if (settingsMap.isEmpty()) {
    Preferences defaultConnectionsPrefs=Preferences.systemRoot().node(CONNECTIONS_SETTINGS_NODE);
    try {
      settingsNodeToSettings(defaultConnectionsPrefs,settingsMap,false);
    }
 catch (    Exception ex) {
      Logger.getLogger(ClientFactory.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
  settings=new ConnectionSettings[settingsMap.size()];
  int i=0;
  for (  String connNodeName : settingsMap.keySet()) {
    settings[i++]=settingsMap.get(connNodeName);
  }
  if (settings.length > 0) {
    if (defaultConnectionIndex >= settings.length) {
      defaultConnectionIndex=settings.length - 1;
    }
    if (defaultConnectionIndex < 0) {
      defaultConnectionIndex=0;
    }
    defaultSettings=settings[defaultConnectionIndex];
  }
 else {
    defaultSettings=null;
  }
}","public static void readSettings() throws Exception {
  settings=null;
  defaultSettings=null;
  int defaultConnectionIndex=Preferences.userRoot().node(SETTINGS_NODE).getInt(DEFAULT_CONNECTION_INDEX_SETTING,0);
  if (defaultConnectionIndex < 0) {
    defaultConnectionIndex=0;
  }
  Map<Integer,ConnectionSettings> settingsMap=new TreeMap<>();
  Preferences userConnectionsPrefs=Preferences.userRoot().node(CONNECTIONS_SETTINGS_NODE);
  settingsNodeToSettings(userConnectionsPrefs,settingsMap,true);
  if (settingsMap.isEmpty()) {
    Preferences defaultConnectionsPrefs=Preferences.systemRoot().node(CONNECTIONS_SETTINGS_NODE);
    try {
      settingsNodeToSettings(defaultConnectionsPrefs,settingsMap,false);
    }
 catch (    Exception ex) {
      Logger.getLogger(ClientFactory.class.getName()).log(Level.SEVERE,ex.getMessage(),ex);
    }
  }
  settings=new ConnectionSettings[settingsMap.size()];
  int i=0;
  for (  Integer connNodeName : settingsMap.keySet()) {
    settings[i++]=settingsMap.get(connNodeName);
  }
  if (settings.length > 0) {
    if (defaultConnectionIndex >= settings.length) {
      defaultConnectionIndex=settings.length - 1;
    }
    if (defaultConnectionIndex < 0) {
      defaultConnectionIndex=0;
    }
    defaultSettings=settings[defaultConnectionIndex];
  }
 else {
    defaultSettings=null;
  }
}",0.9902402402402404
145517,"private static void settingsNodeToSettings(Preferences connectionsPrefs,Map<String,ConnectionSettings> settingsMap,boolean aEditable) throws Exception {
  String[] settingsNodesNames=connectionsPrefs.childrenNames();
  for (int i=0; i < settingsNodesNames.length; i++) {
    Preferences connectionPrefs=connectionsPrefs.node(settingsNodesNames[i]);
    String connUrl=connectionPrefs.get(ClientFactory.CONNECTION_URL_SETTING,""String_Node_Str"");
    connUrl=connUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
    ConnectionSettings connectionsettings=new PlatypusConnectionSettings();
    settingsMap.put(settingsNodesNames[i],connectionsettings);
    connectionsettings.setUrl(connUrl);
    connectionsettings.setName(connectionPrefs.get(ClientFactory.CONNECTION_TITLE_SETTING,""String_Node_Str""));
    connectionsettings.setUser(connectionPrefs.get(ClientFactory.CONNECTION_USER_SETTING,""String_Node_Str""));
    connectionsettings.setPassword(connectionPrefs.get(ClientFactory.CONNECTION_PASSWORD_SETTING,""String_Node_Str""));
    connectionsettings.setEditable(aEditable);
  }
}","private static void settingsNodeToSettings(Preferences connectionsPrefs,Map<Integer,ConnectionSettings> settingsMap,boolean aEditable) throws Exception {
  String[] settingsNodesNames=connectionsPrefs.childrenNames();
  for (int i=0; i < settingsNodesNames.length; i++) {
    Preferences connectionPrefs=connectionsPrefs.node(settingsNodesNames[i]);
    String connUrl=connectionPrefs.get(ClientFactory.CONNECTION_URL_SETTING,""String_Node_Str"");
    connUrl=connUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
    ConnectionSettings connectionsettings=new PlatypusConnectionSettings();
    settingsMap.put(Integer.valueOf(settingsNodesNames[i]),connectionsettings);
    connectionsettings.setUrl(connUrl);
    connectionsettings.setName(connectionPrefs.get(ClientFactory.CONNECTION_TITLE_SETTING,""String_Node_Str""));
    connectionsettings.setUser(connectionPrefs.get(ClientFactory.CONNECTION_USER_SETTING,""String_Node_Str""));
    connectionsettings.setPassword(connectionPrefs.get(ClientFactory.CONNECTION_PASSWORD_SETTING,""String_Node_Str""));
    connectionsettings.setEditable(aEditable);
  }
}",0.9862763037511436
145518,"public static void startDebugging(DebuggerEnvironment env) throws Exception {
  Breakpoint[] breaks=DebuggerManager.getDebuggerManager().getBreakpoints();
  for (  Breakpoint breakPoint : breaks) {
    if (breakPoint instanceof PlatypusBreakpoint) {
      PlatypusBreakpoint pBreak=(PlatypusBreakpoint)breakPoint;
      pBreak.remoteAdd(env.mBreakpoints);
    }
  }
  env.mDebuggerListener.debuggingStarted=true;
  env.mDebuggerListener.running=true;
}","public static void startDebugging(DebuggerEnvironment env) throws Exception {
  Breakpoint[] breaks=DebuggerManager.getDebuggerManager().getBreakpoints();
  for (  Breakpoint breakPoint : breaks) {
    if (breakPoint instanceof PlatypusBreakpoint) {
      PlatypusBreakpoint pBreak=(PlatypusBreakpoint)breakPoint;
      pBreak.remoteAdd(env.mBreakpoints);
    }
  }
  env.mDebuggerListener.debuggingStarted=true;
  env.mDebugger.continueRun();
  env.mDebuggerListener.running=true;
}",0.9668449197860962
145519,"protected void organizeLeft(){
  BorderLayoutData layoutData=new BorderLayoutData(dividerLocation);
  layoutData.setCollapsible(oneTouchExpandable);
  layoutData.setCollapseMini(oneTouchExpandable);
  layoutData.setCollapseHidden(oneTouchExpandable);
  layoutData.setSplit(true);
  setWestWidget(null);
  setNorthWidget(null);
  if (leftComponent != null) {
    ContentPanel cp=new ContentPanel();
    cp.setCollapsible(true);
    cp.setHideCollapseTool(true);
    cp.setHeaderVisible(false);
    cp.setBorders(false);
    cp.setBodyBorder(false);
    cp.getBody().getStyle().setBackgroundColor(""String_Node_Str"");
    cp.addResizeHandler(new ResizeHandler(){
      @Override public void onResize(      ResizeEvent event){
        if (orientation == HORIZONTAL_SPLIT)         dividerLocation=event.getWidth();
 else         dividerLocation=event.getHeight();
      }
    }
);
    if (orientation == HORIZONTAL_SPLIT) {
      layoutData.setMargins(new Margins(0,dividerSize,0,0));
      setWestWidget(cp,layoutData);
    }
 else {
      layoutData.setMargins(new Margins(0,0,dividerSize,0));
      setNorthWidget(cp,layoutData);
    }
    cp.addBeforeCollapseHandler(collapseHandler);
    cp.addBeforeExpandHandler(collapseHandler);
    leftComponent.getElement().getStyle().setOverflow(Style.Overflow.HIDDEN);
    cp.setWidget(leftComponent);
  }
  if (isAttached()) {
    Scheduler.get().scheduleDeferred(new ScheduledCommand(){
      @Override public void execute(){
        forceLayout();
      }
    }
);
  }
}","protected void organizeLeft(){
  BorderLayoutData layoutData=new BorderLayoutData(dividerLocation);
  layoutData.setCollapsible(oneTouchExpandable);
  layoutData.setCollapseMini(oneTouchExpandable);
  layoutData.setCollapseHidden(oneTouchExpandable);
  layoutData.setSplit(true);
  setWestWidget(null);
  setNorthWidget(null);
  if (leftComponent != null) {
    ContentPanel cp=new ContentPanel();
    cp.setCollapsible(true);
    cp.setHideCollapseTool(true);
    cp.setHeaderVisible(false);
    cp.setBorders(false);
    cp.setBodyBorder(false);
    cp.getBody().getStyle().setBackgroundColor(""String_Node_Str"");
    cp.addResizeHandler(new ResizeHandler(){
      @Override public void onResize(      ResizeEvent event){
        if (orientation == HORIZONTAL_SPLIT)         dividerLocation=event.getWidth();
 else         dividerLocation=event.getHeight();
      }
    }
);
    if (orientation == HORIZONTAL_SPLIT) {
      layoutData.setMargins(new Margins(0,dividerSize,0,0));
      setWestWidget(cp,layoutData);
    }
 else {
      layoutData.setMargins(new Margins(0,0,dividerSize,0));
      setNorthWidget(cp,layoutData);
    }
    if (cp.isRendered()) {
      cp.addBeforeCollapseHandler(collapseHandler);
      cp.addBeforeExpandHandler(collapseHandler);
    }
    leftComponent.getElement().getStyle().setOverflow(Style.Overflow.HIDDEN);
    cp.setWidget(leftComponent);
  }
  if (isAttached()) {
    Scheduler.get().scheduleDeferred(new ScheduledCommand(){
      @Override public void execute(){
        forceLayout();
      }
    }
);
  }
}",0.9879282218597064
145520,"@Override public void onBeforeExpand(BeforeExpandEvent event){
}","@Override public void onBeforeExpand(BeforeExpandEvent event){
  event.setCancelled(true);
  onExpand((ContentPanel)event.getSource());
}",0.6368159203980099
145521,"@Override public void onBeforeCollapse(BeforeCollapseEvent event){
}","@Override public void onBeforeCollapse(BeforeCollapseEvent event){
  event.setCancelled(true);
  onCollapse((ContentPanel)event.getSource());
}",0.6445497630331753
145522,"public synchronized ScriptRunner get(String aModuleId) throws Exception {
  ScriptRunner runner=cache.get(aModuleId);
  if (runner != null && !app.getClient().getAppCache().isActual(runner.getApplicationElementId(),runner.getTxtContentLength(),runner.getTxtCrc32())) {
    runner=null;
    cache.remove(aModuleId);
    app.getClient().getAppCache().remove(aModuleId);
  }
  if (runner == null) {
    runner=new ScriptRunner(aModuleId,app.getClient(),ScriptRunner.initializePlatypusStandardLibScope(),app,app,new Object[]{});
    cache.put(aModuleId,runner);
  }
  return runner;
}","public synchronized ScriptRunner get(String aModuleId) throws Exception {
  ScriptRunner runner=cache.get(aModuleId);
  if (runner != null && !app.getClient().getAppCache().isActual(runner.getApplicationElementId(),runner.getTxtContentLength(),runner.getTxtCrc32())) {
    runner=null;
    cache.remove(aModuleId);
    app.getClient().getAppCache().remove(aModuleId);
  }
  if (runner == null) {
    runner=new ScriptRunner(aModuleId,app.getClient(),ScriptRunner.initializePlatypusStandardLibScope(),app,app,new Object[]{});
    runner.setPrototype(ScriptRunnerPrototype.getInstance());
    runner.execute();
    cache.put(aModuleId,runner);
  }
  return runner;
}",0.932475884244373
145523,"@Override protected void resolveRelation(Relation<E> aRelation,Model<E,P,C,Q> aModel) throws Exception {
  super.resolveRelation(aRelation,aModel);
  if (aRelation instanceof ReferenceRelation<?>) {
    if (aRelation.getLeftField() != null && !aRelation.getLeftField().isFk()) {
      aRelation.setLeftField(null);
    }
    if (aRelation.getRightField() != null && !aRelation.getRightField().isPk()) {
      aRelation.setRightField(null);
    }
    if (aRelation.getLeftField() != null && aRelation.getLeftField().isFk() && aRelation.getRightField() != null && aRelation.getRightField().isPk()) {
      String leftTableName=aRelation.getLeftField().getFk().getReferee().getTable();
      String leftFieldName=aRelation.getLeftField().getFk().getReferee().getField();
      String rightTableName=aRelation.getRightField().getTableName();
      String rightFieldName=aRelation.getRightField().getName();
      boolean tablesSame=(leftTableName == null ? rightTableName == null : leftTableName.equalsIgnoreCase(rightTableName));
      boolean fieldsSame=(leftFieldName == null ? rightFieldName == null : leftFieldName.equalsIgnoreCase(rightFieldName));
      if (!tablesSame || !fieldsSame) {
        aRelation.setLeftField(null);
        aRelation.setRightField(null);
      }
    }
  }
}","@Override protected void resolveRelation(Relation<E> aRelation,Model<E,P,C,Q> aModel) throws Exception {
  super.resolveRelation(aRelation,aModel);
  if (aRelation instanceof ReferenceRelation<?>) {
    if (aRelation.getLeftField() != null && !aRelation.getLeftField().isFk()) {
      aRelation.setLeftField(null);
    }
    if (aRelation.getRightField() != null && !aRelation.getRightField().isPk()) {
      aRelation.setRightField(null);
    }
    if (aRelation.getLeftField() != null && aRelation.getLeftField().isFk() && aRelation.getRightField() != null && aRelation.getRightField().isPk()) {
      String leftTableName=aRelation.getLeftField().getFk().getReferee().getTable();
      String leftFieldName=aRelation.getLeftField().getFk().getReferee().getField();
      String rightTableName=aRelation.getRightField().getTableName();
      String rightFieldName=aRelation.getRightField().getOriginalName();
      boolean tablesSame=(leftTableName == null ? rightTableName == null : leftTableName.equalsIgnoreCase(rightTableName));
      boolean fieldsSame=(leftFieldName == null ? rightFieldName == null : leftFieldName.equalsIgnoreCase(rightFieldName));
      if (!tablesSame || !fieldsSame) {
        aRelation.setLeftField(null);
        aRelation.setRightField(null);
      }
    }
  }
}",0.9969016266460108
145524,"@Override public Model<E,P,C,Q> copy() throws Exception {
  Model<E,P,C,Q> copied=super.copy();
  for (  ReferenceRelation<E> relation : referenceRelations) {
    ReferenceRelation<E> rcopied=(ReferenceRelation<E>)relation.copy();
    resolveRelation(rcopied,copied);
    ((ApplicationModel<E,P,C,Q>)copied).getReferenceRelations().add(rcopied);
  }
  return copied;
}","@Override public Model<E,P,C,Q> copy() throws Exception {
  Model<E,P,C,Q> copied=super.copy();
  for (  ReferenceRelation<E> relation : referenceRelations) {
    ReferenceRelation<E> rcopied=(ReferenceRelation<E>)relation.copy();
    resolveRelation(rcopied,copied);
    ((ApplicationModel<E,P,C,Q>)copied).getReferenceRelations().add(rcopied);
  }
  ((ApplicationModel<E,P,C,Q>)copied).checkReferenceRelationsIntegrity();
  return copied;
}",0.908641975308642
145525,"@Override public Object run(Context cx) throws Exception {
  Map<String,Collection<String>> lvalidators=new HashMap<>();
  lvalidators.putAll(validators);
  Collection<String> flowAsValidator=lvalidators.get(aDatasourceId);
  if (flowAsValidator == null || flowAsValidator.isEmpty()) {
    lvalidators.put(aDatasourceId,Arrays.asList(new String[]{aDatasourceId}));
  }
  for (  String validatorName : lvalidators.keySet()) {
    Collection<String> datasources=lvalidators.get(validatorName);
    if (datasources == null || datasources.isEmpty() || datasources.contains(aDatasourceId)) {
      ScriptRunner validator=createModule(cx,validatorName);
      if (validator != null) {
        Object oValidate=validator.get(""String_Node_Str"",validator);
        if (oValidate instanceof Function) {
          Function fValidate=(Function)oValidate;
          Object oResult=fValidate.call(cx,validator.getParentScope(),validator,new Object[]{Context.javaToJS(aLog.toArray(),validator.getParentScope()),aDatasourceId,aSessionId});
          if (oResult != null && oResult != Context.getUndefinedValue() && Boolean.FALSE.equals(Context.toBoolean(oResult))) {
            break;
          }
        }
 else {
          if (validators.containsKey(validatorName)) {
            Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
          }
        }
      }
 else {
        Logger.getLogger(ScriptedDatabasesClient.class.getName()).log(Level.WARNING,""String_Node_Str"",validatorName);
      }
    }
  }
  return null;
}","@Override public FlowProvider run(Context cx) throws Exception {
  ScriptRunner dataFeeder=createModule(cx,aEntityId);
  if (dataFeeder != null) {
    return new PlatypusScriptedFlowProvider(ScriptedDatabasesClient.this,aExpectedFields,(ScriptRunner)dataFeeder,aSessionId);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + aEntityId + ""String_Node_Str"");
  }
}",0.132579650565262
145526,"/** 
 * WARNING!!! This method executes a method with system permissions! You should think twice befoce calling it i your code.
 * @param aModuleName
 * @param aMethodName
 * @param aArgs
 * @return
 * @throws Exception
 */
public Object executeServerModuleMethod(String aModuleName,String aMethodName,Object[] aArgs) throws Exception {
  ServerScriptRunner module=getSessionManager().getSystemSession().getModule(aModuleName);
  if (module == null) {
    module=new ServerScriptRunner(this,getSessionManager().getSystemSession(),aModuleName,ScriptRunner.initializePlatypusStandardLibScope(),this,this,new Object[]{});
  }
  module.execute();
  Session oldSession=getSessionManager().getCurrentSession();
  try {
    getSessionManager().setCurrentSession(getSessionManager().getSystemSession());
    return module.executeMethod(aMethodName,aArgs);
  }
  finally {
    getSessionManager().setCurrentSession(oldSession);
  }
}","/** 
 * WARNING!!! This method executes a method with system permissions! You should think twice befoce calling it i your code.
 * @param aModuleName
 * @param aMethodName
 * @param aArgs
 * @return
 * @throws Exception
 */
public Object executeServerModuleMethod(String aModuleName,String aMethodName,Object[] aArgs) throws Exception {
  ServerScriptRunner module=getSessionManager().getSystemSession().getModule(aModuleName);
  Session oldSession=getSessionManager().getCurrentSession();
  try {
    getSessionManager().setCurrentSession(getSessionManager().getSystemSession());
    if (module == null) {
      module=new ServerScriptRunner(this,getSessionManager().getSystemSession(),aModuleName,ScriptRunner.initializePlatypusStandardLibScope(),this,this,new Object[]{});
    }
    module.execute();
    return module.executeMethod(aMethodName,aArgs);
  }
  finally {
    getSessionManager().setCurrentSession(oldSession);
  }
}",0.7219827586206896
145527,"public synchronized ServerScriptRunner get(String aModuleId) throws Exception {
  ServerScriptRunner runner=cache.get(aModuleId);
  if (runner != null && !serverCore.getDatabasesClient().getAppCache().isActual(runner.getApplicationElementId(),runner.getTxtContentLength(),runner.getTxtCrc32())) {
    runner=null;
    cache.remove(aModuleId);
    serverCore.getDatabasesClient().getAppCache().remove(aModuleId);
  }
  if (runner == null) {
    runner=new ServerScriptRunner(serverCore,serverCore.getSessionManager().getSystemSession(),aModuleId,ScriptRunner.initializePlatypusStandardLibScope(),serverCore,serverCore,new Object[]{});
    cache.put(aModuleId,runner);
  }
  return runner;
}","public synchronized ServerScriptRunner get(String aModuleId) throws Exception {
  ServerScriptRunner runner=cache.get(aModuleId);
  if (runner != null && !serverCore.getDatabasesClient().getAppCache().isActual(runner.getApplicationElementId(),runner.getTxtContentLength(),runner.getTxtCrc32())) {
    runner=null;
    cache.remove(aModuleId);
    serverCore.getDatabasesClient().getAppCache().remove(aModuleId);
  }
  if (runner == null) {
    runner=new ServerScriptRunner(serverCore,serverCore.getSessionManager().getSystemSession(),aModuleId,ScriptRunner.initializePlatypusStandardLibScope(),serverCore,serverCore,new Object[]{});
    runner.setPrototype(ServerScriptRunnerPrototype.getInstance());
    runner.execute();
    cache.put(aModuleId,runner);
  }
  return runner;
}",0.9386920980926432
145528,"public Cancellable startRequest(final XMLHttpRequest req,String requestData,final Callback<XMLHttpRequest> onSuccess,final Callback<XMLHttpRequest> onFailure) throws Exception {
  req.setOnReadyStateChange(new ReadyStateChangeHandler(){
    public void onReadyStateChange(    XMLHttpRequest xhr){
      if (xhr.getReadyState() == XMLHttpRequest.DONE) {
        xhr.clearOnReadyStateChange();
        String errorMsg=XMLHttpRequest2.getBrowserSpecificFailure(req);
        if (errorMsg != null) {
          Throwable exception=new RuntimeException(errorMsg);
          Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,exception);
          try {
            if (onFailure != null)             onFailure.run(xhr);
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
 else {
          try {
            if (xhr.getStatus() == Response.SC_OK) {
              if (onSuccess != null)               onSuccess.run(xhr);
            }
 else {
              if (onFailure != null)               onFailure.run(xhr);
            }
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
    }
  }
);
  if (requestData != null && !requestData.isEmpty())   req.send(requestData);
 else   req.send();
  return new Cancellable(){
    @Override public void cancel(){
      req.clearOnReadyStateChange();
      req.abort();
      if (onSuccess != null) {
        onSuccess.cancel();
      }
      if (onFailure != null) {
        onFailure.cancel();
      }
    }
  }
;
}","public Cancellable startRequest(final XMLHttpRequest req,String requestData,final Callback<XMLHttpRequest> onSuccess,final Callback<XMLHttpRequest> onFailure) throws Exception {
  req.setOnReadyStateChange(new ReadyStateChangeHandler(){
    public void onReadyStateChange(    XMLHttpRequest xhr){
      if (xhr.getReadyState() == XMLHttpRequest.DONE) {
        xhr.clearOnReadyStateChange();
        String errorMsg=XMLHttpRequest2.getBrowserSpecificFailure(xhr);
        if (errorMsg != null) {
          Throwable exception=new RuntimeException(errorMsg);
          Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,exception);
          try {
            if (onFailure != null)             onFailure.run(xhr);
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
 else {
          try {
            if (xhr.getStatus() == Response.SC_OK) {
              if (onSuccess != null)               onSuccess.run(xhr);
            }
 else {
              if (onFailure != null)               onFailure.run(xhr);
            }
          }
 catch (          Exception ex) {
            Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
    }
  }
);
  if (requestData != null && !requestData.isEmpty())   req.send(requestData);
 else   req.send();
  return new Cancellable(){
    @Override public void cancel(){
      req.clearOnReadyStateChange();
      req.abort();
      if (onSuccess != null) {
        onSuccess.cancel();
      }
      if (onFailure != null) {
        onFailure.cancel();
      }
    }
  }
;
}",0.9982057416267942
145529,"public void onReadyStateChange(XMLHttpRequest xhr){
  if (xhr.getReadyState() == XMLHttpRequest.DONE) {
    xhr.clearOnReadyStateChange();
    String errorMsg=XMLHttpRequest2.getBrowserSpecificFailure(req);
    if (errorMsg != null) {
      Throwable exception=new RuntimeException(errorMsg);
      Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,exception);
      try {
        if (onFailure != null)         onFailure.run(xhr);
      }
 catch (      Exception ex) {
        Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else {
      try {
        if (xhr.getStatus() == Response.SC_OK) {
          if (onSuccess != null)           onSuccess.run(xhr);
        }
 else {
          if (onFailure != null)           onFailure.run(xhr);
        }
      }
 catch (      Exception ex) {
        Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}","public void onReadyStateChange(XMLHttpRequest xhr){
  if (xhr.getReadyState() == XMLHttpRequest.DONE) {
    xhr.clearOnReadyStateChange();
    String errorMsg=XMLHttpRequest2.getBrowserSpecificFailure(xhr);
    if (errorMsg != null) {
      Throwable exception=new RuntimeException(errorMsg);
      Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,exception);
      try {
        if (onFailure != null)         onFailure.run(xhr);
      }
 catch (      Exception ex) {
        Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else {
      try {
        if (xhr.getStatus() == Response.SC_OK) {
          if (onSuccess != null)           onSuccess.run(xhr);
        }
 else {
          if (onFailure != null)           onFailure.run(xhr);
        }
      }
 catch (      Exception ex) {
        Logger.getLogger(AppClient.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}",0.9968017057569296
145530,"@Override public CompletionTask createTask(int queryType,JTextComponent component){
  if (queryType == CompletionProvider.COMPLETION_QUERY_TYPE || queryType == CompletionProvider.TOOLTIP_QUERY_TYPE || queryType == CompletionProvider.DOCUMENTATION_QUERY_TYPE) {
    return createCompletionTask(component);
  }
 else {
    return null;
  }
}","@Override public CompletionTask createTask(int queryType,JTextComponent component){
  return createCompletionTask(component);
}",0.5450643776824035
145531,"private DataSource constructDataSource(DbConnectionSettings aSettings) throws Exception {
  try {
    Context initContext=new InitialContext();
    DataSource ds;
    try {
      ds=(DataSource)initContext.lookup(aSettings.getUrl());
    }
 catch (    javax.naming.NamingException ex) {
      Context envContext=(Context)initContext.lookup(""String_Node_Str"");
      ds=(DataSource)envContext.lookup(aSettings.getUrl());
    }
    return ds;
  }
 catch (  Exception ex) {
    return new PlatypusNativeDataSource(aSettings.getMaxConnections(),aSettings.getMaxStatements(),aSettings.getResourceTimeout(),aSettings.getUrl(),aSettings.getUser(),aSettings.getPassword(),aSettings.getSchema());
  }
}","private DataSource constructDataSource(DbConnectionSettings aSettings) throws Exception {
  try {
    Context initContext=new InitialContext();
    DataSource ds;
    try {
      ds=(DataSource)initContext.lookup(aSettings.getUrl());
    }
 catch (    javax.naming.NamingException ex) {
      Context envContext=(Context)initContext.lookup(""String_Node_Str"");
      ds=(DataSource)envContext.lookup(aSettings.getUrl());
    }
    return ds;
  }
 catch (  Exception ex) {
    return new PlatypusNativeDataSource(aSettings.getMaxConnections(),aSettings.getMaxStatements(),aSettings.getResourceTimeout(),aSettings.getUrl(),aSettings.getUser(),aSettings.getPassword());
  }
}",0.9838709677419356
145532,"public PlatypusNativeDataSource(int aMaxConnections,int aMaxStatements,int aResourceTimeout,String aUrl,String aUser,String aPassword,String aSchema) throws Exception {
  super(aMaxConnections,aResourceTimeout);
  url=aUrl;
  maxStatements=aMaxStatements;
  resourceTimeout=aResourceTimeout;
  props.put(""String_Node_Str"",aUser);
  props.put(""String_Node_Str"",aPassword);
  props.put(""String_Node_Str"",aSchema);
}","public PlatypusNativeDataSource(int aMaxConnections,int aMaxStatements,int aResourceTimeout,String aUrl,String aUser,String aPassword) throws Exception {
  super(aMaxConnections,aResourceTimeout);
  url=aUrl;
  maxStatements=aMaxStatements;
  resourceTimeout=aResourceTimeout;
  props.put(""String_Node_Str"",aUser);
  props.put(""String_Node_Str"",aPassword);
}",0.9286640726329444
145533,"private void applySqlScript(File sqlScriptFile) throws Exception {
  DbConnectionSettings.registerDrivers(DbConnectionSettings.readDrivers().values());
  Properties props=new Properties();
  props.put(""String_Node_Str"",settings.getDbSettings().getUser());
  props.put(""String_Node_Str"",settings.getDbSettings().getPassword());
  props.put(""String_Node_Str"",settings.getDbSettings().getSchema());
  try (Connection connection=DriverManager.getConnection(settings.getDbSettings().getUrl(),props)){
    SqlDriver.applyScript(FileUtils.readString(sqlScriptFile,PlatypusFiles.DEFAULT_ENCODING),connection);
  }
 }","private void applySqlScript(File sqlScriptFile) throws Exception {
  DbConnectionSettings.registerDrivers(DbConnectionSettings.readDrivers().values());
  Properties props=new Properties();
  props.put(""String_Node_Str"",settings.getDbSettings().getUser());
  props.put(""String_Node_Str"",settings.getDbSettings().getPassword());
  try (Connection connection=DriverManager.getConnection(settings.getDbSettings().getUrl(),props)){
    SqlDriver.applyScript(FileUtils.readString(sqlScriptFile,PlatypusFiles.DEFAULT_ENCODING),connection);
  }
 }",0.939843068875327
145534,"public static String makeTestConnectionDescription(Properties props) throws SQLException {
  String url=""String_Node_Str"";
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  return url;
}","public static String makeTestConnectionDescription(Properties props) throws SQLException {
  String url=""String_Node_Str"";
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  return url;
}",0.9049429657794676
145535,"protected void onDataChange(M parent){
  getStore().fireEvent(new StoreDataChangeEvent<M>());
}","@Override protected void onDataChange(M parent){
  super.onDataChange(parent);
  getStore().fireEvent(new StoreDataChangeEvent<M>());
}",0.8260869565217391
145536,"@Override public void setOnSelect(Function aHandler){
  selectFunction=aHandler;
}","@Override public void setOnSelect(Function aHandler) throws Exception {
  selectFunction=aHandler;
  createFieldExtraEditingControls();
}",0.7488584474885844
145537,public void setOnSelect(Function aValue);,public void setOnSelect(Function aValue) throws Exception ;,0.82
145538,"@ScriptFunction public void setOnSelect(Function aValue) throws Exception {
  delegate.setOnSelect(aValue);
}","@ScriptFunction public void setOnSelect(Function aValue) throws Exception {
  delegate.setOnSelect(aValue);
  delegate.revalidate();
  delegate.repaint();
}",0.8226415094339623
145539,"public static void putValue(ProtoWriter writer,int nullValueTag,int undefinedValueTag,int functionValueTag,int typeTag,int nameTag,String aArgumentName,int valueTag,Object arg) throws IOException {
  if (arg == null) {
    writer.put(nullValueTag);
  }
 else   if (arg instanceof Undefined) {
    writer.put(undefinedValueTag);
  }
 else   if (arg instanceof Function) {
    writer.put(functionValueTag);
  }
 else {
    if (aArgumentName != null && !aArgumentName.isEmpty()) {
      writer.put(nameTag,aArgumentName);
    }
    ExecuteServerModuleMethodRequest.ArgumentType at=ExecuteServerModuleMethodRequest.ArgumentType.getArgumentType(arg);
    if (at == null) {
      throw new IllegalArgumentException(arg.toString());
    }
    writer.put(typeTag,at.getTypeID());
switch (at) {
case BIG_DECIMAL:
      writer.put(valueTag,(BigDecimal)arg);
    break;
case BIG_INTEGER:
  writer.put(valueTag,new BigDecimal((BigInteger)arg));
break;
case BOOLEAN:
writer.put(valueTag,((Boolean)arg).booleanValue() ? 1 : 0);
break;
case BYTE:
writer.put(valueTag,(Byte)arg);
break;
case CHARACTER:
writer.put(valueTag,((Character)arg).toString());
break;
case DATE:
writer.put(valueTag,(Date)arg);
break;
case DOUBLE:
writer.put(valueTag,(Double)arg);
break;
case FLOAT:
writer.put(valueTag,((Float)arg).doubleValue());
break;
case INTEGER:
writer.put(valueTag,(Integer)arg);
break;
case LONG:
writer.put(valueTag,(Long)arg);
break;
case SHORT:
writer.put(valueTag,((Short)arg).intValue());
break;
case STRING:
writer.put(valueTag,(String)arg);
break;
case OBJECT:
writer.put(valueTag,(String)ScriptUtils.toJson(arg));
break;
}
}
}","public static void putValue(ProtoWriter writer,int nullValueTag,int undefinedValueTag,int functionValueTag,int typeTag,int nameTag,String aArgumentName,int valueTag,Object arg) throws IOException, Exception {
  if (arg == null) {
    writer.put(nullValueTag);
  }
 else   if (arg instanceof Undefined) {
    writer.put(undefinedValueTag);
  }
 else   if (arg instanceof Function) {
    writer.put(functionValueTag);
  }
 else {
    if (aArgumentName != null && !aArgumentName.isEmpty()) {
      writer.put(nameTag,aArgumentName);
    }
    ExecuteServerModuleMethodRequest.ArgumentType at=ExecuteServerModuleMethodRequest.ArgumentType.getArgumentType(arg);
    if (at == null) {
      throw new IllegalArgumentException(arg.toString());
    }
    writer.put(typeTag,at.getTypeID());
switch (at) {
case BIG_DECIMAL:
      writer.put(valueTag,(BigDecimal)arg);
    break;
case BIG_INTEGER:
  writer.put(valueTag,new BigDecimal((BigInteger)arg));
break;
case BOOLEAN:
writer.put(valueTag,((Boolean)arg).booleanValue() ? 1 : 0);
break;
case BYTE:
writer.put(valueTag,(Byte)arg);
break;
case CHARACTER:
writer.put(valueTag,((Character)arg).toString());
break;
case DATE:
writer.put(valueTag,(Date)arg);
break;
case DOUBLE:
writer.put(valueTag,(Double)arg);
break;
case FLOAT:
writer.put(valueTag,((Float)arg).doubleValue());
break;
case INTEGER:
writer.put(valueTag,(Integer)arg);
break;
case LONG:
writer.put(valueTag,(Long)arg);
break;
case SHORT:
writer.put(valueTag,((Short)arg).intValue());
break;
case STRING:
writer.put(valueTag,(String)arg);
break;
case OBJECT:
if (arg instanceof Rowset) {
RowsetJsonWriter jsonWriter=new RowsetJsonWriter((Rowset)arg);
writer.put(valueTag,jsonWriter.write());
}
 else {
writer.put(valueTag,(String)ScriptUtils.toJson(arg));
}
break;
}
}
}",0.9540636042402828
145540,"public static ArgumentType getArgumentType(Object value){
  if (value instanceof Scriptable) {
    return ArgumentType.OBJECT;
  }
 else {
    for (    ArgumentType at : values()) {
      if (at.getClazz().isInstance(value)) {
        return at;
      }
    }
    return null;
  }
}","public static ArgumentType getArgumentType(Object value){
  if (value instanceof Scriptable || value instanceof Rowset) {
    return ArgumentType.OBJECT;
  }
 else {
    for (    ArgumentType at : values()) {
      if (at.getClazz().isInstance(value)) {
        return at;
      }
    }
    return null;
  }
}",0.9543147208121828
145541,"/** 
 * Loads a resource's bytes either from disk or from datatbase.
 * @param aResourceId An relative path to the resource
 * @return Bytes for resource
 * @throws Exception If some error occurs when reading the resource
 */
public static byte[] load(String aResourceId) throws Exception {
  if (aResourceId != null && !aResourceId.isEmpty()) {
    Matcher htppMatcher=pattern.matcher(aResourceId);
    if (htppMatcher.matches()) {
      URL url=new URL(aResourceId);
      try {
        try (InputStream is=url.openStream()){
          return BinaryUtils.readStream(is,-1);
        }
       }
 catch (      IOException ex) {
        url=encodeUrl(url);
        try (InputStream is=url.openStream()){
          return BinaryUtils.readStream(is,-1);
        }
       }
    }
 else {
      if (cache == null) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      String resourceId=translateResourcePath(aResourceId);
      ApplicationElement appElement=cache.get(resourceId);
      if (appElement != null) {
        if (appElement.getType() == ClientConstants.ET_RESOURCE) {
          if (!cache.isActual(appElement.getId(),appElement.getTxtContentLength(),appElement.getTxtCrc32())) {
            cache.remove(appElement.getId());
            appElement=cache.get(resourceId);
          }
        }
 else {
          throw new NotResourceException(resourceId);
        }
      }
      if (appElement != null && appElement.getType() == ClientConstants.ET_RESOURCE) {
        return appElement.getBinaryContent();
      }
 else {
        return null;
      }
    }
  }
 else {
    return null;
  }
}","/** 
 * Loads a resource's bytes either from disk or from datatbase.
 * @param aResourceId An relative path to the resource
 * @return Bytes for resource
 * @throws Exception If some error occurs when reading the resource
 */
public static byte[] load(String aResourceId) throws Exception {
  if (aResourceId != null && !aResourceId.isEmpty()) {
    Matcher htppMatcher=pattern.matcher(aResourceId);
    if (htppMatcher.matches()) {
      URL url=new URL(aResourceId);
      try {
        try (InputStream is=url.openStream()){
          return BinaryUtils.readStream(is,-1);
        }
       }
 catch (      IOException ex) {
        url=encodeUrl(url);
        try (InputStream is=url.openStream()){
          return BinaryUtils.readStream(is,-1);
        }
       }
    }
 else {
      if (cache == null) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      String resourceId=translateResourcePath(aResourceId);
      ApplicationElement appElement=cache.get(resourceId);
      if (appElement != null) {
        if (appElement.getType() == ClientConstants.ET_RESOURCE) {
          if (!cache.isActual(appElement.getId(),appElement.getTxtContentLength(),appElement.getTxtCrc32())) {
            cache.remove(appElement.getId());
            appElement=cache.get(resourceId);
          }
        }
 else {
          throw new NotResourceException(resourceId);
        }
      }
      if (appElement != null && appElement.getType() == ClientConstants.ET_RESOURCE) {
        return appElement.getBinaryContent();
      }
 else {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",aResourceId));
      }
    }
  }
 else {
    return null;
  }
}",0.9724826126398548
145542,"@Override public Object call(final Context cx,Scriptable scope,Scriptable thisObj,final Object[] args){
  try {
    if (args != null && args.length > 0 && args[args.length - 1] instanceof Function) {
      final Function callback=(Function)args[args.length - 1];
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          try {
            Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,Arrays.copyOf(args,args.length - 1));
            Context cx=Context.getCurrentContext();
            boolean wasContext=cx != null;
            if (!wasContext) {
              cx=ScriptUtils.enterContext();
            }
            try {
              callback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
            }
  finally {
              if (!wasContext) {
                Context.exit();
              }
            }
          }
 catch (          Exception ex) {
            Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
);
      return Context.getUndefinedValue();
    }
 else {
      return platypusClient.executeServerModuleMethod(moduleName,methodName,args);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}","@Override public Object call(final Context cx,Scriptable scope,Scriptable thisObj,final Object[] arguments){
  try {
    Function onSuccess=null;
    Function onFailure=null;
    int argsLength=arguments != null ? arguments.length : 0;
    if (arguments != null) {
      if (arguments.length > 1 && arguments[arguments.length - 1] instanceof Function && arguments[arguments.length - 2] instanceof Function) {
        onSuccess=(Function)arguments[arguments.length - 2];
        onFailure=(Function)arguments[arguments.length - 1];
        argsLength-=2;
      }
 else       if (arguments.length > 0 && arguments[arguments.length - 1] instanceof Function) {
        onSuccess=(Function)arguments[arguments.length - 1];
        argsLength-=1;
      }
    }
    if (onSuccess != null) {
      final Function successCallback=onSuccess;
      final Function failureCallback=onFailure;
      final Object[] args=Arrays.copyOf(arguments,argsLength);
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          try {
            Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,args);
            Context cx=Context.getCurrentContext();
            boolean wasContext=cx != null;
            if (!wasContext) {
              cx=ScriptUtils.enterContext();
            }
            try {
              successCallback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
            }
  finally {
              if (!wasContext) {
                Context.exit();
              }
            }
          }
 catch (          Exception ex) {
            if (failureCallback != null) {
              Context cx=Context.getCurrentContext();
              boolean wasContext=cx != null;
              if (!wasContext) {
                cx=ScriptUtils.enterContext();
              }
              try {
                failureCallback.call(cx,StubFunction.this,StubFunction.this,new Object[]{ex.getMessage()});
              }
  finally {
                if (!wasContext) {
                  Context.exit();
                }
              }
            }
            Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
);
      return Context.getUndefinedValue();
    }
 else {
      return platypusClient.executeServerModuleMethod(moduleName,methodName,arguments);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}",0.4375667022411953
145543,"@Override public void run(){
  try {
    Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,Arrays.copyOf(args,args.length - 1));
    Context cx=Context.getCurrentContext();
    boolean wasContext=cx != null;
    if (!wasContext) {
      cx=ScriptUtils.enterContext();
    }
    try {
      callback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
    }
  finally {
      if (!wasContext) {
        Context.exit();
      }
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override public void run(){
  try {
    Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,args);
    Context cx=Context.getCurrentContext();
    boolean wasContext=cx != null;
    if (!wasContext) {
      cx=ScriptUtils.enterContext();
    }
    try {
      successCallback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
    }
  finally {
      if (!wasContext) {
        Context.exit();
      }
    }
  }
 catch (  Exception ex) {
    if (failureCallback != null) {
      Context cx=Context.getCurrentContext();
      boolean wasContext=cx != null;
      if (!wasContext) {
        cx=ScriptUtils.enterContext();
      }
      try {
        failureCallback.call(cx,StubFunction.this,StubFunction.this,new Object[]{ex.getMessage()});
      }
  finally {
        if (!wasContext) {
          Context.exit();
        }
      }
    }
    Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.7132777421423989
145544,"public void setMinimizable(boolean aValue){
  minimizable=aValue;
  if (window != null && !window.isModal())   window.setMinimizable(minimizable);
}","public void setMinimizable(boolean aValue){
  minimizable=aValue;
  if (window != null)   window.setMinimizable(minimizable);
}",0.9236363636363636
145545,"/** 
 * Performs some mutations of a xml content dom. Adds dependencies. Stripes put <source/>tag and so on.
 * @param aAppElement Appelement, whoose content dom to mutated.
 * @return
 * @throws Exception 
 */
protected Filtered filter(ApplicationElement aAppElement) throws Exception {
}","/** 
 * Performs some mutations of a xml content dom. Adds dependencies. Stripes put <source/>tag and so on.
 * @param aAppElement Appelement, whoose content dom to mutated.
 * @return
 * @throws Exception
 */
protected Filtered filter(ApplicationElement aAppElement) throws Exception {
}",0.9982668977469672
145546,"private String[][] getGridView(boolean selectedOnly,boolean isData){
  TableModel view=getDeepModel();
  if (view != null) {
    int minRow=0;
    int maxRow=view.getRowCount();
    int columnCount=view.getColumnCount();
    String[][] res=new String[maxRow][columnCount];
    ListSelectionModel rowSelecter=getRowsSelectionModel();
    for (int row=minRow; row < maxRow; row++) {
      if (selectedOnly) {
        if (rowSelecter.isSelectedIndex(row)) {
          res[row]=transformRow(row,selectedOnly,isData);
        }
      }
 else {
        res[row]=transformRow(row,selectedOnly,isData);
      }
    }
    return res;
  }
 else {
    return new String[0][0];
  }
}","private String[][] getGridView(boolean selectedOnly,boolean isData){
  TableModel cellsModel=getDeepModel();
  if (cellsModel != null) {
    int minRow=0;
    int maxRow=cellsModel.getRowCount();
    int columnCount=cellsModel.getColumnCount();
    String[][] res=new String[maxRow][columnCount];
    ListSelectionModel rowSelecter=getRowsSelectionModel();
    for (int viewRow=minRow; viewRow < maxRow; viewRow++) {
      if (selectedOnly) {
        if (rowSelecter.isSelectedIndex(viewRow)) {
          res[viewRow]=transformRow(rowSorter.convertRowIndexToModel(viewRow),selectedOnly,isData);
        }
      }
 else {
        res[viewRow]=transformRow(rowSorter.convertRowIndexToModel(viewRow),selectedOnly,isData);
      }
    }
    return res;
  }
 else {
    return new String[0][0];
  }
}",0.8703956343792633
145547,"public static int getWidgetHeight(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetHeight();
}","public static int getWidgetHeight(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof FieldSet) {
    element=aWidget.getParent().getElement();
  }
 else   if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetHeight();
}",0.5294771968854283
145548,"public static int getWidgetWidth(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetWidth();
}","public static int getWidgetWidth(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof FieldSet) {
    element=aWidget.getParent().getElement();
  }
 else   if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetWidth();
}",0.5273743016759777
145549,"public static int getWidgetTop(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetTop();
}","public static int getWidgetTop(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof FieldSet) {
    element=aWidget.getParent().getElement();
  }
 else   if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetTop();
}",0.5276211950394588
145550,"public static int getWidgetLeft(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetLeft();
}","public static int getWidgetLeft(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof FieldSet) {
    element=aWidget.getParent().getElement();
  }
 else   if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetLeft();
}",0.5297418630751964
145551,"private void selectCell(int aRow,int aCol){
  grid.getSelectionModel().select(aRow,false);
}","private void selectCell(int aRow,int aCol){
  if (grid.getSelectionModel() instanceof PlatypusCellSelectionModel<?>) {
    PlatypusCellSelectionModel<Row> cellsSelection=(PlatypusCellSelectionModel<Row>)grid.getSelectionModel();
    cellsSelection.selectCell(aRow,aCol,true);
  }
 else {
    grid.getSelectionModel().select(aRow,false);
  }
}",0.423963133640553
145552,"public PlatypusFieldSet(int aPadding){
  super.setWidget(content);
  getElement().getStyle().setPadding(aPadding,Style.Unit.PX);
  leftPadding=aPadding;
  topPadding=aPadding;
  rightPadding=aPadding;
  bottomPadding=aPadding;
  legend=getElement().child(""String_Node_Str"");
  XElement legendSpan=legend.child(""String_Node_Str"");
  XElement legendDiv=legend.child(""String_Node_Str"");
  legend.removeChildren();
  Element div=DOM.createDiv();
  div.appendChild(legendDiv);
  div.appendChild(legendSpan);
  Style divstyle=div.getStyle();
  divstyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  divstyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  legend.appendChild(div);
  legendStyle=legend.getStyle();
  getElement().getStyle().setMargin(0,Style.Unit.PX);
}","public PlatypusFieldSet(FieldSetAppearance appearance){
  super(appearance);
  legend=getElement().child(""String_Node_Str"");
  legendStyle=legend.getStyle();
  XElement content=appearance.getContainerTarget(getElement());
  content.makePositionable(true);
  content.getStyle().setTop(0,Unit.PX);
}",0.0691588785046729
145553,"@Override protected void onResize(int width,int height){
  int dW=getElement().getWidth(false) - getElement().getWidth(true);
  int dH=getElement().getHeight(false) - getElement().getHeight(true);
  super.onResize(width,height);
  content.setPixelSize(width - leftPadding - rightPadding,height - dH / 2 - topPadding - CONTENT_SHIFT_HEIGHT);
  legendWidth=width - dW - dW;
  setLegendWidth();
}","@Override protected void onResize(int width,int height){
  super.onResize(width,height);
  getContainerTarget().setHeight(height,true);
  int dW=getElement().getWidth(false) - getElement().getWidth(true);
  legendWidth=width - 2 * dW;
  applyLegendWidth();
}",0.5038402457757296
145554,"@Override public void setHeadingText(String heading){
  super.setHeadingText(heading);
  setLegendWidth();
}","@Override public void setHeadingText(String heading){
  super.setHeadingText(heading);
  applyLegendWidth();
}",0.963302752293578
145555,"@Override public void setWidget(IsWidget isWidget){
  setWidget(asWidgetOrNull(isWidget));
}","@Override public void setWidget(Widget w){
  handlers.removeHandler();
  super.setWidget(w);
  if (w instanceof Component) {
    handlers.add(((Component)w).addHideHandler(new HideHandler(){
      @Override public void onHide(      HideEvent event){
        PlatypusFieldSet.this.hide();
      }
    }
));
    handlers.add(((Component)w).addShowHandler(new ShowHandler(){
      @Override public void onShow(      ShowEvent event){
        PlatypusFieldSet.this.show();
      }
    }
));
    handlers.add(((Component)w).addEnableHandler(new EnableHandler(){
      @Override public void onEnable(      EnableEvent event){
        PlatypusFieldSet.this.enable();
      }
    }
));
    handlers.add(((Component)w).addDisableHandler(new DisableHandler(){
      @Override public void onDisable(      DisableEvent event){
        PlatypusFieldSet.this.disable();
      }
    }
));
  }
}",0.0947476828012358
145556,"public void ajustWidth(Widget aChild,int aValue){
  if (aChild != null) {
    aChild.setPixelSize(aValue,Sizer.getWidgetHeight(aChild));
  }
}","public void ajustWidth(Widget aChild,int aValue){
  if (aChild != null) {
    if (aChild.getParent() instanceof PlatypusFieldSet)     aChild.getParent().setPixelSize(aValue,Sizer.getWidgetHeight(aChild));
 else     aChild.setPixelSize(aValue,Sizer.getWidgetHeight(aChild));
  }
}",0.6460807600950119
145557,"public void ajustHeight(Widget aChild,int aValue){
  if (aChild != null) {
    aChild.setPixelSize(Sizer.getWidgetWidth(aChild),aValue);
  }
}","public void ajustHeight(Widget aChild,int aValue){
  if (aChild != null) {
    if (aChild.getParent() instanceof PlatypusFieldSet)     aChild.getParent().setPixelSize(Sizer.getWidgetWidth(aChild),aValue);
 else     aChild.setPixelSize(Sizer.getWidgetWidth(aChild),aValue);
  }
}",0.6476190476190476
145558,"public void ajustWidth(Widget aChild,int aValue){
  if (aChild != null) {
    aChild.setPixelSize(aValue,Sizer.getWidgetHeight(aChild));
    ajustSize();
  }
}","public void ajustWidth(Widget aChild,int aValue){
  if (aChild != null) {
    if (aChild.getParent() instanceof PlatypusFieldSet)     aChild.getParent().setPixelSize(aValue,Sizer.getWidgetHeight(aChild));
 else     aChild.setPixelSize(aValue,Sizer.getWidgetHeight(aChild));
    ajustSize();
  }
}",0.6725274725274726
145559,"/** 
 * Takes into account inner structure of MarginLayoutContainer and possible FieldSet wrappers.
 * @param aChild
 * @return
 */
protected Component lookupLayoutedChild(Widget aChild){
  MarginConstraints anchors=(MarginConstraints)((Component)aChild.getParent()).getData(MARGIN_LAYOUT_DATA);
  if (anchors == null)   return (Component)aChild.getParent().getParent().getParent();
 else   return (Component)aChild.getParent();
}","/** 
 * Takes into account inner structure of MarginLayoutContainer and possible FieldSet wrappers.
 * @param aChild
 * @return
 */
protected Component lookupLayoutedChild(Widget aChild){
  if (aChild.getParent() instanceof PlatypusFieldSet)   aChild=aChild.getParent();
  return (Component)aChild.getParent();
}",0.601078167115903
145560,"private void selectCell(int aRow,int aCol){
  if (grid.getSelectionModel() instanceof PlatypusCellSelectionModel<?>) {
    PlatypusCellSelectionModel<Row> cellsSelection=(PlatypusCellSelectionModel<Row>)grid.getSelectionModel();
    cellsSelection.selectCell(aRow,aCol,true);
  }
 else {
    grid.getSelectionModel().select(aRow,false);
  }
}","private void selectCell(int aRow,int aCol){
  if (grid.getSelectionModel() instanceof PlatypusCellSelectionModel<?>) {
    PlatypusCellSelectionModel<Row> cellsSelection=(PlatypusCellSelectionModel<Row>)grid.getSelectionModel();
    cellsSelection.deselectAll();
    cellsSelection.selectCell(aRow,aCol,true);
  }
 else {
    grid.getSelectionModel().select(aRow,false);
  }
}",0.9526462395543176
145561,"public FindWindow(Grid<Row> aGrid){
  grid=aGrid;
  initComponents();
  setHeadingText(messages.heading());
  setBorders(false);
  setResizable(false);
  setPixelSize(400,145);
}","public FindWindow(Grid<Row> aGrid){
  grid=aGrid;
  initComponents();
  setHeadingText(messages.heading());
  setBorders(false);
  setResizable(false);
  setPixelSize(400,135);
}",0.99438202247191
145562,"public String getBody() throws IOException {
  String encoding=httpRequest.getCharacterEncoding();
  if (encoding == null || encoding.isEmpty()) {
    Logger.getLogger(HttpScriptContext.class.getName()).log(Level.WARNING,""String_Node_Str"");
    encoding=""String_Node_Str"";
  }
  if (Charset.isSupported(encoding)) {
    try (InputStream is=httpRequest.getInputStream()){
      byte[] data=BinaryUtils.readStream(is,-1);
      return new String(data,httpRequest.getCharacterEncoding());
    }
   }
 else {
    throw new IOException(String.format(""String_Node_Str"",encoding));
  }
}","public String getBody() throws IOException {
  String encoding=httpRequest.getCharacterEncoding();
  if (encoding == null || encoding.isEmpty()) {
    Logger.getLogger(HttpScriptContext.class.getName()).log(Level.WARNING,""String_Node_Str"");
    encoding=""String_Node_Str"";
  }
  if (Charset.isSupported(encoding)) {
    try (InputStream is=httpRequest.getInputStream()){
      byte[] data=BinaryUtils.readStream(is,-1);
      return new String(data,encoding);
    }
   }
 else {
    throw new IOException(String.format(""String_Node_Str"",encoding));
  }
}",0.9629629629629628
145563,"protected void fireEditingStopped(){
  for (  CellEditorListener l : editorListeners) {
    if (l != null) {
      l.editingStopped(new ChangeEvent(this));
    }
  }
}","protected void fireEditingStopped(){
  for (  CellEditorListener l : editorListeners.toArray(new CellEditorListener[]{})) {
    if (l != null) {
      l.editingStopped(new ChangeEvent(this));
    }
  }
}",0.9027027027027028
145564,"protected void fireEditingCancelled(){
  for (  CellEditorListener l : editorListeners) {
    if (l != null) {
      l.editingCanceled(new ChangeEvent(this));
    }
  }
}","protected void fireEditingCancelled(){
  for (  CellEditorListener l : editorListeners.toArray(new CellEditorListener[]{})) {
    if (l != null) {
      l.editingCanceled(new ChangeEvent(this));
    }
  }
}",0.9042553191489362
145565,"private String transformCellValue(Object aValue,int aCol,boolean isData){
  if (aValue != null) {
    Object value=null;
    if (isData) {
      if (aValue instanceof CellData) {
        CellData cd=(CellData)aValue;
        value=cd.getData();
      }
      if (value != null) {
        return value.toString();
      }
    }
 else {
      TableColumn tc=getColumnModel().getColumn(aCol);
      TableCellRenderer renderer=tc.getCellRenderer();
      if (renderer instanceof DbCombo) {
        try {
          if (aValue instanceof CellData) {
            value=((DbCombo)renderer).achiveDisplayValue(((CellData)aValue).getData());
          }
          if (value == null) {
            value=""String_Node_Str"";
          }
        }
 catch (        Exception ex) {
          Logger.getLogger(DbGrid.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
        }
      }
      if (value == null && aValue instanceof CellData) {
        CellData cd=(CellData)aValue;
        value=cd.getDisplay() != null ? cd.getDisplay() : cd.getData();
      }
      if (value != null) {
        return value.toString();
      }
    }
  }
  return ""String_Node_Str"";
}","private String transformCellValue(Object aValue,int aCol,boolean isData){
  if (aValue != null) {
    Object value=null;
    if (isData) {
      if (aValue instanceof CellData) {
        CellData cd=(CellData)aValue;
        value=cd.getData();
      }
 else {
        value=aValue;
      }
    }
 else {
      TableColumn tc=getColumnModel().getColumn(aCol);
      TableCellRenderer renderer=tc.getCellRenderer();
      if (renderer instanceof DbCombo) {
        try {
          value=((DbCombo)renderer).achiveDisplayValue(aValue instanceof CellData ? ((CellData)aValue).getData() : aValue);
        }
 catch (        Exception ex) {
          Logger.getLogger(DbGrid.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
        }
      }
 else {
        if (aValue instanceof CellData) {
          CellData cd=(CellData)aValue;
          value=cd.getDisplay() != null ? cd.getDisplay() : cd.getData();
        }
 else {
          value=aValue;
        }
      }
    }
    if (value != null) {
      return value.toString();
    }
  }
  return ""String_Node_Str"";
}",0.6681634485855411
145566,"/** 
 * @param aParent Columns group, with will be parentfor new groups.
 * @param aContents A list of used as a source for columns groups.
 * @param linkSource Wether to link new column groups with sourceDbGridColumn-s. This also means, that LinkedGridColumnsGroup will be created.
 * @return
 * @throws Exception
 */
private Map<TableColumn,GridColumnsGroup> fillColumnsGroup(GridColumnsGroup aParent,List<DbGridColumn> aContents,boolean linkSource) throws Exception {
  Map<TableColumn,GridColumnsGroup> groups=new HashMap<>();
  for (  DbGridColumn dCol : aContents) {
    GridColumnsGroup group;
    if (linkSource) {
      group=new LinkedGridColumnsGroup(dCol);
    }
 else {
      group=new GridColumnsGroup();
    }
    dCol.initializeGridColumnsGroup(group);
    if (aParent != null) {
      group.setParent(aParent);
      aParent.addChild(group);
    }
    if (dCol.hasChildren()) {
      Map<TableColumn,GridColumnsGroup> childGroups=fillColumnsGroup(group,dCol.getChildren(),linkSource);
      groups.putAll(childGroups);
    }
 else {
      if (dCol instanceof FixedDbGridColumn) {
        TableColumn tCol=new RowHeaderTableColumn(dCol.getWidth());
        tCol.setCellRenderer(new RowHeaderCellRenderer(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setCellEditor(new RowHeaderCellEditor(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setMinWidth(dCol.getWidth());
        tCol.setPreferredWidth(dCol.getWidth());
        tCol.setMaxWidth(dCol.getWidth());
        tCol.setHeaderValue(""String_Node_Str"");
        group.setTableColumn(tCol);
        group.setMoveable(false);
        group.setResizeable(false);
        group.setSortable(false);
        groups.put(tCol,group);
        columnModel.addColumn(tCol);
      }
 else {
        if (dCol.isPlain()) {
          Rowset rs=DbControlsUtils.resolveRowset(model,dCol.getDatamodelElement());
          int fidx=DbControlsUtils.resolveFieldIndex(model,dCol.getDatamodelElement());
          if (fidx < 1) {
            if (dCol.getDatamodelElement() != null) {
              Logger.getLogger(DbGrid.class.getName()).log(Level.SEVERE,""String_Node_Str"" + dCol.getName() + ""String_Node_Str"");
            }
          }
          FieldModelColumn mCol=new FieldModelColumn(rs,fidx,getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()),group.isReadonly(),new HasStyle(){
            @Override public CascadedStyle getStyle(){
              return style;
            }
          }
,null,null);
          rowsModel.addColumn(mCol);
          TableColumn tCol=new TableColumn(rowsModel.getColumnCount() - 1);
          tCol.setMinWidth(group.getMinWidth());
          tCol.setMaxWidth(group.getMaxWidth());
          tCol.setPreferredWidth(dCol.getWidth());
          tCol.setWidth(dCol.getWidth());
          tCol.setResizable(!dCol.isFixed());
          if (dCol.getControlInfo() != null) {
            TableCellRenderer cellRenderer=dCol.createCellRenderer();
            tCol.setCellRenderer(cellRenderer);
            if (cellRenderer instanceof ScalarDbControl) {
              ((ScalarDbControl)cellRenderer).setModel(model);
              mCol.setView((ScalarDbControl)cellRenderer);
            }
            TableCellEditor cellEditor=dCol.createCellEditor();
            tCol.setCellEditor(cellEditor);
            if (cellEditor instanceof ScalarDbControl) {
              Field field=DbControlsUtils.resolveField(model,dCol.getDatamodelElement());
              ((ScalarDbControl)cellEditor).setModel(model);
              ((ScalarDbControl)cellEditor).extraCellControls(getHandler(dCol != null ? dCol.getSelectFunction() : null),field != null ? field.isNullable() : false);
              mCol.setEditor((ScalarDbControl)cellEditor);
            }
          }
          String title=group.getTitle();
          if (title == null || title.isEmpty()) {
            title=group.getName();
          }
          tCol.setHeaderValue(title);
          tCol.setIdentifier(mCol);
          group.setTableColumn(tCol);
          group.setResizeable(tCol.getResizable());
          groups.put(tCol,group);
          columnModel.addColumn(tCol);
          scriptableColumns.add(new ScriptableColumn(dCol,mCol,tCol,columnModel.getColumnCount() - 1,columnModel,rowsModel,groups));
        }
 else {
          Rowset colsRs=DbControlsUtils.resolveRowset(model,dCol.getColumnsDatasource());
          int colTitleColIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getColumnsDisplayField());
          Rowset cellsRs=DbControlsUtils.resolveRowset(model,dCol.getCellsDatasource());
          int cellsRowKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getRowsKeyField());
          int cellsColumKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getColumnsKeyField());
          Rowset cellsValuesRs=DbControlsUtils.resolveRowset(model,dCol.getCellDesignInfo().getCellValueField());
          int cellsValuesFieldIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getCellValueField());
          if (colsRs != null && cellsRs != null && cellsValuesRs != null && colTitleColIdx != 0 && cellsRowKeyIdx != 0 && cellsColumKeyIdx != 0 && cellsValuesFieldIdx != 0) {
            Locator colsLoc=createPksLocator(colsRs);
            Locator cellsLoc=cellsRs.createLocator();
            cellsLoc.beginConstrainting();
            try {
              cellsLoc.addConstraint(cellsRowKeyIdx);
              cellsLoc.addConstraint(cellsColumKeyIdx);
            }
  finally {
              cellsLoc.endConstrainting();
            }
            AnchorTableColumn anchorCol=new AnchorTableColumn(0);
            String title=group.getTitle();
            if (title == null || title.isEmpty()) {
              title=group.getName();
            }
            anchorCol.setHeaderValue(title);
            anchorCol.setMinWidth(0);
            anchorCol.setPreferredWidth(0);
            anchorCol.setMaxWidth(0);
            anchorCol.setWidth(0);
            ColumnsSource cs=new ColumnsSource(group,anchorCol,colsLoc,colTitleColIdx,cellsLoc,cellsValuesRs,cellsValuesFieldIdx,new VeerColumnsHandler(model,dCol),getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()));
            anchorCol.setColumnsSource(cs);
            columnModel.addColumn(anchorCol);
          }
        }
      }
    }
  }
  return groups;
}","/** 
 * @param aParent Columns group, with will be parentfor new groups.
 * @param aContents A list of used as a source for columns groups.
 * @param linkSource Wether to link new column groups with sourceDbGridColumn-s. This also means, that LinkedGridColumnsGroup will be created.
 * @return
 * @throws Exception
 */
private Map<TableColumn,GridColumnsGroup> fillColumnsGroup(GridColumnsGroup aParent,List<DbGridColumn> aContents,boolean linkSource) throws Exception {
  Map<TableColumn,GridColumnsGroup> groups=new HashMap<>();
  for (  DbGridColumn dCol : aContents) {
    GridColumnsGroup group;
    if (linkSource) {
      group=new LinkedGridColumnsGroup(dCol);
    }
 else {
      group=new GridColumnsGroup();
    }
    dCol.initializeGridColumnsGroup(group);
    if (aParent != null) {
      group.setParent(aParent);
      aParent.addChild(group);
    }
    if (dCol.hasChildren()) {
      Map<TableColumn,GridColumnsGroup> childGroups=fillColumnsGroup(group,dCol.getChildren(),linkSource);
      groups.putAll(childGroups);
    }
 else {
      if (dCol instanceof FixedDbGridColumn) {
        TableColumn tCol=new RowHeaderTableColumn(dCol.getWidth());
        tCol.setCellRenderer(new RowHeaderCellRenderer(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setCellEditor(new RowHeaderCellEditor(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setMinWidth(dCol.getWidth());
        tCol.setPreferredWidth(dCol.getWidth());
        tCol.setMaxWidth(dCol.getWidth());
        tCol.setHeaderValue(""String_Node_Str"");
        group.setTableColumn(tCol);
        group.setMoveable(false);
        group.setResizeable(false);
        group.setSortable(false);
        groups.put(tCol,group);
        columnModel.addColumn(tCol);
      }
 else {
        if (dCol.isPlain()) {
          Rowset rs=DbControlsUtils.resolveRowset(model,dCol.getDatamodelElement());
          int fidx=DbControlsUtils.resolveFieldIndex(model,dCol.getDatamodelElement());
          if (fidx < 1) {
            if (dCol.getDatamodelElement() != null) {
              Logger.getLogger(DbGrid.class.getName()).log(Level.SEVERE,""String_Node_Str"",dCol.getName());
            }
          }
          FieldModelColumn mCol=new FieldModelColumn(rs,fidx,getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()),group.isReadonly(),new HasStyle(){
            @Override public CascadedStyle getStyle(){
              return style;
            }
          }
,null,null);
          rowsModel.addColumn(mCol);
          TableColumn tCol=new TableColumn(rowsModel.getColumnCount() - 1);
          tCol.setMinWidth(group.getMinWidth());
          tCol.setMaxWidth(group.getMaxWidth());
          tCol.setPreferredWidth(dCol.getWidth());
          tCol.setWidth(dCol.getWidth());
          tCol.setResizable(!dCol.isFixed());
          if (dCol.getControlInfo() != null) {
            TableCellRenderer cellRenderer=dCol.createCellRenderer();
            tCol.setCellRenderer(cellRenderer);
            if (cellRenderer instanceof ScalarDbControl) {
              ((ScalarDbControl)cellRenderer).setModel(model);
              mCol.setView((ScalarDbControl)cellRenderer);
            }
            TableCellEditor cellEditor=dCol.createCellEditor();
            tCol.setCellEditor(cellEditor);
            if (cellEditor instanceof ScalarDbControl) {
              Field field=DbControlsUtils.resolveField(model,dCol.getDatamodelElement());
              ((ScalarDbControl)cellEditor).setModel(model);
              ((ScalarDbControl)cellEditor).extraCellControls(getHandler(dCol.getSelectFunction()),field != null ? field.isNullable() : false);
              mCol.setEditor((ScalarDbControl)cellEditor);
            }
          }
          String title=group.getTitle();
          if (title == null || title.isEmpty()) {
            title=group.getName();
          }
          tCol.setHeaderValue(title);
          tCol.setIdentifier(mCol);
          group.setTableColumn(tCol);
          group.setResizeable(tCol.getResizable());
          groups.put(tCol,group);
          columnModel.addColumn(tCol);
          scriptableColumns.add(new ScriptableColumn(dCol,mCol,tCol,columnModel.getColumnCount() - 1,columnModel,rowsModel,groups));
        }
 else {
          Rowset colsRs=DbControlsUtils.resolveRowset(model,dCol.getColumnsDatasource());
          int colTitleColIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getColumnsDisplayField());
          Rowset cellsRs=DbControlsUtils.resolveRowset(model,dCol.getCellsDatasource());
          int cellsRowKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getRowsKeyField());
          int cellsColumKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getColumnsKeyField());
          Rowset cellsValuesRs=DbControlsUtils.resolveRowset(model,dCol.getCellDesignInfo().getCellValueField());
          int cellsValuesFieldIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getCellValueField());
          if (colsRs != null && cellsRs != null && cellsValuesRs != null && colTitleColIdx != 0 && cellsRowKeyIdx != 0 && cellsColumKeyIdx != 0 && cellsValuesFieldIdx != 0) {
            Locator colsLoc=createPksLocator(colsRs);
            Locator cellsLoc=cellsRs.createLocator();
            cellsLoc.beginConstrainting();
            try {
              cellsLoc.addConstraint(cellsRowKeyIdx);
              cellsLoc.addConstraint(cellsColumKeyIdx);
            }
  finally {
              cellsLoc.endConstrainting();
            }
            AnchorTableColumn anchorCol=new AnchorTableColumn(0);
            String title=group.getTitle();
            if (title == null || title.isEmpty()) {
              title=group.getName();
            }
            anchorCol.setHeaderValue(title);
            anchorCol.setMinWidth(0);
            anchorCol.setPreferredWidth(0);
            anchorCol.setMaxWidth(0);
            anchorCol.setWidth(0);
            ColumnsSource cs=new ColumnsSource(group,anchorCol,colsLoc,colTitleColIdx,cellsLoc,cellsValuesRs,cellsValuesFieldIdx,new VeerColumnsHandler(model,dCol),getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()));
            anchorCol.setColumnsSource(cs);
            columnModel.addColumn(anchorCol);
          }
        }
      }
    }
  }
  return groups;
}",0.996384216318189
145567,"public XMLHttpRequest2 syncRequest(String aUrlPrefix,final String aUrlQuery,String aBody,RequestBuilder.Method aMethod) throws Exception {
  String url=baseUrl + aUrlPrefix + ""String_Node_Str""+ aUrlQuery;
  final XMLHttpRequest2 req=XMLHttpRequest.create().<XMLHttpRequest2>cast();
  req.open(aMethod.toString(),url,false);
  req.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  req.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  req.send(aBody);
  if (req.getStatus() == Response.SC_OK)   return req;
 else   throw new Exception(req.getStatus() + ""String_Node_Str"" + req.getStatusText());
}","public XMLHttpRequest2 syncRequest(String aUrl,ResponseType aResponseType,String aBody,RequestBuilder.Method aMethod) throws Exception {
  final XMLHttpRequest2 req=XMLHttpRequest.create().<XMLHttpRequest2>cast();
  req.open(aMethod.toString(),aUrl,false);
  interceptRequest(req);
  if (aResponseType != null && aResponseType != ResponseType.Default)   req.setResponseType(aResponseType);
  req.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
  if (aBody != null)   req.send(aBody);
 else   req.send();
  if (req.getStatus() == Response.SC_OK)   return req;
 else   throw new Exception(req.getStatus() + ""String_Node_Str"" + req.getStatusText());
}",0.7041139240506329
145568,"public static void jsLoad(String aResourceName,final JavaScriptObject onSuccess,final JavaScriptObject onFailure,final boolean text) throws Exception {
  SafeUri uri=AppClient.getInstance().getResourceUri(aResourceName);
  AppClient.getInstance().startRequest(uri,text ? ResponseType.Default : ResponseType.ArrayBuffer,new Callback<XMLHttpRequest>(){
    @Override public void run(    XMLHttpRequest aResult) throws Exception {
      if (aResult.getStatus() == Response.SC_OK) {
        if (onSuccess != null)         Utils.executeScriptEventVoid(onSuccess,onSuccess,text ? Utils.toJs(aResult.getResponseText()) : aResult.<XMLHttpRequest2>cast().getResponse());
      }
 else {
        if (onFailure != null)         Utils.executeScriptEventVoid(onFailure,onFailure,Utils.toJs(aResult.getStatusText()));
      }
    }
    @Override public void cancel(){
    }
  }
,new Callback<XMLHttpRequest>(){
    @Override public void run(    XMLHttpRequest aResult) throws Exception {
      if (onFailure != null)       Utils.executeScriptEventVoid(onFailure,onFailure,Utils.toJs(aResult.getStatusText()));
    }
    @Override public void cancel(){
    }
  }
);
}","public static Object jsLoad(String aResourceName,final JavaScriptObject onSuccess,final JavaScriptObject onFailure,final boolean text) throws Exception {
  SafeUri uri=AppClient.getInstance().getResourceUri(aResourceName);
  if (onSuccess != null) {
    AppClient.getInstance().startRequest(uri,text ? ResponseType.Default : ResponseType.ArrayBuffer,new Callback<XMLHttpRequest>(){
      @Override public void run(      XMLHttpRequest aResult) throws Exception {
        if (aResult.getStatus() == Response.SC_OK) {
          if (onSuccess != null)           Utils.executeScriptEventVoid(onSuccess,onSuccess,text ? Utils.toJs(aResult.getResponseText()) : aResult.<XMLHttpRequest2>cast().getResponse());
        }
 else {
          if (onFailure != null)           Utils.executeScriptEventVoid(onFailure,onFailure,Utils.toJs(aResult.getStatusText()));
        }
      }
      @Override public void cancel(){
      }
    }
,new Callback<XMLHttpRequest>(){
      @Override public void run(      XMLHttpRequest aResult) throws Exception {
        if (onFailure != null)         Utils.executeScriptEventVoid(onFailure,onFailure,Utils.toJs(aResult.getStatusText()));
      }
      @Override public void cancel(){
      }
    }
);
  }
 else {
    XMLHttpRequest2 executed=AppClient.getInstance().syncRequest(uri.asString(),text ? ResponseType.Default : ResponseType.ArrayBuffer);
    if (executed != null) {
      if (executed.getStatus() == Response.SC_OK)       return text ? Utils.toJs(executed.getResponseText()) : executed.<XMLHttpRequest2>cast().getResponse();
 else       throw new Exception(executed.getStatusText());
    }
  }
  return null;
}",0.77726135144798
145569,"public Object executeServerModuleMethod(final String aModuleName,final String aMethodName,final JsArrayString aParams,final JavaScriptObject onSuccess) throws Exception {
  String[] convertedParams=new String[aParams.length()];
  for (int i=0; i < aParams.length(); i++)   convertedParams[i]=param(PlatypusHttpRequestParams.PARAMS_ARRAY,aParams.get(i));
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteServerModuleMethod)),param(PlatypusHttpRequestParams.MODULE_NAME,aModuleName),param(PlatypusHttpRequestParams.METHOD_NAME,aMethodName),params(convertedParams));
  if (onSuccess != null) {
    startRequest(API_URI,query,null,RequestBuilder.GET,new ResponseCallbackAdapter(){
      @Override public void doWork(      XMLHttpRequest aResponse) throws Exception {
        String responseType=aResponse.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(Utils.jsonParse(aResponse.getResponseText())));
          }
 else {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
          }
        }
 else {
          Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
        }
      }
    }
,null);
    return null;
  }
 else {
    XMLHttpRequest2 executed=syncRequest(API_URI,query,null,RequestBuilder.GET);
    if (executed != null) {
      String responseType=executed.getResponseHeader(""String_Node_Str"");
      if (responseType != null) {
        responseType=responseType.toLowerCase();
        if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
          return Utils.toJs(Utils.jsonParse(executed.getResponseText()));
        }
 else {
          return Utils.toJs(executed.getResponseText());
        }
      }
 else {
        return Utils.toJs(executed.getResponseText());
      }
    }
 else {
      return null;
    }
  }
}","public Object executeServerModuleMethod(final String aModuleName,final String aMethodName,final JsArrayString aParams,final JavaScriptObject onSuccess) throws Exception {
  String[] convertedParams=new String[aParams.length()];
  for (int i=0; i < aParams.length(); i++)   convertedParams[i]=param(PlatypusHttpRequestParams.PARAMS_ARRAY,aParams.get(i));
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteServerModuleMethod)),param(PlatypusHttpRequestParams.MODULE_NAME,aModuleName),param(PlatypusHttpRequestParams.METHOD_NAME,aMethodName),params(convertedParams));
  if (onSuccess != null) {
    startRequest(API_URI,query,null,RequestBuilder.GET,new ResponseCallbackAdapter(){
      @Override public void doWork(      XMLHttpRequest aResponse) throws Exception {
        String responseType=aResponse.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(Utils.jsonParse(aResponse.getResponseText())));
          }
 else {
            Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
          }
        }
 else {
          Utils.executeScriptEventVoid(onSuccess,onSuccess,Utils.toJs(aResponse.getResponseText()));
        }
      }
    }
,null);
    return null;
  }
 else {
    XMLHttpRequest2 executed=syncRequest(API_URI,query,ResponseType.Default);
    if (executed != null) {
      if (executed.getStatus() == Response.SC_OK) {
        String responseType=executed.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            return Utils.toJs(Utils.jsonParse(executed.getResponseText()));
          }
 else {
            return Utils.toJs(executed.getResponseText());
          }
        }
 else {
          return Utils.toJs(executed.getResponseText());
        }
      }
 else       throw new Exception(executed.getStatusText());
    }
 else {
      return null;
    }
  }
}",0.959045904590459
145570,"protected void onMouseMove(Event event){
  Element elem=event.getEventTarget().cast();
  if (hasAttribute(elem,""String_Node_Str"")) {
    String cls=((Element)event.getEventTarget().cast()).getClassName();
    if (cls != null && cls.contains(""String_Node_Str"")) {
      return;
    }
  }
  int x=event.getClientX();
  int y=event.getClientY();
  if (!dragging && (Math.abs(dragStartX - x) > startDragDistance || Math.abs(dragStartY - y) > startDragDistance)) {
    startDrag(event);
  }
  if (dragging) {
    int left=constrainHorizontal ? startBounds.getX() : startBounds.getX() + (x - dragStartX);
    int top=constrainVertical ? startBounds.getY() : startBounds.getY() + (y - dragStartY);
    if (constrainClient) {
      if (!constrainHorizontal) {
        int width=startBounds.getWidth();
        left=Math.max(left,0);
        left=Math.max(0,Math.min(clientWidth - width,left));
      }
      if (!constrainVertical) {
        top=Math.max(top,0);
        int height=startBounds.getHeight();
        if (Math.min(clientHeight - height,top) > 0) {
          top=Math.max(2,Math.min(clientHeight - height,top));
        }
      }
    }
    if (container != null) {
      int width=startBounds.getWidth();
      int height=startBounds.getHeight();
      if (!constrainHorizontal) {
        left=Math.max(left,conX);
        left=Math.min(conX + conWidth - width,left);
      }
      if (!constrainVertical) {
        top=Math.min(conY + conHeight - height,top);
        top=Math.max(top,conY);
      }
    }
    if (!constrainHorizontal) {
      if (xLeft != Style.DEFAULT) {
        left=Math.max(startBounds.getX() - xLeft,left);
      }
      if (xRight != Style.DEFAULT) {
        left=Math.min(startBounds.getX() + xRight,left);
      }
    }
    if (!constrainVertical) {
      if (xTop != Style.DEFAULT) {
        top=Math.max(startBounds.getY() - xTop,top);
      }
      if (xBottom != Style.DEFAULT) {
        top=Math.min(startBounds.getY() + xBottom,top);
      }
    }
    lastX=left;
    lastY=top;
    DragMoveEvent evt=new DragMoveEvent(dragWidget,startElement,lastX,lastY,event);
    ensureHandlers().fireEventFromSource(evt,this);
    if (evt.isCancelled()) {
      cancelDrag();
      return;
    }
    int tl=evt.getX() != lastX ? evt.getX() : lastX;
    int tt=evt.getY() != lastY ? evt.getY() : lastY;
    if (useProxy) {
      proxyEl.setXY(tl,tt);
    }
 else {
      dragWidgetElement.setXY(tl,tt);
    }
  }
}","protected void onMouseMove(Event event){
  Element elem=event.getEventTarget().cast();
  if (hasAttribute(elem,""String_Node_Str"")) {
    String cls=null;
    try {
      cls=elem.getClassName();
    }
 catch (    Exception ex) {
      cls=elem.getAttribute(""String_Node_Str"");
    }
    if (cls != null && cls.contains(""String_Node_Str"")) {
      return;
    }
  }
  int x=event.getClientX();
  int y=event.getClientY();
  if (!dragging && (Math.abs(dragStartX - x) > startDragDistance || Math.abs(dragStartY - y) > startDragDistance)) {
    startDrag(event);
  }
  if (dragging) {
    int left=constrainHorizontal ? startBounds.getX() : startBounds.getX() + (x - dragStartX);
    int top=constrainVertical ? startBounds.getY() : startBounds.getY() + (y - dragStartY);
    if (constrainClient) {
      if (!constrainHorizontal) {
        int width=startBounds.getWidth();
        left=Math.max(left,0);
        left=Math.max(0,Math.min(clientWidth - width,left));
      }
      if (!constrainVertical) {
        top=Math.max(top,0);
        int height=startBounds.getHeight();
        if (Math.min(clientHeight - height,top) > 0) {
          top=Math.max(2,Math.min(clientHeight - height,top));
        }
      }
    }
    if (container != null) {
      int width=startBounds.getWidth();
      int height=startBounds.getHeight();
      if (!constrainHorizontal) {
        left=Math.max(left,conX);
        left=Math.min(conX + conWidth - width,left);
      }
      if (!constrainVertical) {
        top=Math.min(conY + conHeight - height,top);
        top=Math.max(top,conY);
      }
    }
    if (!constrainHorizontal) {
      if (xLeft != Style.DEFAULT) {
        left=Math.max(startBounds.getX() - xLeft,left);
      }
      if (xRight != Style.DEFAULT) {
        left=Math.min(startBounds.getX() + xRight,left);
      }
    }
    if (!constrainVertical) {
      if (xTop != Style.DEFAULT) {
        top=Math.max(startBounds.getY() - xTop,top);
      }
      if (xBottom != Style.DEFAULT) {
        top=Math.min(startBounds.getY() + xBottom,top);
      }
    }
    lastX=left;
    lastY=top;
    DragMoveEvent evt=new DragMoveEvent(dragWidget,startElement,lastX,lastY,event);
    ensureHandlers().fireEventFromSource(evt,this);
    if (evt.isCancelled()) {
      cancelDrag();
      return;
    }
    int tl=evt.getX() != lastX ? evt.getX() : lastX;
    int tt=evt.getY() != lastY ? evt.getY() : lastY;
    if (useProxy) {
      proxyEl.setXY(tl,tt);
    }
 else {
      dragWidgetElement.setXY(tl,tt);
    }
  }
}",0.9636803874092008
145571,"@Override public void rowsetRequeried(RowsetRequeryEvent event){
  try {
    if (!model.isAjusting()) {
      enqueueScriptEvent(onRequeried,new ScriptSourcedEvent(sRowsetWrap));
    }
    if (!executing) {
      internalExecuteChildren(false);
      model.pumpScriptEvents();
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(Entity.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override public void rowsetRequeried(RowsetRequeryEvent event){
}",0.2894736842105263
145572,"private Parameters decodeQueryParams(String aQueryId,HttpServletRequest aRequest) throws RowsetException, IOException, UnsupportedEncodingException, Exception {
  SqlQuery query=serverCore.getDatabasesClient().getAppQuery(aQueryId);
  Parameters params=query.getParameters();
  Converter converter=serverCore.getDatabasesClient().getDbMetadataCache(query.getDbId()).getConnectionDriver().getConverter();
  for (int i=1; i <= params.getParametersCount(); i++) {
    Parameter param=params.get(i);
    String paramValue=aRequest.getParameter(param.getName());
    if (paramValue != null) {
      if (""String_Node_Str"".equals(paramValue.toLowerCase()) || paramValue.isEmpty()) {
        paramValue=null;
      }
      Object convertedParamValue;
      if (param.getTypeInfo().getSqlType() == Types.DATE || param.getTypeInfo().getSqlType() == Types.TIMESTAMP || param.getTypeInfo().getSqlType() == Types.TIME) {
        SimpleDateFormat sdf=new SimpleDateFormat(RowsetJsonConstants.DATE_FORMAT);
        convertedParamValue=converter.convert2RowsetCompatible(paramValue != null ? sdf.parse(paramValue) : paramValue,param.getTypeInfo());
      }
 else {
        convertedParamValue=converter.convert2RowsetCompatible(paramValue,param.getTypeInfo());
      }
      param.setValue(convertedParamValue);
    }
  }
  return params;
}","private Parameters decodeQueryParams(String aQueryId,HttpServletRequest aRequest) throws RowsetException, IOException, UnsupportedEncodingException, Exception {
  SqlQuery query=serverCore.getDatabasesClient().getAppQuery(aQueryId);
  Parameters params=query.getParameters();
  Converter converter=serverCore.getDatabasesClient().getDbMetadataCache(query.getDbId()).getConnectionDriver().getConverter();
  for (int i=1; i <= params.getParametersCount(); i++) {
    Parameter param=params.get(i);
    String paramValue=aRequest.getParameter(param.getName());
    if (paramValue != null) {
      if (""String_Node_Str"".equals(paramValue.toLowerCase()) || paramValue.isEmpty()) {
        paramValue=null;
      }
      Object convertedParamValue;
      if (param.getTypeInfo().getSqlType() == Types.DATE || param.getTypeInfo().getSqlType() == Types.TIMESTAMP || param.getTypeInfo().getSqlType() == Types.TIME) {
        convertedParamValue=converter.convert2RowsetCompatible(paramValue != null ? RowsetJsonConstants.DATE_FORMATTER.parse(paramValue) : paramValue,param.getTypeInfo());
      }
 else {
        convertedParamValue=converter.convert2RowsetCompatible(paramValue,param.getTypeInfo());
      }
      param.setValue(convertedParamValue);
    }
  }
  return params;
}",0.8277456647398844
145573,"protected Change.Value[] parseObjectProperties(Object oData) throws Exception {
  List<Change.Value> data=new ArrayList<>();
  if (oData instanceof Scriptable) {
    Scriptable sValue=(Scriptable)oData;
    Object[] valueIds=sValue.getIds();
    for (int j=0; j < valueIds.length; j++) {
      Object oValueName=valueIds[j];
      if (oValueName instanceof String) {
        String sValueName=(String)oValueName;
        Object oValueValue=sValue.get(sValueName,ScriptUtils.getScope());
        Field field=fieldsResolver.resolveField(entityId,sValueName);
        if (field != null) {
          Object convertedValueValue=converter.convert2RowsetCompatible(oValueValue,field.getTypeInfo());
          data.add(new Change.Value(sValueName,convertedValueValue,field.getTypeInfo()));
        }
 else {
          Logger.getLogger(ChangeJsonReader.class.getName()).log(Level.WARNING,String.format(""String_Node_Str"",entityId,sValueName));
        }
      }
 else {
        Logger.getLogger(ChangeJsonReader.class.getName()).log(Level.WARNING,""String_Node_Str"");
      }
    }
  }
  return data.toArray(new Change.Value[]{});
}","protected Change.Value[] parseObjectProperties(Object oData) throws Exception {
  List<Change.Value> data=new ArrayList<>();
  if (oData instanceof Scriptable) {
    Scriptable sValue=(Scriptable)oData;
    Object[] valueIds=sValue.getIds();
    for (int j=0; j < valueIds.length; j++) {
      Object oValueName=valueIds[j];
      if (oValueName instanceof String) {
        String sValueName=(String)oValueName;
        Object oValueValue=sValue.get(sValueName,ScriptUtils.getScope());
        Field field=fieldsResolver.resolveField(entityId,sValueName);
        if (field != null) {
          if (oValueValue instanceof String && (field.getTypeInfo().getSqlType() == java.sql.Types.DATE || field.getTypeInfo().getSqlType() == java.sql.Types.TIME || field.getTypeInfo().getSqlType() == java.sql.Types.TIMESTAMP)) {
            try {
              oValueValue=RowsetJsonConstants.DATE_FORMATTER.parse((String)oValueValue);
            }
 catch (            ParseException pex) {
              if (((String)oValueValue).matches(""String_Node_Str"")) {
                oValueValue=Long.valueOf((String)oValueValue);
              }
 else {
                oValueValue=Double.valueOf((String)oValueValue);
              }
            }
          }
          Object convertedValueValue=converter.convert2RowsetCompatible(oValueValue,field.getTypeInfo());
          data.add(new Change.Value(sValueName,convertedValueValue,field.getTypeInfo()));
        }
 else {
          Logger.getLogger(ChangeJsonReader.class.getName()).log(Level.WARNING,String.format(""String_Node_Str"",entityId,sValueName));
        }
      }
 else {
        Logger.getLogger(ChangeJsonReader.class.getName()).log(Level.WARNING,""String_Node_Str"");
      }
    }
  }
  return data.toArray(new Change.Value[]{});
}",0.7731034482758621
145574,"private void writeValue(StringBuilder sb,Object aValue,Field aField) throws Exception {
  String sValue=""String_Node_Str"";
  if (aValue != null) {
    sValue=String.valueOf(rowset.getConverter().convert2RowsetCompatible(aValue,DataTypeInfo.VARCHAR));
switch (aField.getTypeInfo().getSqlType()) {
case Types.TIME:
case Types.DATE:
case Types.TIMESTAMP:
      SimpleDateFormat sdf=new SimpleDateFormat(RowsetJsonConstants.DATE_FORMAT);
    sValue=s(sdf.format(aValue));
  break;
case Types.CHAR:
case Types.NCHAR:
case Types.VARCHAR:
case Types.NVARCHAR:
case Types.LONGVARCHAR:
case Types.LONGNVARCHAR:
case Types.CLOB:
case Types.NCLOB:
case Types.OTHER:
case Types.STRUCT:
sValue=s(sValue);
default :
break;
}
}
p(sb,aField.getName(),sValue);
}","private void writeValue(StringBuilder sb,Object aValue,Field aField) throws Exception {
  String sValue=""String_Node_Str"";
  if (aValue != null) {
    sValue=String.valueOf(rowset.getConverter().convert2RowsetCompatible(aValue,DataTypeInfo.VARCHAR));
switch (aField.getTypeInfo().getSqlType()) {
case Types.TIME:
case Types.DATE:
case Types.TIMESTAMP:
      sValue=s(RowsetJsonConstants.DATE_FORMATTER.format(aValue));
    break;
case Types.CHAR:
case Types.NCHAR:
case Types.VARCHAR:
case Types.NVARCHAR:
case Types.LONGVARCHAR:
case Types.LONGNVARCHAR:
case Types.CLOB:
case Types.NCLOB:
case Types.OTHER:
case Types.STRUCT:
  sValue=s(sValue);
default :
break;
}
}
p(sb,aField.getName(),sValue);
}",0.9314878892733564
145575,"private DataSource constructDataSource(DbConnectionSettings aSettings) throws Exception {
  try {
    Context initContext=new InitialContext();
    DataSource ds;
    try {
      ds=(DataSource)initContext.lookup(aSettings.getUrl());
    }
 catch (    javax.naming.NamingException ex) {
      Context envContext=(Context)initContext.lookup(""String_Node_Str"");
      ds=(DataSource)envContext.lookup(aSettings.getUrl());
    }
    return ds;
  }
 catch (  Exception ex) {
    return new PlatypusNativeDataSource(aSettings.getMaxConnections(),aSettings.getMaxStatements(),aSettings.getUrl(),aSettings.getInfo());
  }
}","private DataSource constructDataSource(DbConnectionSettings aSettings) throws Exception {
  try {
    Context initContext=new InitialContext();
    DataSource ds;
    try {
      ds=(DataSource)initContext.lookup(aSettings.getUrl());
    }
 catch (    javax.naming.NamingException ex) {
      Context envContext=(Context)initContext.lookup(""String_Node_Str"");
      ds=(DataSource)envContext.lookup(aSettings.getUrl());
    }
    return ds;
  }
 catch (  Exception ex) {
    return new PlatypusNativeDataSource(aSettings.getMaxConnections(),aSettings.getMaxStatements(),aSettings.getResourceTimeout(),aSettings.getUrl(),aSettings.getInfo());
  }
}",0.9754552652414884
145576,"public PlatypusNativeDataSource(int aMaxConnections,int aMaxStatements,String aUrl,Properties aProperties) throws Exception {
  super(aMaxConnections);
  url=aUrl;
  props=aProperties;
  maxStatements=aMaxStatements;
}","public PlatypusNativeDataSource(int aMaxConnections,int aMaxStatements,int aResourceTimeout,String aUrl,Properties aProperties) throws Exception {
  super(aMaxConnections,aResourceTimeout);
  url=aUrl;
  props=aProperties;
  maxStatements=aMaxStatements;
  resourceTimeout=aResourceTimeout;
}",0.8549019607843137
145577,"@Override protected BearDatabaseConnection createResource() throws Exception {
  return new BearDatabaseConnection(maxStatements,DriverManager.getConnection(url,props),this);
}","@Override protected BearDatabaseConnection createResource() throws Exception {
  return new BearDatabaseConnection(maxStatements,resourceTimeout,DriverManager.getConnection(url,props),this);
}",0.9565217391304348
145578,"/** 
 * Gets information about JDBC drivers supported by Platypus Platform.
 * @return Dictionary where the key is database dialect and value is JDBC driver class name
 * @throws Exception if something goes wrong
 */
public static Map<String,String> readDrivers() throws Exception {
  InputStream is=DbConnectionSettings.class.getResourceAsStream(DbConnectionSettings.DB_DRIVERS_FILE_NAME);
  Map<String,String> drivers=new HashMap<>();
  if (is.available() > 0) {
    try {
      String driversDataString=new String(BinaryUtils.readStream(is,-1),SettingsConstants.COMMON_ENCODING);
      Document driversDoc=Source2XmlDom.transform(driversDataString);
      Node jdbcNode=driversDoc.getFirstChild();
      if (jdbcNode != null && ""String_Node_Str"".equals(jdbcNode.getNodeName())) {
        NodeList driversNodes=jdbcNode.getChildNodes();
        drivers.clear();
        for (int i=0; i < driversNodes.getLength(); i++) {
          Node driverNode=driversNodes.item(i);
          if (driverNode instanceof Element && DB_DRIVER_TAG_NAME.equals(driverNode.getNodeName())) {
            Element element=(Element)driverNode;
            String dialect=element.getAttribute(DB_DRIVER_DIALECT_ATTR_NAME);
            String driverClassName=element.getTextContent();
            if (dialect != null && !dialect.isEmpty() && driverClassName != null && !driverClassName.isEmpty()) {
              drivers.put(dialect,driverClassName.replaceAll(""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
  finally {
      is.close();
    }
  }
 else {
    is.close();
    throw new Exception(""String_Node_Str"");
  }
  return drivers;
}","/** 
 * Gets information about JDBC drivers supported by Platypus Platform.
 * @return Dictionary where the key is database dialect and value is JDBCdriver class name
 * @throws Exception if something goes wrong
 */
public static Map<String,String> readDrivers() throws Exception {
  Map<String,String> drivers=new HashMap<>();
  try (InputStream is=DbConnectionSettings.class.getResourceAsStream(DbConnectionSettings.DB_DRIVERS_FILE_NAME)){
    if (is.available() > 0) {
      String driversDataString=new String(BinaryUtils.readStream(is,-1),SettingsConstants.COMMON_ENCODING);
      Document driversDoc=Source2XmlDom.transform(driversDataString);
      Node jdbcNode=driversDoc.getFirstChild();
      if (jdbcNode != null && ""String_Node_Str"".equals(jdbcNode.getNodeName())) {
        NodeList driversNodes=jdbcNode.getChildNodes();
        drivers.clear();
        for (int i=0; i < driversNodes.getLength(); i++) {
          Node driverNode=driversNodes.item(i);
          if (driverNode instanceof Element && DB_DRIVER_TAG_NAME.equals(driverNode.getNodeName())) {
            Element element=(Element)driverNode;
            String dialect=element.getAttribute(DB_DRIVER_DIALECT_ATTR_NAME);
            String driverClassName=element.getTextContent();
            if (dialect != null && !dialect.isEmpty() && driverClassName != null && !driverClassName.isEmpty()) {
              drivers.put(dialect,driverClassName.replaceAll(""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
    return drivers;
  }
 }",0.9044811320754716
145579,"public static Object getValue(ProtoNode node,ExecuteServerModuleMethodRequest.ArgumentType at) throws ProtoReaderException {
switch (at) {
case BIG_DECIMAL:
    return (node.getBigDecimal());
case BIG_INTEGER:
  return (node.getBigDecimal().toBigInteger());
case BOOLEAN:
return (node.getInt() != 0);
case BYTE:
return (node.getByte());
case CHARACTER:
return (node.getString().charAt(0));
case DATE:
return (node.getDate());
case DOUBLE:
return (node.getDouble());
case FLOAT:
return ((float)node.getDouble());
case INTEGER:
return (node.getInt());
case LONG:
return (node.getLong());
case SHORT:
return ((short)node.getInt());
case STRING:
return (node.getString());
default :
throw new IllegalArgumentException();
}
}","public static Object getValue(ProtoNode node,ExecuteServerModuleMethodRequest.ArgumentType at) throws ProtoReaderException {
switch (at) {
case BIG_DECIMAL:
    return (node.getBigDecimal());
case BIG_INTEGER:
  return (node.getBigDecimal().toBigInteger());
case BOOLEAN:
return (node.getInt() != 0);
case BYTE:
return (node.getByte());
case CHARACTER:
return (node.getString().charAt(0));
case DATE:
return (node.getDate());
case DOUBLE:
return (node.getDouble());
case FLOAT:
return ((float)node.getDouble());
case INTEGER:
return (node.getInt());
case LONG:
return (node.getLong());
case SHORT:
return ((short)node.getInt());
case STRING:
return (node.getString());
case OBJECT:
return ScriptUtils.parseJson(node.getString());
default :
throw new IllegalArgumentException();
}
}",0.9593604263824116
145580,"public static void putValue(ProtoWriter writer,int nullValueTag,int undefinedValueTag,int functionValueTag,int typeTag,int nameTag,String aArgumentName,int valueTag,Object arg) throws IOException {
  if (arg == null) {
    writer.put(nullValueTag);
  }
 else   if (arg instanceof Undefined) {
    writer.put(undefinedValueTag);
  }
 else   if (arg instanceof Function) {
    writer.put(functionValueTag);
  }
 else {
    if (aArgumentName != null && !aArgumentName.isEmpty()) {
      writer.put(nameTag,aArgumentName);
    }
    ExecuteServerModuleMethodRequest.ArgumentType at=ExecuteServerModuleMethodRequest.ArgumentType.getArgumentType(arg);
    if (at == null) {
      throw new IllegalArgumentException(arg.toString());
    }
    writer.put(typeTag,at.getTypeID());
switch (at) {
case BIG_DECIMAL:
      writer.put(valueTag,(BigDecimal)arg);
    break;
case BIG_INTEGER:
  writer.put(valueTag,new BigDecimal((BigInteger)arg));
break;
case BOOLEAN:
writer.put(valueTag,((Boolean)arg).booleanValue() ? 1 : 0);
break;
case BYTE:
writer.put(valueTag,(Byte)arg);
break;
case CHARACTER:
writer.put(valueTag,((Character)arg).toString());
break;
case DATE:
writer.put(valueTag,(Date)arg);
break;
case DOUBLE:
writer.put(valueTag,(Double)arg);
break;
case FLOAT:
writer.put(valueTag,((Float)arg).doubleValue());
break;
case INTEGER:
writer.put(valueTag,(Integer)arg);
break;
case LONG:
writer.put(valueTag,(Long)arg);
break;
case SHORT:
writer.put(valueTag,((Short)arg).intValue());
break;
case STRING:
writer.put(valueTag,(String)arg);
break;
}
}
}","public static void putValue(ProtoWriter writer,int nullValueTag,int undefinedValueTag,int functionValueTag,int typeTag,int nameTag,String aArgumentName,int valueTag,Object arg) throws IOException {
  if (arg == null) {
    writer.put(nullValueTag);
  }
 else   if (arg instanceof Undefined) {
    writer.put(undefinedValueTag);
  }
 else   if (arg instanceof Function) {
    writer.put(functionValueTag);
  }
 else {
    if (aArgumentName != null && !aArgumentName.isEmpty()) {
      writer.put(nameTag,aArgumentName);
    }
    ExecuteServerModuleMethodRequest.ArgumentType at=ExecuteServerModuleMethodRequest.ArgumentType.getArgumentType(arg);
    if (at == null) {
      throw new IllegalArgumentException(arg.toString());
    }
    writer.put(typeTag,at.getTypeID());
switch (at) {
case BIG_DECIMAL:
      writer.put(valueTag,(BigDecimal)arg);
    break;
case BIG_INTEGER:
  writer.put(valueTag,new BigDecimal((BigInteger)arg));
break;
case BOOLEAN:
writer.put(valueTag,((Boolean)arg).booleanValue() ? 1 : 0);
break;
case BYTE:
writer.put(valueTag,(Byte)arg);
break;
case CHARACTER:
writer.put(valueTag,((Character)arg).toString());
break;
case DATE:
writer.put(valueTag,(Date)arg);
break;
case DOUBLE:
writer.put(valueTag,(Double)arg);
break;
case FLOAT:
writer.put(valueTag,((Float)arg).doubleValue());
break;
case INTEGER:
writer.put(valueTag,(Integer)arg);
break;
case LONG:
writer.put(valueTag,(Long)arg);
break;
case SHORT:
writer.put(valueTag,((Short)arg).intValue());
break;
case STRING:
writer.put(valueTag,(String)arg);
break;
case OBJECT:
writer.put(valueTag,(String)ScriptUtils.toJson(arg));
break;
}
}
}",0.9766266582438408
145581,"public static ArgumentType getArgumentType(Object value){
  for (  ArgumentType at : values()) {
    if (at.getClazz().isInstance(value)) {
      return at;
    }
  }
  return null;
}","public static ArgumentType getArgumentType(Object value){
  if (value instanceof Scriptable) {
    return ArgumentType.OBJECT;
  }
 else {
    for (    ArgumentType at : values()) {
      if (at.getClazz().isInstance(value)) {
        return at;
      }
    }
    return null;
  }
}",0.7397849462365591
145582,"public int apply(Connection aConnection) throws Exception {
  if (valid) {
    try (PreparedStatement stmt=aConnection.prepareStatement(clause)){
      for (int i=1; i <= parameters.size(); i++) {
        Change.Value v=parameters.get(i - 1);
        converter.convert2JdbcAndAssign(v.value,v.type,aConnection,i,stmt);
      }
      if (queriesLogger.isLoggable(Level.FINER)) {
        queriesLogger.log(Level.FINER,""String_Node_Str"",new Object[]{clause,parameters.size()});
      }
      return stmt.executeUpdate();
    }
   }
 else {
    Logger.getLogger(StatementsLogEntry.class.getName()).log(Level.WARNING,""String_Node_Str"");
    return 0;
  }
}","public int apply(Connection aConnection) throws Exception {
  if (valid) {
    try (PreparedStatement stmt=aConnection.prepareStatement(clause)){
      for (int i=1; i <= parameters.size(); i++) {
        Change.Value v=parameters.get(i - 1);
        converter.convert2JdbcAndAssign(v.value,v.type,aConnection,i,stmt);
      }
      if (queriesLogger.isLoggable(Level.FINE)) {
        queriesLogger.log(Level.FINE,""String_Node_Str"",new Object[]{clause,parameters.size()});
      }
      return stmt.executeUpdate();
    }
   }
 else {
    Logger.getLogger(StatementsLogEntry.class.getName()).log(Level.WARNING,""String_Node_Str"");
    return 0;
  }
}",0.9984615384615384
145583,"/** 
 * @param aParent Columns group, with will be parentfor new groups.
 * @param aContents A list of used as a source for columns groups.
 * @param linkSource Wether to link new column groups with sourceDbGridColumn-s. This also means, that LinkedGridColumnsGroup will be created.
 * @return
 * @throws Exception
 */
private Map<TableColumn,GridColumnsGroup> fillColumnsGroup(GridColumnsGroup aParent,List<DbGridColumn> aContents,boolean linkSource) throws Exception {
  Map<TableColumn,GridColumnsGroup> groups=new HashMap<>();
  for (  DbGridColumn dCol : aContents) {
    GridColumnsGroup group;
    if (linkSource) {
      group=new LinkedGridColumnsGroup(dCol);
    }
 else {
      group=new GridColumnsGroup();
    }
    dCol.initializeGridColumnsGroup(group);
    if (aParent != null) {
      group.setParent(aParent);
      aParent.addChild(group);
    }
    if (dCol.hasChildren()) {
      Map<TableColumn,GridColumnsGroup> childGroups=fillColumnsGroup(group,dCol.getChildren(),linkSource);
      groups.putAll(childGroups);
    }
 else {
      if (dCol instanceof FixedDbGridColumn) {
        TableColumn tCol=new RowHeaderTableColumn(dCol.getWidth());
        tCol.setCellRenderer(new RowHeaderCellRenderer(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setCellEditor(new RowHeaderCellEditor(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setMinWidth(dCol.getWidth());
        tCol.setPreferredWidth(dCol.getWidth());
        tCol.setMaxWidth(dCol.getWidth());
        tCol.setHeaderValue(""String_Node_Str"");
        group.setTableColumn(tCol);
        group.setMoveable(false);
        group.setResizeable(false);
        group.setSortable(false);
        groups.put(tCol,group);
        columnModel.addColumn(tCol);
      }
 else {
        if (dCol.isPlain()) {
          Rowset rs=DbControlsUtils.resolveRowset(model,dCol.getDatamodelElement());
          int fidx=DbControlsUtils.resolveFieldIndex(model,dCol.getDatamodelElement());
          if (fidx < 1) {
            if (dCol.getDatamodelElement() != null) {
              Logger.getLogger(DbGrid.class.getName()).log(Level.SEVERE,""String_Node_Str"" + dCol.getName() + ""String_Node_Str"");
            }
          }
          FieldModelColumn mCol=new FieldModelColumn(rs,fidx,getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()),group.isReadonly(),new HasStyle(){
            @Override public CascadedStyle getStyle(){
              return style;
            }
          }
,null,null);
          rowsModel.addColumn(mCol);
          TableColumn tCol=new TableColumn(rowsModel.getColumnCount() - 1);
          tCol.setMinWidth(group.getMinWidth());
          tCol.setMaxWidth(group.getMaxWidth());
          tCol.setPreferredWidth(dCol.getWidth());
          tCol.setWidth(dCol.getWidth());
          if (dCol.getControlInfo() != null) {
            TableCellRenderer cellRenderer=dCol.createCellRenderer();
            tCol.setCellRenderer(cellRenderer);
            if (cellRenderer instanceof ScalarDbControl) {
              ((ScalarDbControl)cellRenderer).setModel(model);
              mCol.setView((ScalarDbControl)cellRenderer);
            }
            TableCellEditor cellEditor=dCol.createCellEditor();
            tCol.setCellEditor(cellEditor);
            if (cellEditor instanceof ScalarDbControl) {
              Field field=DbControlsUtils.resolveField(model,dCol.getDatamodelElement());
              ((ScalarDbControl)cellEditor).setModel(model);
              ((ScalarDbControl)cellEditor).extraCellControls(getHandler(dCol != null ? dCol.getSelectFunction() : null),field != null ? field.isNullable() : false);
              mCol.setEditor((ScalarDbControl)cellEditor);
            }
          }
          String title=group.getTitle();
          if (title == null || title.isEmpty()) {
            title=group.getName();
          }
          tCol.setHeaderValue(title);
          tCol.setIdentifier(mCol);
          group.setTableColumn(tCol);
          groups.put(tCol,group);
          columnModel.addColumn(tCol);
          scriptableColumns.add(new ScriptableColumn(dCol,mCol,tCol,columnModel.getColumnCount() - 1,columnModel,rowsModel,groups));
        }
 else {
          Rowset colsRs=DbControlsUtils.resolveRowset(model,dCol.getColumnsDatasource());
          int colTitleColIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getColumnsDisplayField());
          Rowset cellsRs=DbControlsUtils.resolveRowset(model,dCol.getCellsDatasource());
          int cellsRowKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getRowsKeyField());
          int cellsColumKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getColumnsKeyField());
          Rowset cellsValuesRs=DbControlsUtils.resolveRowset(model,dCol.getCellDesignInfo().getCellValueField());
          int cellsValuesFieldIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getCellValueField());
          if (colsRs != null && cellsRs != null && cellsValuesRs != null && colTitleColIdx != 0 && cellsRowKeyIdx != 0 && cellsColumKeyIdx != 0 && cellsValuesFieldIdx != 0) {
            Locator colsLoc=createPksLocator(colsRs);
            Locator cellsLoc=cellsRs.createLocator();
            cellsLoc.beginConstrainting();
            try {
              cellsLoc.addConstraint(cellsRowKeyIdx);
              cellsLoc.addConstraint(cellsColumKeyIdx);
            }
  finally {
              cellsLoc.endConstrainting();
            }
            AnchorTableColumn anchorCol=new AnchorTableColumn(0);
            String title=group.getTitle();
            if (title == null || title.isEmpty()) {
              title=group.getName();
            }
            anchorCol.setHeaderValue(title);
            anchorCol.setMinWidth(0);
            anchorCol.setPreferredWidth(0);
            anchorCol.setMaxWidth(0);
            anchorCol.setWidth(0);
            ColumnsSource cs=new ColumnsSource(group,anchorCol,colsLoc,colTitleColIdx,cellsLoc,cellsValuesRs,cellsValuesFieldIdx,new VeerColumnsHandler(model,dCol),getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()));
            anchorCol.setColumnsSource(cs);
            columnModel.addColumn(anchorCol);
          }
        }
      }
    }
  }
  return groups;
}","/** 
 * @param aParent Columns group, with will be parentfor new groups.
 * @param aContents A list of used as a source for columns groups.
 * @param linkSource Wether to link new column groups with sourceDbGridColumn-s. This also means, that LinkedGridColumnsGroup will be created.
 * @return
 * @throws Exception
 */
private Map<TableColumn,GridColumnsGroup> fillColumnsGroup(GridColumnsGroup aParent,List<DbGridColumn> aContents,boolean linkSource) throws Exception {
  Map<TableColumn,GridColumnsGroup> groups=new HashMap<>();
  for (  DbGridColumn dCol : aContents) {
    GridColumnsGroup group;
    if (linkSource) {
      group=new LinkedGridColumnsGroup(dCol);
    }
 else {
      group=new GridColumnsGroup();
    }
    dCol.initializeGridColumnsGroup(group);
    if (aParent != null) {
      group.setParent(aParent);
      aParent.addChild(group);
    }
    if (dCol.hasChildren()) {
      Map<TableColumn,GridColumnsGroup> childGroups=fillColumnsGroup(group,dCol.getChildren(),linkSource);
      groups.putAll(childGroups);
    }
 else {
      if (dCol instanceof FixedDbGridColumn) {
        TableColumn tCol=new RowHeaderTableColumn(dCol.getWidth());
        tCol.setCellRenderer(new RowHeaderCellRenderer(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setCellEditor(new RowHeaderCellEditor(((FixedDbGridColumn)dCol).getHeaderType()));
        tCol.setMinWidth(dCol.getWidth());
        tCol.setPreferredWidth(dCol.getWidth());
        tCol.setMaxWidth(dCol.getWidth());
        tCol.setHeaderValue(""String_Node_Str"");
        group.setTableColumn(tCol);
        group.setMoveable(false);
        group.setResizeable(false);
        group.setSortable(false);
        groups.put(tCol,group);
        columnModel.addColumn(tCol);
      }
 else {
        if (dCol.isPlain()) {
          Rowset rs=DbControlsUtils.resolveRowset(model,dCol.getDatamodelElement());
          int fidx=DbControlsUtils.resolveFieldIndex(model,dCol.getDatamodelElement());
          if (fidx < 1) {
            if (dCol.getDatamodelElement() != null) {
              Logger.getLogger(DbGrid.class.getName()).log(Level.SEVERE,""String_Node_Str"" + dCol.getName() + ""String_Node_Str"");
            }
          }
          FieldModelColumn mCol=new FieldModelColumn(rs,fidx,getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()),group.isReadonly(),new HasStyle(){
            @Override public CascadedStyle getStyle(){
              return style;
            }
          }
,null,null);
          rowsModel.addColumn(mCol);
          TableColumn tCol=new TableColumn(rowsModel.getColumnCount() - 1);
          tCol.setMinWidth(group.getMinWidth());
          tCol.setMaxWidth(group.getMaxWidth());
          tCol.setPreferredWidth(dCol.getWidth());
          tCol.setWidth(dCol.getWidth());
          tCol.setResizable(!dCol.isFixed());
          if (dCol.getControlInfo() != null) {
            TableCellRenderer cellRenderer=dCol.createCellRenderer();
            tCol.setCellRenderer(cellRenderer);
            if (cellRenderer instanceof ScalarDbControl) {
              ((ScalarDbControl)cellRenderer).setModel(model);
              mCol.setView((ScalarDbControl)cellRenderer);
            }
            TableCellEditor cellEditor=dCol.createCellEditor();
            tCol.setCellEditor(cellEditor);
            if (cellEditor instanceof ScalarDbControl) {
              Field field=DbControlsUtils.resolveField(model,dCol.getDatamodelElement());
              ((ScalarDbControl)cellEditor).setModel(model);
              ((ScalarDbControl)cellEditor).extraCellControls(getHandler(dCol != null ? dCol.getSelectFunction() : null),field != null ? field.isNullable() : false);
              mCol.setEditor((ScalarDbControl)cellEditor);
            }
          }
          String title=group.getTitle();
          if (title == null || title.isEmpty()) {
            title=group.getName();
          }
          tCol.setHeaderValue(title);
          tCol.setIdentifier(mCol);
          group.setTableColumn(tCol);
          groups.put(tCol,group);
          columnModel.addColumn(tCol);
          scriptableColumns.add(new ScriptableColumn(dCol,mCol,tCol,columnModel.getColumnCount() - 1,columnModel,rowsModel,groups));
        }
 else {
          Rowset colsRs=DbControlsUtils.resolveRowset(model,dCol.getColumnsDatasource());
          int colTitleColIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getColumnsDisplayField());
          Rowset cellsRs=DbControlsUtils.resolveRowset(model,dCol.getCellsDatasource());
          int cellsRowKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getRowsKeyField());
          int cellsColumKeyIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getColumnsKeyField());
          Rowset cellsValuesRs=DbControlsUtils.resolveRowset(model,dCol.getCellDesignInfo().getCellValueField());
          int cellsValuesFieldIdx=DbControlsUtils.resolveFieldIndex(model,dCol.getCellDesignInfo().getCellValueField());
          if (colsRs != null && cellsRs != null && cellsValuesRs != null && colTitleColIdx != 0 && cellsRowKeyIdx != 0 && cellsColumKeyIdx != 0 && cellsValuesFieldIdx != 0) {
            Locator colsLoc=createPksLocator(colsRs);
            Locator cellsLoc=cellsRs.createLocator();
            cellsLoc.beginConstrainting();
            try {
              cellsLoc.addConstraint(cellsRowKeyIdx);
              cellsLoc.addConstraint(cellsColumKeyIdx);
            }
  finally {
              cellsLoc.endConstrainting();
            }
            AnchorTableColumn anchorCol=new AnchorTableColumn(0);
            String title=group.getTitle();
            if (title == null || title.isEmpty()) {
              title=group.getName();
            }
            anchorCol.setHeaderValue(title);
            anchorCol.setMinWidth(0);
            anchorCol.setPreferredWidth(0);
            anchorCol.setMaxWidth(0);
            anchorCol.setWidth(0);
            ColumnsSource cs=new ColumnsSource(group,anchorCol,colsLoc,colTitleColIdx,cellsLoc,cellsValuesRs,cellsValuesFieldIdx,new VeerColumnsHandler(model,dCol),getHandler(dCol.getCellFunction()),getHandler(dCol.getSelectFunction()));
            anchorCol.setColumnsSource(cs);
            columnModel.addColumn(anchorCol);
          }
        }
      }
    }
  }
  return groups;
}",0.9963538363982244
145584,"public boolean lightIsEqual(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final DbGridColumn other=(DbGridColumn)obj;
  if (this.datamodelElement != other.datamodelElement && (this.datamodelElement == null || !this.datamodelElement.equals(other.datamodelElement))) {
    return false;
  }
  if (this.controlInfo != other.controlInfo && (this.controlInfo == null || !this.controlInfo.isEqual(other.controlInfo))) {
    return false;
  }
  if (this.width != other.width) {
    return false;
  }
  if (this.readonly != other.readonly) {
    return false;
  }
  if (this.enabled != other.enabled) {
    return false;
  }
  if (this.visible != other.visible) {
    return false;
  }
  if (this.plain != other.plain) {
    return false;
  }
  if (this.substitute != other.substitute) {
    return false;
  }
  if (this.selectOnly != other.selectOnly) {
    return false;
  }
  if ((this.title == null) ? (other.title != null) : !this.title.equals(other.title)) {
    return false;
  }
  if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
    return false;
  }
  if ((this.selectFunction == null) ? (other.selectFunction != null) : !this.selectFunction.equals(other.selectFunction)) {
    return false;
  }
  if ((this.cellFunction == null) ? (other.cellFunction != null) : !this.cellFunction.equals(other.cellFunction)) {
    return false;
  }
  if (this.cellDesignInfo != other.cellDesignInfo && (this.cellDesignInfo == null || !this.cellDesignInfo.isEqual(other.cellDesignInfo))) {
    return false;
  }
  if (this.columnsDisplayField != other.columnsDisplayField && (this.columnsDisplayField == null || !this.columnsDisplayField.equals(other.columnsDisplayField))) {
    return false;
  }
  if (this.columnsDatasource != other.columnsDatasource && (this.columnsDatasource == null || !this.columnsDatasource.equals(other.columnsDatasource))) {
    return false;
  }
  if (this.cellsDatasource != other.cellsDatasource && (this.cellsDatasource == null || !this.cellsDatasource.equals(other.cellsDatasource))) {
    return false;
  }
  if (this.style != other.style && (this.style == null || !this.style.isEqual(other.style))) {
    return false;
  }
  return true;
}","public boolean lightIsEqual(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final DbGridColumn other=(DbGridColumn)obj;
  if (this.datamodelElement != other.datamodelElement && (this.datamodelElement == null || !this.datamodelElement.equals(other.datamodelElement))) {
    return false;
  }
  if (this.controlInfo != other.controlInfo && (this.controlInfo == null || !this.controlInfo.isEqual(other.controlInfo))) {
    return false;
  }
  if (this.width != other.width) {
    return false;
  }
  if (this.readonly != other.readonly) {
    return false;
  }
  if (this.enabled != other.enabled) {
    return false;
  }
  if (this.visible != other.visible) {
    return false;
  }
  if (this.plain != other.plain) {
    return false;
  }
  if (this.substitute != other.substitute) {
    return false;
  }
  if (this.selectOnly != other.selectOnly) {
    return false;
  }
  if (this.fixed != other.fixed) {
    return false;
  }
  if ((this.title == null) ? (other.title != null) : !this.title.equals(other.title)) {
    return false;
  }
  if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
    return false;
  }
  if ((this.selectFunction == null) ? (other.selectFunction != null) : !this.selectFunction.equals(other.selectFunction)) {
    return false;
  }
  if ((this.cellFunction == null) ? (other.cellFunction != null) : !this.cellFunction.equals(other.cellFunction)) {
    return false;
  }
  if (this.cellDesignInfo != other.cellDesignInfo && (this.cellDesignInfo == null || !this.cellDesignInfo.isEqual(other.cellDesignInfo))) {
    return false;
  }
  if (this.columnsDisplayField != other.columnsDisplayField && (this.columnsDisplayField == null || !this.columnsDisplayField.equals(other.columnsDisplayField))) {
    return false;
  }
  if (this.columnsDatasource != other.columnsDatasource && (this.columnsDatasource == null || !this.columnsDatasource.equals(other.columnsDatasource))) {
    return false;
  }
  if (this.cellsDatasource != other.cellsDatasource && (this.cellsDatasource == null || !this.cellsDatasource.equals(other.cellsDatasource))) {
    return false;
  }
  if (this.style != other.style && (this.style == null || !this.style.isEqual(other.style))) {
    return false;
  }
  return true;
}",0.9875681570338058
145585,"public void lightAssign(DbGridColumn aSource){
  if (aSource != null) {
    if (aSource.getDatamodelElement() != null) {
      setDatamodelElement(aSource.getDatamodelElement().copy());
    }
 else {
      setDatamodelElement(null);
    }
    if (aSource.getControlInfo() != null) {
      setControlInfo((DbControlDesignInfo)aSource.getControlInfo().copy());
    }
 else {
      setControlInfo(null);
    }
    if (aSource.getCellDesignInfo() != null) {
      setCellDesignInfo((DbGridCellDesignInfo)aSource.getCellDesignInfo().copy());
    }
 else {
      setCellDesignInfo(null);
    }
    setColumnsDatasource(aSource.getColumnsDatasource() != null ? aSource.getColumnsDatasource().copy() : null);
    setColumnsDisplayField(aSource.getColumnsDisplayField() != null ? aSource.getColumnsDisplayField().copy() : null);
    setCellsDatasource(aSource.getCellsDatasource() != null ? aSource.getCellsDatasource().copy() : null);
    setEnabled(aSource.isEnabled());
    setWidth(aSource.getWidth());
    setReadonly(aSource.isReadonly());
    setVisible(aSource.isVisible());
    setPlain(aSource.isPlain());
    setSubstitute(aSource.isSubstitute());
    setSelectOnly(aSource.isSelectOnly());
    if (aSource.getTitle() != null) {
      setTitle(new String(aSource.getTitle().toCharArray()));
    }
 else {
      setTitle(null);
    }
    if (aSource.getName() != null) {
      setName(new String(aSource.getName().toCharArray()));
    }
 else {
      setName(null);
    }
    if (aSource.getSelectFunction() != null) {
      setSelectFunction(new String(aSource.getSelectFunction().toCharArray()));
    }
 else {
      setSelectFunction(null);
    }
    if (aSource.getCellFunction() != null) {
      setCellFunction(new String(aSource.getCellFunction().toCharArray()));
    }
 else {
      setCellFunction(null);
    }
    if (aSource.getHeaderStyle() != null) {
      setHeaderStyle(aSource.getHeaderStyle().copy());
    }
 else {
      setHeaderStyle(null);
    }
  }
 else {
    setDatamodelElement(null);
    setControlInfo(null);
    setWidth(50);
    setReadonly(false);
    setEnabled(true);
    setVisible(true);
    setPlain(true);
    setSubstitute(false);
    setTitle(null);
    setName(null);
    setSelectFunction(null);
    setSelectOnly(false);
    setCellFunction(null);
    setHeaderStyle(null);
    setCellDesignInfo(null);
    setColumnsDatasource(null);
    setColumnsDisplayField(null);
    setCellsDatasource(null);
  }
}","public void lightAssign(DbGridColumn aSource){
  if (aSource != null) {
    if (aSource.getDatamodelElement() != null) {
      setDatamodelElement(aSource.getDatamodelElement().copy());
    }
 else {
      setDatamodelElement(null);
    }
    if (aSource.getControlInfo() != null) {
      setControlInfo((DbControlDesignInfo)aSource.getControlInfo().copy());
    }
 else {
      setControlInfo(null);
    }
    if (aSource.getCellDesignInfo() != null) {
      setCellDesignInfo((DbGridCellDesignInfo)aSource.getCellDesignInfo().copy());
    }
 else {
      setCellDesignInfo(null);
    }
    setColumnsDatasource(aSource.getColumnsDatasource() != null ? aSource.getColumnsDatasource().copy() : null);
    setColumnsDisplayField(aSource.getColumnsDisplayField() != null ? aSource.getColumnsDisplayField().copy() : null);
    setCellsDatasource(aSource.getCellsDatasource() != null ? aSource.getCellsDatasource().copy() : null);
    setEnabled(aSource.isEnabled());
    setWidth(aSource.getWidth());
    setReadonly(aSource.isReadonly());
    setVisible(aSource.isVisible());
    setPlain(aSource.isPlain());
    setSubstitute(aSource.isSubstitute());
    setSelectOnly(aSource.isSelectOnly());
    setFixed(aSource.isFixed());
    if (aSource.getTitle() != null) {
      setTitle(new String(aSource.getTitle().toCharArray()));
    }
 else {
      setTitle(null);
    }
    if (aSource.getName() != null) {
      setName(new String(aSource.getName().toCharArray()));
    }
 else {
      setName(null);
    }
    if (aSource.getSelectFunction() != null) {
      setSelectFunction(new String(aSource.getSelectFunction().toCharArray()));
    }
 else {
      setSelectFunction(null);
    }
    if (aSource.getCellFunction() != null) {
      setCellFunction(new String(aSource.getCellFunction().toCharArray()));
    }
 else {
      setCellFunction(null);
    }
    if (aSource.getHeaderStyle() != null) {
      setHeaderStyle(aSource.getHeaderStyle().copy());
    }
 else {
      setHeaderStyle(null);
    }
  }
 else {
    setDatamodelElement(null);
    setControlInfo(null);
    setWidth(50);
    setReadonly(false);
    setEnabled(true);
    setVisible(true);
    setPlain(true);
    setSubstitute(false);
    setTitle(null);
    setName(null);
    setSelectFunction(null);
    setSelectOnly(false);
    setCellFunction(null);
    setHeaderStyle(null);
    setCellDesignInfo(null);
    setColumnsDatasource(null);
    setColumnsDisplayField(null);
    setCellsDatasource(null);
  }
}",0.9932994923857869
145586,"@Override public void doLayout(){
  TableColumn resizingColumn=getResizingColumn();
  boolean resizingColumnMet=false;
  int leftWidth=0;
  List<TableColumn> rightColumns=new ArrayList<>();
  for (int i=0; i < getColumnModel().getColumnCount(); i++) {
    if (resizingColumn == null || resizingColumnMet) {
      rightColumns.add(getColumnModel().getColumn(i));
    }
 else {
      leftWidth+=getColumnModel().getColumn(i).getWidth();
    }
    if (!resizingColumnMet && resizingColumn == getColumnModel().getColumn(i)) {
      resizingColumnMet=true;
    }
  }
  int rightWidthRemoved=0;
  int rightWidth=0;
  for (int i=rightColumns.size() - 1; i >= 0; i--) {
    TableColumn tCol=rightColumns.get(i);
    rightWidth+=tCol.getWidth();
    if (tCol instanceof RowHeaderTableColumn || tCol instanceof AnchorTableColumn) {
      rightColumns.remove(i);
      rightWidthRemoved+=tCol.getWidth();
    }
  }
  int borderDelta=0;
  int delta=(getWidth() - borderDelta) - (leftWidth + rightWidth);
  if (delta != 0) {
    float[] coefs=new float[rightColumns.size()];
    for (int i=0; i < rightColumns.size(); i++) {
      coefs[i]=(float)rightColumns.get(i).getWidth() / (float)(rightWidth - rightWidthRemoved);
    }
    for (int i=0; i < rightColumns.size(); i++) {
      TableColumn tCol=rightColumns.get(i);
      int newWidth=tCol.getWidth() + Math.round(delta * coefs[i]);
      silentSetWidth2Column(tCol,newWidth);
    }
    if ((getWidth() - borderDelta) != getColumnModel().getTotalColumnWidth() && getColumnModel().getColumnCount() > 0) {
      TableColumn goatCol=resizingColumn;
      if (goatCol == null) {
        goatCol=getColumnModel().getColumn(getColumnModel().getColumnCount() - 1);
      }
      int goatColNewWidth=goatCol.getWidth() + ((getWidth() - borderDelta) - getColumnModel().getTotalColumnWidth());
      silentSetWidth2Column(goatCol,goatColNewWidth);
    }
  }
}","@Override public void doLayout(){
  TableColumn resizingColumn=getResizingColumn();
  boolean resizingColumnMet=false;
  int leftWidth=0;
  List<TableColumn> rightColumns=new ArrayList<>();
  for (int i=0; i < getColumnModel().getColumnCount(); i++) {
    if (resizingColumn == null || resizingColumnMet) {
      rightColumns.add(getColumnModel().getColumn(i));
    }
 else {
      leftWidth+=getColumnModel().getColumn(i).getWidth();
    }
    if (!resizingColumnMet && resizingColumn == getColumnModel().getColumn(i)) {
      resizingColumnMet=true;
    }
  }
  int rightWidthRemoved=0;
  int rightWidth=0;
  for (int i=rightColumns.size() - 1; i >= 0; i--) {
    TableColumn tCol=rightColumns.get(i);
    rightWidth+=tCol.getWidth();
    if (tCol instanceof RowHeaderTableColumn || tCol instanceof AnchorTableColumn || !tCol.getResizable()) {
      rightColumns.remove(i);
      rightWidthRemoved+=tCol.getWidth();
    }
  }
  int borderDelta=0;
  int delta=(getWidth() - borderDelta) - (leftWidth + rightWidth);
  if (delta != 0) {
    for (int i=0; i < rightColumns.size(); i++) {
      TableColumn tCol=rightColumns.get(i);
      float coef=(float)tCol.getWidth() / (float)(rightWidth - rightWidthRemoved);
      int newWidth=tCol.getWidth() + Math.round(delta * coef);
      silentSetWidth2Column(tCol,newWidth);
    }
    if ((getWidth() - borderDelta) != getColumnModel().getTotalColumnWidth() && getColumnModel().getColumnCount() > 0) {
      TableColumn goatCol=resizingColumn;
      if (goatCol == null) {
        goatCol=getColumnModel().getColumn(getColumnModel().getColumnCount() - 1);
      }
      int goatColNewWidth=goatCol.getWidth() + ((getWidth() - borderDelta) - getColumnModel().getTotalColumnWidth());
      silentSetWidth2Column(goatCol,goatColNewWidth);
    }
  }
}",0.9095845777898452
145587,"public void addCellEditorListener(CellEditorListener l){
  listenenrs.add(l);
}","@Override public void addCellEditorListener(CellEditorListener l){
  listenenrs.add(l);
}",0.9404761904761904
145588,"public void actionPerformed(ActionEvent e){
  TableColumnModel tcm=editingTable.getColumnModel();
  if (tcm instanceof ConstrainedColumnModel && tcm.getSelectionModel() instanceof ConstrainedListSelectionModel) {
    int colCount=((ConstrainedColumnModel)tcm).getDelegate().getColumnCount();
    ((ConstrainedListSelectionModel)tcm.getSelectionModel()).getDelegate().setSelectionInterval(0,colCount - 1);
  }
  if (check instanceof JRadioButton) {
    if (check.isSelected()) {
      editingTable.setRowSelectionInterval(editingRow,editingRow);
    }
 else {
      editingTable.removeRowSelectionInterval(editingRow,editingRow);
    }
  }
 else {
    if (check.isSelected()) {
      editingTable.addRowSelectionInterval(editingRow,editingRow);
    }
 else {
      editingTable.removeRowSelectionInterval(editingRow,editingRow);
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  invokeRowHeaderAction();
}",0.1302931596091205
145589,"public Object getCellEditorValue(){
  return null;
}","@Override public Object getCellEditorValue(){
  return null;
}",0.912280701754386
145590,"public boolean isCellEditable(EventObject anEvent){
  if (anEvent instanceof MouseEvent) {
    return true;
  }
  return false;
}","@Override public boolean isCellEditable(EventObject anEvent){
  if (anEvent instanceof MouseEvent) {
    return true;
  }
  return false;
}",0.9626865671641792
145591,"public void cancelCellEditing(){
  ChangeEvent event=new ChangeEvent(this);
  for (  CellEditorListener l : listenenrs.toArray(new CellEditorListener[0])) {
    l.editingCanceled(event);
  }
}","@Override public void cancelCellEditing(){
  ChangeEvent event=new ChangeEvent(this);
  for (  CellEditorListener l : listenenrs.toArray(new CellEditorListener[0])) {
    l.editingCanceled(event);
  }
}",0.9746192893401016
145592,"public boolean shouldSelectCell(EventObject anEvent){
  return false;
}","@Override public boolean shouldSelectCell(EventObject anEvent){
  invokeRowHeaderAction();
  return false;
}",0.7932960893854749
145593,"public void removeCellEditorListener(CellEditorListener l){
  listenenrs.remove(l);
}","@Override public void removeCellEditorListener(CellEditorListener l){
  listenenrs.remove(l);
}",0.9444444444444444
145594,"public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,int rowIndex,int column){
  try {
    editingTable=table;
    editingRow=rowIndex;
    if (check != null) {
      check.setSelected(table.isRowSelected(editingRow));
    }
    int modelRow=table.convertRowIndexToModel(rowIndex);
    DbGrid grid=DbControlsUtils.getFirstDbGrid(table);
    Row row=grid.index2Row(modelRow);
    if (row != null) {
      if (grid.isCurrentRow(row)) {
        indicator.setIcon(RowHeaderCellRenderer.currentIcon);
      }
 else {
        indicator.setIcon(null);
      }
      if (row.isInserted()) {
        rowDescriptor.setIcon(RowHeaderCellRenderer.insertingIcon);
      }
 else       if (row.isUpdated()) {
        rowDescriptor.setIcon(RowHeaderCellRenderer.editingIcon);
      }
 else {
        rowDescriptor.setIcon(null);
      }
    }
 else {
      indicator.setIcon(null);
      rowDescriptor.setIcon(null);
    }
    return this;
  }
 catch (  RowsetException ex) {
    Logger.getLogger(RowHeaderCellEditor.class.getName()).log(Level.SEVERE,null,ex);
    return this;
  }
}","@Override public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,int rowIndex,int column){
  try {
    editingTable=table;
    editingRow=rowIndex;
    if (check != null) {
      check.setSelected(table.isRowSelected(editingRow));
    }
    int modelRow=table.convertRowIndexToModel(rowIndex);
    DbGrid grid=DbControlsUtils.getFirstDbGrid(table);
    Row row=grid.index2Row(modelRow);
    if (row != null) {
      if (grid.isCurrentRow(row)) {
        indicator.setIcon(RowHeaderCellRenderer.currentIcon);
      }
 else {
        indicator.setIcon(null);
      }
      if (row.isInserted()) {
        rowDescriptor.setIcon(RowHeaderCellRenderer.insertingIcon);
      }
 else       if (row.isUpdated()) {
        rowDescriptor.setIcon(RowHeaderCellRenderer.editingIcon);
      }
 else {
        rowDescriptor.setIcon(null);
      }
    }
 else {
      indicator.setIcon(null);
      rowDescriptor.setIcon(null);
    }
    return this;
  }
 catch (  RowsetException ex) {
    Logger.getLogger(RowHeaderCellEditor.class.getName()).log(Level.SEVERE,null,ex);
    return this;
  }
}",0.9954914337240758
145595,"public boolean stopCellEditing(){
  ChangeEvent event=new ChangeEvent(this);
  for (  CellEditorListener l : listenenrs.toArray(new CellEditorListener[0])) {
    l.editingStopped(event);
  }
  return true;
}","@Override public boolean stopCellEditing(){
  ChangeEvent event=new ChangeEvent(this);
  for (  CellEditorListener l : listenenrs.toArray(new CellEditorListener[0])) {
    l.editingStopped(event);
  }
  return true;
}",0.9764150943396226
145596,"@Override public FlowProvider createFlowProvider(String string,String string1,String string2,String string3,Set<String> set,Set<String> set1) throws Exception {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public FlowProvider createFlowProvider(String string,String string1,String string2,String string3,Fields fields,Set<String> set,Set<String> set1) throws Exception {
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9696969696969696
145597,"@ScriptFunction(jsDocText=""String_Node_Str"") public Color getForeground(){
  return delegate.getForeground();
}","@ScriptFunction(jsDocText=""String_Node_Str"") public Color getForeground(){
  return new ScriptColor(delegate.getForeground());
}",0.9288702928870292
145598,"@ScriptFunction(jsDocText=""String_Node_Str"") public Color getBackground(){
  return delegate.getBackground();
}","@ScriptFunction(jsDocText=""String_Node_Str"") public ScriptColor getBackground(){
  return new ScriptColor(delegate.getBackground());
}",0.9061224489795918
145599,"public ScriptColor(int r,int g,int b,int a){
  super(r,g,b,a);
}","public ScriptColor(String aEncoded){
  this(Color.decode(aEncoded));
}",0.5522388059701493
145600,"@Override public void execute(){
  if (btn.getParent() instanceof ResizeContainer) {
    ResizeContainer c=(ResizeContainer)btn.getParent();
    Size s=XElement.as(c.getElement().getParentElement()).getSize(true);
    c.setPixelSize(s.getWidth() + 1,s.getHeight());
    c.setPixelSize(s.getWidth() - 1,s.getHeight());
  }
 else   if (btn.getParent() instanceof HasLayout) {
    ((HasLayout)btn.getParent()).forceLayout();
  }
}","@Override public void execute(){
  if (btn.isAttached()) {
    if (btn.getParent() instanceof ResizeContainer) {
      ResizeContainer c=(ResizeContainer)btn.getParent();
      Size s=XElement.as(c.getElement()).getSize(false);
      c.setPixelSize(s.getWidth() - 1,s.getHeight());
      c.setPixelSize(s.getWidth() + 1,s.getHeight());
    }
 else     if (btn.getParent() instanceof RequiresResize) {
      ((RequiresResize)btn.getParent()).onResize();
    }
  }
}",0.7295173961840629
145601,"private void setIconAndAlign(final CellButtonBase<?> btn,Element aTag,final PublishedComponent aPublished) throws Exception {
  btn.setIconAlign(IconAlign.LEFT);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    int horizontalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",11);
switch (horizontalTextPosition) {
case 4:
      btn.setIconAlign(IconAlign.LEFT);
    break;
case 2:
  btn.setIconAlign(IconAlign.RIGHT);
break;
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 10:
btn.setIconAlign(IconAlign.RIGHT);
break;
case 11:
btn.setIconAlign(IconAlign.LEFT);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
if (aTag.hasAttribute(""String_Node_Str"")) {
int verticalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",0);
switch (verticalTextPosition) {
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 1:
btn.setIconAlign(IconAlign.BOTTOM);
break;
case 3:
btn.setIconAlign(IconAlign.TOP);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
btn.setScale(ButtonScale.SMALL);
if (aTag.hasAttribute(""String_Node_Str"")) {
btn.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
@Override public void run(ImageResource aResource){
btn.setIcon(aResource);
Scheduler.get().scheduleDeferred(new ScheduledCommand(){
@Override public void execute(){
if (btn.getParent() instanceof ResizeContainer) {
ResizeContainer c=(ResizeContainer)btn.getParent();
Size s=XElement.as(c.getElement().getParentElement()).getSize(true);
c.setPixelSize(s.getWidth() + 1,s.getHeight());
c.setPixelSize(s.getWidth() - 1,s.getHeight());
}
 else if (btn.getParent() instanceof HasLayout) {
((HasLayout)btn.getParent()).forceLayout();
}
}
}
);
}
}
));
}
}","private void setIconAndAlign(final CellButtonBase<?> btn,Element aTag,final PublishedComponent aPublished) throws Exception {
  btn.setIconAlign(IconAlign.LEFT);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    int horizontalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",11);
switch (horizontalTextPosition) {
case 4:
      btn.setIconAlign(IconAlign.LEFT);
    break;
case 2:
  btn.setIconAlign(IconAlign.RIGHT);
break;
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 10:
btn.setIconAlign(IconAlign.RIGHT);
break;
case 11:
btn.setIconAlign(IconAlign.LEFT);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
if (aTag.hasAttribute(""String_Node_Str"")) {
int verticalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",0);
switch (verticalTextPosition) {
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 1:
btn.setIconAlign(IconAlign.BOTTOM);
break;
case 3:
btn.setIconAlign(IconAlign.TOP);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
btn.setScale(ButtonScale.SMALL);
if (aTag.hasAttribute(""String_Node_Str"")) {
btn.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
@Override public void run(ImageResource aResource){
btn.setIcon(aResource);
Scheduler.get().scheduleDeferred(new ScheduledCommand(){
@Override public void execute(){
if (btn.isAttached()) {
if (btn.getParent() instanceof ResizeContainer) {
ResizeContainer c=(ResizeContainer)btn.getParent();
Size s=XElement.as(c.getElement()).getSize(false);
c.setPixelSize(s.getWidth() - 1,s.getHeight());
c.setPixelSize(s.getWidth() + 1,s.getHeight());
}
 else if (btn.getParent() instanceof RequiresResize) {
((RequiresResize)btn.getParent()).onResize();
}
}
}
}
);
}
}
));
}
}",0.9498725573491928
145602,"private Component createLabel(Element aTag) throws Exception {
  final PlatypusLabel component=new PlatypusLabel();
  processEvents(component,aTag);
  Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setIconTextGap(Utils.getIntegerAttribute(aTag,""String_Node_Str"",4));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    component.setImage(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        component.setImage(aResource);
        if (component.getParent() instanceof ResizeContainer) {
          ResizeContainer c=(ResizeContainer)component.getParent();
          Size s=XElement.as(c.getElement().getParentElement()).getSize(true);
          c.setPixelSize(s.getWidth() + 1,s.getHeight());
          c.setPixelSize(s.getWidth() - 1,s.getHeight());
        }
 else         if (component.getParent() instanceof HasLayout) {
          ((HasLayout)component.getParent()).forceLayout();
        }
      }
    }
));
  }
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,false,publishedComp);
  return component;
}","private Component createLabel(Element aTag) throws Exception {
  final PlatypusLabel component=new PlatypusLabel();
  processEvents(component,aTag);
  Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setIconTextGap(Utils.getIntegerAttribute(aTag,""String_Node_Str"",4));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    component.setImage(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        component.setImage(aResource);
        if (component.isAttached()) {
          if (component.getParent() instanceof ResizeContainer) {
            ResizeContainer c=(ResizeContainer)component.getParent();
            Size s=XElement.as(c.getElement()).getSize(false);
            c.setPixelSize(s.getWidth() - 1,s.getHeight());
            c.setPixelSize(s.getWidth() + 1,s.getHeight());
          }
 else           if (component.getParent() instanceof RequiresResize) {
            ((RequiresResize)component.getParent()).onResize();
          }
        }
      }
    }
));
  }
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,false,publishedComp);
  return component;
}",0.9434620174346202
145603,"public static GxtEventsExecutor createExecutor(Component aComponent,JavaScriptObject aEventsThis) throws Exception {
  final GxtEventsExecutor executor=new GxtEventsExecutor(aEventsThis);
  aComponent.setData(HANDLER_DATA_NAME,executor);
  if (aComponent instanceof HasSelectHandlers)   ((HasSelectHandlers)aComponent).addSelectHandler(executor);
  if (aComponent instanceof PlatypusCheckBox) {
    final PlatypusCheckBox pcheck=(PlatypusCheckBox)aComponent;
    pcheck.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
      @Override public void onValueChange(      ValueChangeEvent<Boolean> event){
        PlatypusButtonGroup pgroup=pcheck.getButtonGroup();
        if (pgroup == null)         executor.onSelect(new SurrogateSelectEvent(event.getSource()));
      }
    }
);
  }
  aComponent.addDomHandler(executor,MouseOverEvent.getType());
  aComponent.addDomHandler(executor,MouseOutEvent.getType());
  aComponent.addDomHandler(executor,MouseDownEvent.getType());
  aComponent.addDomHandler(executor,MouseUpEvent.getType());
  aComponent.addDomHandler(executor,MouseWheelEvent.getType());
  aComponent.addDomHandler(executor,MouseMoveEvent.getType());
  aComponent.addDomHandler(executor,ClickEvent.getType());
  aComponent.addDomHandler(executor,DoubleClickEvent.getType());
  if (aComponent instanceof HasKeyDownHandlers)   ((HasKeyDownHandlers)aComponent).addKeyDownHandler(executor);
  if (aComponent instanceof HasKeyUpHandlers)   ((HasKeyUpHandlers)aComponent).addKeyUpHandler(executor);
  if (aComponent instanceof HasKeyPressHandlers)   ((HasKeyPressHandlers)aComponent).addKeyPressHandler(executor);
  if (aComponent instanceof HasFocusHandlers)   ((HasFocusHandlers)aComponent).addFocusHandler(executor);
  if (aComponent instanceof HasBlurHandlers)   ((HasBlurHandlers)aComponent).addBlurHandler(executor);
  if (aComponent instanceof HasShowHandlers)   ((HasShowHandlers)aComponent).addShowHandler(executor);
  if (aComponent instanceof HasResizeHandlers)   ((HasResizeHandlers)aComponent).addResizeHandler(executor);
  if (aComponent instanceof HasHideHandlers)   ((HasHideHandlers)aComponent).addHideHandler(executor);
  if (aComponent instanceof HasRemoveHandlers)   ((HasRemoveHandlers)aComponent).addRemoveHandler(executor);
  if (aComponent instanceof HasAddHandlers)   ((HasAddHandlers)aComponent).addAddHandler(executor);
  if (aComponent instanceof HasMoveHandlers)   ((HasMoveHandlers)aComponent).addMoveHandler(executor);
  if (aComponent instanceof HasSelectionHandlers<?>)   ((HasSelectionHandlers<Widget>)aComponent).addSelectionHandler(executor);
  return executor;
}","public static GxtEventsExecutor createExecutor(Component aComponent,JavaScriptObject aEventsThis) throws Exception {
  final GxtEventsExecutor executor=new GxtEventsExecutor(aComponent,aEventsThis);
  aComponent.setData(HANDLER_DATA_NAME,executor);
  if (aComponent instanceof HasSelectHandlers)   ((HasSelectHandlers)aComponent).addSelectHandler(executor);
  if (aComponent instanceof PlatypusCheckBox) {
    final PlatypusCheckBox pcheck=(PlatypusCheckBox)aComponent;
    pcheck.addValueChangeHandler(new ValueChangeHandler<Boolean>(){
      @Override public void onValueChange(      ValueChangeEvent<Boolean> event){
        PlatypusButtonGroup pgroup=pcheck.getButtonGroup();
        if (pgroup == null)         executor.onSelect(new SurrogateSelectEvent(event.getSource()));
      }
    }
);
  }
  aComponent.addDomHandler(executor,MouseOverEvent.getType());
  aComponent.addDomHandler(executor,MouseOutEvent.getType());
  aComponent.addDomHandler(executor,MouseDownEvent.getType());
  aComponent.addDomHandler(executor,MouseUpEvent.getType());
  aComponent.addDomHandler(executor,MouseWheelEvent.getType());
  aComponent.addDomHandler(executor,MouseMoveEvent.getType());
  aComponent.addDomHandler(executor,ClickEvent.getType());
  aComponent.addDomHandler(executor,DoubleClickEvent.getType());
  if (aComponent instanceof HasKeyDownHandlers)   ((HasKeyDownHandlers)aComponent).addKeyDownHandler(executor);
  if (aComponent instanceof HasKeyUpHandlers)   ((HasKeyUpHandlers)aComponent).addKeyUpHandler(executor);
  if (aComponent instanceof HasKeyPressHandlers)   ((HasKeyPressHandlers)aComponent).addKeyPressHandler(executor);
  if (aComponent instanceof HasFocusHandlers)   ((HasFocusHandlers)aComponent).addFocusHandler(executor);
  if (aComponent instanceof HasBlurHandlers)   ((HasBlurHandlers)aComponent).addBlurHandler(executor);
  if (aComponent instanceof HasShowHandlers)   ((HasShowHandlers)aComponent).addShowHandler(executor);
  if (aComponent instanceof HasResizeHandlers)   ((HasResizeHandlers)aComponent).addResizeHandler(executor);
  if (aComponent instanceof HasHideHandlers)   ((HasHideHandlers)aComponent).addHideHandler(executor);
  if (aComponent instanceof HasRemoveHandlers)   ((HasRemoveHandlers)aComponent).addRemoveHandler(executor);
  if (aComponent instanceof HasAddHandlers)   ((HasAddHandlers)aComponent).addAddHandler(executor);
  if (aComponent instanceof HasMoveHandlers)   ((HasMoveHandlers)aComponent).addMoveHandler(executor);
  if (aComponent instanceof HasSelectionHandlers<?>)   ((HasSelectionHandlers<Widget>)aComponent).addSelectionHandler(executor);
  return executor;
}",0.997895542376124
145604,"public GxtEventsExecutor(JavaScriptObject aEventThis){
  super();
  eventThis=aEventThis;
}","public GxtEventsExecutor(Component aComponent,JavaScriptObject aEventThis){
  super();
  component=aComponent;
  eventThis=aEventThis;
}",0.801762114537445
145605,"public void cancelBlur(){
  blurring=null;
}","protected void cancelBlur(){
  blurring=null;
}",0.8791208791208791
145606,"public PlatypusAdapterField(Field<T> aTarget){
  super(new HorizontalLayoutContainer());
  setPixelSize(150,23);
  target=aTarget;
  target.setTabIndex(1);
  complex=(HorizontalLayoutContainer)getWidget();
  complex.add(target,new HorizontalLayoutData(1,1));
  reRegisterFocusManager();
}","public PlatypusAdapterField(Field<T> aTarget){
  super(new HorizontalLayoutContainer());
  setPixelSize(150,23);
  target=aTarget;
  target.setTabIndex(1);
  complex=(HorizontalLayoutContainer)getWidget();
  complex.add(target,new HorizontalLayoutData(1,1));
  reregisterFocusBlur();
}",0.9808027923211168
145607,"@Override public void execute(){
  if (blurring == event)   PlatypusAdapterField.this.fireEvent(event);
}","@Override public void execute(){
  if (event == blurring) {
    PlatypusAdapterField.this.fireEvent(event);
    cancelBlur();
  }
}",0.8220338983050848
145608,"@Override public void onFocus(FocusEvent event){
  cancelBlur();
}","@Override public void onFocus(final FocusEvent event){
  if (blurring == null) {
    PlatypusAdapterField.this.fireEvent(event);
  }
 else   cancelBlur();
}",0.5945945945945946
145609,"@Override public void onBlur(final BlurEvent event){
  blurring=event;
  Scheduler.get().scheduleDeferred(new ScheduledCommand(){
    @Override public void execute(){
      if (blurring == event)       PlatypusAdapterField.this.fireEvent(event);
    }
  }
);
}","@Override public void onBlur(final BlurEvent event){
  blurring=event;
  Scheduler.get().scheduleDeferred(new ScheduledCommand(){
    @Override public void execute(){
      if (event == blurring) {
        PlatypusAdapterField.this.fireEvent(event);
        cancelBlur();
      }
    }
  }
);
}",0.851985559566787
145610,"public void setOnSelect(JavaScriptObject aSelectFunction){
  if (selectFunction != aSelectFunction) {
    selectFunction=aSelectFunction;
    if (selectFunction != null && getPublishedField() != null) {
      selectButton=new TextButton(""String_Node_Str"");
      selectButton.setEnabled(editable);
      selectButton.setTabIndex(2);
      complex.add(selectButton,new HorizontalLayoutData(-1,1));
      selectHandlerRegistration=selectButton.addSelectHandler(new SelectHandler(){
        @Override public void onSelect(        SelectEvent event){
          Runnable onSelect=ControlsUtils.createScriptSelector(getEventsThis(),selectFunction,getPublishedField());
          onSelect.run();
          target.focus();
        }
      }
);
    }
 else {
      if (selectButton != null) {
        selectHandlerRegistration.removeHandler();
        selectHandlerRegistration=null;
        selectButton.removeFromParent();
        selectButton=null;
      }
    }
    reRegisterFocusManager();
  }
}","public void setOnSelect(JavaScriptObject aSelectFunction){
  if (selectFunction != aSelectFunction) {
    selectFunction=aSelectFunction;
    if (selectFunction != null && getPublishedField() != null) {
      selectButton=new TextButton(""String_Node_Str"");
      selectButton.setEnabled(editable);
      selectButton.setTabIndex(2);
      complex.add(selectButton,new HorizontalLayoutData(-1,1));
      selectHandlerRegistration=selectButton.addSelectHandler(new SelectEvent.SelectHandler(){
        @Override public void onSelect(        SelectEvent event){
          Runnable onSelect=ControlsUtils.createScriptSelector(getEventsThis(),selectFunction,getPublishedField());
          onSelect.run();
          target.focus();
        }
      }
);
    }
 else {
      if (selectButton != null) {
        selectHandlerRegistration.removeHandler();
        selectHandlerRegistration=null;
        selectButton.removeFromParent();
        selectButton=null;
      }
    }
    reregisterFocusBlur();
  }
}",0.9884596086302058
145611,"public PlatypusHtmlEditor(){
  super();
}","public PlatypusHtmlEditor(){
  super();
  reregisterFocusBlur();
}",0.7663551401869159
145612,"protected boolean isValidName(String name){
  try {
    entity.getModel().getParameters().invalidateFieldsHash();
    return !name.isEmpty() && entity.getModel().getParameters().get(name) == null && entity.getModel().getEntityByName(name) == null && ScriptUtils.isValidJsIdentifier(name);
  }
 catch (  Exception ex) {
    ErrorManager.getDefault().notify(ex);
  }
  return false;
}","protected boolean isValidName(String name){
  try {
    entity.getModel().getParameters().invalidateFieldsHash();
    return !name.isEmpty() && entity.getModel().getParameters().get(name) == null && (entity.getModel().getEntityByName(name) == null || getName().equalsIgnoreCase(name)) && ScriptUtils.isValidJsIdentifier(name);
  }
 catch (  Exception ex) {
    ErrorManager.getDefault().notify(ex);
  }
  return false;
}",0.9526184538653366
145613,"/** 
 * Reads data from ResultSet object and creates new Rowset based on the data. Warning! The rowset returned doesn't log it's changes.
 * @param aPageSize Page size of reading process. May be less then zero toindicate that whole data should be fetched.
 * @param aResultSet
 * @return New Rowset object created.
 * @throws SQLException
 * @throws InvalidColIndexException
 * @throws RowsetException
 */
public Rowset readRowset(ResultSet aResultSet,int aPageSize) throws SQLException {
  try {
    if (aResultSet != null) {
      ResultSetMetaData lowLevelJdbcFields=aResultSet.getMetaData();
      Fields jdbcFields=new Fields();
      for (int i=1; i <= lowLevelJdbcFields.getColumnCount(); i++) {
        Field field=new Field();
        field.setName(lowLevelJdbcFields.getColumnName(i));
        field.setDescription(lowLevelJdbcFields.getColumnLabel(i));
        field.setNullable(lowLevelJdbcFields.isNullable(i) == ResultSetMetaData.columnNullable);
        DataTypeInfo typeInfo=new DataTypeInfo();
        typeInfo.setSqlType(lowLevelJdbcFields.getColumnType(i));
        typeInfo.setSqlTypeName(lowLevelJdbcFields.getColumnTypeName(i));
        typeInfo.setJavaClassName(lowLevelJdbcFields.getColumnClassName(i));
        field.setTypeInfo(typeInfo);
        field.setSize(lowLevelJdbcFields.getColumnDisplaySize(i));
        field.setPrecision(lowLevelJdbcFields.getPrecision(i));
        field.setScale(lowLevelJdbcFields.getScale(i));
        field.setSigned(lowLevelJdbcFields.isSigned(i));
        field.setTableName(lowLevelJdbcFields.getTableName(i));
        field.setSchemaName(lowLevelJdbcFields.getSchemaName(i));
        jdbcFields.add(field);
      }
      Rowset rowset=new Rowset(expectedFields != null ? expectedFields : jdbcFields);
      List<Row> rows=readRows(rowset.getFields(),jdbcFields,aResultSet,aPageSize,converter);
      rowset.setCurrent(rows);
      rowset.currentToOriginal();
      return rowset;
    }
 else {
      throw new SQLException(ROWSET_MISSING_EXCEPTION_MSG);
    }
  }
 catch (  Exception ex) {
    if (ex instanceof SQLException) {
      throw (SQLException)ex;
    }
 else {
      throw new SQLException(ex);
    }
  }
}","/** 
 * Reads data from ResultSet object and creates new Rowset based on the data. Warning! The rowset returned doesn't log it's changes.
 * @param aPageSize Page size of reading process. May be less then zero toindicate that whole data should be fetched.
 * @param aResultSet
 * @return New Rowset object created.
 * @throws SQLException
 * @throws InvalidColIndexException
 * @throws RowsetException
 */
public Rowset readRowset(ResultSet aResultSet,int aPageSize) throws SQLException {
  try {
    if (aResultSet != null) {
      ResultSetMetaData lowLevelJdbcFields=aResultSet.getMetaData();
      Fields jdbcFields=new Fields();
      for (int i=1; i <= lowLevelJdbcFields.getColumnCount(); i++) {
        Field field=new Field();
        field.setName(lowLevelJdbcFields.getColumnName(i));
        field.setDescription(lowLevelJdbcFields.getColumnLabel(i));
        field.setNullable(lowLevelJdbcFields.isNullable(i) == ResultSetMetaData.columnNullable);
        DataTypeInfo typeInfo=new DataTypeInfo();
        typeInfo.setSqlType(lowLevelJdbcFields.getColumnType(i));
        typeInfo.setSqlTypeName(lowLevelJdbcFields.getColumnTypeName(i));
        typeInfo.setJavaClassName(lowLevelJdbcFields.getColumnClassName(i));
        field.setTypeInfo(typeInfo);
        field.setSize(lowLevelJdbcFields.getColumnDisplaySize(i));
        field.setPrecision(lowLevelJdbcFields.getPrecision(i));
        field.setScale(lowLevelJdbcFields.getScale(i));
        field.setSigned(lowLevelJdbcFields.isSigned(i));
        field.setTableName(lowLevelJdbcFields.getTableName(i));
        field.setSchemaName(lowLevelJdbcFields.getSchemaName(i));
        jdbcFields.add(field);
      }
      Rowset rowset=new Rowset(expectedFields != null && !expectedFields.isEmpty() ? expectedFields : jdbcFields);
      List<Row> rows=readRows(rowset.getFields(),jdbcFields,aResultSet,aPageSize,converter);
      rowset.setCurrent(rows);
      rowset.currentToOriginal();
      return rowset;
    }
 else {
      throw new SQLException(ROWSET_MISSING_EXCEPTION_MSG);
    }
  }
 catch (  Exception ex) {
    if (ex instanceof SQLException) {
      throw (SQLException)ex;
    }
 else {
      throw new SQLException(ex);
    }
  }
}",0.9933925723399408
145614,"public static boolean isValidName(Model model,String name){
  try {
    model.getParameters().invalidateFieldsHash();
    return !name.isEmpty() && model.getParameters().get(name) == null && model.getEntityByName(name) == null && ScriptUtils.isValidJsIdentifier(name);
  }
 catch (  Exception ex) {
    ErrorManager.getDefault().notify(ex);
  }
  return false;
}","public boolean isValidName(Model model,String name){
  try {
    model.getParameters().invalidateFieldsHash();
    return !name.isEmpty() && (model.getParameters().get(name) == null || getName().equalsIgnoreCase(name)) && model.getEntityByName(name) == null && ScriptUtils.isValidJsIdentifier(name);
  }
 catch (  Exception ex) {
    ErrorManager.getDefault().notify(ex);
  }
  return false;
}",0.9403973509933776
145615,"public boolean deleteRow() throws Exception {
  return delete();
}","@ScriptFunction(jsDocText=""String_Node_Str"") public boolean deleteRow() throws Exception {
  return delete();
}",0.7457627118644068
145616,"@ScriptFunction(jsDocText=""String_Node_Str"") public boolean delete() throws Exception {
  Rowset rowset=getRowset();
  int oldCount=rowset.size();
  if (oldCount > 0) {
    rowset.delete();
  }
  return oldCount != rowset.size();
}","public boolean delete() throws Exception {
  Rowset rowset=getRowset();
  int oldCount=rowset.size();
  if (oldCount > 0) {
    rowset.delete();
  }
  return oldCount != rowset.size();
}",0.8920863309352518
145617,"@Override public Dimension getPreferredSize(){
  Dimension size=super.getPreferredSize();
  if (!isPreferredSizeSet()) {
    for (    Component c : getComponents()) {
      Rectangle b=c.getBounds();
      if (b.x + b.width > size.width) {
        size.width=b.x + b.width;
      }
      if (b.y + b.height > size.height) {
        size.height=b.y + b.height;
      }
    }
    size.width+=EntityView.INSET_ZONE;
    size.height+=EntityView.INSET_ZONE;
  }
  return size;
}","@Override public Dimension getPreferredSize(){
  Dimension size=super.getPreferredSize();
  if (!isPreferredSizeSet()) {
    for (    Component c : getComponents()) {
      Rectangle b=c.getBounds();
      if (b.x + b.width > size.width) {
        size.width=b.x + b.width;
      }
      if (b.y + b.height > size.height) {
        size.height=b.y + b.height;
      }
    }
    size.width+=EntityView.INSET_ZONE * 3;
    size.height+=EntityView.INSET_ZONE * 3;
  }
  return size;
}",0.9916142557651992
145618,"protected Filtered filter(ApplicationElement aAppElement) throws Exception {
}","/** 
 * Performs some mutations of a xml content dom. Adds dependencies. Stripes put <source/>tag and so on.
 * @param aAppElement Appelement, whoose content dom to mutated.
 * @return
 * @throws Exception 
 */
protected Filtered filter(ApplicationElement aAppElement) throws Exception {
}",0.4250681198910082
145619,"@Override public void init(ServletConfig config) throws ServletException {
  try {
    super.init(config);
    ServerConfig scp=ServerConfig.parse(config);
    Handler consoleHandler=new ConsoleHandler();
    consoleHandler.setFormatter(new PlatypusFormatter());
    Logger logger=Logger.getLogger(Client.APPLICATION_LOGGER_NAME);
    logger.addHandler(consoleHandler);
    logger.setUseParentHandlers(false);
    DatabasesClient serverCoreDbClient=new DatabasesClient(scp.getDbSettings(),true);
    ScriptRunner.PlatypusScriptedResource.init(serverCoreDbClient.getAppCache());
    serverCore=new PlatypusServerCore(serverCoreDbClient,scp.getTasks(),scp.getAppElementId());
    serverCoreDbClient.setContextHost(serverCore);
    serverCoreDbClient.setPrincipalHost(serverCore);
    if (System.getProperty(ScriptRunner.DEBUG_PROPERTY) != null) {
      Debugger debugger;
      debugger=Debugger.initialize(false);
      unRegisterMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME);
      registerMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME,debugger);
      unRegisterMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME);
      registerMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME,Breakpoints.getInstance());
      unRegisterMBean(Settings.SETTINGS_MBEAN_NAME);
      registerMBean(Settings.SETTINGS_MBEAN_NAME,new Settings(serverCoreDbClient));
    }
    serverCore.startBackgroundTasks();
  }
 catch (  Exception ex) {
    throw new ServletException(ex);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  try {
    super.init(config);
    ServerConfig scp=ServerConfig.parse(config);
    Handler consoleHandler=new ConsoleHandler();
    consoleHandler.setFormatter(new PlatypusFormatter());
    Logger logger=Logger.getLogger(Client.APPLICATION_LOGGER_NAME);
    logger.addHandler(consoleHandler);
    logger.setUseParentHandlers(false);
    DatabasesClient serverCoreDbClient=new DatabasesClient(scp.getDbSettings(),true);
    ScriptRunner.PlatypusScriptedResource.init(serverCoreDbClient.getAppCache());
    serverCore=new PlatypusServerCore(serverCoreDbClient,scp.getTasks(),scp.getAppElementId());
    serverCoreDbClient.setContextHost(serverCore);
    serverCoreDbClient.setPrincipalHost(serverCore);
    ScriptUtils.getScope().defineProperty(ServerScriptRunner.MODULES_SCRIPT_NAME,serverCore.getScriptsCache(),ScriptableObject.READONLY);
    if (System.getProperty(ScriptRunner.DEBUG_PROPERTY) != null) {
      Debugger debugger;
      debugger=Debugger.initialize(false);
      unRegisterMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME);
      registerMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME,debugger);
      unRegisterMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME);
      registerMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME,Breakpoints.getInstance());
      unRegisterMBean(Settings.SETTINGS_MBEAN_NAME);
      registerMBean(Settings.SETTINGS_MBEAN_NAME,new Settings(serverCoreDbClient));
    }
    serverCore.startBackgroundTasks();
  }
 catch (  Exception ex) {
    throw new ServletException(ex);
  }
}",0.954
145620,"/** 
 * @param args the command line arguments
 * @throws IOException
 * @throws Exception
 */
public static void main(String[] args) throws IOException, Exception {
  checkUserHome();
  checkLogsDirectory();
  Set<String> tasks=new HashSet<>();
  parseArgs(args,tasks);
  if (url == null) {
    printHelp(NO_URL_SPECIFIED_MSG);
    System.exit(1);
  }
  if (!url.startsWith(""String_Node_Str"")) {
    throw new Exception(String.format(""String_Node_Str"",url));
  }
  DbConnectionSettings settings=new DbConnectionSettings();
  settings.setUrl(url);
  settings.getInfo().setProperty(ClientConstants.DB_CONNECTION_SCHEMA_PROP_NAME,schema);
  if (username != null) {
    settings.getInfo().setProperty(ClientConstants.DB_CONNECTION_USER_PROP_NAME,username);
  }
  if (password != null) {
    settings.getInfo().setProperty(ClientConstants.DB_CONNECTION_PASSWORD_PROP_NAME,password);
  }
  setupLoggers(logsLevel,expandLogFileName(logFileNamePattern));
  SSLContext ctx=createSSLContext();
  if (appPath != null) {
    settings.setApplicationPath(appPath);
  }
  DatabasesClient appDbClient=new DatabasesClient(settings);
  Debugger debugger=null;
  if (System.getProperty(ScriptRunner.DEBUG_PROPERTY) != null) {
    debugger=Debugger.initialize(false);
    registerMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME,debugger);
    registerMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME,Breakpoints.getInstance());
    registerMBean(Settings.SETTINGS_MBEAN_NAME,new Settings(appDbClient));
  }
  PlatypusServer server=new PlatypusServer(appDbClient,ctx,getListenAddresses(),getPortsProtocols(),tasks,appElement);
  appDbClient.setContextHost(server);
  appDbClient.setPrincipalHost(server);
  ScriptRunner.PlatypusScriptedResource.init(appDbClient.getAppCache());
  Thread sgc=new Thread(new GarbageSessionsCollector(server));
  sgc.setDaemon(true);
  sgc.start();
  server.start();
}","/** 
 * @param args the command line arguments
 * @throws IOException
 * @throws Exception
 */
public static void main(String[] args) throws IOException, Exception {
  checkUserHome();
  checkLogsDirectory();
  Set<String> tasks=new HashSet<>();
  parseArgs(args,tasks);
  if (url == null) {
    printHelp(NO_URL_SPECIFIED_MSG);
    System.exit(1);
  }
  if (!url.startsWith(""String_Node_Str"")) {
    throw new Exception(String.format(""String_Node_Str"",url));
  }
  DbConnectionSettings settings=new DbConnectionSettings();
  settings.setUrl(url);
  settings.getInfo().setProperty(ClientConstants.DB_CONNECTION_SCHEMA_PROP_NAME,schema);
  if (username != null) {
    settings.getInfo().setProperty(ClientConstants.DB_CONNECTION_USER_PROP_NAME,username);
  }
  if (password != null) {
    settings.getInfo().setProperty(ClientConstants.DB_CONNECTION_PASSWORD_PROP_NAME,password);
  }
  setupLoggers(logsLevel,expandLogFileName(logFileNamePattern));
  SSLContext ctx=createSSLContext();
  if (appPath != null) {
    settings.setApplicationPath(appPath);
  }
  DatabasesClient appDbClient=new DatabasesClient(settings);
  Debugger debugger=null;
  if (System.getProperty(ScriptRunner.DEBUG_PROPERTY) != null) {
    debugger=Debugger.initialize(false);
    registerMBean(DebuggerMBean.DEBUGGER_MBEAN_NAME,debugger);
    registerMBean(Breakpoints.BREAKPOINTS_MBEAN_NAME,Breakpoints.getInstance());
    registerMBean(Settings.SETTINGS_MBEAN_NAME,new Settings(appDbClient));
  }
  ScriptRunner.PlatypusScriptedResource.init(appDbClient.getAppCache());
  PlatypusServer server=new PlatypusServer(appDbClient,ctx,getListenAddresses(),getPortsProtocols(),tasks,appElement);
  appDbClient.setContextHost(server);
  appDbClient.setPrincipalHost(server);
  ScriptUtils.getScope().defineProperty(ServerScriptRunner.MODULES_SCRIPT_NAME,server.getScriptsCache(),ScriptableObject.READONLY);
  Thread sgc=new Thread(new GarbageSessionsCollector(server));
  sgc.setDaemon(true);
  sgc.start();
  server.start();
}",0.9387966804979252
145621,"@Override protected void definePropertiesAndMethods(){
  super.definePropertiesAndMethods();
  defineProperty(MODULES_SCRIPT_NAME,serverCore.getScriptsCache(),ScriptableObject.READONLY);
  defineFunctionProperties(new String[]{""String_Node_Str"",""String_Node_Str""},ServerScriptRunner.class,EMPTY);
}","@Override protected void definePropertiesAndMethods(){
  super.definePropertiesAndMethods();
  defineFunctionProperties(new String[]{""String_Node_Str"",""String_Node_Str""},ServerScriptRunner.class,EMPTY);
}",0.8127490039840638
145622,"public static int getWidgetHeight(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetHeight();
}","public static int getWidgetHeight(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetHeight();
}",0.7682619647355163
145623,"public static int getWidgetWidth(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetWidth();
}","public static int getWidgetWidth(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetWidth();
}",0.7670886075949367
145624,"public static int getWidgetTop(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetTop();
}","public static int getWidgetTop(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetTop();
}",0.7647058823529411
145625,"public static int getWidgetLeft(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetLeft();
}","public static int getWidgetLeft(Widget aWidget){
  Element element=aWidget.getElement();
  if (aWidget.getParent() instanceof SimpleContainer && aWidget.getParent().getParent() instanceof FieldSet) {
    aWidget=aWidget.getParent().getParent();
  }
  if (aWidget.getParent() instanceof BorderLayoutContainer && aWidget.getParent().getParent() instanceof LayoutPanel) {
    element=aWidget.getParent().getElement().getParentElement();
  }
  return element.getOffsetLeft();
}",0.7659033078880407
145626,"@Override public void onMouseMove(MouseMoveEvent event){
  event.stopPropagation();
  if (mouseState == MOUSE.NULL || mouseState == MOUSE.MOVED) {
    mouseState=MOUSE.MOVED;
    executeEvent(eventThis,mouseMoved,null);
  }
 else   if (mouseState == MOUSE.PRESSED || mouseState == MOUSE.DRAGGED) {
    mouseState=MOUSE.DRAGGED;
    executeEvent(eventThis,mouseDragged,JSEvents.publishMouseMoveEvent(event));
  }
}","@Override public void onMouseMove(MouseMoveEvent event){
  if (mouseMoved != null || mouseDragged != null) {
    event.stopPropagation();
    if (mouseState == MOUSE.NULL || mouseState == MOUSE.MOVED) {
      mouseState=MOUSE.MOVED;
      executeEvent(eventThis,mouseMoved,null);
    }
 else     if (mouseState == MOUSE.PRESSED || mouseState == MOUSE.DRAGGED) {
      mouseState=MOUSE.DRAGGED;
      executeEvent(eventThis,mouseDragged,JSEvents.publishMouseMoveEvent(event));
    }
  }
}",0.9177777777777778
145627,"protected synchronized void addFileToIndex(File aFile){
  try {
    String familyPath=fileNameWithoutExtension(aFile);
    if (familyPath != null) {
      AppElementFiles family=families.get(familyPath);
      if (family == null) {
        family=new AppElementFiles(null);
        families.put(familyPath,family);
      }
      Integer type1=family.getAppElementType();
      String id1=type1 != null ? family.getAppElementId(type1) : null;
      family.addFile(aFile);
      Integer type2=family.getAppElementType();
      String id2=type2 != null ? family.getAppElementId(type2) : null;
      id2Path.remove(path2Id.remove(familyPath));
      if (id2 != null) {
        path2Id.put(familyPath,id2);
        id2Path.put(id2,familyPath);
      }
      remove(id1);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(FilesAppCache.class.getName()).log(Level.SEVERE,null,ex);
  }
}","protected synchronized void addFileToIndex(File aFile){
  try {
    String familyPath=fileNameWithoutExtension(aFile);
    if (familyPath != null) {
      AppElementFiles family=families.get(familyPath);
      if (family == null) {
        family=new AppElementFiles(null);
        families.put(familyPath,family);
      }
      Integer type1=family.getAppElementType();
      String id1=type1 != null ? family.getAppElementId(type1) : null;
      family.addFile(aFile);
      Integer type2=family.getAppElementType();
      String id2=type2 != null ? family.getAppElementId(type2) : null;
      id2Path.remove(path2Id.remove(familyPath));
      if (id2 != null) {
        path2Id.put(familyPath,id2);
        id2Path.put(id2,familyPath);
      }
      remove(id1);
      remove(id2);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(FilesAppCache.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.989391401451703
145628,"private void recursiveScopeSetup(Map<Node,List<Node>> aTree,Node aParent){
  List<Node> childs=aTree.get(aParent);
  if (childs != null && childs.size() > 0) {
    if (aParent instanceof Scope && !(aParent instanceof AstRoot)) {
      Scope scope=(Scope)aParent;
      scope.setParentScope(scopeStack.peek());
      scopeStack.push(scope);
    }
    try {
      for (      Node node : childs) {
        if (node instanceof Name) {
          node.setScope(scopeStack.peek());
        }
        recursiveScopeSetup(aTree,node);
      }
    }
  finally {
      if (aParent instanceof Scope && !(aParent instanceof AstRoot)) {
        scopeStack.pop();
      }
    }
  }
}","private void recursiveScopeSetup(Map<Node,List<Node>> aTree,Node aParent){
  List<Node> children=aTree.get(aParent);
  if (children != null && children.size() > 0) {
    if (aParent instanceof Scope && !(aParent instanceof AstRoot)) {
      Scope scope=(Scope)aParent;
      scope.setParentScope(scopeStack.peek());
      scopeStack.push(scope);
    }
    try {
      for (      Node node : children) {
        if (node instanceof Name) {
          node.setScope(scopeStack.peek());
        }
        recursiveScopeSetup(aTree,node);
      }
    }
  finally {
      if (aParent instanceof Scope && !(aParent instanceof AstRoot)) {
        scopeStack.pop();
      }
    }
  }
}",0.988095238095238
145629,"public Object send(PositioningPacket aPacket,String aHost,Integer aPort,String aProtocolName){
  if (aHost != null && !aHost.isEmpty() && aProtocolName != null && !aProtocolName.isEmpty() && aPort != null && aPort > 0 && aPort < 65535 && aPacket != null) {
    if (RetranslatePacketFactory.isServiceSupport(aProtocolName)) {
      String imei=aPacket.getImei();
      IoSession ioSession=retranslateSessions.get(imei);
      if (ioSession == null) {
        IoConnector connector=new NioSocketConnector();
        connector.getFilterChain().addLast(aProtocolName,new ProtocolCodecFilter(RetranslatePacketFactory.getPacketEncoder(aProtocolName),RetranslatePacketFactory.getPacketDecoder(aProtocolName)));
        connector.setHandler(RetranslatePacketFactory.getPacketHandler(aProtocolName,retranslateSessions));
        ConnectFuture future=connector.connect(new InetSocketAddress(aHost,aPort));
        future.awaitUninterruptibly();
        if (future.isConnected()) {
          IoSession session=future.getSession();
          session.setAttribute(IMEI_ATTRIBUTE,imei);
          retranslateSessions.put(imei,session);
          WriteFuture write=session.write(aPacket);
          write.awaitUninterruptibly(WAIT_SEND_TIMEOUT);
        }
      }
 else {
        WriteFuture write=ioSession.write(aPacket);
        write.awaitUninterruptibly(WAIT_SEND_TIMEOUT);
      }
    }
  }
  return null;
}","public Object send(PositioningPacket aPacket,String aHost,Integer aPort,String aProtocolName){
  if (aHost != null && !aHost.isEmpty() && aProtocolName != null && !aProtocolName.isEmpty() && aPort != null && aPort > 0 && aPort < 65535 && aPacket != null) {
    if (RetranslatePacketFactory.isProtocolSupported(aProtocolName)) {
      String imei=aPacket.getImei();
      IoSession ioSession=retranslateSessions.get(imei);
      if (ioSession == null) {
        IoConnector connector=new NioSocketConnector();
        connector.getFilterChain().addLast(aProtocolName,new ProtocolCodecFilter(RetranslatePacketFactory.getPacketEncoder(aProtocolName),RetranslatePacketFactory.getPacketDecoder(aProtocolName)));
        connector.setHandler(RetranslatePacketFactory.getPacketHandler(aProtocolName,retranslateSessions));
        connector.setConnectTimeoutMillis(WAIT_SEND_TIMEOUT);
        ConnectFuture future=connector.connect(new InetSocketAddress(aHost,aPort));
        future.awaitUninterruptibly();
        if (future.isConnected()) {
          IoSession session=future.getSession();
          session.setAttribute(IMEI_ATTRIBUTE,imei);
          retranslateSessions.put(imei,session);
          WriteFuture write=session.write(aPacket);
          write.awaitUninterruptibly(WAIT_SEND_TIMEOUT);
        }
 else         connector.dispose();
      }
 else {
        WriteFuture write=ioSession.write(aPacket);
        write.awaitUninterruptibly(WAIT_SEND_TIMEOUT);
      }
    }
  }
  return null;
}",0.960635359116022
145630,"@Test public void testSimpleConnecting() throws UnknownHostException, IOException {
  PacketReciever reciever=((PositioningIoHandler)server.getSensorAcceptor().getHandler()).getReciever();
  try {
    Calendar cl=Calendar.getInstance();
    cl.set(2012,7,5,10,20,30);
    for (int i=0; i < 20; i++) {
      PositioningPacket ps=new PositioningPacket();
      ps.setImei(""String_Node_Str"");
      ps.setAltitude(23.56f);
      ps.setAzimuth(33.56f);
      ps.setLongtitude(123.56f);
      ps.setLatitude(63.56f);
      ps.setSpeed(123.6f);
      ps.setValidity(true);
      ps.setTime(cl.getTime());
      reciever.received(ps);
      cl.roll(Calendar.MINUTE,i * 2);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusServerRecivedPacketTest.class.getName()).log(Level.SEVERE,null,ex);
    fail(ex.getMessage());
  }
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException ex) {
    Logger.getLogger(PlatypusServerRecivedPacketTest.class.getName()).log(Level.SEVERE,null,ex);
  }
  assertTrue(((PositioningPacketReciever)reciever).getPacketStorage().isEmpty());
}","@Test public void testSimpleConnecting() throws UnknownHostException, IOException {
  PacketReciever reciever=null;
  try {
    Calendar cl=Calendar.getInstance();
    cl.set(2012,7,5,10,20,30);
    for (int i=0; i < 20; i++) {
      PositioningPacket ps=new PositioningPacket();
      ps.setImei(""String_Node_Str"");
      ps.setAltitude(23.56f);
      ps.setAzimuth(33.56f);
      ps.setLongtitude(123.56f);
      ps.setLatitude(63.56f);
      ps.setSpeed(123.6f);
      ps.setValidity(true);
      ps.setTime(cl.getTime());
      reciever.received(ps);
      cl.roll(Calendar.MINUTE,i * 2);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusServerRecivedPacketTest.class.getName()).log(Level.SEVERE,null,ex);
    fail(ex.getMessage());
  }
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException ex) {
    Logger.getLogger(PlatypusServerRecivedPacketTest.class.getName()).log(Level.SEVERE,null,ex);
  }
  assertTrue(((PositioningPacketReciever)reciever).getPacketStorage().isEmpty());
}",0.961593172119488
145631,"@BeforeClass public static void setUpClass() throws Exception {
  String url=""String_Node_Str"";
  String login=""String_Node_Str"";
  String passwd=""String_Node_Str"";
  if (!url.startsWith(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"" + url);
  }
  DbConnectionSettings settings=new DbConnectionSettings();
  settings.setUrl(url);
  settings.getInfo().setProperty(""String_Node_Str"",login);
  settings.getInfo().setProperty(""String_Node_Str"",passwd);
  SSLContext sslContext=ServerMain.createSSLContext();
  server=new PlatypusServer(new DatabasesClient(settings),sslContext,new InetSocketAddress[]{new InetSocketAddress(""String_Node_Str"",TEST_PORT)},new HashMap<Integer,String>(),new HashSet<ModuleConfig>(),null);
  server.start();
}","@BeforeClass public static void setUpClass() throws Exception {
  String url=""String_Node_Str"";
  String login=""String_Node_Str"";
  String passwd=""String_Node_Str"";
  if (!url.startsWith(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"" + url);
  }
  DbConnectionSettings settings=new DbConnectionSettings();
  settings.setUrl(url);
  settings.getInfo().setProperty(""String_Node_Str"",login);
  settings.getInfo().setProperty(""String_Node_Str"",passwd);
  SSLContext sslContext=ServerMain.createSSLContext();
  server=new PlatypusServer(new DatabasesClient(settings),sslContext,new InetSocketAddress[]{new InetSocketAddress(""String_Node_Str"",TEST_PORT)},new HashMap<Integer,String>(),new HashSet<String>(),null);
  server.start();
}",0.9812583668005356
145632,"private Field resolveFieldByColumn(SqlQuery aQuery,Column column,SelectExpressionItem selectItem,Map<String,Table> tables) throws Exception {
  Table fromTable=null;
  Field field=null;
  if (column.getTable() != null && column.getTable().getWholeTableName() != null) {
    fromTable=tables.get(column.getTable().getWholeTableName().toLowerCase());
    if (fromTable != null) {
      Fields fields=getTableFields(aQuery.getDbId(),fromTable);
      field=fields.get(column.getColumnName());
    }
  }
  if (field == null) {
    for (    Table table : tables.values()) {
      Fields fields=getTableFields(aQuery.getDbId(),table);
      field=fields.get(column.getColumnName());
      if (field != null) {
        fromTable=table;
        break;
      }
    }
  }
  if (field != null) {
    Field copied=field.copy();
    dbMdCache.getConnectionDriver().getTypesResolver().resolve2Application(copied);
    copied.setName(selectItem.getAlias() != null ? selectItem.getAlias().getName() : column.getColumnName());
    copied.setOriginalName(column.getColumnName() != null ? column.getColumnName() : copied.getName());
    if (preserveDatasources) {
      boolean aliasPresent=fromTable.getAlias() != null && !fromTable.getAlias().getName().isEmpty();
      if (aliasPresent) {
        copied.setTableName(fromTable.getAlias().getName());
        copied.setSchemaName(null);
      }
 else {
        copied.setTableName(fromTable.getName());
        copied.setSchemaName(fromTable.getSchemaName());
      }
    }
    return copied;
  }
 else {
    return null;
  }
}","private Field resolveFieldByColumn(SqlQuery aQuery,Column column,SelectExpressionItem selectItem,Map<String,Table> tables) throws Exception {
  Table fromTable=null;
  Field field=null;
  if (column.getTable() != null && column.getTable().getWholeTableName() != null) {
    fromTable=tables.get(column.getTable().getWholeTableName().toLowerCase());
    if (fromTable != null) {
      Fields fields=getTableFields(aQuery.getDbId(),fromTable);
      field=fields.get(column.getColumnName());
    }
  }
  if (field == null) {
    for (    Table table : tables.values()) {
      Fields fields=getTableFields(aQuery.getDbId(),table);
      field=fields.get(column.getColumnName());
      if (field != null) {
        fromTable=table;
        break;
      }
    }
  }
  if (field != null) {
    Field copied=field.copy();
    copied.setName(selectItem.getAlias() != null ? selectItem.getAlias().getName() : column.getColumnName());
    copied.setOriginalName(column.getColumnName() != null ? column.getColumnName() : copied.getName());
    if (preserveDatasources) {
      boolean aliasPresent=fromTable.getAlias() != null && !fromTable.getAlias().getName().isEmpty();
      if (aliasPresent) {
        copied.setTableName(fromTable.getAlias().getName());
        copied.setSchemaName(null);
      }
 else {
        copied.setTableName(fromTable.getName());
        copied.setSchemaName(fromTable.getSchemaName());
      }
    }
    return copied;
  }
 else {
    return null;
  }
}",0.9723320158102768
145633,"public void addTableFieldsToSelectResults(SqlQuery aQuery,Table table) throws Exception {
  Fields fields=getTableFields(aQuery.getDbId(),table);
  if (fields != null) {
    for (    Field field : fields.toCollection()) {
      Field copied=field.copy();
      dbMdCache.getConnectionDriver().getTypesResolver().resolve2Application(copied);
      if (preserveDatasources) {
        boolean aliasPresent=table.getAlias() != null && !table.getAlias().getName().isEmpty();
        if (aliasPresent) {
          copied.setTableName(table.getAlias().getName());
          copied.setSchemaName(null);
        }
 else {
          copied.setTableName(table.getName());
          copied.setSchemaName(table.getSchemaName());
        }
      }
      aQuery.getFields().add(copied);
    }
  }
}","public void addTableFieldsToSelectResults(SqlQuery aQuery,Table table) throws Exception {
  Fields fields=getTableFields(aQuery.getDbId(),table);
  if (fields != null) {
    for (    Field field : fields.toCollection()) {
      Field copied=field.copy();
      if (preserveDatasources) {
        boolean aliasPresent=table.getAlias() != null && !table.getAlias().getName().isEmpty();
        if (aliasPresent) {
          copied.setTableName(table.getAlias().getName());
          copied.setSchemaName(null);
        }
 else {
          copied.setTableName(table.getName());
          copied.setSchemaName(table.getSchemaName());
        }
      }
      aQuery.getFields().add(copied);
    }
  }
}",0.941891891891892
145634,"@Override public Object call(final Context cx,Scriptable scope,Scriptable thisObj,final Object[] args){
  try {
    if (args != null && args.length > 0 && args[args.length - 1] instanceof Function) {
      final Function callback=(Function)args[args.length - 1];
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          try {
            Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,Arrays.copyOf(args,args.length - 1));
            callback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
          }
 catch (          Exception ex) {
            Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
);
      return Context.getUndefinedValue();
    }
 else {
      return platypusClient.executeServerModuleMethod(moduleName,methodName,args);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}","@Override public Object call(final Context cx,Scriptable scope,Scriptable thisObj,final Object[] args){
  try {
    if (args != null && args.length > 0 && args[args.length - 1] instanceof Function) {
      final Function callback=(Function)args[args.length - 1];
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          try {
            Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,Arrays.copyOf(args,args.length - 1));
            Context cx=Context.getCurrentContext();
            boolean wasContext=cx != null;
            if (!wasContext) {
              cx=ScriptUtils.enterContext();
            }
            try {
              callback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
            }
  finally {
              if (!wasContext) {
                Context.exit();
              }
            }
          }
 catch (          Exception ex) {
            Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
          }
        }
      }
);
      return Context.getUndefinedValue();
    }
 else {
      return platypusClient.executeServerModuleMethod(moduleName,methodName,args);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}",0.8551111111111112
145635,"@Override public void run(){
  try {
    Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,Arrays.copyOf(args,args.length - 1));
    callback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
  }
 catch (  Exception ex) {
    Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override public void run(){
  try {
    Object result=platypusClient.executeServerModuleMethod(moduleName,methodName,Arrays.copyOf(args,args.length - 1));
    Context cx=Context.getCurrentContext();
    boolean wasContext=cx != null;
    if (!wasContext) {
      cx=ScriptUtils.enterContext();
    }
    try {
      callback.call(cx,StubFunction.this,StubFunction.this,new Object[]{result});
    }
  finally {
      if (!wasContext) {
        Context.exit();
      }
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(ServerScriptProxy.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.7484143763213531
145636,"private Component createDropDownButton(Element aTag) throws Exception {
  final SplitButton component=new SplitButton();
  processEvents(component,aTag);
  Publisher.publish(component);
  setIconAndAlign(component,aTag);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    final String dropDownMenu=aTag.getAttribute(""String_Node_Str"");
    postponedTasks.add(new Runnable(){
      @Override public void run(){
        Component comp=components.get(dropDownMenu);
        if (comp instanceof Menu)         component.setMenu((Menu)comp);
 else         Logger.getLogger(GxtControlsFactory.class.getName()).log(Level.WARNING,""String_Node_Str"" + component.getData(Form.PID_DATA_KEY));
      }
    }
);
  }
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,publishedComp);
  return component;
}","private Component createDropDownButton(Element aTag) throws Exception {
  final SplitButton component=new SplitButton(){
    @Override protected void onRedraw(){
      super.onRedraw();
      ControlsUtils.reapplyStyle(this);
    }
  }
;
  processEvents(component,aTag);
  PublishedComponent publishedComp=Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    final String dropDownMenu=aTag.getAttribute(""String_Node_Str"");
    postponedTasks.add(new Runnable(){
      @Override public void run(){
        Component comp=components.get(dropDownMenu);
        if (comp instanceof Menu)         component.setMenu((Menu)comp);
 else         Logger.getLogger(GxtControlsFactory.class.getName()).log(Level.WARNING,""String_Node_Str"" + component.getData(Form.PID_DATA_KEY));
      }
    }
);
  }
  checkBorders(component,aTag);
  processGeneralProperties(component,aTag,publishedComp);
  setIconAndAlign(component,aTag,publishedComp);
  return component;
}",0.8034433285509326
145637,"private void setIconAndAlign(final CellButtonBase<?> btn,Element aTag) throws Exception {
  btn.setIconAlign(IconAlign.LEFT);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    int horizontalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",11);
switch (horizontalTextPosition) {
case 4:
      btn.setIconAlign(IconAlign.LEFT);
    break;
case 2:
  btn.setIconAlign(IconAlign.RIGHT);
break;
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 10:
btn.setIconAlign(IconAlign.RIGHT);
break;
case 11:
btn.setIconAlign(IconAlign.LEFT);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
if (aTag.hasAttribute(""String_Node_Str"")) {
int verticalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",0);
switch (verticalTextPosition) {
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 1:
btn.setIconAlign(IconAlign.BOTTOM);
break;
case 3:
btn.setIconAlign(IconAlign.TOP);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
btn.setScale(ButtonScale.SMALL);
if (aTag.hasAttribute(""String_Node_Str"")) {
btn.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
@Override public void run(ImageResource aResource){
btn.setIcon(aResource);
Scheduler.get().scheduleDeferred(new ScheduledCommand(){
@Override public void execute(){
if (btn.getParent() instanceof ResizeContainer) {
ResizeContainer c=(ResizeContainer)btn.getParent();
Size s=XElement.as(c.getElement().getParentElement()).getSize(true);
c.setPixelSize(s.getWidth() + 1,s.getHeight());
c.setPixelSize(s.getWidth() - 1,s.getHeight());
}
 else if (btn.getParent() instanceof HasLayout) {
((HasLayout)btn.getParent()).forceLayout();
}
}
}
);
}
}
));
}
}","private void setIconAndAlign(final CellButtonBase<?> btn,Element aTag,final PublishedComponent aPublished) throws Exception {
  btn.setIconAlign(IconAlign.LEFT);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    int horizontalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",11);
switch (horizontalTextPosition) {
case 4:
      btn.setIconAlign(IconAlign.LEFT);
    break;
case 2:
  btn.setIconAlign(IconAlign.RIGHT);
break;
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 10:
btn.setIconAlign(IconAlign.RIGHT);
break;
case 11:
btn.setIconAlign(IconAlign.LEFT);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
if (aTag.hasAttribute(""String_Node_Str"")) {
int verticalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",0);
switch (verticalTextPosition) {
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 1:
btn.setIconAlign(IconAlign.BOTTOM);
break;
case 3:
btn.setIconAlign(IconAlign.TOP);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
btn.setScale(ButtonScale.SMALL);
if (aTag.hasAttribute(""String_Node_Str"")) {
btn.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
@Override public void run(ImageResource aResource){
btn.setIcon(aResource);
Scheduler.get().scheduleDeferred(new ScheduledCommand(){
@Override public void execute(){
if (btn.getParent() instanceof ResizeContainer) {
ResizeContainer c=(ResizeContainer)btn.getParent();
Size s=XElement.as(c.getElement().getParentElement()).getSize(true);
c.setPixelSize(s.getWidth() + 1,s.getHeight());
c.setPixelSize(s.getWidth() - 1,s.getHeight());
}
 else if (btn.getParent() instanceof HasLayout) {
((HasLayout)btn.getParent()).forceLayout();
}
}
}
);
}
}
));
}
}",0.9896551724137932
145638,"private Component createToggleButton(Element aTag) throws Exception {
  PlatypusToggleButton component=new PlatypusToggleButton();
  processEvents(component,aTag);
  Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str""))   addToToggleGroup(component,aTag.getAttribute(""String_Node_Str""));
  component.setValue(Utils.getBooleanAttribute(aTag,""String_Node_Str"",false));
  setIconAndAlign(component,aTag);
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,publishedComp);
  return component;
}","private Component createToggleButton(Element aTag) throws Exception {
  PlatypusToggleButton component=new PlatypusToggleButton(){
    @Override protected void onRedraw(){
      super.onRedraw();
      ControlsUtils.reapplyStyle(this);
    }
  }
;
  processEvents(component,aTag);
  PublishedComponent publishedComp=Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str""))   addToToggleGroup(component,aTag.getAttribute(""String_Node_Str""));
  component.setValue(Utils.getBooleanAttribute(aTag,""String_Node_Str"",false));
  processGeneralProperties(component,aTag,publishedComp);
  setIconAndAlign(component,aTag,publishedComp);
  checkBorders(component,aTag);
  return component;
}",0.7530944625407167
145639,"private Component createButton(Element aTag) throws Exception {
  TextButton component=new TextButton();
  processEvents(component,aTag);
  Publisher.publish(component);
  setIconAndAlign(component,aTag);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,publishedComp);
  return component;
}","private Component createButton(Element aTag) throws Exception {
  final TextButton component=new TextButton(){
    @Override protected void onRedraw(){
      super.onRedraw();
      ControlsUtils.reapplyStyle(this);
    }
  }
;
  processEvents(component,aTag);
  PublishedComponent publishedComp=Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  checkBorders(component,aTag);
  processGeneralProperties(component,aTag,publishedComp);
  setIconAndAlign(component,aTag,publishedComp);
  return component;
}",0.6449864498644986
145640,"protected Component processGeneralProperties(final Component aComponent,Element aTag,boolean aDefaultOpaque,PublishedComponent aPublished) throws Exception {
  final String widgetName=aTag.getAttribute(NAME_ATTRIBUTE);
  if (widgetName != null)   aComponent.setData(Form.PID_DATA_KEY,widgetName);
  aComponent.setId(""String_Node_Str"" + (++idCounter));
  boolean visible=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  if (!visible)   aComponent.setVisible(visible);
  boolean enabled=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  if (!enabled)   aComponent.setEnabled(enabled);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    String toolTipText=aTag.getAttribute(""String_Node_Str"");
    aComponent.setTitle(toolTipText);
  }
  String prefWidth=aTag.getAttribute(""String_Node_Str"");
  String prefHeight=aTag.getAttribute(""String_Node_Str"");
  if (prefWidth != null && prefHeight != null) {
    Size size=new Size(Util.parseInt(prefWidth,0),Util.parseInt(prefHeight,0));
    componentsPreferredSize.put(widgetName,size);
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    final String componentPopupMenu=aTag.getAttribute(""String_Node_Str"");
    postponedTasks.add(new Runnable(){
      @Override public void run(){
        Component comp=components.get(componentPopupMenu);
        if (comp instanceof Menu) {
          aComponent.setContextMenu((Menu)comp);
          aComponent.setData(ControlsUtils.CONTEXT_MENU,comp);
        }
 else         Logger.getLogger(GxtControlsFactory.class.getName()).log(Level.WARNING,""String_Node_Str"" + widgetName);
      }
    }
);
  }
  final boolean inheritsPopupMenu=Utils.getBooleanAttribute(aTag,""String_Node_Str"",false);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    aPublished.setBackground(ControlsUtils.parseColor(aTag.getAttribute(""String_Node_Str"")));
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    aPublished.setForeground(ControlsUtils.parseColor(aTag.getAttribute(""String_Node_Str"")));
  }
  boolean opaque=Utils.getBooleanAttribute(aTag,""String_Node_Str"",aDefaultOpaque);
  if (!opaque)   aPublished.setOpaque(opaque);
  if (!isRoot) {
    Element fontTag=Utils.getElementByTagName(aTag,""String_Node_Str"");
    if (fontTag != null) {
      String fontFamily=null;
      if (fontTag.hasAttribute(""String_Node_Str"")) {
        fontFamily=fontTag.getAttribute(""String_Node_Str"");
      }
      int fontSize=0;
      if (fontTag.hasAttribute(""String_Node_Str"")) {
        fontSize=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",10);
      }
      int fontStyle=0;
      if (fontTag.hasAttribute(""String_Node_Str"")) {
        fontStyle=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",0);
      }
      aPublished.setFont(PublishedFont.create(fontFamily,fontStyle,fontSize));
    }
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    aPublished.setCursor(convertCursor(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0)));
  }
  return aComponent;
}","protected Component processGeneralProperties(final Component aComponent,Element aTag,boolean aDefaultOpaque,PublishedComponent aPublished) throws Exception {
  final String widgetName=aTag.getAttribute(NAME_ATTRIBUTE);
  if (widgetName != null)   aComponent.setData(Form.PID_DATA_KEY,widgetName);
  if (widgetName != null && !widgetName.isEmpty())   aComponent.setId(widgetName);
 else   aComponent.setId(""String_Node_Str"" + (++idCounter));
  boolean visible=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  if (!visible)   aComponent.setVisible(visible);
  boolean enabled=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  if (!enabled)   aComponent.setEnabled(enabled);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    String toolTipText=aTag.getAttribute(""String_Node_Str"");
    aComponent.setTitle(toolTipText);
  }
  String prefWidth=aTag.getAttribute(""String_Node_Str"");
  String prefHeight=aTag.getAttribute(""String_Node_Str"");
  if (prefWidth != null && prefHeight != null) {
    Size size=new Size(Util.parseInt(prefWidth,0),Util.parseInt(prefHeight,0));
    componentsPreferredSize.put(widgetName,size);
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    final String componentPopupMenu=aTag.getAttribute(""String_Node_Str"");
    postponedTasks.add(new Runnable(){
      @Override public void run(){
        Component comp=components.get(componentPopupMenu);
        if (comp instanceof Menu) {
          aComponent.setContextMenu((Menu)comp);
          aComponent.setData(ControlsUtils.CONTEXT_MENU,comp);
        }
 else         Logger.getLogger(GxtControlsFactory.class.getName()).log(Level.WARNING,""String_Node_Str"" + widgetName);
      }
    }
);
  }
  final boolean inheritsPopupMenu=Utils.getBooleanAttribute(aTag,""String_Node_Str"",false);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    aPublished.setBackground(ControlsUtils.parseColor(aTag.getAttribute(""String_Node_Str"")));
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    aPublished.setForeground(ControlsUtils.parseColor(aTag.getAttribute(""String_Node_Str"")));
  }
  boolean opaque=Utils.getBooleanAttribute(aTag,""String_Node_Str"",aDefaultOpaque);
  if (!opaque)   aPublished.setOpaque(opaque);
  if (!isRoot) {
    Element fontTag=Utils.getElementByTagName(aTag,""String_Node_Str"");
    if (fontTag != null) {
      String fontFamily=null;
      if (fontTag.hasAttribute(""String_Node_Str"")) {
        fontFamily=fontTag.getAttribute(""String_Node_Str"");
      }
      int fontSize=0;
      if (fontTag.hasAttribute(""String_Node_Str"")) {
        fontSize=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",10);
      }
      int fontStyle=0;
      if (fontTag.hasAttribute(""String_Node_Str"")) {
        fontStyle=Utils.getIntegerAttribute(fontTag,""String_Node_Str"",0);
      }
      aPublished.setFont(PublishedFont.create(fontFamily,fontStyle,fontSize));
    }
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    aPublished.setCursor(convertCursor(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0)));
  }
  return aComponent;
}",0.9850996149338692
145641,"public String getLeftPartNameType(Integer aSqlType){
  String partName=jdbcTypesLeftPartName.get(aSqlType);
  if (partName == null)   partName=jdbcTypes2RdbmsTypes.get(aSqlType);
  return partName;
}","public String getLeftPartNameType(Integer aSqlType){
  String partName=jdbcTypesLeftPartName.get(aSqlType);
  if (partName == null) {
    partName=jdbcTypes2RdbmsTypes.get(aSqlType);
  }
  return partName;
}",0.9802955665024632
145642,"@Override public int getJdbcTypeByRDBMSTypename(String aTypeName){
  String sqlTypeName=(aTypeName != null ? aTypeName.toUpperCase() : null);
  int leftIndex=sqlTypeName.indexOf(""String_Node_Str"");
  if (leftIndex > 0) {
    int rightIndex=sqlTypeName.indexOf(""String_Node_Str"");
    if (rightIndex > 0)     sqlTypeName=sqlTypeName.substring(0,leftIndex) + ""String_Node_Str"" + sqlTypeName.substring(rightIndex + 1);
  }
  StringTokenizer st=new StringTokenizer(sqlTypeName,""String_Node_Str"",false);
  StringBuilder sb=new StringBuilder();
  while (st.hasMoreTokens()) {
    String part=st.nextToken();
    if (part != null && !part.isEmpty())     sb.append(part).append(""String_Node_Str"");
  }
  sqlTypeName=sb.toString().trim();
  Integer jdbcType=rdbmsTypes2JdbcTypes.get(sqlTypeName);
  if (jdbcType == null) {
    jdbcType=Types.OTHER;
    if (isGeometryTypeName(sqlTypeName)) {
      jdbcType=Types.STRUCT;
    }
  }
  return jdbcType;
}","@Override public int getJdbcTypeByRDBMSTypename(String aTypeName){
  String sqlTypeName=(aTypeName != null ? aTypeName.toUpperCase() : null);
  int leftIndex=sqlTypeName.indexOf(""String_Node_Str"");
  if (leftIndex > 0) {
    int rightIndex=sqlTypeName.indexOf(""String_Node_Str"");
    if (rightIndex > 0) {
      sqlTypeName=sqlTypeName.substring(0,leftIndex) + ""String_Node_Str"" + sqlTypeName.substring(rightIndex + 1);
    }
  }
  StringTokenizer st=new StringTokenizer(sqlTypeName,""String_Node_Str"",false);
  StringBuilder sb=new StringBuilder();
  while (st.hasMoreTokens()) {
    String part=st.nextToken();
    if (part != null && !part.isEmpty()) {
      sb.append(part).append(""String_Node_Str"");
    }
  }
  sqlTypeName=sb.toString().trim();
  Integer jdbcType=rdbmsTypes2JdbcTypes.get(sqlTypeName);
  if (jdbcType == null) {
    jdbcType=Types.OTHER;
    if (isGeometryTypeName(sqlTypeName)) {
      jdbcType=Types.STRUCT;
    }
  }
  return jdbcType;
}",0.9894957983193278
145643,"@Override public void resolve2Application(Field aField){
  if (aField != null) {
    int lSize=aField.getSize();
    int size=lSize >> 16;
    int scale=(lSize << 16) >> 16;
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.VARCHAR)) {
      if (scale > 0) {
        aField.setSize(scale);
      }
 else {
        aField.setSize(0);
      }
      aField.setScale(0);
      aField.setPrecision(0);
    }
 else {
      if (size > 0) {
        aField.setSize(size);
      }
 else {
        aField.setSize(0);
      }
      if (scale > 0) {
        aField.setScale(scale);
        aField.setPrecision(scale);
      }
 else {
        aField.setScale(0);
        aField.setPrecision(0);
      }
    }
  }
}","@Override public void resolve2Application(Field aField){
  if (aField != null) {
    int lSize=aField.getSize();
    int size=lSize >> 16;
    int scale=(lSize << 16) >> 16;
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.VARCHAR)) {
      aField.setSize(Math.max(0,scale));
      aField.setScale(0);
      aField.setPrecision(0);
    }
 else     if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
      aField.setTypeInfo(DataTypeInfo.BLOB);
      aField.setSize(Math.max(0,size));
    }
 else {
      aField.setSize(Math.max(0,size));
      if (scale > 0) {
        aField.setScale(scale);
        aField.setPrecision(scale);
      }
 else {
        aField.setScale(0);
        aField.setPrecision(0);
      }
    }
  }
}",0.7239344262295082
145644,"protected ActualCacheEntry<SqlQuery> loadQuery(String aAppElementId) throws ParserConfigurationException, Exception {
  if (aAppElementId == null) {
    throw new NullPointerException(CANT_LOAD_NULL_MSG);
  }
  Logger.getLogger(this.getClass().getName()).finer(String.format(LOADING_QUERY_MSG,aAppElementId));
  ApplicationElement appElement=client.getAppCache().get(aAppElementId);
  if (appElement == null && SUBQUERY_LINK_PATTERN.matcher(aAppElementId).matches()) {
    aAppElementId=aAppElementId.substring(1);
    appElement=client.getAppCache().get(aAppElementId);
  }
  if (appElement != null) {
    Document queryDom=appElement.getContent();
    if (queryDom != null) {
      QueryDocument queryDoc=XmlDom2QueryDocument.transform(client,aAppElementId,queryDom);
      QueryModel model=queryDoc.getModel();
      SqlQuery query=queryDoc.getQuery();
      putRolesMutatables(query);
      List<StoredFieldMetadata> additionalFieldsMetadata=queryDoc.getAdditionalFieldsMetadata();
      String sqlText=query.getSqlText();
      if (sqlText != null && !sqlText.isEmpty()) {
        if (query.getFullSqlText() != null && !query.getFullSqlText().isEmpty()) {
          sqlText=query.getFullSqlText();
        }
        try {
          try {
            String compiledSqlText=compileSubqueries(sqlText,model);
            putTableFieldsMetadata(query);
            putStoredTableFieldsMetadata(query,additionalFieldsMetadata);
            putParametersMetadata(query,model);
            query.setSqlText(compiledSqlText);
          }
 catch (          Exception ex) {
            Fields fields=new Fields();
            Field fMd=new Field(DUMMY_FIELD_NAME,ex.getMessage());
            fields.add(fMd);
            query.setFields(fields);
          }
        }
  finally {
          query.setTitle(appElement.getName());
          query.getFields().setTableDescription(query.getTitle());
        }
      }
      return new ActualCacheEntry<>(query,appElement.getTxtContentLength(),appElement.getTxtCrc32());
    }
 else {
      SqlQuery result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,CONTENT_EMPTY_MSG);
      fields.add(fMd);
      result.setFields(fields);
      return new ActualCacheEntry<>(result,0,0);
    }
  }
 else {
    SqlQuery result=dynamicQueries.get(aAppElementId);
    if (result == null) {
      result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,ABSENT_QUERY_MSG);
      fields.add(fMd);
      result.setFields(fields);
    }
    return new ActualCacheEntry<>(result,0,0);
  }
}","protected ActualCacheEntry<SqlQuery> loadQuery(String aAppElementId) throws ParserConfigurationException, Exception {
  if (aAppElementId == null) {
    throw new NullPointerException(CANT_LOAD_NULL_MSG);
  }
  Logger.getLogger(this.getClass().getName()).finer(String.format(LOADING_QUERY_MSG,aAppElementId));
  ApplicationElement appElement=client.getAppCache().get(aAppElementId);
  if (appElement == null && SUBQUERY_LINK_PATTERN.matcher(aAppElementId).matches()) {
    aAppElementId=aAppElementId.substring(1);
    appElement=client.getAppCache().get(aAppElementId);
  }
  if (appElement != null) {
    Document queryDom=appElement.getContent();
    if (queryDom != null) {
      QueryDocument queryDoc=XmlDom2QueryDocument.transform(client,aAppElementId,queryDom);
      QueryModel model=queryDoc.getModel();
      SqlQuery query=queryDoc.getQuery();
      putRolesMutatables(query);
      List<StoredFieldMetadata> additionalFieldsMetadata=queryDoc.getAdditionalFieldsMetadata();
      String sqlText=query.getSqlText();
      if (sqlText != null && !sqlText.isEmpty()) {
        if (query.getFullSqlText() != null && !query.getFullSqlText().isEmpty()) {
          sqlText=query.getFullSqlText();
        }
        try {
          try {
            String compiledSqlText=compileSubqueries(sqlText,model);
            try {
              putParametersMetadata(query,model);
              if (putTableFieldsMetadata(query)) {
                putStoredTableFieldsMetadata(query,additionalFieldsMetadata);
              }
            }
  finally {
              query.setSqlText(compiledSqlText);
            }
          }
 catch (          Exception ex) {
            Fields fields=new Fields();
            Field fMd=new Field(DUMMY_FIELD_NAME,ex.getMessage());
            fields.add(fMd);
            query.setFields(fields);
          }
        }
  finally {
          query.setTitle(appElement.getName());
          query.getFields().setTableDescription(query.getTitle());
        }
      }
      return new ActualCacheEntry<>(query,appElement.getTxtContentLength(),appElement.getTxtCrc32());
    }
 else {
      SqlQuery result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,CONTENT_EMPTY_MSG);
      fields.add(fMd);
      result.setFields(fields);
      return new ActualCacheEntry<>(result,0,0);
    }
  }
 else {
    SqlQuery result=dynamicQueries.get(aAppElementId);
    if (result == null) {
      result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,ABSENT_QUERY_MSG);
      fields.add(fMd);
      result.setFields(fields);
    }
    return new ActualCacheEntry<>(result,0,0);
  }
}",0.9687852576156448
145645,"public void putTableFieldsMetadata(SqlQuery aQuery) throws Exception {
  CCJSqlParserManager parserManager=new CCJSqlParserManager();
  Statement parsedQuery=parserManager.parse(new StringReader(aQuery.getSqlText()));
  if (parsedQuery instanceof Select) {
    Select select=(Select)parsedQuery;
    Map<String,Table> tables=TablesFinder.getTablesMap(TablesFinder.TO_CASE.LOWER,select,false);
    resolveOutputFieldsFromTables(aQuery,select,tables);
  }
}","/** 
 * @param aQuery
 * @return True if query is select query.
 * @throws Exception
 */
public boolean putTableFieldsMetadata(SqlQuery aQuery) throws Exception {
  CCJSqlParserManager parserManager=new CCJSqlParserManager();
  Statement parsedQuery=parserManager.parse(new StringReader(aQuery.getSqlText()));
  if (parsedQuery instanceof Select) {
    Select select=(Select)parsedQuery;
    Map<String,Table> tables=TablesFinder.getTablesMap(TablesFinder.TO_CASE.LOWER,select,false);
    resolveOutputFieldsFromTables(aQuery,select,tables);
    return true;
  }
  return false;
}",0.8579710144927536
145646,"final public Drop Drop() throws ParseException {
  Drop drop=new Drop();
  Token tk=null;
  List dropArgs=new ArrayList();
  List commentArgs=new ArrayList();
  tk=jj_consume_token(K_DROP);
  if (tk.specialToken != null) {
    drop.setComment(tk.specialToken.image);
  }
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_IDENTIFIER:
    tk=jj_consume_token(S_IDENTIFIER);
  break;
case K_TABLE:
tk=jj_consume_token(K_TABLE);
break;
case K_INDEX:
tk=jj_consume_token(K_INDEX);
break;
default :
jj_la1[162]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
drop.setType(tk.image);
if (tk.specialToken != null) {
drop.setTypeComment(tk.specialToken.image);
}
tk=jj_consume_token(S_IDENTIFIER);
if (tk.specialToken != null) {
drop.setNameComment(tk.specialToken.image);
}
drop.setName(tk.image);
label_35: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_IDENTIFIER:
;
break;
default :
jj_la1[163]=jj_gen;
break label_35;
}
tk=jj_consume_token(S_IDENTIFIER);
if (tk.specialToken != null) {
commentArgs.add(tk.specialToken.image);
}
 else {
commentArgs.add(""String_Node_Str"");
}
dropArgs.add(tk.image);
}
if (dropArgs.size() > 0) {
drop.setParameters(dropArgs);
drop.setParametrsComment(commentArgs);
}
{
if (true) return drop;
}
throw new Error(""String_Node_Str"");
}","final public Drop Drop() throws ParseException {
  Drop drop=new Drop();
  Token tk=null;
  List dropArgs=new ArrayList();
  List commentArgs=new ArrayList();
  tk=jj_consume_token(K_DROP);
  if (tk.specialToken != null) {
    drop.setComment(tk.specialToken.image);
  }
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_IDENTIFIER:
    tk=jj_consume_token(S_IDENTIFIER);
  break;
case K_TABLE:
tk=jj_consume_token(K_TABLE);
break;
case K_INDEX:
tk=jj_consume_token(K_INDEX);
break;
default :
jj_la1[162]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
drop.setType(tk.image);
if (tk.specialToken != null) {
drop.setTypeComment(tk.specialToken.image);
}
tk=jj_consume_token(S_IDENTIFIER);
if (tk.specialToken != null) {
drop.setNameComment(tk.specialToken.image);
}
drop.setName(tk.image);
label_35: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_IDENTIFIER:
;
break;
default :
jj_la1[163]=jj_gen;
break label_35;
}
tk=jj_consume_token(S_IDENTIFIER);
if (tk.specialToken != null) {
commentArgs.add(tk.specialToken.image);
}
 else {
commentArgs.add(""String_Node_Str"");
}
dropArgs.add(tk.image);
}
if (dropArgs.size() > 0) {
drop.setParameters(dropArgs);
drop.setParametersComment(commentArgs);
}
{
if (true) return drop;
}
throw new Error(""String_Node_Str"");
}",0.999613750482812
145647,"private Connector convertPath2Connector(Point aStartPoint,Point aEndPoint,List<Vertex<PathFragment>> aPath){
  List<Point> points=new ArrayList<>();
  rleAdd(points,aStartPoint);
  boolean fallback=true;
  if (aPath != null && aPath.size() > 1) {
    fallback=false;
    Point prevPt=aStartPoint;
    Vertex<PathFragment> prevV=aPath.get(0);
    for (int i=1; i < aPath.size(); i++) {
      Vertex<PathFragment> v=aPath.get(i);
      Point pt=new Point();
      calcNextPoint(aStartPoint,aEndPoint,prevV,v,pt);
      Point pt0=new Point(prevPt.x,pt.y);
      rleAdd(points,pt0);
      rleAdd(points,pt);
      prevPt=pt;
      prevV=v;
    }
  }
 else {
    rleAdd(points,new Point((aStartPoint.x + aEndPoint.x) / 2,aStartPoint.y));
    rleAdd(points,new Point((aStartPoint.x + aEndPoint.x) / 2,aEndPoint.y));
  }
  rleAdd(points,aEndPoint);
  Connector connector=pointsToConnector(points);
  connector.setFalled(fallback);
  return connector;
}","private Connector convertPath2Connector(Point aStartPoint,Point aEndPoint,List<Vertex<PathFragment>> aPath){
  List<Point> points=new ArrayList<>();
  rleAdd(points,aStartPoint);
  boolean fallback=true;
  if (aPath != null && aPath.size() > 1) {
    fallback=false;
    Point prevPt=aStartPoint;
    Vertex<PathFragment> prevV=aPath.get(0);
    for (int i=1; i < aPath.size(); i++) {
      Vertex<PathFragment> v=aPath.get(i);
      Point pt=new Point();
      calcNextPoint(aStartPoint,aEndPoint,prevV,v,pt);
      v.attribute.point=pt;
      Point pt0=new Point(prevPt.x,pt.y);
      rleAdd(points,pt0);
      rleAdd(points,pt);
      prevPt=pt;
      prevV=v;
    }
  }
 else {
    rleAdd(points,new Point((aStartPoint.x + aEndPoint.x) / 2,aStartPoint.y));
    rleAdd(points,new Point((aStartPoint.x + aEndPoint.x) / 2,aEndPoint.y));
  }
  rleAdd(points,aEndPoint);
  Connector connector=pointsToConnector(points);
  connector.setFalled(fallback);
  return connector;
}",0.9854014598540146
145648,"protected void preparePaths(){
  if (needRerouteConnectors) {
    Set<Rectangle> obstacles=new HashSet<>();
    for (    EntityView<E> eView : entityViews.values()) {
      obstacles.add(eView.getBounds());
    }
    QuadTree<Vertex<PathFragment>> verticesIndex=new QuadTree<>();
    List<Vertex<PathFragment>> graph=Sweeper.build(getWidth(),getHeight(),obstacles,verticesIndex);
    paths=new Paths(graph,verticesIndex);
  }
}","protected void preparePaths(){
  if (needRerouteConnectors) {
    Set<Rectangle> obstacles=new HashSet<>();
    for (    EntityView<E> eView : entityViews.values()) {
      obstacles.add(eView.getBounds());
    }
    QuadTree<Vertex<PathFragment>> verticesIndex=new QuadTree<>();
    graph=Sweeper.build(getWidth(),getHeight(),obstacles,verticesIndex);
    paths=new Paths(graph,verticesIndex);
  }
}",0.9673518742442564
145649,"@Override protected void paintChildren(Graphics g){
  super.paintChildren(g);
  if (g instanceof Graphics2D) {
    Graphics2D g2d=(Graphics2D)g;
    paintConnectors(g2d,model.getRelations(),connectorsStroke);
    Color old2FieldColor=toFieldConnectorColor;
    toFieldConnectorColor=toFieldConnectorColor.darker();
    Color old2ParameterColor=toParameterConnectorColor;
    toParameterConnectorColor=toParameterConnectorColor.darker();
    try {
      paintConnectors(g2d,selectedRelations,selectedConnectorsStroke);
      paintConnectors(g2d,hittedRelations,hittedConnectorsStroke);
    }
  finally {
      toFieldConnectorColor=old2FieldColor;
      toParameterConnectorColor=old2ParameterColor;
    }
  }
}","@Override protected void paintChildren(Graphics g){
  if (routingDebug) {
    Color oldColor=g.getColor();
    try {
      for (      EntityView<?> eView : entityViews.values()) {
        Rectangle o=eView.getBounds();
        g.setColor(obstaclesColor);
        g.fillRect(o.x,o.y,o.width,o.height);
        g.setColor(obstaclesColor.brighter());
        g.drawRect(o.x,o.y,o.width,o.height);
      }
      if (graph != null) {
        for (        Vertex<PathFragment> vertex : graph) {
          g.setColor(spaceColor);
          g.fillRect(vertex.attribute.rect.x,vertex.attribute.rect.y,vertex.attribute.rect.width,vertex.attribute.rect.height);
          g.setColor(spaceColor.brighter().brighter());
          g.drawRect(vertex.attribute.rect.x,vertex.attribute.rect.y,vertex.attribute.rect.width,vertex.attribute.rect.height);
        }
        for (        Vertex<PathFragment> vertex : graph) {
          for (          Vertex<PathFragment> ajacent : vertex.getAjacent()) {
            g.setColor(edgeColor);
            Rectangle startRect=vertex.attribute.rect;
            Rectangle endRect=ajacent.attribute.rect;
            g.drawLine(startRect.x + startRect.width / 2,startRect.y + startRect.height / 2,endRect.x + endRect.width / 2,endRect.y + endRect.height / 2);
          }
        }
      }
    }
  finally {
      g.setColor(oldColor);
    }
  }
  super.paintChildren(g);
  if (g instanceof Graphics2D) {
    Graphics2D g2d=(Graphics2D)g;
    paintConnectors(g2d,model.getRelations(),connectorsStroke);
    Color old2FieldColor=toFieldConnectorColor;
    toFieldConnectorColor=toFieldConnectorColor.darker();
    Color old2ParameterColor=toParameterConnectorColor;
    toParameterConnectorColor=toParameterConnectorColor.darker();
    try {
      paintConnectors(g2d,selectedRelations,selectedConnectorsStroke);
      paintConnectors(g2d,hittedRelations,hittedConnectorsStroke);
    }
  finally {
      toFieldConnectorColor=old2FieldColor;
      toParameterConnectorColor=old2ParameterColor;
    }
  }
}",0.5188162221410303
145650,"/** 
 * Sets client type to be run.
 * @param aValue ClientType instance
 */
public void setRunClientType(ClientType aValue){
  ClientType oldValue=getRunClientType();
  projectPrivateProperties.setProperty(CLIENT_TYPE_KEY,aValue.getId());
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(CLIENT_TYPE_KEY,aValue,oldValue);
}","/** 
 * Sets client type to be run.
 * @param aValue ClientType instance
 */
public void setRunClientType(ClientType aValue){
  ClientType oldValue=getRunClientType();
  if (aValue != null) {
    projectPrivateProperties.setProperty(CLIENT_TYPE_KEY,aValue.getId());
  }
 else {
    projectPrivateProperties.remove(CLIENT_TYPE_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(CLIENT_TYPE_KEY,aValue,oldValue);
}",0.8793969849246231
145651,"/** 
 * Sets optional parameters provided to Platypus Application Server.
 * @param aValue
 */
public void setServerOptions(String aValue){
  String oldValue=getRunServerOptions();
  projectPrivateProperties.setProperty(RUN_SERVER_OPTIONS_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_SERVER_OPTIONS_KEY,oldValue,aValue);
}","/** 
 * Sets optional parameters provided to Platypus Application Server.
 * @param aValue
 */
public void setServerOptions(String aValue){
  String oldValue=getRunServerOptions();
  if (aValue != null) {
    projectPrivateProperties.setProperty(RUN_SERVER_OPTIONS_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(RUN_SERVER_OPTIONS_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_SERVER_OPTIONS_KEY,oldValue,aValue);
}",0.8775267538644471
145652,"/** 
 * Sets the project's display name.
 * @param aValue title for the project
 */
public void setDisplayName(String aValue){
  String oldValue=getDisplayName();
  projectProperties.setProperty(PROJECT_DISPLAY_NAME_KEY,aValue);
  projectPropertiesIsDirty=true;
  changeSupport.firePropertyChange(PROJECT_DISPLAY_NAME_KEY,oldValue,aValue);
}","/** 
 * Sets the project's display name.
 * @param aValue title for the project
 */
public void setDisplayName(String aValue){
  if (aValue == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String oldValue=getDisplayName();
  projectProperties.setProperty(PROJECT_DISPLAY_NAME_KEY,aValue);
  projectPropertiesIsDirty=true;
  changeSupport.firePropertyChange(PROJECT_DISPLAY_NAME_KEY,oldValue,aValue);
}",0.8915032679738563
145653,"/** 
 * Sets username for the Platypus user to login on application run.
 * @param aValue Platypus user name
 */
public void setRunUser(String aValue){
  String oldValue=getRunUser();
  projectPrivateProperties.setProperty(RUN_USER_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_USER_KEY,oldValue,aValue);
}","/** 
 * Sets username for the Platypus user to login on application run.
 * @param aValue Platypus user name
 */
public void setRunUser(String aValue){
  String oldValue=getRunUser();
  if (aValue != null) {
    projectPrivateProperties.setProperty(RUN_USER_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(RUN_USER_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_USER_KEY,oldValue,aValue);
}",0.8833124215809285
145654,"/** 
 * Sets optional parameters provided to Platypus Client.
 * @param aValue
 */
public void setClientOptions(String aValue){
  String oldValue=getRunClientOptions();
  projectPrivateProperties.setProperty(RUN_CLIENT_OPTIONS_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_CLIENT_OPTIONS_KEY,oldValue,aValue);
}","/** 
 * Sets optional parameters provided to Platypus Client.
 * @param aValue
 */
public void setClientOptions(String aValue){
  String oldValue=getRunClientOptions();
  if (aValue != null) {
    projectPrivateProperties.setProperty(RUN_CLIENT_OPTIONS_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(RUN_CLIENT_OPTIONS_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_CLIENT_OPTIONS_KEY,oldValue,aValue);
}",0.8739290085679314
145655,"/** 
 * Sets application's server host.
 * @param aValue Url string
 */
public void setClientUrl(String aValue){
  String oldValue=getClientUrl();
  projectPrivateProperties.setProperty(CLIENT_URL_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(CLIENT_URL_KEY,oldValue,aValue);
}","/** 
 * Sets application's server host.
 * @param aValue Url string
 */
public void setClientUrl(String aValue){
  String oldValue=getClientUrl();
  if (aValue != null) {
    projectPrivateProperties.setProperty(CLIENT_URL_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(CLIENT_URL_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(CLIENT_URL_KEY,oldValue,aValue);
}",0.8703956343792633
145656,"/** 
 * Sets if security realm to be configured on J2EE server startup.
 * @param aValue true to enable configure security realm 
 */
public void setSecurityRealmEnabled(boolean aValue){
  boolean oldValue=isWebSecurityEnabled();
  projectPrivateProperties.setProperty(ENABLE_SECURITY_REALM_KEY,Boolean.valueOf(aValue).toString());
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(ENABLE_SECURITY_REALM_KEY,oldValue,aValue);
}","/** 
 * Sets if security realm to be configured on J2EE server startup.
 * @param aValue true to enable configure security realm
 */
public void setSecurityRealmEnabled(boolean aValue){
  boolean oldValue=isWebSecurityEnabled();
  projectPrivateProperties.setProperty(ENABLE_SECURITY_REALM_KEY,Boolean.valueOf(aValue).toString());
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(ENABLE_SECURITY_REALM_KEY,oldValue,aValue);
}",0.9988925802879292
145657,"/** 
 * Sets application's context name.
 * @param aValue The name of the context string
 */
public void setServerContext(String aValue){
  String oldValue=getServerContext();
  projectProperties.setProperty(SERVER_CONTEXT_KEY,aValue);
  projectPropertiesIsDirty=true;
  changeSupport.firePropertyChange(SERVER_CONTEXT_KEY,oldValue,aValue);
}","/** 
 * Sets application's context name.
 * @param aValue The name of the context string
 */
public void setServerContext(String aValue){
  String oldValue=getServerContext();
  if (aValue != null) {
    projectProperties.setProperty(SERVER_CONTEXT_KEY,aValue);
  }
 else {
    projectProperties.remove(SERVER_CONTEXT_KEY);
  }
  projectPropertiesIsDirty=true;
  changeSupport.firePropertyChange(SERVER_CONTEXT_KEY,oldValue,aValue);
}",0.8814432989690721
145658,"/** 
 * Sets password for the Platypus user to login on application run.
 * @param aValue Platypus user name
 */
public void setRunPassword(String aValue){
  String oldValue=getRunPassword();
  projectPrivateProperties.setProperty(RUN_PASSWORD_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_PASSWORD_KEY,oldValue,aValue);
}","/** 
 * Sets password for the Platypus user to login on application run.
 * @param aValue Platypus user name
 */
public void setRunPassword(String aValue){
  String oldValue=getRunPassword();
  if (aValue != null) {
    projectPrivateProperties.setProperty(RUN_PASSWORD_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(RUN_PASSWORD_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_PASSWORD_KEY,oldValue,aValue);
}",0.8835534213685474
145659,"/** 
 * Sets application server type to be run.
 * @param aValue AppServerType instance
 */
public void setRunAppServerType(AppServerType aValue){
  AppServerType oldValue=getRunAppServerType();
  projectPrivateProperties.setProperty(SERVER_TYPE_KEY,aValue.getId());
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(SERVER_TYPE_KEY,aValue,oldValue);
}","/** 
 * Sets application server type to be run.
 * @param aValue AppServerType instance
 */
public void setRunAppServerType(AppServerType aValue){
  AppServerType oldValue=getRunAppServerType();
  if (aValue != null) {
    projectPrivateProperties.setProperty(SERVER_TYPE_KEY,aValue.getId());
  }
 else {
    projectPrivateProperties.remove(SERVER_TYPE_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(SERVER_TYPE_KEY,aValue,oldValue);
}",0.8870588235294118
145660,"/** 
 * Sets JVM options provided to Platypus Application Server.
 * @param aValue
 */
public void setServerVmOptions(String aValue){
  String oldValue=getRunServerVmOptions();
  projectPrivateProperties.setProperty(RUN_SERVER_VM_OPTIONS_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_SERVER_VM_OPTIONS_KEY,oldValue,aValue);
}","/** 
 * Sets JVM options provided to Platypus Application Server.
 * @param aValue
 */
public void setServerVmOptions(String aValue){
  String oldValue=getRunServerVmOptions();
  if (aValue != null) {
    projectPrivateProperties.setProperty(RUN_SERVER_VM_OPTIONS_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(RUN_SERVER_VM_OPTIONS_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_SERVER_VM_OPTIONS_KEY,oldValue,aValue);
}",0.875
145661,"/** 
 * Sets J2EE server instance ID.
 * @param aValue J2EE server ID
 */
public void setJ2eeServerId(String aValue){
  String oldValue=getJ2eeServerId();
  projectPrivateProperties.setProperty(J2EE_SERVER_ID_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(J2EE_SERVER_ID_KEY,aValue,oldValue);
}","/** 
 * Sets J2EE server instance ID.
 * @param aValue J2EE server ID
 */
public void setJ2eeServerId(String aValue){
  String oldValue=getJ2eeServerId();
  if (aValue != null) {
    projectPrivateProperties.setProperty(J2EE_SERVER_ID_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(J2EE_SERVER_ID_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(J2EE_SERVER_ID_KEY,aValue,oldValue);
}",0.871261378413524
145662,"/** 
 * Sets JVM options provided to Platypus Client.
 * @param aValue
 */
public void setClientVmOptions(String aValue){
  String oldValue=getRunClientVmOptions();
  projectPrivateProperties.setProperty(RUN_CLIENT_VM_OPTIONS_KEY,aValue);
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_CLIENT_VM_OPTIONS_KEY,oldValue,aValue);
}","/** 
 * Sets JVM options provided to Platypus Client.
 * @param aValue
 */
public void setClientVmOptions(String aValue){
  String oldValue=getRunClientVmOptions();
  if (aValue != null) {
    projectPrivateProperties.setProperty(RUN_CLIENT_VM_OPTIONS_KEY,aValue);
  }
 else {
    projectPrivateProperties.remove(RUN_CLIENT_VM_OPTIONS_KEY);
  }
  projectPrivatePropertiesIsDirty=true;
  changeSupport.firePropertyChange(RUN_CLIENT_VM_OPTIONS_KEY,oldValue,aValue);
}",0.8713592233009708
145663,"/** 
 * Checks if security realm to be configured on J2EE server startup.
 * @return true to enable configure security realm 
 */
public boolean isWebSecurityEnabled(){
  return Boolean.valueOf(projectPrivateProperties.get(ENABLE_SECURITY_REALM_KEY));
}","/** 
 * Checks if security realm to be configured on J2EE server startup.
 * @return true to enable configure security realm
 */
public boolean isWebSecurityEnabled(){
  return Boolean.valueOf(projectPrivateProperties.get(ENABLE_SECURITY_REALM_KEY));
}",0.998019801980198
145664,"@ScriptFunction(jsDocText=""String_Node_Str"") public synchronized Scriptable createEntity(String aDbId,String aSqlText) throws Exception {
  if (client == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ApplicationDbEntity modelEntity=newGenericEntity();
  modelEntity.setName(USER_DATASOURCE_NAME);
  SqlQuery query=new SqlQuery(client,aDbId,aSqlText);
  query.setEntityId(String.valueOf(IDGenerator.genID()));
  modelEntity.setQuery(query);
  StoredQueryFactory factory=new StoredQueryFactory(client,true);
  factory.putTableFieldsMetadata(query);
  return modelEntity.defineProperties();
}","@ScriptFunction(jsDocText=""String_Node_Str"") public synchronized Scriptable createEntity(String aSqlText,String aDbId) throws Exception {
  if (client == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  ApplicationDbEntity modelEntity=newGenericEntity();
  modelEntity.setName(USER_DATASOURCE_NAME);
  SqlQuery query=new SqlQuery(client,aDbId,aSqlText);
  query.setEntityId(String.valueOf(IDGenerator.genID()));
  modelEntity.setQuery(query);
  StoredQueryFactory factory=new StoredQueryFactory(client,true);
  factory.putTableFieldsMetadata(query);
  return modelEntity.defineProperties();
}",0.9738562091503268
145665,"@ScriptFunction(jsDocText=""String_Node_Str"") public void executeSql(String aDbId,String aSqlClause) throws Exception {
  if (client == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  SqlCompiledQuery compiled=new SqlCompiledQuery(client,aDbId,aSqlClause);
  client.executeUpdate(compiled);
}","@ScriptFunction(jsDocText=""String_Node_Str"") public void executeSql(String aSqlClause,String aDbId) throws Exception {
  if (client == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  SqlCompiledQuery compiled=new SqlCompiledQuery(client,aDbId,aSqlClause);
  client.executeUpdate(compiled);
}",0.9423076923076924
145666,"public Object getJsObject(int colIndex) throws Exception {
  return Utils.toJs(getObject(colIndex));
}","public Object getJsObject(String aFieldName) throws Exception {
  return Utils.toJs(getObject(fields.find(aFieldName)));
}",0.8214285714285714
145667,"public void updateJsObject(int colIndex,Object aValue) throws Exception {
  updateObject(colIndex,Utils.toJava(aValue));
}","public void updateJsObject(String aFieldName,Object aValue) throws Exception {
  updateObject(fields.find(aFieldName),Utils.toJava(aValue));
}",0.8484848484848485
145668,"@Override public void resolve2Application(Field aField){
}","@Override public void resolve2Application(Field aField){
  if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
    if (aField.getTypeInfo().getSqlType() == java.sql.Types.CLOB || aField.getTypeInfo().getSqlType() == java.sql.Types.NCLOB) {
      aField.setTypeInfo(DataTypeInfo.CLOB.copy());
    }
 else {
      aField.setTypeInfo(DataTypeInfo.BLOB.copy());
    }
  }
}",0.2510822510822511
145669,"@Override public void resolve2Application(Field aField){
}","@Override public void resolve2Application(Field aField){
  if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
    if (aField.getTypeInfo().getSqlType() == java.sql.Types.CLOB || aField.getTypeInfo().getSqlType() == java.sql.Types.NCLOB) {
      aField.setTypeInfo(DataTypeInfo.CLOB.copy());
    }
 else {
      aField.setTypeInfo(DataTypeInfo.BLOB.copy());
    }
  }
}",0.2510822510822511
145670,"@Override public void resolve2Application(Field aField){
}","@Override public void resolve2Application(Field aField){
  if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
    if (aField.getTypeInfo().getSqlType() == java.sql.Types.CLOB || aField.getTypeInfo().getSqlType() == java.sql.Types.NCLOB) {
      aField.setTypeInfo(DataTypeInfo.CLOB.copy());
    }
 else {
      aField.setTypeInfo(DataTypeInfo.BLOB.copy());
    }
  }
}",0.2510822510822511
145671,"@Override public void resolve2Application(Field aField){
  if (aField != null) {
    if (aField.getTypeInfo().getSqlTypeName().contains(""String_Node_Str"")) {
      aField.getTypeInfo().setSqlType(java.sql.Types.STRUCT);
      aField.getTypeInfo().setSqlTypeName(""String_Node_Str"");
      aField.getTypeInfo().setJavaClassName(Geometry.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.NUMERIC)) {
      aField.getTypeInfo().setJavaClassName(BigDecimal.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.VARCHAR)) {
      aField.getTypeInfo().setJavaClassName(String.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BOOLEAN)) {
      aField.getTypeInfo().setJavaClassName(Boolean.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.DATE)) {
      aField.getTypeInfo().setJavaClassName(java.util.Date.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
      if (aField.getTypeInfo().getSqlType() == java.sql.Types.CLOB || aField.getTypeInfo().getSqlType() == java.sql.Types.NCLOB) {
        aField.getTypeInfo().setSqlType(java.sql.Types.CLOB);
        aField.getTypeInfo().setJavaClassName(CompactClob.class.getName());
      }
 else {
        if (aField.getTypeInfo().getSqlType() == java.sql.Types.BINARY || aField.getTypeInfo().getSqlType() == java.sql.Types.VARBINARY) {
          aField.getTypeInfo().setSqlType(java.sql.Types.VARBINARY);
          aField.getTypeInfo().setJavaClassName(CompactBlob.class.getName());
        }
 else         if (aField.getTypeInfo().getSqlType() == java.sql.Types.LONGVARBINARY) {
          aField.getTypeInfo().setSqlType(java.sql.Types.LONGVARBINARY);
          aField.getTypeInfo().setJavaClassName(CompactBlob.class.getName());
        }
 else {
          aField.getTypeInfo().setSqlType(java.sql.Types.BLOB);
          aField.getTypeInfo().setJavaClassName(CompactBlob.class.getName());
        }
      }
    }
    if (aField.getTypeInfo().getSqlType() == java.sql.Types.OTHER) {
      String lTypeName=aField.getTypeInfo().getSqlTypeName();
      if (lTypeName != null && !lTypeName.isEmpty()) {
switch (lTypeName) {
case ""String_Node_Str"":
          aField.getTypeInfo().setSqlType(java.sql.Types.NVARCHAR);
        aField.getTypeInfo().setJavaClassName(String.class.getName());
      break;
case ""String_Node_Str"":
    aField.getTypeInfo().setSqlType(java.sql.Types.VARCHAR);
  aField.getTypeInfo().setJavaClassName(String.class.getName());
break;
}
}
}
}
}","@Override public void resolve2Application(Field aField){
  if (aField != null) {
    if (aField.getTypeInfo().getSqlTypeName().contains(""String_Node_Str"")) {
      aField.getTypeInfo().setSqlType(java.sql.Types.STRUCT);
      aField.getTypeInfo().setSqlTypeName(""String_Node_Str"");
      aField.getTypeInfo().setJavaClassName(Geometry.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.NUMERIC)) {
      aField.getTypeInfo().setJavaClassName(BigDecimal.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.VARCHAR)) {
      aField.getTypeInfo().setJavaClassName(String.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BOOLEAN)) {
      aField.getTypeInfo().setJavaClassName(Boolean.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.DATE)) {
      aField.getTypeInfo().setJavaClassName(java.util.Date.class.getName());
    }
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
      if (aField.getTypeInfo().getSqlType() == java.sql.Types.CLOB || aField.getTypeInfo().getSqlType() == java.sql.Types.NCLOB) {
        aField.setTypeInfo(DataTypeInfo.CLOB.copy());
      }
 else {
        aField.setTypeInfo(DataTypeInfo.BLOB.copy());
      }
    }
    if (aField.getTypeInfo().getSqlType() == java.sql.Types.OTHER) {
      String lTypeName=aField.getTypeInfo().getSqlTypeName();
      if (lTypeName != null && !lTypeName.isEmpty()) {
switch (lTypeName) {
case ""String_Node_Str"":
          aField.getTypeInfo().setSqlType(java.sql.Types.NVARCHAR);
        aField.getTypeInfo().setJavaClassName(String.class.getName());
      break;
case ""String_Node_Str"":
    aField.getTypeInfo().setSqlType(java.sql.Types.VARCHAR);
  aField.getTypeInfo().setJavaClassName(String.class.getName());
break;
}
}
}
}
}",0.8121499353726842
145672,"@Override public void resolve2Application(Field aField){
  if (aField != null) {
    int lSize=aField.getSize();
    int size=lSize >> 16;
    int scale=(lSize << 16) >> 16;
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.VARCHAR)) {
      aField.setSize(Math.max(0,scale));
      aField.setScale(0);
      aField.setPrecision(0);
    }
 else     if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
      aField.setTypeInfo(DataTypeInfo.BLOB);
      aField.setSize(Math.max(0,size));
    }
 else {
      aField.setSize(Math.max(0,size));
      if (scale > 0) {
        aField.setScale(scale);
        aField.setPrecision(scale);
      }
 else {
        aField.setScale(0);
        aField.setPrecision(0);
      }
    }
  }
}","@Override public void resolve2Application(Field aField){
  if (aField != null) {
    int lSize=aField.getSize();
    int size=lSize >> 16;
    int scale=(lSize << 16) >> 16;
    if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.VARCHAR)) {
      aField.setSize(Math.max(0,scale));
      aField.setScale(0);
      aField.setPrecision(0);
    }
 else     if (SQLUtils.isSameTypeGroup(aField.getTypeInfo().getSqlType(),java.sql.Types.BLOB)) {
      if (aField.getTypeInfo().getSqlType() == java.sql.Types.CLOB || aField.getTypeInfo().getSqlType() == java.sql.Types.NCLOB) {
        aField.setTypeInfo(DataTypeInfo.CLOB.copy());
      }
 else {
        aField.setTypeInfo(DataTypeInfo.BLOB.copy());
      }
    }
 else {
      aField.setSize(Math.max(0,size));
      if (scale > 0) {
        aField.setScale(scale);
        aField.setPrecision(scale);
      }
 else {
        aField.setScale(0);
        aField.setPrecision(0);
      }
    }
  }
}",0.8356009070294784
145673,"public void startDownloadRequest(String aUrlPrefix,final int aRequestType,Map<String,String> aParams,RequestBuilder.Method aMethod) throws Exception {
  com.google.gwt.dom.client.Document doc=com.google.gwt.dom.client.Document.get();
  FormElement frm=doc.createFormElement();
  frm.setMethod(aMethod.toString());
  frm.setAction(APPLICATION_URI + aUrlPrefix);
  Iterator<Entry<String,String>> itr=aParams.entrySet().iterator();
  while (itr.hasNext()) {
    Entry<String,String> ent=itr.next();
    InputElement text=doc.createHiddenInputElement();
    text.setValue(ent.getValue());
    text.setName(ent.getKey());
    frm.appendChild(text);
  }
  InputElement text=doc.createHiddenInputElement();
  text.setValue(String.valueOf(aRequestType));
  text.setName(PlatypusHttpRequestParams.TYPE);
  frm.appendChild(text);
  frm.submit();
  frm.removeFromParent();
}","public void startDownloadRequest(String aUrlPrefix,final int aRequestType,Map<String,String> aParams,RequestBuilder.Method aMethod) throws Exception {
  com.google.gwt.dom.client.Document doc=com.google.gwt.dom.client.Document.get();
  FormElement frm=doc.createFormElement();
  frm.setMethod(aMethod.toString());
  frm.setAction(baseUrl + aUrlPrefix);
  for (  Entry<String,String> ent : aParams.entrySet()) {
    InputElement text=doc.createHiddenInputElement();
    text.setValue(ent.getValue());
    text.setName(ent.getKey());
    frm.appendChild(text);
  }
  InputElement text=doc.createHiddenInputElement();
  text.setValue(String.valueOf(aRequestType));
  text.setName(PlatypusHttpRequestParams.TYPE);
  frm.appendChild(text);
  frm.submit();
  frm.removeFromParent();
}",0.9018890920170628
145674,"private boolean consoleLogin() throws Exception {
  try {
    if (user == null || user.isEmpty() || password == null) {
      throw new Exception(BAD_APP_CREDENTIALS_MSG + ""String_Node_Str"");
    }
    EasSettings settings=EasSettings.createInstance(url);
    if (settings instanceof DbConnectionSettings) {
      if (dbUser == null || dbUser.isEmpty() || dbPassword == null || dbPassword.length == 0 || dbSchema == null || dbSchema.isEmpty()) {
        throw new Exception(BAD_DB_CREDENTIALS_MSG + ""String_Node_Str"");
      }
      settings.getInfo().put(ClientConstants.DB_CONNECTION_USER_PROP_NAME,dbUser);
      settings.getInfo().put(ClientConstants.DB_CONNECTION_PASSWORD_PROP_NAME,dbPassword);
      settings.getInfo().put(ClientConstants.DB_CONNECTION_SCHEMA_PROP_NAME,dbSchema);
      if (appPath != null) {
        ((DbConnectionSettings)settings).setApplicationPath(appPath);
      }
    }
    Client lclient=ClientFactory.getInstance(settings);
    try {
      return appLogin(lclient,user,password);
    }
 catch (    Exception ex) {
      lclient.shutdown();
      throw ex;
    }
  }
  finally {
    dbUser=null;
    dbSchema=null;
    dbPassword=null;
    user=null;
    password=null;
  }
}","private boolean consoleLogin() throws Exception {
  try {
    if (user == null || user.isEmpty() || password == null) {
      throw new Exception(BAD_APP_CREDENTIALS_MSG + ""String_Node_Str"");
    }
    EasSettings settings=EasSettings.createInstance(url);
    if (settings instanceof DbConnectionSettings) {
      if (dbUser == null || dbUser.isEmpty() || dbPassword == null || dbPassword.length == 0 || dbSchema == null || dbSchema.isEmpty()) {
        throw new Exception(BAD_DB_CREDENTIALS_MSG + ""String_Node_Str"");
      }
      settings.getInfo().put(ClientConstants.DB_CONNECTION_USER_PROP_NAME,dbUser);
      settings.getInfo().put(ClientConstants.DB_CONNECTION_PASSWORD_PROP_NAME,new String(dbPassword));
      settings.getInfo().put(ClientConstants.DB_CONNECTION_SCHEMA_PROP_NAME,dbSchema);
      if (appPath != null) {
        ((DbConnectionSettings)settings).setApplicationPath(appPath);
      }
    }
    Client lclient=ClientFactory.getInstance(settings);
    try {
      return appLogin(lclient,user,password);
    }
 catch (    Exception ex) {
      lclient.shutdown();
      throw ex;
    }
  }
  finally {
    dbUser=null;
    dbSchema=null;
    dbPassword=null;
    user=null;
    password=null;
  }
}",0.9868095630667766
145675,"@Override public int convertRowIndexToModel(int index){
  if (isSorted()) {
    return viewToModel[index];
  }
 else {
    return index;
  }
}","@Override public int convertRowIndexToModel(int index){
  if (viewToModel != null && index >= 0 && index < viewToModel.length) {
    if (isSorted()) {
      return viewToModel[index];
    }
 else {
      return index;
    }
  }
 else {
    return index;
  }
}",0.6932668329177057
145676,"@Override public int convertRowIndexToView(int index){
  if (isSorted()) {
    return modelToView[index];
  }
 else {
    return index;
  }
}","@Override public int convertRowIndexToView(int index){
  if (modelToView != null && index >= 0 && index < modelToView.length) {
    if (isSorted()) {
      return modelToView[index];
    }
 else {
      return index;
    }
  }
 else {
    return index;
  }
}",0.6917293233082706
145677,"private HeaderGroupConfig processColumn(Element aTag,int deepness) throws Exception {
  String name=aTag.getAttribute(""String_Node_Str"");
  String title=aTag.getAttribute(""String_Node_Str"");
  boolean visible=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  boolean enabled=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  boolean substitute=Utils.getBooleanAttribute(aTag,""String_Node_Str"",false);
  boolean plain=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  int width=Utils.getIntegerAttribute(aTag,""String_Node_Str"",50);
  Element cellTag=null;
  ModelElementRef modelElement=null;
  Element controlTag=null;
  ModelElementRef columnsDatasource=null;
  ModelElementRef columnsDisplayField=null;
  ModelElementRef cellsDatasource=null;
  Element headerEasFontTag=null;
  Element styleTag=null;
  int childrenCount=0;
  int subgroupsCount=0;
  List<HeaderGroupConfig> subGroups=new ArrayList();
  NodeList columnNodes=aTag.getChildNodes();
  for (int c=0; c < columnNodes.getLength(); c++) {
    if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     cellTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     modelElement=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     controlTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     columnsDatasource=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     columnsDisplayField=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     cellsDatasource=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     headerEasFontTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     styleTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName())) {
      childrenCount++;
      HeaderGroupConfig subGroup=processColumn((Element)columnNodes.item(c),deepness + 1);
      subGroups.add(subGroup);
      if (subGroup == null) {
        if (childrenCount == 1) {
          currentLeavesCount=leaves.size();
        }
      }
 else       subgroupsCount++;
    }
  }
  if (childrenCount > 0) {
    HeaderGroupConfig group=new HeaderGroupConfig((title != null && !title.isEmpty()) ? title : name);
    groups.add(group);
    group.setRow(deepness);
    if (subgroupsCount > 0)     group.setColumn(subGroups.get(0).getColumn());
 else     group.setColumn(currentLeavesCount - 1);
    group.setRowspan(1);
    int colSpan=0;
    for (    HeaderGroupConfig subGroup : subGroups) {
      if (subGroup == null)       colSpan++;
 else       colSpan+=subGroup.getColspan();
    }
    group.setColspan(colSpan);
    return group;
  }
 else {
    ColumnConfig<Row,?> cc=configureColumn(name,title,width,modelElement,aTag,controlTag);
    if (cc != null) {
      cc.setHidden(!visible);
    }
    return null;
  }
}","private HeaderGroupConfig processColumn(Element aTag,int deepness) throws Exception {
  String name=aTag.getAttribute(""String_Node_Str"");
  String title=aTag.getAttribute(""String_Node_Str"");
  boolean visible=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  boolean enabled=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  boolean substitute=Utils.getBooleanAttribute(aTag,""String_Node_Str"",false);
  boolean plain=Utils.getBooleanAttribute(aTag,""String_Node_Str"",true);
  int width=Utils.getIntegerAttribute(aTag,""String_Node_Str"",50);
  Element cellTag=null;
  ModelElementRef modelElement=null;
  Element controlTag=null;
  ModelElementRef columnsDatasource=null;
  ModelElementRef columnsDisplayField=null;
  ModelElementRef cellsDatasource=null;
  Element headerEasFontTag=null;
  Element styleTag=null;
  int childrenCount=0;
  int subgroupsCount=0;
  List<HeaderGroupConfig> subGroups=new ArrayList();
  NodeList columnNodes=aTag.getChildNodes();
  int _currentLeavesCount=0;
  for (int c=0; c < columnNodes.getLength(); c++) {
    if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     cellTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     modelElement=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     controlTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     columnsDatasource=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     columnsDisplayField=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     cellsDatasource=new ModelElementRef((Element)columnNodes.item(c),model);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     headerEasFontTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName()))     styleTag=(Element)columnNodes.item(c);
 else     if (""String_Node_Str"".equalsIgnoreCase(columnNodes.item(c).getNodeName())) {
      if (_currentLeavesCount == 0)       _currentLeavesCount=currentLeavesCount;
      childrenCount++;
      HeaderGroupConfig subGroup=processColumn((Element)columnNodes.item(c),deepness + 1);
      subGroups.add(subGroup);
      if (subGroup != null)       subgroupsCount++;
    }
  }
  if (childrenCount > 0) {
    HeaderGroupConfig group=new HeaderGroupConfig((title != null && !title.isEmpty()) ? title : name);
    groups.add(group);
    group.setRow(deepness);
    group.setColumn(_currentLeavesCount);
    group.setRowspan(1);
    int colSpan=0;
    for (    HeaderGroupConfig subGroup : subGroups) {
      if (subGroup == null)       colSpan++;
 else       colSpan+=subGroup.getColspan();
    }
    group.setColspan(colSpan);
    return group;
  }
 else {
    currentLeavesCount++;
    ColumnConfig<Row,?> cc=configureColumn(name,title,width,modelElement,aTag,controlTag);
    if (cc != null) {
      cc.setHidden(!visible);
    }
    return null;
  }
}",0.8703563305534496
145678,"private boolean guiLogin() throws Exception {
  LoginFrame frame=new LoginFrame(url,dbSchema,dbUser,dbPassword,user,password,new LoginCallback(){
    @Override public boolean tryToLogin(    EasSettings aSettings,    String aDbUser,    char[] aDbPassword,    String aUserName,    char[] aAppPassword) throws Exception {
      EasSettings lsettings=aSettings;
      if (aSettings instanceof DbConnectionSettings) {
        if (aDbUser == null || aDbUser.isEmpty() || aDbPassword == null || aDbPassword.length == 0) {
          throw new Exception(BAD_DB_CREDENTIALS_MSG);
        }
        DbConnectionSettings dbSettings=new DbConnectionSettings();
        dbSettings.setName(((DbConnectionSettings)aSettings).getName());
        dbSettings.setDrivers(((DbConnectionSettings)aSettings).getDrivers());
        dbSettings.setUrl(((DbConnectionSettings)aSettings).getUrl());
        dbSettings.getInfo().putAll(((DbConnectionSettings)aSettings).getInfo());
        dbSettings.getInfo().put(ClientConstants.DB_CONNECTION_USER_PROP_NAME,aDbUser);
        dbSettings.getInfo().put(ClientConstants.DB_CONNECTION_PASSWORD_PROP_NAME,new String(aDbPassword));
        if (appPath != null) {
          dbSettings.setApplicationPath(appPath);
        }
        lsettings=dbSettings;
      }
      Client lclient=ClientFactory.getInstance(lsettings);
      try {
        return appLogin(lclient,aUserName,aAppPassword);
      }
 catch (      Exception ex) {
        lclient.shutdown();
        throw ex;
      }
    }
  }
);
  Preferences settingsNode=Preferences.userRoot().node(ClientFactory.SETTINGS_NODE);
  frame.addExceptionListener(this);
  frame.selectDefaultSettings();
  frame.setDbPassword(settingsNode.get(ClientFactory.DEFAULT_CONNECTION_DB_PASSWORD,""String_Node_Str""));
  frame.setUserPassword(settingsNode.get(ClientFactory.DEFAULT_CONNECTION_USER_PASSWORD,""String_Node_Str""));
  frame.setVisible(true);
  int retValue=frame.getReturnStatus();
  frame.dispose();
  settingsNode.putInt(ClientFactory.DEFAULT_CONNECTION_INDEX_SETTING,frame.getSelectedConnectionIndex());
  if (retValue == LoginFrame.RET_OK) {
    if (frame.getDbPassword() != null) {
      settingsNode.put(ClientFactory.DEFAULT_CONNECTION_DB_PASSWORD,frame.getDbPassword());
    }
 else {
      settingsNode.remove(ClientFactory.DEFAULT_CONNECTION_DB_PASSWORD);
    }
    if (frame.getUserPassword() != null) {
      settingsNode.put(ClientFactory.DEFAULT_CONNECTION_USER_PASSWORD,frame.getUserPassword());
    }
 else {
      settingsNode.remove(ClientFactory.DEFAULT_CONNECTION_USER_PASSWORD);
    }
  }
  return retValue == LoginFrame.RET_OK;
}","private boolean guiLogin() throws Exception {
  LoginFrame frame=new LoginFrame(url,dbSchema,dbUser,dbPassword,user,password,new LoginCallback(){
    @Override public boolean tryToLogin(    EasSettings aSettings,    String aDbUser,    char[] aDbPassword,    String aUserName,    char[] aAppPassword) throws Exception {
      EasSettings lsettings=aSettings;
      if (aSettings instanceof DbConnectionSettings) {
        if (aDbUser == null || aDbUser.isEmpty() || aDbPassword == null || aDbPassword.length == 0) {
          throw new Exception(BAD_DB_CREDENTIALS_MSG);
        }
        DbConnectionSettings dbSettings=new DbConnectionSettings();
        dbSettings.setName(((DbConnectionSettings)aSettings).getName());
        dbSettings.setDrivers(((DbConnectionSettings)aSettings).getDrivers());
        dbSettings.setUrl(((DbConnectionSettings)aSettings).getUrl());
        dbSettings.getInfo().putAll(((DbConnectionSettings)aSettings).getInfo());
        dbSettings.getInfo().put(ClientConstants.DB_CONNECTION_USER_PROP_NAME,aDbUser);
        dbSettings.getInfo().put(ClientConstants.DB_CONNECTION_PASSWORD_PROP_NAME,new String(aDbPassword));
        if (appPath != null) {
          dbSettings.setApplicationPath(appPath);
        }
        lsettings=dbSettings;
      }
      Client lclient=ClientFactory.getInstance(lsettings);
      try {
        return appLogin(lclient,aUserName,aAppPassword);
      }
 catch (      Exception ex) {
        lclient.shutdown();
        throw ex;
      }
    }
  }
);
  Preferences settingsNode=Preferences.userRoot().node(ClientFactory.SETTINGS_NODE);
  frame.addExceptionListener(this);
  frame.selectDefaultSettings();
  frame.setDbPassword(settingsNode.get(ClientFactory.DEFAULT_CONNECTION_DB_PASSWORD,""String_Node_Str""));
  frame.setUserPassword(settingsNode.get(ClientFactory.DEFAULT_CONNECTION_USER_PASSWORD,""String_Node_Str""));
  frame.pack();
  frame.setVisible(true);
  int retValue=frame.getReturnStatus();
  frame.dispose();
  settingsNode.putInt(ClientFactory.DEFAULT_CONNECTION_INDEX_SETTING,frame.getSelectedConnectionIndex());
  if (retValue == LoginFrame.RET_OK) {
    if (frame.getDbPassword() != null) {
      settingsNode.put(ClientFactory.DEFAULT_CONNECTION_DB_PASSWORD,frame.getDbPassword());
    }
 else {
      settingsNode.remove(ClientFactory.DEFAULT_CONNECTION_DB_PASSWORD);
    }
    if (frame.getUserPassword() != null) {
      settingsNode.put(ClientFactory.DEFAULT_CONNECTION_USER_PASSWORD,frame.getUserPassword());
    }
 else {
      settingsNode.remove(ClientFactory.DEFAULT_CONNECTION_USER_PASSWORD);
    }
  }
  return retValue == LoginFrame.RET_OK;
}",0.9969488939740656
145679,"/** 
 * Precesses request for both PlatypusAPI requests and ""Platypus protocol over http"" requests.
 * @param aHttpRequest
 * @param aPlatypusSession
 * @param aHttpResponse
 * @param aHttpSession
 * @throws Exception
 */
private void processPlatypusRequest(final HttpServletRequest aHttpRequest,final HttpServletResponse aHttpResponse,Session aPlatypusSession,HttpSession aHttpSession) throws Exception {
  Request platypusRequest=readPlatypusRequest(aHttpRequest,aHttpResponse,aPlatypusSession);
  try {
    RequestHandler<?> handler=findPlatypusHandler(platypusRequest,aPlatypusSession,aHttpRequest,aHttpResponse);
    handler.run();
    Response response=handler.getResponse();
    sendPlatypusResponse(aHttpRequest,platypusRequest,response,aHttpResponse);
    if (platypusRequest.getType() == Requests.rqLogout) {
      aHttpRequest.logout();
      aHttpSession.invalidate();
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,REQUEST_PROCESSSING_ERROR_MSG,ex);
    ErrorResponse er=new ErrorResponse(platypusRequest.getID(),ex.getMessage());
    try {
      sendJ2SEResponse(er,aHttpResponse);
    }
 catch (    Exception e) {
      Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,ERRORRESPONSE_ERROR_MSG,e);
    }
  }
}","/** 
 * Precesses request for both PlatypusAPI requests and ""Platypus protocol over http"" requests.
 * @param aHttpRequest
 * @param aPlatypusSession
 * @param aHttpResponse
 * @param aHttpSession
 * @throws Exception
 */
private void processPlatypusRequest(final HttpServletRequest aHttpRequest,final HttpServletResponse aHttpResponse,Session aPlatypusSession,HttpSession aHttpSession) throws Exception {
  Request platypusRequest=readPlatypusRequest(aHttpRequest,aHttpResponse,aPlatypusSession);
  try {
    RequestHandler<?> handler=findPlatypusHandler(platypusRequest,aPlatypusSession,aHttpRequest,aHttpResponse);
    handler.run();
    Response response=handler.getResponse();
    platypusResponse(aHttpRequest,platypusRequest,response,aHttpResponse);
    if (platypusRequest.getType() == Requests.rqLogout) {
      aHttpRequest.logout();
      aHttpSession.invalidate();
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,REQUEST_PROCESSSING_ERROR_MSG,ex);
    ErrorResponse er=new ErrorResponse(platypusRequest.getID(),ex.getMessage());
    try {
      sendJ2SEResponse(er,aHttpResponse);
    }
 catch (    Exception e) {
      Logger.getLogger(PlatypusHttpServlet.class.getName()).log(Level.SEVERE,ERRORRESPONSE_ERROR_MSG,e);
    }
  }
}",0.9977046671767408
145680,"public void startEditing(final GridCell cell){
  if (getEditableGrid() != null && getEditableGrid().isAttached() && cell != null) {
    ColumnConfig<M,?> c=columnModel.getColumn(cell.getCol());
    M value=getEditableGrid().getStore().get(cell.getRow());
    if (value != null && getEditor(c) != null) {
      BeforeStartEditEvent<M> ce=new BeforeStartEditEvent<M>(cell);
      fireEvent(ce);
      if (ce.isCancelled()) {
        return;
      }
      IsField<?> field=getEditor(c);
      if (field instanceof PlatypusAdapterField) {
        PlatypusAdapterField<?> af=(PlatypusAdapterField<?>)field;
        af.setValue(null);
        af.setErrorSupport(null);
        af.show();
      }
 else       if (field instanceof Field<?>) {
        Field<?> ff=(Field<?>)field;
        ff.setValue(null,false,true);
        ff.setErrorSupport(null);
        ff.show();
      }
 else       throw new IllegalStateException(BAD_EDITOR_FIELD);
      if (getEditableGrid().getSelectionModel() instanceof PlatypusCellSelectionModel) {
        if (GXTLogConfiguration.loggingIsEnabled()) {
          logger.finest(""String_Node_Str"");
        }
        ((PlatypusCellSelectionModel<?>)getEditableGrid().getSelectionModel()).selectCell(cell.getRow(),cell.getCol(),true);
      }
      Element elem=getEditableGrid().getView().getCell(cell.getRow(),cell.getCol());
      elem.getFirstChildElement().getStyle().setVisibility(Style.Visibility.HIDDEN);
      cancelEditing();
      ignoreScroll=true;
      getEditableGrid().getView().ensureVisible(cell.getRow(),cell.getCol(),true);
      doStartEditing(cell);
    }
  }
}","public void startEditing(final GridCell cell){
  if (editable && getEditableGrid() != null && getEditableGrid().isAttached() && cell != null) {
    ColumnConfig<M,?> c=columnModel.getColumn(cell.getCol());
    M value=getEditableGrid().getStore().get(cell.getRow());
    if (value != null && getEditor(c) != null) {
      BeforeStartEditEvent<M> ce=new BeforeStartEditEvent<M>(cell);
      fireEvent(ce);
      if (ce.isCancelled()) {
        return;
      }
      IsField<?> field=getEditor(c);
      if (field instanceof PlatypusAdapterField) {
        PlatypusAdapterField<?> af=(PlatypusAdapterField<?>)field;
        af.setValue(null);
        af.setErrorSupport(null);
        af.show();
      }
 else       if (field instanceof Field<?>) {
        Field<?> ff=(Field<?>)field;
        ff.setValue(null,false,true);
        ff.setErrorSupport(null);
        ff.show();
      }
 else       throw new IllegalStateException(BAD_EDITOR_FIELD);
      if (getEditableGrid().getSelectionModel() instanceof PlatypusCellSelectionModel) {
        if (GXTLogConfiguration.loggingIsEnabled()) {
          logger.finest(""String_Node_Str"");
        }
        ((PlatypusCellSelectionModel<?>)getEditableGrid().getSelectionModel()).selectCell(cell.getRow(),cell.getCol(),true);
      }
      Element elem=getEditableGrid().getView().getCell(cell.getRow(),cell.getCol());
      elem.getFirstChildElement().getStyle().setVisibility(Style.Visibility.HIDDEN);
      cancelEditing();
      ignoreScroll=true;
      getEditableGrid().getView().ensureVisible(cell.getRow(),cell.getCol(),true);
      doStartEditing(cell);
    }
  }
}",0.996273291925466
145681,"public boolean isActual(){
  return maxAge == Long.MAX_VALUE ? true : getExpires().getTime() > System.currentTimeMillis();
}","public boolean isActual(){
  return System.currentTimeMillis() - cDate.getTime() < maxAge;
}",0.6018518518518519
145682,"public Date getExpires(){
  return new Date(cDate.getTime() + maxAge);
}","public Date getExpires(){
  long expires=cDate.getTime() + maxAge;
  return new Date(expires > 0 ? expires : Long.MAX_VALUE);
}",0.5829145728643216
145683,"public JavaScriptObject createFilter(JavaScriptObject aConstraints) throws Exception {
  JsArrayMixed constraints=aConstraints.<JsArrayMixed>cast();
  Filter filter=new Filter(getRowset());
  filter.beginConstrainting();
  try {
    for (int i=0; i < constraints.length(); i++) {
      JavaScriptObject jsConstraint=constraints.getObject(i);
      Field field=RowsetUtils.unwrapField(jsConstraint);
      filter.addConstraint(getFields().find(field.getName()));
    }
  }
  finally {
    filter.endConstrainting();
  }
  return publishFilterFacade(filter,this);
}","public JavaScriptObject createFilter(JavaScriptObject aConstraints) throws Exception {
  JsArrayMixed constraints=aConstraints.<JsArrayMixed>cast();
  Filter filter=getRowset().createFilter();
  filter.beginConstrainting();
  try {
    for (int i=0; i < constraints.length(); i++) {
      JavaScriptObject jsConstraint=constraints.getObject(i);
      Field field=RowsetUtils.unwrapField(jsConstraint);
      filter.addConstraint(getFields().find(field.getName()));
    }
  }
  finally {
    filter.endConstrainting();
  }
  return publishFilterFacade(filter,this);
}",0.9601417183348095
145684,"public static Object extractValueFromJsArray(JsArrayMixed fieldsValues,int aIndex) throws Exception {
  Object v=null;
  if (!isNullInJsArray(fieldsValues,aIndex)) {
    v=Utils.unwrap(fieldsValues.getObject(aIndex));
  }
  return v;
}","public static Object extractValueFromJsArray(JsArrayMixed aArray,int aIndex) throws Exception {
  return Utils.toJava(boxArrayElementAsJava(aArray,aIndex));
}",0.5954198473282443
145685,"public PlatypusWindow(PlatypusDesktopContainer aDesktop,Form aForm){
  super();
  desktop=aDesktop;
  form=aForm;
  setMaximizable(true);
  setMinimizable(true);
  setAnimCollapse(false);
}","public PlatypusWindow(PlatypusDesktopContainer aDesktop,Form aForm){
  super();
  desktop=aDesktop;
  form=aForm;
  setMaximizable(true);
  setMinimizable(true);
  setAnimCollapse(true);
}",0.9814323607427056
145686,"public boolean isActual(){
  return getExpires().getTime() > System.currentTimeMillis();
}","public boolean isActual(){
  return maxAge == Long.MAX_VALUE ? true : getExpires().getTime() > System.currentTimeMillis();
}",0.8411214953271028
145687,"private void writeJsonResponse(String aResponseString,HttpServletResponse response) throws UnsupportedEncodingException, IOException {
  writeStringResponse(aResponseString,response,RowsetJsonConstants.JSON_CONTENTTYPE);
}","private void writeJsonResponse(String aResponse,HttpServletResponse response) throws UnsupportedEncodingException, IOException {
  writeResponse(aResponse,response,RowsetJsonConstants.JSON_CONTENTTYPE);
}",0.9577464788732394
145688,"private void writeExcelResponse(byte[] aResponseData,HttpServletResponse response) throws UnsupportedEncodingException, IOException {
  response.setCharacterEncoding(SettingsConstants.COMMON_ENCODING);
  response.setContentType(EXCEL_CONTENT_TYPE);
  response.addHeader(""String_Node_Str"",""String_Node_Str"");
  response.setContentLength(aResponseData.length);
  response.getOutputStream().write(aResponseData);
}","private void writeExcelResponse(byte[] aResponse,HttpServletResponse response) throws UnsupportedEncodingException, IOException {
  response.setCharacterEncoding(SettingsConstants.COMMON_ENCODING);
  response.setContentType(EXCEL_CONTENT_TYPE);
  response.addHeader(""String_Node_Str"",""String_Node_Str"");
  response.setContentLength(aResponse.length);
  response.getOutputStream().write(aResponse);
}",0.9851851851851852
145689,"@Override public void run(XMLHttpRequest aResult) throws Exception {
  Utils.executeScriptEventVoid(onSuccess,onSuccess,null);
}","@Override public void run(XMLHttpRequest aResult) throws Exception {
  Utils.executeScriptEventVoid(onSuccess,onSuccess,null);
  Location.reload();
}",0.924187725631769
145690,"public static JavaScriptObject jsLogout(final JavaScriptObject onSuccess) throws Exception {
  return Utils.publishCancellable(AppClient.getInstance().logout(new Callback<XMLHttpRequest>(){
    @Override public void cancel(){
    }
    @Override public void run(    XMLHttpRequest aResult) throws Exception {
      Utils.executeScriptEventVoid(onSuccess,onSuccess,null);
    }
  }
));
}","public static JavaScriptObject jsLogout(final JavaScriptObject onSuccess) throws Exception {
  return Utils.publishCancellable(AppClient.getInstance().logout(new Callback<XMLHttpRequest>(){
    @Override public void cancel(){
    }
    @Override public void run(    XMLHttpRequest aResult) throws Exception {
      Utils.executeScriptEventVoid(onSuccess,onSuccess,null);
      Location.reload();
    }
  }
));
}",0.9686323713927228
145691,"public String executeServerModuleMethod(final String aModuleName,final String aMethodName,final JsArrayString aParams,final JavaScriptObject onSuccess) throws Exception {
  String[] convertedParams=new String[aParams.length()];
  for (int i=0; i < aParams.length(); i++)   convertedParams[i]=param(PlatypusHttpRequestParams.PARAMS_ARRAY,aParams.get(i));
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteServerModuleMethod)),param(PlatypusHttpRequestParams.MODULE_NAME,aModuleName),param(PlatypusHttpRequestParams.METHOD_NAME,aMethodName),params(convertedParams));
  if (onSuccess != null) {
    startRequest(API_URI,query,null,RequestBuilder.GET,new ResponseCallbackAdapter(){
      @Override public void doWork(      XMLHttpRequest aResponse) throws Exception {
        callBack(onSuccess,aResponse.getResponseText());
      }
      private native void callBack(      JavaScriptObject onSuccess,      String aData) throws Exception ;
    }
,null);
    return null;
  }
 else {
    return syncRequest(API_URI,query,null,RequestBuilder.GET);
  }
}","public String executeServerModuleMethod(final String aModuleName,final String aMethodName,final JsArrayString aParams,final JavaScriptObject onSuccess) throws Exception {
  String[] convertedParams=new String[aParams.length()];
  for (int i=0; i < aParams.length(); i++)   convertedParams[i]=param(PlatypusHttpRequestParams.PARAMS_ARRAY,aParams.get(i));
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteServerModuleMethod)),param(PlatypusHttpRequestParams.MODULE_NAME,aModuleName),param(PlatypusHttpRequestParams.METHOD_NAME,aMethodName),params(convertedParams));
  if (onSuccess != null) {
    startRequest(API_URI,query,null,RequestBuilder.GET,new ResponseCallbackAdapter(){
      @Override public void doWork(      XMLHttpRequest aResponse) throws Exception {
        String responseType=aResponse.getResponseHeader(""String_Node_Str"");
        if (responseType != null) {
          responseType=responseType.toLowerCase();
          if (responseType.contains(""String_Node_Str"") || responseType.contains(""String_Node_Str"")) {
            jsonCallBack(onSuccess,aResponse.getResponseText());
          }
 else {
            textCallBack(onSuccess,aResponse.getResponseText());
          }
        }
 else {
          textCallBack(onSuccess,aResponse.getResponseText());
        }
      }
      private native void jsonCallBack(      JavaScriptObject onSuccess,      String aData) throws Exception ;
      private native void textCallBack(      JavaScriptObject onSuccess,      String aData) throws Exception ;
    }
,null);
    return null;
  }
 else {
    return syncRequest(API_URI,query,null,RequestBuilder.GET);
  }
}",0.7893972403776325
145692,"public Cancellable pollData(String aQueryId,Parameters aParams,final Callback<Rowset> onSuccess,final Callback<String> onFailure) throws Exception {
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteQuery)),param(PlatypusHttpRequestParams.QUERY_ID,aQueryId),params(aParams));
  return startRequest(API_URI,query,""String_Node_Str"",RequestBuilder.GET,new ResponseCallbackAdapter(){
    @Override public void doWork(    XMLHttpRequest aResponse) throws Exception {
      Rowset rowset=readRowset(aResponse);
      onSuccess.run(rowset);
    }
    private Rowset readRowset(    XMLHttpRequest aResponse) throws Exception {
      return RowsetReader.read(JSONParser.parseStrict(aResponse.getResponseText()));
    }
  }
,new ResponseCallbackAdapter(){
    @Override protected void doWork(    XMLHttpRequest aResponse) throws Exception {
      if (onFailure != null) {
        onFailure.run(aResponse.getStatusText());
      }
    }
  }
);
}","public Cancellable pollData(String aQueryId,Parameters aParams,final Callback<Rowset> onSuccess,final Callback<String> onFailure) throws Exception {
  String query=params(param(PlatypusHttpRequestParams.TYPE,String.valueOf(Requests.rqExecuteQuery)),param(PlatypusHttpRequestParams.QUERY_ID,aQueryId),params(aParams));
  return startRequest(API_URI,query,""String_Node_Str"",RequestBuilder.GET,new ResponseCallbackAdapter(){
    @Override public void doWork(    XMLHttpRequest aResponse) throws Exception {
      Rowset rowset=readRowset(aResponse);
      onSuccess.run(rowset);
    }
    private Rowset readRowset(    XMLHttpRequest aResponse) throws Exception {
      return RowsetReader.read(JSONParser.parseStrict(aResponse.getResponseText()));
    }
  }
,new ResponseCallbackAdapter(){
    @Override protected void doWork(    XMLHttpRequest aResponse) throws Exception {
      if (onFailure != null) {
        int status=aResponse.getStatus();
        String statusText=aResponse.getStatusText();
        if ((statusText == null || statusText.isEmpty()) && status == 0)         statusText=""String_Node_Str"";
        onFailure.run(statusText);
      }
    }
  }
);
}",0.8959402706486235
145693,"@Override protected void doWork(XMLHttpRequest aResponse) throws Exception {
  if (onFailure != null) {
    onFailure.run(aResponse.getStatusText());
  }
}","@Override protected void doWork(XMLHttpRequest aResponse) throws Exception {
  if (onFailure != null) {
    int status=aResponse.getStatus();
    String statusText=aResponse.getStatusText();
    if ((statusText == null || statusText.isEmpty()) && status == 0)     statusText=""String_Node_Str"";
    onFailure.run(statusText);
  }
}",0.5567010309278351
145694,"public Window show(boolean aModal,final JavaScriptObject aCallback,PlatypusDesktopContainer aDesktop){
  close(null,null);
  if (!isOpened()) {
    window=new PlatypusWindow(aDesktop,this);
    window.addMoveHandler(new MoveHandler(){
      @Override public void onMove(      MoveEvent event){
        location=new Point(event.getX(),event.getY());
      }
    }
);
    window.addResizeHandler(new ResizeHandler(){
      @Override public void onResize(      ResizeEvent event){
        size=new Point(event.getWidth(),event.getHeight());
      }
    }
);
    window.setClosable(true);
    window.setMaximizable(maximizable);
    window.setMinimizable(iconifiable);
    window.setHeaderVisible(!undecorated);
    window.setShadow(!undecorated);
    window.setBorders(!undecorated);
    window.setDraggable(true);
    window.setResizable(resizable);
    window.setOnEsc(aModal);
    window.setHeadingText(title);
    window.setBodyBorder(false);
    window.getElement().getStyle().setOpacity(opacity);
    window.getBody().getStyle().setOpacity(opacity);
    if (iconImage != null && !iconImage.isEmpty())     window.getHeader().setIcon(AppClient.getInstance().getImageResource(iconImage).addJavaCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        setIcon(aResource);
        if (window != null)         window.getHeader().setIcon(aResource);
      }
    }
));
    window.setModal(aModal);
    window.setWidget(view);
    view.setVisible(true);
    registerWindowListeners(window);
    boolean wasSize=size != null;
    window.show();
    if (wasSize) {
      window.setPixelSize(size.getX(),size.getY());
    }
 else {
      int decorHeight=window.getElement().getHeight(false) - window.getBody().getHeight(false);
      int decorWidth=window.getElement().getWidth(false) - window.getBody().getWidth(false);
      window.setPixelSize(viewPreferredWidth + decorWidth,viewPreferredHeight + decorHeight);
    }
    if (locationByPlatform) {
      if (aDesktop != null)       window.setPosition(aDesktop.getConsideredPosition().getX(),aDesktop.getConsideredPosition().getY());
 else       window.center();
    }
 else {
      if (location != null)       window.setPosition(location.getX(),location.getY());
 else       window.center();
    }
  }
  return window;
}","public Window show(boolean aModal,final JavaScriptObject aCallback,PlatypusDesktopContainer aDesktop){
  close(null,null);
  if (!isOpened()) {
    window=new PlatypusWindow(aDesktop,this);
    window.addMoveHandler(new MoveHandler(){
      @Override public void onMove(      MoveEvent event){
        location=new Point(event.getX(),event.getY());
      }
    }
);
    window.addResizeHandler(new ResizeHandler(){
      @Override public void onResize(      ResizeEvent event){
        size=new Point(event.getWidth(),event.getHeight());
      }
    }
);
    window.setClosable(true);
    window.setMaximizable(maximizable);
    window.setMinimizable(iconifiable);
    window.setHeaderVisible(!undecorated);
    window.setShadow(!undecorated);
    window.setBorders(!undecorated);
    window.setDraggable(true);
    window.setResizable(resizable);
    window.setOnEsc(aModal);
    window.setHeadingText(title);
    window.setBodyBorder(false);
    window.getElement().getStyle().setOpacity(opacity);
    window.getBody().getStyle().setOpacity(opacity);
    if (iconImage != null && !iconImage.isEmpty())     window.getHeader().setIcon(AppClient.getInstance().getImageResource(iconImage).addCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        setIcon(aResource);
        if (window != null)         window.getHeader().setIcon(aResource);
      }
    }
));
    window.setModal(aModal);
    window.setWidget(view);
    view.setVisible(true);
    registerWindowListeners(window);
    boolean wasSize=size != null;
    window.show();
    if (wasSize) {
      window.setPixelSize(size.getX(),size.getY());
    }
 else {
      int decorHeight=window.getElement().getHeight(false) - window.getBody().getHeight(false);
      int decorWidth=window.getElement().getWidth(false) - window.getBody().getWidth(false);
      window.setPixelSize(viewPreferredWidth + decorWidth,viewPreferredHeight + decorHeight);
    }
    if (locationByPlatform) {
      if (aDesktop != null)       window.setPosition(aDesktop.getConsideredPosition().getX(),aDesktop.getConsideredPosition().getY());
 else       window.center();
    }
 else {
      if (location != null)       window.setPosition(location.getX(),location.getY());
 else       window.center();
    }
  }
  return window;
}",0.9991360691144708
145695,"private static TabItemConfig parseTabItemConfig(Element aTag,final ImageResourceCallback aImageLoadedCallback){
  final TabItemConfig config=new TabItemConfig();
  if (aTag.hasAttribute(""String_Node_Str"")) {
    String value=aTag.getAttribute(""String_Node_Str"");
    if (value != null && value.startsWith(PlatypusLabel.HTML_SWING_PREFIX))     config.setHTML(value.substring(PlatypusLabel.HTML_SWING_PREFIX.length()));
 else     config.setText(value);
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    config.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addJavaCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        config.setIcon(aResource);
        if (aImageLoadedCallback != null)         aImageLoadedCallback.run(aResource);
      }
    }
));
  }
  config.setClosable(false);
  return config;
}","private static TabItemConfig parseTabItemConfig(Element aTag,final ImageResourceCallback aImageLoadedCallback){
  final TabItemConfig config=new TabItemConfig();
  if (aTag.hasAttribute(""String_Node_Str"")) {
    String value=aTag.getAttribute(""String_Node_Str"");
    if (value != null && value.startsWith(PlatypusLabel.HTML_SWING_PREFIX))     config.setHTML(value.substring(PlatypusLabel.HTML_SWING_PREFIX.length()));
 else     config.setText(value);
  }
  if (aTag.hasAttribute(""String_Node_Str"")) {
    config.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        config.setIcon(aResource);
        if (aImageLoadedCallback != null)         aImageLoadedCallback.run(aResource);
      }
    }
));
  }
  config.setClosable(false);
  return config;
}",0.9977703455964324
145696,"private void setIconAndAlign(final CellButtonBase<?> btn,Element aTag) throws Exception {
  btn.setIconAlign(IconAlign.LEFT);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    int horizontalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",11);
switch (horizontalTextPosition) {
case 4:
      btn.setIconAlign(IconAlign.LEFT);
    break;
case 2:
  btn.setIconAlign(IconAlign.RIGHT);
break;
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 10:
btn.setIconAlign(IconAlign.RIGHT);
break;
case 11:
btn.setIconAlign(IconAlign.LEFT);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
if (aTag.hasAttribute(""String_Node_Str"")) {
int verticalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",0);
switch (verticalTextPosition) {
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 1:
btn.setIconAlign(IconAlign.BOTTOM);
break;
case 3:
btn.setIconAlign(IconAlign.TOP);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
btn.setScale(ButtonScale.SMALL);
if (aTag.hasAttribute(""String_Node_Str"")) {
btn.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addJavaCallback(new ImageResourceCallback(){
@Override public void run(ImageResource aResource){
btn.setIcon(aResource);
if (btn.getParent() instanceof HasLayout) {
HasLayout c=(HasLayout)btn.getParent();
c.forceLayout();
}
}
}
));
}
}","private void setIconAndAlign(final CellButtonBase<?> btn,Element aTag) throws Exception {
  btn.setIconAlign(IconAlign.LEFT);
  if (aTag.hasAttribute(""String_Node_Str"")) {
    int horizontalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",11);
switch (horizontalTextPosition) {
case 4:
      btn.setIconAlign(IconAlign.LEFT);
    break;
case 2:
  btn.setIconAlign(IconAlign.RIGHT);
break;
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 10:
btn.setIconAlign(IconAlign.RIGHT);
break;
case 11:
btn.setIconAlign(IconAlign.LEFT);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
if (aTag.hasAttribute(""String_Node_Str"")) {
int verticalTextPosition=Utils.getIntegerAttribute(aTag,""String_Node_Str"",0);
switch (verticalTextPosition) {
case 0:
btn.setIconAlign(IconAlign.LEFT);
break;
case 1:
btn.setIconAlign(IconAlign.BOTTOM);
break;
case 3:
btn.setIconAlign(IconAlign.TOP);
break;
default :
btn.setIconAlign(IconAlign.LEFT);
break;
}
}
btn.setScale(ButtonScale.SMALL);
if (aTag.hasAttribute(""String_Node_Str"")) {
btn.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
@Override public void run(ImageResource aResource){
btn.setIcon(aResource);
Scheduler.get().scheduleDeferred(new ScheduledCommand(){
@Override public void execute(){
if (btn.getParent() instanceof ResizeContainer) {
ResizeContainer c=(ResizeContainer)btn.getParent();
Size s=XElement.as(c.getElement().getParentElement()).getSize(true);
c.setPixelSize(s.getWidth() + 1,s.getHeight());
c.setPixelSize(s.getWidth() - 1,s.getHeight());
}
 else if (btn.getParent() instanceof HasLayout) {
((HasLayout)btn.getParent()).forceLayout();
}
}
}
);
}
}
));
}
}",0.8565878925218517
145697,"private Component createMenuItem(Element aTag) throws Exception {
  final MenuItem component=new MenuItem();
  processEvents(component,aTag);
  Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    component.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addJavaCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        component.setIcon(aResource);
      }
    }
));
  }
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,false,publishedComp);
  Form.inject(module,(String)component.getData(Form.PID_DATA_KEY),publishedComp);
  return component;
}","private Component createMenuItem(Element aTag) throws Exception {
  final MenuItem component=new MenuItem();
  processEvents(component,aTag);
  Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    component.setIcon(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        component.setIcon(aResource);
      }
    }
));
  }
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,false,publishedComp);
  Form.inject(module,(String)component.getData(Form.PID_DATA_KEY),publishedComp);
  return component;
}",0.997750281214848
145698,"private Component createLabel(Element aTag) throws Exception {
  final PlatypusLabel component=new PlatypusLabel();
  processEvents(component,aTag);
  Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setIconTextGap(Utils.getIntegerAttribute(aTag,""String_Node_Str"",4));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    component.setImage(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addJavaCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        component.setImage(aResource);
        if (component.getParent() instanceof HasLayout) {
          HasLayout c=(HasLayout)component.getParent();
          c.forceLayout();
        }
      }
    }
));
  }
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,false,publishedComp);
  return component;
}","private Component createLabel(Element aTag) throws Exception {
  final PlatypusLabel component=new PlatypusLabel();
  processEvents(component,aTag);
  Publisher.publish(component);
  if (aTag.hasAttribute(""String_Node_Str""))   component.setText(aTag.getAttribute(""String_Node_Str""));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setIconTextGap(Utils.getIntegerAttribute(aTag,""String_Node_Str"",4));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalTextPosition(Utils.getIntegerAttribute(aTag,""String_Node_Str"",PlatypusLabel.RIGHT));
  if (aTag.hasAttribute(""String_Node_Str"")) {
    component.setImage(AppClient.getInstance().getImageResource(aTag.getAttribute(""String_Node_Str"")).addCallback(new ImageResourceCallback(){
      @Override public void run(      ImageResource aResource){
        component.setImage(aResource);
        if (component.getParent() instanceof ResizeContainer) {
          ResizeContainer c=(ResizeContainer)component.getParent();
          Size s=XElement.as(c.getElement().getParentElement()).getSize(true);
          c.setPixelSize(s.getWidth() + 1,s.getHeight());
          c.setPixelSize(s.getWidth() - 1,s.getHeight());
        }
 else         if (component.getParent() instanceof HasLayout) {
          ((HasLayout)component.getParent()).forceLayout();
        }
      }
    }
));
  }
  if (aTag.hasAttribute(""String_Node_Str""))   component.setVerticalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  if (aTag.hasAttribute(""String_Node_Str""))   component.setHorizontalAlignment(Utils.getIntegerAttribute(aTag,""String_Node_Str"",0));
  checkBorders(component,aTag);
  PublishedComponent publishedComp=(PublishedComponent)component.getData(Form.PUBLISHED_DATA_KEY);
  processGeneralProperties(component,aTag,false,publishedComp);
  return component;
}",0.8968166849615807
145699,"protected ActualCacheEntry<SqlQuery> loadQuery(String aAppElementId) throws ParserConfigurationException, Exception {
  if (aAppElementId == null) {
    throw new NullPointerException(CANT_LOAD_NULL_MSG);
  }
  Logger.getLogger(this.getClass().getName()).finer(String.format(LOADING_QUERY_MSG,aAppElementId));
  ApplicationElement appElement=client.getAppCache().get(aAppElementId);
  if (appElement != null) {
    Document queryDom=appElement.getContent();
    if (queryDom != null) {
      QueryDocument queryDoc=XmlDom2QueryDocument.transform(client,aAppElementId,queryDom);
      QueryModel model=queryDoc.getModel();
      SqlQuery query=queryDoc.getQuery();
      putRolesMutatables(query);
      List<StoredFieldMetadata> additionalFieldsMetadata=queryDoc.getAdditionalFieldsMetadata();
      String sqlText=query.getSqlText();
      if (sqlText != null && !sqlText.isEmpty()) {
        if (query.getFullSqlText() != null && !query.getFullSqlText().isEmpty()) {
          sqlText=query.getFullSqlText();
        }
        try {
          try {
            String compiledSqlText=compileSubqueries(sqlText,model);
            putTableFieldsMetadata(query);
            putStoredTableFieldsMetadata(query,additionalFieldsMetadata);
            putParametersMetadata(query,model);
            query.setSqlText(compiledSqlText);
          }
 catch (          Exception ex) {
            Fields fields=new Fields();
            Field fMd=new Field(DUMMY_FIELD_NAME,ex.getMessage());
            fields.add(fMd);
            query.setFields(fields);
          }
        }
  finally {
          query.setTitle(appElement.getName());
          query.getFields().setTableDescription(query.getTitle());
        }
      }
      return new ActualCacheEntry<>(query,appElement.getTxtContentLength(),appElement.getTxtCrc32());
    }
 else {
      SqlQuery result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,CONTENT_EMPTY_MSG);
      fields.add(fMd);
      result.setFields(fields);
      return new ActualCacheEntry<>(result,0,0);
    }
  }
 else {
    SqlQuery result=dynamicQueries.get(aAppElementId);
    if (result == null) {
      result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,ABSENT_QUERY_MSG);
      fields.add(fMd);
      result.setFields(fields);
    }
    return new ActualCacheEntry<>(result,0,0);
  }
}","protected ActualCacheEntry<SqlQuery> loadQuery(String aAppElementId) throws ParserConfigurationException, Exception {
  if (aAppElementId == null) {
    throw new NullPointerException(CANT_LOAD_NULL_MSG);
  }
  Logger.getLogger(this.getClass().getName()).finer(String.format(LOADING_QUERY_MSG,aAppElementId));
  ApplicationElement appElement=client.getAppCache().get(aAppElementId);
  if (appElement == null && SUBQUERY_LINK_PATTERN.matcher(aAppElementId).matches()) {
    aAppElementId=aAppElementId.substring(1);
    appElement=client.getAppCache().get(aAppElementId);
  }
  if (appElement != null) {
    Document queryDom=appElement.getContent();
    if (queryDom != null) {
      QueryDocument queryDoc=XmlDom2QueryDocument.transform(client,aAppElementId,queryDom);
      QueryModel model=queryDoc.getModel();
      SqlQuery query=queryDoc.getQuery();
      putRolesMutatables(query);
      List<StoredFieldMetadata> additionalFieldsMetadata=queryDoc.getAdditionalFieldsMetadata();
      String sqlText=query.getSqlText();
      if (sqlText != null && !sqlText.isEmpty()) {
        if (query.getFullSqlText() != null && !query.getFullSqlText().isEmpty()) {
          sqlText=query.getFullSqlText();
        }
        try {
          try {
            String compiledSqlText=compileSubqueries(sqlText,model);
            putTableFieldsMetadata(query);
            putStoredTableFieldsMetadata(query,additionalFieldsMetadata);
            putParametersMetadata(query,model);
            query.setSqlText(compiledSqlText);
          }
 catch (          Exception ex) {
            Fields fields=new Fields();
            Field fMd=new Field(DUMMY_FIELD_NAME,ex.getMessage());
            fields.add(fMd);
            query.setFields(fields);
          }
        }
  finally {
          query.setTitle(appElement.getName());
          query.getFields().setTableDescription(query.getTitle());
        }
      }
      return new ActualCacheEntry<>(query,appElement.getTxtContentLength(),appElement.getTxtCrc32());
    }
 else {
      SqlQuery result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,CONTENT_EMPTY_MSG);
      fields.add(fMd);
      result.setFields(fields);
      return new ActualCacheEntry<>(result,0,0);
    }
  }
 else {
    SqlQuery result=dynamicQueries.get(aAppElementId);
    if (result == null) {
      result=new SqlQuery(client);
      Fields fields=new Fields();
      Field fMd=new Field(DUMMY_FIELD_NAME,ABSENT_QUERY_MSG);
      fields.add(fMd);
      result.setFields(fields);
    }
    return new ActualCacheEntry<>(result,0,0);
  }
}",0.9618745035742652
145700,"@Override public String getPath(){
  return null;
}","@Override public String getPath(){
  if (columnRef != null && columnRef.entity != null && columnRef.getColIndex() > 0) {
    return columnRef.entity.getEntityId() + ""String_Node_Str"" + columnRef.getColIndex();
  }
 else   return null;
}",0.2787456445993031
145701,"@Override public String getPath(){
  return null;
}","@Override public String getPath(){
  if (columnRef != null && columnRef.entity != null && columnRef.getColIndex() > 0) {
    return columnRef.entity.getEntityId() + ""String_Node_Str"" + columnRef.getColIndex();
  }
 else   return null;
}",0.2787456445993031
145702,"private void adjustWidths(){
  if (rows == 1) {
    return;
  }
  cleanCells();
  for (int i=0; i < rows; i++) {
    int columns=table.getCellCount(i);
    int mark=0;
    for (int j=0; j < columns; j++) {
      TableCellElement cell=table.getCellFormatter().getElement(i,j).cast();
      int colspan=cell.getColSpan();
      int w=0;
      for (int k=mark; k < (mark + colspan); k++) {
        ColumnConfig<M,?> c=cm.getColumn(k);
        if (c.isHidden()) {
          continue;
        }
        w+=cm.getColumnWidth(k);
      }
      mark+=colspan;
      cell.getStyle().setPropertyPx(""String_Node_Str"",w);
      int adj=cell.<XElement>cast().getFrameWidth(Side.LEFT,Side.RIGHT);
      XElement inner=cell.getFirstChildElement().cast();
      inner.setWidth(w - adj,true);
    }
  }
}","private void adjustWidths(){
}",0.0734394124847001
145703,"/** 
 * Refreshes the columns.
 */
public void refresh(){
  groups.clear();
  heads.clear();
  int cnt=table.getRowCount();
  for (int i=0; i < cnt; i++) {
    table.removeRow(0);
  }
  table.setWidth(cm.getTotalWidth() + ""String_Node_Str"");
  List<HeaderGroupConfig> configs=cm.getHeaderGroups();
  FlexCellFormatter cf=table.getFlexCellFormatter();
  RowFormatter rf=table.getRowFormatter();
  rows=0;
  for (  HeaderGroupConfig config : configs) {
    rows=Math.max(rows,config.getRow() + 1);
  }
  rows+=1;
  for (int i=0; i < rows; i++) {
    rf.setStyleName(i,styles.headRow());
  }
  int cols=cm.getColumnCount();
  String cellClass=styles.header() + ""String_Node_Str"" + styles.head();
  for (  HeaderGroupConfig config : cm.getHeaderGroups()) {
    int col=config.getColumn();
    int row=config.getRow();
    int rs=config.getRowspan();
    int cs=config.getColspan();
    Group group=createNewGroup(config);
    boolean hide=true;
    if (rows > 1) {
      for (int i=col; i < (col + cs); i++) {
        if (!cm.isHidden(i)) {
          hide=false;
        }
      }
    }
    if (hide) {
      continue;
    }
    table.setWidget(row,col,group);
    cf.setStyleName(row,col,cellClass);
    HorizontalAlignmentConstant align=config.getHorizontalAlignment();
    cf.setHorizontalAlignment(row,col,align);
    int ncs=cs;
    if (cs > 1) {
      for (int i=col; i < (col + cs); i++) {
        if (cm.isHidden(i)) {
          ncs-=1;
        }
      }
    }
    cf.setRowSpan(row,col,rs);
    cf.setColSpan(row,col,ncs);
  }
  for (int i=0; i < cols; i++) {
    Head h=createNewHead(cm.getColumn(i));
    if (cm.isHidden(i)) {
      continue;
    }
    int rowspan=1;
    if (rows > 1) {
      for (int j=rows - 2; j >= 0; j--) {
        if (!cm.hasGroup(j,i)) {
          rowspan+=1;
        }
      }
    }
    int row;
    if (rowspan > 1) {
      row=(rows - 1) - (rowspan - 1);
    }
 else {
      row=rows - 1;
    }
    h.row=row;
    if (rowspan > 1) {
      table.setWidget(row,i,h);
      table.getFlexCellFormatter().setRowSpan(row,i,rowspan);
    }
 else {
      table.setWidget(row,i,h);
    }
    ColumnConfig<M,?> cc=cm.getColumn(i);
    String s=cc.getColumnClassSuffix() == null ? ""String_Node_Str"" : ""String_Node_Str"" + cc.getColumnClassSuffix();
    cf.setStyleName(row,i,cellClass + s);
    cf.getElement(row,i).setPropertyInt(""String_Node_Str"",i);
    HorizontalAlignmentConstant align=cm.getColumnAlignment(i);
    if (align != null) {
      table.getCellFormatter().setHorizontalAlignment(row,i,align);
      if (align == HasHorizontalAlignment.ALIGN_RIGHT) {
        table.getCellFormatter().getElement(row,i).getFirstChildElement().getStyle().setPropertyPx(""String_Node_Str"",16);
      }
    }
    updateColumnWidth(i,cm.getColumnWidth(i));
  }
  if (container instanceof Grid) {
    @SuppressWarnings(""String_Node_Str"") Grid<M> grid=(Grid<M>)container;
    if (grid.getView().isRemoteSort()) {
      List<? extends SortInfo> sortInfos=grid.getLoader().getSortInfo();
      if (sortInfos.size() > 0) {
        SortInfo sortInfo=sortInfos.get(0);
        String sortField=sortInfo.getSortField();
        if (sortField != null && !""String_Node_Str"".equals(sortField)) {
          ColumnConfig<M,?> column=cm.findColumnConfig(sortField);
          if (column != null) {
            int index=cm.indexOf(column);
            if (index != -1) {
              updateSortIcon(index,sortInfo.getSortDir());
            }
          }
        }
      }
    }
 else {
      List<StoreSortInfo<M>> sortInfos=grid.getStore().getSortInfo();
      if (sortInfos.size() > 0) {
        StoreSortInfo<M> sortInfo=sortInfos.get(0);
        if (sortInfo != null && sortInfo.getValueProvider() != null) {
          ColumnConfig<M,?> column=grid.getColumnModel().findColumnConfig(sortInfo.getPath());
          if (column != null) {
            updateSortIcon(grid.getColumnModel().indexOf(column),sortInfo.getDirection());
          }
        }
      }
    }
  }
  adjustWidths();
}","/** 
 * Refreshes the columns.
 */
public void refresh(){
  groups.clear();
  heads.clear();
  int cnt=table.getRowCount();
  for (int i=0; i < cnt; i++) {
    table.removeRow(0);
  }
  table.setWidth(cm.getTotalWidth() + ""String_Node_Str"");
  List<HeaderGroupConfig> configs=cm.getHeaderGroups();
  FlexCellFormatter cf=table.getFlexCellFormatter();
  RowFormatter rf=table.getRowFormatter();
  rows=0;
  for (  HeaderGroupConfig config : configs) {
    rows=Math.max(rows,config.getRow() + 1);
  }
  rows+=1;
  for (int i=0; i < rows; i++) {
    rf.setStyleName(i,styles.headRow());
  }
  int cols=cm.getColumnCount();
  String cellClass=styles.header() + ""String_Node_Str"" + styles.head();
  for (  HeaderGroupConfig config : cm.getHeaderGroups()) {
    int col=config.getColumn();
    int row=config.getRow();
    int rs=config.getRowspan();
    int cs=config.getColspan();
    Group group=createNewGroup(config);
    boolean hide=true;
    if (rows > 1) {
      for (int i=col; i < (col + cs); i++) {
        if (!cm.isHidden(i)) {
          hide=false;
        }
      }
    }
    if (hide) {
      continue;
    }
    table.setWidget(row,col,group);
    cf.setStyleName(row,col,cellClass);
    HorizontalAlignmentConstant align=config.getHorizontalAlignment();
    cf.setHorizontalAlignment(row,col,align);
    int ncs=cs;
    if (cs > 1) {
      for (int i=col; i < (col + cs); i++) {
        if (cm.isHidden(i)) {
          ncs-=1;
        }
      }
    }
    cf.setRowSpan(row,col,rs);
    cf.setColSpan(row,col,ncs);
  }
  for (int i=0; i < cols; i++) {
    Head h=createNewHead(cm.getColumn(i));
    if (cm.isHidden(i)) {
      continue;
    }
    int rowspan=1;
    if (rows > 1) {
      for (int j=rows - 2; j >= 0; j--) {
        if (!cm.hasGroup(j,i)) {
          rowspan+=1;
        }
      }
    }
    int row;
    if (rowspan > 1) {
      row=(rows - 1) - (rowspan - 1);
    }
 else {
      row=rows - 1;
    }
    h.row=row;
    if (rowspan > 1) {
      table.setWidget(row,i,h);
      table.getFlexCellFormatter().setRowSpan(row,i,rowspan);
    }
 else {
      table.setWidget(row,i,h);
    }
    ColumnConfig<M,?> cc=cm.getColumn(i);
    String s=cc.getColumnClassSuffix() == null ? ""String_Node_Str"" : ""String_Node_Str"" + cc.getColumnClassSuffix();
    cf.setStyleName(row,i,cellClass + s);
    cf.getElement(row,i).setPropertyInt(""String_Node_Str"",i);
    HorizontalAlignmentConstant align=cm.getColumnAlignment(i);
    if (align != null) {
      table.getCellFormatter().setHorizontalAlignment(row,i,align);
      if (align == HasHorizontalAlignment.ALIGN_RIGHT) {
        table.getCellFormatter().getElement(row,i).getFirstChildElement().getStyle().setPropertyPx(""String_Node_Str"",16);
      }
    }
    h.updateWidth(cm.getColumnWidth(i));
  }
  if (container instanceof Grid) {
    @SuppressWarnings(""String_Node_Str"") Grid<M> grid=(Grid<M>)container;
    if (grid.getView().isRemoteSort()) {
      List<? extends SortInfo> sortInfos=grid.getLoader().getSortInfo();
      if (sortInfos.size() > 0) {
        SortInfo sortInfo=sortInfos.get(0);
        String sortField=sortInfo.getSortField();
        if (sortField != null && !""String_Node_Str"".equals(sortField)) {
          ColumnConfig<M,?> column=cm.findColumnConfig(sortField);
          if (column != null) {
            int index=cm.indexOf(column);
            if (index != -1) {
              updateSortIcon(index,sortInfo.getSortDir());
            }
          }
        }
      }
    }
 else {
      List<StoreSortInfo<M>> sortInfos=grid.getStore().getSortInfo();
      if (sortInfos.size() > 0) {
        StoreSortInfo<M> sortInfo=sortInfos.get(0);
        if (sortInfo != null && sortInfo.getValueProvider() != null) {
          ColumnConfig<M,?> column=grid.getColumnModel().findColumnConfig(sortInfo.getPath());
          if (column != null) {
            updateSortIcon(grid.getColumnModel().indexOf(column),sortInfo.getDirection());
          }
        }
      }
    }
  }
  adjustWidths();
}",0.9987471811576046
145704,"@ScriptFunction(jsDocText=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") public boolean save() throws Exception {
  if (commitable) {
    try {
      commit();
      saved();
    }
 catch (    Exception ex) {
      rolledback();
      throw ex;
    }
  }
  return true;
}","@ScriptFunction(jsDocText=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") public boolean save(Function aCallback) throws Exception {
  if (commitable) {
    try {
      commit();
      saved();
      if (aCallback != null) {
        Context cx=Context.getCurrentContext();
        boolean wasContext=cx != null;
        if (!wasContext) {
          cx=ScriptUtils.enterContext();
        }
        try {
          aCallback.call(cx,scriptScope,scriptScope,new Object[]{});
        }
  finally {
          if (!wasContext) {
            Context.exit();
          }
        }
      }
    }
 catch (    Exception ex) {
      rolledback();
      throw ex;
    }
  }
  return true;
}",0.6125954198473282
145705,"private String replaceLinkedParameters(String aSqlText,Set<Relation<QueryEntity>> parametersRelations){
  for (  Relation<QueryEntity> rel : parametersRelations) {
    if (rel.getLeftField() != null && rel.getRightParameter() != null) {
      aSqlText=Pattern.compile(COLON + rel.getRightParameter() + ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(aSqlText).replaceAll(COLON + rel.getLeftField());
    }
 else     if (rel.getLeftParameter() != null && rel.getRightParameter() != null) {
      aSqlText=Pattern.compile(COLON + rel.getRightParameter() + ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(aSqlText).replaceAll(COLON + rel.getLeftParameter());
    }
  }
  return aSqlText;
}","private String replaceLinkedParameters(String aSqlText,Set<Relation<QueryEntity>> parametersRelations){
  for (  Relation<QueryEntity> rel : parametersRelations) {
    if (rel.getLeftEntity() instanceof QueryParametersEntity && rel.getLeftField() != null && rel.getRightParameter() != null) {
      aSqlText=Pattern.compile(COLON + rel.getRightParameter().getName() + ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(aSqlText).replaceAll(COLON + rel.getLeftField().getName());
    }
  }
  return aSqlText;
}",0.7043189368770764
145706,"private Fields filterFields(Fields aFields){
  Fields resFields=new Fields();
  for (int i=aFields.getFieldsCount(); i > 0; i--) {
    Field field=aFields.get(i);
    if ((!filterForeignKeys || !field.isFk()) && (!filterPrimaryKeys || !field.isPk()) && !hidingFields.contains(field.getName().toLowerCase())) {
      resFields.add(field);
    }
  }
  return resFields;
}","private Fields filterFields(Fields aFields){
  Fields resFields=new Fields();
  for (int i=1; i <= aFields.getFieldsCount(); i++) {
    Field field=aFields.get(i);
    if ((!filterForeignKeys || !field.isFk()) && (!filterPrimaryKeys || !field.isPk()) && !hidingFields.contains(field.getName().toLowerCase())) {
      resFields.add(field);
    }
  }
  return resFields;
}",0.9742895805142084
145707,"@Override public boolean visit(AstNode an){
  if (an == node) {
    return true;
  }
  if (an instanceof FunctionNode) {
    return false;
  }
  if (an instanceof VariableDeclaration) {
    VariableDeclaration variableDeclaration=(VariableDeclaration)an;
    if (variableDeclaration.getVariables() != null) {
      for (      VariableInitializer variableInitializer : variableDeclaration.getVariables()) {
        if (variableInitializer.getTarget() != null && variableInitializer.getTarget().getString().equals(fieldName) && variableInitializer.getInitializer() != null) {
          if (variableInitializer.getInitializer() instanceof NewExpression) {
            NewExpression ne=(NewExpression)variableInitializer.getInitializer();
            if (ne.getTarget() != null) {
              if (isModuleInitializerName(ne.getTarget().getString()) && ne.getArguments() != null && ne.getArguments().size() > 0) {
                ctx=getModuleCompletionContext(stripElementId(ne.getArguments().get(0).toSource()));
                return false;
              }
              for (              ScriptClassProvider scp : Lookup.getDefault().lookupAll(ScriptClassProvider.class)) {
                Class clazz=scp.getClassByName(ne.getTarget().getString());
                if (clazz != null) {
                  ctx=new CompletionContext(clazz);
                  return false;
                }
              }
              CompletionContext cc=getModuleCompletionContext(stripElementId(ne.getTarget().getString()));
              if (cc != null) {
                ctx=cc;
                return false;
              }
            }
          }
 else           if (variableInitializer.getInitializer() instanceof FunctionCall) {
            FunctionCall fc=(FunctionCall)variableInitializer.getInitializer();
            if (fc.getTarget() instanceof PropertyGet) {
              PropertyGet pg=(PropertyGet)fc.getTarget();
              if (pg.getLeft().getString().equals(MODULES_OBJECT_NAME) && pg.getRight().getString().equals(GET_METHOD_NAME)) {
                if (fc.getArguments() != null && fc.getArguments().size() > 0) {
                  ctx=getModuleCompletionContext(stripElementId(fc.getArguments().get(0).toSource()));
                  return false;
                }
              }
            }
          }
        }
      }
    }
    return false;
  }
  return true;
}","@Override public boolean visit(AstNode an){
  if (an == node) {
    return true;
  }
  if (an instanceof FunctionNode) {
    return false;
  }
  if (an instanceof VariableDeclaration) {
    VariableDeclaration variableDeclaration=(VariableDeclaration)an;
    if (variableDeclaration.getVariables() != null) {
      for (      VariableInitializer variableInitializer : variableDeclaration.getVariables()) {
        if (variableInitializer.getTarget() != null && variableInitializer.getTarget().getString().equals(fieldName) && variableInitializer.getInitializer() != null) {
          if (variableInitializer.getInitializer() instanceof NewExpression) {
            NewExpression ne=(NewExpression)variableInitializer.getInitializer();
            if (ne.getTarget() != null && ne.getTarget() instanceof Name) {
              if (isModuleInitializerName(ne.getTarget().getString()) && ne.getArguments() != null && ne.getArguments().size() > 0) {
                ctx=getModuleCompletionContext(stripElementId(ne.getArguments().get(0).toSource()));
                return false;
              }
              for (              ScriptClassProvider scp : Lookup.getDefault().lookupAll(ScriptClassProvider.class)) {
                Class clazz=scp.getClassByName(ne.getTarget().getString());
                if (clazz != null) {
                  ctx=new CompletionContext(clazz);
                  return false;
                }
              }
              CompletionContext cc=getModuleCompletionContext(stripElementId(ne.getTarget().getString()));
              if (cc != null) {
                ctx=cc;
                return false;
              }
            }
          }
 else           if (variableInitializer.getInitializer() instanceof FunctionCall) {
            FunctionCall fc=(FunctionCall)variableInitializer.getInitializer();
            if (fc.getTarget() instanceof PropertyGet) {
              PropertyGet pg=(PropertyGet)fc.getTarget();
              if (pg.getLeft().getString().equals(MODULES_OBJECT_NAME) && pg.getRight().getString().equals(GET_METHOD_NAME)) {
                if (fc.getArguments() != null && fc.getArguments().size() > 0) {
                  ctx=getModuleCompletionContext(stripElementId(fc.getArguments().get(0).toSource()));
                  return false;
                }
              }
            }
          }
        }
      }
    }
    return false;
  }
  return true;
}",0.992928452579035
145708,"public CompletionContext getModuleInfo(){
  node.visit(new NodeVisitor(){
    @Override public boolean visit(    AstNode an){
      if (an == node) {
        return true;
      }
      if (an instanceof FunctionNode) {
        return false;
      }
      if (an instanceof VariableDeclaration) {
        VariableDeclaration variableDeclaration=(VariableDeclaration)an;
        if (variableDeclaration.getVariables() != null) {
          for (          VariableInitializer variableInitializer : variableDeclaration.getVariables()) {
            if (variableInitializer.getTarget() != null && variableInitializer.getTarget().getString().equals(fieldName) && variableInitializer.getInitializer() != null) {
              if (variableInitializer.getInitializer() instanceof NewExpression) {
                NewExpression ne=(NewExpression)variableInitializer.getInitializer();
                if (ne.getTarget() != null) {
                  if (isModuleInitializerName(ne.getTarget().getString()) && ne.getArguments() != null && ne.getArguments().size() > 0) {
                    ctx=getModuleCompletionContext(stripElementId(ne.getArguments().get(0).toSource()));
                    return false;
                  }
                  for (                  ScriptClassProvider scp : Lookup.getDefault().lookupAll(ScriptClassProvider.class)) {
                    Class clazz=scp.getClassByName(ne.getTarget().getString());
                    if (clazz != null) {
                      ctx=new CompletionContext(clazz);
                      return false;
                    }
                  }
                  CompletionContext cc=getModuleCompletionContext(stripElementId(ne.getTarget().getString()));
                  if (cc != null) {
                    ctx=cc;
                    return false;
                  }
                }
              }
 else               if (variableInitializer.getInitializer() instanceof FunctionCall) {
                FunctionCall fc=(FunctionCall)variableInitializer.getInitializer();
                if (fc.getTarget() instanceof PropertyGet) {
                  PropertyGet pg=(PropertyGet)fc.getTarget();
                  if (pg.getLeft().getString().equals(MODULES_OBJECT_NAME) && pg.getRight().getString().equals(GET_METHOD_NAME)) {
                    if (fc.getArguments() != null && fc.getArguments().size() > 0) {
                      ctx=getModuleCompletionContext(stripElementId(fc.getArguments().get(0).toSource()));
                      return false;
                    }
                  }
                }
              }
            }
          }
        }
        return false;
      }
      return true;
    }
  }
);
  return ctx;
}","public CompletionContext getModuleInfo(){
  node.visit(new NodeVisitor(){
    @Override public boolean visit(    AstNode an){
      if (an == node) {
        return true;
      }
      if (an instanceof FunctionNode) {
        return false;
      }
      if (an instanceof VariableDeclaration) {
        VariableDeclaration variableDeclaration=(VariableDeclaration)an;
        if (variableDeclaration.getVariables() != null) {
          for (          VariableInitializer variableInitializer : variableDeclaration.getVariables()) {
            if (variableInitializer.getTarget() != null && variableInitializer.getTarget().getString().equals(fieldName) && variableInitializer.getInitializer() != null) {
              if (variableInitializer.getInitializer() instanceof NewExpression) {
                NewExpression ne=(NewExpression)variableInitializer.getInitializer();
                if (ne.getTarget() != null && ne.getTarget() instanceof Name) {
                  if (isModuleInitializerName(ne.getTarget().getString()) && ne.getArguments() != null && ne.getArguments().size() > 0) {
                    ctx=getModuleCompletionContext(stripElementId(ne.getArguments().get(0).toSource()));
                    return false;
                  }
                  for (                  ScriptClassProvider scp : Lookup.getDefault().lookupAll(ScriptClassProvider.class)) {
                    Class clazz=scp.getClassByName(ne.getTarget().getString());
                    if (clazz != null) {
                      ctx=new CompletionContext(clazz);
                      return false;
                    }
                  }
                  CompletionContext cc=getModuleCompletionContext(stripElementId(ne.getTarget().getString()));
                  if (cc != null) {
                    ctx=cc;
                    return false;
                  }
                }
              }
 else               if (variableInitializer.getInitializer() instanceof FunctionCall) {
                FunctionCall fc=(FunctionCall)variableInitializer.getInitializer();
                if (fc.getTarget() instanceof PropertyGet) {
                  PropertyGet pg=(PropertyGet)fc.getTarget();
                  if (pg.getLeft().getString().equals(MODULES_OBJECT_NAME) && pg.getRight().getString().equals(GET_METHOD_NAME)) {
                    if (fc.getArguments() != null && fc.getArguments().size() > 0) {
                      ctx=getModuleCompletionContext(stripElementId(fc.getArguments().get(0).toSource()));
                      return false;
                    }
                  }
                }
              }
            }
          }
        }
        return false;
      }
      return true;
    }
  }
);
  return ctx;
}",0.9937522969496508
145709,"public static byte[] load(String aResourceId) throws Exception {
  if (aResourceId != null && !aResourceId.isEmpty()) {
    Matcher htppMatcher=pattern.matcher(aResourceId);
    if (htppMatcher.matches()) {
      URL url=new URL(aResourceId);
      String file=""String_Node_Str"";
      if (url.getPath() != null && !url.getPath().isEmpty()) {
        file+=(new URI(null,null,url.getPath(),null)).toASCIIString();
      }
      if (url.getQuery() != null && !url.getQuery().isEmpty()) {
        file+=""String_Node_Str"" + url.getQuery();
      }
      if (url.getRef() != null && !url.getRef().isEmpty()) {
        file+=""String_Node_Str"" + url.getRef();
      }
      url=new URL(url.getProtocol(),IDN.toASCII(url.getHost()),url.getPort(),file);
      try (InputStream is=url.openStream()){
        return BinaryUtils.readStream(is,-1);
      }
     }
 else {
      if (cache == null) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      String resourceId=translateResourcePath(aResourceId);
      ApplicationElement appElement=cache.get(resourceId);
      if (appElement != null) {
        if (appElement.getType() == ClientConstants.ET_RESOURCE) {
          if (!cache.isActual(appElement.getId(),appElement.getTxtContentLength(),appElement.getTxtCrc32())) {
            cache.remove(appElement.getId());
            appElement=cache.get(resourceId);
          }
        }
 else {
          throw new NotResourceException(resourceId);
        }
      }
      if (appElement != null && appElement.getType() == ClientConstants.ET_RESOURCE) {
        return appElement.getBinaryContent();
      }
 else {
        return null;
      }
    }
  }
 else {
    return null;
  }
}","public static byte[] load(String aResourceId) throws Exception {
  if (aResourceId != null && !aResourceId.isEmpty()) {
    Matcher htppMatcher=pattern.matcher(aResourceId);
    if (htppMatcher.matches()) {
      URL url=new URL(aResourceId);
      try {
        try (InputStream is=url.openStream()){
          return BinaryUtils.readStream(is,-1);
        }
       }
 catch (      IOException ex) {
        url=encodeUrl(url);
        try (InputStream is=url.openStream()){
          return BinaryUtils.readStream(is,-1);
        }
       }
    }
 else {
      if (cache == null) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      String resourceId=translateResourcePath(aResourceId);
      ApplicationElement appElement=cache.get(resourceId);
      if (appElement != null) {
        if (appElement.getType() == ClientConstants.ET_RESOURCE) {
          if (!cache.isActual(appElement.getId(),appElement.getTxtContentLength(),appElement.getTxtCrc32())) {
            cache.remove(appElement.getId());
            appElement=cache.get(resourceId);
          }
        }
 else {
          throw new NotResourceException(resourceId);
        }
      }
      if (appElement != null && appElement.getType() == ClientConstants.ET_RESOURCE) {
        return appElement.getBinaryContent();
      }
 else {
        return null;
      }
    }
  }
 else {
    return null;
  }
}",0.7491097442538038
145710,"public boolean onBlockPlaced(int max,int owner){
  this.maxBlockCount=max;
  this.ownerID=owner;
  Hashtable<Integer,Integer> blockCounts=null;
  if (blocksPerPlayer.get(this.getClass()) == null) {
    blockCounts=new Hashtable<Integer,Integer>();
    blocksPerPlayer.put(this.getClass(),blockCounts);
  }
 else {
    blockCounts=blocksPerPlayer.get(this.getClass());
  }
  if (maxBlockCount != 0) {
    if (blockCounts.get(owner) != null && blockCounts.get(owner) < maxBlockCount) {
      blockCounts.put(owner,blockCounts.get(owner) + 1);
    }
 else {
      return false;
    }
  }
  return true;
}","public boolean onBlockPlaced(int max,int owner){
  this.maxBlockCount=max;
  this.ownerID=owner;
  Hashtable<Integer,Integer> blockCounts=null;
  if (blocksPerPlayer.get(this.getClass()) == null) {
    blockCounts=new Hashtable<Integer,Integer>();
    blocksPerPlayer.put(this.getClass(),blockCounts);
  }
 else {
    blockCounts=blocksPerPlayer.get(this.getClass());
  }
  if (maxBlockCount != 0) {
    if (blockCounts.get(owner) == null) {
      blockCounts.put(owner,1);
    }
 else     if (blockCounts.get(owner) < maxBlockCount) {
      blockCounts.put(owner,blockCounts.get(owner) + 1);
    }
 else {
      return false;
    }
  }
  return true;
}",0.9409888357256778
145711,"public boolean useItem(int slot){
  if (fakePlayer == null) {
    fakePlayer=new EntityFakePlayer(worldObj,this,xCoord,yCoord,zCoord,worldObj.getBlockMetadata(xCoord,yCoord,zCoord));
  }
  Item item=this.getStackInSlot(slot).getItem();
  int i=xCoord, j=yCoord, k=zCoord, meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  i=AdvancedDispensersLib.INSTANCE.getI(meta,i);
  j=AdvancedDispensersLib.INSTANCE.getJ(meta,j);
  k=AdvancedDispensersLib.INSTANCE.getK(meta,k);
  Block user=worldObj.getBlock(xCoord,yCoord,zCoord);
  int userMeta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  AxisAlignedBB rect=null;
  int deltaX=xCoord - i, deltaY=yCoord - j, deltaZ=zCoord - k;
  if (deltaX > 0 || deltaY > 0 || deltaZ > 0) {
    rect=AxisAlignedBB.getBoundingBox(xCoord - deltaX * 4 - 0.1,yCoord - deltaY * 4 - 0.1,zCoord - deltaZ * 4 - 0.1,xCoord + 0.1,yCoord + 0.1,zCoord + 0.1);
  }
 else {
    rect=AxisAlignedBB.getBoundingBox(xCoord - 0.1,yCoord - 0.1,zCoord - 0.1,xCoord + deltaX * 4 + 0.1,yCoord + deltaY * 4 + 0.1,zCoord + deltaZ * 4 + 0.1);
  }
  List<EntityLivingBase> near=worldObj.getEntitiesWithinAABB(EntitySheep.class,rect);
  for (  EntityLivingBase base : near) {
    if (item.itemInteractionForEntity(this.getStackInSlot(slot),fakePlayer,base)) {
      return true;
    }
  }
  if (item.onItemUseFirst(this.getStackInSlot(slot),fakePlayer,worldObj,i,j - 1,k,1,0.5f,0.5f,0.5f)) {
  }
 else   if (item.onItemUse(this.getStackInSlot(slot),fakePlayer,worldObj,i,j - 1,k,1,0.5f,0.5f,0.5f)) {
  }
 else {
    this.setInventorySlotContents(slot,item.onItemRightClick(this.getStackInSlot(slot),worldObj,fakePlayer));
  }
  AdvancedDispensersLib.INSTANCE.deleteEmptyStacks(this);
  return true;
}","public boolean useItem(int slot){
  if (fakePlayer == null) {
    fakePlayer=new EntityFakePlayer(worldObj,this,xCoord,yCoord,zCoord,worldObj.getBlockMetadata(xCoord,yCoord,zCoord));
  }
  Item item=this.getStackInSlot(slot).getItem();
  int i=xCoord, j=yCoord, k=zCoord, meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  i=AdvancedDispensersLib.INSTANCE.getI(meta,i);
  j=AdvancedDispensersLib.INSTANCE.getJ(meta,j);
  k=AdvancedDispensersLib.INSTANCE.getK(meta,k);
  Block user=worldObj.getBlock(xCoord,yCoord,zCoord);
  int userMeta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  AxisAlignedBB rect=null;
  int deltaX=xCoord - i, deltaY=yCoord - j, deltaZ=zCoord - k;
  if (deltaX > 0 || deltaY > 0 || deltaZ > 0) {
    rect=AxisAlignedBB.getBoundingBox(xCoord - deltaX * 4 - 0.5,yCoord - deltaY * 4 - 0.5,zCoord - deltaZ * 4 - 0.5,xCoord + 0.5,yCoord + 0.5,zCoord + 0.5);
  }
 else {
    rect=AxisAlignedBB.getBoundingBox(xCoord - 0.5,yCoord - 0.5,zCoord - 0.5,xCoord - deltaX * 4 + 0.5,yCoord - deltaY * 4 + 0.5,zCoord - deltaZ * 4 + 0.5);
  }
  List<EntityLivingBase> near=worldObj.getEntitiesWithinAABB(EntitySheep.class,rect);
  for (  EntityLivingBase base : near) {
    if (item.itemInteractionForEntity(this.getStackInSlot(slot),fakePlayer,base)) {
      return true;
    }
  }
  if (item.onItemUseFirst(this.getStackInSlot(slot),fakePlayer,worldObj,i,j - 1,k,1,0.5f,0.5f,0.5f)) {
  }
 else   if (item.onItemUse(this.getStackInSlot(slot),fakePlayer,worldObj,i,j - 1,k,1,0.5f,0.5f,0.5f)) {
  }
 else {
    this.setInventorySlotContents(slot,item.onItemRightClick(this.getStackInSlot(slot),worldObj,fakePlayer));
  }
  AdvancedDispensersLib.INSTANCE.deleteEmptyStacks(this);
  return true;
}",0.9619883040935672
145712,"public void breakBlock(World world,int x,int y,int z,Block block,int p_149749_6_){
  TileEntityAdvancedDispensers tileEntityAdvancedDispensers=(TileEntityAdvancedDispensers)world.getTileEntity(x,y,z);
  if (tileEntityAdvancedDispensers != null) {
    for (int i1=0; i1 < tileEntityAdvancedDispensers.getSizeInventory(); ++i1) {
      ItemStack itemstack=tileEntityAdvancedDispensers.getStackInSlot(i1);
      if (itemstack != null) {
        float f=this.rand.nextFloat() * 0.8F + 0.1F;
        float f1=this.rand.nextFloat() * 0.8F + 0.1F;
        EntityItem entityitem;
        for (float f2=this.rand.nextFloat() * 0.8F + 0.1F; itemstack.stackSize > 0; world.spawnEntityInWorld(entityitem)) {
          int j1=this.rand.nextInt(21) + 10;
          if (j1 > itemstack.stackSize) {
            j1=itemstack.stackSize;
          }
          itemstack.stackSize-=j1;
          entityitem=new EntityItem(world,(double)((float)x + f),(double)((float)y + f1),(double)((float)z + f2),new ItemStack(itemstack.getItem(),j1,itemstack.getItemDamage()));
          float f3=0.05F;
          entityitem.motionX=(double)((float)this.rand.nextGaussian() * f3);
          entityitem.motionY=(double)((float)this.rand.nextGaussian() * f3 + 0.2F);
          entityitem.motionZ=(double)((float)this.rand.nextGaussian() * f3);
          if (itemstack.hasTagCompound()) {
            entityitem.getEntityItem().setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
          }
        }
      }
    }
    world.func_147453_f(x,y,z,block);
  }
  super.breakBlock(world,x,y,z,block,p_149749_6_);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int p_149749_6_){
  TileEntityAdvancedDispensers tileEntityAdvancedDispensers=(TileEntityAdvancedDispensers)world.getTileEntity(x,y,z);
  if (tileEntityAdvancedDispensers != null) {
    for (int i1=0; i1 < tileEntityAdvancedDispensers.getSizeInventory(); ++i1) {
      ItemStack itemstack=tileEntityAdvancedDispensers.getStackInSlot(i1);
      if (itemstack != null) {
        float f=this.rand.nextFloat() * 0.8F + 0.1F;
        float f1=this.rand.nextFloat() * 0.8F + 0.1F;
        EntityItem entityitem;
        for (float f2=this.rand.nextFloat() * 0.8F + 0.1F; itemstack.stackSize > 0; world.spawnEntityInWorld(entityitem)) {
          int j1=this.rand.nextInt(21) + 10;
          if (j1 > itemstack.stackSize) {
            j1=itemstack.stackSize;
          }
          itemstack.stackSize-=j1;
          entityitem=new EntityItem(world,(double)((float)x + f),(double)((float)y + f1),(double)((float)z + f2),new ItemStack(itemstack.getItem(),j1,itemstack.getItemDamage()));
          float f3=0.05F;
          entityitem.motionX=(double)((float)this.rand.nextGaussian() * f3);
          entityitem.motionY=(double)((float)this.rand.nextGaussian() * f3 + 0.2F);
          entityitem.motionZ=(double)((float)this.rand.nextGaussian() * f3);
          if (itemstack.hasTagCompound()) {
            entityitem.getEntityItem().setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
          }
        }
      }
    }
    world.func_147453_f(x,y,z,block);
  }
  super.breakBlock(world,x,y,z,block,p_149749_6_);
}",0.9968632371392724
145713,"private void placeBlockInFront(World world,int x,int y,int z){
  TileEntityUser tileEntity=(TileEntityUser)world.getTileEntity(x,y,z);
  int meta=world.getBlockMetadata(x,y,z);
  int i=getI(meta,x);
  int j=getJ(meta,y);
  int k=getK(meta,z);
  int slot=getFirstSlot(tileEntity,world,i,j,k);
  if (slot == -1)   return;
  Block block=null;
  ItemStack itemStack=tileEntity.getStackInSlot(slot);
  int itemMetadata=itemStack.getItemDamage();
  if (tileEntity.getStackInSlot(slot).getItem() instanceof IPlantable) {
    block=((IPlantable)itemStack.getItem()).getPlant(world,i,j,k);
    if (!world.getBlock(i,j - 1,k).equals(Blocks.farmland)) {
      return;
    }
  }
 else {
    block=Block.getBlockFromItem(itemStack.getItem());
  }
  if (world.getBlock(i,j,k).equals(Blocks.air) && block != null) {
    world.setBlock(i,j,k,block);
    world.setBlockMetadataWithNotify(i,j,k,itemMetadata,2);
    tileEntity.getStackInSlot(slot).stackSize--;
    if (tileEntity.getStackInSlot(slot).stackSize == 0)     tileEntity.setInventorySlotContents(slot,null);
  }
}","private void placeBlockInFront(World world,int x,int y,int z){
  TileEntityUser tileEntity=(TileEntityUser)world.getTileEntity(x,y,z);
  int meta=world.getBlockMetadata(x,y,z);
  int i=getI(meta,x);
  int j=getJ(meta,y);
  int k=getK(meta,z);
  int slot=getFirstSlot(tileEntity,world,i,j,k);
  if (slot == -1)   return;
  Block block=null;
  ItemStack itemStack=tileEntity.getStackInSlot(slot);
  int itemMetadata=itemStack.getItemDamage();
  if (itemStack.getItem() instanceof IPlantable) {
    block=((IPlantable)itemStack.getItem()).getPlant(world,i,j,k);
    if (!world.getBlock(i,j - 1,k).canSustainPlant(world,i,j,k,ForgeDirection.UP,(IPlantable)block))     return;
  }
 else {
    block=Block.getBlockFromItem(itemStack.getItem());
  }
  if (world.getBlock(i,j,k).equals(Blocks.air) && block != null) {
    world.setBlock(i,j,k,block);
    world.setBlockMetadataWithNotify(i,j,k,itemMetadata,2);
    tileEntity.getStackInSlot(slot).stackSize--;
    if (tileEntity.getStackInSlot(slot).stackSize == 0)     tileEntity.setInventorySlotContents(slot,null);
  }
}",0.8288543140028288
145714,"@Override public void onBlockHarvested(World world,int x,int y,int z,int meta,EntityPlayer player){
  super.onBlockHarvested(world,x,y,z,meta,player);
  Hashtable<Class<? extends BlockAdvancedDispensers>,Integer> map=blocksPerPlayer.get(player);
  map.put(this.getClass(),map.get(this.getClass()).intValue() - 2);
  System.out.println(map.get(this.getClass()).intValue());
}","@Override public void onBlockHarvested(World world,int x,int y,int z,int meta,EntityPlayer player){
  super.onBlockHarvested(world,x,y,z,meta,player);
  Hashtable<Class<? extends BlockAdvancedDispensers>,Integer> map=blocksPerPlayer.get(player);
  if (map != null) {
    EntityLivingBase owner=((TileEntityAdvancedDispensers)world.getTileEntity(x,y,z)).getOwner();
    int i=map.get(this.getClass()).intValue();
    if (i - 2 >= 0 && owner.equals(player)) {
      map.put(this.getClass(),i - 2);
    }
  }
}",0.681044267877412
145715,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase livingBase,ItemStack itemStack){
  super.onBlockPlacedBy(world,x,y,z,livingBase,itemStack);
  Hashtable<Class<? extends BlockAdvancedDispensers>,Integer> blockCounts=blocksPerPlayer.get(livingBase);
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase livingBase,ItemStack itemStack){
  super.onBlockPlacedBy(world,x,y,z,livingBase,itemStack);
  ((TileEntityAdvancedDispensers)world.getTileEntity(x,y,z)).setOwner(livingBase);
  Hashtable<Class<? extends BlockAdvancedDispensers>,Integer> blockCounts=blocksPerPlayer.get(livingBase);
  if (maxBlockCount != 0 && blockCounts != null && blockCounts.get(this.getClass()) != null && blockCounts.get(this.getClass()) >= maxBlockCount) {
    if (livingBase instanceof EntityPlayer) {
      EntityPlayer player=(EntityPlayer)livingBase;
      player.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + I18n.format(""String_Node_Str"",new Object[0])));
      if (!player.capabilities.isCreativeMode)       player.inventory.getStackInSlot(player.inventory.currentItem).stackSize++;
    }
    world.setBlock(x,y,z,Blocks.air);
  }
 else {
    if (blocksPerPlayer.get(livingBase) == null) {
      blocksPerPlayer.put(livingBase,new Hashtable<Class<? extends BlockAdvancedDispensers>,Integer>());
    }
    int value=0;
    if (blocksPerPlayer.get(livingBase).get(this.getClass()) != null) {
      value=blocksPerPlayer.get(livingBase).get(this.getClass()).intValue();
    }
    Hashtable<Class<? extends BlockAdvancedDispensers>,Integer> old=blocksPerPlayer.get(livingBase);
    old.put(this.getClass(),value + 1);
    System.out.println(old.get(this.getClass()).intValue());
    blocksPerPlayer.put(livingBase,old);
  }
}",0.318970341354225
145716,"public TileEntityUser(){
  super(""String_Node_Str"",9);
}","public TileEntityUser(){
  super(""String_Node_Str"",9);
  fakePlayer=null;
}",0.8549618320610687
145717,"public void useItem(int slot){
  Item item=this.getStackInSlot(slot).getItem();
  int i=xCoord, j=yCoord, k=zCoord, c=0, meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  do {
    i=AdvancedDispensersLib.INSTANCE.getI(meta,i);
    j=AdvancedDispensersLib.INSTANCE.getJ(meta,j);
    k=AdvancedDispensersLib.INSTANCE.getK(meta,k);
    c++;
  }
 while (c < fakePlayer.getRange() && !worldObj.getBlock(i,j,k).equals(Blocks.air));
  int side;
  if (meta % 2 == 0)   side=meta + 1;
 else   side=meta - 1;
  if (item.onItemUseFirst(this.getStackInSlot(slot),fakePlayer,worldObj,i,j,k,side,0.5f,0.5f,0.5f)) {
  }
 else   if (item.onItemUse(this.getStackInSlot(slot),fakePlayer,worldObj,i,j,k,side,0.5f,0.5f,0.5f)) {
  }
 else {
    this.setInventorySlotContents(slot,item.onItemRightClick(this.getStackInSlot(slot),worldObj,fakePlayer));
    if (this.getStackInSlot(slot).stackSize == 0)     this.setInventorySlotContents(slot,null);
  }
}","public void useItem(int slot){
  if (fakePlayer == null) {
    fakePlayer=new EntityFakePlayer(worldObj,this,xCoord,yCoord,zCoord,worldObj.getBlockMetadata(xCoord,yCoord,zCoord));
  }
  Item item=this.getStackInSlot(slot).getItem();
  int i=xCoord, j=yCoord, k=zCoord, c=0, meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  do {
    i=AdvancedDispensersLib.INSTANCE.getI(meta,i);
    j=AdvancedDispensersLib.INSTANCE.getJ(meta,j);
    k=AdvancedDispensersLib.INSTANCE.getK(meta,k);
    c++;
  }
 while (c < fakePlayer.getRange() && !worldObj.getBlock(i,j,k).equals(Blocks.air));
  int side;
  if (meta % 2 == 0)   side=meta + 1;
 else   side=meta - 1;
  if (item.onItemUseFirst(this.getStackInSlot(slot),fakePlayer,worldObj,i,j,k,side,0.5f,0.5f,0.5f)) {
  }
 else   if (item.onItemUse(this.getStackInSlot(slot),fakePlayer,worldObj,i,j,k,side,0.5f,0.5f,0.5f)) {
  }
 else {
    this.setInventorySlotContents(slot,item.onItemRightClick(this.getStackInSlot(slot),worldObj,fakePlayer));
    if (this.getStackInSlot(slot).stackSize == 0)     this.setInventorySlotContents(slot,null);
  }
}",0.9245189935865812
145718,"@Override public void setWorldObj(World world){
  super.setWorldObj(world);
  fakePlayer=new EntityFakePlayer(worldObj,this,xCoord,yCoord,zCoord,worldObj.getBlockMetadata(xCoord,yCoord,zCoord));
}","@Override public void setWorldObj(World world){
  super.setWorldObj(world);
}",0.5641025641025641
145719,"private void initPosition(int x,int y,int z,int meta){
  double var3=(double)x + 0.5D;
  double var5=(double)y - 1.1D;
  double var7=(double)z + 0.5D;
  float var1;
  float var2;
  System.out.println(""String_Node_Str"" + (meta - 8));
switch (meta - 8) {
case 0:
    var1=-90.0F;
  var2=0.0F;
var5+=0.51D;
break;
case 1:
var1=90.0F;
var2=0.0F;
var5-=0.51D;
break;
case 2:
var1=0.0F;
var2=0.0F;
var7+=0.51D;
break;
case 3:
var1=0.0F;
var2=180.0F;
var7-=0.51D;
break;
case 4:
var1=0.0F;
var2=90.0F;
var3-=0.51D;
break;
default :
var1=0.0F;
var2=270.0F;
var3+=0.51D;
}
this.setLocationAndAngles(var3,var5,var7,var2,var1);
}","private void initPosition(int x,int y,int z,int meta){
  double var3=(double)x + 0.5D;
  double var5=(double)y - 1.1D;
  double var7=(double)z + 0.5D;
  float var1;
  float var2;
switch (meta - 8) {
case 0:
    var1=90.0F;
  var2=0.0F;
var5-=0.51D;
break;
case 1:
var1=-90.0F;
var2=0.0F;
var5+=0.51D;
break;
case 2:
var1=0.0F;
var2=180.0F;
var7-=0.51D;
break;
case 3:
var1=0.0F;
var2=0.0F;
var7+=0.51D;
break;
case 4:
var1=0.0F;
var2=90.0F;
var3-=0.51D;
break;
default :
var1=0.0F;
var2=270.0F;
var3+=0.51D;
}
this.setLocationAndAngles(var3,var5,var7,var2,var1);
}",0.7918781725888325
145720,"public BlockUser(int tickRate,boolean enableFakePlayer){
  super(Material.wood);
  this.tickRate=tickRate;
  this.setCreativeTab(AdvancedDispensersMod.advancedDispensersTab);
  this.setHardness(2f);
  this.setBlockName(""String_Node_Str"");
  this.setStepSound(soundTypeWood);
  this.textureHelper=new UserTextureHelper();
  this.enableFakePlayer=enableFakePlayer;
  this.fakePlayer=null;
}","public BlockUser(int tickRate,boolean enableFakePlayer){
  super(Material.wood);
  this.tickRate=tickRate;
  this.setCreativeTab(AdvancedDispensersMod.advancedDispensersTab);
  this.setHardness(2f);
  this.setBlockName(""String_Node_Str"");
  this.setStepSound(soundTypeWood);
  this.textureHelper=new UserTextureHelper();
  this.enableFakePlayer=enableFakePlayer;
}",0.9680851063829788
145721,"@Override public void updateTick(World world,int x,int y,int z,Random random){
  if (!world.isRemote) {
    TileEntityUser tileEntity=(TileEntityUser)world.getTileEntity(x,y,z);
    int slot=getFirstSlot(tileEntity);
    if (slot < 0)     return;
    Item item=tileEntity.getStackInSlot(slot).getItem();
    int meta=world.getBlockMetadata(x,y,z);
    int i=getI(meta,x);
    int j=getJ(meta,y);
    int k=getK(meta,z);
    if (!Block.getBlockFromItem(item).equals(Blocks.air)) {
      System.out.println(""String_Node_Str"" + Block.getBlockFromItem(item).getUnlocalizedName());
      this.placeBlockInFront(world,tileEntity,x,y,z,i,j,k,meta,slot);
    }
 else     if (enableFakePlayer) {
      if (fakePlayer == null)       fakePlayer=new EntityFakePlayer(world,(TileEntityAdvancedDispensers)world.getTileEntity(x,y,z),x,y,z,meta);
      if (item.onItemUse(tileEntity.getStackInSlot(slot),fakePlayer,world,i,j,k,0,0.5f,1.0f,0.5f)) {
        System.out.println(""String_Node_Str"");
        return;
      }
 else {
        tileEntity.setInventorySlotContents(slot,item.onItemRightClick(tileEntity.getStackInSlot(slot),world,fakePlayer));
        if (tileEntity.getStackInSlot(slot).stackSize == 0)         tileEntity.setInventorySlotContents(slot,null);
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","@Override public void updateTick(World world,int x,int y,int z,Random random){
  if (!world.isRemote) {
    TileEntityUser tileEntity=(TileEntityUser)world.getTileEntity(x,y,z);
    int slot=getFirstSlot(tileEntity);
    if (slot < 0)     return;
    Item item=tileEntity.getStackInSlot(slot).getItem();
    int meta=world.getBlockMetadata(x,y,z);
    int i=getI(meta,x);
    int j=getJ(meta,y);
    int k=getK(meta,z);
    if (!Block.getBlockFromItem(item).equals(Blocks.air)) {
      System.out.println(""String_Node_Str"" + Block.getBlockFromItem(item).getUnlocalizedName());
      this.placeBlockInFront(world,tileEntity,x,y,z,i,j,k,meta,slot);
    }
 else     if (enableFakePlayer) {
      tileEntity.useItem(world,x,y,z,meta,slot,i,j,k);
    }
  }
}",0.6930884485258579
145722,"public TileEntityUser(){
  super(""String_Node_Str"",9);
}","public TileEntityUser(){
  super(""String_Node_Str"",9);
  this.fakePlayer=null;
}",0.8235294117647058
145723,"private void breakBlockInFront(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  int i=AdvancedDispensersLib.INSTANCE.getI(meta,x);
  int j=AdvancedDispensersLib.INSTANCE.getJ(meta,y);
  int k=AdvancedDispensersLib.INSTANCE.getK(meta,z);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    if (!silkTouch)     drops=block.getDrops(world,i,j,k,blockmeta,fortune);
 else {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1));
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
        lastActivation=System.currentTimeMillis();
      }
    }
  }
}","private void breakBlockInFront(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  int i=AdvancedDispensersLib.INSTANCE.getI(meta,x);
  int j=AdvancedDispensersLib.INSTANCE.getJ(meta,y);
  int k=AdvancedDispensersLib.INSTANCE.getK(meta,z);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    if (!silkTouch)     drops=block.getDrops(world,i,j,k,blockmeta,fortune);
 else {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1,blockmeta));
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
        lastActivation=System.currentTimeMillis();
      }
    }
  }
}",0.9947033898305084
145724,"private void breakBlockInFront(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  int i=AdvancedDispensersLib.INSTANCE.getI(meta,x);
  int j=AdvancedDispensersLib.INSTANCE.getJ(meta,y);
  int k=AdvancedDispensersLib.INSTANCE.getK(meta,z);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    if (!silkTouch)     drops=block.getDrops(world,i,j,k,blockmeta,fortune);
 else {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1,blockmeta));
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
        lastActivation=System.currentTimeMillis();
      }
    }
  }
}","private void breakBlockInFront(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  int i=AdvancedDispensersLib.INSTANCE.getI(meta,x);
  int j=AdvancedDispensersLib.INSTANCE.getJ(meta,y);
  int k=AdvancedDispensersLib.INSTANCE.getK(meta,z);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    TileEntityBreaker tileEntity=(TileEntityBreaker)world.getTileEntity(x,y,z);
    if (silkTouch && tileEntity.canSilkHarvest(block,world,i,j,k,blockmeta)) {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1,blockmeta));
    }
 else {
      drops=block.getDrops(world,i,j,k,blockmeta,fortune);
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
        lastActivation=System.currentTimeMillis();
      }
    }
  }
}",0.8850855745721271
145725,"private boolean spaceInOutput(){
  ItemStack stack=inventory[9].copy();
  for (int i=25; i < 34; i++) {
    if (inventory[i] == null || (inventory[i].getItem().equals(inventory[9].getItem().equals(inventory[i].getItem()) && inventory[i].stackSize <= inventory[i].getItem().getItemStackLimit(inventory[i]) - inventory[9].stackSize))) {
      return true;
    }
 else     if (inventory[i].getItem().equals(stack.getItem())) {
      stack.stackSize-=inventory[i].getItem().getItemStackLimit(inventory[i]) - inventory[i].stackSize;
    }
    if (stack == null || stack.stackSize <= 0) {
      return true;
    }
  }
  return false;
}","private boolean spaceInOutput(){
  ItemStack stack=inventory[9].copy();
  for (int i=25; i < 34; i++) {
    if (inventory[i] == null || (inventory[i].getItem().equals(stack.getItem()) && inventory[i].getItemDamage() == stack.getItemDamage() && inventory[i].stackSize <= inventory[i].getMaxStackSize() - stack.stackSize)) {
      return true;
    }
 else     if (inventory[i].getItem().equals(stack.getItem())) {
      stack.stackSize-=inventory[i].getMaxStackSize() - inventory[i].stackSize;
    }
    if (stack == null || stack.stackSize <= 0) {
      return true;
    }
  }
  return false;
}",0.8019639934533551
145726,"private void putResultInOutput(){
  ItemStack stack=inventory[9].copy();
  for (int i=25; i < 34; i++) {
    if (inventory[i] == null) {
      inventory[i]=stack;
      return;
    }
 else     if (inventory[i].getItem().equals(inventory[9].getItem().equals(inventory[i].getItem()) && inventory[i].stackSize <= inventory[i].getItem().getItemStackLimit(inventory[i]) - inventory[9].stackSize)) {
      inventory[i].stackSize+=stack.stackSize;
      return;
    }
 else     if (inventory[i].getItem().equals(stack.getItem())) {
      for (int j=0; j < stack.stackSize; j++) {
        if (inventory[i].stackSize == inventory[i].getItem().getItemStackLimit(inventory[i]))         break;
        if (stack.stackSize == 0)         return;
        stack.stackSize--;
        inventory[i].stackSize++;
      }
    }
    if (stack == null || stack.stackSize == 0) {
      return;
    }
  }
}","private void putResultInOutput(){
  ItemStack stack=inventory[9].copy();
  if (containsItem(stack)) {
    putStack(stack);
  }
 else {
    putInEmptySlot(stack);
  }
}",0.2519083969465648
145727,"private IIcon behind(int side){
switch (side) {
case 4:
    return textureBottom;
case 5:
  return textureTop;
default :
return textureSide_right;
}
}","private IIcon behind(int side){
switch (side) {
case 4:
    return textureBottom;
case 5:
  return textureTop;
case 2:
return textureSide_left;
default :
return textureSide_right;
}
}",0.9009009009009008
145728,"private IIcon left(int side){
switch (side) {
case 3:
    return textureBottom;
case 2:
  return textureTop;
case 0:
return textureSide_up;
case 1:
return textureSide_up;
default :
return textureSide_left;
}
}","private IIcon left(int side){
switch (side) {
case 3:
    return textureBottom;
case 2:
  return textureTop;
case 0:
return textureSide_up;
case 1:
return textureSide_up;
case 5:
return textureSide_right;
default :
return textureSide_left;
}
}",0.9247787610619468
145729,"private IIcon front(int side){
switch (side) {
case 5:
    return textureBottom;
case 4:
  return textureTop;
default :
return textureSide_left;
}
}","private IIcon front(int side){
switch (side) {
case 5:
    return textureBottom;
case 4:
  return textureTop;
case 2:
return textureSide_right;
default :
return textureSide_left;
}
}",0.896969696969697
145730,"private IIcon right(int side){
switch (side) {
case 2:
    return textureBottom;
case 3:
  return textureTop;
case 0:
return textureSide_down;
case 1:
return textureSide_down;
default :
return textureSide_right;
}
}","private IIcon right(int side){
switch (side) {
case 2:
    return textureBottom;
case 3:
  return textureTop;
case 0:
return textureSide_down;
case 1:
return textureSide_down;
case 5:
return textureSide_left;
default :
return textureSide_right;
}
}",0.9287257019438444
145731,"@Override public void updateTick(World world,int x,int y,int z,Random random){
  if (!world.isRemote) {
    this.breakBlockInFront(world,x,y,z);
  }
}","@Override public void updateTick(World world,int x,int y,int z,Random random){
  if (!world.isRemote && lastActivation + tickRate * 1000 / 20 <= System.currentTimeMillis()) {
    this.breakBlockInFront(world,x,y,z);
  }
}",0.8086253369272237
145732,"public BlockBreaker(int tier,int fortune,boolean silkTouch,int tickRate){
  super(Material.rock);
  this.setCreativeTab(AdvancedDispensersMod.advancedDispensersTab);
  this.setHardness(2f);
  this.setStepSound(soundTypeStone);
  this.setBlockName(""String_Node_Str"");
  this.fortune=fortune;
  this.silkTouch=silkTouch;
  this.tier=tier;
  this.tickRate=tickRate;
  this.textureHelper=new BreakerTextureHelper(tier);
}","public BlockBreaker(int tier,int fortune,boolean silkTouch,int tickRate){
  super(Material.rock);
  this.setCreativeTab(AdvancedDispensersMod.advancedDispensersTab);
  this.setHardness(2f);
  this.setStepSound(soundTypeStone);
  this.setBlockName(""String_Node_Str"");
  this.fortune=fortune;
  this.silkTouch=silkTouch;
  this.tier=tier;
  this.tickRate=tickRate;
  this.textureHelper=new BreakerTextureHelper(tier);
  this.lastActivation=System.currentTimeMillis();
}",0.9434389140271492
145733,"private void breakBlockInFront(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  int i=getI(x,y,z,meta);
  int j=getJ(x,y,z,meta);
  int k=getK(x,y,z,meta);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    if (!silkTouch)     drops=block.getDrops(world,i,j,k,blockmeta,fortune);
 else {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1));
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
      }
    }
  }
}","private void breakBlockInFront(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  int i=getI(x,y,z,meta);
  int j=getJ(x,y,z,meta);
  int k=getK(x,y,z,meta);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    if (!silkTouch)     drops=block.getDrops(world,i,j,k,blockmeta,fortune);
 else {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1));
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
        lastActivation=System.currentTimeMillis();
      }
    }
  }
}",0.9693693693693692
145734,"@Override public int tickRate(World world){
  return tickRate;
}","@Override public int tickRate(World world){
  return 0;
}",0.9256198347107438
145735,"private int getI(int x,int y,int z,int meta){
switch (meta) {
case 12:
    return x - 1;
case 13:
  return x + 1;
default :
return x;
}
}","private int getI(int x,int y,int z,int meta){
switch (meta) {
case 4:
    return x - 1;
case 5:
  return x + 1;
case 12:
return x - 1;
case 13:
return x + 1;
default :
return x;
}
}",0.8364779874213837
145736,"private int getJ(int x,int y,int z,int meta){
switch (meta) {
case 8:
    return y - 1;
case 9:
  return y + 1;
default :
return y;
}
}","private int getJ(int x,int y,int z,int meta){
switch (meta) {
case 0:
    return y - 1;
case 1:
  return y + 1;
case 8:
return y - 1;
case 9:
return y + 1;
default :
return y;
}
}",0.8471337579617835
145737,"private int getK(int x,int y,int z,int meta){
switch (meta) {
case 10:
    return z - 1;
case 11:
  return z + 1;
default :
return z;
}
}","private int getK(int x,int y,int z,int meta){
switch (meta) {
case 2:
    return z - 1;
case 3:
  return z + 1;
case 10:
return z - 1;
case 11:
return z + 1;
default :
return z;
}
}",0.8364779874213837
145738,"@Override public void updateTick(World world,int x,int y,int z,Random random){
  if (!world.isRemote) {
    this.breakBlockInFront(world,x,y,z);
  }
}","@Override public void updateTick(World world,int x,int y,int z,Random random){
  if (!world.isRemote && !isBreaking) {
    this.breakBlockInFront(world,x,y,z);
  }
}",0.9523809523809524
145739,"public BlockBreaker(int tier,int fortune,boolean silkTouch,int tickRate){
  super(Material.rock);
  this.setCreativeTab(AdvancedDispensersMod.advancedDispensersTab);
  this.setHardness(2f);
  this.setStepSound(soundTypeStone);
  this.setBlockName(""String_Node_Str"");
  this.fortune=fortune;
  this.silkTouch=silkTouch;
  this.tier=tier;
  this.tickRate=tickRate;
  this.textureHelper=new BreakerTextureHelper(tier);
}","public BlockBreaker(int tier,int fortune,boolean silkTouch,int tickRate){
  super(Material.rock);
  this.setCreativeTab(AdvancedDispensersMod.advancedDispensersTab);
  this.setHardness(2f);
  this.setStepSound(soundTypeStone);
  this.setBlockName(""String_Node_Str"");
  this.fortune=fortune;
  this.silkTouch=silkTouch;
  this.tier=tier;
  this.tickRate=tickRate;
  this.textureHelper=new BreakerTextureHelper(tier);
  this.isBreaking=false;
}",0.9708963911525028
145740,"private void breakBlockInFront(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  int i=getI(x,y,z,meta);
  int j=getJ(x,y,z,meta);
  int k=getK(x,y,z,meta);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    if (!silkTouch)     drops=block.getDrops(world,i,j,k,blockmeta,fortune);
 else {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1));
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
      }
    }
  }
}","private void breakBlockInFront(World world,int x,int y,int z){
  this.isBreaking=true;
  int meta=world.getBlockMetadata(x,y,z);
  int i=getI(x,y,z,meta);
  int j=getJ(x,y,z,meta);
  int k=getK(x,y,z,meta);
  Block block=world.getBlock(i,j,k);
  int blockmeta=world.getBlockMetadata(i,j,k);
  if (!block.equals(Blocks.air) && block.getHarvestLevel(blockmeta) <= this.tier) {
    ArrayList<ItemStack> drops=null;
    if (!silkTouch)     drops=block.getDrops(world,i,j,k,blockmeta,fortune);
 else {
      drops=new ArrayList<ItemStack>();
      drops.add(new ItemStack(block,1));
    }
    TileEntityBreaker tileEntityBreaker=(TileEntityBreaker)world.getTileEntity(x,y,z);
    for (    ItemStack stack : drops) {
      if (getSlotsForItemStack(stack,tileEntityBreaker)) {
        world.setBlock(i,j,k,Blocks.air);
      }
    }
  }
  this.isBreaking=false;
}",0.9705351773902584
145741,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  SnipSpace space=SnipSpaceFactory.getInstance();
  Configuration config=Application.get().getConfiguration();
  String eTag=request.getHeader(""String_Node_Str"");
  if (null != eTag && eTag.equals(space.getETag())) {
    response.setHeader(""String_Node_Str"",space.getETag());
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
    return;
  }
 else {
    String version=request.getParameter(""String_Node_Str"");
    String type=request.getParameter(""String_Node_Str"");
    String sourceSnipName=request.getParameter(""String_Node_Str"");
    if (null == sourceSnipName) {
      sourceSnipName=config.getStartSnip();
    }
    Snip sourceSnip=space.load(sourceSnipName);
    Object object=Components.getComponent(PlainTextRenderEngine.class);
    System.err.println(""String_Node_Str"" + object.getClass());
    FeederRepository repository=(FeederRepository)Components.getComponent(FeederRepository.class);
    Feeder feeder=(Feeder)repository.get(type);
    if (null == feeder || ""String_Node_Str"".equals(feeder.getName())) {
      if (sourceSnip.isWeblog()) {
        feeder=new BlogFeeder(sourceSnipName);
      }
 else {
        feeder=new BlogFeeder();
      }
    }
    Snip snip=feeder.getContextSnip();
    SyndFeedI feed=new SyndFeed();
    if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version) || ""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version) || ""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else {
      feed.setFeedType(""String_Node_Str"");
    }
    String url=config.getUrl(""String_Node_Str"");
    feed.setTitle(config.getName());
    feed.setLink(url + snip.getNameEncoded());
    feed.setDescription(config.getTagline());
    feed.setCopyright(""String_Node_Str"" + year.format(snip.getModified().getmTime()));
    feed.setLanguage(config.getLocale().getLanguage());
    List entries=new ArrayList();
    SyndEntryI entry;
    SyndContentI description;
    List rssSnips=feeder.getFeed();
    Iterator iterator=rssSnips.iterator();
    while (iterator.hasNext()) {
      Snip rssSnip=(Snip)iterator.next();
      entry=new SyndEntry();
      entry.setTitle(rssSnip.getName());
      entry.setLink(url + rssSnip.getNameEncoded());
      description=new SyndContent();
      description.setType(""String_Node_Str"");
      description.setValue(rssSnip.getXMLContent());
      entry.setDescription(description);
      entry.setAuthor(rssSnip.getCUser());
      entry.setPublishedDate(rssSnip.getModified().getmTime());
      entries.add(entry);
    }
    feed.setEntries(entries);
    SyndFeedOutput output=new SyndFeedOutput();
    try {
      output.output(feed,new OutputStreamWriter(response.getOutputStream()));
    }
 catch (    FeedException e) {
      e.printStackTrace();
    }
  }
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  SnipSpace space=SnipSpaceFactory.getInstance();
  Configuration config=Application.get().getConfiguration();
  String eTag=request.getHeader(""String_Node_Str"");
  if (null != eTag && eTag.equals(space.getETag())) {
    response.setHeader(""String_Node_Str"",space.getETag());
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
    return;
  }
 else {
    String version=request.getParameter(""String_Node_Str"");
    String type=request.getParameter(""String_Node_Str"");
    String sourceSnipName=request.getParameter(""String_Node_Str"");
    if (null == sourceSnipName) {
      sourceSnipName=config.getStartSnip();
    }
    Snip sourceSnip=space.load(sourceSnipName);
    Object object=Components.getComponent(PlainTextRenderEngine.class);
    System.err.println(""String_Node_Str"" + object.getClass());
    FeederRepository repository=(FeederRepository)Components.getComponent(FeederRepository.class);
    Feeder feeder=(Feeder)repository.get(type);
    if (null == feeder || ""String_Node_Str"".equals(feeder.getName())) {
      if (sourceSnip.isWeblog()) {
        feeder=new BlogFeeder(sourceSnipName);
      }
 else {
        feeder=new BlogFeeder();
      }
    }
    Snip snip=feeder.getContextSnip();
    SyndFeedI feed=new SyndFeed();
    if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version) || ""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version) || ""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      feed.setFeedType(""String_Node_Str"");
    }
 else {
      feed.setFeedType(""String_Node_Str"");
    }
    String url=config.getUrl(""String_Node_Str"");
    feed.setTitle(config.getName());
    feed.setLink(url + ""String_Node_Str"" + snip.getNameEncoded());
    feed.setDescription(config.getTagline());
    feed.setCopyright(""String_Node_Str"" + year.format(snip.getModified().getmTime()));
    feed.setLanguage(config.getLocale().getLanguage());
    List entries=new ArrayList();
    SyndEntryI entry;
    SyndContentI description;
    List rssSnips=feeder.getFeed();
    Iterator iterator=rssSnips.iterator();
    while (iterator.hasNext()) {
      Snip rssSnip=(Snip)iterator.next();
      entry=new SyndEntry();
      entry.setTitle(rssSnip.getName());
      entry.setLink(url + ""String_Node_Str"" + rssSnip.getNameEncoded());
      description=new SyndContent();
      description.setType(""String_Node_Str"");
      description.setValue(rssSnip.getXMLContent());
      entry.setDescription(description);
      entry.setAuthor(rssSnip.getCUser());
      entry.setPublishedDate(rssSnip.getModified().getmTime());
      entries.add(entry);
    }
    feed.setEntries(entries);
    SyndFeedOutput output=new SyndFeedOutput();
    try {
      output.output(feed,new OutputStreamWriter(response.getOutputStream()));
    }
 catch (    FeedException e) {
      e.printStackTrace();
    }
  }
}",0.9943677837228948
145742,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  SnipSpace space=SnipSpaceFactory.getInstance();
  String eTag=request.getHeader(""String_Node_Str"");
  if (null != eTag && eTag.equals(space.getETag())) {
    response.setHeader(""String_Node_Str"",space.getETag());
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
    return;
  }
 else {
    String version=request.getParameter(""String_Node_Str"");
    String type=request.getParameter(""String_Node_Str"");
    String sourceSnipName=request.getParameter(""String_Node_Str"");
    if (null == sourceSnipName) {
      sourceSnipName=config.getStartSnip();
    }
    Snip sourceSnip=space.load(sourceSnipName);
    Object object=Components.getComponent(PlainTextRenderEngine.class);
    System.err.println(""String_Node_Str"" + object.getClass());
    FeederRepository repository=(FeederRepository)Components.getComponent(FeederRepository.class);
    Feeder feeder=(Feeder)repository.get(type);
    if (null == feeder || ""String_Node_Str"".equals(feeder.getName())) {
      if (sourceSnip.isWeblog()) {
        feeder=new BlogFeeder(sourceSnipName);
      }
 else {
        feeder=new BlogFeeder();
      }
    }
    Snip snip=feeder.getContextSnip();
    request.setAttribute(""String_Node_Str"",snip);
    request.setAttribute(""String_Node_Str"",feeder.getFeed());
    request.setAttribute(""String_Node_Str"",space);
    request.setAttribute(""String_Node_Str"",config);
    request.setAttribute(""String_Node_Str"",config.getUrl(""String_Node_Str""));
    RequestDispatcher dispatcher;
    if (""String_Node_Str"".equals(version)) {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
 else {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
    dispatcher.forward(request,response);
  }
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  SnipSpace space=SnipSpaceFactory.getInstance();
  Configuration config=Application.get().getConfiguration();
  String eTag=request.getHeader(""String_Node_Str"");
  if (null != eTag && eTag.equals(space.getETag())) {
    response.setHeader(""String_Node_Str"",space.getETag());
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
    return;
  }
 else {
    String version=request.getParameter(""String_Node_Str"");
    String type=request.getParameter(""String_Node_Str"");
    String sourceSnipName=request.getParameter(""String_Node_Str"");
    if (null == sourceSnipName) {
      sourceSnipName=config.getStartSnip();
    }
    Snip sourceSnip=space.load(sourceSnipName);
    Object object=Components.getComponent(PlainTextRenderEngine.class);
    System.err.println(""String_Node_Str"" + object.getClass());
    FeederRepository repository=(FeederRepository)Components.getComponent(FeederRepository.class);
    Feeder feeder=(Feeder)repository.get(type);
    if (null == feeder || ""String_Node_Str"".equals(feeder.getName())) {
      if (sourceSnip.isWeblog()) {
        feeder=new BlogFeeder(sourceSnipName);
      }
 else {
        feeder=new BlogFeeder();
      }
    }
    Snip snip=feeder.getContextSnip();
    request.setAttribute(""String_Node_Str"",snip);
    request.setAttribute(""String_Node_Str"",feeder.getFeed());
    request.setAttribute(""String_Node_Str"",space);
    request.setAttribute(""String_Node_Str"",config);
    request.setAttribute(""String_Node_Str"",config.getUrl(""String_Node_Str""));
    RequestDispatcher dispatcher;
    if (""String_Node_Str"".equals(version)) {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(version)) {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
 else {
      dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    }
    dispatcher.forward(request,response);
  }
}",0.9855826045852044
145743,"public String getInputProxy(){
  StringBuffer buffer=new StringBuffer();
  if (Application.get().getUser().isAdmin()) {
    buffer.append(""String_Node_Str"");
    buffer.append(name);
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    Iterator iterator=getTypes().iterator();
    buffer.append(""String_Node_Str"");
    while (iterator.hasNext()) {
      String typeString=(String)iterator.next();
      buffer.append(""String_Node_Str"");
      if (typeString.equals(type)) {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(""String_Node_Str"");
      buffer.append(type);
      buffer.append(""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    Map handlers=ServletPluginLoader.getPlugins();
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    Iterator it=handlers.keySet().iterator();
    while (it.hasNext()) {
      String handlername=(String)it.next();
      buffer.append(""String_Node_Str"");
      if (handlername.equals(getViewHandler())) {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(""String_Node_Str"");
      buffer.append(handlername);
      buffer.append(""String_Node_Str"");
    }
    buffer.append(handlers);
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    it=handlers.keySet().iterator();
    while (it.hasNext()) {
      String handlername=(String)it.next();
      buffer.append(""String_Node_Str"");
      if (handlername.equals(getEditHandler())) {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(""String_Node_Str"");
      buffer.append(handlername);
      buffer.append(""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
  }
 else {
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
  }
  return buffer.toString();
}","public String getInputProxy(){
  StringBuffer buffer=new StringBuffer();
  if (Application.get().getUser().isAdmin()) {
    buffer.append(""String_Node_Str"");
    buffer.append(name);
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    Iterator iterator=getTypes().iterator();
    buffer.append(""String_Node_Str"");
    while (iterator.hasNext()) {
      String typeString=(String)iterator.next();
      buffer.append(""String_Node_Str"");
      if (typeString.equals(type)) {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(""String_Node_Str"");
      buffer.append(typeString);
      buffer.append(""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    Map handlers=ServletPluginLoader.getPlugins();
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    Iterator it=handlers.keySet().iterator();
    while (it.hasNext()) {
      String handlername=(String)it.next();
      buffer.append(""String_Node_Str"");
      if (handlername.equals(getViewHandler())) {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(""String_Node_Str"");
      buffer.append(handlername);
      buffer.append(""String_Node_Str"");
    }
    buffer.append(handlers);
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
    buffer.append(""String_Node_Str"");
    it=handlers.keySet().iterator();
    while (it.hasNext()) {
      String handlername=(String)it.next();
      buffer.append(""String_Node_Str"");
      if (handlername.equals(getEditHandler())) {
        buffer.append(""String_Node_Str"");
      }
      buffer.append(""String_Node_Str"");
      buffer.append(handlername);
      buffer.append(""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
  }
 else {
    buffer.append(ResourceManager.getString(""String_Node_Str"",""String_Node_Str""));
  }
  return buffer.toString();
}",0.9989687177724303
145744,"public void execute(Writer writer,SnipMacroParameter params) throws IllegalArgumentException, IOException {
  Snip snip=params.getSnipRenderContext().getSnip();
  String name=snip.getName();
  String handler=params.get(""String_Node_Str"",0);
  writer.write(""String_Node_Str"");
  writer.write(name);
  writer.write(""String_Node_Str"");
  writer.write(handler);
  int start=snip.getContent().indexOf('}',params.getStart() + getName().length()) + 1;
  int end=params.getEnd() - getName().length() - 2;
  writer.write(""String_Node_Str"" + start);
  writer.write(""String_Node_Str"" + end);
  writer.write(""String_Node_Str"");
}","public void execute(Writer writer,SnipMacroParameter params) throws IllegalArgumentException, IOException {
  Snip snip=params.getSnipRenderContext().getSnip();
  String name=snip.getName();
  String handler=params.get(""String_Node_Str"",0);
  writer.write(""String_Node_Str"");
  writer.write(SnipLink.encode(name));
  writer.write(""String_Node_Str"");
  writer.write(handler);
  int start=snip.getContent().indexOf('}',params.getStart() + getName().length()) + 1;
  int end=params.getEnd() - getName().length() - 2;
  writer.write(""String_Node_Str"" + start);
  writer.write(""String_Node_Str"" + end);
  writer.write(""String_Node_Str"");
}",0.980015987210232
145745,"public Hits search(String queryString){
  Searcher searcher=null;
  try {
    searcher=new IndexSearcher(indexFile().getAbsolutePath());
  }
 catch (  IOException e) {
    Logger.warn(""String_Node_Str"" + indexFile(),e);
  }
  Query query=null;
  try {
    query=MultiFieldQueryParser.parse(queryString,searchFields,new SnipAnalyzer());
  }
 catch (  org.apache.lucene.queryParser.ParseException e1) {
    close(searcher);
    Logger.warn(""String_Node_Str"" + queryString + ""String_Node_Str"");
  }
  Hits hits=null;
  try {
    hits=searcher.search(query);
  }
 catch (  IOException e) {
    close(searcher);
    Logger.warn(""String_Node_Str"",e);
  }
  return hits;
}","public Hits search(String queryString){
  Searcher searcher=null;
  try {
    searcher=new IndexSearcher(indexFile().getAbsolutePath());
  }
 catch (  IOException e) {
    Logger.warn(""String_Node_Str"" + indexFile(),e);
  }
  Query query=null;
  try {
    query=MultiFieldQueryParser.parse(queryString,searchFields,new StandardAnalyzer());
  }
 catch (  org.apache.lucene.queryParser.ParseException e1) {
    close(searcher);
    Logger.warn(""String_Node_Str"" + queryString + ""String_Node_Str"");
  }
  Hits hits=null;
  try {
    hits=searcher.search(query);
  }
 catch (  IOException e) {
    close(searcher);
    Logger.warn(""String_Node_Str"",e);
  }
  return hits;
}",0.992503748125937
145746,"private synchronized void index(Snip snip,boolean exists){
  IndexWriter writer=null;
  try {
    File f;
    boolean create=true;
    if ((f=indexFile()).exists() && f.isDirectory()) {
      create=false;
    }
 else {
      create=true;
    }
    if (exists && f.exists()) {
      removeIndex(snip);
    }
    writer=new IndexWriter(f,new SnipAnalyzer(),create);
    writer.mergeFactor=20;
    writer.addDocument(SnipDocument.Document(snip));
    writer.optimize();
  }
 catch (  IOException e) {
    Logger.warn(""String_Node_Str"",e);
  }
 finally {
    close(writer);
  }
}","private synchronized void index(Snip snip,boolean exists){
  IndexWriter writer=null;
  try {
    File f;
    boolean create=true;
    if ((f=indexFile()).exists() && f.isDirectory()) {
      create=false;
    }
 else {
      create=true;
    }
    if (exists && f.exists()) {
      removeIndex(snip);
    }
    writer=new IndexWriter(f,new StandardAnalyzer(),create);
    writer.mergeFactor=20;
    writer.addDocument(SnipDocument.Document(snip));
    writer.optimize();
  }
 catch (  IOException e) {
    Logger.warn(""String_Node_Str"",e);
  }
 finally {
    close(writer);
  }
}",0.991349480968858
145747,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  Configuration config=Application.get().getConfiguration();
  String snipName=request.getParameter(""String_Node_Str"");
  if (null == snipName) {
    response.sendRedirect(config.getUrl(""String_Node_Str"" + config.getStartSnip()));
    return;
  }
  if (null != request.getParameter(""String_Node_Str"")) {
    response.sendRedirect(config.getUrl(""String_Node_Str"" + SnipLink.encode(snipName)));
    return;
  }
  Snip snip=SnipSpaceFactory.getInstance().load(snipName);
  String labelName=request.getParameter(""String_Node_Str"");
  snip.getLabels().removeLabel(labelName);
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"" + SnipLink.encode(snipName));
  dispatcher.forward(request,response);
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  Configuration config=Application.get().getConfiguration();
  String type=request.getHeader(""String_Node_Str"");
  if (type != null && type.startsWith(""String_Node_Str"")) {
    try {
      request=new MultipartWrapper(request,config.getEncoding() != null ? config.getEncoding() : ""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      Logger.warn(""String_Node_Str"" + e.getMessage());
    }
  }
  String snipName=request.getParameter(""String_Node_Str"");
  if (null == snipName) {
    response.sendRedirect(config.getUrl(""String_Node_Str"" + config.getStartSnip()));
    return;
  }
  if (null != request.getParameter(""String_Node_Str"")) {
    response.sendRedirect(config.getUrl(""String_Node_Str"" + SnipLink.encode(snipName)));
    return;
  }
  Snip snip=SnipSpaceFactory.getInstance().load(snipName);
  String labelName=request.getParameter(""String_Node_Str"");
  snip.getLabels().removeLabel(labelName);
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"" + SnipLink.encode(snipName));
  dispatcher.forward(request,response);
}",0.8257425742574257
145748,"public void remove(Snip snip){
synchronized (delayed) {
    if (!delayed.contains(snip)) {
      delayed.remove(snip);
    }
  }
  changed.getQueue().remove(snip);
  storage.storageRemove(snip);
  indexer.removeIndex(snip);
  return;
}","public void remove(Snip snip){
synchronized (delayed) {
    delayed.remove(snip);
  }
  changed.getQueue().remove(snip);
  storage.storageRemove(snip);
  indexer.removeIndex(snip);
  return;
}",0.8992974238875878
145749,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  String parent=request.getParameter(""String_Node_Str"");
  String parentBefore=request.getParameter(""String_Node_Str"");
  if (null == parentBefore) {
    parentBefore=parent;
  }
  String content=request.getParameter(""String_Node_Str"");
  String name=request.getParameter(""String_Node_Str"");
  String template=request.getParameter(""String_Node_Str"");
  if (template != null) {
    SnipSpace space=(SnipSpace)Components.getComponent(SnipSpace.class);
    Snip snip=space.load(template);
    content=snip.getContent();
  }
  request.setAttribute(""String_Node_Str"",parent);
  request.setAttribute(""String_Node_Str"",parentBefore);
  request.setAttribute(""String_Node_Str"",content);
  request.setAttribute(""String_Node_Str"",name);
  request.setAttribute(""String_Node_Str"",getTemplates());
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  String parent=request.getParameter(""String_Node_Str"");
  String parentBefore=request.getParameter(""String_Node_Str"");
  if (null == parentBefore) {
    parentBefore=parent;
  }
  String content=request.getParameter(""String_Node_Str"");
  String name=request.getParameter(""String_Node_Str"");
  String template=request.getParameter(""String_Node_Str"");
  String copy=request.getParameter(""String_Node_Str"");
  if ((copy != null) && (template != null)) {
    SnipSpace space=(SnipSpace)Components.getComponent(SnipSpace.class);
    Snip snip=space.load(template);
    content=snip.getContent();
  }
  request.setAttribute(""String_Node_Str"",parent);
  request.setAttribute(""String_Node_Str"",parentBefore);
  request.setAttribute(""String_Node_Str"",content);
  request.setAttribute(""String_Node_Str"",name);
  request.setAttribute(""String_Node_Str"",getTemplates());
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}",0.9569332702318978
145750,"private static Document repair(Document document,File webAppRoot){
  Map userData=new TreeMap();
  Map snipData=new TreeMap();
  Map unknown=new TreeMap();
  Element rootEl=document.getRootElement();
  Iterator elementIt=rootEl.elementIterator();
  System.err.println(""String_Node_Str"");
  long identDup=0;
  long oldDup=0;
  long newDup=0;
  while (elementIt.hasNext()) {
    Element element=(Element)elementIt.next();
    Element idElement=null;
    Map data=null;
    if (""String_Node_Str"".equals(element.getName())) {
      idElement=element.element(""String_Node_Str"");
      data=userData;
    }
 else     if (""String_Node_Str"".equals(element.getName())) {
      idElement=element.element(""String_Node_Str"");
      data=snipData;
    }
    if (null != data && null != idElement) {
      String id=element.getName() + ""String_Node_Str"" + idElement.getText()+ ""String_Node_Str"";
      long mtime=Long.parseLong(element.element(""String_Node_Str"").getTextTrim());
      Element existingElement=(Element)data.get(id);
      if (existingElement != null) {
        long lastmtime=Long.parseLong(existingElement.element(""String_Node_Str"").getTextTrim());
        if (mtime > lastmtime) {
          newDup++;
          System.err.println(""String_Node_Str"" + id + ""String_Node_Str""+ (mtime - lastmtime)+ ""String_Node_Str"");
          data.put(id,element);
        }
 else         if (mtime == lastmtime) {
          identDup++;
          System.err.println(""String_Node_Str"" + id);
        }
 else {
          oldDup++;
          System.err.println(""String_Node_Str"" + id);
        }
        if (snipData == data) {
          String name=idElement.getText();
          if (name.startsWith(""String_Node_Str"")) {
            String commentSnip=name.substring(""String_Node_Str"".length(),name.lastIndexOf(""String_Node_Str""));
            Element commentEl=element.element(""String_Node_Str"");
            if (commentEl == null) {
              commentEl=element.addElement(""String_Node_Str"");
            }
            if (!commentSnip.equals(commentEl.getText())) {
              commentEl.addText(commentSnip);
              System.err.println(""String_Node_Str"" + name + ""String_Node_Str""+ commentSnip+ ""String_Node_Str"");
            }
          }
 else           if (name.matches(""String_Node_Str"")) {
            Element parentEl=element.element(""String_Node_Str"");
            if (null == parentEl) {
              parentEl=element.addElement(""String_Node_Str"");
            }
            if (!""String_Node_Str"".equals(parentEl.getText())) {
              parentEl.addText(""String_Node_Str"");
              System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
      }
 else {
        data.put(id,element);
      }
    }
 else {
      System.err.println(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
      unknown.put(element,element);
    }
  }
  System.err.println(""String_Node_Str"" + identDup + ""String_Node_Str""+ newDup+ ""String_Node_Str""+ oldDup+ ""String_Node_Str"");
  if (unknown.size() > 0) {
    System.err.println(""String_Node_Str"" + unknown.size() + ""String_Node_Str"");
  }
  Document outputDocument=DocumentHelper.createDocument();
  outputDocument.addElement(rootEl.getName());
  rootEl=outputDocument.getRootElement();
  System.err.println(""String_Node_Str"" + userData.size() + ""String_Node_Str"");
  Iterator userIt=userData.values().iterator();
  while (userIt.hasNext()) {
    Element userEl=(Element)userIt.next();
    rootEl.add(userEl.detach());
  }
  int attCount=0;
  System.err.print(""String_Node_Str"" + snipData.size() + ""String_Node_Str"");
  if (webAppRoot != null) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println();
  }
  Iterator snipIt=snipData.values().iterator();
  while (snipIt.hasNext()) {
    Element snipEl=(Element)snipIt.next();
    if (webAppRoot != null) {
      attCount+=storeAttachments(snipEl,new File(webAppRoot,""String_Node_Str""));
      attCount+=storeOldImages(snipEl,new File(webAppRoot,""String_Node_Str""));
    }
    rootEl.add(snipEl.detach());
  }
  System.err.println(""String_Node_Str"" + attCount + ""String_Node_Str"");
  return outputDocument;
}","private static Document repair(Document document,File webAppRoot){
  Map userData=new TreeMap();
  Map snipData=new TreeMap();
  Map unknown=new TreeMap();
  Element rootEl=document.getRootElement();
  Iterator elementIt=rootEl.elementIterator();
  System.err.println(""String_Node_Str"");
  long identDup=0;
  long oldDup=0;
  long newDup=0;
  while (elementIt.hasNext()) {
    Element element=(Element)elementIt.next();
    Element idElement=null;
    Map data=null;
    if (""String_Node_Str"".equals(element.getName())) {
      idElement=element.element(""String_Node_Str"");
      data=userData;
    }
 else     if (""String_Node_Str"".equals(element.getName())) {
      idElement=element.element(""String_Node_Str"");
      data=snipData;
    }
    if (null != data && null != idElement) {
      String id=element.getName() + ""String_Node_Str"" + idElement.getText().toUpperCase()+ ""String_Node_Str"";
      long mtime=Long.parseLong(element.element(""String_Node_Str"").getTextTrim());
      Element existingElement=(Element)data.get(id);
      if (existingElement != null) {
        long lastmtime=Long.parseLong(existingElement.element(""String_Node_Str"").getTextTrim());
        if (mtime > lastmtime) {
          newDup++;
          System.err.println(""String_Node_Str"" + id + ""String_Node_Str""+ (mtime - lastmtime)+ ""String_Node_Str"");
          data.put(id,element);
        }
 else         if (mtime == lastmtime) {
          identDup++;
          System.err.println(""String_Node_Str"" + id);
        }
 else {
          oldDup++;
          System.err.println(""String_Node_Str"" + id);
        }
        if (snipData == data) {
          String name=idElement.getText();
          if (name.startsWith(""String_Node_Str"")) {
            String commentSnip=name.substring(""String_Node_Str"".length(),name.lastIndexOf(""String_Node_Str""));
            Element commentEl=element.element(""String_Node_Str"");
            if (commentEl == null) {
              commentEl=element.addElement(""String_Node_Str"");
            }
            if (!commentSnip.equals(commentEl.getText())) {
              commentEl.addText(commentSnip);
              System.err.println(""String_Node_Str"" + name + ""String_Node_Str""+ commentSnip+ ""String_Node_Str"");
            }
          }
 else           if (name.matches(""String_Node_Str"")) {
            Element parentEl=element.element(""String_Node_Str"");
            if (null == parentEl) {
              parentEl=element.addElement(""String_Node_Str"");
            }
            if (!""String_Node_Str"".equals(parentEl.getText())) {
              parentEl.addText(""String_Node_Str"");
              System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
      }
 else {
        data.put(id,element);
      }
    }
 else {
      System.err.println(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
      unknown.put(element,element);
    }
  }
  System.err.println(""String_Node_Str"" + identDup + ""String_Node_Str""+ newDup+ ""String_Node_Str""+ oldDup+ ""String_Node_Str"");
  if (unknown.size() > 0) {
    System.err.println(""String_Node_Str"" + unknown.size() + ""String_Node_Str"");
  }
  Document outputDocument=DocumentHelper.createDocument();
  outputDocument.addElement(rootEl.getName());
  rootEl=outputDocument.getRootElement();
  System.err.println(""String_Node_Str"" + userData.size() + ""String_Node_Str"");
  Iterator userIt=userData.values().iterator();
  while (userIt.hasNext()) {
    Element userEl=(Element)userIt.next();
    rootEl.add(userEl.detach());
  }
  int attCount=0;
  System.err.print(""String_Node_Str"" + snipData.size() + ""String_Node_Str"");
  if (webAppRoot != null) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println();
  }
  Iterator snipIt=snipData.values().iterator();
  while (snipIt.hasNext()) {
    Element snipEl=(Element)snipIt.next();
    if (webAppRoot != null) {
      attCount+=storeAttachments(snipEl,new File(webAppRoot,""String_Node_Str""));
      attCount+=storeOldImages(snipEl,new File(webAppRoot,""String_Node_Str""));
    }
    rootEl.add(snipEl.detach());
  }
  System.err.println(""String_Node_Str"" + attCount + ""String_Node_Str"");
  return outputDocument;
}",0.9983301526717556
145751,"public Map setup(HttpServletRequest request,HttpServletResponse response,Configuration config,Map errors){
  String autodetect=request.getParameter(Configuration.APP_REAL_AUTODETECT) != null ? ""String_Node_Str"" : ""String_Node_Str"";
  config.setRealAutodetect(autodetect);
  if (""String_Node_Str"".equals(autodetect)) {
    config.setRealHost(request.getParameter(Configuration.APP_REAL_HOST));
    String portStr=request.getParameter(Configuration.APP_REAL_PORT);
    config.setRealPort(request.getParameter(Configuration.APP_REAL_PORT));
    if (portStr != null && !""String_Node_Str"".equals(portStr)) {
      try {
        Integer.parseInt(portStr);
      }
 catch (      NumberFormatException e) {
        errors.put(Configuration.APP_REAL_PORT,Configuration.APP_REAL_PORT);
      }
    }
  }
  String realProtocol=request.getParameter(Configuration.APP_REAL_PROTOCOL);
  if (null != realProtocol && !""String_Node_Str"".equals(realProtocol)) {
    config.setRealPath(realProtocol.trim());
  }
  String realPath=request.getParameter(Configuration.APP_REAL_PATH);
  if (null != realPath && !""String_Node_Str"".equals(realPath)) {
    realPath=realPath.trim();
    config.setRealPath(realPath.startsWith(""String_Node_Str"") ? realPath : ""String_Node_Str"" + realPath);
  }
  return errors;
}","public Map setup(HttpServletRequest request,HttpServletResponse response,Configuration config,Map errors){
  String autodetect=request.getParameter(Configuration.APP_REAL_AUTODETECT) != null ? ""String_Node_Str"" : ""String_Node_Str"";
  config.setRealAutodetect(autodetect);
  if (""String_Node_Str"".equals(autodetect)) {
    config.setRealHost(request.getParameter(Configuration.APP_REAL_HOST));
    String portStr=request.getParameter(Configuration.APP_REAL_PORT);
    config.setRealPort(request.getParameter(Configuration.APP_REAL_PORT));
    if (portStr != null && !""String_Node_Str"".equals(portStr)) {
      try {
        Integer.parseInt(portStr);
      }
 catch (      NumberFormatException e) {
        errors.put(Configuration.APP_REAL_PORT,Configuration.APP_REAL_PORT);
      }
    }
  }
  String realProtocol=request.getParameter(Configuration.APP_REAL_PROTOCOL);
  if (null != realProtocol && !""String_Node_Str"".equals(realProtocol)) {
    config.setRealProtocol(realProtocol.trim());
  }
  String realPath=request.getParameter(Configuration.APP_REAL_PATH);
  if (null != realPath && !""String_Node_Str"".equals(realPath)) {
    realPath=realPath.trim();
    config.setRealPath(realPath.startsWith(""String_Node_Str"") ? realPath : ""String_Node_Str"" + realPath);
  }
  return errors;
}",0.996114996114996
145752,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  User user=Application.get().getUser();
  AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
  if (service.isAuthenticated(user)) {
    user.lastAccess();
  }
  String name=request.getPathInfo();
  if (null == name || ""String_Node_Str"".equals(name)) {
    name=Application.get().getConfiguration().getStartSnip();
  }
 else {
    name=name.substring(1);
  }
  Configuration config=Application.get().getConfiguration();
  String encodedSpace=config.getEncodedSpace();
  if (encodedSpace != null && encodedSpace.length() > 0) {
    name=name.replace(encodedSpace.charAt(0),' ');
  }
  Snip snip=SnipSpaceFactory.getInstance().load(name);
  ServletOutputStream out=response.getOutputStream();
  response.setContentType(""String_Node_Str"" + Application.get().getConfiguration().getEncoding());
  if (null != snip) {
    snip.handle(request);
    out.println(snip.getContent());
  }
 else {
    out.println(""String_Node_Str"");
  }
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  User user=Application.get().getUser();
  AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
  if (service.isAuthenticated(user)) {
    user.lastAccess();
  }
  String name=request.getPathInfo();
  if (null == name || ""String_Node_Str"".equals(name)) {
    name=Application.get().getConfiguration().getStartSnip();
  }
 else {
    name=name.substring(1);
  }
  Configuration config=Application.get().getConfiguration();
  String encodedSpace=config.getEncodedSpace();
  if (encodedSpace != null && encodedSpace.length() > 0) {
    name=name.replace(encodedSpace.charAt(0),' ');
  }
  Snip snip=SnipSpaceFactory.getInstance().load(name);
  response.setContentType(""String_Node_Str"" + Application.get().getConfiguration().getEncoding());
  PrintWriter out=response.getWriter();
  if (null != snip) {
    snip.handle(request);
    out.println(snip.getContent());
  }
 else {
    out.println(""String_Node_Str"");
  }
}",0.956880733944954
145753,"public boolean restoreXml(byte[] xmlData,int flags) throws IOException {
  ByteArrayInputStream importStream=new ByteArrayInputStream(xmlData);
  try {
    XMLSnipImport.load(importStream,flags);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    e.printStackTrace();
  }
  return true;
}","public boolean restoreXml(byte[] xmlData,int flags) throws IOException {
  ByteArrayInputStream importStream=new ByteArrayInputStream(xmlData);
  try {
    XMLSnipImport.load(importStream,flags);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    throw new IOException(e.getMessage());
  }
  return true;
}",0.9233128834355828
145754,"public void sendMail(String sender,Collection recipientList,String subject,String content){
  try {
    Message mesg=new MimeMessage(session);
    mesg.setFrom(new InternetAddress(sender));
    Iterator iterator=recipientList.iterator();
    while (iterator.hasNext()) {
      String recpt=(String)iterator.next();
      mesg.addRecipient(Message.RecipientType.TO,new InternetAddress(recpt));
    }
    mesg.setSubject(subject);
    Multipart mp=new MimeMultipart();
    BodyPart htmlPart=new MimeBodyPart();
    htmlPart.setContent(content,""String_Node_Str"");
    mp.addBodyPart(htmlPart);
    mesg.setContent(mp);
    Transport.send(mesg);
  }
 catch (  MessagingException ex) {
    Exception e;
    while ((e=ex.getNextException()) != null) {
      Logger.warn(ex.getMessage(),e);
    }
  }
  return;
}","public void sendMail(String sender,Collection recipientList,String subject,String content){
  try {
    Message mesg=new MimeMessage(session);
    mesg.setFrom(new InternetAddress(sender));
    Iterator iterator=recipientList.iterator();
    while (iterator.hasNext()) {
      String recpt=(String)iterator.next();
      mesg.addRecipient(Message.RecipientType.TO,new InternetAddress(recpt));
    }
    mesg.setSubject(subject);
    Multipart mp=new MimeMultipart();
    BodyPart htmlPart=new MimeBodyPart();
    htmlPart.setContent(content,""String_Node_Str"");
    mp.addBodyPart(htmlPart);
    mesg.setContent(mp);
    Transport.send(mesg);
  }
 catch (  MessagingException ex) {
    Exception e;
    if ((e=ex.getNextException()) != null) {
      Logger.warn(ex.getMessage(),e);
    }
  }
  return;
}",0.9956440572495332
145755,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  Configuration config=Application.get().getConfiguration();
  User user=Application.get().getUser();
  AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
  if (service.isAuthenticated(user)) {
    user.lastAccess();
  }
  String name=request.getPathInfo();
  if (null == name || ""String_Node_Str"".equals(name)) {
    name=config.getStartSnip();
  }
 else {
    name=name.substring(1);
  }
  String encodedSpace=config.getEncodedSpace();
  if (encodedSpace != null && encodedSpace.length() > 0) {
    name=name.replace(encodedSpace.charAt(0),' ');
  }
  SnipSpace space=(SnipSpace)Components.getComponent(SnipSpace.class);
  Snip snip=space.load(name);
  String subname=null;
  if (null == snip) {
    int slashIndex=name.lastIndexOf('/');
    if (slashIndex != -1) {
      subname=name.substring(slashIndex + 1);
      name=name.substring(0,slashIndex);
      Logger.log(Logger.DEBUG,name + ""String_Node_Str"" + subname);
    }
    snip=space.load(name);
  }
  Application.get().getParameters().put(""String_Node_Str"",snip);
  request.setAttribute(""String_Node_Str"",snip);
  if (subname != null && subname.length() > 0) {
    try {
      request.setAttribute(FileDownloadServlet.FILENAME,subname);
      RequestDispatcher dispatcher=getServletContext().getNamedDispatcher(""String_Node_Str"");
      dispatcher.forward(request,response);
      return;
    }
 catch (    ServletException e) {
      name=name + ""String_Node_Str"" + subname;
      snip=null;
    }
  }
  if (""String_Node_Str"".equals(request.getMethod())) {
    super.doHead(request,response);
    return;
  }
  if (null == snip) {
    if (config.allow(Configuration.APP_PERM_CREATESNIP)) {
      response.sendRedirect(""String_Node_Str"" + URLEncoderDecoder.encode(name,config.getEncoding()));
    }
 else {
      if (""String_Node_Str"".equals(name)) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
      response.sendRedirect(config.getUrl(""String_Node_Str"" + URLEncoderDecoder.encode(name,config.getEncoding())));
    }
    return;
  }
  snip.handle(request);
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  Configuration config=Application.get().getConfiguration();
  User user=Application.get().getUser();
  AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
  if (service.isAuthenticated(user)) {
    user.lastAccess();
  }
  String name=request.getPathInfo();
  if (null == name || ""String_Node_Str"".equals(name)) {
    name=config.getStartSnip();
  }
 else {
    name=name.substring(1);
  }
  String encodedSpace=config.getEncodedSpace();
  if (encodedSpace != null && encodedSpace.length() > 0) {
    name=name.replace(encodedSpace.charAt(0),' ');
  }
  SnipSpace space=(SnipSpace)Components.getComponent(SnipSpace.class);
  Snip snip=space.load(name);
  String subname=null;
  if (null == snip) {
    int slashIndex=name.lastIndexOf('/');
    if (slashIndex != -1) {
      subname=name.substring(slashIndex + 1);
      name=name.substring(0,slashIndex);
      Logger.log(Logger.DEBUG,name + ""String_Node_Str"" + subname);
    }
    snip=space.load(name);
  }
  Application.get().getParameters().put(""String_Node_Str"",snip);
  request.setAttribute(""String_Node_Str"",snip);
  if (subname != null && subname.length() > 0) {
    try {
      request.setAttribute(FileDownloadServlet.FILENAME,subname);
      RequestDispatcher dispatcher=getServletContext().getNamedDispatcher(""String_Node_Str"");
      dispatcher.forward(request,response);
      return;
    }
 catch (    ServletException e) {
      name=name + ""String_Node_Str"" + subname;
      snip=null;
    }
  }
  if (""String_Node_Str"".equals(request.getMethod())) {
    super.doHead(request,response);
    return;
  }
  if (null == snip) {
    if (config.allow(Configuration.APP_PERM_CREATESNIP)) {
      response.sendRedirect(config.getUrl(""String_Node_Str"" + URLEncoderDecoder.encode(name,config.getEncoding())));
    }
 else {
      if (""String_Node_Str"".equals(name)) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
      response.sendRedirect(config.getUrl(""String_Node_Str"" + URLEncoderDecoder.encode(name,config.getEncoding())));
    }
    return;
  }
  snip.handle(request);
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}",0.9968704360525766
145756,"private void update(Configuration config){
  if (null == dataSource) {
    try {
      System.err.println(""String_Node_Str"" + config.getJdbcDriver());
      Class.forName(config.getJdbcDriver());
    }
 catch (    Exception e) {
      Logger.fatal(""String_Node_Str"" + config.getJdbcDriver(),e);
    }
    String jdbcUrl=config.getJdbcUrl();
    if (jdbcUrl.indexOf(""String_Node_Str"") != -1) {
      jdbcUrl=jdbcUrl.concat(""String_Node_Str"");
    }
 else {
      jdbcUrl=jdbcUrl.concat(""String_Node_Str"");
    }
    jdbcUrl=jdbcUrl.concat(""String_Node_Str"" + config.getJdbcUser()).concat(""String_Node_Str"" + config.getJdbcPassword());
    ObjectPool connectionPool=new GenericObjectPool(null);
    ConnectionFactory connectionFactory=new DriverManagerConnectionFactory(jdbcUrl,config.getJdbcUser(),config.getJdbcPassword());
    PoolableConnectionFactory poolableConnectionFactory=new PoolableConnectionFactory(connectionFactory,connectionPool,null,null,false,true);
    dataSource=new PoolingDataSource(connectionPool);
  }
}","private void update(Configuration config){
  if (null == dataSource) {
    try {
      System.err.println(""String_Node_Str"" + config.getJdbcDriver());
      Class.forName(config.getJdbcDriver());
    }
 catch (    Exception e) {
      Logger.fatal(""String_Node_Str"" + config.getJdbcDriver(),e);
    }
    String jdbcUrl=config.getJdbcUrl();
    if (jdbcUrl.indexOf(""String_Node_Str"") != -1) {
      jdbcUrl=jdbcUrl.concat(""String_Node_Str"");
    }
 else {
      jdbcUrl=jdbcUrl.concat(""String_Node_Str"");
    }
    String jdbcPassword=config.getJdbcPassword();
    if (null != jdbcPassword) {
      jdbcPassword=""String_Node_Str"";
    }
    jdbcUrl=jdbcUrl.concat(""String_Node_Str"" + config.getJdbcUser()).concat(""String_Node_Str"" + jdbcPassword);
    ObjectPool connectionPool=new GenericObjectPool(null);
    ConnectionFactory connectionFactory=new DriverManagerConnectionFactory(jdbcUrl,config.getJdbcUser(),jdbcPassword);
    PoolableConnectionFactory poolableConnectionFactory=new PoolableConnectionFactory(connectionFactory,connectionPool,null,null,false,true);
    dataSource=new PoolingDataSource(connectionPool);
  }
}",0.7741635687732342
145757,"/** 
 * Load snips and users into the SnipSpace from an xml document out of a stream.
 * @param file  the file to load from
 */
private static Document load(File file) throws Exception {
  final long fileLength=file.length();
  System.err.print(""String_Node_Str"");
  SAXReader saxReader=new SAXReader();
  Document document=saxReader.read(new FileReader(file){
    public int read(    char[] chars) throws IOException {
      int n=super.read(chars);
      for (int i=0; i < n; i++) {
        chars[i]=replaceIfIllegal(chars[i]);
      }
      return n;
    }
    public int read(    char[] chars,    int start,    int length) throws IOException {
      int n=super.read(chars,start,length);
      for (int i=0; i < n; i++) {
        chars[i]=replaceIfIllegal(chars[i]);
      }
      readProgress(fileLength,curr+=n,length);
      return n;
    }
    private char replaceIfIllegal(    char c){
      if (c < 0x20 && !(c == 0x09 || c == 0x0a || c == 0x0d)) {
        errCount++;
        return (char)0x20;
      }
      return c;
    }
    private void readProgress(    long length,    long current,    int blockSize){
      long percentage=current * 100 / length;
      if (percentage % 5 != 0 && ((current - blockSize) * 100 / length) % 5 == 0) {
        System.err.print(""String_Node_Str"");
      }
 else       if (percentage % 20 == 0 && ((current - blockSize) * 100 / length) % 20 != 0) {
        System.err.print(NumberFormat.getIntegerInstance().format(percentage) + ""String_Node_Str"");
      }
    }
  }
);
  System.err.println();
  if (errCount > 0) {
    System.err.println(""String_Node_Str"" + errCount + ""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
  }
  return document;
}","/** 
 * Load snips and users into the SnipSpace from an xml document out of a stream.
 * @param file  the file to load from
 */
private static Document load(File file) throws Exception {
  final long fileLength=file.length();
  System.err.print(""String_Node_Str"");
  SAXReader saxReader=new SAXReader();
  InputStreamReader reader=new InputStreamReader(new FileInputStream(file),""String_Node_Str""){
    public int read(    char[] chars) throws IOException {
      int n=super.read(chars);
      for (int i=0; i < n; i++) {
        chars[i]=replaceIfIllegal(chars[i]);
      }
      return n;
    }
    public int read(    char[] chars,    int start,    int length) throws IOException {
      int n=super.read(chars,start,length);
      for (int i=0; i < n; i++) {
        chars[i]=replaceIfIllegal(chars[i]);
      }
      readProgress(fileLength,curr+=n,length);
      return n;
    }
    private char replaceIfIllegal(    char c){
      if (c < 0x20 && !(c == 0x09 || c == 0x0a || c == 0x0d)) {
        errCount++;
        return (char)0x20;
      }
      return c;
    }
    private void readProgress(    long length,    long current,    int blockSize){
      long percentage=current * 100 / length;
      if (percentage % 5 != 0 && ((current - blockSize) * 100 / length) % 5 == 0) {
        System.err.print(""String_Node_Str"");
      }
 else       if (percentage % 20 == 0 && ((current - blockSize) * 100 / length) % 20 != 0) {
        System.err.print(NumberFormat.getIntegerInstance().format(percentage) + ""String_Node_Str"");
      }
    }
  }
;
  Document document=saxReader.read(reader);
  System.err.println();
  if (errCount > 0) {
    System.err.println(""String_Node_Str"" + errCount + ""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
  }
  return document;
}",0.9560347241669
145758,"public void remove(Snip snip){
  changed.getQueue().remove(snip);
  storage.storageRemove(snip);
  indexer.removeIndex(snip);
  return;
}","public void remove(Snip snip){
synchronized (delayed) {
    if (!delayed.contains(snip)) {
      delayed.remove(snip);
    }
  }
  changed.getQueue().remove(snip);
  storage.storageRemove(snip);
  indexer.removeIndex(snip);
  return;
}",0.7258064516129032
145759,"/** 
 * Get user from session or cookie.
 */
public User getUser(HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession();
  User user=(User)session.getAttribute(ATT_USER);
  String appOid=(String)Application.get().getObject(Application.OID);
  if (null != user && !appOid.equals(user.getApplication())) {
    user=null;
  }
  if (null == user) {
    Cookie cookie=getCookie(request,COOKIE_NAME);
    if (cookie != null) {
      String auth=cookie.getValue();
      if (!authHash.containsKey(auth)) {
        updateAuthHash();
      }
      user=(User)authHash.get(auth);
      if (user != null && appOid.equals(user.getApplication())) {
        user=authService.authenticate(user.getLogin(),user.getPasswd(),AuthenticationService.ENCRYPTED);
        setCookie(request,response,user);
      }
 else {
        Logger.warn(""String_Node_Str"" + auth);
        user=null;
      }
    }
    if (null == user) {
      String agent=request.getHeader(""String_Node_Str"");
      Iterator it=robotIds.keySet().iterator();
      while (agent != null && user == null && it.hasNext()) {
        String key=(String)it.next();
        if (agent.toLowerCase().indexOf(key.toLowerCase()) != -1) {
          user=(User)robots.get(key);
          if (null == user) {
            user=new User(key,key,(String)robotIds.get(key));
            user.setNonUser(true);
            robots.put(key,user);
          }
          break;
        }
      }
      if (user != null) {
        Logger.debug(""String_Node_Str"" + user);
      }
 else {
        Logger.debug(""String_Node_Str"" + agent + ""String_Node_Str"");
        user=new User(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        user.setApplication(appOid);
        user.setGuest(true);
      }
      removeCookie(request,response);
    }
    session.setAttribute(ATT_USER,user);
  }
  return user;
}","/** 
 * Get user from session or cookie.
 */
public User getUser(HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession();
  User user=(User)session.getAttribute(ATT_USER);
  String appOid=(String)Application.get().getObject(Application.OID);
  if (null != user && !appOid.equals(user.getApplication())) {
    user=null;
  }
  if (null == user) {
    Cookie cookie=getCookie(request,COOKIE_NAME);
    if (cookie != null) {
      String auth=cookie.getValue();
      if (!authHash.containsKey(auth)) {
        updateAuthHash();
      }
      user=(User)authHash.get(auth);
      if (user != null && appOid.equals(user.getApplication())) {
        user=authService.authenticate(user.getLogin(),user.getPasswd(),AuthenticationService.ENCRYPTED);
        if (null != user) {
          setCookie(request,response,user);
        }
      }
 else {
        Logger.warn(""String_Node_Str"" + auth);
        user=null;
      }
    }
    if (null == user) {
      String agent=request.getHeader(""String_Node_Str"");
      Iterator it=robotIds.keySet().iterator();
      while (agent != null && user == null && it.hasNext()) {
        String key=(String)it.next();
        if (agent.toLowerCase().indexOf(key.toLowerCase()) != -1) {
          user=(User)robots.get(key);
          if (null == user) {
            user=new User(key,key,(String)robotIds.get(key));
            user.setNonUser(true);
            robots.put(key,user);
          }
          break;
        }
      }
      if (user != null) {
        Logger.debug(""String_Node_Str"" + user);
      }
 else {
        Logger.debug(""String_Node_Str"" + agent + ""String_Node_Str"");
        user=new User(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        user.setApplication(appOid);
        user.setGuest(true);
      }
      removeCookie(request,response);
    }
    session.setAttribute(ATT_USER,user);
  }
  return user;
}",0.9894957983193278
145760,"public String getName(){
  return ""String_Node_Str"";
}","public String getName(){
  return name;
}",0.8210526315789474
145761,"public void execute(Writer writer,MacroParameter params) throws IllegalArgumentException, IOException {
  if (params.getLength() == 1) {
    Snip[] snips=space.match(params.get(""String_Node_Str""));
    int depth=-1;
    int startDepth=-1;
    int currentDepth=-1;
    for (int i=0; i < snips.length; i++) {
      Snip snip=snips[i];
      String elements[]=snip.getName().split(""String_Node_Str"");
      currentDepth=elements.length - 1;
      if (startDepth == -1) {
        startDepth=currentDepth;
      }
      if (currentDepth > depth) {
        depth=currentDepth;
        writer.write(""String_Node_Str"");
      }
 else       if (currentDepth < depth) {
        depth=currentDepth;
        writer.write(""String_Node_Str"");
      }
      writer.write(""String_Node_Str"");
      SnipLink.appendLink(writer,snip.getName(),elements[elements.length - 1]);
      writer.write(""String_Node_Str"");
    }
    if (-1 != startDepth) {
      for (int i=0; i < currentDepth; i++) {
        writer.write(""String_Node_Str"");
      }
    }
  }
 else   if (params.getLength() == 2) {
    writer.write(""String_Node_Str"" + params.get(0) + ""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public void execute(Writer writer,MacroParameter params) throws IllegalArgumentException, IOException {
  if (params.getLength() == 1) {
    Snip[] snips=space.match(params.get(""String_Node_Str""));
    Node root=new Node(""String_Node_Str"",false);
    for (int i=0; i < snips.length; i++) {
      Snip snip=snips[i];
      String elements[]=snip.getName().split(""String_Node_Str"");
      Node lastNode=root;
      for (int j=0; j < elements.length; j++) {
        String name=elements[j];
        if (!lastNode.hasChild(name)) {
          boolean isSnip=(j == elements.length - 1);
          Node node=new Node(name,isSnip);
          if (isSnip) {
            node.setSnipName(snip.getName());
          }
          lastNode.addChild(node);
          lastNode=node;
        }
 else {
          lastNode=lastNode.getChild(name);
        }
      }
    }
    writeTree(writer,root);
  }
 else   if (params.getLength() == 2) {
    writer.write(""String_Node_Str"" + params.get(0) + ""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.4893153074574793
145762,"private Macro compileMacro(String macroSource){
  Macro macro=null;
  try {
    GroovyClassLoader gcl=new GroovyClassLoader();
    InputStream is=new ByteArrayInputStream(macroSource.getBytes());
    Class clazz=gcl.parseClass(is,""String_Node_Str"");
    Object aScript=clazz.newInstance();
    macro=(Macro)aScript;
    System.out.println(""String_Node_Str"" + macroSource);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  return macro;
}","private Macro compileMacro(String macroSource){
  Macro macro=null;
  try {
    GroovyClassLoader gcl=new GroovyClassLoader();
    InputStream is=new ByteArrayInputStream(macroSource.getBytes());
    Class clazz=gcl.parseClass(is,""String_Node_Str"");
    Object aScript=clazz.newInstance();
    macro=(Macro)aScript;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  return macro;
}",0.8550573514077163
145763,"public int doStartTag() throws JspException {
  if (null != snip) {
    Map dublinCore=DublinCore.generate(snip);
    try {
      JspWriter out=pageContext.getOut();
      if (""String_Node_Str"".equals(format)) {
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(name.toLowerCase());
          out.print(""String_Node_Str"");
          out.print(value);
          out.print(""String_Node_Str"");
          out.print(name);
          out.println(""String_Node_Str"");
        }
      }
 else {
        out.println(""String_Node_Str"");
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(capitalize(name));
          out.print(""String_Node_Str"");
          out.print(value);
          out.println(""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
      Logger.warn(""String_Node_Str"",e);
    }
  }
  return super.doStartTag();
}","public int doStartTag() throws JspException {
  if (null != snip) {
    Map dublinCore=DublinCore.generate(snip);
    try {
      JspWriter out=pageContext.getOut();
      if (""String_Node_Str"".equals(format)) {
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(name.toLowerCase());
          out.print(""String_Node_Str"");
          out.print(Encoder.escape(value));
          out.print(""String_Node_Str"");
          out.print(name);
          out.println(""String_Node_Str"");
        }
      }
 else {
        out.println(""String_Node_Str"");
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(capitalize(name));
          out.print(""String_Node_Str"");
          out.print(Encoder.escape(value));
          out.println(""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
      Logger.warn(""String_Node_Str"",e);
    }
  }
  return super.doStartTag();
}",0.9873417721518988
145764,"/** 
 * Store a snip in an XML node.
 * @param user the user to store
 * @return the serialized user as XML
 */
public Element serialize(User user){
  Element userElement=DocumentHelper.createElement(USER);
  userElement.addElement(USER_NAME).addText(user.getLogin());
  userElement.addElement(USER_PASSWORD).addText(notNull(user.getPasswd()));
  userElement.addElement(USER_EMAIL).addText(notNull(user.getEmail()));
  userElement.addElement(USER_ROLES).addText(user.getRoles().toString());
  userElement.addElement(USER_STATUS).addText(notNull(user.getStatus()));
  userElement.addElement(USER_CTIME,getStringTimestamp(user.getCTime()));
  userElement.addElement(USER_MTIME,getStringTimestamp(user.getMTime()));
  userElement.addElement(USER_LAST_ACCESS,getStringTimestamp(user.getLastAccess()));
  userElement.addElement(USER_LAST_LOGIN,getStringTimestamp(user.getLastLogin()));
  userElement.addElement(USER_LAST_LOGOUT,getStringTimestamp(user.getLastLogout()));
  userElement.addElement(USER_APPLICATION,notNull(user.getApplication()));
  return userElement;
}","/** 
 * Store a snip in an XML node.
 * @param user the user to store
 * @return the serialized user as XML
 */
public Element serialize(User user){
  Element userElement=DocumentHelper.createElement(USER);
  userElement.addElement(USER_NAME).addText(user.getLogin());
  userElement.addElement(USER_PASSWORD).addText(notNull(user.getPasswd()));
  userElement.addElement(USER_EMAIL).addText(notNull(user.getEmail()));
  userElement.addElement(USER_ROLES).addText(user.getRoles().toString());
  userElement.addElement(USER_STATUS).addText(notNull(user.getStatus()));
  userElement.addElement(USER_CTIME).addText(getStringTimestamp(user.getCTime()));
  userElement.addElement(USER_MTIME).addText(getStringTimestamp(user.getMTime()));
  userElement.addElement(USER_LAST_ACCESS).addText(getStringTimestamp(user.getLastAccess()));
  userElement.addElement(USER_LAST_LOGIN).addText(getStringTimestamp(user.getLastLogin()));
  userElement.addElement(USER_LAST_LOGOUT).addText(getStringTimestamp(user.getLastLogout()));
  userElement.addElement(USER_APPLICATION).addText(notNull(user.getApplication()));
  return userElement;
}",0.9697525206232814
145765,"public static synchronized void removeCurrentUser(HttpSession session){
  if (null == currentUsers) {
    return;
  }
  if (currentUsers.getMap().containsKey(session)) {
    User user=(User)currentUsers.getMap().get(session);
    AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
    if (service.isAuthenticated(user)) {
      Logger.debug(""String_Node_Str"" + user.getLogin());
      user.setLastLogout(user.getLastAccess());
      UserManagerFactory.getInstance().systemStore(user);
    }
    currentUsers.getMap().remove(session);
  }
}","public static synchronized void removeCurrentUser(HttpSession session){
  if (null == currentUsers) {
    return;
  }
  if (currentUsers.getMap().containsKey(session)) {
    User user=(User)currentUsers.getMap().get(session);
    AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
    if (service.isAuthenticated(user)) {
      Logger.debug(""String_Node_Str"" + user.getLogin());
      user.setLastLogout(user.getLastAccess());
      Application.get().storeObject(Application.OID,user.getApplication());
      UserManagerFactory.getInstance().systemStore(user);
    }
    currentUsers.getMap().remove(session);
  }
}",0.9399684044233808
145766,"public static String init(Configuration config,Writer w) throws Exception {
  output.set(new PrintWriter(w));
  Application app=Application.get();
  app.setConfiguration(config);
  ApplicationManager appManager=(ApplicationManager)Components.getComponent(ApplicationManager.class);
  Collection prefixes=appManager.getPrefixes();
  if (prefixes != null && prefixes.contains(config.getPrefix())) {
    throw new Exception(""String_Node_Str"" + config.getPrefix() + ""String_Node_Str"");
  }
  Properties prefixProps=appManager.createApplication(config.getName(),config.getPrefix());
  String appOid=prefixProps.getProperty(ApplicationStorage.OID);
  try {
    message(""String_Node_Str"" + appOid);
    app.storeObject(Application.OID,appOid);
    new File(config.getFileStore()).mkdirs();
    SnipSpace space=(SnipSpace)Components.getComponent(SnipSpace.class);
    createAdministrator(config);
    String ping=config.get(Configuration.APP_PERM_WEBLOGSPING);
    String notify=config.get(Configuration.APP_PERM_NOTIFICATION);
    config.set(Configuration.APP_PERM_WEBLOGSPING,""String_Node_Str"");
    config.set(Configuration.APP_PERM_NOTIFICATION,""String_Node_Str"");
    InputStream data=getLocalizedResource(""String_Node_Str"",""String_Node_Str"",config.getLocale());
    XMLSnipImport.load(data,XMLSnipImport.OVERWRITE | XMLSnipImport.IMPORT_USERS | XMLSnipImport.IMPORT_SNIPS);
    postFirstBlog(config,space);
    config.set(Configuration.APP_PERM_WEBLOGSPING,ping);
    config.set(Configuration.APP_PERM_NOTIFICATION,notify);
    message(""String_Node_Str"");
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_API,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_ASIN,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_BOOK,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_PING,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_ROBOTS,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_ROBOTS_TXT,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_WIKI,""String_Node_Str"",space);
    File themeTemplateDir=new File(config.getWebInfDir(),""String_Node_Str"");
    XMLSnipImport.load(new FileInputStream(new File(themeTemplateDir,""String_Node_Str"" + config.getTheme() + ""String_Node_Str"")),XMLSnipImport.OVERWRITE | XMLSnipImport.IMPORT_SNIPS);
    storeConfiguration(config,space);
    ConfigurationManager configManager=ConfigurationManager.getInstance();
    configManager.addConfiguration(appOid,config);
  }
 catch (  Exception e) {
    appManager.removeApplication(appOid);
    config.getFileStore(appOid).delete();
    e.printStackTrace();
    throw e;
  }
  return appOid;
}","public static String init(Configuration config,Writer w) throws Exception {
  output.set(new PrintWriter(w));
  Application app=Application.get();
  app.setConfiguration(config);
  ApplicationManager appManager=(ApplicationManager)Components.getComponent(ApplicationManager.class);
  Collection prefixes=appManager.getPrefixes();
  if (prefixes != null && prefixes.contains(config.getPrefix())) {
    throw new Exception(""String_Node_Str"" + config.getPrefix() + ""String_Node_Str"");
  }
  Properties prefixProps=appManager.createApplication(config.getName(),config.getPrefix());
  String appOid=prefixProps.getProperty(ApplicationStorage.OID);
  try {
    message(""String_Node_Str"" + appOid);
    app.storeObject(Application.OID,appOid);
    new File(config.getFileStore()).mkdirs();
    SnipSpace space=(SnipSpace)Components.getComponent(SnipSpace.class);
    createAdministrator(config);
    String ping=config.get(Configuration.APP_PERM_WEBLOGSPING);
    String notify=config.get(Configuration.APP_PERM_NOTIFICATION);
    config.set(Configuration.APP_PERM_WEBLOGSPING,""String_Node_Str"");
    config.set(Configuration.APP_PERM_NOTIFICATION,""String_Node_Str"");
    InputStream data=getLocalizedResource(""String_Node_Str"",""String_Node_Str"",config.getLocale());
    XMLSnipImport.load(data,XMLSnipImport.OVERWRITE | XMLSnipImport.IMPORT_USERS | XMLSnipImport.IMPORT_SNIPS);
    message(""String_Node_Str"");
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_API,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_ASIN,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_BOOK,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_PING,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_ROBOTS,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_ROBOTS_TXT,""String_Node_Str"",space);
    createConfigSnipFromFile(Configuration.SNIPSNAP_CONFIG_WIKI,""String_Node_Str"",space);
    File themeTemplateDir=new File(config.getWebInfDir(),""String_Node_Str"");
    XMLSnipImport.load(new FileInputStream(new File(themeTemplateDir,""String_Node_Str"" + config.getTheme() + ""String_Node_Str"")),XMLSnipImport.OVERWRITE | XMLSnipImport.IMPORT_SNIPS);
    postFirstBlog(config,space);
    config.set(Configuration.APP_PERM_WEBLOGSPING,ping);
    config.set(Configuration.APP_PERM_NOTIFICATION,notify);
    storeConfiguration(config,space);
    ConfigurationManager configManager=ConfigurationManager.getInstance();
    configManager.addConfiguration(appOid,config);
  }
 catch (  Exception e) {
    appManager.removeApplication(appOid);
    config.getFileStore(appOid).delete();
    e.printStackTrace();
    throw e;
  }
  return appOid;
}",0.9462172821799928
145767,"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String name=request.getParameter(""String_Node_Str"");
  SnipSpace space=SnipSpaceFactory.getInstance();
  Snip snip=space.load(name);
  String content=request.getParameter(""String_Node_Str"");
  if (request.getParameter(""String_Node_Str"") != null) {
    request.setAttribute(""String_Node_Str"",SnipFormatter.toXML(snip,content));
    RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    dispatcher.forward(request,response);
    return;
  }
 else   if (request.getParameter(""String_Node_Str"") == null) {
    HttpSession session=request.getSession();
    if (session != null) {
      User user=Application.get().getUser();
      AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
      if (service.isAuthenticated(user)) {
        if (snip != null) {
          snip.setContent(content);
          space.store(snip);
        }
 else {
          snip=space.create(name,content);
        }
      }
 else {
        response.sendError(HttpServletResponse.SC_FORBIDDEN);
      }
    }
  }
 else   if (snip == null) {
    response.sendRedirect(request.getParameter(""String_Node_Str""));
    return;
  }
  Configuration config=Application.get().getConfiguration();
  response.sendRedirect(config.getUrl(""String_Node_Str"" + SnipLink.encode(name)));
}","public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String name=request.getParameter(""String_Node_Str"");
  SnipSpace space=SnipSpaceFactory.getInstance();
  Snip snip=space.load(name);
  String content=request.getParameter(""String_Node_Str"");
  if (request.getParameter(""String_Node_Str"") != null) {
    request.setAttribute(""String_Node_Str"",SnipFormatter.toXML(snip,content));
    RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
    dispatcher.forward(request,response);
    return;
  }
 else   if (request.getParameter(""String_Node_Str"") == null) {
    HttpSession session=request.getSession();
    if (session != null) {
      User user=Application.get().getUser();
      AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
      if (service.isAuthenticated(user) && (null == snip || Security.checkPermission(Permissions.EDIT_SNIP,user,snip))) {
        if (snip != null) {
          snip.setContent(content);
          space.store(snip);
        }
 else {
          snip=space.create(name,content);
        }
      }
 else {
        response.sendError(HttpServletResponse.SC_FORBIDDEN);
      }
    }
  }
 else   if (snip == null) {
    response.sendRedirect(request.getParameter(""String_Node_Str""));
    return;
  }
  Configuration config=Application.get().getConfiguration();
  response.sendRedirect(config.getUrl(""String_Node_Str"" + SnipLink.encode(name)));
}",0.9732656514382404
145768,"public void execute(Writer writer,SnipMacroParameter params) throws IllegalArgumentException, IOException {
  if (params.getLength() < 2) {
    int count=0;
    if (params.getLength() == 1) {
      count=Integer.parseInt(params.get(""String_Node_Str""));
    }
 else {
      count=10;
    }
    String name=params.getSnip().getName();
    Blog blog=space.getBlog(name);
    List posts=blog.getPosts(count);
    int NAME_INDEX=0;
    int DAY_INDEX=1;
    int COUNT_INDEX=2;
    String lastDay=""String_Node_Str"";
    Iterator iterator=posts.iterator();
    while (iterator.hasNext()) {
      Snip entry=(Snip)iterator.next();
      String[] entryName=StringUtil.split(entry.getName(),""String_Node_Str"");
      if (!lastDay.equals(entryName[DAY_INDEX])) {
        writer.write(""String_Node_Str"");
        writer.write(SnipUtil.toDate(entryName[DAY_INDEX]));
        lastDay=entryName[DAY_INDEX];
        writer.write(""String_Node_Str"");
      }
      writer.write(entry.getXMLContent());
      writer.write(""String_Node_Str"");
      SnipLink.appendUrl(writer,entry.getName());
      writer.write(""String_Node_Str"");
      writer.write(entry.getName());
      writer.write(""String_Node_Str"");
      SnipLink.appendImage(writer,""String_Node_Str"",""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(entry.getComments().getCommentString());
      writer.write(""String_Node_Str"");
      writer.write(entry.getComments().getPostString());
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      BackLinks.appendTo(writer,entry.getAccess().getBackLinks(),5);
      writer.write(""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public void execute(Writer writer,SnipMacroParameter params) throws IllegalArgumentException, IOException {
  if (params.getLength() < 2) {
    int count=0;
    if (params.getLength() == 1) {
      count=Integer.parseInt(params.get(""String_Node_Str""));
    }
 else {
      count=10;
    }
    String name=params.getSnip().getName();
    Blog blog=space.getBlog(name);
    List posts=blog.getPosts(count);
    int NAME_INDEX=0;
    int DAY_INDEX=1;
    int COUNT_INDEX=2;
    String lastDay=""String_Node_Str"";
    Iterator iterator=posts.iterator();
    while (iterator.hasNext()) {
      Object object=iterator.next();
      System.err.println(""String_Node_Str"" + object.getClass());
      Snip entry=(Snip)object;
      String[] entryName=StringUtil.split(entry.getName(),""String_Node_Str"");
      if (!lastDay.equals(entryName[DAY_INDEX])) {
        writer.write(""String_Node_Str"");
        writer.write(SnipUtil.toDate(entryName[DAY_INDEX]));
        lastDay=entryName[DAY_INDEX];
        writer.write(""String_Node_Str"");
      }
      writer.write(entry.getXMLContent());
      writer.write(""String_Node_Str"");
      SnipLink.appendUrl(writer,entry.getName());
      writer.write(""String_Node_Str"");
      writer.write(entry.getName());
      writer.write(""String_Node_Str"");
      SnipLink.appendImage(writer,""String_Node_Str"",""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(entry.getComments().getCommentString());
      writer.write(""String_Node_Str"");
      writer.write(entry.getComments().getPostString());
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      BackLinks.appendTo(writer,entry.getAccess().getBackLinks(),5);
      writer.write(""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9659751037344398
145769,"public List getPosts(int count){
  Calendar startC=new GregorianCalendar();
  startC.setTime(new java.util.Date());
  Calendar endC=(Calendar)startC.clone();
  endC.add(Calendar.DAY_OF_MONTH,count - 1);
  String start=name + ""String_Node_Str"" + Month.toKey(startC)+ ""String_Node_Str"";
  String end=name + ""String_Node_Str"" + Month.toKey(endC)+ ""String_Node_Str"";
  List posts=Arrays.asList(space.match(start,end));
  return posts;
}","public List getPosts(int count){
  Calendar startC=new GregorianCalendar();
  startC.setTime(new java.util.Date());
  Calendar endC=(Calendar)startC.clone();
  endC.add(Calendar.DAY_OF_MONTH,count - 1);
  String start=name + ""String_Node_Str"" + Month.toKey(startC)+ ""String_Node_Str"";
  String end=name + ""String_Node_Str"" + Month.toKey(endC)+ ""String_Node_Str"";
  List posts=new ArrayList();
  posts.addAll(Arrays.asList(space.match(start,end)));
  if (name.equals(startName)) {
    posts.addAll(space.getByDate(Month.toKey(startC),Month.toKey(endC)));
  }
  return posts;
}",0.8162859980139027
145770,"public BlogImpl(SnipSpace space,String blogName){
  this.space=space;
  if (blogName == null || ""String_Node_Str"".equals(blogName)) {
    blogName=Application.get().getConfiguration().getStartSnip();
  }
  this.name=blogName;
  this.blog=space.load(name);
}","public BlogImpl(SnipSpace space,String blogName){
  this.space=space;
  this.startName=Application.get().getConfiguration().getStartSnip();
  if (blogName == null || ""String_Node_Str"".equals(blogName)) {
    blogName=startName;
  }
  this.name=blogName;
  this.blog=space.load(name);
}",0.7601476014760148
145771,"public Collection getLabels(String type){
  ArrayList labels=new ArrayList();
  if (null == type) {
    return labels;
  }
  Iterator iterator=this.labels.values().iterator();
  while (iterator.hasNext()) {
    Label label=(Label)iterator.next();
    if (type.equals(label.getType())) {
      labels.add(label);
    }
  }
  return labels;
}","public Collection getLabels(String type){
  ArrayList result=new ArrayList();
  if (null == type) {
    return result;
  }
  Iterator iterator=this.labels.values().iterator();
  while (iterator.hasNext()) {
    Label label=(Label)iterator.next();
    if (null != label && type.equals(label.getType())) {
      result.add(label);
    }
  }
  return result;
}",0.9067431850789096
145772,"public List getPosts(int count){
  Calendar startC=new GregorianCalendar();
  startC.setTime(new java.util.Date());
  Calendar endC=(Calendar)startC.clone();
  endC.add(Calendar.DAY_OF_MONTH,count - 1);
  String start=name + ""String_Node_Str"" + Month.toKey(startC)+ ""String_Node_Str"";
  String end=name + ""String_Node_Str"" + Month.toKey(endC)+ ""String_Node_Str"";
  List posts=new ArrayList();
  posts.addAll(Arrays.asList(space.match(start,end)));
  if (name.equals(startName)) {
    posts.addAll(space.getByDate(Month.toKey(startC),Month.toKey(endC)));
  }
  return posts;
}","public List getPosts(int count){
  Calendar startC=new GregorianCalendar();
  startC.setTime(new java.util.Date());
  Calendar endC=(Calendar)startC.clone();
  endC.add(Calendar.DAY_OF_MONTH,count - 1);
  String start=name + ""String_Node_Str"" + Month.toKey(startC)+ ""String_Node_Str"";
  String end=name + ""String_Node_Str"" + Month.toKey(endC)+ ""String_Node_Str"";
  List posts=new ArrayList();
  posts.addAll(Arrays.asList(space.match(start,end)));
  Collections.sort(posts,comparator);
  if (name.equals(startName)) {
    posts.addAll(space.getByDate(Month.toKey(startC),Month.toKey(endC)));
  }
  return posts;
}",0.968013468013468
145773,"public static Test suite(){
  TestSuite s=new TestSuite();
  s.addTestSuite(NoneNameFormatterTest.class);
  s.addTestSuite(CapitalizeNameFormatterTest.class);
  s.addTestSuite(PathRemoveNameFormatterTest.class);
  return s;
}","public static Test suite(){
  TestSuite s=new TestSuite();
  s.addTestSuite(NoneNameFormatterTest.class);
  s.addTestSuite(CapitalizeNameFormatterTest.class);
  s.addTestSuite(PathRemoveNameFormatterTest.class);
  s.addTestSuite(PostNameComparatorTest.class);
  return s;
}",0.9036144578313252
145774,"private void deserialize(String labelString){
  labels=new HashMap();
  if (""String_Node_Str"".equals(labelString)) {
    return;
  }
  StringTokenizer tokenizer=new StringTokenizer(labelString,""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String labelToken=tokenizer.nextToken();
    String[] data=StringUtil.split(labelToken,""String_Node_Str"");
    Label label=createLabel(data[0],data[1],data[2]);
    labels.put(label.getName(),label);
  }
  return;
}","private void deserialize(String labelString){
  labels=new HashMap();
  if (""String_Node_Str"".equals(labelString)) {
    return;
  }
  StringTokenizer tokenizer=new StringTokenizer(labelString,""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String labelToken=tokenizer.nextToken();
    String[] data=StringUtil.split(labelToken,""String_Node_Str"");
    if (data.length == 3) {
      Label label=createLabel(data[0],data[1],data[2]);
      labels.put(label.getName(),label);
    }
 else {
      System.err.println(""String_Node_Str"" + labelToken + ""String_Node_Str"");
    }
  }
  return;
}",0.8785046728971962
145775,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  Configuration config=Application.get().getConfiguration();
  User user=Application.get().getUser();
  AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
  if (service.isAuthenticated(user)) {
    user.lastAccess();
  }
  String name=request.getPathInfo();
  if (null == name || ""String_Node_Str"".equals(name)) {
    name=config.getStartSnip();
  }
 else {
    name=name.substring(1);
  }
  name=name.replace('+',' ');
  Snip snip=SnipSpaceFactory.getInstance().load(name);
  String subname=null;
  if (null == snip) {
    int slashIndex=name.indexOf('/');
    if (slashIndex != -1) {
      subname=name.substring(slashIndex + 1);
      name=name.substring(0,slashIndex);
      Logger.log(Logger.DEBUG,name + ""String_Node_Str"" + subname);
    }
    snip=SnipSpaceFactory.getInstance().load(name);
  }
  request.setAttribute(""String_Node_Str"",snip);
  request.setAttribute(""String_Node_Str"",request.getRequestURL().toString());
  if (subname != null && subname.length() > 0) {
    try {
      request.setAttribute(FileDownloadServlet.FILENAME,subname);
      RequestDispatcher dispatcher=getServletContext().getNamedDispatcher(""String_Node_Str"");
      dispatcher.forward(request,response);
      return;
    }
 catch (    ServletException e) {
      name=name + ""String_Node_Str"" + subname;
      snip=null;
    }
  }
  if (null == snip) {
    if (config.allow(Configuration.APP_PERM_CREATESNIP)) {
      response.sendRedirect(""String_Node_Str"" + name);
    }
 else {
      if (""String_Node_Str"".equals(name)) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
      response.sendRedirect(SnipLink.absoluteLink(""String_Node_Str"" + name));
    }
    return;
  }
  snip.handle(request);
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  Configuration config=Application.get().getConfiguration();
  User user=Application.get().getUser();
  AuthenticationService service=(AuthenticationService)Components.getComponent(AuthenticationService.class);
  if (service.isAuthenticated(user)) {
    user.lastAccess();
  }
  String name=request.getPathInfo();
  if (null == name || ""String_Node_Str"".equals(name)) {
    name=config.getStartSnip();
  }
 else {
    name=name.substring(1);
  }
  name=name.replace('+',' ');
  Snip snip=SnipSpaceFactory.getInstance().load(name);
  String subname=null;
  if (null == snip) {
    int slashIndex=name.lastIndexOf('/');
    if (slashIndex != -1) {
      subname=name.substring(slashIndex + 1);
      name=name.substring(0,slashIndex);
      Logger.log(Logger.DEBUG,name + ""String_Node_Str"" + subname);
    }
    snip=SnipSpaceFactory.getInstance().load(name);
  }
  request.setAttribute(""String_Node_Str"",snip);
  request.setAttribute(""String_Node_Str"",request.getRequestURL().toString());
  if (subname != null && subname.length() > 0) {
    try {
      request.setAttribute(FileDownloadServlet.FILENAME,subname);
      RequestDispatcher dispatcher=getServletContext().getNamedDispatcher(""String_Node_Str"");
      dispatcher.forward(request,response);
      return;
    }
 catch (    ServletException e) {
      name=name + ""String_Node_Str"" + subname;
      snip=null;
    }
  }
  if (null == snip) {
    if (config.allow(Configuration.APP_PERM_CREATESNIP)) {
      response.sendRedirect(""String_Node_Str"" + name);
    }
 else {
      if (""String_Node_Str"".equals(name)) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
      response.sendRedirect(SnipLink.absoluteLink(""String_Node_Str"" + name));
    }
    return;
  }
  snip.handle(request);
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}",0.998539435248296
145776,"private String replaceTokens(String value){
  int idx=value.indexOf(""String_Node_Str"");
  if (idx != -1) {
    StringBuffer replaced=new StringBuffer();
    if (idx > 0) {
      replaced.append(value.substring(0,idx));
    }
    replaced.append(getConfDir().getPath());
    int endIdx=idx + ""String_Node_Str"".length();
    if (endIdx < value.length()) {
      replaced.append(value.substring(endIdx));
    }
    return replaced.toString();
  }
  return value;
}","private String replaceTokens(String value){
  if (value != null) {
    int idx=value.indexOf(""String_Node_Str"");
    if (idx != -1) {
      StringBuffer replaced=new StringBuffer();
      if (idx > 0) {
        replaced.append(value.substring(0,idx));
      }
      replaced.append(getConfDir().getPath());
      int endIdx=idx + ""String_Node_Str"".length();
      if (endIdx < value.length()) {
        replaced.append(value.substring(endIdx));
      }
      return replaced.toString();
    }
  }
  return value;
}",0.916923076923077
145777,"protected static void initClassPath(String extraClassPath){
  try {
    URL location=Launcher.class.getProtectionDomain().getCodeSource().getLocation();
    JarInputStream jarInputStream=new JarInputStream(location.openStream());
    Manifest manifest=jarInputStream.getManifest();
    Attributes mainAttributes=manifest.getMainAttributes();
    String manifestClassPath=mainAttributes.getValue(""String_Node_Str"");
    if (extraClassPath != null && extraClassPath.length() > 0) {
      manifestClassPath+=""String_Node_Str"" + extraClassPath.replace(':',' ');
    }
    File directoryBase=new File(location.getFile()).getParentFile();
    StringBuffer classPath=new StringBuffer(location.getFile());
    StringTokenizer tokenizer=new StringTokenizer(manifestClassPath,""String_Node_Str"" + File.pathSeparatorChar,false);
    while (tokenizer.hasMoreTokens()) {
      classPath.append(File.pathSeparatorChar);
      String file=tokenizer.nextToken();
      classPath.append(new File(directoryBase,file).getCanonicalPath());
    }
    System.setProperty(""String_Node_Str"",classPath.toString());
    System.err.println(""String_Node_Str"" + classPath.toString());
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
}","protected static void initClassPath(String extraClassPath){
  try {
    URL location=Launcher.class.getProtectionDomain().getCodeSource().getLocation();
    JarInputStream jarInputStream=new JarInputStream(location.openStream());
    Manifest manifest=jarInputStream.getManifest();
    Attributes mainAttributes=manifest.getMainAttributes();
    String manifestClassPath=mainAttributes.getValue(""String_Node_Str"");
    if (extraClassPath != null && extraClassPath.length() > 0) {
      manifestClassPath+=""String_Node_Str"" + extraClassPath.replace(':',' ');
    }
    File directoryBase=new File(location.getFile()).getParentFile();
    StringBuffer classPath=new StringBuffer(location.getFile());
    StringTokenizer tokenizer=new StringTokenizer(manifestClassPath,""String_Node_Str"" + File.pathSeparatorChar,false);
    while (tokenizer.hasMoreTokens()) {
      classPath.append(File.pathSeparatorChar);
      String file=tokenizer.nextToken();
      classPath.append(new File(directoryBase,file).getCanonicalPath());
    }
    System.setProperty(""String_Node_Str"",classPath.toString());
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
}",0.9725228975853456
145778,"public static String getDigest(String s){
  if (digest != null) {
    return digestToHexString(digest.digest(s.getBytes()));
  }
  return ""String_Node_Str"";
}","public static String getDigest(String s){
  if (digest != null && s != null) {
    return digestToHexString(digest.digest(s.getBytes()));
  }
  return ""String_Node_Str"";
}",0.96048632218845
145779,"public Snip storageLoad(String name){
  Logger.debug(""String_Node_Str"" + name);
  Application app=Application.get();
  long start=app.start();
  Snip snip=null;
  PreparedStatement statement=null;
  ResultSet result=null;
  Connection connection=ConnectionManager.getConnection();
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    statement.setString(1,name.toUpperCase());
    result=statement.executeQuery();
    if (result.next()) {
      snip=createSnip(result);
    }
  }
 catch (  SQLException e) {
    SQLLogger.warn(""String_Node_Str"" + name,e);
  }
 finally {
    ConnectionManager.close(result);
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  app.stop(start,""String_Node_Str"" + name);
  return snip;
}","public Snip storageLoad(String name){
  if (cache.containsKey(name.toUpperCase())) {
    return (Snip)cache.get(name.toUpperCase());
  }
  Application app=Application.get();
  long start=app.start();
  Snip snip=null;
  PreparedStatement statement=null;
  ResultSet result=null;
  Connection connection=ConnectionManager.getConnection();
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    statement.setString(1,name.toUpperCase());
    result=statement.executeQuery();
    if (result.next()) {
      snip=createSnip(result);
    }
  }
 catch (  SQLException e) {
    SQLLogger.warn(""String_Node_Str"" + name,e);
  }
 finally {
    ConnectionManager.close(result);
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  app.stop(start,""String_Node_Str"" + name);
  return snip;
}",0.9216482878699942
145780,"public void doFilter(ServletRequest req,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpSession session=request.getSession(true);
  Application app=Application.getInstance(session);
  Configuration config=app.getConfiguration();
  session.setAttribute(""String_Node_Str"",app);
  if (""String_Node_Str"".equals(config.getRealAutodetect())) {
    String xForwardedHost=request.getHeader(""String_Node_Str"");
    if (xForwardedHost != null) {
      int colonIndex=xForwardedHost.indexOf(':');
      String host=xForwardedHost;
      String port=null;
      if (colonIndex != -1) {
        host=host.substring(0,colonIndex);
        port=xForwardedHost.substring(colonIndex + 1);
      }
      config.set(Configuration.APP_REAL_HOST,host);
      config.set(Configuration.APP_REAL_PORT,port == null ? ""String_Node_Str"" : port);
    }
 else {
      String host=request.getServerName();
      String port=""String_Node_Str"" + request.getServerPort();
      config.set(Configuration.APP_REAL_HOST,host);
      config.set(Configuration.APP_REAL_PORT,port);
      config.set(Configuration.APP_REAL_PATH,request.getContextPath());
    }
  }
  try {
    request.setCharacterEncoding(config.getEncoding());
    request=new EncRequestWrapper(request,request.getCharacterEncoding());
  }
 catch (  UnsupportedEncodingException e) {
    Logger.log(Logger.FATAL,""String_Node_Str"" + config.getEncoding() + ""String_Node_Str"",e);
  }
  UserManager um=UserManager.getInstance();
  User user=app.getUser();
  if (user == null) {
    user=um.getUser(request,(HttpServletResponse)response);
  }
  app.setUser(user,session);
  String path=request.getServletPath();
  if (!config.isInstalled()) {
    if (path == null || !path.startsWith(""String_Node_Str"")) {
      String name=config.getName();
      System.out.println((name == null ? ""String_Node_Str"" : name) + ""String_Node_Str"");
      ((HttpServletResponse)response).sendRedirect(request.getContextPath() + ""String_Node_Str"");
      return;
    }
  }
  if (config.isInstalled()) {
    session.setAttribute(""String_Node_Str"",SnipSpaceFactory.getInstance());
  }
  Map params=request.getParameterMap();
  Iterator iterator=params.keySet().iterator();
  Map paramMap=new HashMap();
  while (iterator.hasNext()) {
    String key=(String)iterator.next();
    String[] values=(String[])params.get(key);
    paramMap.put(key,values[0]);
  }
  String uri=(String)request.getAttribute(""String_Node_Str"");
  if (uri != null) {
    paramMap.put(""String_Node_Str"",config.getUrl(uri));
  }
 else {
    String base=config.getPath() + (path != null ? path : ""String_Node_Str"");
    String pathInfo=request.getPathInfo();
    paramMap.put(""String_Node_Str"",config.getUrl(base + (pathInfo != null ? pathInfo : ""String_Node_Str"")));
  }
  paramMap.put(""String_Node_Str"",config.getUrl(""String_Node_Str""));
  app.setParameters(paramMap);
  chain.doFilter(request,response);
}","public void doFilter(ServletRequest req,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)req;
  HttpSession session=request.getSession(true);
  Application app=Application.getInstance(session);
  Configuration config=app.getConfiguration();
  session.setAttribute(""String_Node_Str"",app);
  if (""String_Node_Str"".equals(config.getRealAutodetect())) {
    String xForwardedHost=request.getHeader(""String_Node_Str"");
    if (xForwardedHost != null) {
      int colonIndex=xForwardedHost.indexOf(':');
      String host=xForwardedHost;
      String port=null;
      if (colonIndex != -1) {
        host=host.substring(0,colonIndex);
        port=xForwardedHost.substring(colonIndex + 1);
      }
      config.set(Configuration.APP_REAL_HOST,host);
      config.set(Configuration.APP_REAL_PORT,port == null ? ""String_Node_Str"" : port);
    }
 else {
      String host=request.getServerName();
      String port=""String_Node_Str"" + request.getServerPort();
      config.set(Configuration.APP_REAL_HOST,host);
      config.set(Configuration.APP_REAL_PORT,port);
      config.set(Configuration.APP_REAL_PATH,request.getContextPath());
    }
  }
  try {
    request.setCharacterEncoding(config.getEncoding());
    request=new EncRequestWrapper(request,request.getCharacterEncoding());
  }
 catch (  UnsupportedEncodingException e) {
    Logger.log(Logger.FATAL,""String_Node_Str"" + config.getEncoding() + ""String_Node_Str"",e);
  }
  UserManager um=UserManager.getInstance();
  User user=app.getUser();
  if (user == null) {
    user=um.getUser(request,(HttpServletResponse)response);
  }
  app.setUser(user,session);
  String path=request.getServletPath();
  if (!config.isInstalled()) {
    if (path == null || !path.startsWith(""String_Node_Str"")) {
      String name=config.getName();
      System.out.println((name == null ? ""String_Node_Str"" : name) + ""String_Node_Str"");
      ((HttpServletResponse)response).sendRedirect(request.getContextPath() + ""String_Node_Str"");
      return;
    }
  }
  if (config.isInstalled()) {
    session.setAttribute(""String_Node_Str"",SnipSpaceFactory.getInstance());
  }
  Map params=request.getParameterMap();
  Iterator iterator=params.keySet().iterator();
  Map paramMap=new HashMap();
  while (iterator.hasNext()) {
    String key=(String)iterator.next();
    String[] values=(String[])params.get(key);
    paramMap.put(key,values[0]);
  }
  String uri=(String)request.getAttribute(""String_Node_Str"");
  if (uri != null) {
    paramMap.put(""String_Node_Str"",config.getUrl(uri));
  }
 else {
    String pathInfo=request.getPathInfo();
    paramMap.put(""String_Node_Str"",config.getUrl((path != null ? path : ""String_Node_Str"") + (pathInfo != null ? pathInfo : ""String_Node_Str"")));
  }
  paramMap.put(""String_Node_Str"",config.getUrl(""String_Node_Str""));
  app.setParameters(paramMap);
  chain.doFilter(request,response);
}",0.9791842951430022
145781,"public QuerySnipStorage(SnipStorage storage){
  this.storage=storage;
  this.nameComparator=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
;
  this.nameComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getName().compareTo(s1.getName());
    }
  }
;
  this.cTimeComparator=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getCTime().compareTo(s1.getCTime());
    }
  }
;
  this.mTimeComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getMTime().compareTo(s1.getMTime());
    }
  }
;
}","public QuerySnipStorage(SnipStorage storage){
  this.storage=storage;
  this.nameComparator=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
;
  this.nameComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getName().compareTo(s1.getName());
    }
  }
;
  this.cTimeComparator=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s1.getCTime().compareTo(s2.getCTime());
    }
  }
;
  this.mTimeComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getMTime().compareTo(s1.getMTime());
    }
  }
;
}",0.9661495063469676
145782,"public QuerySnipStorage(SnipStorage storage){
  this.storage=storage;
  this.nameComparator=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
;
  this.nameComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getName().compareTo(s1.getName());
    }
  }
;
  this.mTimeComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getMTime().compareTo(s1.getMTime());
    }
  }
;
}","public QuerySnipStorage(SnipStorage storage){
  this.storage=storage;
  this.nameComparator=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s1.getName().compareTo(s2.getName());
    }
  }
;
  this.nameComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getName().compareTo(s1.getName());
    }
  }
;
  this.cTimeComparator=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getCTime().compareTo(s1.getCTime());
    }
  }
;
  this.mTimeComparatorDesc=new SnipComparator(){
    public int compare(    Snip s1,    Snip s2){
      return s2.getMTime().compareTo(s1.getMTime());
    }
  }
;
}",0.8435266084193804
145783,"public List storageByComments(final Snip parent){
  return QueryKit.querySorted(storage.storageAll(),new SnipQuery(){
    public boolean fit(    Snip snip){
      return (parent == snip.getCommentedSnip());
    }
  }
,nameComparator);
}","public List storageByComments(final Snip parent){
  return QueryKit.querySorted(storage.storageAll(),new SnipQuery(){
    public boolean fit(    Snip snip){
      return (parent == snip.getCommentedSnip());
    }
  }
,cTimeComparator);
}",0.9894291754756872
145784,"public void sendMail(String sender,Collection recipientList,String subject,String content){
  try {
    Message mesg=new MimeMessage(session);
    mesg.setFrom(new InternetAddress(sender));
    Iterator iterator=recipientList.iterator();
    while (iterator.hasNext()) {
      String recpt=(String)iterator.next();
      mesg.addRecipient(Message.RecipientType.TO,new InternetAddress(recpt));
    }
    mesg.setSubject(subject);
    Multipart mp=new MimeMultipart();
    BodyPart htmlPart=new MimeBodyPart();
    htmlPart.setContent(content,""String_Node_Str"");
    mp.addBodyPart(htmlPart);
    mesg.setContent(mp);
    Transport.send(mesg);
  }
 catch (  MessagingException ex) {
    while ((ex=(MessagingException)ex.getNextException()) != null) {
      Logger.warn(ex.getMessage(),ex);
    }
  }
  return;
}","public void sendMail(String sender,Collection recipientList,String subject,String content){
  try {
    Message mesg=new MimeMessage(session);
    mesg.setFrom(new InternetAddress(sender));
    Iterator iterator=recipientList.iterator();
    while (iterator.hasNext()) {
      String recpt=(String)iterator.next();
      mesg.addRecipient(Message.RecipientType.TO,new InternetAddress(recpt));
    }
    mesg.setSubject(subject);
    Multipart mp=new MimeMultipart();
    BodyPart htmlPart=new MimeBodyPart();
    htmlPart.setContent(content,""String_Node_Str"");
    mp.addBodyPart(htmlPart);
    mesg.setContent(mp);
    Transport.send(mesg);
  }
 catch (  MessagingException ex) {
    Exception e;
    while ((e=ex.getNextException()) != null) {
      Logger.warn(ex.getMessage(),e);
    }
  }
  return;
}",0.963467492260062
145785,"public Object invoke(Invocation invocation) throws Throwable {
  if (invocation.getMethod().getName().startsWith(""String_Node_Str"")) {
    Snip snip=(Snip)invocation.getTarget();
    User user=Application.get().getUser();
    if (!user.isAdmin()) {
      if (!(Security.checkPermission(""String_Node_Str"",user,snip) && Security.hasRoles(user,snip,roles))) {
        throw new GeneralSecurityException(""String_Node_Str"");
      }
    }
  }
  return invocation.next();
}","public Object invoke(Invocation invocation) throws Throwable {
  if (invocation.getMethod().getName().startsWith(""String_Node_Str"")) {
    Snip snip=(Snip)invocation.getTarget();
    User user=Application.get().getUser();
    if (!user.isAdmin()) {
      if (!(Security.checkPermission(""String_Node_Str"",user,snip) || Security.hasRoles(user,snip,roles))) {
        throw new GeneralSecurityException(snip.getName() + ""String_Node_Str"" + user+ ""String_Node_Str"");
      }
    }
  }
  return invocation.next();
}",0.9355168884339816
145786,"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  Snip snip=(Snip)request.getAttribute(SNIP);
  String fileName=(String)request.getAttribute(FILENAME);
  Attachment attachment=(Attachment)snip.getAttachments().getAttachment(fileName);
  if (attachment != null) {
    AppConfiguration config=Application.get().getConfiguration();
    File fileStore=new File(config.getFileStorePath());
    File file=new File(fileStore,attachment.getLocation());
    if (file.exists()) {
      response.setContentType(attachment.getContentType());
      response.setContentLength(attachment.getSize());
      BufferedOutputStream out=new BufferedOutputStream(response.getOutputStream());
      BufferedInputStream in=new BufferedInputStream(new FileInputStream(file));
      byte buf[]=new byte[4096];
      int length=-1;
      while ((length=in.read(buf)) != -1) {
        out.write(buf,0,length);
      }
      out.flush();
      in.close();
      out.close();
      return;
    }
  }
 else {
    Logger.log(Logger.DEBUG,""String_Node_Str"" + fileName);
    String oldStyleFile=""String_Node_Str"" + snip.getName() + ""String_Node_Str""+ fileName;
    RequestDispatcher dispatcher=request.getRequestDispatcher(oldStyleFile);
    if (dispatcher != null) {
      dispatcher.forward(request,response);
      return;
    }
  }
  throw new ServletException(""String_Node_Str"" + fileName);
}","public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  Snip snip=(Snip)request.getAttribute(SNIP);
  String fileName=(String)request.getAttribute(FILENAME);
  if (snip != null) {
    Attachment attachment=snip.getAttachments().getAttachment(fileName);
    if (attachment != null) {
      AppConfiguration config=Application.get().getConfiguration();
      File fileStore=new File(config.getFileStorePath());
      File file=new File(fileStore,attachment.getLocation());
      if (file.exists()) {
        response.setContentType(attachment.getContentType());
        response.setContentLength(attachment.getSize());
        BufferedOutputStream out=new BufferedOutputStream(response.getOutputStream());
        BufferedInputStream in=new BufferedInputStream(new FileInputStream(file));
        byte buf[]=new byte[4096];
        int length=-1;
        while ((length=in.read(buf)) != -1) {
          out.write(buf,0,length);
        }
        out.flush();
        in.close();
        out.close();
        return;
      }
    }
 else {
      Logger.log(Logger.DEBUG,""String_Node_Str"" + fileName);
      String oldStyleFile=""String_Node_Str"" + snip.getName() + ""String_Node_Str""+ fileName;
      RequestDispatcher dispatcher=request.getRequestDispatcher(oldStyleFile);
      if (dispatcher != null) {
        dispatcher.forward(request,response);
        return;
      }
    }
  }
  throw new ServletException(""String_Node_Str"" + fileName);
}",0.747612551159618
145787,"/** 
 * Check if the user has the permission on the object. Returns true if there is no ""Edit"" permission.
 * @param permission the permission to check, e.g. ""Edit""
 * @param user the user to check permissions for, e.g. ""funzel""
 * @param object the object that should be manipulated
 * @return
 */
public static boolean checkPermission(String permission,User user,Snip object){
  Permissions permissions=object.getPermissions();
  if (null == permissions) {
    return true;
  }
 else {
    return permissions.check(permission,getRoles(user,object));
  }
}","/** 
 * Check if the user has the permission on the object. Returns true if there is no ""Edit"" permission.
 * @param permission the permission to check, e.g. ""Edit""
 * @param user the user to check permissions for, e.g. ""funzel""
 * @param object the object that should be manipulated
 * @return
 */
public static boolean checkPermission(String permission,User user,Snip object){
  Permissions permissions=object.getPermissions();
  if (null == permissions || permissions.empty()) {
    return true;
  }
 else {
    return permissions.check(permission,getRoles(user,object));
  }
}",0.9797713280562884
145788,"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession(false);
  if (null == session) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  Map errors=new HashMap();
  session.removeAttribute(""String_Node_Str"");
  Configuration serverConfig=(Configuration)session.getAttribute(CommandHandler.ATT_CONFIG);
  User admin=(User)session.getAttribute(CommandHandler.ATT_ADMIN);
  if (null == serverConfig || (serverConfig.getAdminLogin() != null && admin == null)) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  AppConfiguration config=new AppConfiguration();
  session.setAttribute(""String_Node_Str"",config);
  PrintWriter out=new PrintWriter(System.out);
  writeMessage(out,""String_Node_Str"");
  String tagline=request.getParameter(""String_Node_Str"");
  config.setTagLine(tagline != null && tagline.length() > 0 ? tagline : ""String_Node_Str"");
  String logo=request.getParameter(""String_Node_Str"");
  if (logo != null && logo.length() > 0) {
    config.setLogoImage(logo);
  }
  config.setLogger(""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_CACHE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_TIMEZONE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_WEBLOG_DATE_FORMAT,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_PERM + ""String_Node_Str"" + AppConfiguration.PERM_WEBLOGS_PING,""String_Node_Str"");
  writeMessage(out,""String_Node_Str"");
  String appName=request.getParameter(""String_Node_Str"");
  if (null == appName || appName.length() == 0) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
  config.setName(appName != null ? appName : ""String_Node_Str"");
  writeMessage(out,""String_Node_Str"");
  String adminName=request.getParameter(""String_Node_Str"");
  if (!checkUserName(adminName)) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    config.setAdminLogin(adminName);
  }
  config.setAdminEmail(request.getParameter(""String_Node_Str""));
  String password=request.getParameter(""String_Node_Str"");
  String password2=request.getParameter(""String_Node_Str"");
  if (!checkPassword(password,password2)) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    config.setAdminPassword(password);
  }
  writeMessage(out,""String_Node_Str"");
  config.setHost(request.getParameter(""String_Node_Str""));
  try {
    config.setPort(Integer.parseInt(request.getParameter(""String_Node_Str"")));
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
  }
  String context=request.getParameter(""String_Node_Str"");
  if (context != null) {
    if (context.length() > 1 && !context.startsWith(""String_Node_Str"")) {
      context=""String_Node_Str"" + context;
    }
    if (context.endsWith(""String_Node_Str"")) {
      context=context.substring(0,context.length() - 2);
    }
    config.setContextPath(context);
  }
  if (errors.size() != 0) {
    sendError(session,errors,request,response);
    return;
  }
  InetAddrPort addrPort=new InetAddrPort();
  try {
    String host=config.getHost();
    if (host != null && host.length() > 0) {
      addrPort.setHost(host);
    }
 else {
      addrPort.setHost(InetAddrPort.__0_0_0_0);
    }
    addrPort.setPort(config.getPort());
  }
 catch (  UnknownHostException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String autoUrl=request.getParameter(""String_Node_Str"");
  config.setAutoUrl(autoUrl != null ? ""String_Node_Str"" : ""String_Node_Str"");
  String domain=request.getParameter(""String_Node_Str"");
  if (domain != null) {
    config.setUrl(domain);
  }
  String mailhost=request.getParameter(""String_Node_Str"");
  if (mailhost != null) {
    config.setMailHost(mailhost);
  }
 else {
    writeMessage(out,""String_Node_Str"");
  }
  String maildomain=request.getParameter(""String_Node_Str"");
  if (maildomain != null) {
    config.setMailDomain(maildomain);
  }
  File webAppRoot=new File(serverConfig.getProperty(Configuration.WEBAPP_ROOT) + ""String_Node_Str"" + normalize(config.getName()));
  writeMessage(out,""String_Node_Str"");
  if (!webAppRoot.mkdirs()) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + webAppRoot);
    sendError(session,errors,request,response);
    return;
  }
  File webInf=new File(webAppRoot,""String_Node_Str"");
  webInf.mkdir();
  File dbDir=new File(webInf,""String_Node_Str"");
  dbDir.mkdir();
  File logDir=new File(webInf,""String_Node_Str"");
  logDir.mkdir();
  writeMessage(out,""String_Node_Str"");
  try {
    Checksum checksum=JarUtil.extract(new JarFile(""String_Node_Str"",true),webAppRoot);
    checksum.store(new File(webInf,""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String theme=request.getParameter(""String_Node_Str"");
  if (theme == null || theme.length() == 0) {
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
  }
  if (theme != null && theme.length() != 0) {
    config.setProperty(AppConfiguration.APP_THEME,""String_Node_Str"" + theme);
    writeMessage(out,""String_Node_Str"");
    try {
      JarFile themeJar=new JarFile(""String_Node_Str"" + theme + ""String_Node_Str"",true);
      Checksum checksum=JarUtil.checksumJar(themeJar);
      Set files=checksum.getFileNames();
      List install=new ArrayList();
      Iterator it=files.iterator();
      while (it.hasNext()) {
        String name=(String)it.next();
        if (name != null && (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str""))) {
          install.add(name);
        }
      }
      JarUtil.extract(themeJar,webAppRoot,install,null);
      install=Arrays.asList(new Object[]{theme + ""String_Node_Str""});
      JarUtil.extract(themeJar,webInf,install,null);
      checksum.store(new File(webInf,""String_Node_Str""));
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      errors.put(""String_Node_Str"",""String_Node_Str"");
      sendError(session,errors,request,response);
      return;
    }
  }
  Application app=Application.getInstance(session);
  System.out.println(""String_Node_Str"" + app);
  app.setConfiguration(config);
  writeMessage(out,""String_Node_Str"");
  config.setFile(new File(webInf.getAbsoluteFile(),""String_Node_Str""));
  writeMessage(out,""String_Node_Str"");
  boolean useMcKoi=request.getParameter(""String_Node_Str"") != null ? true : false;
  String jdbcURL=request.getParameter(""String_Node_Str"");
  String jdbcDrv=request.getParameter(""String_Node_Str"");
  if (useMcKoi || jdbcURL == null || jdbcURL.length() == 0) {
    useMcKoi=true;
    File dbConfFile=new File(webInf,""String_Node_Str"");
    MckoiEmbeddedJDBCDriver.register();
    jdbcURL=MckoiEmbeddedJDBCDriver.MCKOI_PREFIX + dbConfFile.getPath();
    jdbcDrv=""String_Node_Str"";
    config.setJDBCURL(jdbcURL + ""String_Node_Str"");
    config.setJDBCDriver(jdbcDrv);
    try {
      Properties dbConf=new Properties();
      dbConf.load(new FileInputStream(""String_Node_Str""));
      dbConf.store(new FileOutputStream(dbConfFile),""String_Node_Str"" + config.getName());
      CreateDB.createDB(config);
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      errors.put(""String_Node_Str"",""String_Node_Str"");
      sendError(session,errors,request,response);
      return;
    }
    config.setJDBCURL(jdbcURL);
  }
 else {
    config.setJDBCURL(jdbcURL);
    config.setJDBCDriver(jdbcDrv);
    CreateDB.createDB(config);
  }
  writeMessage(out,""String_Node_Str"");
  CreateDB.createAdmin(config);
  CreateDB.insertData(config,new FileInputStream(""String_Node_Str""));
  CreateDB.postFirst(config);
  File themeSnip=new File(webInf,theme + ""String_Node_Str"");
  if (themeSnip.exists()) {
    writeMessage(out,""String_Node_Str"" + theme);
    CreateDB.insertData(config,new FileInputStream(themeSnip));
  }
  if (useMcKoi) {
    try {
      MckoiEmbeddedJDBCDriver.deregister();
    }
 catch (    SQLException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  config.store();
  writeMessage(out,""String_Node_Str"");
  Thread thread=Thread.currentThread();
  ClassLoader currentClassLoader=thread.getContextClassLoader();
  try {
    thread.setContextClassLoader(currentClassLoader.getParent());
    ApplicationLoader.loadApplication(config);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    e.printStackTrace();
    errors.put(""String_Node_Str"",""String_Node_Str"" + e);
    sendError(session,errors,request,response);
    return;
  }
 finally {
    thread.setContextClassLoader(currentClassLoader);
  }
  if (serverConfig.getAdminLogin() == null && serverConfig.getAdminPassword() == null) {
    System.out.println(""String_Node_Str"" + config.getAdminLogin());
    serverConfig.setAdminLogin(config.getAdminLogin());
    serverConfig.setAdminPassword(config.getAdminPassword());
    serverConfig.setAdminEmail(config.getAdminEmail());
    serverConfig.store();
  }
  writeMessage(out,""String_Node_Str"");
  session.removeAttribute(""String_Node_Str"");
  String url=config.getUrl();
  System.out.println(""String_Node_Str"" + url);
  response.sendRedirect(url);
}","public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession(false);
  if (null == session) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  Map errors=new HashMap();
  session.removeAttribute(""String_Node_Str"");
  Configuration serverConfig=(Configuration)session.getAttribute(CommandHandler.ATT_CONFIG);
  User admin=(User)session.getAttribute(CommandHandler.ATT_ADMIN);
  if (null == serverConfig || (serverConfig.getAdminLogin() != null && admin == null)) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  AppConfiguration config=new AppConfiguration();
  session.setAttribute(""String_Node_Str"",config);
  PrintWriter out=new PrintWriter(System.out);
  writeMessage(out,""String_Node_Str"");
  String tagline=request.getParameter(""String_Node_Str"");
  config.setTagLine(tagline != null && tagline.length() > 0 ? tagline : ""String_Node_Str"");
  String logo=request.getParameter(""String_Node_Str"");
  if (logo != null && logo.length() > 0) {
    config.setLogoImage(logo);
  }
  config.setLogger(""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_CACHE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_TIMEZONE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_WEBLOG_DATE_FORMAT,""String_Node_Str"");
  if (request.getParameter(""String_Node_Str"") != null) {
    config.setProperty(AppConfiguration.APP_PERM + ""String_Node_Str"" + AppConfiguration.PERM_WEBLOGS_PING,""String_Node_Str"");
  }
 else {
    config.setProperty(AppConfiguration.APP_PERM + ""String_Node_Str"" + AppConfiguration.PERM_WEBLOGS_PING,""String_Node_Str"");
  }
  writeMessage(out,""String_Node_Str"");
  String appName=request.getParameter(""String_Node_Str"");
  if (null == appName || appName.length() == 0) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
  config.setName(appName != null ? appName : ""String_Node_Str"");
  writeMessage(out,""String_Node_Str"");
  String adminName=request.getParameter(""String_Node_Str"");
  if (!checkUserName(adminName)) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    config.setAdminLogin(adminName);
  }
  config.setAdminEmail(request.getParameter(""String_Node_Str""));
  String password=request.getParameter(""String_Node_Str"");
  String password2=request.getParameter(""String_Node_Str"");
  if (!checkPassword(password,password2)) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    config.setAdminPassword(password);
  }
  writeMessage(out,""String_Node_Str"");
  config.setHost(request.getParameter(""String_Node_Str""));
  try {
    config.setPort(Integer.parseInt(request.getParameter(""String_Node_Str"")));
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
  }
  String context=request.getParameter(""String_Node_Str"");
  if (context != null) {
    if (context.length() > 1 && !context.startsWith(""String_Node_Str"")) {
      context=""String_Node_Str"" + context;
    }
    if (context.endsWith(""String_Node_Str"")) {
      context=context.substring(0,context.length() - 2);
    }
    config.setContextPath(context);
  }
  if (errors.size() != 0) {
    sendError(session,errors,request,response);
    return;
  }
  InetAddrPort addrPort=new InetAddrPort();
  try {
    String host=config.getHost();
    if (host != null && host.length() > 0) {
      addrPort.setHost(host);
    }
 else {
      addrPort.setHost(InetAddrPort.__0_0_0_0);
    }
    addrPort.setPort(config.getPort());
  }
 catch (  UnknownHostException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String autoUrl=request.getParameter(""String_Node_Str"");
  config.setAutoUrl(autoUrl != null ? ""String_Node_Str"" : ""String_Node_Str"");
  String domain=request.getParameter(""String_Node_Str"");
  if (domain != null) {
    config.setUrl(domain);
  }
  String mailhost=request.getParameter(""String_Node_Str"");
  if (mailhost != null) {
    config.setMailHost(mailhost);
  }
 else {
    writeMessage(out,""String_Node_Str"");
  }
  String maildomain=request.getParameter(""String_Node_Str"");
  if (maildomain != null) {
    config.setMailDomain(maildomain);
  }
  File webAppRoot=new File(serverConfig.getProperty(Configuration.WEBAPP_ROOT) + ""String_Node_Str"" + normalize(config.getName()));
  writeMessage(out,""String_Node_Str"");
  if (!webAppRoot.mkdirs()) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + webAppRoot);
    sendError(session,errors,request,response);
    return;
  }
  File webInf=new File(webAppRoot,""String_Node_Str"");
  webInf.mkdir();
  File dbDir=new File(webInf,""String_Node_Str"");
  dbDir.mkdir();
  File logDir=new File(webInf,""String_Node_Str"");
  logDir.mkdir();
  writeMessage(out,""String_Node_Str"");
  try {
    Checksum checksum=JarUtil.extract(new JarFile(""String_Node_Str"",true),webAppRoot);
    checksum.store(new File(webInf,""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String theme=request.getParameter(""String_Node_Str"");
  if (theme == null || theme.length() == 0) {
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
  }
  if (theme != null && theme.length() != 0) {
    config.setProperty(AppConfiguration.APP_THEME,""String_Node_Str"" + theme);
    writeMessage(out,""String_Node_Str"");
    try {
      JarFile themeJar=new JarFile(""String_Node_Str"" + theme + ""String_Node_Str"",true);
      Checksum checksum=JarUtil.checksumJar(themeJar);
      Set files=checksum.getFileNames();
      List install=new ArrayList();
      Iterator it=files.iterator();
      while (it.hasNext()) {
        String name=(String)it.next();
        if (name != null && (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str""))) {
          install.add(name);
        }
      }
      JarUtil.extract(themeJar,webAppRoot,install,null);
      install=Arrays.asList(new Object[]{theme + ""String_Node_Str""});
      JarUtil.extract(themeJar,webInf,install,null);
      checksum.store(new File(webInf,""String_Node_Str""));
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      errors.put(""String_Node_Str"",""String_Node_Str"");
      sendError(session,errors,request,response);
      return;
    }
  }
  Application app=Application.getInstance(session);
  System.out.println(""String_Node_Str"" + app);
  app.setConfiguration(config);
  writeMessage(out,""String_Node_Str"");
  config.setFile(new File(webInf.getAbsoluteFile(),""String_Node_Str""));
  writeMessage(out,""String_Node_Str"");
  boolean useMcKoi=request.getParameter(""String_Node_Str"") != null ? true : false;
  String jdbcURL=request.getParameter(""String_Node_Str"");
  String jdbcDrv=request.getParameter(""String_Node_Str"");
  if (useMcKoi || jdbcURL == null || jdbcURL.length() == 0) {
    useMcKoi=true;
    File dbConfFile=new File(webInf,""String_Node_Str"");
    MckoiEmbeddedJDBCDriver.register();
    jdbcURL=MckoiEmbeddedJDBCDriver.MCKOI_PREFIX + dbConfFile.getPath();
    jdbcDrv=""String_Node_Str"";
    config.setJDBCURL(jdbcURL + ""String_Node_Str"");
    config.setJDBCDriver(jdbcDrv);
    try {
      Properties dbConf=new Properties();
      dbConf.load(new FileInputStream(""String_Node_Str""));
      dbConf.store(new FileOutputStream(dbConfFile),""String_Node_Str"" + config.getName());
      CreateDB.createDB(config);
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      errors.put(""String_Node_Str"",""String_Node_Str"");
      sendError(session,errors,request,response);
      return;
    }
    config.setJDBCURL(jdbcURL);
  }
 else {
    config.setJDBCURL(jdbcURL);
    config.setJDBCDriver(jdbcDrv);
    CreateDB.createDB(config);
  }
  writeMessage(out,""String_Node_Str"");
  CreateDB.createAdmin(config);
  CreateDB.insertData(config,new FileInputStream(""String_Node_Str""));
  CreateDB.postFirst(config);
  File themeSnip=new File(webInf,theme + ""String_Node_Str"");
  if (themeSnip.exists()) {
    writeMessage(out,""String_Node_Str"" + theme);
    CreateDB.insertData(config,new FileInputStream(themeSnip));
  }
  if (useMcKoi) {
    try {
      MckoiEmbeddedJDBCDriver.deregister();
    }
 catch (    SQLException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  config.store();
  writeMessage(out,""String_Node_Str"");
  Thread thread=Thread.currentThread();
  ClassLoader currentClassLoader=thread.getContextClassLoader();
  try {
    thread.setContextClassLoader(currentClassLoader.getParent());
    ApplicationLoader.loadApplication(config);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    e.printStackTrace();
    errors.put(""String_Node_Str"",""String_Node_Str"" + e);
    sendError(session,errors,request,response);
    return;
  }
 finally {
    thread.setContextClassLoader(currentClassLoader);
  }
  if (serverConfig.getAdminLogin() == null && serverConfig.getAdminPassword() == null) {
    System.out.println(""String_Node_Str"" + config.getAdminLogin());
    serverConfig.setAdminLogin(config.getAdminLogin());
    serverConfig.setAdminPassword(config.getAdminPassword());
    serverConfig.setAdminEmail(config.getAdminEmail());
    serverConfig.store();
  }
  writeMessage(out,""String_Node_Str"");
  session.removeAttribute(""String_Node_Str"");
  String url=config.getUrl();
  System.out.println(""String_Node_Str"" + url);
  response.sendRedirect(url);
}",0.9898837384870904
145789,"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession();
  if (session != null) {
    String user=request.getParameter(""String_Node_Str"");
    String pass=request.getParameter(""String_Node_Str"");
    Configuration config=(Configuration)session.getAttribute(CommandHandler.ATT_CONFIG);
    if (config != null && config.getAdminLogin().equals(user) && config.getAdminPassword().equals(pass)) {
      org.snipsnap.server.Shutdown.shutdown();
      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,""String_Node_Str"");
      return;
    }
  }
  response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
}","public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession();
  if (session != null) {
    String user=request.getParameter(""String_Node_Str"");
    String pass=request.getParameter(""String_Node_Str"");
    Configuration config=(Configuration)session.getAttribute(CommandHandler.ATT_CONFIG);
    if (config != null && config.getAdminLogin().equals(user) && config.getAdminPassword().equals(pass)) {
      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,""String_Node_Str"");
      System.exit(0);
    }
  }
  response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
}",0.952783650458069
145790,"/** 
 * Wait for connections and handle commands.
 */
public void run(){
  while (serverThread != null && serverSocket != null) {
    try {
      Socket s=serverSocket.accept();
      BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
      BufferedReader reader=new BufferedReader(new InputStreamReader(s.getInputStream()));
      if (s.getInetAddress().equals(InetAddress.getLocalHost())) {
        String line=reader.readLine();
        String command=null, args=null;
        int idx=line.indexOf(' ');
        if (idx != -1) {
          command=line.substring(0,idx);
          args=line.substring(idx + 1);
        }
        System.out.println(""String_Node_Str"" + command + ""String_Node_Str""+ args+ ""String_Node_Str"");
        if (""String_Node_Str"".equals(command)) {
          Shutdown.shutdown();
        }
 else         if (""String_Node_Str"".equals(command) && args != null) {
          try {
            ApplicationLoader.loadApplication(config.getProperty(Configuration.WEBAPP_ROOT),args);
          }
 catch (          Exception e) {
            e.printStackTrace(new PrintWriter(writer));
            writer.newLine();
          }
        }
 else         if (""String_Node_Str"".equals(command) && args != null) {
          try {
            ApplicationLoader.unloadApplication(config.getProperty(Configuration.WEBAPP_ROOT),args);
          }
 catch (          Exception e) {
            e.printStackTrace(new PrintWriter(writer));
            writer.newLine();
          }
        }
 else         if (""String_Node_Str"".equals(command) && args != null) {
          try {
            ApplicationLoader.reloadApplication(config.getProperty(Configuration.WEBAPP_ROOT),args);
          }
 catch (          Exception e) {
            e.printStackTrace(new PrintWriter(writer));
            writer.newLine();
          }
        }
 else {
          writer.write(""String_Node_Str"" + command + ""String_Node_Str"");
        }
      }
 else {
        writer.write(""String_Node_Str"");
        writer.newLine();
      }
      writer.flush();
      reader.close();
      writer.close();
      s.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      e.printStackTrace();
    }
  }
}","/** 
 * Wait for connections and handle commands.
 */
public void run(){
  while (serverThread != null && serverSocket != null) {
    try {
      Socket s=serverSocket.accept();
      BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
      BufferedReader reader=new BufferedReader(new InputStreamReader(s.getInputStream()));
      if (s.getInetAddress().equals(InetAddress.getLocalHost())) {
        String line=reader.readLine();
        String command=null, args=null;
        int idx=line.indexOf(' ');
        if (idx != -1) {
          command=line.substring(0,idx);
          args=line.substring(idx + 1);
        }
        System.out.println(""String_Node_Str"" + command + ""String_Node_Str""+ args+ ""String_Node_Str"");
        if (""String_Node_Str"".equals(command)) {
          System.exit(0);
        }
 else         if (""String_Node_Str"".equals(command) && args != null) {
          try {
            ApplicationLoader.loadApplication(config.getProperty(Configuration.WEBAPP_ROOT),args);
          }
 catch (          Exception e) {
            e.printStackTrace(new PrintWriter(writer));
            writer.newLine();
          }
        }
 else         if (""String_Node_Str"".equals(command) && args != null) {
          try {
            ApplicationLoader.unloadApplication(config.getProperty(Configuration.WEBAPP_ROOT),args);
          }
 catch (          Exception e) {
            e.printStackTrace(new PrintWriter(writer));
            writer.newLine();
          }
        }
 else         if (""String_Node_Str"".equals(command) && args != null) {
          try {
            ApplicationLoader.reloadApplication(config.getProperty(Configuration.WEBAPP_ROOT),args);
          }
 catch (          Exception e) {
            e.printStackTrace(new PrintWriter(writer));
            writer.newLine();
          }
        }
 else {
          writer.write(""String_Node_Str"" + command + ""String_Node_Str"");
        }
      }
 else {
        writer.write(""String_Node_Str"");
        writer.newLine();
      }
      writer.flush();
      reader.close();
      writer.close();
      s.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      e.printStackTrace();
    }
  }
}",0.9935741192111678
145791,"/** 
 * Shut down complete server ...
 */
public static void shutdown(){
  new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      Exception e) {
        Code.ignore(e);
      }
      Log.event(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      Iterator s=HttpServer.getHttpServers().iterator();
      while (s.hasNext()) {
        HttpServer server=(HttpServer)s.next();
        try {
          System.out.println(""String_Node_Str"" + server);
          server.stop();
        }
 catch (        Exception e) {
          Code.ignore(e);
        }
      }
      System.out.println(""String_Node_Str"");
      Log.event(""String_Node_Str"");
      System.exit(0);
    }
  }
).start();
}","/** 
 * Shut down complete server ...
 */
public static void shutdown(){
  Log.event(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  Iterator s=HttpServer.getHttpServers().iterator();
  while (s.hasNext()) {
    HttpServer server=(HttpServer)s.next();
    try {
      System.out.println(""String_Node_Str"" + server);
      server.stop();
    }
 catch (    Exception e) {
      Code.ignore(e);
    }
  }
  System.out.println(""String_Node_Str"");
  Log.event(""String_Node_Str"");
}",0.2600321027287319
145792,"/** 
 * Start SnipSnap after adding the sdk tools.jar or similar to the classpath.
 * @param args command line arguments
 */
public static void main(String[] args){
  File toolsJar=new File(new File(System.getProperty(""String_Node_Str"")),""String_Node_Str"");
  if (!toolsJar.exists()) {
    toolsJar=new File(new File(System.getProperty(""String_Node_Str"")),""String_Node_Str"");
  }
  if (!toolsJar.exists()) {
    String system=System.getProperty(""String_Node_Str"");
    if (system.startsWith(""String_Node_Str"")) {
      toolsJar=new File(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + toolsJar);
      System.out.println(""String_Node_Str"");
      System.exit(-1);
    }
  }
  try {
    System.setProperty(Launcher.CLASSPATH,toolsJar.getCanonicalPath());
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  if (null == System.getProperty(Launcher.ERRORLOG)) {
    System.setProperty(Launcher.ERRORLOG,""String_Node_Str"");
  }
  try {
    invokeMain(""String_Node_Str"",args);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","/** 
 * Start SnipSnap after adding the sdk tools.jar or similar to the classpath.
 * @param args command line arguments
 */
public static void main(String[] args){
  File toolsJar=new File(new File(System.getProperty(""String_Node_Str"")),""String_Node_Str"");
  if (!toolsJar.exists()) {
    toolsJar=new File(new File(System.getProperty(""String_Node_Str"")),""String_Node_Str"");
  }
  if (!toolsJar.exists()) {
    String system=System.getProperty(""String_Node_Str"");
    if (system.startsWith(""String_Node_Str"")) {
      toolsJar=new File(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + toolsJar);
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
  }
  try {
    System.setProperty(Launcher.CLASSPATH,toolsJar.getCanonicalPath());
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  if (null == System.getProperty(Launcher.ERRORLOG)) {
    System.setProperty(Launcher.ERRORLOG,""String_Node_Str"");
  }
  try {
    invokeMain(""String_Node_Str"",args);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}",0.9847198641765704
145793,"private Aspects(Object target){
  this.target=target;
  interceptors=new ArrayList();
  Logger.debug(""String_Node_Str"" + target.getClass());
  if (target.getClass().equals(SnipImpl.class)) {
    interceptors.add(new ACLInterceptor());
  }
 else   if (target.getClass().equals(SnipSpaceImpl.class)) {
    interceptors.add(new SnipSpaceACLInterceptor());
    interceptors.add(new StoreInterceptor());
  }
}","private Aspects(Object target){
  this.target=target;
  interceptors=new ArrayList();
  if (target.getClass().equals(SnipImpl.class)) {
    interceptors.add(new ACLInterceptor());
  }
 else   if (target.getClass().equals(SnipSpaceImpl.class)) {
    interceptors.add(new SnipSpaceACLInterceptor());
    interceptors.add(new StoreInterceptor());
  }
}",0.9269588313413014
145794,"public void init(ServletConfig servletConfig) throws ServletException {
  XmlRpcServer xmlrpc=new XmlRpcServer();
  handlers=new ArrayList();
  handlers.add(new SnipSnapHandler());
  handlers.add(new BloggerHandler());
  handlers.add(new WeblogsPingHandler());
  handlers.add(new GeneratorHandler());
  handlers.add(new WeblogHandler());
  Iterator iterator=handlers.iterator();
  while (iterator.hasNext()) {
    XmlRpcHandler handler=(XmlRpcHandler)iterator.next();
    xmlrpc.addHandler(handler.getName(),handler);
  }
}","public void init(ServletConfig servletConfig) throws ServletException {
  xmlrpc=new XmlRpcServer();
  handlers=new ArrayList();
  handlers.add(new SnipSnapHandler());
  handlers.add(new MetaWeblogHandler());
  handlers.add(new BloggerHandler());
  handlers.add(new WeblogsPingHandler());
  handlers.add(new GeneratorHandler());
  handlers.add(new WeblogHandler());
  Iterator iterator=handlers.iterator();
  while (iterator.hasNext()) {
    XmlRpcHandler handler=(XmlRpcHandler)iterator.next();
    xmlrpc.addHandler(handler.getName(),handler);
  }
}",0.2104283054003724
145795,"/** 
 * metaWeblog.newPost (blogid, username, password, struct, publish) returns string metaWeblog.editPost (postid, username, password, struct, publish) returns true metaWeblog.getPost (postid, username, password) returns struct
 */
public String newPost(String blogid,String username,String password,String struct,String publish){
  return ""String_Node_Str"";
}","/** 
 * metaWeblog.newPost (blogid, username, password, struct, publish) returns string metaWeblog.editPost (postid, username, password, struct, publish) returns true metaWeblog.getPost (postid, username, password) returns struct
 */
public String newPost(String blogid,String username,String password,Hashtable struct,boolean publish) throws Exception {
  User user=authenticate(username,password);
  SnipSpace space=SnipSpaceFactory.getInstance();
  Hashtable postcontent=struct;
  String title=(String)postcontent.get(""String_Node_Str"");
  String content=(String)postcontent.get(""String_Node_Str"");
  Snip snip=null;
  if (null == title) {
    snip=space.post(content);
  }
 else {
    snip=space.post(content,title);
  }
  return snip.getName();
}",0.5858041329739443
145796,"public void run(){
  if (config.allow(AppConfiguration.PERM_WEBLOGS_PING) && handlers.size() > 0) {
    if (null == handlers) {
      init();
    }
    Iterator iterator=handlers.iterator();
    while (iterator.hasNext()) {
      PingHandler handler=(PingHandler)iterator.next();
      handler.ping(weblog);
    }
  }
}","public void run(){
  Logger.debug(""String_Node_Str"" + config);
  if (config.allow(AppConfiguration.PERM_WEBLOGS_PING)) {
    if (null == handlers) {
      init();
    }
    if (handlers.size() > 0) {
      Iterator iterator=handlers.iterator();
      while (iterator.hasNext()) {
        PingHandler handler=(PingHandler)iterator.next();
        handler.ping(weblog);
      }
    }
  }
}",0.8186968838526912
145797,"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession(false);
  if (null == session) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  Map errors=new HashMap();
  session.removeAttribute(""String_Node_Str"");
  Configuration serverConfig=(Configuration)session.getAttribute(CommandHandler.ATT_CONFIG);
  User admin=(User)session.getAttribute(CommandHandler.ATT_ADMIN);
  if (null == serverConfig || (serverConfig.getAdminLogin() != null && admin == null)) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  AppConfiguration config=new AppConfiguration();
  session.setAttribute(""String_Node_Str"",config);
  PrintWriter out=new PrintWriter(System.out);
  writeMessage(out,""String_Node_Str"");
  String tagline=request.getParameter(""String_Node_Str"");
  config.setTagLine(tagline != null && tagline.length() > 0 ? tagline : ""String_Node_Str"");
  String logo=request.getParameter(""String_Node_Str"");
  if (logo != null && logo.length() > 0) {
    config.setLogoImage(logo);
  }
  config.setLogger(""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_CACHE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_TIMEZONE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_WEBLOG_DATE_FORMAT,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_PERM + ""String_Node_Str"" + AppConfiguration.PERM_WEBLOGS_PING,""String_Node_Str"");
  writeMessage(out,""String_Node_Str"");
  String appName=request.getParameter(""String_Node_Str"");
  if (null == appName || appName.length() == 0) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
  config.setName(appName != null ? appName : ""String_Node_Str"");
  writeMessage(out,""String_Node_Str"");
  config.setAdminLogin(request.getParameter(""String_Node_Str""));
  if (null == config.getAdminLogin() || config.getAdminLogin().length() == 0) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
  config.setAdminEmail(request.getParameter(""String_Node_Str""));
  String password=request.getParameter(""String_Node_Str"");
  String password2=request.getParameter(""String_Node_Str"");
  if (null == password || password.length() == 0 || !password.equals(password2)) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    config.setAdminPassword(password);
  }
  writeMessage(out,""String_Node_Str"");
  config.setHost(request.getParameter(""String_Node_Str""));
  try {
    config.setPort(Integer.parseInt(request.getParameter(""String_Node_Str"")));
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
  }
  String context=request.getParameter(""String_Node_Str"");
  if (context != null) {
    if (context.length() > 1 && !context.startsWith(""String_Node_Str"")) {
      context=""String_Node_Str"" + context;
    }
    if (context.endsWith(""String_Node_Str"")) {
      context=context.substring(0,context.length() - 2);
    }
    config.setContextPath(context);
  }
  if (errors.size() != 0) {
    sendError(session,errors,request,response);
    return;
  }
  InetAddrPort addrPort=new InetAddrPort();
  try {
    String host=config.getHost();
    if (host != null && host.length() > 0) {
      addrPort.setHost(host);
    }
 else {
      addrPort.setHost(InetAddrPort.__0_0_0_0);
    }
    addrPort.setPort(config.getPort());
  }
 catch (  UnknownHostException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String domain=request.getParameter(""String_Node_Str"");
  if (domain != null) {
    config.setUrl(domain);
  }
  String mailhost=request.getParameter(""String_Node_Str"");
  if (mailhost != null) {
    config.setMailHost(mailhost);
  }
 else {
    writeMessage(out,""String_Node_Str"");
  }
  String maildomain=request.getParameter(""String_Node_Str"");
  if (maildomain != null) {
    config.setMailDomain(maildomain);
  }
  File webAppRoot=new File(serverConfig.getProperty(Configuration.SERVER_WEBAPP_ROOT) + ""String_Node_Str"" + normalize(config.getName()));
  writeMessage(out,""String_Node_Str"");
  if (!webAppRoot.mkdirs()) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + webAppRoot);
    sendError(session,errors,request,response);
    return;
  }
  File webInf=new File(webAppRoot,""String_Node_Str"");
  webInf.mkdir();
  File dbDir=new File(webInf,""String_Node_Str"");
  dbDir.mkdir();
  File logDir=new File(webInf,""String_Node_Str"");
  logDir.mkdir();
  writeMessage(out,""String_Node_Str"");
  try {
    Checksum checksum=JarUtil.extract(new JarFile(""String_Node_Str"",true),webAppRoot);
    checksum.store(new File(webInf,""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String theme=request.getParameter(""String_Node_Str"");
  if (theme == null || theme.length() == 0) {
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
  }
  if (theme != null && theme.length() != 0) {
    config.setProperty(AppConfiguration.APP_THEME,""String_Node_Str"" + theme);
    writeMessage(out,""String_Node_Str"");
    try {
      JarFile themeJar=new JarFile(""String_Node_Str"" + theme + ""String_Node_Str"",true);
      Checksum checksum=JarUtil.checksumJar(themeJar);
      Set files=checksum.getFileNames();
      List install=new ArrayList();
      Iterator it=files.iterator();
      while (it.hasNext()) {
        String name=(String)it.next();
        if (name != null && (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str""))) {
          install.add(name);
        }
      }
      JarUtil.extract(themeJar,webAppRoot,install,null);
      install=Arrays.asList(new Object[]{theme + ""String_Node_Str""});
      JarUtil.extract(themeJar,webInf,install,null);
      checksum.store(new File(webInf,""String_Node_Str""));
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      errors.put(""String_Node_Str"",""String_Node_Str"");
      sendError(session,errors,request,response);
      return;
    }
  }
  Application app=Application.getInstance(session);
  System.out.println(""String_Node_Str"" + app);
  app.setConfiguration(config);
  writeMessage(out,""String_Node_Str"");
  config.setFile(new File(webInf.getAbsoluteFile(),""String_Node_Str""));
  writeMessage(out,""String_Node_Str"");
  boolean useMcKoi=request.getParameter(""String_Node_Str"") != null ? true : false;
  String jdbcURL=request.getParameter(""String_Node_Str"");
  String jdbcDrv=request.getParameter(""String_Node_Str"");
  if (useMcKoi || jdbcURL == null || jdbcURL.length() == 0) {
    File dbConfFile=new File(webInf,""String_Node_Str"");
    jdbcURL=MckoiEmbeddedJDBCDriver.MCKOI_PREFIX + dbConfFile.getPath();
    jdbcDrv=""String_Node_Str"";
    config.setJDBCURL(jdbcURL + ""String_Node_Str"");
    config.setJDBCDriver(jdbcDrv);
    try {
      Properties dbConf=new Properties();
      dbConf.load(new FileInputStream(""String_Node_Str""));
      dbConf.store(new FileOutputStream(dbConfFile),""String_Node_Str"" + config.getName());
      CreateDB.createDB(config);
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      errors.put(""String_Node_Str"",""String_Node_Str"");
      sendError(session,errors,request,response);
      return;
    }
    config.setJDBCURL(jdbcURL);
  }
 else {
    config.setJDBCURL(jdbcURL);
    config.setJDBCDriver(jdbcDrv);
    CreateDB.createDB(config);
  }
  writeMessage(out,""String_Node_Str"");
  CreateDB.createAdmin(config);
  CreateDB.insertData(config,new FileInputStream(""String_Node_Str""));
  CreateDB.postFirst(config);
  File themeSnip=new File(webInf,theme + ""String_Node_Str"");
  if (themeSnip.exists()) {
    writeMessage(out,""String_Node_Str"" + theme);
    CreateDB.insertData(config,new FileInputStream(themeSnip));
  }
  config.store();
  writeMessage(out,""String_Node_Str"");
  Thread thread=Thread.currentThread();
  ClassLoader currentClassLoader=thread.getContextClassLoader();
  try {
    thread.setContextClassLoader(currentClassLoader.getParent());
    ApplicationLoader.loadApplication(config);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    e.printStackTrace();
    errors.put(""String_Node_Str"",""String_Node_Str"" + e);
    sendError(session,errors,request,response);
    return;
  }
 finally {
    thread.setContextClassLoader(currentClassLoader);
  }
  if (serverConfig.getAdminLogin() == null && serverConfig.getAdminPassword() == null) {
    System.out.println(""String_Node_Str"" + config.getAdminLogin());
    serverConfig.setAdminLogin(config.getAdminLogin());
    serverConfig.setAdminPassword(config.getAdminPassword());
    serverConfig.setAdminEmail(config.getAdminEmail());
    serverConfig.store();
  }
  writeMessage(out,""String_Node_Str"");
  session.removeAttribute(""String_Node_Str"");
  String url=config.getUrl();
  System.out.println(""String_Node_Str"" + url);
  response.sendRedirect(url);
}","public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  HttpSession session=request.getSession(false);
  if (null == session) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  Map errors=new HashMap();
  session.removeAttribute(""String_Node_Str"");
  Configuration serverConfig=(Configuration)session.getAttribute(CommandHandler.ATT_CONFIG);
  User admin=(User)session.getAttribute(CommandHandler.ATT_ADMIN);
  if (null == serverConfig || (serverConfig.getAdminLogin() != null && admin == null)) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  AppConfiguration config=new AppConfiguration();
  session.setAttribute(""String_Node_Str"",config);
  PrintWriter out=new PrintWriter(System.out);
  writeMessage(out,""String_Node_Str"");
  String tagline=request.getParameter(""String_Node_Str"");
  config.setTagLine(tagline != null && tagline.length() > 0 ? tagline : ""String_Node_Str"");
  String logo=request.getParameter(""String_Node_Str"");
  if (logo != null && logo.length() > 0) {
    config.setLogoImage(logo);
  }
  config.setLogger(""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_CACHE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_TIMEZONE,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_WEBLOG_DATE_FORMAT,""String_Node_Str"");
  config.setProperty(AppConfiguration.APP_PERM + ""String_Node_Str"" + AppConfiguration.PERM_WEBLOGS_PING,""String_Node_Str"");
  writeMessage(out,""String_Node_Str"");
  String appName=request.getParameter(""String_Node_Str"");
  if (null == appName || appName.length() == 0) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
  config.setName(appName != null ? appName : ""String_Node_Str"");
  writeMessage(out,""String_Node_Str"");
  config.setAdminLogin(request.getParameter(""String_Node_Str""));
  if (null == config.getAdminLogin() || config.getAdminLogin().length() == 0) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
  config.setAdminEmail(request.getParameter(""String_Node_Str""));
  String password=request.getParameter(""String_Node_Str"");
  String password2=request.getParameter(""String_Node_Str"");
  if (null == password || password.length() == 0 || !password.equals(password2)) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    config.setAdminPassword(password);
  }
  writeMessage(out,""String_Node_Str"");
  config.setHost(request.getParameter(""String_Node_Str""));
  try {
    config.setPort(Integer.parseInt(request.getParameter(""String_Node_Str"")));
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + request.getParameter(""String_Node_Str"") + ""String_Node_Str"");
  }
  String context=request.getParameter(""String_Node_Str"");
  if (context != null) {
    if (context.length() > 1 && !context.startsWith(""String_Node_Str"")) {
      context=""String_Node_Str"" + context;
    }
    if (context.endsWith(""String_Node_Str"")) {
      context=context.substring(0,context.length() - 2);
    }
    config.setContextPath(context);
  }
  if (errors.size() != 0) {
    sendError(session,errors,request,response);
    return;
  }
  InetAddrPort addrPort=new InetAddrPort();
  try {
    String host=config.getHost();
    if (host != null && host.length() > 0) {
      addrPort.setHost(host);
    }
 else {
      addrPort.setHost(InetAddrPort.__0_0_0_0);
    }
    addrPort.setPort(config.getPort());
  }
 catch (  UnknownHostException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String domain=request.getParameter(""String_Node_Str"");
  if (domain != null) {
    config.setUrl(domain);
  }
  String mailhost=request.getParameter(""String_Node_Str"");
  if (mailhost != null) {
    config.setMailHost(mailhost);
  }
 else {
    writeMessage(out,""String_Node_Str"");
  }
  String maildomain=request.getParameter(""String_Node_Str"");
  if (maildomain != null) {
    config.setMailDomain(maildomain);
  }
  File webAppRoot=new File(serverConfig.getProperty(Configuration.SERVER_WEBAPP_ROOT) + ""String_Node_Str"" + normalize(config.getName()));
  writeMessage(out,""String_Node_Str"");
  if (!webAppRoot.mkdirs()) {
    System.err.println(""String_Node_Str"");
    errors.put(""String_Node_Str"",""String_Node_Str"" + webAppRoot);
    sendError(session,errors,request,response);
    return;
  }
  File webInf=new File(webAppRoot,""String_Node_Str"");
  webInf.mkdir();
  File dbDir=new File(webInf,""String_Node_Str"");
  dbDir.mkdir();
  File logDir=new File(webInf,""String_Node_Str"");
  logDir.mkdir();
  writeMessage(out,""String_Node_Str"");
  try {
    Checksum checksum=JarUtil.extract(new JarFile(""String_Node_Str"",true),webAppRoot);
    checksum.store(new File(webInf,""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
    return;
  }
  String theme=request.getParameter(""String_Node_Str"");
  if (theme == null || theme.length() == 0) {
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
  }
  if (theme != null && theme.length() != 0) {
    config.setProperty(AppConfiguration.APP_THEME,""String_Node_Str"" + theme);
    writeMessage(out,""String_Node_Str"");
    try {
      JarFile themeJar=new JarFile(""String_Node_Str"" + theme + ""String_Node_Str"",true);
      Checksum checksum=JarUtil.checksumJar(themeJar);
      Set files=checksum.getFileNames();
      List install=new ArrayList();
      Iterator it=files.iterator();
      while (it.hasNext()) {
        String name=(String)it.next();
        if (name != null && (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str""))) {
          install.add(name);
        }
      }
      JarUtil.extract(themeJar,webAppRoot,install,null);
      install=Arrays.asList(new Object[]{theme + ""String_Node_Str""});
      JarUtil.extract(themeJar,webInf,install,null);
      checksum.store(new File(webInf,""String_Node_Str""));
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      errors.put(""String_Node_Str"",""String_Node_Str"");
      sendError(session,errors,request,response);
      return;
    }
  }
  Application app=Application.getInstance(session);
  System.out.println(""String_Node_Str"" + app);
  app.setConfiguration(config);
  writeMessage(out,""String_Node_Str"");
  config.setFile(new File(webInf.getAbsoluteFile(),""String_Node_Str""));
  Thread thread=Thread.currentThread();
  ClassLoader currentClassLoader=thread.getContextClassLoader();
  try {
    thread.setContextClassLoader(currentClassLoader.getParent());
    writeMessage(out,""String_Node_Str"");
    boolean useMcKoi=request.getParameter(""String_Node_Str"") != null ? true : false;
    String jdbcURL=request.getParameter(""String_Node_Str"");
    String jdbcDrv=request.getParameter(""String_Node_Str"");
    if (useMcKoi || jdbcURL == null || jdbcURL.length() == 0) {
      File dbConfFile=new File(webInf,""String_Node_Str"");
      jdbcURL=MckoiEmbeddedJDBCDriver.MCKOI_PREFIX + dbConfFile.getPath();
      jdbcDrv=""String_Node_Str"";
      config.setJDBCURL(jdbcURL + ""String_Node_Str"");
      config.setJDBCDriver(jdbcDrv);
      try {
        Properties dbConf=new Properties();
        dbConf.load(new FileInputStream(""String_Node_Str""));
        dbConf.store(new FileOutputStream(dbConfFile),""String_Node_Str"" + config.getName());
        CreateDB.createDB(config);
      }
 catch (      IOException e) {
        System.err.println(""String_Node_Str"" + e);
        errors.put(""String_Node_Str"",""String_Node_Str"");
        sendError(session,errors,request,response);
        return;
      }
      config.setJDBCURL(jdbcURL);
    }
 else {
      config.setJDBCURL(jdbcURL);
      config.setJDBCDriver(jdbcDrv);
      CreateDB.createDB(config);
    }
    writeMessage(out,""String_Node_Str"");
    CreateDB.createAdmin(config);
    CreateDB.insertData(config,new FileInputStream(""String_Node_Str""));
    CreateDB.postFirst(config);
    File themeSnip=new File(webInf,theme + ""String_Node_Str"");
    if (themeSnip.exists()) {
      writeMessage(out,""String_Node_Str"" + theme);
      CreateDB.insertData(config,new FileInputStream(themeSnip));
    }
    config.store();
    writeMessage(out,""String_Node_Str"");
    try {
      ApplicationLoader.loadApplication(config);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"" + e);
      e.printStackTrace();
      errors.put(""String_Node_Str"",""String_Node_Str"" + e);
      sendError(session,errors,request,response);
      return;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    e.printStackTrace();
    errors.put(""String_Node_Str"",""String_Node_Str"");
    sendError(session,errors,request,response);
  }
 finally {
    thread.setContextClassLoader(currentClassLoader);
  }
  if (serverConfig.getAdminLogin() == null && serverConfig.getAdminPassword() == null) {
    System.out.println(""String_Node_Str"" + config.getAdminLogin());
    serverConfig.setAdminLogin(config.getAdminLogin());
    serverConfig.setAdminPassword(config.getAdminPassword());
    serverConfig.setAdminEmail(config.getAdminEmail());
    serverConfig.store();
  }
  writeMessage(out,""String_Node_Str"");
  session.removeAttribute(""String_Node_Str"");
  String url=config.getUrl();
  System.out.println(""String_Node_Str"" + url);
  response.sendRedirect(url);
}",0.9564857881136952
145798,"public void handleMatch(StringBuffer buffer,MatchResult result,FilterContext context){
  String command=result.group(1);
  if (!command.startsWith(""String_Node_Str"")) {
    MacroParameter mParams=context.getMacroParameter();
    if (result.group(1).equals(result.group(result.groups() - 1))) {
      if (!""String_Node_Str"".equals(result.group(2))) {
        mParams.setParams(result.group(2));
      }
      mParams.setContent(result.group(3));
    }
 else {
      if (result.groups() > 1) {
        mParams.setParams(result.group(2));
      }
    }
    try {
      if (macros.containsKey(command)) {
        Macro macro=(Macro)macros.get(command);
        if (null != mParams.getContent()) {
          mParams.setContent(filter(mParams.getContent(),context));
        }
        Writer writer=new StringBufferWriter(buffer);
        macro.execute(writer,mParams);
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        String include=RenderEngine.getInstance().include(command.substring(1));
        if (null != include) {
          buffer.append(include);
        }
 else {
          buffer.append(command.substring(1) + ""String_Node_Str"");
        }
        return;
      }
 else {
        buffer.append(result.group(0));
        return;
      }
    }
 catch (    IllegalArgumentException e) {
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    }
catch (    Exception e) {
      Logger.warn(""String_Node_Str"" + result.group(1),e);
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str"");
      return;
    }
  }
 else {
    buffer.append(""String_Node_Str"");
    buffer.append(command.substring(1));
    buffer.append(""String_Node_Str"");
  }
}","public void handleMatch(StringBuffer buffer,MatchResult result,FilterContext context){
  String command=result.group(1);
  if (!command.startsWith(""String_Node_Str"")) {
    MacroParameter mParams=context.getMacroParameter();
    if (result.group(1).equals(result.group(result.groups() - 1))) {
      if (!""String_Node_Str"".equals(result.group(2))) {
        mParams.setParams(result.group(2));
      }
      mParams.setContent(result.group(3));
    }
 else {
      if (result.groups() > 1) {
        mParams.setParams(result.group(2));
      }
    }
    try {
      if (macros.containsKey(command)) {
        Macro macro=(Macro)macros.get(command);
        if (null != mParams.getContent()) {
          mParams.setContent(filter(mParams.getContent(),context));
        }
        Writer writer=new StringBufferWriter(buffer);
        macro.execute(writer,mParams);
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        RenderEngine engine=context.getRenderEngine();
        if (engine instanceof IncludeRenderEngine) {
          String include=((IncludeRenderEngine)engine).include(command.substring(1));
          if (null != include) {
            buffer.append(include);
          }
 else {
            buffer.append(command.substring(1) + ""String_Node_Str"");
          }
        }
        return;
      }
 else {
        buffer.append(result.group(0));
        return;
      }
    }
 catch (    IllegalArgumentException e) {
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    }
catch (    Exception e) {
      Logger.warn(""String_Node_Str"" + result.group(1),e);
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str"");
      return;
    }
  }
 else {
    buffer.append(""String_Node_Str"");
    buffer.append(command.substring(1));
    buffer.append(""String_Node_Str"");
  }
}",0.9497082522923034
145799,"public void handleMatch(StringBuffer buffer,MatchResult result,FilterContext context){
  String command=result.group(1);
  if (!command.startsWith(""String_Node_Str"")) {
    MacroParameter mParams=context.getMacroParameter();
    if (result.group(1).equals(result.group(result.groups() - 1))) {
      if (!""String_Node_Str"".equals(result.group(2))) {
        mParams.setParams(result.group(2));
      }
      mParams.setContent(result.group(3));
    }
 else {
      if (result.groups() > 1) {
        mParams.setParams(result.group(2));
      }
    }
    try {
      if (macros.containsKey(command)) {
        Macro macro=(Macro)macros.get(command);
        if (null != mParams.getContent()) {
          mParams.setContent(filter(mParams.getContent(),context));
        }
        Writer writer=new StringBufferWriter(buffer);
        macro.execute(writer,mParams);
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        EngineManager engine=context.getRenderEngine();
        if (engine instanceof IncludeRenderEngine) {
          String include=((IncludeRenderEngine)engine).include(command.substring(1));
          if (null != include) {
            buffer.append(include);
          }
 else {
            buffer.append(command.substring(1) + ""String_Node_Str"");
          }
        }
        return;
      }
 else {
        buffer.append(result.group(0));
        return;
      }
    }
 catch (    IllegalArgumentException e) {
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    }
catch (    Exception e) {
      Logger.warn(""String_Node_Str"" + result.group(1),e);
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str"");
      return;
    }
  }
 else {
    buffer.append(""String_Node_Str"");
    buffer.append(command.substring(1));
    buffer.append(""String_Node_Str"");
  }
}","public void handleMatch(StringBuffer buffer,MatchResult result,FilterContext context){
  String command=result.group(1);
  if (!command.startsWith(""String_Node_Str"")) {
    MacroParameter mParams=context.getMacroParameter();
    if (result.group(1).equals(result.group(result.groups() - 1))) {
      if (!""String_Node_Str"".equals(result.group(2))) {
        mParams.setParams(result.group(2));
      }
      mParams.setContent(result.group(3));
    }
 else {
      if (result.groups() > 1) {
        mParams.setParams(result.group(2));
      }
    }
    try {
      if (macros.containsKey(command)) {
        Macro macro=(Macro)macros.get(command);
        if (null != mParams.getContent()) {
          mParams.setContent(filter(mParams.getContent(),context));
        }
        Writer writer=new StringBufferWriter(buffer);
        macro.execute(writer,mParams);
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        RenderEngine engine=context.getRenderEngine();
        if (engine instanceof IncludeRenderEngine) {
          String include=((IncludeRenderEngine)engine).include(command.substring(1));
          if (null != include) {
            buffer.append(include);
          }
 else {
            buffer.append(command.substring(1) + ""String_Node_Str"");
          }
        }
        return;
      }
 else {
        buffer.append(result.group(0));
        return;
      }
    }
 catch (    IllegalArgumentException e) {
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    }
catch (    Exception e) {
      Logger.warn(""String_Node_Str"" + result.group(1),e);
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str"");
      return;
    }
  }
 else {
    buffer.append(""String_Node_Str"");
    buffer.append(command.substring(1));
    buffer.append(""String_Node_Str"");
  }
}",0.996517546209483
145800,"public MultipartWrapper(HttpServletRequest request) throws IOException, IllegalArgumentException {
  super(request);
  InputStreamDataSource ds=new InputStreamDataSource(request.getInputStream(),request.getContentType());
  try {
    multipart=new MimeMultipart(ds);
    params=new Hashtable(request.getParameterMap());
    int count=multipart.getCount();
    for (int i=0; i < count; i++) {
      MimeBodyPart body=(MimeBodyPart)multipart.getBodyPart(i);
      ContentDisposition disp=new ContentDisposition(body.getHeader(""String_Node_Str"",null));
      String name=disp.getParameter(""String_Node_Str"");
      if (body.getContentType().startsWith(""String_Node_Str"")) {
        String value=new String(((String)body.getContent()).getBytes(""String_Node_Str""),request.getCharacterEncoding());
        String[] values=(String[])params.get(name);
        if (null == values) {
          params.put(name,new String[]{value});
        }
 else {
          String[] tmp=new String[values.length + 1];
          System.arraycopy(values,0,tmp,0,values.length);
          tmp[values.length + 1]=value;
        }
      }
 else {
        files.put(name,body);
      }
    }
  }
 catch (  MessagingException e) {
    e.printStackTrace();
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public MultipartWrapper(HttpServletRequest request) throws IOException, IllegalArgumentException {
  super(request);
  InputStreamDataSource ds=new InputStreamDataSource(request.getInputStream(),request.getContentType());
  try {
    multipart=new MimeMultipart(ds);
    params=new Hashtable(request.getParameterMap());
    int count=multipart.getCount();
    for (int i=0; i < count; i++) {
      MimeBodyPart body=(MimeBodyPart)multipart.getBodyPart(i);
      ContentDisposition disp=new ContentDisposition(body.getHeader(""String_Node_Str"",null));
      String name=disp.getParameter(""String_Node_Str"");
      if (body.getContentType().startsWith(""String_Node_Str"")) {
        String value=new String(((String)body.getContent()).getBytes(""String_Node_Str""),request.getCharacterEncoding());
        String[] values=(String[])params.get(name);
        if (null == values) {
          params.put(name,new String[]{value});
        }
 else {
          String[] tmp=new String[values.length + 1];
          System.arraycopy(values,0,tmp,0,values.length);
          tmp[tmp.length - 1]=value;
          params.put(name,tmp);
        }
      }
 else {
        files.put(name,body);
      }
    }
  }
 catch (  MessagingException e) {
    e.printStackTrace();
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.983505945531262
145801,"public static void insertData(AppConfiguration config,InputStream data){
  System.out.println(""String_Node_Str"");
  SnipSpace.removeInstance();
  UserManager.removeInstance();
  User admin=UserManager.getInstance().create(config.getAdminLogin(),config.getAdminPassword(),config.getAdminEmail());
  admin.getRoles().add(Roles.EDITOR);
  UserManager.getInstance().store(admin);
  Application app=Application.get();
  app.setUser(admin);
  System.out.println(""String_Node_Str"");
  SnipSpace space=SnipSpace.getInstance();
  try {
    XMLSnipImport.load(data,true);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
  space.post(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","public static void insertData(AppConfiguration config,InputStream data){
  System.out.println(""String_Node_Str"");
  SnipSpace.removeInstance();
  UserManager.removeInstance();
  User admin=UserManager.getInstance().authenticate(config.getAdminLogin(),config.getAdminPassword());
  Application app=Application.get();
  app.setUser(admin);
  System.out.println(""String_Node_Str"");
  SnipSpace space=SnipSpace.getInstance();
  try {
    XMLSnipImport.load(data,true);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
  space.post(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}",0.913728432108027
145802,"public String getXMLContent(){
  String tmp=null;
  try {
    tmp=toXML();
  }
 catch (  Exception e) {
    e.printStackTrace();
    tmp=""String_Node_Str"" + e + ""String_Node_Str"";
  }
catch (  Error err) {
    err.printStackTrace();
    tmp=""String_Node_Str"" + err + ""String_Node_Str"";
  }
  return tmp;
}","public String getXMLContent(){
  String tmp=null;
  try {
    tmp=toXML();
  }
 catch (  Exception e) {
    tmp=""String_Node_Str"" + e + ""String_Node_Str"";
    e.printStackTrace();
  }
catch (  Error err) {
    err.printStackTrace();
    tmp=""String_Node_Str"" + err + ""String_Node_Str"";
  }
  return tmp;
}",0.8327868852459016
145803,"public String filter(String input,Snip snip){
  String output=input;
  Iterator filterIterator=filterList.iterator();
  while (filterIterator.hasNext()) {
    Filter f=(Filter)filterIterator.next();
    String tmp=f.filter(output,snip);
    if (null == tmp) {
      System.err.println(""String_Node_Str"" + f);
    }
 else {
      output=tmp;
    }
  }
  return output;
}","public String filter(String input,Snip snip){
  String output=input;
  Iterator filterIterator=filterList.iterator();
  while (filterIterator.hasNext()) {
    Filter f=(Filter)filterIterator.next();
    try {
      String tmp=f.filter(output,snip);
      if (null == tmp) {
        System.err.println(""String_Node_Str"" + f);
      }
 else {
        output=tmp;
      }
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"" + f + ""String_Node_Str""+ e);
      e.printStackTrace();
    }
  }
  return output;
}",0.7861915367483296
145804,"public void handleMatch(StringBuffer buffer,MatchResult result,Snip snip){
  String command=result.group(1);
  Logger.log(""String_Node_Str"" + Application.get().getParameters());
  if (!command.startsWith(""String_Node_Str"")) {
    MacroParameter mParams=new MacroParameter();
    mParams.setSnip(snip);
    if (result.group(1).equals(result.group(result.groups() - 1))) {
      if (!""String_Node_Str"".equals(result.group(2))) {
        mParams.setParams(result.group(2));
      }
      mParams.setContent(result.group(3));
    }
 else {
      if (result.groups() > 1) {
        mParams.setParams(result.group(2));
      }
    }
    try {
      if (macros.containsKey(command)) {
        Macro macro=(Macro)macros.get(command);
        if (null != mParams.getContent()) {
          mParams.setContent(filter(mParams.getContent(),snip));
        }
        Writer writer=new StringBufferWriter(buffer);
        macro.execute(writer,mParams);
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        Snip includeSnip=SnipSpace.getInstance().load(command.substring(1));
        if (null != includeSnip) {
          String included=includeSnip.getContent();
          buffer.append(included);
        }
 else {
          buffer.append(command.substring(1) + ""String_Node_Str"");
        }
        return;
      }
 else {
        buffer.append(result.group(0));
        return;
      }
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"" + result.group(1));
      e.printStackTrace();
      buffer.append(""String_Node_Str"" + command + (result.length() > 1 ? ""String_Node_Str"" + result.group(2) : ""String_Node_Str"")+ ""String_Node_Str"");
      return;
    }
  }
 else {
    buffer.append(""String_Node_Str"");
    buffer.append(command.substring(1));
    buffer.append(""String_Node_Str"");
  }
}","public void handleMatch(StringBuffer buffer,MatchResult result,Snip snip){
  String command=result.group(1);
  Logger.log(""String_Node_Str"" + Application.get().getParameters());
  if (!command.startsWith(""String_Node_Str"")) {
    MacroParameter mParams=new MacroParameter();
    mParams.setSnip(snip);
    if (result.group(1).equals(result.group(result.groups() - 1))) {
      if (!""String_Node_Str"".equals(result.group(2))) {
        mParams.setParams(result.group(2));
      }
      mParams.setContent(result.group(3));
    }
 else {
      if (result.groups() > 1) {
        mParams.setParams(result.group(2));
      }
    }
    try {
      if (macros.containsKey(command)) {
        Macro macro=(Macro)macros.get(command);
        if (null != mParams.getContent()) {
          mParams.setContent(filter(mParams.getContent(),snip));
        }
        Writer writer=new StringBufferWriter(buffer);
        macro.execute(writer,mParams);
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        Snip includeSnip=SnipSpace.getInstance().load(command.substring(1));
        if (null != includeSnip) {
          String included=includeSnip.getContent();
          buffer.append(included);
        }
 else {
          buffer.append(command.substring(1) + ""String_Node_Str"");
        }
        return;
      }
 else {
        buffer.append(result.group(0));
        return;
      }
    }
 catch (    IllegalArgumentException e) {
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + result.group(1));
      buffer.append(""String_Node_Str"" + command + ""String_Node_Str"");
      e.printStackTrace();
      return;
    }
  }
 else {
    buffer.append(""String_Node_Str"");
    buffer.append(command.substring(1));
    buffer.append(""String_Node_Str"");
  }
}",0.8489092378130891
145805,"public String filter(String input,Snip snip){
  String result=input;
  int size=pattern.size();
  for (int i=0; i < size; i++) {
    Pattern p=(Pattern)pattern.get(i);
    String s=(String)substitute.get(i);
    try {
      result=Util.substitute(matcher,p,new Perl5Substitution(s,interps),result,limit);
    }
 catch (    Exception e) {
      Logger.log(""String_Node_Str"" + this + ""String_Node_Str""+ e);
      e.printStackTrace();
    }
catch (    Error err) {
      Logger.log(""String_Node_Str"" + this + ""String_Node_Str""+ err);
      err.printStackTrace();
    }
  }
  return result;
}","public String filter(String input,Snip snip){
  String result=input;
  int size=pattern.size();
  for (int i=0; i < size; i++) {
    Pattern p=(Pattern)pattern.get(i);
    String s=(String)substitute.get(i);
    try {
      result=Util.substitute(matcher,p,new Perl5Substitution(s,interps),result,limit);
    }
 catch (    Exception e) {
      Logger.log(""String_Node_Str"" + this + ""String_Node_Str""+ e);
      System.err.println(""String_Node_Str"" + this);
      e.printStackTrace();
    }
catch (    Error err) {
      Logger.log(""String_Node_Str"" + this + ""String_Node_Str""+ err);
      System.err.println(""String_Node_Str"" + this);
      err.printStackTrace();
    }
  }
  return result;
}",0.91875
145806,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  String name=""String_Node_Str"";
  Snip snip=SnipSpace.getInstance().load(name);
  request.setAttribute(""String_Node_Str"",snip);
  request.setAttribute(""String_Node_Str"",SnipSpace.getInstance());
  request.setAttribute(""String_Node_Str"",config);
  request.setAttribute(""String_Node_Str"",config.getUrl(""String_Node_Str""));
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}",0.5934343434343434
145807,"public int doStartTag() throws JspException {
  JspWriter out=pageContext.getOut();
  Links snipLinks=snip.getAccess().getSnipLinks();
  Iterator iterator=snipLinks.iterator();
  int size=snipLinks.getSize();
  int percentPerCell=100 / width;
  ColorRange cr=new ColorRange(start,end,Math.max(size <= 20 ? size : 20,8));
  try {
    int i=0;
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    while (iterator.hasNext() && i <= 20) {
      if (i % width == 0 && i != 0) {
        out.print(""String_Node_Str"");
      }
      String url=(String)iterator.next();
      out.print(""String_Node_Str"");
      out.print(cr.getColor(i++));
      out.print(""String_Node_Str"");
      out.print(percentPerCell);
      out.print(""String_Node_Str"");
      out.print(SnipLink.createLink(url,SnipLink.cutLength(url,25)));
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
  }
  return super.doStartTag();
}","public int doStartTag() throws JspException {
  JspWriter out=pageContext.getOut();
  Links snipLinks=snip.getAccess().getSnipLinks();
  Iterator iterator=snipLinks.iterator();
  int size=snipLinks.getSize();
  int percentPerCell=100 / width;
  ColorRange cr=new ColorRange(start,end,Math.max(size <= 20 ? size : 20,8));
  try {
    int i=0;
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    while (iterator.hasNext() && i < 20) {
      if (i % width == 0 && i != 0) {
        out.print(""String_Node_Str"");
      }
      String url=(String)iterator.next();
      out.print(""String_Node_Str"");
      out.print(cr.getColor(i++));
      out.print(""String_Node_Str"");
      out.print(percentPerCell);
      out.print(""String_Node_Str"");
      out.print(SnipLink.createLink(url,SnipLink.cutLength(url,25)));
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
  }
  return super.doStartTag();
}",0.9995271867612292
145808,"private void addList(StringBuffer buffer,BufferedReader reader) throws IOException {
  String lastBullet=null;
  String line=null;
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    String bullet=line.substring(0,1);
    if (!bullet.equals(lastBullet)) {
      if (lastBullet != null) {
        buffer.append(closeList.get(lastBullet)).append(""String_Node_Str"");
      }
      buffer.append(openList.get(bullet)).append(""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    buffer.append(line.substring(line.indexOf(' ') + 1));
    buffer.append(""String_Node_Str"");
    lastBullet=bullet;
  }
  buffer.append(closeList.get(lastBullet));
}","private void addList(StringBuffer buffer,BufferedReader reader) throws IOException {
  String lastBullet=null;
  String line=null;
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    String bullet=line.substring(0,1);
    Logger.log(""String_Node_Str"" + line + ""String_Node_Str"");
    Logger.log(""String_Node_Str"" + lastBullet + ""String_Node_Str""+ bullet+ ""String_Node_Str"");
    if (!bullet.equals(lastBullet)) {
      Logger.log(""String_Node_Str"");
      if (lastBullet != null) {
        buffer.append(closeList.get(lastBullet)).append(""String_Node_Str"");
      }
      buffer.append(openList.get(bullet)).append(""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    buffer.append(line.substring(line.indexOf(' ') + 1));
    buffer.append(""String_Node_Str"");
    lastBullet=bullet;
  }
  buffer.append(closeList.get(lastBullet));
}",0.8738621586475943
145809,"public int doStartTag() throws JspException {
  if (null != snip) {
    Map dublinCore=DublinCore.generate(snip);
    try {
      JspWriter out=pageContext.getOut();
      if (""String_Node_Str"".equals(format)) {
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(name);
          out.print(""String_Node_Str"");
          out.print(value);
          out.print(""String_Node_Str"");
          out.print(name);
          out.println(""String_Node_Str"");
        }
      }
 else {
        out.println(""String_Node_Str"");
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(name);
          out.print(""String_Node_Str"");
          out.print(value);
          out.println(""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  return super.doStartTag();
}","public int doStartTag() throws JspException {
  if (null != snip) {
    Map dublinCore=DublinCore.generate(snip);
    try {
      JspWriter out=pageContext.getOut();
      if (""String_Node_Str"".equals(format)) {
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(name.toLowerCase());
          out.print(""String_Node_Str"");
          out.print(value);
          out.print(""String_Node_Str"");
          out.print(name);
          out.println(""String_Node_Str"");
        }
      }
 else {
        out.println(""String_Node_Str"");
        Iterator iterator=dublinCore.keySet().iterator();
        while (iterator.hasNext()) {
          String name=(String)iterator.next();
          String value=(String)dublinCore.get(name);
          out.print(""String_Node_Str"");
          out.print(capitalize(name));
          out.print(""String_Node_Str"");
          out.print(value);
          out.println(""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  return super.doStartTag();
}",0.989549839228296
145810,"/** 
 * Get user from session or cookie.
 */
public User getUser(HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession(true);
  User user=(User)session.getAttribute(ATT_USER);
  if (null == user) {
    Cookie cookie=getCookie(request,COOKIE_NAME);
    if (cookie != null) {
      String auth=cookie.getValue();
      if (!authHash.containsKey(auth)) {
        updateAuthHash();
      }
      user=(User)authHash.get(auth);
      if (user != null) {
        user=authenticate(user.getLogin(),user.getPasswd());
        setCookie(request,response,user);
      }
 else {
        System.err.println(""String_Node_Str"" + auth);
      }
    }
    if (null == user) {
      String agent=request.getHeader(""String_Node_Str"");
      System.err.println(""String_Node_Str"" + agent + ""String_Node_Str"");
      Iterator it=robots.keySet().iterator();
      while (agent != null && user == null && it.hasNext()) {
        String key=(String)it.next();
        if (agent.toLowerCase().indexOf(key.toLowerCase()) != -1) {
          user=(User)robots.get(key);
          if (null == user) {
            user=new User(key,key,(String)robotIds.get(key));
            user.setNonUser(true);
            robots.put(key,user);
          }
        }
      }
      if (null == user) {
        user=new User(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        user.setGuest(true);
      }
      removeCookie(request,response);
    }
    session.setAttribute(ATT_USER,user);
  }
  return user;
}","/** 
 * Get user from session or cookie.
 */
public User getUser(HttpServletRequest request,HttpServletResponse response){
  HttpSession session=request.getSession(true);
  User user=(User)session.getAttribute(ATT_USER);
  if (null == user) {
    Cookie cookie=getCookie(request,COOKIE_NAME);
    if (cookie != null) {
      String auth=cookie.getValue();
      if (!authHash.containsKey(auth)) {
        updateAuthHash();
      }
      user=(User)authHash.get(auth);
      if (user != null) {
        user=authenticate(user.getLogin(),user.getPasswd());
        setCookie(request,response,user);
      }
 else {
        System.err.println(""String_Node_Str"" + auth);
      }
    }
    if (null == user) {
      String agent=request.getHeader(""String_Node_Str"");
      System.err.println(""String_Node_Str"" + agent + ""String_Node_Str"");
      Iterator it=robotIds.keySet().iterator();
      while (agent != null && user == null && it.hasNext()) {
        String key=(String)it.next();
        if (agent.toLowerCase().indexOf(key.toLowerCase()) != -1) {
          user=(User)robots.get(key);
          if (null == user) {
            user=new User(key,key,(String)robotIds.get(key));
            user.setNonUser(true);
            robots.put(key,user);
          }
          break;
        }
      }
      if (user != null) {
        System.err.println(""String_Node_Str"" + user);
      }
 else {
        user=new User(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        user.setGuest(true);
      }
      removeCookie(request,response);
    }
    session.setAttribute(ATT_USER,user);
  }
  return user;
}",0.9633407714376792
145811,"public Snip post(Snip weblog,String content,Date date){
  String name=Snip.toName(date);
  Snip snip=null;
  if (exists(name)) {
    snip=load(name);
    snip.setContent(snip.getContent() + ""String_Node_Str"" + content);
  }
 else {
    snip=create(name,content);
  }
  snip.setParent(weblog);
  snip.addPermission(Permissions.EDIT,Roles.OWNER);
  store(snip);
  WeblogsPing.ping();
  return snip;
}","public Snip post(Snip weblog,String content,Date date){
  String name=Snip.toName(date);
  Snip snip=null;
  if (exists(name)) {
    snip=load(name);
    snip.setContent(snip.getContent() + ""String_Node_Str"" + content);
  }
 else {
    snip=create(name,content);
  }
  snip.setParent(weblog);
  snip.addPermission(Permissions.EDIT,Roles.OWNER);
  store(snip);
  WeblogsPing.ping(snip);
  return snip;
}",0.995
145812,"public static void ping(){
  try {
    AppConfiguration config=Application.get().getConfiguration();
    if (config.allow(AppConfiguration.PERM_WEBLOGS_PING)) {
      XmlRpcClient xmlrpc=new XmlRpcClient(""String_Node_Str"");
      Vector params=new Vector();
      params.addElement(config.getName());
      params.addElement(config.getUrl());
      xmlrpc.execute(""String_Node_Str"",params);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
}","public static void ping(Snip weblog){
  try {
    AppConfiguration config=Application.get().getConfiguration();
    if (config.allow(AppConfiguration.PERM_WEBLOGS_PING)) {
      XmlRpcClient xmlrpc=new XmlRpcClient(""String_Node_Str"");
      Vector params=new Vector();
      params.addElement(config.getName());
      params.addElement(config.getSnipUrl(weblog.getName()));
      xmlrpc.execute(""String_Node_Str"",params);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
}",0.968335035750766
145813,"public void run(){
}","public void run(){
  try {
    if (config.allow(AppConfiguration.PERM_WEBLOGS_PING)) {
      XmlRpcClient weblogs_com=new XmlRpcClient(""String_Node_Str"");
      Vector params=new Vector();
      params.addElement(config.getName());
      params.addElement(config.getSnipUrl(weblog.getName()));
      Object result=weblogs_com.execute(""String_Node_Str"",params);
      XmlRpcClient blo_gs=new XmlRpcClient(""String_Node_Str"");
      params.clear();
      params.addElement(config.getName());
      params.addElement(config.getUrl());
      params.addElement(config.getSnipUrl(weblog.getName()));
      params.addElement(config.getUrl() + ""String_Node_Str"");
      result=weblogs_com.execute(""String_Node_Str"",params);
      XmlRpcClient home=new XmlRpcClient(""String_Node_Str"");
      params.clear();
      params.addElement(config.getName());
      params.addElement(config.getSnipUrl(weblog.getName()));
      result=home.execute(""String_Node_Str"",params);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
  }
}",0.037629350893697
145814,"public static void ping(Snip weblog){
  try {
    AppConfiguration config=Application.get().getConfiguration();
    if (config.allow(AppConfiguration.PERM_WEBLOGS_PING)) {
      XmlRpcClient xmlrpc=new XmlRpcClient(""String_Node_Str"");
      Vector params=new Vector();
      params.addElement(config.getName());
      params.addElement(config.getSnipUrl(weblog.getName()));
      xmlrpc.execute(""String_Node_Str"",params);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
}","public static void ping(Snip weblog){
  try {
    AppConfiguration config=Application.get().getConfiguration();
    if (config.allow(AppConfiguration.PERM_WEBLOGS_PING)) {
      XmlRpcClient xmlrpc=new XmlRpcClient(""String_Node_Str"");
      Vector params=new Vector();
      params.addElement(config.getName());
      params.addElement(config.getSnipUrl(weblog.getName()));
      Object result=xmlrpc.execute(""String_Node_Str"",params);
      System.err.println(""String_Node_Str"" + result);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
}",0.9369202226345084
145815,"/** 
 * Update a user, check validity and equality of the input.
 */
private boolean update(HttpServletRequest request,Map errors,User user){
  String email=request.getParameter(""String_Node_Str"");
  String nPass=request.getParameter(""String_Node_Str"");
  String nPass2=request.getParameter(""String_Node_Str"");
  String status=request.getParameter(""String_Node_Str"");
  String roles[]=request.getParameterValues(""String_Node_Str"");
  boolean modified=false;
  if (!user.getEmail().equals(email)) {
    modified=true;
    user.setEmail(email);
  }
  if (!user.getStatus().equals(status)) {
    modified=true;
    user.setStatus(status);
  }
  Roles newRoles=new Roles(parseRoles(roles));
  if (!user.getRoles().equals(newRoles)) {
    if (!newRoles.getRoleSet().isEmpty() && !Roles.allRoles().containsAll(newRoles.getRoleSet())) {
      errors.put(""String_Node_Str"",ERR_UNKNOWN_ROLES + Roles.allRoles());
    }
 else {
      modified=true;
      user.setRoles(newRoles);
    }
  }
  if (nPass != null && nPass.length() > 0) {
    if (nPass.equals(nPass2)) {
      modified=true;
      user.setPasswd(nPass);
    }
 else {
      errors.put(""String_Node_Str"",ERR_WRONG_PASSWORD);
    }
  }
  return modified;
}","/** 
 * Update a user, check validity and equality of the input.
 */
private boolean update(HttpServletRequest request,Map errors,User user){
  String email=request.getParameter(""String_Node_Str"");
  String nPass=request.getParameter(""String_Node_Str"");
  String nPass2=request.getParameter(""String_Node_Str"");
  String status=request.getParameter(""String_Node_Str"");
  String roles[]=request.getParameterValues(""String_Node_Str"");
  boolean modified=false;
  if ((user.getEmail() == null && email != null) || (user.getEmail() != null && !user.getEmail().equals(email))) {
    modified=true;
    user.setEmail(email);
  }
  if ((user.getStatus() == null && status != null) || (user.getStatus() != null && !user.getStatus().equals(status))) {
    modified=true;
    user.setStatus(status);
  }
  Roles newRoles=new Roles(parseRoles(roles));
  if (!user.getRoles().equals(newRoles)) {
    if (!newRoles.getRoleSet().isEmpty() && !Roles.allRoles().containsAll(newRoles.getRoleSet())) {
      errors.put(""String_Node_Str"",ERR_UNKNOWN_ROLES + Roles.allRoles());
    }
 else {
      modified=true;
      user.setRoles(newRoles);
    }
  }
  if (nPass != null && nPass.length() > 0) {
    if (nPass.equals(nPass2)) {
      modified=true;
      user.setPasswd(nPass);
    }
 else {
      errors.put(""String_Node_Str"",ERR_WRONG_PASSWORD);
    }
  }
  return modified;
}",0.9403973509933776
145816,"public WeblogsPing(AppConfiguration configuration,Snip weblog){
  this.config=configuration;
  this.weblog=weblog;
  start();
}","public WeblogsPing(AppConfiguration configuration,Snip weblog){
  this.config=configuration;
  this.weblog=weblog;
}",0.9547325102880658
145817,"public Snip post(Snip weblog,String content,Date date){
  String name=Snip.toName(date);
  Snip snip=null;
  if (exists(name)) {
    snip=load(name);
    snip.setContent(snip.getContent() + ""String_Node_Str"" + content);
  }
 else {
    snip=create(name,content);
  }
  snip.setParent(weblog);
  snip.addPermission(Permissions.EDIT,Roles.OWNER);
  store(snip);
  WeblogsPing.ping(snip);
  return snip;
}","public Snip post(Snip weblog,String content,Date date){
  String name=Snip.toName(date);
  Snip snip=null;
  if (exists(name)) {
    snip=load(name);
    snip.setContent(snip.getContent() + ""String_Node_Str"" + content);
  }
 else {
    snip=create(name,content);
  }
  snip.setParent(weblog);
  snip.addPermission(Permissions.EDIT,Roles.OWNER);
  store(snip);
  WeblogsPing.ping(weblog);
  return snip;
}",0.9875930521091812
145818,"public static void ping(Snip weblog){
  try {
    AppConfiguration config=Application.get().getConfiguration();
    if (config.allow(AppConfiguration.PERM_WEBLOGS_PING)) {
      XmlRpcClient xmlrpc=new XmlRpcClient(""String_Node_Str"");
      Vector params=new Vector();
      params.addElement(config.getName());
      params.addElement(config.getSnipUrl(weblog.getName()));
      Object result=xmlrpc.execute(""String_Node_Str"",params);
      System.err.println(""String_Node_Str"" + result);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
}","public static void ping(Snip weblog){
  new WeblogsPing(Application.get().getConfiguration(),weblog).start();
}",0.2748538011695906
145819,"public boolean allowExternalImages(){
  return allow(AppConfiguration.PERM_WEBLOGS_PING);
}","public boolean allowExternalImages(){
  return allow(AppConfiguration.PERM_EXTERNAL_IMAGES);
}",0.8972972972972973
145820,"public int doStartTag() throws JspException {
  try {
    name=(String)ExpressionEvaluatorManager.evaluate(""String_Node_Str"",name,String.class,this,pageContext);
    if (alt != null) {
      alt=(String)ExpressionEvaluatorManager.evaluate(""String_Node_Str"",alt,String.class,this,pageContext);
    }
    if (ext != null) {
      ext=(String)ExpressionEvaluatorManager.evaluate(""String_Node_Str"",alt,String.class,this,pageContext);
    }
  }
 catch (  JspException e) {
    System.err.println(""String_Node_Str"" + e);
  }
  JspWriter out=pageContext.getOut();
  try {
    out.print(SnipLink.createImage(name,alt != null ? alt : name,ext != null ? ext : ""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + name);
  }
  return SKIP_BODY;
}","public int doStartTag() throws JspException {
  try {
    name=(String)ExpressionEvaluatorManager.evaluate(""String_Node_Str"",name,String.class,this,pageContext);
    if (alt != null) {
      alt=(String)ExpressionEvaluatorManager.evaluate(""String_Node_Str"",alt,String.class,this,pageContext);
    }
    if (ext != null) {
      ext=(String)ExpressionEvaluatorManager.evaluate(""String_Node_Str"",ext,String.class,this,pageContext);
    }
  }
 catch (  JspException e) {
    System.err.println(""String_Node_Str"" + e);
  }
  JspWriter out=pageContext.getOut();
  try {
    out.print(SnipLink.createImage(name,alt != null ? alt : name,ext != null ? ext : ""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + name);
  }
  return SKIP_BODY;
}",0.9974259974259976
145821,"public void handle(HttpServletRequest request){
  incViewCount();
  String referrer=request.getHeader(""String_Node_Str"");
  if (null != referrer) {
    String domain=Application.get().getConfiguration().getDomain();
    if (referrer.startsWith(domain)) {
      int index=referrer.indexOf(""String_Node_Str"");
      if (index != -1) {
        String url=referrer.substring(index + ""String_Node_Str"".length());
        index=url.indexOf(""String_Node_Str"");
        if (index != -1) {
          url=url.substring(0,index);
        }
        index=url.indexOf(""String_Node_Str"");
        if (index != -1) {
          url=url.substring(0,index);
        }
        snipLinks.addLink(SnipLink.decode(url));
      }
    }
 else {
      backLinks.addLink(SnipLink.decode(referrer));
    }
  }
  store();
}","public void handle(HttpServletRequest request){
  incViewCount();
  String referrer=request.getHeader(""String_Node_Str"");
  if (null != referrer) {
    String domain=Application.get().getConfiguration().getDomain();
    if (referrer.startsWith(domain)) {
      int index=referrer.indexOf(""String_Node_Str"");
      if (index != -1) {
        String url=referrer.substring(index + ""String_Node_Str"".length());
        index=url.indexOf(""String_Node_Str"");
        if (index != -1) {
          url=url.substring(0,index);
        }
        index=url.indexOf(""String_Node_Str"");
        if (index != -1) {
          url=url.substring(0,index);
        }
        String name=SnipLink.decode(url);
        if (!""String_Node_Str"".equals(name) && !snip.getName().equals(name)) {
          snipLinks.addLink(SnipLink.decode(url));
        }
      }
    }
 else {
      backLinks.addLink(SnipLink.decode(referrer));
    }
  }
  store();
}",0.9088798607080674
145822,"public void execute(StringBuffer buffer,String[] params,String content,Snip snip) throws IllegalArgumentException {
  buffer.append(""String_Node_Str"");
  buffer.append(content);
  if (null != params && params.length == 1) {
    buffer.append(params[0]);
  }
  buffer.append(""String_Node_Str"");
  buffer.append(""String_Node_Str"");
  return;
}","public void execute(StringBuffer buffer,String[] params,String content,Snip snip) throws IllegalArgumentException {
  buffer.append(""String_Node_Str"");
  buffer.append(content);
  if (null != params && params.length == 1) {
    buffer.append(params[0]);
  }
  buffer.append(""String_Node_Str"");
  return;
}",0.9442724458204336
145823,"public void handle(HttpServletRequest request){
  incViewCount();
  String referrer=request.getHeader(""String_Node_Str"");
  if (null != referrer) {
    int index=referrer.indexOf(""String_Node_Str"");
    if (index != -1) {
      String url=referrer.substring(index + ""String_Node_Str"".length());
      index=url.indexOf(""String_Node_Str"");
      if (index != -1) {
        url=url.substring(0,index);
      }
      snipLinks.addLink(SnipLink.decode(url));
    }
 else {
      backLinks.addLink(SnipLink.decode(referrer));
    }
  }
  store();
}","public void handle(HttpServletRequest request){
  incViewCount();
  String referrer=request.getHeader(""String_Node_Str"");
  if (null != referrer) {
    String domain=Application.get().getConfiguration().getDomain();
    if (referrer.startsWith(domain)) {
      int index=referrer.indexOf(""String_Node_Str"");
      if (index != -1) {
        String url=referrer.substring(index + ""String_Node_Str"".length());
        index=url.indexOf(""String_Node_Str"");
        if (index != -1) {
          url=url.substring(0,index);
        }
        index=url.indexOf(""String_Node_Str"");
        if (index != -1) {
          url=url.substring(0,index);
        }
        snipLinks.addLink(SnipLink.decode(url));
      }
    }
 else {
      backLinks.addLink(SnipLink.decode(referrer));
    }
  }
  store();
}",0.8116591928251121
145824,"private static void toXml(String objectName,ResultSet results,PrintWriter out) throws SQLException {
  ResultSetMetaData meta=results.getMetaData();
  int size=meta.getColumnCount();
  while (results.next()) {
    out.println(""String_Node_Str"" + objectName + ""String_Node_Str"");
    for (int i=1; i <= size; i++) {
      Object object=null;
      String value=null;
      try {
        value=results.getString(i);
      }
 catch (      Exception e) {
        object=results.getObject(i);
      }
      String name=meta.getColumnName(i);
      if (null != value || null != object) {
        out.print(""String_Node_Str"" + name + ""String_Node_Str"");
        if (object instanceof Timestamp) {
          Timestamp time=(Timestamp)object;
          out.print(time.getTime());
        }
 else {
          out.print(value);
        }
        out.println(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    out.println(""String_Node_Str"" + objectName + ""String_Node_Str"");
  }
}","private static void toXml(String objectName,ResultSet results,PrintWriter out) throws SQLException {
  ResultSetMetaData meta=results.getMetaData();
  int size=meta.getColumnCount();
  while (results.next()) {
    out.println(""String_Node_Str"" + objectName + ""String_Node_Str"");
    for (int i=1; i <= size; i++) {
      Object object=null;
      String value=null;
      try {
        value=results.getString(i);
      }
 catch (      Exception e) {
        object=results.getObject(i);
      }
      String name=meta.getColumnName(i);
      if (null != value || null != object) {
        out.print(""String_Node_Str"" + name + ""String_Node_Str"");
        if (object instanceof Timestamp) {
          Timestamp time=(Timestamp)object;
          out.print(time.getTime());
        }
 else {
          out.print(escape(value));
        }
        out.println(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    out.println(""String_Node_Str"" + objectName + ""String_Node_Str"");
  }
}",0.995943204868154
145825,"public static Application getInstance(HttpSession session){
  if (session != null) {
    Application application=(Application)session.getAttribute(""String_Node_Str"");
    if (null == application) {
      application=Application.get();
    }
    instance.set(application);
    return application;
  }
  return null;
}","public static Application getInstance(HttpSession session){
  if (session != null) {
    Application application=(Application)session.getAttribute(""String_Node_Str"");
    if (null == application) {
      application=new Application();
    }
    instance.set(application);
    return application;
  }
  return null;
}",0.7088607594936709
145826,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  HttpSession session=request.getSession(true);
  Application app=Application.getInstance(session);
  User user=app.getUser();
  if (user == null) {
    user=UserManager.getInstance().getUser(request);
  }
  Cookie cookie=UserManager.getInstance().getCookie(request,""String_Node_Str"");
  if (null == cookie) {
    cookie=new Cookie(""String_Node_Str"",user.getLogin());
  }
  cookie.setPath(request.getContextPath());
  cookie.setMaxAge(Integer.MAX_VALUE - 2);
  response.addCookie(cookie);
  app.setUser(user);
  session.setAttribute(""String_Node_Str"",app);
  session.setAttribute(""String_Node_Str"",SnipSpace.getInstance());
  String layout=URLDecoder.decode(request.getPathInfo());
  if (null == layout || ""String_Node_Str"".equals(layout)) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  request.setAttribute(""String_Node_Str"",layout);
  RequestDispatcher dispatcher=null;
  if (layout.endsWith(""String_Node_Str"")) {
    dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  }
 else {
    dispatcher=request.getRequestDispatcher(layout);
  }
  if (dispatcher != null) {
    dispatcher.forward(request,response);
  }
 else {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
  }
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  HttpSession session=request.getSession(true);
  Application app=Application.getInstance(session);
  User user=app.getUser();
  if (user == null) {
    user=UserManager.getInstance().getUser(request);
  }
  Cookie cookie=UserManager.getInstance().getCookie(request,""String_Node_Str"");
  if (null == cookie) {
    cookie=new Cookie(""String_Node_Str"",user.getLogin());
  }
  cookie.setPath(request.getContextPath());
  cookie.setMaxAge(Integer.MAX_VALUE - 2);
  response.addCookie(cookie);
  app.setUser(user);
  session.setAttribute(""String_Node_Str"",app);
  session.setAttribute(""String_Node_Str"",SnipSpace.getInstance());
  String layout=URLDecoder.decode(request.getPathInfo());
  if (null == layout || ""String_Node_Str"".equals(layout)) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  request.setAttribute(""String_Node_Str"",layout);
  RequestDispatcher dispatcher=null;
  if (layout.endsWith(""String_Node_Str"")) {
    dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  }
 else {
    dispatcher=request.getRequestDispatcher(layout);
  }
  if (dispatcher != null) {
    dispatcher.forward(request,response);
    Application.set(null);
  }
 else {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
  }
}",0.9902912621359224
145827,"public void handleMatch(StringBuffer buffer,MatchResult result,Snip snip){
  String[] params=null;
  String content=null;
  String command=result.group(1);
  if (result.group(1).equals(result.group(result.groups() - 1))) {
    if (!""String_Node_Str"".equals(result.group(2))) {
      params=split(result.group(2),""String_Node_Str"");
    }
    content=result.group(3);
  }
 else {
    if (result.groups() > 1) {
      params=split(result.group(2),""String_Node_Str"");
    }
  }
  try {
    if (macros.containsKey(command)) {
      Macro macro=(Macro)macros.get(command);
      if (null != content) {
        content=filter(content,snip);
      }
      macro.execute(buffer,params,content,snip);
    }
 else     if (command.startsWith(""String_Node_Str"")) {
      return;
    }
 else {
      buffer.append(result.group(0));
      return;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + result.group(1));
    e.printStackTrace();
    buffer.append(""String_Node_Str"" + result.group(1) + (result.length() > 1 ? ""String_Node_Str"" + result.group(2) : ""String_Node_Str"")+ ""String_Node_Str"");
    return;
  }
}","public void handleMatch(StringBuffer buffer,MatchResult result,Snip snip){
  String[] params=null;
  String content=null;
  String command=result.group(1);
  if (result.group(1).equals(result.group(result.groups() - 1))) {
    if (!""String_Node_Str"".equals(result.group(2))) {
      params=split(result.group(2),""String_Node_Str"");
    }
    content=result.group(3);
  }
 else {
    if (result.groups() > 1) {
      params=split(result.group(2),""String_Node_Str"");
    }
  }
  try {
    if (macros.containsKey(command)) {
      Macro macro=(Macro)macros.get(command);
      if (null != content) {
        content=filter(content,snip);
      }
      macro.execute(buffer,params,content,snip);
    }
 else     if (command.startsWith(""String_Node_Str"")) {
      Snip includeSnip=SnipSpace.getInstance().load(command.substring(1));
      buffer.append(includeSnip.getContent());
      return;
    }
 else {
      buffer.append(result.group(0));
      return;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + result.group(1));
    e.printStackTrace();
    buffer.append(""String_Node_Str"" + command + (result.length() > 1 ? ""String_Node_Str"" + result.group(2) : ""String_Node_Str"")+ ""String_Node_Str"");
    return;
  }
}",0.8886075949367088
145828,"/** 
 * Generate a pretty print of the difference between the timestamp and now. e.g. show minutes, minutes and hours and days since now. ""3 hours, 5 minutes ago."", ""4 days ago.""
 * @param time Timestamp to pretty print
 * @return Pretty string
 */
public static String getNiceTime(Timestamp time){
  if (time == null)   return ""String_Node_Str"";
  java.util.Date now=new java.util.Date();
  int secs=(int)(now.getTime() - time.getTime()) / 1000;
  int mins=secs / 60;
  int min=mins % 60;
  int hours=mins / 60;
  int hour=hours % 24;
  int days=hours / 24;
  StringBuffer nice=new StringBuffer();
  if (mins == 0) {
    nice.append(""String_Node_Str"");
  }
 else   if (hours == 0) {
    StringUtil.plural(nice,min,""String_Node_Str"");
    nice.append(""String_Node_Str"");
  }
 else   if (days == 0) {
    StringUtil.plural(nice,hour,""String_Node_Str"");
    nice.append(""String_Node_Str"");
    StringUtil.plural(nice,min,""String_Node_Str"");
    nice.append(""String_Node_Str"");
  }
 else {
    StringUtil.plural(nice,days,""String_Node_Str"");
    nice.append(""String_Node_Str"");
  }
  return nice.toString();
}","/** 
 * Generate a pretty print of the difference between the timestamp and now. e.g. show minutes, minutes and hours and days since now. ""3 hours, 5 minutes ago."", ""4 days ago.""
 * @param time Timestamp to pretty print
 * @return Pretty string
 */
public static String getNiceTime(Timestamp time){
  if (time == null)   return ""String_Node_Str"";
  java.util.Date now=new java.util.Date();
  long secs=(now.getTime() - time.getTime()) / 1000;
  long mins=secs / 60;
  int min=(int)mins % 60;
  long hours=mins / 60;
  int hour=(int)hours % 24;
  int days=(int)hours / 24;
  StringBuffer nice=new StringBuffer();
  if (mins == 0) {
    nice.append(""String_Node_Str"");
  }
 else   if (hours == 0) {
    StringUtil.plural(nice,min,""String_Node_Str"");
    nice.append(""String_Node_Str"");
  }
 else   if (days == 0) {
    StringUtil.plural(nice,hour,""String_Node_Str"");
    nice.append(""String_Node_Str"");
    StringUtil.plural(nice,min,""String_Node_Str"");
    nice.append(""String_Node_Str"");
  }
 else {
    StringUtil.plural(nice,days,""String_Node_Str"");
    nice.append(""String_Node_Str"");
  }
  return nice.toString();
}",0.9761797752808988
145829,"public static Document Document(Snip snip){
  Document doc=new Document();
  doc.add(Field.Text(""String_Node_Str"",snip.getContent()));
  doc.add(Field.Text(""String_Node_Str"",snip.getName()));
  return doc;
}","public static Document Document(Snip snip){
  Document doc=new Document();
  doc.add(Field.Text(""String_Node_Str"",snip.getName().hashCode() + ""String_Node_Str""));
  doc.add(Field.Text(""String_Node_Str"",snip.getContent()));
  doc.add(Field.Text(""String_Node_Str"",snip.getName()));
  return doc;
}",0.796812749003984
145830,"public Hits search(String queryString){
  Searcher searcher=null;
  try {
    searcher=new IndexSearcher(indexFile);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + indexFile);
  }
  Query query=null;
  try {
    query=QueryParser.parse(queryString,""String_Node_Str"",new StopAnalyzer());
  }
 catch (  org.apache.lucene.queryParser.ParseException e1) {
    close(searcher);
    System.out.println(""String_Node_Str"" + queryString);
  }
  Hits hits=null;
  try {
    hits=searcher.search(query);
  }
 catch (  IOException e) {
    close(searcher);
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return hits;
}","public Hits search(String queryString){
  Searcher searcher=null;
  try {
    searcher=new IndexSearcher(indexFile);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + indexFile);
    e.printStackTrace();
  }
  Query query=null;
  try {
    query=QueryParser.parse(queryString,""String_Node_Str"",new SnipAnalyzer());
  }
 catch (  org.apache.lucene.queryParser.ParseException e1) {
    close(searcher);
    System.out.println(""String_Node_Str"" + queryString);
  }
  Hits hits=null;
  try {
    hits=searcher.search(query);
  }
 catch (  IOException e) {
    close(searcher);
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return hits;
}",0.9784386617100372
145831,"public void removeIndex(Snip snip){
  try {
    IndexReader reader=IndexReader.open(indexFile);
    reader.delete(new Term(""String_Node_Str"",snip.getName()));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + snip.getName() + ""String_Node_Str"");
  }
  return;
}","public void removeIndex(Snip snip){
  IndexReader reader=null;
  try {
    reader=IndexReader.open(indexFile);
    System.err.println(""String_Node_Str"" + reader.delete(new Term(""String_Node_Str"",snip.getName().hashCode() + ""String_Node_Str"")));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + snip.getName() + ""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    close(reader);
  }
  return;
}",0.7692307692307693
145832,"public void index(Snip snip){
  IndexWriter writer=null;
  try {
    File f;
    boolean create=true;
    if ((f=new File(indexFile)).exists() && f.isDirectory()) {
      create=false;
    }
 else {
      create=true;
    }
    writer=new IndexWriter(indexFile,new StopAnalyzer(),create);
    writer.mergeFactor=20;
    writer.addDocument(SnipDocument.Document(snip));
    writer.optimize();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
 finally {
    close(writer);
  }
}","private void index(Snip snip,boolean exists){
  IndexWriter writer=null;
  if (exists) {
    removeIndex(snip);
  }
  try {
    File f;
    boolean create=true;
    if ((f=new File(indexFile)).exists() && f.isDirectory()) {
      create=false;
    }
 else {
      create=true;
    }
    writer=new IndexWriter(indexFile,new SnipAnalyzer(),create);
    writer.mergeFactor=20;
    writer.addDocument(SnipDocument.Document(snip));
    writer.optimize();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    close(writer);
  }
}",0.8318098720292505
145833,"private static void close(Searcher searcher){
  if (null != searcher) {
    try {
      searcher.close();
    }
 catch (    Exception e) {
    }
  }
}","private static void close(IndexReader reader){
  if (null != reader) {
    try {
      reader.close();
    }
 catch (    Exception e) {
    }
  }
}",0.9023569023569024
145834,"public void store(Snip snip){
  changed.add(snip);
  snip.setMTime(new Timestamp(new java.util.Date().getTime()));
  storageStore(snip);
  indexer.index(snip);
  return;
}","public void store(Snip snip){
  changed.add(snip);
  snip.setMTime(new Timestamp(new java.util.Date().getTime()));
  storageStore(snip);
  indexer.reIndex(snip);
  return;
}",0.9883720930232558
145835,"private String[] split(String s,String delim){
  StringTokenizer tok=new StringTokenizer(s,delim,false);
  List list=new ArrayList();
  while (tok.hasMoreTokens()) {
    list.add(tok.nextToken());
  }
  return (String[])list.toArray();
}","private String[] split(String s,String delim){
  StringTokenizer tok=new StringTokenizer(s,delim,false);
  List list=new ArrayList();
  while (tok.hasMoreTokens()) {
    list.add(tok.nextToken());
  }
  String tmp[]=new String[list.size()];
  tmp=(String[])list.toArray(tmp);
  return tmp;
}",0.8068181818181818
145836,"private void storageStore(User user){
  PreparedStatement statement=null;
  Connection connection=ConnectionManager.getConnection();
  try {
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setString(1,user.getLogin());
    statement.setString(2,user.getPasswd());
    statement.setString(3,user.getEmail());
    statement.setString(3,user.getStatus());
    statement.setString(4,serialize(user.getRoles()));
    statement.execute();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return;
}","private void storageStore(User user){
  PreparedStatement statement=null;
  Connection connection=ConnectionManager.getConnection();
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    statement.setString(1,user.getLogin());
    statement.setString(2,user.getPasswd());
    statement.setString(3,user.getEmail());
    statement.setString(4,user.getStatus());
    statement.setString(5,serialize(user.getRoles()));
    statement.setString(6,user.getLogin());
    statement.execute();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return;
}",0.8835098335854765
145837,"public String execute(String[] params,String content,Snip snip) throws IllegalArgumentException {
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  if (params.length == 2) {
    buffer.append(""String_Node_Str"").append(params[1]).append(""String_Node_Str"");
  }
 else   if (params.length == 1) {
    buffer.append(""String_Node_Str"").append(params[0]).append(""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (buffer.append(params[0]).append(""String_Node_Str"")).toString();
}","public String execute(String[] params,String content,Snip snip) throws IllegalArgumentException {
  StringBuffer buffer=new StringBuffer();
  if (params.length == 2) {
    buffer.append(""String_Node_Str"");
    buffer.append(""String_Node_Str"").append(params[1]).append(""String_Node_Str"");
    buffer.append(params[0]).append(""String_Node_Str"");
  }
 else   if (params.length == 1) {
    buffer.append(append(params[0]));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return buffer.toString();
}",0.7333333333333333
145838,"public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  String name=request.getParameter(""String_Node_Str"");
  if (null == name) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  Snip snip=SnipSpace.getInstance().load(name);
  request.setAttribute(""String_Node_Str"",snip);
  request.setAttribute(""String_Node_Str"",name);
  RequestDispatcher dispatcher=request.getRequestDispatcher(SnipLink.absoluteLink(request,""String_Node_Str""));
  dispatcher.forward(request,response);
}","public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  String name=request.getParameter(""String_Node_Str"");
  if (null == name) {
    response.sendRedirect(SnipLink.absoluteLink(request,""String_Node_Str""));
    return;
  }
  Snip snip=SnipSpace.getInstance().load(name);
  request.setAttribute(""String_Node_Str"",snip);
  request.setAttribute(""String_Node_Str"",name);
  RequestDispatcher dispatcher=request.getRequestDispatcher(""String_Node_Str"");
  dispatcher.forward(request,response);
}",0.9016829052258636
145839,"public String execute(String[] params,String content,Snip snip) throws IllegalArgumentException {
  StringBuffer buffer=new StringBuffer();
  if (params.length == 2) {
    buffer.append(""String_Node_Str"");
    SnipLink.appendImage(buffer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    buffer.append(""String_Node_Str"").append(params[1]).append(""String_Node_Str"");
    buffer.append(params[0]).append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
  }
 else   if (params.length == 1) {
    buffer.append(params[0]);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return buffer.toString();
}","public String execute(String[] params,String content,Snip snip) throws IllegalArgumentException {
  StringBuffer buffer=new StringBuffer();
  if (params.length == 2) {
    buffer.append(""String_Node_Str"");
    buffer.append(img);
    buffer.append(""String_Node_Str"").append(params[1]).append(""String_Node_Str"");
    buffer.append(params[0]).append(""String_Node_Str"");
    buffer.append(""String_Node_Str"");
  }
 else   if (params.length == 1) {
    buffer.append(params[0]);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return buffer.toString();
}",0.919672131147541
145840,"public Snip createSnip(ResultSet result) throws SQLException {
  String name=result.getString(""String_Node_Str"");
  String content=result.getString(""String_Node_Str"");
  Snip snip=new Snip(name,content);
  snip.setCTime(result.getTimestamp(""String_Node_Str""));
  snip.setMTime(result.getTimestamp(""String_Node_Str""));
  snip.setCUser(result.getString(""String_Node_Str""));
  snip.setMUser(result.getString(""String_Node_Str""));
  String commentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.setComment(load(commentString));
  }
  String parentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.parent=load(parentString);
  }
  return snip;
}","public Snip createSnip(ResultSet result) throws SQLException {
  String name=result.getString(""String_Node_Str"");
  String content=result.getString(""String_Node_Str"");
  Snip snip=new Snip(name,content);
  snip.setCTime(result.getTimestamp(""String_Node_Str""));
  snip.setMTime(result.getTimestamp(""String_Node_Str""));
  snip.setCUser(result.getString(""String_Node_Str""));
  snip.setMUser(result.getString(""String_Node_Str""));
  String commentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.setComment(load(commentString));
  }
  String parentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.parent=load(parentString);
  }
  snip.setPermissions(deserialize(result.getString(""String_Node_Str"")));
  return snip;
}",0.9505084745762712
145841,"private Snip storageCreate(String name,String content,Application app){
  PreparedStatement statement=null;
  ResultSet result=null;
  Connection connection=ConnectionManager.getConnection();
  String login=app.getUser().getLogin();
  Snip snip=new Snip(name,content);
  Timestamp cTime=new Timestamp(new java.util.Date().getTime());
  Timestamp mTime=(Timestamp)cTime.clone();
  snip.setCTime(cTime);
  snip.setMTime(mTime);
  snip.setCUser(login);
  snip.setMUser(login);
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    statement.setString(1,name);
    statement.setString(2,content);
    statement.setTimestamp(3,cTime);
    statement.setTimestamp(4,mTime);
    statement.setString(5,login);
    statement.setString(6,login);
    Snip parent=snip.getParent();
    if (null == parent) {
      statement.setNull(7,Types.VARCHAR);
    }
 else {
      statement.setString(7,parent.getName());
    }
    Snip comment=snip.getComment();
    if (null == comment) {
      statement.setNull(8,Types.VARCHAR);
    }
 else {
      statement.setString(8,comment.getName());
    }
    statement.execute();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(result);
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return snip;
}","private Snip storageCreate(String name,String content,Application app){
  PreparedStatement statement=null;
  ResultSet result=null;
  Connection connection=ConnectionManager.getConnection();
  String login=app.getUser().getLogin();
  Snip snip=new Snip(name,content);
  Timestamp cTime=new Timestamp(new java.util.Date().getTime());
  Timestamp mTime=(Timestamp)cTime.clone();
  snip.setCTime(cTime);
  snip.setMTime(mTime);
  snip.setCUser(login);
  snip.setMUser(login);
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    statement.setString(1,name);
    statement.setString(2,content);
    statement.setTimestamp(3,cTime);
    statement.setTimestamp(4,mTime);
    statement.setString(5,login);
    statement.setString(6,login);
    Snip parent=snip.getParent();
    if (null == parent) {
      statement.setNull(7,Types.VARCHAR);
    }
 else {
      statement.setString(7,parent.getName());
    }
    Snip comment=snip.getComment();
    if (null == comment) {
      statement.setNull(8,Types.VARCHAR);
    }
 else {
      statement.setString(8,comment.getName());
    }
    statement.setString(9,serialize(snip.getPermissions()));
    statement.execute();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(result);
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return snip;
}",0.97825311942959
145842,"private void storageStore(Snip snip){
  PreparedStatement statement=null;
  Connection connection=ConnectionManager.getConnection();
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    statement.setString(1,snip.getName());
    statement.setString(2,snip.getContent());
    statement.setTimestamp(3,snip.getCTime());
    statement.setTimestamp(4,snip.getMTime());
    statement.setString(5,snip.getCUser());
    statement.setString(6,snip.getMUser());
    Snip parent=snip.getParent();
    if (null == parent) {
      statement.setNull(7,Types.VARCHAR);
    }
 else {
      statement.setString(7,parent.getName());
    }
    Snip comment=snip.getComment();
    if (null == comment) {
      statement.setNull(8,Types.VARCHAR);
    }
 else {
      statement.setString(8,comment.getName());
    }
    statement.setString(9,snip.getName());
    statement.execute();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return;
}","private void storageStore(Snip snip){
  PreparedStatement statement=null;
  Connection connection=ConnectionManager.getConnection();
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    statement.setString(1,snip.getName());
    statement.setString(2,snip.getContent());
    statement.setTimestamp(3,snip.getCTime());
    statement.setTimestamp(4,snip.getMTime());
    statement.setString(5,snip.getCUser());
    statement.setString(6,snip.getMUser());
    Snip parent=snip.getParent();
    if (null == parent) {
      statement.setNull(7,Types.VARCHAR);
    }
 else {
      statement.setString(7,parent.getName());
    }
    Snip comment=snip.getComment();
    if (null == comment) {
      statement.setNull(8,Types.VARCHAR);
    }
 else {
      statement.setString(8,comment.getName());
    }
    statement.setString(9,serialize(snip.getPermissions()));
    statement.setString(10,snip.getName());
    statement.execute();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return;
}",0.9723953695458591
145843,"public static boolean checkPermission(String permission,User user,Snip object){
  Map permissions=object.getPermissions();
  Set permRoles=(Set)permissions.get(permission);
  permRoles.removeAll(getRoles(user,object));
  return !permRoles.isEmpty();
}","/** 
 * Check if the user has the permission on the object
 * @param permission the permission to check, e.g. ""Edit""
 * @param user the user to check permissions for, e.g. ""funzel""
 * @param object the object that should be manipulated
 * @return
 */
public static boolean checkPermission(String permission,User user,Snip object){
  Map permissions=object.getPermissions();
  Set permRoles=(Set)permissions.get(permission);
  permRoles.removeAll(getRoles(user,object));
  return !permRoles.isEmpty();
}",0.6666666666666666
145844,"private String serialize(Set roles){
  StringBuffer buffer=new StringBuffer();
  Iterator iterator=roles.iterator();
  while (iterator.hasNext()) {
    String role=(String)iterator.next();
    buffer.append(role);
    if (iterator.hasNext())     buffer.append(""String_Node_Str"");
  }
  return buffer.toString();
}","private String serialize(Set roles){
  if (null == roles || roles.isEmpty())   return ""String_Node_Str"";
  StringBuffer buffer=new StringBuffer();
  Iterator iterator=roles.iterator();
  while (iterator.hasNext()) {
    String role=(String)iterator.next();
    buffer.append(role);
    if (iterator.hasNext())     buffer.append(""String_Node_Str"");
  }
  return buffer.toString();
}",0.9020172910662824
145845,"private Set deserialize(String roleString){
  StringTokenizer st=new StringTokenizer(roleString,""String_Node_Str"");
  Set roles=new HashSet();
  while (st.hasMoreTokens()) {
    roles.add(st.nextToken());
  }
  return roles;
}","private Set deserialize(String roleString){
  if (""String_Node_Str"".equals(roleString))   return new HashSet();
  StringTokenizer st=new StringTokenizer(roleString,""String_Node_Str"");
  Set roles=new HashSet();
  while (st.hasMoreTokens()) {
    roles.add(st.nextToken());
  }
  return roles;
}",0.8692307692307693
145846,"private List find(PreparedStatement statement){
  ResultSet result=null;
  List snips=new ArrayList();
  try {
    result=statement.executeQuery();
    Snip snip=null;
    while (result.next()) {
      snip=cacheLoad(result);
      snips.add(snip);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(result);
  }
  return snips;
}","private List find(PreparedStatement statement,int count){
  ResultSet result=null;
  List snips=new ArrayList();
  try {
    result=statement.executeQuery();
    Snip snip=null;
    while (result.next() && --count > 0) {
      snip=cacheLoad(result);
      snips.add(snip);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(result);
  }
  return snips;
}",0.9685534591194968
145847,"private List storageByRecent(int size){
  PreparedStatement statement=null;
  ResultSet result=null;
  Connection connection=ConnectionManager.getConnection();
  List snips=new ArrayList();
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    result=statement.executeQuery();
    Snip snip=null;
    while (result.next() && --size > 0) {
      snip=cacheLoad(result);
      snips.add(snip);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(result);
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return snips;
}","private List storageByRecent(int size){
  PreparedStatement statement=null;
  ResultSet result=null;
  Connection connection=ConnectionManager.getConnection();
  List snips=new ArrayList();
  try {
    statement=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    snips=find(statement,size);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    ConnectionManager.close(result);
    ConnectionManager.close(statement);
    ConnectionManager.close(connection);
  }
  return snips;
}",0.8745874587458746
145848,"public String execute(String[] params,String content,Snip snip) throws IllegalArgumentException {
  if (params.length == 0) {
    buffer.setLength(0);
    List snips=snip.getChildren();
    Iterator iterator=snips.iterator();
    while (iterator.hasNext()) {
      Snip entry=(Snip)iterator.next();
      buffer.append(""String_Node_Str"");
      buffer.append(Snip.toDate(entry.getName()));
      buffer.append(""String_Node_Str"");
      buffer.append(entry.getContent());
      buffer.append(""String_Node_Str"");
      buffer.append(snip.getComments().getCommentString());
      buffer.append(""String_Node_Str"");
    }
    return buffer.toString();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public String execute(String[] params,String content,Snip snip) throws IllegalArgumentException {
  if (params.length == 0) {
    buffer.setLength(0);
    List snips=SnipSpace.getInstance().getChildrenDateOrder(snip,10);
    Iterator iterator=snips.iterator();
    while (iterator.hasNext()) {
      Snip entry=(Snip)iterator.next();
      buffer.append(""String_Node_Str"");
      buffer.append(Snip.toDate(entry.getName()));
      buffer.append(""String_Node_Str"");
      buffer.append(entry.getContent());
      buffer.append(""String_Node_Str"");
      buffer.append(snip.getComments().getCommentString());
      buffer.append(""String_Node_Str"");
    }
    return buffer.toString();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9696151249155976
145849,"private Snip createSnip(ResultSet result) throws SQLException {
  String name=result.getString(""String_Node_Str"");
  String content=result.getString(""String_Node_Str"");
  Snip snip=new Snip(name,content);
  snip.setCTime(result.getTimestamp(""String_Node_Str""));
  snip.setMTime(result.getTimestamp(""String_Node_Str""));
  snip.setCUser(result.getString(""String_Node_Str""));
  snip.setMUser(result.getString(""String_Node_Str""));
  String commentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.setComment(load(commentString));
  }
  String parentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.setParent(load(parentString));
  }
  return snip;
}","private Snip createSnip(ResultSet result) throws SQLException {
  String name=result.getString(""String_Node_Str"");
  String content=result.getString(""String_Node_Str"");
  Snip snip=new Snip(name,content);
  snip.setCTime(result.getTimestamp(""String_Node_Str""));
  snip.setMTime(result.getTimestamp(""String_Node_Str""));
  snip.setCUser(result.getString(""String_Node_Str""));
  snip.setMUser(result.getString(""String_Node_Str""));
  String commentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.setComment(load(commentString));
  }
  String parentString=result.getString(""String_Node_Str"");
  if (!result.wasNull()) {
    snip.parent=load(parentString);
  }
  return snip;
}",0.9630681818181818
145850,"static BalloonController createBalloonController(String telemetryKeysFilePath,Properties properties) throws IOException {
  List<String> transmittedDataKeys=loadTransmittedDataKeys(telemetryKeysFilePath);
  DataModelConverter converter=new DataModelConverter();
  List<SensorController> sensors=new ArrayList<>();
  GPSSensor ublox=new GPSSensor(""String_Node_Str"",""String_Node_Str"");
  sensors.add(new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str"")));
  List<DataWriter> dataWriters=new ArrayList<>();
  dataWriters.add(new ConsoleDataWriter());
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Date date=new Date();
  String baseUrl=""String_Node_Str"" + File.separator + ""String_Node_Str""+ dateFormat.format(date);
  File dataFolder=new File(baseUrl);
  if (dataFolder.mkdirs()) {
    dataWriters.add(new FileDataWriter(baseUrl,transmittedDataKeys,converter));
  }
 else {
    logger.info(""String_Node_Str"");
  }
  String receiverUrl=properties.getProperty(""String_Node_Str"");
  dataWriters.add(new HttpDataWriter(transmittedDataKeys,converter,receiverUrl));
  CameraSensorController cameraSensor=null;
  try {
    String imageDirectory=properties.getProperty(""String_Node_Str"");
    cameraSensor=new CameraController(new File(imageDirectory));
  }
 catch (  IllegalArgumentException e) {
    logger.error(""String_Node_Str"",e);
  }
  CameraDataWriter cameraWriter=null;
  try {
    cameraWriter=new CameraFileWriter(dataFolder);
  }
 catch (  IllegalArgumentException e) {
    logger.error(""String_Node_Str"");
  }
  return new BalloonController(transmittedDataKeys,converter,sensors,dataWriters,cameraSensor,cameraWriter,properties);
}","static BalloonController createBalloonController(String telemetryKeysFilePath,Properties properties) throws IOException {
  List<String> transmittedDataKeys=loadTransmittedDataKeys(telemetryKeysFilePath);
  DataModelConverter converter=new DataModelConverter();
  List<SensorController> sensors=new ArrayList<>();
  GPSSensor ublox=new GPSSensor(""String_Node_Str"",""String_Node_Str"");
  sensors.add(new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str"")));
  List<DataWriter> dataWriters=new ArrayList<>();
  dataWriters.add(new ConsoleDataWriter());
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Date date=new Date();
  String baseUrl=""String_Node_Str"" + File.separator + ""String_Node_Str""+ dateFormat.format(date);
  File dataFolder=new File(baseUrl);
  if (dataFolder.mkdirs()) {
    dataWriters.add(new FileDataWriter(baseUrl,transmittedDataKeys,converter));
  }
 else {
    logger.info(""String_Node_Str"");
  }
  String receiverUrl=properties.getProperty(""String_Node_Str"");
  dataWriters.add(new HttpDataWriter(transmittedDataKeys,converter,receiverUrl));
  CameraSensorController cameraSensor=null;
  try {
    String imageDirectory=properties.getProperty(""String_Node_Str"");
    cameraSensor=new CameraController(new File(imageDirectory));
  }
 catch (  IllegalArgumentException e) {
    logger.error(""String_Node_Str"",e);
  }
  CameraDataWriter cameraWriter=null;
  try {
    cameraWriter=new CameraFileWriter(dataFolder);
  }
 catch (  IllegalArgumentException e) {
    logger.error(""String_Node_Str"");
  }
  return new BalloonController(transmittedDataKeys,converter,sensors,dataWriters,cameraSensor,cameraWriter,properties);
}",0.988976377952756
145851,"void run(ControllerRunner runner){
  if (runner == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String timeKey=properties.getProperty(""String_Node_Str"");
  if (timeKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String dateKey=properties.getProperty(""String_Node_Str"");
  if (dateKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String payloadNameKey=properties.getProperty(""String_Node_Str"");
  if (payloadNameKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String sentenceIdKey=properties.getProperty(""String_Node_Str"");
  if (sentenceIdKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  while (runner.shouldKeepRunning()) {
    Map<String,Object> data=new HashMap<>();
    Date now=new Date();
    DateFormat timeFormat=new SimpleDateFormat(""String_Node_Str"");
    data.put(timeKey,timeFormat.format(now));
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    data.put(dateKey,dateFormat.format(now));
    data.put(payloadNameKey,this.payloadName);
    data.put(sentenceIdKey,0);
    for (    SensorController controller : this.sensors) {
      try {
        Map<String,Object> sensorData=controller.getCurrentData();
        for (        String key : sensorData.keySet()) {
          data.put(key,sensorData.get(key));
        }
      }
 catch (      SensorReadFailedException ex) {
        logger.error(ex);
      }
      for (      DataWriter dataWriter : this.dataWriters) {
        try {
          dataWriter.writeData(data);
        }
 catch (        Exception e) {
          logger.error(e);
        }
      }
      if (this.cameraSensor != null) {
        List<String> imageFiles=this.cameraSensor.getImageFileNames();
        try {
          this.cameraWriter.writeImageFiles(imageFiles);
        }
 catch (        DataWriteFailedException ex) {
          logger.error(""String_Node_Str"",ex);
        }
      }
      runner.controllerFinishedRunLoop(data);
    }
  }
}","void run(ControllerRunner runner){
  if (runner == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String timeKey=properties.getProperty(""String_Node_Str"");
  if (timeKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String dateKey=properties.getProperty(""String_Node_Str"");
  if (dateKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String payloadNameKey=properties.getProperty(""String_Node_Str"");
  if (payloadNameKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String sentenceIdKey=properties.getProperty(""String_Node_Str"");
  if (sentenceIdKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  while (runner.shouldKeepRunning()) {
    Map<String,Object> data=new HashMap<>();
    Date now=new Date();
    DateFormat timeFormat=new SimpleDateFormat(""String_Node_Str"");
    data.put(timeKey,timeFormat.format(now));
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    data.put(dateKey,dateFormat.format(now));
    data.put(payloadNameKey,this.payloadName);
    data.put(sentenceIdKey,0);
    for (    SensorController controller : this.sensors) {
      try {
        Map<String,Object> sensorData=controller.getCurrentData();
        for (        String key : sensorData.keySet()) {
          data.put(key,sensorData.get(key));
        }
      }
 catch (      SensorReadFailedException ex) {
        logger.error(ex);
      }
    }
    for (    DataWriter dataWriter : this.dataWriters) {
      try {
        dataWriter.writeData(data);
      }
 catch (      Exception e) {
        logger.error(e);
      }
    }
    if (this.cameraSensor != null) {
      List<String> imageFiles=this.cameraSensor.getImageFileNames();
      try {
        this.cameraWriter.writeImageFiles(imageFiles);
      }
 catch (      DataWriteFailedException ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
    runner.controllerFinishedRunLoop(data);
  }
}",0.9802955665024632
145852,"public String getNmeaSentence(String GPXXX) throws SensorReadFailedException {
  char currentChar=0;
  String sentence=""String_Node_Str"";
  if (!supportedNmeaSentences.contains(GPXXX)) {
    throw new SensorReadFailedException(""String_Node_Str"" + ""String_Node_Str"" + GPXXX + ""String_Node_Str"");
  }
  try {
    serial.open(Serial.DEFAULT_COM_PORT,9600);
    try {
      Thread.sleep(1500);
    }
 catch (    InterruptedException ex) {
      Thread.currentThread().interrupt();
    }
    if (serial.availableBytes() == 0) {
      throw new SensorReadFailedException(""String_Node_Str"" + ""String_Node_Str"");
    }
    for (int i=0; true; i++) {
      sentence=""String_Node_Str"";
      for (int j=0; true; j++) {
        currentChar=serial.read();
        if (currentChar == '$') {
          sentence+=currentChar;
          break;
        }
 else         if (j == 200) {
          throw new SensorReadFailedException(""String_Node_Str"");
        }
      }
      for (int j=0; true; j++) {
        currentChar=serial.read();
        if (currentChar == '$') {
          break;
        }
        sentence+=currentChar;
        if (j == 200) {
          throw new SensorReadFailedException(""String_Node_Str"");
        }
      }
      if (sentence.length() >= 6 && sentence.substring(1,6).equals(GPXXX)) {
        break;
      }
 else       if (i == 20) {
        throw new SensorReadFailedException(""String_Node_Str"" + GPXXX + ""String_Node_Str"");
      }
    }
  }
 catch (  UnsatisfiedLinkError error) {
    throw new SensorReadFailedException(""String_Node_Str"");
  }
catch (  SerialPortException ex) {
    throw new SensorReadFailedException(""String_Node_Str"");
  }
catch (  IllegalStateException ex) {
    throw new SensorReadFailedException(""String_Node_Str"");
  }
 finally {
    if (serial.isOpen()) {
      try {
        serial.close();
      }
 catch (      IllegalStateException ex) {
        logger.error(""String_Node_Str"");
      }
    }
  }
  return sentence;
}","public String getNmeaSentence(String GPXXX) throws SensorReadFailedException {
  char currentChar=0;
  String sentence=""String_Node_Str"";
  if (!supportedNmeaSentences.contains(GPXXX)) {
    throw new SensorReadFailedException(""String_Node_Str"" + ""String_Node_Str"" + GPXXX + ""String_Node_Str"");
  }
  try {
    serial.open(Serial.DEFAULT_COM_PORT,9600);
    try {
      Thread.sleep(1500);
    }
 catch (    InterruptedException ex) {
      Thread.currentThread().interrupt();
    }
    if (serial.availableBytes() == 0) {
      throw new SensorReadFailedException(""String_Node_Str"" + ""String_Node_Str"");
    }
    for (int i=0; true; i++) {
      sentence=""String_Node_Str"";
      for (int j=0; true; j++) {
        currentChar=serial.read();
        if (currentChar == '$') {
          sentence+=currentChar;
          break;
        }
 else         if (j == 250) {
          throw new SensorReadFailedException(""String_Node_Str"");
        }
      }
      for (int j=0; true; j++) {
        currentChar=serial.read();
        if (currentChar == '$') {
          break;
        }
        sentence+=currentChar;
        if (j == 250) {
          throw new SensorReadFailedException(""String_Node_Str"");
        }
      }
      if (sentence.length() >= 6 && sentence.substring(1,6).equals(GPXXX)) {
        break;
      }
 else       if (i == 30) {
        throw new SensorReadFailedException(""String_Node_Str"" + GPXXX + ""String_Node_Str"");
      }
    }
  }
 catch (  UnsatisfiedLinkError error) {
    throw new SensorReadFailedException(""String_Node_Str"");
  }
catch (  SerialPortException ex) {
    throw new SensorReadFailedException(""String_Node_Str"");
  }
catch (  IllegalStateException ex) {
    throw new SensorReadFailedException(""String_Node_Str"");
  }
 finally {
    if (serial.isOpen()) {
      try {
        serial.close();
      }
 catch (      IllegalStateException ex) {
        logger.error(""String_Node_Str"");
      }
    }
  }
  return sentence;
}",0.9984725050916496
145853,"/** 
 * Test of getCurrentData method, of class GPSSensorController.
 * @throws java.lang.Exception
 */
@Test public void testShouldReturnAllKeysWhenKeysAreSubsetOfParsedSentence() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""));
  HashMap<String,Object> result=mController.getCurrentData();
  assert(!result.isEmpty());
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
}","/** 
 * Test of getCurrentData method, of class GPSSensorController.
 * @throws java.lang.Exception
 */
@Test public void testShouldReturnAllKeysWhenKeysAreSubsetOfParsedSentence() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""));
  HashMap<String,Object> result=mController.getCurrentData();
  assertTrue(!result.isEmpty());
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
}",0.9930635838150288
145854,"@Test public void testShouldReturnNoKeysWhenNoDataInParsedSentence() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""));
  HashMap<String,Object> result=mController.getCurrentData();
  assert(result.isEmpty());
}","@Test public void testShouldReturnNoKeysWhenNoDataInParsedSentence() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""));
  HashMap<String,Object> result=mController.getCurrentData();
  assertTrue(result.isEmpty());
}",0.9979529170931424
145855,"@Test public void testShouldReturnNoKeysWhenNoKeysAreGiven() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox);
  HashMap<String,Object> result=mController.getCurrentData();
  assert(result.isEmpty());
}","@Test public void testShouldReturnNoKeysWhenNoKeysAreGiven() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox);
  HashMap<String,Object> result=mController.getCurrentData();
  assertTrue(result.isEmpty());
}",0.9981024667931688
145856,"@Test public void testShouldReturnKeysOnlyForParsedSentenceDataThatExists() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""));
  HashMap<String,Object> result=mController.getCurrentData();
  assert(!result.isEmpty());
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assert(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assert(result.isEmpty());
}","@Test public void testShouldReturnKeysOnlyForParsedSentenceDataThatExists() throws Exception {
  HashMap<String,String> parsedSentence=new HashMap<>();
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  parsedSentence.put(""String_Node_Str"",""String_Node_Str"");
  GPSSensor ublox=mock(GPSSensor.class);
  HashSet<String> supportedNmeaSentences=new HashSet<>();
  supportedNmeaSentences.add(""String_Node_Str"");
  supportedNmeaSentences.add(""String_Node_Str"");
  when(ublox.getNmeaSentence(anyString())).thenReturn(""String_Node_Str"");
  when(ublox.getSupportedNmeaSentences()).thenReturn(supportedNmeaSentences);
  mockStatic(NMEASentenceParser.class);
  when(NMEASentenceParser.parse(anyString())).thenReturn(parsedSentence);
  GPSSensorController mController=new GPSSensorController(ublox,properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str""));
  HashMap<String,Object> result=mController.getCurrentData();
  assertTrue(!result.isEmpty());
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assertTrue(result.get(""String_Node_Str"").equals(""String_Node_Str""));
  result.remove(""String_Node_Str"");
  assertTrue(result.isEmpty());
}",0.9928909952606636
145857,"@Test public void testShouldGetSentenceIfSupported() throws Exception {
  Serial serial=mock(Serial.class);
  when(serial.read()).thenReturn('1').thenReturn('2').thenReturn('$').thenReturn('G').thenReturn('P').thenReturn('R').thenReturn('M').thenReturn('C').thenReturn('$');
  when(serial.availableBytes()).thenReturn(1);
  GPSSensor mGps=new GPSSensor(serial,""String_Node_Str"");
  String expected=""String_Node_Str"";
  String result=mGps.getNmeaSentence(""String_Node_Str"");
  assert(expected.equals(result));
}","@Test public void testShouldGetSentenceIfSupported() throws Exception {
  Serial serial=mock(Serial.class);
  when(serial.read()).thenReturn('1').thenReturn('2').thenReturn('$').thenReturn('G').thenReturn('P').thenReturn('R').thenReturn('M').thenReturn('C').thenReturn('$');
  when(serial.availableBytes()).thenReturn(1);
  GPSSensor mGps=new GPSSensor(serial,""String_Node_Str"");
  String expected=""String_Node_Str"";
  String result=mGps.getNmeaSentence(""String_Node_Str"");
  assertTrue(expected.equals(result));
}",0.99609375
145858,"@Test public void testShouldReturnEmptyHashMapForUnsupportedSentence() throws Exception {
  String NMEASentence=""String_Node_Str"";
  HashMap<String,String> result=NMEASentenceParser.parse(NMEASentence);
  assert(result.isEmpty());
}","@Test public void testShouldReturnEmptyHashMapForUnsupportedSentence() throws Exception {
  String NMEASentence=""String_Node_Str"";
  HashMap<String,String> result=NMEASentenceParser.parse(NMEASentence);
  assertTrue(result.isEmpty());
}",0.9914529914529916
145859,"@Override public void writeData(Map<String,Object> dataModel) throws DataWriteFailedException {
  logger.info(dataModel);
}","@Override public void writeData(Map<String,Object> dataModel){
  logger.info(dataModel);
}",0.8450704225352113
145860,"public void post(Object evt){
  if (!(evt instanceof Event)) {
    INpurePreLoader.print(""String_Node_Str"");
  }
  for (  Listener l : listeners) {
    l.handleEvent(evt);
  }
}","public void post(Object evt){
  if (!(evt instanceof Event)) {
    log.warn(""String_Node_Str"");
  }
  for (  Listener l : listeners) {
    l.handleEvent(evt);
  }
}",0.9266862170087976
145861,"public void register(Object o){
  Listener l=new Listener(o);
  for (  Method m : o.getClass().getDeclaredMethods()) {
    if (m.getAnnotation(INpureSubscribe.class) != null) {
      if (m.getParameterTypes().length > 1) {
        INpurePreLoader.print(""String_Node_Str"");
        return;
      }
      Class eventType=m.getParameterTypes()[0];
      l.handlers.put(eventType,m);
    }
  }
  listeners.add(l);
}","public void register(Object o){
  Listener l=new Listener(o);
  for (  Method m : o.getClass().getDeclaredMethods()) {
    if (m.getAnnotation(INpureSubscribe.class) != null) {
      if (m.getParameterTypes().length > 1) {
        log.warn(""String_Node_Str"");
        return;
      }
      Class eventType=m.getParameterTypes()[0];
      l.handlers.put(eventType,m);
    }
  }
  listeners.add(l);
}",0.9641532756489494
145862,"@Override public void run(){
  INpureCore.proxy.print(""String_Node_Str"");
  try {
    LinkedList<ItemStack> facades=(LinkedList)Class.forName(""String_Node_Str"").getDeclaredField(""String_Node_Str"").get(null);
    API.setItemListEntries(facades.get(0).getItem(),Arrays.asList(new ItemStack[]{facades.get(new Random().nextInt(facades.size()))}));
  }
 catch (  Throwable t) {
    INpureCore.proxy.warning(""String_Node_Str"");
  }
}","@Override public void run(){
  INpureCore.proxy.print(""String_Node_Str"");
  try {
    LinkedList<ItemStack> facades=(LinkedList)Class.forName(""String_Node_Str"").getDeclaredField(""String_Node_Str"").get(null);
    API.setItemListEntries(facades.get(0).getItem(),Arrays.asList(new ItemStack[]{facades.get(new Random().nextInt(facades.size()))}));
  }
 catch (  Throwable t) {
    INpureCore.proxy.warning(""String_Node_Str"");
    t.printStackTrace();
  }
}",0.9715585893060296
145863,"/** 
 * Tests the extraction of release names from an svn structure.
 * @throws Exception on test failure
 */
@Test public void testGetAvailableReleases() throws Exception {
  File repoWithReleases=new File(TEMP_DIR,""String_Node_Str"");
  cleanUpTestDir(repoWithReleases);
  SVNURL localRepository=SVNRepositoryFactory.createLocalRepository(repoWithReleases,true,false);
  SVNClientManager clientManager=SVNClientManager.newInstance(SVNWCUtil.createDefaultOptions(false),""String_Node_Str"",""String_Node_Str"");
  SVNUpdateClient updateClient=clientManager.getUpdateClient();
  File wc=new File(TEMP_DIR,""String_Node_Str"");
  cleanUpTestDir(wc);
  updateClient.doCheckout(localRepository,wc,SVNRevision.HEAD,SVNRevision.HEAD,SVNDepth.INFINITY,true);
  File trunk=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  File tags=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  File branches=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  File noReleaselayout=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  createDirectoryInWC(tags,""String_Node_Str"",clientManager.getWCClient());
  createDirectoryInWC(branches,""String_Node_Str"",clientManager.getWCClient());
  createDirectoryInWC(branches,""String_Node_Str"",clientManager.getWCClient());
  clientManager.getCommitClient().doCommit(new File[]{trunk,tags,branches,noReleaselayout},false,""String_Node_Str"",null,null,false,true,SVNDepth.INFINITY);
  TestProject testProject=new TestProject();
  TestProjectConfig testProjectConfig=new TestProjectConfig();
  SVNTeamShareConfig aTeamShareConfig=new SVNTeamShareConfig();
  aTeamShareConfig.setUrl(""String_Node_Str"" + repoWithReleases.getAbsolutePath() + ""String_Node_Str"");
  testProjectConfig.setTeamShareConfig(aTeamShareConfig);
  testProject.setTestProjectConfig(testProjectConfig);
  validateReleaseNamesOnLegalPath(teamService.getAvailableReleases(testProject).keySet());
  aTeamShareConfig.setUrl(""String_Node_Str"" + repoWithReleases.getAbsolutePath() + ""String_Node_Str"");
  validateReleaseNamesOnLegalPath(teamService.getAvailableReleases(testProject).keySet());
  aTeamShareConfig.setUrl(""String_Node_Str"" + repoWithReleases.getAbsolutePath() + ""String_Node_Str"");
  assertTrue(teamService.getAvailableReleases(testProject).isEmpty());
}","/** 
 * Tests the extraction of release names from an svn structure.
 * @throws Exception on test failure
 */
@Test public void testGetAvailableReleases() throws Exception {
  File repoWithReleases=new File(TEMP_DIR,""String_Node_Str"");
  cleanUpTestDir(repoWithReleases);
  SVNURL localRepository=SVNRepositoryFactory.createLocalRepository(repoWithReleases,true,false);
  SVNClientManager clientManager=SVNClientManager.newInstance(SVNWCUtil.createDefaultOptions(false),""String_Node_Str"",""String_Node_Str"");
  SVNUpdateClient updateClient=clientManager.getUpdateClient();
  File wc=new File(TEMP_DIR,""String_Node_Str"");
  cleanUpTestDir(wc);
  updateClient.doCheckout(localRepository,wc,SVNRevision.HEAD,SVNRevision.HEAD,SVNDepth.INFINITY,true);
  File trunk=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  File tags=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  File branches=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  File noReleaselayout=createDirectoryInWC(wc,""String_Node_Str"",clientManager.getWCClient());
  createDirectoryInWC(tags,""String_Node_Str"",clientManager.getWCClient());
  createDirectoryInWC(branches,""String_Node_Str"",clientManager.getWCClient());
  createDirectoryInWC(branches,""String_Node_Str"",clientManager.getWCClient());
  clientManager.getCommitClient().doCommit(new File[]{trunk,tags,branches,noReleaselayout},false,""String_Node_Str"",null,null,false,true,SVNDepth.INFINITY);
  TestProject testProject=new TestProject();
  TestProjectConfig testProjectConfig=new TestProjectConfig();
  SVNTeamShareConfig aTeamShareConfig=new SVNTeamShareConfig();
  SVNURL trunkURL=SVNURL.fromFile(new File(repoWithReleases.getAbsolutePath() + File.separator + ""String_Node_Str""));
  SVNURL branchURL=SVNURL.fromFile(new File(repoWithReleases.getAbsolutePath() + File.separator + ""String_Node_Str""));
  SVNURL otherStuff=SVNURL.fromFile(new File(repoWithReleases.getAbsolutePath() + File.separator + ""String_Node_Str""));
  aTeamShareConfig.setUrl(trunkURL.toString());
  testProjectConfig.setTeamShareConfig(aTeamShareConfig);
  testProject.setTestProjectConfig(testProjectConfig);
  validateReleaseNamesOnLegalPath(teamService.getAvailableReleases(testProject).keySet());
  aTeamShareConfig.setUrl(branchURL.toString());
  validateReleaseNamesOnLegalPath(teamService.getAvailableReleases(testProject).keySet());
  aTeamShareConfig.setUrl(otherStuff.toString());
  assertTrue(teamService.getAvailableReleases(testProject).isEmpty());
}",0.8820259419394688
145864,"/** 
 * compares to language-property-files.
 * @param messagePropertiesKey the properties form one language used for the keys in the test
 * @param messagePropertiesValue the properties from an other language used for the values
 * @param language as a string
 * @return true, if all keys are in the value-properties included.
 */
private boolean writeDifferent(Properties messagePropertiesKey,Properties messagePropertiesValue,String language){
  boolean allKeysInValueProperties=true;
  Enumeration<Object> keys=messagePropertiesKey.keys();
  while (keys.hasMoreElements()) {
    String key=keys.nextElement().toString();
    if (messagePropertiesValue.getProperty(key) == null) {
      allKeysInValueProperties=false;
    }
  }
  return allKeysInValueProperties;
}","/** 
 * compares to language-property-files.
 * @param messagePropertiesKey the properties form one language used for the keys in the test
 * @param messagePropertiesValue the properties from an other language used for the values
 * @param language as a string
 * @return true, if all keys are in the value-properties included.
 */
private boolean writeDifferent(Properties messagePropertiesKey,Properties messagePropertiesValue,String language){
  boolean allKeysInValueProperties=true;
  Enumeration<Object> keys=messagePropertiesKey.keys();
  while (keys.hasMoreElements()) {
    String key=keys.nextElement().toString();
    if (messagePropertiesValue.getProperty(key) == null) {
      logger.error(""String_Node_Str"" + key + ""String_Node_Str""+ language);
      allKeysInValueProperties=false;
    }
  }
  return allKeysInValueProperties;
}",0.9534450651769087
145865,"/** 
 * adds a parameterLine into the dataTable.
 * @param paramLine String. Parameters are separated by |
 * @throws SystemException throws if data row count higher than title roe count
 */
public void addParameterLine(String paramLine) throws SystemException {
  String[] elementListTemp=paramLine.substring(1).split(""String_Node_Str"",-1);
  String[] elementList=Arrays.copyOf(elementListTemp,elementListTemp.length - 1);
  TestDataRow actParams=new TestDataRow(elementList);
  if (getDataTable().hasTitleRow()) {
    int headerColumnCount=getDataTable().getTitleRow().getColumnCount();
    if (actParams.getColumnCount() != headerColumnCount) {
      LOGGER.info(""String_Node_Str"" + actParams.toString() + ""String_Node_Str""+ headerColumnCount+ ""String_Node_Str"");
      TestDataEvaluationReturnList testDataEvaluationReturnList=new TestDataEvaluationReturnList();
      testDataEvaluationReturnList.setDataRowColumnCountEqualsHeaderRowColumnCount(false);
      setTestDataEvaluationReturnList(testDataEvaluationReturnList);
    }
  }
  getDataTable().addRow(actParams);
}","/** 
 * adds a parameterLine into the dataTable.
 * @param paramLine String. Parameters are separated by |
 * @throws SystemException throws if data row count higher than title roe count
 */
public void addParameterLine(String paramLine) throws SystemException {
  String[] elementListTemp=paramLine.substring(1).split(""String_Node_Str"",-1);
  String[] elementList=Arrays.copyOf(elementListTemp,elementListTemp.length - 1);
  TestDataRow actParams=new TestDataRow(elementList);
  if (getDataTable().hasTitleRow()) {
    int headerColumnCount=getDataTable().getTitleRow().getColumnCount();
    if (actParams.getColumnCount() > headerColumnCount) {
      LOGGER.error(""String_Node_Str"" + actParams.toString() + ""String_Node_Str""+ headerColumnCount+ ""String_Node_Str"");
      TestDataEvaluationReturnList testDataEvaluationReturnList=new TestDataEvaluationReturnList();
      testDataEvaluationReturnList.setDataRowColumnCountEqualsHeaderRowColumnCount(false);
      setTestDataEvaluationReturnList(testDataEvaluationReturnList);
    }
  }
  getDataTable().addRow(actParams);
}",0.994413407821229
145866,"@Override public void move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  testStructureServices.get(testStructure.getRootElement().getTestProjectConfig().getTestServerID()).move(testStructure,newParent);
}","@Override public List<String> move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  return testStructureServices.get(testStructure.getRootElement().getTestProjectConfig().getTestServerID()).move(testStructure,newParent);
}",0.9548133595284872
145867,"@Override public void rename(TestStructure testStructure,String newName) throws SystemException {
  testStructureServices.get(testStructure.getRootElement().getTestProjectConfig().getTestServerID()).rename(testStructure,newName);
}","@Override public List<String> rename(TestStructure testStructure,String newName) throws SystemException {
  return testStructureServices.get(testStructure.getRootElement().getTestProjectConfig().getTestServerID()).rename(testStructure,newName);
}",0.9517819706498952
145868,"/** 
 * Moves a given test structure to a new parent.
 * @param testStructure test structure which should be moved
 * @param newParent the new parent of the testcase.
 * @throws SystemException is thrown if a system exception occurred
 */
void move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException ;","/** 
 * Moves a given test structure to a new parent.
 * @param testStructure test structure which should be moved
 * @param newParent the new parent of the testcase.
 * @return a list of changed items
 * @throws SystemException is thrown if a system exception occurred
 */
List<String> move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException ;",0.9284712482468443
145869,"/** 
 * Renames a given test structure.
 * @param testStructure test structure which should be renamed (contains the old/current name)
 * @param newName new name
 * @throws SystemException is thrown if a system exception occurred
 */
void rename(TestStructure testStructure,String newName) throws SystemException ;","/** 
 * Renames a given test structure.
 * @param testStructure test structure which should be renamed (contains the old/current name)
 * @param newName new name
 * @return - the list of changed items
 * @throws SystemException is thrown if a system exception occurred
 */
List<String> rename(TestStructure testStructure,String newName) throws SystemException ;",0.9185185185185184
145870,"@Override public void move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  testStructureContentService.refreshTestCaseComponents(testStructure);
  List<TestFlow> changedFlows=null;
  if (testStructure instanceof TestScenario) {
    List<String> usages=testScenarioService.getUsedOfTestSceneario((TestScenario)testStructure);
    changedFlows=updateScenarioCalls(testStructure.getRootElement(),testStructure.getName(),newParent.getFullName() + ""String_Node_Str"" + testStructure.getName(),testStructure.getFullName(),usages);
  }
 else {
    clearTestHistory(testStructure);
  }
  if (testStructure.getRootElement().getTestProjectConfig().getTeamShareConfig() != null) {
    moveStructureWithTeamShare(testStructure,newParent);
  }
 else {
    new FitnesseFileSystemTestStructureService().move(testStructure,newParent);
  }
  if (changedFlows != null) {
    updateChangedFlows(changedFlows);
  }
  if (eventBroker != null) {
    eventBroker.send(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_MODIFY,testStructure.getRootElement().getName());
  }
}","@Override public List<String> move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  List<String> changedItems=new ArrayList<String>();
  testStructureContentService.refreshTestCaseComponents(testStructure);
  List<TestFlow> changedFlows=null;
  if (testStructure instanceof TestScenario) {
    List<String> usages=testScenarioService.getUsedOfTestSceneario((TestScenario)testStructure);
    changedFlows=updateScenarioCalls(testStructure.getRootElement(),testStructure.getName(),newParent.getFullName() + ""String_Node_Str"" + testStructure.getName(),testStructure.getFullName(),usages);
  }
 else {
    clearTestHistory(testStructure);
  }
  if (testStructure.getRootElement().getTestProjectConfig().getTeamShareConfig() != null) {
    moveStructureWithTeamShare(testStructure,newParent);
  }
 else {
    new FitnesseFileSystemTestStructureService().move(testStructure,newParent);
  }
  if (changedFlows != null) {
    updateChangedFlows(changedFlows);
    for (    TestFlow testFlow : changedFlows) {
      changedItems.add(testFlow.getFullName());
    }
  }
  if (eventBroker != null) {
    eventBroker.send(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_MODIFY,testStructure.getRootElement().getName());
  }
  return changedItems;
}",0.9187838400666388
145871,"/** 
 * Update the URL for all children of a testsuite.
 * @param testSuite - the testsuite to replace the children
 * @throws SystemException - the exception
 */
private void updateAllChildren(TestSuite testSuite) throws SystemException {
  for (  TestStructure testStructure : testSuite.getAllTestChildren()) {
    Path path=Paths.get(FitnesseFileSystemUtility.getPathToTestStructureDirectory(testStructure));
    try {
      testStructure.setUrl(path.toUri().toURL());
    }
 catch (    MalformedURLException e) {
      throw new SystemException(e.getMessage(),e);
    }
    if (testStructure instanceof TestSuite) {
      updateAllChildren((TestSuite)testStructure);
    }
  }
}","/** 
 * Update the URL for all children of a testsuite.
 * @param testSuite - the testsuite to replace the children
 * @throws SystemException - the exception
 * @return - list of changed items
 */
private List<String> updateAllChildren(TestSuite testSuite) throws SystemException {
  List<String> changedItems=new ArrayList<String>();
  for (  TestStructure testStructure : testSuite.getAllTestChildren()) {
    Path path=Paths.get(FitnesseFileSystemUtility.getPathToTestStructureDirectory(testStructure));
    try {
      testStructure.setUrl(path.toUri().toURL());
      changedItems.add(testStructure.getFullName());
    }
 catch (    MalformedURLException e) {
      throw new SystemException(e.getMessage(),e);
    }
    if (testStructure instanceof TestSuite) {
      changedItems.addAll(updateAllChildren((TestSuite)testStructure));
    }
  }
  return changedItems;
}",0.8631984585741811
145872,"/** 
 * Renames a testcase. This is just a change of filenames.
 * @param testStructure - the testStructure to be renamed
 * @param newName - the newName of the tescase
 * @throws SystemException - any excpetion during renaming
 */
private void renameTestCase(TestStructure testStructure,String newName) throws SystemException {
  clearTestHistory(testStructure);
  renameFiles(testStructure,newName);
  testStructure.setName(newName);
  Path path=Paths.get(FitnesseFileSystemUtility.getPathToTestStructureDirectory(testStructure));
  try {
    testStructure.setUrl(path.toUri().toURL());
  }
 catch (  MalformedURLException e) {
    throw new SystemException(e.getMessage(),e);
  }
}","/** 
 * Renames a testcase. This is just a change of filenames.
 * @param testStructure - the testStructure to be renamed
 * @param newName - the newName of the tescase
 * @return - list of changed items
 * @throws SystemException - any excpetion during renaming
 */
private List<String> renameTestCase(TestStructure testStructure,String newName) throws SystemException {
  clearTestHistory(testStructure);
  renameFiles(testStructure,newName);
  testStructure.setName(newName);
  Path path=Paths.get(FitnesseFileSystemUtility.getPathToTestStructureDirectory(testStructure));
  try {
    testStructure.setUrl(path.toUri().toURL());
  }
 catch (  MalformedURLException e) {
    throw new SystemException(e.getMessage(),e);
  }
  return new ArrayList<String>();
}",0.9411764705882352
145873,"/** 
 * {@inheritDoc}
 */
@Override public void rename(TestStructure testStructure,String newName) throws SystemException {
  if (testStructure instanceof TestScenario) {
    renameScenario((TestScenario)testStructure,newName);
  }
 else   if (testStructure instanceof TestSuite) {
    renameTestSuite((TestSuite)testStructure,newName);
  }
 else {
    renameTestCase(testStructure,newName);
  }
  if (eventBroker != null) {
    eventBroker.post(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_MODIFY,testStructure.getFullName());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public List<String> rename(TestStructure testStructure,String newName) throws SystemException {
  List<String> changedItems=null;
  if (testStructure instanceof TestScenario) {
    changedItems=renameScenario((TestScenario)testStructure,newName);
  }
 else   if (testStructure instanceof TestSuite) {
    changedItems=renameTestSuite((TestSuite)testStructure,newName);
  }
 else {
    changedItems=renameTestCase(testStructure,newName);
  }
  if (eventBroker != null) {
    eventBroker.post(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_MODIFY,testStructure.getFullName());
  }
  return changedItems;
}",0.9077429983525536
145874,"/** 
 * Renames a suite. All childrens of the node are updated.
 * @param testSuite -the suite to be renamed.
 * @param newName -the new name of the suite
 * @throws SystemException - any excpetion during renaming.
 */
private void renameTestSuite(TestSuite testSuite,String newName) throws SystemException {
  renameFiles(testSuite,newName);
  setName(testSuite,newName);
  updateAllChildren(testSuite);
}","/** 
 * Renames a suite. All childrens of the node are updated.
 * @param testSuite -the suite to be renamed.
 * @param newName -the new name of the suite
 * @return - the list of all changed items
 * @throws SystemException - any excpetion during renaming.
 */
private List<String> renameTestSuite(TestSuite testSuite,String newName) throws SystemException {
  renameFiles(testSuite,newName);
  setName(testSuite,newName);
  return updateAllChildren(testSuite);
}",0.9241379310344828
145875,"/** 
 * renames a scenario.
 * @param scenario -the scenario to be renamed
 * @param newName - the new name of the scenario
 * @throws SystemException - any exception during execution.
 */
private void renameScenario(TestScenario scenario,String newName) throws SystemException {
  List<String> usages=testScenarioService.getUsedOfTestSceneario(scenario);
  TestProject testProject=scenario.getRootElement();
  String oldName=scenario.getFullName();
  List<TestFlow> changedFlows=updateScenarioCalls(testProject,newName,scenario.getParent().getFullName() + ""String_Node_Str"" + newName,oldName,usages);
  renameFiles(scenario,newName);
  setName(scenario,newName);
  testStructureContentService.refreshTestCaseComponents(scenario);
  testStructureContentService.saveTestStructureData(scenario);
  updateChangedFlows(changedFlows);
}","/** 
 * renames a scenario.
 * @param scenario -the scenario to be renamed
 * @param newName - the new name of the scenario
 * @throws SystemException - any exception during execution.
 */
private List<String> renameScenario(TestScenario scenario,String newName) throws SystemException {
  List<String> usages=testScenarioService.getUsedOfTestSceneario(scenario);
  TestProject testProject=scenario.getRootElement();
  String oldName=scenario.getFullName();
  List<TestFlow> changedFlows=updateScenarioCalls(testProject,newName,scenario.getParent().getFullName() + ""String_Node_Str"" + newName,oldName,usages);
  renameFiles(scenario,newName);
  setName(scenario,newName);
  testStructureContentService.refreshTestCaseComponents(scenario);
  testStructureContentService.saveTestStructureData(scenario);
  updateChangedFlows(changedFlows);
  List<String> changedItems=new ArrayList<String>();
  for (  TestFlow flow : changedFlows) {
    changedItems.add(flow.getFullName());
  }
  return changedItems;
}",0.9023458810692854
145876,"@Override public void move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  delete(testStructure);
  newParent.addChild(testStructure);
  create(testStructure);
}","@Override public List<String> move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  List<String> changedItems=new ArrayList<String>();
  delete(testStructure);
  newParent.addChild(testStructure);
  create(testStructure);
  return changedItems;
}",0.8114754098360656
145877,"@Override public void rename(TestStructure testStructure,String newName) throws SystemException {
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str""+ newName);
  }
  Path oldName=Paths.get(FitnesseFileSystemUtility.getPathToTestStructureDirectory(testStructure));
  try {
    Path targetPath=oldName.resolveSibling(newName);
    Files.move(oldName,targetPath);
    testStructure.setUrl(targetPath.toUri().toURL());
  }
 catch (  IOException e) {
    String message=""String_Node_Str"" + oldName + ""String_Node_Str""+ newName;
    LOGGER.error(message,e);
    throw new SystemException(message + ""String_Node_Str"" + e.getMessage(),e);
  }
}","@Override public List<String> rename(TestStructure testStructure,String newName) throws SystemException {
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str""+ newName);
  }
  Path oldName=Paths.get(FitnesseFileSystemUtility.getPathToTestStructureDirectory(testStructure));
  try {
    Path targetPath=oldName.resolveSibling(newName);
    Files.move(oldName,targetPath);
    testStructure.setUrl(targetPath.toUri().toURL());
  }
 catch (  IOException e) {
    String message=""String_Node_Str"" + oldName + ""String_Node_Str""+ newName;
    LOGGER.error(message,e);
    throw new SystemException(message + ""String_Node_Str"" + e.getMessage(),e);
  }
  return new ArrayList<String>();
}",0.9654696132596684
145878,"/** 
 * Parses a wiki page in raw format with | to the internal object structure.
 * @param testFlow {@link TestFlow}
 * @param content wiki page content
 * @return test component of this page
 * @throws SystemException is thrown in case of invalid input or parsing errors
 */
public LinkedList<TestComponent> parse(TestFlow testFlow,String content) throws SystemException {
  if (testFlow instanceof TestScenario) {
    ((TestScenario)testFlow).clearIncludes();
  }
  LinkedList<TestComponent> testComponents=new LinkedList<TestComponent>();
  StringTokenizer stringTokenizer=new StringTokenizer(content,""String_Node_Str"");
  Boolean firstRow=true;
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(getClass()).getBundleContext());
  while (stringTokenizer.hasMoreTokens()) {
    String line=stringTokenizer.nextToken();
    if (firstRow && line.equals(""String_Node_Str"")) {
      TestInvisibleContent testInvisibleContent=new TestInvisibleContent();
      testInvisibleContent.setSourceCode(line);
      testComponents.add(testInvisibleContent);
    }
 else     if (line.equalsIgnoreCase(SCENARIO_PRAEAMBLE) && testFlow instanceof TestScenario) {
      addScenario(testFlow,testComponents,stringTokenizer);
    }
 else     if (lineIsElementOfActionGroup(line)) {
      addTestActionGroup(testFlow,testComponents,context,line);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      addScenarioParameter(testComponents,line);
    }
 else     if (line.startsWith(SCENARIO_INCLUDE)) {
      parseScenarioInclude(testFlow,testComponents,stringTokenizer,line);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      addScenarioInScenario(testFlow,testComponents,stringTokenizer,line);
    }
 else {
      addDescriptionLine(testFlow,testComponents,line);
    }
  }
  return testComponents;
}","/** 
 * Parses a wiki page in raw format with | to the internal object structure.
 * @param testFlow {@link TestFlow}
 * @param content wiki page content
 * @return test component of this page
 * @throws SystemException is thrown in case of invalid input or parsing errors
 */
public LinkedList<TestComponent> parse(TestFlow testFlow,String content) throws SystemException {
  if (testFlow instanceof TestScenario) {
    ((TestScenario)testFlow).clearIncludes();
  }
  LinkedList<TestComponent> testComponents=new LinkedList<TestComponent>();
  StringTokenizer stringTokenizer=new StringTokenizer(content,""String_Node_Str"");
  Boolean firstRow=true;
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(getClass()).getBundleContext());
  while (stringTokenizer.hasMoreTokens()) {
    String line=stringTokenizer.nextToken();
    if (firstRow && line.equals(""String_Node_Str"")) {
      TestInvisibleContent testInvisibleContent=new TestInvisibleContent();
      testInvisibleContent.setSourceCode(line);
      testComponents.add(testInvisibleContent);
    }
 else     if (line.equalsIgnoreCase(SCENARIO_PRAEAMBLE) && testFlow instanceof TestScenario) {
      int index=testComponents.size();
      addScenario(testFlow,testComponents,stringTokenizer);
    }
 else     if (lineIsElementOfActionGroup(line)) {
      addTestActionGroup(testFlow,testComponents,context,line);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      addScenarioParameter(testComponents,line);
    }
 else     if (line.startsWith(SCENARIO_INCLUDE)) {
      parseScenarioInclude(testFlow,testComponents,stringTokenizer,line);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      addScenarioInScenario(testFlow,testComponents,stringTokenizer,line);
    }
 else {
      addDescriptionLine(testFlow,testComponents,line);
    }
  }
  return testComponents;
}",0.989547038327526
145879,"/** 
 * @param scenarioNameSplittedByCapitals array of scenario names.
 * @return stringBuilder with the scenario names separated by spaces.
 */
private StringBuilder buildScenarioNameWithSpaces(String[] scenarioNameSplittedByCapitals){
  StringBuilder scenarioNameWithSpaces=new StringBuilder(""String_Node_Str"");
  for (  String part : scenarioNameSplittedByCapitals) {
    scenarioNameWithSpaces.append(part.trim()).append(""String_Node_Str"");
  }
  return scenarioNameWithSpaces;
}","/** 
 * @param scenarioNameSplittedByCapitals array of scenario names.
 * @return stringBuilder with the scenario names separated by spaces.
 */
private StringBuilder buildScenarioNameWithSpaces(String[] scenarioNameSplittedByCapitals){
  StringBuilder scenarioNameWithSpaces=new StringBuilder(""String_Node_Str"");
  for (  String part : scenarioNameSplittedByCapitals) {
    String partTrim=part.trim();
    if (partTrim.length() > 0) {
      scenarioNameWithSpaces.append(partTrim).append(""String_Node_Str"");
    }
  }
  return scenarioNameWithSpaces;
}",0.9161041465766636
145880,"/** 
 * this method adds a   {@link TestScenarioParameterTable} to thetestcomponents.
 * @param testFlow TestFlow
 * @param testComponents LinkedList<TestComponent>
 * @param stringTokenizer StringTokenizer
 * @param includeLine String
 * @param isIncluedProjectScenario boolean
 * @throws SystemException is thrown in case of invalid input or parsing errors
 */
private void addTestScenarioParameterTable(TestFlow testFlow,LinkedList<TestComponent> testComponents,StringTokenizer stringTokenizer,String includeLine,boolean isIncluedProjectScenario) throws SystemException {
  if (stringTokenizer.hasMoreTokens()) {
    String nextLine=stringTokenizer.nextToken();
    TestScenarioParameterTable parameterTable=new TestScenarioParameterTable();
    parameterTable.setIncludeLong(includeLine);
    parameterTable.setScenarioOfProject(isIncluedProjectScenario);
    testComponents.add(parameterTable);
    if (nextLine.startsWith(""String_Node_Str"")) {
      parameterTable.setSimpleScriptStatement(true);
      if (stringTokenizer.hasMoreTokens()) {
        nextLine=stringTokenizer.nextToken().replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (nextLine.startsWith(""String_Node_Str"" + parameterTable.getTitleOutOfInclude() + ""String_Node_Str"") || nextLine.startsWith(""String_Node_Str"" + parameterTable.getName() + ""String_Node_Str"")) {
          parameterTable.setTitle(parameterTable.getTitleOutOfInclude());
        }
      }
 else {
        return;
      }
    }
    nextLine=nextLine.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (nextLine.startsWith(""String_Node_Str"") && nextLine.equals(""String_Node_Str"" + parameterTable.getTitleOutOfInclude() + ""String_Node_Str"") || nextLine.startsWith(""String_Node_Str"" + parameterTable.getName() + ""String_Node_Str"")) {
      parameterTable.setTitle(parameterTable.getTitleOutOfInclude());
    }
    while (stringTokenizer.hasMoreElements()) {
      nextLine=stringTokenizer.nextToken();
      if (nextLine.startsWith(""String_Node_Str"") && !nextLine.startsWith(""String_Node_Str"")) {
        parameterTable.addParameterLine(nextLine);
        if (parameterTable.getDataTable().getRowCounts() == 1) {
          checkIsParamtableCorrect(testFlow,parameterTable,includeLine);
        }
      }
 else       if (nextLineIsEndOfParameterTable(testFlow,testComponents,nextLine,parameterTable.getTitle())) {
        return;
      }
    }
  }
}","/** 
 * this method adds a   {@link TestScenarioParameterTable} to thetestcomponents.
 * @param testFlow TestFlow
 * @param testComponents LinkedList<TestComponent>
 * @param stringTokenizer StringTokenizer
 * @param includeLine String
 * @param isIncluedProjectScenario boolean
 * @throws SystemException is thrown in case of invalid input or parsing errors
 */
private void addTestScenarioParameterTable(TestFlow testFlow,LinkedList<TestComponent> testComponents,StringTokenizer stringTokenizer,String includeLine,boolean isIncluedProjectScenario) throws SystemException {
  if (stringTokenizer.hasMoreTokens()) {
    String nextLine=stringTokenizer.nextToken();
    TestScenarioParameterTable parameterTable=new TestScenarioParameterTable();
    parameterTable.setIncludeLong(includeLine);
    parameterTable.setScenarioOfProject(isIncluedProjectScenario);
    testComponents.add(parameterTable);
    if (nextLine.startsWith(""String_Node_Str"")) {
      parameterTable.setSimpleScriptStatement(true);
      if (stringTokenizer.hasMoreTokens()) {
        nextLine=stringTokenizer.nextToken().replaceAll(""String_Node_Str"",""String_Node_Str"");
        if (nextLine.startsWith(""String_Node_Str"" + parameterTable.getTitleOutOfInclude() + ""String_Node_Str"") || nextLine.startsWith(""String_Node_Str"" + parameterTable.getName() + ""String_Node_Str"")) {
          parameterTable.setTitle(parameterTable.getTitleOutOfInclude());
        }
      }
 else {
        return;
      }
    }
    nextLine=nextLine.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (nextLine.startsWith(""String_Node_Str"") && (nextLine.equals(""String_Node_Str"" + parameterTable.getTitleOutOfInclude() + ""String_Node_Str"") || nextLine.startsWith(""String_Node_Str"" + parameterTable.getName() + ""String_Node_Str""))) {
      parameterTable.setTitle(parameterTable.getTitleOutOfInclude());
    }
    while (stringTokenizer.hasMoreElements()) {
      nextLine=stringTokenizer.nextToken();
      if (nextLine.startsWith(""String_Node_Str"") && !nextLine.startsWith(""String_Node_Str"")) {
        parameterTable.addParameterLine(nextLine);
        if (parameterTable.getDataTable().getRowCounts() == 1) {
          checkIsParamtableCorrect(testFlow,parameterTable,includeLine);
        }
      }
 else       if (nextLineIsEndOfParameterTable(testFlow,testComponents,nextLine,parameterTable.getTitle())) {
        return;
      }
    }
  }
}",0.999582985821518
145881,"@Override public void move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
}","@Override public List<String> move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  return null;
}",0.8853754940711462
145882,"@Override public void rename(TestStructure testStructure,String newName) throws SystemException {
}","@Override public List<String> rename(TestStructure testStructure,String newName) throws SystemException {
  return null;
}",0.8687782805429864
145883,"@Override public void move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
}","@Override public List<String> move(TestStructure testStructure,TestCompositeStructure newParent) throws SystemException {
  return null;
}",0.8853754940711462
145884,"@Override public void rename(TestStructure testStructure,String newName) throws SystemException {
}","@Override public List<String> rename(TestStructure testStructure,String newName) throws SystemException {
  return null;
}",0.8687782805429864
145885,"/** 
 * @return the titleline.
 */
public TestDataRow getTitleRow(){
  return testDataRows.get(0);
}","/** 
 * @return the titleline.
 */
public TestDataRow getTitleRow(){
  if (testDataRows.size() > 0) {
    return testDataRows.get(0);
  }
  return new TestDataRow();
}",0.7490636704119851
145886,"@Override public int availableUpdatesCount(TestProject testProject) throws SystemException {
  logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
  SVNClientManager clientManager=getSVNClientManager(testProject);
  try {
    SvnGetInfo info=clientManager.getWCClient().getOperationsFactory().createGetInfo();
    info.setSingleTarget(SvnTarget.fromFile(getFile(testProject)));
    SVNRevision localRevision=SVNRevision.create(info.run().getLastChangedRevision());
    SvnLog log=clientManager.getWCClient().getOperationsFactory().createLog();
    log.addRange(SvnRevisionRange.create(SVNRevision.HEAD,SVNRevision.HEAD));
    SVNTeamShareConfig cfg=(SVNTeamShareConfig)testProject.getTestProjectConfig().getTeamShareConfig();
    log.setSingleTarget(SvnTarget.fromURL(SVNURL.parseURIEncoded(cfg.getUrl() + ""String_Node_Str"" + testProject.getName())));
    SVNLogEntry run=log.run();
    logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
    if (run != null) {
      return (int)(run.getRevision() - localRevision.getNumber());
    }
    return 0;
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    throw new SystemException(e.getLocalizedMessage(),e);
  }
}","@Override public int availableUpdatesCount(TestProject testProject) throws SystemException {
  logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
  SVNClientManager clientManager=getSVNClientManager(testProject);
  try {
    File rootDir=new File(testProject.getTestProjectConfig().getProjectPath() + ""String_Node_Str"");
    SVNRevision localRevision=clientManager.getStatusClient().doStatus(rootDir,false).getRevision();
    SVNTeamShareConfig teamShareConfig=(SVNTeamShareConfig)testProject.getTestProjectConfig().getTeamShareConfig();
    String url=teamShareConfig.getUrl();
    SVNRepository repository=SVNRepositoryFactory.create(SVNURL.parseURIEncoded(url));
    ISVNAuthenticationManager authManager=SVNWCUtil.createDefaultAuthenticationManager();
    repository.setAuthenticationManager(authManager);
    repository.getRepositoryUUID(true);
    Collection<SVNLogEntry> logEntries=repository.log(new String[]{""String_Node_Str""},null,localRevision.getNumber(),SVNRevision.HEAD.getNumber(),true,true);
    String currentUser=System.getProperty(""String_Node_Str"");
    if (logEntries != null) {
      int changes=0;
      for (      SVNLogEntry logEntry : logEntries) {
        if (!logEntry.getAuthor().equals(currentUser)) {
          changes++;
        }
      }
      return changes;
    }
    return 0;
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    throw new SystemException(e.getLocalizedMessage(),e);
  }
}",0.334070796460177
145887,"@Override protected Control createContents(Composite parent){
  if (getShell() != null) {
    getShell().setText(translationService.translate(""String_Node_Str""));
  }
  testStructureTree=createTestStructureTree();
  testStructureTree.createUI(parent,testProjectService);
  testStructureTree.getTreeViewer().getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  testStructureTree.getTreeViewer().getTree().addSelectionListener(getTreeSelectionListener());
  for (  ViewerFilter filter : filters) {
    testStructureTree.getTreeViewer().addFilter(filter);
  }
  createButtonBar(parent);
  getButton(IDialogConstants.OK_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_OK);
  getButton(IDialogConstants.CANCEL_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_CANCEL);
  if (selectedTestStrucutures != null) {
    testStructureTree.selectTestStructure((TestStructure)selectedTestStrucutures.getFirstElement());
  }
  return testStructureTree.getTreeViewer().getControl();
}","@Override protected Control createContents(Composite parent){
  if (getShell() != null) {
    getShell().setText(translationService.translate(""String_Node_Str""));
  }
  testStructureTree=createTestStructureTree();
  testStructureTree.createUI(parent,testProjectService);
  testStructureTree.getTreeViewer().getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  testStructureTree.getTreeViewer().getTree().addSelectionListener(getTreeSelectionListener());
  testStructureTree.getTreeViewer().getTree().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.TEST_EXPLORER_TREE);
  for (  ViewerFilter filter : filters) {
    testStructureTree.getTreeViewer().addFilter(filter);
  }
  createButtonBar(parent);
  getButton(IDialogConstants.OK_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_OK);
  getButton(IDialogConstants.CANCEL_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_CANCEL);
  if (selectedTestStrucutures != null) {
    testStructureTree.selectTestStructure((TestStructure)selectedTestStrucutures.getFirstElement());
  }
  return testStructureTree.getTreeViewer().getControl();
}",0.8040117007939824
145888,"/** 
 * Creates a Tree with Testssuites to allow the selection of the parent node.
 */
protected void createLocationTree(){
  Label treeLabel=new Label(getWidgetContainer(),SWT.NORMAL);
  treeLabel.setText(translationService.translate(""String_Node_Str""));
  GridData gdLabel=new GridData();
  gdLabel.verticalAlignment=GridData.BEGINNING;
  treeLabel.setLayoutData(gdLabel);
  testStructureTree=ContextInjectionFactory.make(TestStructureTree.class,context);
  testStructureTree.createUI(getWidgetContainer(),testProjectService);
  GridData gdTree=new GridData(GridData.FILL_BOTH);
  testStructureTree.getTreeViewer().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.NEW_TEST_STRUCTUR_TREE);
  testStructureTree.getTreeViewer().getTree().setLayoutData(gdTree);
  testStructureTree.selectTestStructure(selectedTS);
  testStructureTree.getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      validatePageAndSetComplete();
    }
  }
);
}","/** 
 * Creates a Tree with Testssuites to allow the selection of the parent node.
 */
protected void createLocationTree(){
  Label treeLabel=new Label(getWidgetContainer(),SWT.NORMAL);
  treeLabel.setText(translationService.translate(""String_Node_Str""));
  GridData gdLabel=new GridData();
  gdLabel.verticalAlignment=GridData.BEGINNING;
  treeLabel.setLayoutData(gdLabel);
  testStructureTree=ContextInjectionFactory.make(TestStructureTree.class,context);
  testStructureTree.createUI(getWidgetContainer(),testProjectService);
  testStructureTree.getTreeViewer().getTree().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.TEST_EXPLORER_TREE);
  GridData gdTree=new GridData(GridData.FILL_BOTH);
  testStructureTree.getTreeViewer().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.TEST_EXPLORER_TREE);
  testStructureTree.getTreeViewer().getTree().setLayoutData(gdTree);
  testStructureTree.selectTestStructure(selectedTS);
  testStructureTree.getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      validatePageAndSetComplete();
    }
  }
);
}",0.8297964486790819
145889,"@Override protected Control createContents(Composite parent){
  if (getShell() != null) {
    getShell().setText(translationService.translate(""String_Node_Str""));
  }
  testStructureTree=createTestStructureTree();
  testStructureTree.createUI(parent,testProjectService);
  testStructureTree.getTreeViewer().getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  testStructureTree.getTreeViewer().getTree().addSelectionListener(getTreeSelectionListener());
  for (  ViewerFilter filter : filters) {
    testStructureTree.getTreeViewer().addFilter(filter);
  }
  createButtonBar(parent);
  getButton(IDialogConstants.OK_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_OK);
  getButton(IDialogConstants.CANCEL_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_CANCEL);
  if (selectedTestStrucutures != null) {
    testStructureTree.selectTestStructure((TestStructure)selectedTestStrucutures.getFirstElement());
  }
  return testStructureTree.getTreeViewer().getControl();
}","@Override protected Control createContents(Composite parent){
  if (getShell() != null) {
    getShell().setText(translationService.translate(""String_Node_Str""));
  }
  testStructureTree=createTestStructureTree();
  testStructureTree.createUI(parent,testProjectService);
  testStructureTree.getTreeViewer().getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  testStructureTree.getTreeViewer().getTree().addSelectionListener(getTreeSelectionListener());
  testStructureTree.getTreeViewer().getTree().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.TEST_EXPLORER_TREE);
  for (  ViewerFilter filter : filters) {
    testStructureTree.getTreeViewer().addFilter(filter);
  }
  createButtonBar(parent);
  getButton(IDialogConstants.OK_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_OK);
  getButton(IDialogConstants.CANCEL_ID).setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.SELECTION_DIALOG_TESTCASE_CANCEL);
  if (selectedTestStrucutures != null) {
    testStructureTree.selectTestStructure((TestStructure)selectedTestStrucutures.getFirstElement());
  }
  return testStructureTree.getTreeViewer().getControl();
}",0.8040117007939824
145890,"/** 
 * Creates a Tree with Testssuites to allow the selection of the parent node.
 */
protected void createLocationTree(){
  Label treeLabel=new Label(getWidgetContainer(),SWT.NORMAL);
  treeLabel.setText(translationService.translate(""String_Node_Str""));
  GridData gdLabel=new GridData();
  gdLabel.verticalAlignment=GridData.BEGINNING;
  treeLabel.setLayoutData(gdLabel);
  testStructureTree=ContextInjectionFactory.make(TestStructureTree.class,context);
  testStructureTree.createUI(getWidgetContainer(),testProjectService);
  GridData gdTree=new GridData(GridData.FILL_BOTH);
  testStructureTree.getTreeViewer().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.NEW_TEST_STRUCTUR_TREE);
  testStructureTree.getTreeViewer().getTree().setLayoutData(gdTree);
  testStructureTree.selectTestStructure(selectedTS);
  testStructureTree.getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      validatePageAndSetComplete();
    }
  }
);
}","/** 
 * Creates a Tree with Testssuites to allow the selection of the parent node.
 */
protected void createLocationTree(){
  Label treeLabel=new Label(getWidgetContainer(),SWT.NORMAL);
  treeLabel.setText(translationService.translate(""String_Node_Str""));
  GridData gdLabel=new GridData();
  gdLabel.verticalAlignment=GridData.BEGINNING;
  treeLabel.setLayoutData(gdLabel);
  testStructureTree=ContextInjectionFactory.make(TestStructureTree.class,context);
  testStructureTree.createUI(getWidgetContainer(),testProjectService);
  testStructureTree.getTreeViewer().getTree().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.TEST_EXPLORER_TREE);
  GridData gdTree=new GridData(GridData.FILL_BOTH);
  testStructureTree.getTreeViewer().setData(CustomWidgetIdConstants.TEST_EDITOR_WIDGET_ID_SWT_BOT_KEY,CustomWidgetIdConstants.TEST_EXPLORER_TREE);
  testStructureTree.getTreeViewer().getTree().setLayoutData(gdTree);
  testStructureTree.selectTestStructure(selectedTS);
  testStructureTree.getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      validatePageAndSetComplete();
    }
  }
);
}",0.8297964486790819
145891,"@Override public int availableUpdatesCount(TestProject testProject) throws SystemException {
  SVNClientManager clientManager=getSVNClientManager(testProject);
  try {
    SvnGetInfo info=clientManager.getWCClient().getOperationsFactory().createGetInfo();
    info.setSingleTarget(SvnTarget.fromFile(getFile(testProject)));
    SVNRevision localRevision=SVNRevision.create(info.run().getLastChangedRevision());
    SvnLog log=clientManager.getWCClient().getOperationsFactory().createLog();
    log.addRange(SvnRevisionRange.create(SVNRevision.HEAD,SVNRevision.HEAD));
    SVNTeamShareConfig cfg=(SVNTeamShareConfig)testProject.getTestProjectConfig().getTeamShareConfig();
    log.setSingleTarget(SvnTarget.fromURL(SVNURL.parseURIEncoded(cfg.getUrl() + ""String_Node_Str"" + testProject.getName())));
    SVNLogEntry run=log.run();
    return (int)(run.getRevision() - localRevision.getNumber());
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    throw new SystemException(e.getLocalizedMessage(),e);
  }
}","@Override public int availableUpdatesCount(TestProject testProject) throws SystemException {
  logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
  SVNClientManager clientManager=getSVNClientManager(testProject);
  try {
    SvnGetInfo info=clientManager.getWCClient().getOperationsFactory().createGetInfo();
    info.setSingleTarget(SvnTarget.fromFile(getFile(testProject)));
    SVNRevision localRevision=SVNRevision.create(info.run().getLastChangedRevision());
    SvnLog log=clientManager.getWCClient().getOperationsFactory().createLog();
    log.addRange(SvnRevisionRange.create(SVNRevision.HEAD,SVNRevision.HEAD));
    SVNTeamShareConfig cfg=(SVNTeamShareConfig)testProject.getTestProjectConfig().getTeamShareConfig();
    log.setSingleTarget(SvnTarget.fromURL(SVNURL.parseURIEncoded(cfg.getUrl() + ""String_Node_Str"" + testProject.getName())));
    SVNLogEntry run=log.run();
    logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
    return (int)(run.getRevision() - localRevision.getNumber());
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    throw new SystemException(e.getLocalizedMessage(),e);
  }
}",0.9242560865644724
145892,"@Override public String update(TestStructure testStructure,TranslationService translationService) throws SystemException {
  String resultState=""String_Node_Str"";
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + testStructure.getFullName());
  }
  try {
    TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNUpdateClient updateClient=clientManager.getUpdateClient();
    File checkoutFile=getFile(testStructure);
    long revisionNumber=updateClient.doUpdate(checkoutFile,SVNRevision.HEAD,SVNDepth.INFINITY,true,true);
    resultState=translationService.translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + revisionNumber;
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + revisionNumber);
    }
    revertMemoryModel(testStructure);
    SVNStatusClient statusClient=clientManager.getStatusClient();
    List<String> conflicts=checkWcState(statusClient,checkoutFile,revisionNumber);
    if (!conflicts.isEmpty()) {
      throw new SystemException(createConflictErrorMessage(conflicts,translationService));
    }
    fireEvents(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  return resultState;
}","@Override public String update(TestStructure testStructure,TranslationService translationService) throws SystemException {
  String resultState=""String_Node_Str"";
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  try {
    TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNUpdateClient updateClient=clientManager.getUpdateClient();
    File checkoutFile=getFile(testStructure);
    long revisionNumber=updateClient.doUpdate(checkoutFile,SVNRevision.HEAD,SVNDepth.INFINITY,true,true);
    resultState=translationService.translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + revisionNumber;
    logger.info(""String_Node_Str"" + revisionNumber);
    revertMemoryModel(testStructure);
    SVNStatusClient statusClient=clientManager.getStatusClient();
    List<String> conflicts=checkWcState(statusClient,checkoutFile,revisionNumber);
    if (!conflicts.isEmpty()) {
      throw new SystemException(createConflictErrorMessage(conflicts,translationService));
    }
    fireEvents(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  return resultState;
}",0.8976377952755905
145893,"@Override public String getStatus(TestStructure testStructure,TranslationService translationService) throws SystemException {
  SVNClientManager clientManager=getSVNClientManager(testStructure.getRootElement());
  SVNStatusClient statusClient=clientManager.getStatusClient();
  ISVNStatusHandler statusHandler=new ISVNStatusHandler(){
    @Override public void handleStatus(    SVNStatus status) throws SVNException {
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"" + status.getNodeStatus().toString() + ""String_Node_Str""+ status.getNodeStatus().getID()+ ""String_Node_Str""+ status.getFile().getAbsolutePath());
      }
      StringBuilder lcStatus=new StringBuilder(status.getFile().getAbsolutePath());
      lcStatus.append(""String_Node_Str"");
      lcStatus.append(status.getNodeStatus().toString());
      lcStatus.append(""String_Node_Str"");
      lcStatus.append(status.getNodeStatus().getID());
      lcStatus.append(""String_Node_Str"");
      addStatusInformation(lcStatus.toString());
    }
  }
;
  svnStatus=new StringBuilder(""String_Node_Str"");
  List<String> changeLists=new ArrayList<String>();
  try {
    statusClient.doStatus(getFile(testStructure),SVNRevision.HEAD,SVNDepth.INFINITY,true,true,true,false,statusHandler,changeLists);
    return svnStatus.toString();
  }
 catch (  SVNException e) {
    logger.error(e.getMessage());
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  Exception e) {
    logger.error(e.getMessage());
    throw new SystemException(e.getMessage(),e);
  }
}","@Override public String getStatus(TestStructure testStructure,TranslationService translationService) throws SystemException {
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  SVNClientManager clientManager=getSVNClientManager(testStructure.getRootElement());
  SVNStatusClient statusClient=clientManager.getStatusClient();
  ISVNStatusHandler statusHandler=new ISVNStatusHandler(){
    @Override public void handleStatus(    SVNStatus status) throws SVNException {
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"" + status.getNodeStatus().toString() + ""String_Node_Str""+ status.getNodeStatus().getID()+ ""String_Node_Str""+ status.getFile().getAbsolutePath());
      }
      StringBuilder lcStatus=new StringBuilder(status.getFile().getAbsolutePath());
      lcStatus.append(""String_Node_Str"");
      lcStatus.append(status.getNodeStatus().toString());
      lcStatus.append(""String_Node_Str"");
      lcStatus.append(status.getNodeStatus().getID());
      lcStatus.append(""String_Node_Str"");
      addStatusInformation(lcStatus.toString());
    }
  }
;
  svnStatus=new StringBuilder(""String_Node_Str"");
  List<String> changeLists=new ArrayList<String>();
  String localPathInProject=""String_Node_Str"";
  if (!testStructure.equals(testStructure.getRootElement())) {
    localPathInProject=""String_Node_Str"" + testStructure.getFullName().replace('.','/');
  }
  String pathInProject=new File(testStructure.getRootElement().getTestProjectConfig().getProjectPath()).getAbsoluteFile() + localPathInProject;
  try {
    statusClient.doStatus(new File(pathInProject),SVNRevision.HEAD,SVNDepth.INFINITY,true,true,true,false,statusHandler,changeLists);
    logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
    return svnStatus.toString();
  }
 catch (  SVNException e) {
    logger.error(e.getMessage());
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  Exception e) {
    logger.error(e.getMessage());
    throw new SystemException(e.getMessage(),e);
  }
}",0.8512931034482759
145894,"@Override public void delete(TestStructure testStructure,TranslationService translationService) throws SystemException {
  SVNClientManager clientManager=getSVNClientManager(testStructure.getRootElement());
  SVNStatusClient statusClient=clientManager.getStatusClient();
  final SVNWCClient wcClient=clientManager.getWCClient();
  ISVNStatusHandler statusHandler=new ISVNStatusHandler(){
    @Override public void handleStatus(    SVNStatus status) throws SVNException {
      if (status.getFile().isDirectory()) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + status.getNodeStatus().toString() + ""String_Node_Str""+ status.getFile().getAbsolutePath());
        }
        wcClient.doDelete(status.getFile(),true,false,false);
      }
    }
  }
;
  List<String> changeLists=new ArrayList<String>();
  try {
    statusClient.doStatus(getFile(testStructure),SVNRevision.HEAD,SVNDepth.FILES,true,true,true,false,statusHandler,changeLists);
    updateSvnstate(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage());
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  Exception e) {
    logger.error(e);
    throw new SystemException(e.getMessage());
  }
}","@Override public void delete(TestStructure testStructure,TranslationService translationService) throws SystemException {
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  SVNClientManager clientManager=getSVNClientManager(testStructure.getRootElement());
  SVNStatusClient statusClient=clientManager.getStatusClient();
  final SVNWCClient wcClient=clientManager.getWCClient();
  ISVNStatusHandler statusHandler=new ISVNStatusHandler(){
    @Override public void handleStatus(    SVNStatus status) throws SVNException {
      if (status.getFile().isDirectory()) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + status.getNodeStatus().toString() + ""String_Node_Str""+ status.getFile().getAbsolutePath());
        }
        wcClient.doDelete(status.getFile(),true,false,false);
      }
    }
  }
;
  List<String> changeLists=new ArrayList<String>();
  try {
    statusClient.doStatus(getFile(testStructure),SVNRevision.HEAD,SVNDepth.FILES,true,true,true,false,statusHandler,changeLists);
    updateSvnstate(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage());
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  Exception e) {
    logger.error(e);
    throw new SystemException(e.getMessage());
  }
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
}",0.9377289377289376
145895,"@Override public void share(TestProject testProject,TranslationService translationService,String svnComment) throws SystemException {
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + testProject.getFullName());
  }
  String projectName=testProject.getName();
  try {
    TeamShareConfig teamShareConfig=testProject.getTestProjectConfig().getTeamShareConfig();
    String url=((SVNTeamShareConfig)teamShareConfig).getUrl() + ""String_Node_Str"" + projectName;
    SVNClientManager clientManager=getSVNClientManager(testProject);
    TestProjectConfig testProjectConfig=testProject.getTestProjectConfig();
    String projectPath=testProjectConfig.getProjectPath();
    SVNURL svnUrl;
    if (url.startsWith(""String_Node_Str"")) {
      svnUrl=SVNURL.fromFile(new File(url));
    }
 else {
      svnUrl=SVNURL.parseURIEncoded(url);
    }
    clientManager.getCommitClient().setEventHandler(new SVNLoggingEventHandler(listener,logger));
    setIgnoreList(clientManager);
    SVNCommitInfo doImport=clientManager.getCommitClient().doImport(new File(projectPath),svnUrl,svnComment,new SVNProperties(),true,false,SVNDepth.INFINITY);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + doImport);
    }
    FileUtils.deleteDirectory(new File(projectPath));
    SVNUpdateClient updateClient=clientManager.getUpdateClient();
    long doCheckout=updateClient.doCheckout(svnUrl,new File(testProject.getTestProjectConfig().getProjectPath()),SVNRevision.HEAD,SVNRevision.HEAD,SVNDepth.INFINITY,false);
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + doCheckout);
    }
  }
 catch (  SVNException e) {
    logger.error(e.getMessage());
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  Exception e) {
    logger.error(e.getMessage());
    throw new SystemException(e.getMessage(),e);
  }
}","@Override public void share(TestProject testProject,TranslationService translationService,String svnComment) throws SystemException {
  logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
  String projectName=testProject.getName();
  try {
    TeamShareConfig teamShareConfig=testProject.getTestProjectConfig().getTeamShareConfig();
    String url=((SVNTeamShareConfig)teamShareConfig).getUrl() + ""String_Node_Str"" + projectName;
    SVNClientManager clientManager=getSVNClientManager(testProject);
    TestProjectConfig testProjectConfig=testProject.getTestProjectConfig();
    String projectPath=testProjectConfig.getProjectPath();
    SVNURL svnUrl;
    if (url.startsWith(""String_Node_Str"")) {
      svnUrl=SVNURL.fromFile(new File(url));
    }
 else {
      svnUrl=SVNURL.parseURIEncoded(url);
    }
    clientManager.getCommitClient().setEventHandler(new SVNLoggingEventHandler(listener,logger));
    setIgnoreList(clientManager);
    SVNCommitInfo doImport=clientManager.getCommitClient().doImport(new File(projectPath),svnUrl,svnComment,new SVNProperties(),true,false,SVNDepth.INFINITY);
    logger.trace(""String_Node_Str"" + doImport);
    FileUtils.deleteDirectory(new File(projectPath));
    SVNUpdateClient updateClient=clientManager.getUpdateClient();
    long doCheckout=updateClient.doCheckout(svnUrl,new File(testProject.getTestProjectConfig().getProjectPath()),SVNRevision.HEAD,SVNRevision.HEAD,SVNDepth.INFINITY,false);
    logger.trace(""String_Node_Str"" + doCheckout);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage());
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  Exception e) {
    logger.error(e.getMessage());
    throw new SystemException(e.getMessage(),e);
  }
  logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
}",0.911439114391144
145896,"@Override public void checkout(TestProject testProject,TranslationService translationService) throws SystemException, TeamAuthentificationException {
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + testProject.getFullName());
  }
  String projectName=testProject.getName();
  try {
    TeamShareConfig teamShareConfig=testProject.getTestProjectConfig().getTeamShareConfig();
    String url=((SVNTeamShareConfig)teamShareConfig).getUrl() + ""String_Node_Str"" + projectName;
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNUpdateClient updateClient=clientManager.getUpdateClient();
    SVNURL svnUrl;
    if (url.startsWith(""String_Node_Str"")) {
      svnUrl=SVNURL.fromFile(new File(url));
    }
 else {
      svnUrl=SVNURL.parseURIEncoded(url);
    }
    updateClient.setEventHandler(new SVNLoggingEventHandler(listener,logger));
    File dstPath=new File(testProject.getTestProjectConfig().getProjectPath()).getParentFile();
    long doCheckout=updateClient.doCheckout(svnUrl,new File(dstPath,testProject.getName()),SVNRevision.HEAD,SVNRevision.HEAD,SVNDepth.INFINITY,true);
    logger.info(""String_Node_Str"" + doCheckout);
  }
 catch (  SVNCancelException canExp) {
    File dirtyPrjPath=new File(testProject.getTestProjectConfig().getProjectPath());
    logger.info(""String_Node_Str"");
    try {
      FileUtils.deleteDirectory(dirtyPrjPath);
    }
 catch (    IOException e) {
      logger.error(e.getMessage(),e);
    }
    logger.info(""String_Node_Str"" + dirtyPrjPath);
  }
catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    int errorCode=e.getErrorMessage().getErrorCode().getCode();
    if ((errorCode == AUTHENTICATION_REQUIRED) || (errorCode == CONNECTION_REFUSED || errorCode == AUTHENTICATION_REQUIRED_2)) {
      throw new TeamAuthentificationException(""String_Node_Str"",e);
    }
    throw new SystemException(message,e);
  }
}","@Override public void checkout(TestProject testProject,TranslationService translationService) throws SystemException, TeamAuthentificationException {
  logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
  String projectName=testProject.getName();
  try {
    TeamShareConfig teamShareConfig=testProject.getTestProjectConfig().getTeamShareConfig();
    String url=((SVNTeamShareConfig)teamShareConfig).getUrl() + ""String_Node_Str"" + projectName;
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNUpdateClient updateClient=clientManager.getUpdateClient();
    SVNURL svnUrl;
    if (url.startsWith(""String_Node_Str"")) {
      svnUrl=SVNURL.fromFile(new File(url));
    }
 else {
      svnUrl=SVNURL.parseURIEncoded(url);
    }
    updateClient.setEventHandler(new SVNLoggingEventHandler(listener,logger));
    File dstPath=new File(testProject.getTestProjectConfig().getProjectPath()).getParentFile();
    long doCheckout=updateClient.doCheckout(svnUrl,new File(dstPath,testProject.getName()),SVNRevision.HEAD,SVNRevision.HEAD,SVNDepth.INFINITY,true);
    logger.info(""String_Node_Str"" + doCheckout);
  }
 catch (  SVNCancelException canExp) {
    File dirtyPrjPath=new File(testProject.getTestProjectConfig().getProjectPath());
    logger.info(""String_Node_Str"");
    try {
      FileUtils.deleteDirectory(dirtyPrjPath);
    }
 catch (    IOException e) {
      logger.error(e.getMessage(),e);
    }
    logger.info(""String_Node_Str"" + dirtyPrjPath);
  }
catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    int errorCode=e.getErrorMessage().getErrorCode().getCode();
    if ((errorCode == AUTHENTICATION_REQUIRED) || (errorCode == CONNECTION_REFUSED || errorCode == AUTHENTICATION_REQUIRED_2)) {
      throw new TeamAuthentificationException(""String_Node_Str"",e);
    }
    throw new SystemException(message,e);
  }
  logger.trace(""String_Node_Str"" + testProject.getFullName() + ""String_Node_Str"");
}",0.958041958041958
145897,"@Override public void removeAdditonalFile(TestStructure testStructure,String fileName) throws SystemException {
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str""+ fileName);
  }
  TestProject testProject=testStructure.getRootElement();
  SVNWCClient wcClient=getSVNClientManager(testProject).getWCClient();
  File file=new File(getFile(testStructure),fileName);
  if (!file.exists()) {
    logger.info(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  try {
    final SVNStatus info=getSVNClientManager(testProject).getStatusClient().doStatus(file,false);
    if (info.isVersioned()) {
      wcClient.doDelete(file,true,false,false);
    }
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
  }
}","@Override public void removeAdditonalFile(TestStructure testStructure,String fileName) throws SystemException {
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str""+ fileName);
  TestProject testProject=testStructure.getRootElement();
  SVNWCClient wcClient=getSVNClientManager(testProject).getWCClient();
  File file=new File(getFile(testStructure),fileName);
  if (!file.exists()) {
    logger.info(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  try {
    final SVNStatus info=getSVNClientManager(testProject).getStatusClient().doStatus(file,false);
    if (info.isVersioned()) {
      wcClient.doDelete(file,true,false,false);
    }
  }
 catch (  Exception e) {
    logger.warn(e.getMessage());
  }
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
}",0.9094247246022032
145898,"@Override public void revert(TestStructure testStructure,TranslationService translationService) throws SystemException {
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + testStructure.getFullName());
  }
  try {
    TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File fileToRevert=getFile(testStructure);
    File[] filesToReverted=new File[1];
    filesToReverted[0]=fileToRevert;
    String status=getStatus(testStructure,translationService);
    String[] splits=status.split(""String_Node_Str"");
    String searchString=""String_Node_Str"";
    wcClient.doRevert(filesToReverted,SVNDepth.INFINITY,new ArrayList<String>());
    for (    String split : splits) {
      if (split.contains(searchString)) {
        String fileName=split.substring(0,split.lastIndexOf(searchString) - 1);
        File fileToDeleteLc=new File(fileName);
        if (fileToDeleteLc.isDirectory()) {
          if (eventBroker != null) {
            String subPath=Paths.get(testStructure.getUrl().toURI()).relativize(fileToDeleteLc.toPath()).toString();
            String deletedTSFullName=testStructure.getFullName() + ""String_Node_Str"" + subPath.replaceAll(File.pathSeparator,""String_Node_Str"");
            logger.trace(""String_Node_Str"" + deletedTSFullName);
            eventBroker.send(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_DELETED,deletedTSFullName);
          }
          Files.walkFileTree(fileToDeleteLc.toPath(),org.testeditor.core.util.FileUtils.getDeleteRecursiveVisitor());
        }
 else {
          if (fileToDeleteLc.exists()) {
            if (!fileToDeleteLc.delete()) {
              throw new SystemException(""String_Node_Str"" + fileName);
            }
          }
        }
      }
    }
    revertMemoryModel(testStructure);
    updateSvnstate(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  IOException|URISyntaxException e) {
    logger.error(e.getMessage(),e);
    throw new SystemException(e.getLocalizedMessage(),e);
  }
}","@Override public void revert(TestStructure testStructure,TranslationService translationService) throws SystemException {
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  try {
    TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File fileToRevert=getFile(testStructure);
    File[] filesToReverted=new File[1];
    filesToReverted[0]=fileToRevert;
    String status=getStatus(testStructure,translationService);
    String[] splits=status.split(""String_Node_Str"");
    String searchString=""String_Node_Str"";
    wcClient.doRevert(filesToReverted,SVNDepth.INFINITY,new ArrayList<String>());
    for (    String split : splits) {
      if (split.contains(searchString)) {
        String fileName=split.substring(0,split.lastIndexOf(searchString) - 1);
        File fileToDeleteLc=new File(fileName);
        if (fileToDeleteLc.isDirectory()) {
          if (eventBroker != null) {
            String subPath=Paths.get(testStructure.getUrl().toURI()).relativize(fileToDeleteLc.toPath()).toString();
            String deletedTSFullName=testStructure.getFullName() + ""String_Node_Str"" + subPath.replaceAll(File.pathSeparator,""String_Node_Str"");
            logger.trace(""String_Node_Str"" + deletedTSFullName);
            eventBroker.send(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_DELETED,deletedTSFullName);
          }
          Files.walkFileTree(fileToDeleteLc.toPath(),org.testeditor.core.util.FileUtils.getDeleteRecursiveVisitor());
        }
 else {
          if (fileToDeleteLc.exists()) {
            if (!fileToDeleteLc.delete()) {
              throw new SystemException(""String_Node_Str"" + fileName);
            }
          }
        }
      }
    }
    revertMemoryModel(testStructure);
    updateSvnstate(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
catch (  IOException|URISyntaxException e) {
    logger.error(e.getMessage(),e);
    throw new SystemException(e.getLocalizedMessage(),e);
  }
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
}",0.962914485165794
145899,"/** 
 * Creates an instance of the svn client manager to work with svn.
 * @param testProject used to identify the svn.
 * @return client to access the svn.
 */
private SVNClientManager getSVNClientManager(TestProject testProject){
  String username=((SVNTeamShareConfig)(testProject.getTestProjectConfig().getTeamShareConfig())).getUserName();
  String password=((SVNTeamShareConfig)(testProject.getTestProjectConfig().getTeamShareConfig())).getPassword();
  ISVNAuthenticationManager authManager;
  if ((username == null || username.equals(""String_Node_Str"")) || (password == null || password.equals(""String_Node_Str""))) {
    authManager=SVNWCUtil.createDefaultAuthenticationManager();
  }
 else {
    authManager=SVNWCUtil.createDefaultAuthenticationManager(username,password);
  }
  return SVNClientManager.newInstance(SVNWCUtil.createDefaultOptions(true),authManager);
}","/** 
 * Creates an instance of the svn client manager to work with svn.
 * @param testProject used to identify the svn.
 * @return client to access the svn.
 */
private SVNClientManager getSVNClientManager(TestProject testProject){
  logger.trace(""String_Node_Str"");
  String username=((SVNTeamShareConfig)(testProject.getTestProjectConfig().getTeamShareConfig())).getUserName();
  String password=((SVNTeamShareConfig)(testProject.getTestProjectConfig().getTeamShareConfig())).getPassword();
  ISVNAuthenticationManager authManager;
  if ((username == null || username.equals(""String_Node_Str"")) || (password == null || password.equals(""String_Node_Str""))) {
    authManager=SVNWCUtil.createDefaultAuthenticationManager();
  }
 else {
    authManager=SVNWCUtil.createDefaultAuthenticationManager(username,password);
  }
  SVNClientManager clientManger=SVNClientManager.newInstance(SVNWCUtil.createDefaultOptions(true),authManager);
  logger.trace(""String_Node_Str"" + clientManger);
  return clientManger;
}",0.92299522039299
145900,"/** 
 * Fires the events about updating a teststructure. if the event broker is null, nothing is done.
 * @param testStructure used in the vents to notify the clients.
 */
private void fireEvents(TestStructure testStructure){
  if (eventBroker != null) {
    String eventTopic=TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_MODIFY;
    eventBroker.post(eventTopic,testStructure.getFullName());
    eventBroker.post(TestEditorCoreEventConstants.TESTSTRUCTURE_STATE_RESET,testStructure.getRootElement().getFullName());
  }
}","/** 
 * Fires the events about updating a teststructure. if the event broker is null, nothing is done.
 * @param testStructure used in the vents to notify the clients.
 */
private void fireEvents(TestStructure testStructure){
  if (eventBroker != null) {
    String eventTopic=TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_MODIFY;
    eventBroker.post(eventTopic,testStructure.getFullName());
    eventBroker.post(TestEditorCoreEventConstants.TESTSTRUCTURE_STATE_RESET,testStructure.getRootElement().getFullName());
    eventBroker.post(TestEditorCoreEventConstants.TEAMSHARE_UPDATE,testStructure.getRootElement().getFullName());
  }
}",0.9048414023372288
145901,"@Override public void rename(TestStructure testStructure,String newName,TranslationService translationService) throws SystemException {
  SVNClientManager clientManager=getSVNClientManager(testStructure.getRootElement());
  SVNMoveClient client=clientManager.getMoveClient();
  File src=getFile(testStructure);
  File dest=new File(src.getParentFile().getAbsolutePath() + File.separator + newName);
  logger.trace(""String_Node_Str"" + src + ""String_Node_Str""+ dest);
  try {
    client.doMove(src,dest);
    updateSvnstate(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
}","@Override public void rename(TestStructure testStructure,String newName,TranslationService translationService) throws SystemException {
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  SVNClientManager clientManager=getSVNClientManager(testStructure.getRootElement());
  SVNMoveClient client=clientManager.getMoveClient();
  File src=getFile(testStructure);
  File dest=new File(src.getParentFile().getAbsolutePath() + File.separator + newName);
  logger.trace(""String_Node_Str"" + src + ""String_Node_Str""+ dest);
  try {
    client.doMove(src,dest);
    updateSvnstate(testStructure);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
}",0.8941469489414695
145902,"@Override public String approve(TestStructure testStructure,TranslationService translationService,String svnComment) throws SystemException {
  String resultState=""String_Node_Str"";
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + testStructure.getFullName());
  }
  try {
    TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File checkinFile=getFile(testStructure);
    boolean isDir=false;
    if (checkinFile.isDirectory()) {
      isDir=true;
    }
    try {
      wcClient.doAdd(checkinFile,false,isDir,true,SVNDepth.INFINITY,true,true);
    }
 catch (    Exception e) {
      logger.warn(e.getMessage(),e);
    }
    SVNCommitClient cc=clientManager.getCommitClient();
    cc.setEventHandler(new SVNLoggingEventHandler(listener,logger));
    SVNCommitInfo doCommit=cc.doCommit(new File[]{checkinFile},false,svnComment,null,null,false,true,SVNDepth.INFINITY);
    resultState=translationService.translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + doCommit.getNewRevision();
    updateSvnstate(testStructure);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + doCommit.toString());
    }
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message);
  }
  return resultState;
}","@Override public String approve(TestStructure testStructure,TranslationService translationService,String svnComment) throws SystemException {
  String resultState=""String_Node_Str"";
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  try {
    TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File checkinFile=getFile(testStructure);
    boolean isDir=false;
    if (checkinFile.isDirectory()) {
      isDir=true;
    }
    try {
      wcClient.doAdd(checkinFile,false,isDir,true,SVNDepth.INFINITY,true,true);
    }
 catch (    Exception e) {
      logger.warn(e.getMessage(),e);
    }
    SVNCommitClient cc=clientManager.getCommitClient();
    cc.setEventHandler(new SVNLoggingEventHandler(listener,logger));
    SVNCommitInfo doCommit=cc.doCommit(new File[]{checkinFile},false,svnComment,null,null,false,true,SVNDepth.INFINITY);
    resultState=translationService.translate(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + doCommit.getNewRevision();
    updateSvnstate(testStructure);
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + doCommit.toString());
    }
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message);
  }
  logger.trace(""String_Node_Str"" + testStructure.getFullName() + ""String_Node_Str"");
  return resultState;
}",0.9440052700922266
145903,"@Override public void addAdditonalFile(TestStructure testStructure,String fileName) throws SystemException {
  if (logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + testStructure.getFullName());
  }
  TestProject testProject=testStructure.getRootElement();
  SVNWCClient wcClient=getSVNClientManager(testProject).getWCClient();
  File file=new File(getFile(testStructure),fileName);
  try {
    final SVNStatus info=getSVNClientManager(testProject).getStatusClient().doStatus(file,false);
    if (!info.isVersioned()) {
      wcClient.doAdd(file,false,false,false,SVNDepth.INFINITY,true,true);
    }
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
  }
}","@Override public void addAdditonalFile(TestStructure testStructure,String fileName) throws SystemException {
  logger.trace(""String_Node_Str"" + testStructure.getFullName());
  TestProject testProject=testStructure.getRootElement();
  SVNWCClient wcClient=getSVNClientManager(testProject).getWCClient();
  File file=new File(getFile(testStructure),fileName);
  try {
    final SVNStatus info=getSVNClientManager(testProject).getStatusClient().doStatus(file,false);
    if (!info.isVersioned()) {
      wcClient.doAdd(file,false,false,false,SVNDepth.INFINITY,true,true);
    }
  }
 catch (  Exception e) {
    logger.warn(e.getMessage(),e);
  }
  logger.trace(""String_Node_Str"" + testStructure.getFullName());
}",0.9093525179856116
145904,"@Override public void addChild(TestStructure testStructureChild,TranslationService translationService) throws SystemException {
  SVNClientManager clientManager=getSVNClientManager(testStructureChild.getRootElement());
  SVNWCClient wcClient=clientManager.getWCClient();
  File file=getFile(testStructureChild);
  try {
    wcClient.doAdd(file,true,false,false,SVNDepth.FILES,false,false);
    updateSvnstate(testStructureChild);
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
    }
  }
 catch (  SVNException e) {
    logger.error(e.getMessage());
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
}","@Override public void addChild(TestStructure testStructureChild,TranslationService translationService) throws SystemException {
  logger.trace(""String_Node_Str"" + testStructureChild.getFullName() + ""String_Node_Str"");
  SVNClientManager clientManager=getSVNClientManager(testStructureChild.getRootElement());
  SVNWCClient wcClient=clientManager.getWCClient();
  File file=getFile(testStructureChild);
  try {
    logger.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
    wcClient.doAdd(file,true,false,false,SVNDepth.FILES,false,false);
    updateSvnstate(testStructureChild);
  }
 catch (  SVNException e) {
    logger.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  logger.trace(""String_Node_Str"" + testStructureChild.getFullName() + ""String_Node_Str"");
}",0.7576323987538941
145905,"/** 
 * Executes the new TestStructure actions. Known implementations for TestCase, TestSuite, TestScenario and Testproject.
 * @param teTranslationService internationalization Service
 * @param workbench Workbench-window
 * @param eventBroker {@link IEventBroker}
 * @param shell active shell
 * @param context the actual Eclipse Context.
 * @return new created TestStructure.
 */
@Execute public TestStructure execute(TestEditorTranslationService teTranslationService,IWorkbench workbench,IEventBroker eventBroker,@Named(IServiceConstants.ACTIVE_SHELL) Shell shell,IEclipseContext context){
  IStructuredSelection selection=(IStructuredSelection)context.get(TestEditorConstants.SELECTED_TEST_COMPONENTS);
  try {
    selectedTestStrucutureElement=findSelectedParent(selection);
  }
 catch (  SystemException exp) {
    MessageDialog.openError(shell,""String_Node_Str"",exp.getLocalizedMessage());
  }
  NewTestStructureWizard nwiz=getWizard(context);
  nwiz.setWindowTitle(teTranslationService.translate(getWindowTitle()));
  AbstractTestStructureWizardPage newTestPage=getNewTestStructureWizardPage(selectedTestStrucutureElement,context);
  nwiz.addPage(newTestPage);
  WizardDialog wizardDialog=new WizardDialog(shell,nwiz);
  TestStructure testStructure=null;
  if (wizardDialog.open() == Window.OK) {
    newTestStructureName=nwiz.getNewTestStructureName();
    selectedTestStrucutureElement=nwiz.getNewTestStructureParent();
    testStructure=createNewTestStructure(context);
    if (testStructure != null) {
      testStructure.setName(newTestStructureName);
      addChild(testStructure);
      try {
        createAndOpenTestStructure(testStructure,context);
        addTestStructureLocalToRepository(testStructure,shell);
        eventBroker.send(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_ADD,testStructure.getFullName());
        eventBroker.send(TestEditorUIEventConstants.ACTIVE_TESTFLOW_EDITOR_CHANGED,testStructure);
      }
 catch (      SystemException e) {
        LOGGER.error(e.getMessage(),e);
        MessageDialog.openError(shell,""String_Node_Str"",e.getMessage());
      }
    }
  }
  return testStructure;
}","/** 
 * Executes the new TestStructure actions. Known implementations for TestCase, TestSuite, TestScenario and Testproject.
 * @param teTranslationService internationalization Service
 * @param workbench Workbench-window
 * @param eventBroker {@link IEventBroker}
 * @param shell active shell
 * @param context the actual Eclipse Context.
 * @return new created TestStructure.
 */
@Execute public TestStructure execute(TestEditorTranslationService teTranslationService,IWorkbench workbench,IEventBroker eventBroker,@Named(IServiceConstants.ACTIVE_SHELL) Shell shell,IEclipseContext context){
  IStructuredSelection selection=(IStructuredSelection)context.get(TestEditorConstants.SELECTED_TEST_COMPONENTS);
  try {
    selectedTestStrucutureElement=findSelectedParent(selection);
  }
 catch (  SystemException exp) {
    MessageDialog.openError(shell,""String_Node_Str"",exp.getLocalizedMessage());
  }
  NewTestStructureWizard nwiz=getWizard(context);
  nwiz.setWindowTitle(teTranslationService.translate(getWindowTitle()));
  AbstractTestStructureWizardPage newTestPage=getNewTestStructureWizardPage(selectedTestStrucutureElement,context);
  nwiz.addPage(newTestPage);
  WizardDialog wizardDialog=new WizardDialog(shell,nwiz);
  TestStructure testStructure=null;
  if (wizardDialog.open() == Window.OK) {
    newTestStructureName=nwiz.getNewTestStructureName();
    selectedTestStrucutureElement=nwiz.getNewTestStructureParent();
    testStructure=createNewTestStructure(context);
    if (testStructure != null) {
      testStructure.setName(newTestStructureName);
      addChild(testStructure);
      try {
        createAndOpenTestStructure(testStructure,context);
        eventBroker.send(TestEditorCoreEventConstants.TESTSTRUCTURE_MODEL_CHANGED_UPDATE_BY_ADD,testStructure.getFullName());
        eventBroker.send(TestEditorUIEventConstants.ACTIVE_TESTFLOW_EDITOR_CHANGED,testStructure);
      }
 catch (      SystemException e) {
        LOGGER.error(e.getMessage(),e);
        MessageDialog.openError(shell,""String_Node_Str"",e.getMessage());
      }
    }
  }
  return testStructure;
}",0.9849269901083372
145906,"/** 
 * Initializes Cron Jobs of the Test-Editor. This jobs run in the background and can send events to update the ui.
 */
protected void initTestEditorCronJobs(){
  TeamModificationCheckJob job=ContextInjectionFactory.make(TeamModificationCheckJob.class,context);
  Thread jobRunner=new Thread(job,""String_Node_Str"");
  jobRunner.start();
  jobs.add(jobRunner);
  LOGGER.info(""String_Node_Str"");
}","/** 
 * Initializes Cron Jobs of the Test-Editor. This jobs run in the background and can send events to update the ui.
 */
protected void initTestEditorCronJobs(){
}",0.5876106194690266
145907,"/** 
 * Init Test Object TestExplorer with the Eclipse Context.
 */
@Before public void initOUT(){
  context=EclipseContextFactory.create();
  context.set(MPart.class,null);
  context.set(ECommandService.class,new ECommandService(){
    @Override public Command getCommand(    String commandId){
      return null;
    }
    @Override public Category getCategory(    String categoryId){
      return null;
    }
    @Override public Command defineCommand(    String id,    String name,    String description,    Category category,    IParameter[] parameters){
      return null;
    }
    @Override public Category defineCategory(    String id,    String name,    String description){
      return null;
    }
    @Override public ParameterizedCommand createCommand(    String id,    Map parameters){
      return null;
    }
  }
);
  context.set(IEventBroker.class,new EventBrokerMock(){
    @Override public boolean send(    String topic,    Object data){
      return true;
    }
    @Override public boolean post(    String topic,    Object data){
      return true;
    }
  }
);
  context.set(EPartService.class,getPartServiceMock());
  context.set(EHandlerService.class,null);
  context.set(TranslationService.class,null);
  context.set(EMenuService.class,null);
  context.set(TestEditorTranslationService.class,null);
  context.set(MWindow.class,null);
  context.set(Logger.class,null);
  context.set(MApplication.class,null);
  context.set(TeamShareStatusService.class,null);
  shell=new Shell();
  composite=new Composite(shell,SWT.NORMAL);
  context.set(Composite.class,composite);
  context.set(TestProjectService.class,getTestProjectMock());
  setRetriveTestStructureCounts(0);
  testExplorer=ContextInjectionFactory.make(TestExplorer.class,context);
}","/** 
 * Init Test Object TestExplorer with the Eclipse Context.
 */
@Before public void initOUT(){
  context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(this.getClass()).getBundleContext());
  context.set(MPart.class,null);
  context.set(EPartService.class,getPartServiceMock());
  context.set(EMenuService.class,null);
  context.set(TestEditorTranslationService.class,null);
  context.set(Logger.class,null);
  context.set(TeamShareStatusServiceNew.class,null);
  shell=new Shell();
  composite=new Composite(shell,SWT.NORMAL);
  context.set(Composite.class,composite);
  context.set(TestProjectService.class,getTestProjectMock());
  setRetriveTestStructureCounts(0);
  testExplorer=ContextInjectionFactory.make(TestExplorer.class,context);
}",0.516818361693708
145908,"/** 
 * Creates the OUT with a dummy selection.
 * @param testStructure to be returned for test purpose.
 * @return OUT
 */
private TestStructureSelectionDialog getOUTWith(final TestStructure testStructure){
  TestStructureSelectionDialog dialog=new TestStructureSelectionDialog(shell){
    @Override protected TestStructureTree createTestStructureTree(){
      return new TestStructureTree(){
        @Override public IStructuredSelection getSelection(){
          return new IStructuredSelection(){
            @Override public boolean isEmpty(){
              return false;
            }
            @Override public List toList(){
              return null;
            }
            @Override public Object[] toArray(){
              return null;
            }
            @Override public int size(){
              return 1;
            }
            @Override public Iterator iterator(){
              return null;
            }
            @Override public Object getFirstElement(){
              return testStructure;
            }
          }
;
        }
        @Override public TestStructure getSelectedTestStrucuture(){
          return testStructure;
        }
      }
;
    }
  }
;
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(TestStructureSelectionDialog.class).getBundleContext());
  context.set(TestEditorTranslationService.class,new TestEditorTranslationService(){
    @Override public String translate(    String key,    Object... params){
      return key;
    }
  }
);
  context.set(Logger.class,null);
  ContextInjectionFactory.inject(dialog,context);
  return dialog;
}","/** 
 * Creates the OUT with a dummy selection.
 * @param testStructure to be returned for test purpose.
 * @return OUT
 */
private TestStructureSelectionDialog getOUTWith(final TestStructure testStructure){
  final IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(TestStructureSelectionDialog.class).getBundleContext());
  TestStructureSelectionDialog dialog=new TestStructureSelectionDialog(shell){
    @Override protected TestStructureTree createTestStructureTree(){
      TestStructureTree tree=new TestStructureTree(){
        @Override public IStructuredSelection getSelection(){
          return new IStructuredSelection(){
            @Override public boolean isEmpty(){
              return false;
            }
            @Override public List toList(){
              return null;
            }
            @Override public Object[] toArray(){
              return null;
            }
            @Override public int size(){
              return 1;
            }
            @Override public Iterator iterator(){
              return null;
            }
            @Override public Object getFirstElement(){
              return testStructure;
            }
          }
;
        }
        @Override public TestStructure getSelectedTestStrucuture(){
          return testStructure;
        }
      }
;
      ContextInjectionFactory.inject(tree,context);
      return tree;
    }
  }
;
  context.set(TestEditorTranslationService.class,new TestEditorTranslationService(){
    @Override public String translate(    String key,    Object... params){
      return key;
    }
  }
);
  context.set(Logger.class,null);
  ContextInjectionFactory.inject(dialog,context);
  return dialog;
}",0.8863164143662808
145909,"@Override protected TestStructureTree createTestStructureTree(){
  return new TestStructureTree(){
    @Override public IStructuredSelection getSelection(){
      return new IStructuredSelection(){
        @Override public boolean isEmpty(){
          return false;
        }
        @Override public List toList(){
          return null;
        }
        @Override public Object[] toArray(){
          return null;
        }
        @Override public int size(){
          return 1;
        }
        @Override public Iterator iterator(){
          return null;
        }
        @Override public Object getFirstElement(){
          return testStructure;
        }
      }
;
    }
    @Override public TestStructure getSelectedTestStrucuture(){
      return testStructure;
    }
  }
;
}","@Override protected TestStructureTree createTestStructureTree(){
  TestStructureTree tree=new TestStructureTree(){
    @Override public IStructuredSelection getSelection(){
      return new IStructuredSelection(){
        @Override public boolean isEmpty(){
          return false;
        }
        @Override public List toList(){
          return null;
        }
        @Override public Object[] toArray(){
          return null;
        }
        @Override public int size(){
          return 1;
        }
        @Override public Iterator iterator(){
          return null;
        }
        @Override public Object getFirstElement(){
          return testStructure;
        }
      }
;
    }
    @Override public TestStructure getSelectedTestStrucuture(){
      return testStructure;
    }
  }
;
  ContextInjectionFactory.inject(tree,context);
  return tree;
}",0.942528735632184
145910,"/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.create();
  context.set(Shell.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  context.set(TestScenarioService.class,getTestScenarioServiceMock());
  return context;
}","/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(getClass()).getBundleContext());
  context.set(Shell.class,null);
  context.set(Logger.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  context.set(TestScenarioService.class,getTestScenarioServiceMock());
  return context;
}",0.9188801148600144
145911,"/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.create();
  context.set(Shell.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  return context;
}","/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(getClass()).getBundleContext());
  context.set(Shell.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  context.set(Logger.class,null);
  return context;
}",0.9096722621902478
145912,"@Override public boolean isModified(TestStructure testStructure){
  TeamShareStatusServicePlugIn teamShareStatus=getTeamShareStatusPlugIn(testStructure.getRootElement());
  if (teamShareStatus != null && teamShareStatus != null) {
    return teamShareStatus.isModified(testStructure);
  }
  return false;
}","@Override public boolean isModified(TestStructure testStructure){
  TeamShareStatusServicePlugIn teamShareStatus=getTeamShareStatusPlugIn(testStructure.getRootElement());
  if (teamShareStatus != null) {
    return teamShareStatus.isModified(testStructure);
  }
  return false;
}",0.953846153846154
145913,"/** 
 * Init Test Object TestExplorer with the Eclipse Context.
 */
@Before public void initOUT(){
  context=EclipseContextFactory.create();
  context.set(MPart.class,null);
  context.set(ECommandService.class,new ECommandService(){
    @Override public Command getCommand(    String commandId){
      return null;
    }
    @Override public Category getCategory(    String categoryId){
      return null;
    }
    @Override public Command defineCommand(    String id,    String name,    String description,    Category category,    IParameter[] parameters){
      return null;
    }
    @Override public Category defineCategory(    String id,    String name,    String description){
      return null;
    }
    @Override public ParameterizedCommand createCommand(    String id,    Map parameters){
      return null;
    }
  }
);
  context.set(IEventBroker.class,new EventBrokerMock(){
    @Override public boolean send(    String topic,    Object data){
      return true;
    }
    @Override public boolean post(    String topic,    Object data){
      return true;
    }
  }
);
  context.set(EPartService.class,getPartServiceMock());
  context.set(EHandlerService.class,null);
  context.set(TranslationService.class,null);
  context.set(EMenuService.class,null);
  context.set(TestEditorTranslationService.class,null);
  context.set(MWindow.class,null);
  context.set(Logger.class,null);
  context.set(MApplication.class,null);
  context.set(TeamShareStatusService.class,null);
  shell=new Shell();
  composite=new Composite(shell,SWT.NORMAL);
  context.set(Composite.class,composite);
  context.set(TestProjectService.class,getTestProjectMock());
  setRetriveTestStructureCounts(0);
  testExplorer=ContextInjectionFactory.make(TestExplorer.class,context);
}","/** 
 * Init Test Object TestExplorer with the Eclipse Context.
 */
@Before public void initOUT(){
  context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(this.getClass()).getBundleContext());
  context.set(MPart.class,null);
  context.set(EPartService.class,getPartServiceMock());
  context.set(EMenuService.class,null);
  context.set(TestEditorTranslationService.class,null);
  context.set(Logger.class,null);
  context.set(TeamShareStatusServiceNew.class,null);
  shell=new Shell();
  composite=new Composite(shell,SWT.NORMAL);
  context.set(Composite.class,composite);
  context.set(TestProjectService.class,getTestProjectMock());
  setRetriveTestStructureCounts(0);
  testExplorer=ContextInjectionFactory.make(TestExplorer.class,context);
}",0.516818361693708
145914,"/** 
 * Creates the OUT with a dummy selection.
 * @param testStructure to be returned for test purpose.
 * @return OUT
 */
private TestStructureSelectionDialog getOUTWith(final TestStructure testStructure){
  TestStructureSelectionDialog dialog=new TestStructureSelectionDialog(shell){
    @Override protected TestStructureTree createTestStructureTree(){
      return new TestStructureTree(){
        @Override public IStructuredSelection getSelection(){
          return new IStructuredSelection(){
            @Override public boolean isEmpty(){
              return false;
            }
            @Override public List toList(){
              return null;
            }
            @Override public Object[] toArray(){
              return null;
            }
            @Override public int size(){
              return 1;
            }
            @Override public Iterator iterator(){
              return null;
            }
            @Override public Object getFirstElement(){
              return testStructure;
            }
          }
;
        }
        @Override public TestStructure getSelectedTestStrucuture(){
          return testStructure;
        }
      }
;
    }
  }
;
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(TestStructureSelectionDialog.class).getBundleContext());
  context.set(TestEditorTranslationService.class,new TestEditorTranslationService(){
    @Override public String translate(    String key,    Object... params){
      return key;
    }
  }
);
  context.set(Logger.class,null);
  ContextInjectionFactory.inject(dialog,context);
  return dialog;
}","/** 
 * Creates the OUT with a dummy selection.
 * @param testStructure to be returned for test purpose.
 * @return OUT
 */
private TestStructureSelectionDialog getOUTWith(final TestStructure testStructure){
  final IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(TestStructureSelectionDialog.class).getBundleContext());
  TestStructureSelectionDialog dialog=new TestStructureSelectionDialog(shell){
    @Override protected TestStructureTree createTestStructureTree(){
      TestStructureTree tree=new TestStructureTree(){
        @Override public IStructuredSelection getSelection(){
          return new IStructuredSelection(){
            @Override public boolean isEmpty(){
              return false;
            }
            @Override public List toList(){
              return null;
            }
            @Override public Object[] toArray(){
              return null;
            }
            @Override public int size(){
              return 1;
            }
            @Override public Iterator iterator(){
              return null;
            }
            @Override public Object getFirstElement(){
              return testStructure;
            }
          }
;
        }
        @Override public TestStructure getSelectedTestStrucuture(){
          return testStructure;
        }
      }
;
      ContextInjectionFactory.inject(tree,context);
      return tree;
    }
  }
;
  context.set(TestEditorTranslationService.class,new TestEditorTranslationService(){
    @Override public String translate(    String key,    Object... params){
      return key;
    }
  }
);
  context.set(Logger.class,null);
  ContextInjectionFactory.inject(dialog,context);
  return dialog;
}",0.8863164143662808
145915,"@Override protected TestStructureTree createTestStructureTree(){
  return new TestStructureTree(){
    @Override public IStructuredSelection getSelection(){
      return new IStructuredSelection(){
        @Override public boolean isEmpty(){
          return false;
        }
        @Override public List toList(){
          return null;
        }
        @Override public Object[] toArray(){
          return null;
        }
        @Override public int size(){
          return 1;
        }
        @Override public Iterator iterator(){
          return null;
        }
        @Override public Object getFirstElement(){
          return testStructure;
        }
      }
;
    }
    @Override public TestStructure getSelectedTestStrucuture(){
      return testStructure;
    }
  }
;
}","@Override protected TestStructureTree createTestStructureTree(){
  TestStructureTree tree=new TestStructureTree(){
    @Override public IStructuredSelection getSelection(){
      return new IStructuredSelection(){
        @Override public boolean isEmpty(){
          return false;
        }
        @Override public List toList(){
          return null;
        }
        @Override public Object[] toArray(){
          return null;
        }
        @Override public int size(){
          return 1;
        }
        @Override public Iterator iterator(){
          return null;
        }
        @Override public Object getFirstElement(){
          return testStructure;
        }
      }
;
    }
    @Override public TestStructure getSelectedTestStrucuture(){
      return testStructure;
    }
  }
;
  ContextInjectionFactory.inject(tree,context);
  return tree;
}",0.942528735632184
145916,"/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.create();
  context.set(Shell.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  context.set(TestScenarioService.class,getTestScenarioServiceMock());
  return context;
}","/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(getClass()).getBundleContext());
  context.set(Shell.class,null);
  context.set(Logger.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  context.set(TestScenarioService.class,getTestScenarioServiceMock());
  return context;
}",0.9188801148600144
145917,"/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.create();
  context.set(Shell.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  return context;
}","/** 
 * @return the IEclipseContext for the test.
 */
private IEclipseContext getContext(){
  IEclipseContext context=EclipseContextFactory.getServiceContext(FrameworkUtil.getBundle(getClass()).getBundleContext());
  context.set(Shell.class,null);
  context.set(TestStructureService.class,ServiceLookUpForTest.getService(TestStructureService.class));
  context.set(TestEditorTranslationService.class,getTranslationServiceMock());
  context.set(TestProjectService.class,ServiceLookUpForTest.getService(TestProjectService.class));
  context.set(TestEditorReservedNamesService.class,getTestEditorReservedNamesServiceMock());
  context.set(Logger.class,null);
  return context;
}",0.9096722621902478
145918,"/** 
 * Returns true if the name is valid.
 * @param name of the Testflow
 * @return true if name is valid
 */
protected boolean isNameValid(String name){
  this.setMessage(null);
  if (name == null || name.isEmpty()) {
    return false;
  }
  if (getSelectedTestStrucutureElement() == null) {
    return false;
  }
  if (testEditorReservedNamesService.isReservedName(name) || testStructureService.isReservedName(getSelectedTestStrucutureElement().getRootElement(),name)) {
    this.setErrorMessage(name + ""String_Node_Str"" + translationService.translate(""String_Node_Str""));
    return false;
  }
  if (!NAME_PATTERN.matcher(name).matches()) {
    this.setErrorMessage(translationService.translate(""String_Node_Str""));
    return false;
  }
  if (getSelectedTestStrucutureElement() != null) {
    selectedTS=getSelectedTestStrucutureElement();
  }
  if (getNameInspector().isNameValid(name)) {
    setErrorMessage(null);
    return true;
  }
 else {
    setErrorMessage(getNameInspector().nameInvalideMessage());
    return false;
  }
}","/** 
 * Returns true if the name is valid.
 * @param name of the Testflow
 * @return true if name is valid
 */
protected boolean isNameValid(String name){
  this.setMessage(null);
  if (name == null || name.isEmpty()) {
    return false;
  }
  if (isReservedName(name)) {
    this.setErrorMessage(name + ""String_Node_Str"" + translationService.translate(""String_Node_Str""));
    return false;
  }
  if (!NAME_PATTERN.matcher(name).matches()) {
    this.setErrorMessage(translationService.translate(""String_Node_Str""));
    return false;
  }
  if (getSelectedTestStrucutureElement() != null) {
    selectedTS=getSelectedTestStrucutureElement();
  }
  if (getNameInspector().isNameValid(name)) {
    setErrorMessage(null);
    return true;
  }
 else {
    setErrorMessage(getNameInspector().nameInvalideMessage());
    return false;
  }
}",0.8888888888888888
145919,"/** 
 * Returns true if the name is valid.
 * @param name of the Testflow
 * @return true if name is valid
 */
protected boolean isNameValid(String name){
  this.setMessage(null);
  if (name == null || name.isEmpty()) {
    return false;
  }
  if (getSelectedTestStrucutureElement() == null) {
    return false;
  }
  if (testEditorReservedNamesService.isReservedName(name) || testStructureService.isReservedName(getSelectedTestStrucutureElement().getRootElement(),name)) {
    this.setErrorMessage(name + ""String_Node_Str"" + translationService.translate(""String_Node_Str""));
    return false;
  }
  if (!NAME_PATTERN.matcher(name).matches()) {
    this.setErrorMessage(translationService.translate(""String_Node_Str""));
    return false;
  }
  if (getSelectedTestStrucutureElement() != null) {
    selectedTS=getSelectedTestStrucutureElement();
  }
  if (getNameInspector().isNameValid(name)) {
    setErrorMessage(null);
    return true;
  }
 else {
    setErrorMessage(getNameInspector().nameInvalideMessage());
    return false;
  }
}","/** 
 * Returns true if the name is valid.
 * @param name of the Testflow
 * @return true if name is valid
 */
protected boolean isNameValid(String name){
  this.setMessage(null);
  if (name == null || name.isEmpty()) {
    return false;
  }
  if (isReservedName(name)) {
    this.setErrorMessage(name + ""String_Node_Str"" + translationService.translate(""String_Node_Str""));
    return false;
  }
  if (!NAME_PATTERN.matcher(name).matches()) {
    this.setErrorMessage(translationService.translate(""String_Node_Str""));
    return false;
  }
  if (getSelectedTestStrucutureElement() != null) {
    selectedTS=getSelectedTestStrucutureElement();
  }
  if (getNameInspector().isNameValid(name)) {
    setErrorMessage(null);
    return true;
  }
 else {
    setErrorMessage(getNameInspector().nameInvalideMessage());
    return false;
  }
}",0.8888888888888888
145920,"/** 
 * Returns true if the name is valid.
 * @param name of the Testflow
 * @return true if name is valid
 */
protected boolean isNameValid(String name){
  this.setMessage(null);
  if (name == null || name.isEmpty()) {
    return false;
  }
  if (getSelectedTestStrucutureElement() == null) {
    return false;
  }
  if (testEditorReservedNamesService.isReservedName(name) || testStructureService.isReservedName(getSelectedTestStrucutureElement().getRootElement(),name)) {
    this.setErrorMessage(name + ""String_Node_Str"" + translationService.translate(""String_Node_Str""));
    return false;
  }
  if (!NAME_PATTERN.matcher(name).matches()) {
    this.setErrorMessage(translationService.translate(""String_Node_Str""));
    return false;
  }
  if (getSelectedTestStrucutureElement() != null) {
    selectedTS=getSelectedTestStrucutureElement();
  }
  if (getNameInspector().isNameValid(name)) {
    setErrorMessage(null);
    return true;
  }
 else {
    setErrorMessage(getNameInspector().nameInvalideMessage());
    return false;
  }
}","/** 
 * Returns true if the name is valid.
 * @param name of the Testflow
 * @return true if name is valid
 */
protected boolean isNameValid(String name){
  this.setMessage(null);
  if (name == null || name.isEmpty()) {
    return false;
  }
  if (isReservedName(name)) {
    this.setErrorMessage(name + ""String_Node_Str"" + translationService.translate(""String_Node_Str""));
    return false;
  }
  if (!NAME_PATTERN.matcher(name).matches()) {
    this.setErrorMessage(translationService.translate(""String_Node_Str""));
    return false;
  }
  if (getSelectedTestStrucutureElement() != null) {
    selectedTS=getSelectedTestStrucutureElement();
  }
  if (getNameInspector().isNameValid(name)) {
    setErrorMessage(null);
    return true;
  }
 else {
    setErrorMessage(getNameInspector().nameInvalideMessage());
    return false;
  }
}",0.8888888888888888
145921,"@Override public TestResult readTestResult(InputStream resultStream){
  TestResult testResult=new TestResult();
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(new InputSource(new InputStreamReader(resultStream,""String_Node_Str"")));
    doc.getDocumentElement().normalize();
    Element finalCounts=(Element)doc.getElementsByTagName(""String_Node_Str"").item(0);
    String right=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String wrong=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String ignores=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String exceptions=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String runTimeInMillis=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    testResult.setRight(Integer.parseInt(right));
    testResult.setWrong(Integer.parseInt(wrong));
    testResult.setIgnored(Integer.parseInt(ignores));
    testResult.setException(Integer.parseInt(exceptions));
    testResult.setRunTimeMillis(Integer.parseInt(runTimeInMillis));
    testResult.setActionResultTables(createActionResultTable(doc.getElementsByTagName(""String_Node_Str"").item(0)));
    testResult.setInstructionResultTables(createInstructionsResult(doc.getElementsByTagName(""String_Node_Str"").item(0)));
  }
 catch (  ParserConfigurationException|SAXException|IOException e) {
    LOGGER.error(e.getMessage());
  }
  return testResult;
}","@Override public TestResult readTestResult(InputStream resultStream){
  TestResult testResult=new TestResult();
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(new InputSource(new InputStreamReader(resultStream,""String_Node_Str"")));
    doc.getDocumentElement().normalize();
    Element finalCounts=(Element)doc.getElementsByTagName(""String_Node_Str"").item(0);
    String right=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String wrong=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String ignores=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String exceptions=finalCounts.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    String runTimeInMillis=doc.getElementsByTagName(""String_Node_Str"").item(0).getTextContent();
    if (right.isEmpty() && wrong.isEmpty() && ignores.isEmpty()) {
      return testResult;
    }
    testResult.setRight(Integer.parseInt(right));
    testResult.setWrong(Integer.parseInt(wrong));
    testResult.setIgnored(Integer.parseInt(ignores));
    testResult.setException(Integer.parseInt(exceptions));
    testResult.setRunTimeMillis(Integer.parseInt(runTimeInMillis));
    testResult.setActionResultTables(createActionResultTable(doc.getElementsByTagName(""String_Node_Str"").item(0)));
    testResult.setInstructionResultTables(createInstructionsResult(doc.getElementsByTagName(""String_Node_Str"").item(0)));
  }
 catch (  ParserConfigurationException|SAXException|IOException e) {
    LOGGER.error(e.getMessage());
  }
  return testResult;
}",0.9703030303030304
145922,"@Override public List<TeamChange> revert(TestStructure testStructure,TranslationService translationService) throws SystemException {
  final List<TeamChange> result=new ArrayList<TeamChange>();
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + testStructure.getFullName());
  }
  try {
    final TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File fileToRevert=getFile(testStructure);
    wcClient.setEventHandler(new SVNLoggingEventHandler(listener,LOGGER){
      @Override public void handleEvent(      SVNEvent arg0,      double arg1) throws SVNException {
        super.handleEvent(arg0,arg1);
        TeamChange teamChange=new TeamChange(getTeamChangeTypeFrom(arg0),getRelativePathFrom(arg0),testProject);
        if (teamChange.getTeamChangeType() != null) {
          result.add(teamChange);
        }
      }
      private String getRelativePathFrom(      SVNEvent arg0){
        return convertFileToFullname(arg0.getFile(),testProject);
      }
      private TeamChangeType getTeamChangeTypeFrom(      SVNEvent arg0){
        if (arg0.getAction().equals(SVNEventAction.REVERT)) {
          return TeamChangeType.REVERT;
        }
        return null;
      }
    }
);
    Collection<String> changeList=new ArrayList<String>();
    File[] filesToReverted=new File[1];
    filesToReverted[0]=fileToRevert;
    String status=getStatus(testStructure,translationService);
    String[] splits=status.split(""String_Node_Str"");
    String searchString=""String_Node_Str"";
    wcClient.doRevert(filesToReverted,SVNDepth.INFINITY,changeList);
    for (    String split : splits) {
      if (split.contains(searchString)) {
        File fileToDeleteLc=new File(split.substring(0,split.lastIndexOf(searchString) - 1));
        if (fileToDeleteLc.isDirectory()) {
        }
      }
    }
    revertMemoryModel(testStructure);
  }
 catch (  SVNException e) {
    LOGGER.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  return result;
}","@Override public List<TeamChange> revert(TestStructure testStructure,TranslationService translationService) throws SystemException {
  final List<TeamChange> result=new ArrayList<TeamChange>();
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + testStructure.getFullName());
  }
  try {
    final TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File fileToRevert=getFile(testStructure);
    wcClient.setEventHandler(new SVNLoggingEventHandler(listener,LOGGER){
      @Override public void handleEvent(      SVNEvent arg0,      double arg1) throws SVNException {
        super.handleEvent(arg0,arg1);
        TeamChange teamChange=new TeamChange(getTeamChangeTypeFrom(arg0),getRelativePathFrom(arg0),testProject);
        if (teamChange.getTeamChangeType() != null) {
          result.add(teamChange);
        }
      }
      private String getRelativePathFrom(      SVNEvent arg0){
        return convertFileToFullname(arg0.getFile(),testProject);
      }
      private TeamChangeType getTeamChangeTypeFrom(      SVNEvent arg0){
        if (arg0.getAction().equals(SVNEventAction.REVERT)) {
          return TeamChangeType.REVERT;
        }
        return null;
      }
    }
);
    Collection<String> changeList=new ArrayList<String>();
    File[] filesToReverted=new File[1];
    filesToReverted[0]=fileToRevert;
    String status=getStatus(testStructure,translationService);
    String[] splits=status.split(""String_Node_Str"");
    String searchString=""String_Node_Str"";
    wcClient.doRevert(filesToReverted,SVNDepth.INFINITY,changeList);
    for (    String split : splits) {
      if (split.contains(searchString)) {
        String fileName=split.substring(0,split.lastIndexOf(searchString) - 1);
        File fileToDeleteLc=new File(fileName);
        if (fileToDeleteLc.isDirectory()) {
        }
 else {
          if (!fileToDeleteLc.delete()) {
            throw new SystemException(""String_Node_Str"" + fileName);
          }
        }
      }
    }
    revertMemoryModel(testStructure);
  }
 catch (  SVNException e) {
    LOGGER.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  return result;
}",0.945341889798628
145923,"@Override public List<TeamChange> revert(TestStructure testStructure,TranslationService translationService) throws SystemException {
  final List<TeamChange> result=new ArrayList<TeamChange>();
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + testStructure.getFullName());
  }
  try {
    final TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File fileToRevert=getFile(testStructure);
    wcClient.setEventHandler(new SVNLoggingEventHandler(listener,LOGGER){
      @Override public void handleEvent(      SVNEvent arg0,      double arg1) throws SVNException {
        super.handleEvent(arg0,arg1);
        TeamChange teamChange=new TeamChange(getTeamChangeTypeFrom(arg0),getRelativePathFrom(arg0),testProject);
        if (teamChange.getTeamChangeType() != null) {
          result.add(teamChange);
        }
      }
      private String getRelativePathFrom(      SVNEvent arg0){
        return convertFileToFullname(arg0.getFile(),testProject);
      }
      private TeamChangeType getTeamChangeTypeFrom(      SVNEvent arg0){
        if (arg0.getAction().equals(SVNEventAction.REVERT)) {
          return TeamChangeType.REVERT;
        }
        return null;
      }
    }
);
    Collection<String> changeList=new ArrayList<String>();
    File[] filesToReverted=new File[1];
    filesToReverted[0]=fileToRevert;
    String status=getStatus(testStructure,translationService);
    String[] splits=status.split(""String_Node_Str"");
    String searchString=""String_Node_Str"";
    wcClient.doRevert(filesToReverted,SVNDepth.INFINITY,changeList);
    for (    String split : splits) {
      if (split.contains(searchString)) {
        File fileToDeleteLc=new File(split.substring(0,split.lastIndexOf(searchString) - 1));
        if (fileToDeleteLc.isDirectory()) {
        }
      }
    }
    revertMemoryModel(testStructure);
  }
 catch (  SVNException e) {
    LOGGER.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  return result;
}","@Override public List<TeamChange> revert(TestStructure testStructure,TranslationService translationService) throws SystemException {
  final List<TeamChange> result=new ArrayList<TeamChange>();
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + testStructure.getFullName());
  }
  try {
    final TestProject testProject=testStructure.getRootElement();
    SVNClientManager clientManager=getSVNClientManager(testProject);
    SVNWCClient wcClient=clientManager.getWCClient();
    File fileToRevert=getFile(testStructure);
    wcClient.setEventHandler(new SVNLoggingEventHandler(listener,LOGGER){
      @Override public void handleEvent(      SVNEvent arg0,      double arg1) throws SVNException {
        super.handleEvent(arg0,arg1);
        TeamChange teamChange=new TeamChange(getTeamChangeTypeFrom(arg0),getRelativePathFrom(arg0),testProject);
        if (teamChange.getTeamChangeType() != null) {
          result.add(teamChange);
        }
      }
      private String getRelativePathFrom(      SVNEvent arg0){
        return convertFileToFullname(arg0.getFile(),testProject);
      }
      private TeamChangeType getTeamChangeTypeFrom(      SVNEvent arg0){
        if (arg0.getAction().equals(SVNEventAction.REVERT)) {
          return TeamChangeType.REVERT;
        }
        return null;
      }
    }
);
    Collection<String> changeList=new ArrayList<String>();
    File[] filesToReverted=new File[1];
    filesToReverted[0]=fileToRevert;
    String status=getStatus(testStructure,translationService);
    String[] splits=status.split(""String_Node_Str"");
    String searchString=""String_Node_Str"";
    wcClient.doRevert(filesToReverted,SVNDepth.INFINITY,changeList);
    for (    String split : splits) {
      if (split.contains(searchString)) {
        String fileName=split.substring(0,split.lastIndexOf(searchString) - 1);
        File fileToDeleteLc=new File(fileName);
        if (fileToDeleteLc.isDirectory()) {
        }
 else {
          if (!fileToDeleteLc.delete()) {
            throw new SystemException(""String_Node_Str"" + fileName);
          }
        }
      }
    }
    revertMemoryModel(testStructure);
  }
 catch (  SVNException e) {
    LOGGER.error(e.getMessage(),e);
    String message=substitudeSVNException(e,translationService);
    throw new SystemException(message,e);
  }
  return result;
}",0.945341889798628
145924,"/** 
 * Sets the metadatatags of the current testFlow. The method must be called to setup the table containing the metatagtable.
 * @param testFlow - the testFlow
 */
public void setTestFlow(TestFlow testFlow){
  this.testFlow=testFlow;
  metaDataTagList.clear();
  metaDataTagList.addAll(getMetaDataService().getMetaDataTags(testFlow));
  if (metaDataTagList.size() == 0) {
    Label lblMessage=new Label(composite,SWT.NONE);
    String message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    lblMessage.setText(message);
    metaDataCB.getCombo().setVisible(false);
    lblMetaDataCB.setVisible(false);
    metaDataTagsTable.setVisible(false);
  }
 else {
    for (    MetaData metaData : getMetaDataService().getAllMetaData(testFlow.getRootElement())) {
      metaDataCB.add(metaData);
    }
    metaDataCB.getCombo().pack(true);
    metaDataCB.getCombo().getParent().pack(true);
    for (    MetaDataTag metaDataTag : metaDataTagList) {
      MetaDataValue metaDataValue=getMetaDataService().getMetaDataValue(metaDataTag,testFlow.getRootElement());
      TableItem tableRow=new TableItem(metaDataTagsTable,SWT.NONE);
      tableRow.setText(0,metaDataValue.getMetaData().getLabel());
      tableRow.setText(1,metaDataValue.getLabel());
      tableRow.setImage(2,IconConstants.ICON_DELETE);
    }
  }
}","/** 
 * Sets the metadatatags of the current testFlow. The method must be called to setup the table containing the metatagtable.
 * @param testFlow - the testFlow
 */
public void setTestFlow(TestFlow testFlow){
  this.testFlow=testFlow;
  metaDataTagList.clear();
  metaDataTagList.addAll(getMetaDataService().getMetaDataTags(testFlow));
  List<MetaData> metaDataList=getMetaDataService().getAllMetaData(testFlow.getRootElement());
  if (metaDataList.size() == 0) {
    Label lblMessage=new Label(composite,SWT.NONE);
    String message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    lblMessage.setText(message);
    metaDataCB.getCombo().setVisible(false);
    lblMetaDataCB.setVisible(false);
    metaDataTagsTable.setVisible(false);
  }
 else {
    for (    MetaData metaData : metaDataList) {
      metaDataCB.add(metaData);
    }
    metaDataCB.getCombo().pack(true);
    metaDataCB.getCombo().getParent().pack(true);
    for (    MetaDataTag metaDataTag : metaDataTagList) {
      MetaDataValue metaDataValue=getMetaDataService().getMetaDataValue(metaDataTag,testFlow.getRootElement());
      TableItem tableRow=new TableItem(metaDataTagsTable,SWT.NONE);
      tableRow.setText(0,metaDataValue.getMetaData().getLabel());
      tableRow.setText(1,metaDataValue.getLabel());
      tableRow.setImage(2,IconConstants.ICON_DELETE);
    }
  }
}",0.9387755102040816
145925,"/** 
 * Sets the metadatatags of the current testFlow. The method must be called to setup the table containing the metatagtable.
 * @param testFlow - the testFlow
 */
public void setTestFlow(TestFlow testFlow){
  this.testFlow=testFlow;
  metaDataTagList.clear();
  metaDataTagList.addAll(getMetaDataService().getMetaDataTags(testFlow));
  if (metaDataTagList.size() == 0) {
    Label lblMessage=new Label(composite,SWT.NONE);
    String message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    lblMessage.setText(message);
    metaDataCB.getCombo().setVisible(false);
    lblMetaDataCB.setVisible(false);
    metaDataTagsTable.setVisible(false);
  }
 else {
    for (    MetaData metaData : getMetaDataService().getAllMetaData(testFlow.getRootElement())) {
      metaDataCB.add(metaData);
    }
    metaDataCB.getCombo().pack(true);
    metaDataCB.getCombo().getParent().pack(true);
    for (    MetaDataTag metaDataTag : metaDataTagList) {
      MetaDataValue metaDataValue=getMetaDataService().getMetaDataValue(metaDataTag,testFlow.getRootElement());
      TableItem tableRow=new TableItem(metaDataTagsTable,SWT.NONE);
      tableRow.setText(0,metaDataValue.getMetaData().getLabel());
      tableRow.setText(1,metaDataValue.getLabel());
      tableRow.setImage(2,IconConstants.ICON_DELETE);
    }
  }
}","/** 
 * Sets the metadatatags of the current testFlow. The method must be called to setup the table containing the metatagtable.
 * @param testFlow - the testFlow
 */
public void setTestFlow(TestFlow testFlow){
  this.testFlow=testFlow;
  metaDataTagList.clear();
  metaDataTagList.addAll(getMetaDataService().getMetaDataTags(testFlow));
  List<MetaData> metaDataList=getMetaDataService().getAllMetaData(testFlow.getRootElement());
  if (metaDataList.size() == 0) {
    Label lblMessage=new Label(composite,SWT.NONE);
    String message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    lblMessage.setText(message);
    metaDataCB.getCombo().setVisible(false);
    lblMetaDataCB.setVisible(false);
    metaDataTagsTable.setVisible(false);
  }
 else {
    for (    MetaData metaData : metaDataList) {
      metaDataCB.add(metaData);
    }
    metaDataCB.getCombo().pack(true);
    metaDataCB.getCombo().getParent().pack(true);
    for (    MetaDataTag metaDataTag : metaDataTagList) {
      MetaDataValue metaDataValue=getMetaDataService().getMetaDataValue(metaDataTag,testFlow.getRootElement());
      TableItem tableRow=new TableItem(metaDataTagsTable,SWT.NONE);
      tableRow.setText(0,metaDataValue.getMetaData().getLabel());
      tableRow.setText(1,metaDataValue.getLabel());
      tableRow.setImage(2,IconConstants.ICON_DELETE);
    }
  }
}",0.9387755102040816
145926,"@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) && (rules.canExecuteOnTestProjectRule(explorer) & ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}","@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) && (rules.canExecuteOnTestProjectRule(explorer) && ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}",0.9990029910269193
145927,"/** 
 * clear the selection in the combobox.
 */
public void clearSelection(){
  wrappedCombo.deselectAll();
  wrappedCombo.clearSelection();
  wrappedCombo.redraw();
}","/** 
 * clear the selection in the combobox.
 */
public void clearSelection(){
  wrappedCombo.deselectAll();
  wrappedCombo.clearSelection();
  wrappedCombo.setText(""String_Node_Str"");
  wrappedCombo.redraw();
}",0.8865435356200527
145928,"@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) && (rules.canExecuteOnTestProjectRule(explorer) & ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}","@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) && (rules.canExecuteOnTestProjectRule(explorer) && ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}",0.9990029910269193
145929,"/** 
 * clear the selection in the combobox.
 */
public void clearSelection(){
  wrappedCombo.deselectAll();
  wrappedCombo.clearSelection();
  wrappedCombo.redraw();
}","/** 
 * clear the selection in the combobox.
 */
public void clearSelection(){
  wrappedCombo.deselectAll();
  wrappedCombo.clearSelection();
  wrappedCombo.setText(""String_Node_Str"");
  wrappedCombo.redraw();
}",0.8865435356200527
145930,"@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) & (rules.canExecuteOnTestProjectRule(explorer) & ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}","@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) && (rules.canExecuteOnTestProjectRule(explorer) & ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}",0.999000999000999
145931,"@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) & (rules.canExecuteOnTestProjectRule(explorer) & ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}","@Override @Execute public boolean canExecute(IEclipseContext context){
  TestExplorer explorer=(TestExplorer)context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
  CanExecuteTestExplorerHandlerRules rules=ContextInjectionFactory.make(CanExecuteTestExplorerHandlerRules.class,context);
  return super.canExecute(context) && (rules.canExecuteOnTestProjectRule(explorer) & ((TestStructure)explorer.getSelection().getFirstElement()).getRootElement().getTestProjectConfig().getTeamShareConfig() == null);
}",0.999000999000999
145932,"public Graph partition2graph_binary(){
  ArrayList<Integer> renumber=new ArrayList<Integer>(size);
  Util.initArrayList(renumber,-1);
  for (int node=0; node < size; node++) {
    renumber.set(n2c.get(node),renumber.get(n2c.get(node)) + 1);
  }
  int fin=0;
  for (int i=0; i < size; i++)   if (renumber.get(i) != -1) {
    renumber.set(i,fin++);
  }
  ArrayList<ArrayList<Integer>> comm_nodes=new ArrayList<ArrayList<Integer>>(fin);
  n2c_new.getList().clear();
  for (int node=0; node < size; node++) {
    if (comm_nodes.get(renumber.get(n2c.get(node))) == null) {
      comm_nodes.set(renumber.get(n2c.get(node)),new ArrayList<Integer>());
    }
    comm_nodes.get(renumber.get(n2c.get(node))).add(node);
    n2c_new.setRandom(node,renumber.get(n2c.get(node)));
  }
  Graph g2=new Graph();
  g2.setNb_nodes(comm_nodes.size());
  int comm_deg=comm_nodes.size();
  for (int comm=0; comm < comm_deg; comm++) {
    HashMap<Integer,Double> m=new HashMap<Integer,Double>();
    int comm_size=comm_nodes.get(comm).size();
    for (int node=0; node < comm_size; node++) {
      Pair<Integer,Integer> p=g.neighbors(comm_nodes.get(comm).get(node));
      long deg=g.nb_neighbors(comm_nodes.get(comm).get(node));
      for (int i=0; i < deg; i++) {
        int neigh=g.getLinks().getList().get(p.getElement0() + i);
        int neigh_comm=renumber.get(n2c.get(neigh));
        double neigh_weight=(g.getWeights().size() == 0) ? 1. : g.getWeights().getList().get(p.getElement1() + i);
        ;
        if (!m.containsKey(neigh_comm)) {
          m.put(neigh_comm,neigh_weight);
        }
 else {
          m.put(neigh_comm,m.get(neigh_comm) + neigh_weight);
        }
      }
      if (g.isContainRemote()) {
        HashMap.SimpleEntry<Vector<Integer>,Vector<Float>> p2=g.remote_neighbors(comm_nodes.get(comm).get(node));
        deg=g.nb_remote_neighbors(comm_nodes.get(comm).get(node));
        for (int i=0; i < deg; i++) {
          int neigh=p2.getKey().getList().get(i);
          int neigh_comm=renumber.get(n2c.get(neigh));
          double neigh_weight=(g.getWeights().size() == 0) ? 1. : p2.getValue().getList().get(i);
          if (m.containsKey(neigh_comm)) {
            m.put(neigh_comm,m.get(neigh_comm) + neigh_weight);
          }
 else {
            m.put(neigh_comm,neigh_weight);
          }
        }
      }
    }
    g2.getDegrees().getList().add(comm,(comm == 0) ? m.size() : g2.getDegrees().getList().get(comm - 1) + m.size());
    g2.setNb_links(g2.getNb_links() + m.size());
    Iterator<Integer> it=m.keySet().iterator();
    while (it.hasNext()) {
      int key=it.next();
      double value=m.get(key);
      g2.setTotal_weight(g2.getTotal_weight() + value);
      g2.getLinks().getList().add(key);
      g2.getWeights().getList().add((float)value);
    }
  }
  return g2;
}","public Graph partition2graph_binary(){
  ArrayList<Integer> renumber=new ArrayList<Integer>(size);
  Util.initArrayList(renumber,size,-1);
  for (int node=0; node < size; node++) {
    renumber.set(n2c.get(node),renumber.get(n2c.get(node)) + 1);
  }
  int fin=0;
  for (int i=0; i < size; i++)   if (renumber.get(i) != -1) {
    renumber.set(i,fin++);
  }
  ArrayList<ArrayList<Integer>> comm_nodes=new ArrayList<ArrayList<Integer>>(fin);
  for (int i=0; i < fin; i++) {
    comm_nodes.add(null);
  }
  n2c_new.getList().clear();
  for (int node=0; node < size; node++) {
    if (comm_nodes.get(renumber.get(n2c.get(node))) == null) {
      comm_nodes.set(renumber.get(n2c.get(node)),new ArrayList<Integer>());
    }
    comm_nodes.get(renumber.get(n2c.get(node))).add(node);
    n2c_new.setRandom(node,renumber.get(n2c.get(node)));
  }
  Graph g2=new Graph();
  g2.setNb_nodes(comm_nodes.size());
  int comm_deg=comm_nodes.size();
  for (int comm=0; comm < comm_deg; comm++) {
    HashMap<Integer,Double> m=new HashMap<Integer,Double>();
    int comm_size=comm_nodes.get(comm).size();
    for (int node=0; node < comm_size; node++) {
      Pair<Integer,Integer> p=g.neighbors(comm_nodes.get(comm).get(node));
      long deg=g.nb_neighbors(comm_nodes.get(comm).get(node));
      for (int i=0; i < deg; i++) {
        int neigh=g.getLinks().getList().get(p.getElement0() + i);
        int neigh_comm=renumber.get(n2c.get(neigh));
        double neigh_weight=(g.getWeights().size() == 0) ? 1. : g.getWeights().getList().get(p.getElement1() + i);
        ;
        if (!m.containsKey(neigh_comm)) {
          m.put(neigh_comm,neigh_weight);
        }
 else {
          m.put(neigh_comm,m.get(neigh_comm) + neigh_weight);
        }
      }
      if (g.isContainRemote() && g.getRemoteEdges().containsKey(node)) {
        HashMap.SimpleEntry<Vector<Integer>,Vector<Float>> p2=g.remote_neighbors(comm_nodes.get(comm).get(node));
        deg=g.nb_remote_neighbors(comm_nodes.get(comm).get(node));
        for (int i=0; i < deg; i++) {
          int neigh=p2.getKey().getList().get(i);
          int neigh_comm=renumber.get(n2c.get(neigh));
          double neigh_weight=(g.getWeights().size() == 0) ? 1. : p2.getValue().getList().get(i);
          if (m.containsKey(neigh_comm)) {
            m.put(neigh_comm,m.get(neigh_comm) + neigh_weight);
          }
 else {
            m.put(neigh_comm,neigh_weight);
          }
        }
      }
    }
    g2.getDegrees().getList().add(comm,(comm == 0) ? m.size() : g2.getDegrees().getList().get(comm - 1) + m.size());
    g2.setNb_links(g2.getNb_links() + m.size());
    Iterator<Integer> it=m.keySet().iterator();
    while (it.hasNext()) {
      int key=it.next();
      double value=m.get(key);
      g2.setTotal_weight(g2.getTotal_weight() + value);
      g2.getLinks().getList().add(key);
      g2.getWeights().getList().add((float)value);
    }
  }
  g2.setRemoteMaps(g.getRemoteMaps());
  return g2;
}",0.9404596100278552
145933,"public double modularity(){
  double q=0.;
  double m2=(double)g.getTotal_weight();
  for (int i=0; i < size; i++) {
    if (tot.get(i) > 0)     q+=(double)in.get(i) / m2 - ((double)tot.get(i) / m2) * ((double)tot.get(i) / m2);
  }
  return q;
}","public double modularity(){
  double q=0.;
  double m2=(double)g.getTotal_weight();
  for (int i=0; i < size; i++) {
    if (tot.get(i) > 0) {
      double tmp=(double)in.get(i) / m2 - ((double)tot.get(i) / m2) * ((double)tot.get(i) / m2);
      if (tmp > 1) {
        System.out.println(""String_Node_Str"");
      }
      q+=tmp;
      if (q > 1) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
  return q;
}",0.4910714285714285
145934,"public void neigh_comm(int node){
  for (int i=0; i < neigh_last; i++) {
    ;
    neigh_weight.set(neigh_pos.get(i),-1.0);
  }
  neigh_last=0;
  Pair<Integer,Integer> p=g.neighbors(node);
  long deg=g.nb_neighbors(node);
  neigh_pos.set(0,n2c.get(node));
  neigh_weight.set(neigh_pos.get(0),0.0);
  neigh_last=1;
  for (int i=0; i < deg; i++) {
    int neigh=g.getLinks().getList().get(p.getElement0() + i);
    ;
    int neigh_comm=n2c.get(neigh);
    double neigh_w=(g.getWeights().size() == 0) ? 1. : g.getWeights().getList().get(p.getElement1() + i);
    ;
    if (neigh != node) {
      if (neigh_weight.get(neigh_comm) == -1) {
        neigh_weight.set(neigh_comm,0.0);
        neigh_pos.set(neigh_last++,neigh_comm);
      }
      neigh_weight.set(neigh_comm,neigh_weight.get(neigh_comm) + neigh_w);
    }
  }
  if (g.isContainRemote()) {
    AbstractMap.SimpleEntry<Vector<Integer>,Vector<Float>> p1=g.remote_neighbors(node);
    deg=g.nb_remote_neighbors(node);
    for (int i=0; i < deg; i++) {
      int neigh=p1.getKey().getList().get(i);
      int neigh_comm=n2c.get(neigh);
      double neigh_w=(g.getWeights().size() == 0) ? 1.0 : p1.getValue().getList().get(i);
      if (neigh != node) {
        if (neigh_weight.get(neigh_comm) == -1) {
          neigh_weight.set(neigh_comm,0.0);
          neigh_pos.set(neigh_last++,neigh_comm);
        }
        neigh_weight.set(neigh_comm,neigh_weight.get(neigh_comm) + neigh_w);
      }
    }
  }
}","public void neigh_comm(int node){
  for (int i=0; i < neigh_last; i++) {
    ;
    neigh_weight.set(neigh_pos.get(i),-1.0);
  }
  neigh_last=0;
  Pair<Integer,Integer> p=g.neighbors(node);
  long deg=g.nb_neighbors(node);
  neigh_pos.set(0,n2c.get(node));
  neigh_weight.set(neigh_pos.get(0),0.0);
  neigh_last=1;
  for (int i=0; i < deg; i++) {
    int neigh=g.getLinks().getList().get(p.getElement0() + i);
    ;
    int neigh_comm=n2c.get(neigh);
    double neigh_w=(g.getWeights().size() == 0) ? 1. : g.getWeights().getList().get(p.getElement1() + i);
    ;
    if (neigh != node) {
      if (neigh_weight.get(neigh_comm) == -1) {
        neigh_weight.set(neigh_comm,0.0);
        neigh_pos.set(neigh_last++,neigh_comm);
      }
      neigh_weight.set(neigh_comm,neigh_weight.get(neigh_comm) + neigh_w);
    }
  }
  if (g.isContainRemote() && g.getRemoteEdges().containsKey(node)) {
    AbstractMap.SimpleEntry<Vector<Integer>,Vector<Float>> p1=g.remote_neighbors(node);
    deg=g.nb_remote_neighbors(node);
    for (int i=0; i < deg; i++) {
      int neigh=p1.getKey().getList().get(i);
      int neigh_comm=n2c.get(neigh);
      double neigh_w=(g.getWeights().size() == 0) ? 1.0 : p1.getValue().getList().get(i);
      if (neigh != node) {
        if (neigh_weight.get(neigh_comm) == -1) {
          neigh_weight.set(neigh_comm,0.0);
          neigh_pos.set(neigh_last++,neigh_comm);
        }
        neigh_weight.set(neigh_comm,neigh_weight.get(neigh_comm) + neigh_w);
      }
    }
  }
}",0.986449864498645
145935,"public void display_partition(){
  ArrayList<Integer> renumber=new ArrayList<Integer>(size);
  Util.initArrayList(renumber,-1);
  for (int node=0; node < size; node++) {
    renumber.set(n2c.get(node),renumber.get(n2c.get(node)) + 1);
  }
  int fin=0;
  for (int i=0; i < size; i++)   if (renumber.get(i) != -1) {
    renumber.set(i,fin++);
  }
  for (int i=0; i < size; i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ renumber.get(n2c.get(i)));
  }
}","public void display_partition(){
  ArrayList<Integer> renumber=new ArrayList<Integer>(size);
  Util.initArrayList(renumber,size,-1);
  for (int node=0; node < size; node++) {
    renumber.set(n2c.get(node),renumber.get(n2c.get(node)) + 1);
  }
  int fin=0;
  for (int i=0; i < size; i++)   if (renumber.get(i) != -1) {
    renumber.set(i,fin++);
  }
  for (int i=0; i < size; i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ renumber.get(n2c.get(i)));
  }
}",0.994775339602926
145936,"public Community(Graph g,int nb_pass,double min_modularity){
  this.g=g;
  size=g.getNb_nodes();
  neigh_weight=new ArrayList<Double>(size);
  Util.initArrayList((ArrayList<Double>)neigh_weight,-1.0);
  neigh_pos=new ArrayList<Integer>(size);
  Util.initArrayList((ArrayList<Integer>)neigh_pos,-1);
  neigh_last=0;
  n2c=new ArrayList<Integer>(size);
  in=new ArrayList<Double>(size);
  tot=new ArrayList<Double>(size);
  for (int i=0; i < size; i++) {
    n2c.add(i,i);
    tot.add(i,g.weighted_degree(i));
    in.add(i,g.nb_selfloops(i));
  }
  this.nb_pass=nb_pass;
  this.min_modularity=min_modularity;
}","public Community(Graph g,int nb_pass,double min_modularity){
  this.g=g;
  size=g.getNb_nodes();
  neigh_weight=new ArrayList<Double>(size);
  Util.initArrayList((ArrayList<Double>)neigh_weight,size,-1.0);
  neigh_pos=new ArrayList<Integer>(size);
  Util.initArrayList((ArrayList<Integer>)neigh_pos,size,-1);
  neigh_last=0;
  n2c=new ArrayList<Integer>(size);
  in=new ArrayList<Double>(size);
  tot=new ArrayList<Double>(size);
  for (int i=0; i < size; i++) {
    n2c.add(i);
    tot.add(g.weighted_degree(i) + g.weighted_degree_wremote(i));
    in.add(g.nb_selfloops(i));
  }
  this.nb_pass=nb_pass;
  this.min_modularity=min_modularity;
}",0.8840927258193445
145937,"@Override public void onCardMoving(int position,float progress){
  for (int i=0; i < cards.size(); i++) {
    if (data.isEmpty()) {
      cards.get(i).updateProgress(progress);
    }
 else {
      if (i != 0 && i != position)       cards.get(i).updateProgress(progress);
    }
  }
}","@Override public void onCardMoving(int position,float progress){
  for (int i=0; i < cards.size(); i++) {
    if (i != cards.size() - 1 && i != position) {
      if (data.isEmpty()) {
        cards.get(i).updateProgress(progress);
      }
 else {
        if (i != 0)         cards.get(i).updateProgress(progress);
      }
    }
  }
}",0.8357723577235773
145938,"/** 
 * Scans given file for tabs, very useful when loading YAML configuration. Any configuration loaded using the API in this class is automatically scanned. Please note that this only works for files within the HubBasics plugin folder.
 * @param file Path of file
 */
public void scan(String file){
  Scanner scanner=null;
  int lineNumber=0;
  String line;
  try {
    scanner=new Scanner(new File(HubBasics.getInstance().getDataFolder(),file));
    while (scanner.hasNextLine()) {
      line=scanner.nextLine();
      lineNumber++;
      if (line.indexOf(""String_Node_Str"") != -1) {
        Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"");
        Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"" + file+ ""String_Node_Str""+ lineNumber+ ""String_Node_Str"");
        Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"");
        throw new IllegalArgumentException(""String_Node_Str"" + file + ""String_Node_Str""+ line+ ""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (scanner != null)     scanner.close();
  }
}","/** 
 * Scans given file for tabs, very useful when loading YAML configuration. Any configuration loaded using the API in this class is automatically scanned. Please note that this only works for files within the HubBasics plugin folder.
 * @param filePath Path of file
 */
public void scan(String filePath){
  File file=new File(HubBasics.getInstance().getDataFolder(),filePath);
  if (!file.exists())   return;
  Scanner scanner=null;
  int lineNumber=0;
  String line;
  try {
    scanner=new Scanner(file);
    while (scanner.hasNextLine()) {
      line=scanner.nextLine();
      lineNumber++;
      if (line.indexOf(""String_Node_Str"") != -1) {
        Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"");
        Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"" + filePath+ ""String_Node_Str""+ lineNumber+ ""String_Node_Str"");
        Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"");
        throw new IllegalArgumentException(""String_Node_Str"" + filePath + ""String_Node_Str""+ line+ ""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (scanner != null)     scanner.close();
  }
}",0.9243197278911564
145939,"public ModuleManager(){
  moduleMap.put(ModuleEnum.DOUBLE_JUMP,new DoubleJump());
  moduleMap.put(ModuleEnum.JUMP_PADS,new JumpPads());
  moduleMap.put(ModuleEnum.ANTI_VOID,new AntiVoid());
  moduleMap.put(ModuleEnum.FIXED_WEATHER,new FixedWeather());
  moduleMap.put(ModuleEnum.KEEP_FOOD,new KeepFood());
  moduleMap.put(ModuleEnum.KEEP_HEALTH,new KeepHealth());
  moduleMap.put(ModuleEnum.CONNECTION_MESSAGES,new ConnectionMessages());
  moduleMap.put(ModuleEnum.ADVANCED_MOTD,new AdvancedMOTD());
  moduleMap.put(ModuleEnum.COMMAND_OVERRIDE,new CommandOverride());
  moduleMap.put(ModuleEnum.HOLOGRAMS,new CustomHolograms());
  moduleMap.put(ModuleEnum.AUTOMATED_BROADCASTS,new AutomatedBroadcast());
  registerListeners();
  onEnable();
}","public ModuleManager(){
  moduleMap.put(ModuleEnum.DOUBLE_JUMP,new DoubleJump());
  moduleMap.put(ModuleEnum.JUMP_PADS,new JumpPads());
  moduleMap.put(ModuleEnum.ANTI_VOID,new AntiVoid());
  moduleMap.put(ModuleEnum.FIXED_WEATHER,new FixedWeather());
  moduleMap.put(ModuleEnum.KEEP_FOOD,new KeepFood());
  moduleMap.put(ModuleEnum.KEEP_HEALTH,new KeepHealth());
  moduleMap.put(ModuleEnum.CONNECTION_MESSAGES,new ConnectionMessages());
  moduleMap.put(ModuleEnum.ADVANCED_MOTD,new AdvancedMOTD());
  moduleMap.put(ModuleEnum.COMMAND_OVERRIDE,new CommandOverride());
  moduleMap.put(ModuleEnum.HOLOGRAMS,new CustomHolograms());
  moduleMap.put(ModuleEnum.AUTOMATED_BROADCASTS,new AutomatedBroadcast());
  if (HubBasics.getInstance().getServerVersion().contains(""String_Node_Str"") || HubBasics.getInstance().getServerVersion().contains(""String_Node_Str""))   moduleMap.put(ModuleEnum.BOSSBAR_MESSAGES,new BossBarMessages());
  registerListeners();
  onEnable();
}",0.8708920187793427
145940,"@EventHandler public void onPlayerPing(ServerListPingEvent event){
  event.setMotd(this.motds.get(this.current));
}","@EventHandler public void onPlayerPing(ServerListPingEvent event){
  if (!enabled)   return;
  event.setMotd(this.motds.get(this.current));
}",0.8984375
145941,"@Override public void onEnable(){
  List<String> rawMotds=pl.getPluginConfiguration().getStringList(ConfigurationKey.ADVANCED_MOTD_MOTDS);
  rawMotds.stream().forEach(s -> this.motds.add(ChatColor.translateAlternateColorCodes('&',s)));
  int switchRate=pl.getPluginConfiguration().getInt(ConfigurationKey.ADVANCED_MOTD_SWITCHRATE) * 20;
  if (this.motds.size() > 1)   Bukkit.getScheduler().scheduleSyncRepeatingTask(pl,() -> {
    if (this.current + 1 == motds.size()) {
      this.current=0;
    }
 else {
      this.current++;
    }
  }
,switchRate,switchRate);
}","@Override public void onEnable(){
  this.enabled=getBoolean(ConfigurationKey.ADVANCED_MOTD_ENABLED);
  if (!enabled)   return;
  List<String> rawMotds=pl.getPluginConfiguration().getStringList(ConfigurationKey.ADVANCED_MOTD_MOTDS);
  rawMotds.stream().forEach(s -> this.motds.add(ChatColor.translateAlternateColorCodes('&',s)));
  int switchRate=pl.getPluginConfiguration().getInt(ConfigurationKey.ADVANCED_MOTD_SWITCHRATE) * 20;
  if (this.motds.size() > 1)   Bukkit.getScheduler().scheduleSyncRepeatingTask(pl,() -> {
    if (this.current + 1 == motds.size()) {
      this.current=0;
    }
 else {
      this.current++;
    }
  }
,switchRate,switchRate);
}",0.9239574816026164
145942,"@Override public void onEnable(){
  this.enable=getBoolean(ConfigurationKey.AUTOMATED_BROADCASTS_ENABLED);
  this.random=getBoolean(ConfigurationKey.AUTOMATED_BROADCASTS_RANDOM);
  this.timing=getConfig().getInt(ConfigurationKey.AUTOMATED_BROADCASTS_TIMING) * 20L;
  this.messages=getConfig().getStringList(ConfigurationKey.AUTOMATED_BROADCASTS_MESSAGES).stream().map(s -> ChatColor.translateAlternateColorCodes('&',s)).collect(Collectors.toList());
  if (!enable)   return;
  if (timing <= 0) {
    Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
    return;
  }
  Bukkit.getScheduler().scheduleSyncRepeatingTask(pl,new Runnable(){
    Random rand=new Random();
    int index=0;
    @Override public void run(){
      if (random) {
        Bukkit.broadcastMessage(messages.get(rand.nextInt(messages.size())));
      }
 else {
        Bukkit.broadcastMessage(messages.get(index));
        index++;
        if (index >= messages.size()) {
          index=0;
        }
      }
    }
  }
,timing,timing);
}","@Override public void onEnable(){
  this.enable=getBoolean(ConfigurationKey.AUTOMATED_BROADCASTS_ENABLED);
  this.random=getBoolean(ConfigurationKey.AUTOMATED_BROADCASTS_RANDOM);
  this.timing=getConfig().getInt(ConfigurationKey.AUTOMATED_BROADCASTS_TIMING) * 20L;
  this.messages=getConfig().getStringList(ConfigurationKey.AUTOMATED_BROADCASTS_MESSAGES).stream().map(s -> ChatColor.translateAlternateColorCodes('&',s)).collect(Collectors.toList());
  if (!enable)   return;
  if (timing <= 0) {
    Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  Bukkit.getScheduler().scheduleSyncRepeatingTask(pl,new Runnable(){
    Random rand=new Random();
    int index=0;
    @Override public void run(){
      if (random) {
        Bukkit.broadcastMessage(messages.get(rand.nextInt(messages.size())));
      }
 else {
        Bukkit.broadcastMessage(messages.get(index));
        index++;
        if (index >= messages.size()) {
          index=0;
        }
      }
    }
  }
,timing,timing);
}",0.9921645445641528
145943,"/** 
 * Formats the given message (can return null if message equals to ""null"")
 * @param message       The message
 * @param commandSender (Optional) CommandSender
 * @return The formatted message
 */
public static String format(String message,CommandSender commandSender){
  if (message.equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  message=org.bukkit.ChatColor.translateAlternateColorCodes('&',message);
  if (commandSender != null) {
    message=message.replaceAll(""String_Node_Str"",commandSender.getName());
    message=message.replaceAll(""String_Node_Str"",commandSender.getName());
  }
  return message;
}","/** 
 * Formats the given message (can return null if message equals to ""null"")
 * @param message       The message
 * @param commandSender (Optional) CommandSender
 * @return The formatted message
 */
public static String format(String message,CommandSender commandSender){
  if (message == null || message.equalsIgnoreCase(""String_Node_Str""))   return null;
  message=org.bukkit.ChatColor.translateAlternateColorCodes('&',message);
  if (commandSender != null) {
    message=message.replaceAll(""String_Node_Str"",commandSender.getName());
    message=message.replaceAll(""String_Node_Str"",commandSender.getName());
  }
  return message;
}",0.9786561264822136
145944,"public static void notifyUpdate(){
  Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  Bukkit.getServer().getConsoleSender().sendMessage(""String_Node_Str"");
  Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  Bukkit.getServer().getConsoleSender().sendMessage(""String_Node_Str"");
  Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
}","/** 
 * Easy-to-notice update notification
 */
public static void notifyUpdate(){
  Bukkit.getConsoleSender().sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
  Bukkit.getConsoleSender().sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
  Bukkit.getConsoleSender().sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
}",0.8801791713325868
145945,"@Override public void removeDeletedMessages(){
  final EventList<StoredMessage> eventList=getMessageEventList();
  eventList.getReadWriteLock().writeLock().lock();
  try {
    final int count=countDeletedMessages(eventList);
    if (count == 0) {
      return;
    }
    final List<StoredMessage> retainedMessages=new ArrayList<>(eventList.size() - count);
    for (    StoredMessage msg : eventList) {
      if (msg.getReferenceCount() > 0) {
        retainedMessages.add(msg);
      }
 else {
        database.delete(msg);
      }
    }
    eventList.clear();
    messagesById.clear();
    addMessages(retainedMessages);
  }
  finally {
    eventList.getReadWriteLock().writeLock().unlock();
  }
}","@Override public void removeDeletedMessages(){
  final EventList<StoredMessage> eventList=getWritableMessageEventList();
  eventList.getReadWriteLock().writeLock().lock();
  try {
    final int count=countDeletedMessages(eventList);
    if (count == 0) {
      return;
    }
    final List<StoredMessage> retainedMessages=new ArrayList<>(eventList.size() - count);
    for (    StoredMessage msg : eventList) {
      if (msg.getReferenceCount() > 0) {
        retainedMessages.add(msg);
      }
 else {
        database.delete(msg);
      }
    }
    eventList.clear();
    messagesById.clear();
    addMessages(retainedMessages);
  }
  finally {
    eventList.getReadWriteLock().writeLock().unlock();
  }
}",0.9943100995732574
145946,"public void addMessage(StoredMessage message){
  try {
    writeLockMessageEventList().add(message);
    messagesById.put(message.getMessageId(),message);
  }
  finally {
    writeUnlockMessageEventList();
    database.commit();
  }
  getPropertyChangeSupport().firePropertyChange(""String_Node_Str"",null,null);
}","public void addMessage(StoredMessage message){
  try {
    writeLockMessageEventList().add(message);
    messagesById.put(message.getMessageId(),message);
    database.store(messagesById);
  }
  finally {
    writeUnlockMessageEventList();
    database.commit();
  }
  getPropertyChangeSupport().firePropertyChange(""String_Node_Str"",null,null);
}",0.9483282674772036
145947,"private EventList<StoredMessage> writeLockMessageEventList(){
  activate(ActivationPurpose.WRITE);
  final EventList<StoredMessage> eventList=getMessageEventList();
  eventList.getReadWriteLock().writeLock().lock();
  return eventList;
}","private EventList<StoredMessage> writeLockMessageEventList(){
  activate(ActivationPurpose.WRITE);
  final EventList<StoredMessage> eventList=getWritableMessageEventList();
  eventList.getReadWriteLock().writeLock().lock();
  return eventList;
}",0.983402489626556
145948,"@SuppressWarnings(""String_Node_Str"") public EventList<StoredMessage> getMessageEventList(){
  activate(ActivationPurpose.READ);
synchronized (allMessages) {
    if (messageEventList == null) {
      messageEventList=new BasicEventList<>(allMessages);
    }
    return messageEventList;
  }
}","public EventList<StoredMessage> getMessageEventList(){
synchronized (allMessages) {
    if (readOnlyEventList == null) {
      readOnlyEventList=GlazedLists.readOnlyList(getWritableMessageEventList());
    }
    return readOnlyEventList;
  }
}",0.6179775280898876
145949,"public void addMessages(Collection<StoredMessage> messages){
  try {
    writeLockMessageEventList().addAll(messages);
    for (    StoredMessage sm : messages) {
      messagesById.put(sm.getMessageId(),sm);
    }
  }
  finally {
    writeUnlockMessageEventList();
  }
  getPropertyChangeSupport().firePropertyChange(""String_Node_Str"",null,null);
}","public void addMessages(Collection<StoredMessage> messages){
  try {
    writeLockMessageEventList().addAll(messages);
    for (    StoredMessage sm : messages) {
      messagesById.put(sm.getMessageId(),sm);
    }
    database.store(messagesById);
  }
  finally {
    writeUnlockMessageEventList();
  }
  getPropertyChangeSupport().firePropertyChange(""String_Node_Str"",null,null);
}",0.953551912568306
145950,"private void writeUnlockMessageEventList(){
  getMessageEventList().getReadWriteLock().writeLock().unlock();
}","private void writeUnlockMessageEventList(){
  database.store(allMessages);
  getWritableMessageEventList().getReadWriteLock().writeLock().unlock();
}",0.8494208494208494
145951,"@Override public void appendMessage(StoredMessage message,long messageUID){
  activate(ActivationPurpose.WRITE);
  final EventList<StoredMessage> eventList=storageFolder.getMessageEventList();
  eventList.getReadWriteLock().writeLock().lock();
  try {
    storageFolder.addMessage(message);
    uidMap.add(messageUID);
    account.getMailAccount().addMessage(message);
    database.commit();
  }
  finally {
    eventList.getReadWriteLock().writeLock().unlock();
  }
}","@Override public void appendMessage(StoredMessage message,long messageUID){
  activate(ActivationPurpose.WRITE);
  final EventList<StoredMessage> eventList=storageFolder.getMessageEventList();
  eventList.getReadWriteLock().writeLock().lock();
  try {
    storageFolder.addMessage(message);
    uidMap.add(messageUID);
    database.commit();
  }
  finally {
    eventList.getReadWriteLock().writeLock().unlock();
    account.getMailAccount().addMessage(message);
  }
}",0.7991452991452992
145952,"private void storeNewMessage(ExecutorService executor,IMAPMessage message) throws MessagingException, IOException {
  final long messageUID=remoteFolder.getUID(message);
  final StoredMessage storedMessage=imapMessageFactory.createFromJavamailMessage(account,message);
  executor.submit(new StoreMessageTask(storedMessage,messageUID,localFolder,messageSearchIndex,javamailUtils,nymsAgent));
}","private void storeNewMessage(ExecutorService executor,IMAPMessage message) throws MessagingException, IOException {
  final long messageUID=remoteFolder.getUID(message);
  StoredMessage storedMessage=account.getMessageForMimeMessage(message);
  final boolean alreadyStored=(storedMessage != null);
  if (storedMessage == null) {
    storedMessage=imapMessageFactory.createFromJavamailMessage(account,message);
  }
  executor.submit(new StoreMessageTask(storedMessage,messageUID,localFolder,messageSearchIndex,javamailUtils,nymsAgent,alreadyStored));
}",0.8165429480381761
145953,"private static String getTextBodyFromBodyPart(MimeBodyPart part) throws MessagingException {
  final String type=part.getContentType();
  try {
    final Object content=part.getContent();
    if (content instanceof String) {
      if (type != null && type.contains(""String_Node_Str"")) {
        return (String)content;
      }
    }
 else     if (content instanceof MimeMultipart) {
      return getTextBodyFromMimeMultipart((MimeMultipart)content);
    }
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + e);
  }
  return null;
}","private static String getTextBodyFromBodyPart(MimeBodyPart part) throws MessagingException {
  final String type=lowercaseUnlessNull(part.getContentType());
  final String disposition=lowercaseUnlessNull(part.getDisposition());
  try {
    final Object content=part.getContent();
    if (content instanceof String) {
      if (includeStringForTypeAndDisposition(type,disposition)) {
        return (String)content;
      }
 else {
        return null;
      }
    }
 else     if (content instanceof MimeMultipart) {
      return getTextBodyFromMimeMultipart((MimeMultipart)content);
    }
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + e);
  }
  return null;
}",0.8158961881589619
145954,"public void displayIdentity(PublicIdentity publicIdentity,PrivateIdentity privateIdentity){
  final Image oldImage=keyImageLabel.getImage();
  if (oldImage != defaultImage) {
    oldImage.dispose();
  }
  final PublicKeyRenderer textRenderer=new PublicKeyRenderer(publicIdentity);
  final String text=textRenderer.renderPublicIdentity();
  keyInformationLabel.setText(text);
  final byte[] imageData=publicIdentity.getImageData();
  if (imageData == null || imageData.length == 0) {
    keyImageLabel.setImage(defaultImage);
  }
 else {
    keyImageLabel.setImage(ImageCache.getInstance().createAvatarImage(imageData));
  }
  this.publicIdentity=publicIdentity;
  this.privateIdentity=privateIdentity;
}","public void displayIdentity(PublicIdentity publicIdentity,PrivateIdentity privateIdentity){
  final Image oldImage=keyImageLabel.getImage();
  if (oldImage != defaultImage) {
    oldImage.dispose();
  }
  final PublicKeyRenderer textRenderer=new PublicKeyRenderer(publicIdentity);
  final String text=textRenderer.renderPublicIdentity();
  keyInformationLabel.setText(text);
  final byte[] imageData=publicIdentity.getImageData();
  if (imageData == null || imageData.length == 0) {
    keyImageLabel.setImage(defaultImage);
  }
 else {
    keyImageLabel.setImage(ImageCache.getInstance().createAvatarImage(imageData));
  }
  this.publicIdentity=publicIdentity;
  this.privateIdentity=privateIdentity;
  layout(true,true);
}",0.9852838121934128
145955,"@Override public void onUpdate(){
  super.onUpdate();
  if (!this.dead && attacher != null) {
    if (attacher instanceof EntityPlayer)     this.setPositionAndRotation(attacher.posX,attacher.posY + 0.05,attacher.posZ,attacher.rotationYaw,attacher.rotationPitch);
 else     this.setPositionAndRotation(attacher.posX,attacher.posY + attacher.height + 0.05,attacher.posZ,attacher.rotationYaw,attacher.rotationPitch);
    if (++tickSinceBite >= 15) {
      dataWatcher.updateObject(20,Integer.valueOf(attacher.getEntityId()));
      tickSinceBite=0;
      float health=attacher.getHealth() - 1;
      if (!(attacher instanceof EntityPlayer && ((EntityPlayer)attacher).capabilities.isCreativeMode)) {
        attacher.setHealth(health);
        if (health <= 0 && !worldObj.isRemote) {
          NBTTagCompound nbt=attacher.getEntityData();
          if (!nbt.getBoolean(""String_Node_Str"")) {
            nbt.setBoolean(""String_Node_Str"",true);
            attacher=null;
            MobHelper.spawnCreature(worldObj,EntityHLZombie.class,this,false);
            dataWatcher.updateObject(20,Integer.valueOf(0));
            this.setDead();
          }
        }
      }
    }
    if (attacher != null && attacher.isDead) {
      attacher=null;
    }
  }
 else {
    if (worldObj.isRemote) {
      int id=dataWatcher.getWatchableObjectInt(20);
      Entity e=worldObj.getEntityByID(id);
      if (e == null || e instanceof EntityLivingBase)       attacher=(EntityLivingBase)e;
    }
 else {
      dataWatcher.updateObject(20,Integer.valueOf(0));
    }
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (!this.dead) {
    if (worldObj.isRemote) {
      int id=dataWatcher.getWatchableObjectInt(20);
      Entity e=worldObj.getEntityByID(id);
      if (e == null || e instanceof EntityLivingBase)       attacher=(EntityLivingBase)e;
    }
 else {
      dataWatcher.updateObject(20,Integer.valueOf(0));
    }
    if (attacher != null) {
      if (attacher instanceof EntityPlayer) {
        this.setPositionAndRotation(attacher.posX,attacher.posY + 0.05,attacher.posZ,attacher.rotationYaw,attacher.rotationPitch);
      }
 else {
        this.setPositionAndRotation(attacher.posX,attacher.posY + attacher.height + 0.05,attacher.posZ,attacher.rotationYaw,attacher.rotationPitch);
      }
      if (++tickSinceBite >= 15) {
        dataWatcher.updateObject(20,Integer.valueOf(attacher.getEntityId()));
        tickSinceBite=0;
        float health=attacher.getHealth() - 1;
        if (!(attacher instanceof EntityPlayer && ((EntityPlayer)attacher).capabilities.isCreativeMode)) {
          attacher.setHealth(health);
          if (health <= 0 && !worldObj.isRemote) {
            NBTTagCompound nbt=attacher.getEntityData();
            if (!nbt.getBoolean(""String_Node_Str"")) {
              nbt.setBoolean(""String_Node_Str"",true);
              attacher=null;
              MobHelper.spawnCreature(worldObj,EntityHLZombie.class,this,false);
              dataWatcher.updateObject(20,Integer.valueOf(0));
              this.setDead();
            }
          }
        }
      }
      if (attacher != null && attacher.isDead) {
        attacher=null;
      }
    }
  }
}",0.413727959697733
145956,"protected void attemptAttack(){
  if (currentTarget == null)   return;
  double dx=currentTarget.posX - this.posX, dy=currentTarget.posY - this.posY, dz=currentTarget.posZ - this.posZ;
  if (!isSearching())   this.setSentryHeading(dx,dy,dz,1.0F);
  if (++tickSinceLastAttack > 5) {
    tickSinceLastAttack=0;
    if (!canEntityBeSeen(currentTarget)) {
      if (!rotationSet)       rotationYawSearch=rotationYawHead;
      rotationSet=true;
    }
 else {
      rotationSet=false;
      this.playSound(""String_Node_Str"",0.5F,1.0F);
      worldObj.spawnEntityInWorld(new EntityBullet(worldObj,this,currentTarget,5).setEntitySelector(selector));
    }
    if (currentTarget.getDistanceSqToEntity(this) > 400) {
      this.currentTarget=null;
      return;
    }
  }
  if (currentTarget.isDead || currentTarget.isEntityInvulnerable() || rand.nextFloat() <= 0.01)   this.currentTarget=null;
}","protected void attemptAttack(){
  if (currentTarget == null)   return;
  double dx=currentTarget.posX - this.posX, dy=currentTarget.posY - this.posY, dz=currentTarget.posZ - this.posZ;
  if (!isSearching())   this.setSentryHeading(dx,dy,dz,1.0F);
  if (++tickSinceLastAttack > 5) {
    tickSinceLastAttack=0;
    if (!canEntityBeSeen(currentTarget)) {
      if (!rotationSet)       rotationYawSearch=rotationYawHead;
      rotationSet=true;
    }
 else {
      rotationSet=false;
      this.playSound(""String_Node_Str"",0.5F,1.0F);
      worldObj.spawnEntityInWorld(new EntityBullet(worldObj,this,currentTarget,5,YOFFSET,currentTarget.height * 0.7F).setEntitySelector(selector));
    }
    if (currentTarget.getDistanceSqToEntity(this) > 400) {
      this.currentTarget=null;
      return;
    }
  }
  if (currentTarget.isDead || currentTarget.isEntityInvulnerable() || rand.nextFloat() <= 0.01)   this.currentTarget=null;
}",0.980110497237569
145957,"public void sync(){
  if (worldObj.isRemote) {
    int entityid=dataWatcher.getWatchableObjectInt(15);
    Entity e=worldObj.getEntityByID(entityid);
    currentTarget=e;
    this.isActivated=dataWatcher.getWatchableObjectByte(16) > 0;
  }
 else {
    if (currentTarget != null)     dataWatcher.updateObject(15,currentTarget.getEntityId());
    dataWatcher.updateObject(16,Byte.valueOf((byte)(isActivated ? 0x1 : 0x0)));
  }
}","public void sync(){
  if (worldObj.isRemote) {
    int entityid=dataWatcher.getWatchableObjectInt(15);
    Entity e=entityid == 0 ? null : worldObj.getEntityByID(entityid);
    currentTarget=e;
    this.isActivated=dataWatcher.getWatchableObjectByte(16) == 1;
  }
 else {
    dataWatcher.updateObject(15,currentTarget == null ? 0 : currentTarget.getEntityId());
    dataWatcher.updateObject(16,Byte.valueOf((byte)(isActivated ? 1 : 0)));
  }
}",0.8837744533947065
145958,"/** 
 * 自定义的寻路函数，在最初的4秒无视玩家
 */
@Override protected Entity findPlayerToAttack(){
  AxisAlignedBB boundingBox=AxisAlignedBB.getBoundingBox(posX - 8.0,posY - 8.0,posZ - 8.0,posX + 8.0,posY + 8.0,posZ + 8.0);
  List<EntityLiving> list=worldObj.getEntitiesWithinAABBExcludingEntity(this,boundingBox,selector);
  EntityLiving entity=null;
  double distance=10000.0F;
  for (  EntityLiving s : list) {
    double dx=s.posX - posX, dy=s.posY - posY, dz=s.posZ - posZ;
    double d=Math.sqrt(dx * dx + dy * dy + dz * dz);
    if (d < distance) {
      entity=s;
      distance=d;
    }
  }
  if (entity == null)   return null;
  return entity;
}","/** 
 * 自定义的寻路函数，在最初的4秒无视玩家
 */
@Override protected Entity findPlayerToAttack(){
  AxisAlignedBB boundingBox=AxisAlignedBB.getBoundingBox(posX - 8.0,posY - 8.0,posZ - 8.0,posX + 8.0,posY + 8.0,posZ + 8.0);
  List<Entity> list=worldObj.getEntitiesWithinAABBExcludingEntity(this,boundingBox,selector);
  Entity entity=null;
  double distance=10000.0F;
  for (  Entity s : list) {
    double dx=s.posX - posX, dy=s.posY - posY, dz=s.posZ - posZ;
    double d=Math.sqrt(dx * dx + dy * dy + dz * dz);
    if (d < distance) {
      entity=s;
      distance=d;
    }
  }
  if (entity == null)   return null;
  return entity;
}",0.9856687898089171
145959,"@Override public void onKeyDown(int keyCode,boolean isEnd){
  if (isEnd)   return;
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player == null)   return;
  CBCMod.netHandler.sendToServer(new MsgKeyUsing(true));
}","@Override public void onKeyDown(int keyCode,boolean isEnd){
  if (isEnd)   return;
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player == null)   return;
  EntityPlayer thePlayer=Minecraft.getMinecraft().thePlayer;
  Motion3D begin=new Motion3D(thePlayer,true);
  MovingObjectPosition mop=thePlayer.worldObj.rayTraceBlocks(begin.getPosVec(thePlayer.worldObj),begin.move(8.0).getPosVec(thePlayer.worldObj));
  if (mop == null || mop.sideHit == -1)   return;
  Block block=thePlayer.worldObj.getBlock(mop.blockX,mop.blockY,mop.blockZ);
  UsingUtils.useBlock(new BlockPos(mop.blockX,mop.blockY,mop.blockZ,block),thePlayer.worldObj,thePlayer);
  CBCMod.netHandler.sendToServer(new MsgKeyUsing(true));
}",0.4873417721518987
145960,"@Override public void onKeyUp(int keyCode,boolean isEnd){
  if (isEnd)   return;
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player == null)   return;
  CBCMod.netHandler.sendToServer(new MsgKeyUsing(false));
  ItemStack armorStack=player.inventory.armorInventory[3];
  System.out.println(""String_Node_Str"");
  if (armorStack == null)   return;
  System.out.println(""String_Node_Str"");
  ClientProxy.cth.flag=!ClientProxy.cth.flag;
}","@Override public void onKeyUp(int keyCode,boolean isEnd){
  if (isEnd)   return;
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (player == null)   return;
  UsingUtils.stopUsingBlock(player.worldObj,player);
  CBCMod.netHandler.sendToServer(new MsgKeyUsing(false));
  ItemStack armorStack=player.inventory.armorInventory[3];
  if (armorStack == null)   return;
  ClientProxy.cth.flag=!ClientProxy.cth.flag;
}",0.8255416191562144
145961,"/** 
 * 被Container所调用，开始合成进程。
 */
public void startCrafting(int slot){
  ICrafterRecipe r=getRecipeBySlot(slot);
  if (r == null)   return;
  System.out.print(""String_Node_Str"" + r.getOutputForDisplay().getDisplayName() + ""String_Node_Str""+ worldObj.isRemote);
  if (r.doCrafting(inventory,true) != null) {
    System.out.println(""String_Node_Str"");
    resetCraftingState();
    iconType=CrafterIconType.CRAFTING;
    this.isCrafting=true;
    this.currentRecipe=r;
    this.heatRequired=r.getHeatConsumed();
  }
 else {
    System.out.println(""String_Node_Str"");
    iconType=CrafterIconType.NOMATERIAL;
    heatRequired=0;
  }
  lastActionTime=worldObj.getWorldTime();
}","/** 
 * 被Container所调用，开始合成进程。
 */
public void startCrafting(int slot){
  ICrafterRecipe r=getRecipeBySlot(slot);
  if (r == null)   return;
  if (r.doCrafting(inventory,true) != null) {
    resetCraftingState();
    iconType=CrafterIconType.CRAFTING;
    this.isCrafting=true;
    this.currentRecipe=r;
    this.heatRequired=r.getHeatConsumed();
  }
 else {
    iconType=CrafterIconType.NOMATERIAL;
    heatRequired=0;
  }
  lastActionTime=worldObj.getWorldTime();
}",0.8182616330114135
145962,"/** 
 * @param tier
 * @param store
 */
public TileGeneratorLava(){
  super(1,20);
}","/** 
 * @param tier
 * @param store
 */
public TileGeneratorLava(){
  super(1,20);
  lavaCell=IC2Items.getItem(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + lavaCell);
}",0.6268656716417911
145963,"private void tryBurn(){
  int energyReq=maxStorage - bucketCnt;
  if (energyReq >= 1 && slots[0] != null) {
    if (slots[0].getItem() == Items.lava_bucket) {
      this.setInventorySlotContents(0,new ItemStack(Items.bucket,1,0));
      bucketCnt+=1;
    }
  }
}","private void tryBurn(){
  int energyReq=maxStorage - bucketCnt;
  if (energyReq >= 1 && slots[0] != null) {
    Item item=slots[0].getItem();
    if (item == Items.lava_bucket || (lavaCell != null && lavaCell.getItem() == item && lavaCell.getItemDamage() == slots[0].getItemDamage())) {
      if (item == Items.lava_bucket) {
        this.setInventorySlotContents(0,new ItemStack(Items.lava_bucket));
      }
 else {
        slots[0].stackSize--;
        if (slots[0].stackSize == 0)         slots[0]=null;
      }
      bucketCnt+=1;
    }
  }
}",0.594059405940594
145964,"public Bullet_9mm(){
  super();
  setCreativeTab(CBCMod.cct);
  setIAndU(""String_Node_Str"");
  setMaxStackSize(64);
  System.out.println(""String_Node_Str"" + this.getMaxDamage());
}","public Bullet_9mm(){
  super();
  setCreativeTab(CBCMod.cct);
  setIAndU(""String_Node_Str"");
  setMaxStackSize(64);
}",0.7878787878787878
145965,"@Override public boolean onItemUse(ItemStack item_stack,EntityPlayer player,World world,int x,int y,int z,int side,float x_off,float y_off,float z_off){
  if (!world.isRemote) {
    if (side == 0 || side == 1)     return false;
    int direction=Direction.facingToDirection[side];
    EntitySpray entity=new EntitySpray(world,x,y,z,direction,tId,player);
    if (entity.onValidSurface()) {
      System.err.println(""String_Node_Str"");
      world.spawnEntityInWorld(entity);
      world.playSoundAtEntity(player,""String_Node_Str"",0.7f,1);
      item_stack.damageItem(1,player);
    }
  }
  return true;
}","@Override public boolean onItemUse(ItemStack item_stack,EntityPlayer player,World world,int x,int y,int z,int side,float x_off,float y_off,float z_off){
  if (!world.isRemote) {
    if (side == 0 || side == 1)     return false;
    int direction=Direction.facingToDirection[side];
    EntitySpray entity=new EntitySpray(world,x,y,z,direction,tId,player);
    if (entity.onValidSurface()) {
      world.spawnEntityInWorld(entity);
      world.playSoundAtEntity(player,""String_Node_Str"",0.7f,1);
      item_stack.damageItem(1,player);
    }
  }
  return true;
}",0.7153912295786758
145966,"@Override public void onBlockUse(World world,EntityPlayer player,int bx,int by,int bz){
  TileEntity te=world.getTileEntity(bx,by,bz);
  if (te == null)   return;
  TileArmorCharger te2=(TileArmorCharger)te;
  String path=te2.currentEnergy > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
  world.playSoundAtEntity(player,path,0.5F,1.0F);
  UsingUtils.setBlockInUse(player,bx,by,bz);
  if (te2.currentEnergy > 0)   te2.startUsing(player);
}","@Override public void onBlockUse(World world,EntityPlayer player,int bx,int by,int bz){
  TileEntity te=world.getTileEntity(bx,by,bz);
  System.out.println(""String_Node_Str"" + world.isRemote);
  if (te == null)   return;
  TileArmorCharger te2=(TileArmorCharger)te;
  String path=te2.currentEnergy > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
  world.playSoundAtEntity(player,path,0.5F,1.0F);
  UsingUtils.setBlockInUse(player,bx,by,bz);
  if (te2.currentEnergy > 0)   te2.startUsing(player);
}",0.9376344086021504
145967,"@Override public void updateEntity(){
  if (!this.addedToNet)   this.isRSActivated=worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord);
  super.updateEntity();
  if (worldObj.isRemote)   return;
  int energyReq=ENERGY_MAX - currentEnergy;
  if (this.isRSActivated && currentBehavior == EnumBehavior.DISCHARGE) {
    for (int i=0; i < 4; i++) {
      ItemStack arm=slots[i];
      if (arm == null)       continue;
      ISpecialElectricItem item=(ISpecialElectricItem)arm.getItem();
      int e=item.getManager(arm).discharge(arm,ENERGY_MAX - currentEnergy,2,false,false);
      currentEnergy+=e;
    }
  }
 else   if (currentEnergy > 0 && !(!this.isRSActivated && currentBehavior == EnumBehavior.CHARGEONLY)) {
    boolean flag=false;
    for (int i=0; i < 4; i++) {
      ItemStack arm=slots[i];
      if (arm == null)       continue;
      ISpecialElectricItem item=(ISpecialElectricItem)arm.getItem();
      int e=item.getManager(arm).charge(arm,currentEnergy > 128 ? 128 : currentEnergy,2,false,worldObj.isRemote);
      currentEnergy-=e;
      flag=flag || e > 0;
    }
    isCharging=flag;
  }
 else   isCharging=false;
  if (currentEnergy < 0)   currentEnergy=0;
  if (this.isUsing) {
    for (    EntityPlayer charger : chargers) {
      int received=EnergyUtils.tryChargeArmor(charger,this.currentEnergy,2,false);
      currentEnergy-=received;
      if (received <= 0) {
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.5F,1.0F);
        this.stopUsing(charger);
      }
      if (worldObj.getWorldTime() % 40 == 0) {
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.3F,1.0F);
      }
      if (currentEnergy <= 0) {
        this.chargers.clear();
        this.isUsing=false;
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.5F,1.0F);
      }
    }
  }
  if (currentEnergy < ENERGY_MAX && !(!this.isRSActivated && currentBehavior == EnumBehavior.RECEIVEONLY)) {
    for (int i=4; i < 7; i++) {
      ItemStack sl=slots[i];
      if (sl == null)       continue;
      if (sl.getItem() == Items.redstone) {
        if (energyReq > 500) {
          this.decrStackSize(i,1);
        }
        currentEnergy+=500;
      }
 else       if (sl.getItem() instanceof ISpecialElectricItem) {
        ISpecialElectricItem item=(ISpecialElectricItem)sl.getItem();
        if (!item.canProvideEnergy(sl))         continue;
        int cn=energyReq < 128 ? energyReq : 128;
        cn=item.getManager(sl).discharge(sl,cn,2,false,false);
        currentEnergy+=cn;
      }
    }
  }
}","@Override public void updateEntity(){
  if (!this.addedToNet)   this.isRSActivated=worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord);
  super.updateEntity();
  if (worldObj.isRemote) {
    return;
  }
  int energyReq=ENERGY_MAX - currentEnergy;
  if (this.isRSActivated && currentBehavior == EnumBehavior.DISCHARGE) {
    for (int i=0; i < 4; i++) {
      ItemStack arm=slots[i];
      if (arm == null)       continue;
      ISpecialElectricItem item=(ISpecialElectricItem)arm.getItem();
      int e=item.getManager(arm).discharge(arm,ENERGY_MAX - currentEnergy,2,false,false);
      currentEnergy+=e;
    }
  }
 else   if (currentEnergy > 0 && !(!this.isRSActivated && currentBehavior == EnumBehavior.CHARGEONLY)) {
    boolean flag=false;
    for (int i=0; i < 4; i++) {
      ItemStack arm=slots[i];
      if (arm == null)       continue;
      ISpecialElectricItem item=(ISpecialElectricItem)arm.getItem();
      int e=item.getManager(arm).charge(arm,currentEnergy > 128 ? 128 : currentEnergy,2,false,worldObj.isRemote);
      currentEnergy-=e;
      flag=flag || e > 0;
    }
    isCharging=flag;
  }
 else   isCharging=false;
  if (currentEnergy < 0)   currentEnergy=0;
  if (this.isUsing) {
    for (    EntityPlayer charger : chargers) {
      int received=EnergyUtils.tryChargeArmor(charger,this.currentEnergy,2,false);
      currentEnergy-=received;
      if (received <= 0) {
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.5F,1.0F);
        this.stopUsing(charger);
      }
      if (worldObj.getWorldTime() % 40 == 0) {
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.3F,1.0F);
      }
      if (currentEnergy <= 0) {
        this.chargers.clear();
        this.isUsing=false;
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.5F,1.0F);
      }
    }
  }
  if (currentEnergy < ENERGY_MAX && !(!this.isRSActivated && currentBehavior == EnumBehavior.RECEIVEONLY)) {
    for (int i=4; i < 7; i++) {
      ItemStack sl=slots[i];
      if (sl == null)       continue;
      if (sl.getItem() == Items.redstone) {
        if (energyReq > 500) {
          this.decrStackSize(i,1);
        }
        currentEnergy+=500;
      }
 else       if (sl.getItem() instanceof ISpecialElectricItem) {
        ISpecialElectricItem item=(ISpecialElectricItem)sl.getItem();
        if (!item.canProvideEnergy(sl))         continue;
        int cn=energyReq < 128 ? energyReq : 128;
        cn=item.getManager(sl).discharge(sl,cn,2,false,false);
        currentEnergy+=cn;
      }
    }
  }
}",0.9948717948717948
145968,"private static void drawArmorTip(EntityPlayer player,TextureManager renderEngine,int k,int l){
  int tx=k - 26, tx2=k - 10;
  for (int i=0, xOffset=-10; i < 4; i++) {
    ItemStack is=player.inventory.armorInventory[i];
    ArmorHEV hev;
    if (is != null && is.getItem() instanceof ArmorHEV) {
      hev=(ArmorHEV)is.getItem();
      int energy=hev.getManager(is).discharge(is,Integer.MAX_VALUE,0,true,true);
      int heightToDraw=energy * 16 / is.getMaxDamage();
      int height=l - 65 - i * 16;
      if (is.getItemSpriteNumber() == 0) {
        renderEngine.bindTexture(renderEngine.getResourceLocation(0));
      }
 else {
        renderEngine.bindTexture(renderEngine.getResourceLocation(1));
      }
      GL11.glColor4f(1.0F,1.0F,1.0F,0.9F);
      HudUtils.drawTexturedModelRectFromIcon(tx + xOffset,height,hev.getIcon(is,0),16,16);
      renderEngine.bindTexture(ClientProps.HEV_HUD_PATH);
      GL11.glColor4f(1.0F,1.0F,1.0F,0.5F);
      HudUtils.drawTexturedModalRect(tx2 + xOffset,height + 16 - heightToDraw,286,64,8,16,34,64);
      GL11.glColor4f(1.0F,0.5F,0.0F,0.75F);
      HudUtils.drawTexturedModalRect(tx2 + xOffset,height + 16 - heightToDraw,350,128 - 4 * heightToDraw,8,heightToDraw,34,heightToDraw * 4);
    }
  }
}","private static void drawArmorTip(EntityPlayer player,TextureManager renderEngine,int k,int l){
  int tx=k - 26, tx2=k - 10;
  for (int i=0, xOffset=-10; i < 4; i++) {
    ItemStack is=player.inventory.armorInventory[i];
    ArmorHEV hev;
    if (is != null && is.getItem() instanceof ArmorHEV) {
      hev=(ArmorHEV)is.getItem();
      int energy=ArmorHEV.getItemCharge(is);
      int heightToDraw=energy * 16 / hev.getMaxDamage(is);
      System.out.println(hev + ""String_Node_Str"" + energy+ ""String_Node_Str""+ ArmorHEV.getItemCharge(is));
      int height=l - 65 - i * 16;
      if (is.getItemSpriteNumber() == 0) {
        renderEngine.bindTexture(renderEngine.getResourceLocation(0));
      }
 else {
        renderEngine.bindTexture(renderEngine.getResourceLocation(1));
      }
      GL11.glColor4f(1.0F,1.0F,1.0F,0.9F);
      HudUtils.drawTexturedModelRectFromIcon(tx + xOffset,height,hev.getIcon(is,0),16,16);
      renderEngine.bindTexture(ClientProps.HEV_HUD_PATH);
      GL11.glColor4f(1.0F,1.0F,1.0F,0.5F);
      HudUtils.drawTexturedModalRect(tx2 + xOffset,height + 16 - heightToDraw,286,64,8,16,34,64);
      GL11.glColor4f(1.0F,0.5F,0.0F,0.75F);
      HudUtils.drawTexturedModalRect(tx2 + xOffset,height + 16 - heightToDraw,350,128 - 4 * heightToDraw,8,heightToDraw,34,heightToDraw * 4);
    }
  }
}",0.92247454972592
145969,"@Override protected void addElements(Set<cn.liutils.api.client.gui.part.LIGuiPart> set){
}","@Override protected void addElements(Set<LIGuiPart> set){
  set.add(new LIGuiPart(""String_Node_Str"",80,28,64,10).setTip(new TipEnergy()));
}",0.5130434782608696
145970,"@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.renderEngine.bindTexture(ClientProps.GUI_ARMORCHARGER_PATH);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  this.drawTexturedModalRect(x,y,0,0,xSize,ySize);
  HudUtils.setTextureResolution(256,256);
  this.drawElements(i,j);
  int length=te.currentEnergy * 64 / TileArmorCharger.ENERGY_MAX;
  this.drawTexturedModalRect(x + 80,y + 28,176,0,length,10);
  if (te.isCharging) {
    int height=(int)(te.getWorldObj().getWorldTime() % 43);
    this.drawTexturedModalRect(x + 29,y + 21,176,56,43,height);
  }
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int i,int j){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.renderEngine.bindTexture(ClientProps.GUI_ARMORCHARGER_PATH);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  this.drawTexturedModalRect(x,y,0,0,xSize,ySize);
  HudUtils.setTextureResolution(256,256);
  this.drawElements(i,j);
  int length=te.currentEnergy * 64 / TileArmorCharger.ENERGY_MAX;
  this.drawTexturedModalRect(x + 80,y + 28,176,0,length,10);
  if (te.isUsing) {
    System.out.println(""String_Node_Str"");
    int height=(int)(te.getWorldObj().getWorldTime() % 43);
    this.drawTexturedModalRect(x + 29,y + 21,176,56,43,height);
  }
}",0.962178517397882
145971,"@Override protected void onImpact(MovingObjectPosition par1){
  if (par1.typeOfHit == MovingObjectType.BLOCK) {
    System.out.println(""String_Node_Str"" + worldObj.isRemote);
    lastBounceTime=ticksExisted;
  }
  if (worldObj.isRemote)   return;
  Block block=this.worldObj.getBlock(par1.blockX,par1.blockY,par1.blockZ);
  double collideStrengh=1.0;
  if (par1.typeOfHit == MovingObjectType.BLOCK) {
    if (!block.isCollidable())     return;
switch (par1.sideHit) {
case 0:
case 1:
      collideStrengh=Math.abs(motionY) * 0.3;
    this.motionY=0.01 * -motionY;
  this.motionX=0.8 * motionX;
this.motionZ=0.8 * motionZ;
break;
case 2:
case 3:
this.motionZ=0.6 * -motionZ;
collideStrengh=Math.abs(motionZ);
break;
case 4:
case 5:
this.motionX=0.6 * -motionX;
collideStrengh=Math.abs(motionX);
break;
default :
break;
}
}
if (collideStrengh > 1.0) collideStrengh=1.0;
if (lastBounceTime == 0 || ticksExisted - lastBounceTime > 20) {
this.playSound(""String_Node_Str"",(float)(5F * collideStrengh),1.0F);
}
}","@Override protected void onImpact(MovingObjectPosition par1){
  if (par1.typeOfHit == MovingObjectType.BLOCK) {
    lastBounceTime=ticksExisted;
  }
  if (worldObj.isRemote)   return;
  Block block=this.worldObj.getBlock(par1.blockX,par1.blockY,par1.blockZ);
  double collideStrengh=1.0;
  if (par1.typeOfHit == MovingObjectType.BLOCK) {
    if (!block.isCollidable())     return;
switch (par1.sideHit) {
case 0:
case 1:
      collideStrengh=Math.abs(motionY) * 0.3;
    this.motionY=0.01 * -motionY;
  this.motionX=0.8 * motionX;
this.motionZ=0.8 * motionZ;
break;
case 2:
case 3:
this.motionZ=0.6 * -motionZ;
collideStrengh=Math.abs(motionZ);
break;
case 4:
case 5:
this.motionX=0.6 * -motionX;
collideStrengh=Math.abs(motionX);
break;
default :
break;
}
}
if (collideStrengh > 1.0) collideStrengh=1.0;
if (lastBounceTime == 0 || ticksExisted - lastBounceTime > 20) {
this.playSound(""String_Node_Str"",(float)(5F * collideStrengh),1.0F);
}
}",0.9676425269645608
145972,"@Override public void onUpdate(){
  if (motion == null)   motion=new Motion3D(this,true);
  onGround=false;
  MovingObjectPosition trace=this.worldObj.rayTraceBlocks(motion.getPosVec(this.worldObj),motion.move(100.0F).getPosVec(this.worldObj));
  Vec3 end=(trace == null) ? motion.getPosVec(this.worldObj) : trace.hitVec;
  double dx=end.xCoord - this.posX;
  double dy=end.yCoord - this.posY;
  double dz=end.zCoord - this.posZ;
  distanceToRender=Math.sqrt(dx * dx + dy * dy + dz * dz);
  System.out.println(worldObj.isRemote + ""String_Node_Str"" + this.rotationYaw);
  if (distanceToRender < 3)   distanceToRender=50;
  if (this.ticksExisted > 2)   this.setDead();
}","@Override public void onUpdate(){
  if (motion == null)   motion=new Motion3D(this,true);
  onGround=false;
  MovingObjectPosition trace=this.worldObj.rayTraceBlocks(motion.getPosVec(this.worldObj),motion.move(100.0F).getPosVec(this.worldObj));
  Vec3 end=(trace == null) ? motion.getPosVec(this.worldObj) : trace.hitVec;
  double dx=end.xCoord - this.posX;
  double dy=end.yCoord - this.posY;
  double dz=end.zCoord - this.posZ;
  distanceToRender=Math.sqrt(dx * dx + dy * dy + dz * dz);
  if (distanceToRender < 3)   distanceToRender=50;
  if (this.ticksExisted > 2)   this.setDead();
}",0.9363057324840764
145973,"/** 
 * Similar to setArrowHeading, it's point the throwable entity to a x, y, z direction.
 */
public void setRayHeading(double par1,double par3,double par5,float par7,float par8){
  float f2=MathHelper.sqrt_double(par1 * par1 + par3 * par3 + par5 * par5);
  par1/=(double)f2;
  par3/=(double)f2;
  par5/=(double)f2;
  par1+=this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
  par3+=this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
  par5+=this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
  par1*=(double)par7;
  par3*=(double)par7;
  par5*=(double)par7;
  this.motionX=par1;
  this.motionY=par3;
  this.motionZ=par5;
  float f3=MathHelper.sqrt_double(par1 * par1 + par5 * par5);
  System.out.println(""String_Node_Str"" + par1 + ""String_Node_Str""+ par3+ ""String_Node_Str""+ par5+ ""String_Node_Str"");
  this.prevRotationYaw=this.rotationYaw=(float)(Math.atan2(par1,par5) * 180.0D / Math.PI);
  this.prevRotationPitch=this.rotationPitch=(float)(Math.atan2(par3,(double)f3) * 180.0D / Math.PI);
  System.out.println(rotationYaw + ""String_Node_Str"" + rotationPitch);
}","/** 
 * Similar to setArrowHeading, it's point the throwable entity to a x, y, z direction.
 */
public void setRayHeading(double par1,double par3,double par5,float par7,float par8){
  float f2=MathHelper.sqrt_double(par1 * par1 + par3 * par3 + par5 * par5);
  par1/=(double)f2;
  par3/=(double)f2;
  par5/=(double)f2;
  par1+=this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
  par3+=this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
  par5+=this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
  par1*=(double)par7;
  par3*=(double)par7;
  par5*=(double)par7;
  this.motionX=par1;
  this.motionY=par3;
  this.motionZ=par5;
  float f3=MathHelper.sqrt_double(par1 * par1 + par5 * par5);
  this.prevRotationYaw=this.rotationYaw=(float)(Math.atan2(par1,par5) * 180.0D / Math.PI);
  this.prevRotationPitch=this.rotationPitch=(float)(Math.atan2(par3,(double)f3) * 180.0D / Math.PI);
}",0.9069423929098966
145974,"public ArmorHEV(int armorType){
  super(ArmorMaterial.DIAMOND,2,armorType);
  setUnlocalizedName(""String_Node_Str"" + this.armorType);
  this.setIconName(""String_Node_Str"" + armorType);
  this.setMaxCharge(100000);
  this.setTier(2);
  this.setTransferLimit(128);
  this.setEnergyPerDamage(500);
}","public ArmorHEV(int armorType){
  super(ArmorMaterial.DIAMOND,2,armorType);
  setUnlocalizedName(""String_Node_Str"" + this.armorType);
  this.setIconName(""String_Node_Str"" + armorType);
  this.setMaxCharge(100000);
  this.setMaxDamage(100000);
  this.setTier(2);
  this.setTransferLimit(128);
  this.setEnergyPerDamage(500);
}",0.9533011272141708
145975,"public boolean onActionEnd(World world,EntityPlayer player,InfWeapon inf,boolean isRemoved){
  int ticks=maxTick - inf.getTickLeft(this);
  if (ticks < 10)   return false;
  if (isRemoved) {
    int strengh=getStrengh(inf);
    System.out.println(""String_Node_Str"" + strengh);
    if (!world.isRemote) {
      world.spawnEntityInWorld(new EntityBulletGauss(world,player,Math.max(5,strengh)));
    }
    double d=0.075, vel=getStrengh(inf) * d;
    Motion3D motion=new Motion3D(player,true);
    player.addVelocity(-motion.motionX * d * strengh,-motion.motionY * d * strengh,-motion.motionZ * d * strengh);
    world.playSoundAtEntity(player,SND_SHOOT_PATH,0.5F,1.0F);
  }
 else {
    player.attackEntityFrom(DamageSource.causePlayerDamage(player),getStrengh(inf) * 0.4F);
  }
  return true;
}","public boolean onActionEnd(World world,EntityPlayer player,InfWeapon inf,boolean isRemoved){
  int ticks=maxTick - inf.getTickLeft(this);
  if (ticks < 10)   return false;
  if (isRemoved) {
    int strengh=getStrengh(inf);
    if (!world.isRemote) {
      world.spawnEntityInWorld(new EntityBulletGauss(world,player,Math.max(5,strengh)));
    }
    double d=0.075, vel=getStrengh(inf) * d;
    Motion3D motion=new Motion3D(player,true);
    player.addVelocity(-motion.motionX * d * strengh,-motion.motionY * d * strengh,-motion.motionZ * d * strengh);
    world.playSoundAtEntity(player,SND_SHOOT_PATH,0.5F,1.0F);
  }
 else {
    player.attackEntityFrom(DamageSource.causePlayerDamage(player),getStrengh(inf) * 0.4F);
  }
  return true;
}",0.9653821032005224
145976,"@Override public void doRender(Entity entity,double d0,double d1,double d2,float f,float f1){
  EntityVortigauntRay ray=(EntityVortigauntRay)entity;
  Tessellator tessellator=Tessellator.instance;
  GL11.glPushMatrix();
  double dx=ray.destX - ray.startX;
  double dy=ray.destY - ray.startY;
  double dz=ray.destZ - ray.startZ;
  double d=Math.sqrt(dx * dx + dy * dy + dz * dz);
  float angle=ray.ticksExisted;
  double tx=0.0, tz=0.0;
  double ty=-0.63;
  Vec3 v1=RenderUtils.newV3(0,0,-WIDTH), v2=RenderUtils.newV3(0,0,WIDTH), v5=RenderUtils.newV3(0,WIDTH,0), v6=RenderUtils.newV3(0,-WIDTH,0);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glDisable(GL11.GL_CULL_FACE);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslatef((float)d0,(float)d1,(float)d2);
  int rand=RenderUtils.rand.nextInt(3);
  Minecraft.getMinecraft().renderEngine.bindTexture(ClientProps.VORTIGAUNT_RAY_PATH[rand]);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240f,240f);
  tessellator.startDrawingQuads();
  tessellator.setBrightness(15728880);
  tessellator.setColorRGBA(50,200,50,200);
  RenderUtils.addVertex(v1.addVector(tx,ty,tz),0,0);
  RenderUtils.addVertex(v2.addVector(tx,ty,tz),1,0);
  RenderUtils.addVertex(v2.addVector(dx,dy,dz),1,d);
  RenderUtils.addVertex(v1.addVector(dx,dy,dz),0,d);
  RenderUtils.addVertex(v5.addVector(tx,ty,tz),0,d);
  RenderUtils.addVertex(v6.addVector(tx,ty,tz),1,d);
  RenderUtils.addVertex(v6.addVector(dx,dy,dz),1,0);
  RenderUtils.addVertex(v5.addVector(dx,dy,dz),0,0);
  tessellator.draw();
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glPopMatrix();
}","@Override public void doRender(Entity entity,double d0,double d1,double d2,float f,float f1){
  EntityVortigauntRay ray=(EntityVortigauntRay)entity;
  Tessellator tessellator=Tessellator.instance;
  GL11.glPushMatrix();
  double dx=ray.destX - ray.startX;
  double dy=ray.destY - ray.startY;
  double dz=ray.destZ - ray.startZ;
  double d=Math.sqrt(dx * dx + dy * dy + dz * dz);
  float angle=ray.ticksExisted;
  double tx=0.0, tz=0.0;
  double ty=-0.63;
  Vec3 v1=RenderUtils.newV3(0,0,-WIDTH), v2=RenderUtils.newV3(0,0,WIDTH), v5=RenderUtils.newV3(0,WIDTH,0), v6=RenderUtils.newV3(0,-WIDTH,0);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glDisable(GL11.GL_CULL_FACE);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslatef((float)d0,(float)d1,(float)d2);
  int rand=RNG.nextInt(3);
  Minecraft.getMinecraft().renderEngine.bindTexture(ClientProps.VORTIGAUNT_RAY_PATH[rand]);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240f,240f);
  tessellator.startDrawingQuads();
  tessellator.setBrightness(15728880);
  tessellator.setColorRGBA(50,200,50,200);
  RenderUtils.addVertex(v1.addVector(tx,ty,tz),0,0);
  RenderUtils.addVertex(v2.addVector(tx,ty,tz),1,0);
  RenderUtils.addVertex(v2.addVector(dx,dy,dz),1,d);
  RenderUtils.addVertex(v1.addVector(dx,dy,dz),0,d);
  RenderUtils.addVertex(v5.addVector(tx,ty,tz),0,d);
  RenderUtils.addVertex(v6.addVector(tx,ty,tz),1,d);
  RenderUtils.addVertex(v6.addVector(dx,dy,dz),1,0);
  RenderUtils.addVertex(v5.addVector(dx,dy,dz),0,0);
  tessellator.draw();
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glPopMatrix();
}",0.99504806291873
145977,"private void attackEntityInRange(int ATTACK_RANGE){
  this.currStat=stats.ATTACKING_RANGE;
  System.err.println(""String_Node_Str"");
  List<EntityLiving> ls=worldObj.getEntitiesWithinAABB(Entity.class,AxisAlignedBB.getBoundingBox(posX - (ATTACK_RANGE),posY - (ATTACK_RANGE / 2),posZ - (ATTACK_RANGE),posX + (ATTACK_RANGE),posY + (ATTACK_RANGE),posZ + (ATTACK_RANGE)).expand(ATTACK_RANGE,ATTACK_RANGE,ATTACK_RANGE));
  for (int i=0; i <= ls.size(); i++) {
    try {
      EntityLivingBase toAttack=ls.get(i);
      if (!toAttack.equals(this))       toAttack.attackEntityFrom(DamageSource.causeMobDamage(this),toAttack.getHealth() - 1.5f);
    }
 catch (    Exception ex) {
      System.err.println(""String_Node_Str"");
    }
  }
}","private void attackEntityInRange(int ATTACK_RANGE){
  this.currStat=stats.ATTACKING_RANGE;
  List<EntityLiving> ls=worldObj.getEntitiesWithinAABB(Entity.class,AxisAlignedBB.getBoundingBox(posX - (ATTACK_RANGE),posY - (ATTACK_RANGE / 2),posZ - (ATTACK_RANGE),posX + (ATTACK_RANGE),posY + (ATTACK_RANGE),posZ + (ATTACK_RANGE)).expand(ATTACK_RANGE,ATTACK_RANGE,ATTACK_RANGE));
  for (int i=0; i <= ls.size(); i++) {
    try {
      EntityLivingBase toAttack=ls.get(i);
      if (!toAttack.equals(this))       toAttack.attackEntityFrom(DamageSource.causeMobDamage(this),toAttack.getHealth() - 1.5f);
    }
 catch (    Exception ex) {
    }
  }
}",0.9371345029239766
145978,"@Override public void preInit(){
  ClientProps.loadProps(CBCMod.config);
  LIKeyProcess.addKey(""String_Node_Str"",ClientProps.KEY_ID_USE_BLOCK,true,new KeyUse());
}","@Override public void preInit(){
  ClientProps.loadProps(CBCMod.config);
  LIKeyProcess.addKey(""String_Node_Str"",ClientProps.KEY_ID_USE_BLOCK,false,new KeyUse());
}",0.9785932721712538
145979,"/** 
 */
public static void addItemRecipes(){
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.uraniumOre);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.oreTin);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.oreCopper);
  OreDictionary.registerOre(""String_Node_Str"",CBCItems.ingotUranium);
  OreDictionary.registerOre(""String_Node_Str"",CBCItems.ingotSteel);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.blockRefined);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.storageS);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.storageL);
  OreDictionary.registerOre(""String_Node_Str"",tin);
  OreDictionary.registerOre(""String_Node_Str"",copper);
  ItemStack smaterials_1_0=new ItemStack(CBCItems.materials,1,0), smaterials_1_1=new ItemStack(CBCItems.materials,1,1), smaterials_1_2=new ItemStack(CBCItems.materials,1,2), smaterials_1_3=new ItemStack(CBCItems.materials,1,3), smaterials_1_4=new ItemStack(CBCItems.materials,1,4), smaterials_1_5=new ItemStack(CBCItems.materials,1,5), smaterials_1_6=new ItemStack(CBCItems.materials,1,6), smaterials_1_7=new ItemStack(CBCItems.materials,1,7), smaterials_1_8=new ItemStack(CBCItems.materials,1,8), smaterials_1_9=new ItemStack(CBCItems.materials,1,9), sredstone=new ItemStack(Items.redstone), slightStoneDust=new ItemStack(Items.glowstone_dust), stnt=new ItemStack(Blocks.tnt), sblockLapis=new ItemStack(Blocks.lapis_block), sdiamond=new ItemStack(Items.diamond), sblazePowder=new ItemStack(Items.blaze_powder), sglass=new ItemStack(Blocks.glass), slambdaChip=new ItemStack(CBCItems.lambdaChip), scoal=new ItemStack(Items.coal), sgunpowder=new ItemStack(Items.gunpowder), singotGold=new ItemStack(Items.gold_ingot), sblockRedstone=new ItemStack(Blocks.redstone_block), sfurnace=new ItemStack(Blocks.furnace), schest=new ItemStack(Blocks.chest), sweaponCrafter=new ItemStack(CBCBlocks.weaponCrafter), sadvCrafter=new ItemStack(CBCBlocks.advCrafter), swire=new ItemStack(CBCBlocks.wire), semerald=new ItemStack(Items.emerald), schip=new ItemStack(chip), selectricCrafter=new ItemStack(CBCBlocks.elCrafter), sbattery=new ItemStack(battery), sgenFire=new ItemStack(CBCBlocks.genFire), sstorageS=new ItemStack(CBCBlocks.storageS), sstorageL=new ItemStack(CBCBlocks.storageL), sgenLava=new ItemStack(CBCBlocks.genLava), sbucketEmpty=new ItemStack(Items.bucket), sgenSolar=new ItemStack(CBCBlocks.genSolar), snetherQuartz=new ItemStack(Items.quartz), sfspieye=new ItemStack(Items.fermented_spider_eye), srotten=new ItemStack(Items.rotten_flesh), smagma=new ItemStack(Items.magma_cream), sendereye=new ItemStack(Items.ender_eye), smedkit=new ItemStack(DMItems.medkit);
  Object input[][]={{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',sglass},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sblockRedstone,'C',""String_Node_Str"",'D',sfurnace,'E',schest},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sdiamond,'C',sweaponCrafter,'D',""String_Node_Str"",'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',Blocks.wool,'B',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',slightStoneDust,'B',semerald,'C',sdiamond,'D',schip,'E',sglass},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',swire,'C',slambdaChip,'D',sadvCrafter,'E',slightStoneDust},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',swire,'C',slightStoneDust},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',battery,'C',sredstone,'D',schip,'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',swire,'B',snetherQuartz,'C',sredstone,'D',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',smedkit,'C',slambdaChip,'D',""String_Node_Str"",'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',slambdaChip,'C',battery,'D',""String_Node_Str"",'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sdiamond,'C',""String_Node_Str"",'D',slambdaChip,'E',semerald},{""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',swire,'C',schip},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',sredstone},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',sredstone},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',slightStoneDust}};
  ItemStack output[]={ItemMaterial.newStack(materials,10,EnumMaterial.BOX),sweaponCrafter,sadvCrafter,new ItemStack(CBCBlocks.wire,6),new ItemStack(lambdaChip,2),selectricCrafter,sbattery,sstorageS,schip,new ItemStack(DMBlocks.healthCharger),new ItemStack(DMBlocks.armorCharger),new ItemStack(CBCBlocks.blockRefined),new ItemStack(CBCItems.ironBar,5),new ItemStack(XenBlocks.xenPortal),new ItemStack(CBCMobItems.sentrySyncer,2),new ItemStack(spray1[0]),new ItemStack(spray1[1]),new ItemStack(spray3)};
  addOreRecipes(output,input);
  Object[][] input2={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sstorageS,'B',sglass,'C',""String_Node_Str"",'D',sblockLapis,'E',sfurnace},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sblazePowder,'C',sbucketEmpty,'D',""String_Node_Str"",'E',sgenFire},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',snetherQuartz,'C',schip,'D',""String_Node_Str"",'E',sgenFire}};
  ItemStack[] output2={sgenFire,sgenLava,sgenSolar};
  addOreRecipes(output2,input2);
  GameRegistry.addShapelessRecipe(new ItemStack(halfLife01),lambdaChip,Items.diamond);
  GameRegistry.addShapelessRecipe(new ItemStack(halfLife02),lambdaChip,Items.emerald);
  GameRegistry.addShapelessRecipe(new ItemStack(halfLife03),lambdaChip,Items.ender_eye);
  GameRegistry.addShapelessRecipe(new ItemStack(XenBlocks.crystal),slightStoneDust,sdiamond);
  GameRegistry.addShapelessRecipe(new ItemStack(DMItems.weapon_crowbar_el),lambdaChip,new ItemStack(DMItems.weapon_crowbar));
  GameRegistry.addShapelessRecipe(sstorageL,CBCBlocks.storageS,lambdaChip);
  GameRegistry.addRecipe(new RecipeHEVAttach());
  GameRegistry.addRecipe(new RecipeMedkitFill());
  GameRegistry.addRecipe(new RecipeRepair(ammo_uranium,new ItemStack(ingotUranium)).setRepairAmt(34));
  GameRegistry.addRecipe(new RecipeRepair(ammo_bow,new ItemStack(bullet_steelbow)));
  IRecipe recipes[]={new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.ARMOR),smaterials_1_0,""String_Node_Str"",sdiamond,slambdaChip),new ShapelessOreRecipe(ItemMaterial.newStack(materials,4,EnumMaterial.AMMUNITION),smaterials_1_0,""String_Node_Str"",sredstone,sgunpowder),new ShapelessOreRecipe(ItemMaterial.newStack(materials,4,EnumMaterial.ACCESSORIES),smaterials_1_0,""String_Node_Str"",sredstone,scoal),new ShapelessOreRecipe(ItemMaterial.newStack(materials,4,EnumMaterial.EXPLOSIVE),smaterials_1_0,""String_Node_Str"",stnt,sgunpowder),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.HEAVY),smaterials_1_0,""String_Node_Str"",sblockLapis,sblazePowder),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.LIGHT),smaterials_1_0,""String_Node_Str"",""String_Node_Str"",slightStoneDust),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.PISTOL),smaterials_1_0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new ShapelessOreRecipe(ItemMaterial.newStack(materials,3,EnumMaterial.BIO),smaterials_1_0,srotten,sendereye,CBCMobItems.dna),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.TECH),smaterials_1_0,sdiamond,slambdaChip,slightStoneDust),new RecipeRepair(spray1[0],sredstone),new RecipeRepair(spray1[1],sredstone),new RecipeRepair(spray3,slightStoneDust)};
  for (  IRecipe r : recipes)   GameRegistry.addRecipe(r);
  GameRegistry.addSmelting(Items.iron_ingot,new ItemStack(ingotSteel,1,0),3.0F);
  GameRegistry.addSmelting(CBCBlocks.uraniumOre,new ItemStack(ingotUranium),5);
  GameRegistry.addSmelting(CBCBlocks.oreCopper,new ItemStack(copper),2);
  GameRegistry.addSmelting(CBCBlocks.oreTin,new ItemStack(tin),2);
  WeightedRandomChestContent gens_dungeon[]={new WeightedRandomChestContent(new ItemStack(halfLife01),1,1,5),new WeightedRandomChestContent(new ItemStack(halfLife02),1,1,5),new WeightedRandomChestContent(new ItemStack(halfLife03),1,1,5),new WeightedRandomChestContent(new ItemStack(ironBar),3,8,50),new WeightedRandomChestContent(new ItemStack(DMItems.physCalibur),1,1,1),new WeightedRandomChestContent(new ItemStack(DMItems.weapon_crowbar_el),1,1,10)};
  for (  WeightedRandomChestContent gen : gens_dungeon) {
    ChestGenHooks.addItem(""String_Node_Str"",gen);
    ChestGenHooks.addItem(""String_Node_Str"",gen);
  }
  WeightedRandomChestContent gens_desert[]={new WeightedRandomChestContent(new ItemStack(ironBar),3,8,50),new WeightedRandomChestContent(new ItemStack(DMItems.physCalibur),1,1,1),new WeightedRandomChestContent(new ItemStack(DMItems.weapon_crowbar_el),1,1,10),new WeightedRandomChestContent(new ItemStack(spray3),1,1,4),new WeightedRandomChestContent(new ItemStack(lambdaChip),2,5,3)};
  for (  WeightedRandomChestContent gen : gens_desert) {
    ChestGenHooks.addItem(""String_Node_Str"",gen);
    ChestGenHooks.addItem(""String_Node_Str"",gen);
  }
}","/** 
 */
public static void addItemRecipes(){
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.uraniumOre);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.oreTin);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.oreCopper);
  OreDictionary.registerOre(""String_Node_Str"",CBCItems.ingotUranium);
  OreDictionary.registerOre(""String_Node_Str"",CBCItems.ingotSteel);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.blockRefined);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.storageS);
  OreDictionary.registerOre(""String_Node_Str"",CBCBlocks.storageL);
  OreDictionary.registerOre(""String_Node_Str"",tin);
  OreDictionary.registerOre(""String_Node_Str"",copper);
  ItemStack smaterials_1_0=new ItemStack(CBCItems.materials,1,0), smaterials_1_1=new ItemStack(CBCItems.materials,1,1), smaterials_1_2=new ItemStack(CBCItems.materials,1,2), smaterials_1_3=new ItemStack(CBCItems.materials,1,3), smaterials_1_4=new ItemStack(CBCItems.materials,1,4), smaterials_1_5=new ItemStack(CBCItems.materials,1,5), smaterials_1_6=new ItemStack(CBCItems.materials,1,6), smaterials_1_7=new ItemStack(CBCItems.materials,1,7), smaterials_1_8=new ItemStack(CBCItems.materials,1,8), smaterials_1_9=new ItemStack(CBCItems.materials,1,9), sredstone=new ItemStack(Items.redstone), slightStoneDust=new ItemStack(Items.glowstone_dust), stnt=new ItemStack(Blocks.tnt), sblockLapis=new ItemStack(Blocks.lapis_block), sdiamond=new ItemStack(Items.diamond), sblazePowder=new ItemStack(Items.blaze_powder), sglass=new ItemStack(Blocks.glass), slambdaChip=new ItemStack(CBCItems.lambdaChip), scoal=new ItemStack(Items.coal), sgunpowder=new ItemStack(Items.gunpowder), singotGold=new ItemStack(Items.gold_ingot), sblockRedstone=new ItemStack(Blocks.redstone_block), sfurnace=new ItemStack(Blocks.furnace), schest=new ItemStack(Blocks.chest), sweaponCrafter=new ItemStack(CBCBlocks.weaponCrafter), sadvCrafter=new ItemStack(CBCBlocks.advCrafter), swire=new ItemStack(CBCBlocks.wire), semerald=new ItemStack(Items.emerald), schip=new ItemStack(chip), selectricCrafter=new ItemStack(CBCBlocks.elCrafter), sbattery=new ItemStack(battery), sgenFire=new ItemStack(CBCBlocks.genFire), sstorageS=new ItemStack(CBCBlocks.storageS), sstorageL=new ItemStack(CBCBlocks.storageL), sgenLava=new ItemStack(CBCBlocks.genLava), sbucketEmpty=new ItemStack(Items.bucket), sgenSolar=new ItemStack(CBCBlocks.genSolar), snetherQuartz=new ItemStack(Items.quartz), sfspieye=new ItemStack(Items.fermented_spider_eye), srotten=new ItemStack(Items.rotten_flesh), smagma=new ItemStack(Items.magma_cream), sendereye=new ItemStack(Items.ender_eye), smedkit=new ItemStack(DMItems.medkit);
  Object input[][]={{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',sglass},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sblockRedstone,'C',""String_Node_Str"",'D',sfurnace,'E',schest},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sdiamond,'C',sweaponCrafter,'D',""String_Node_Str"",'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',Blocks.wool,'B',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',slightStoneDust,'B',semerald,'C',sdiamond,'D',schip,'E',sglass},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',swire,'C',slambdaChip,'D',sadvCrafter,'E',slightStoneDust},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',swire,'C',slightStoneDust},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',battery,'C',sredstone,'D',schip,'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',swire,'B',snetherQuartz,'C',sredstone,'D',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',smedkit,'C',slambdaChip,'D',""String_Node_Str"",'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',slambdaChip,'C',battery,'D',""String_Node_Str"",'E',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sdiamond,'C',""String_Node_Str"",'D',slambdaChip,'E',semerald},{""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',swire,'C',schip},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',sredstone},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',sredstone},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',""String_Node_Str"",'B',slightStoneDust}};
  ItemStack output[]={ItemMaterial.newStack(materials,10,EnumMaterial.BOX),sweaponCrafter,sadvCrafter,new ItemStack(CBCBlocks.wire,6),new ItemStack(lambdaChip,2),selectricCrafter,sbattery,sstorageS,schip,new ItemStack(DMBlocks.healthCharger),new ItemStack(DMBlocks.armorCharger),new ItemStack(CBCBlocks.blockRefined),new ItemStack(CBCItems.ironBar,5),new ItemStack(XenBlocks.xenPortal),new ItemStack(CBCMobItems.sentrySyncer,2),new ItemStack(spray1[0]),new ItemStack(spray1[1]),new ItemStack(spray3)};
  addOreRecipes(output,input);
  Object[][] input2={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sstorageS,'B',sglass,'C',""String_Node_Str"",'D',sblockLapis,'E',sfurnace},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',sblazePowder,'C',sbucketEmpty,'D',""String_Node_Str"",'E',sgenFire},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'A',sglass,'B',snetherQuartz,'C',schip,'D',""String_Node_Str"",'E',sgenFire}};
  ItemStack[] output2={sgenFire,sgenLava,sgenSolar};
  addOreRecipes(output2,input2);
  GameRegistry.addShapelessRecipe(new ItemStack(halfLife01),lambdaChip,Items.diamond);
  GameRegistry.addShapelessRecipe(new ItemStack(halfLife02),lambdaChip,Items.emerald);
  GameRegistry.addShapelessRecipe(new ItemStack(halfLife03),lambdaChip,Items.ender_eye);
  GameRegistry.addShapelessRecipe(new ItemStack(XenBlocks.crystal),slightStoneDust,sdiamond);
  GameRegistry.addShapelessRecipe(new ItemStack(DMItems.weapon_crowbar_el),lambdaChip,new ItemStack(DMItems.weapon_crowbar));
  GameRegistry.addShapelessRecipe(sstorageL,CBCBlocks.storageS,lambdaChip);
  GameRegistry.addRecipe(new RecipeHEVAttach());
  GameRegistry.addRecipe(new RecipeMedkitFill());
  GameRegistry.addRecipe(new RecipeRepair(ammo_uranium,new ItemStack(ingotUranium)).setRepairAmt(34));
  GameRegistry.addRecipe(new RecipeRepair(ammo_bow,new ItemStack(bullet_steelbow)));
  GameRegistry.addRecipe(new RecipeRepair(ammo_9mm,new ItemStack(bullet_9mm)));
  GameRegistry.addRecipe(new RecipeRepair(ammo_9mm2,new ItemStack(bullet_9mm)));
  IRecipe recipes[]={new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.ARMOR),smaterials_1_0,""String_Node_Str"",sdiamond,slambdaChip),new ShapelessOreRecipe(ItemMaterial.newStack(materials,4,EnumMaterial.AMMUNITION),smaterials_1_0,""String_Node_Str"",sredstone,sgunpowder),new ShapelessOreRecipe(ItemMaterial.newStack(materials,4,EnumMaterial.ACCESSORIES),smaterials_1_0,""String_Node_Str"",sredstone,scoal),new ShapelessOreRecipe(ItemMaterial.newStack(materials,4,EnumMaterial.EXPLOSIVE),smaterials_1_0,""String_Node_Str"",stnt,sgunpowder),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.HEAVY),smaterials_1_0,""String_Node_Str"",sblockLapis,sblazePowder),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.LIGHT),smaterials_1_0,""String_Node_Str"",""String_Node_Str"",slightStoneDust),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.PISTOL),smaterials_1_0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new ShapelessOreRecipe(ItemMaterial.newStack(materials,3,EnumMaterial.BIO),smaterials_1_0,srotten,sendereye,CBCMobItems.dna),new ShapelessOreRecipe(ItemMaterial.newStack(materials,2,EnumMaterial.TECH),smaterials_1_0,sdiamond,slambdaChip,slightStoneDust),new RecipeRepair(spray1[0],sredstone),new RecipeRepair(spray1[1],sredstone),new RecipeRepair(spray3,slightStoneDust)};
  for (  IRecipe r : recipes)   GameRegistry.addRecipe(r);
  GameRegistry.addSmelting(Items.iron_ingot,new ItemStack(ingotSteel,1,0),3.0F);
  GameRegistry.addSmelting(CBCBlocks.uraniumOre,new ItemStack(ingotUranium),5);
  GameRegistry.addSmelting(CBCBlocks.oreCopper,new ItemStack(copper),2);
  GameRegistry.addSmelting(CBCBlocks.oreTin,new ItemStack(tin),2);
  WeightedRandomChestContent gens_dungeon[]={new WeightedRandomChestContent(new ItemStack(halfLife01),1,1,5),new WeightedRandomChestContent(new ItemStack(halfLife02),1,1,5),new WeightedRandomChestContent(new ItemStack(halfLife03),1,1,5),new WeightedRandomChestContent(new ItemStack(ironBar),3,8,50),new WeightedRandomChestContent(new ItemStack(DMItems.physCalibur),1,1,1),new WeightedRandomChestContent(new ItemStack(DMItems.weapon_crowbar_el),1,1,10)};
  for (  WeightedRandomChestContent gen : gens_dungeon) {
    ChestGenHooks.addItem(""String_Node_Str"",gen);
    ChestGenHooks.addItem(""String_Node_Str"",gen);
  }
  WeightedRandomChestContent gens_desert[]={new WeightedRandomChestContent(new ItemStack(ironBar),3,8,50),new WeightedRandomChestContent(new ItemStack(DMItems.physCalibur),1,1,1),new WeightedRandomChestContent(new ItemStack(DMItems.weapon_crowbar_el),1,1,10),new WeightedRandomChestContent(new ItemStack(spray3),1,1,4),new WeightedRandomChestContent(new ItemStack(lambdaChip),2,5,3)};
  for (  WeightedRandomChestContent gen : gens_desert) {
    ChestGenHooks.addItem(""String_Node_Str"",gen);
    ChestGenHooks.addItem(""String_Node_Str"",gen);
  }
}",0.9914990231796822
145980,"@Override public ItemStack getCraftingResult(InventoryCrafting inv){
  int cntRep=0;
  ItemStack theItem=null;
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack s=inv.getStackInSlot(i);
    if (s != null) {
      if (s.getItem() == itemToRepair) {
        if (theItem != null) {
          return null;
        }
        theItem=s;
      }
 else       if (s.getItem() == repairMat.getItem())       ++cntRep;
    }
  }
  if (theItem == null) {
    return null;
  }
  int damage=theItem.getItemDamage();
  damage-=cntRep * amt;
  if (damage < 0)   damage=0;
  return new ItemStack(itemToRepair,1,damage);
}","@Override public ItemStack getCraftingResult(InventoryCrafting inv){
  int cntRep=0;
  ItemStack theItem=null;
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack s=inv.getStackInSlot(i);
    if (s != null) {
      if (s.getItem() == itemToRepair) {
        if (theItem != null) {
          return null;
        }
        theItem=s;
      }
 else       if (s.getItem() == repairMat.getItem()) {
        ++cntRep;
      }
    }
  }
  if (theItem == null) {
    return null;
  }
  int damage=theItem.getItemDamage();
  damage-=cntRep * amt;
  if (damage < 0)   damage=0;
  return new ItemStack(itemToRepair,1,damage);
}",0.9903846153846154
145981,"@Override public boolean matches(InventoryCrafting inv,World world){
  boolean b1=false, b2=false;
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack s=inv.getStackInSlot(i);
    if (s != null) {
      if (s.getItem() == itemToRepair) {
        b1=true;
      }
 else       if (s.getItem() == repairMat.getItem()) {
        b2=true;
      }
    }
  }
  return b1 && b2;
}","@Override public boolean matches(InventoryCrafting inv,World world){
  boolean b1=false, b2=false;
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack s=inv.getStackInSlot(i);
    if (s != null) {
      if (s.getItem() == itemToRepair) {
        if (b1)         return false;
        if (s.getItemDamage() > 0)         b1=true;
      }
 else       if (s.getItem() == repairMat.getItem()) {
        b2=true;
      }
    }
  }
  return b1 && b2;
}",0.9134045077105576
145982,"@Override public void onBlockUse(World world,EntityPlayer player,int bx,int by,int bz){
  TileEntity te=world.getTileEntity(bx,by,bz);
  if (te == null)   return;
  TileHealthCharger te2=(TileHealthCharger)te;
  String path=te2.currentEnergy > 0 ? ""String_Node_Str"" : ""String_Node_Str"";
  world.playSoundAtEntity(player,path,0.5F,1.0F);
  UsingUtils.setBlockInUse(player,bx,by,bz);
  if (te2.currentEnergy > 0)   te2.startUsing(player);
}","@Override public void onBlockUse(World world,EntityPlayer player,int bx,int by,int bz){
  System.out.println(""String_Node_Str"");
  TileEntity te=world.getTileEntity(bx,by,bz);
  if (te == null)   return;
  TileHealthCharger te2=(TileHealthCharger)te;
  if (te2.canUse()) {
    te2.startUsing(player);
    UsingUtils.setBlockInUse(player,bx,by,bz);
  }
 else {
    world.playSoundAtEntity(player,""String_Node_Str"",0.5F,1.0F);
  }
}",0.6221198156682027
145983,"public void startUsing(EntityPlayer player){
  chargers.add(player);
  isUsing=true;
}","public void startUsing(EntityPlayer player){
  chargers.add(player);
  worldObj.playSoundAtEntity(player,""String_Node_Str"",0.5F,1.0F);
  lastActivationTick=ticksExisted;
  isUsing=true;
}",0.63003663003663
145984,"@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote)   return;
  int energyReq=ENERGY_MAX - currentEnergy;
  if (currentEnergy < 0)   currentEnergy=0;
  if (currentEnergy < ENERGY_MAX && !(!this.isRSActivated && this.getCurrentBehavior() == EnumBehavior.RECEIVEONLY)) {
    ItemStack sl=slots[2];
    if (sl != null && sl.getItem() == Items.redstone) {
      if (energyReq > 500) {
        this.decrStackSize(2,1);
      }
      currentEnergy+=500;
    }
 else     if (sl != null && sl.getItem() instanceof ISpecialElectricItem) {
      ISpecialElectricItem item=(ISpecialElectricItem)sl.getItem();
      if (item.canProvideEnergy(sl)) {
        int cn=energyReq < 128 ? energyReq : 128;
        cn=item.getManager(sl).discharge(sl,cn,2,false,false);
        currentEnergy+=cn;
      }
    }
  }
  if (this.isUsing) {
    for (    EntityPlayer charger : chargers) {
      currentEnergy-=5;
      this.doHealing(charger);
      if (worldObj.getWorldTime() % 15 == 0) {
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.3F,1.0F);
      }
      if (currentEnergy <= 0) {
        this.chargers.clear();
        this.isUsing=false;
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.5F,1.0F);
      }
    }
  }
  if (slots[0] != null && slots[0].getItem() == Items.potionitem) {
    int dmg=slots[0].getItemDamage();
    List<PotionEffect> list=Items.potionitem.getEffects(dmg);
    PotionEffect effect=list.get(0);
    if (mainEff < HEALTH_MAX) {
      if (effect.getPotionID() == Potion.heal.getId()) {
        if (currentEnergy > 5) {
          currentEnergy-=5;
          prgAddMain++;
        }
 else         currentEnergy=0;
        if (prgAddMain >= PROGRESS_TIME) {
          this.setInventorySlotContents(0,null);
          mainEff+=(effect.getAmplifier() == 0 ? 12 : 18);
          prgAddMain=0;
        }
      }
 else       if (effect.getPotionID() == Potion.regeneration.getId()) {
        if (currentEnergy > 5) {
          currentEnergy-=5;
          prgAddMain++;
        }
 else         currentEnergy=0;
        if (prgAddMain >= PROGRESS_TIME) {
          this.setInventorySlotContents(0,null);
          if (dmg == 8193)           mainEff+=36;
 else           if (dmg == 8257)           mainEff+=96;
 else           if (dmg == 8225)           mainEff+=38;
          prgAddMain=0;
        }
      }
 else       prgAddMain=0;
    }
    if (mainEff > TileHealthCharger.HEALTH_MAX)     mainEff=HEALTH_MAX;
  }
 else   prgAddMain=0;
  if (slots[1] != null && slots[1].getItem() == Items.potionitem) {
    int dmg=slots[1].getItemDamage();
    List<PotionEffect> list=Items.potionitem.getEffects(dmg);
    PotionEffect effect=list.get(0);
    if (TileHealthCharger.availableIds.contains(effect.getPotionID()) && sideEff < EFFECT_MAX) {
      if (this.sideEffectId == 0 || effect.getPotionID() == sideEffectId || this.sideEff == 0) {
        this.sideEffectId=effect.getPotionID();
        if (currentEnergy > 5) {
          currentEnergy-=5;
          prgAddSide++;
        }
        if (prgAddSide >= PROGRESS_TIME) {
          this.setInventorySlotContents(1,null);
          sideEff+=effect.getDuration();
          prgAddSide=0;
        }
      }
 else       prgAddSide=0;
    }
    if (sideEff > TileHealthCharger.EFFECT_MAX)     sideEff=EFFECT_MAX;
  }
 else   prgAddSide=0;
}","@Override public void updateEntity(){
  super.updateEntity();
  ++ticksExisted;
  if (worldObj.isRemote)   return;
  int energyReq=ENERGY_MAX - currentEnergy;
  if (currentEnergy < 0)   currentEnergy=0;
  if (currentEnergy < ENERGY_MAX && !(!this.isRSActivated && this.getCurrentBehavior() == EnumBehavior.RECEIVEONLY)) {
    ItemStack sl=slots[2];
    if (sl != null && sl.getItem() == Items.redstone) {
      if (energyReq > 500) {
        this.decrStackSize(2,1);
      }
      currentEnergy+=500;
    }
 else     if (sl != null && sl.getItem() instanceof ISpecialElectricItem) {
      ISpecialElectricItem item=(ISpecialElectricItem)sl.getItem();
      if (item.canProvideEnergy(sl)) {
        int cn=energyReq < 128 ? energyReq : 128;
        cn=item.getManager(sl).discharge(sl,cn,2,false,false);
        currentEnergy+=cn;
      }
    }
  }
  if (this.isUsing) {
    for (    EntityPlayer charger : chargers) {
      currentEnergy-=5;
      this.doHealing(charger);
      if (worldObj.getWorldTime() % 15 == 0) {
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.3F,1.0F);
      }
      if (currentEnergy <= 0) {
        this.chargers.clear();
        this.isUsing=false;
        worldObj.playSoundAtEntity(charger,""String_Node_Str"",0.5F,1.0F);
      }
    }
  }
  if (slots[0] != null && slots[0].getItem() == Items.potionitem) {
    int dmg=slots[0].getItemDamage();
    List<PotionEffect> list=Items.potionitem.getEffects(dmg);
    PotionEffect effect=list.get(0);
    if (mainEff < HEALTH_MAX) {
      if (effect.getPotionID() == Potion.heal.getId()) {
        if (currentEnergy > 5) {
          currentEnergy-=5;
          prgAddMain++;
        }
 else         currentEnergy=0;
        if (prgAddMain >= PROGRESS_TIME) {
          this.setInventorySlotContents(0,null);
          mainEff+=(effect.getAmplifier() == 0 ? 12 : 18);
          prgAddMain=0;
        }
      }
 else       if (effect.getPotionID() == Potion.regeneration.getId()) {
        if (currentEnergy > 5) {
          currentEnergy-=5;
          prgAddMain++;
        }
 else         currentEnergy=0;
        if (prgAddMain >= PROGRESS_TIME) {
          this.setInventorySlotContents(0,null);
          if (dmg == 8193)           mainEff+=36;
 else           if (dmg == 8257)           mainEff+=96;
 else           if (dmg == 8225)           mainEff+=38;
          prgAddMain=0;
        }
      }
 else       prgAddMain=0;
    }
    if (mainEff > TileHealthCharger.HEALTH_MAX)     mainEff=HEALTH_MAX;
  }
 else   prgAddMain=0;
  if (slots[1] != null && slots[1].getItem() == Items.potionitem) {
    int dmg=slots[1].getItemDamage();
    List<PotionEffect> list=Items.potionitem.getEffects(dmg);
    PotionEffect effect=list.get(0);
    if (TileHealthCharger.availableIds.contains(effect.getPotionID()) && sideEff < EFFECT_MAX) {
      if (this.sideEffectId == 0 || effect.getPotionID() == sideEffectId || this.sideEff == 0) {
        this.sideEffectId=effect.getPotionID();
        if (currentEnergy > 5) {
          currentEnergy-=5;
          prgAddSide++;
        }
        if (prgAddSide >= PROGRESS_TIME) {
          this.setInventorySlotContents(1,null);
          sideEff+=effect.getDuration();
          prgAddSide=0;
        }
      }
 else       prgAddSide=0;
    }
    if (sideEff > TileHealthCharger.EFFECT_MAX)     sideEff=EFFECT_MAX;
  }
 else   prgAddSide=0;
}",0.997319833234068
145985,"public void stopUsing(EntityPlayer player){
  chargers.remove(player);
  if (chargers.size() == 0)   isUsing=false;
}","public void stopUsing(EntityPlayer player){
  chargers.remove(player);
  lastActivationTick=ticksExisted;
  if (ticksExisted - lastActivationTick > 20)   worldObj.playSoundAtEntity(player,""String_Node_Str"",0.5F,1.0F);
  if (chargers.size() == 0)   isUsing=false;
}",0.6141732283464567
145986,"public Weapon_9mmAR_Raw(){
  super(CBCItems.ammo_9mm2);
  setIAndU(""String_Node_Str"");
  setCreativeTab(CBCMod.cct);
  setMaxDamage(50);
  actionShoot=new ActionAutomaticShoot(300,4,3,""String_Node_Str"");
  actionReload=new ActionReload(60,""String_Node_Str"",""String_Node_Str"");
  actionJam=new ActionJam(20,""String_Node_Str"");
}","public Weapon_9mmAR_Raw(){
  super(CBCItems.ammo_9mm2);
  setIAndU(""String_Node_Str"");
  setCreativeTab(CBCMod.cct);
  setMaxDamage(50);
  actionShoot=new ActionAutomaticShoot(300,4,3,""String_Node_Str"");
  actionReload=new ActionReload(50,""String_Node_Str"",""String_Node_Str"");
  actionJam=new ActionJam(20,""String_Node_Str"");
  actionUplift=new ActionUplift();
}",0.9462989840348331
145987,"@Override public void init(){
  RenderingRegistry.registerEntityRenderingHandler(EntityHGrenade.class,new RenderSnowball(DMItems.weapon_hgrenade));
  RenderingRegistry.registerEntityRenderingHandler(EntityGaussRay.class,new RenderGaussRay(false));
  RenderingRegistry.registerEntityRenderingHandler(EntityGaussRayColored.class,new RenderGaussRay(true));
  RenderingRegistry.registerEntityRenderingHandler(EntitySatchel.class,new RenderSatchel());
  RenderingRegistry.registerEntityRenderingHandler(EntityARGrenade.class,new RenderModelProjectile(new ModelGrenade(),ClientProps.AR_GRENADE_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityEgonRay.class,new RenderEgonRay());
  RenderingRegistry.registerEntityRenderingHandler(EntityRocket.class,new RenderModelProjectile(new ModelRocket(),ClientProps.RPG_ROCKET_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityCrossbowArrow.class,new RenderCrossedProjectile(0.6,0.12,ClientProps.CROSSBOW_BOW_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityCrossbowStill.class,new RenderCrossedProjectile(0.6,0.12,ClientProps.CROSSBOW_BOW_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityRPGDot.class,new RenderIcon(ClientProps.RED_DOT_PATH).setBlend(0.8F).setHasLight(false));
  RenderingRegistry.registerEntityRenderingHandler(EntityBulletGauss.class,new RenderEmpty());
  RenderingRegistry.registerEntityRenderingHandler(EntityBulletGaussSec.class,new RenderEmpty());
  RenderingRegistry.registerEntityRenderingHandler(EntityHornet.class,new RenderHornet());
  RenderingRegistry.registerEntityRenderingHandler(EntityBattery.class,new RenderModel(new ModelBattery(),ClientProps.BATTERY_PATH,0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityMedkit.class,new RenderModel(new ModelMedkit(),ClientProps.MEDKIT_ENT_PATH,1.0F));
  RenderingRegistry.registerEntityRenderingHandler(GaussParticleFX.class,new RenderGlow());
  RendererModelBulletWeapon handgun_render=new RendererModelBulletWeapon(new ModelHandgun(),(WeaponGeneric)DMItems.weapon_9mmhandgun,ClientProps.HANDGUN_MDL_PATH);
  RendererModelBulletWeapon pyt_render=new RendererModelBulletWeapon(new Model357(),(WeaponGeneric)DMItems.weapon_357,ClientProps.PYTHON_MDL_PATH);
  RendererModelBulletWeapon ar_render=new RendererModelBulletWeapon(new ModelAR(),(WeaponGeneric)DMItems.weapon_9mmAR,ClientProps.NMMAR_MDL_PATH);
  RenderModelItem uranium_render=new RenderModelItem(new ModelUranium(),ClientProps.URANIUM_MDL_PATH);
  pyt_render.setStdRotation(0F,180F,0F).setOffset(0.002F,0.402F,-0.314F).setScale(1.212F).setStdRotation(0F,181.13414F,0F).setEquipOffset(1.15,-0.447,0.325).setEquipRotation(0.066F,0.844F,-8.483F).setInventorySpin(false).setInvOffset(-2.45F,3.04F).setInvScale(0.912F).setInvRotation(-35.796F,-94.77F,-3.452F);
  handgun_render.setInventorySpin(false).setStdRotation(0F,180F,0F).setOffset(0.0F,0.11F,-0.30F).setEquipOffset(0.91F,-0.12F,0.132F).setScale(2.24F).setInvOffset(-0.422F,1.90F).setInvScale(1.164F).setInvRotation(-40.54F,-66F,8F);
  ar_render.setOffset(0.0F,0.242F,-0.588F).setEquipOffset(0.852F,-0.118F,-0.01F).setScale(1.352F).setStdRotation(0F,-177.768F,0F).setInventorySpin(false).setInvOffset(-0.408F,2.75F).setInvScale(0.908F).setInvRotation(-42.78F,-65.428F,-11F);
  uranium_render.setInventorySpin(false).setOffset(0F,-0.14F,0F).setEquipRotation(-130.276F,-42.034F,-101.67F).setEquipOffset(0.562F,0.118F,-0.248F).setStdRotation(0F,0F,0F).setInvRotation(0F,-45F,-26F).setInvOffset(0.01F,2.318F).setScale(1.05F).setEntityItemRotation(0F,0F,0F).setInvScale(1.424F);
  MinecraftForgeClient.registerItemRenderer(DMItems.crossbow,new RenderCrossbow());
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_egon,new RenderEgon());
  MinecraftForgeClient.registerItemRenderer(DMItems.gauss,new RenderGauss());
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_9mmhandgun,handgun_render);
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_357,pyt_render);
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_shotgun,new RendererBulletWeapon((WeaponGeneric)DMItems.weapon_shotgun,0.08F));
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_9mmAR,ar_render);
  MinecraftForgeClient.registerItemRenderer(DMItems.rpg,new RendererBulletWeapon(DMItems.rpg,0.15F));
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_crowbar_el,new RenderItemElCrowbar());
  MinecraftForgeClient.registerItemRenderer(CBCItems.ammo_uranium,uranium_render);
  LIClientRegistry.addPlayerRenderingHelper(new RenderHelperEgon());
  ClientRegistry.bindTileEntitySpecialRenderer(TileTripmine.class,new RenderTileTripmine(DMBlocks.blockTripmine));
  ClientRegistry.bindTileEntitySpecialRenderer(TileArmorCharger.class,new RenderTileCharger(DMBlocks.armorCharger));
  ClientRegistry.bindTileEntitySpecialRenderer(TileHealthCharger.class,new RenderTileHeCharger(DMBlocks.healthCharger));
  cth=new ClientTickHandler();
}","@Override public void init(){
  RenderingRegistry.registerEntityRenderingHandler(EntityHGrenade.class,new RenderSnowball(DMItems.weapon_hgrenade));
  RenderingRegistry.registerEntityRenderingHandler(EntityGaussRay.class,new RenderGaussRay(false));
  RenderingRegistry.registerEntityRenderingHandler(EntityGaussRayColored.class,new RenderGaussRay(true));
  RenderingRegistry.registerEntityRenderingHandler(EntitySatchel.class,new RenderSatchel());
  RenderingRegistry.registerEntityRenderingHandler(EntityARGrenade.class,new RenderModelProjectile(new ModelGrenade(),ClientProps.AR_GRENADE_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityEgonRay.class,new RenderEgonRay());
  RenderingRegistry.registerEntityRenderingHandler(EntityRocket.class,new RenderModelProjectile(new ModelRocket(),ClientProps.RPG_ROCKET_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityCrossbowArrow.class,new RenderCrossedProjectile(0.6,0.12,ClientProps.CROSSBOW_BOW_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityCrossbowStill.class,new RenderCrossedProjectile(0.6,0.12,ClientProps.CROSSBOW_BOW_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityRPGDot.class,new RenderIcon(ClientProps.RED_DOT_PATH).setBlend(0.8F).setHasLight(false));
  RenderingRegistry.registerEntityRenderingHandler(EntityBulletGauss.class,new RenderEmpty());
  RenderingRegistry.registerEntityRenderingHandler(EntityBulletGaussSec.class,new RenderEmpty());
  RenderingRegistry.registerEntityRenderingHandler(EntityHornet.class,new RenderHornet());
  RenderingRegistry.registerEntityRenderingHandler(EntityBattery.class,new RenderModel(new ModelBattery(),ClientProps.BATTERY_PATH,0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityMedkit.class,new RenderModel(new ModelMedkit(),ClientProps.MEDKIT_ENT_PATH,1.0F));
  RenderingRegistry.registerEntityRenderingHandler(GaussParticleFX.class,new RenderGlow());
  RendererModelBulletWeapon handgun_render=new RendererModelBulletWeapon(new ModelHandgun(),(WeaponGeneric)DMItems.weapon_9mmhandgun,ClientProps.HANDGUN_MDL_PATH);
  RendererModelBulletWeapon pyt_render=new RendererModelBulletWeapon(new Model357(),(WeaponGeneric)DMItems.weapon_357,ClientProps.PYTHON_MDL_PATH);
  RendererModelBulletWeapon ar_render=new RendererModelBulletWeapon(new ModelAR(),(WeaponGeneric)DMItems.weapon_9mmAR,ClientProps.NMMAR_MDL_PATH);
  RenderModelItem uranium_render=new RenderModelItem(new ModelUranium(),ClientProps.URANIUM_MDL_PATH);
  pyt_render.setStdRotation(0F,180F,0F).setOffset(0.002F,0.402F,-0.314F).setScale(1.212F).setStdRotation(0F,181.13414F,0F).setEquipOffset(1.15,-0.447,0.325).setEquipRotation(0.066F,0.844F,-8.483F).setInventorySpin(false).setInvOffset(-2.45F,3.04F).setInvScale(0.912F).setInvRotation(-35.796F,-94.77F,-3.452F);
  handgun_render.setInventorySpin(false).setStdRotation(0F,180F,0F).setOffset(0.0F,0.11F,-0.30F).setEquipOffset(0.91F,-0.12F,0.132F).setScale(2.24F).setInvOffset(-0.422F,1.90F).setInvScale(1.164F).setInvRotation(-40.54F,-66F,8F);
  ar_render.setOffset(0.0F,0.242F,-0.588F).setEquipOffset(0.852F,-0.118F,-0.01F).setScale(1.352F).setStdRotation(0F,-177.768F,0F).setInventorySpin(false).setInvOffset(-0.408F,2.75F).setInvScale(0.908F).setInvRotation(-42.78F,-65.428F,-11F).setUpliftFactor(2.5F);
  uranium_render.setInventorySpin(false).setOffset(0F,-0.14F,0F).setEquipRotation(-130.276F,-42.034F,-101.67F).setEquipOffset(0.562F,0.118F,-0.248F).setStdRotation(0F,0F,0F).setInvRotation(0F,-45F,-26F).setInvOffset(0.01F,2.318F).setScale(1.05F).setEntityItemRotation(0F,0F,0F).setInvScale(1.424F);
  MinecraftForgeClient.registerItemRenderer(DMItems.crossbow,new RenderCrossbow());
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_egon,new RenderEgon());
  MinecraftForgeClient.registerItemRenderer(DMItems.gauss,new RenderGauss());
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_9mmhandgun,handgun_render);
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_357,pyt_render);
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_shotgun,new RendererBulletWeapon((WeaponGeneric)DMItems.weapon_shotgun,0.08F));
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_9mmAR,ar_render);
  MinecraftForgeClient.registerItemRenderer(DMItems.rpg,new RendererBulletWeapon(DMItems.rpg,0.15F));
  MinecraftForgeClient.registerItemRenderer(DMItems.weapon_crowbar_el,new RenderItemElCrowbar());
  MinecraftForgeClient.registerItemRenderer(CBCItems.ammo_uranium,uranium_render);
  LIClientRegistry.addPlayerRenderingHelper(new RenderHelperEgon());
  ClientRegistry.bindTileEntitySpecialRenderer(TileTripmine.class,new RenderTileTripmine(DMBlocks.blockTripmine));
  ClientRegistry.bindTileEntitySpecialRenderer(TileArmorCharger.class,new RenderTileCharger(DMBlocks.armorCharger));
  ClientRegistry.bindTileEntitySpecialRenderer(TileHealthCharger.class,new RenderTileHeCharger(DMBlocks.healthCharger));
  cth=new ClientTickHandler();
}",0.9977750809061487
145988,"@Override public void renderTileEntityAt(TileEntity tileentity,double d0,double d1,double d2,float f){
  TileEntityXenAmethyst amethyst=(TileEntityXenAmethyst)tileentity;
  GL11.glPushMatrix();
  if (amethyst.ticksSinceLastAtack < 10) {
    renderElectro(amethyst,Tessellator.instance,d0,d1,d2);
  }
  super.renderTileEntityAt(tileentity,d0,d1,d2,f);
  GL11.glPopMatrix();
}","@Override public void renderTileEntityAt(TileEntity tileentity,double d0,double d1,double d2,float f){
  TileEntityXenAmethyst amethyst=(TileEntityXenAmethyst)tileentity;
  GL11.glPushMatrix();
{
    if (amethyst.ticksSinceLastAtack < 10) {
      renderElectro(amethyst,Tessellator.instance,d0,d1,d2);
    }
    GL11.glPushMatrix();
{
      super.renderTileEntityAt(tileentity,d0,d1,d2,f);
    }
    GL11.glPopMatrix();
  }
  GL11.glPopMatrix();
}",0.7917174177831913
145989,"private void renderElectro(TileEntityXenAmethyst ent,Tessellator t,double x,double y,double z){
  double dx=ent.lastxCoord, dy=ent.lastyCoord, dz=ent.lastzCoord;
  double tx=0.0, ty=0.4, tz=0.0;
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  RenderUtils.loadTexture(ClientProps.VORTIGAUNT_RAY_PATH[RNG.nextInt(3)]);
  Vec3 v1=RenderUtils.newV3(tx - WIDTH,ty,tz), v2=RenderUtils.newV3(tx + WIDTH,ty,tz), v3=RenderUtils.newV3(tx,ty - WIDTH,tz), v4=RenderUtils.newV3(tx,ty + WIDTH,tz);
  double d=Math.sqrt(dx * dx + dy * dy + dz * dz) * 1.3;
  GL11.glTranslated(x,y,z);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240f,240f);
  t.startDrawingQuads();
  t.setBrightness(15728880);
  t.setColorRGBA_F(0.663F,0.263F,1.0F,0.65F);
  RenderUtils.addVertex(v1,0,0);
  RenderUtils.addVertex(v2,1,0);
  RenderUtils.addVertex(v2.addVector(dx,dy,dz),1,d);
  RenderUtils.addVertex(v1.addVector(dx,dy,dz),0,d);
  RenderUtils.addVertex(v3,0,0);
  RenderUtils.addVertex(v4,1,0);
  RenderUtils.addVertex(v4.addVector(dx,dy,dz),1,d);
  RenderUtils.addVertex(v3.addVector(dx,dy,dz),0,d);
  t.draw();
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glPopMatrix();
}","private void renderElectro(TileEntityXenAmethyst ent,Tessellator t,double x,double y,double z){
  double dx=ent.lastxCoord, dy=ent.lastyCoord, dz=ent.lastzCoord;
  double tx=0.0, ty=0.4, tz=0.0;
  GL11.glPushMatrix();
{
    GL11.glDisable(GL11.GL_CULL_FACE);
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    RenderUtils.loadTexture(ClientProps.VORTIGAUNT_RAY_PATH[RNG.nextInt(3)]);
    Vec3 v1=RenderUtils.newV3(tx - WIDTH,ty,tz), v2=RenderUtils.newV3(tx + WIDTH,ty,tz), v3=RenderUtils.newV3(tx,ty - WIDTH,tz), v4=RenderUtils.newV3(tx,ty + WIDTH,tz);
    double d=Math.sqrt(dx * dx + dy * dy + dz * dz) * 1.3;
    GL11.glTranslated(x + 0.5,y + 0.1,z + 0.5);
    OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240f,240f);
    t.startDrawingQuads();
    t.setBrightness(15728880);
    t.setColorRGBA_F(0.663F,0.263F,1.0F,0.65F);
    RenderUtils.addVertex(v1,0,0);
    RenderUtils.addVertex(v2,1,0);
    RenderUtils.addVertex(v2.addVector(dx,dy,dz),1,d);
    RenderUtils.addVertex(v1.addVector(dx,dy,dz),0,d);
    RenderUtils.addVertex(v3,0,0);
    RenderUtils.addVertex(v4,1,0);
    RenderUtils.addVertex(v4.addVector(dx,dy,dz),1,d);
    RenderUtils.addVertex(v3.addVector(dx,dy,dz),0,d);
    t.draw();
    GL11.glEnable(GL11.GL_CULL_FACE);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glDisable(GL11.GL_BLEND);
  }
  GL11.glPopMatrix();
}",0.9710860366713682
145990,"/** 
 * @param mo
 */
public RenderTileXenAmethyst(){
  super(new ModelXenAmethyst(),ClientProps.AMETHYST_PATH);
}","/** 
 * @param mo
 */
public RenderTileXenAmethyst(){
  super(new ModelXenAmethyst(),ClientProps.AMETHYST_PATH);
  this.reverse=false;
}",0.912
145991,"@Override public void init(){
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityXenPortal.class,new RenderXenPortal());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityXenLight.class,new RenderTileEntityModel(new ModelXenLight(),ClientProps.XENLIGHT_PATH).setReverse(true));
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityXenAmethyst.class,new RenderTileEntityModel(new ModelXenAmethyst(),ClientProps.AMETHYST_PATH));
  RenderingRegistry.registerEntityRenderingHandler(EntityXenPortalFX.class,new RenderXenPortalFX());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(XenBlocks.xenPortal),new RenderItemPortal());
}","@Override public void init(){
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityXenPortal.class,new RenderXenPortal());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityXenLight.class,new RenderTileEntityModel(new ModelXenLight(),ClientProps.XENLIGHT_PATH).setReverse(true));
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityXenAmethyst.class,new RenderTileXenAmethyst());
  RenderingRegistry.registerEntityRenderingHandler(EntityXenPortalFX.class,new RenderXenPortalFX());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(XenBlocks.xenPortal),new RenderItemPortal());
}",0.9621451104100948
145992,"/** 
 * Allows the entity to update its state. Overridden in most subclasses, e.g. the mob spawner uses this to count ticks and creates a new spawn inside its implementation.
 */
@Override public void updateEntity(){
  if (++ticksSinceLastAtack > 40) {
    Entity e=MobHelper.getNearestTargetWithinAABB(worldObj,xCoord + 0.5,yCoord - 3.0,zCoord + 0.5,5.0F,GenericUtils.selectorLiving);
    if (e != null) {
      ticksSinceLastAtack=0;
      e.attackEntityFrom(DamageSource.generic,2);
      lastxCoord=e.posX - xCoord - 0.5;
      lastyCoord=e.posY + e.height - yCoord - 0.5;
      lastzCoord=e.posZ - zCoord - 0.5;
    }
  }
}","/** 
 * Allows the entity to update its state. Overridden in most subclasses, e.g. the mob spawner uses this to count ticks and creates a new spawn inside its implementation.
 */
@Override public void updateEntity(){
  if (++ticksSinceLastAtack > 40) {
    Entity e=MobHelper.getNearestTargetWithinAABB(worldObj,xCoord + 0.5,yCoord - 3.0,zCoord + 0.5,5.0F,GenericUtils.selectorLiving);
    if (e != null) {
      ticksSinceLastAtack=0;
      e.attackEntityFrom(DamageSource.generic,2);
      lastxCoord=e.posX - xCoord - 0.5;
      lastyCoord=e.posY + e.height * 0.5 - yCoord - 0.1;
      lastzCoord=e.posZ - zCoord - 0.5;
    }
  }
}",0.9318541996830428
145993,"public static void loadProps(Configuration config){
  LIGeneralRegistry.loadConfigurableClass(CBCMod.config,ClientProps.class);
  MDL_GONARCH=AdvancedModelLoader.loadModel(new ResourceLocation(""String_Node_Str""));
  crosshairProps=new Properties();
  URL src=ClientProps.class.getResource(""String_Node_Str"");
  sprayProps=new Properties();
  URL src2=ClientProps.class.getResource(""String_Node_Str"");
  InputStream stream=null;
  try {
    stream=src.openStream();
    crosshairProps.load(new InputStreamReader(stream,Charsets.UTF_8));
    CBCMod.log.log(Level.FINE,""String_Node_Str"" + src);
  }
 catch (  Exception e) {
    CBCMod.log.log(Level.SEVERE,""String_Node_Str"" + src);
  }
 finally {
    try {
      if (stream != null)       stream.close();
    }
 catch (    Exception e) {
    }
  }
  try {
    stream=src2.openStream();
    sprayProps.load(new InputStreamReader(stream,Charsets.UTF_8));
    CBCMod.log.log(Level.FINE,""String_Node_Str"" + src2);
  }
 catch (  Exception e) {
    CBCMod.log.log(Level.SEVERE,""String_Node_Str"" + src2);
  }
 finally {
    try {
      if (stream != null)       stream.close();
    }
 catch (    Exception e) {
    }
  }
}","public static void loadProps(Configuration config){
  LIGeneralRegistry.loadConfigurableClass(CBCMod.config,ClientProps.class);
  LIKeyBinding proc=LIKeyProcess.getBindingByName(WMClientProxy.KEY_ID_RELOAD);
  MDL_GONARCH=AdvancedModelLoader.loadModel(new ResourceLocation(""String_Node_Str""));
  crosshairProps=new Properties();
  URL src=ClientProps.class.getResource(""String_Node_Str"");
  sprayProps=new Properties();
  URL src2=ClientProps.class.getResource(""String_Node_Str"");
  InputStream stream=null;
  try {
    stream=src.openStream();
    crosshairProps.load(new InputStreamReader(stream,Charsets.UTF_8));
    CBCMod.log.log(Level.FINE,""String_Node_Str"" + src);
  }
 catch (  Exception e) {
    CBCMod.log.log(Level.SEVERE,""String_Node_Str"" + src);
  }
 finally {
    try {
      if (stream != null)       stream.close();
    }
 catch (    Exception e) {
    }
  }
  try {
    stream=src2.openStream();
    sprayProps.load(new InputStreamReader(stream,Charsets.UTF_8));
    CBCMod.log.log(Level.FINE,""String_Node_Str"" + src2);
  }
 catch (  Exception e) {
    CBCMod.log.log(Level.SEVERE,""String_Node_Str"" + src2);
  }
 finally {
    try {
      if (stream != null)       stream.close();
    }
 catch (    Exception e) {
    }
  }
}",0.966722129783694
145994,"@Override protected float getModelAttribute(ItemStack item,EntityLivingBase entity){
  if (entity instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)entity;
    InfWeapon inf=WMInformation.getInformation(player);
    if (inf != null) {
      if (inf.isActionPresent(""String_Node_Str""))       return 0.0F;
      if (InfUtils.getDeltaTick(inf,""String_Node_Str"") < 15)       return 1.0F;
    }
    return 2.0F;
  }
  return 2.0F;
}","@Override protected float getModelAttribute(ItemStack item,EntityLivingBase entity){
  if (entity instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)entity;
    InfWeapon inf=WMInformation.instance.getInformation(player);
    if (inf != null) {
      if (inf.isActionPresent(""String_Node_Str""))       return 0.0F;
      if (InfUtils.getDeltaTick(inf,""String_Node_Str"") < 15)       return 1.0F;
    }
    return 2.0F;
  }
  return 2.0F;
}",0.9899216125419932
145995,"@Override public void renderEquipped(ItemStack item,RenderBlocks render,EntityLivingBase entity,ItemRenderType type){
  super.renderEquipped(item,render,entity,type);
  if (entity instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)entity;
    if (player.getCurrentEquippedItem() == item && ItemControlHandler.getUsingTicks(player,0) > 0) {
      GL11.glColor4f(1.0F,1.0F,1.0F,0.5F);
      RendererBulletWeapon.renderMuzzleflashIn2d(Tessellator.instance,ClientProps.EGON_MUZZLE,0.0F,-0.12F,-0.2F);
    }
  }
}","@Override public void renderEquipped(ItemStack item,RenderBlocks render,EntityLivingBase entity,ItemRenderType type){
  super.renderEquipped(item,render,entity,type);
  if (entity instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)entity;
    if (player.getCurrentEquippedItem() == item) {
      InfWeapon inf=WMInformation.instance.getInformation(player);
      GL11.glColor4f(1.0F,1.0F,1.0F,0.5F);
      if (inf.isActionPresent(""String_Node_Str""))       RendererBulletWeapon.renderMuzzleflashIn2d(Tessellator.instance,ClientProps.EGON_MUZZLE,0.0F,-0.12F,-0.2F);
    }
  }
}",0.8514851485148515
145996,"@Override public void onUpdate(){
  if (worldObj.isRemote && !isClient && draw) {
    if (this.getDistanceSqToEntity(thrower) < 4.5)     draw=false;
    return;
  }
  if (thrower == null)   return;
  ItemStack stack=thrower.getCurrentEquippedItem();
  if (stack == null || stack.getItem() != DMItems.weapon_egon)   return;
  InfWeapon inf=WMInformation.getInformation(thrower);
  Weapon_Egon egon=(Weapon_Egon)DMItems.weapon_egon;
  if (inf == null || !(thrower.getCurrentEquippedItem() != null && thrower.getCurrentEquippedItem().getItem() == DMItems.weapon_egon && ItemControlHandler.getUsingTicks(thrower,0) > 0 && egon.canShoot(thrower,stack))) {
    this.setDead();
    return;
  }
  EntityPlayer ent=thrower;
  this.setLocationAndAngles(ent.posX,ent.posY + ent.getEyeHeight(),ent.posZ,ent.rotationYaw,ent.rotationPitch);
  float var3=0.4F;
  this.motionX=-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3;
  this.motionZ=MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3;
  this.motionY=-MathHelper.sin((this.rotationPitch) / 180.0F * (float)Math.PI) * var3;
}","@Override public void onUpdate(){
  if (worldObj.isRemote && !isClient && draw) {
    if (this.getDistanceSqToEntity(thrower) < 4.5)     draw=false;
    return;
  }
  if (thrower == null)   return;
  ItemStack stack=thrower.getCurrentEquippedItem();
  if (stack == null || stack.getItem() != DMItems.weapon_egon)   return;
  InfWeapon inf=WMInformation.instance.getInformation(thrower);
  Weapon_Egon egon=(Weapon_Egon)DMItems.weapon_egon;
  if (inf == null || !(thrower.getCurrentEquippedItem() != null && thrower.getCurrentEquippedItem().getItem() == DMItems.weapon_egon && ItemControlHandler.getUsingTicks(thrower,0) > 0 && egon.canShoot(thrower,stack))) {
    this.setDead();
    return;
  }
  EntityPlayer ent=thrower;
  this.setLocationAndAngles(ent.posX,ent.posY + ent.getEyeHeight(),ent.posZ,ent.rotationYaw,ent.rotationPitch);
  float var3=0.4F;
  this.motionX=-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3;
  this.motionZ=MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3;
  this.motionY=-MathHelper.sin((this.rotationPitch) / 180.0F * (float)Math.PI) * var3;
}",0.9963399755998372
145997,"@Override public void onItemRelease(World world,EntityPlayer pl,ItemStack stack,int keyid){
  InfWeapon inf=loadInformation(stack,pl);
switch (keyid) {
case 0:
    inf.removeAction(actionShoot.name);
  break;
default :
break;
}
}","@Override public void onItemRelease(World world,EntityPlayer pl,ItemStack stack,int keyid){
  InfWeapon inf=loadInformation(stack,pl);
switch (keyid) {
case 0:
    inf.removeAction(actionShoot.name);
  inf.removeAction(actionJam.name);
break;
default :
break;
}
}",0.9308943089430894
145998,"public Weapon_RPG_Raw(){
  super(CBCItems.ammo_rpg);
  setIAndU(""String_Node_Str"");
  setCreativeTab(CBCMod.cct);
  this.hasSubtypes=true;
  actionReload=new ActionReload(40,""String_Node_Str"",""String_Node_Str"");
  actionJam=new ActionJam(40,""String_Node_Str"");
  actionShoot=new ActionRocketShoot();
}","public Weapon_RPG_Raw(){
  super(CBCItems.ammo_rpg);
  setIAndU(""String_Node_Str"");
  setCreativeTab(CBCMod.cct);
  this.hasSubtypes=true;
  actionReload=null;
  actionJam=new ActionJam(40,""String_Node_Str"");
  actionShoot=new ActionRocketShoot();
}",0.7709090909090909
145999,"@Override public void onItemRelease(World world,EntityPlayer pl,ItemStack stack,int keyid){
  super.onItemRelease(world,pl,stack,keyid);
  if (keyid == 1) {
    InfWeapon inf=loadInformation(pl);
    inf.executeAction(actionDoubleBolt);
  }
}","@Override public void onItemRelease(World world,EntityPlayer pl,ItemStack stack,int keyid){
  super.onItemRelease(world,pl,stack,keyid);
  if (keyid == 1) {
    InfWeapon inf=loadInformation(pl);
    inf.executeAction(actionDoubleBolt);
    LIKeyProcess.getBindingByName(WMClientProxy.KEY_ID_RELOAD);
  }
}",0.8832116788321168
146000,"public Weapon_Shotgun(){
  super(CBCItems.ammo_shotgun);
  setIAndU(""String_Node_Str"");
  setMaxDamage(8);
  setCreativeTab(CBCMod.cct);
  actionShoot=new ActionBuckshot(2,5,""String_Node_Str"").setShootRate(20);
  actionReload=new ActionMultipleReload(15,300).setSound(""String_Node_Str"");
}","public Weapon_Shotgun(){
  super(CBCItems.ammo_shotgun);
  setIAndU(""String_Node_Str"");
  setMaxDamage(8);
  setCreativeTab(CBCMod.cct);
  actionShoot=new ActionBuckshot(2,5,""String_Node_Str"").setShootRate(20);
  actionReload=new ActionMultipleReload(8,300).setSound(""String_Node_Str"").setSoundFinish(""String_Node_Str"");
}",0.939443535188216
