record_number,buggy_code,fixed_code,code_similarity
63001,"@Test public void testEditEvaluation(){
  refreshDataInDatastore();
  EvaluationData e=dataBundle.evaluations.get(""String_Node_Str"");
  e.gracePeriod=e.gracePeriod + 1;
  e.instructions=e.instructions + ""String_Node_Str"";
  e.p2pEnabled=(!e.p2pEnabled);
  e.startTime=Common.getDateOffsetToCurrentTime(-2);
  e.endTime=Common.getDateOffsetToCurrentTime(-1);
  e.activated=(!e.activated);
  e.published=(!e.published);
  e.timeZone=e.timeZone + 1.0;
  String status=BackDoor.editEvaluation(e);
  assertEquals(Common.BACKEND_STATUS_SUCCESS,status);
  verifyPresentInDatastore(e);
  e.name=""String_Node_Str"";
  status=BackDoor.editEvaluation(e);
  assertTrue(status.startsWith(Common.BACKEND_STATUS_FAILURE));
  verifyAbsentInDatastore(e);
}","@Test public void testEditEvaluation(){
  refreshDataInDatastore();
  EvaluationData e=dataBundle.evaluations.get(""String_Node_Str"");
  e.gracePeriod=e.gracePeriod + 1;
  e.instructions=e.instructions + ""String_Node_Str"";
  e.p2pEnabled=(!e.p2pEnabled);
  e.startTime=Common.getDateOffsetToCurrentTime(-2);
  e.endTime=Common.getDateOffsetToCurrentTime(-1);
  e.activated=(!e.activated);
  e.published=(!e.published);
  e.timeZone=e.timeZone + 1.0;
  String status=BackDoor.editEvaluation(e);
  assertEquals(Common.BACKEND_STATUS_SUCCESS,status);
  verifyPresentInDatastore(e);
}",0.8792710706150342
63002,"@Test public void testEditEvaluation() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{EvaluationData.class};
  EvaluationData evaluation=new EvaluationData();
  evaluation.course=""String_Node_Str"";
  evaluation.name=""String_Node_Str"";
  Object[] params=new Object[]{evaluation};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  EvaluationData eval=dataBundle.evaluations.get(""String_Node_Str"");
  eval.gracePeriod=eval.gracePeriod + 1;
  eval.instructions=eval.instructions + ""String_Node_Str"";
  eval.p2pEnabled=(!eval.p2pEnabled);
  eval.startTime=Common.getDateOffsetToCurrentTime(-1);
  eval.endTime=Common.getDateOffsetToCurrentTime(2);
  logic.editEvaluation(eval);
  verifyPresentInDatastore(eval);
  ______TS(""String_Node_Str"");
  try {
    logic.editEvaluation(null);
    fail();
  }
 catch (  NullPointerException e) {
    verifyNullParameterDetectedCorrectly(e,""String_Node_Str"");
  }
  ______TS(""String_Node_Str"");
  eval.course=null;
  try {
    logic.editEvaluation(eval);
    fail();
  }
 catch (  NullPointerException e) {
    verifyNullParameterDetectedCorrectly(e,""String_Node_Str"");
  }
}","@Test public void testEditEvaluation() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class,String.class,String.class,Date.class,Date.class,Double.TYPE,Integer.TYPE,Boolean.TYPE};
  EvaluationData eval=new EvaluationData();
  eval.course=""String_Node_Str"";
  eval.name=""String_Node_Str"";
  eval.instructions=""String_Node_Str"";
  Date dummyTime=Calendar.getInstance().getTime();
  eval.startTime=dummyTime;
  eval.endTime=dummyTime;
  Object[] params=new Object[]{eval.course,eval.name,eval.instructions,eval.startTime,eval.endTime,eval.timeZone,eval.gracePeriod,eval.p2pEnabled};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  eval=dataBundle.evaluations.get(""String_Node_Str"");
  eval.gracePeriod=eval.gracePeriod + 1;
  eval.instructions=eval.instructions + ""String_Node_Str"";
  eval.p2pEnabled=(!eval.p2pEnabled);
  eval.startTime=Common.getDateOffsetToCurrentTime(-1);
  eval.endTime=Common.getDateOffsetToCurrentTime(2);
  invokeEditEvaluation(eval);
  verifyPresentInDatastore(eval);
  ______TS(""String_Node_Str"");
  try {
    logic.editEvaluation(null,""String_Node_Str"",""String_Node_Str"",dummyTime,dummyTime,0,0,false);
    fail();
  }
 catch (  NullPointerException e) {
    verifyNullParameterDetectedCorrectly(e,""String_Node_Str"");
  }
  ______TS(""String_Node_Str"");
  eval.startTime=Common.getDateOffsetToCurrentTime(1);
  eval.endTime=Common.getDateOffsetToCurrentTime(0);
  try {
    invokeEditEvaluation(eval);
    fail();
  }
 catch (  InvalidParametersException e) {
    assertEquals(Common.ERRORCODE_END_BEFORE_START,e.errorCode);
  }
}",0.804721580703105
63003,"@Test public void testEditSubmission() throws Exception {
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{SubmissionData.class};
  SubmissionData s=new SubmissionData();
  s.course=""String_Node_Str"";
  s.evaluation=""String_Node_Str"";
  s.reviewer=""String_Node_Str"";
  Object[] params=new Object[]{s};
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=logic.getEvaluation(s.course,s.evaluation);
  assertEquals(EvalStatus.OPEN,evaluation.getStatus());
  logoutUser();
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  loginAsAdmin(""String_Node_Str"");
  evaluation.endTime=Common.getDateOffsetToCurrentTime(-1);
  assertEquals(EvalStatus.CLOSED,evaluation.getStatus());
  logic.editEvaluation(evaluation);
  logoutUser();
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  SubmissionData sub1=dataBundle.submissions.get(""String_Node_Str"");
  alterSubmission(sub1);
  invokeEditSubmission(sub1);
  verifyPresentInDatastore(sub1);
  ______TS(""String_Node_Str"");
  try {
    invokeEditSubmission(null);
  }
 catch (  Exception e) {
    assertEquals(NullPointerException.class,e.getCause().getClass());
  }
  ______TS(""String_Node_Str"");
  sub1.evaluation=""String_Node_Str"";
  try {
    invokeEditSubmission(sub1);
  }
 catch (  Exception e) {
    assertEquals(EntityDoesNotExistException.class,e.getCause().getClass());
  }
}","@Test public void testEditSubmission() throws Exception {
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{SubmissionData.class};
  SubmissionData s=new SubmissionData();
  s.course=""String_Node_Str"";
  s.evaluation=""String_Node_Str"";
  s.reviewer=""String_Node_Str"";
  Object[] params=new Object[]{s};
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=logic.getEvaluation(s.course,s.evaluation);
  assertEquals(EvalStatus.OPEN,evaluation.getStatus());
  logoutUser();
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  loginAsAdmin(""String_Node_Str"");
  evaluation.endTime=Common.getDateOffsetToCurrentTime(-1);
  assertEquals(EvalStatus.CLOSED,evaluation.getStatus());
  BackDoorLogic backDoorLogic=new BackDoorLogic();
  backDoorLogic.editEvaluation(evaluation);
  logoutUser();
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  SubmissionData sub1=dataBundle.submissions.get(""String_Node_Str"");
  alterSubmission(sub1);
  invokeEditSubmission(sub1);
  verifyPresentInDatastore(sub1);
  ______TS(""String_Node_Str"");
  try {
    invokeEditSubmission(null);
  }
 catch (  Exception e) {
    assertEquals(NullPointerException.class,e.getCause().getClass());
  }
  ______TS(""String_Node_Str"");
  sub1.evaluation=""String_Node_Str"";
  try {
    invokeEditSubmission(sub1);
  }
 catch (  Exception e) {
    assertEquals(EntityDoesNotExistException.class,e.getCause().getClass());
  }
}",0.9854519437157166
63004,"@Test public void testGetEvauationResultForStudent() throws Exception {
  CourseData course=dataBundle.courses.get(""String_Node_Str"");
  EvaluationData evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  String student1email=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class,String.class,String.class};
  Object[] params=new Object[]{course.id,evaluation.name,student1email};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str"",evaluation.name,student1email});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  loginAsAdmin(""String_Node_Str"");
  evaluation.endTime=Common.getDateOffsetToCurrentTime(-1);
  evaluation.published=true;
  logic.editEvaluation(evaluation);
  logoutUser();
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  course=dataBundle.courses.get(""String_Node_Str"");
  evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  student1email=""String_Node_Str"";
  loginAsAdmin(""String_Node_Str"");
  setPointsForSubmissions(new int[][]{{100,100,100,100},{110,110,NSU,110},{NSB,NSB,NSB,NSB},{70,80,110,120}});
  EvalResultData result=logic.getEvaluationResultForStudent(course.id,evaluation.name,student1email);
  assertEquals(student1email,result.getOwnerEmail());
  assertEquals(100,result.claimedFromStudent);
  assertEquals(100,result.claimedToCoord);
  assertEquals(90,result.perceivedToCoord);
  assertEquals(90,result.perceivedToStudent);
  int teamSize=4;
  assertEquals(teamSize,result.outgoing.size());
  assertEquals(teamSize,result.incoming.size());
  assertEquals(teamSize,result.selfEvaluations.size());
  assertEquals(""String_Node_Str"",result.outgoing.get(0).reviewee);
  assertEquals(""String_Node_Str"",result.outgoing.get(1).reviewee);
  assertEquals(""String_Node_Str"",result.outgoing.get(2).reviewee);
  assertEquals(""String_Node_Str"",result.outgoing.get(3).reviewee);
  String feedback1=result.incoming.get(0).p2pFeedback.getValue();
  String feedback2=result.incoming.get(1).p2pFeedback.getValue();
  String feedback3=result.incoming.get(2).p2pFeedback.getValue();
  String feedback4=result.incoming.get(3).p2pFeedback.getValue();
  assertTrue(0 > feedback1.compareTo(feedback2));
  assertTrue(0 > feedback2.compareTo(feedback3));
  assertTrue(0 > feedback3.compareTo(feedback4));
  assertEquals(""String_Node_Str"",result.incoming.get(0).reviewer);
  assertEquals(""String_Node_Str"",result.incoming.get(1).reviewer);
  assertEquals(""String_Node_Str"",result.incoming.get(2).reviewer);
  assertEquals(""String_Node_Str"",result.incoming.get(3).reviewer);
  assertEquals(100,result.outgoing.get(1).points);
  assertEquals(NSB,result.incoming.get(0).points);
  assertEquals(113,result.incoming.get(0).normalized);
  assertEquals(""String_Node_Str"",result.selfEvaluations.get(0).justification.getValue());
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(null,""String_Node_Str"",""String_Node_Str"");
    fail();
  }
 catch (  NullPointerException e) {
  }
  try {
    logic.getEvaluationResultForStudent(""String_Node_Str"",null,""String_Node_Str"");
    fail();
  }
 catch (  NullPointerException e) {
  }
  try {
    logic.getEvaluationResultForStudent(""String_Node_Str"",""String_Node_Str"",null);
    fail();
  }
 catch (  NullPointerException e) {
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(""String_Node_Str"",evaluation.name,student1email);
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(course.id,""String_Node_Str"",student1email);
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(course.id,evaluation.name,""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
}","@Test public void testGetEvauationResultForStudent() throws Exception {
  CourseData course=dataBundle.courses.get(""String_Node_Str"");
  EvaluationData evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  String student1email=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class,String.class,String.class};
  Object[] params=new Object[]{course.id,evaluation.name,student1email};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str"",evaluation.name,student1email});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  loginAsAdmin(""String_Node_Str"");
  evaluation.endTime=Common.getDateOffsetToCurrentTime(-1);
  evaluation.published=true;
  BackDoorLogic backDoorLogic=new BackDoorLogic();
  backDoorLogic.editEvaluation(evaluation);
  logoutUser();
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  course=dataBundle.courses.get(""String_Node_Str"");
  evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  student1email=""String_Node_Str"";
  loginAsAdmin(""String_Node_Str"");
  setPointsForSubmissions(new int[][]{{100,100,100,100},{110,110,NSU,110},{NSB,NSB,NSB,NSB},{70,80,110,120}});
  EvalResultData result=logic.getEvaluationResultForStudent(course.id,evaluation.name,student1email);
  assertEquals(student1email,result.getOwnerEmail());
  assertEquals(100,result.claimedFromStudent);
  assertEquals(100,result.claimedToCoord);
  assertEquals(90,result.perceivedToCoord);
  assertEquals(90,result.perceivedToStudent);
  int teamSize=4;
  assertEquals(teamSize,result.outgoing.size());
  assertEquals(teamSize,result.incoming.size());
  assertEquals(teamSize,result.selfEvaluations.size());
  assertEquals(""String_Node_Str"",result.outgoing.get(0).reviewee);
  assertEquals(""String_Node_Str"",result.outgoing.get(1).reviewee);
  assertEquals(""String_Node_Str"",result.outgoing.get(2).reviewee);
  assertEquals(""String_Node_Str"",result.outgoing.get(3).reviewee);
  String feedback1=result.incoming.get(0).p2pFeedback.getValue();
  String feedback2=result.incoming.get(1).p2pFeedback.getValue();
  String feedback3=result.incoming.get(2).p2pFeedback.getValue();
  String feedback4=result.incoming.get(3).p2pFeedback.getValue();
  assertTrue(0 > feedback1.compareTo(feedback2));
  assertTrue(0 > feedback2.compareTo(feedback3));
  assertTrue(0 > feedback3.compareTo(feedback4));
  assertEquals(""String_Node_Str"",result.incoming.get(0).reviewer);
  assertEquals(""String_Node_Str"",result.incoming.get(1).reviewer);
  assertEquals(""String_Node_Str"",result.incoming.get(2).reviewer);
  assertEquals(""String_Node_Str"",result.incoming.get(3).reviewer);
  assertEquals(100,result.outgoing.get(1).points);
  assertEquals(NSB,result.incoming.get(0).points);
  assertEquals(113,result.incoming.get(0).normalized);
  assertEquals(""String_Node_Str"",result.selfEvaluations.get(0).justification.getValue());
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(null,""String_Node_Str"",""String_Node_Str"");
    fail();
  }
 catch (  NullPointerException e) {
  }
  try {
    logic.getEvaluationResultForStudent(""String_Node_Str"",null,""String_Node_Str"");
    fail();
  }
 catch (  NullPointerException e) {
  }
  try {
    logic.getEvaluationResultForStudent(""String_Node_Str"",""String_Node_Str"",null);
    fail();
  }
 catch (  NullPointerException e) {
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(""String_Node_Str"",evaluation.name,student1email);
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(course.id,""String_Node_Str"",student1email);
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getEvaluationResultForStudent(course.id,evaluation.name,""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
}",0.9935984888235913
63005,"@Test public void testPublishAndUnpublishEvaluation() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String[] methodNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  Class<?>[] paramTypes=new Class<?>[]{String.class,String.class};
  Object[] params=new Object[]{""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < methodNames.length; i++) {
    verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCannotAccess(USER_TYPE_UNREGISTERED,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCannotAccess(USER_TYPE_STUDENT,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCannotAccess(USER_TYPE_COORD,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCanAccess(USER_TYPE_COORD,methodNames[i],""String_Node_Str"",paramTypes,params);
  }
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  EvaluationData eval1=dataBundle.evaluations.get(""String_Node_Str"");
  assertEquals(false,logic.getEvaluation(eval1.course,eval1.name).published);
  eval1.endTime=Common.getDateOffsetToCurrentTime(-1);
  assertEquals(EvalStatus.CLOSED,eval1.getStatus());
  logic.editEvaluation(eval1);
  logic.publishEvaluation(eval1.course,eval1.name);
  assertEquals(true,logic.getEvaluation(eval1.course,eval1.name).published);
  logic.unpublishEvaluation(eval1.course,eval1.name);
  assertEquals(false,logic.getEvaluation(eval1.course,eval1.name).published);
  ______TS(""String_Node_Str"");
  eval1.endTime=Common.getDateOffsetToCurrentTime(1);
  assertEquals(EvalStatus.OPEN,eval1.getStatus());
  logic.editEvaluation(eval1);
  try {
    logic.publishEvaluation(eval1.course,eval1.name);
    fail();
  }
 catch (  InvalidParametersException e) {
    assertContains(Common.ERRORCODE_PUBLISHED_BEFORE_CLOSING,e.errorCode);
  }
  assertEquals(EvalStatus.OPEN,logic.getEvaluation(eval1.course,eval1.name).getStatus());
  ______TS(""String_Node_Str"");
  try {
    logic.unpublishEvaluation(eval1.course,eval1.name);
    fail();
  }
 catch (  InvalidParametersException e) {
    assertContains(Common.ERRORCODE_UNPUBLISHED_BEFORE_PUBLISHING,e.errorCode);
  }
  assertEquals(EvalStatus.OPEN,logic.getEvaluation(eval1.course,eval1.name).getStatus());
  ______TS(""String_Node_Str"");
  try {
    logic.publishEvaluation(""String_Node_Str"",""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
  }
  try {
    logic.unpublishEvaluation(""String_Node_Str"",""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
  }
  ______TS(""String_Node_Str"");
  try {
    logic.publishEvaluation(null,""String_Node_Str"");
    fail();
  }
 catch (  NullPointerException e) {
    assertContains(""String_Node_Str"",e.getMessage());
  }
  try {
    logic.unpublishEvaluation(""String_Node_Str"",null);
    fail();
  }
 catch (  NullPointerException e) {
    assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
}","@Test public void testPublishAndUnpublishEvaluation() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String[] methodNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  Class<?>[] paramTypes=new Class<?>[]{String.class,String.class};
  Object[] params=new Object[]{""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < methodNames.length; i++) {
    verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCannotAccess(USER_TYPE_UNREGISTERED,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCannotAccess(USER_TYPE_STUDENT,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCannotAccess(USER_TYPE_COORD,methodNames[i],""String_Node_Str"",paramTypes,params);
    verifyCanAccess(USER_TYPE_COORD,methodNames[i],""String_Node_Str"",paramTypes,params);
  }
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  EvaluationData eval1=dataBundle.evaluations.get(""String_Node_Str"");
  assertEquals(false,logic.getEvaluation(eval1.course,eval1.name).published);
  eval1.endTime=Common.getDateOffsetToCurrentTime(-1);
  assertEquals(EvalStatus.CLOSED,eval1.getStatus());
  BackDoorLogic backDoorLogic=new BackDoorLogic();
  backDoorLogic.editEvaluation(eval1);
  logic.publishEvaluation(eval1.course,eval1.name);
  assertEquals(true,logic.getEvaluation(eval1.course,eval1.name).published);
  logic.unpublishEvaluation(eval1.course,eval1.name);
  assertEquals(false,logic.getEvaluation(eval1.course,eval1.name).published);
  ______TS(""String_Node_Str"");
  eval1.endTime=Common.getDateOffsetToCurrentTime(1);
  assertEquals(EvalStatus.OPEN,eval1.getStatus());
  backDoorLogic.editEvaluation(eval1);
  try {
    logic.publishEvaluation(eval1.course,eval1.name);
    fail();
  }
 catch (  InvalidParametersException e) {
    assertContains(Common.ERRORCODE_PUBLISHED_BEFORE_CLOSING,e.errorCode);
  }
  assertEquals(EvalStatus.OPEN,logic.getEvaluation(eval1.course,eval1.name).getStatus());
  ______TS(""String_Node_Str"");
  try {
    logic.unpublishEvaluation(eval1.course,eval1.name);
    fail();
  }
 catch (  InvalidParametersException e) {
    assertContains(Common.ERRORCODE_UNPUBLISHED_BEFORE_PUBLISHING,e.errorCode);
  }
  assertEquals(EvalStatus.OPEN,logic.getEvaluation(eval1.course,eval1.name).getStatus());
  ______TS(""String_Node_Str"");
  try {
    logic.publishEvaluation(""String_Node_Str"",""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
  }
  try {
    logic.unpublishEvaluation(""String_Node_Str"",""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
  }
  ______TS(""String_Node_Str"");
  try {
    logic.publishEvaluation(null,""String_Node_Str"");
    fail();
  }
 catch (  NullPointerException e) {
    assertContains(""String_Node_Str"",e.getMessage());
  }
  try {
    logic.unpublishEvaluation(""String_Node_Str"",null);
    fail();
  }
 catch (  NullPointerException e) {
    assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
}",0.988308908282562
63006,"@Test public void testEditSubmissions() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  ArrayList<SubmissionData> submissionContainer=new ArrayList<SubmissionData>();
  logic.editSubmissions(submissionContainer);
  SubmissionData sub1=dataBundle.submissions.get(""String_Node_Str"");
  SubmissionData sub2=dataBundle.submissions.get(""String_Node_Str"");
  alterSubmission(sub1);
  submissionContainer.add(sub1);
  logic.editSubmissions(submissionContainer);
  verifyPresentInDatastore(sub1);
  verifyPresentInDatastore(sub2);
  alterSubmission(sub1);
  alterSubmission(sub2);
  submissionContainer=new ArrayList<SubmissionData>();
  submissionContainer.add(sub1);
  submissionContainer.add(sub2);
  logic.editSubmissions(submissionContainer);
  verifyPresentInDatastore(sub1);
  verifyPresentInDatastore(sub2);
  ______TS(""String_Node_Str"");
  try {
    logic.editSubmissions(null);
    fail();
  }
 catch (  NullPointerException e) {
    assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{List.class};
  List<SubmissionData> submissions=new ArrayList<SubmissionData>();
  SubmissionData s=new SubmissionData();
  s.course=""String_Node_Str"";
  s.evaluation=""String_Node_Str"";
  s.reviewer=""String_Node_Str"";
  submissions.add(s);
  Object[] params=new Object[]{submissions};
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=logic.getEvaluation(s.course,s.evaluation);
  evaluation.startTime=Common.getDateOffsetToCurrentTime(1);
  evaluation.endTime=Common.getDateOffsetToCurrentTime(2);
  evaluation.activated=false;
  assertEquals(EvalStatus.AWAITING,evaluation.getStatus());
  logic.editEvaluation(evaluation);
  logoutUser();
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
}","@Test public void testEditSubmissions() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  ArrayList<SubmissionData> submissionContainer=new ArrayList<SubmissionData>();
  logic.editSubmissions(submissionContainer);
  SubmissionData sub1=dataBundle.submissions.get(""String_Node_Str"");
  SubmissionData sub2=dataBundle.submissions.get(""String_Node_Str"");
  alterSubmission(sub1);
  submissionContainer.add(sub1);
  logic.editSubmissions(submissionContainer);
  verifyPresentInDatastore(sub1);
  verifyPresentInDatastore(sub2);
  alterSubmission(sub1);
  alterSubmission(sub2);
  submissionContainer=new ArrayList<SubmissionData>();
  submissionContainer.add(sub1);
  submissionContainer.add(sub2);
  logic.editSubmissions(submissionContainer);
  verifyPresentInDatastore(sub1);
  verifyPresentInDatastore(sub2);
  ______TS(""String_Node_Str"");
  try {
    logic.editSubmissions(null);
    fail();
  }
 catch (  NullPointerException e) {
    assertContains(""String_Node_Str"",e.getMessage().toLowerCase());
  }
  ______TS(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{List.class};
  List<SubmissionData> submissions=new ArrayList<SubmissionData>();
  SubmissionData s=new SubmissionData();
  s.course=""String_Node_Str"";
  s.evaluation=""String_Node_Str"";
  s.reviewer=""String_Node_Str"";
  submissions.add(s);
  Object[] params=new Object[]{submissions};
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=logic.getEvaluation(s.course,s.evaluation);
  evaluation.startTime=Common.getDateOffsetToCurrentTime(1);
  evaluation.endTime=Common.getDateOffsetToCurrentTime(2);
  evaluation.activated=false;
  assertEquals(EvalStatus.AWAITING,evaluation.getStatus());
  BackDoorLogic backDoorLogic=new BackDoorLogic();
  backDoorLogic.editEvaluation(evaluation);
  logoutUser();
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
}",0.9876493217250456
63007,"@Test public void testGetCourseDetailsListForStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  CourseData expectedCourse1=dataBundle.courses.get(""String_Node_Str"");
  EvaluationData expectedEval1InCourse1=dataBundle.evaluations.get(""String_Node_Str"");
  EvaluationData expectedEval2InCourse1=dataBundle.evaluations.get(""String_Node_Str"");
  CourseData expectedCourse2=dataBundle.courses.get(""String_Node_Str"");
  EvaluationData expectedEval1InCourse2=dataBundle.evaluations.get(""String_Node_Str"");
  StudentData studentInTwoCourses=dataBundle.students.get(""String_Node_Str"");
  expectedEval1InCourse1.startTime=Common.getDateOffsetToCurrentTime(-2);
  expectedEval1InCourse1.endTime=Common.getDateOffsetToCurrentTime(-1);
  expectedEval1InCourse1.published=false;
  assertEquals(EvalStatus.CLOSED,expectedEval1InCourse1.getStatus());
  logic.editEvaluation(expectedEval1InCourse1);
  expectedEval2InCourse1.startTime=Common.getDateOffsetToCurrentTime(-1);
  expectedEval2InCourse1.endTime=Common.getDateOffsetToCurrentTime(1);
  assertEquals(EvalStatus.OPEN,expectedEval2InCourse1.getStatus());
  logic.editEvaluation(expectedEval2InCourse1);
  expectedEval1InCourse2.startTime=Common.getDateOffsetToCurrentTime(1);
  expectedEval1InCourse2.endTime=Common.getDateOffsetToCurrentTime(2);
  expectedEval1InCourse2.activated=false;
  assertEquals(EvalStatus.AWAITING,expectedEval1InCourse2.getStatus());
  logic.editEvaluation(expectedEval1InCourse2);
  List<CourseData> courseList=logic.getCourseDetailsListForStudent(studentInTwoCourses.id);
  assertEquals(2,courseList.size());
  CourseData actualCourse1=courseList.get(1);
  assertEquals(expectedCourse1.id,actualCourse1.id);
  assertEquals(expectedCourse1.name,actualCourse1.name);
  assertEquals(2,actualCourse1.evaluations.size());
  EvaluationData actualEval1InCourse1=actualCourse1.evaluations.get(1);
  verifySameEvaluationData(expectedEval1InCourse1,actualEval1InCourse1);
  EvaluationData actualEval2InCourse1=actualCourse1.evaluations.get(0);
  verifySameEvaluationData(expectedEval2InCourse1,actualEval2InCourse1);
  CourseData actualCourse2=courseList.get(0);
  assertEquals(expectedCourse2.id,actualCourse2.id);
  assertEquals(expectedCourse2.name,actualCourse2.name);
  assertEquals(0,actualCourse2.evaluations.size());
  ______TS(""String_Node_Str"");
  StudentData studentWithNoEvaluations=dataBundle.students.get(""String_Node_Str"");
  courseList=logic.getCourseDetailsListForStudent(studentWithNoEvaluations.id);
  assertEquals(1,courseList.size());
  assertEquals(0,courseList.get(0).evaluations.size());
  ______TS(""String_Node_Str"");
  try {
    logic.getCourseDetailsListForStudent(""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage());
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getCourseDetailsListForStudent(null);
    fail();
  }
 catch (  NullPointerException e) {
  }
}","@Test public void testGetCourseDetailsListForStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  CourseData expectedCourse1=dataBundle.courses.get(""String_Node_Str"");
  EvaluationData expectedEval1InCourse1=dataBundle.evaluations.get(""String_Node_Str"");
  EvaluationData expectedEval2InCourse1=dataBundle.evaluations.get(""String_Node_Str"");
  CourseData expectedCourse2=dataBundle.courses.get(""String_Node_Str"");
  EvaluationData expectedEval1InCourse2=dataBundle.evaluations.get(""String_Node_Str"");
  StudentData studentInTwoCourses=dataBundle.students.get(""String_Node_Str"");
  expectedEval1InCourse1.startTime=Common.getDateOffsetToCurrentTime(-2);
  expectedEval1InCourse1.endTime=Common.getDateOffsetToCurrentTime(-1);
  expectedEval1InCourse1.published=false;
  assertEquals(EvalStatus.CLOSED,expectedEval1InCourse1.getStatus());
  BackDoorLogic backDoorLogic=new BackDoorLogic();
  backDoorLogic.editEvaluation(expectedEval1InCourse1);
  expectedEval2InCourse1.startTime=Common.getDateOffsetToCurrentTime(-1);
  expectedEval2InCourse1.endTime=Common.getDateOffsetToCurrentTime(1);
  assertEquals(EvalStatus.OPEN,expectedEval2InCourse1.getStatus());
  backDoorLogic.editEvaluation(expectedEval2InCourse1);
  expectedEval1InCourse2.startTime=Common.getDateOffsetToCurrentTime(1);
  expectedEval1InCourse2.endTime=Common.getDateOffsetToCurrentTime(2);
  expectedEval1InCourse2.activated=false;
  assertEquals(EvalStatus.AWAITING,expectedEval1InCourse2.getStatus());
  backDoorLogic.editEvaluation(expectedEval1InCourse2);
  List<CourseData> courseList=logic.getCourseDetailsListForStudent(studentInTwoCourses.id);
  assertEquals(2,courseList.size());
  CourseData actualCourse1=courseList.get(1);
  assertEquals(expectedCourse1.id,actualCourse1.id);
  assertEquals(expectedCourse1.name,actualCourse1.name);
  assertEquals(2,actualCourse1.evaluations.size());
  EvaluationData actualEval1InCourse1=actualCourse1.evaluations.get(1);
  verifySameEvaluationData(expectedEval1InCourse1,actualEval1InCourse1);
  EvaluationData actualEval2InCourse1=actualCourse1.evaluations.get(0);
  verifySameEvaluationData(expectedEval2InCourse1,actualEval2InCourse1);
  CourseData actualCourse2=courseList.get(0);
  assertEquals(expectedCourse2.id,actualCourse2.id);
  assertEquals(expectedCourse2.name,actualCourse2.name);
  assertEquals(0,actualCourse2.evaluations.size());
  ______TS(""String_Node_Str"");
  StudentData studentWithNoEvaluations=dataBundle.students.get(""String_Node_Str"");
  courseList=logic.getCourseDetailsListForStudent(studentWithNoEvaluations.id);
  assertEquals(1,courseList.size());
  assertEquals(0,courseList.get(0).evaluations.size());
  ______TS(""String_Node_Str"");
  try {
    logic.getCourseDetailsListForStudent(""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage());
  }
  ______TS(""String_Node_Str"");
  try {
    logic.getCourseDetailsListForStudent(null);
    fail();
  }
 catch (  NullPointerException e) {
  }
}",0.988856789104416
63008,"/** 
 * Access: course owner and above
 * @throws EntityDoesNotExistException
 */
public CourseData getCourseDetails(String courseId) throws EntityDoesNotExistException {
  verifyCourseOwnerOrAbove(courseId);
  CourseData course=getCourse(courseId);
  if (course == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + courseId);
  }
  HashMap<String,CourseData> courseList=getCourseDetailsListForCoord(course.coord);
  return courseList.get(courseId);
}","/** 
 * Access: course owner, student in course, admin
 * @throws EntityDoesNotExistException
 */
public CourseData getCourseDetails(String courseId) throws EntityDoesNotExistException {
  verifyCourseOwnerOrStudentInCourse(courseId);
  CourseData course=getCourse(courseId);
  if (course == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + courseId);
  }
  HashMap<String,CourseData> courseList=getCourseDetailsListForCoord(course.coord);
  return courseList.get(courseId);
}",0.944214876033058
63009,"/** 
 * Access: student who owns the googleId, admin
 * @param googleId
 * @return
 * @throws EntityDoesNotExistException
 * @throws InvalidParametersException
 */
public List<CourseData> getCourseListForStudent(String googleId) throws EntityDoesNotExistException, InvalidParametersException {
  Common.verifyNotNull(googleId,""String_Node_Str"");
  verifySameStudentOrAdmin(googleId);
  if (getStudentsWithId(googleId) == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + googleId + ""String_Node_Str"");
  }
  return Courses.inst().getCourseListForStudent(googleId);
}","/** 
 * Access: student who owns the googleId, admin
 * @param googleId
 * @return
 * @throws EntityDoesNotExistException
 * @throws InvalidParametersException
 */
public List<CourseData> getCourseListForStudent(String googleId) throws EntityDoesNotExistException, InvalidParametersException {
  Common.verifyNotNull(googleId,""String_Node_Str"");
  verifySameStudentOrAdmin(googleId);
  if (getStudentsWithId(googleId).size() == 0) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + googleId + ""String_Node_Str"");
  }
  return Courses.inst().getCourseListForStudent(googleId);
}",0.9897959183673468
63010,"/** 
 * Access: same student and admin only
 * @param googleId
 * @return
 */
public ArrayList<StudentData> getStudentsWithId(String googleId){
  verifySameStudentOrAdmin(googleId);
  List<Student> students=Accounts.inst().getStudentWithID(googleId);
  if (students == null) {
    return null;
  }
  ArrayList<StudentData> returnList=new ArrayList<StudentData>();
  for (  Student s : students) {
    returnList.add(new StudentData(s));
  }
  return returnList;
}","/** 
 * Access: same student and admin only
 * @param googleId
 * @return returns null if 
 */
public ArrayList<StudentData> getStudentsWithId(String googleId){
  verifySameStudentOrAdmin(googleId);
  List<Student> students=Accounts.inst().getStudentsWithID(googleId);
  ArrayList<StudentData> returnList=new ArrayList<StudentData>();
  for (  Student s : students) {
    returnList.add(new StudentData(s));
  }
  return returnList;
}",0.6220735785953178
63011,"/** 
 * @param courseId
 * @return The CourseData object that is returned will contain attributesteams(type:TeamData) and loners(type:StudentData)
 * @throws EntityDoesNotExistException if the course does not exist <br> Access : course owner and above
 */
public CourseData getTeamsForCourse(String courseId) throws EntityDoesNotExistException {
  if (courseId == null) {
    return null;
  }
  verifyCourseOwnerOrAbove(courseId);
  List<StudentData> students=getStudentListForCourse(courseId);
  Courses.sortByTeamName(students);
  CourseData course=getCourse(courseId);
  if (course == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + courseId + ""String_Node_Str"");
  }
  TeamData team=null;
  for (int i=0; i < students.size(); i++) {
    StudentData s=students.get(i);
    if (s.team.equals(""String_Node_Str"")) {
      course.loners.add(s);
    }
 else     if (team == null) {
      team=new TeamData();
      team.name=s.team;
      team.students.add(s);
    }
 else     if (s.team.equals(team.name)) {
      team.students.add(s);
    }
 else {
      course.teams.add(team);
      team=new TeamData();
      team.name=s.team;
      team.students.add(s);
    }
    if (i == (students.size() - 1)) {
      course.teams.add(team);
    }
  }
  return course;
}","/** 
 * Access: course owner, student in course, admin
 * @param courseId
 * @return The CourseData object that is returned will contain attributesteams(type:TeamData) and loners(type:StudentData)
 * @throws EntityDoesNotExistException if the course does not exist <br> Access : course owner and above
 */
public CourseData getTeamsForCourse(String courseId) throws EntityDoesNotExistException {
  if (courseId == null) {
    return null;
  }
  verifyCourseOwnerOrStudentInCourse(courseId);
  List<StudentData> students=getStudentListForCourse(courseId);
  Courses.sortByTeamName(students);
  CourseData course=getCourse(courseId);
  if (course == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + courseId + ""String_Node_Str"");
  }
  TeamData team=null;
  for (int i=0; i < students.size(); i++) {
    StudentData s=students.get(i);
    if (s.team.equals(""String_Node_Str"")) {
      course.loners.add(s);
    }
 else     if (team == null) {
      team=new TeamData();
      team.name=s.team;
      team.students.add(s);
    }
 else     if (s.team.equals(team.name)) {
      team.students.add(s);
    }
 else {
      course.teams.add(team);
      team=new TeamData();
      team.name=s.team;
      team.students.add(s);
    }
    if (i == (students.size() - 1)) {
      course.teams.add(team);
    }
  }
  return course;
}",0.9740853658536586
63012,"public boolean isStudent(String googleId){
  return getStudentWithID(googleId) != null;
}","public boolean isStudent(String googleId){
  return getStudentsWithID(googleId).size() != 0;
}",0.9289617486338798
63013,"private void verifyAccessLevel(boolean isUnauthExceptionExpected,int userType,String methodName,String userId,Class<?>[] paramTypes,Object[] params) throws Exception {
  Method method=Logic.class.getDeclaredMethod(methodName,paramTypes);
switch (userType) {
case USER_TYPE_NOT_LOGGED_IN:
    logoutUser();
  break;
case USER_TYPE_UNREGISTERED:
loginUser(userId);
break;
case USER_TYPE_STUDENT:
loginAsStudent(userId);
break;
case USER_TYPE_COORD:
loginAsCoord(userId);
break;
}
try {
method.setAccessible(true);
method.invoke(logic,params);
if (isUnauthExceptionExpected) {
fail();
}
}
 catch (Exception e) {
String stack=TeammatesException.stackTraceToString(e);
if (isUnauthExceptionExpected) {
assertEquals(stack,UnauthorizedAccessException.class,e.getCause().getClass());
}
 else {
assertTrue(stack,e.getCause() == null || UnauthorizedAccessException.class != e.getCause().getClass());
}
}
}","private void verifyAccessLevel(boolean isUnauthExceptionExpected,int userType,String methodName,String userId,Class<?>[] paramTypes,Object[] params) throws Exception {
  Method method=Logic.class.getDeclaredMethod(methodName,paramTypes);
switch (userType) {
case USER_TYPE_NOT_LOGGED_IN:
    logoutUser();
  break;
case USER_TYPE_UNREGISTERED:
loginUser(userId);
break;
case USER_TYPE_STUDENT:
loginAsStudent(userId);
break;
case USER_TYPE_COORD:
loginAsCoord(userId);
break;
}
try {
method.setAccessible(true);
method.invoke(logic,params);
if (isUnauthExceptionExpected) {
fail();
}
}
 catch (Exception e) {
String stack=TeammatesException.stackTraceToString(e);
if (isUnauthExceptionExpected) {
assertEquals(""String_Node_Str"" + stack,UnauthorizedAccessException.class,e.getCause().getClass());
}
 else {
assertTrue(""String_Node_Str"" + stack,e.getCause() == null || UnauthorizedAccessException.class != e.getCause().getClass());
}
}
}",0.9781420765027322
63014,"@Test public void testGetTeamsForCourse() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str""});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  CourseData course=dataBundle.courses.get(""String_Node_Str"");
  logic.createStudent(new StudentData(""String_Node_Str"",course.id));
  logic.createStudent(new StudentData(""String_Node_Str"",course.id));
  CourseData courseAsTeams=logic.getTeamsForCourse(course.id);
  assertEquals(2,courseAsTeams.teams.size());
  String team1Id=""String_Node_Str"";
  assertEquals(team1Id,courseAsTeams.teams.get(0).name);
  assertEquals(4,courseAsTeams.teams.get(0).students.size());
  assertEquals(team1Id,courseAsTeams.teams.get(0).students.get(0).team);
  assertEquals(team1Id,courseAsTeams.teams.get(0).students.get(1).team);
  String team2Id=""String_Node_Str"";
  assertEquals(team2Id,courseAsTeams.teams.get(1).name);
  assertEquals(1,courseAsTeams.teams.get(1).students.size());
  assertEquals(team2Id,courseAsTeams.teams.get(1).students.get(0).team);
  assertEquals(2,courseAsTeams.loners.size());
  assertEquals(""String_Node_Str"",courseAsTeams.loners.get(0).email);
  assertEquals(""String_Node_Str"",courseAsTeams.loners.get(1).email);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  courseAsTeams=logic.getTeamsForCourse(course.id);
  assertEquals(4,courseAsTeams.teams.get(0).students.size());
  assertEquals(0,courseAsTeams.loners.size());
  assertEquals(null,logic.getTeamsForCourse(null));
  ______TS(""String_Node_Str"");
  logic.createCourse(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(0,logic.getTeamsForCourse(""String_Node_Str"").teams.size());
  ______TS(""String_Node_Str"");
  try {
    logic.getTeamsForCourse(""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage());
  }
}","@Test public void testGetTeamsForCourse() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str""});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  CourseData course=dataBundle.courses.get(""String_Node_Str"");
  logic.createStudent(new StudentData(""String_Node_Str"",course.id));
  logic.createStudent(new StudentData(""String_Node_Str"",course.id));
  CourseData courseAsTeams=logic.getTeamsForCourse(course.id);
  assertEquals(2,courseAsTeams.teams.size());
  String team1Id=""String_Node_Str"";
  assertEquals(team1Id,courseAsTeams.teams.get(0).name);
  assertEquals(4,courseAsTeams.teams.get(0).students.size());
  assertEquals(team1Id,courseAsTeams.teams.get(0).students.get(0).team);
  assertEquals(team1Id,courseAsTeams.teams.get(0).students.get(1).team);
  String team2Id=""String_Node_Str"";
  assertEquals(team2Id,courseAsTeams.teams.get(1).name);
  assertEquals(1,courseAsTeams.teams.get(1).students.size());
  assertEquals(team2Id,courseAsTeams.teams.get(1).students.get(0).team);
  assertEquals(2,courseAsTeams.loners.size());
  assertEquals(""String_Node_Str"",courseAsTeams.loners.get(0).email);
  assertEquals(""String_Node_Str"",courseAsTeams.loners.get(1).email);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  courseAsTeams=logic.getTeamsForCourse(course.id);
  assertEquals(4,courseAsTeams.teams.get(0).students.size());
  assertEquals(0,courseAsTeams.loners.size());
  assertEquals(null,logic.getTeamsForCourse(null));
  ______TS(""String_Node_Str"");
  logic.createCourse(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(0,logic.getTeamsForCourse(""String_Node_Str"").teams.size());
  ______TS(""String_Node_Str"");
  try {
    logic.getTeamsForCourse(""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage());
  }
}",0.9835748792270532
63015,"@Test public void testGetStudentWithId() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  StudentData studentInOneCourse=dataBundle.students.get(""String_Node_Str"");
  assertEquals(1,logic.getStudentsWithId(studentInOneCourse.id).size());
  assertEquals(studentInOneCourse.email,logic.getStudentsWithId(studentInOneCourse.id).get(0).email);
  assertEquals(studentInOneCourse.name,logic.getStudentsWithId(studentInOneCourse.id).get(0).name);
  assertEquals(studentInOneCourse.course,logic.getStudentsWithId(studentInOneCourse.id).get(0).course);
  ______TS(""String_Node_Str"");
  StudentData studentInTwoCoursesInCourse1=dataBundle.students.get(""String_Node_Str"");
  ArrayList<StudentData> listReceivedUsingStudentInCourse1=logic.getStudentsWithId(studentInTwoCoursesInCourse1.id);
  assertEquals(2,listReceivedUsingStudentInCourse1.size());
  StudentData studentInTwoCoursesInCourse2=dataBundle.students.get(""String_Node_Str"");
  ArrayList<StudentData> listReceivedUsingStudentInCourse2=logic.getStudentsWithId(studentInTwoCoursesInCourse2.id);
  assertEquals(2,listReceivedUsingStudentInCourse2.size());
  StudentData firstStudentReceived=listReceivedUsingStudentInCourse1.get(0);
  assertEquals(studentInTwoCoursesInCourse2.email,firstStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse2.name,firstStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse2.course,firstStudentReceived.course);
  StudentData secondStudentReceived=listReceivedUsingStudentInCourse1.get(1);
  assertEquals(studentInTwoCoursesInCourse1.email,secondStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse1.name,secondStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse1.course,secondStudentReceived.course);
  ______TS(""String_Node_Str"");
  assertEquals(null,logic.getStudentsWithId(""String_Node_Str""));
}","@Test public void testGetStudentWithId() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  StudentData studentInOneCourse=dataBundle.students.get(""String_Node_Str"");
  assertEquals(1,logic.getStudentsWithId(studentInOneCourse.id).size());
  assertEquals(studentInOneCourse.email,logic.getStudentsWithId(studentInOneCourse.id).get(0).email);
  assertEquals(studentInOneCourse.name,logic.getStudentsWithId(studentInOneCourse.id).get(0).name);
  assertEquals(studentInOneCourse.course,logic.getStudentsWithId(studentInOneCourse.id).get(0).course);
  ______TS(""String_Node_Str"");
  StudentData studentInTwoCoursesInCourse1=dataBundle.students.get(""String_Node_Str"");
  ArrayList<StudentData> listReceivedUsingStudentInCourse1=logic.getStudentsWithId(studentInTwoCoursesInCourse1.id);
  assertEquals(2,listReceivedUsingStudentInCourse1.size());
  StudentData studentInTwoCoursesInCourse2=dataBundle.students.get(""String_Node_Str"");
  ArrayList<StudentData> listReceivedUsingStudentInCourse2=logic.getStudentsWithId(studentInTwoCoursesInCourse2.id);
  assertEquals(2,listReceivedUsingStudentInCourse2.size());
  StudentData firstStudentReceived=listReceivedUsingStudentInCourse1.get(0);
  assertEquals(studentInTwoCoursesInCourse2.email,firstStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse2.name,firstStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse2.course,firstStudentReceived.course);
  StudentData secondStudentReceived=listReceivedUsingStudentInCourse1.get(1);
  assertEquals(studentInTwoCoursesInCourse1.email,secondStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse1.name,secondStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse1.course,secondStudentReceived.course);
  ______TS(""String_Node_Str"");
  assertEquals(0,logic.getStudentsWithId(""String_Node_Str"").size());
}",0.997658993367148
63016,"@Test public void testGetCourseDetails() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str""});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  CourseData course=dataBundle.courses.get(""String_Node_Str"");
  CourseData courseDetials=logic.getCourseDetails(course.id);
  assertEquals(course.id,courseDetials.id);
  assertEquals(course.name,courseDetials.name);
  assertEquals(2,courseDetials.teamsTotal);
  assertEquals(5,courseDetials.studentsTotal);
  assertEquals(0,courseDetials.unregisteredTotal);
  ______TS(""String_Node_Str"");
  logic.createCourse(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  courseDetials=logic.getCourseDetails(""String_Node_Str"");
  assertEquals(""String_Node_Str"",courseDetials.id);
  assertEquals(""String_Node_Str"",courseDetials.name);
  assertEquals(0,courseDetials.teamsTotal);
  assertEquals(0,courseDetials.studentsTotal);
  assertEquals(0,courseDetials.unregisteredTotal);
  ______TS(""String_Node_Str"");
  try {
    logic.getCourseDetails(""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage());
  }
}","@Test public void testGetCourseDetails() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str""});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  CourseData course=dataBundle.courses.get(""String_Node_Str"");
  CourseData courseDetials=logic.getCourseDetails(course.id);
  assertEquals(course.id,courseDetials.id);
  assertEquals(course.name,courseDetials.name);
  assertEquals(2,courseDetials.teamsTotal);
  assertEquals(5,courseDetials.studentsTotal);
  assertEquals(0,courseDetials.unregisteredTotal);
  ______TS(""String_Node_Str"");
  logic.createCourse(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  courseDetials=logic.getCourseDetails(""String_Node_Str"");
  assertEquals(""String_Node_Str"",courseDetials.id);
  assertEquals(""String_Node_Str"",courseDetials.name);
  assertEquals(0,courseDetials.teamsTotal);
  assertEquals(0,courseDetials.studentsTotal);
  assertEquals(0,courseDetials.unregisteredTotal);
  ______TS(""String_Node_Str"");
  try {
    logic.getCourseDetails(""String_Node_Str"");
    fail();
  }
 catch (  EntityDoesNotExistException e) {
    BaseTestCase.assertContains(""String_Node_Str"",e.getMessage());
  }
}",0.9768833288006528
63017,"@Override protected void doAction(HttpServletRequest req,CoordEvalEditHelper helper) throws EntityDoesNotExistException {
  String courseID=req.getParameter(Common.PARAM_COURSE_ID);
  String evalName=req.getParameter(Common.PARAM_EVALUATION_NAME);
  if (courseID == null && evalName == null) {
    helper.redirectUrl=Common.PAGE_COORD_EVAL;
    return;
  }
  CourseData course=helper.server.getCourse(courseID);
  if (course != null && !course.coord.equals(helper.userId)) {
    helper.statusMessage=""String_Node_Str"" + Helper.escapeForHTML(evalName) + ""String_Node_Str""+ courseID;
    helper.redirectUrl=Common.PAGE_COORD_EVAL;
    return;
  }
  boolean isSubmit=false;
  EvaluationData newEval=new EvaluationData();
  newEval.course=courseID;
  newEval.name=evalName;
  newEval.p2pEnabled=""String_Node_Str"".equalsIgnoreCase(req.getParameter(Common.PARAM_EVALUATION_COMMENTSENABLED));
  String startDate=req.getParameter(Common.PARAM_EVALUATION_START);
  String paramStartTime=req.getParameter(Common.PARAM_EVALUATION_STARTTIME);
  int startTime=0;
  if (paramStartTime != null) {
    isSubmit=true;
    startTime=Integer.parseInt(paramStartTime) * 100;
  }
  newEval.startTime=Common.convertToDate(startDate,startTime);
  if (newEval.startTime != null)   isSubmit=true;
  String endDate=req.getParameter(Common.PARAM_EVALUATION_DEADLINE);
  if (endDate != null)   isSubmit=true;
  String paramEndTime=req.getParameter(Common.PARAM_EVALUATION_DEADLINETIME);
  int endTime=0;
  if (paramEndTime != null) {
    isSubmit=true;
    endTime=Integer.parseInt(paramEndTime) * 100;
  }
  newEval.endTime=Common.convertToDate(endDate,endTime);
  if (newEval.endTime != null)   isSubmit=true;
  String paramTimeZone=req.getParameter(Common.PARAM_EVALUATION_TIMEZONE);
  if (paramTimeZone != null) {
    isSubmit=true;
    newEval.timeZone=Double.parseDouble(paramTimeZone);
  }
  String paramGracePeriod=req.getParameter(Common.PARAM_EVALUATION_GRACEPERIOD);
  if (paramGracePeriod != null) {
    isSubmit=true;
    newEval.gracePeriod=Integer.parseInt(paramGracePeriod);
  }
  newEval.instructions=req.getParameter(Common.PARAM_EVALUATION_INSTRUCTIONS);
  if (newEval.instructions != null) {
    isSubmit=true;
  }
  if (isSubmit) {
    helper.submittedEval=newEval;
  }
 else {
    helper.submittedEval=helper.server.getEvaluation(courseID,evalName);
    if (helper.submittedEval == null) {
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
      return;
    }
  }
  try {
    if (isSubmit) {
      helper.server.editEvaluation(newEval);
      helper.statusMessage=Common.MESSAGE_EVALUATION_EDITED;
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
    }
  }
 catch (  InvalidParametersException e) {
    helper.statusMessage=e.getMessage();
    helper.error=true;
  }
}","@Override protected void doAction(HttpServletRequest req,CoordEvalEditHelper helper) throws EntityDoesNotExistException {
  EvaluationData newEval=CoordEvalServlet.extractEvaluationData(req);
  if (newEval.course == null && newEval.name == null) {
    helper.redirectUrl=Common.PAGE_COORD_EVAL;
    return;
  }
  CourseData course=helper.server.getCourse(newEval.course);
  if (course != null && !course.coord.equals(helper.userId)) {
    helper.statusMessage=""String_Node_Str"" + Helper.escapeForHTML(newEval.name) + ""String_Node_Str""+ newEval.course;
    helper.redirectUrl=Common.PAGE_COORD_EVAL;
    return;
  }
  boolean isSubmit=newEval.startTime != null || newEval.endTime != null || newEval.instructions != null;
  if (isSubmit) {
    helper.submittedEval=newEval;
    try {
      helper.server.editEvaluation(newEval);
      helper.statusMessage=Common.MESSAGE_EVALUATION_EDITED;
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
    }
 catch (    InvalidParametersException e) {
      helper.statusMessage=e.getMessage();
      helper.error=true;
    }
  }
 else {
    helper.submittedEval=helper.server.getEvaluation(newEval.course,newEval.name);
    if (helper.submittedEval == null) {
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
      return;
    }
  }
}",0.1498387496899032
63018,"private EvaluationData extractEvaluationData(HttpServletRequest req){
  EvaluationData newEval=new EvaluationData();
  newEval.course=req.getParameter(Common.PARAM_COURSE_ID);
  newEval.name=req.getParameter(Common.PARAM_EVALUATION_NAME);
  newEval.p2pEnabled=Boolean.parseBoolean(req.getParameter(Common.PARAM_EVALUATION_COMMENTSENABLED));
  newEval.startTime=combineDateTime(req.getParameter(Common.PARAM_EVALUATION_START),req.getParameter(Common.PARAM_EVALUATION_STARTTIME));
  newEval.endTime=combineDateTime(req.getParameter(Common.PARAM_EVALUATION_DEADLINE),req.getParameter(Common.PARAM_EVALUATION_DEADLINETIME));
  String paramTimeZone=req.getParameter(Common.PARAM_EVALUATION_TIMEZONE);
  if (paramTimeZone != null) {
    newEval.timeZone=Double.parseDouble(paramTimeZone);
  }
  String paramGracePeriod=req.getParameter(Common.PARAM_EVALUATION_GRACEPERIOD);
  if (paramGracePeriod != null) {
    newEval.gracePeriod=Integer.parseInt(paramGracePeriod);
  }
  newEval.instructions=req.getParameter(Common.PARAM_EVALUATION_INSTRUCTIONS);
  return newEval;
}","public static EvaluationData extractEvaluationData(HttpServletRequest req){
  EvaluationData newEval=new EvaluationData();
  newEval.course=req.getParameter(Common.PARAM_COURSE_ID);
  newEval.name=req.getParameter(Common.PARAM_EVALUATION_NAME);
  newEval.p2pEnabled=Boolean.parseBoolean(req.getParameter(Common.PARAM_EVALUATION_COMMENTSENABLED));
  newEval.startTime=combineDateTime(req.getParameter(Common.PARAM_EVALUATION_START),req.getParameter(Common.PARAM_EVALUATION_STARTTIME));
  newEval.endTime=combineDateTime(req.getParameter(Common.PARAM_EVALUATION_DEADLINE),req.getParameter(Common.PARAM_EVALUATION_DEADLINETIME));
  String paramTimeZone=req.getParameter(Common.PARAM_EVALUATION_TIMEZONE);
  if (paramTimeZone != null) {
    newEval.timeZone=Double.parseDouble(paramTimeZone);
  }
  String paramGracePeriod=req.getParameter(Common.PARAM_EVALUATION_GRACEPERIOD);
  if (paramGracePeriod != null) {
    newEval.gracePeriod=Integer.parseInt(paramGracePeriod);
  }
  newEval.instructions=req.getParameter(Common.PARAM_EVALUATION_INSTRUCTIONS);
  return newEval;
}",0.9915651358950328
63019,"private Date combineDateTime(String inputDate,String inputTime){
  if (inputDate == null || inputTime == null) {
    return null;
  }
  int inputTimeInt=0;
  if (inputTime != null) {
    inputTimeInt=Integer.parseInt(inputTime) * 100;
  }
  return Common.convertToDate(inputDate,inputTimeInt);
}","public static Date combineDateTime(String inputDate,String inputTime){
  if (inputDate == null || inputTime == null) {
    return null;
  }
  int inputTimeInt=0;
  if (inputTime != null) {
    inputTimeInt=Integer.parseInt(inputTime) * 100;
  }
  return Common.convertToDate(inputDate,inputTimeInt);
}",0.9697986577181208
63020,"@Override protected void doAction(HttpServletRequest req,CoordEvalHelper helper) throws EntityDoesNotExistException {
  EvaluationData newEval=extractEvaluationData(req);
  boolean isAddEvaluation=newEval.course != null || newEval.name != null || newEval.startTime != null || newEval.endTime != null;
  if (isAddEvaluation) {
    helper.submittedEval=newEval;
  }
 else {
    helper.submittedEval=null;
  }
  try {
    if (isAddEvaluation) {
      helper.server.createEvaluation(newEval);
      helper.statusMessage=Common.MESSAGE_EVALUATION_ADDED;
      helper.submittedEval=null;
    }
  }
 catch (  EntityAlreadyExistsException e) {
    helper.statusMessage=Common.MESSAGE_EVALUATION_EXISTS;
    helper.error=true;
  }
catch (  InvalidParametersException e) {
    helper.statusMessage=e.getMessage();
    helper.error=true;
  }
  HashMap<String,CourseData> summary=helper.server.getCourseListForCoord(helper.userId);
  helper.courses=new ArrayList<CourseData>(summary.values());
  sortCourses(helper.courses);
  helper.evaluations=helper.server.getEvaluationsListForCoord(helper.userId);
  sortEvaluationsByDeadline(helper.evaluations);
  String additionalMessage=null;
  if (helper.courses.size() == 0 && !helper.error) {
    additionalMessage=Common.MESSAGE_COURSE_EMPTY_IN_EVALUATION;
  }
 else   if (helper.evaluations.size() == 0 && !helper.error && !noEvaluationsVisibleDueToEventualConsistency(helper)) {
    additionalMessage=Common.MESSAGE_EVALUATION_EMPTY;
  }
  if (additionalMessage != null) {
    if (helper.statusMessage == null) {
      helper.statusMessage=""String_Node_Str"";
    }
 else {
      helper.statusMessage+=""String_Node_Str"";
    }
    helper.statusMessage+=additionalMessage;
  }
}","@Override protected void doAction(HttpServletRequest req,CoordEvalHelper helper) throws EntityDoesNotExistException {
  EvaluationData newEval=extractEvaluationData(req);
  boolean isAddEvaluation=hasAtLeastSomeLegitimateValues(newEval);
  if (isAddEvaluation) {
    helper.submittedEval=newEval;
  }
 else {
    helper.submittedEval=null;
  }
  try {
    if (isAddEvaluation) {
      helper.server.createEvaluation(newEval);
      helper.statusMessage=Common.MESSAGE_EVALUATION_ADDED;
      helper.submittedEval=null;
    }
  }
 catch (  EntityAlreadyExistsException e) {
    helper.statusMessage=Common.MESSAGE_EVALUATION_EXISTS;
    helper.error=true;
  }
catch (  InvalidParametersException e) {
    helper.statusMessage=e.getMessage();
    helper.error=true;
  }
  HashMap<String,CourseData> summary=helper.server.getCourseListForCoord(helper.userId);
  helper.courses=new ArrayList<CourseData>(summary.values());
  sortCourses(helper.courses);
  helper.evaluations=helper.server.getEvaluationsListForCoord(helper.userId);
  sortEvaluationsByDeadline(helper.evaluations);
  String additionalMessage=null;
  if (helper.courses.size() == 0 && !helper.error) {
    additionalMessage=Common.MESSAGE_COURSE_EMPTY_IN_EVALUATION.replace(""String_Node_Str"",""String_Node_Str"" + helper.userId);
  }
 else   if (helper.evaluations.size() == 0 && !helper.error && !noEvaluationsVisibleDueToEventualConsistency(helper)) {
    additionalMessage=Common.MESSAGE_EVALUATION_EMPTY;
  }
  if (additionalMessage != null) {
    if (helper.statusMessage == null) {
      helper.statusMessage=""String_Node_Str"";
    }
 else {
      helper.statusMessage+=""String_Node_Str"";
    }
    helper.statusMessage+=additionalMessage;
  }
}",0.945061367621274
63021,"@Test public void testCoordEvalEditHTML() throws Exception {
  printTestCaseHeader(""String_Node_Str"");
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
}","@Test public void testCoordEvalEditHTML() throws Exception {
  printTestCaseHeader();
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
}",0.9498525073746312
63022,"@BeforeClass public static void classSetup() throws Exception {
  printTestClassHeader(""String_Node_Str"");
  ts=loadTestScenario();
  System.out.println(""String_Node_Str"" + ts.coordinator.id);
  long start=System.currentTimeMillis();
  BackDoor.deleteCoord(ts.coordinator.id);
  BackDoor.createCoord(ts.coordinator);
  BackDoor.createCourse(ts.course);
  BackDoor.createEvaluation(ts.evaluation);
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
  bi=BrowserInstancePool.getBrowserInstance();
  bi.loginAdmin(Config.inst().TEAMMATES_ADMIN_ACCOUNT,Config.inst().TEAMMATES_ADMIN_PASSWORD);
  String link=appUrl + Common.PAGE_COORD_EVAL_EDIT;
  link=Helper.addParam(link,Common.PARAM_COURSE_ID,ts.evaluation.course);
  link=Helper.addParam(link,Common.PARAM_EVALUATION_NAME,ts.evaluation.name);
  link=Helper.addParam(link,Common.PARAM_USER_ID,ts.coordinator.id);
  bi.goToUrl(link);
}","@BeforeClass public static void classSetup() throws Exception {
  printTestClassHeader();
  ts=loadTestScenario();
  print(""String_Node_Str"" + ts.coordinator.id);
  long start=System.currentTimeMillis();
  BackDoor.deleteCoord(ts.coordinator.id);
  BackDoor.createCoord(ts.coordinator);
  BackDoor.createCourse(ts.course);
  BackDoor.createEvaluation(ts.evaluation);
  print(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
  bi=BrowserInstancePool.getBrowserInstance();
  bi.loginAdmin(Config.inst().TEAMMATES_ADMIN_ACCOUNT,Config.inst().TEAMMATES_ADMIN_PASSWORD);
  String link=appUrl + Common.PAGE_COORD_EVAL_EDIT;
  link=Helper.addParam(link,Common.PARAM_COURSE_ID,ts.evaluation.course);
  link=Helper.addParam(link,Common.PARAM_EVALUATION_NAME,ts.evaluation.name);
  link=Helper.addParam(link,Common.PARAM_USER_ID,ts.coordinator.id);
  bi.goToUrl(link);
}",0.8930334613274822
63023,"@AfterClass public static void classTearDown() throws Exception {
  BrowserInstancePool.release(bi);
  printTestClassFooter(""String_Node_Str"");
}","@AfterClass public static void classTearDown() throws Exception {
  BrowserInstancePool.release(bi);
  printTestClassFooter();
}",0.9377289377289376
63024,"@Test public void testCoordEvalEditUiPaths() throws Exception {
  printTestCaseHeader(""String_Node_Str"");
  bi.editEvaluation(ts.newEvaluation.startTime,ts.newEvaluation.endTime,ts.newEvaluation.p2pEnabled,ts.newEvaluation.instructions,ts.newEvaluation.gracePeriod);
  bi.waitForStatusMessage(Common.MESSAGE_EVALUATION_EDITED);
  String json=BackDoor.getEvaluationAsJason(ts.newEvaluation.course,ts.newEvaluation.name);
  EvaluationData newEval=Common.getTeammatesGson().fromJson(json,EvaluationData.class);
  assertEquals(ts.newEvaluation.startTime,newEval.startTime);
  assertEquals(ts.newEvaluation.endTime,newEval.endTime);
  assertEquals(ts.newEvaluation.instructions,newEval.instructions);
  assertEquals(ts.newEvaluation.timeZone + ""String_Node_Str"",newEval.timeZone + ""String_Node_Str"");
  assertEquals(ts.newEvaluation.gracePeriod,newEval.gracePeriod);
  assertEquals(ts.newEvaluation.p2pEnabled,newEval.p2pEnabled);
}","@Test public void testCoordEvalEditUiPaths() throws Exception {
  printTestCaseHeader();
  bi.editEvaluation(ts.newEvaluation.startTime,ts.newEvaluation.endTime,ts.newEvaluation.p2pEnabled,ts.newEvaluation.instructions,ts.newEvaluation.gracePeriod);
  bi.waitForStatusMessage(Common.MESSAGE_EVALUATION_EDITED);
  String json=BackDoor.getEvaluationAsJason(ts.newEvaluation.course,ts.newEvaluation.name);
  EvaluationData newEval=Common.getTeammatesGson().fromJson(json,EvaluationData.class);
  assertEquals(ts.newEvaluation.startTime,newEval.startTime);
  assertEquals(ts.newEvaluation.endTime,newEval.endTime);
  assertEquals(ts.newEvaluation.instructions,newEval.instructions);
  assertEquals(ts.newEvaluation.timeZone + ""String_Node_Str"",newEval.timeZone + ""String_Node_Str"");
  assertEquals(ts.newEvaluation.gracePeriod,newEval.gracePeriod);
  assertEquals(ts.newEvaluation.p2pEnabled,newEval.p2pEnabled);
}",0.9907457811649428
63025,"public void createStudent(StudentData studentData) throws EntityAlreadyExistsException, InvalidParametersException {
  if (studentData == null) {
    throw new InvalidParametersException(""String_Node_Str"");
  }
  Student student=new Student(studentData);
  Courses.inst().createStudent(student);
}","public void createStudent(StudentData studentData) throws EntityAlreadyExistsException, InvalidParametersException {
  if (studentData == null) {
    throw new InvalidParametersException(""String_Node_Str"");
  }
  Student student=new Student(studentData);
  if (student.getID() == null) {
    student.setID(""String_Node_Str"");
  }
  Courses.inst().createStudent(student);
}",0.8878923766816144
63026,"public void testCoordHomeCoursePageHTML() throws Exception {
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  TMAPI.deleteCourse(scn.courses.get(""String_Node_Str"").id);
  TMAPI.deleteCourse(scn.courses.get(""String_Node_Str"").id);
  bi.goToCoordHome();
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
}","public void testCoordHomeCoursePageHTML() throws Exception {
  bi.verifyCurrentPageHTMLRegex(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  TMAPI.deleteCourse(scn.courses.get(""String_Node_Str"").id);
  TMAPI.deleteCourse(scn.courses.get(""String_Node_Str"").id);
  bi.goToCoordHome();
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
}",0.9929873772791024
63027,"public void createStudent(StudentData student) throws EntityAlreadyExistsException, InvalidParametersException {
  if (student == null) {
    throw new InvalidParametersException(""String_Node_Str"");
  }
  Courses.inst().createStudent(new Student(student));
}","public void createStudent(StudentData studentData) throws EntityAlreadyExistsException, InvalidParametersException {
  if (studentData == null) {
    throw new InvalidParametersException(""String_Node_Str"");
  }
  Student student=new Student(studentData);
  Courses.inst().createStudent(student);
}",0.8576576576576577
63028,"private StudentData getStudentWithId(String googleId){
  Student student=Accounts.inst().getStudentWithID(googleId);
  return (student == null ? null : new StudentData(student));
}","public StudentData getStudentWithId(String googleId){
  Student student=Accounts.inst().getStudentWithID(googleId);
  return (student == null ? null : new StudentData(student));
}",0.9749303621169916
63029,"public static void validateComment(String comment) throws InvalidParametersException {
  if (comment.length() > COMMENT_MAX_LENGTH) {
    throw new InvalidParametersException(ERRORCODE_STRING_TOO_LONG,""String_Node_Str"" + STUDENT_NAME_MAX_LENGTH);
  }
}","public static void validateComment(String comment) throws InvalidParametersException {
  if (comment == null) {
    return;
  }
  if (comment.length() > COMMENT_MAX_LENGTH) {
    throw new InvalidParametersException(ERRORCODE_STRING_TOO_LONG,""String_Node_Str"" + STUDENT_NAME_MAX_LENGTH);
  }
}",0.9247706422018348
63030,"public static void validateTeamName(String teamName) throws InvalidParametersException {
  if (teamName.length() > TEAM_NAME_MAX_LENGTH) {
    throw new InvalidParametersException(ERRORCODE_STRING_TOO_LONG,""String_Node_Str"" + TEAM_NAME_MAX_LENGTH);
  }
}","public static void validateTeamName(String teamName) throws InvalidParametersException {
  if (teamName == null) {
    return;
  }
  if (teamName.length() > TEAM_NAME_MAX_LENGTH) {
    throw new InvalidParametersException(ERRORCODE_STRING_TOO_LONG,""String_Node_Str"" + TEAM_NAME_MAX_LENGTH);
  }
}",0.9236363636363636
63031,"public Student getStudent(String courseId,String email){
  String query=""String_Node_Str"" + Student.class.getName() + ""String_Node_Str""+ email+ ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<Student> studentList=(List<Student>)getPM().newQuery(query).execute();
  if (studentList.isEmpty()) {
    log.warning(""String_Node_Str"" + courseId + ""String_Node_Str""+ email);
    return null;
  }
  return studentList.get(0);
}","public Student getStudent(String courseId,String email){
  String query=""String_Node_Str"" + Student.class.getName() + ""String_Node_Str""+ email+ ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<Student> studentList=(List<Student>)getPM().newQuery(query).execute();
  if (studentList.isEmpty()) {
    log.warning(""String_Node_Str"" + courseId + ""String_Node_Str""+ email);
    return null;
  }
  Student student=studentList.get(0);
  return student;
}",0.958627648839556
63032,"public void editStudent(String courseID,String email,String newName,String newTeamName,String newEmail,String newGoogleID,String newComments,Text newProfile) throws EntityDoesNotExistException {
  Student student=getStudentWithEmail(courseID,email);
  if (student == null)   throw new EntityDoesNotExistException(""String_Node_Str"" + email + ""String_Node_Str""+ courseID);
  student.setComments((newComments));
  student.setEmail(newEmail);
  student.setID(newGoogleID);
  student.setName(newName);
  student.setTeamName(newTeamName);
  student.setProfileDetail(newProfile);
  getPM().close();
}","public void editStudent(String courseID,String email,String newName,String newTeamName,String newEmail,String newGoogleID,String newComments,Text newProfile) throws EntityDoesNotExistException {
  Student student=getStudentWithEmail(courseID,email);
  if (student == null)   throw new EntityDoesNotExistException(""String_Node_Str"" + email + ""String_Node_Str""+ courseID);
  student.setComments(newComments);
  student.setEmail(newEmail);
  if (newGoogleID != null) {
    student.setID(newGoogleID);
  }
  student.setName(newName);
  student.setTeamName(newTeamName);
  if (newProfile != null) {
    student.setProfileDetail(newProfile);
  }
  getPM().close();
}",0.9433359936153232
63033,"public Student(String line,String courseId) throws InvalidParametersException {
  int TEAM_POS=0;
  int NAME_POS=1;
  int EMAIL_POS=2;
  int COMMENT_POS=3;
  if ((line == null) || (courseId == null)) {
    throw new InvalidParametersException(Common.ERRORCODE_NULL_PARAMETER,""String_Node_Str"");
  }
  if ((line.equals(""String_Node_Str"")) || (courseId.equals(""String_Node_Str""))) {
    throw new InvalidParametersException(Common.ERRORCODE_EMPTY_STRING,""String_Node_Str"");
  }
  String[] parts=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  if ((parts.length < 3) || (parts.length > 4)) {
    throw new InvalidParametersException(Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING,""String_Node_Str"");
  }
  String paramCourseId=courseId.trim();
  Common.validateCourseId(paramCourseId);
  String paramTeam=parts[TEAM_POS].trim();
  Common.validateTeamName(paramTeam);
  String paramName=parts[NAME_POS].trim();
  Common.validateStudentName(paramName);
  String paramEmail=parts[EMAIL_POS].trim();
  Common.validateEmail(paramEmail);
  String paramComment=parts.length == 4 ? parts[COMMENT_POS].trim() : ""String_Node_Str"";
  Common.validateComment(paramComment);
  setTeamName(paramTeam);
  setName(paramName);
  setEmail(paramEmail);
  setCourseID(paramCourseId);
  setComments(paramComment);
}","public Student(String line,String courseId) throws InvalidParametersException {
  int TEAM_POS=0;
  int NAME_POS=1;
  int EMAIL_POS=2;
  int COMMENT_POS=3;
  if ((line == null) || (courseId == null)) {
    throw new InvalidParametersException(Common.ERRORCODE_NULL_PARAMETER,""String_Node_Str"");
  }
  if ((line.equals(""String_Node_Str"")) || (courseId.equals(""String_Node_Str""))) {
    throw new InvalidParametersException(Common.ERRORCODE_EMPTY_STRING,""String_Node_Str"");
  }
  String[] parts=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  if ((parts.length < 3) || (parts.length > 4)) {
    throw new InvalidParametersException(Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING,""String_Node_Str"");
  }
  String paramCourseId=courseId.trim();
  Common.validateCourseId(paramCourseId);
  String paramTeam=parts[TEAM_POS].trim().isEmpty() ? null : parts[TEAM_POS].trim();
  Common.validateTeamName(paramTeam);
  String paramName=parts[NAME_POS].trim();
  Common.validateStudentName(paramName);
  String paramEmail=parts[EMAIL_POS].trim();
  Common.validateEmail(paramEmail);
  String paramComment=parts.length == 4 ? parts[COMMENT_POS].trim() : ""String_Node_Str"";
  paramComment=paramComment.isEmpty() ? null : paramComment;
  Common.validateComment(paramComment);
  setTeamName(paramTeam);
  setName(paramName);
  setEmail(paramEmail);
  setCourseID(paramCourseId);
  setComments(paramComment);
}",0.9186428310835462
63034,"public void setTeamName(String teamName){
  this.teamName=teamName.trim();
}","public void setTeamName(String teamName){
  this.teamName=(teamName == null ? null : teamName.trim());
}",0.8444444444444444
63035,"public void setID(String ID){
  this.ID=(ID == null ? ""String_Node_Str"" : ID.trim());
}","public void setID(String ID){
  this.ID=(ID == null ? null : ID.trim());
}",0.8819875776397516
63036,"public void setComments(String comments){
  this.comments=(comments == null ? ""String_Node_Str"" : comments.trim());
}","public void setComments(String comments){
  this.comments=(comments == null ? null : comments.trim());
}",0.9140271493212668
63037,"@Test public void testCreateStudent() throws Exception {
  printTestCaseHeader();
  refreshDataInDatastore();
  StudentData newStudent=new StudentData(""String_Node_Str"",""String_Node_Str"");
  verifyAbsentInDatastore(newStudent);
  apiServlet.createStudent(newStudent);
  verifyPresentInDatastore(newStudent);
  try {
    apiServlet.createStudent(newStudent);
    fail();
  }
 catch (  EntityAlreadyExistsException e) {
  }
  try {
    apiServlet.createStudent(null);
    fail();
  }
 catch (  InvalidParametersException e) {
  }
}","@Test public void testCreateStudent() throws Exception {
  printTestCaseHeader();
  StudentData newStudent=new StudentData(""String_Node_Str"",""String_Node_Str"");
  verifyAbsentInDatastore(newStudent);
  apiServlet.createStudent(newStudent);
  verifyPresentInDatastore(newStudent);
  try {
    apiServlet.createStudent(newStudent);
    fail();
  }
 catch (  EntityAlreadyExistsException e) {
  }
  try {
    apiServlet.createStudent(null);
    fail();
  }
 catch (  InvalidParametersException e) {
  }
}",0.9728155339805824
63038,"@Test public void testEnrollStudent() throws Exception {
  printTestCaseHeader();
  refreshDataInDatastore();
  String coordId=""String_Node_Str"";
  apiServlet.deleteCoord(coordId);
  apiServlet.createCoord(coordId,""String_Node_Str"",""String_Node_Str"");
  String courseId=""String_Node_Str"";
  apiServlet.createCourse(coordId,courseId,""String_Node_Str"");
  StudentData student1=new StudentData(""String_Node_Str"",courseId);
  assertEquals(0,apiServlet.getStudentListForCourse(courseId).size());
  StudentData enrollmentResult=apiServlet.enrollStudent(student1);
  assertEquals(1,apiServlet.getStudentListForCourse(courseId).size());
  verifyEnrollmentResultForStudent(student1,enrollmentResult,StudentData.UpdateStatus.NEW);
  enrollmentResult=apiServlet.enrollStudent(student1);
  verifyEnrollmentResultForStudent(student1,enrollmentResult,StudentData.UpdateStatus.UNMODIFIED);
  StudentData student2=new StudentData(""String_Node_Str"",courseId);
  enrollmentResult=apiServlet.enrollStudent(student2);
  verifyEnrollmentResultForStudent(student2,enrollmentResult,StudentData.UpdateStatus.MODIFIED);
  StudentData student3=new StudentData(""String_Node_Str"",courseId);
  enrollmentResult=apiServlet.enrollStudent(student3);
  assertEquals(2,apiServlet.getStudentListForCourse(courseId).size());
  verifyEnrollmentResultForStudent(student3,enrollmentResult,StudentData.UpdateStatus.NEW);
}","@Test public void testEnrollStudent() throws Exception {
  printTestCaseHeader();
  refreshDataInDatastore();
  String coordId=""String_Node_Str"";
  apiServlet.deleteCoord(coordId);
  apiServlet.createCoord(coordId,""String_Node_Str"",""String_Node_Str"");
  String courseId=""String_Node_Str"";
  apiServlet.createCourse(coordId,courseId,""String_Node_Str"");
  StudentData student1=new StudentData(""String_Node_Str"",courseId);
  assertEquals(0,apiServlet.getStudentListForCourse(courseId).size());
  StudentData enrollmentResult=apiServlet.enrollStudent(student1);
  assertEquals(1,apiServlet.getStudentListForCourse(courseId).size());
  verifyEnrollmentResultForStudent(student1,enrollmentResult,StudentData.UpdateStatus.NEW);
  enrollmentResult=apiServlet.enrollStudent(student1);
  verifyEnrollmentResultForStudent(student1,enrollmentResult,StudentData.UpdateStatus.UNMODIFIED);
  StudentData student2=dataBundle.students.get(""String_Node_Str"");
  student2.name=student2.name + ""String_Node_Str"";
  StudentData studentToEnroll=new StudentData(student2.email,student2.name,student2.comments,student2.course,student2.team);
  enrollmentResult=apiServlet.enrollStudent(studentToEnroll);
  verifyEnrollmentResultForStudent(studentToEnroll,enrollmentResult,StudentData.UpdateStatus.MODIFIED);
  verifyPresentInDatastore(student2);
  StudentData student3=new StudentData(""String_Node_Str"",courseId);
  enrollmentResult=apiServlet.enrollStudent(student3);
  assertEquals(2,apiServlet.getStudentListForCourse(courseId).size());
  verifyEnrollmentResultForStudent(student3,enrollmentResult,StudentData.UpdateStatus.NEW);
}",0.9067201604814444
63039,"@Test public void testStudentConstructor() throws TeammatesException {
  verifyExceptionForStudentCreation(""String_Node_Str"",null,""String_Node_Str"",Common.ERRORCODE_NULL_PARAMETER);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",null,Common.ERRORCODE_NULL_PARAMETER);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  Student expected;
  expected=generateTypicalStudentObject();
  String enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INVALID_CHARS);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  String longTeamName=Common.generateStringOfLength(Common.TEAM_NAME_MAX_LENGTH + 1);
  verifyExceptionForStudentCreation(""String_Node_Str"",longTeamName + ""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_STRING_TOO_LONG);
  String longStudentName=Common.generateStringOfLength(Common.STUDENT_NAME_MAX_LENGTH + 1);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"" + longStudentName + ""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_STRING_TOO_LONG);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INVALID_EMAIL);
  String longComment=Common.generateStringOfLength(Common.COMMENT_MAX_LENGTH + 1);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"" + longComment,""String_Node_Str"",Common.ERRORCODE_STRING_TOO_LONG);
  expected=generateTypicalStudentObject();
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  expected=generateTypicalStudentObject();
  expected.setComments(""String_Node_Str"");
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  expected=generateTypicalStudentObject();
  expected.setTeamName(""String_Node_Str"");
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
}","@Test public void testStudentConstructor() throws TeammatesException {
  verifyExceptionForStudentCreation(""String_Node_Str"",null,""String_Node_Str"",Common.ERRORCODE_NULL_PARAMETER);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",null,Common.ERRORCODE_NULL_PARAMETER);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  Student expected;
  expected=generateTypicalStudentObject();
  String enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INVALID_CHARS);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INCORRECTLY_FORMATTED_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_EMPTY_STRING);
  String longTeamName=Common.generateStringOfLength(Common.TEAM_NAME_MAX_LENGTH + 1);
  verifyExceptionForStudentCreation(""String_Node_Str"",longTeamName + ""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_STRING_TOO_LONG);
  String longStudentName=Common.generateStringOfLength(Common.STUDENT_NAME_MAX_LENGTH + 1);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"" + longStudentName + ""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_STRING_TOO_LONG);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Common.ERRORCODE_INVALID_EMAIL);
  String longComment=Common.generateStringOfLength(Common.COMMENT_MAX_LENGTH + 1);
  verifyExceptionForStudentCreation(""String_Node_Str"",""String_Node_Str"" + longComment,""String_Node_Str"",Common.ERRORCODE_STRING_TOO_LONG);
  expected=generateTypicalStudentObject();
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  expected=generateTypicalStudentObject();
  expected.setComments(null);
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
  expected=generateTypicalStudentObject();
  expected.setTeamName(null);
  enrollmentLine=""String_Node_Str"";
  verifyStudentContent(expected,new Student(enrollmentLine,""String_Node_Str""));
}",0.993254095727594
63040,"public void publishEvaluation(String courseId,String evaluationName) throws EntityDoesNotExistException {
  Courses courses=Courses.inst();
  List<Student> studentList=courses.getStudentList(courseId);
  Evaluations evaluations=Evaluations.inst();
  evaluations.publishEvaluation(courseId,evaluationName,studentList);
}","public void publishEvaluation(String courseId,String evaluationName) throws EntityDoesNotExistException {
  Courses courses=Courses.inst();
  List<Student> studentList=courses.getStudentList(courseId);
  Evaluations.inst().publishEvaluation(courseId,evaluationName,studentList);
}",0.7312186978297162
63041,"/** 
 * Publishes an Evaluation.
 * @param courseID the course ID (Pre-condition: The courseID and name pair must be valid)
 * @param name the evaluation name (Pre-condition: The courseID and name pair must be valid)
 */
public boolean publishEvaluation(String courseID,String name,List<Student> studentList){
  Evaluation evaluation=getEvaluation(courseID,name);
  evaluation.setPublished(true);
  informStudentsOfPublishingOfEvaluationResults(studentList,courseID,name);
  return true;
}","/** 
 * Publishes an Evaluation.
 * @param courseID the course ID (Pre-condition: The courseID and name pair must be valid)
 * @param name the evaluation name (Pre-condition: The courseID and name pair must be valid)
 */
public boolean publishEvaluation(String courseID,String name,List<Student> studentList){
  Evaluation evaluation=getEvaluation(courseID,name);
  evaluation.setPublished(true);
  informStudentsOfPublishingOfEvaluationResults(studentList,courseID,name);
  getPM().close();
  return true;
}",0.958876629889669
63042,"/** 
 * Deletes a Course object, along with all the Student objects that belong to the course.
 * @param courseID the course ID (Precondition: Must not be null)
 * @throws CourseDoesNotExistException if the course with the specified ID cannot be found
 */
public void deleteCoordinatorCourse(String courseID) throws CourseDoesNotExistException {
  Course course=getCourse(courseID);
  if (course == null)   throw new CourseDoesNotExistException();
  try {
    getPM().deletePersistent(course);
  }
  finally {
  }
  deleteAllStudents(courseID);
}","/** 
 * Deletes a Course object, along with all the Student objects that belong to the course.
 * @param courseID the course ID (Precondition: Must not be null)
 * @throws CourseDoesNotExistException if the course with the specified ID cannot be found
 */
public void deleteCoordinatorCourse(String courseID){
  Course course=getCourse(courseID);
  System.out.println(""String_Node_Str"");
  try {
    getPM().deletePersistent(course);
    deleteAllStudents(courseID);
    Evaluations.inst().deleteEvaluations(courseID);
  }
 catch (  Exception e) {
  }
}",0.607825295723385
63043,"/** 
 * 获取某个包下所有的class信息
 * @param packageName 包名
 * @return
 */
public static List<Class<?>> getClasses(String packageName){
  String packageFileName=packageName.replace(POINT,File.separator);
  URL fullPath=getDefaultClassLoader().getResource(packageFileName);
  if (fullPath == null) {
    fullPath=ClassUtil.class.getClassLoader().getResource(packageFileName);
  }
  String protocol=fullPath.getProtocol();
  if (protocol.equals(ServerToolkits.PROTOCOL_FILE)) {
    try {
      File dir=new File(fullPath.toURI());
      return findClassesByFile(dir,packageName);
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (protocol.equals(ServerToolkits.PROTOCOL_JAR)) {
    try {
      return findClassesByJar(((JarURLConnection)fullPath.openConnection()).getJarFile(),packageName);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return null;
}","/** 
 * 获取某个包下所有的class信息
 * @param packageName 包名
 * @return
 */
public static List<Class<?>> getClasses(String packageName){
  String packageFileName=packageName.replace(POINT,File.separator);
  URL fullPath=getDefaultClassLoader().getResource(packageFileName);
  if (fullPath == null) {
    fullPath=ClassUtil.class.getProtectionDomain().getCodeSource().getLocation();
  }
  String protocol=fullPath.getProtocol();
  if (protocol.equals(ServerToolkits.PROTOCOL_FILE)) {
    try {
      File dir=new File(fullPath.toURI());
      return findClassesByFile(dir,packageName);
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (protocol.equals(ServerToolkits.PROTOCOL_JAR)) {
    try {
      return findClassesByJar(((JarURLConnection)fullPath.openConnection()).getJarFile(),packageName);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  throw new RuntimeException(""String_Node_Str"" + packageName + ""String_Node_Str"");
}",0.910880829015544
63044,"/** 
 * 微信SSL
 * @return
 */
protected WeixinRequestExecutor getWeixinSSLExecutor() throws WeixinException {
  if (weixinSSLExecutor == null) {
    try {
      File certificate=new File(weixinAccount.getCertificateFile());
      if (!certificate.exists() || !certificate.isFile()) {
        throw new WeixinException(""String_Node_Str"" + certificate.toString());
      }
      this.weixinSSLExecutor=weixinExecutor.createSSLRequestExecutor(weixinAccount.getCertificateKey(),new FileInputStream(certificate));
    }
 catch (    IOException e) {
      throw new WeixinException(""String_Node_Str"",e);
    }
  }
  return this.weixinSSLExecutor;
}","/** 
 * 微信SSL
 * @return
 */
protected WeixinRequestExecutor getWeixinSSLExecutor() throws WeixinException {
  if (weixinSSLExecutor == null) {
    try {
      InputStream is=null;
      File certificate=new File(Weixin4jConfigUtil.replaceClassPathValue(weixinAccount.getCertificateFile()));
      if (!certificate.exists() || !certificate.isFile()) {
        is=Weixin4jConfigUtil.CLASSLOADER.getResourceAsStream(weixinAccount.getCertificateFile());
      }
 else {
        is=new FileInputStream(certificate);
      }
      if (is == null) {
        throw new WeixinException(""String_Node_Str"" + certificate.toString());
      }
      this.weixinSSLExecutor=weixinExecutor.createSSLRequestExecutor(weixinAccount.getCertificateKey(),is);
    }
 catch (    IOException e) {
      throw new WeixinException(""String_Node_Str"",e);
    }
  }
  return this.weixinSSLExecutor;
}",0.8050231328486451
63045,"/** 
 * 更新客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @param pwd 客服账号登录密码
 * @return 处理结果
 * @throws WeixinException
 * @see com.foxinmy.weixin4j.mp.api.CustomApi
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      更新客服账号</a>
 */
public ApiResult updateKfAccount(String id,String name,String pwd) throws WeixinException {
  return customApi.updateKfAccount(id,name,pwd);
}","/** 
 * 更新客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @return 处理结果
 * @throws WeixinException
 * @see com.foxinmy.weixin4j.mp.api.CustomApi
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      更新客服账号</a>
 */
public ApiResult updateKfAccount(String id,String name) throws WeixinException {
  return customApi.updateKfAccount(id,name);
}",0.9625246548323472
63046,"/** 
 * 新增客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @param pwd 客服账号登录密码
 * @return 处理结果
 * @throws WeixinException
 * @see com.foxinmy.weixin4j.mp.api.CustomApi 客服管理接口返回码</a>
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      新增客服账号</a>
 */
public ApiResult createKfAccount(String id,String name,String pwd) throws WeixinException {
  return customApi.createKfAccount(id,name,pwd);
}","/** 
 * 新增客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @return 处理结果
 * @throws WeixinException
 * @see com.foxinmy.weixin4j.mp.api.CustomApi 客服管理接口返回码</a>
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      新增客服账号</a>
 */
public ApiResult createKfAccount(String id,String name) throws WeixinException {
  return customApi.createKfAccount(id,name);
}",0.963531669865643
63047,"/** 
 * 更新客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @param pwd 客服账号登录密码
 * @return 处理结果
 * @throws WeixinException
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      新增客服账号</a>
 */
public ApiResult updateKfAccount(String id,String name,String pwd) throws WeixinException {
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",id);
  obj.put(""String_Node_Str"",name);
  obj.put(""String_Node_Str"",DigestUtil.MD5(pwd));
  String kf_update_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.post(String.format(kf_update_uri,token.getAccessToken()),obj.toJSONString());
  return response.getAsResult();
}","/** 
 * 更新客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @return 处理结果
 * @throws WeixinException
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      新增客服账号</a>
 */
public ApiResult updateKfAccount(String id,String name) throws WeixinException {
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",id);
  obj.put(""String_Node_Str"",name);
  String kf_update_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.post(String.format(kf_update_uri,token.getAccessToken()),obj.toJSONString());
  return response.getAsResult();
}",0.7037974683544304
63048,"/** 
 * 新增客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @param pwd 客服账号登录密码
 * @return 处理结果
 * @throws WeixinException
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      新增客服账号</a>
 */
public ApiResult createKfAccount(String id,String name,String pwd) throws WeixinException {
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",id);
  obj.put(""String_Node_Str"",name);
  obj.put(""String_Node_Str"",DigestUtil.MD5(pwd));
  String kf_create_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.post(String.format(kf_create_uri,token.getAccessToken()),obj.toJSONString());
  return response.getAsResult();
}","/** 
 * 新增客服账号
 * @param id 完整客服账号，格式为：账号前缀@公众号微信号，账号前缀最多10个字符，必须是英文或者数字字符。如果没有公众号微信号， 请前往微信公众平台设置。
 * @param name 客服昵称，最长6个汉字或12个英文字符
 * @return 处理结果
 * @throws WeixinException
 * @see <a href=
	 *      ""https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1458044813&token=&lang=zh_CN"">
	 *      新增客服账号</a>
 */
public ApiResult createKfAccount(String id,String name) throws WeixinException {
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",id);
  obj.put(""String_Node_Str"",name);
  String kf_create_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.post(String.format(kf_create_uri,token.getAccessToken()),obj.toJSONString());
  return response.getAsResult();
}",0.7037974683544304
63049,"@Override public String process(Object object,String name,Object value){
  if (object instanceof Button && name.equals(""String_Node_Str"")) {
    ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
    if (buttonType != null) {
      if (ButtonType.view == buttonType || ButtonType.miniprogram == buttonType) {
        return ""String_Node_Str"";
      }
 else       if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
  return name;
}","@Override public String process(Object object,String name,Object value){
  if (object instanceof Button && name.equals(""String_Node_Str"") && StringUtil.isNotBlank(((Button)object).getType())) {
    ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
    if (ButtonType.view == buttonType || ButtonType.miniprogram == buttonType) {
      return ""String_Node_Str"";
    }
 else     if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
  return name;
}",0.8875536480686695
63050,"private WeixinResponse createMenu0(String url,JSONObject data) throws WeixinException {
  return weixinExecutor.post(String.format(url,tokenManager.getAccessToken()),JSON.toJSONString(data,new NameFilter(){
    @Override public String process(    Object object,    String name,    Object value){
      if (object instanceof Button && name.equals(""String_Node_Str"")) {
        ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
        if (buttonType != null) {
          if (ButtonType.view == buttonType || ButtonType.miniprogram == buttonType) {
            return ""String_Node_Str"";
          }
 else           if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
            return ""String_Node_Str"";
          }
 else {
            return ""String_Node_Str"";
          }
        }
      }
      return name;
    }
  }
));
}","private WeixinResponse createMenu0(String url,JSONObject data) throws WeixinException {
  return weixinExecutor.post(String.format(url,tokenManager.getAccessToken()),JSON.toJSONString(data,new NameFilter(){
    @Override public String process(    Object object,    String name,    Object value){
      if (object instanceof Button && name.equals(""String_Node_Str"") && StringUtil.isNotBlank(((Button)object).getType())) {
        ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
        if (ButtonType.view == buttonType || ButtonType.miniprogram == buttonType) {
          return ""String_Node_Str"";
        }
 else         if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
          return ""String_Node_Str"";
        }
 else {
          return ""String_Node_Str"";
        }
      }
      return name;
    }
  }
));
}",0.9110728628800918
63051,"/** 
 * 删除菜单(管理员须拥有应用的管理权限 并且应用必须设置在回调模式)
 * @param agentid 应用ID
 * @throws WeixinException
 * @see <a href=
	 *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E5%88%A0%E9%99%A4%E8%8F%9C%E5%8D%95"">
	 *      删除菜单</a>
 * @return 处理结果
 */
public ApiResult deleteMenu(int agentid) throws WeixinException {
  String menu_delete_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.get(String.format(menu_delete_uri,token.getAccessToken(),agentid));
  return response.getAsResult();
}","/** 
 * 删除菜单(管理员须拥有应用的管理权限 并且应用必须设置在回调模式)
 * @param agentid 应用ID
 * @throws WeixinException
 * @see <a href=
     *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E5%88%A0%E9%99%A4%E8%8F%9C%E5%8D%95"">
     *      删除菜单</a>
 * @return 处理结果
 */
public ApiResult deleteMenu(int agentid) throws WeixinException {
  String menu_delete_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.get(String.format(menu_delete_uri,token.getAccessToken(),agentid));
  return response.getAsResult();
}",0.9909747292418772
63052,"/** 
 * 自定义菜单(管理员须拥有应用的管理权限 并且应用必须设置在回调模式)
 * @param agentid 应用ID
 * @param buttons 菜单列表
 * @throws WeixinException
 * @see <a href=
	 *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E8%8F%9C%E5%8D%95"">
	 *      创建自定义菜单</a>
 * @see com.foxinmy.weixin4j.model.Button
 */
public ApiResult createMenu(int agentid,List<Button> buttons) throws WeixinException {
  String menu_create_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",buttons);
  WeixinResponse response=weixinExecutor.post(String.format(menu_create_uri,token.getAccessToken(),agentid),JSON.toJSONString(obj,new NameFilter(){
    @Override public String process(    Object object,    String name,    Object value){
      if (object instanceof Button && name.equals(""String_Node_Str"")) {
        ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
        if (buttonType != null) {
          if (ButtonType.view == buttonType) {
            return ""String_Node_Str"";
          }
 else           if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
            return ""String_Node_Str"";
          }
 else {
            return ""String_Node_Str"";
          }
        }
      }
      return name;
    }
  }
));
  return response.getAsResult();
}","/** 
 * 自定义菜单(管理员须拥有应用的管理权限 并且应用必须设置在回调模式)
 * @param agentid 应用ID
 * @param buttons 菜单列表
 * @throws WeixinException
 * @see <a href=
     *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E8%8F%9C%E5%8D%95"">
     *      创建自定义菜单</a>
 * @see com.foxinmy.weixin4j.model.Button
 */
public ApiResult createMenu(int agentid,List<Button> buttons) throws WeixinException {
  String menu_create_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",buttons);
  WeixinResponse response=weixinExecutor.post(String.format(menu_create_uri,token.getAccessToken(),agentid),JSON.toJSONString(obj,new NameFilter(){
    @Override public String process(    Object object,    String name,    Object value){
      if (object instanceof Button && name.equals(""String_Node_Str"") && StringUtil.isNotBlank(((Button)object).getType())) {
        ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
        if (ButtonType.view == buttonType) {
          return ""String_Node_Str"";
        }
 else         if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
          return ""String_Node_Str"";
        }
 else {
          return ""String_Node_Str"";
        }
      }
      return name;
    }
  }
));
  return response.getAsResult();
}",0.7955121245023525
63053,"@Override public String process(Object object,String name,Object value){
  if (object instanceof Button && name.equals(""String_Node_Str"")) {
    ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
    if (buttonType != null) {
      if (ButtonType.view == buttonType) {
        return ""String_Node_Str"";
      }
 else       if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
  return name;
}","@Override public String process(Object object,String name,Object value){
  if (object instanceof Button && name.equals(""String_Node_Str"") && StringUtil.isNotBlank(((Button)object).getType())) {
    ButtonType buttonType=ButtonType.valueOf(((Button)object).getType());
    if (ButtonType.view == buttonType) {
      return ""String_Node_Str"";
    }
 else     if (ButtonType.media_id == buttonType || ButtonType.view_limited == buttonType) {
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
  return name;
}",0.8258064516129032
63054,"/** 
 * 查询菜单(管理员须拥有应用的管理权限 并且应用必须设置在回调模式。)
 * @param agentid 应用ID
 * @return 菜单集合
 * @throws WeixinException
 * @see <a href=
	 *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E8%8E%B7%E5%8F%96%E8%8F%9C%E5%8D%95%E5%88%97%E8%A1%A8"">
	 *      查询菜单</a>
 * @see com.foxinmy.weixin4j.model.Button
 */
public List<Button> getMenu(int agentid) throws WeixinException {
  String menu_get_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.get(String.format(menu_get_uri,token.getAccessToken(),agentid));
  JSONArray buttons=response.getAsJson().getJSONArray(""String_Node_Str"");
  List<Button> buttonList=new ArrayList<Button>(buttons.size());
  ParseProcess processor=new ExtraProcessor(){
    @Override public void processExtra(    Object object,    String key,    Object value){
      ((Button)object).setContent(String.valueOf(value));
    }
  }
;
  for (int i=0; i < buttons.size(); i++) {
    buttonList.add(JSON.parseObject(buttons.getString(i),Button.class,processor));
  }
  return buttonList;
}","/** 
 * 查询菜单(管理员须拥有应用的管理权限 并且应用必须设置在回调模式。)
 * @param agentid 应用ID
 * @return 菜单集合
 * @throws WeixinException
 * @see <a href=
     *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E8%8E%B7%E5%8F%96%E8%8F%9C%E5%8D%95%E5%88%97%E8%A1%A8"">
     *      查询菜单</a>
 * @see com.foxinmy.weixin4j.model.Button
 */
public List<Button> getMenu(int agentid) throws WeixinException {
  String menu_get_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenManager.getCache();
  WeixinResponse response=weixinExecutor.get(String.format(menu_get_uri,token.getAccessToken(),agentid));
  JSONArray buttons=response.getAsJson().getJSONArray(""String_Node_Str"");
  List<Button> buttonList=new ArrayList<Button>(buttons.size());
  ParseProcess processor=new ExtraProcessor(){
    @Override public void processExtra(    Object object,    String key,    Object value){
      ((Button)object).setContent(String.valueOf(value));
    }
  }
;
  for (int i=0; i < buttons.size(); i++) {
    buttonList.add(JSON.parseObject(buttons.getString(i),Button.class,processor));
  }
  return buttonList;
}",0.9953445065176908
63055,"@SuppressWarnings(""String_Node_Str"") public static <T>ListWrapper<T> deserializeToListWrapper(String content,Class<T> clazz,String... matchPattern){
  XMLStreamReader xr=null;
  XMLStreamWriter xw=null;
  try {
    xr=XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(content));
    List<Pattern> patterns=new ArrayList<Pattern>();
    for (    String pattern : matchPattern) {
      patterns.add(Pattern.compile(pattern));
    }
    Matcher matcher=null;
    Map<String,Map<String,String>> outMap=new HashMap<String,Map<String,String>>();
    while (true) {
      int event=xr.next();
      if (event == XMLStreamConstants.END_DOCUMENT) {
        break;
      }
 else       if (event == XMLStreamConstants.START_ELEMENT) {
        String name=xr.getLocalName();
        for (        Pattern pattern : patterns) {
          if ((matcher=pattern.matcher(name)).find()) {
            while (true) {
              event=xr.next();
              if (event == XMLStreamConstants.START_ELEMENT) {
                name=xr.getLocalName();
              }
 else               if (event == XMLStreamConstants.END_ELEMENT) {
                break;
              }
 else               if (event == XMLStreamConstants.CHARACTERS) {
                String key=matcher.group();
                if (!pattern.pattern().equals(DEFAULT_PATTERN.pattern())) {
                  matcher=DEFAULT_PATTERN.matcher(name);
                  matcher.find();
                  key=matcher.group();
                }
                Map<String,String> innerMap=null;
                if ((innerMap=outMap.get(key)) == null) {
                  innerMap=new HashMap<String,String>();
                  outMap.put(key,innerMap);
                }
                innerMap.put(name.replace(key,""String_Node_Str""),xr.getText());
              }
            }
            break;
          }
        }
      }
    }
    if (!outMap.isEmpty()) {
      StringWriter sw=new StringWriter();
      xw=XMLOutputFactory.newInstance().createXMLStreamWriter(sw);
      xw.writeStartDocument(Consts.UTF_8.name(),""String_Node_Str"");
      xw.writeStartElement(clazz.getCanonicalName());
      String itemName=StringUtil.uncapitalize(clazz.getSimpleName());
      XmlRootElement rootElement=clazz.getAnnotation(XmlRootElement.class);
      if (rootElement != null && StringUtil.isNotBlank(rootElement.name())) {
        try {
          if (!rootElement.name().equals(XmlRootElement.class.getMethod(""String_Node_Str"").getDefaultValue().toString())) {
            itemName=rootElement.name();
          }
        }
 catch (        NoSuchMethodException e) {
          ;
        }
      }
      for (Iterator<Entry<String,Map<String,String>>> outIt=outMap.entrySet().iterator(); outIt.hasNext(); ) {
        xw.writeStartElement(itemName);
        for (Iterator<Entry<String,String>> innerIt=outIt.next().getValue().entrySet().iterator(); innerIt.hasNext(); ) {
          Entry<String,String> entry=innerIt.next();
          xw.writeStartElement(entry.getKey());
          xw.writeCharacters(entry.getValue());
          xw.writeEndElement();
        }
        xw.writeEndElement();
      }
      xw.writeEndElement();
      xw.writeEndDocument();
      JAXBContext ctx=JAXBContext.newInstance(ListWrapper.class,clazz);
      Unmarshaller u=ctx.createUnmarshaller();
      return u.unmarshal(new StreamSource(new StringReader(sw.getBuffer().toString())),ListWrapper.class).getValue();
    }
    return null;
  }
 catch (  XMLStreamException e) {
    throw new IllegalArgumentException(e);
  }
catch (  JAXBException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (xw != null) {
        xw.close();
      }
      if (xr != null) {
        xr.close();
      }
    }
 catch (    XMLStreamException e) {
      ;
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public static <T>ListWrapper<T> deserializeToListWrapper(String content,Class<T> clazz,String... matchPattern){
  XMLStreamReader xr=null;
  XMLStreamWriter xw=null;
  try {
    xr=XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(content));
    List<Pattern> patterns=new ArrayList<Pattern>();
    for (    String pattern : matchPattern) {
      patterns.add(Pattern.compile(pattern));
    }
    Matcher matcher=null;
    Map<String,Map<String,String>> outMap=new HashMap<String,Map<String,String>>();
    while (true) {
      int event=xr.next();
      if (event == XMLStreamConstants.END_DOCUMENT) {
        break;
      }
 else       if (event == XMLStreamConstants.START_ELEMENT) {
        String name=xr.getLocalName();
        for (        Pattern pattern : patterns) {
          if ((matcher=pattern.matcher(name)).find()) {
            while (true) {
              event=xr.next();
              if (event == XMLStreamConstants.START_ELEMENT) {
                name=xr.getLocalName();
              }
 else               if (event == XMLStreamConstants.END_ELEMENT) {
                break;
              }
 else               if (event == XMLStreamConstants.CHARACTERS || event == XMLStreamConstants.CDATA) {
                String key=matcher.group();
                if (!pattern.pattern().equals(DEFAULT_PATTERN.pattern())) {
                  matcher=DEFAULT_PATTERN.matcher(name);
                  matcher.find();
                  key=matcher.group();
                }
                Map<String,String> innerMap=null;
                if ((innerMap=outMap.get(key)) == null) {
                  innerMap=new HashMap<String,String>();
                  outMap.put(key,innerMap);
                }
                innerMap.put(name.replace(key,""String_Node_Str""),xr.getText());
              }
            }
            break;
          }
        }
      }
    }
    if (!outMap.isEmpty()) {
      StringWriter sw=new StringWriter();
      xw=XMLOutputFactory.newInstance().createXMLStreamWriter(sw);
      xw.writeStartDocument(Consts.UTF_8.name(),""String_Node_Str"");
      xw.writeStartElement(clazz.getCanonicalName());
      String itemName=StringUtil.uncapitalize(clazz.getSimpleName());
      XmlRootElement rootElement=clazz.getAnnotation(XmlRootElement.class);
      if (rootElement != null && StringUtil.isNotBlank(rootElement.name())) {
        try {
          if (!rootElement.name().equals(XmlRootElement.class.getMethod(""String_Node_Str"").getDefaultValue().toString())) {
            itemName=rootElement.name();
          }
        }
 catch (        NoSuchMethodException e) {
          ;
        }
      }
      for (Iterator<Entry<String,Map<String,String>>> outIt=outMap.entrySet().iterator(); outIt.hasNext(); ) {
        xw.writeStartElement(itemName);
        for (Iterator<Entry<String,String>> innerIt=outIt.next().getValue().entrySet().iterator(); innerIt.hasNext(); ) {
          Entry<String,String> entry=innerIt.next();
          xw.writeStartElement(entry.getKey());
          xw.writeCharacters(entry.getValue());
          xw.writeEndElement();
        }
        xw.writeEndElement();
      }
      xw.writeEndElement();
      xw.writeEndDocument();
      JAXBContext ctx=JAXBContext.newInstance(ListWrapper.class,clazz);
      Unmarshaller u=ctx.createUnmarshaller();
      return u.unmarshal(new StreamSource(new StringReader(sw.getBuffer().toString())),ListWrapper.class).getValue();
    }
    return null;
  }
 catch (  XMLStreamException e) {
    throw new IllegalArgumentException(e);
  }
catch (  JAXBException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (xw != null) {
        xw.close();
      }
      if (xr != null) {
        xr.close();
      }
    }
 catch (    XMLStreamException e) {
      ;
    }
  }
}",0.995171603810518
63056,"@Override public HttpResponse execute(HttpRequest request) throws HttpClientException {
  HttpResponse response=null;
  try {
    URI uri=new URI(request.getURI().toString(),false,Consts.UTF_8.name());
    org.apache.commons.httpclient.HttpMethod httpMethod=method2method(request.getMethod());
    if (request.getMethod() == HttpMethod.TRACE) {
      httpMethod=new TraceMethod(uri.getEscapedURI());
    }
 else {
      httpMethod.setURI(uri);
    }
    boolean useSSL=""String_Node_Str"".equals(uri.getScheme());
    SSLContext sslContext=null;
    HttpParams params=request.getParams();
    if (params != null) {
      Proxy proxy=params.getProxy();
      if (proxy != null) {
        InetSocketAddress socketAddress=(InetSocketAddress)proxy.address();
        httpClient.getHostConfiguration().setProxy(socketAddress.getHostName(),socketAddress.getPort());
        useSSL=false;
      }
      sslContext=params.getSSLContext();
      httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(params.getConnectTimeout());
      httpClient.getHttpConnectionManager().getParams().setSendBufferSize(params.getChunkSize());
      httpMethod.getParams().setUriCharset(Consts.UTF_8.name());
      httpMethod.getParams().setSoTimeout(params.getSocketTimeout());
      httpMethod.getParams().setContentCharset(Consts.UTF_8.name());
    }
    if (useSSL) {
      if (sslContext == null) {
        sslContext=HttpClientFactory.allowSSLContext();
      }
      Protocol.registerProtocol(""String_Node_Str"",new Protocol(""String_Node_Str"",new SSLProtocolSocketFactory(sslContext),443));
    }
    com.foxinmy.weixin4j.http.HttpHeaders headers=request.getHeaders();
    if (headers == null) {
      headers=new HttpHeaders();
    }
    if (!headers.containsKey(HttpHeaders.HOST)) {
      headers.set(HttpHeaders.HOST,uri.getHost());
    }
    if (!headers.containsKey(HttpHeaders.ACCEPT)) {
      headers.set(HttpHeaders.ACCEPT,""String_Node_Str"");
    }
    if (!headers.containsKey(HttpHeaders.USER_AGENT)) {
      headers.set(HttpHeaders.USER_AGENT,""String_Node_Str"");
    }
    for (Iterator<Entry<String,List<String>>> headerIterator=headers.entrySet().iterator(); headerIterator.hasNext(); ) {
      Entry<String,List<String>> header=headerIterator.next();
      if (HttpHeaders.COOKIE.equalsIgnoreCase(header.getKey())) {
        httpMethod.setRequestHeader(header.getKey(),StringUtil.join(header.getValue(),';'));
      }
 else {
        for (        String headerValue : header.getValue()) {
          httpMethod.addRequestHeader(header.getKey(),headerValue != null ? headerValue : ""String_Node_Str"");
        }
      }
    }
    HttpEntity entity=request.getEntity();
    if (entity != null) {
      if (entity.getContentLength() > 0l) {
        httpMethod.addRequestHeader(HttpHeaders.CONTENT_LENGTH,Long.toString(entity.getContentLength()));
      }
      if (entity.getContentType() != null) {
        httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE,entity.getContentType().toString());
      }
      RequestEntity requestEntity=null;
      if (entity instanceof MultipartEntity) {
        ByteArrayOutputStream os=new ByteArrayOutputStream();
        entity.writeTo(os);
        os.flush();
        requestEntity=new ByteArrayRequestEntity(os.toByteArray(),entity.getContentType().toString());
        os.close();
      }
 else {
        requestEntity=new InputStreamRequestEntity(entity.getContent(),entity.getContentType().toString());
      }
      ((EntityEnclosingMethod)httpMethod).setRequestEntity(requestEntity);
    }
    httpClient.executeMethod(httpMethod);
    response=new HttpComponent3Response(httpMethod);
    handleResponse(response);
  }
 catch (  IOException e) {
    throw new HttpClientException(""String_Node_Str"" + request.getMethod().name() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  return response;
}","@Override public HttpResponse execute(HttpRequest request) throws HttpClientException {
  HttpResponse response=null;
  try {
    org.apache.commons.httpclient.HttpMethod httpMethod=createHttpMethod(request.getMethod(),request.getURI());
    boolean useSSL=""String_Node_Str"".equals(request.getURI().getScheme());
    SSLContext sslContext=null;
    HttpParams params=request.getParams();
    if (params != null) {
      Proxy proxy=params.getProxy();
      if (proxy != null) {
        InetSocketAddress socketAddress=(InetSocketAddress)proxy.address();
        httpClient.getHostConfiguration().setProxy(socketAddress.getHostName(),socketAddress.getPort());
        useSSL=false;
      }
      sslContext=params.getSSLContext();
      httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(params.getConnectTimeout());
      httpClient.getHttpConnectionManager().getParams().setSendBufferSize(params.getChunkSize());
      httpMethod.getParams().setUriCharset(Consts.UTF_8.name());
      httpMethod.getParams().setSoTimeout(params.getSocketTimeout());
      httpMethod.getParams().setContentCharset(Consts.UTF_8.name());
    }
    if (useSSL) {
      if (sslContext == null) {
        sslContext=HttpClientFactory.allowSSLContext();
      }
      Protocol.registerProtocol(""String_Node_Str"",new Protocol(""String_Node_Str"",new SSLProtocolSocketFactory(sslContext),443));
    }
    com.foxinmy.weixin4j.http.HttpHeaders headers=request.getHeaders();
    if (headers == null) {
      headers=new HttpHeaders();
    }
    if (!headers.containsKey(HttpHeaders.HOST)) {
      headers.set(HttpHeaders.HOST,request.getURI().getHost());
    }
    if (!headers.containsKey(HttpHeaders.ACCEPT)) {
      headers.set(HttpHeaders.ACCEPT,""String_Node_Str"");
    }
    if (!headers.containsKey(HttpHeaders.USER_AGENT)) {
      headers.set(HttpHeaders.USER_AGENT,""String_Node_Str"");
    }
    for (Iterator<Entry<String,List<String>>> headerIterator=headers.entrySet().iterator(); headerIterator.hasNext(); ) {
      Entry<String,List<String>> header=headerIterator.next();
      if (HttpHeaders.COOKIE.equalsIgnoreCase(header.getKey())) {
        httpMethod.setRequestHeader(header.getKey(),StringUtil.join(header.getValue(),';'));
      }
 else {
        for (        String headerValue : header.getValue()) {
          httpMethod.addRequestHeader(header.getKey(),headerValue != null ? headerValue : ""String_Node_Str"");
        }
      }
    }
    HttpEntity entity=request.getEntity();
    if (entity != null) {
      if (entity.getContentLength() > 0l) {
        httpMethod.addRequestHeader(HttpHeaders.CONTENT_LENGTH,Long.toString(entity.getContentLength()));
      }
      if (entity.getContentType() != null) {
        httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE,entity.getContentType().toString());
      }
      RequestEntity requestEntity=null;
      if (entity instanceof MultipartEntity) {
        ByteArrayOutputStream os=new ByteArrayOutputStream();
        entity.writeTo(os);
        os.flush();
        requestEntity=new ByteArrayRequestEntity(os.toByteArray(),entity.getContentType().toString());
        os.close();
      }
 else {
        requestEntity=new InputStreamRequestEntity(entity.getContent(),entity.getContentType().toString());
      }
      ((EntityEnclosingMethod)httpMethod).setRequestEntity(requestEntity);
    }
    httpClient.executeMethod(httpMethod);
    response=new HttpComponent3Response(httpMethod);
    handleResponse(response);
  }
 catch (  IOException e) {
    throw new HttpClientException(""String_Node_Str"" + request.getMethod().name() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  return response;
}",0.7352789256198347
63057,"@Override public HttpResponse execute(HttpRequest request) throws HttpClientException {
  HttpResponse response=null;
  try {
    HttpRequestBase uriRequest=methodMap.get(request.getMethod());
    uriRequest.setURI(request.getURI());
    boolean useSSL=""String_Node_Str"".equals(request.getURI().getScheme());
    SSLContext sslContext=null;
    X509HostnameVerifier hostnameVerifier=null;
    HttpParams params=request.getParams();
    if (params != null) {
      if (params.getProxy() != null) {
        InetSocketAddress socketAddress=(InetSocketAddress)params.getProxy().address();
        HttpHost proxy=new HttpHost(socketAddress.getHostName(),socketAddress.getPort());
        uriRequest.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
        useSSL=false;
      }
      uriRequest.getParams().setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE,params.getChunkSize());
      uriRequest.getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT,params.getSocketTimeout());
      uriRequest.getParams().setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,params.getConnectTimeout());
      uriRequest.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,Consts.UTF_8);
      uriRequest.getParams().setParameter(HttpHeaders.CONTENT_ENCODING,Consts.UTF_8);
      uriRequest.getParams().setParameter(HttpHeaders.ACCEPT_CHARSET,Consts.UTF_8);
      sslContext=params.getSSLContext();
      hostnameVerifier=new CustomHostnameVerifier(params.getHostnameVerifier());
    }
    if (useSSL) {
      if (sslContext == null) {
        sslContext=HttpClientFactory.allowSSLContext();
      }
      if (hostnameVerifier == null) {
        hostnameVerifier=SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
      }
      SSLSocketFactory socketFactory=new SSLSocketFactory(sslContext);
      socketFactory.setHostnameVerifier(hostnameVerifier);
      Scheme scheme=new Scheme(""String_Node_Str"",socketFactory,443);
      httpClient.getConnectionManager().getSchemeRegistry().register(scheme);
    }
    addHeaders(request.getHeaders(),uriRequest);
    addEntity(request.getEntity(),uriRequest);
    org.apache.http.HttpResponse httpResponse=httpClient.execute(uriRequest);
    response=new HttpComponent4_1Response(httpResponse,getContent(httpResponse));
    handleResponse(response);
  }
 catch (  IOException e) {
    throw new HttpClientException(""String_Node_Str"" + request.getMethod().name() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  return response;
}","@Override public HttpResponse execute(HttpRequest request) throws HttpClientException {
  HttpResponse response=null;
  try {
    HttpRequestBase uriRequest=createHttpRequest(request.getMethod(),request.getURI());
    boolean useSSL=""String_Node_Str"".equals(request.getURI().getScheme());
    SSLContext sslContext=null;
    X509HostnameVerifier hostnameVerifier=null;
    HttpParams params=request.getParams();
    if (params != null) {
      if (params.getProxy() != null) {
        InetSocketAddress socketAddress=(InetSocketAddress)params.getProxy().address();
        HttpHost proxy=new HttpHost(socketAddress.getHostName(),socketAddress.getPort());
        uriRequest.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
        useSSL=false;
      }
      uriRequest.getParams().setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE,params.getChunkSize());
      uriRequest.getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT,params.getSocketTimeout());
      uriRequest.getParams().setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,params.getConnectTimeout());
      uriRequest.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,Consts.UTF_8);
      uriRequest.getParams().setParameter(HttpHeaders.CONTENT_ENCODING,Consts.UTF_8);
      uriRequest.getParams().setParameter(HttpHeaders.ACCEPT_CHARSET,Consts.UTF_8);
      sslContext=params.getSSLContext();
      hostnameVerifier=new CustomHostnameVerifier(params.getHostnameVerifier());
    }
    if (useSSL) {
      if (sslContext == null) {
        sslContext=HttpClientFactory.allowSSLContext();
      }
      if (hostnameVerifier == null) {
        hostnameVerifier=SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
      }
      SSLSocketFactory socketFactory=new SSLSocketFactory(sslContext);
      socketFactory.setHostnameVerifier(hostnameVerifier);
      Scheme scheme=new Scheme(""String_Node_Str"",socketFactory,443);
      httpClient.getConnectionManager().getSchemeRegistry().register(scheme);
    }
    addHeaders(request.getHeaders(),uriRequest);
    addEntity(request.getEntity(),uriRequest);
    org.apache.http.HttpResponse httpResponse=httpClient.execute(uriRequest);
    response=new HttpComponent4_1Response(httpResponse,getContent(httpResponse));
    handleResponse(response);
  }
 catch (  IOException e) {
    throw new HttpClientException(""String_Node_Str"" + request.getMethod().name() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  return response;
}",0.9834424335772044
63058,"@Override public HttpResponse execute(HttpRequest request) throws HttpClientException {
  HttpResponse response=null;
  try {
    HttpRequestBase uriRequest=methodMap.get(request.getMethod());
    uriRequest.setURI(request.getURI());
    boolean useSSL=""String_Node_Str"".equals(request.getURI().getScheme());
    SSLContext sslContext=null;
    X509HostnameVerifier hostnameVerifier=null;
    HttpParams params=request.getParams();
    if (params != null) {
      Builder requestConfig=RequestConfig.custom().setSocketTimeout(params.getSocketTimeout()).setConnectTimeout(params.getConnectTimeout()).setConnectionRequestTimeout(params.getReadTimeout());
      if (params.getProxy() != null) {
        InetSocketAddress socketAddress=(InetSocketAddress)params.getProxy().address();
        HttpHost proxy=new HttpHost(socketAddress.getHostName(),socketAddress.getPort());
        requestConfig.setProxy(proxy);
        useSSL=false;
      }
      uriRequest.setConfig(requestConfig.build());
      sslContext=params.getSSLContext();
      hostnameVerifier=new CustomHostnameVerifier(params.getHostnameVerifier());
    }
    if (useSSL) {
      if (sslContext == null) {
        sslContext=HttpClientFactory.allowSSLContext();
      }
      if (hostnameVerifier == null) {
        hostnameVerifier=SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
      }
      httpClient=HttpClients.custom().setHostnameVerifier(hostnameVerifier).setSslcontext(sslContext).build();
    }
    addHeaders(request.getHeaders(),uriRequest);
    addEntity(request.getEntity(),uriRequest);
    CloseableHttpResponse httpResponse=httpClient.execute(uriRequest);
    response=new HttpComponent4_2Response(httpResponse,getContent(httpResponse));
    handleResponse(response);
  }
 catch (  IOException e) {
    throw new HttpClientException(""String_Node_Str"" + request.getMethod().name() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  return response;
}","@Override public HttpResponse execute(HttpRequest request) throws HttpClientException {
  HttpResponse response=null;
  try {
    HttpRequestBase uriRequest=createHttpRequest(request.getMethod(),request.getURI());
    boolean useSSL=""String_Node_Str"".equals(request.getURI().getScheme());
    SSLContext sslContext=null;
    X509HostnameVerifier hostnameVerifier=null;
    HttpParams params=request.getParams();
    if (params != null) {
      Builder requestConfig=RequestConfig.custom().setSocketTimeout(params.getSocketTimeout()).setConnectTimeout(params.getConnectTimeout()).setConnectionRequestTimeout(params.getReadTimeout());
      if (params.getProxy() != null) {
        InetSocketAddress socketAddress=(InetSocketAddress)params.getProxy().address();
        HttpHost proxy=new HttpHost(socketAddress.getHostName(),socketAddress.getPort());
        requestConfig.setProxy(proxy);
        useSSL=false;
      }
      uriRequest.setConfig(requestConfig.build());
      sslContext=params.getSSLContext();
      hostnameVerifier=new CustomHostnameVerifier(params.getHostnameVerifier());
    }
    if (useSSL) {
      if (sslContext == null) {
        sslContext=HttpClientFactory.allowSSLContext();
      }
      if (hostnameVerifier == null) {
        hostnameVerifier=SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
      }
      httpClient=HttpClients.custom().setHostnameVerifier(hostnameVerifier).setSslcontext(sslContext).build();
    }
    addHeaders(request.getHeaders(),uriRequest);
    addEntity(request.getEntity(),uriRequest);
    CloseableHttpResponse httpResponse=httpClient.execute(uriRequest);
    response=new HttpComponent4_2Response(httpResponse,getContent(httpResponse));
    handleResponse(response);
  }
 catch (  IOException e) {
    throw new HttpClientException(""String_Node_Str"" + request.getMethod().name() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ e.getMessage(),e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  return response;
}",0.9789422135161606
63059,"public NameValue(String name,String value){
  this.name=name;
  this.value=value;
}","@JSONCreator public NameValue(@JSONField(name=""String_Node_Str"") String name,@JSONField(name=""String_Node_Str"") String value){
  this.name=name;
  this.value=value;
}",0.6666666666666666
63060,"/** 
 * 获取成员
 * @param userid 成员唯一ID
 * @see com.foxinmy.weixin4j.qy.model.User
 * @see <a href=
	 *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E7%AE%A1%E7%90%86%E6%88%90%E5%91%98#.E8.8E.B7.E5.8F.96.E6.88.90.E5.91.98"">
	 *      获取成员说明</a>
 * @return 成员对象
 * @throws WeixinException
 */
public User getUser(String userid) throws WeixinException {
  String user_get_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenHolder.getToken();
  WeixinResponse response=weixinExecutor.get(String.format(user_get_uri,token.getAccessToken(),userid));
  JSONObject obj=response.getAsJson();
  Object attrs=obj.getJSONObject(""String_Node_Str"").remove(""String_Node_Str"");
  if (attrs != null) {
    obj.put(""String_Node_Str"",attrs);
  }
  return JSON.toJavaObject(obj,User.class);
}","/** 
 * 获取成员
 * @param userid 成员唯一ID
 * @see com.foxinmy.weixin4j.qy.model.User
 * @see <a href=
	 *      ""http://qydev.weixin.qq.com/wiki/index.php?title=%E7%AE%A1%E7%90%86%E6%88%90%E5%91%98#.E8.8E.B7.E5.8F.96.E6.88.90.E5.91.98"">
	 *      获取成员说明</a>
 * @return 成员对象
 * @throws WeixinException
 */
public User getUser(String userid) throws WeixinException {
  String user_get_uri=getRequestUri(""String_Node_Str"");
  Token token=tokenHolder.getToken();
  WeixinResponse response=weixinExecutor.get(String.format(user_get_uri,token.getAccessToken(),userid));
  JSONObject obj=response.getAsJson();
  Object attrs=obj.remove(""String_Node_Str"");
  User user=JSON.toJavaObject(obj,User.class);
  if (attrs != null) {
    user.setExtattr(JSON.parseArray(((JSONObject)attrs).getString(""String_Node_Str""),NameValue.class));
  }
  return user;
}",0.8056755089450957
63061,"/** 
 * 上传媒体文件 <p> 正常情况下返回{""type"":""TYPE"",""media_id"":""MEDIA_ID"",""created_at"":123456789}, 否则抛出异常. </p>
 * @param agentid 企业应用ID(<font color=""red"">大于0时视为上传永久媒体文件</font>)
 * @param is 媒体数据流
 * @param fileName 文件名
 * @return 上传到微信服务器返回的媒体标识
 * @see <a
	 *      href=""http://qydev.weixin.qq.com/wiki/index.php?title=%E4%B8%8A%E4%BC%A0%E4%B8%B4%E6%97%B6%E7%B4%A0%E6%9D%90%E6%96%87%E4%BB%B6"">上传临时素材文件说明</a>
 * @see <a
	 *      href=""http://http://qydev.weixin.qq.com/wiki/index.php?title=%E4%B8%8A%E4%BC%A0%E6%B0%B8%E4%B9%85%E7%B4%A0%E6%9D%90"">上传永久素材文件说明</a>
 * @throws WeixinException
 */
public String uploadMedia(int agentid,InputStream is,String fileName) throws WeixinException {
  byte[] content;
  try {
    content=IOUtil.toByteArray(is);
  }
 catch (  IOException e) {
    throw new WeixinException(e);
  }
  if (StringUtil.isBlank(fileName)) {
    fileName=ObjectId.get().toHexString();
  }
  String suffixName=IOUtil.getExtension(fileName);
  if (StringUtil.isBlank(suffixName)) {
    suffixName=FileUtil.getFileType(new ByteArrayInputStream(content));
    fileName=String.format(""String_Node_Str"",fileName,suffixName);
  }
  MediaType mediaType=null;
  if (""String_Node_Str"".contains(suffixName)) {
    mediaType=MediaType.image;
  }
 else   if (""String_Node_Str"".contains(suffixName)) {
    mediaType=MediaType.voice;
  }
 else   if (""String_Node_Str"".equals(suffixName)) {
    mediaType=MediaType.video;
  }
 else {
    mediaType=MediaType.file;
  }
  Token token=tokenHolder.getToken();
  try {
    WeixinResponse response=null;
    if (agentid > 0) {
      String material_media_upload_uri=getRequestUri(""String_Node_Str"");
      response=weixinClient.post(String.format(material_media_upload_uri,token.getAccessToken(),mediaType.name(),agentid),new FormBodyPart(""String_Node_Str"",new InputStreamBody(new ByteArrayInputStream(content),mediaType.getContentType().getMimeType(),fileName)));
    }
 else {
      String file_upload_uri=getRequestUri(""String_Node_Str"");
      response=weixinClient.post(String.format(file_upload_uri,token.getAccessToken(),mediaType.name()),new FormBodyPart(""String_Node_Str"",new InputStreamBody(new ByteArrayInputStream(content),mediaType.getContentType().getMimeType(),fileName)));
    }
    return response.getAsJson().getString(""String_Node_Str"");
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
        ;
      }
    }
  }
}","/** 
 * 上传媒体文件 <p> 正常情况下返回{""type"":""TYPE"",""media_id"":""MEDIA_ID"",""created_at"":123456789}, 否则抛出异常. </p>
 * @param agentid 企业应用ID(<font color=""red"">大于0时视为上传永久媒体文件</font>)
 * @param is 媒体数据流
 * @param fileName 文件名
 * @return 上传到微信服务器返回的媒体标识
 * @see <a
	 *      href=""http://qydev.weixin.qq.com/wiki/index.php?title=%E4%B8%8A%E4%BC%A0%E4%B8%B4%E6%97%B6%E7%B4%A0%E6%9D%90%E6%96%87%E4%BB%B6"">上传临时素材文件说明</a>
 * @see <a
	 *      href=""http://http://qydev.weixin.qq.com/wiki/index.php?title=%E4%B8%8A%E4%BC%A0%E6%B0%B8%E4%B9%85%E7%B4%A0%E6%9D%90"">上传永久素材文件说明</a>
 * @throws WeixinException
 */
public String uploadMedia(int agentid,InputStream is,String fileName) throws WeixinException {
  byte[] content;
  try {
    content=IOUtil.toByteArray(is);
  }
 catch (  IOException e) {
    throw new WeixinException(e);
  }
  if (StringUtil.isBlank(fileName)) {
    fileName=ObjectId.get().toHexString();
  }
  String suffixName=IOUtil.getExtension(fileName);
  if (StringUtil.isBlank(suffixName)) {
    suffixName=FileUtil.getFileType(new ByteArrayInputStream(content));
    fileName=String.format(""String_Node_Str"",fileName,suffixName);
  }
  MediaType mediaType=null;
  if (""String_Node_Str"".contains(suffixName)) {
    mediaType=MediaType.image;
  }
 else   if (""String_Node_Str"".contains(suffixName)) {
    mediaType=MediaType.voice;
  }
 else   if (""String_Node_Str"".contains(suffixName)) {
    mediaType=MediaType.video;
  }
 else {
    mediaType=MediaType.file;
  }
  Token token=tokenHolder.getToken();
  try {
    WeixinResponse response=null;
    if (agentid > 0) {
      String material_media_upload_uri=getRequestUri(""String_Node_Str"");
      response=weixinClient.post(String.format(material_media_upload_uri,token.getAccessToken(),mediaType.name(),agentid),new FormBodyPart(""String_Node_Str"",new InputStreamBody(new ByteArrayInputStream(content),mediaType.getContentType().getMimeType(),fileName)));
    }
 else {
      String file_upload_uri=getRequestUri(""String_Node_Str"");
      response=weixinClient.post(String.format(file_upload_uri,token.getAccessToken(),mediaType.name()),new FormBodyPart(""String_Node_Str"",new InputStreamBody(new ByteArrayInputStream(content),mediaType.getContentType().getMimeType(),fileName)));
    }
    return response.getAsJson().getString(""String_Node_Str"");
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
        ;
      }
    }
  }
}",0.9975288303130148
63062,"public MessageType getMsgType(){
switch (msgType) {
case 1:
    return MessageType.text;
case 2:
  return MessageType.image;
case 3:
return MessageType.voice;
case 4:
return MessageType.video;
case 6:
return MessageType.link;
default :
return null;
}
}","/** 
 * 1代表文字 2代表图片 3代表语音 4代表视频 6代表第三方应用消息（链接消息）
 * @return
 */
public String getMsgType(){
switch (msgType) {
case 1:
    return ""String_Node_Str"";
case 2:
  return ""String_Node_Str"";
case 3:
return ""String_Node_Str"";
case 4:
return ""String_Node_Str"";
case 6:
return ""String_Node_Str"";
default :
return null;
}
}",0.4884955752212389
63063,"@Override protected void encode(ChannelHandlerContext ctx,WeixinResponse response,List<Object> out) throws WeixinException {
  MessageTransfer messageTransfer=ctx.channel().attr(Consts.MESSAGE_TRANSFER_KEY).get();
  AesToken aesToken=messageTransfer.getAesToken();
  EncryptType encryptType=messageTransfer.getEncryptType();
  StringBuilder content=new StringBuilder();
  if (response instanceof BlankResponse) {
    content.append(response.toContent());
  }
 else {
    content.append(""String_Node_Str"");
    content.append(String.format(""String_Node_Str"",messageTransfer.getFromUserName()));
    content.append(String.format(""String_Node_Str"",StringUtil.isBlank(aesToken.getWeixinId()) ? messageTransfer.getToUserName() : aesToken.getWeixinId()));
    content.append(String.format(""String_Node_Str"",System.currentTimeMillis() / 1000l));
    content.append(String.format(""String_Node_Str"",response.getMsgType()));
    content.append(response.toContent());
    content.append(""String_Node_Str"");
    if (encryptType == EncryptType.AES) {
      String nonce=RandomUtil.generateString(32);
      String timestamp=String.valueOf(System.currentTimeMillis() / 1000l);
      String encrtypt=MessageUtil.aesEncrypt(aesToken.getWeixinId(),aesToken.getAesKey(),content.toString());
      String msgSignature=MessageUtil.signature(aesToken.getToken(),nonce,timestamp,encrtypt);
      content.delete(0,content.length());
      content.append(""String_Node_Str"");
      content.append(String.format(""String_Node_Str"",nonce));
      content.append(String.format(""String_Node_Str"",timestamp));
      content.append(String.format(""String_Node_Str"",msgSignature));
      content.append(String.format(""String_Node_Str"",encrtypt));
      content.append(""String_Node_Str"");
    }
  }
  ctx.writeAndFlush(HttpUtil.createHttpResponse(content.toString(),OK,Consts.CONTENTTYPE$APPLICATION_XML));
  logger.info(""String_Node_Str"",encryptType,content);
}","@Override protected void encode(ChannelHandlerContext ctx,WeixinResponse response,List<Object> out) throws WeixinException {
  MessageTransfer messageTransfer=ctx.channel().attr(Consts.MESSAGE_TRANSFER_KEY).get();
  AesToken aesToken=messageTransfer.getAesToken();
  EncryptType encryptType=messageTransfer.getEncryptType();
  StringBuilder content=new StringBuilder();
  if (response instanceof BlankResponse) {
    content.append(response.toContent());
  }
 else {
    content.append(""String_Node_Str"");
    content.append(String.format(""String_Node_Str"",messageTransfer.getFromUserName()));
    content.append(String.format(""String_Node_Str"",messageTransfer.getToUserName()));
    content.append(String.format(""String_Node_Str"",System.currentTimeMillis() / 1000l));
    content.append(String.format(""String_Node_Str"",response.getMsgType()));
    content.append(response.toContent());
    content.append(""String_Node_Str"");
    if (encryptType == EncryptType.AES) {
      String nonce=RandomUtil.generateString(32);
      String timestamp=Long.toString(System.currentTimeMillis() / 1000l);
      String encrtypt=MessageUtil.aesEncrypt(aesToken.getWeixinId(),aesToken.getAesKey(),content.toString());
      String msgSignature=MessageUtil.signature(aesToken.getToken(),nonce,timestamp,encrtypt);
      content.delete(0,content.length());
      content.append(""String_Node_Str"");
      content.append(String.format(""String_Node_Str"",nonce));
      content.append(String.format(""String_Node_Str"",timestamp));
      content.append(String.format(""String_Node_Str"",msgSignature));
      content.append(String.format(""String_Node_Str"",encrtypt));
      content.append(""String_Node_Str"");
    }
  }
  ctx.writeAndFlush(HttpUtil.createHttpResponse(content.toString(),OK,Consts.CONTENTTYPE$APPLICATION_XML));
  logger.info(""String_Node_Str"",encryptType,content);
}",0.9632566745968808
63064,"public static String encodeBase64String(final byte[] bytes){
  byte[] data=encodeBase64(bytes);
  return HexUtil.encodeHexString(data);
}","public static String encodeBase64String(final byte[] bytes){
  byte[] data=encodeBase64(bytes);
  return StringUtil.newStringUtf8(data).trim();
}",0.851063829787234
63065,"/** 
 * 对xml消息加密
 * @param appId 应用ID
 * @param encodingAesKey 加密密钥
 * @param xmlContent 原始消息体
 * @return aes加密后的消息体
 * @throws WeixinException
 */
public static String aesEncrypt(String appId,String encodingAesKey,String xmlContent) throws WeixinException {
  byte[] randomBytes=StringUtil.getBytesUtf8(RandomUtil.generateString(16));
  byte[] xmlBytes=StringUtil.getBytesUtf8(xmlContent);
  int xmlLength=xmlBytes.length;
  byte[] orderBytes=new byte[4];
  orderBytes[3]=(byte)(xmlLength & 0xFF);
  orderBytes[2]=(byte)(xmlLength >> 8 & 0xFF);
  orderBytes[1]=(byte)(xmlLength >> 16 & 0xFF);
  orderBytes[0]=(byte)(xmlLength >> 24 & 0xFF);
  byte[] appidBytes=StringUtil.getBytesUtf8(appId);
  int byteLength=randomBytes.length + xmlLength + orderBytes.length+ appidBytes.length;
  byte[] padBytes=PKCS7Encoder.encode(byteLength);
  byte[] unencrypted=new byte[byteLength + padBytes.length];
  byteLength=0;
  System.arraycopy(randomBytes,0,unencrypted,byteLength,randomBytes.length);
  byteLength+=randomBytes.length;
  System.arraycopy(orderBytes,0,unencrypted,byteLength,orderBytes.length);
  byteLength+=orderBytes.length;
  System.arraycopy(xmlBytes,0,unencrypted,byteLength,xmlBytes.length);
  byteLength+=xmlBytes.length;
  System.arraycopy(appidBytes,0,unencrypted,byteLength,appidBytes.length);
  byteLength+=appidBytes.length;
  System.arraycopy(padBytes,0,unencrypted,byteLength,padBytes.length);
  try {
    byte[] aesKey=Base64.decodeBase64(encodingAesKey + ""String_Node_Str"");
    Cipher cipher=Cipher.getInstance(""String_Node_Str"");
    SecretKeySpec keySpec=new SecretKeySpec(aesKey,Consts.AES);
    IvParameterSpec iv=new IvParameterSpec(aesKey,0,16);
    cipher.init(Cipher.ENCRYPT_MODE,keySpec,iv);
    byte[] encrypted=cipher.doFinal(unencrypted);
    return Base64.encodeBase64String(encrypted);
  }
 catch (  Exception e) {
    throw new WeixinException(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * 对xml消息加密
 * @param appId 应用ID
 * @param encodingAesKey 加密密钥
 * @param xmlContent 原始消息体
 * @return aes加密后的消息体
 * @throws WeixinException
 */
public static String aesEncrypt(String appId,String encodingAesKey,String xmlContent) throws WeixinException {
  byte[] randomBytes=StringUtil.getBytesUtf8(RandomUtil.generateString(32));
  byte[] xmlBytes=StringUtil.getBytesUtf8(xmlContent);
  int xmlLength=xmlBytes.length;
  byte[] orderBytes=new byte[4];
  orderBytes[3]=(byte)(xmlLength & 0xFF);
  orderBytes[2]=(byte)(xmlLength >> 8 & 0xFF);
  orderBytes[1]=(byte)(xmlLength >> 16 & 0xFF);
  orderBytes[0]=(byte)(xmlLength >> 24 & 0xFF);
  byte[] appidBytes=StringUtil.getBytesUtf8(appId);
  int byteLength=randomBytes.length + xmlLength + orderBytes.length+ appidBytes.length;
  byte[] padBytes=PKCS7Encoder.encode(byteLength);
  byte[] unencrypted=new byte[byteLength + padBytes.length];
  byteLength=0;
  System.arraycopy(randomBytes,0,unencrypted,byteLength,randomBytes.length);
  byteLength+=randomBytes.length;
  System.arraycopy(orderBytes,0,unencrypted,byteLength,orderBytes.length);
  byteLength+=orderBytes.length;
  System.arraycopy(xmlBytes,0,unencrypted,byteLength,xmlBytes.length);
  byteLength+=xmlBytes.length;
  System.arraycopy(appidBytes,0,unencrypted,byteLength,appidBytes.length);
  byteLength+=appidBytes.length;
  System.arraycopy(padBytes,0,unencrypted,byteLength,padBytes.length);
  try {
    byte[] aesKey=Base64.decodeBase64(encodingAesKey + ""String_Node_Str"");
    Cipher cipher=Cipher.getInstance(""String_Node_Str"");
    SecretKeySpec keySpec=new SecretKeySpec(aesKey,Consts.AES);
    IvParameterSpec iv=new IvParameterSpec(aesKey,0,16);
    cipher.init(Cipher.ENCRYPT_MODE,keySpec,iv);
    byte[] encrypted=cipher.doFinal(unencrypted);
    return Base64.encodeBase64String(encrypted);
  }
 catch (  Exception e) {
    throw new WeixinException(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
}",0.998968008255934
63066,"/** 
 * 验证微信签名
 * @param signature 微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数
 * @return 开发者通过检验signature对请求进行相关校验。若确认此次GET请求来自微信服务器请原样返回echostr参数内容，则接入生效 成为开发者成功，否则接入失败
 * @see <a
	 *      href=""http://mp.weixin.qq.com/wiki/0/61c3a8b9d50ac74f18bdf2e54ddfc4e0.html"">接入指南</a>
 */
public static String signature(String... para){
  Arrays.sort(para);
  StringBuilder sb=new StringBuilder();
  for (  String str : para) {
    sb.append(str);
  }
  return DigestUtil.SHA1(sb.toString());
}","/** 
 * 验证微信签名
 * @param signature 微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数
 * @return 开发者通过检验signature对请求进行相关校验。若确认此次GET请求来自微信服务器请原样返回echostr参数内容，则接入生效 成为开发者成功，否则接入失败
 * @see <a
	 *      href=""http://mp.weixin.qq.com/wiki/0/61c3a8b9d50ac74f18bdf2e54ddfc4e0.html"">接入指南</a>
 */
public static String signature(String... para){
  Arrays.sort(para);
  StringBuffer sb=new StringBuffer();
  for (  String str : para) {
    sb.append(str);
  }
  return DigestUtil.SHA1(sb.toString());
}",0.9899396378269618
63067,"/** 
 * 获取企业号应用
 * @param authCorpid 授权方corpid
 * @param agentid 授权方应用id
 * @return 应用信息
 * @see com.foxinmy.weixin4j.qy.model.AgentInfo
 * @see <a
	 *      href=""http://qydev.weixin.qq.com/wiki/index.php?title=%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E#.E8.8E.B7.E5.8F.96.E4.BC.81.E4.B8.9A.E5.8F.B7.E5.BA.94.E7.94.A8"">获取企业号应用</a>
 * @throws WeixinException
 */
public AgentInfo getAgent(String authCorpid,int agentid) throws WeixinException {
  String suite_get_agent_uri=getRequestUri(""String_Node_Str"");
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",suiteId);
  obj.put(""String_Node_Str"",authCorpid);
  obj.put(""String_Node_Str"",suitePerCodeHolder.getPermanentCode(suiteId));
  obj.put(""String_Node_Str"",agentid);
  WeixinResponse response=weixinClient.post(String.format(suite_get_agent_uri,suiteTokenHolder.getAccessToken(),obj.toJSONString()));
  JSONObject jsonObj=response.getAsJson();
  AgentInfo agent=JSON.toJavaObject(jsonObj,AgentInfo.class);
  agent.setAllowUsers(JSON.parseArray(jsonObj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),User.class));
  agent.setAllowPartys(JSON.parseArray(jsonObj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),Integer.class));
  agent.setAllowTags(JSON.parseArray(jsonObj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),Integer.class));
  return agent;
}","/** 
 * 获取企业号应用
 * @param authCorpid 授权方corpid
 * @param agentid 授权方应用id
 * @return 应用信息
 * @see com.foxinmy.weixin4j.qy.model.AgentInfo
 * @see <a
	 *      href=""http://qydev.weixin.qq.com/wiki/index.php?title=%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E#.E8.8E.B7.E5.8F.96.E4.BC.81.E4.B8.9A.E5.8F.B7.E5.BA.94.E7.94.A8"">获取企业号应用</a>
 * @throws WeixinException
 */
public AgentInfo getAgent(String authCorpid,int agentid) throws WeixinException {
  String suite_get_agent_uri=getRequestUri(""String_Node_Str"");
  JSONObject obj=new JSONObject();
  obj.put(""String_Node_Str"",suiteId);
  obj.put(""String_Node_Str"",authCorpid);
  obj.put(""String_Node_Str"",suitePerCodeHolder.getPermanentCode(suiteId));
  obj.put(""String_Node_Str"",agentid);
  WeixinResponse response=weixinClient.post(String.format(suite_get_agent_uri,suiteTokenHolder.getAccessToken()),obj.toJSONString());
  JSONObject jsonObj=response.getAsJson();
  AgentInfo agent=JSON.toJavaObject(jsonObj,AgentInfo.class);
  agent.setAllowUsers(JSON.parseArray(jsonObj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),User.class));
  agent.setAllowPartys(JSON.parseArray(jsonObj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),Integer.class));
  agent.setAllowTags(JSON.parseArray(jsonObj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),Integer.class));
  return agent;
}",0.9992862241256244
63068,"/** 
 * 未匹配到handler时触发
 * @param context 上下文环境
 * @param request 微信请求
 * @param message 微信消息
 */
protected void noHandlerFound(ChannelHandlerContext context,WeixinRequest request,Object message){
  context.writeAndFlush(HttpUtil.createHttpResponse(null,NOT_FOUND,null)).addListener(ChannelFutureListener.CLOSE);
}","/** 
 * 未匹配到handler时触发
 * @param context 上下文环境
 * @param request 微信请求
 * @param message 微信消息
 */
protected void noHandlerFound(ChannelHandlerContext context,WeixinRequest request,Object message){
  if (isDebug) {
    context.writeAndFlush(new TextResponse(request.getOriginalContent())).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    context.writeAndFlush(HttpUtil.createHttpResponse(null,NOT_FOUND,null)).addListener(ChannelFutureListener.CLOSE);
  }
}",0.8056628056628057
63069,"/** 
 * 对消息进行一系列的处理,包括 拦截、匹配、分发等动作
 * @param context 上下文环境
 * @param request 微信请求
 * @param messageKey 消息的key
 * @throws WeixinException
 */
public void doDispatch(final ChannelHandlerContext context,final WeixinRequest request,final CruxMessageHandler cruxMessage) throws WeixinException {
  MessageKey messageKey=defineMessageKey(cruxMessage.getMsgType(),cruxMessage.getEventType(),cruxMessage.getAccountType());
  Class<?> targetClass=messageMatcher.match(messageKey);
  Object message=request.getOriginalContent();
  if (targetClass != null) {
    message=messageRead(request.getOriginalContent(),targetClass);
  }
  logger.info(""String_Node_Str"",messageKey,targetClass);
  MessageHandlerExecutor handlerExecutor=getHandlerExecutor(context,request,messageKey,message,cruxMessage.getNodeNames());
  if (handlerExecutor == null || handlerExecutor.getMessageHandler() == null) {
    noHandlerFound(context,request,message);
    return;
  }
  if (!handlerExecutor.applyPreHandle(request,message)) {
    return;
  }
  WeixinException dispatchException=null;
  try {
    WeixinResponse response=handlerExecutor.getMessageHandler().doHandle(request,message,cruxMessage.getNodeNames());
    handlerExecutor.applyPostHandle(request,response,message);
    context.write(response);
  }
 catch (  WeixinException e) {
    dispatchException=e;
  }
  handlerExecutor.triggerAfterCompletion(request,message,dispatchException);
}","/** 
 * 对消息进行一系列的处理,包括 拦截、匹配、分发等动作
 * @param context 上下文环境
 * @param request 微信请求
 * @param cruxMessage 微信的关键消息
 * @throws WeixinException
 */
public void doDispatch(final ChannelHandlerContext context,final WeixinRequest request,final CruxMessageHandler cruxMessage) throws WeixinException {
  MessageKey messageKey=defineMessageKey(cruxMessage.getMsgType(),cruxMessage.getEventType(),cruxMessage.getAccountType());
  Class<?> targetClass=messageMatcher.match(messageKey);
  Object message=request.getOriginalContent();
  if (targetClass != null) {
    message=messageRead(request.getOriginalContent(),targetClass);
  }
  logger.info(""String_Node_Str"",messageKey,targetClass);
  MessageHandlerExecutor handlerExecutor=getHandlerExecutor(context,request,messageKey,message,cruxMessage.getNodeNames());
  if (handlerExecutor == null || handlerExecutor.getMessageHandler() == null) {
    noHandlerFound(context,request,message);
    return;
  }
  if (!handlerExecutor.applyPreHandle(request,message)) {
    return;
  }
  WeixinException dispatchException=null;
  try {
    WeixinResponse response=handlerExecutor.getMessageHandler().doHandle(request,message,cruxMessage.getNodeNames());
    handlerExecutor.applyPostHandle(request,response,message);
    context.write(response);
  }
 catch (  WeixinException e) {
    dispatchException=e;
  }
  handlerExecutor.triggerAfterCompletion(request,message,dispatchException);
}",0.988716502115656
63070,"/** 
 * 获取所有的interceptor
 * @return interceptor集合
 * @throws WeixinException
 * @see com.foxinmy.weixin4j.interceptor.WeixinMessageInterceptor
 */
public WeixinMessageInterceptor[] getMessageInterceptors() throws WeixinException {
  if (this.messageInterceptors == null) {
    if (this.messageInterceptorPackages != null) {
      List<Class<?>> messageInterceptorClass=new LinkedList<Class<?>>();
      for (      String packageName : messageInterceptorPackages) {
        messageInterceptorClass.addAll(ClassUtil.getClasses(packageName));
      }
      if (beanFactory != null) {
        for (        Class<?> clazz : messageInterceptorClass) {
          messageInterceptorList.add((WeixinMessageInterceptor)beanFactory.getBean(clazz));
        }
      }
 else {
        for (        Class<?> clazz : messageInterceptorClass) {
          if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) {
            continue;
          }
          try {
            Constructor<?> ctor=clazz.getDeclaredConstructor();
            ReflectionUtil.makeAccessible(ctor);
            messageInterceptorList.add((WeixinMessageInterceptor)ctor.newInstance((Object[])null));
          }
 catch (          Exception ex) {
            throw new WeixinException(clazz.getName() + ""String_Node_Str"",ex);
          }
        }
      }
    }
    if (this.messageInterceptorList != null && !this.messageInterceptorList.isEmpty()) {
      this.messageInterceptors=this.messageInterceptorList.toArray(new WeixinMessageInterceptor[this.messageInterceptorList.size()]);
    }
  }
  return this.messageInterceptors;
}","/** 
 * 获取所有的interceptor
 * @return interceptor集合
 * @throws WeixinException
 * @see com.foxinmy.weixin4j.interceptor.WeixinMessageInterceptor
 */
public WeixinMessageInterceptor[] getMessageInterceptors() throws WeixinException {
  if (this.messageInterceptors == null) {
    if (this.messageInterceptorPackages != null) {
      List<Class<?>> messageInterceptorClass=new LinkedList<Class<?>>();
      for (      String packageName : messageInterceptorPackages) {
        messageInterceptorClass.addAll(ClassUtil.getClasses(packageName));
      }
      if (beanFactory != null) {
        for (        Class<?> clazz : messageInterceptorClass) {
          messageInterceptorList.add(0,(WeixinMessageInterceptor)beanFactory.getBean(clazz));
        }
      }
 else {
        for (        Class<?> clazz : messageInterceptorClass) {
          if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) {
            continue;
          }
          try {
            Constructor<?> ctor=clazz.getDeclaredConstructor();
            ReflectionUtil.makeAccessible(ctor);
            messageInterceptorList.add(0,(WeixinMessageInterceptor)ctor.newInstance((Object[])null));
          }
 catch (          Exception ex) {
            throw new WeixinException(clazz.getName() + ""String_Node_Str"",ex);
          }
        }
      }
    }
    if (this.messageInterceptorList != null && !this.messageInterceptorList.isEmpty()) {
      this.messageInterceptors=this.messageInterceptorList.toArray(new WeixinMessageInterceptor[this.messageInterceptorList.size()]);
    }
  }
  return this.messageInterceptors;
}",0.9987546699875468
63071,"/** 
 * 获取所有的handler
 * @return handler集合
 * @see com.foxinmy.weixin4j.handler.WeixinMessageHandler
 * @throws WeixinException
 */
public WeixinMessageHandler[] getMessageHandlers() throws WeixinException {
  if (this.messageHandlers == null) {
    if (messageHandlerPackages != null) {
      List<Class<?>> messageHandlerClass=new LinkedList<Class<?>>();
      for (      String packageName : messageHandlerPackages) {
        messageHandlerClass.addAll(ClassUtil.getClasses(packageName));
      }
      if (beanFactory != null) {
        for (        Class<?> clazz : messageHandlerClass) {
          messageHandlerList.add((WeixinMessageHandler)beanFactory.getBean(clazz));
        }
      }
 else {
        for (        Class<?> clazz : messageHandlerClass) {
          if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) {
            continue;
          }
          try {
            Constructor<?> ctor=clazz.getDeclaredConstructor();
            ReflectionUtil.makeAccessible(ctor);
            messageHandlerList.add((WeixinMessageHandler)ctor.newInstance((Object[])null));
          }
 catch (          Exception ex) {
            throw new WeixinException(clazz.getName() + ""String_Node_Str"",ex);
          }
        }
      }
    }
    if (messageHandlerList != null && !this.messageHandlerList.isEmpty()) {
      this.messageHandlers=this.messageHandlerList.toArray(new WeixinMessageHandler[this.messageHandlerList.size()]);
    }
  }
  return this.messageHandlers;
}","/** 
 * 获取所有的handler
 * @return handler集合
 * @see com.foxinmy.weixin4j.handler.WeixinMessageHandler
 * @throws WeixinException
 */
public WeixinMessageHandler[] getMessageHandlers() throws WeixinException {
  if (this.messageHandlers == null) {
    if (messageHandlerPackages != null) {
      List<Class<?>> messageHandlerClass=new LinkedList<Class<?>>();
      for (      String packageName : messageHandlerPackages) {
        messageHandlerClass.addAll(ClassUtil.getClasses(packageName));
      }
      if (beanFactory != null) {
        for (        Class<?> clazz : messageHandlerClass) {
          messageHandlerList.add(0,(WeixinMessageHandler)beanFactory.getBean(clazz));
        }
      }
 else {
        for (        Class<?> clazz : messageHandlerClass) {
          if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) {
            continue;
          }
          try {
            Constructor<?> ctor=clazz.getDeclaredConstructor();
            ReflectionUtil.makeAccessible(ctor);
            messageHandlerList.add(0,(WeixinMessageHandler)ctor.newInstance((Object[])null));
          }
 catch (          Exception ex) {
            throw new WeixinException(clazz.getName() + ""String_Node_Str"",ex);
          }
        }
      }
    }
    if (messageHandlerList != null && !this.messageHandlerList.isEmpty()) {
      this.messageHandlers=this.messageHandlerList.toArray(new WeixinMessageHandler[this.messageHandlerList.size()]);
    }
  }
  return this.messageHandlers;
}",0.9986666666666668
63072,"@Override public String toString(){
  return ""String_Node_Str"" + encryptContent + ""String_Node_Str""+ encryptType+ ""String_Node_Str""+ echoStr+ ""String_Node_Str""+ timeStamp+ ""String_Node_Str""+ nonce+ ""String_Node_Str""+ signature+ ""String_Node_Str""+ originalContent+ ""String_Node_Str""+ method+ ""String_Node_Str""+ aesToken+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + encryptContent + ""String_Node_Str""+ encryptType+ ""String_Node_Str""+ echoStr+ ""String_Node_Str""+ timeStamp+ ""String_Node_Str""+ nonce+ ""String_Node_Str""+ signature+ ""String_Node_Str""+ originalContent+ ""String_Node_Str""+ method+ ""String_Node_Str""+ aesToken+ ""String_Node_Str""+ parameters+ ""String_Node_Str"";
}",0.9563994374120957
63073,"public WeixinRequest(String method,EncryptType encryptType,String echoStr,String timeStamp,String nonce,String signature,String msgSignature,String originalContent,String encryptContent,AesToken aesToken){
  this.method=method;
  this.encryptType=encryptType;
  this.echoStr=echoStr;
  this.timeStamp=timeStamp;
  this.nonce=nonce;
  this.signature=signature;
  this.msgSignature=msgSignature;
  this.originalContent=originalContent;
  this.encryptContent=encryptContent;
  this.aesToken=aesToken;
}","public WeixinRequest(String method,EncryptType encryptType,String echoStr,String timeStamp,String nonce,String signature,String msgSignature,String originalContent,String encryptContent,AesToken aesToken,Map<String,List<String>> parameters){
  this.method=method;
  this.encryptType=encryptType;
  this.echoStr=echoStr;
  this.timeStamp=timeStamp;
  this.nonce=nonce;
  this.signature=signature;
  this.msgSignature=msgSignature;
  this.originalContent=originalContent;
  this.encryptContent=encryptContent;
  this.aesToken=aesToken;
  this.parameters=parameters;
}",0.93796992481203
63074,"@Override protected void decode(ChannelHandlerContext ctx,FullHttpRequest req,List<Object> out) throws WeixinException {
  String content=req.content().toString(Consts.UTF_8);
  QueryStringDecoder queryDecoder=new QueryStringDecoder(req.getUri(),true);
  String methodName=req.getMethod().name();
  logger.info(""String_Node_Str"",req.getUri(),methodName);
  Map<String,List<String>> parameters=queryDecoder.parameters();
  EncryptType encryptType=parameters.containsKey(""String_Node_Str"") ? EncryptType.valueOf(parameters.get(""String_Node_Str"").get(0).toUpperCase()) : EncryptType.RAW;
  String echoStr=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String timeStamp=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String nonce=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String signature=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String msgSignature=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String weixinId=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : null;
  AesToken aesToken=aesTokenMap.get(weixinId);
  String originalContent=content;
  String encryptContent=null;
  if (!content.isEmpty() && encryptType == EncryptType.AES) {
    if (StringUtil.isBlank(aesToken.getAesKey()) || StringUtil.isBlank(aesToken.getWeixinId())) {
      throw new WeixinException(""String_Node_Str"");
    }
    encryptContent=EncryptMessageHandler.parser(content);
    originalContent=MessageUtil.aesDecrypt(aesToken.getWeixinId(),aesToken.getAesKey(),encryptContent);
  }
  out.add(new WeixinRequest(methodName,encryptType,echoStr,timeStamp,nonce,signature,msgSignature,originalContent,encryptContent,aesToken));
}","@Override protected void decode(ChannelHandlerContext ctx,FullHttpRequest req,List<Object> out) throws WeixinException {
  String content=req.content().toString(Consts.UTF_8);
  QueryStringDecoder queryDecoder=new QueryStringDecoder(req.getUri(),true);
  String methodName=req.getMethod().name();
  logger.info(""String_Node_Str"",req.getUri(),methodName);
  Map<String,List<String>> parameters=queryDecoder.parameters();
  EncryptType encryptType=parameters.containsKey(""String_Node_Str"") ? EncryptType.valueOf(parameters.get(""String_Node_Str"").get(0).toUpperCase()) : EncryptType.RAW;
  String echoStr=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String timeStamp=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String nonce=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String signature=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String msgSignature=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : ""String_Node_Str"";
  String weixinId=parameters.containsKey(""String_Node_Str"") ? parameters.get(""String_Node_Str"").get(0) : null;
  AesToken aesToken=aesTokenMap.get(weixinId);
  if (aesToken == null) {
    AesToken _aesToken=aesTokenMap.get(null);
    aesToken=new AesToken(weixinId,_aesToken.getToken(),_aesToken.getAesKey());
  }
  String originalContent=content;
  String encryptContent=null;
  if (!content.isEmpty() && encryptType == EncryptType.AES) {
    if (StringUtil.isBlank(aesToken.getAesKey()) || StringUtil.isBlank(aesToken.getWeixinId())) {
      throw new WeixinException(""String_Node_Str"");
    }
    encryptContent=EncryptMessageHandler.parser(content);
    originalContent=MessageUtil.aesDecrypt(aesToken.getWeixinId(),aesToken.getAesKey(),encryptContent);
  }
  out.add(new WeixinRequest(methodName,encryptType,echoStr,timeStamp,nonce,signature,msgSignature,originalContent,encryptContent,aesToken,parameters));
}",0.9590385087073828
63075,"@Override protected void encode(ChannelHandlerContext ctx,WeixinResponse response,List<Object> out) throws WeixinException {
  MessageTransfer messageTransfer=ctx.channel().attr(Consts.MESSAGE_TRANSFER_KEY).get();
  AesToken aesToken=messageTransfer.getAesToken();
  EncryptType encryptType=messageTransfer.getEncryptType();
  String weixinId=aesToken.getWeixinId();
  if (StringUtil.isBlank(weixinId)) {
    weixinId=messageTransfer.getToUserName();
  }
  StringBuilder content=new StringBuilder();
  if (response instanceof BlankResponse) {
    content.append(response.toContent());
  }
 else {
    content.append(""String_Node_Str"");
    content.append(String.format(""String_Node_Str"",messageTransfer.getFromUserName()));
    content.append(String.format(""String_Node_Str"",weixinId));
    content.append(String.format(""String_Node_Str"",System.currentTimeMillis() / 1000l));
    content.append(String.format(""String_Node_Str"",response.getMsgType()));
    content.append(response.toContent());
    content.append(""String_Node_Str"");
    if (encryptType == EncryptType.AES) {
      String nonce=RandomUtil.generateString(32);
      String timestamp=String.valueOf(System.currentTimeMillis() / 1000l);
      String encrtypt=MessageUtil.aesEncrypt(weixinId,aesToken.getAesKey(),content.toString());
      String msgSignature=MessageUtil.signature(aesToken.getToken(),nonce,timestamp,encrtypt);
      content.delete(0,content.length());
      content.append(""String_Node_Str"");
      content.append(String.format(""String_Node_Str"",nonce));
      content.append(String.format(""String_Node_Str"",timestamp));
      content.append(String.format(""String_Node_Str"",msgSignature));
      content.append(String.format(""String_Node_Str"",encrtypt));
      content.append(""String_Node_Str"");
    }
  }
  ctx.writeAndFlush(HttpUtil.createHttpResponse(content.toString(),OK,Consts.CONTENTTYPE$APPLICATION_XML));
  logger.info(""String_Node_Str"",encryptType,content);
}","@Override protected void encode(ChannelHandlerContext ctx,WeixinResponse response,List<Object> out) throws WeixinException {
  MessageTransfer messageTransfer=ctx.channel().attr(Consts.MESSAGE_TRANSFER_KEY).get();
  AesToken aesToken=messageTransfer.getAesToken();
  EncryptType encryptType=messageTransfer.getEncryptType();
  StringBuilder content=new StringBuilder();
  if (response instanceof BlankResponse) {
    content.append(response.toContent());
  }
 else {
    content.append(""String_Node_Str"");
    content.append(String.format(""String_Node_Str"",messageTransfer.getFromUserName()));
    content.append(String.format(""String_Node_Str"",StringUtil.isBlank(aesToken.getWeixinId()) ? messageTransfer.getToUserName() : aesToken.getWeixinId()));
    content.append(String.format(""String_Node_Str"",System.currentTimeMillis() / 1000l));
    content.append(String.format(""String_Node_Str"",response.getMsgType()));
    content.append(response.toContent());
    content.append(""String_Node_Str"");
    if (encryptType == EncryptType.AES) {
      String nonce=RandomUtil.generateString(32);
      String timestamp=String.valueOf(System.currentTimeMillis() / 1000l);
      String encrtypt=MessageUtil.aesEncrypt(aesToken.getWeixinId(),aesToken.getAesKey(),content.toString());
      String msgSignature=MessageUtil.signature(aesToken.getToken(),nonce,timestamp,encrtypt);
      content.delete(0,content.length());
      content.append(""String_Node_Str"");
      content.append(String.format(""String_Node_Str"",nonce));
      content.append(String.format(""String_Node_Str"",timestamp));
      content.append(String.format(""String_Node_Str"",msgSignature));
      content.append(String.format(""String_Node_Str"",encrtypt));
      content.append(""String_Node_Str"");
    }
  }
  ctx.writeAndFlush(HttpUtil.createHttpResponse(content.toString(),OK,Consts.CONTENTTYPE$APPLICATION_XML));
  logger.info(""String_Node_Str"",encryptType,content);
}",0.9378385349497034
63076,"public void setEntity(HttpEntity httpEntity){
  this.entity=httpEntity;
}","@Override public void setEntity(HttpEntity entity){
  this.entity=entity;
}",0.8513513513513513
63077,"private void checkXml(Response response) throws WeixinException {
  response.setXmlResult(true);
  XmlResult xmlResult=null;
  try {
    xmlResult=response.getAsXmlResult();
  }
 catch (  CannotResolveClassException ex) {
    String newXml=response.getAsString().replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
    response.setText(newXml);
    xmlResult=response.getAsXmlResult();
  }
  if (xmlResult.getReturnCode().equals(""String_Node_Str"")) {
    return;
  }
  if (!xmlResult.getReturnCode().equalsIgnoreCase(com.foxinmy.weixin4j.model.Consts.SUCCESS)) {
    throw new WeixinException(xmlResult.getReturnCode(),xmlResult.getReturnMsg());
  }
  if (!xmlResult.getResultCode().equalsIgnoreCase(com.foxinmy.weixin4j.model.Consts.SUCCESS)) {
    throw new WeixinException(xmlResult.getErrCode(),xmlResult.getErrCodeDes());
  }
}","private void checkXml(Response response) throws WeixinException {
  XmlResult xmlResult=null;
  try {
    xmlResult=response.getAsXmlResult();
  }
 catch (  CannotResolveClassException ex) {
    String newXml=response.getAsString().replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
    response.setText(newXml);
    xmlResult=response.getAsXmlResult();
  }
  response.setXmlResult(true);
  if (xmlResult.getReturnCode().equals(""String_Node_Str"")) {
    return;
  }
  if (!xmlResult.getReturnCode().equalsIgnoreCase(com.foxinmy.weixin4j.model.Consts.SUCCESS)) {
    throw new WeixinException(xmlResult.getReturnCode(),xmlResult.getReturnMsg());
  }
  if (!xmlResult.getResultCode().equalsIgnoreCase(com.foxinmy.weixin4j.model.Consts.SUCCESS)) {
    throw new WeixinException(xmlResult.getErrCode(),xmlResult.getErrCodeDes());
  }
}",0.971322849213691
63078,"private void checkJson(Response response) throws WeixinException {
  response.setJsonResult(true);
  JsonResult jsonResult=response.getAsJsonResult();
  if (jsonResult.getCode() != 0) {
    if (StringUtils.isBlank(jsonResult.getDesc())) {
      jsonResult=response.getTextError(jsonResult.getCode());
    }
    throw new WeixinException(Integer.toString(jsonResult.getCode()),jsonResult.getDesc());
  }
}","private void checkJson(Response response) throws WeixinException {
  JsonResult jsonResult=response.getAsJsonResult();
  response.setJsonResult(true);
  if (jsonResult.getCode() != 0) {
    if (StringUtils.isBlank(jsonResult.getDesc())) {
      jsonResult=response.getTextError(jsonResult.getCode());
    }
    throw new WeixinException(Integer.toString(jsonResult.getCode()),jsonResult.getDesc());
  }
}",0.8663366336633663
63079,"/** 
 * 创建预支付对象
 * @param payPackage 包含订单信息的对象
 * @see com.foxinmy.weixin4j.mp.payment.v3.PayPackageV3
 * @see com.foxinmy.weixin4j.mp.payment.v3.PrePay
 * @return 预支付对象
 */
public static PrePay createPrePay(PayPackageV3 payPackage){
  PrePay prePay=null;
  String payJsRequestXml=XStream.to(payPackage).replaceAll(""String_Node_Str"",""String_Node_Str"");
  HttpRequest request=new HttpRequest();
  try {
    Response response=request.post(Consts.UNIFIEDORDER,payJsRequestXml);
    prePay=response.getAsObject(new TypeReference<PrePay>(){
    }
);
  }
 catch (  WeixinException e) {
    prePay=new PrePay(e.getErrorCode(),e.getErrorMsg());
  }
  return prePay;
}","/** 
 * 创建预支付对象</br> <font color=""red"">此方法并不包含签名,需要自己传入一个完整并且合法的PayPackage</font>
 * @param payPackage 包含订单信息的对象
 * @see com.foxinmy.weixin4j.mp.payment.v3.PayPackageV3
 * @see com.foxinmy.weixin4j.mp.payment.v3.PrePay
 * @return 预支付对象
 */
public static PrePay createPrePay(PayPackageV3 payPackage) throws PayException {
  if (StringUtils.isBlank(payPackage.getSign())) {
  }
  String payJsRequestXml=XStream.to(payPackage).replaceAll(""String_Node_Str"",""String_Node_Str"");
  HttpRequest request=new HttpRequest();
  Response response=null;
  try {
    response=request.post(Consts.UNIFIEDORDER,payJsRequestXml);
    return response.getAsObject(new TypeReference<PrePay>(){
    }
);
  }
 catch (  WeixinException e) {
    throw new PayException(e.getErrorCode(),e.getErrorMsg());
  }
}",0.8121968121968122
63080,"/** 
 * V3.x版本native回调<br> &ltxml&gt</br> &ltopenid&gt&lt![CDATA[111222]]&gt&lt/openid&gt</br> &ltappid&gt&lt![CDATA[wwwwb4f85f3a797777]]&gt&lt/appid&gt</br> &ltmch_id&gt&lt![CDATA[1100022]]&gt&lt/mch_id&gt</br> &ltis_subscribe&gt1&lt/is_subscribe&gt</br> &ltproduct_id&gt[CDATA[000000]]&lt/product_id&gt</br> &ltnonce_str&gt&lt![CDATA[jALldRTHAFd5Tgs5]]&gt&lt/nonce_str&gt</br> &ltsign>&lt![CDATA[bafe07f060f22dcda0bfdb4b5ff756f973aecffa]]&gt&lt/sign& gt</br> &lt/xml&gt</br>
 * @return
 * @throws PayException
 */
public String nativeNotifyV3(InputStream inputStream) throws PayException {
  NativePayNotifyV3 payNotify=XStream.get(inputStream,NativePayNotifyV3.class);
  String sign=payNotify.getSign();
  payNotify.setSign(null);
  WeixinMpAccount weixinAccount=ConfigUtil.getWeixinMpAccount();
  String valid_sign=PayUtil.paysignMd5(payNotify,weixinAccount.getPaySignKey());
  log.info(""String_Node_Str"",sign,valid_sign);
  PayPackageV3 payPackage=new PayPackageV3(weixinAccount,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1d,""String_Node_Str"",TradeType.NATIVE);
  payPackage.setProduct_id(payNotify.getProductId());
  if (!sign.equals(valid_sign)) {
    NativePayResponseV3 payReponse=new NativePayResponseV3(payPackage,""String_Node_Str"",null);
    payReponse.setSign(PayUtil.paysignMd5(payReponse,weixinAccount.getPaySignKey()));
    return XStream.to(payReponse);
  }
  NativePayResponseV3 payReponse=new NativePayResponseV3(payPackage,null,null);
  payReponse.setSign(PayUtil.paysignMd5(payReponse,weixinAccount.getPaySignKey()));
  return XStream.to(payReponse);
}","/** 
 * V3.x版本native回调<br> &ltxml&gt</br> &ltopenid&gt&lt![CDATA[111222]]&gt&lt/openid&gt</br> &ltappid&gt&lt![CDATA[wwwwb4f85f3a797777]]&gt&lt/appid&gt</br> &ltmch_id&gt&lt![CDATA[1100022]]&gt&lt/mch_id&gt</br> &ltis_subscribe&gt1&lt/is_subscribe&gt</br> &ltproduct_id&gt[CDATA[000000]]&lt/product_id&gt</br> &ltnonce_str&gt&lt![CDATA[jALldRTHAFd5Tgs5]]&gt&lt/nonce_str&gt</br> &ltsign>&lt![CDATA[bafe07f060f22dcda0bfdb4b5ff756f973aecffa]]&gt &lt/sign&gt</br> &lt/xml&gt</br>
 * @return
 * @throws PayException
 */
public String nativeNotifyV3(InputStream inputStream) throws PayException {
  NativePayNotifyV3 payNotify=XStream.get(inputStream,NativePayNotifyV3.class);
  String sign=payNotify.getSign();
  payNotify.setSign(null);
  WeixinMpAccount weixinAccount=ConfigUtil.getWeixinMpAccount();
  String valid_sign=PayUtil.paysignMd5(payNotify,weixinAccount.getPaySignKey());
  log.info(""String_Node_Str"",sign,valid_sign);
  PayPackageV3 payPackage=new PayPackageV3(weixinAccount,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1d,""String_Node_Str"",TradeType.NATIVE);
  payPackage.setProduct_id(payNotify.getProductId());
  if (!sign.equals(valid_sign)) {
    NativePayResponseV3 payReponse=new NativePayResponseV3(payPackage,""String_Node_Str"",null);
    payReponse.setSign(PayUtil.paysignMd5(payReponse,weixinAccount.getPaySignKey()));
    return XStream.to(payReponse);
  }
  NativePayResponseV3 payReponse=new NativePayResponseV3(payPackage,null,null);
  payReponse.setSign(PayUtil.paysignMd5(payReponse,weixinAccount.getPaySignKey()));
  return XStream.to(payReponse);
}",0.9936868686868688
63081,"/** 
 * 退款查询<br/> 退款有一定延时,用零钱支付的退款20分钟内到账,银行卡支付的退款 3 个工作日后重新查询退款状态
 * @param weixinAccount
 * @param idQuery 单号 refund_id、out_refund_no、 out_trade_no 、 transaction_id 四个参数必填一个,优先级为: refund_id>out_refund_no>transaction_id>out_trade_no
 * @return 退款记录
 * @throws WeixinException
 */
public Refund refundQuery(WeixinAccount weixinAccount,IdQuery idQuery) throws WeixinException {
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",weixinAccount.getAppId());
  map.put(""String_Node_Str"",weixinAccount.getMchId());
  map.put(""String_Node_Str"",RandomUtil.generateString(16));
  map.put(""String_Node_Str"",weixinAccount.getDeviceInfo());
  map.put(idQuery.getType().getName(),idQuery.getId());
  String sign=PayUtil.paysignMd5(map,weixinAccount.getPaySignKey());
  map.put(""String_Node_Str"",sign);
  String param=map2xml(map);
  String refundquery_uri=getRequestUri(""String_Node_Str"");
  Response response=request.post(refundquery_uri,param);
  return new RefundConverter().fromXML(response.getAsString());
}","/** 
 * 退款查询<br/> 退款有一定延时,用零钱支付的退款20分钟内到账,银行卡支付的退款 3 个工作日后重新查询退款状态
 * @param weixinAccount 商户信息
 * @param idQuery 单号 refund_id、out_refund_no、 out_trade_no 、 transaction_id 四个参数必填一个,优先级为: refund_id>out_refund_no>transaction_id>out_trade_no
 * @return 退款记录
 * @throws WeixinException
 */
public Refund refundQuery(WeixinAccount weixinAccount,IdQuery idQuery) throws WeixinException {
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",weixinAccount.getAppId());
  map.put(""String_Node_Str"",weixinAccount.getMchId());
  map.put(""String_Node_Str"",RandomUtil.generateString(16));
  map.put(""String_Node_Str"",weixinAccount.getDeviceInfo());
  map.put(idQuery.getType().getName(),idQuery.getId());
  String sign=PayUtil.paysignMd5(map,weixinAccount.getPaySignKey());
  map.put(""String_Node_Str"",sign);
  String param=map2xml(map);
  String refundquery_uri=getRequestUri(""String_Node_Str"");
  Response response=request.post(refundquery_uri,param);
  return new RefundConverter().fromXML(response.getAsString());
}",0.9975833736104398
63082,"private void toggleFromMonth(){
  if (mUnit.isInView(mSelected)) {
    mUnit=new Week(mSelected,mToday,mMinDate,mMaxDate);
    mUnit.select(mSelected);
    mActiveMonth=mSelected;
  }
 else {
    mActiveMonth=mUnit.getFrom();
    mUnit=new Week(mUnit.getTootleTo(),mToday,mMinDate,mMaxDate);
  }
  mState=State.WEEK;
}","private void toggleFromMonth(LocalDate date){
  mUnit=new Week(date,mToday,mMinDate,mMaxDate);
  mState=State.WEEK;
}",0.464367816091954
63083,"@Override public void finish(final boolean expanded){
  mCalendarView.post(new Runnable(){
    @Override public void run(){
      mCalendarView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
      mWeeksView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
      for (      AbstractViewHolder view : mViews) {
        view.onFinish(true);
      }
      if (!expanded) {
        mCalendarView.getManager().toggleView();
        mCalendarView.populateLayout();
      }
    }
  }
);
}","@Override public void finish(final boolean expanded){
  mCalendarView.post(new Runnable(){
    @Override public void run(){
      mCalendarView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
      mWeeksView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
      for (      AbstractViewHolder view : mViews) {
        view.onFinish(true);
      }
      if (!expanded) {
        CalendarManager manager=mCalendarView.getManager();
        if (mFromMonth) {
          manager.toggleView();
        }
 else {
          manager.toggleToWeek(mActiveIndex);
        }
        mCalendarView.populateLayout();
      }
    }
  }
);
}",0.818260120585702
63084,"@Override public void run(){
  mCalendarView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
  mWeeksView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
  for (  AbstractViewHolder view : mViews) {
    view.onFinish(true);
  }
  if (!expanded) {
    mCalendarView.getManager().toggleView();
    mCalendarView.populateLayout();
  }
}","@Override public void run(){
  mCalendarView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
  mWeeksView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
  for (  AbstractViewHolder view : mViews) {
    view.onFinish(true);
  }
  if (!expanded) {
    CalendarManager manager=mCalendarView.getManager();
    if (mFromMonth) {
      manager.toggleView();
    }
 else {
      manager.toggleToWeek(mActiveIndex);
    }
    mCalendarView.populateLayout();
  }
}",0.7763313609467456
63085,"/** 
 * A lower level API, get byte values from ID, return the number of bytes written. Bypassing the cache layer, this could be significantly slower than getIdFromValue(T value).
 * @throws IllegalArgumentException if ID is not found in dictionary
 */
final public int getValueBytesFromId(int id,byte[] returnValue,int offset){
  if (isNullId(id))   return 0;
 else   return getValueBytesFromIdImpl(id,returnValue,offset);
}","/** 
 * A lower level API, get byte values from ID, return the number of bytes written. Bypassing the cache layer, this could be significantly slower than getIdFromValue(T value).
 * @return size of value bytes, 0 if empty string, -1 if null
 * @throws IllegalArgumentException if ID is not found in dictionary
 */
final public int getValueBytesFromId(int id,byte[] returnValue,int offset){
  if (isNullId(id))   return -1;
 else   return getValueBytesFromIdImpl(id,returnValue,offset);
}",0.9288061336254108
63086,"@Test public void testNull(){
  int nullId=dict.getIdFromValue(null);
  assertNull(dict.getValueFromId(nullId));
  int nullId2=dict.getIdFromValueBytes(null,0,0);
  assertEquals(dict.getValueBytesFromId(nullId2,null,0),0);
  assertEquals(nullId,nullId2);
}","@Test public void testNull(){
  int nullId=dict.getIdFromValue(null);
  assertNull(dict.getValueFromId(nullId));
  int nullId2=dict.getIdFromValueBytes(null,0,0);
  assertEquals(dict.getValueBytesFromId(nullId2,null,0),-1);
  assertEquals(nullId,nullId2);
}",0.9941520467836256
63087,"private static void testStringDictionary(ArrayList<String> str,ArrayList<String> notFound){
  TrieDictionaryBuilder<String> b=newDictBuilder(str);
  int baseId=new Random().nextInt(100);
  TrieDictionary<String> dict=b.build(baseId);
  TreeSet<String> set=new TreeSet<String>();
  for (  String s : str) {
    set.add(s);
  }
  dict=testSerialize(dict);
  Iterator<String> it=set.iterator();
  int id=baseId;
  for (; it.hasNext(); id++) {
    String value=it.next();
    assertEquals(id,dict.getIdFromValue(value));
    assertEquals(value,dict.getValueFromId(id));
  }
  if (notFound != null) {
    for (    String s : notFound) {
      try {
        dict.getIdFromValue(s);
        fail(""String_Node_Str"" + s + ""String_Node_Str"");
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
  int nullId=dict.getIdFromValue(null);
  assertNull(dict.getValueFromId(nullId));
  int nullId2=dict.getIdFromValueBytes(null,0,0);
  assertEquals(dict.getValueBytesFromId(nullId2,null,0),0);
  assertEquals(nullId,nullId2);
}","private static void testStringDictionary(ArrayList<String> str,ArrayList<String> notFound){
  TrieDictionaryBuilder<String> b=newDictBuilder(str);
  int baseId=new Random().nextInt(100);
  TrieDictionary<String> dict=b.build(baseId);
  TreeSet<String> set=new TreeSet<String>();
  for (  String s : str) {
    set.add(s);
  }
  dict=testSerialize(dict);
  Iterator<String> it=set.iterator();
  int id=baseId;
  for (; it.hasNext(); id++) {
    String value=it.next();
    assertEquals(id,dict.getIdFromValue(value));
    assertEquals(value,dict.getValueFromId(id));
  }
  if (notFound != null) {
    for (    String s : notFound) {
      try {
        dict.getIdFromValue(s);
        fail(""String_Node_Str"" + s + ""String_Node_Str"");
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
  int nullId=dict.getIdFromValue(null);
  assertNull(dict.getValueFromId(nullId));
  int nullId2=dict.getIdFromValueBytes(null,0,0);
  assertEquals(dict.getValueBytesFromId(nullId2,null,0),-1);
  assertEquals(nullId,nullId2);
}",0.9985429820301116
63088,"@Override public void map(Text key,Text value,Context context) throws IOException, InterruptedException {
  long cuboidID=rowKeySplitter.split(key.getBytes(),key.getBytes().length);
  Cuboid cuboid=Cuboid.findById(cubeDesc,cuboidID);
  SplittedBytes[] splittedByteses=rowKeySplitter.getSplitBuffers();
  int bufOffset=0;
  BytesUtil.writeLong(cuboidID,newKeyBuf,bufOffset,RowConstants.ROWKEY_CUBOIDID_LEN);
  bufOffset+=RowConstants.ROWKEY_CUBOIDID_LEN;
  for (int i=0; i < cuboid.getColumns().size(); ++i) {
    TblColRef col=cuboid.getColumns().get(i);
    if (this.checkNeedMerging(col)) {
      DictionaryManager dictMgr=DictionaryManager.getInstance(config);
      Dictionary<?> sourceDict=dictMgr.getDictionary(sourceCubeSegment.getDictResPath(col));
      Dictionary<?> mergedDict=dictMgr.getDictionary(mergedCubeSegment.getDictResPath(col));
      while (sourceDict.getSizeOfValue() > newKeyBuf.length - bufOffset || mergedDict.getSizeOfValue() > newKeyBuf.length - bufOffset) {
        byte[] oldBuf=newKeyBuf;
        newKeyBuf=new byte[2 * newKeyBuf.length];
        System.arraycopy(oldBuf,0,newKeyBuf,0,oldBuf.length);
      }
      int idInSourceDict=BytesUtil.readUnsigned(splittedByteses[i + 1].value,0,splittedByteses[i + 1].length);
      int size=sourceDict.getValueBytesFromId(idInSourceDict,newKeyBuf,bufOffset);
      int idInMergedDict=mergedDict.getIdFromValueBytes(newKeyBuf,bufOffset,size);
      BytesUtil.writeUnsigned(idInMergedDict,newKeyBuf,bufOffset,mergedDict.getSizeOfId());
      bufOffset+=mergedDict.getSizeOfId();
    }
 else {
      while (splittedByteses[i + 1].length > newKeyBuf.length - bufOffset) {
        byte[] oldBuf=newKeyBuf;
        newKeyBuf=new byte[2 * newKeyBuf.length];
        System.arraycopy(oldBuf,0,newKeyBuf,0,oldBuf.length);
      }
      System.arraycopy(splittedByteses[i + 1].value,0,newKeyBuf,bufOffset,splittedByteses[i + 1].length);
      bufOffset+=splittedByteses[i + 1].length;
    }
  }
  byte[] newKey=Arrays.copyOf(newKeyBuf,bufOffset);
  outputKey.set(newKey,0,newKey.length);
  context.write(outputKey,value);
}","@Override public void map(Text key,Text value,Context context) throws IOException, InterruptedException {
  long cuboidID=rowKeySplitter.split(key.getBytes(),key.getBytes().length);
  Cuboid cuboid=Cuboid.findById(cubeDesc,cuboidID);
  SplittedBytes[] splittedByteses=rowKeySplitter.getSplitBuffers();
  int bufOffset=0;
  BytesUtil.writeLong(cuboidID,newKeyBuf,bufOffset,RowConstants.ROWKEY_CUBOIDID_LEN);
  bufOffset+=RowConstants.ROWKEY_CUBOIDID_LEN;
  for (int i=0; i < cuboid.getColumns().size(); ++i) {
    TblColRef col=cuboid.getColumns().get(i);
    if (this.checkNeedMerging(col)) {
      DictionaryManager dictMgr=DictionaryManager.getInstance(config);
      Dictionary<?> sourceDict=dictMgr.getDictionary(sourceCubeSegment.getDictResPath(col));
      Dictionary<?> mergedDict=dictMgr.getDictionary(mergedCubeSegment.getDictResPath(col));
      while (sourceDict.getSizeOfValue() > newKeyBuf.length - bufOffset || mergedDict.getSizeOfValue() > newKeyBuf.length - bufOffset) {
        byte[] oldBuf=newKeyBuf;
        newKeyBuf=new byte[2 * newKeyBuf.length];
        System.arraycopy(oldBuf,0,newKeyBuf,0,oldBuf.length);
      }
      int idInSourceDict=BytesUtil.readUnsigned(splittedByteses[i + 1].value,0,splittedByteses[i + 1].length);
      int idInMergedDict;
      int size=sourceDict.getValueBytesFromId(idInSourceDict,newKeyBuf,bufOffset);
      if (size < 0) {
        idInMergedDict=mergedDict.nullId();
      }
 else {
        idInMergedDict=mergedDict.getIdFromValueBytes(newKeyBuf,bufOffset,size);
      }
      BytesUtil.writeUnsigned(idInMergedDict,newKeyBuf,bufOffset,mergedDict.getSizeOfId());
      bufOffset+=mergedDict.getSizeOfId();
    }
 else {
      while (splittedByteses[i + 1].length > newKeyBuf.length - bufOffset) {
        byte[] oldBuf=newKeyBuf;
        newKeyBuf=new byte[2 * newKeyBuf.length];
        System.arraycopy(oldBuf,0,newKeyBuf,0,oldBuf.length);
      }
      System.arraycopy(splittedByteses[i + 1].value,0,newKeyBuf,bufOffset,splittedByteses[i + 1].length);
      bufOffset+=splittedByteses[i + 1].length;
    }
  }
  byte[] newKey=Arrays.copyOf(newKeyBuf,bufOffset);
  outputKey.set(newKey,0,newKey.length);
  context.write(outputKey,value);
}",0.9724941724941724
63089,"public void setMeasureValue(String fieldName,Object fieldValue){
  String dataType=info.getDataType(fieldName);
  if (""String_Node_Str"".equals(dataType) && fieldValue instanceof BigDecimal) {
    fieldValue=((BigDecimal)fieldValue).doubleValue();
  }
 else   if (""String_Node_Str"".equals(dataType) && !(fieldValue instanceof Integer)) {
    fieldValue=((Number)fieldValue).intValue();
  }
  setFieldObjectValue(fieldName,fieldValue);
}","public void setMeasureValue(String fieldName,Object fieldValue){
  String dataType=info.getDataType(fieldName);
  if (""String_Node_Str"".equals(dataType) && fieldValue instanceof BigDecimal) {
    fieldValue=((BigDecimal)fieldValue).doubleValue();
  }
 else   if (""String_Node_Str"".equals(dataType) && !(fieldValue instanceof Integer)) {
    fieldValue=((Number)fieldValue).intValue();
  }
 else   if (""String_Node_Str"".equals(dataType) && fieldValue instanceof BigDecimal) {
    fieldValue=((BigDecimal)fieldValue).floatValue();
  }
  setFieldObjectValue(fieldName,fieldValue);
}",0.8579881656804734
63090,"public void init(KylinConfig config,Map<String,TableDesc> tables){
  this.errors.clear();
  this.config=config;
  if (this.modelName == null || this.modelName.length() == 0) {
    this.addError(""String_Node_Str"" + this.getName() + ""String_Node_Str"");
  }
  this.model=MetadataManager.getInstance(config).getDataModelDesc(this.modelName);
  if (this.model == null) {
    this.addError(""String_Node_Str"" + modelName + ""String_Node_Str"");
  }
  for (  DimensionDesc dim : dimensions) {
    dim.init(this,tables);
  }
  sortDimAndMeasure();
  initDimensionColumns(tables);
  initMeasureColumns(tables);
  rowkey.init(this);
  if (hbaseMapping != null) {
    hbaseMapping.init(this);
  }
  initMeasureReferenceToColumnFamily();
  if (null != this.model.getPartitionDesc()) {
    this.model.getPartitionDesc().init(columnMap);
  }
  List<TblColRef> dimCols=listDimensionColumnsExcludingDerived();
  if (rowkey.getRowKeyColumns().length != dimCols.size()) {
    addError(""String_Node_Str"" + rowkey.getRowKeyColumns().length + ""String_Node_Str""+ dimCols.size()+ ""String_Node_Str"");
  }
}","public void init(KylinConfig config,Map<String,TableDesc> tables){
  this.errors.clear();
  this.config=config;
  if (this.modelName == null || this.modelName.length() == 0) {
    this.addError(""String_Node_Str"" + this.getName() + ""String_Node_Str"");
  }
  this.model=MetadataManager.getInstance(config).getDataModelDesc(this.modelName);
  if (this.model == null) {
    this.addError(""String_Node_Str"" + modelName + ""String_Node_Str"");
  }
  for (  DimensionDesc dim : dimensions) {
    dim.init(this,tables);
  }
  sortDimAndMeasure();
  initDimensionColumns(tables);
  initMeasureColumns(tables);
  rowkey.init(this);
  if (hbaseMapping != null) {
    hbaseMapping.init(this);
  }
  initMeasureReferenceToColumnFamily();
  List<TblColRef> dimCols=listDimensionColumnsExcludingDerived();
  if (rowkey.getRowKeyColumns().length != dimCols.size()) {
    addError(""String_Node_Str"" + rowkey.getRowKeyColumns().length + ""String_Node_Str""+ dimCols.size()+ ""String_Node_Str"");
  }
}",0.9503891050583656
63091,"public void init(Map<String,TableDesc> tables){
  initJoinColumns(tables);
}","public void init(Map<String,TableDesc> tables){
  initJoinColumns(tables);
  initPartitionDesc(tables);
}",0.8397790055248618
63092,"public void init(Map<String,Map<String,TblColRef>> columnMap){
  if (StringUtils.isNotEmpty(partitionDateColumn)) {
    partitionDateColumn=partitionDateColumn.toUpperCase();
    String[] columns=StringSplitter.split(partitionDateColumn,""String_Node_Str"");
    if (null != columns && columns.length == 3) {
      String tableName=columns[0].toUpperCase() + ""String_Node_Str"" + columns[1].toUpperCase();
      Map<String,TblColRef> cols=columnMap.get(tableName);
      if (cols != null) {
        partitionDateColumnRef=cols.get(columns[2].toUpperCase());
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + partitionDateColumn + ""String_Node_Str"");
    }
  }
}","public void init(Map<String,TableDesc> tables){
  if (StringUtils.isNotEmpty(partitionDateColumn)) {
    partitionDateColumn=partitionDateColumn.toUpperCase();
    String[] columns=StringSplitter.split(partitionDateColumn,""String_Node_Str"");
    if (null != columns && columns.length == 3) {
      String tableName=columns[0].toUpperCase() + ""String_Node_Str"" + columns[1].toUpperCase();
      TableDesc table=tables.get(tableName);
      ColumnDesc col=table.findColumnByName(columns[2]);
      if (col != null) {
        partitionDateColumnRef=new TblColRef(col);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + partitionDateColumn + ""String_Node_Str"");
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + partitionDateColumn + ""String_Node_Str"");
    }
  }
}",0.7774333539987601
63093,"/** 
 * this method is heavily called at coprocessor side, Make sure as little object creation as possible
 */
public void aggregate(MeasureAggregator[] measureAggrs,byte[] row){
  rawTableRecord.setBytes(row,0,row.length);
  for (int metricIndex=0; metricIndex < metricInfos.length; ++metricIndex) {
    MetricInfo metricInfo=metricInfos[metricIndex];
    MeasureAggregator aggregator=measureAggrs[metricIndex];
    FixedLenMeasureCodec measureSerializer=measureSerializers[metricIndex];
    rawTableRecord.getValueBytes(metricInfo.refIndex,byteBuffer);
    if (metricInfo.type == MetricType.Normal) {
      aggregator.aggregate(measureSerializer.read(byteBuffer.get(),byteBuffer.getOffset()));
    }
 else     if (metricInfo.type == MetricType.DistinctCount) {
      HyperLogLogPlusCounter hllc=hllcs[metricIndex];
      if (hllc == null) {
        hllc=new HyperLogLogPlusCounter(metricInfo.presision);
      }
      hllc.clear();
      hllc.add(byteBuffer.get(),byteBuffer.getOffset(),byteBuffer.getLength());
      aggregator.aggregate(hllc);
    }
  }
  for (int i=0; i < metricInfos.length; ++i) {
    if (metricInfos[i].type == MetricType.Count) {
      measureAggrs[i].aggregate(ONE);
    }
  }
}","/** 
 * this method is heavily called at coprocessor side, Make sure as little object creation as possible
 */
public void aggregate(MeasureAggregator[] measureAggrs,byte[] row){
  rawTableRecord.setBytes(row,0,row.length);
  for (int metricIndex=0; metricIndex < metricInfos.length; ++metricIndex) {
    if (metricInfos[metricIndex].type == MetricType.Count) {
      measureAggrs[metricIndex].aggregate(ONE);
      continue;
    }
    if (metricInfos[metricIndex].type == MetricType.DimensionAsMetric) {
      continue;
    }
    MetricInfo metricInfo=metricInfos[metricIndex];
    MeasureAggregator aggregator=measureAggrs[metricIndex];
    FixedLenMeasureCodec measureSerializer=measureSerializers[metricIndex];
    rawTableRecord.getValueBytes(metricInfo.refIndex,byteBuffer);
    if (metricInfo.type == MetricType.Normal) {
      aggregator.aggregate(measureSerializer.read(byteBuffer.get(),byteBuffer.getOffset()));
    }
 else     if (metricInfo.type == MetricType.DistinctCount) {
      HyperLogLogPlusCounter hllc=hllcs[metricIndex];
      if (hllc == null) {
        hllc=new HyperLogLogPlusCounter(metricInfo.presision);
      }
      hllc.clear();
      hllc.add(byteBuffer.get(),byteBuffer.getOffset(),byteBuffer.getLength());
      aggregator.aggregate(hllc);
    }
  }
}",0.8506024096385543
63094,"public void overrideCoprocessorLocalJar(String path){
  kylinConfig.setProperty(COPROCESSOR_LOCAL_JAR,path);
}","public void overrideCoprocessorLocalJar(String path){
  System.setProperty(COPROCESSOR_LOCAL_JAR,path);
}",0.9302325581395348
63095,"public void overrideKylinJobJarPath(String path){
  kylinConfig.setProperty(KYLIN_JOB_JAR,path);
}","public void overrideKylinJobJarPath(String path){
  System.setProperty(KYLIN_JOB_JAR,path);
}",0.9214659685863874
63096,"@SuppressWarnings(""String_Node_Str"") @Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final String mapReduceJobClass=getMapReduceJobClass();
  String params=getMapReduceParams();
  Preconditions.checkNotNull(mapReduceJobClass);
  Preconditions.checkNotNull(params);
  try {
    Job job;
    final Map<String,String> extra=executableManager.getOutput(getId()).getExtra();
    if (extra.containsKey(ExecutableConstants.MR_JOB_ID)) {
      job=new Cluster(new Configuration()).getJob(JobID.forName(extra.get(ExecutableConstants.MR_JOB_ID)));
      logger.info(""String_Node_Str"" + extra.get(ExecutableConstants.MR_JOB_ID + ""String_Node_Str""));
    }
 else {
      final Constructor<? extends AbstractHadoopJob> constructor=(Constructor<? extends AbstractHadoopJob>)Class.forName(mapReduceJobClass).getConstructor();
      final AbstractHadoopJob hadoopJob=constructor.newInstance();
      hadoopJob.setAsync(true);
      logger.info(""String_Node_Str"");
      logger.info(params);
      String[] args=params.trim().split(""String_Node_Str"");
      try {
        ToolRunner.run(hadoopJob,args);
      }
 catch (      Exception ex) {
        StringBuilder log=new StringBuilder();
        logger.error(""String_Node_Str"" + this.toString(),ex);
        StringWriter stringWriter=new StringWriter();
        ex.printStackTrace(new PrintWriter(stringWriter));
        log.append(stringWriter.toString()).append(""String_Node_Str"");
        log.append(""String_Node_Str"").append(2);
        return new ExecuteResult(ExecuteResult.State.ERROR,log.toString());
      }
      job=hadoopJob.getJob();
    }
    final StringBuilder output=new StringBuilder();
    final HadoopCmdOutput hadoopCmdOutput=new HadoopCmdOutput(job,output);
    final String rmWebHost=job.getConfiguration().get(""String_Node_Str"");
    final String restStatusCheckUrl=rmWebHost + ""String_Node_Str"";
    String mrJobId=hadoopCmdOutput.getMrJobId();
    HadoopStatusChecker statusChecker=new HadoopStatusChecker(restStatusCheckUrl,mrJobId,output);
    JobStepStatusEnum status=JobStepStatusEnum.NEW;
    while (!isDiscarded()) {
      JobStepStatusEnum newStatus=statusChecker.checkStatus();
      if (status == JobStepStatusEnum.WAITING && (newStatus == JobStepStatusEnum.FINISHED || newStatus == JobStepStatusEnum.ERROR || newStatus == JobStepStatusEnum.RUNNING)) {
        final long waitTime=System.currentTimeMillis() - getStartTime();
        setMapReduceWaitTime(waitTime);
      }
      status=newStatus;
      executableManager.addJobInfo(getId(),hadoopCmdOutput.getInfo());
      if (status.isComplete()) {
        hadoopCmdOutput.updateJobCounter();
        final Map<String,String> info=hadoopCmdOutput.getInfo();
        info.put(ExecutableConstants.SOURCE_RECORDS_COUNT,hadoopCmdOutput.getMapInputRecords());
        info.put(ExecutableConstants.SOURCE_RECORDS_SIZE,hadoopCmdOutput.getHdfsBytesRead());
        info.put(ExecutableConstants.HDFS_BYTES_WRITTEN,hadoopCmdOutput.getHdfsBytesWritten());
        executableManager.addJobInfo(getId(),info);
        if (status == JobStepStatusEnum.FINISHED) {
          return new ExecuteResult(ExecuteResult.State.SUCCEED,output.toString());
        }
 else {
          return new ExecuteResult(ExecuteResult.State.FAILED,output.toString());
        }
      }
      Thread.sleep(context.getConfig().getYarnStatusCheckIntervalSeconds() * 1000);
    }
    return new ExecuteResult(ExecuteResult.State.DISCARDED,output.toString());
  }
 catch (  ReflectiveOperationException e) {
    logger.error(""String_Node_Str"" + getParam(KEY_MR_JOB),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"" + this.toString(),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final String mapReduceJobClass=getMapReduceJobClass();
  String params=getMapReduceParams();
  Preconditions.checkNotNull(mapReduceJobClass);
  Preconditions.checkNotNull(params);
  try {
    Job job;
    final Map<String,String> extra=executableManager.getOutput(getId()).getExtra();
    if (extra.containsKey(ExecutableConstants.MR_JOB_ID)) {
      job=new Cluster(new Configuration()).getJob(JobID.forName(extra.get(ExecutableConstants.MR_JOB_ID)));
      logger.info(""String_Node_Str"" + extra.get(ExecutableConstants.MR_JOB_ID + ""String_Node_Str""));
    }
 else {
      final Constructor<? extends AbstractHadoopJob> constructor=(Constructor<? extends AbstractHadoopJob>)Class.forName(mapReduceJobClass).getConstructor();
      final AbstractHadoopJob hadoopJob=constructor.newInstance();
      hadoopJob.setAsync(true);
      logger.info(""String_Node_Str"");
      logger.info(params);
      String[] args=params.trim().split(""String_Node_Str"");
      try {
        ToolRunner.run(hadoopJob,args);
      }
 catch (      Exception ex) {
        StringBuilder log=new StringBuilder();
        logger.error(""String_Node_Str"" + this.toString(),ex);
        StringWriter stringWriter=new StringWriter();
        ex.printStackTrace(new PrintWriter(stringWriter));
        log.append(stringWriter.toString()).append(""String_Node_Str"");
        log.append(""String_Node_Str"").append(2);
        return new ExecuteResult(ExecuteResult.State.ERROR,log.toString());
      }
      job=hadoopJob.getJob();
    }
    final StringBuilder output=new StringBuilder();
    final HadoopCmdOutput hadoopCmdOutput=new HadoopCmdOutput(job,output);
    String rmWebHost=job.getConfiguration().get(""String_Node_Str"");
    if (StringUtils.isEmpty(rmWebHost)) {
      return new ExecuteResult(ExecuteResult.State.ERROR,""String_Node_Str"");
    }
    if (rmWebHost.startsWith(""String_Node_Str"") || rmWebHost.startsWith(""String_Node_Str"")) {
    }
 else {
      rmWebHost=""String_Node_Str"" + rmWebHost;
    }
    logger.info(""String_Node_Str"" + rmWebHost);
    final String restStatusCheckUrl=rmWebHost + ""String_Node_Str"";
    String mrJobId=hadoopCmdOutput.getMrJobId();
    HadoopStatusChecker statusChecker=new HadoopStatusChecker(restStatusCheckUrl,mrJobId,output);
    JobStepStatusEnum status=JobStepStatusEnum.NEW;
    while (!isDiscarded()) {
      JobStepStatusEnum newStatus=statusChecker.checkStatus();
      if (status == JobStepStatusEnum.WAITING && (newStatus == JobStepStatusEnum.FINISHED || newStatus == JobStepStatusEnum.ERROR || newStatus == JobStepStatusEnum.RUNNING)) {
        final long waitTime=System.currentTimeMillis() - getStartTime();
        setMapReduceWaitTime(waitTime);
      }
      status=newStatus;
      executableManager.addJobInfo(getId(),hadoopCmdOutput.getInfo());
      if (status.isComplete()) {
        hadoopCmdOutput.updateJobCounter();
        final Map<String,String> info=hadoopCmdOutput.getInfo();
        info.put(ExecutableConstants.SOURCE_RECORDS_COUNT,hadoopCmdOutput.getMapInputRecords());
        info.put(ExecutableConstants.SOURCE_RECORDS_SIZE,hadoopCmdOutput.getHdfsBytesRead());
        info.put(ExecutableConstants.HDFS_BYTES_WRITTEN,hadoopCmdOutput.getHdfsBytesWritten());
        executableManager.addJobInfo(getId(),info);
        if (status == JobStepStatusEnum.FINISHED) {
          return new ExecuteResult(ExecuteResult.State.SUCCEED,output.toString());
        }
 else {
          return new ExecuteResult(ExecuteResult.State.FAILED,output.toString());
        }
      }
      Thread.sleep(context.getConfig().getYarnStatusCheckIntervalSeconds() * 1000);
    }
    return new ExecuteResult(ExecuteResult.State.DISCARDED,output.toString());
  }
 catch (  ReflectiveOperationException e) {
    logger.error(""String_Node_Str"" + getParam(KEY_MR_JOB),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"" + this.toString(),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.9576587795765878
63097,"public JobStepStatusEnum checkStatus(){
  if (null == mrJobID) {
    this.output.append(""String_Node_Str"");
    return JobStepStatusEnum.WAITING;
  }
  JobStepStatusEnum status=null;
  try {
    final Pair<RMAppState,FinalApplicationStatus> result=new HadoopStatusGetter(yarnUrl,mrJobID).get();
    log.debug(""String_Node_Str"" + mrJobID + ""String_Node_Str""+ result.getLeft()+ ""String_Node_Str""+ result.getRight());
    output.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()) + ""String_Node_Str"" + mrJobID+ ""String_Node_Str""+ result.getLeft()+ ""String_Node_Str""+ result.getRight()+ ""String_Node_Str"");
switch (result.getRight()) {
case SUCCEEDED:
      status=JobStepStatusEnum.FINISHED;
    break;
case FAILED:
  status=JobStepStatusEnum.ERROR;
break;
case KILLED:
status=JobStepStatusEnum.ERROR;
break;
case UNDEFINED:
switch (result.getLeft()) {
case NEW:
case NEW_SAVING:
case SUBMITTED:
case ACCEPTED:
status=JobStepStatusEnum.WAITING;
break;
case RUNNING:
status=JobStepStatusEnum.RUNNING;
break;
case FINAL_SAVING:
case FINISHING:
case FINISHED:
case FAILED:
case KILLING:
case KILLED:
}
break;
}
}
 catch (Exception e) {
output.append(""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str"");
status=JobStepStatusEnum.ERROR;
}
return status;
}","public JobStepStatusEnum checkStatus(){
  if (null == mrJobID) {
    this.output.append(""String_Node_Str"");
    return JobStepStatusEnum.WAITING;
  }
  JobStepStatusEnum status=null;
  try {
    final Pair<RMAppState,FinalApplicationStatus> result=new HadoopStatusGetter(yarnUrl,mrJobID).get();
    logger.debug(""String_Node_Str"" + mrJobID + ""String_Node_Str""+ result.getLeft()+ ""String_Node_Str""+ result.getRight());
    output.append(new SimpleDateFormat(""String_Node_Str"").format(new Date()) + ""String_Node_Str"" + mrJobID+ ""String_Node_Str""+ result.getLeft()+ ""String_Node_Str""+ result.getRight()+ ""String_Node_Str"");
switch (result.getRight()) {
case SUCCEEDED:
      status=JobStepStatusEnum.FINISHED;
    break;
case FAILED:
  status=JobStepStatusEnum.ERROR;
break;
case KILLED:
status=JobStepStatusEnum.ERROR;
break;
case UNDEFINED:
switch (result.getLeft()) {
case NEW:
case NEW_SAVING:
case SUBMITTED:
case ACCEPTED:
status=JobStepStatusEnum.WAITING;
break;
case RUNNING:
status=JobStepStatusEnum.RUNNING;
break;
case FINAL_SAVING:
case FINISHING:
case FINISHED:
case FAILED:
case KILLING:
case KILLED:
}
break;
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e);
output.append(""String_Node_Str"" + e.getLocalizedMessage() + ""String_Node_Str"");
status=JobStepStatusEnum.ERROR;
}
return status;
}",0.9853168469860896
63098,"private String getOptional(String prop,String dft){
  return kylinConfig.getString(prop,dft);
}","private String getOptional(String prop,String dft){
  final String property=System.getProperty(prop);
  return property != null ? property : kylinConfig.getString(prop,dft);
}",0.7037037037037037
63099,"public String getKylinJobJarPath(){
  final String jobJar=getOptional(KYLIN_JOB_JAR);
  if (StringUtils.isNotEmpty(jobJar)) {
    return jobJar;
  }
  String kylinHome=getKylinHome();
  return kylinHome + File.separator + ""String_Node_Str""+ File.separator+ JOB_JAR_NAME.replace(""String_Node_Str"",VERSION);
}","public String getKylinJobJarPath(){
  final String jobJar=getOptional(KYLIN_JOB_JAR);
  if (StringUtils.isNotEmpty(jobJar)) {
    return jobJar;
  }
  return getFileName(getKylinHome(),JOB_JAR_NAME_PATTERN);
}",0.7209302325581395
63100,"public String getCoprocessorLocalJar(){
  final String coprocessorJar=getOptional(COPROCESSOR_LOCAL_JAR);
  if (StringUtils.isNotEmpty(coprocessorJar)) {
    return coprocessorJar;
  }
  String kylinHome=getKylinHome();
  return kylinHome + File.separator + ""String_Node_Str""+ File.separator+ COPROCESSOR_JAR_NAME.replace(""String_Node_Str"",VERSION);
}","public String getCoprocessorLocalJar(){
  final String coprocessorJar=getOptional(COPROCESSOR_LOCAL_JAR);
  if (StringUtils.isNotEmpty(coprocessorJar)) {
    return coprocessorJar;
  }
  return getFileName(getKylinHome(),COPROCESSOR_JAR_NAME_PATTERN);
}",0.6821192052980133
63101,"public static void staticCreateTestMetadata(String kylinConfigFolder){
  KylinConfig.destoryInstance();
  if (System.getProperty(KylinConfig.KYLIN_CONF) == null && System.getenv(KylinConfig.KYLIN_CONF) == null)   System.setProperty(KylinConfig.KYLIN_CONF,kylinConfigFolder);
}","public static void staticCreateTestMetadata(String kylinConfigFolder){
  KylinConfig.destoryInstance();
  if (System.getProperty(KylinConfig.KYLIN_CONF_HOME) == null && System.getenv(KylinConfig.KYLIN_CONF_HOME) == null)   System.setProperty(KylinConfig.KYLIN_CONF_HOME,kylinConfigFolder);
}",0.9735449735449736
63102,"public static void staticCleanupTestMetadata(){
  cleanupCache();
  System.clearProperty(KylinConfig.KYLIN_CONF);
  KylinConfig.destoryInstance();
}","public static void staticCleanupTestMetadata(){
  cleanupCache();
  System.clearProperty(KylinConfig.KYLIN_CONF_HOME);
  KylinConfig.destoryInstance();
}",0.9833887043189368
63103,"public static void createTestMetadata(String testDataFolder){
  KylinConfig.destoryInstance();
  String tempTestMetadataUrl=""String_Node_Str"";
  try {
    FileUtils.deleteDirectory(new File(tempTestMetadataUrl));
    FileUtils.copyDirectory(new File(testDataFolder),new File(tempTestMetadataUrl));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (System.getProperty(KylinConfig.KYLIN_CONF) == null && System.getenv(KylinConfig.KYLIN_CONF) == null)   System.setProperty(KylinConfig.KYLIN_CONF,tempTestMetadataUrl);
  KylinConfig.getInstanceFromEnv().setMetadataUrl(tempTestMetadataUrl);
}","public static void createTestMetadata(String testDataFolder){
  KylinConfig.destoryInstance();
  String tempTestMetadataUrl=""String_Node_Str"";
  try {
    FileUtils.deleteDirectory(new File(tempTestMetadataUrl));
    FileUtils.copyDirectory(new File(testDataFolder),new File(tempTestMetadataUrl));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (System.getProperty(KylinConfig.KYLIN_CONF_HOME) == null && System.getenv(KylinConfig.KYLIN_CONF_HOME) == null)   System.setProperty(KylinConfig.KYLIN_CONF_HOME,tempTestMetadataUrl);
  KylinConfig.getInstanceFromEnv().setMetadataUrl(tempTestMetadataUrl);
}",0.9877350776778414
63104,"public CubeMetadataUpgrade(String newMetadataUrl){
  KylinConfig.destoryInstance();
  System.setProperty(KylinConfig.KYLIN_CONF,newMetadataUrl);
  KylinConfig.getInstanceFromEnv().setMetadataUrl(newMetadataUrl);
  config=KylinConfig.getInstanceFromEnv();
  store=getStore();
}","public CubeMetadataUpgrade(String newMetadataUrl){
  KylinConfig.destoryInstance();
  System.setProperty(KylinConfig.KYLIN_CONF_HOME,newMetadataUrl);
  KylinConfig.getInstanceFromEnv().setMetadataUrl(newMetadataUrl);
  config=KylinConfig.getInstanceFromEnv();
  store=getStore();
}",0.9910233393177738
63105,"public static KylinConfig loadKylinPropsAndMetadata(Configuration conf) throws IOException {
  File metaDir=new File(""String_Node_Str"");
  System.setProperty(KylinConfig.KYLIN_CONF,metaDir.getAbsolutePath());
  logger.info(""String_Node_Str"" + metaDir.getAbsolutePath());
  KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  kylinConfig.setMetadataUrl(metaDir.getCanonicalPath());
  return kylinConfig;
}","public static KylinConfig loadKylinPropsAndMetadata(Configuration conf) throws IOException {
  File metaDir=new File(""String_Node_Str"");
  System.setProperty(KylinConfig.KYLIN_CONF_HOME,metaDir.getAbsolutePath());
  logger.info(""String_Node_Str"" + metaDir.getAbsolutePath());
  KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  kylinConfig.setMetadataUrl(metaDir.getCanonicalPath());
  return kylinConfig;
}",0.993968636911942
63106,"private void setup() throws IOException {
  long currentTIME=System.currentTimeMillis();
  exportFolder=""String_Node_Str"" + currentTIME + ""String_Node_Str"";
  backupArchive=""String_Node_Str"" + currentTIME + ""String_Node_Str"";
  KylinConfig.destoryInstance();
  System.setProperty(KylinConfig.KYLIN_CONF,AbstractKylinTestCase.SANDBOX_TEST_DATA);
  kylinConfig=KylinConfig.getInstanceFromEnv();
  cli=kylinConfig.getCliCommandExecutor();
  String metadataUrl=kylinConfig.getMetadataUrl();
  int cut=metadataUrl.indexOf('@');
  tableNameBase=metadataUrl.substring(0,cut);
  String hbaseUrl=cut < 0 ? metadataUrl : metadataUrl.substring(cut + 1);
  HConnection conn=HBaseConnection.get(hbaseUrl);
  try {
    hbase=new HBaseAdmin(conn);
    config=hbase.getConfiguration();
    allTables=hbase.listTables();
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw e;
  }
}","private void setup() throws IOException {
  long currentTIME=System.currentTimeMillis();
  exportFolder=""String_Node_Str"" + currentTIME + ""String_Node_Str"";
  backupArchive=""String_Node_Str"" + currentTIME + ""String_Node_Str"";
  KylinConfig.destoryInstance();
  System.setProperty(KylinConfig.KYLIN_CONF_HOME,AbstractKylinTestCase.SANDBOX_TEST_DATA);
  kylinConfig=KylinConfig.getInstanceFromEnv();
  cli=kylinConfig.getCliCommandExecutor();
  String metadataUrl=kylinConfig.getMetadataUrl();
  int cut=metadataUrl.indexOf('@');
  tableNameBase=metadataUrl.substring(0,cut);
  String hbaseUrl=cut < 0 ? metadataUrl : metadataUrl.substring(cut + 1);
  HConnection conn=HBaseConnection.get(hbaseUrl);
  try {
    hbase=new HBaseAdmin(conn);
    config=hbase.getConfiguration();
    allTables=hbase.listTables();
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw e;
  }
}",0.997160704145372
63107,"public void setup() throws IOException {
  KylinConfig.destoryInstance();
  System.setProperty(KylinConfig.KYLIN_CONF,AbstractKylinTestCase.SANDBOX_TEST_DATA);
  kylinConfig=KylinConfig.getInstanceFromEnv();
  cli=kylinConfig.getCliCommandExecutor();
  String metadataUrl=kylinConfig.getMetadataUrl();
  int cut=metadataUrl.indexOf('@');
  tableNameBase=metadataUrl.substring(0,cut);
  String hbaseUrl=cut < 0 ? metadataUrl : metadataUrl.substring(cut + 1);
  HConnection conn=HBaseConnection.get(hbaseUrl);
  try {
    hbase=new HBaseAdmin(conn);
    config=hbase.getConfiguration();
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw e;
  }
  uploadTarballToRemote();
}","public void setup() throws IOException {
  KylinConfig.destoryInstance();
  System.setProperty(KylinConfig.KYLIN_CONF_HOME,AbstractKylinTestCase.SANDBOX_TEST_DATA);
  kylinConfig=KylinConfig.getInstanceFromEnv();
  cli=kylinConfig.getCliCommandExecutor();
  String metadataUrl=kylinConfig.getMetadataUrl();
  int cut=metadataUrl.indexOf('@');
  tableNameBase=metadataUrl.substring(0,cut);
  String hbaseUrl=cut < 0 ? metadataUrl : metadataUrl.substring(cut + 1);
  HConnection conn=HBaseConnection.get(hbaseUrl);
  try {
    hbase=new HBaseAdmin(conn);
    config=hbase.getConfiguration();
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw e;
  }
  uploadTarballToRemote();
}",0.9963689179375452
63108,"public String getKylinJobJarPath(){
  final String jobJar=getOptional(KYLIN_JOB_JAR);
  if (StringUtils.isNotEmpty(jobJar)) {
    return jobJar;
  }
  return getFileName(getKylinHome(),JOB_JAR_NAME_PATTERN);
}","public String getKylinJobJarPath(){
  final String jobJar=getOptional(KYLIN_JOB_JAR);
  if (StringUtils.isNotEmpty(jobJar)) {
    return jobJar;
  }
  return getFileName(getKylinHome() + File.separator + ""String_Node_Str"",JOB_JAR_NAME_PATTERN);
}",0.9186813186813186
63109,"private static String getFileName(String kylinHome,Pattern pattern){
  File home=new File(kylinHome);
  SortedSet<String> files=Sets.newTreeSet();
  if (home.exists() && home.isDirectory()) {
    for (    File file : home.listFiles()) {
      final Matcher matcher=pattern.matcher(file.getName());
      if (matcher.matches()) {
        files.add(file.getAbsolutePath());
      }
    }
  }
  if (files.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"" + pattern.toString() + ""String_Node_Str"");
  }
 else {
    return files.last();
  }
}","private static String getFileName(String homePath,Pattern pattern){
  File home=new File(homePath);
  SortedSet<String> files=Sets.newTreeSet();
  if (home.exists() && home.isDirectory()) {
    for (    File file : home.listFiles()) {
      final Matcher matcher=pattern.matcher(file.getName());
      if (matcher.matches()) {
        files.add(file.getAbsolutePath());
      }
    }
  }
  if (files.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"" + pattern.toString() + ""String_Node_Str"");
  }
 else {
    return files.last();
  }
}",0.968978102189781
63110,"public String getCoprocessorLocalJar(){
  final String coprocessorJar=getOptional(COPROCESSOR_LOCAL_JAR);
  if (StringUtils.isNotEmpty(coprocessorJar)) {
    return coprocessorJar;
  }
  return getFileName(getKylinHome(),COPROCESSOR_JAR_NAME_PATTERN);
}","public String getCoprocessorLocalJar(){
  final String coprocessorJar=getOptional(COPROCESSOR_LOCAL_JAR);
  if (StringUtils.isNotEmpty(coprocessorJar)) {
    return coprocessorJar;
  }
  return getFileName(getKylinHome() + File.separator + ""String_Node_Str"",COPROCESSOR_JAR_NAME_PATTERN);
}",0.9318600368324124
63111,"private String getRequired(String prop){
  String r=kylinConfig.getString(prop);
  if (StringUtils.isEmpty(r))   throw new IllegalArgumentException(""String_Node_Str"" + prop + ""String_Node_Str"");
  return r;
}","private String getRequired(String prop){
  final String property=System.getProperty(prop);
  if (property != null) {
    return property;
  }
  String r=kylinConfig.getString(prop);
  if (StringUtils.isEmpty(r)) {
    throw new IllegalArgumentException(""String_Node_Str"" + prop + ""String_Node_Str"");
  }
  return r;
}",0.7542857142857143
63112,"@Override public void write(LongWritable v,byte[] buf,int offset){
  BytesUtil.writeLong(v.get(),buf,offset,SIZE);
}","@Override public void write(LongWritable v,byte[] buf,int offset){
  BytesUtil.writeLong(v == null ? 0 : v.get(),buf,offset,SIZE);
}",0.935483870967742
63113,"private TableDesc reloadSourceTableAt(String path) throws IOException {
  ResourceStore store=getStore();
  TableDesc t=store.getResource(path,TableDesc.class,TABLE_SERIALIZER);
  t.init();
  String tableIdentity=t.getIdentity();
  srcTableMap.putLocal(tableIdentity,t);
  return t;
}","private TableDesc reloadSourceTableAt(String path) throws IOException {
  ResourceStore store=getStore();
  TableDesc t=store.getResource(path,TableDesc.class,TABLE_SERIALIZER);
  if (t == null) {
    return null;
  }
  t.init();
  String tableIdentity=t.getIdentity();
  srcTableMap.putLocal(tableIdentity,t);
  return t;
}",0.9342105263157896
63114,"private static void cleanupCache(){
  KylinConfig config=null;
  try {
    config=KylinConfig.getInstanceFromEnv();
  }
 catch (  Exception e) {
  }
  if (config == null)   return;
  for (  String serviceClass : SERVICES_WITH_CACHE) {
    try {
      Class<?> cls=Class.forName(serviceClass);
      Method method=cls.getDeclaredMethod(""String_Node_Str"",KylinConfig.class);
      method.invoke(null,config);
    }
 catch (    ClassNotFoundException e) {
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + serviceClass);
      e.printStackTrace();
    }
  }
}","private static void cleanupCache(){
  for (  String serviceClass : SERVICES_WITH_CACHE) {
    try {
      Class<?> cls=Class.forName(serviceClass);
      Method method=cls.getDeclaredMethod(""String_Node_Str"");
      method.invoke(null);
    }
 catch (    ClassNotFoundException e) {
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + serviceClass);
      e.printStackTrace();
    }
  }
}",0.8293172690763052
63115,"@Test public void testMetaCRUD() throws Exception {
  final int sleepTime=400;
  final MetadataManager metadataManager=MetadataManager.getInstance(configA);
  final MetadataManager metadataManagerB=MetadataManager.getInstance(configB);
  final Broadcaster broadcaster=Broadcaster.getInstance();
  broadcaster.getCounterAndClear();
  TableDesc tableDesc=createTestTableDesc();
  assertTrue(metadataManager.getTableDesc(tableDesc.getIdentity()) == null);
  assertTrue(metadataManagerB.getTableDesc(tableDesc.getIdentity()) == null);
  metadataManager.saveSourceTable(tableDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertNotNull(metadataManager.getTableDesc(tableDesc.getIdentity()));
  assertNotNull(metadataManagerB.getTableDesc(tableDesc.getIdentity()));
  final String dataModelName=""String_Node_Str"";
  DataModelDesc dataModelDesc=metadataManager.getDataModelDesc(""String_Node_Str"");
  dataModelDesc.setName(dataModelName);
  dataModelDesc.setLastModified(0);
  assertTrue(metadataManager.getDataModelDesc(dataModelName) == null);
  assertTrue(metadataManagerB.getDataModelDesc(dataModelName) == null);
  dataModelDesc.setName(dataModelName);
  metadataManager.createDataModelDesc(dataModelDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertEquals(dataModelDesc.getName(),metadataManagerB.getDataModelDesc(dataModelName).getName());
  final LookupDesc[] lookups=dataModelDesc.getLookups();
  assertTrue(lookups.length > 0);
  dataModelDesc.setLookups(new LookupDesc[]{lookups[0]});
  metadataManager.updateDataModelDesc(dataModelDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertEquals(dataModelDesc.getLookups().length,metadataManagerB.getDataModelDesc(dataModelName).getLookups().length);
}","@Test public void testMetaCRUD() throws Exception {
  final MetadataManager metadataManager=MetadataManager.getInstance(configA);
  final MetadataManager metadataManagerB=MetadataManager.getInstance(configB);
  final Broadcaster broadcaster=Broadcaster.getInstance();
  broadcaster.getCounterAndClear();
  TableDesc tableDesc=createTestTableDesc();
  assertTrue(metadataManager.getTableDesc(tableDesc.getIdentity()) == null);
  assertTrue(metadataManagerB.getTableDesc(tableDesc.getIdentity()) == null);
  metadataManager.saveSourceTable(tableDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertNotNull(metadataManager.getTableDesc(tableDesc.getIdentity()));
  assertNotNull(metadataManagerB.getTableDesc(tableDesc.getIdentity()));
  final String dataModelName=""String_Node_Str"";
  DataModelDesc dataModelDesc=metadataManager.getDataModelDesc(""String_Node_Str"");
  dataModelDesc.setName(dataModelName);
  dataModelDesc.setLastModified(0);
  assertTrue(metadataManager.getDataModelDesc(dataModelName) == null);
  assertTrue(metadataManagerB.getDataModelDesc(dataModelName) == null);
  dataModelDesc.setName(dataModelName);
  metadataManager.createDataModelDesc(dataModelDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertEquals(dataModelDesc.getName(),metadataManagerB.getDataModelDesc(dataModelName).getName());
  final LookupDesc[] lookups=dataModelDesc.getLookups();
  assertTrue(lookups.length > 0);
  dataModelDesc.setLookups(new LookupDesc[]{lookups[0]});
  metadataManager.updateDataModelDesc(dataModelDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertEquals(dataModelDesc.getLookups().length,metadataManagerB.getDataModelDesc(dataModelName).getLookups().length);
}",0.9545829892650702
63116,"@Override public void handle(String type,String name,String event){
  final CacheService cacheService=new CacheService(){
    @Override public KylinConfig getConfig(){
      return configB;
    }
  }
;
  Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
  Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
  final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
  logger.info(log);
switch (wipeEvent) {
case CREATE:
case UPDATE:
    cacheService.rebuildCache(wipeType,name);
  break;
case DROP:
cacheService.removeCache(wipeType,name);
break;
default :
throw new RuntimeException(""String_Node_Str"" + wipeEvent);
}
}","@Override public void handle(String type,String name,String event){
  final CacheService cacheService=new CacheService(){
    @Override public KylinConfig getConfig(){
      return configB;
    }
  }
;
  Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
  Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
  final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
  logger.info(log);
  counter.incrementAndGet();
switch (wipeEvent) {
case CREATE:
case UPDATE:
    cacheService.rebuildCache(wipeType,name);
  break;
case DROP:
cacheService.removeCache(wipeType,name);
break;
default :
throw new RuntimeException(""String_Node_Str"" + wipeEvent);
}
}",0.9792709077912796
63117,"@Test public void testCubeCRUD() throws Exception {
  final int sleepTime=400;
  final Broadcaster broadcaster=Broadcaster.getInstance();
  broadcaster.getCounterAndClear();
  getStore().deleteResource(""String_Node_Str"");
  final String cubeName=""String_Node_Str"";
  final CubeManager cubeManager=getCubeManager(configA);
  final CubeManager cubeManagerB=getCubeManager(configB);
  final ProjectManager projectManager=getProjectManager(configA);
  final ProjectManager projectManagerB=getProjectManager(configB);
  final CubeDescManager cubeDescManager=getCubeDescManager(configA);
  final CubeDescManager cubeDescManagerB=getCubeDescManager(configB);
  final CubeDesc cubeDesc=getCubeDescManager(configA).getCubeDesc(""String_Node_Str"");
  assertTrue(cubeManager.getCube(cubeName) == null);
  assertTrue(cubeManagerB.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertTrue(!containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  cubeManager.createCube(cubeName,ProjectInstance.DEFAULT_PROJECT_NAME,cubeDesc,null);
  assertNotNull(cubeManager.getCube(cubeName));
  assertEquals(2,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertNotNull(cubeManagerB.getCube(cubeName));
  assertTrue(containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertTrue(containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  CubeInstance cube=cubeManager.getCube(cubeName);
  assertEquals(0,cube.getSegments().size());
  assertEquals(0,cubeManagerB.getCube(cubeName).getSegments().size());
  CubeSegment segment=new CubeSegment();
  segment.setName(""String_Node_Str"");
  cube.getSegments().add(segment);
  cubeManager.updateCube(cube);
  assertEquals(1,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertEquals(1,cubeManagerB.getCube(cubeName).getSegments().size());
  assertEquals(segment.getName(),cubeManagerB.getCube(cubeName).getSegments().get(0).getName());
  cubeManager.dropCube(cubeName,false);
  assertTrue(cubeManager.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertEquals(2,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertTrue(cubeManagerB.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  final String cubeDescName=""String_Node_Str"";
  cubeDesc.setName(cubeDescName);
  cubeDesc.setLastModified(0);
  assertTrue(cubeDescManager.getCubeDesc(cubeDescName) == null);
  assertTrue(cubeDescManagerB.getCubeDesc(cubeDescName) == null);
  cubeDescManager.createCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertNotNull(cubeDescManager.getCubeDesc(cubeDescName));
  assertNotNull(cubeDescManagerB.getCubeDesc(cubeDescName));
  cubeDesc.setNotifyList(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  cubeDescManager.updateCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertEquals(cubeDesc.getNotifyList(),cubeDescManagerB.getCubeDesc(cubeDescName).getNotifyList());
  cubeDescManager.removeCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  Thread.sleep(sleepTime);
  assertTrue(cubeDescManager.getCubeDesc(cubeDescName) == null);
  assertTrue(cubeDescManagerB.getCubeDesc(cubeDescName) == null);
  getStore().deleteResource(""String_Node_Str"");
}","@Test public void testCubeCRUD() throws Exception {
  final Broadcaster broadcaster=Broadcaster.getInstance();
  broadcaster.getCounterAndClear();
  getStore().deleteResource(""String_Node_Str"");
  final String cubeName=""String_Node_Str"";
  final CubeManager cubeManager=getCubeManager(configA);
  final CubeManager cubeManagerB=getCubeManager(configB);
  final ProjectManager projectManager=getProjectManager(configA);
  final ProjectManager projectManagerB=getProjectManager(configB);
  final CubeDescManager cubeDescManager=getCubeDescManager(configA);
  final CubeDescManager cubeDescManagerB=getCubeDescManager(configB);
  final CubeDesc cubeDesc=getCubeDescManager(configA).getCubeDesc(""String_Node_Str"");
  assertTrue(cubeManager.getCube(cubeName) == null);
  assertTrue(cubeManagerB.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertTrue(!containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  cubeManager.createCube(cubeName,ProjectInstance.DEFAULT_PROJECT_NAME,cubeDesc,null);
  assertNotNull(cubeManager.getCube(cubeName));
  assertEquals(2,broadcaster.getCounterAndClear());
  waitForCounterAndClear(2);
  assertNotNull(cubeManagerB.getCube(cubeName));
  assertTrue(containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertTrue(containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  CubeInstance cube=cubeManager.getCube(cubeName);
  assertEquals(0,cube.getSegments().size());
  assertEquals(0,cubeManagerB.getCube(cubeName).getSegments().size());
  CubeSegment segment=new CubeSegment();
  segment.setName(""String_Node_Str"");
  cube.getSegments().add(segment);
  cubeManager.updateCube(cube);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertEquals(1,cubeManagerB.getCube(cubeName).getSegments().size());
  assertEquals(segment.getName(),cubeManagerB.getCube(cubeName).getSegments().get(0).getName());
  cubeManager.dropCube(cubeName,false);
  assertTrue(cubeManager.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertEquals(2,broadcaster.getCounterAndClear());
  waitForCounterAndClear(2);
  assertTrue(cubeManagerB.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  final String cubeDescName=""String_Node_Str"";
  cubeDesc.setName(cubeDescName);
  cubeDesc.setLastModified(0);
  assertTrue(cubeDescManager.getCubeDesc(cubeDescName) == null);
  assertTrue(cubeDescManagerB.getCubeDesc(cubeDescName) == null);
  cubeDescManager.createCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertNotNull(cubeDescManager.getCubeDesc(cubeDescName));
  assertNotNull(cubeDescManagerB.getCubeDesc(cubeDescName));
  cubeDesc.setNotifyList(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  cubeDescManager.updateCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertEquals(cubeDesc.getNotifyList(),cubeDescManagerB.getCubeDesc(cubeDescName).getNotifyList());
  cubeDescManager.removeCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertTrue(cubeDescManager.getCubeDesc(cubeDescName) == null);
  assertTrue(cubeDescManagerB.getCubeDesc(cubeDescName) == null);
  getStore().deleteResource(""String_Node_Str"");
}",0.9605211726384364
63118,"@Before public void setUp() throws Exception {
  this.createTestMetadata();
  server=new Server(7070);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);
  context.setContextPath(""String_Node_Str"");
  server.setHandler(context);
  configA=KylinConfig.getInstanceFromEnv();
  configB=KylinConfig.getKylinConfigFromInputStream(KylinConfig.getKylinPropertiesAsInputSteam());
  configB.setMetadataUrl(tempTestMetadataUrl);
  context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler(){
    @Override public void handle(    String type,    String name,    String event){
      final CacheService cacheService=new CacheService(){
        @Override public KylinConfig getConfig(){
          return configB;
        }
      }
;
      Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
      Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
      final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
      logger.info(log);
switch (wipeEvent) {
case CREATE:
case UPDATE:
        cacheService.rebuildCache(wipeType,name);
      break;
case DROP:
    cacheService.removeCache(wipeType,name);
  break;
default :
throw new RuntimeException(""String_Node_Str"" + wipeEvent);
}
}
}
)),""String_Node_Str"");
server.start();
}","@Before public void setUp() throws Exception {
  this.createTestMetadata();
  server=new Server(7070);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);
  context.setContextPath(""String_Node_Str"");
  server.setHandler(context);
  configA=KylinConfig.getInstanceFromEnv();
  configB=KylinConfig.getKylinConfigFromInputStream(KylinConfig.getKylinPropertiesAsInputSteam());
  configB.setMetadataUrl(tempTestMetadataUrl);
  context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler(){
    @Override public void handle(    String type,    String name,    String event){
      final CacheService cacheService=new CacheService(){
        @Override public KylinConfig getConfig(){
          return configB;
        }
      }
;
      Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
      Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
      final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
      logger.info(log);
      counter.incrementAndGet();
switch (wipeEvent) {
case CREATE:
case UPDATE:
        cacheService.rebuildCache(wipeType,name);
      break;
case DROP:
    cacheService.removeCache(wipeType,name);
  break;
default :
throw new RuntimeException(""String_Node_Str"" + wipeEvent);
}
}
}
)),""String_Node_Str"");
server.start();
counter.set(0L);
}",0.9821300929235168
63119,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((expression == null) ? 0 : expression.hashCode());
  result=prime * result + ((parameter == null) ? 0 : parameter.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((expression == null) ? 0 : expression.hashCode());
  result=prime * result + ((isCount() || parameter == null) ? 0 : parameter.hashCode());
  return result;
}",0.9739478957915833
63120,"private MapReduceExecutable createInvertedIndexStep(IISegment seg,String intermediateHiveTable,String iiOutputTempPath){
  MapReduceExecutable buildIIStep=new MapReduceExecutable();
  StringBuilder cmd=new StringBuilder();
  appendMapReduceParameters(cmd,engineConfig);
  buildIIStep.setName(ExecutableConstants.STEP_NAME_BUILD_BASE_CUBOID);
  appendExecCmdParameters(cmd,""String_Node_Str"",seg.getIIInstance().getName());
  appendExecCmdParameters(cmd,""String_Node_Str"",intermediateHiveTable);
  appendExecCmdParameters(cmd,""String_Node_Str"",iiOutputTempPath);
  appendExecCmdParameters(cmd,""String_Node_Str"",ExecutableConstants.STEP_NAME_BUILD_II);
  buildIIStep.setMapReduceParams(cmd.toString());
  buildIIStep.setMapReduceJobClass(InvertedIndexJob.class);
  return buildIIStep;
}","private MapReduceExecutable createInvertedIndexStep(IISegment seg,String intermediateHiveTable,String iiOutputTempPath){
  MapReduceExecutable buildIIStep=new MapReduceExecutable();
  StringBuilder cmd=new StringBuilder();
  appendMapReduceParameters(cmd,engineConfig);
  buildIIStep.setName(ExecutableConstants.STEP_NAME_BUILD_II);
  appendExecCmdParameters(cmd,""String_Node_Str"",seg.getIIInstance().getName());
  appendExecCmdParameters(cmd,""String_Node_Str"",intermediateHiveTable);
  appendExecCmdParameters(cmd,""String_Node_Str"",iiOutputTempPath);
  appendExecCmdParameters(cmd,""String_Node_Str"",ExecutableConstants.STEP_NAME_BUILD_II);
  buildIIStep.setMapReduceParams(cmd.toString());
  buildIIStep.setMapReduceJobClass(InvertedIndexJob.class);
  return buildIIStep;
}",0.99165061014772
63121,"@BeforeClass public static void beforeClass() throws Exception {
  ClasspathUtil.addClasspath(new File(HBaseMetadataTestCase.SANDBOX_TEST_DATA).getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
}","@BeforeClass public static void beforeClass() throws Exception {
  logger.info(""String_Node_Str"" + new File(HBaseMetadataTestCase.SANDBOX_TEST_DATA).getAbsolutePath());
  ClasspathUtil.addClasspath(new File(HBaseMetadataTestCase.SANDBOX_TEST_DATA).getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
}",0.8115942028985508
63122,"public Pair<CubeSegment,CubeSegment> appendAndMergeSegments(CubeInstance cube,long endDate) throws IOException {
  checkNoBuildingSegment(cube);
  checkCubeIsPartitioned(cube);
  long appendStart=calculateStartDateForAppendSegment(cube);
  CubeSegment appendSegment=newSegment(cube,appendStart,endDate);
  long startDate=cube.getDescriptor().getCubePartitionDesc().getPartitionDateStart();
  Pair<Long,Long> range=alignMergeRange(cube,startDate,endDate);
  CubeSegment mergeSegment=newSegment(cube,range.getFirst(),range.getSecond());
  validateNewSegments(cube,appendSegment,mergeSegment);
  cube.getSegments().add(appendSegment);
  cube.getSegments().add(mergeSegment);
  Collections.sort(cube.getSegments());
  updateCube(cube);
  return new Pair<CubeSegment,CubeSegment>(appendSegment,mergeSegment);
}","public Pair<CubeSegment,CubeSegment> appendAndMergeSegments(CubeInstance cube,long endDate) throws IOException {
  checkNoBuildingSegment(cube);
  checkCubeIsPartitioned(cube);
  long appendStart=calculateStartDateForAppendSegment(cube);
  CubeSegment appendSegment=newSegment(cube,appendStart,endDate);
  long startDate=cube.getDescriptor().getCubePartitionDesc().getPartitionDateStart();
  CubeSegment mergeSegment=newSegment(cube,startDate,endDate);
  validateNewSegments(cube,mergeSegment);
  cube.getSegments().add(appendSegment);
  cube.getSegments().add(mergeSegment);
  Collections.sort(cube.getSegments());
  updateCube(cube);
  return new Pair<CubeSegment,CubeSegment>(appendSegment,mergeSegment);
}",0.5667107001321003
63123,"private CubeSegment newSegment(CubeInstance cubeInstance,long startDate,long endDate){
  if (startDate >= endDate)   throw new IllegalArgumentException(""String_Node_Str"" + startDate + ""String_Node_Str""+ endDate);
  CubeSegment segment=new CubeSegment();
  String incrementalSegName=CubeSegment.getSegmentName(startDate,endDate);
  segment.setUuid(UUID.randomUUID().toString());
  segment.setName(incrementalSegName);
  Date creatTime=new Date();
  segment.setCreateTime(DateStrDictionary.dateToString(creatTime));
  segment.setCreateTimeUTC(creatTime.getTime());
  segment.setDateRangeStart(startDate);
  segment.setDateRangeEnd(endDate);
  segment.setStatus(SegmentStatusEnum.NEW);
  segment.setStorageLocationIdentifier(generateStorageLocation());
  segment.setCubeInstance(cubeInstance);
  return segment;
}","private CubeSegment newSegment(CubeInstance cubeInstance,long startDate,long endDate){
  if (startDate >= endDate)   throw new IllegalArgumentException(""String_Node_Str"" + startDate + ""String_Node_Str""+ endDate);
  CubeSegment segment=new CubeSegment();
  String incrementalSegName=CubeSegment.getSegmentName(startDate,endDate);
  segment.setUuid(UUID.randomUUID().toString());
  segment.setName(incrementalSegName);
  Date creatTime=new Date();
  segment.setCreateTime(DateStrDictionary.dateToString(creatTime));
  segment.setCreateTimeUTC(creatTime.getTime());
  segment.setDateRangeStart(startDate);
  segment.setDateRangeEnd(endDate);
  segment.setStatus(SegmentStatusEnum.NEW);
  segment.setStorageLocationIdentifier(generateStorageLocation());
  segment.setCubeInstance(cubeInstance);
  segment.validate();
  return segment;
}",0.9866017052375152
63124,"public void updateJobCounter(){
  try {
    Counters counters=job.getCounters();
    if (counters == null) {
      String errorMsg=""String_Node_Str"" + getMrJobId();
      log.warn(errorMsg);
      output.append(errorMsg);
      return;
    }
    this.output.append(counters.toString()).append(""String_Node_Str"");
    log.debug(counters.toString());
    mapInputRecords=String.valueOf(counters.findCounter(TaskCounter.MAP_INPUT_RECORDS).getValue());
    hdfsBytesWritten=String.valueOf(counters.findCounter(""String_Node_Str"",""String_Node_Str"").getValue());
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage(),e);
    output.append(e.getLocalizedMessage());
  }
}","public void updateJobCounter(){
  try {
    Counters counters=job.getCounters();
    if (counters == null) {
      String errorMsg=""String_Node_Str"" + getMrJobId();
      log.warn(errorMsg);
      output.append(errorMsg);
      return;
    }
    this.output.append(counters.toString()).append(""String_Node_Str"");
    log.debug(counters.toString());
    mapInputRecords=String.valueOf(counters.findCounter(TaskCounter.MAP_INPUT_RECORDS).getValue());
    hdfsBytesWritten=String.valueOf(counters.findCounter(""String_Node_Str"",""String_Node_Str"").getValue());
    hdfsBytesRead=String.valueOf(counters.findCounter(""String_Node_Str"",""String_Node_Str"").getValue());
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage(),e);
    output.append(e.getLocalizedMessage());
  }
}",0.9285714285714286
63125,"@SuppressWarnings(""String_Node_Str"") @Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final String mapReduceJobClass=getMapReduceJobClass();
  String params=getMapReduceParams();
  Preconditions.checkNotNull(mapReduceJobClass);
  Preconditions.checkNotNull(params);
  try {
    Job job;
    final Map<String,String> extra=executableManager.getOutput(getId()).getExtra();
    if (extra.containsKey(ExecutableConstants.MR_JOB_ID)) {
      job=new Cluster(new Configuration()).getJob(JobID.forName(extra.get(ExecutableConstants.MR_JOB_ID)));
      logger.info(""String_Node_Str"" + extra.get(ExecutableConstants.MR_JOB_ID + ""String_Node_Str""));
    }
 else {
      final Constructor<? extends AbstractHadoopJob> constructor=(Constructor<? extends AbstractHadoopJob>)Class.forName(mapReduceJobClass).getConstructor();
      final AbstractHadoopJob hadoopJob=constructor.newInstance();
      hadoopJob.setAsync(true);
      String[] args=params.trim().split(""String_Node_Str"");
      ToolRunner.run(hadoopJob,args);
      job=hadoopJob.getJob();
    }
    final StringBuilder output=new StringBuilder();
    final HadoopCmdOutput hadoopCmdOutput=new HadoopCmdOutput(job,output);
    String mrJobId=hadoopCmdOutput.getMrJobId();
    HadoopStatusChecker statusChecker=new HadoopStatusChecker(context.getConfig().getYarnStatusServiceUrl(),mrJobId,output);
    JobStepStatusEnum status=JobStepStatusEnum.NEW;
    while (!isDiscarded()) {
      JobStepStatusEnum newStatus=statusChecker.checkStatus();
      if (status == JobStepStatusEnum.WAITING && (newStatus == JobStepStatusEnum.FINISHED || newStatus == JobStepStatusEnum.ERROR || newStatus == JobStepStatusEnum.RUNNING)) {
        final long waitTime=System.currentTimeMillis() - getStartTime();
        setMapReduceWaitTime(waitTime);
      }
      status=newStatus;
      executableManager.addJobInfo(getId(),hadoopCmdOutput.getInfo());
      if (status.isComplete()) {
        hadoopCmdOutput.updateJobCounter();
        final Map<String,String> info=hadoopCmdOutput.getInfo();
        info.put(ExecutableConstants.SOURCE_RECORDS_COUNT,hadoopCmdOutput.getMapInputRecords());
        info.put(ExecutableConstants.HDFS_BYTES_WRITTEN,hadoopCmdOutput.getHdfsBytesWritten());
        executableManager.addJobInfo(getId(),info);
        if (status == JobStepStatusEnum.FINISHED) {
          return new ExecuteResult(ExecuteResult.State.SUCCEED,output.toString());
        }
 else {
          return new ExecuteResult(ExecuteResult.State.FAILED,output.toString());
        }
      }
      Thread.sleep(context.getConfig().getYarnStatusCheckIntervalSeconds() * 1000);
    }
    return new ExecuteResult(ExecuteResult.State.DISCARDED,output.toString());
  }
 catch (  ReflectiveOperationException e) {
    logger.error(""String_Node_Str"" + getParam(KEY_MR_JOB),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"" + getId(),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final String mapReduceJobClass=getMapReduceJobClass();
  String params=getMapReduceParams();
  Preconditions.checkNotNull(mapReduceJobClass);
  Preconditions.checkNotNull(params);
  try {
    Job job;
    final Map<String,String> extra=executableManager.getOutput(getId()).getExtra();
    if (extra.containsKey(ExecutableConstants.MR_JOB_ID)) {
      job=new Cluster(new Configuration()).getJob(JobID.forName(extra.get(ExecutableConstants.MR_JOB_ID)));
      logger.info(""String_Node_Str"" + extra.get(ExecutableConstants.MR_JOB_ID + ""String_Node_Str""));
    }
 else {
      final Constructor<? extends AbstractHadoopJob> constructor=(Constructor<? extends AbstractHadoopJob>)Class.forName(mapReduceJobClass).getConstructor();
      final AbstractHadoopJob hadoopJob=constructor.newInstance();
      hadoopJob.setAsync(true);
      String[] args=params.trim().split(""String_Node_Str"");
      ToolRunner.run(hadoopJob,args);
      job=hadoopJob.getJob();
    }
    final StringBuilder output=new StringBuilder();
    final HadoopCmdOutput hadoopCmdOutput=new HadoopCmdOutput(job,output);
    String mrJobId=hadoopCmdOutput.getMrJobId();
    HadoopStatusChecker statusChecker=new HadoopStatusChecker(context.getConfig().getYarnStatusServiceUrl(),mrJobId,output);
    JobStepStatusEnum status=JobStepStatusEnum.NEW;
    while (!isDiscarded()) {
      JobStepStatusEnum newStatus=statusChecker.checkStatus();
      if (status == JobStepStatusEnum.WAITING && (newStatus == JobStepStatusEnum.FINISHED || newStatus == JobStepStatusEnum.ERROR || newStatus == JobStepStatusEnum.RUNNING)) {
        final long waitTime=System.currentTimeMillis() - getStartTime();
        setMapReduceWaitTime(waitTime);
      }
      status=newStatus;
      executableManager.addJobInfo(getId(),hadoopCmdOutput.getInfo());
      if (status.isComplete()) {
        hadoopCmdOutput.updateJobCounter();
        final Map<String,String> info=hadoopCmdOutput.getInfo();
        info.put(ExecutableConstants.SOURCE_RECORDS_COUNT,hadoopCmdOutput.getMapInputRecords());
        info.put(ExecutableConstants.SOURCE_RECORDS_SIZE,hadoopCmdOutput.getHdfsBytesRead());
        info.put(ExecutableConstants.HDFS_BYTES_WRITTEN,hadoopCmdOutput.getHdfsBytesWritten());
        executableManager.addJobInfo(getId(),info);
        if (status == JobStepStatusEnum.FINISHED) {
          return new ExecuteResult(ExecuteResult.State.SUCCEED,output.toString());
        }
 else {
          return new ExecuteResult(ExecuteResult.State.FAILED,output.toString());
        }
      }
      Thread.sleep(context.getConfig().getYarnStatusCheckIntervalSeconds() * 1000);
    }
    return new ExecuteResult(ExecuteResult.State.DISCARDED,output.toString());
  }
 catch (  ReflectiveOperationException e) {
    logger.error(""String_Node_Str"" + getParam(KEY_MR_JOB),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"" + getId(),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.98502707868748
63126,"/** 
 * Smartly figure out the TOBE segments once all new segments are built. - Ensures no gap, no overlap  - Favors new segments over the old - Favors big segments over the small
 */
private List<CubeSegment> calculateToBeSegments(CubeInstance cube,CubeSegment... newSegments){
  CubeDesc cubeDesc=cube.getDescriptor();
  CubePartitionDesc partDesc=cubeDesc.getCubePartitionDesc();
  List<CubeSegment> tobe=Lists.newArrayList(cube.getSegments());
  if (newSegments != null)   tobe.addAll(Arrays.asList(newSegments));
  if (tobe.size() == 0)   return tobe;
  Collections.sort(tobe);
  CubeSegment firstSeg=tobe.get(0);
  if (firstSeg.getDateRangeStart() != partDesc.getPartitionDateStart()) {
    throw new IllegalStateException(""String_Node_Str"" + cube + ""String_Node_Str""+ firstSeg+ ""String_Node_Str""+ partDesc.getPartitionDateStart());
  }
  for (int i=0, j=1; j < tobe.size(); ) {
    CubeSegment is=tobe.get(i);
    CubeSegment js=tobe.get(j);
    if (!isNew(is) && !isReady(is)) {
      tobe.remove(i);
      continue;
    }
    if (!isNew(js) && !isReady(js)) {
      tobe.remove(j);
      continue;
    }
    if (is.getDateRangeStart() == js.getDateRangeStart()) {
      if (isReady(is) && isReady(js) || isNew(is) && isNew(js)) {
        if (is.getDateRangeEnd() <= js.getDateRangeEnd()) {
          tobe.remove(i);
        }
 else {
          tobe.remove(j);
        }
      }
 else       if (isNew(is)) {
        tobe.remove(j);
      }
 else {
        tobe.remove(i);
      }
      continue;
    }
    if (is.getDateRangeEnd() == js.getDateRangeStart()) {
      i++;
      j++;
      continue;
    }
    tobe.remove(j);
  }
  return tobe;
}","/** 
 * Smartly figure out the TOBE segments once all new segments are built. - Ensures no gap, no overlap  - Favors new segments over the old - Favors big segments over the small
 */
private List<CubeSegment> calculateToBeSegments(CubeInstance cube,CubeSegment... newSegments){
  CubeDesc cubeDesc=cube.getDescriptor();
  CubePartitionDesc partDesc=cubeDesc.getCubePartitionDesc();
  List<CubeSegment> tobe=Lists.newArrayList(cube.getSegments());
  if (newSegments != null)   tobe.addAll(Arrays.asList(newSegments));
  if (tobe.size() == 0)   return tobe;
  Collections.sort(tobe);
  CubeSegment firstSeg=tobe.get(0);
  if (firstSeg.getDateRangeStart() != partDesc.getPartitionDateStart()) {
    throw new IllegalStateException(""String_Node_Str"" + cube + ""String_Node_Str""+ firstSeg+ ""String_Node_Str""+ partDesc.getPartitionDateStart());
  }
  firstSeg.validate();
  for (int i=0, j=1; j < tobe.size(); ) {
    CubeSegment is=tobe.get(i);
    CubeSegment js=tobe.get(j);
    js.validate();
    if (!isNew(is) && !isReady(is)) {
      tobe.remove(i);
      continue;
    }
    if (!isNew(js) && !isReady(js)) {
      tobe.remove(j);
      continue;
    }
    if (is.getDateRangeStart() == js.getDateRangeStart()) {
      if (isReady(is) && isReady(js) || isNew(is) && isNew(js)) {
        if (is.getDateRangeEnd() <= js.getDateRangeEnd()) {
          tobe.remove(i);
        }
 else {
          tobe.remove(j);
        }
      }
 else       if (isNew(is)) {
        tobe.remove(j);
      }
 else {
        tobe.remove(i);
      }
      continue;
    }
    if (is.getDateRangeEnd() == js.getDateRangeStart()) {
      i++;
      j++;
      continue;
    }
    tobe.remove(j);
  }
  return tobe;
}",0.98744769874477
63127,"public Pair<CubeSegment,CubeSegment> appendAndMergeSegments(CubeInstance cube,long startDate,long endDate) throws IOException {
  checkNoBuildingSegment(cube);
  checkCubeIsPartitioned(cube);
  long appendStart=calculateStartDateForAppendSegment(cube);
  CubeSegment appendSegment=newSegment(cube,appendStart,endDate);
  Pair<Long,Long> range=alignMergeRange(cube,startDate,endDate);
  CubeSegment mergeSegment=newSegment(cube,range.getFirst(),range.getSecond());
  validateNewSegments(cube,appendSegment,mergeSegment);
  cube.getSegments().add(appendSegment);
  cube.getSegments().add(mergeSegment);
  Collections.sort(cube.getSegments());
  updateCube(cube);
  return new Pair<CubeSegment,CubeSegment>(appendSegment,mergeSegment);
}","public Pair<CubeSegment,CubeSegment> appendAndMergeSegments(CubeInstance cube,long endDate) throws IOException {
  checkNoBuildingSegment(cube);
  checkCubeIsPartitioned(cube);
  long appendStart=calculateStartDateForAppendSegment(cube);
  CubeSegment appendSegment=newSegment(cube,appendStart,endDate);
  long startDate=cube.getDescriptor().getCubePartitionDesc().getPartitionDateStart();
  Pair<Long,Long> range=alignMergeRange(cube,startDate,endDate);
  CubeSegment mergeSegment=newSegment(cube,range.getFirst(),range.getSecond());
  validateNewSegments(cube,appendSegment,mergeSegment);
  cube.getSegments().add(appendSegment);
  cube.getSegments().add(mergeSegment);
  Collections.sort(cube.getSegments());
  updateCube(cube);
  return new Pair<CubeSegment,CubeSegment>(appendSegment,mergeSegment);
}",0.9343729694606888
63128,"public CubeSegment appendSegments(CubeInstance cube,long startDate,long endDate) throws IOException {
  checkNoBuildingSegment(cube);
  CubeSegment newSegment;
  if (cube.getDescriptor().getCubePartitionDesc().isPartitioned()) {
    startDate=calculateStartDateForAppendSegment(cube);
    newSegment=newSegment(cube,startDate,endDate);
  }
 else {
    newSegment=newSegment(cube,0,Long.MAX_VALUE);
  }
  validateNewSegments(cube,newSegment);
  cube.getSegments().add(newSegment);
  Collections.sort(cube.getSegments());
  updateCube(cube);
  return newSegment;
}","public CubeSegment appendSegments(CubeInstance cube,long endDate) throws IOException {
  checkNoBuildingSegment(cube);
  CubeSegment newSegment;
  if (cube.getDescriptor().getCubePartitionDesc().isPartitioned()) {
    long startDate=calculateStartDateForAppendSegment(cube);
    newSegment=newSegment(cube,startDate,endDate);
  }
 else {
    newSegment=newSegment(cube,0,Long.MAX_VALUE);
  }
  validateNewSegments(cube,newSegment);
  cube.getSegments().add(newSegment);
  Collections.sort(cube.getSegments());
  updateCube(cube);
  return newSegment;
}",0.9820466786355476
63129,"/** 
 * @param storageLocationIdentifier the storageLocationIdentifier to set
 */
public void setStorageLocationIdentifier(String storageLocationIdentifier){
  this.storageLocationIdentifier=storageLocationIdentifier;
}","public void setStorageLocationIdentifier(String storageLocationIdentifier){
  this.storageLocationIdentifier=storageLocationIdentifier;
}",0.7696629213483146
63130,"@Test public void testNonPartitionedCube() throws ParseException, IOException {
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  createNewCube(desc);
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateEnd=f.parse(""String_Node_Str"").getTime();
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(0,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  CubeSegment initialSegment=cubeMgr.appendSegments(cubeInstance,desc.getCubePartitionDesc().getPartitionDateStart(),dateEnd);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertTrue(""String_Node_Str"".equals(initialSegment.getStorageLocationIdentifier()) == false);
  assertEquals(""String_Node_Str"",initialSegment.getName());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,initialSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  System.out.println(""String_Node_Str"");
  CubeSegment rebuildSegment=cubeMgr.appendSegments(cubeInstance,1364688000000L,1386806400000L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.NEW).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(1,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,rebuildSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111,222,333);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  assertEquals(""String_Node_Str"",cubeInstance.getSegments().get(0).getLastBuildJobID());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
}","@Test public void testNonPartitionedCube() throws ParseException, IOException {
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  createNewCube(desc);
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateEnd=f.parse(""String_Node_Str"").getTime();
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(0,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  CubeSegment initialSegment=cubeMgr.appendSegments(cubeInstance,dateEnd);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertTrue(""String_Node_Str"".equals(initialSegment.getStorageLocationIdentifier()) == false);
  assertEquals(""String_Node_Str"",initialSegment.getName());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,initialSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  System.out.println(""String_Node_Str"");
  CubeSegment rebuildSegment=cubeMgr.appendSegments(cubeInstance,1386806400000L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.NEW).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(1,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,rebuildSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111,222,333);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  assertEquals(""String_Node_Str"",cubeInstance.getSegments().get(0).getLastBuildJobID());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
}",0.9912612495108908
63131,"@Test(expected=IllegalStateException.class) public void testInvalidAppend() throws ParseException, IOException {
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  createNewCube(desc);
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateEnd=f.parse(""String_Node_Str"").getTime();
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(0,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  CubeSegment initialSegment=cubeMgr.appendSegments(cubeInstance,desc.getCubePartitionDesc().getPartitionDateStart(),dateEnd);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertTrue(""String_Node_Str"".equals(initialSegment.getStorageLocationIdentifier()) == false);
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,initialSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  long dateEnd2=f.parse(""String_Node_Str"").getTime();
  cubeMgr.appendSegments(cubeInstance,dateEnd + 1000,dateEnd2);
}","@Test(expected=IllegalStateException.class) public void testInvalidAppend() throws ParseException, IOException {
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  createNewCube(desc);
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateEnd=f.parse(""String_Node_Str"").getTime();
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(0,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  CubeSegment initialSegment=cubeMgr.appendSegments(cubeInstance,dateEnd);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertTrue(""String_Node_Str"".equals(initialSegment.getStorageLocationIdentifier()) == false);
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,initialSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  long dateEnd2=f.parse(""String_Node_Str"").getTime();
  cubeMgr.appendSegments(cubeInstance,dateEnd2);
}",0.9860677895612392
63132,"@Test(expected=IllegalStateException.class) public void testInvalidRebuild() throws IOException {
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  cubeMgr.appendSegments(cubeInstance,1364688000000L + 1000L,1386806400000L);
}","@Test(expected=IllegalStateException.class) public void testInvalidRebuild() throws IOException {
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  cubeMgr.appendSegments(cubeInstance,1386806400000L);
}",0.9574861367837338
63133,"@Test public void testInitialAndAppend() throws ParseException, IOException {
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  createNewCube(desc);
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateEnd=f.parse(""String_Node_Str"").getTime();
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(0,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  CubeSegment initialSegment=cubeMgr.appendSegments(cubeInstance,desc.getCubePartitionDesc().getPartitionDateStart(),dateEnd);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertTrue(""String_Node_Str"".equals(initialSegment.getStorageLocationIdentifier()) == false);
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,initialSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  long dateEnd2=f.parse(""String_Node_Str"").getTime();
  CubeSegment incrementalSegment=cubeMgr.appendSegments(cubeInstance,dateEnd,dateEnd2);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(2,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.NEW).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd2,cubeInstance.getAllocatedEndDate());
  assertEquals(dateEnd,cubeInstance.getBuildingSegments().get(0).getDateRangeStart());
  assertEquals(dateEnd2,cubeInstance.getBuildingSegments().get(0).getDateRangeEnd());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,incrementalSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(2,cubeInstance.getSegments().size());
  assertEquals(2,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd2,cubeInstance.getAllocatedEndDate());
}","@Test public void testInitialAndAppend() throws ParseException, IOException {
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  createNewCube(desc);
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateEnd=f.parse(""String_Node_Str"").getTime();
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(0,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  CubeSegment initialSegment=cubeMgr.appendSegments(cubeInstance,dateEnd);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertTrue(""String_Node_Str"".equals(initialSegment.getStorageLocationIdentifier()) == false);
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,initialSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  long dateEnd2=f.parse(""String_Node_Str"").getTime();
  CubeSegment incrementalSegment=cubeMgr.appendSegments(cubeInstance,dateEnd2);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(2,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.NEW).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd2,cubeInstance.getAllocatedEndDate());
  assertEquals(dateEnd,cubeInstance.getBuildingSegments().get(0).getDateRangeStart());
  assertEquals(dateEnd2,cubeInstance.getBuildingSegments().get(0).getDateRangeEnd());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,incrementalSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111L,222L,333L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(2,cubeInstance.getSegments().size());
  assertEquals(2,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(desc.getCubePartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(dateEnd2,cubeInstance.getAllocatedEndDate());
}",0.9920403289997348
63134,"@Test public void testRebuildSegment() throws IOException {
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  CubeSegment rebuildSegment=cubeMgr.appendSegments(cubeInstance,1364688000000L,1386806400000L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.NEW).size());
  assertEquals(1,cubeInstance.getRebuildingSegments().size());
  assertEquals(1364688000000L,cubeInstance.getAllocatedStartDate());
  assertEquals(1386806400000L,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,rebuildSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111,222,333);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(1364688000000L,cubeInstance.getAllocatedStartDate());
  assertEquals(1386806400000L,cubeInstance.getAllocatedEndDate());
  assertEquals(""String_Node_Str"",cubeInstance.getSegments().get(0).getLastBuildJobID());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
}","@Test public void testRebuildSegment() throws IOException {
  CubeInstance cubeInstance=cubeMgr.getCube(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  CubeSegment rebuildSegment=cubeMgr.appendSegments(cubeInstance,1386806400000L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.NEW).size());
  assertEquals(1,cubeInstance.getRebuildingSegments().size());
  assertEquals(1364688000000L,cubeInstance.getAllocatedStartDate());
  assertEquals(1386806400000L,cubeInstance.getAllocatedEndDate());
  System.out.println(""String_Node_Str"");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,rebuildSegment.getName(),""String_Node_Str"",System.currentTimeMillis(),111,222,333);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(1364688000000L,cubeInstance.getAllocatedStartDate());
  assertEquals(1386806400000L,cubeInstance.getAllocatedEndDate());
  assertEquals(""String_Node_Str"",cubeInstance.getSegments().get(0).getLastBuildJobID());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
}",0.4462569181473929
63135,"@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeManager cubeManager=CubeManager.getInstance(context.getConfig());
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  String sourceRecordsSize=executableManager.getOutput(getCreateFlatTableStepId()).getExtra().get(ExecutableConstants.SOURCE_RECORDS_SIZE);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsSize),""String_Node_Str"");
  long sourceSize=Long.parseLong(sourceRecordsSize);
  String sourceRecordsCount=executableManager.getOutput(getBaseCuboidStepId()).getExtra().get(ExecutableConstants.SOURCE_RECORDS_COUNT);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsCount),""String_Node_Str"");
  long sourceCount=Long.parseLong(sourceRecordsCount);
  long size=0;
  boolean segmentReady=true;
  if (!StringUtils.isBlank(getConvertToHfileStepId())) {
    String cubeSizeString=executableManager.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
    Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
    size=Long.parseLong(cubeSizeString) / 1024;
  }
 else {
    segmentReady=false;
  }
  segment.setLastBuildJobID(getCubingJobId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(size);
  segment.setSourceRecords(sourceCount);
  segment.setSourceRecordsSize(sourceSize);
  try {
    if (segmentReady) {
      cubeManager.promoteNewlyBuiltSegments(cube,segment);
    }
 else {
      cubeManager.updateCube(cube);
    }
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeManager cubeManager=CubeManager.getInstance(context.getConfig());
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  Output baseCuboidOutput=executableManager.getOutput(getBaseCuboidStepId());
  String sourceRecordsCount=baseCuboidOutput.getExtra().get(ExecutableConstants.SOURCE_RECORDS_COUNT);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsCount),""String_Node_Str"");
  long sourceCount=Long.parseLong(sourceRecordsCount);
  String sourceRecordsSize=baseCuboidOutput.getExtra().get(ExecutableConstants.SOURCE_RECORDS_SIZE);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsSize),""String_Node_Str"");
  long sourceSize=Long.parseLong(sourceRecordsSize);
  long size=0;
  boolean segmentReady=true;
  if (!StringUtils.isBlank(getConvertToHfileStepId())) {
    String cubeSizeString=executableManager.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
    Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
    size=Long.parseLong(cubeSizeString) / 1024;
  }
 else {
    segmentReady=false;
  }
  segment.setLastBuildJobID(getCubingJobId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(size);
  segment.setSourceRecords(sourceCount);
  segment.setSourceRecordsSize(sourceSize);
  try {
    if (segmentReady) {
      cubeManager.promoteNewlyBuiltSegments(cube,segment);
    }
 else {
      cubeManager.updateCube(cube);
    }
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.8300880234729261
63136,"private String buildSegment(String cubeName,long startDate,long endDate) throws Exception {
  CubeSegment segment=cubeManager.appendSegments(cubeManager.getCube(cubeName),startDate,endDate);
  CubingJobBuilder cubingJobBuilder=new CubingJobBuilder(jobEngineConfig);
  CubingJob job=cubingJobBuilder.buildJob(segment);
  jobService.addJob(job);
  waitForJob(job.getId());
  return job.getId();
}","private String buildSegment(String cubeName,long startDate,long endDate) throws Exception {
  CubeSegment segment=cubeManager.appendSegments(cubeManager.getCube(cubeName),endDate);
  CubingJobBuilder cubingJobBuilder=new CubingJobBuilder(jobEngineConfig);
  CubingJob job=cubingJobBuilder.buildJob(segment);
  jobService.addJob(job);
  waitForJob(job.getId());
  return job.getId();
}",0.9794344473007712
63137,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public JobInstance submitJob(CubeInstance cube,long startDate,long endDate,CubeBuildTypeEnum buildType,String submitter) throws IOException, JobException {
  final List<CubingJob> cubingJobs=listAllCubingJobs(cube.getName(),null,EnumSet.allOf(ExecutableState.class));
  for (  CubingJob job : cubingJobs) {
    if (job.getStatus() == ExecutableState.READY || job.getStatus() == ExecutableState.RUNNING) {
      throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
  }
  CubingJob job;
  CubingJobBuilder builder=new CubingJobBuilder(new JobEngineConfig(getConfig()));
  builder.setSubmitter(submitter);
  if (buildType == CubeBuildTypeEnum.BUILD) {
    if (cube.getDescriptor().hasHolisticCountDistinctMeasures() && cube.getSegments().size() > 0) {
      Pair<CubeSegment,CubeSegment> segs=getCubeManager().appendAndMergeSegments(cube,startDate,endDate);
      job=builder.buildAndMergeJob(segs.getFirst(),segs.getSecond());
    }
 else {
      CubeSegment newSeg=getCubeManager().appendSegments(cube,startDate,endDate);
      job=builder.buildJob(newSeg);
    }
  }
 else   if (buildType == CubeBuildTypeEnum.MERGE) {
    CubeSegment newSeg=getCubeManager().mergeSegments(cube,startDate,endDate);
    job=builder.mergeJob(newSeg);
  }
 else {
    throw new JobException(""String_Node_Str"" + buildType);
  }
  getExecutableManager().addJob(job);
  return parseToJobInstance(job);
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public JobInstance submitJob(CubeInstance cube,long startDate,long endDate,CubeBuildTypeEnum buildType,String submitter) throws IOException, JobException {
  final List<CubingJob> cubingJobs=listAllCubingJobs(cube.getName(),null,EnumSet.allOf(ExecutableState.class));
  for (  CubingJob job : cubingJobs) {
    if (job.getStatus() == ExecutableState.READY || job.getStatus() == ExecutableState.RUNNING) {
      throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
  }
  CubingJob job;
  CubingJobBuilder builder=new CubingJobBuilder(new JobEngineConfig(getConfig()));
  builder.setSubmitter(submitter);
  if (buildType == CubeBuildTypeEnum.BUILD) {
    if (cube.getDescriptor().hasHolisticCountDistinctMeasures() && cube.getSegments().size() > 0) {
      Pair<CubeSegment,CubeSegment> segs=getCubeManager().appendAndMergeSegments(cube,endDate);
      job=builder.buildAndMergeJob(segs.getFirst(),segs.getSecond());
    }
 else {
      CubeSegment newSeg=getCubeManager().appendSegments(cube,endDate);
      job=builder.buildJob(newSeg);
    }
  }
 else   if (buildType == CubeBuildTypeEnum.MERGE) {
    CubeSegment newSeg=getCubeManager().mergeSegments(cube,startDate,endDate);
    job=builder.mergeJob(newSeg);
  }
 else {
    throw new JobException(""String_Node_Str"" + buildType);
  }
  getExecutableManager().addJob(job);
  return parseToJobInstance(job);
}",0.899400399733511
63138,"@Before public void setUp() throws Exception {
  this.createTestMetadata();
  server=new Server(8080);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);
  context.setContextPath(""String_Node_Str"");
  server.setHandler(context);
  configA=KylinConfig.getInstanceFromEnv();
  configB=KylinConfig.getKylinConfigFromInputStream(KylinConfig.getKylinPropertiesAsInputSteam());
  configB.setMetadataUrl(tempTestMetadataUrl);
  context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler(){
    @Override public void handle(    String type,    String name,    String event){
      final CacheService cacheService=new CacheService(){
        @Override public KylinConfig getConfig(){
          return configB;
        }
      }
;
      Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
      Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
      final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
      logger.info(log);
switch (wipeEvent) {
case CREATE:
case UPDATE:
        cacheService.rebuildCache(wipeType,name);
      break;
case DROP:
    cacheService.removeCache(wipeType,name);
  break;
default :
throw new RuntimeException(""String_Node_Str"" + wipeEvent);
}
}
}
)),""String_Node_Str"");
server.start();
}","@Before public void setUp() throws Exception {
  this.createTestMetadata();
  server=new Server(7070);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);
  context.setContextPath(""String_Node_Str"");
  server.setHandler(context);
  configA=KylinConfig.getInstanceFromEnv();
  configB=KylinConfig.getKylinConfigFromInputStream(KylinConfig.getKylinPropertiesAsInputSteam());
  configB.setMetadataUrl(tempTestMetadataUrl);
  context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler(){
    @Override public void handle(    String type,    String name,    String event){
      final CacheService cacheService=new CacheService(){
        @Override public KylinConfig getConfig(){
          return configB;
        }
      }
;
      Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
      Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
      final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
      logger.info(log);
switch (wipeEvent) {
case CREATE:
case UPDATE:
        cacheService.rebuildCache(wipeType,name);
      break;
case DROP:
    cacheService.removeCache(wipeType,name);
  break;
default :
throw new RuntimeException(""String_Node_Str"" + wipeEvent);
}
}
}
)),""String_Node_Str"");
server.start();
}",0.9985443959243084
63139,"@Test public void testDictionary(){
  int n=100;
  Set<BigDecimal> set=Sets.newHashSet();
  NumberDictionaryBuilder<String> builder=new NumberDictionaryBuilder<String>(new StringBytesConverter());
  for (int i=0; i < n; i++) {
    String num=randNumber();
    builder.addValue(num);
    set.add(new BigDecimal(num));
  }
  List<BigDecimal> sorted=Lists.newArrayList();
  sorted.addAll(set);
  Collections.sort(sorted);
  NumberDictionary<String> dict=builder.build(0);
  for (int i=0; i < sorted.size(); i++) {
    String dictNum=dict.getValueFromId(i);
    System.out.println(sorted.get(i) + ""String_Node_Str"" + dictNum);
  }
  for (int i=0; i < sorted.size(); i++) {
    String dictNum=dict.getValueFromId(i);
    assertEquals(sorted.get(i),new BigDecimal(dictNum));
  }
  for (int i=0; i < n; i++) {
    String randStr=randNumber();
    BigDecimal rand=new BigDecimal(randStr);
    int binarySearch=Collections.binarySearch(sorted,rand);
    if (binarySearch >= 0)     continue;
    int insertion=-(binarySearch + 1);
    int expectedLowerId=insertion - 1;
    int expectedHigherId=insertion;
    if (expectedLowerId < 0) {
      try {
        dict.getIdFromValue(randStr,-1);
        fail();
      }
 catch (      IllegalArgumentException ex) {
      }
    }
 else {
      assertEquals(expectedLowerId,dict.getIdFromValue(randStr,-1));
    }
    if (expectedHigherId >= sorted.size()) {
      try {
        dict.getIdFromValue(randStr,1);
        fail();
      }
 catch (      IllegalArgumentException ex) {
      }
    }
 else {
      assertEquals(expectedHigherId,dict.getIdFromValue(randStr,1));
    }
  }
}","@Test public void testDictionary(){
  int n=100;
  Set<BigDecimal> set=Sets.newHashSet();
  NumberDictionaryBuilder<String> builder=new NumberDictionaryBuilder<String>(new StringBytesConverter());
  for (int i=0; i < n; i++) {
    String num=randNumber();
    if (set.add(new BigDecimal(num))) {
      builder.addValue(num);
    }
  }
  List<BigDecimal> sorted=Lists.newArrayList();
  sorted.addAll(set);
  Collections.sort(sorted);
  NumberDictionary<String> dict=builder.build(0);
  for (int i=0; i < sorted.size(); i++) {
    String dictNum=dict.getValueFromId(i);
    System.out.println(sorted.get(i) + ""String_Node_Str"" + dictNum);
  }
  for (int i=0; i < sorted.size(); i++) {
    String dictNum=dict.getValueFromId(i);
    assertEquals(sorted.get(i),new BigDecimal(dictNum));
  }
  for (int i=0; i < n; i++) {
    String randStr=randNumber();
    BigDecimal rand=new BigDecimal(randStr);
    int binarySearch=Collections.binarySearch(sorted,rand);
    if (binarySearch >= 0)     continue;
    int insertion=-(binarySearch + 1);
    int expectedLowerId=insertion - 1;
    int expectedHigherId=insertion;
    if (expectedLowerId < 0) {
      try {
        dict.getIdFromValue(randStr,-1);
        fail();
      }
 catch (      IllegalArgumentException ex) {
      }
    }
 else {
      assertEquals(expectedLowerId,dict.getIdFromValue(randStr,-1));
    }
    if (expectedHigherId >= sorted.size()) {
      try {
        dict.getIdFromValue(randStr,1);
        fail();
      }
 catch (      IllegalArgumentException ex) {
      }
    }
 else {
      assertEquals(expectedHigherId,dict.getIdFromValue(randStr,1));
    }
  }
}",0.9777914867365824
63140,"@Override protected void onExecuteStart(ExecutableContext executableContext){
  if (!jobService.getOutput(getId()).getExtra().containsKey(START_TIME)) {
    Map<String,String> info=Maps.newHashMap();
    info.put(START_TIME,Long.toString(System.currentTimeMillis()));
    jobService.updateJobOutput(getId(),ExecutableState.RUNNING,info,null);
    ;
  }
 else {
    jobService.updateJobOutput(getId(),ExecutableState.RUNNING,null,null);
  }
}","@Override protected void onExecuteStart(ExecutableContext executableContext){
  final Output output=jobService.getOutput(getId());
  if (output.getExtra().containsKey(START_TIME)) {
    final String mrJobId=output.getExtra().get(ExecutableConstants.MR_JOB_ID);
    if (mrJobId == null) {
      jobService.updateJobOutput(getId(),ExecutableState.RUNNING,null,null);
      return;
    }
    try {
      Job job=new Cluster(new Configuration()).getJob(JobID.forName(mrJobId));
      if (job.getJobState() == JobStatus.State.FAILED) {
        super.onExecuteStart(executableContext);
      }
 else {
        jobService.updateJobOutput(getId(),ExecutableState.RUNNING,null,null);
      }
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"");
      super.onExecuteStart(executableContext);
    }
catch (    InterruptedException e) {
      logger.warn(""String_Node_Str"");
      super.onExecuteStart(executableContext);
    }
  }
 else {
    super.onExecuteStart(executableContext);
  }
}",0.4347222222222222
63141,"public static void deployJobJars() throws IOException {
  Pair<File,File> files=getJobJarFiles();
  File jobJar=files.getFirst();
  File coprocessorJar=files.getSecond();
  File jobJarRemote=new File(config().getKylinJobJarPath());
  File jobJarLocal=new File(jobJar.getParentFile(),jobJarRemote.getName());
  if (jobJar.equals(jobJarLocal) == false) {
    FileUtils.copyFile(jobJar,jobJarLocal);
  }
  File coprocessorJarRemote=new File(config().getCoprocessorLocalJar());
  File coprocessorJarLocal=new File(coprocessorJar.getParentFile(),coprocessorJarRemote.getName());
  if (coprocessorJar.equals(coprocessorJarLocal) == false) {
    FileUtils.copyFile(coprocessorJar,coprocessorJarLocal);
  }
  CliCommandExecutor cmdExec=config().getCliCommandExecutor();
  cmdExec.copyFile(jobJarLocal.getAbsolutePath(),jobJarRemote.getParent());
  cmdExec.copyFile(coprocessorJar.getAbsolutePath(),coprocessorJarRemote.getParent());
}","public static void deployJobJars() throws IOException {
  Pair<File,File> files=getJobJarFiles();
  File originalJobJar=files.getFirst();
  File originalCoprocessorJar=files.getSecond();
  File targetJobJar=new File(config().getKylinJobJarPath());
  File jobJarRenamedAsTarget=new File(originalJobJar.getParentFile(),targetJobJar.getName());
  if (originalJobJar.equals(jobJarRenamedAsTarget) == false) {
    FileUtils.copyFile(originalJobJar,jobJarRenamedAsTarget);
  }
  File targetCoprocessorJar=new File(config().getCoprocessorLocalJar());
  File coprocessorJarRenamedAsTarget=new File(originalCoprocessorJar.getParentFile(),targetCoprocessorJar.getName());
  if (originalCoprocessorJar.equals(coprocessorJarRenamedAsTarget) == false) {
    FileUtils.copyFile(originalCoprocessorJar,coprocessorJarRenamedAsTarget);
  }
  CliCommandExecutor cmdExec=config().getCliCommandExecutor();
  cmdExec.copyFile(jobJarRenamedAsTarget.getAbsolutePath(),targetJobJar.getParent());
  cmdExec.copyFile(coprocessorJarRenamedAsTarget.getAbsolutePath(),targetCoprocessorJar.getParent());
}",0.5317341329335332
63142,"public HiveClient(){
  hiveConf=new HiveConf(HiveClient.class);
}","public HiveClient(Map<String,String> configMap){
  this();
  appendConfiguration(configMap);
}",0.5031446540880503
63143,"@Override public void map(KEYIN key,HCatRecord record,Context context) throws IOException, InterruptedException {
  try {
    int[] flatTableIndexes=intermediateTableDesc.getRowKeyColumnIndexes();
    HCatFieldSchema fieldSchema=null;
    for (    int i : factDictCols) {
      outputKey.set((short)i);
      fieldSchema=schema.get(flatTableIndexes[i]);
      Object fieldValue=record.get(fieldSchema.getName(),schema);
      if (fieldValue == null)       fieldValue=""String_Node_Str"";
      byte[] bytes=Bytes.toBytes(fieldValue.toString());
      outputValue.set(bytes,0,bytes.length);
      context.write(outputKey,outputValue);
    }
  }
 catch (  Exception ex) {
    handleErrorRecord(record,ex);
  }
}","@Override public void map(KEYIN key,HCatRecord record,Context context) throws IOException, InterruptedException {
  try {
    int[] flatTableIndexes=intermediateTableDesc.getRowKeyColumnIndexes();
    HCatFieldSchema fieldSchema=null;
    for (    int i : factDictCols) {
      outputKey.set((short)i);
      fieldSchema=schema.get(flatTableIndexes[i]);
      Object fieldValue=record.get(fieldSchema.getName(),schema);
      if (fieldValue == null)       continue;
      byte[] bytes=Bytes.toBytes(fieldValue.toString());
      outputValue.set(bytes,0,bytes.length);
      context.write(outputKey,outputValue);
    }
  }
 catch (  Exception ex) {
    handleErrorRecord(record,ex);
  }
}",0.9741750358680056
63144,"@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_TABLE_NAME);
    options.addOption(OPTION_OUTPUT_PATH);
    parseOptions(options,args);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    String tableName=getOptionValue(OPTION_TABLE_NAME).toUpperCase();
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    log.info(""String_Node_Str"" + job.getJobName() + ""String_Node_Str""+ tableName);
    MetadataManager metaMgr=MetadataManager.getInstance(KylinConfig.getInstanceFromEnv());
    TableDesc table=metaMgr.getTableDesc(tableName);
    job.getConfiguration().set(BatchConstants.TABLE_NAME,table.getIdentity());
    job.getConfiguration().set(BatchConstants.TABLE_COLUMNS,getColumns(table));
    setupMapInput();
    setupReduceOutput(output);
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
}","@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_TABLE_NAME);
    options.addOption(OPTION_II_NAME);
    options.addOption(OPTION_OUTPUT_PATH);
    parseOptions(options,args);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    String tableName=getOptionValue(OPTION_TABLE_NAME).toUpperCase();
    String iiName=getOptionValue(OPTION_II_NAME);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    log.info(""String_Node_Str"" + job.getJobName() + ""String_Node_Str""+ tableName);
    IIManager iiMgr=IIManager.getInstance(KylinConfig.getInstanceFromEnv());
    IIInstance ii=iiMgr.getII(iiName);
    job.getConfiguration().set(BatchConstants.TABLE_NAME,tableName);
    job.getConfiguration().set(BatchConstants.TABLE_COLUMNS,getColumns(ii));
    setupMapInput();
    setupReduceOutput(output);
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
}",0.813844714686623
63145,"private String getColumns(TableDesc table){
  StringBuilder buf=new StringBuilder();
  for (  ColumnDesc col : table.getColumns()) {
    if (buf.length() > 0)     buf.append(""String_Node_Str"");
    buf.append(col.getName());
  }
  return buf.toString();
}","private String getColumns(IIInstance ii){
  IIJoinedFlatTableDesc iiflat=new IIJoinedFlatTableDesc(ii.getDescriptor());
  StringBuilder buf=new StringBuilder();
  for (  IntermediateColumnDesc col : iiflat.getColumnList()) {
    if (buf.length() > 0)     buf.append(""String_Node_Str"");
    buf.append(col.getColumnName());
  }
  return buf.toString();
}",0.7960526315789473
63146,"@Override public void map(KEYIN key,HCatRecord record,Context context) throws IOException, InterruptedException {
  HCatFieldSchema fieldSchema=null;
  for (short i=0; i < columnSize; i++) {
    outputKey.set(i);
    fieldSchema=schema.get(i);
    Object fieldValue=record.get(fieldSchema.getName(),schema);
    byte[] bytes;
    if (fieldValue != null) {
      bytes=Bytes.toBytes(fieldValue.toString());
    }
 else {
      bytes=NULL_VALUE;
    }
    outputValue.set(bytes,0,bytes.length);
    context.write(outputKey,outputValue);
  }
}","@Override public void map(KEYIN key,HCatRecord record,Context context) throws IOException, InterruptedException {
  HCatFieldSchema fieldSchema=null;
  for (short i=0; i < columnSize; i++) {
    outputKey.set(i);
    fieldSchema=schema.get(i);
    Object fieldValue=record.get(fieldSchema.getName(),schema);
    if (fieldValue == null)     continue;
    byte[] bytes=Bytes.toBytes(fieldValue.toString());
    outputValue.set(bytes,0,bytes.length);
    context.write(outputKey,outputValue);
  }
}",0.672463768115942
63147,"private void setupMapInput(Path input,String inputFormat,String inputDelim) throws IOException {
  FileInputFormat.setInputPaths(job,input);
  File JarFile=new File(KylinConfig.getInstanceFromEnv().getKylinJobJarPath());
  if (JarFile.exists()) {
    job.setJar(KylinConfig.getInstanceFromEnv().getKylinJobJarPath());
  }
 else {
    job.setJarByClass(this.getClass());
  }
  if (""String_Node_Str"".equalsIgnoreCase(inputFormat) || ""String_Node_Str"".equalsIgnoreCase(inputFormat)) {
    job.setInputFormatClass(TextInputFormat.class);
  }
 else {
    job.setInputFormatClass(SequenceFileInputFormat.class);
  }
  if (""String_Node_Str"".equals(inputDelim)) {
    inputDelim=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(inputDelim)) {
    inputDelim=""String_Node_Str"";
  }
  if (inputDelim != null) {
    job.getConfiguration().set(BatchConstants.INPUT_DELIM,inputDelim);
  }
  job.setMapperClass(InvertedIndexMapper.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setMapOutputValueClass(ImmutableBytesWritable.class);
  job.setPartitionerClass(InvertedIndexPartitioner.class);
}","private void setupMapInput(String intermediateTable) throws IOException {
  File JarFile=new File(KylinConfig.getInstanceFromEnv().getKylinJobJarPath());
  if (JarFile.exists()) {
    job.setJar(KylinConfig.getInstanceFromEnv().getKylinJobJarPath());
  }
 else {
    job.setJarByClass(this.getClass());
  }
  String[] dbTableNames=HadoopUtil.parseHiveTableName(intermediateTable);
  HCatInputFormat.setInput(job,dbTableNames[0],dbTableNames[1]);
  job.setInputFormatClass(HCatInputFormat.class);
  job.setMapperClass(InvertedIndexMapper.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setMapOutputValueClass(ImmutableBytesWritable.class);
  job.setPartitionerClass(InvertedIndexPartitioner.class);
}",0.5987892129884425
63148,"@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_II_NAME);
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_INPUT_FORMAT);
    options.addOption(OPTION_INPUT_DELIM);
    options.addOption(OPTION_OUTPUT_PATH);
    parseOptions(options,args);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    String iiname=getOptionValue(OPTION_II_NAME);
    Path input=new Path(getOptionValue(OPTION_INPUT_PATH));
    String inputFormat=getOptionValue(OPTION_INPUT_FORMAT);
    String inputDelim=getOptionValue(OPTION_INPUT_DELIM);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    System.out.println(""String_Node_Str"" + job.getJobName());
    IIInstance ii=getII(iiname);
    short sharding=ii.getDescriptor().getSharding();
    setupMapInput(input,inputFormat,inputDelim);
    setupReduceOutput(output,sharding);
    attachMetadata(ii);
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
}","@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_II_NAME);
    options.addOption(OPTION_TABLE_NAME);
    options.addOption(OPTION_OUTPUT_PATH);
    parseOptions(options,args);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    String iiname=getOptionValue(OPTION_II_NAME);
    String intermediateTable=getOptionValue(OPTION_TABLE_NAME);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    System.out.println(""String_Node_Str"" + job.getJobName());
    IIInstance ii=getII(iiname);
    short sharding=ii.getDescriptor().getSharding();
    setupMapInput(intermediateTable);
    setupReduceOutput(output,sharding);
    attachMetadata(ii);
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
}",0.8499043977055449
63149,"@Override protected void setup(Context context) throws IOException {
  Configuration conf=context.getConfiguration();
  String inputDelim=conf.get(BatchConstants.INPUT_DELIM);
  this.delim=inputDelim == null ? -1 : inputDelim.codePointAt(0);
  this.splitter=new BytesSplitter(200,4096);
  KylinConfig config=AbstractHadoopJob.loadKylinPropsAndMetadata(conf);
  IIManager mgr=IIManager.getInstance(config);
  IIInstance ii=mgr.getII(conf.get(BatchConstants.CFG_II_NAME));
  IISegment seg=ii.getSegment(conf.get(BatchConstants.CFG_II_SEGMENT_NAME),SegmentStatusEnum.NEW);
  this.info=new TableRecordInfo(seg);
  this.rec=this.info.createTableRecord();
  outputKey=new LongWritable();
  outputValue=new ImmutableBytesWritable(rec.getBytes());
}","@Override protected void setup(Context context) throws IOException {
  Configuration conf=context.getConfiguration();
  KylinConfig config=AbstractHadoopJob.loadKylinPropsAndMetadata(conf);
  IIManager mgr=IIManager.getInstance(config);
  IIInstance ii=mgr.getII(conf.get(BatchConstants.CFG_II_NAME));
  IISegment seg=ii.getSegment(conf.get(BatchConstants.CFG_II_SEGMENT_NAME),SegmentStatusEnum.NEW);
  this.info=new TableRecordInfo(seg);
  this.rec=this.info.createTableRecord();
  outputKey=new LongWritable();
  outputValue=new ImmutableBytesWritable(rec.getBytes());
  schema=HCatInputFormat.getTableSchema(context.getConfiguration());
  fields=schema.getFields();
}",0.810772501771793
63150,"@Override public void map(KEYIN key,Text value,Context context) throws IOException, InterruptedException {
  if (delim == -1) {
    delim=splitter.detectDelim(value,info.getDigest().getColumnCount());
  }
  int nParts=splitter.split(value.getBytes(),value.getLength(),(byte)delim);
  SplittedBytes[] parts=splitter.getSplitBuffers();
  if (nParts != info.getDigest().getColumnCount()) {
    throw new RuntimeException(""String_Node_Str"" + parts.length + ""String_Node_Str""+ value.toString()+ ""String_Node_Str""+ info.getDigest().getColumnCount()+ ""String_Node_Str"");
  }
  rec.reset();
  for (int i=0; i < nParts; i++) {
    rec.setValueString(i,Bytes.toString(parts[i].value,0,parts[i].length));
  }
  outputKey.set(rec.getTimestamp());
  context.write(outputKey,outputValue);
}","@Override public void map(KEYIN key,HCatRecord record,Context context) throws IOException, InterruptedException {
  rec.reset();
  for (int i=0; i < fields.size(); i++) {
    Object fieldValue=record.get(i);
    rec.setValueString(i,fieldValue == null ? null : fieldValue.toString());
  }
  outputKey.set(rec.getTimestamp());
  context.write(outputKey,outputValue);
}",0.1872265966754155
63151,"/** 
 * Reload IIDesc from resource store It will be triggered by an desc update event.
 * @param name
 * @throws IOException
 */
public IIDesc reloadIIDesc(String name) throws IOException {
  String path=IIDesc.getIIDescResourcePath(name);
  IIDesc ndesc=loadIIDesc(path);
  iiDescMap.put(ndesc.getName(),ndesc);
  return ndesc;
}","/** 
 * Reload IIDesc from resource store It will be triggered by an desc update event.
 * @param name
 * @throws IOException
 */
public IIDesc reloadIIDesc(String name) throws IOException {
  String path=IIDesc.getIIDescResourcePath(name);
  IIDesc ndesc=loadIIDesc(path);
  iiDescMap.putLocal(ndesc.getName(),ndesc);
  return ndesc;
}",0.992503748125937
63152,"/** 
 * Wipe system cache
 * @param type {@link Broadcaster.TYPE}
 * @param event {@link Broadcaster.EVENT}
 * @param name
 * @return if the action success
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.PUT}) @ResponseBody public void wipeCache(@PathVariable String type,@PathVariable String event,@PathVariable String name) throws IOException {
  Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
  EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
  final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
  logger.debug(log);
switch (wipeType) {
case TABLE:
switch (wipeEvent) {
case CREATE:
case UPDATE:
      cubeMgmtService.getMetadataManager().reloadTableCache(name);
    break;
case DROP:
  throw new UnsupportedOperationException(log);
}
break;
case DATA_MODEL:
switch (wipeEvent) {
case CREATE:
case UPDATE:
cubeMgmtService.getMetadataManager().reloadDataModelDesc(name);
break;
case DROP:
throw new UnsupportedOperationException(log);
}
break;
case CUBE:
if (""String_Node_Str"".equalsIgnoreCase(name.toUpperCase())) {
cubeMgmtService.cleanDataCache();
break;
}
switch (wipeEvent) {
case CREATE:
case UPDATE:
cubeMgmtService.reloadCubeCache(name);
break;
case DROP:
cubeMgmtService.removeCubeCache(name);
break;
}
break;
case PROJECT:
if (""String_Node_Str"".equalsIgnoreCase(name.toUpperCase())) {
projectService.cleanDataCache();
break;
}
switch (wipeEvent) {
case CREATE:
case UPDATE:
projectService.reloadProjectCache(name);
break;
case DROP:
projectService.removeProjectCache(name);
break;
}
break;
default :
throw new UnsupportedOperationException(log);
}
}","/** 
 * Wipe system cache
 * @param type {@link Broadcaster.TYPE}
 * @param event {@link Broadcaster.EVENT}
 * @param name
 * @return if the action success
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.PUT}) @ResponseBody public void wipeCache(@PathVariable String type,@PathVariable String event,@PathVariable String name) throws IOException {
  Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
  EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
  final String log=""String_Node_Str"" + wipeType + ""String_Node_Str""+ wipeEvent+ ""String_Node_Str""+ name;
  logger.info(log);
switch (wipeType) {
case TABLE:
switch (wipeEvent) {
case CREATE:
case UPDATE:
      cubeMgmtService.getMetadataManager().reloadTableCache(name);
    break;
case DROP:
  throw new UnsupportedOperationException(log);
}
break;
case DATA_MODEL:
switch (wipeEvent) {
case CREATE:
case UPDATE:
cubeMgmtService.getMetadataManager().reloadDataModelDesc(name);
break;
case DROP:
throw new UnsupportedOperationException(log);
}
break;
case CUBE:
switch (wipeEvent) {
case CREATE:
case UPDATE:
cubeMgmtService.reloadCubeCache(name);
break;
case DROP:
cubeMgmtService.removeCubeCache(name);
break;
}
break;
case INVERTED_INDEX:
switch (wipeEvent) {
case CREATE:
case UPDATE:
cubeMgmtService.getIIDescManager().reloadIIDesc(name);
break;
case DROP:
cubeMgmtService.getIIDescManager().removeIIDescLocal(name);
break;
}
break;
case PROJECT:
switch (wipeEvent) {
case CREATE:
case UPDATE:
projectService.reloadProjectCache(name);
break;
case DROP:
projectService.removeProjectCache(name);
break;
}
break;
default :
throw new UnsupportedOperationException(log);
}
}",0.8698773556685612
63153,"private synchronized CubeInstance loadCubeInstance(String path) throws IOException {
  ResourceStore store=getStore();
  CubeInstance cubeInstance=null;
  try {
    cubeInstance=store.getResource(path,CubeInstance.class,CUBE_SERIALIZER);
    cubeInstance.setConfig(config);
    if (StringUtils.isBlank(cubeInstance.getName()))     throw new IllegalStateException(""String_Node_Str"");
    cubeMap.putLocal(cubeInstance.getName().toUpperCase(),cubeInstance);
    for (    CubeSegment segment : cubeInstance.getSegments()) {
      usedStorageLocation.add(segment.getName());
    }
    return cubeInstance;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + path,e);
    return null;
  }
}","private synchronized CubeInstance loadCubeInstance(String path) throws IOException {
  ResourceStore store=getStore();
  CubeInstance cubeInstance=null;
  try {
    cubeInstance=store.getResource(path,CubeInstance.class,CUBE_SERIALIZER);
    cubeInstance.setConfig(config);
    if (StringUtils.isBlank(cubeInstance.getName()))     throw new IllegalStateException(""String_Node_Str"");
    final String cubeName=cubeInstance.getName().toUpperCase();
    cubeMap.putLocal(cubeName,cubeInstance);
    for (    CubeSegment segment : cubeInstance.getSegments()) {
      usedStorageLocation.put(cubeName,segment.getStorageLocationIdentifier());
    }
    return cubeInstance;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + path,e);
    return null;
  }
}",0.7486338797814208
63154,"private String generateStorageLocation(){
  String namePrefix=getHBaseStorageLocationPrefix();
  String tableName=""String_Node_Str"";
  do {
    StringBuffer sb=new StringBuffer();
    sb.append(namePrefix);
    for (int i=0; i < HBASE_TABLE_LENGTH; i++) {
      int idx=(int)(Math.random() * ALPHA_NUM.length());
      sb.append(ALPHA_NUM.charAt(idx));
    }
    tableName=sb.toString();
  }
 while (this.usedStorageLocation.contains(tableName));
  return tableName;
}","private String generateStorageLocation(){
  String namePrefix=getHBaseStorageLocationPrefix();
  String tableName=""String_Node_Str"";
  do {
    StringBuffer sb=new StringBuffer();
    sb.append(namePrefix);
    Random ran=new Random();
    for (int i=0; i < HBASE_TABLE_LENGTH; i++) {
      sb.append(ALPHA_NUM.charAt(ran.nextInt(ALPHA_NUM.length())));
    }
    tableName=sb.toString();
  }
 while (this.usedStorageLocation.containsValue(tableName));
  return tableName;
}",0.8182784272051009
63155,"/** 
 * After cube deletion, remove cube related cache
 * @param cube
 */
public void removeCubeCache(CubeInstance cube){
  cubeMap.remove(cube.getName().toUpperCase());
  for (  CubeSegment segment : cube.getSegments()) {
    usedStorageLocation.remove(segment.getName());
  }
}","/** 
 * After cube deletion, remove cube related cache
 * @param cube
 */
public void removeCubeCache(CubeInstance cube){
  final String cubeName=cube.getName().toUpperCase();
  cubeMap.remove(cubeName);
  usedStorageLocation.removeAll(cubeName);
}",0.5654648956356736
63156,"public void removeCubeCache(String cubeName){
  CubeInstance cube=CubeManager.getInstance(this.getConfig()).getCube(cubeName);
  CubeManager.getInstance(this.getConfig()).removeCubeCache(cube);
}","public void removeCubeCache(String cubeName){
  CubeManager.getInstance(this.getConfig()).removeCubeCacheLocal(cubeName);
}",0.7169811320754716
63157,"@Before public void setup() throws Exception {
  super.setUp();
  jobSchedulerController=new JobController();
  jobSchedulerController.setJobService(jobService);
  cubeController=new CubeController();
  cubeController.setJobService(jobService);
  cubeController.setCubeService(cubeService);
  KylinConfig testConfig=getTestConfig();
  cubeManager=CubeManager.getInstance(testConfig);
  cubeDescManager=CubeDescManager.getInstance(testConfig);
  jobDAO=JobDAO.getInstance(testConfig);
}","@Before public void setup() throws Exception {
  super.setUp();
  jobSchedulerController=new JobController();
  jobSchedulerController.setJobService(jobService);
  cubeController=new CubeController();
  cubeController.setJobService(jobService);
  cubeController.setCubeService(cubeService);
  KylinConfig testConfig=getTestConfig();
  cubeManager=CubeManager.getInstance(testConfig);
  cubeDescManager=CubeDescManager.getInstance(testConfig);
  jobDAO=JobDao.getInstance(testConfig);
}",0.9958762886597938
63158,"@Test public void testBasics() throws IOException {
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(0L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  jobDAO.deleteJob(job);
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
}","@Test public void testBasics() throws IOException, PersistentException {
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(0L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  jobDAO.deleteJob(job.getId());
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
}",0.9823922282938676
63159,"@Test public void testBasics() throws IOException {
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(0L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  Map<String,String> output=jobSchedulerController.getStepOutput(job.getId(),0);
  Assert.assertNotNull(output);
  jobDAO.deleteJob(job);
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
}","@Test public void testBasics() throws IOException {
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(0L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  jobDAO.deleteJob(job);
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
}",0.9347198151357596
63160,"@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_TABLE_NAME);
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_INPUT_FORMAT);
    options.addOption(OPTION_INPUT_DELIM);
    options.addOption(OPTION_OUTPUT_PATH);
    parseOptions(options,args);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    String tableName=getOptionValue(OPTION_TABLE_NAME).toUpperCase();
    Path input=new Path(getOptionValue(OPTION_INPUT_PATH));
    String inputFormat=getOptionValue(OPTION_INPUT_FORMAT);
    String inputDelim=getOptionValue(OPTION_INPUT_DELIM);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    System.out.println(""String_Node_Str"" + job.getJobName());
    setupMapInput(input,inputFormat,inputDelim);
    setupReduceOutput(output);
    MetadataManager metaMgr=MetadataManager.getInstance(KylinConfig.getInstanceFromEnv());
    TableDesc table=metaMgr.getTableDesc(tableName);
    job.getConfiguration().set(BatchConstants.TABLE_NAME,tableName);
    job.getConfiguration().set(BatchConstants.TABLE_COLUMNS,getColumns(table));
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
}","@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_TABLE_NAME);
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_INPUT_FORMAT);
    options.addOption(OPTION_INPUT_DELIM);
    options.addOption(OPTION_OUTPUT_PATH);
    parseOptions(options,args);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    String tableName=getOptionValue(OPTION_TABLE_NAME).toUpperCase();
    Path input=new Path(getOptionValue(OPTION_INPUT_PATH));
    String inputFormat=getOptionValue(OPTION_INPUT_FORMAT);
    String inputDelim=getOptionValue(OPTION_INPUT_DELIM);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    System.out.println(""String_Node_Str"" + job.getJobName());
    MetadataManager metaMgr=MetadataManager.getInstance(KylinConfig.getInstanceFromEnv());
    TableDesc table=metaMgr.getTableDesc(tableName);
    job.getConfiguration().set(BatchConstants.TABLE_NAME,tableName);
    job.getConfiguration().set(BatchConstants.TABLE_COLUMNS,getColumns(table));
    setupMapInput(input,inputFormat,inputDelim);
    setupReduceOutput(output);
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
}",0.9406968124536694
63161,"@RequestMapping(value=""String_Node_Str"",method={RequestMethod.POST}) @ResponseBody public Map<String,String[]> loadHiveTable(@PathVariable String tables,@PathVariable String project) throws IOException {
  String[] arr=cubeMgmtService.reloadHiveTable(tables);
  cubeMgmtService.syncTableToProject(tables,project);
  Map<String,String[]> result=new HashMap<String,String[]>();
  result.put(""String_Node_Str"",arr);
  return result;
}","@RequestMapping(value=""String_Node_Str"",method={RequestMethod.POST}) @ResponseBody public Map<String,String[]> loadHiveTable(@PathVariable String tables,@PathVariable String project) throws IOException {
  String[] arr=cubeMgmtService.reloadHiveTable(tables);
  cubeMgmtService.syncTableToProject(tables,project);
  Map<String,String[]> result=new HashMap<String,String[]>();
  result.put(""String_Node_Str"",arr);
  result.put(""String_Node_Str"",new String[]{});
  return result;
}",0.9186813186813186
63162,"private String getCubingJobId(){
  return CUBING_JOB_ID;
}","private String getCubingJobId(){
  return getParam(CUBING_JOB_ID);
}",0.9206349206349206
63163,"private String getCubingJobId(){
  return CUBING_JOB_ID;
}","private String getCubingJobId(){
  return getParam(CUBING_JOB_ID);
}",0.9206349206349206
63164,"@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final String mapReduceJobClass=getMapReduceJobClass();
  String params=getMapReduceParams();
  Preconditions.checkNotNull(mapReduceJobClass);
  Preconditions.checkNotNull(params);
  try {
    Job job;
    final Map<String,String> extra=jobService.getOutput(getId()).getExtra();
    if (extra.containsKey(ExecutableConstants.MR_JOB_ID)) {
      job=new Cluster(new Configuration()).getJob(JobID.forName(extra.get(ExecutableConstants.MR_JOB_ID)));
      logger.info(""String_Node_Str"" + extra.get(ExecutableConstants.MR_JOB_ID + ""String_Node_Str""));
    }
 else {
      final Constructor<? extends AbstractHadoopJob> constructor=(Constructor<? extends AbstractHadoopJob>)Class.forName(mapReduceJobClass).getConstructor();
      final AbstractHadoopJob hadoopJob=constructor.newInstance();
      hadoopJob.setAsync(true);
      String[] args=params.trim().split(""String_Node_Str"");
      ToolRunner.run(hadoopJob,args);
      job=hadoopJob.getJob();
    }
    final StringBuilder output=new StringBuilder();
    final HadoopCmdOutput hadoopCmdOutput=new HadoopCmdOutput(job,output);
    String mrJobId=hadoopCmdOutput.getMrJobId();
    HadoopStatusChecker statusChecker=new HadoopStatusChecker(context.getConfig().getYarnStatusServiceUrl(),mrJobId,output);
    JobStepStatusEnum status=JobStepStatusEnum.NEW;
    do {
      JobStepStatusEnum newStatus=statusChecker.checkStatus();
      if (status == JobStepStatusEnum.WAITING && (newStatus == JobStepStatusEnum.FINISHED || newStatus == JobStepStatusEnum.ERROR || newStatus == JobStepStatusEnum.RUNNING)) {
        final long waitTime=System.currentTimeMillis() - getStartTime();
        addExtraInfo(MAP_REDUCE_WAIT_TIME,Long.toString(waitTime));
      }
      status=newStatus;
      jobService.addJobInfo(getId(),hadoopCmdOutput.getInfo());
      if (status.isComplete()) {
        hadoopCmdOutput.updateJobCounter();
        final Map<String,String> info=hadoopCmdOutput.getInfo();
        info.put(ExecutableConstants.SOURCE_RECORDS_COUNT,hadoopCmdOutput.getMapInputRecords());
        info.put(ExecutableConstants.HDFS_BYTES_WRITTEN,hadoopCmdOutput.getHdfsBytesWritten());
        jobService.addJobInfo(getId(),info);
        if (status == JobStepStatusEnum.FINISHED) {
          return new ExecuteResult(ExecuteResult.State.SUCCEED,output.toString());
        }
 else {
          return new ExecuteResult(ExecuteResult.State.FAILED,output.toString());
        }
      }
      Thread.sleep(context.getConfig().getYarnStatusCheckIntervalSeconds() * 1000);
    }
 while (!isStopped());
    return new ExecuteResult(ExecuteResult.State.STOPPED,output.toString());
  }
 catch (  ReflectiveOperationException e) {
    logger.error(""String_Node_Str"" + getParam(KEY_MR_JOB),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"" + getId(),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final String mapReduceJobClass=getMapReduceJobClass();
  String params=getMapReduceParams();
  Preconditions.checkNotNull(mapReduceJobClass);
  Preconditions.checkNotNull(params);
  try {
    Job job;
    final Map<String,String> extra=jobService.getOutput(getId()).getExtra();
    if (extra.containsKey(ExecutableConstants.MR_JOB_ID)) {
      job=new Cluster(new Configuration()).getJob(JobID.forName(extra.get(ExecutableConstants.MR_JOB_ID)));
      logger.info(""String_Node_Str"" + extra.get(ExecutableConstants.MR_JOB_ID + ""String_Node_Str""));
    }
 else {
      final Constructor<? extends AbstractHadoopJob> constructor=(Constructor<? extends AbstractHadoopJob>)Class.forName(mapReduceJobClass).getConstructor();
      final AbstractHadoopJob hadoopJob=constructor.newInstance();
      hadoopJob.setAsync(true);
      String[] args=params.trim().split(""String_Node_Str"");
      ToolRunner.run(hadoopJob,args);
      job=hadoopJob.getJob();
    }
    final StringBuilder output=new StringBuilder();
    final HadoopCmdOutput hadoopCmdOutput=new HadoopCmdOutput(job,output);
    String mrJobId=hadoopCmdOutput.getMrJobId();
    HadoopStatusChecker statusChecker=new HadoopStatusChecker(context.getConfig().getYarnStatusServiceUrl(),mrJobId,output);
    JobStepStatusEnum status=JobStepStatusEnum.NEW;
    while (!isDiscarded()) {
      JobStepStatusEnum newStatus=statusChecker.checkStatus();
      if (status == JobStepStatusEnum.WAITING && (newStatus == JobStepStatusEnum.FINISHED || newStatus == JobStepStatusEnum.ERROR || newStatus == JobStepStatusEnum.RUNNING)) {
        final long waitTime=System.currentTimeMillis() - getStartTime();
        addExtraInfo(MAP_REDUCE_WAIT_TIME,Long.toString(waitTime));
      }
      status=newStatus;
      jobService.addJobInfo(getId(),hadoopCmdOutput.getInfo());
      if (status.isComplete()) {
        hadoopCmdOutput.updateJobCounter();
        final Map<String,String> info=hadoopCmdOutput.getInfo();
        info.put(ExecutableConstants.SOURCE_RECORDS_COUNT,hadoopCmdOutput.getMapInputRecords());
        info.put(ExecutableConstants.HDFS_BYTES_WRITTEN,hadoopCmdOutput.getHdfsBytesWritten());
        jobService.addJobInfo(getId(),info);
        if (status == JobStepStatusEnum.FINISHED) {
          return new ExecuteResult(ExecuteResult.State.SUCCEED,output.toString());
        }
 else {
          return new ExecuteResult(ExecuteResult.State.FAILED,output.toString());
        }
      }
      Thread.sleep(context.getConfig().getYarnStatusCheckIntervalSeconds() * 1000);
    }
    return new ExecuteResult(ExecuteResult.State.DISCARDED,output.toString());
  }
 catch (  ReflectiveOperationException e) {
    logger.error(""String_Node_Str"" + getParam(KEY_MR_JOB),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"" + getId(),e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.9750204081632652
63165,"protected void onExecuteError(Throwable exception,ExecutableContext executableContext){
  jobService.addJobInfo(getId(),END_TIME,Long.toString(System.currentTimeMillis()));
  jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,exception.getLocalizedMessage());
}","protected void onExecuteError(Throwable exception,ExecutableContext executableContext){
  if (!isDiscarded()) {
    jobService.addJobInfo(getId(),END_TIME,Long.toString(System.currentTimeMillis()));
    jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,exception.getLocalizedMessage());
  }
}",0.9444444444444444
63166,"protected void onExecuteFinished(ExecuteResult result,ExecutableContext executableContext){
  jobService.addJobInfo(getId(),END_TIME,Long.toString(System.currentTimeMillis()));
  if (result.succeed()) {
    jobService.updateJobOutput(getId(),ExecutableState.SUCCEED,null,result.output());
  }
 else   if (result.state() == ExecuteResult.State.STOPPED) {
    jobService.updateJobOutput(getId(),ExecutableState.STOPPED,null,result.output());
  }
 else {
    jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,result.output());
  }
}","protected void onExecuteFinished(ExecuteResult result,ExecutableContext executableContext){
  jobService.addJobInfo(getId(),END_TIME,Long.toString(System.currentTimeMillis()));
  if (!isDiscarded()) {
    if (result.succeed()) {
      jobService.updateJobOutput(getId(),ExecutableState.SUCCEED,null,result.output());
    }
 else     if (result.state() == ExecuteResult.State.DISCARDED) {
      jobService.updateJobOutput(getId(),ExecutableState.DISCARDED,null,result.output());
    }
 else {
      jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,result.output());
    }
  }
}",0.7504424778761062
63167,"@Override protected void onExecuteFinished(ExecuteResult result,ExecutableContext executableContext){
  if (result.succeed()) {
    List<? extends Executable> jobs=getTasks();
    boolean allSucceed=true;
    boolean hasError=false;
    for (    Executable task : jobs) {
      final ExecutableState status=task.getStatus();
      if (status == ExecutableState.ERROR) {
        hasError=true;
      }
      if (status != ExecutableState.SUCCEED) {
        allSucceed=false;
      }
    }
    if (allSucceed) {
      jobService.updateJobOutput(getId(),ExecutableState.SUCCEED,null,null);
    }
 else     if (hasError) {
      jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,null);
    }
 else {
      jobService.updateJobOutput(getId(),ExecutableState.READY,null,null);
    }
  }
 else   if (result.state() == ExecuteResult.State.STOPPED) {
    if (getStatus() == ExecutableState.STOPPED) {
    }
 else {
      jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,null);
    }
  }
 else {
    jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,null);
  }
}","@Override protected void onExecuteFinished(ExecuteResult result,ExecutableContext executableContext){
  if (result.state() == ExecuteResult.State.DISCARDED) {
    jobService.updateJobOutput(getId(),ExecutableState.DISCARDED,null,null);
  }
 else   if (isDiscarded()) {
  }
 else   if (result.succeed()) {
    List<? extends Executable> jobs=getTasks();
    boolean allSucceed=true;
    boolean hasError=false;
    for (    Executable task : jobs) {
      final ExecutableState status=task.getStatus();
      if (status == ExecutableState.ERROR) {
        hasError=true;
      }
      if (status != ExecutableState.SUCCEED) {
        allSucceed=false;
      }
    }
    if (allSucceed) {
      jobService.updateJobOutput(getId(),ExecutableState.SUCCEED,null,null);
    }
 else     if (hasError) {
      jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,null);
    }
 else {
      jobService.updateJobOutput(getId(),ExecutableState.READY,null,null);
    }
  }
 else {
    jobService.updateJobOutput(getId(),ExecutableState.ERROR,null,null);
  }
}",0.7552447552447552
63168,"@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
  }
  if (isStopped()) {
    return new ExecuteResult(ExecuteResult.State.STOPPED,""String_Node_Str"");
  }
 else {
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
}","@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
  }
  if (isDiscarded()) {
    return new ExecuteResult(ExecuteResult.State.STOPPED,""String_Node_Str"");
  }
 else {
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
}",0.9834710743801652
63169,"@Test public void testDiscard() throws Exception {
  DefaultChainedExecutable job=new DefaultChainedExecutable();
  BaseTestExecutable task1=new SelfStopExecutable();
  job.addTask(task1);
  jobService.addJob(job);
  waitForJobStatus(job.getId(),ExecutableState.RUNNING,500);
  jobService.discardJob(job.getId());
  waitForJobFinish(job.getId());
  assertEquals(ExecutableState.DISCARDED,jobService.getOutput(job.getId()).getState());
  assertEquals(ExecutableState.DISCARDED,jobService.getOutput(task1.getId()).getState());
}","@Test public void testDiscard() throws Exception {
  DefaultChainedExecutable job=new DefaultChainedExecutable();
  BaseTestExecutable task1=new SelfStopExecutable();
  job.addTask(task1);
  jobService.addJob(job);
  waitForJobStatus(job.getId(),ExecutableState.RUNNING,500);
  jobService.discardJob(job.getId());
  waitForJobFinish(job.getId());
  assertEquals(ExecutableState.DISCARDED,jobService.getOutput(job.getId()).getState());
  assertEquals(ExecutableState.DISCARDED,jobService.getOutput(task1.getId()).getState());
  Thread.sleep(5000);
  System.out.println(job);
}",0.955495004541326
63170,"public CubingJob buildJob(){
  checkPreconditions();
  final int groupRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getNCuboidBuildLevels();
  final int totalRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getRowKeyColumns().length;
  CubingJob result=initialJob(""String_Node_Str"");
  final String jobId=result.getId();
  final CubeJoinedFlatTableDesc intermediateTableDesc=new CubeJoinedFlatTableDesc(segment.getCubeDesc(),this.segment);
  final String intermediateHiveTableName=getIntermediateHiveTableName(intermediateTableDesc,jobId);
  final String factDistinctColumnsPath=getFactDistinctColumnsPath(jobId);
  final String cuboidRootPath=getJobWorkingDir(jobId) + ""String_Node_Str"" + getCubeName()+ ""String_Node_Str"";
  final String cuboidPath=cuboidRootPath + ""String_Node_Str"";
  final String[] cuboidOutputTempPath=getCuboidOutputPaths(cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  final ShellExecutable intermediateHiveTableStep=createIntermediateHiveTableStep(intermediateTableDesc,jobId);
  result.addTask(intermediateHiveTableStep);
  result.addTask(createFactDistinctColumnsStep(intermediateHiveTableName,jobId));
  result.addTask(createBuildDictionaryStep(factDistinctColumnsPath));
  final MapReduceExecutable baseCuboidStep=createBaseCuboidStep(intermediateHiveTableName,cuboidOutputTempPath);
  result.addTask(baseCuboidStep);
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  result.addTask(createRangeRowkeyDistributionStep(cuboidPath));
  result.addTask(createCreateHTableStep());
  final MapReduceExecutable convertCuboidToHfileStep=createConvertCuboidToHfileStep(cuboidPath,jobId);
  result.addTask(convertCuboidToHfileStep);
  result.addTask(createBulkLoadStep(jobId));
  result.addTask(createUpdateCubeInfoStep(intermediateHiveTableStep.getId(),baseCuboidStep.getId(),convertCuboidToHfileStep.getId()));
  return result;
}","public CubingJob buildJob(){
  checkPreconditions();
  final int groupRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getNCuboidBuildLevels();
  final int totalRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getRowKeyColumns().length;
  CubingJob result=initialJob(""String_Node_Str"");
  final String jobId=result.getId();
  final CubeJoinedFlatTableDesc intermediateTableDesc=new CubeJoinedFlatTableDesc(segment.getCubeDesc(),this.segment);
  final String intermediateHiveTableName=getIntermediateHiveTableName(intermediateTableDesc,jobId);
  final String factDistinctColumnsPath=getFactDistinctColumnsPath(jobId);
  final String cuboidRootPath=getJobWorkingDir(jobId) + ""String_Node_Str"" + getCubeName()+ ""String_Node_Str"";
  final String cuboidPath=cuboidRootPath + ""String_Node_Str"";
  final String[] cuboidOutputTempPath=getCuboidOutputPaths(cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  final ShellExecutable intermediateHiveTableStep=createIntermediateHiveTableStep(intermediateTableDesc,jobId);
  result.addTask(intermediateHiveTableStep);
  result.addTask(createFactDistinctColumnsStep(intermediateHiveTableName,jobId));
  result.addTask(createBuildDictionaryStep(factDistinctColumnsPath));
  final MapReduceExecutable baseCuboidStep=createBaseCuboidStep(intermediateHiveTableName,cuboidOutputTempPath);
  result.addTask(baseCuboidStep);
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  result.addTask(createRangeRowkeyDistributionStep(cuboidPath));
  result.addTask(createCreateHTableStep());
  final MapReduceExecutable convertCuboidToHfileStep=createConvertCuboidToHfileStep(cuboidPath,jobId);
  result.addTask(convertCuboidToHfileStep);
  result.addTask(createBulkLoadStep(jobId));
  result.addTask(createUpdateCubeInfoStep(intermediateHiveTableStep.getId(),baseCuboidStep.getId(),convertCuboidToHfileStep.getId(),jobId));
  return result;
}",0.9985265225933202
63171,"private UpdateCubeInfoAfterBuildExecutable createUpdateCubeInfoStep(String createFlatTableStepId,String baseCuboidStepId,String convertToHFileStepId){
  final UpdateCubeInfoAfterBuildExecutable updateCubeInfoStep=new UpdateCubeInfoAfterBuildExecutable();
  updateCubeInfoStep.setName(ExecutableConstants.STEP_NAME_UPDATE_CUBE_INFO);
  updateCubeInfoStep.setCubeName(getCubeName());
  updateCubeInfoStep.setSegmentId(segment.getUuid());
  updateCubeInfoStep.setCreateFlatTableStepId(createFlatTableStepId);
  updateCubeInfoStep.setBaseCuboidStepId(baseCuboidStepId);
  updateCubeInfoStep.setConvertToHFileStepId(convertToHFileStepId);
  return updateCubeInfoStep;
}","private UpdateCubeInfoAfterBuildExecutable createUpdateCubeInfoStep(String createFlatTableStepId,String baseCuboidStepId,String convertToHFileStepId,String jobId){
  final UpdateCubeInfoAfterBuildExecutable updateCubeInfoStep=new UpdateCubeInfoAfterBuildExecutable();
  updateCubeInfoStep.setName(ExecutableConstants.STEP_NAME_UPDATE_CUBE_INFO);
  updateCubeInfoStep.setCubeName(getCubeName());
  updateCubeInfoStep.setSegmentId(segment.getUuid());
  updateCubeInfoStep.setCreateFlatTableStepId(createFlatTableStepId);
  updateCubeInfoStep.setBaseCuboidStepId(baseCuboidStepId);
  updateCubeInfoStep.setConvertToHFileStepId(convertToHFileStepId);
  updateCubeInfoStep.setCubingJobId(jobId);
  return updateCubeInfoStep;
}",0.9588447653429604
63172,"private UpdateCubeInfoAfterMergeExecutable createUpdateCubeInfoAfterMergeStep(List<String> mergingSegmentIds,String convertToHFileStepId){
  UpdateCubeInfoAfterMergeExecutable result=new UpdateCubeInfoAfterMergeExecutable();
  result.setName(ExecutableConstants.STEP_NAME_UPDATE_CUBE_INFO);
  result.setCubeName(getCubeName());
  result.setSegmentId(segment.getUuid());
  result.setMergingSegmentIds(mergingSegmentIds);
  result.setConvertToHFileStepId(convertToHFileStepId);
  return result;
}","private UpdateCubeInfoAfterMergeExecutable createUpdateCubeInfoAfterMergeStep(List<String> mergingSegmentIds,String convertToHFileStepId,String jobId){
  UpdateCubeInfoAfterMergeExecutable result=new UpdateCubeInfoAfterMergeExecutable();
  result.setName(ExecutableConstants.STEP_NAME_UPDATE_CUBE_INFO);
  result.setCubeName(getCubeName());
  result.setSegmentId(segment.getUuid());
  result.setMergingSegmentIds(mergingSegmentIds);
  result.setConvertToHFileStepId(convertToHFileStepId);
  result.setCubingJobId(jobId);
  return result;
}",0.9564375605033882
63173,"private String getPathToMerge(CubeSegment segment){
  return getJobWorkingDir(segment.getUuid()) + ""String_Node_Str"" + getCubeName()+ ""String_Node_Str"";
}","private String getPathToMerge(CubeSegment segment){
  return getJobWorkingDir(segment.getLastBuildJobID()) + ""String_Node_Str"" + getCubeName()+ ""String_Node_Str"";
}",0.9622641509433962
63174,"public CubingJob mergeJob(){
  checkPreconditions();
  CubingJob result=initialJob(""String_Node_Str"");
  final String jobId=result.getId();
  List<CubeSegment> mergingSegments=segment.getCubeInstance().getMergingSegments(segment);
  Preconditions.checkState(mergingSegments != null && mergingSegments.size() > 1,""String_Node_Str"");
  String[] cuboidPaths=new String[mergingSegments.size()];
  for (int i=0; i < mergingSegments.size(); i++) {
    cuboidPaths[i]=getPathToMerge(mergingSegments.get(i));
  }
  final String formattedPath=StringUtils.join(cuboidPaths,""String_Node_Str"");
  final String mergedCuboidPath=getJobWorkingDir(jobId) + ""String_Node_Str"" + getCubeName()+ ""String_Node_Str"";
  result.addTask(createMergeCuboidDataStep(formattedPath,mergedCuboidPath));
  result.addTask(createRangeRowkeyDistributionStep(mergedCuboidPath));
  result.addTask(createCreateHTableStep());
  final MapReduceExecutable convertCuboidToHfileStep=createConvertCuboidToHfileStep(mergedCuboidPath,jobId);
  result.addTask(convertCuboidToHfileStep);
  result.addTask(createBulkLoadStep(jobId));
  final List<String> mergingSegmentIds=Lists.transform(mergingSegments,new Function<CubeSegment,String>(){
    @Nullable @Override public String apply(    CubeSegment input){
      return input.getUuid();
    }
  }
);
  result.addTask(createUpdateCubeInfoAfterMergeStep(mergingSegmentIds,convertCuboidToHfileStep.getId()));
  return result;
}","public CubingJob mergeJob(){
  checkPreconditions();
  CubingJob result=initialJob(""String_Node_Str"");
  final String jobId=result.getId();
  List<CubeSegment> mergingSegments=segment.getCubeInstance().getMergingSegments(segment);
  Preconditions.checkState(mergingSegments != null && mergingSegments.size() > 1,""String_Node_Str"");
  String[] cuboidPaths=new String[mergingSegments.size()];
  for (int i=0; i < mergingSegments.size(); i++) {
    cuboidPaths[i]=getPathToMerge(mergingSegments.get(i));
  }
  final String formattedPath=StringUtils.join(cuboidPaths,""String_Node_Str"");
  final String mergedCuboidPath=getJobWorkingDir(jobId) + ""String_Node_Str"" + getCubeName()+ ""String_Node_Str"";
  result.addTask(createMergeCuboidDataStep(formattedPath,mergedCuboidPath));
  result.addTask(createRangeRowkeyDistributionStep(mergedCuboidPath));
  result.addTask(createCreateHTableStep());
  final MapReduceExecutable convertCuboidToHfileStep=createConvertCuboidToHfileStep(mergedCuboidPath,jobId);
  result.addTask(convertCuboidToHfileStep);
  result.addTask(createBulkLoadStep(jobId));
  final List<String> mergingSegmentIds=Lists.transform(mergingSegments,new Function<CubeSegment,String>(){
    @Nullable @Override public String apply(    CubeSegment input){
      return input.getUuid();
    }
  }
);
  result.addTask(createUpdateCubeInfoAfterMergeStep(mergingSegmentIds,convertCuboidToHfileStep.getId(),jobId));
  return result;
}",0.997902097902098
63175,"@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  String sourceRecordsSize=jobService.getOutput(getCreateFlatTableStepId()).getExtra().get(ExecutableConstants.SOURCE_RECORDS_SIZE);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsSize),""String_Node_Str"");
  long sourceSize=Long.parseLong(sourceRecordsSize);
  String sourceRecordsCount=jobService.getOutput(getBaseCuboidStepId()).getExtra().get(ExecutableConstants.SOURCE_RECORDS_COUNT);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsCount),""String_Node_Str"");
  long sourceCount=Long.parseLong(sourceRecordsCount);
  String cubeSizeString=jobService.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
  long size=Long.parseLong(cubeSizeString) / 1024;
  segment.setLastBuildJobID(getId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(size);
  segment.setSourceRecords(sourceCount);
  segment.setSourceRecordsSize(sourceSize);
  segment.setStatus(SegmentStatusEnum.READY);
  cube.setStatus(RealizationStatusEnum.READY);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  String sourceRecordsSize=jobService.getOutput(getCreateFlatTableStepId()).getExtra().get(ExecutableConstants.SOURCE_RECORDS_SIZE);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsSize),""String_Node_Str"");
  long sourceSize=Long.parseLong(sourceRecordsSize);
  String sourceRecordsCount=jobService.getOutput(getBaseCuboidStepId()).getExtra().get(ExecutableConstants.SOURCE_RECORDS_COUNT);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsCount),""String_Node_Str"");
  long sourceCount=Long.parseLong(sourceRecordsCount);
  String cubeSizeString=jobService.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
  long size=Long.parseLong(cubeSizeString) / 1024;
  segment.setLastBuildJobID(getCubingJobId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(size);
  segment.setSourceRecords(sourceCount);
  segment.setSourceRecordsSize(sourceSize);
  segment.setStatus(SegmentStatusEnum.READY);
  cube.setStatus(RealizationStatusEnum.READY);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.9972127593682256
63176,"@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  List<String> mergingSegmentIds=getMergingSegmentIds();
  if (mergingSegmentIds.isEmpty()) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"");
  }
  CubeSegment mergedSegment=cube.getSegmentById(getSegmentId());
  if (mergedSegment == null) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"" + getSegmentId());
  }
  String cubeSizeString=jobService.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
  long cubeSize=Long.parseLong(cubeSizeString) / 1024;
  List<CubeSegment> toBeRemoved=Lists.newArrayListWithExpectedSize(mergingSegmentIds.size());
  for (  CubeSegment segment : cube.getSegments()) {
    if (mergingSegmentIds.contains(segment.getUuid())) {
      toBeRemoved.add(segment);
    }
  }
  long sourceCount=0L;
  long sourceSize=0L;
  for (  CubeSegment segment : toBeRemoved) {
    sourceCount+=segment.getSourceRecords();
    sourceSize+=segment.getSourceRecordsSize();
  }
  mergedSegment.setSizeKB(cubeSize);
  mergedSegment.setSourceRecords(sourceCount);
  mergedSegment.setSourceRecordsSize(sourceSize);
  cube.getSegments().removeAll(toBeRemoved);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  List<String> mergingSegmentIds=getMergingSegmentIds();
  if (mergingSegmentIds.isEmpty()) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"");
  }
  CubeSegment mergedSegment=cube.getSegmentById(getSegmentId());
  if (mergedSegment == null) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"" + getSegmentId());
  }
  String cubeSizeString=jobService.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
  long cubeSize=Long.parseLong(cubeSizeString) / 1024;
  List<CubeSegment> toBeRemoved=Lists.newArrayListWithExpectedSize(mergingSegmentIds.size());
  for (  CubeSegment segment : cube.getSegments()) {
    if (mergingSegmentIds.contains(segment.getUuid())) {
      toBeRemoved.add(segment);
    }
  }
  long sourceCount=0L;
  long sourceSize=0L;
  for (  CubeSegment segment : toBeRemoved) {
    sourceCount+=segment.getSourceRecords();
    sourceSize+=segment.getSourceRecordsSize();
  }
  mergedSegment.setSizeKB(cubeSize);
  mergedSegment.setSourceRecords(sourceCount);
  mergedSegment.setSourceRecordsSize(sourceSize);
  mergedSegment.setLastBuildJobID(getCubingJobId());
  cube.getSegments().removeAll(toBeRemoved);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.9843055966834467
63177,"private CubeSegment findSegmentWithUuid(String jobID,CubeInstance cubeInstance){
  for (  CubeSegment segment : cubeInstance.getSegments()) {
    if (segment.getUuid().equalsIgnoreCase(jobID)) {
      return segment;
    }
  }
  throw new IllegalStateException(""String_Node_Str"" + jobID);
}","private CubeSegment findSegmentWithUuid(String jobID,CubeInstance cubeInstance){
  for (  CubeSegment segment : cubeInstance.getSegments()) {
    if (segment.getLastBuildJobID().equalsIgnoreCase(jobID)) {
      return segment;
    }
  }
  throw new IllegalStateException(""String_Node_Str"" + jobID);
}",0.9728813559322034
63178,"@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  List<String> mergingSegmentIds=getMergingSegmentIds();
  if (mergingSegmentIds.isEmpty()) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"");
  }
  CubeSegment mergedSegment=cube.getSegmentById(getSegmentId());
  if (mergedSegment == null) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"" + getSegmentId());
  }
  String cubeSizeString=jobService.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
  long cubeSize=Long.parseLong(cubeSizeString) / 1024;
  List<CubeSegment> toBeRemoved=Lists.newArrayListWithExpectedSize(mergingSegmentIds.size());
  for (  CubeSegment segment : cube.getSegments()) {
    if (mergingSegmentIds.contains(segment.getUuid())) {
      toBeRemoved.add(segment);
    }
  }
  long sourceCount=0L;
  long sourceSize=0L;
  for (  CubeSegment segment : toBeRemoved) {
    sourceCount+=segment.getSourceRecords();
    sourceSize+=segment.getSourceRecordsSize();
  }
  mergedSegment.setSizeKB(cubeSize);
  mergedSegment.setSourceRecords(sourceCount);
  mergedSegment.setSourceRecordsSize(sourceSize);
  mergedSegment.setLastBuildJobID(getCubingJobId());
  cube.getSegments().removeAll(toBeRemoved);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  List<String> mergingSegmentIds=getMergingSegmentIds();
  if (mergingSegmentIds.isEmpty()) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"");
  }
  CubeSegment mergedSegment=cube.getSegmentById(getSegmentId());
  if (mergedSegment == null) {
    return new ExecuteResult(ExecuteResult.State.FAILED,""String_Node_Str"" + getSegmentId());
  }
  String cubeSizeString=jobService.getOutput(getConvertToHfileStepId()).getExtra().get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
  long cubeSize=Long.parseLong(cubeSizeString) / 1024;
  List<CubeSegment> toBeRemoved=Lists.newArrayListWithExpectedSize(mergingSegmentIds.size());
  for (  CubeSegment segment : cube.getSegments()) {
    if (mergingSegmentIds.contains(segment.getUuid())) {
      toBeRemoved.add(segment);
    }
  }
  long sourceCount=0L;
  long sourceSize=0L;
  for (  CubeSegment segment : toBeRemoved) {
    sourceCount+=segment.getSourceRecords();
    sourceSize+=segment.getSourceRecordsSize();
  }
  mergedSegment.setSizeKB(cubeSize);
  mergedSegment.setSourceRecords(sourceCount);
  mergedSegment.setSourceRecordsSize(sourceSize);
  mergedSegment.setLastBuildJobID(getCubingJobId());
  mergedSegment.setStatus(SegmentStatusEnum.READY);
  mergedSegment.setLastBuildTime(System.currentTimeMillis());
  cube.getSegments().removeAll(toBeRemoved);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.9678329571106096
63179,"@Override public synchronized void init(JobEngineConfig jobEngineConfig) throws SchedulerException {
  if (!initialized) {
    initialized=true;
  }
 else {
    return;
  }
  this.jobEngineConfig=jobEngineConfig;
  RetryPolicy retryPolicy=new ExponentialBackoffRetry(1000,3);
  this.zkClient=CuratorFrameworkFactory.newClient(jobEngineConfig.getZookeeperString(),retryPolicy);
  this.zkClient.start();
  this.sharedLock=new InterProcessMutex(zkClient,schedulerId());
  boolean hasLock=false;
  try {
    hasLock=sharedLock.acquire(3,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
  if (!hasLock) {
    logger.warn(""String_Node_Str"");
    zkClient.close();
    return;
  }
  executableManager=ExecutableManager.getInstance(jobEngineConfig.getConfig());
  fetcherPool=Executors.newScheduledThreadPool(1);
  int corePoolSize=jobEngineConfig.getMaxConcurrentJobLimit();
  jobPool=new ThreadPoolExecutor(corePoolSize,corePoolSize,Long.MAX_VALUE,TimeUnit.DAYS,new SynchronousQueue<Runnable>());
  context=new DefaultContext(Maps.<String,Executable>newConcurrentMap(),jobEngineConfig.getConfig());
  for (  AbstractExecutable executable : executableManager.getAllExecutables()) {
    final ExecutableState status=executable.getStatus();
    if (status == ExecutableState.READY) {
      executableManager.updateJobOutput(executable.getId(),ExecutableState.ERROR,null,""String_Node_Str"");
    }
  }
  executableManager.updateAllRunningJobsToError();
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      logger.debug(""String_Node_Str"");
      try {
        shutdown();
      }
 catch (      SchedulerException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
);
  fetcherPool.scheduleAtFixedRate(new FetcherRunner(),10,ExecutableConstants.DEFAULT_SCHEDULER_INTERVAL_SECONDS,TimeUnit.SECONDS);
  hasStarted=true;
}","@Override public synchronized void init(JobEngineConfig jobEngineConfig) throws SchedulerException {
  if (!initialized) {
    initialized=true;
  }
 else {
    return;
  }
  this.jobEngineConfig=jobEngineConfig;
  RetryPolicy retryPolicy=new ExponentialBackoffRetry(1000,3);
  this.zkClient=CuratorFrameworkFactory.newClient(jobEngineConfig.getZookeeperString(),retryPolicy);
  this.zkClient.start();
  this.sharedLock=new InterProcessMutex(zkClient,schedulerId());
  boolean hasLock=false;
  try {
    hasLock=sharedLock.acquire(3,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
  if (!hasLock) {
    logger.warn(""String_Node_Str"");
    zkClient.close();
    return;
  }
  executableManager=ExecutableManager.getInstance(jobEngineConfig.getConfig());
  fetcherPool=Executors.newScheduledThreadPool(1);
  int corePoolSize=jobEngineConfig.getMaxConcurrentJobLimit();
  jobPool=new ThreadPoolExecutor(corePoolSize,corePoolSize,Long.MAX_VALUE,TimeUnit.DAYS,new SynchronousQueue<Runnable>());
  context=new DefaultContext(Maps.<String,Executable>newConcurrentMap(),jobEngineConfig.getConfig());
  for (  AbstractExecutable executable : executableManager.getAllExecutables()) {
    if (executable.getStatus() == ExecutableState.READY) {
      executableManager.updateJobOutput(executable.getId(),ExecutableState.ERROR,null,""String_Node_Str"");
    }
  }
  executableManager.updateAllRunningJobsToError();
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      logger.debug(""String_Node_Str"");
      try {
        shutdown();
      }
 catch (      SchedulerException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
);
  fetcherPool.scheduleAtFixedRate(new FetcherRunner(),10,ExecutableConstants.DEFAULT_SCHEDULER_INTERVAL_SECONDS,TimeUnit.SECONDS);
  hasStarted=true;
}",0.97514033680834
63180,"public void updateJobOutput(String jobId,ExecutableState newStatus,Map<String,String> info,String output){
  try {
    final JobOutputPO jobOutput=jobDao.getJobOutput(jobId);
    ExecutableState oldStatus=ExecutableState.valueOf(jobOutput.getStatus());
    if (newStatus != null && oldStatus == newStatus) {
      if (!ExecutableState.isValidStateTransfer(oldStatus,newStatus)) {
        throw new IllegalStateTranferException(""String_Node_Str"" + oldStatus + ""String_Node_Str""+ newStatus);
      }
      jobOutput.setStatus(newStatus.toString());
    }
    if (info != null) {
      jobOutput.setInfo(info);
    }
    if (output != null) {
      jobOutput.setContent(output);
    }
    jobDao.updateJobOutput(jobOutput);
    logger.info(""String_Node_Str"" + jobId + ""String_Node_Str""+ oldStatus+ ""String_Node_Str""+ newStatus);
  }
 catch (  PersistentException e) {
    logger.error(""String_Node_Str"" + jobId + ""String_Node_Str""+ newStatus.toString());
    throw new RuntimeException(e);
  }
}","public void updateJobOutput(String jobId,ExecutableState newStatus,Map<String,String> info,String output){
  try {
    final JobOutputPO jobOutput=jobDao.getJobOutput(jobId);
    ExecutableState oldStatus=ExecutableState.valueOf(jobOutput.getStatus());
    if (newStatus != null && oldStatus != newStatus) {
      if (!ExecutableState.isValidStateTransfer(oldStatus,newStatus)) {
        throw new IllegalStateTranferException(""String_Node_Str"" + oldStatus + ""String_Node_Str""+ newStatus);
      }
      jobOutput.setStatus(newStatus.toString());
    }
    if (info != null) {
      jobOutput.setInfo(info);
    }
    if (output != null) {
      jobOutput.setContent(output);
    }
    jobDao.updateJobOutput(jobOutput);
    logger.info(""String_Node_Str"" + jobId + ""String_Node_Str""+ oldStatus+ ""String_Node_Str""+ newStatus);
  }
 catch (  PersistentException e) {
    logger.error(""String_Node_Str"" + jobId + ""String_Node_Str""+ newStatus.toString());
    throw new RuntimeException(e);
  }
}",0.998991935483871
63181,"@Override public void apply(List<IRealization> realizations,OLAPContext olapContext){
  if (olapContext.isWeekMatch.containsKey(realizations.get(0))) {
    CubeInstance cube=(CubeInstance)realizations.get(0);
    adjustOLAPContext(cube,olapContext);
  }
}","@Override public void apply(List<IRealization> realizations,OLAPContext olapContext){
  if (realizations.size() > 0) {
    if (olapContext.isWeekMatch.containsKey(realizations.get(0))) {
      CubeInstance cube=(CubeInstance)realizations.get(0);
      adjustOLAPContext(cube,olapContext);
    }
  }
}",0.918918918918919
63182,"/** 
 * Get hive SQL of the cube
 * @param cubeName Cube Name
 * @return
 * @throws UnknownHostException
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) @ResponseBody public GeneralResponse getSql(@PathVariable String cubeName,@PathVariable String segmentName){
  String sql=null;
  try {
    sql=cubeService.getJobManager().previewFlatHiveQL(cubeName,segmentName);
  }
 catch (  JobException e) {
    logger.error(e.getLocalizedMessage(),e);
    throw new InternalErrorException(e.getLocalizedMessage());
  }
catch (  UnknownHostException e) {
    logger.error(e.getLocalizedMessage(),e);
    throw new InternalErrorException(e.getLocalizedMessage());
  }
  GeneralResponse repsonse=new GeneralResponse();
  repsonse.setProperty(""String_Node_Str"",sql);
  return repsonse;
}","/** 
 * Get hive SQL of the cube
 * @param cubeName Cube Name
 * @return
 * @throws UnknownHostException
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) @ResponseBody public GeneralResponse getSql(@PathVariable String cubeName,@PathVariable String segmentName){
  CubeInstance cube=cubeService.getCubeManager().getCube(cubeName);
  CubeDesc cubeDesc=cube.getDescriptor();
  CubeSegment cubeSegment=cube.getSegment(segmentName,SegmentStatusEnum.READY);
  CubeJoinedFlatTableDesc flatTableDesc=new CubeJoinedFlatTableDesc(cubeDesc,cubeSegment);
  String sql=JoinedFlatTable.generateSelectDataStatement(flatTableDesc);
  GeneralResponse repsonse=new GeneralResponse();
  repsonse.setProperty(""String_Node_Str"",sql);
  return repsonse;
}",0.5509056839475328
63183,"/** 
 * @param error
 * @return
 */
private String omitMessage(List<String> errors){
  StringBuffer buffer=new StringBuffer();
  for (Iterator<String> iterator=errors.iterator(); iterator.hasNext(); ) {
    String string=(String)iterator.next();
    buffer.append(string);
    buffer.append(""String_Node_Str"");
  }
  return buffer.toString();
}","/** 
 * @return
 */
private String omitMessage(List<String> errors){
  StringBuffer buffer=new StringBuffer();
  for (Iterator<String> iterator=errors.iterator(); iterator.hasNext(); ) {
    String string=(String)iterator.next();
    buffer.append(string);
    buffer.append(""String_Node_Str"");
  }
  return buffer.toString();
}",0.9761904761904762
63184,"public KylinConfig getKylinConfig(){
  KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  if (kylinConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return kylinConfig;
}","public final KylinConfig getKylinConfig(){
  KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  if (kylinConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return kylinConfig;
}",0.986046511627907
63185,"public CubeManager getCubeManager(){
  return CubeManager.getInstance(getConfig());
}","public final CubeManager getCubeManager(){
  return CubeManager.getInstance(getConfig());
}",0.9659090909090908
63186,"public ProjectManager getProjectManager(){
  return ProjectManager.getInstance(getConfig());
}","public final ProjectManager getProjectManager(){
  return ProjectManager.getInstance(getConfig());
}",0.9690721649484536
63187,"public MetadataManager getMetadataManager(){
  return MetadataManager.getInstance(getConfig());
}","public final MetadataManager getMetadataManager(){
  return MetadataManager.getInstance(getConfig());
}",0.97
63188,"public CubeDescManager getCubeDescManager(){
  return CubeDescManager.getInstance(getConfig());
}","public final CubeDescManager getCubeDescManager(){
  return CubeDescManager.getInstance(getConfig());
}",0.97
63189,"/** 
 * Update a cube status from disable to ready.
 * @return
 * @throws CubeIntegrityException
 * @throws IOException
 * @throws JobException
 */
@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeInstance enableCube(CubeInstance cube) throws IOException, CubeIntegrityException, JobException {
  String cubeName=cube.getName();
  RealizationStatusEnum ostatus=cube.getStatus();
  if (!cube.getStatus().equals(RealizationStatusEnum.DISABLED)) {
    throw new InternalErrorException(""String_Node_Str"" + cubeName + ""String_Node_Str""+ ostatus);
  }
  if (cube.getSegments(SegmentStatusEnum.READY).size() == 0) {
    throw new InternalErrorException(""String_Node_Str"" + cubeName + ""String_Node_Str"");
  }
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
    this.releaseAllSegments(cube);
  }
  cube.setStatus(RealizationStatusEnum.READY);
  try {
    return getCubeManager().updateCube(cube);
  }
 catch (  IOException e) {
    cube.setStatus(ostatus);
    throw e;
  }
}","/** 
 * Update a cube status from disable to ready.
 * @return
 * @throws CubeIntegrityException
 * @throws IOException
 * @throws JobException
 */
@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeInstance enableCube(CubeInstance cube) throws IOException, CubeIntegrityException, JobException {
  String cubeName=cube.getName();
  RealizationStatusEnum ostatus=cube.getStatus();
  if (!cube.getStatus().equals(RealizationStatusEnum.DISABLED)) {
    throw new InternalErrorException(""String_Node_Str"" + cubeName + ""String_Node_Str""+ ostatus);
  }
  if (cube.getSegments(SegmentStatusEnum.READY).size() == 0) {
    throw new InternalErrorException(""String_Node_Str"" + cubeName + ""String_Node_Str"");
  }
  final List<BuildCubeJob> buildCubeJobs=listAllCubingJobs(cube.getName(),null,EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING));
  if (!buildCubeJobs.isEmpty()) {
    throw new JobException(""String_Node_Str"");
  }
  if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
    this.releaseAllSegments(cube);
  }
  cube.setStatus(RealizationStatusEnum.READY);
  try {
    return getCubeManager().updateCube(cube);
  }
 catch (  IOException e) {
    cube.setStatus(ostatus);
    throw e;
  }
}",0.696217042414979
63190,"/** 
 * purge the cube
 * @throws IOException
 * @throws JobException
 * @throws UnknownHostException
 * @throws CubeIntegrityException
 */
private void releaseAllSegments(CubeInstance cube) throws IOException, JobException, UnknownHostException, CubeIntegrityException {
  for (  JobInstance jobInstance : this.getJobManager().listJobs(cube.getName(),null)) {
    if (jobInstance.getStatus() != JobStatusEnum.FINISHED && jobInstance.getStatus() != JobStatusEnum.DISCARDED) {
      for (      JobStep jobStep : jobInstance.getSteps()) {
        if (jobStep.getStatus() != JobStepStatusEnum.FINISHED) {
          jobStep.setStatus(JobStepStatusEnum.DISCARDED);
        }
      }
      JobDAO.getInstance(this.getConfig()).updateJobInstance(jobInstance);
    }
  }
  cube.getSegments().clear();
  CubeManager.getInstance(getConfig()).updateCube(cube);
}","/** 
 * purge the cube
 * @throws IOException
 * @throws JobException
 * @throws UnknownHostException
 * @throws CubeIntegrityException
 */
private void releaseAllSegments(CubeInstance cube) throws IOException, JobException, UnknownHostException, CubeIntegrityException {
  final List<BuildCubeJob> buildCubeJobs=listAllCubingJobs(cube.getName(),null);
  for (  BuildCubeJob buildCubeJob : buildCubeJobs) {
    final ExecutableState status=buildCubeJob.getStatus();
    if (status != ExecutableState.SUCCEED && status != ExecutableState.STOPPED && status != ExecutableState.DISCARDED) {
      getExecutableManager().stopJob(buildCubeJob.getId());
    }
  }
  cube.getSegments().clear();
  CubeManager.getInstance(getConfig()).updateCube(cube);
}",0.4085213032581453
63191,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws UnknownHostException, IOException, JobException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  try {
    if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
      this.releaseAllSegments(cube);
    }
    CubeDesc updatedCubeDesc=getCubeDescManager().updateCubeDesc(desc);
    int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
    logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
    ProjectManager projectManager=getProjectManager();
    if (!isCubeInProject(newProjectName,cube)) {
      String owner=SecurityContextHolder.getContext().getAuthentication().getName();
      ProjectInstance newProject=projectManager.moveRealizationToProject(RealizationType.CUBE,cube.getName(),newProjectName,owner);
      accessService.inherit(cube,newProject);
    }
    return updatedCubeDesc;
  }
 catch (  IOException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
catch (  CubeIntegrityException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws UnknownHostException, IOException, JobException {
  final List<BuildCubeJob> buildCubeJobs=listAllCubingJobs(cube.getName(),null,EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING));
  if (!buildCubeJobs.isEmpty()) {
    throw new JobException(""String_Node_Str"");
  }
  try {
    if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
      this.releaseAllSegments(cube);
    }
    CubeDesc updatedCubeDesc=getCubeDescManager().updateCubeDesc(desc);
    int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
    logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
    ProjectManager projectManager=getProjectManager();
    if (!isCubeInProject(newProjectName,cube)) {
      String owner=SecurityContextHolder.getContext().getAuthentication().getName();
      ProjectInstance newProject=projectManager.moveRealizationToProject(RealizationType.CUBE,cube.getName(),newProjectName,owner);
      accessService.inherit(cube,newProject);
    }
    return updatedCubeDesc;
  }
 catch (  IOException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
catch (  CubeIntegrityException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
}",0.8896434634974533
63192,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public void deleteCube(CubeInstance cube) throws IOException, JobException, CubeIntegrityException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str"");
    }
  }
  this.releaseAllSegments(cube);
  getCubeManager().dropCube(cube.getName(),true);
  accessService.clean(cube,true);
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public void deleteCube(CubeInstance cube) throws IOException, JobException, CubeIntegrityException {
  final List<BuildCubeJob> buildCubeJobs=listAllCubingJobs(cube.getName(),null,EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING));
  if (!buildCubeJobs.isEmpty()) {
    throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str"");
  }
  this.releaseAllSegments(cube);
  getCubeManager().dropCube(cube.getName(),true);
  accessService.clean(cube,true);
}",0.5276595744680851
63193,"@BeforeClass public static void setupResource() throws Exception {
  Authentication authentication=new TestingAuthenticationToken(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SecurityContextHolder.getContext().setAuthentication(authentication);
}","@BeforeClass public static void setupResource() throws Exception {
  staticCreateTestMetadata();
  Authentication authentication=new TestingAuthenticationToken(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SecurityContextHolder.getContext().setAuthentication(authentication);
}",0.9452554744525548
63194,"@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  String sourceRecordsSize=jobService.getJobInfo(getCreateFlatTableStepId()).get(ExecutableConstants.SOURCE_RECORDS_SIZE);
  Preconditions.checkState(sourceRecordsSize != null && sourceRecordsSize.equals(""String_Node_Str""),""String_Node_Str"");
  long sourceSize=Long.parseLong(sourceRecordsSize);
  String sourceRecordsCount=jobService.getJobInfo(getBaseCuboidStepId()).get(ExecutableConstants.SOURCE_RECORDS_COUNT);
  Preconditions.checkState(sourceRecordsCount != null && sourceRecordsCount.equals(""String_Node_Str""),""String_Node_Str"");
  long sourceCount=Long.parseLong(sourceRecordsCount);
  String cubeSizeString=jobService.getJobInfo(getConvertToHfileStepId()).get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(cubeSizeString != null && cubeSizeString.equals(""String_Node_Str""),""String_Node_Str"");
  long size=Long.parseLong(cubeSizeString) / 1024;
  segment.setLastBuildJobID(getId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(size);
  segment.setSourceRecords(sourceCount);
  segment.setSourceRecordsSize(sourceSize);
  segment.setStatus(SegmentStatusEnum.READY);
  cube.setStatus(RealizationStatusEnum.READY);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
 catch (  IOException e) {
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}","@Override protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  String sourceRecordsSize=jobService.getJobInfo(getCreateFlatTableStepId()).get(ExecutableConstants.SOURCE_RECORDS_SIZE);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsSize),""String_Node_Str"");
  long sourceSize=Long.parseLong(sourceRecordsSize);
  String sourceRecordsCount=jobService.getJobInfo(getBaseCuboidStepId()).get(ExecutableConstants.SOURCE_RECORDS_COUNT);
  Preconditions.checkState(StringUtils.isNotEmpty(sourceRecordsCount),""String_Node_Str"");
  long sourceCount=Long.parseLong(sourceRecordsCount);
  String cubeSizeString=jobService.getJobInfo(getConvertToHfileStepId()).get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(StringUtils.isNotEmpty(cubeSizeString),""String_Node_Str"");
  long size=Long.parseLong(cubeSizeString) / 1024;
  segment.setLastBuildJobID(getId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(size);
  segment.setSourceRecords(sourceCount);
  segment.setSourceRecordsSize(sourceSize);
  segment.setStatus(SegmentStatusEnum.READY);
  cube.setStatus(RealizationStatusEnum.READY);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED,""String_Node_Str"");
  }
 catch (  IOException e) {
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}",0.917743460447526
63195,"public SSHClient(String hostname,String username,String password,SSHLogger sshLogger){
  this.hostname=hostname;
  this.username=username;
  if (new File(password).exists()) {
    this.identityPath=new File(password).getAbsolutePath();
    this.password=null;
  }
 else {
    this.password=password;
    this.identityPath=null;
  }
  this.sshLogger=sshLogger;
}","public SSHClient(String hostname,String username,String password,SSHLogger sshLogger){
  this.hostname=hostname;
  this.username=username;
  if (password != null && new File(password).exists()) {
    this.identityPath=new File(password).getAbsolutePath();
    this.password=null;
  }
 else {
    this.password=password;
    this.identityPath=null;
  }
  this.sshLogger=sshLogger;
}",0.973045822102426
63196,"public CubeInstance createCube(String cubeName,String projectName,CubeDesc desc,String owner) throws IOException {
  logger.info(""String_Node_Str"" + projectName + ""String_Node_Str""+ cubeName+ ""String_Node_Str""+ desc.getName()+ ""String_Node_Str"");
  CubeInstance cube=CubeInstance.create(cubeName,projectName,desc);
  cube.setOwner(owner);
  saveResource(cube);
  ProjectManager.getInstance(config).updateRealizationToProject(RealizationType.CUBE,cubeName,projectName,owner);
  return cube;
}","public CubeInstance createCube(String cubeName,String projectName,CubeDesc desc,String owner) throws IOException {
  logger.info(""String_Node_Str"" + projectName + ""String_Node_Str""+ cubeName+ ""String_Node_Str""+ desc.getName()+ ""String_Node_Str"");
  CubeInstance cube=CubeInstance.create(cubeName,projectName,desc);
  cube.setOwner(owner);
  saveResource(cube);
  ProjectManager.getInstance(config).moveRealizationToProject(RealizationType.CUBE,cubeName,projectName,owner);
  return cube;
}",0.9918367346938776
63197,"@Test public void testProjectsLoadAfterProjectChange() throws IOException {
  CubeInstance cube=CubeManager.getInstance(getTestConfig()).getCube(""String_Node_Str"");
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).getRealizationsByTable(""String_Node_Str"",""String_Node_Str"").contains(cube));
  ProjectManager.getInstance(getTestConfig()).removeRealizationsFromProjects(RealizationType.CUBE,cube.getName());
  assertTrue(!ProjectManager.getInstance(this.getTestConfig()).getRealizationsByTable(""String_Node_Str"",""String_Node_Str"").contains(cube));
  ProjectManager.getInstance(getTestConfig()).updateRealizationToProject(RealizationType.CUBE,cube.getName(),""String_Node_Str"",""String_Node_Str"");
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).getRealizationsByTable(""String_Node_Str"",""String_Node_Str"").contains(cube));
}","@Test public void testProjectsLoadAfterProjectChange() throws IOException {
  CubeInstance cube=CubeManager.getInstance(getTestConfig()).getCube(""String_Node_Str"");
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).getRealizationsByTable(""String_Node_Str"",""String_Node_Str"").contains(cube));
  ProjectManager.getInstance(getTestConfig()).removeRealizationsFromProjects(RealizationType.CUBE,cube.getName());
  assertTrue(!ProjectManager.getInstance(this.getTestConfig()).getRealizationsByTable(""String_Node_Str"",""String_Node_Str"").contains(cube));
  ProjectManager.getInstance(getTestConfig()).moveRealizationToProject(RealizationType.CUBE,cube.getName(),""String_Node_Str"",""String_Node_Str"");
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).getRealizationsByTable(""String_Node_Str"",""String_Node_Str"").contains(cube));
}",0.9952662721893492
63198,"@Test public void testNewProject() throws Exception {
  int originalProjectCount=ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size();
  int originalCubeCount=CubeManager.getInstance(this.getTestConfig()).listAllCubes().size();
  int originalCubeCountInDefault=ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size();
  ResourceStore store=getStore();
  store.deleteResource(""String_Node_Str"");
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  CubeInstance createdCube=CubeManager.getInstance(this.getTestConfig()).createCube(""String_Node_Str"",""String_Node_Str"",desc,null);
  assertTrue(createdCube == CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
  assertTrue(ProjectManager.getInstance(getTestConfig()).listAllRealizations(""String_Node_Str"").contains(createdCube));
  System.out.println(JsonUtil.writeValueAsIndentString(createdCube));
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size() == originalProjectCount + 1);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").get(0).getName().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(CubeManager.getInstance(this.getTestConfig()).listAllCubes().size() == originalCubeCount + 1);
  ProjectManager.getInstance(this.getTestConfig()).updateRealizationToProject(RealizationType.CUBE,""String_Node_Str"",""String_Node_Str"",null);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == 0);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == originalCubeCountInDefault + 1);
  assertTrue(ProjectManager.getInstance(getTestConfig()).listAllRealizations(""String_Node_Str"").contains(createdCube));
  ProjectManager.getInstance(this.getTestConfig()).updateRealizationToProject(RealizationType.CUBE,""String_Node_Str"",""String_Node_Str"",null);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == 1);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == originalCubeCountInDefault);
  assertTrue(ProjectManager.getInstance(getTestConfig()).listAllRealizations(""String_Node_Str"").contains(createdCube));
  CubeInstance droppedCube=CubeManager.getInstance(this.getTestConfig()).dropCube(""String_Node_Str"",true);
  assertTrue(createdCube == droppedCube);
  assertNull(CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size() == originalProjectCount + 1);
  assertTrue(CubeManager.getInstance(this.getTestConfig()).listAllCubes().size() == originalCubeCount);
  ProjectManager.getInstance(this.getTestConfig()).dropProject(""String_Node_Str"");
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size() == originalProjectCount);
}","@Test public void testNewProject() throws Exception {
  int originalProjectCount=ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size();
  int originalCubeCount=CubeManager.getInstance(this.getTestConfig()).listAllCubes().size();
  int originalCubeCountInDefault=ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size();
  ResourceStore store=getStore();
  store.deleteResource(""String_Node_Str"");
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  CubeInstance createdCube=CubeManager.getInstance(this.getTestConfig()).createCube(""String_Node_Str"",""String_Node_Str"",desc,null);
  assertTrue(createdCube == CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
  assertTrue(ProjectManager.getInstance(getTestConfig()).listAllRealizations(""String_Node_Str"").contains(createdCube));
  System.out.println(JsonUtil.writeValueAsIndentString(createdCube));
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size() == originalProjectCount + 1);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").get(0).getName().equalsIgnoreCase(""String_Node_Str""));
  assertTrue(CubeManager.getInstance(this.getTestConfig()).listAllCubes().size() == originalCubeCount + 1);
  ProjectManager.getInstance(this.getTestConfig()).moveRealizationToProject(RealizationType.CUBE,""String_Node_Str"",""String_Node_Str"",null);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == 0);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == originalCubeCountInDefault + 1);
  assertTrue(ProjectManager.getInstance(getTestConfig()).listAllRealizations(""String_Node_Str"").contains(createdCube));
  ProjectManager.getInstance(this.getTestConfig()).moveRealizationToProject(RealizationType.CUBE,""String_Node_Str"",""String_Node_Str"",null);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == 1);
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllRealizations(""String_Node_Str"").size() == originalCubeCountInDefault);
  assertTrue(ProjectManager.getInstance(getTestConfig()).listAllRealizations(""String_Node_Str"").contains(createdCube));
  CubeInstance droppedCube=CubeManager.getInstance(this.getTestConfig()).dropCube(""String_Node_Str"",true);
  assertTrue(createdCube == droppedCube);
  assertNull(CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size() == originalProjectCount + 1);
  assertTrue(CubeManager.getInstance(this.getTestConfig()).listAllCubes().size() == originalCubeCount);
  ProjectManager.getInstance(this.getTestConfig()).dropProject(""String_Node_Str"");
  assertTrue(ProjectManager.getInstance(this.getTestConfig()).listAllProjects().size() == originalProjectCount);
}",0.9973890339425588
63199,"public ProjectInstance addTableDescToProject(String tables,String projectName) throws IOException {
  ProjectInstance projectInstance=getProject(projectName);
  String[] tokens=StringUtils.split(tables,""String_Node_Str"");
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].trim();
    if (StringUtils.isNotEmpty(token)) {
      projectInstance.addTable(token);
    }
  }
  List<TableDesc> exposedTables=listExposedTables(projectName);
  for (  TableDesc table : exposedTables) {
    projectInstance.addTable(table.getName());
  }
  saveResource(projectInstance);
  return projectInstance;
}","public ProjectInstance addTableDescToProject(String tables,String projectName) throws IOException {
  MetadataManager metaMgr=getMetadataManager();
  ProjectInstance projectInstance=getProject(projectName);
  String[] tokens=StringUtils.split(tables,""String_Node_Str"");
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].trim();
    TableDesc table=metaMgr.getTableDesc(token);
    if (table != null) {
      projectInstance.addTable(table.getIdentity());
    }
  }
  saveResource(projectInstance);
  return projectInstance;
}",0.5677083333333334
63200,"private RealizationRegistry(KylinConfig config) throws IOException {
  logger.info(""String_Node_Str"" + config);
  this.config=config;
  loadRealizations();
}","private RealizationRegistry(KylinConfig config) throws IOException {
  logger.info(""String_Node_Str"" + config);
  this.config=config;
}",0.9246575342465754
63201,"public static RealizationRegistry getInstance(KylinConfig config){
  RealizationRegistry r=CACHE.get(config);
  if (r != null) {
    return r;
  }
synchronized (RealizationRegistry.class) {
    r=CACHE.get(config);
    if (r != null) {
      return r;
    }
    try {
      r=new RealizationRegistry(config);
      CACHE.put(config,r);
      if (CACHE.size() > 1) {
        logger.warn(""String_Node_Str"");
      }
      return r;
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"" + config,e);
    }
  }
}","public static RealizationRegistry getInstance(KylinConfig config){
  RealizationRegistry r=CACHE.get(config);
  if (r != null) {
    return r;
  }
synchronized (RealizationRegistry.class) {
    r=CACHE.get(config);
    if (r != null) {
      return r;
    }
    try {
      r=new RealizationRegistry(config);
      CACHE.put(config,r);
      r.loadRealizations();
      if (CACHE.size() > 1) {
        logger.warn(""String_Node_Str"");
      }
      return r;
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"" + config,e);
    }
  }
}",0.9749552772808586
63202,"/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) @ResponseBody @Metered(name=""String_Node_Str"") public List<TableDesc> getHiveTables(@RequestParam(value=""String_Node_Str"",required=false) boolean withExt,@RequestParam(value=""String_Node_Str"",required=false) String project){
  long start=System.currentTimeMillis();
  List<TableDesc> tables=null;
  try {
    tables=cubeMgmtService.getProjectManager().listDefinedTablesInProject(project);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new InternalErrorException(e.getLocalizedMessage());
  }
  if (withExt) {
    tables=cloneTableDesc(tables);
  }
  long end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  return tables;
}","/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) @ResponseBody @Metered(name=""String_Node_Str"") public List<TableDesc> getHiveTables(@RequestParam(value=""String_Node_Str"",required=false) boolean withExt,@RequestParam(value=""String_Node_Str"",required=false) String project){
  long start=System.currentTimeMillis();
  List<TableDesc> tables=null;
  try {
    tables=cubeMgmtService.getProjectManager().listDefinedTables(project);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new InternalErrorException(e.getLocalizedMessage());
  }
  if (withExt) {
    tables=cloneTableDesc(tables);
  }
  long end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  return tables;
}",0.994912379875636
63203,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws UnknownHostException, IOException, JobException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  try {
    if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
      this.releaseAllSegments(cube);
    }
    CubeDesc updatedCubeDesc=getCubeDescManager().updateCubeDesc(desc);
    int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
    logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
    ProjectManager projectManager=getProjectManager();
    if (!isCubeInProject(newProjectName,cube)) {
      String owner=SecurityContextHolder.getContext().getAuthentication().getName();
      ProjectInstance newProject=projectManager.updateRealizationToProject(RealizationType.CUBE,cube.getName(),newProjectName,owner);
      accessService.inherit(cube,newProject);
    }
    return updatedCubeDesc;
  }
 catch (  IOException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
catch (  CubeIntegrityException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws UnknownHostException, IOException, JobException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  try {
    if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
      this.releaseAllSegments(cube);
    }
    CubeDesc updatedCubeDesc=getCubeDescManager().updateCubeDesc(desc);
    int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
    logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
    ProjectManager projectManager=getProjectManager();
    if (!isCubeInProject(newProjectName,cube)) {
      String owner=SecurityContextHolder.getContext().getAuthentication().getName();
      ProjectInstance newProject=projectManager.moveRealizationToProject(RealizationType.CUBE,cube.getName(),newProjectName,owner);
      accessService.inherit(cube,newProject);
    }
    return updatedCubeDesc;
  }
 catch (  IOException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
catch (  CubeIntegrityException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
}",0.9973597359735974
63204,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public String submitJob(CubeInstance cube,long startDate,long endDate,CubeBuildTypeEnum buildType,String submitter) throws IOException, JobException, InvalidJobInstanceException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ jobInstance.getUuid()+ ""String_Node_Str"");
    }
  }
  String uuid=null;
  try {
    List<CubeSegment> cubeSegments;
    if (buildType == RealizationBuildTypeEnum.BUILD) {
      cubeSegments=this.getCubeManager().appendSegments(cube,startDate,endDate);
    }
 else     if (buildType == RealizationBuildTypeEnum.MERGE) {
      cubeSegments=this.getCubeManager().mergeSegments(cube,startDate,endDate);
    }
 else {
      throw new JobException(""String_Node_Str"" + buildType);
    }
    List<JobInstance> jobs=Lists.newArrayListWithExpectedSize(cubeSegments.size());
    for (    CubeSegment segment : cubeSegments) {
      uuid=segment.getUuid();
      JobInstance job=getJobManager().createJob(cube.getName(),segment.getName(),segment.getUuid(),buildType,submitter);
      segment.setLastBuildJobID(uuid);
      jobs.add(job);
    }
    getCubeManager().updateCube(cube);
    for (    JobInstance job : jobs) {
      this.getJobManager().submitJob(job);
      permissionService.init(job,null);
      permissionService.inherit(job,cube);
    }
  }
 catch (  CubeIntegrityException e) {
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  return uuid;
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public String submitJob(CubeInstance cube,long startDate,long endDate,CubeBuildTypeEnum buildType,String submitter) throws IOException, JobException, InvalidJobInstanceException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ jobInstance.getUuid()+ ""String_Node_Str"");
    }
  }
  String uuid=null;
  try {
    List<CubeSegment> cubeSegments;
    if (buildType == CubeBuildTypeEnum.BUILD) {
      cubeSegments=this.getCubeManager().appendSegments(cube,startDate,endDate);
    }
 else     if (buildType == CubeBuildTypeEnum.MERGE) {
      cubeSegments=this.getCubeManager().mergeSegments(cube,startDate,endDate);
    }
 else {
      throw new JobException(""String_Node_Str"" + buildType);
    }
    List<JobInstance> jobs=Lists.newArrayListWithExpectedSize(cubeSegments.size());
    for (    CubeSegment segment : cubeSegments) {
      uuid=segment.getUuid();
      JobInstance job=getJobManager().createJob(cube.getName(),segment.getName(),segment.getUuid(),buildType,submitter);
      segment.setLastBuildJobID(uuid);
      jobs.add(job);
    }
    getCubeManager().updateCube(cube);
    for (    JobInstance job : jobs) {
      this.getJobManager().submitJob(job);
      permissionService.init(job,null);
      permissionService.inherit(job,cube);
    }
  }
 catch (  CubeIntegrityException e) {
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  return uuid;
}",0.9913892078071184
63205,"private void buildTableAliasMap(){
  tableAliasMap=new HashMap<String,String>();
  tableAliasMap.put(cubeDesc.getFactTable(),FACT_TABLE_ALIAS);
  int i=1;
  for (  DimensionDesc dim : cubeDesc.getDimensions()) {
    JoinDesc join=dim.getJoin();
    if (join != null) {
      tableAliasMap.put(dim.getTable(),LOOKUP_TABLE_ALAIS_PREFIX + i);
      i++;
    }
  }
}","private void buildTableAliasMap(){
  tableAliasMap=new HashMap<String,String>();
  tableAliasMap.put(cubeDesc.getFactTable().toUpperCase(),FACT_TABLE_ALIAS);
  int i=1;
  for (  DimensionDesc dim : cubeDesc.getDimensions()) {
    JoinDesc join=dim.getJoin();
    if (join != null) {
      tableAliasMap.put(dim.getTable().toUpperCase(),LOOKUP_TABLE_ALAIS_PREFIX + i);
      i++;
    }
  }
}",0.9627659574468084
63206,"@Override public String getTableAlias(String tableName){
  return tableAliasMap.get(tableName);
}","@Override public String getTableAlias(String tableName){
  return tableAliasMap.get(tableName.toUpperCase());
}",0.9326923076923076
63207,"@Override public void map(T key,HCatRecord value,Context context) throws IOException, InterruptedException {
  Integer columnSize=context.getConfiguration().getInt(HiveColumnCardinalityJob.KEY_TABLE_COLUMN_NUMBER,100);
  for (int m=0; m < columnSize; m++) {
    Object cell=value.get(m);
    if (counter < 5 && m < 3) {
      System.out.println(""String_Node_Str"" + m + ""String_Node_Str""+ counter+ ""String_Node_Str""+ String.valueOf(cell));
    }
    getHllc(m).add(Bytes.toBytes(String.valueOf(cell)));
  }
  counter++;
}","@Override public void map(T key,HCatRecord value,Context context) throws IOException, InterruptedException {
  Integer columnSize=context.getConfiguration().getInt(HiveColumnCardinalityJob.KEY_TABLE_COLUMN_NUMBER,100);
  for (int m=0; m < columnSize; m++) {
    Object cell=value.get(m);
    if (counter < 5 && m < 3) {
      System.out.println(""String_Node_Str"" + m + ""String_Node_Str""+ counter+ ""String_Node_Str""+ cell.toString());
    }
    getHllc(m).add(Bytes.toBytes(cell.toString()));
  }
  counter++;
}",0.9359223300970874
63208,"private void writeJobOutputResource(String path,JobOutputPO output) throws IOException {
  store.putResource(path,output,JOB_OUTPUT_SERIALIZER);
}","private long writeJobOutputResource(String path,JobOutputPO output) throws IOException {
  return store.putResource(path,output,JOB_OUTPUT_SERIALIZER);
}",0.9565217391304348
63209,"public void updateJobOutput(JobOutputPO output) throws PersistentException {
  try {
    Preconditions.checkArgument(output.getLastModified() > 0,""String_Node_Str"");
    writeJobOutputResource(pathOfJobOutput(output.getUuid()),output);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + output.getUuid(),e);
    throw new PersistentException(e);
  }
}","public void updateJobOutput(JobOutputPO output) throws PersistentException {
  try {
    Preconditions.checkArgument(output.getLastModified() > 0,""String_Node_Str"");
    final long ts=writeJobOutputResource(pathOfJobOutput(output.getUuid()),output);
    output.setLastModified(ts);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + output.getUuid(),e);
    throw new PersistentException(e);
  }
}",0.9411764705882352
63210,"private void addJobOutput(AbstractExecutable executable) throws PersistentException {
  jobDao.addJobOutput(executable.getJobOutput());
  if (executable instanceof DefaultChainedExecutable) {
    for (    AbstractExecutable subTask : ((DefaultChainedExecutable)executable).getTasks()) {
      addJob(subTask);
    }
  }
}","private void addJobOutput(AbstractExecutable executable) throws PersistentException {
  jobDao.addJobOutput(executable.getJobOutput());
  if (executable instanceof DefaultChainedExecutable) {
    for (    AbstractExecutable subTask : ((DefaultChainedExecutable)executable).getTasks()) {
      addJobOutput(subTask);
    }
  }
}",0.9907407407407408
63211,"@Override protected void onExecuteStart(ExecutableContext executableContext){
  this.setStatus(ExecutableStatus.RUNNING);
  jobService.updateJobStatus(this,ExecutableStatus.RUNNING);
}","@Override protected void onExecuteStart(ExecutableContext executableContext){
  jobService.updateJobStatus(this,ExecutableStatus.RUNNING);
}",0.8641975308641975
63212,"@Before public void setup() throws Exception {
  createTestMetadata();
  setFinalStatic(JobConstants.class.getField(""String_Node_Str""),10);
  jobService=DefaultJobService.getInstance(KylinConfig.getInstanceFromEnv());
  scheduler=DefaultScheduler.getInstance();
  scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));
}","@Before public void setup() throws Exception {
  createTestMetadata();
  setFinalStatic(JobConstants.class.getField(""String_Node_Str""),10);
  jobService=DefaultJobService.getInstance(KylinConfig.getInstanceFromEnv());
  scheduler=DefaultScheduler.getInstance();
  scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));
  if (!scheduler.hasStarted()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.8842105263157894
63213,"private IIDesc loadIIDesc(String path) throws IOException {
  ResourceStore store=getStore();
  logger.debug(""String_Node_Str"" + store.getReadableResourcePath(path));
  IIDesc ndesc=store.getResource(path,IIDesc.class,II_DESC_SERIALIZER);
  if (StringUtils.isBlank(ndesc.getName())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  ndesc.init(getMetadataManager());
  return ndesc;
}","private IIDesc loadIIDesc(String path) throws IOException {
  ResourceStore store=getStore();
  logger.info(""String_Node_Str"" + store.getReadableResourcePath(path));
  IIDesc ndesc=store.getResource(path,IIDesc.class,II_DESC_SERIALIZER);
  if (StringUtils.isBlank(ndesc.getName())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  ndesc.init(getMetadataManager());
  return ndesc;
}",0.9886792452830188
63214,"private void reloadAllIIDesc() throws IOException {
  ResourceStore store=getStore();
  logger.info(""String_Node_Str"" + store.getReadableResourcePath(ResourceStore.II_DESC_RESOURCE_ROOT));
  iiDescMap.clear();
  List<String> paths=store.collectResourceRecursively(ResourceStore.II_DESC_RESOURCE_ROOT,MetadataConstances.FILE_SURFIX);
  for (  String path : paths) {
    IIDesc desc;
    try {
      desc=loadIIDesc(path);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + path,e);
      continue;
    }
    if (path.equals(desc.getResourcePath()) == false) {
      logger.error(""String_Node_Str"" + path + ""String_Node_Str""+ desc+ ""String_Node_Str""+ desc.getResourcePath());
      continue;
    }
    if (iiDescMap.containsKey(desc.getName())) {
      logger.error(""String_Node_Str"" + desc.getName() + ""String_Node_Str""+ path);
      continue;
    }
    iiDescMap.putLocal(desc.getName(),desc);
  }
  logger.debug(""String_Node_Str"" + iiDescMap.size() + ""String_Node_Str"");
}","private void reloadAllIIDesc() throws IOException {
  ResourceStore store=getStore();
  logger.info(""String_Node_Str"" + store.getReadableResourcePath(ResourceStore.II_DESC_RESOURCE_ROOT));
  iiDescMap.clear();
  List<String> paths=store.collectResourceRecursively(ResourceStore.II_DESC_RESOURCE_ROOT,MetadataConstances.FILE_SURFIX);
  for (  String path : paths) {
    logger.info(""String_Node_Str"" + path);
    IIDesc desc;
    try {
      desc=loadIIDesc(path);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + path,e);
      continue;
    }
    if (!path.equals(desc.getResourcePath())) {
      logger.error(""String_Node_Str"" + path + ""String_Node_Str""+ desc+ ""String_Node_Str""+ desc.getResourcePath());
      continue;
    }
    if (iiDescMap.containsKey(desc.getName())) {
      logger.error(""String_Node_Str"" + desc.getName() + ""String_Node_Str""+ path);
      continue;
    }
    iiDescMap.putLocal(desc.getName(),desc);
  }
  logger.debug(""String_Node_Str"" + iiDescMap.size() + ""String_Node_Str"");
}",0.6752347998022739
63215,"public TableRecordInfo(IISegment iiSegment){
  seg=iiSegment;
  desc=seg.getIIInstance().getDescriptor();
  allColumns=desc.listAllColumns();
  nColumns=allColumns.size();
  dictionaries=new Dictionary<?>[nColumns];
  measureSerializers=new FixedLenMeasureCodec<?>[nColumns];
  DictionaryManager dictMgr=DictionaryManager.getInstance(desc.getConfig());
  for (  TblColRef tblColRef : desc.listAllColumns()) {
    ColumnDesc col=tblColRef.getColumn();
    int i=col.getZeroBasedIndex();
    if (desc.isMetricsCol(i)) {
      measureSerializers[i]=FixedLenMeasureCodec.get(col.getType());
    }
 else {
      String dictPath=seg.getDictResPath(tblColRef);
      try {
        dictionaries[i]=dictMgr.getDictionary(dictPath);
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"" + dictPath + ""String_Node_Str"",e);
      }
    }
  }
  digest=createDigest();
}","public TableRecordInfo(IISegment iiSegment){
  seg=iiSegment;
  desc=seg.getIIInstance().getDescriptor();
  allColumns=desc.listAllColumns();
  nColumns=allColumns.size();
  dictionaries=new Dictionary<?>[nColumns];
  measureSerializers=new FixedLenMeasureCodec<?>[nColumns];
  DictionaryManager dictMgr=DictionaryManager.getInstance(desc.getConfig());
  int index=0;
  for (  TblColRef tblColRef : desc.listAllColumns()) {
    ColumnDesc col=tblColRef.getColumn();
    if (desc.isMetricsCol(index)) {
      measureSerializers[index]=FixedLenMeasureCodec.get(col.getType());
    }
 else {
      String dictPath=seg.getDictResPath(tblColRef);
      try {
        dictionaries[index]=dictMgr.getDictionary(dictPath);
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"" + dictPath + ""String_Node_Str"",e);
      }
    }
    index++;
  }
  digest=createDigest();
}",0.9380925822643614
63216,"public IIDesc getIIDesc(String name){
  return iiDescMap.get(name);
}","public IIDesc getIIDesc(String name){
  return iiDescMap.get(name.toUpperCase());
}",0.9078947368421052
63217,"public static String generateCreateTableStatement(JoinedFlatTableDesc intermediateTableDesc,String storageDfsDir,String jobUUID){
  StringBuilder ddl=new StringBuilder();
  ddl.append(""String_Node_Str"" + intermediateTableDesc.getTableName(jobUUID) + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  for (int i=0; i < intermediateTableDesc.getColumnList().size(); i++) {
    IntermediateColumnDesc col=intermediateTableDesc.getColumnList().get(i);
    if (i > 0) {
      ddl.append(""String_Node_Str"");
    }
    ddl.append(col.getColumnName() + ""String_Node_Str"" + SqlHiveDataTypeMapping.getHiveDataType(col.getDataType())+ ""String_Node_Str"");
  }
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + storageDfsDir + ""String_Node_Str""+ intermediateTableDesc.getTableName(jobUUID)+ ""String_Node_Str""+ ""String_Node_Str"");
  return ddl.toString();
}","public static String generateCreateTableStatement(JoinedFlatTableDesc intermediateTableDesc,String storageDfsDir,String jobUUID){
  StringBuilder ddl=new StringBuilder();
  ddl.append(""String_Node_Str"" + intermediateTableDesc.getTableName(jobUUID) + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  for (int i=0; i < intermediateTableDesc.getColumnList().size(); i++) {
    IntermediateColumnDesc col=intermediateTableDesc.getColumnList().get(i);
    if (i > 0) {
      ddl.append(""String_Node_Str"");
    }
    String fullColumnName=(col.getTableName() + ""String_Node_Str"" + col.getColumnName()).replace(""String_Node_Str"",""String_Node_Str"");
    ddl.append(fullColumnName + ""String_Node_Str"" + SqlHiveDataTypeMapping.getHiveDataType(col.getDataType())+ ""String_Node_Str"");
  }
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + ""String_Node_Str"");
  ddl.append(""String_Node_Str"" + storageDfsDir + ""String_Node_Str""+ intermediateTableDesc.getTableName(jobUUID)+ ""String_Node_Str""+ ""String_Node_Str"");
  return ddl.toString();
}",0.9209302325581395
63218,"@Test public void testBasics() throws Exception {
  String content=FactTableGenerator.generate(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"");
  System.out.println(content);
  assertTrue(content.contains(""String_Node_Str""));
  assertTrue(content.contains(""String_Node_Str""));
  DeployUtil.overrideFactTableData(content,""String_Node_Str"",""String_Node_Str"");
}","@Test public void testBasics() throws Exception {
  String content=FactTableGenerator.generate(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"");
  System.out.println(content);
  assertTrue(content.contains(""String_Node_Str""));
  assertTrue(content.contains(""String_Node_Str""));
  DeployUtil.overrideFactTableData(content,""String_Node_Str"");
}",0.9763157894736842
63219,"private boolean hasOverlap(long startDate,long endDate,long anotherStartDate,long anotherEndDate){
  if (startDate >= endDate) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (anotherStartDate >= anotherEndDate) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (startDate <= anotherStartDate && anotherEndDate < endDate) {
    return true;
  }
  if (startDate < anotherEndDate && anotherEndDate <= endDate) {
    return true;
  }
  return false;
}","private boolean hasOverlap(long startDate,long endDate,long anotherStartDate,long anotherEndDate){
  if (startDate >= endDate) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (anotherStartDate >= anotherEndDate) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (startDate <= anotherStartDate && anotherStartDate < endDate) {
    return true;
  }
  if (startDate < anotherEndDate && anotherEndDate <= endDate) {
    return true;
  }
  return false;
}",0.9918533604887984
63220,"public List<CubeSegment> mergeSegments(CubeInstance cubeInstance,final long startDate,final long endDate) throws IOException, CubeIntegrityException {
  if (cubeInstance.getBuildingSegments().size() > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<CubeSegment> segments=new ArrayList<CubeSegment>();
  if (null != cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateColumn()) {
    List<CubeSegment> readySegments=cubeInstance.getSegment(SegmentStatusEnum.READY);
    if (readySegments.isEmpty()) {
      throw new CubeIntegrityException(""String_Node_Str"");
    }
    long start=Long.MIN_VALUE;
    long end=Long.MAX_VALUE;
    for (    CubeSegment readySegment : readySegments) {
      if (hasOverlap(startDate,endDate,readySegment.getDateRangeStart(),readySegment.getDateRangeEnd())) {
        if (start > readySegment.getDateRangeStart()) {
          start=readySegment.getDateRangeStart();
        }
        if (end < readySegment.getDateRangeEnd()) {
          end=readySegment.getDateRangeEnd();
        }
      }
    }
    segments.add(buildSegment(cubeInstance,start,end));
  }
 else {
    throw new CubeIntegrityException(""String_Node_Str"");
  }
  validateNewSegments(cubeInstance,RealizationBuildTypeEnum.MERGE,segments);
  CubeSegment newSeg=segments.get(0);
  List<CubeSegment> mergingSegments=cubeInstance.getMergingSegments(newSeg);
  this.makeDictForNewSegment(cubeInstance,newSeg,mergingSegments);
  this.makeSnapshotForNewSegment(cubeInstance,newSeg,mergingSegments);
  cubeInstance.getSegments().addAll(segments);
  Collections.sort(cubeInstance.getSegments());
  this.updateCube(cubeInstance);
  return segments;
}","public List<CubeSegment> mergeSegments(CubeInstance cubeInstance,final long startDate,final long endDate) throws IOException, CubeIntegrityException {
  if (cubeInstance.getBuildingSegments().size() > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<CubeSegment> segments=new ArrayList<CubeSegment>();
  if (null != cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateColumn()) {
    List<CubeSegment> readySegments=cubeInstance.getSegment(SegmentStatusEnum.READY);
    if (readySegments.isEmpty()) {
      throw new CubeIntegrityException(""String_Node_Str"");
    }
    long start=Long.MAX_VALUE;
    long end=Long.MIN_VALUE;
    for (    CubeSegment readySegment : readySegments) {
      if (hasOverlap(startDate,endDate,readySegment.getDateRangeStart(),readySegment.getDateRangeEnd())) {
        if (start > readySegment.getDateRangeStart()) {
          start=readySegment.getDateRangeStart();
        }
        if (end < readySegment.getDateRangeEnd()) {
          end=readySegment.getDateRangeEnd();
        }
      }
    }
    segments.add(buildSegment(cubeInstance,start,end));
  }
 else {
    throw new CubeIntegrityException(""String_Node_Str"");
  }
  validateNewSegments(cubeInstance,RealizationBuildTypeEnum.MERGE,segments);
  CubeSegment newSeg=segments.get(0);
  List<CubeSegment> mergingSegments=cubeInstance.getMergingSegments(newSeg);
  this.makeDictForNewSegment(cubeInstance,newSeg,mergingSegments);
  this.makeSnapshotForNewSegment(cubeInstance,newSeg,mergingSegments);
  cubeInstance.getSegments().addAll(segments);
  Collections.sort(cubeInstance.getSegments());
  this.updateCube(cubeInstance);
  return segments;
}",0.9826243259436788
63221,"private static List<String> extractTables(String database,BufferedReader reader,File metaTmpDir) throws IOException {
  File tableDescDir=new File(metaTmpDir,TABLE_FOLDER_NAME);
  File tableExdDir=new File(metaTmpDir,TABLE_EXD_FOLDER_NAME);
  mkdirs(tableDescDir);
  mkdirs(tableExdDir);
  List<TableDesc> tableDescList=new ArrayList<TableDesc>();
  List<Map<String,String>> tableAttrsList=new ArrayList<Map<String,String>>();
  getTables(database,reader,tableDescList,tableAttrsList);
  List<String> loadedTables=Lists.newArrayList();
  for (  TableDesc table : tableDescList) {
    File file=new File(tableDescDir,table.getIdentity().toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),table);
    loadedTables.add(table.getIdentity());
  }
  for (  Map<String,String> tableAttrs : tableAttrsList) {
    File file=new File(tableExdDir,tableAttrs.get(""String_Node_Str"").toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),tableAttrs);
  }
  return loadedTables;
}","private static List<String> extractTables(String database,BufferedReader reader,File metaTmpDir) throws IOException {
  File tableDescDir=new File(metaTmpDir,TABLE_FOLDER_NAME);
  File tableExdDir=new File(metaTmpDir,TABLE_EXD_FOLDER_NAME);
  mkdirs(tableDescDir);
  mkdirs(tableExdDir);
  List<TableDesc> tableDescList=new ArrayList<TableDesc>();
  List<Map<String,String>> tableAttrsList=new ArrayList<Map<String,String>>();
  getTables(database,reader,tableDescList,tableAttrsList);
  List<String> loadedTables=Lists.newArrayList();
  for (  TableDesc table : tableDescList) {
    File file=new File(tableDescDir,table.getIdentity().toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),table);
    loadedTables.add(table.getIdentity());
  }
  for (  Map<String,String> tableAttrs : tableAttrsList) {
    File file=new File(tableExdDir,(database + ""String_Node_Str"" + tableAttrs.get(""String_Node_Str"")).toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),tableAttrs);
  }
  return loadedTables;
}",0.984924623115578
63222,"public void addOrUpdateJobOutput(String uuid,JobOutputPO output) throws PersistentException {
  if (output == null) {
    return;
  }
  try {
    writeJobOutputResource(pathOfJobOutput(uuid),output);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new PersistentException(e);
  }
}","public void addOrUpdateJobOutput(String uuid,JobOutputPO output) throws PersistentException {
  if (output == null) {
    return;
  }
  try {
    deleteJobOutput(uuid);
    writeJobOutputResource(pathOfJobOutput(uuid),output);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new PersistentException(e);
  }
}",0.95952023988006
63223,"public JobOutputPO getJobOutput(String uuid) throws PersistentException {
  try {
    JobOutputPO jobOutputPO=readJobOutputResource(pathOfJobOutput(uuid));
    return jobOutputPO;
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new PersistentException(e);
  }
}","public JobOutputPO getJobOutput(String uuid) throws PersistentException {
  try {
    JobOutputPO result=readJobOutputResource(pathOfJobOutput(uuid));
    if (result == null) {
      result=new JobOutputPO();
      result.setStatus(ExecutableStatus.READY.toString());
      result.setUuid(uuid);
      return result;
    }
    return result;
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new PersistentException(e);
  }
}",0.5564304461942258
63224,"@Override public boolean isRunnable(){
  for (  Executable subTask : getExecutables()) {
    if (subTask.isRunnable()) {
      return true;
    }
  }
  return false;
}","@Override public boolean isRunnable(){
  return getStatus() == ExecutableStatus.READY;
}",0.5019607843137255
63225,"@Override public synchronized void init(JobEngineConfig jobEngineConfig) throws SchedulerException {
  if (!initialized) {
    initialized=true;
  }
 else {
    return;
  }
  this.jobEngineConfig=jobEngineConfig;
  jobService=DefaultJobService.getInstance(jobEngineConfig.getConfig());
  fetcherPool=Executors.newScheduledThreadPool(1);
  int corePoolSize=jobEngineConfig.getMaxConcurrentJobLimit();
  jobPool=new ThreadPoolExecutor(corePoolSize,corePoolSize,Long.MAX_VALUE,TimeUnit.DAYS,new SynchronousQueue<Runnable>());
  context=new DefaultContext(Maps.<String,Executable>newConcurrentMap());
  RetryPolicy retryPolicy=new ExponentialBackoffRetry(1000,3);
  this.zkClient=CuratorFrameworkFactory.newClient(jobEngineConfig.getZookeeperString(),retryPolicy);
  this.zkClient.start();
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      logger.debug(""String_Node_Str"");
      try {
        shutdown();
      }
 catch (      SchedulerException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
);
  fetcherPool.scheduleAtFixedRate(new FetcherRunner(),10,JobConstants.DEFAULT_SCHEDULER_INTERVAL_SECONDS,TimeUnit.SECONDS);
}","@Override public synchronized void init(JobEngineConfig jobEngineConfig) throws SchedulerException {
  if (!initialized) {
    initialized=true;
  }
 else {
    return;
  }
  this.jobEngineConfig=jobEngineConfig;
  jobService=DefaultJobService.getInstance(jobEngineConfig.getConfig());
  fetcherPool=Executors.newScheduledThreadPool(1);
  int corePoolSize=jobEngineConfig.getMaxConcurrentJobLimit();
  jobPool=new ThreadPoolExecutor(corePoolSize,corePoolSize,Long.MAX_VALUE,TimeUnit.DAYS,new SynchronousQueue<Runnable>());
  context=new DefaultContext(Maps.<String,Executable>newConcurrentMap());
  RetryPolicy retryPolicy=new ExponentialBackoffRetry(1000,3);
  this.zkClient=CuratorFrameworkFactory.newClient(jobEngineConfig.getZookeeperString(),retryPolicy);
  this.zkClient.start();
  for (  AbstractExecutable executable : jobService.getAllExecutables()) {
    if (executable.getStatus() == ExecutableStatus.RUNNING) {
      jobService.updateJobStatus(executable.getId(),ExecutableStatus.READY,null);
    }
  }
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      logger.debug(""String_Node_Str"");
      try {
        shutdown();
      }
 catch (      SchedulerException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
);
  fetcherPool.scheduleAtFixedRate(new FetcherRunner(),10,JobConstants.DEFAULT_SCHEDULER_INTERVAL_SECONDS,TimeUnit.SECONDS);
}",0.9107212475633528
63226,"private boolean acquireJobLock(String jobId,long timeoutSeconds) throws LockException {
  return !context.getRunningJobs().containsKey(jobId);
}","private boolean acquireJobLock(Executable executable,long timeoutSeconds) throws LockException {
  Map<String,Executable> runningJobs=context.getRunningJobs();
  if (runningJobs.size() >= jobEngineConfig.getMaxConcurrentJobLimit()) {
    return false;
  }
  if (runningJobs.containsKey(executable.getId())) {
    return false;
  }
  if (!executable.isRunnable()) {
    return false;
  }
  return true;
}",0.186471663619744
63227,"private String schedulerId() throws UnknownHostException {
  return ZOOKEEPER_LOCK_PATH + ""String_Node_Str"" + InetAddress.getLocalHost().getCanonicalHostName();
}","private String schedulerId(){
  try {
    String canonicalHostName=InetAddress.getLocalHost().getCanonicalHostName();
    return ZOOKEEPER_LOCK_PATH + ""String_Node_Str"" + canonicalHostName;
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(e);
  }
}",0.3888888888888889
63228,"@Override public void stateChanged(CuratorFramework client,ConnectionState newState){
}","@Override public void stateChanged(CuratorFramework client,ConnectionState newState){
  if ((newState == ConnectionState.SUSPENDED) || (newState == ConnectionState.LOST)) {
    releaseLock();
  }
}",0.6126760563380281
63229,"public ExecutableStatus getJobStatus(String uuid){
  try {
    JobOutputPO jobOutput=jobDao.getJobOutput(uuid);
    if (jobOutput == null) {
      return ExecutableStatus.READY;
    }
 else {
      return ExecutableStatus.valueOf(jobOutput.getStatus());
    }
  }
 catch (  PersistentException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new RuntimeException(e);
  }
}","public ExecutableStatus getJobStatus(String uuid){
  try {
    return ExecutableStatus.valueOf(jobDao.getJobOutput(uuid).getStatus());
  }
 catch (  PersistentException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new RuntimeException(e);
  }
}",0.7565891472868217
63230,"private void updateJobOutput(String uuid,JobOutputPO output){
  try {
    if (jobDao.getJobOutput(uuid) != null) {
      jobDao.deleteJobOutput(uuid);
    }
    jobDao.addOrUpdateJobOutput(uuid,output);
  }
 catch (  PersistentException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new RuntimeException(e);
  }
}","private void updateJobOutput(String uuid,JobOutputPO output){
  try {
    jobDao.addOrUpdateJobOutput(uuid,output);
  }
 catch (  PersistentException e) {
    logger.error(""String_Node_Str"" + uuid,e);
    throw new RuntimeException(e);
  }
}",0.8471001757469244
63231,"private void waitForJob(String jobId){
  while (true) {
    AbstractExecutable job=jobService.getJob(jobId);
    System.out.println(""String_Node_Str"" + jobId + ""String_Node_Str""+ job.getStatus());
    if (job.getStatus() == ExecutableStatus.SUCCEED || job.getStatus() == ExecutableStatus.ERROR) {
      break;
    }
 else {
      try {
        Thread.sleep(30000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
}","private void waitForJob(String jobId){
  while (true) {
    AbstractExecutable job=jobService.getJob(jobId);
    System.out.println(""String_Node_Str"" + jobId + ""String_Node_Str""+ job.getStatus());
    if (job.getStatus() == ExecutableStatus.SUCCEED || job.getStatus() == ExecutableStatus.ERROR) {
      break;
    }
 else {
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9349775784753364
63232,"@SuppressWarnings(""String_Node_Str"") private void testSimpleLeftJoinCube() throws Exception {
  DeployUtil.prepareTestData(""String_Node_Str"",""String_Node_Str"");
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateStart;
  long dateEnd;
  ArrayList<String> jobs=new ArrayList<String>();
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  dateStart=cubeMgr.getCube(""String_Node_Str"").getDescriptor().getCubePartitionDesc().getPartitionDateStart();
  dateEnd=f.parse(""String_Node_Str"").getTime();
  jobs.addAll(this.submitJob(""String_Node_Str"",dateStart,dateEnd,CubeBuildTypeEnum.BUILD));
  dateStart=cubeMgr.getCube(""String_Node_Str"").getDescriptor().getCubePartitionDesc().getPartitionDateStart();
  dateEnd=f.parse(""String_Node_Str"").getTime();
  jobs.addAll(this.submitJob(""String_Node_Str"",dateStart,dateEnd,CubeBuildTypeEnum.BUILD));
  waitCubeBuilt(jobs);
}","@SuppressWarnings(""String_Node_Str"") private void testSimpleLeftJoinCube() throws Exception {
  DeployUtil.prepareTestData(""String_Node_Str"",""String_Node_Str"");
  SimpleDateFormat f=new SimpleDateFormat(""String_Node_Str"");
  f.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  long dateStart;
  long dateEnd;
  ArrayList<String> jobs=new ArrayList<String>();
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  dateStart=cubeMgr.getCube(""String_Node_Str"").getDescriptor().getCubePartitionDesc().getPartitionDateStart();
  dateEnd=f.parse(""String_Node_Str"").getTime();
  jobs.addAll(this.submitJob(""String_Node_Str"",dateStart,dateEnd,RealizationBuildTypeEnum.BUILD));
  dateStart=cubeMgr.getCube(""String_Node_Str"").getDescriptor().getCubePartitionDesc().getPartitionDateStart();
  dateEnd=f.parse(""String_Node_Str"").getTime();
  jobs.addAll(this.submitJob(""String_Node_Str"",dateStart,dateEnd,RealizationBuildTypeEnum.BUILD));
  waitCubeBuilt(jobs);
}",0.9846782431052092
63233,"@BeforeClass public static void setupBeforeClass() throws Exception {
  staticCreateTestMetadata();
  TEST_UTIL=new HBaseTestingUtility();
  CONF=TEST_UTIL.getConfiguration();
  CONF.setStrings(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,IIEndpoint.class.getName());
  TEST_UTIL.startMiniCluster();
  mockIIHtable();
  hconn=HConnectionManager.createConnection(CONF);
}","@BeforeClass public static void setupBeforeClass() throws Exception {
  staticCreateTestMetadata(SANDBOX_TEST_DATA);
  TEST_UTIL=new HBaseTestingUtility();
  CONF=TEST_UTIL.getConfiguration();
  CONF.setStrings(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,IIEndpoint.class.getName());
  TEST_UTIL.startMiniCluster();
  mockIIHtable();
  hconn=HConnectionManager.createConnection(CONF);
}",0.9774834437086092
63234,"@Before public void setup() throws Exception {
  super.setUp();
  jobSchedulerController=new JobController();
  jobSchedulerController.setJobService(jobService);
  cubeController=new CubeController();
  cubeController.setJobService(jobService);
  cubeController.setCubeService(cubeService);
}","@Before public void setup() throws Exception {
  super.setUp();
  jobSchedulerController=new JobController();
  jobSchedulerController.setJobService(jobService);
  cubeController=new CubeController();
  cubeController.setJobService(jobService);
  cubeController.setCubeService(cubeService);
  KylinConfig testConfig=getTestConfig();
  cubeManager=CubeManager.getInstance(testConfig);
  cubeDescManager=CubeDescManager.getInstance(testConfig);
  jobDAO=JobDAO.getInstance(testConfig);
}",0.7516087516087516
63235,"@Test public void testBasics() throws IOException {
  KylinConfig testConfig=getTestConfig();
  CubeManager cubeManager=CubeManager.getInstance(testConfig);
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
  CubeDescManager cubeDescManager=CubeDescManager.getInstance(testConfig);
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(0L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  Map<String,String> output=jobSchedulerController.getStepOutput(job.getId(),0);
  Assert.assertNotNull(output);
  JobDAO.getInstance(testConfig).deleteJob(job);
}","@Test public void testBasics() throws IOException {
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(0L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  Map<String,String> output=jobSchedulerController.getStepOutput(job.getId(),0);
  Assert.assertNotNull(output);
  jobDAO.deleteJob(job);
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
}",0.16015625
63236,"@Before public void setUp() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  ProjectManager.removeInstance(this.getTestConfig());
  cubeManager=CubeManager.getInstance(this.getTestConfig());
}","@Before public void setUp() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  CubeRealizationManager.removeInstance(this.getTestConfig());
  cubeManager=CubeManager.getInstance(this.getTestConfig());
}",0.9639344262295082
63237,"@Test public void testCreateAndDrop() throws Exception {
  ResourceStore store=getStore();
  store.deleteResource(""String_Node_Str"");
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  CubeInstance createdCube=CubeManager.getInstance(this.getTestConfig()).createCube(""String_Node_Str"",ProjectInstance.DEFAULT_PROJECT_NAME,desc,null);
  assertTrue(createdCube == CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
  assertTrue(ProjectManager.getInstance(getTestConfig()).listAllCubes(ProjectInstance.DEFAULT_PROJECT_NAME).contains(createdCube));
  CubeInstance droppedCube=CubeManager.getInstance(this.getTestConfig()).dropCube(""String_Node_Str"",true);
  assertTrue(createdCube == droppedCube);
  assertTrue(!ProjectManager.getInstance(getTestConfig()).listAllCubes(ProjectInstance.DEFAULT_PROJECT_NAME).contains(droppedCube));
  assertNull(CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
}","@Test public void testCreateAndDrop() throws Exception {
  ResourceStore store=getStore();
  store.deleteResource(""String_Node_Str"");
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc(""String_Node_Str"");
  CubeInstance createdCube=CubeManager.getInstance(this.getTestConfig()).createCube(""String_Node_Str"",ProjectInstance.DEFAULT_PROJECT_NAME,desc,null);
  assertTrue(createdCube == CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
  assertTrue(CubeRealizationManager.getInstance(getTestConfig()).listAllCubes(ProjectInstance.DEFAULT_PROJECT_NAME).contains(createdCube));
  CubeInstance droppedCube=CubeManager.getInstance(this.getTestConfig()).dropCube(""String_Node_Str"",true);
  assertTrue(createdCube == droppedCube);
  assertTrue(!CubeRealizationManager.getInstance(getTestConfig()).listAllCubes(ProjectInstance.DEFAULT_PROJECT_NAME).contains(droppedCube));
  assertNull(CubeManager.getInstance(this.getTestConfig()).getCube(""String_Node_Str""));
}",0.9782393669634024
63238,"@Before public void setUp() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  ProjectManager.removeInstance(this.getTestConfig());
}","@Before public void setUp() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  CubeRealizationManager.removeInstance(this.getTestConfig());
}",0.9549180327868853
63239,"@Before public void setUp() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  ProjectManager.removeInstance(this.getTestConfig());
  cubeMgr=CubeManager.getInstance(this.getTestConfig());
}","@Before public void setUp() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  CubeRealizationManager.removeInstance(this.getTestConfig());
  cubeMgr=CubeManager.getInstance(this.getTestConfig());
}",0.9634551495016612
63240,"@Before public void before() throws Exception {
  SSHClient hadoopCli=new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword());
  removeHdfsDir(hadoopCli,mrOutputDir1);
  removeHdfsDir(hadoopCli,mrOutputDir2);
  MetadataManager.removeInstance(KylinConfig.getInstanceFromEnv());
  CubeManager.removeInstance(KylinConfig.getInstanceFromEnv());
  ProjectManager.removeInstance(KylinConfig.getInstanceFromEnv());
}","@Before public void before() throws Exception {
  SSHClient hadoopCli=new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword());
  removeHdfsDir(hadoopCli,mrOutputDir1);
  removeHdfsDir(hadoopCli,mrOutputDir2);
  MetadataManager.removeInstance(KylinConfig.getInstanceFromEnv());
  CubeManager.removeInstance(KylinConfig.getInstanceFromEnv());
  CubeRealizationManager.removeInstance(KylinConfig.getInstanceFromEnv());
}",0.9750566893424036
63241,"@Before public void before() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  ProjectManager.removeInstance(this.getTestConfig());
  DictionaryManager.removeInstance(this.getTestConfig());
}","@Before public void before() throws Exception {
  this.createTestMetadata();
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  CubeRealizationManager.removeInstance(this.getTestConfig());
  DictionaryManager.removeInstance(this.getTestConfig());
}",0.9636963696369636
63242,"@Before public void setUp() throws Exception {
  createTestMetadata();
  logger.info(""String_Node_Str"" + this.getTestConfig());
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  ProjectManager.removeInstance(this.getTestConfig());
  DictionaryManager.removeInstance(this.getTestConfig());
  FileUtils.deleteDirectory(new File(""String_Node_Str""));
  MergeCuboidMapper mapper=new MergeCuboidMapper();
  mapDriver=MapDriver.newMapDriver(mapper);
  cubeManager=CubeManager.getInstance(this.getTestConfig());
  cube=cubeManager.getCube(""String_Node_Str"");
  dictionaryManager=DictionaryManager.getInstance(getTestConfig());
  lfn=cube.getDescriptor().findColumnRef(""String_Node_Str"",""String_Node_Str"");
  lsi=cube.getDescriptor().findColumnRef(""String_Node_Str"",""String_Node_Str"");
  ssc=cube.getDescriptor().findColumnRef(""String_Node_Str"",""String_Node_Str"");
  DictionaryInfo sharedDict=makeSharedDict();
  boolean isFirstSegment=true;
  for (  CubeSegment segment : cube.getSegments()) {
    TableSignature signature=new TableSignature();
    signature.setSize(100);
    signature.setLastModifiedTime(System.currentTimeMillis());
    signature.setPath(""String_Node_Str"" + lfn.getName() + segment.getName());
    DictionaryInfo newDictInfo=new DictionaryInfo(lfn.getTable(),lfn.getColumn().getName(),lfn.getColumn().getZeroBasedIndex(),""String_Node_Str"",signature,""String_Node_Str"");
    List<byte[]> values=new ArrayList<byte[]>();
    values.add(new byte[]{97,97,97});
    if (isFirstSegment)     values.add(new byte[]{99,99,99});
 else     values.add(new byte[]{98,98,98});
    Dictionary<?> dict=DictionaryGenerator.buildDictionaryFromValueList(newDictInfo,values);
    dictionaryManager.trySaveNewDict(dict,newDictInfo);
    ((TrieDictionary)dict).dump(System.out);
    segment.putDictResPath(lfn,newDictInfo.getResourcePath());
    segment.putDictResPath(lsi,sharedDict.getResourcePath());
    segment.putDictResPath(ssc,sharedDict.getResourcePath());
    cubeManager.updateCube(cube);
    isFirstSegment=false;
  }
}","@Before public void setUp() throws Exception {
  createTestMetadata();
  logger.info(""String_Node_Str"" + this.getTestConfig());
  MetadataManager.removeInstance(this.getTestConfig());
  CubeManager.removeInstance(this.getTestConfig());
  CubeRealizationManager.removeInstance(this.getTestConfig());
  DictionaryManager.removeInstance(this.getTestConfig());
  FileUtils.deleteDirectory(new File(""String_Node_Str""));
  MergeCuboidMapper mapper=new MergeCuboidMapper();
  mapDriver=MapDriver.newMapDriver(mapper);
  cubeManager=CubeManager.getInstance(this.getTestConfig());
  cube=cubeManager.getCube(""String_Node_Str"");
  dictionaryManager=DictionaryManager.getInstance(getTestConfig());
  lfn=cube.getDescriptor().findColumnRef(""String_Node_Str"",""String_Node_Str"");
  lsi=cube.getDescriptor().findColumnRef(""String_Node_Str"",""String_Node_Str"");
  ssc=cube.getDescriptor().findColumnRef(""String_Node_Str"",""String_Node_Str"");
  DictionaryInfo sharedDict=makeSharedDict();
  boolean isFirstSegment=true;
  for (  CubeSegment segment : cube.getSegments()) {
    TableSignature signature=new TableSignature();
    signature.setSize(100);
    signature.setLastModifiedTime(System.currentTimeMillis());
    signature.setPath(""String_Node_Str"" + lfn.getName() + segment.getName());
    DictionaryInfo newDictInfo=new DictionaryInfo(lfn.getTable(),lfn.getColumn().getName(),lfn.getColumn().getZeroBasedIndex(),""String_Node_Str"",signature,""String_Node_Str"");
    List<byte[]> values=new ArrayList<byte[]>();
    values.add(new byte[]{97,97,97});
    if (isFirstSegment)     values.add(new byte[]{99,99,99});
 else     values.add(new byte[]{98,98,98});
    Dictionary<?> dict=DictionaryGenerator.buildDictionaryFromValueList(newDictInfo,values);
    dictionaryManager.trySaveNewDict(dict,newDictInfo);
    ((TrieDictionary)dict).dump(System.out);
    segment.putDictResPath(lfn,newDictInfo.getResourcePath());
    segment.putDictResPath(lsi,sharedDict.getResourcePath());
    segment.putDictResPath(ssc,sharedDict.getResourcePath());
    cubeManager.updateCube(cube);
    isFirstSegment=false;
  }
}",0.994721689059501
63243,"/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) @ResponseBody @Metered(name=""String_Node_Str"") public List<TableDesc> getHiveTables(@RequestParam(value=""String_Node_Str"",required=false) boolean withExt,@RequestParam(value=""String_Node_Str"",required=false) String project){
  long start=System.currentTimeMillis();
  List<TableDesc> tables=null;
  try {
    tables=cubeMgmtService.getProjectManager().listDefinedTablesInProject(project);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new InternalErrorException(e.getLocalizedMessage());
  }
  if (withExt) {
    tables=cloneTableDesc(tables);
  }
  long end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  return tables;
}","/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) @ResponseBody @Metered(name=""String_Node_Str"") public List<TableDesc> getHiveTables(@RequestParam(value=""String_Node_Str"",required=false) boolean withExt,@RequestParam(value=""String_Node_Str"",required=false) String project){
  long start=System.currentTimeMillis();
  List<TableDesc> tables=null;
  try {
    tables=cubeMgmtService.getCubeRealizationManager().listDefinedTablesInProject(project);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new InternalErrorException(e.getLocalizedMessage());
  }
  if (withExt) {
    tables=cloneTableDesc(tables);
  }
  long end=System.currentTimeMillis();
  logger.info(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  return tables;
}",0.9876819708846584
63244,"public CubeRealizationManager getProjectManager(){
  return CubeRealizationManager.getInstance(getConfig());
}","public ProjectManager getProjectManager(){
  return ProjectManager.getInstance(getConfig());
}",0.8235294117647058
63245,"@Test public void testBasics() throws IOException {
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobInstance job=null;
  try {
    JobBuildRequest jobBuildRequest=new JobBuildRequest();
    jobBuildRequest.setBuildType(""String_Node_Str"");
    jobBuildRequest.setStartTime(1386806400000L);
    jobBuildRequest.setEndTime(new Date().getTime());
    job=cubeController.rebuild(""String_Node_Str"",jobBuildRequest);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  Map<String,String> output=jobSchedulerController.getStepOutput(job.getId(),0);
  Assert.assertNotNull(output);
}","@Test public void testBasics() throws IOException {
  CubeManager cubeManager=CubeManager.getInstance(getTestConfig());
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
  CubeDescManager cubeDescManager=CubeDescManager.getInstance(getTestConfig());
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(1386806400000L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  Map<String,String> output=jobSchedulerController.getStepOutput(job.getId(),0);
  Assert.assertNotNull(output);
  try {
    jobSchedulerController.cancel(job.getId());
  }
 catch (  InternalErrorException e) {
  }
}",0.4536741214057508
63246,"@Test(expected=RuntimeException.class) public void testResume() throws IOException {
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(20130331080000L);
  jobBuildRequest.setEndTime(20131212080000L);
  JobInstance job=cubeController.rebuild(""String_Node_Str"",jobBuildRequest);
  jobSchedulerController.resume(job.getId());
}","@Test(expected=RuntimeException.class) public void testResume() throws IOException {
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(20130331080000L);
  jobBuildRequest.setEndTime(20131212080000L);
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  jobSchedulerController.resume(job.getId());
}",0.9144254278728606
63247,"@Before public void setup(){
  super.setUp();
  projectController=new ProjectController();
  projectController.setProjectService(projectService);
}","@Before public void setup(){
  super.setUp();
  projectController=new ProjectController();
  projectController.setProjectService(projectService);
  try {
    projectController.deleteProject(""String_Node_Str"");
  }
 catch (  InternalErrorException e) {
  }
  try {
    projectController.deleteProject(""String_Node_Str"");
  }
 catch (  InternalErrorException e) {
  }
}",0.5680933852140078
63248,"@Test public void testBasics() throws IOException {
  CubeManager cubeManager=CubeManager.getInstance(getTestConfig());
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
  CubeDescManager cubeDescManager=CubeDescManager.getInstance(getTestConfig());
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(1386806400000L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  Map<String,String> output=jobSchedulerController.getStepOutput(job.getId(),0);
  Assert.assertNotNull(output);
  try {
    jobSchedulerController.cancel(job.getId());
  }
 catch (  InternalErrorException e) {
  }
}","@Test public void testBasics() throws IOException {
  KylinConfig testConfig=getTestConfig();
  CubeManager cubeManager=CubeManager.getInstance(testConfig);
  if (cubeManager.getCube(CUBE_NAME) != null) {
    cubeManager.dropCube(CUBE_NAME,false);
  }
  CubeDescManager cubeDescManager=CubeDescManager.getInstance(testConfig);
  CubeDesc cubeDesc=cubeDescManager.getCubeDesc(""String_Node_Str"");
  CubeInstance cube=cubeManager.createCube(CUBE_NAME,""String_Node_Str"",cubeDesc,""String_Node_Str"");
  assertNotNull(cube);
  JobListRequest jobRequest=new JobListRequest();
  Assert.assertNotNull(jobSchedulerController.list(jobRequest));
  JobBuildRequest jobBuildRequest=new JobBuildRequest();
  jobBuildRequest.setBuildType(""String_Node_Str"");
  jobBuildRequest.setStartTime(0L);
  jobBuildRequest.setEndTime(new Date().getTime());
  JobInstance job=cubeController.rebuild(CUBE_NAME,jobBuildRequest);
  Assert.assertNotNull(jobSchedulerController.get(job.getId()));
  Map<String,String> output=jobSchedulerController.getStepOutput(job.getId(),0);
  Assert.assertNotNull(output);
  JobDAO.getInstance(testConfig).deleteJob(job);
}",0.8901531728665207
63249,"/** 
 * @param uuid
 * @param jobInstance
 * @throws IOException
 * @throws JobException
 */
private void killRunningJob(JobInstance jobInstance) throws IOException, JobException {
  JobStep runningStep=jobInstance.getRunningStep();
  if (runningStep == null) {
    throw new IllegalStateException(""String_Node_Str"" + jobInstance.getUuid());
  }
  runningStep.setStatus(JobStepStatusEnum.DISCARDED);
  runningStep.setExecEndTime(System.currentTimeMillis());
  jobDAO.updateJobInstance(jobInstance);
  this.jobEngine.interruptJob(jobInstance,runningStep);
}","/** 
 * @param jobInstance
 * @throws IOException
 * @throws JobException
 */
private void killRunningJob(JobInstance jobInstance) throws IOException, JobException {
  JobStep runningStep=jobInstance.getRunningStep();
  if (runningStep == null) {
    throw new IllegalStateException(""String_Node_Str"" + jobInstance.getUuid());
  }
  runningStep.setStatus(JobStepStatusEnum.DISCARDED);
  runningStep.setExecEndTime(System.currentTimeMillis());
  jobDAO.updateJobInstance(jobInstance);
  this.jobEngine.interruptJob(jobInstance,runningStep);
}",0.9863263445761168
63250,"public CubeInstance createCube(String cubeName,String projectName,CubeDesc desc,String owner) throws IOException {
  logger.info(""String_Node_Str"" + projectName + ""String_Node_Str""+ cubeName+ ""String_Node_Str""+ desc.getName()+ ""String_Node_Str"");
  CubeInstance cube=CubeInstance.create(cubeName,projectName,desc);
  cube.setOwner(owner);
  saveResource(cube);
  ProjectManager.getInstance(config).updateCubeToProject(cubeName,projectName,owner);
  return cube;
}","public CubeInstance createCube(String cubeName,String projectName,CubeDesc desc,String owner) throws IOException {
  logger.info(""String_Node_Str"" + projectName + ""String_Node_Str""+ cubeName+ ""String_Node_Str""+ desc.getName()+ ""String_Node_Str"");
  CubeInstance cube=CubeInstance.create(cubeName,projectName,desc);
  cube.setOwner(owner);
  saveResource(cube);
  ProjectManager.getInstance(config).updateCubeToProject(cubeName,projectName,owner);
  CubeRealizationManager.getInstance(config).loadProject(ProjectManager.getInstance(config).getProject(projectName));
  return cube;
}",0.8869731800766284
63251,"public CubeInstance dropCube(String cubeName,boolean deleteDesc) throws IOException {
  logger.info(""String_Node_Str"" + cubeName + ""String_Node_Str"");
  List<ProjectInstance> projects=ProjectManager.getInstance(config).getProjects(cubeName);
  ResourceStore store=getStore();
  CubeInstance cube=getCube(cubeName);
  if (deleteDesc && cube.getDescriptor() != null)   store.deleteResource(cube.getDescriptor().getResourcePath());
  store.deleteResource(cube.getResourcePath());
  ProjectManager.getInstance(config).removeCubeFromProjects(cubeName);
  this.afterCubeDroped(cube,projects);
  return cube;
}","public CubeInstance dropCube(String cubeName,boolean deleteDesc) throws IOException {
  logger.info(""String_Node_Str"" + cubeName + ""String_Node_Str"");
  List<ProjectInstance> projects=ProjectManager.getInstance(config).getProjects(cubeName);
  ResourceStore store=getStore();
  CubeInstance cube=getCube(cubeName);
  if (deleteDesc && cube.getDescriptor() != null)   store.deleteResource(cube.getDescriptor().getResourcePath());
  store.deleteResource(cube.getResourcePath());
  ProjectManager.getInstance(config).removeCubeFromProjects(cubeName);
  CubeRealizationManager.getInstance(config).loadAllProjects();
  this.afterCubeDroped(cube,projects);
  return cube;
}",0.9496062992125984
63252,"public List<CubeInstance> listAllCubes(String project){
  project=ProjectInstance.getNormalizedProjectName(project);
  HashSet<CubeInstance> ret=new HashSet<CubeInstance>();
  ProjectInstance projectInstance=getProject(project);
  if (projectInstance != null) {
    for (    String cubeName : projectInstance.getCubes()) {
      CubeInstance cube=CubeManager.getInstance(config).getCube(cubeName);
      if (null != cube) {
        ret.add(cube);
      }
 else {
        logger.error(""String_Node_Str"" + cubeName);
      }
    }
  }
  return new ArrayList<CubeInstance>(ret);
}","public List<CubeInstance> listAllCubes(ProjectInstance projectInstance){
  if (projectInstance == null) {
    return Collections.emptyList();
  }
  HashSet<CubeInstance> ret=new HashSet<CubeInstance>();
  for (  String cubeName : projectInstance.getCubes()) {
    CubeInstance cube=CubeManager.getInstance(config).getCube(cubeName);
    if (null != cube) {
      ret.add(cube);
    }
 else {
      logger.error(""String_Node_Str"" + cubeName);
    }
  }
  return new ArrayList<CubeInstance>(ret);
}",0.5330848089468779
63253,"private synchronized ProjectInstance loadProject(String path,boolean triggerUpdate) throws IOException {
  ResourceStore store=getStore();
  logger.debug(""String_Node_Str"" + store.getReadableResourcePath(path));
  ProjectInstance projectInstance=store.getResource(path,ProjectInstance.class,PROJECT_SERIALIZER);
  projectInstance.init();
  if (StringUtils.isBlank(projectInstance.getName())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (triggerUpdate) {
    projectMap.put(projectInstance.getName().toUpperCase(),projectInstance);
  }
 else {
    projectMap.putLocal(projectInstance.getName().toUpperCase(),projectInstance);
  }
  return projectInstance;
}","public void loadProject(ProjectInstance project) throws IOException {
  loadTables(project);
}",0.1940491591203104
63254,"private synchronized void loadTables(String path) throws IOException {
  ResourceStore store=getStore();
  logger.debug(""String_Node_Str"" + store.getReadableResourcePath(path));
  ProjectInstance projectInstance=store.getResource(path,ProjectInstance.class,PROJECT_SERIALIZER);
  projectInstance.init();
  String project=ProjectInstance.getNormalizedProjectName(projectInstance.getName());
  projectTables.removeAll(project);
  for (  CubeInstance cubeInstance : this.listAllCubes(projectInstance.getName())) {
    markExposedTablesAndColumns(projectInstance.getName(),cubeInstance);
    mapTableToCube(projectInstance,cubeInstance);
  }
}","private synchronized void loadTables(ProjectInstance projectInstance) throws IOException {
  String project=ProjectInstance.getNormalizedProjectName(projectInstance.getName());
  projectTables.removeAll(project);
  for (  CubeInstance cubeInstance : this.listAllCubes(projectInstance.getName())) {
    markExposedTablesAndColumns(projectInstance.getName(),cubeInstance);
    mapTableToCube(projectInstance,cubeInstance);
  }
}",0.7417840375586855
63255,"private void loadAllProjects() throws IOException {
  ResourceStore store=getStore();
  List<String> paths=store.collectResourceRecursively(ResourceStore.PROJECT_RESOURCE_ROOT,""String_Node_Str"");
  logger.debug(""String_Node_Str"" + store.getReadableResourcePath(ResourceStore.PROJECT_RESOURCE_ROOT));
  for (  String path : paths) {
    loadProject(path,false);
    loadTables(path);
  }
  logger.debug(""String_Node_Str"" + paths.size() + ""String_Node_Str"");
}","public final void loadAllProjects() throws IOException {
  List<ProjectInstance> projectInstances=ProjectManager.getInstance(config).listAllProjects();
  for (  ProjectInstance projectInstance : projectInstances) {
    loadTables(projectInstance);
  }
  logger.debug(""String_Node_Str"" + projectInstances.size() + ""String_Node_Str"");
}",0.2222222222222222
63256,"public ProjectInstance getProject(String projectName){
  if (projectName == null)   return null;
  projectName=ProjectInstance.getNormalizedProjectName(projectName);
  return projectMap.get(projectName);
}","private ProjectInstance getProject(String projectName){
  return ProjectManager.getInstance(config).getProject(projectName);
}",0.6404833836858006
63257,"private void saveResource(ProjectInstance proj) throws IOException {
  ResourceStore store=getStore();
  store.putResource(proj.getResourcePath(),proj,PROJECT_SERIALIZER);
  afterProjectUpdated(proj);
}","private void saveResource(ProjectInstance projectInstance) throws IOException {
  getProjectManager().updateProject(projectInstance);
}",0.5637982195845698
63258,"@Before public void before() throws Exception {
  SSHClient hadoopCli=new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword(),null);
  removeHdfsDir(hadoopCli,mrOutputDir1);
  removeHdfsDir(hadoopCli,mrOutputDir2);
  MetadataManager.removeInstance(KylinConfig.getInstanceFromEnv());
  CubeManager.removeInstance(KylinConfig.getInstanceFromEnv());
  ProjectManager.removeInstance(KylinConfig.getInstanceFromEnv());
}","@Before public void before() throws Exception {
  SSHClient hadoopCli=new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword());
  removeHdfsDir(hadoopCli,mrOutputDir1);
  removeHdfsDir(hadoopCli,mrOutputDir2);
  MetadataManager.removeInstance(KylinConfig.getInstanceFromEnv());
  CubeManager.removeInstance(KylinConfig.getInstanceFromEnv());
  ProjectManager.removeInstance(KylinConfig.getInstanceFromEnv());
}",0.994311717861206
63259,"@BeforeClass public static void beforeClass() throws Exception {
  FileUtils.forceMkdir(new File(KylinConfig.getInstanceFromEnv().getKylinJobLogDir()));
  FileUtils.deleteDirectory(new File(tempTestMetadataUrl));
  FileUtils.copyDirectory(new File(AbstractKylinTestCase.LOCALMETA_TEST_DATA),new File(tempTestMetadataUrl));
  System.setProperty(KylinConfig.KYLIN_CONF,tempTestMetadataUrl);
  SSHClient hadoopCli=new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword(),null);
  scpFilesToHdfs(hadoopCli,new String[]{""String_Node_Str""},mrInputDir);
  hadoopCli.scpFileToRemote(""String_Node_Str"",""String_Node_Str"");
  hadoopCli.scpFileToRemote(""String_Node_Str"",""String_Node_Str"");
  hadoopCli.execCommand(""String_Node_Str"" + KylinConfig.getInstanceFromEnv().getKylinJobLogDir());
  KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  kylinConfig.setMetadataUrl(tempTestMetadataUrl);
  jobManager=new JobManager(""String_Node_Str"",new JobEngineConfig(KylinConfig.getInstanceFromEnv()));
  jobDAO=JobDAO.getInstance(KylinConfig.getInstanceFromEnv());
  jobDAO.updateJobInstance(createARunningJobInstance(""String_Node_Str""));
  jobManager.startJobEngine(2);
  Thread.sleep(2000);
}","@BeforeClass public static void beforeClass() throws Exception {
  FileUtils.forceMkdir(new File(KylinConfig.getInstanceFromEnv().getKylinJobLogDir()));
  FileUtils.deleteDirectory(new File(tempTestMetadataUrl));
  FileUtils.copyDirectory(new File(AbstractKylinTestCase.LOCALMETA_TEST_DATA),new File(tempTestMetadataUrl));
  System.setProperty(KylinConfig.KYLIN_CONF,tempTestMetadataUrl);
  SSHClient hadoopCli=new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword());
  scpFilesToHdfs(hadoopCli,new String[]{""String_Node_Str""},mrInputDir);
  hadoopCli.scpFileToRemote(""String_Node_Str"",""String_Node_Str"");
  hadoopCli.scpFileToRemote(""String_Node_Str"",""String_Node_Str"");
  hadoopCli.execCommand(""String_Node_Str"" + KylinConfig.getInstanceFromEnv().getKylinJobLogDir());
  KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  kylinConfig.setMetadataUrl(tempTestMetadataUrl);
  jobManager=new JobManager(""String_Node_Str"",new JobEngineConfig(KylinConfig.getInstanceFromEnv()));
  jobDAO=JobDAO.getInstance(KylinConfig.getInstanceFromEnv());
  jobDAO.updateJobInstance(createARunningJobInstance(""String_Node_Str""));
  jobManager.startJobEngine(2);
  Thread.sleep(2000);
}",0.9979278905926232
63260,"private void initDimensionColumns(Map<String,TableDesc> tables){
  for (  DimensionDesc dim : dimensions) {
    TableDesc dimTable=dim.getTableDesc();
    JoinDesc join=dim.getJoin();
    ArrayList<TblColRef> dimColList=new ArrayList<TblColRef>();
    ArrayList<TblColRef> hostColList=new ArrayList<TblColRef>();
    if (dim.getColumn() != null) {
      if (join != null) {
        for (        TblColRef ref : join.getForeignKeyColumns()) {
          TblColRef inited=initDimensionColRef(ref);
          dimColList.add(inited);
          hostColList.add(inited);
        }
      }
 else {
        for (        String aColumn : dim.getColumn()) {
          TblColRef ref=initDimensionColRef(dimTable,aColumn);
          dimColList.add(ref);
          hostColList.add(ref);
        }
      }
    }
    if (dim.getHierarchy() != null) {
      for (      HierarchyDesc hier : dim.getHierarchy()) {
        TblColRef ref=initDimensionColRef(dimTable,hier.getColumn());
        hier.setColumnRef(ref);
        dimColList.add(ref);
      }
      if (hostColList.isEmpty()) {
        hostColList.add(dimColList.get(dimColList.size() - 1));
      }
    }
    TblColRef[] dimCols=(TblColRef[])dimColList.toArray(new TblColRef[dimColList.size()]);
    dim.setColumnRefs(dimCols);
    TblColRef[] hostCols=(TblColRef[])hostColList.toArray(new TblColRef[hostColList.size()]);
    String[] derived=dim.getDerived();
    if (derived != null) {
      String[][] split=splitDerivedColumnAndExtra(derived);
      String[] derivedNames=split[0];
      String[] derivedExtra=split[1];
      TblColRef[] derivedCols=new TblColRef[derivedNames.length];
      for (int i=0; i < derivedNames.length; i++) {
        derivedCols[i]=initDimensionColRef(dimTable,derivedNames[i]);
      }
      initDerivedMap(hostCols,DeriveType.LOOKUP,dim,derivedCols,derivedExtra);
    }
    if (join != null) {
      TblColRef[] fk=join.getForeignKeyColumns();
      TblColRef[] pk=join.getPrimaryKeyColumns();
      for (int i=0; i < fk.length; i++) {
        int find=ArrayUtils.indexOf(hostCols,fk[i]);
        if (find >= 0) {
          TblColRef derivedCol=initDimensionColRef(pk[i]);
          initDerivedMap(hostCols[find],DeriveType.PK_FK,dim,derivedCol);
        }
      }
      for (int i=0; i < pk.length; i++) {
        int find=ArrayUtils.indexOf(hostCols,pk[i]);
        if (find >= 0) {
          TblColRef derivedCol=initDimensionColRef(fk[i]);
          initDerivedMap(hostCols[find],DeriveType.PK_FK,dim,derivedCol);
        }
      }
    }
  }
}","private void initDimensionColumns(Map<String,TableDesc> tables){
  for (  DimensionDesc dim : dimensions) {
    TableDesc dimTable=dim.getTableDesc();
    JoinDesc join=dim.getJoin();
    ArrayList<TblColRef> dimColList=new ArrayList<TblColRef>();
    ArrayList<TblColRef> hostColList=new ArrayList<TblColRef>();
    if (dim.getColumn() != null) {
      if (join != null) {
        for (        TblColRef ref : join.getForeignKeyColumns()) {
          TblColRef inited=initDimensionColRef(ref);
          dimColList.add(inited);
          hostColList.add(inited);
        }
      }
 else {
        for (        String aColumn : dim.getColumn()) {
          TblColRef ref=initDimensionColRef(dimTable,aColumn);
          if (!dimColList.contains(ref)) {
            dimColList.add(ref);
          }
        }
      }
    }
    if (dim.getHierarchy() != null) {
      for (      HierarchyDesc hier : dim.getHierarchy()) {
        TblColRef ref=initDimensionColRef(dimTable,hier.getColumn());
        hier.setColumnRef(ref);
        if (!dimColList.contains(ref))         dimColList.add(ref);
      }
      if (hostColList.isEmpty()) {
        hostColList.add(dimColList.get(dimColList.size() - 1));
      }
    }
    TblColRef[] dimCols=(TblColRef[])dimColList.toArray(new TblColRef[dimColList.size()]);
    dim.setColumnRefs(dimCols);
    TblColRef[] hostCols=(TblColRef[])hostColList.toArray(new TblColRef[hostColList.size()]);
    String[] derived=dim.getDerived();
    if (derived != null) {
      String[][] split=splitDerivedColumnAndExtra(derived);
      String[] derivedNames=split[0];
      String[] derivedExtra=split[1];
      TblColRef[] derivedCols=new TblColRef[derivedNames.length];
      for (int i=0; i < derivedNames.length; i++) {
        derivedCols[i]=initDimensionColRef(dimTable,derivedNames[i]);
      }
      initDerivedMap(hostCols,DeriveType.LOOKUP,dim,derivedCols,derivedExtra);
    }
    if (join != null) {
      TblColRef[] fk=join.getForeignKeyColumns();
      TblColRef[] pk=join.getPrimaryKeyColumns();
      for (int i=0; i < fk.length; i++) {
        int find=ArrayUtils.indexOf(hostCols,fk[i]);
        if (find >= 0) {
          TblColRef derivedCol=initDimensionColRef(pk[i]);
          initDerivedMap(hostCols[find],DeriveType.PK_FK,dim,derivedCol);
        }
      }
      for (int i=0; i < pk.length; i++) {
        int find=ArrayUtils.indexOf(hostCols,pk[i]);
        if (find >= 0) {
          TblColRef derivedCol=initDimensionColRef(fk[i]);
          initDerivedMap(hostCols[find],DeriveType.PK_FK,dim,derivedCol);
        }
      }
    }
  }
}",0.9780907668231612
63261,"public void init(Map<String,Map<String,TblColRef>> columnMap){
  if (null != partitionDateColumn) {
    String[] columns=partitionDateColumn.split(""String_Node_Str"");
    if (null != columns && columns.length == 2) {
      Map<String,TblColRef> cols=columnMap.get(columns[0].toUpperCase());
      if (cols != null)       partitionDateColumnRef=cols.get(columns[1].toUpperCase());
    }
  }
}","public void init(Map<String,Map<String,TblColRef>> columnMap){
  if (null != partitionDateColumn) {
    partitionDateColumn=partitionDateColumn.toUpperCase();
    String[] columns=StringSplitter.split(partitionDateColumn,""String_Node_Str"");
    if (null != columns && columns.length == 3) {
      Map<String,TblColRef> cols=columnMap.get(columns[0].toUpperCase() + ""String_Node_Str"" + columns[1].toUpperCase());
      if (cols != null)       partitionDateColumnRef=cols.get(columns[2].toUpperCase());
    }
  }
}",0.7043189368770764
63262,"public void init(CubeDesc cubeDesc,Map<String,TableDesc> tables,Map<String,List<TableDesc>> columnTableMap,Map<String,List<String>> tableDatabaseMap){
  if (name != null)   name=name.toUpperCase();
  this.table=null;
  this.database=null;
  this.join=null;
  for (int i=0, n=this.column.length; i < n; i++) {
    String thisColumn=this.column[i].toUpperCase();
    String[] dbTableNames=parseTableDBName(thisColumn,columnTableMap,tableDatabaseMap);
    if (database == null) {
      database=dbTableNames[0];
    }
 else     if (!database.equals(dbTableNames[0])) {
      throw new IllegalStateException(""String_Node_Str"" + database + ""String_Node_Str""+ dbTableNames[0]+ ""String_Node_Str"");
    }
    if (table == null) {
      table=dbTableNames[1];
    }
 else     if (!table.equalsIgnoreCase(dbTableNames[1])) {
      throw new IllegalStateException(""String_Node_Str"" + table + ""String_Node_Str""+ dbTableNames[1]+ ""String_Node_Str"");
    }
  }
  tableDesc=tables.get(database + ""String_Node_Str"" + table);
  if (tableDesc == null)   throw new IllegalStateException(""String_Node_Str"" + table + ""String_Node_Str""+ name);
  for (  LookupDesc lookup : cubeDesc.getModel().getLookups()) {
    if (lookup.getTable().equalsIgnoreCase(table)) {
      this.join=lookup.getJoin();
      break;
    }
  }
  if (isHierarchy && this.column.length > 0) {
    List<HierarchyDesc> hierarchyList=new ArrayList<HierarchyDesc>(3);
    for (int i=0, n=this.column.length; i < n; i++) {
      String aColumn=this.column[i];
      HierarchyDesc aHierarchy=new HierarchyDesc();
      aHierarchy.setLevel(String.valueOf(i + 1));
      aHierarchy.setColumn(aColumn);
      hierarchyList.add(aHierarchy);
    }
    this.hierarchy=hierarchyList.toArray(new HierarchyDesc[hierarchyList.size()]);
  }
  if (hierarchy != null && hierarchy.length == 0)   hierarchy=null;
  if (derived != null && derived.length == 0)   derived=null;
  if (hierarchy != null) {
    for (    HierarchyDesc h : hierarchy)     h.setColumn(h.getColumn().toUpperCase());
  }
  if (derived != null) {
    StringUtil.toUpperCaseArray(derived,derived);
  }
}","public void init(CubeDesc cubeDesc,Map<String,TableDesc> tables,Map<String,List<TableDesc>> columnTableMap,Map<String,List<String>> tableDatabaseMap){
  if (name != null)   name=name.toUpperCase();
  this.table=null;
  this.database=null;
  this.join=null;
  for (int i=0, n=this.column.length; i < n; i++) {
    String thisColumn=this.column[i].toUpperCase();
    if (this.table == null || this.database == null) {
      String[] dbTableNames=parseTableDBName(thisColumn,columnTableMap,tableDatabaseMap);
      if (database == null) {
        database=dbTableNames[0];
      }
 else       if (!database.equals(dbTableNames[0])) {
        throw new IllegalStateException(""String_Node_Str"" + database + ""String_Node_Str""+ dbTableNames[0]+ ""String_Node_Str"");
      }
      if (table == null) {
        table=dbTableNames[1];
      }
 else       if (!table.equalsIgnoreCase(dbTableNames[1])) {
        throw new IllegalStateException(""String_Node_Str"" + table + ""String_Node_Str""+ dbTableNames[1]+ ""String_Node_Str"");
      }
    }
  }
  tableDesc=tables.get(this.getTable());
  if (tableDesc == null)   throw new IllegalStateException(""String_Node_Str"" + table + ""String_Node_Str""+ name);
  for (  LookupDesc lookup : cubeDesc.getModel().getLookups()) {
    if (lookup.getTable().equalsIgnoreCase(this.getTable())) {
      this.join=lookup.getJoin();
      break;
    }
  }
  if (isHierarchy && this.column.length > 0) {
    List<HierarchyDesc> hierarchyList=new ArrayList<HierarchyDesc>(3);
    for (int i=0, n=this.column.length; i < n; i++) {
      String aColumn=this.column[i];
      HierarchyDesc aHierarchy=new HierarchyDesc();
      aHierarchy.setLevel(String.valueOf(i + 1));
      aHierarchy.setColumn(aColumn);
      hierarchyList.add(aHierarchy);
    }
    this.hierarchy=hierarchyList.toArray(new HierarchyDesc[hierarchyList.size()]);
  }
  if (hierarchy != null && hierarchy.length == 0)   hierarchy=null;
  if (derived != null && derived.length == 0)   derived=null;
  if (hierarchy != null) {
    for (    HierarchyDesc h : hierarchy)     h.setColumn(h.getColumn().toUpperCase());
  }
  if (derived != null) {
    StringUtil.toUpperCaseArray(derived,derived);
  }
}",0.9332399626517274
63263,"/** 
 * @deprecated use getTableDesc() to get accurate table info
 * @return
 */
public String getTable(){
  if (database == null) {
    return (""String_Node_Str"" + table).toUpperCase();
  }
 else {
    return (database + ""String_Node_Str"" + table).toUpperCase();
  }
}","/** 
 * @return
 */
public String getTable(){
  if (database == null) {
    return (""String_Node_Str"" + table).toUpperCase();
  }
 else {
    return (database + ""String_Node_Str"" + table).toUpperCase();
  }
}",0.8721174004192872
63264,"private void copyRemote(String localFile,String destDir) throws IOException {
  SSHClient ssh=new SSHClient(remoteHost,remoteUser,remotePwd,null);
  try {
    ssh.scpFileToRemote(localFile,destDir);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    throw new IOException(e.getMessage(),e);
  }
}","private void copyRemote(String localFile,String destDir) throws IOException {
  SSHClient ssh=new SSHClient(remoteHost,remoteUser,remotePwd);
  try {
    ssh.scpFileToRemote(localFile,destDir);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    throw new IOException(e.getMessage(),e);
  }
}",0.9921507064364208
63265,"private Pair<Integer,String> runRemoteCommand(String command) throws IOException {
  SSHClient ssh=new SSHClient(remoteHost,remoteUser,remotePwd,null);
  SSHClientOutput sshOutput;
  try {
    sshOutput=ssh.execCommand(command,remoteTimeoutSeconds);
    int exitCode=sshOutput.getExitCode();
    String output=sshOutput.getText();
    return new Pair<Integer,String>(exitCode,output);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    throw new IOException(e.getMessage(),e);
  }
}","private Pair<Integer,String> runRemoteCommand(String command,Logger logAppender) throws IOException {
  SSHClient ssh=new SSHClient(remoteHost,remoteUser,remotePwd);
  SSHClientOutput sshOutput;
  try {
    sshOutput=ssh.execCommand(command,remoteTimeoutSeconds,logAppender);
    int exitCode=sshOutput.getExitCode();
    String output=sshOutput.getText();
    return new Pair<Integer,String>(exitCode,output);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    throw new IOException(e.getMessage(),e);
  }
}",0.7807692307692308
63266,"private Pair<Integer,String> runNativeCommand(String command) throws IOException {
  String[] cmd=new String[3];
  String osName=System.getProperty(""String_Node_Str"");
  if (osName.startsWith(""String_Node_Str"")) {
    cmd[0]=""String_Node_Str"";
    cmd[1]=""String_Node_Str"";
  }
 else {
    cmd[0]=""String_Node_Str"";
    cmd[1]=""String_Node_Str"";
  }
  cmd[2]=command;
  ProcessBuilder builder=new ProcessBuilder(cmd);
  builder.redirectErrorStream(true);
  Process proc=builder.start();
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  IOUtils.copy(proc.getInputStream(),buf);
  String output=buf.toString(""String_Node_Str"");
  try {
    int exitCode=proc.waitFor();
    return new Pair<Integer,String>(exitCode,output);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}","private Pair<Integer,String> runNativeCommand(String command,Logger logAppender) throws IOException {
  String[] cmd=new String[3];
  String osName=System.getProperty(""String_Node_Str"");
  if (osName.startsWith(""String_Node_Str"")) {
    cmd[0]=""String_Node_Str"";
    cmd[1]=""String_Node_Str"";
  }
 else {
    cmd[0]=""String_Node_Str"";
    cmd[1]=""String_Node_Str"";
  }
  cmd[2]=command;
  ProcessBuilder builder=new ProcessBuilder(cmd);
  builder.redirectErrorStream(true);
  Process proc=builder.start();
  BufferedReader reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  String line;
  StringBuilder result=new StringBuilder();
  while ((line=reader.readLine()) != null) {
    result.append(""String_Node_Str"").append('\n');
    if (logAppender != null) {
      logAppender.log(line);
    }
  }
  try {
    int exitCode=proc.waitFor();
    return new Pair<Integer,String>(exitCode,result.toString());
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}",0.7278761061946902
63267,"public Pair<Integer,String> execute(String command) throws IOException {
  Pair<Integer,String> r;
  if (remoteHost == null) {
    r=runNativeCommand(command);
  }
 else {
    r=runRemoteCommand(command);
  }
  if (r.getFirst() != 0) {
    throw new IOException(""String_Node_Str"" + r.getFirst() + ""String_Node_Str""+ command+ ""String_Node_Str""+ r.getSecond());
  }
  return r;
}","public Pair<Integer,String> execute(String command,Logger logAppender) throws IOException {
  Pair<Integer,String> r;
  if (remoteHost == null) {
    r=runNativeCommand(command,logAppender);
  }
 else {
    r=runRemoteCommand(command,logAppender);
  }
  if (r.getFirst() != 0) {
    throw new IOException(""String_Node_Str"" + r.getFirst() + ""String_Node_Str""+ command+ ""String_Node_Str""+ r.getSecond());
  }
  return r;
}",0.946047678795483
63268,"public SSHClientOutput execCommand(String command,int timeoutSeconds) throws Exception {
  try {
    System.out.println(""String_Node_Str"" + username + ""String_Node_Str""+ hostname+ ""String_Node_Str""+ command);
    StringBuffer text=new StringBuffer();
    int exitCode=-1;
    Session session=newJSchSession();
    session.connect();
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(command);
    channel.setInputStream(null);
    ((ChannelExec)channel).setErrStream(System.err);
    InputStream in=channel.getInputStream();
    InputStream err=((ChannelExec)channel).getErrStream();
    channel.connect();
    int timeout=timeoutSeconds;
    byte[] tmp=new byte[1024];
    while (true) {
      timeout--;
      while (in.available() > 0) {
        int i=in.read(tmp,0,1024);
        if (i < 0)         break;
        String line=new String(tmp,0,i);
        text.append(line);
        if (this.sshLogger != null) {
          this.sshLogger.log(line);
        }
      }
      while (err.available() > 0) {
        int i=err.read(tmp,0,1024);
        if (i < 0)         break;
        String line=new String(tmp,0,i);
        text.append(line);
        if (this.sshLogger != null) {
          this.sshLogger.log(line);
        }
      }
      if (channel.isClosed()) {
        if (in.available() > 0)         continue;
        exitCode=channel.getExitStatus();
        System.out.println(""String_Node_Str"" + username + ""String_Node_Str""+ hostname+ ""String_Node_Str""+ exitCode);
        break;
      }
      try {
        Thread.sleep(1000);
      }
 catch (      Exception ee) {
        throw ee;
      }
      if (timeout < 0)       throw new Exception(""String_Node_Str"" + timeoutSeconds + ""String_Node_Str"");
    }
    channel.disconnect();
    session.disconnect();
    return new SSHClientOutput(exitCode,text.toString());
  }
 catch (  Exception e) {
    throw e;
  }
}","public SSHClientOutput execCommand(String command,int timeoutSeconds,Logger logAppender) throws Exception {
  try {
    System.out.println(""String_Node_Str"" + username + ""String_Node_Str""+ hostname+ ""String_Node_Str""+ command);
    StringBuffer text=new StringBuffer();
    int exitCode=-1;
    Session session=newJSchSession();
    session.connect();
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(command);
    channel.setInputStream(null);
    ((ChannelExec)channel).setErrStream(System.err);
    InputStream in=channel.getInputStream();
    InputStream err=((ChannelExec)channel).getErrStream();
    channel.connect();
    int timeout=timeoutSeconds;
    byte[] tmp=new byte[1024];
    while (true) {
      timeout--;
      while (in.available() > 0) {
        int i=in.read(tmp,0,1024);
        if (i < 0)         break;
        String line=new String(tmp,0,i);
        text.append(line);
        if (logAppender != null) {
          logAppender.log(line);
        }
      }
      while (err.available() > 0) {
        int i=err.read(tmp,0,1024);
        if (i < 0)         break;
        String line=new String(tmp,0,i);
        text.append(line);
        if (logAppender != null) {
          logAppender.log(line);
        }
      }
      if (channel.isClosed()) {
        if (in.available() > 0)         continue;
        exitCode=channel.getExitStatus();
        System.out.println(""String_Node_Str"" + username + ""String_Node_Str""+ hostname+ ""String_Node_Str""+ exitCode);
        break;
      }
      try {
        Thread.sleep(1000);
      }
 catch (      Exception ee) {
        throw ee;
      }
      if (timeout < 0)       throw new Exception(""String_Node_Str"" + timeoutSeconds + ""String_Node_Str"");
    }
    channel.disconnect();
    session.disconnect();
    return new SSHClientOutput(exitCode,text.toString());
  }
 catch (  Exception e) {
    throw e;
  }
}",0.973239802546116
63269,"public SSHClient(String hostname,String username,String password,SSHLogger sshLogger){
  this.hostname=hostname;
  this.username=username;
  if (new File(password).exists()) {
    this.identityPath=new File(password).getAbsolutePath();
    this.password=null;
  }
 else {
    this.password=password;
    this.identityPath=null;
  }
  this.sshLogger=sshLogger;
}","public SSHClient(String hostname,String username,String password){
  this.hostname=hostname;
  this.username=username;
  if (new File(password).exists()) {
    this.identityPath=new File(password).getAbsolutePath();
    this.password=null;
  }
 else {
    this.password=password;
    this.identityPath=null;
  }
}",0.9287833827893176
63270,"@Test public void testScp() throws Exception {
  if (isRemote == false)   return;
  SSHClient ssh=new SSHClient(this.hostname,this.username,this.password,null);
  File tmpFile=FileUtil.createLocalTempFile(new File(""String_Node_Str""),""String_Node_Str"",false);
  ssh.scpFileToRemote(tmpFile.getAbsolutePath(),""String_Node_Str"");
}","@Test public void testScp() throws Exception {
  if (isRemote == false)   return;
  SSHClient ssh=new SSHClient(this.hostname,this.username,this.password);
  File tmpFile=FileUtil.createLocalTempFile(new File(""String_Node_Str""),""String_Node_Str"",false);
  ssh.scpFileToRemote(tmpFile.getAbsolutePath(),""String_Node_Str"");
}",0.9923195084485408
63271,"@Test public void testCmd() throws Exception {
  if (isRemote == false)   return;
  SSHClient ssh=new SSHClient(this.hostname,this.username,this.password,null);
  SSHClientOutput output=ssh.execCommand(""String_Node_Str"");
  assertEquals(0,output.getExitCode());
  assertEquals(""String_Node_Str"",output.getText());
}","@Test public void testCmd() throws Exception {
  if (isRemote == false)   return;
  SSHClient ssh=new SSHClient(this.hostname,this.username,this.password);
  SSHClientOutput output=ssh.execCommand(""String_Node_Str"");
  assertEquals(0,output.getExitCode());
  assertEquals(""String_Node_Str"",output.getText());
}",0.992
63272,"protected int executeCommand(String command) throws JobException, IOException {
  output.reset();
  output.setStatus(JobStepStatusEnum.RUNNING);
  return cliCommandExecutor.execute(command).getFirst();
}","protected int executeCommand(String command) throws JobException, IOException {
  output.reset();
  output.setStatus(JobStepStatusEnum.RUNNING);
  return cliCommandExecutor.execute(command,output).getFirst();
}",0.9830508474576272
63273,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws Exception {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
    this.releaseAllSegments(cube);
  }
  CubeDesc updatedCubeDesc=getMetadataManager().updateCubeDesc(desc);
  int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
  logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
  if (!getProjectManager().isCubeInProject(newProjectName,cube)) {
    String owner=SecurityContextHolder.getContext().getAuthentication().getName();
    ProjectInstance newProject=getProjectManager().updateCubeToProject(cube.getName(),newProjectName,owner);
    accessService.inherit(cube,newProject);
  }
  return updatedCubeDesc;
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws Exception {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
    this.releaseAllSegments(cube);
  }
  CubeDesc updatedCubeDesc=getMetadataManager().updateCubeDesc(desc);
  if (updatedCubeDesc.getError().size() > 0)   return updatedCubeDesc;
  int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
  logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
  if (!getProjectManager().isCubeInProject(newProjectName,cube)) {
    String owner=SecurityContextHolder.getContext().getAuthentication().getName();
    ProjectInstance newProject=getProjectManager().updateCubeToProject(cube.getName(),newProjectName,owner);
    accessService.inherit(cube,newProject);
  }
  return updatedCubeDesc;
}",0.9711264741764946
63274,"/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws JsonProcessingException 
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.PUT}) @ResponseBody @Metered(name=""String_Node_Str"") public CubeRequest updateCubeDesc(@RequestBody CubeRequest cubeRequest) throws JsonProcessingException {
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    return cubeRequest;
  }
  if (!cubeService.isCubeDescEditable(desc)) {
    String error=""String_Node_Str"" + desc.getName().toUpperCase() + ""String_Node_Str"";
    updateRequest(cubeRequest,false,error);
    return cubeRequest;
  }
  try {
    CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    desc=cubeService.updateCubeAndDesc(cube,desc,projectName);
  }
 catch (  AccessDeniedException accessDeniedException) {
    throw new ForbiddenException(""String_Node_Str"");
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new InternalErrorException(""String_Node_Str"",e);
  }
  if (desc.getError().isEmpty()) {
    cubeRequest.setSuccessful(true);
  }
 else {
    updateRequest(cubeRequest,false,omitMessage(desc.getError()));
  }
  String descData=JsonUtil.writeValueAsIndentString(desc);
  cubeRequest.setCubeDescData(descData);
  return cubeRequest;
}","/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws JsonProcessingException 
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.PUT}) @ResponseBody @Metered(name=""String_Node_Str"") public CubeRequest updateCubeDesc(@RequestBody CubeRequest cubeRequest) throws JsonProcessingException {
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    return cubeRequest;
  }
  if (!cubeService.isCubeDescEditable(desc)) {
    String error=""String_Node_Str"" + desc.getName().toUpperCase() + ""String_Node_Str"";
    updateRequest(cubeRequest,false,error);
    return cubeRequest;
  }
  try {
    CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    desc=cubeService.updateCubeAndDesc(cube,desc,projectName);
  }
 catch (  AccessDeniedException accessDeniedException) {
    throw new ForbiddenException(""String_Node_Str"");
  }
catch (  Exception e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
  if (desc.getError().isEmpty()) {
    cubeRequest.setSuccessful(true);
  }
 else {
    logger.warn(""String_Node_Str"" + desc.getName() + ""String_Node_Str""+ desc.getError());
    updateRequest(cubeRequest,false,omitMessage(desc.getError()));
  }
  String descData=JsonUtil.writeValueAsIndentString(desc);
  cubeRequest.setCubeDescData(descData);
  return cubeRequest;
}",0.8941254563557915
63275,"/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.PUT}) @ResponseBody @Metered(name=""String_Node_Str"") public CubeRequest updateCubeDesc(@RequestBody CubeRequest cubeRequest){
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    return cubeRequest;
  }
  if (!cubeService.isCubeDescEditable(desc)) {
    String error=""String_Node_Str"" + desc.getName().toUpperCase() + ""String_Node_Str"";
    updateRequest(cubeRequest,false,error);
    return cubeRequest;
  }
  String descData=""String_Node_Str"";
  try {
    CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    desc=cubeService.updateCubeAndDesc(cube,desc,projectName);
    descData=JsonUtil.writeValueAsIndentString(desc);
  }
 catch (  AccessDeniedException accessDeniedException) {
    throw new ForbiddenException(""String_Node_Str"");
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    e.printStackTrace();
    throw new InternalErrorException(""String_Node_Str"",e);
  }
  if (desc.getError().isEmpty()) {
    cubeRequest.setSuccessful(true);
  }
 else {
    updateRequest(cubeRequest,false,omitMessage(desc.getError()));
  }
  cubeRequest.setCubeDescData(descData);
  return cubeRequest;
}","/** 
 * Get available table list of the input database
 * @return Table metadata array
 * @throws JsonProcessingException 
 * @throws IOException
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.PUT}) @ResponseBody @Metered(name=""String_Node_Str"") public CubeRequest updateCubeDesc(@RequestBody CubeRequest cubeRequest) throws JsonProcessingException {
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    return cubeRequest;
  }
  if (!cubeService.isCubeDescEditable(desc)) {
    String error=""String_Node_Str"" + desc.getName().toUpperCase() + ""String_Node_Str"";
    updateRequest(cubeRequest,false,error);
    return cubeRequest;
  }
  try {
    CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    desc=cubeService.updateCubeAndDesc(cube,desc,projectName);
  }
 catch (  AccessDeniedException accessDeniedException) {
    throw new ForbiddenException(""String_Node_Str"");
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    throw new InternalErrorException(""String_Node_Str"",e);
  }
  if (desc.getError().isEmpty()) {
    cubeRequest.setSuccessful(true);
  }
 else {
    updateRequest(cubeRequest,false,omitMessage(desc.getError()));
  }
  String descData=JsonUtil.writeValueAsIndentString(desc);
  cubeRequest.setCubeDescData(descData);
  return cubeRequest;
}",0.6418163334462894
63276,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws UnknownHostException, IOException, JobException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  try {
    if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
      this.releaseAllSegments(cube);
    }
    CubeDesc updatedCubeDesc=getMetadataManager().updateCubeDesc(desc);
    int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
    logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
    if (!getProjectManager().isCubeInProject(newProjectName,cube)) {
      String owner=SecurityContextHolder.getContext().getAuthentication().getName();
      ProjectInstance newProject=getProjectManager().updateCubeToProject(cube.getName(),newProjectName,owner);
      accessService.inherit(cube,newProject);
    }
    return updatedCubeDesc;
  }
 catch (  IOException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
catch (  CubeIntegrityException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public CubeDesc updateCubeAndDesc(CubeInstance cube,CubeDesc desc,String newProjectName) throws Exception {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"");
    }
  }
  if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
    this.releaseAllSegments(cube);
  }
  CubeDesc updatedCubeDesc=getMetadataManager().updateCubeDesc(desc);
  int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
  logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
  if (!getProjectManager().isCubeInProject(newProjectName,cube)) {
    String owner=SecurityContextHolder.getContext().getAuthentication().getName();
    ProjectInstance newProject=getProjectManager().updateCubeToProject(cube.getName(),newProjectName,owner);
    accessService.inherit(cube,newProject);
  }
  return updatedCubeDesc;
}",0.4751131221719457
63277,"public static Set<String> reloadHiveTables(String[] hiveTables,KylinConfig config) throws IOException {
  Map<String,Set<String>> db2tables=Maps.newHashMap();
  for (  String table : hiveTables) {
    int cut=table.indexOf('.');
    String database=cut >= 0 ? table.substring(0,cut).trim() : ""String_Node_Str"";
    String tableName=cut >= 0 ? table.substring(cut + 1).trim() : table.trim();
    Set<String> set=db2tables.get(database);
    if (set == null) {
      set=Sets.newHashSet();
      db2tables.put(database,set);
    }
    set.add(tableName);
  }
  File metaTmpDir=File.createTempFile(""String_Node_Str"",null);
  metaTmpDir.delete();
  metaTmpDir.mkdirs();
  Set<String> loadedTables=Sets.newHashSet();
  for (  String database : db2tables.keySet()) {
    List<String> loaded=extractHiveTables(database,db2tables.get(database),metaTmpDir,config);
    loadedTables.addAll(loaded);
  }
  ResourceTool.copy(KylinConfig.createInstanceFromUri(metaTmpDir.getAbsolutePath()),config);
  return loadedTables;
}","public static Set<String> reloadHiveTables(String[] hiveTables,KylinConfig config) throws IOException {
  Map<String,Set<String>> db2tables=Maps.newHashMap();
  for (  String table : hiveTables) {
    int cut=table.indexOf('.');
    String database=cut >= 0 ? table.substring(0,cut).trim() : ""String_Node_Str"";
    String tableName=cut >= 0 ? table.substring(cut + 1).trim() : table.trim();
    Set<String> set=db2tables.get(database);
    if (set == null) {
      set=Sets.newHashSet();
      db2tables.put(database,set);
    }
    set.add(tableName);
  }
  File metaTmpDir=File.createTempFile(""String_Node_Str"",null);
  metaTmpDir.delete();
  metaTmpDir.mkdirs();
  for (  String database : db2tables.keySet()) {
    for (    String table : db2tables.get(database)) {
      TableDesc tableDesc=MetadataManager.getInstance(config).getTableDesc(table);
      if (tableDesc == null) {
        continue;
      }
      if (tableDesc.getDatabase().equalsIgnoreCase(database)) {
        continue;
      }
 else {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"",tableDesc.getName(),tableDesc.getDatabase()));
      }
    }
  }
  Set<String> loadedTables=Sets.newHashSet();
  for (  String database : db2tables.keySet()) {
    List<String> loaded=extractHiveTables(database,db2tables.get(database),metaTmpDir,config);
    loadedTables.addAll(loaded);
  }
  ResourceTool.copy(KylinConfig.createInstanceFromUri(metaTmpDir.getAbsolutePath()),config);
  return loadedTables;
}",0.8057439170323095
63278,"@Override public void serialize(TableRecordInfoDigest value,ByteBuffer out){
  BytesUtil.writeVInt(value.nColumns,out);
  BytesUtil.writeVInt(value.byteFormLen,out);
  BytesUtil.writeIntArray(value.offsets,out);
  BytesUtil.writeIntArray(value.dictMaxIds,out);
  BytesUtil.writeIntArray(value.lengths,out);
  for (int i=0; i < value.measureSerializers.length; ++i) {
    BytesUtil.writeAsciiString(value.measureSerializers[i].getDataType().toString(),out);
  }
}","@Override public void serialize(TableRecordInfoDigest value,ByteBuffer out){
  BytesUtil.writeVInt(value.nColumns,out);
  BytesUtil.writeVInt(value.byteFormLen,out);
  BytesUtil.writeIntArray(value.offsets,out);
  BytesUtil.writeIntArray(value.dictMaxIds,out);
  BytesUtil.writeIntArray(value.lengths,out);
  for (int i=0; i < value.measureSerializers.length; ++i) {
    if (value.isMetrics(i)) {
      BytesUtil.writeAsciiString(value.measureSerializers[i].getDataType().toString(),out);
    }
 else {
      BytesUtil.writeAsciiString(null,out);
    }
  }
}",0.9058823529411764
63279,"public int getTablesCount(){
  return cubes.size();
}","public int getTablesCount(){
  return this.getTables().size();
}",0.8717948717948718
63280,"public static Set<String> reloadHiveTables(String[] hiveTables,KylinConfig config) throws IOException {
  Map<String,Set<String>> db2tables=Maps.newHashMap();
  for (  String table : hiveTables) {
    int cut=table.indexOf('.');
    String database=cut >= 0 ? table.substring(0,cut).trim() : ""String_Node_Str"";
    String tableName=cut >= 0 ? table.substring(cut + 1).trim() : table.trim();
    Set<String> set=db2tables.get(database);
    if (set == null) {
      set=Sets.newHashSet();
      db2tables.put(database,set);
    }
    set.add(tableName);
  }
  File metaTmpDir=File.createTempFile(""String_Node_Str"",null);
  metaTmpDir.delete();
  metaTmpDir.mkdirs();
  Set<String> loadedTables=Sets.newHashSet();
  for (  String database : db2tables.keySet()) {
    List<String> loaded=extractHiveTables(database,db2tables.get(database),metaTmpDir,config);
    loadedTables.addAll(loaded);
  }
  ResourceTool.copy(KylinConfig.createInstanceFromUri(metaTmpDir.getAbsolutePath()),config);
  return loadedTables;
}","public static Set<String> reloadHiveTables(String[] hiveTables,KylinConfig config) throws IOException {
  Map<String,Set<String>> db2tables=Maps.newHashMap();
  for (  String table : hiveTables) {
    int cut=table.indexOf('.');
    String database=cut >= 0 ? table.substring(0,cut).trim() : ""String_Node_Str"";
    String tableName=cut >= 0 ? table.substring(cut + 1).trim() : table.trim();
    Set<String> set=db2tables.get(database);
    if (set == null) {
      set=Sets.newHashSet();
      db2tables.put(database,set);
    }
    set.add(tableName);
  }
  File metaTmpDir=File.createTempFile(""String_Node_Str"",null);
  metaTmpDir.delete();
  metaTmpDir.mkdirs();
  for (  String database : db2tables.keySet()) {
    for (    String table : db2tables.get(database)) {
      TableDesc tableDesc=MetadataManager.getInstance(config).getTableDesc(table);
      if (tableDesc == null) {
        continue;
      }
      if (tableDesc.getDatabase().equalsIgnoreCase(database)) {
        continue;
      }
 else {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"",tableDesc.getName(),tableDesc.getDatabase()));
      }
    }
  }
  Set<String> loadedTables=Sets.newHashSet();
  for (  String database : db2tables.keySet()) {
    List<String> loaded=extractHiveTables(database,db2tables.get(database),metaTmpDir,config);
    loadedTables.addAll(loaded);
  }
  ResourceTool.copy(KylinConfig.createInstanceFromUri(metaTmpDir.getAbsolutePath()),config);
  return loadedTables;
}",0.8057439170323095
63281,"/** 
 * make snapshots for the new segment by copying from one of the underlying merging segments. it's ganranteed to be consistent(checked in CubeSegmentValidator)
 * @param cube
 * @param newSeg
 */
private void makeSnapshotForNewSegment(CubeSegment newSeg,List<CubeSegment> mergingSegments){
  for (  Map.Entry<String,String> entry : mergingSegments.get(0).getSnapshots().entrySet()) {
    newSeg.putSnapshotResPath(entry.getKey(),entry.getValue());
  }
}","/** 
 * make snapshots for the new segment by copying from one of the underlying merging segments. it's ganranteed to be consistent(checked in CubeSegmentValidator)
 * @param cube
 * @param newSeg
 */
private void makeSnapshotForNewSegment(CubeInstance cube,CubeSegment newSeg){
  List<CubeSegment> mergingSegments=cube.getMergingSegments(newSeg);
  for (  Map.Entry<String,String> entry : mergingSegments.get(0).getSnapshots().entrySet()) {
    newSeg.putSnapshotResPath(entry.getKey(),entry.getValue());
  }
}",0.6604747162022704
63282,"public void updateSegmentOnJobSucceed(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,String segmentName,String jobUuid,long lastBuildTime,long sizeKB,long sourceRecordCount,long sourceRecordsSize) throws IOException, CubeIntegrityException {
  List<CubeSegment> segmentsInNewStatus=cubeInstance.getSegments(CubeSegmentStatusEnum.NEW);
  CubeSegment cubeSegment=cubeInstance.getSegmentById(jobUuid);
  if (cubeSegment == null) {
    cubeSegment=cubeInstance.getSegment(segmentName,CubeSegmentStatusEnum.NEW);
  }
  Preconditions.checkNotNull(cubeSegment);
  Preconditions.checkArgument(cubeSegment.getStatus() == CubeSegmentStatusEnum.NEW,""String_Node_Str"" + cubeSegment);
switch (buildType) {
case BUILD:
    if (cubeInstance.needMergeImmediately(cubeSegment)) {
      cubeInstance.getSegments().removeAll(cubeInstance.getSegment(CubeSegmentStatusEnum.READY));
    }
 else {
      if (segmentsInNewStatus.size() == 1) {
        cubeInstance.getSegments().removeAll(cubeInstance.getRebuildingSegments());
      }
    }
  break;
case MERGE:
cubeInstance.getSegments().removeAll(cubeInstance.getMergingSegments());
break;
}
cubeSegment.setLastBuildJobID(jobUuid);
cubeSegment.setLastBuildTime(lastBuildTime);
cubeSegment.setSizeKB(sizeKB);
cubeSegment.setSourceRecords(sourceRecordCount);
cubeSegment.setSourceRecordsSize(sourceRecordsSize);
if (segmentsInNewStatus.size() == 1) {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY);
cubeInstance.setStatus(CubeStatusEnum.READY);
for (CubeSegment seg : cubeInstance.getSegments(CubeSegmentStatusEnum.READY_PENDING)) {
seg.setStatus(CubeSegmentStatusEnum.READY);
}
}
 else {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY_PENDING);
}
this.updateCube(cubeInstance);
}","public void updateSegmentOnJobSucceed(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,String segmentName,String lastBuildJobUuid,long lastBuildTime,long sizeKB,long sourceRecordCount,long sourceRecordsSize) throws IOException, CubeIntegrityException {
  List<CubeSegment> segmentsInNewStatus=cubeInstance.getSegments(CubeSegmentStatusEnum.NEW);
  CubeSegment cubeSegment=cubeInstance.getSegment(segmentName,CubeSegmentStatusEnum.NEW);
switch (buildType) {
case BUILD:
    if (cubeInstance.incrementalBuildOnHll()) {
      cubeInstance.getSegments().removeAll(cubeInstance.getMergingSegments());
    }
 else {
      if (segmentsInNewStatus.size() == 1) {
        cubeInstance.getSegments().removeAll(cubeInstance.getRebuildingSegments());
      }
    }
  break;
case MERGE:
cubeInstance.getSegments().removeAll(cubeInstance.getMergingSegments());
break;
}
cubeSegment.setLastBuildJobID(lastBuildJobUuid);
cubeSegment.setLastBuildTime(lastBuildTime);
cubeSegment.setSizeKB(sizeKB);
cubeSegment.setSourceRecords(sourceRecordCount);
cubeSegment.setSourceRecordsSize(sourceRecordsSize);
if (segmentsInNewStatus.size() == 1) {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY);
cubeInstance.setStatus(CubeStatusEnum.READY);
for (CubeSegment seg : cubeInstance.getSegments(CubeSegmentStatusEnum.READY_PENDING)) {
seg.setStatus(CubeSegmentStatusEnum.READY);
}
}
 else {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY_PENDING);
}
this.updateCube(cubeInstance);
}",0.8448492462311558
63283,"public List<CubeSegment> allocateSegments(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,long startDate,long endDate) throws IOException, CubeIntegrityException {
  if (cubeInstance.getBuildingSegments().size() > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<CubeSegment> segments=new ArrayList<CubeSegment>();
  boolean needMergeImmediately=cubeInstance.needMergeImmediately(startDate,endDate);
  if (null != cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateColumn()) {
    if (needMergeImmediately) {
      segments.add(buildSegment(cubeInstance,startDate,endDate));
    }
 else {
      if (startDate == 0 && cubeInstance.getSegments().size() == 0) {
        startDate=cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateStart();
      }
      CubeSegment lastSegment=null;
      for (      CubeSegment segment : cubeInstance.getSegments()) {
        if (segment.getDateRangeStart() == startDate) {
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        if (segment.getDateRangeStart() < startDate && startDate < segment.getDateRangeEnd()) {
          segments.add(buildSegment(cubeInstance,segment.getDateRangeStart(),startDate));
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        lastSegment=segment;
      }
      if (null == lastSegment || (lastSegment.getDateRangeEnd() == startDate)) {
        segments.add(buildSegment(cubeInstance,startDate,endDate));
      }
    }
  }
 else {
    segments.add(buildSegment(cubeInstance,0,0));
  }
  validateNewSegments(cubeInstance,buildType,segments);
  if (buildType == CubeBuildTypeEnum.MERGE) {
    CubeSegment newSeg=segments.get(0);
    List<CubeSegment> mergingSegments=cubeInstance.getMergingSegments(newSeg);
    this.makeDictForNewSegment(cubeInstance,newSeg,mergingSegments);
    this.makeSnapshotForNewSegment(newSeg,mergingSegments);
  }
 else   if (needMergeImmediately) {
    CubeSegment newSeg=segments.get(0);
    List<CubeSegment> mergingSegments=cubeInstance.getSegment(CubeSegmentStatusEnum.READY);
    this.makeDictForNewSegment(cubeInstance,newSeg,mergingSegments);
    this.makeSnapshotForNewSegment(newSeg,mergingSegments);
  }
  cubeInstance.getSegments().addAll(segments);
  Collections.sort(cubeInstance.getSegments());
  this.updateCube(cubeInstance);
  return segments;
}","public List<CubeSegment> allocateSegments(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,long startDate,long endDate) throws IOException, CubeIntegrityException {
  if (cubeInstance.getBuildingSegments().size() > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<CubeSegment> segments=new ArrayList<CubeSegment>();
  if (null != cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateColumn()) {
    if (cubeInstance.incrementalBuildOnHll()) {
      long[] dateRange=cubeInstance.getDateRange();
      segments.add(buildSegment(cubeInstance,dateRange[0],endDate));
    }
 else {
      if (startDate == 0 && cubeInstance.getSegments().size() == 0) {
        startDate=cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateStart();
      }
      CubeSegment lastSegment=null;
      for (      CubeSegment segment : cubeInstance.getSegments()) {
        if (segment.getDateRangeStart() == startDate) {
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        if (segment.getDateRangeStart() < startDate && startDate < segment.getDateRangeEnd()) {
          segments.add(buildSegment(cubeInstance,segment.getDateRangeStart(),startDate));
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        lastSegment=segment;
      }
      if (null == lastSegment || (lastSegment.getDateRangeEnd() == startDate)) {
        segments.add(buildSegment(cubeInstance,startDate,endDate));
      }
    }
  }
 else {
    segments.add(buildSegment(cubeInstance,0,0));
  }
  validateNewSegments(cubeInstance,buildType,segments);
  if (buildType == CubeBuildTypeEnum.MERGE || cubeInstance.incrementalBuildOnHll()) {
    this.makeDictForNewSegment(cubeInstance,segments.get(0));
    this.makeSnapshotForNewSegment(cubeInstance,segments.get(0));
  }
  cubeInstance.getSegments().addAll(segments);
  Collections.sort(cubeInstance.getSegments());
  this.updateCube(cubeInstance);
  return segments;
}",0.7270226908090763
63284,"/** 
 * For the new segment, we need to create dictionaries for it, too. For those dictionaries on fact table, create it by merging underlying dictionaries For those dictionaries on lookup table, just copy it from any one of the merging segments, it's guaranteed to be consistent(checked in CubeSegmentValidator)
 * @param cube
 * @param newSeg
 * @throws IOException
 */
private void makeDictForNewSegment(CubeInstance cube,CubeSegment newSeg,List<CubeSegment> mergingSegments) throws IOException {
  HashSet<TblColRef> colsNeedMeringDict=new HashSet<TblColRef>();
  HashSet<TblColRef> colsNeedCopyDict=new HashSet<TblColRef>();
  DictionaryManager dictMgr=this.getDictionaryManager();
  CubeDesc descriptor=cube.getDescriptor();
  for (  DimensionDesc dim : descriptor.getDimensions()) {
    for (    TblColRef col : dim.getColumnRefs()) {
      if (newSeg.getCubeDesc().getRowkey().isUseDictionary(col)) {
        if (descriptor.getFactTable().equalsIgnoreCase((String)dictMgr.decideSourceData(descriptor,col,null)[0])) {
          colsNeedMeringDict.add(col);
        }
 else {
          colsNeedCopyDict.add(col);
        }
      }
    }
  }
  for (  TblColRef col : colsNeedMeringDict) {
    logger.info(""String_Node_Str"" + col);
    List<DictionaryInfo> dictInfos=new ArrayList<DictionaryInfo>();
    for (    CubeSegment segment : mergingSegments) {
      logger.info(""String_Node_Str"" + segment);
      DictionaryInfo dictInfo=dictMgr.getDictionaryInfo(segment.getDictResPath(col));
      dictInfos.add(dictInfo);
    }
    this.mergeDictionaries(newSeg,dictInfos,col);
  }
  for (  TblColRef col : colsNeedCopyDict) {
    String path=mergingSegments.get(0).getDictResPath(col);
    newSeg.putDictResPath(col,path);
  }
}","/** 
 * For the new segment, we need to create dictionaries for it, too. For those dictionaries on fact table, create it by merging underlying dictionaries For those dictionaries on lookup table, just copy it from any one of the merging segments, it's guaranteed to be consistent(checked in CubeSegmentValidator)
 * @param cube
 * @param newSeg
 * @throws IOException
 */
private void makeDictForNewSegment(CubeInstance cube,CubeSegment newSeg) throws IOException {
  List<CubeSegment> mergingSegments=cube.getMergingSegments(newSeg);
  HashSet<TblColRef> colsNeedMeringDict=new HashSet<TblColRef>();
  HashSet<TblColRef> colsNeedCopyDict=new HashSet<TblColRef>();
  DictionaryManager dictMgr=this.getDictionaryManager();
  for (  DimensionDesc dim : cube.getDescriptor().getDimensions()) {
    for (    TblColRef col : dim.getColumnRefs()) {
      if (newSeg.getCubeDesc().getRowkey().isUseDictionary(col)) {
        if (cube.getDescriptor().getFactTable().equalsIgnoreCase((String)dictMgr.decideSourceData(cube.getDescriptor(),col,null)[0])) {
          colsNeedMeringDict.add(col);
        }
 else {
          colsNeedCopyDict.add(col);
        }
      }
    }
  }
  for (  TblColRef col : colsNeedMeringDict) {
    logger.info(""String_Node_Str"" + col);
    List<DictionaryInfo> dictInfos=new ArrayList<DictionaryInfo>();
    for (    CubeSegment segment : mergingSegments) {
      logger.info(""String_Node_Str"" + segment);
      DictionaryInfo dictInfo=dictMgr.getDictionaryInfo(segment.getDictResPath(col));
      dictInfos.add(dictInfo);
    }
    this.mergeDictionaries(newSeg,dictInfos,col);
  }
  for (  TblColRef col : colsNeedCopyDict) {
    String path=mergingSegments.get(0).getDictResPath(col);
    newSeg.putDictResPath(col,path);
  }
}",0.9319161160586038
63285,"private void checkContingency(CubeInstance cubeInstance,CubeSegment newSegment) throws CubeIntegrityException {
  CubeSegment startSeg=null;
  CubeSegment endSeg=null;
  for (  CubeSegment segment : cubeInstance.getSegments()) {
    if (segment.getDateRangeStart() == newSegment.getDateRangeStart()) {
      startSeg=segment;
    }
    if (segment.getDateRangeEnd() == newSegment.getDateRangeEnd()) {
      endSeg=segment;
    }
  }
  if (null == startSeg || null == endSeg || startSeg.getDateRangeStart() >= endSeg.getDateRangeStart()) {
    throw new CubeIntegrityException(""String_Node_Str"");
  }
}","private void checkContingency(CubeInstance cubeInstance,List<CubeSegment> newSegments) throws CubeIntegrityException {
  if (cubeInstance.getSegments().size() < 2) {
    throw new CubeIntegrityException(""String_Node_Str"");
  }
  if (newSegments.size() != 1) {
    throw new CubeIntegrityException(""String_Node_Str"");
  }
  CubeSegment newSegment=newSegments.get(0);
  CubeSegment startSeg=null;
  CubeSegment endSeg=null;
  for (  CubeSegment segment : cubeInstance.getSegments()) {
    if (segment.getDateRangeStart() == newSegment.getDateRangeStart()) {
      startSeg=segment;
    }
    if (segment.getDateRangeEnd() == newSegment.getDateRangeEnd()) {
      endSeg=segment;
    }
  }
  if (null == startSeg || null == endSeg || startSeg.getDateRangeStart() >= endSeg.getDateRangeStart()) {
    throw new CubeIntegrityException(""String_Node_Str"");
  }
}",0.7953296703296703
63286,"private void checkLoopTableConsistency(CubeInstance cube,CubeSegment cubeSeg) throws CubeIntegrityException {
  DictionaryManager dictMgr=DictionaryManager.getInstance(cube.getConfig());
  List<CubeSegment> segmentList=cube.getMergingSegments(cubeSeg);
  HashSet<TblColRef> cols=new HashSet<TblColRef>();
  for (  DimensionDesc dim : cube.getDescriptor().getDimensions()) {
    for (    TblColRef col : dim.getColumnRefs()) {
      try {
        if (cubeSeg.getCubeDesc().getRowkey().isUseDictionary(col) && !cube.getDescriptor().getFactTable().equalsIgnoreCase((String)dictMgr.decideSourceData(cube.getDescriptor(),col,null)[0])) {
          cols.add(col);
        }
      }
 catch (      IOException e) {
        throw new CubeIntegrityException(""String_Node_Str"");
      }
    }
  }
  for (  TblColRef col : cols) {
    String dictOfFirstSegment=null;
    for (    CubeSegment segment : segmentList) {
      String temp=segment.getDictResPath(col);
      if (temp == null) {
        throw new CubeIntegrityException(""String_Node_Str"" + col + ""String_Node_Str""+ segment);
      }
      if (dictOfFirstSegment == null) {
        dictOfFirstSegment=temp;
      }
 else {
        if (!dictOfFirstSegment.equalsIgnoreCase(temp)) {
          throw new CubeIntegrityException(""String_Node_Str"");
        }
      }
    }
  }
  CubeSegment firstSegment=null;
  for (  CubeSegment segment : segmentList) {
    if (firstSegment == null) {
      firstSegment=segment;
    }
 else {
      Collection<String> a=firstSegment.getSnapshots().values();
      Collection<String> b=segment.getSnapshots().values();
      if (!((a.size() == b.size()) && a.containsAll(b)))       throw new CubeIntegrityException(""String_Node_Str"");
    }
  }
}","private void checkLoopTableConsistency(CubeInstance cube,List<CubeSegment> newSegments) throws CubeIntegrityException {
  CubeSegment cubeSeg=newSegments.get(0);
  DictionaryManager dictMgr=DictionaryManager.getInstance(cube.getConfig());
  List<CubeSegment> segmentList=cube.getMergingSegments(cubeSeg);
  HashSet<TblColRef> cols=new HashSet<TblColRef>();
  for (  DimensionDesc dim : cube.getDescriptor().getDimensions()) {
    for (    TblColRef col : dim.getColumnRefs()) {
      try {
        if (cubeSeg.getCubeDesc().getRowkey().isUseDictionary(col) && !cube.getDescriptor().getFactTable().equalsIgnoreCase((String)dictMgr.decideSourceData(cube.getDescriptor(),col,null)[0])) {
          cols.add(col);
        }
      }
 catch (      IOException e) {
        throw new CubeIntegrityException(""String_Node_Str"");
      }
    }
  }
  for (  TblColRef col : cols) {
    String dictOfFirstSegment=null;
    for (    CubeSegment segment : segmentList) {
      String temp=segment.getDictResPath(col);
      if (temp == null) {
        throw new CubeIntegrityException(""String_Node_Str"" + col + ""String_Node_Str""+ segment);
      }
      if (dictOfFirstSegment == null) {
        dictOfFirstSegment=temp;
      }
 else {
        if (!dictOfFirstSegment.equalsIgnoreCase(temp)) {
          throw new CubeIntegrityException(""String_Node_Str"");
        }
      }
    }
  }
  CubeSegment firstSegment=null;
  for (  CubeSegment segment : segmentList) {
    if (firstSegment == null) {
      firstSegment=segment;
    }
 else {
      Collection<String> a=firstSegment.getSnapshots().values();
      Collection<String> b=segment.getSnapshots().values();
      if (!((a.size() == b.size()) && a.containsAll(b)))       throw new CubeIntegrityException(""String_Node_Str"");
    }
  }
}",0.9743003997715592
63287,"private List<JobStep> createBuildCubeSegmentSteps(JobInstance jobInstance) throws IOException {
  int groupRowkeyColumnsCount=cube.getDescriptor().getRowkey().getNCuboidBuildLevels();
  int totalRowkeyColumnsCount=cube.getDescriptor().getRowkey().getRowKeyColumns().length;
  int stepSeqNum=0;
  List<JobStep> result=Lists.newArrayList();
  if (this.engineConfig.isFlatTableByHive()) {
    result.add(createIntermediateHiveTableStep(jobInstance,stepSeqNum++));
  }
  result.add(createFactDistinctColumnsStep(jobInstance,stepSeqNum++));
  result.add(createBuildDictionaryStep(jobInstance,stepSeqNum++));
  final String cuboidRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final String cuboidTmpRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final boolean incBuildMerge=cube.needMergeImmediately(cube.getSegmentById(jobInstance.getUuid()));
  String[] cuboidOutputTempPath=getCuboidOutputPaths(incBuildMerge ? cuboidTmpRootPath : cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.add(createBaseCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.add(createNDimensionCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  if (incBuildMerge) {
    List<String> pathToMerge=Lists.newArrayList();
    for (    CubeSegment segment : cube.getSegments(CubeSegmentStatusEnum.READY)) {
      pathToMerge.add(getPathToMerge(jobInstance,segment));
    }
    pathToMerge.add(cuboidTmpRootPath + ""String_Node_Str"");
    result.add(createMergeCuboidDataStep(jobInstance,stepSeqNum++,formatPaths(pathToMerge),cuboidRootPath));
  }
  String cuboidPath=incBuildMerge ? cuboidRootPath : cuboidRootPath + ""String_Node_Str"";
  result.add(createRangeRowkeyDistributionStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createCreateHTableStep(jobInstance,stepSeqNum++));
  result.add(createConvertCuboidToHfileStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createBulkLoadStep(jobInstance,stepSeqNum++));
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  return result;
}","private List<JobStep> createBuildCubeSegmentSteps(JobInstance jobInstance) throws IOException {
  int groupRowkeyColumnsCount=cube.getDescriptor().getRowkey().getNCuboidBuildLevels();
  int totalRowkeyColumnsCount=cube.getDescriptor().getRowkey().getRowKeyColumns().length;
  int stepSeqNum=0;
  List<JobStep> result=Lists.newArrayList();
  if (this.engineConfig.isFlatTableByHive()) {
    result.add(createIntermediateHiveTableStep(jobInstance,stepSeqNum++));
  }
  result.add(createFactDistinctColumnsStep(jobInstance,stepSeqNum++));
  result.add(createBuildDictionaryStep(jobInstance,stepSeqNum++));
  final String cuboidRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final String cuboidTmpRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final boolean incBuildMerge=cube.incrementalBuildOnHll();
  String[] cuboidOutputTempPath=getCuboidOutputPaths(incBuildMerge ? cuboidTmpRootPath : cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.add(createBaseCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.add(createNDimensionCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  if (incBuildMerge) {
    List<String> pathToMerge=Lists.newArrayList();
    for (    CubeSegment segment : cube.getSegments(CubeSegmentStatusEnum.READY)) {
      pathToMerge.add(getPathToMerge(jobInstance,segment));
    }
    pathToMerge.add(cuboidTmpRootPath + ""String_Node_Str"");
    result.add(createMergeCuboidDataStep(jobInstance,stepSeqNum++,formatPaths(pathToMerge),cuboidRootPath));
  }
  String cuboidPath=incBuildMerge ? cuboidRootPath : cuboidRootPath + ""String_Node_Str"";
  result.add(createRangeRowkeyDistributionStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createCreateHTableStep(jobInstance,stepSeqNum++));
  result.add(createConvertCuboidToHfileStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createBulkLoadStep(jobInstance,stepSeqNum++));
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  return result;
}",0.9817059731099844
63288,"private static void appendWhereStatement(JoinedFlatTableDesc intermediateTableDesc,StringBuilder sql){
  boolean hasCondition=false;
  StringBuilder whereBuilder=new StringBuilder();
  whereBuilder.append(""String_Node_Str"");
  CubeDesc cubeDesc=intermediateTableDesc.getCubeDesc();
  if (cubeDesc.getFilterCondition() != null && cubeDesc.getFilterCondition().equals(""String_Node_Str"") == false) {
    whereBuilder.append(""String_Node_Str"").append(cubeDesc.getFilterCondition()).append(""String_Node_Str"");
    hasCondition=true;
  }
  CubeSegment cubeSegment=intermediateTableDesc.getCubeSegment();
  if (null != cubeSegment) {
    long dateStart=cubeSegment.getDateRangeStart();
    long dateEnd=cubeSegment.getDateRangeEnd();
    if (!(dateStart == 0 && dateEnd == 0)) {
      String partitionColumnName=cubeDesc.getCubePartitionDesc().getPartitionDateColumn();
      whereBuilder.append(hasCondition ? ""String_Node_Str"" : ""String_Node_Str"");
      if (dateStart > 0) {
        whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateStart)+ ""String_Node_Str"");
        whereBuilder.append(""String_Node_Str"");
      }
      whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateEnd)+ ""String_Node_Str"");
      whereBuilder.append(""String_Node_Str"");
      hasCondition=true;
    }
  }
  if (hasCondition) {
    sql.append(whereBuilder.toString());
  }
}","private static void appendWhereStatement(JoinedFlatTableDesc intermediateTableDesc,StringBuilder sql){
  boolean hasCondition=false;
  StringBuilder whereBuilder=new StringBuilder();
  whereBuilder.append(""String_Node_Str"");
  CubeDesc cubeDesc=intermediateTableDesc.getCubeDesc();
  if (cubeDesc.getFilterCondition() != null && cubeDesc.getFilterCondition().equals(""String_Node_Str"") == false) {
    whereBuilder.append(""String_Node_Str"").append(cubeDesc.getFilterCondition()).append(""String_Node_Str"");
    hasCondition=true;
  }
  CubeSegment cubeSegment=intermediateTableDesc.getCubeSegment();
  if (null != cubeSegment) {
    long dateStart=cubeSegment.getDateRangeStart();
    long dateEnd=cubeSegment.getDateRangeEnd();
    if (cubeSegment.getCubeInstance().incrementalBuildOnHll()) {
      dateStart=cubeSegment.getCubeInstance().getDateRange()[1];
    }
    if (!(dateStart == 0 && dateEnd == 0)) {
      String partitionColumnName=cubeDesc.getCubePartitionDesc().getPartitionDateColumn();
      whereBuilder.append(hasCondition ? ""String_Node_Str"" : ""String_Node_Str"");
      if (dateStart > 0) {
        whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateStart)+ ""String_Node_Str"");
        whereBuilder.append(""String_Node_Str"");
      }
      whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateEnd)+ ""String_Node_Str"");
      whereBuilder.append(""String_Node_Str"");
      hasCondition=true;
    }
  }
  if (hasCondition) {
    sql.append(whereBuilder.toString());
  }
}",0.9546666666666668
63289,"private void updateCubeSegmentInfoOnSucceed(JobInstance jobInstance,JobEngineConfig engineConfig) throws CubeIntegrityException, IOException {
  if (jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {
    validate(jobInstance);
    log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
    long cubeSize=0;
    JobStep convertToHFileStep=jobInstance.findStep(JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE);
    if (null != convertToHFileStep) {
      String cubeSizeString=convertToHFileStep.getInfo(JobInstance.HDFS_BYTES_WRITTEN);
      if (cubeSizeString == null || cubeSizeString.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      cubeSize=Long.parseLong(cubeSizeString) / 1024;
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE + ""String_Node_Str"");
    }
    CubeManager cubeMgr=CubeManager.getInstance(engineConfig.getConfig());
    CubeInstance cubeInstance=cubeMgr.getCube(jobInstance.getRelatedCube());
    long sourceCount=0;
    long sourceSize=0;
switch (jobInstance.getType()) {
case BUILD:
      JobStep baseCuboidStep=jobInstance.findStep(JobConstants.STEP_NAME_BUILD_BASE_CUBOID);
    if (null != baseCuboidStep) {
      String sourceRecordsCount=baseCuboidStep.getInfo(JobInstance.SOURCE_RECORDS_COUNT);
      if (sourceRecordsCount == null || sourceRecordsCount.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      sourceCount=Long.parseLong(sourceRecordsCount);
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_BUILD_BASE_CUBOID + ""String_Node_Str"");
    }
  JobStep createFlatTableStep=jobInstance.findStep(JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
if (null != createFlatTableStep) {
  String sourceRecordsSize=createFlatTableStep.getInfo(JobInstance.SOURCE_RECORDS_SIZE);
  if (sourceRecordsSize == null || sourceRecordsSize.equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  sourceSize=Long.parseLong(sourceRecordsSize);
}
 else {
  log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE + ""String_Node_Str"");
}
CubeSegment segmentById=cubeInstance.getSegmentById(jobInstance.getUuid());
if (cubeInstance.needMergeImmediately(segmentById)) {
for (CubeSegment seg : cubeInstance.getSegment(CubeSegmentStatusEnum.READY)) {
if (seg.getDateRangeEnd() >= segmentById.getDateRangeStart()) {
  sourceCount+=seg.getSourceRecords();
  sourceSize+=seg.getSourceRecordsSize();
}
}
}
break;
case MERGE:
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
break;
}
cubeMgr.updateSegmentOnJobSucceed(cubeInstance,jobInstance.getType(),jobInstance.getRelatedSegment(),jobInstance.getUuid(),jobInstance.getExecEndTime(),cubeSize,sourceCount,sourceSize);
log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
}
}","private void updateCubeSegmentInfoOnSucceed(JobInstance jobInstance,JobEngineConfig engineConfig) throws CubeIntegrityException, IOException {
  if (jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {
    validate(jobInstance);
    log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
    long cubeSize=0;
    JobStep convertToHFileStep=jobInstance.findStep(JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE);
    if (null != convertToHFileStep) {
      String cubeSizeString=convertToHFileStep.getInfo(JobInstance.HDFS_BYTES_WRITTEN);
      if (cubeSizeString == null || cubeSizeString.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      cubeSize=Long.parseLong(cubeSizeString) / 1024;
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE + ""String_Node_Str"");
    }
    CubeManager cubeMgr=CubeManager.getInstance(engineConfig.getConfig());
    CubeInstance cubeInstance=cubeMgr.getCube(jobInstance.getRelatedCube());
    long sourceCount=0;
    long sourceSize=0;
switch (jobInstance.getType()) {
case BUILD:
      JobStep baseCuboidStep=jobInstance.findStep(JobConstants.STEP_NAME_BUILD_BASE_CUBOID);
    if (null != baseCuboidStep) {
      String sourceRecordsCount=baseCuboidStep.getInfo(JobInstance.SOURCE_RECORDS_COUNT);
      if (sourceRecordsCount == null || sourceRecordsCount.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      sourceCount=Long.parseLong(sourceRecordsCount);
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_BUILD_BASE_CUBOID + ""String_Node_Str"");
    }
  JobStep createFlatTableStep=jobInstance.findStep(JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
if (null != createFlatTableStep) {
  String sourceRecordsSize=createFlatTableStep.getInfo(JobInstance.SOURCE_RECORDS_SIZE);
  if (sourceRecordsSize == null || sourceRecordsSize.equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  sourceSize=Long.parseLong(sourceRecordsSize);
}
 else {
  log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE + ""String_Node_Str"");
}
if (cubeInstance.incrementalBuildOnHll()) {
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
  sourceCount+=seg.getSourceRecords();
  sourceSize+=seg.getSourceRecordsSize();
}
}
break;
case MERGE:
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
break;
}
cubeMgr.updateSegmentOnJobSucceed(cubeInstance,jobInstance.getType(),jobInstance.getRelatedSegment(),jobInstance.getUuid(),jobInstance.getExecEndTime(),cubeSize,sourceCount,sourceSize);
log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
}
}",0.9438732513062532
63290,"protected List<String> submitJob(String cubename,long startDate,long endDate,CubeBuildTypeEnum jobType) throws SchedulerException, IOException, InvalidJobInstanceException, CubeIntegrityException {
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  CubeInstance cube=cubeMgr.getCube(cubename);
  CubeManager.getInstance(this.getTestConfig()).loadCubeCache(cube);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<CubeSegment> newSegments=cubeMgr.allocateSegments(cube,jobType,startDate,endDate);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<String> jobUuids=Lists.newArrayList();
  List<JobInstance> jobs=Lists.newArrayList();
  for (  CubeSegment seg : newSegments) {
    String uuid=seg.getUuid();
    jobUuids.add(uuid);
    jobs.add(jobManager.createJob(cubename,seg.getName(),uuid,jobType));
  }
  for (  JobInstance job : jobs) {
    jobManager.submitJob(job);
  }
  return jobUuids;
}","protected List<String> submitJob(String cubename,long startDate,long endDate,CubeBuildTypeEnum jobType) throws SchedulerException, IOException, InvalidJobInstanceException, CubeIntegrityException {
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  CubeInstance cube=cubeMgr.getCube(cubename);
  CubeManager.getInstance(this.getTestConfig()).loadCubeCache(cube);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<CubeSegment> newSegments=cubeMgr.allocateSegments(cube,jobType,startDate,endDate);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<String> jobUuids=Lists.newArrayList();
  List<JobInstance> jobs=Lists.newArrayList();
  for (  CubeSegment seg : newSegments) {
    String uuid=seg.getUuid();
    jobUuids.add(uuid);
    jobs.add(jobManager.createJob(cubename,seg.getName(),uuid,jobType));
    seg.setLastBuildJobID(uuid);
  }
  cubeMgr.updateCube(cube);
  for (  JobInstance job : jobs) {
    jobManager.submitJob(job);
  }
  return jobUuids;
}",0.969454181271908
63291,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public String submitJob(CubeInstance cube,long startDate,long endDate,CubeBuildTypeEnum buildType) throws IOException, JobException, InvalidJobInstanceException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ jobInstance.getUuid()+ ""String_Node_Str"");
    }
  }
  String uuid=null;
  try {
    List<CubeSegment> cubeSegments=this.getCubeManager().allocateSegments(cube,buildType,startDate,endDate);
    List<JobInstance> jobs=Lists.newArrayListWithExpectedSize(cubeSegments.size());
    for (    CubeSegment segment : cubeSegments) {
      uuid=segment.getUuid();
      JobInstance job=this.getJobManager().createJob(cube.getName(),segment.getName(),segment.getUuid(),buildType);
      jobs.add(job);
    }
    for (    JobInstance job : jobs) {
      this.getJobManager().submitJob(job);
      permissionService.init(job,null);
      permissionService.inherit(job,cube);
    }
  }
 catch (  CubeIntegrityException e) {
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  return uuid;
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + ""String_Node_Str"") public String submitJob(CubeInstance cube,long startDate,long endDate,CubeBuildTypeEnum buildType) throws IOException, JobException, InvalidJobInstanceException {
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ jobInstance.getUuid()+ ""String_Node_Str"");
    }
  }
  String uuid=null;
  try {
    List<CubeSegment> cubeSegments=this.getCubeManager().allocateSegments(cube,buildType,startDate,endDate);
    List<JobInstance> jobs=Lists.newArrayListWithExpectedSize(cubeSegments.size());
    for (    CubeSegment segment : cubeSegments) {
      uuid=segment.getUuid();
      JobInstance job=this.getJobManager().createJob(cube.getName(),segment.getName(),segment.getUuid(),buildType);
      segment.setLastBuildJobID(uuid);
      jobs.add(job);
    }
    getCubeManager().updateCube(cube);
    for (    JobInstance job : jobs) {
      this.getJobManager().submitJob(job);
      permissionService.init(job,null);
      permissionService.inherit(job,cube);
    }
  }
 catch (  CubeIntegrityException e) {
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  return uuid;
}",0.972083035075161
63292,"private List<JobStep> createBuildCubeSegmentSteps(JobInstance jobInstance) throws IOException {
  int groupRowkeyColumnsCount=cube.getDescriptor().getRowkey().getNCuboidBuildLevels();
  int totalRowkeyColumnsCount=cube.getDescriptor().getRowkey().getRowKeyColumns().length;
  int stepSeqNum=0;
  List<JobStep> result=Lists.newArrayList();
  if (this.engineConfig.isFlatTableByHive()) {
    result.add(createIntermediateHiveTableStep(jobInstance,stepSeqNum++));
  }
  result.add(createFactDistinctColumnsStep(jobInstance,stepSeqNum++));
  result.add(createBuildDictionaryStep(jobInstance,stepSeqNum++));
  final String cuboidRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final String cuboidTmpRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final boolean incBuildMerge=cube.needMergeImmediatelyAfterBuild();
  String[] cuboidOutputTempPath=getCuboidOutputPaths(incBuildMerge ? cuboidTmpRootPath : cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.add(createBaseCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.add(createNDimensionCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  if (incBuildMerge) {
    List<String> pathToMerge=Lists.newArrayList();
    for (    CubeSegment segment : cube.getSegments(CubeSegmentStatusEnum.READY)) {
      pathToMerge.add(getPathToMerge(jobInstance,segment));
    }
    pathToMerge.add(cuboidTmpRootPath + ""String_Node_Str"");
    result.add(createMergeCuboidDataStep(jobInstance,stepSeqNum++,formatPaths(pathToMerge),cuboidRootPath));
  }
  String cuboidPath=incBuildMerge ? cuboidRootPath : cuboidRootPath + ""String_Node_Str"";
  result.add(createRangeRowkeyDistributionStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createCreateHTableStep(jobInstance,stepSeqNum++));
  result.add(createConvertCuboidToHfileStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createBulkLoadStep(jobInstance,stepSeqNum++));
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  return result;
}","private List<JobStep> createBuildCubeSegmentSteps(JobInstance jobInstance) throws IOException {
  int groupRowkeyColumnsCount=cube.getDescriptor().getRowkey().getNCuboidBuildLevels();
  int totalRowkeyColumnsCount=cube.getDescriptor().getRowkey().getRowKeyColumns().length;
  int stepSeqNum=0;
  List<JobStep> result=Lists.newArrayList();
  if (this.engineConfig.isFlatTableByHive()) {
    result.add(createIntermediateHiveTableStep(jobInstance,stepSeqNum++));
  }
  result.add(createFactDistinctColumnsStep(jobInstance,stepSeqNum++));
  result.add(createBuildDictionaryStep(jobInstance,stepSeqNum++));
  final String cuboidRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final String cuboidTmpRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final boolean incBuildMerge=cube.needMergeImmediatelyAfterBuild(cubeSegment);
  String[] cuboidOutputTempPath=getCuboidOutputPaths(incBuildMerge ? cuboidTmpRootPath : cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.add(createBaseCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.add(createNDimensionCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  if (incBuildMerge) {
    List<String> pathToMerge=Lists.newArrayList();
    for (    CubeSegment segment : cube.getSegments(CubeSegmentStatusEnum.READY)) {
      pathToMerge.add(getPathToMerge(jobInstance,segment));
    }
    pathToMerge.add(cuboidTmpRootPath + ""String_Node_Str"");
    result.add(createMergeCuboidDataStep(jobInstance,stepSeqNum++,formatPaths(pathToMerge),cuboidRootPath));
  }
  String cuboidPath=incBuildMerge ? cuboidRootPath : cuboidRootPath + ""String_Node_Str"";
  result.add(createRangeRowkeyDistributionStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createCreateHTableStep(jobInstance,stepSeqNum++));
  result.add(createConvertCuboidToHfileStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createBulkLoadStep(jobInstance,stepSeqNum++));
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  return result;
}",0.9975690607734806
63293,"private static void appendWhereStatement(JoinedFlatTableDesc intermediateTableDesc,StringBuilder sql){
  boolean hasCondition=false;
  StringBuilder whereBuilder=new StringBuilder();
  whereBuilder.append(""String_Node_Str"");
  CubeDesc cubeDesc=intermediateTableDesc.getCubeDesc();
  if (cubeDesc.getFilterCondition() != null && cubeDesc.getFilterCondition().equals(""String_Node_Str"") == false) {
    whereBuilder.append(""String_Node_Str"").append(cubeDesc.getFilterCondition()).append(""String_Node_Str"");
    hasCondition=true;
  }
  CubeSegment cubeSegment=intermediateTableDesc.getCubeSegment();
  if (null != cubeSegment) {
    long dateStart=cubeSegment.getDateRangeStart();
    long dateEnd=cubeSegment.getDateRangeEnd();
    if (cubeSegment.getCubeInstance().needMergeImmediatelyAfterBuild()) {
      dateStart=cubeSegment.getCubeInstance().getDateRange()[1];
    }
    if (!(dateStart == 0 && dateEnd == 0)) {
      String partitionColumnName=cubeDesc.getCubePartitionDesc().getPartitionDateColumn();
      whereBuilder.append(hasCondition ? ""String_Node_Str"" : ""String_Node_Str"");
      if (dateStart > 0) {
        whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateStart)+ ""String_Node_Str"");
        whereBuilder.append(""String_Node_Str"");
      }
      whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateEnd)+ ""String_Node_Str"");
      whereBuilder.append(""String_Node_Str"");
      hasCondition=true;
    }
  }
  if (hasCondition) {
    sql.append(whereBuilder.toString());
  }
}","private static void appendWhereStatement(JoinedFlatTableDesc intermediateTableDesc,StringBuilder sql){
  boolean hasCondition=false;
  StringBuilder whereBuilder=new StringBuilder();
  whereBuilder.append(""String_Node_Str"");
  CubeDesc cubeDesc=intermediateTableDesc.getCubeDesc();
  if (cubeDesc.getFilterCondition() != null && cubeDesc.getFilterCondition().equals(""String_Node_Str"") == false) {
    whereBuilder.append(""String_Node_Str"").append(cubeDesc.getFilterCondition()).append(""String_Node_Str"");
    hasCondition=true;
  }
  CubeSegment cubeSegment=intermediateTableDesc.getCubeSegment();
  if (null != cubeSegment) {
    long dateStart=cubeSegment.getDateRangeStart();
    long dateEnd=cubeSegment.getDateRangeEnd();
    if (cubeSegment.getCubeInstance().needMergeImmediatelyAfterBuild(cubeSegment)) {
      dateStart=cubeSegment.getCubeInstance().getDateRange()[1];
    }
    if (!(dateStart == 0 && dateEnd == 0)) {
      String partitionColumnName=cubeDesc.getCubePartitionDesc().getPartitionDateColumn();
      whereBuilder.append(hasCondition ? ""String_Node_Str"" : ""String_Node_Str"");
      if (dateStart > 0) {
        whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateStart)+ ""String_Node_Str"");
        whereBuilder.append(""String_Node_Str"");
      }
      whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateEnd)+ ""String_Node_Str"");
      whereBuilder.append(""String_Node_Str"");
      hasCondition=true;
    }
  }
  if (hasCondition) {
    sql.append(whereBuilder.toString());
  }
}",0.99652448657188
63294,"private void updateCubeSegmentInfoOnSucceed(JobInstance jobInstance,JobEngineConfig engineConfig) throws CubeIntegrityException, IOException {
  if (jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {
    validate(jobInstance);
    log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
    long cubeSize=0;
    JobStep convertToHFileStep=jobInstance.findStep(JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE);
    if (null != convertToHFileStep) {
      String cubeSizeString=convertToHFileStep.getInfo(JobInstance.HDFS_BYTES_WRITTEN);
      if (cubeSizeString == null || cubeSizeString.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      cubeSize=Long.parseLong(cubeSizeString) / 1024;
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE + ""String_Node_Str"");
    }
    CubeManager cubeMgr=CubeManager.getInstance(engineConfig.getConfig());
    CubeInstance cubeInstance=cubeMgr.getCube(jobInstance.getRelatedCube());
    long sourceCount=0;
    long sourceSize=0;
switch (jobInstance.getType()) {
case BUILD:
      JobStep baseCuboidStep=jobInstance.findStep(JobConstants.STEP_NAME_BUILD_BASE_CUBOID);
    if (null != baseCuboidStep) {
      String sourceRecordsCount=baseCuboidStep.getInfo(JobInstance.SOURCE_RECORDS_COUNT);
      if (sourceRecordsCount == null || sourceRecordsCount.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      sourceCount=Long.parseLong(sourceRecordsCount);
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_BUILD_BASE_CUBOID + ""String_Node_Str"");
    }
  JobStep createFlatTableStep=jobInstance.findStep(JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
if (null != createFlatTableStep) {
  String sourceRecordsSize=createFlatTableStep.getInfo(JobInstance.SOURCE_RECORDS_SIZE);
  if (sourceRecordsSize == null || sourceRecordsSize.equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  sourceSize=Long.parseLong(sourceRecordsSize);
}
 else {
  log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE + ""String_Node_Str"");
}
if (cubeInstance.needMergeImmediatelyAfterBuild()) {
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
  sourceCount+=seg.getSourceRecords();
  sourceSize+=seg.getSourceRecordsSize();
}
}
break;
case MERGE:
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
break;
}
cubeMgr.updateSegmentOnJobSucceed(cubeInstance,jobInstance.getType(),jobInstance.getRelatedSegment(),jobInstance.getUuid(),jobInstance.getExecEndTime(),cubeSize,sourceCount,sourceSize);
log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
}
}","private void updateCubeSegmentInfoOnSucceed(JobInstance jobInstance,JobEngineConfig engineConfig) throws CubeIntegrityException, IOException {
  if (jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {
    validate(jobInstance);
    log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
    long cubeSize=0;
    JobStep convertToHFileStep=jobInstance.findStep(JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE);
    if (null != convertToHFileStep) {
      String cubeSizeString=convertToHFileStep.getInfo(JobInstance.HDFS_BYTES_WRITTEN);
      if (cubeSizeString == null || cubeSizeString.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      cubeSize=Long.parseLong(cubeSizeString) / 1024;
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE + ""String_Node_Str"");
    }
    CubeManager cubeMgr=CubeManager.getInstance(engineConfig.getConfig());
    CubeInstance cubeInstance=cubeMgr.getCube(jobInstance.getRelatedCube());
    CubeSegment newSegment=cubeInstance.getSegmentById(jobInstance.getUuid());
    long sourceCount=0;
    long sourceSize=0;
switch (jobInstance.getType()) {
case BUILD:
      JobStep baseCuboidStep=jobInstance.findStep(JobConstants.STEP_NAME_BUILD_BASE_CUBOID);
    if (null != baseCuboidStep) {
      String sourceRecordsCount=baseCuboidStep.getInfo(JobInstance.SOURCE_RECORDS_COUNT);
      if (sourceRecordsCount == null || sourceRecordsCount.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      sourceCount=Long.parseLong(sourceRecordsCount);
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_BUILD_BASE_CUBOID + ""String_Node_Str"");
    }
  JobStep createFlatTableStep=jobInstance.findStep(JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
if (null != createFlatTableStep) {
  String sourceRecordsSize=createFlatTableStep.getInfo(JobInstance.SOURCE_RECORDS_SIZE);
  if (sourceRecordsSize == null || sourceRecordsSize.equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  sourceSize=Long.parseLong(sourceRecordsSize);
}
 else {
  log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE + ""String_Node_Str"");
}
if (cubeInstance.needMergeImmediatelyAfterBuild(newSegment)) {
for (CubeSegment seg : cubeInstance.getSegment(CubeSegmentStatusEnum.READY)) {
  sourceCount+=seg.getSourceRecords();
  sourceSize+=seg.getSourceRecordsSize();
}
}
break;
case MERGE:
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
break;
}
cubeMgr.updateSegmentOnJobSucceed(cubeInstance,jobInstance.getType(),jobInstance.getRelatedSegment(),jobInstance.getUuid(),jobInstance.getExecEndTime(),cubeSize,sourceCount,sourceSize);
log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
}
}",0.9786005434782608
63295,"protected static void clean(){
  if (cubeConnection != null)   closeConnection(cubeConnection);
  if (h2Connection != null)   closeConnection(h2Connection);
  CoprocessorEnabler.forceCoprocessorUnset();
  HBaseMetadataTestCase.staticCleanupTestMetadata();
}","protected static void clean(){
  if (cubeConnection != null)   closeConnection(cubeConnection);
  if (h2Connection != null)   closeConnection(h2Connection);
  ObserverEnabler.forceCoprocessorUnset();
  HBaseMetadataTestCase.staticCleanupTestMetadata();
}",0.9667318982387476
63296,"public void updateSegmentOnJobSucceed(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,String segmentName,String lastBuildJobUuid,long lastBuildTime,long sizeKB,long sourceRecordCount,long sourceRecordsSize) throws IOException, CubeIntegrityException {
  List<CubeSegment> segmentsInNewStatus=cubeInstance.getSegments(CubeSegmentStatusEnum.NEW);
  CubeSegment cubeSegment=cubeInstance.getSegment(segmentName,CubeSegmentStatusEnum.NEW);
switch (buildType) {
case BUILD:
    if (cubeInstance.incrementalBuildOnHll()) {
      cubeInstance.getSegments().removeAll(cubeInstance.getMergingSegments());
    }
 else {
      if (segmentsInNewStatus.size() == 1) {
        cubeInstance.getSegments().removeAll(cubeInstance.getRebuildingSegments());
      }
    }
  break;
case MERGE:
cubeInstance.getSegments().removeAll(cubeInstance.getMergingSegments());
break;
}
cubeSegment.setLastBuildJobID(lastBuildJobUuid);
cubeSegment.setLastBuildTime(lastBuildTime);
cubeSegment.setSizeKB(sizeKB);
cubeSegment.setSourceRecords(sourceRecordCount);
cubeSegment.setSourceRecordsSize(sourceRecordsSize);
if (segmentsInNewStatus.size() == 1) {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY);
cubeInstance.setStatus(CubeStatusEnum.READY);
for (CubeSegment seg : cubeInstance.getSegments(CubeSegmentStatusEnum.READY_PENDING)) {
seg.setStatus(CubeSegmentStatusEnum.READY);
}
}
 else {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY_PENDING);
}
this.updateCube(cubeInstance);
}","public void updateSegmentOnJobSucceed(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,String segmentName,String lastBuildJobUuid,long lastBuildTime,long sizeKB,long sourceRecordCount,long sourceRecordsSize) throws IOException, CubeIntegrityException {
  List<CubeSegment> segmentsInNewStatus=cubeInstance.getSegments(CubeSegmentStatusEnum.NEW);
  CubeSegment cubeSegment=cubeInstance.getSegment(segmentName,CubeSegmentStatusEnum.NEW);
switch (buildType) {
case BUILD:
    if (cubeInstance.needMergeImmediately(cubeInstance.getSegmentById(lastBuildJobUuid))) {
      cubeInstance.getSegments().removeAll(cubeInstance.getMergingSegments());
    }
 else {
      if (segmentsInNewStatus.size() == 1) {
        cubeInstance.getSegments().removeAll(cubeInstance.getRebuildingSegments());
      }
    }
  break;
case MERGE:
cubeInstance.getSegments().removeAll(cubeInstance.getMergingSegments());
break;
}
cubeSegment.setLastBuildJobID(lastBuildJobUuid);
cubeSegment.setLastBuildTime(lastBuildTime);
cubeSegment.setSizeKB(sizeKB);
cubeSegment.setSourceRecords(sourceRecordCount);
cubeSegment.setSourceRecordsSize(sourceRecordsSize);
if (segmentsInNewStatus.size() == 1) {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY);
cubeInstance.setStatus(CubeStatusEnum.READY);
for (CubeSegment seg : cubeInstance.getSegments(CubeSegmentStatusEnum.READY_PENDING)) {
seg.setStatus(CubeSegmentStatusEnum.READY);
}
}
 else {
cubeSegment.setStatus(CubeSegmentStatusEnum.READY_PENDING);
}
this.updateCube(cubeInstance);
}",0.971043771043771
63297,"public List<CubeSegment> allocateSegments(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,long startDate,long endDate) throws IOException, CubeIntegrityException {
  if (cubeInstance.getBuildingSegments().size() > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<CubeSegment> segments=new ArrayList<CubeSegment>();
  if (null != cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateColumn()) {
    if (cubeInstance.incrementalBuildOnHll()) {
      long[] dateRange=cubeInstance.getDateRange();
      segments.add(buildSegment(cubeInstance,dateRange[0],endDate));
    }
 else {
      if (startDate == 0 && cubeInstance.getSegments().size() == 0) {
        startDate=cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateStart();
      }
      CubeSegment lastSegment=null;
      for (      CubeSegment segment : cubeInstance.getSegments()) {
        if (segment.getDateRangeStart() == startDate) {
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        if (segment.getDateRangeStart() < startDate && startDate < segment.getDateRangeEnd()) {
          segments.add(buildSegment(cubeInstance,segment.getDateRangeStart(),startDate));
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        lastSegment=segment;
      }
      if (null == lastSegment || (lastSegment.getDateRangeEnd() == startDate)) {
        segments.add(buildSegment(cubeInstance,startDate,endDate));
      }
    }
  }
 else {
    segments.add(buildSegment(cubeInstance,0,0));
  }
  validateNewSegments(cubeInstance,buildType,segments);
  if (buildType == CubeBuildTypeEnum.MERGE || cubeInstance.incrementalBuildOnHll()) {
    this.makeDictForNewSegment(cubeInstance,segments.get(0));
    this.makeSnapshotForNewSegment(cubeInstance,segments.get(0));
  }
  cubeInstance.getSegments().addAll(segments);
  Collections.sort(cubeInstance.getSegments());
  this.updateCube(cubeInstance);
  return segments;
}","public List<CubeSegment> allocateSegments(CubeInstance cubeInstance,CubeBuildTypeEnum buildType,long startDate,long endDate) throws IOException, CubeIntegrityException {
  if (cubeInstance.getBuildingSegments().size() > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<CubeSegment> segments=new ArrayList<CubeSegment>();
  boolean needMergeImmediately=cubeInstance.needMergeImmediately(startDate,endDate);
  if (null != cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateColumn()) {
    if (needMergeImmediately) {
      segments.add(buildSegment(cubeInstance,startDate,endDate));
    }
 else {
      if (startDate == 0 && cubeInstance.getSegments().size() == 0) {
        startDate=cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateStart();
      }
      CubeSegment lastSegment=null;
      for (      CubeSegment segment : cubeInstance.getSegments()) {
        if (segment.getDateRangeStart() == startDate) {
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        if (segment.getDateRangeStart() < startDate && startDate < segment.getDateRangeEnd()) {
          segments.add(buildSegment(cubeInstance,segment.getDateRangeStart(),startDate));
          segments.add(buildSegment(cubeInstance,startDate,endDate));
        }
        lastSegment=segment;
      }
      if (null == lastSegment || (lastSegment.getDateRangeEnd() == startDate)) {
        segments.add(buildSegment(cubeInstance,startDate,endDate));
      }
    }
  }
 else {
    segments.add(buildSegment(cubeInstance,0,0));
  }
  validateNewSegments(cubeInstance,buildType,segments);
  if (buildType == CubeBuildTypeEnum.MERGE || needMergeImmediately) {
    this.makeDictForNewSegment(cubeInstance,segments.get(0));
    this.makeSnapshotForNewSegment(cubeInstance,segments.get(0));
  }
  cubeInstance.getSegments().addAll(segments);
  Collections.sort(cubeInstance.getSegments());
  this.updateCube(cubeInstance);
  return segments;
}",0.9122541603630864
63298,"private List<JobStep> createBuildCubeSegmentSteps(JobInstance jobInstance) throws IOException {
  int groupRowkeyColumnsCount=cube.getDescriptor().getRowkey().getNCuboidBuildLevels();
  int totalRowkeyColumnsCount=cube.getDescriptor().getRowkey().getRowKeyColumns().length;
  int stepSeqNum=0;
  List<JobStep> result=Lists.newArrayList();
  if (this.engineConfig.isFlatTableByHive()) {
    result.add(createIntermediateHiveTableStep(jobInstance,stepSeqNum++));
  }
  result.add(createFactDistinctColumnsStep(jobInstance,stepSeqNum++));
  result.add(createBuildDictionaryStep(jobInstance,stepSeqNum++));
  final String cuboidRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final String cuboidTmpRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final boolean incBuildMerge=cube.incrementalBuildOnHll();
  String[] cuboidOutputTempPath=getCuboidOutputPaths(incBuildMerge ? cuboidTmpRootPath : cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.add(createBaseCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.add(createNDimensionCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  if (incBuildMerge) {
    List<String> pathToMerge=Lists.newArrayList();
    for (    CubeSegment segment : cube.getSegments(CubeSegmentStatusEnum.READY)) {
      pathToMerge.add(getPathToMerge(jobInstance,segment));
    }
    pathToMerge.add(cuboidTmpRootPath + ""String_Node_Str"");
    result.add(createMergeCuboidDataStep(jobInstance,stepSeqNum++,formatPaths(pathToMerge),cuboidRootPath));
  }
  String cuboidPath=incBuildMerge ? cuboidRootPath : cuboidRootPath + ""String_Node_Str"";
  result.add(createRangeRowkeyDistributionStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createCreateHTableStep(jobInstance,stepSeqNum++));
  result.add(createConvertCuboidToHfileStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createBulkLoadStep(jobInstance,stepSeqNum++));
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  return result;
}","private List<JobStep> createBuildCubeSegmentSteps(JobInstance jobInstance) throws IOException {
  int groupRowkeyColumnsCount=cube.getDescriptor().getRowkey().getNCuboidBuildLevels();
  int totalRowkeyColumnsCount=cube.getDescriptor().getRowkey().getRowKeyColumns().length;
  int stepSeqNum=0;
  List<JobStep> result=Lists.newArrayList();
  if (this.engineConfig.isFlatTableByHive()) {
    result.add(createIntermediateHiveTableStep(jobInstance,stepSeqNum++));
  }
  result.add(createFactDistinctColumnsStep(jobInstance,stepSeqNum++));
  result.add(createBuildDictionaryStep(jobInstance,stepSeqNum++));
  final String cuboidRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final String cuboidTmpRootPath=jobWorkingDir + ""String_Node_Str"" + cubeName+ ""String_Node_Str"";
  final boolean incBuildMerge=cube.needMergeImmediately(cube.getSegmentById(jobInstance.getUuid()));
  String[] cuboidOutputTempPath=getCuboidOutputPaths(incBuildMerge ? cuboidTmpRootPath : cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.add(createBaseCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.add(createNDimensionCuboidStep(jobInstance,stepSeqNum++,cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  if (incBuildMerge) {
    List<String> pathToMerge=Lists.newArrayList();
    for (    CubeSegment segment : cube.getSegments(CubeSegmentStatusEnum.READY)) {
      pathToMerge.add(getPathToMerge(jobInstance,segment));
    }
    pathToMerge.add(cuboidTmpRootPath + ""String_Node_Str"");
    result.add(createMergeCuboidDataStep(jobInstance,stepSeqNum++,formatPaths(pathToMerge),cuboidRootPath));
  }
  String cuboidPath=incBuildMerge ? cuboidRootPath : cuboidRootPath + ""String_Node_Str"";
  result.add(createRangeRowkeyDistributionStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createCreateHTableStep(jobInstance,stepSeqNum++));
  result.add(createConvertCuboidToHfileStep(jobInstance,stepSeqNum++,cuboidPath));
  result.add(createBulkLoadStep(jobInstance,stepSeqNum++));
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  return result;
}",0.9817059731099844
63299,"private static void appendWhereStatement(JoinedFlatTableDesc intermediateTableDesc,StringBuilder sql){
  boolean hasCondition=false;
  StringBuilder whereBuilder=new StringBuilder();
  whereBuilder.append(""String_Node_Str"");
  CubeDesc cubeDesc=intermediateTableDesc.getCubeDesc();
  if (cubeDesc.getFilterCondition() != null && cubeDesc.getFilterCondition().equals(""String_Node_Str"") == false) {
    whereBuilder.append(""String_Node_Str"").append(cubeDesc.getFilterCondition()).append(""String_Node_Str"");
    hasCondition=true;
  }
  CubeSegment cubeSegment=intermediateTableDesc.getCubeSegment();
  if (null != cubeSegment) {
    long dateStart=cubeSegment.getDateRangeStart();
    long dateEnd=cubeSegment.getDateRangeEnd();
    if (cubeSegment.getCubeInstance().incrementalBuildOnHll()) {
      dateStart=cubeSegment.getCubeInstance().getDateRange()[1];
    }
    if (!(dateStart == 0 && dateEnd == 0)) {
      String partitionColumnName=cubeDesc.getCubePartitionDesc().getPartitionDateColumn();
      whereBuilder.append(hasCondition ? ""String_Node_Str"" : ""String_Node_Str"");
      if (dateStart > 0) {
        whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateStart)+ ""String_Node_Str"");
        whereBuilder.append(""String_Node_Str"");
      }
      whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateEnd)+ ""String_Node_Str"");
      whereBuilder.append(""String_Node_Str"");
      hasCondition=true;
    }
  }
  if (hasCondition) {
    sql.append(whereBuilder.toString());
  }
}","private static void appendWhereStatement(JoinedFlatTableDesc intermediateTableDesc,StringBuilder sql){
  boolean hasCondition=false;
  StringBuilder whereBuilder=new StringBuilder();
  whereBuilder.append(""String_Node_Str"");
  CubeDesc cubeDesc=intermediateTableDesc.getCubeDesc();
  if (cubeDesc.getFilterCondition() != null && cubeDesc.getFilterCondition().equals(""String_Node_Str"") == false) {
    whereBuilder.append(""String_Node_Str"").append(cubeDesc.getFilterCondition()).append(""String_Node_Str"");
    hasCondition=true;
  }
  CubeSegment cubeSegment=intermediateTableDesc.getCubeSegment();
  if (null != cubeSegment) {
    long dateStart=cubeSegment.getDateRangeStart();
    long dateEnd=cubeSegment.getDateRangeEnd();
    if (!(dateStart == 0 && dateEnd == 0)) {
      String partitionColumnName=cubeDesc.getCubePartitionDesc().getPartitionDateColumn();
      whereBuilder.append(hasCondition ? ""String_Node_Str"" : ""String_Node_Str"");
      if (dateStart > 0) {
        whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateStart)+ ""String_Node_Str"");
        whereBuilder.append(""String_Node_Str"");
      }
      whereBuilder.append(partitionColumnName + ""String_Node_Str"" + formatDateTimeInWhereClause(dateEnd)+ ""String_Node_Str"");
      whereBuilder.append(""String_Node_Str"");
      hasCondition=true;
    }
  }
  if (hasCondition) {
    sql.append(whereBuilder.toString());
  }
}",0.9546666666666668
63300,"private void updateCubeSegmentInfoOnSucceed(JobInstance jobInstance,JobEngineConfig engineConfig) throws CubeIntegrityException, IOException {
  if (jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {
    validate(jobInstance);
    log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
    long cubeSize=0;
    JobStep convertToHFileStep=jobInstance.findStep(JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE);
    if (null != convertToHFileStep) {
      String cubeSizeString=convertToHFileStep.getInfo(JobInstance.HDFS_BYTES_WRITTEN);
      if (cubeSizeString == null || cubeSizeString.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      cubeSize=Long.parseLong(cubeSizeString) / 1024;
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE + ""String_Node_Str"");
    }
    CubeManager cubeMgr=CubeManager.getInstance(engineConfig.getConfig());
    CubeInstance cubeInstance=cubeMgr.getCube(jobInstance.getRelatedCube());
    long sourceCount=0;
    long sourceSize=0;
switch (jobInstance.getType()) {
case BUILD:
      JobStep baseCuboidStep=jobInstance.findStep(JobConstants.STEP_NAME_BUILD_BASE_CUBOID);
    if (null != baseCuboidStep) {
      String sourceRecordsCount=baseCuboidStep.getInfo(JobInstance.SOURCE_RECORDS_COUNT);
      if (sourceRecordsCount == null || sourceRecordsCount.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      sourceCount=Long.parseLong(sourceRecordsCount);
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_BUILD_BASE_CUBOID + ""String_Node_Str"");
    }
  JobStep createFlatTableStep=jobInstance.findStep(JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
if (null != createFlatTableStep) {
  String sourceRecordsSize=createFlatTableStep.getInfo(JobInstance.SOURCE_RECORDS_SIZE);
  if (sourceRecordsSize == null || sourceRecordsSize.equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  sourceSize=Long.parseLong(sourceRecordsSize);
}
 else {
  log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE + ""String_Node_Str"");
}
if (cubeInstance.incrementalBuildOnHll()) {
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
  sourceCount+=seg.getSourceRecords();
  sourceSize+=seg.getSourceRecordsSize();
}
}
break;
case MERGE:
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
break;
}
cubeMgr.updateSegmentOnJobSucceed(cubeInstance,jobInstance.getType(),jobInstance.getRelatedSegment(),jobInstance.getUuid(),jobInstance.getExecEndTime(),cubeSize,sourceCount,sourceSize);
log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
}
}","private void updateCubeSegmentInfoOnSucceed(JobInstance jobInstance,JobEngineConfig engineConfig) throws CubeIntegrityException, IOException {
  if (jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {
    validate(jobInstance);
    log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
    long cubeSize=0;
    JobStep convertToHFileStep=jobInstance.findStep(JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE);
    if (null != convertToHFileStep) {
      String cubeSizeString=convertToHFileStep.getInfo(JobInstance.HDFS_BYTES_WRITTEN);
      if (cubeSizeString == null || cubeSizeString.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      cubeSize=Long.parseLong(cubeSizeString) / 1024;
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE + ""String_Node_Str"");
    }
    CubeManager cubeMgr=CubeManager.getInstance(engineConfig.getConfig());
    CubeInstance cubeInstance=cubeMgr.getCube(jobInstance.getRelatedCube());
    long sourceCount=0;
    long sourceSize=0;
switch (jobInstance.getType()) {
case BUILD:
      JobStep baseCuboidStep=jobInstance.findStep(JobConstants.STEP_NAME_BUILD_BASE_CUBOID);
    if (null != baseCuboidStep) {
      String sourceRecordsCount=baseCuboidStep.getInfo(JobInstance.SOURCE_RECORDS_COUNT);
      if (sourceRecordsCount == null || sourceRecordsCount.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      sourceCount=Long.parseLong(sourceRecordsCount);
    }
 else {
      log.info(""String_Node_Str"" + JobConstants.STEP_NAME_BUILD_BASE_CUBOID + ""String_Node_Str"");
    }
  JobStep createFlatTableStep=jobInstance.findStep(JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
if (null != createFlatTableStep) {
  String sourceRecordsSize=createFlatTableStep.getInfo(JobInstance.SOURCE_RECORDS_SIZE);
  if (sourceRecordsSize == null || sourceRecordsSize.equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  sourceSize=Long.parseLong(sourceRecordsSize);
}
 else {
  log.info(""String_Node_Str"" + JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE + ""String_Node_Str"");
}
CubeSegment segmentById=cubeInstance.getSegmentById(jobInstance.getUuid());
if (cubeInstance.needMergeImmediately(segmentById)) {
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
}
break;
case MERGE:
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
break;
}
cubeMgr.updateSegmentOnJobSucceed(cubeInstance,jobInstance.getType(),jobInstance.getRelatedSegment(),jobInstance.getUuid(),jobInstance.getExecEndTime(),cubeSize,sourceCount,sourceSize);
log.info(""String_Node_Str"" + jobInstance.getRelatedSegment() + ""String_Node_Str""+ jobInstance.getRelatedCube());
}
}",0.9777549623545516
63301,"protected List<String> submitJob(String cubename,long startDate,long endDate,CubeBuildTypeEnum jobType) throws SchedulerException, IOException, InvalidJobInstanceException, CubeIntegrityException {
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  CubeInstance cube=cubeMgr.getCube(cubename);
  CubeManager.getInstance(this.getTestConfig()).loadCubeCache(cube);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<CubeSegment> newSegments=cubeMgr.allocateSegments(cube,jobType,startDate,endDate);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<String> jobUuids=Lists.newArrayList();
  List<JobInstance> jobs=Lists.newArrayList();
  for (  CubeSegment seg : newSegments) {
    String uuid=seg.getUuid();
    jobUuids.add(uuid);
    jobs.add(jobManager.createJob(cubename,seg.getName(),uuid,jobType));
    seg.setLastBuildJobID(uuid);
  }
  cubeMgr.updateCube(cube);
  for (  JobInstance job : jobs) {
    jobManager.submitJob(job);
  }
  return jobUuids;
}","protected List<String> submitJob(String cubename,long startDate,long endDate,CubeBuildTypeEnum jobType) throws SchedulerException, IOException, InvalidJobInstanceException, CubeIntegrityException {
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  CubeInstance cube=cubeMgr.getCube(cubename);
  CubeManager.getInstance(this.getTestConfig()).loadCubeCache(cube);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<CubeSegment> newSegments=cubeMgr.allocateSegments(cube,jobType,startDate,endDate);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<String> jobUuids=Lists.newArrayList();
  List<JobInstance> jobs=Lists.newArrayList();
  for (  CubeSegment seg : newSegments) {
    String uuid=seg.getUuid();
    jobUuids.add(uuid);
    jobs.add(jobManager.createJob(cubename,seg.getName(),uuid,jobType));
  }
  for (  JobInstance job : jobs) {
    jobManager.submitJob(job);
  }
  return jobUuids;
}",0.8913370055082624
63302,"protected List<String> submitJob(String cubename,long startDate,long endDate,CubeBuildTypeEnum jobType) throws SchedulerException, IOException, InvalidJobInstanceException, CubeIntegrityException {
  List<String> jobList=new ArrayList<String>();
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  CubeInstance cube=cubeMgr.getCube(cubename);
  CubeManager.getInstance(this.getTestConfig()).loadCubeCache(cube);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<CubeSegment> newSegments=cubeMgr.allocateSegments(cube,jobType,startDate,endDate);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  for (  CubeSegment seg : newSegments) {
    JobInstance newJob=jobManager.createJob(cubename,seg.getName(),UUID.randomUUID().toString(),jobType);
    String jobUuid=jobManager.submitJob(newJob);
    jobList.add(jobUuid);
  }
  return jobList;
}","protected List<String> submitJob(String cubename,long startDate,long endDate,CubeBuildTypeEnum jobType) throws SchedulerException, IOException, InvalidJobInstanceException, CubeIntegrityException {
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  CubeInstance cube=cubeMgr.getCube(cubename);
  CubeManager.getInstance(this.getTestConfig()).loadCubeCache(cube);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<CubeSegment> newSegments=cubeMgr.allocateSegments(cube,jobType,startDate,endDate);
  System.out.println(JsonUtil.writeValueAsIndentString(cube));
  List<String> jobUuids=Lists.newArrayList();
  List<JobInstance> jobs=Lists.newArrayList();
  for (  CubeSegment seg : newSegments) {
    String uuid=seg.getUuid();
    seg.setLastBuildJobID(uuid);
    jobUuids.add(uuid);
    jobs.add(jobManager.createJob(cubename,seg.getName(),uuid,jobType));
  }
  cubeMgr.updateCube(cube);
  for (  JobInstance job : jobs) {
    jobManager.submitJob(job);
  }
  return jobUuids;
}",0.2533609100310238
63303,"public CubeInstance createCubeAndDesc(String cubeName,String projectName,CubeDesc desc) throws IOException {
  if (getCubeManager().getCube(cubeName) != null) {
    throw new InternalErrorException(""String_Node_Str"" + cubeName + ""String_Node_Str"");
  }
  String owner=SecurityContextHolder.getContext().getAuthentication().getName();
  CubeDesc createdDesc=null;
  CubeInstance createdCube=null;
  createdDesc=getMetadataManager().createCubeDesc(desc);
  if (!createdDesc.getError().isEmpty()) {
    throw new InternalErrorException(createdDesc.getError().get(0));
  }
  int cuboidCount=CuboidCLI.simulateCuboidGeneration(createdDesc);
  logger.info(""String_Node_Str"" + cubeName + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
  createdCube=getCubeManager().createCube(cubeName,projectName,createdDesc,owner);
  accessService.init(createdCube,AclPermission.ADMINISTRATION);
  ProjectInstance project=getProjectManager().getProject(projectName);
  accessService.inherit(createdCube,project);
  return createdCube;
}","public CubeInstance createCubeAndDesc(String cubeName,String projectName,CubeDesc desc) throws IOException {
  if (getCubeManager().getCube(cubeName) != null) {
    throw new InternalErrorException(""String_Node_Str"" + cubeName + ""String_Node_Str"");
  }
  String owner=SecurityContextHolder.getContext().getAuthentication().getName();
  CubeDesc createdDesc=null;
  CubeInstance createdCube=null;
  createdDesc=getMetadataManager().createCubeDesc(desc);
  if (!createdDesc.getError().isEmpty()) {
    getMetadataManager().removeCubeDesc(createdDesc);
    throw new InternalErrorException(createdDesc.getError().get(0));
  }
  try {
    int cuboidCount=CuboidCLI.simulateCuboidGeneration(createdDesc);
    logger.info(""String_Node_Str"" + cubeName + ""String_Node_Str""+ cuboidCount+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    getMetadataManager().removeCubeDesc(createdDesc);
    throw new InternalErrorException(""String_Node_Str"",e);
  }
  createdCube=getCubeManager().createCube(cubeName,projectName,createdDesc,owner);
  accessService.init(createdCube,AclPermission.ADMINISTRATION);
  ProjectInstance project=getProjectManager().getProject(projectName);
  accessService.inherit(createdCube,project);
  return createdCube;
}",0.905861456483126
63304,"public List<CubeSegment> getSegments(CubeSegmentStatusEnum status){
  List<CubeSegment> segments=new ArrayList<CubeSegment>();
  for (  CubeSegment segment : segments) {
    if (segment.getStatus() == status) {
      segments.add(segment);
    }
  }
  return segments;
}","public List<CubeSegment> getSegments(CubeSegmentStatusEnum status){
  List<CubeSegment> result=new ArrayList<CubeSegment>();
  for (  CubeSegment segment : segments) {
    if (segment.getStatus() == status) {
      result.add(segment);
    }
  }
  return result;
}",0.9213483146067416
63305,"private static Pair<File,File> getJobJarFiles(){
  String version;
  try {
    MavenXpp3Reader pomReader=new MavenXpp3Reader();
    Model model=pomReader.read(new FileReader(""String_Node_Str""));
    version=model.getVersion();
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  String jobTargetDir=""String_Node_Str"";
  File jobJar=new File(jobTargetDir,""String_Node_Str"" + version + ""String_Node_Str"");
  File coprocessorJar=new File(jobTargetDir,""String_Node_Str"" + version + ""String_Node_Str"");
  return new Pair<File,File>(jobJar,coprocessorJar);
}","private static Pair<File,File> getJobJarFiles(){
  String version;
  try {
    MavenXpp3Reader pomReader=new MavenXpp3Reader();
    Model model=pomReader.read(new FileReader(""String_Node_Str""));
    version=model.getVersion();
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  File jobJar=new File(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str"");
  File coprocessorJar=new File(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str"");
  return new Pair<File,File>(jobJar,coprocessorJar);
}",0.913081650570676
63306,"public static SRowAggregators fromValueDecoders(Collection<RowValueDecoder> rowValueDecoders){
  HCol[] hcols=new HCol[rowValueDecoders.size()];
  int i=0;
  for (  RowValueDecoder rowValueDecoder : rowValueDecoders) {
    hcols[i++]=buildHCol(rowValueDecoder);
  }
  SRowAggregators aggrs=new SRowAggregators(hcols);
  return aggrs;
}","public static SRowAggregators fromValueDecoders(Collection<RowValueDecoder> rowValueDecoders){
  HCol[] hcols=new HCol[rowValueDecoders.size()];
  int i=0;
  for (  RowValueDecoder rowValueDecoder : rowValueDecoders) {
    hcols[i++]=buildHCol(rowValueDecoder.getHBaseColumn());
  }
  SRowAggregators aggrs=new SRowAggregators(hcols);
  return aggrs;
}",0.975254730713246
63307,"private static HCol buildHCol(RowValueDecoder rowValueDecoder){
  HBaseColumnDesc desc=rowValueDecoder.getHBaseColumn();
  byte[] family=Bytes.toBytes(desc.getColumnFamilyName());
  byte[] qualifier=Bytes.toBytes(desc.getQualifier());
  MeasureDesc[] measures=desc.getMeasures();
  String[] funcNames=new String[measures.length];
  String[] dataTypes=new String[measures.length];
  for (int i=0; i < measures.length; i++) {
    funcNames[i]=measures[i].getFunction().getExpression();
    dataTypes[i]=measures[i].getFunction().getReturnType();
  }
  return new HCol(family,qualifier,funcNames,dataTypes);
}","private static HCol buildHCol(HBaseColumnDesc desc){
  byte[] family=Bytes.toBytes(desc.getColumnFamilyName());
  byte[] qualifier=Bytes.toBytes(desc.getQualifier());
  MeasureDesc[] measures=desc.getMeasures();
  String[] funcNames=new String[measures.length];
  String[] dataTypes=new String[measures.length];
  for (int i=0; i < measures.length; i++) {
    funcNames[i]=measures[i].getFunction().getExpression();
    dataTypes[i]=measures[i].getFunction().getReturnType();
  }
  return new HCol(family,qualifier,funcNames,dataTypes);
}",0.9370629370629372
63308,"@Override public boolean moveNext(){
  boolean hasNext=iterator.hasNext();
  if (hasNext) {
    String[] row=iterator.next();
    for (int i=0, n=colDescs.size(); i < n; i++) {
      ColumnDesc colDesc=colDescs.get(i);
      int colIdx=colDesc.getZeroBasedIndex();
      if (colIdx >= 0) {
        current[i]=Tuple.convertOptiqCellValue(row[colIdx],colDesc.getDatatype());
      }
 else {
        current[i]=null;
      }
    }
  }
  return hasNext;
}","@Override public boolean moveNext(){
  boolean hasNext=iterator.hasNext();
  if (hasNext) {
    String[] row=iterator.next();
    for (int i=0, n=colDescs.size(); i < n; i++) {
      ColumnDesc colDesc=colDescs.get(i);
      int colIdx=colDesc.getZeroBasedIndex();
      if (colIdx >= 0) {
        current[i]=Tuple.convertOptiqCellValue(row[colIdx],colDesc.getType().getName());
      }
 else {
        current[i]=null;
      }
    }
  }
  return hasNext;
}",0.9823788546255506
63309,"public String getSQLType(){
  if (isCountDistinct())   return ""String_Node_Str"";
 else   if (isSum() || isMax() || isMin())   return parameter.getColRefs().get(0).getDatatype();
 else   return returnType;
}","public String getSQLType(){
  if (isCountDistinct())   return ""String_Node_Str"";
 else   if (isSum() || isMax() || isMin())   return parameter.getColRefs().get(0).getType().getName();
 else   return returnType;
}",0.8277511961722488
63310,"public void setMeasureValue(String fieldName,Object fieldValue){
  String dataType=info.getDataType(fieldName);
  if (""String_Node_Str"".equals(dataType) && fieldValue instanceof BigDecimal) {
    fieldValue=((BigDecimal)fieldValue).doubleValue();
  }
  setFieldObjectValue(fieldName,fieldValue);
}","public void setMeasureValue(String fieldName,Object fieldValue){
  String dataType=info.getDataType(fieldName);
  if (""String_Node_Str"".equals(dataType) && fieldValue instanceof BigDecimal) {
    fieldValue=((BigDecimal)fieldValue).doubleValue();
  }
 else   if (""String_Node_Str"".equals(dataType) && !(fieldValue instanceof Integer)) {
    fieldValue=((Number)fieldValue).intValue();
  }
  setFieldObjectValue(fieldName,fieldValue);
}",0.8114754098360656
63311,"public static void writeIntArray(int[] array,ByteBuffer out){
  if (array == null) {
    writeVInt(-1,out);
    return;
  }
  writeVInt(array.length,out);
  out.asIntBuffer().put(array);
}","public static void writeIntArray(int[] array,ByteBuffer out){
  if (array == null) {
    writeVInt(-1,out);
    return;
  }
  writeVInt(array.length,out);
  for (int i=0; i < array.length; ++i) {
    writeVInt(array[i],out);
  }
}",0.7607655502392344
63312,"public static int[] readIntArray(ByteBuffer in){
  int len=readVInt(in);
  if (len < 0)   return null;
  int[] array=new int[len];
  in.asIntBuffer().get(array);
  return array;
}","public static int[] readIntArray(ByteBuffer in){
  int len=readVInt(in);
  if (len < 0)   return null;
  int[] array=new int[len];
  for (int i=0; i < len; ++i) {
    array[i]=readVInt(in);
  }
  return array;
}",0.7025641025641025
63313,"@Test public void test(){
}","@Test public void test(){
  ByteBuffer buffer=ByteBuffer.allocate(10000);
  int[] x=new int[]{1,2,3};
  BytesUtil.writeIntArray(x,buffer);
  buffer.flip();
  byte[] buf=new byte[buffer.limit()];
  System.arraycopy(buffer.array(),0,buf,0,buffer.limit());
  ByteBuffer newBuffer=ByteBuffer.wrap(buf);
  int[] y=BytesUtil.readIntArray(newBuffer);
  assertEquals(y[2],3);
}",0.1363636363636363
63314,"public static void main(String[] args) throws Exception {
  int port=80;
  if (args.length >= 1) {
    port=Integer.parseInt(args[0]);
  }
  ClasspathUtil.addClasspath(new File(""String_Node_Str"").getAbsolutePath());
  ClasspathUtil.addClasspath(new File(""String_Node_Str"").getAbsolutePath());
  String webBase=new File(""String_Node_Str"").getAbsolutePath();
  String apiBase=new File(""String_Node_Str"").getAbsolutePath();
  Tomcat tomcat=new Tomcat();
  tomcat.setPort(port);
  tomcat.setBaseDir(""String_Node_Str"");
  StandardServer server=(StandardServer)tomcat.getServer();
  AprLifecycleListener listener=new AprLifecycleListener();
  server.addLifecycleListener(listener);
  tomcat.addWebapp(""String_Node_Str"",apiBase);
  Context webContext=tomcat.addWebapp(""String_Node_Str"",webBase);
  ErrorPage notFound=new ErrorPage();
  notFound.setErrorCode(404);
  notFound.setLocation(""String_Node_Str"");
  webContext.addErrorPage(notFound);
  webContext.addWelcomeFile(""String_Node_Str"");
  tomcat.start();
  tomcat.getServer().await();
}","public static void main(String[] args) throws Exception {
  int port=9080;
  if (args.length >= 1) {
    port=Integer.parseInt(args[0]);
  }
  ClasspathUtil.addClasspath(new File(""String_Node_Str"").getAbsolutePath());
  ClasspathUtil.addClasspath(new File(""String_Node_Str"").getAbsolutePath());
  String webBase=new File(""String_Node_Str"").getAbsolutePath();
  String apiBase=new File(""String_Node_Str"").getAbsolutePath();
  Tomcat tomcat=new Tomcat();
  tomcat.setPort(port);
  tomcat.setBaseDir(""String_Node_Str"");
  StandardServer server=(StandardServer)tomcat.getServer();
  AprLifecycleListener listener=new AprLifecycleListener();
  server.addLifecycleListener(listener);
  tomcat.addWebapp(""String_Node_Str"",apiBase);
  Context webContext=tomcat.addWebapp(""String_Node_Str"",webBase);
  ErrorPage notFound=new ErrorPage();
  notFound.setErrorCode(404);
  notFound.setLocation(""String_Node_Str"");
  webContext.addErrorPage(notFound);
  webContext.addWelcomeFile(""String_Node_Str"");
  tomcat.start();
  tomcat.getServer().await();
}",0.9990338164251208
63315,"private String wrapExecCmd(JobInstance job,String cmd,String suffix){
  if (StringUtils.isBlank(cmd))   return cmd;
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  try {
    FileUtils.forceMkdir(new File(config.getKylinJobLogDir()));
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + config.getKylinJobLogDir() + ""String_Node_Str"",e);
  }
  String log=config.getKylinJobLogDir() + ""String_Node_Str"" + job.getUuid()+ ""String_Node_Str""+ suffix+ ""String_Node_Str"";
  return ""String_Node_Str"" + cmd + ""String_Node_Str""+ log;
}","private String wrapExecCmd(JobInstance job,String cmd,String suffix){
  if (StringUtils.isBlank(cmd))   return cmd;
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  try {
    FileUtils.forceMkdir(new File(config.getKylinJobLogDir()));
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + config.getKylinJobLogDir() + ""String_Node_Str"",e);
  }
  String log=config.getKylinJobLogDir() + ""String_Node_Str"" + job.getUuid()+ ""String_Node_Str""+ suffix+ ""String_Node_Str"";
  String mkLogDir=""String_Node_Str"" + config.getKylinJobLogDir();
  return mkLogDir + ""String_Node_Str"" + ""String_Node_Str""+ cmd+ ""String_Node_Str""+ log;
}",0.8828828828828829
63316,"@Override public Iterator<TableRecordBytes> iterator(){
  return new Iterator<TableRecordBytes>(){
    int i=0;
    TableRecord rec=new TableRecord(info);
    ImmutableBytesWritable temp=new ImmutableBytesWritable();
    @Override public boolean hasNext(){
      return i < nRecords;
    }
    @Override public TableRecordBytes next(){
      for (int col=0; col < nColumns; col++) {
        containers[col].getValueAt(i,temp);
        rec.setValueBytes(col,temp);
      }
      i++;
      return rec;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Iterator<TableRecordBytes> iterator(){
  return new Iterator<TableRecordBytes>(){
    int i=0;
    TableRecordBytes rec=info.createTableRecord();
    ImmutableBytesWritable temp=new ImmutableBytesWritable();
    @Override public boolean hasNext(){
      return i < nRecords;
    }
    @Override public TableRecordBytes next(){
      for (int col=0; col < nColumns; col++) {
        containers[col].getValueAt(i,temp);
        rec.setValueBytes(col,temp);
      }
      i++;
      return rec;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.9802955665024632
63317,"@Override public Pair<ImmutableBytesWritable,ImmutableBytesWritable> next(){
  if (hasNext()) {
    try {
      hasMore=innerScaner.nextRaw(results);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (results.size() < 1)     throw new IllegalStateException(""String_Node_Str"");
    Cell c=results.get(0);
    key.set(c.getRowArray(),c.getRowOffset(),c.getRowLength());
    value.set(c.getValueArray(),c.getValueOffset(),c.getValueLength());
    return pair;
  }
 else {
    return null;
  }
}","@Override public Pair<ImmutableBytesWritable,ImmutableBytesWritable> next(){
  if (hasNext()) {
    try {
      hasMore=innerScaner.nextRaw(results);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (results.size() < 1)     throw new IllegalStateException(""String_Node_Str"");
    Cell c=results.get(0);
    key.set(c.getRowArray(),c.getRowOffset(),c.getRowLength());
    value.set(c.getValueArray(),c.getValueOffset(),c.getValueLength());
    results.clear();
    return pair;
  }
 else {
    return null;
  }
}",0.9804287045666356
63318,"@Override public Iterator<Pair<ImmutableBytesWritable,ImmutableBytesWritable>> iterator(){
  return new Iterator<Pair<ImmutableBytesWritable,ImmutableBytesWritable>>(){
    ImmutableBytesWritable key=new ImmutableBytesWritable();
    ImmutableBytesWritable value=new ImmutableBytesWritable();
    Pair<ImmutableBytesWritable,ImmutableBytesWritable> pair=new Pair<>(key,value);
    private boolean hasMore=true;
    @Override public boolean hasNext(){
      return hasMore;
    }
    @Override public Pair<ImmutableBytesWritable,ImmutableBytesWritable> next(){
      if (hasNext()) {
        try {
          hasMore=innerScaner.nextRaw(results);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        if (results.size() < 1)         throw new IllegalStateException(""String_Node_Str"");
        Cell c=results.get(0);
        key.set(c.getRowArray(),c.getRowOffset(),c.getRowLength());
        value.set(c.getValueArray(),c.getValueOffset(),c.getValueLength());
        return pair;
      }
 else {
        return null;
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Iterator<Pair<ImmutableBytesWritable,ImmutableBytesWritable>> iterator(){
  return new Iterator<Pair<ImmutableBytesWritable,ImmutableBytesWritable>>(){
    ImmutableBytesWritable key=new ImmutableBytesWritable();
    ImmutableBytesWritable value=new ImmutableBytesWritable();
    Pair<ImmutableBytesWritable,ImmutableBytesWritable> pair=new Pair<>(key,value);
    private boolean hasMore=true;
    @Override public boolean hasNext(){
      return hasMore;
    }
    @Override public Pair<ImmutableBytesWritable,ImmutableBytesWritable> next(){
      if (hasNext()) {
        try {
          hasMore=innerScaner.nextRaw(results);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        if (results.size() < 1)         throw new IllegalStateException(""String_Node_Str"");
        Cell c=results.get(0);
        key.set(c.getRowArray(),c.getRowOffset(),c.getRowLength());
        value.set(c.getValueArray(),c.getValueOffset(),c.getValueLength());
        results.clear();
        return pair;
      }
 else {
        return null;
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.98948254101809
63319,"private static List<String> extractTables(String database,BufferedReader reader,File metaTmpDir) throws IOException {
  File tableDescDir=new File(metaTmpDir,TABLE_FOLDER_NAME);
  File tableExdDir=new File(metaTmpDir,TABLE_EXD_FOLDER_NAME);
  mkdirs(tableDescDir);
  mkdirs(tableExdDir);
  List<TableDesc> tableDescList=new ArrayList<TableDesc>();
  List<Map<String,String>> tableAttrsList=new ArrayList<Map<String,String>>();
  getTables(database,reader,tableDescList,tableAttrsList);
  List<String> loadedTables=Lists.newArrayList();
  for (  TableDesc table : tableDescList) {
    File file=new File(tableDescDir,table.getName().toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),table);
    loadedTables.add(table.getName());
  }
  for (  Map<String,String> tableAttrs : tableAttrsList) {
    File file=new File(tableExdDir,tableAttrs.get(""String_Node_Str"").toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),tableAttrs);
  }
  return loadedTables;
}","private static List<String> extractTables(String database,BufferedReader reader,File metaTmpDir) throws IOException {
  File tableDescDir=new File(metaTmpDir,TABLE_FOLDER_NAME);
  File tableExdDir=new File(metaTmpDir,TABLE_EXD_FOLDER_NAME);
  mkdirs(tableDescDir);
  mkdirs(tableExdDir);
  List<TableDesc> tableDescList=new ArrayList<TableDesc>();
  List<Map<String,String>> tableAttrsList=new ArrayList<Map<String,String>>();
  getTables(database,reader,tableDescList,tableAttrsList);
  List<String> loadedTables=Lists.newArrayList();
  for (  TableDesc table : tableDescList) {
    File file=new File(tableDescDir,table.getName().toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),table);
    loadedTables.add(table.getDatabase() + ""String_Node_Str"" + table.getName());
  }
  for (  Map<String,String> tableAttrs : tableAttrsList) {
    File file=new File(tableExdDir,tableAttrs.get(""String_Node_Str"").toUpperCase() + ""String_Node_Str"" + OUTPUT_SURFIX);
    JsonUtil.writeValueIndent(new FileOutputStream(file),tableAttrs);
  }
  return loadedTables;
}",0.9807516040329972
63320,"public static Set<String> reloadHiveTables(String[] hiveTables,KylinConfig config) throws IOException {
  Map<String,Set<String>> db2tables=Maps.newHashMap();
  for (  String table : hiveTables) {
    int cut=table.indexOf('.');
    String database=cut >= 0 ? table.substring(0,cut).trim() : ""String_Node_Str"";
    String tableName=cut >= 0 ? table.substring(cut + 1).trim() : table.trim();
    Set<String> set=db2tables.get(database);
    if (set == null) {
      set=Sets.newHashSet();
      db2tables.put(database,set);
    }
    set.add(tableName);
  }
  File metaTmpDir=File.createTempFile(""String_Node_Str"",null);
  metaTmpDir.delete();
  metaTmpDir.mkdirs();
  Set<String> loadedTables=Sets.newHashSet();
  for (  String database : db2tables.keySet()) {
    List<String> loaded=extractHiveTables(database,db2tables.get(database),metaTmpDir,config);
    for (    String tableName : loaded) {
      loadedTables.add(database + tableName);
    }
  }
  ResourceTool.copy(KylinConfig.createInstanceFromUri(metaTmpDir.getAbsolutePath()),config);
  return loadedTables;
}","public static Set<String> reloadHiveTables(String[] hiveTables,KylinConfig config) throws IOException {
  Map<String,Set<String>> db2tables=Maps.newHashMap();
  for (  String table : hiveTables) {
    int cut=table.indexOf('.');
    String database=cut >= 0 ? table.substring(0,cut).trim() : ""String_Node_Str"";
    String tableName=cut >= 0 ? table.substring(cut + 1).trim() : table.trim();
    Set<String> set=db2tables.get(database);
    if (set == null) {
      set=Sets.newHashSet();
      db2tables.put(database,set);
    }
    set.add(tableName);
  }
  File metaTmpDir=File.createTempFile(""String_Node_Str"",null);
  metaTmpDir.delete();
  metaTmpDir.mkdirs();
  Set<String> loadedTables=Sets.newHashSet();
  for (  String database : db2tables.keySet()) {
    List<String> loaded=extractHiveTables(database,db2tables.get(database),metaTmpDir,config);
    loadedTables.addAll(loaded);
  }
  ResourceTool.copy(KylinConfig.createInstanceFromUri(metaTmpDir.getAbsolutePath()),config);
  return loadedTables;
}",0.9437770302739068
63321,"public Set<String> getTables(){
  return tables == null ? new TreeSet<String>() : tables;
}","public Set<String> getTables(){
  tables=tables == null ? new TreeSet<String>() : tables;
  return tables;
}",0.8542713567839196
63322,"public List<JobStep> buildSteps(JobInstance jobInstance) throws IOException {
  init(jobInstance);
switch (jobInstance.getType()) {
case BUILD:
    return buildCreateBuildCubeSegmentSteps(jobInstance);
case MERGE:
  return buildCreateMergeCubeSegmentsSteps(jobInstance);
default :
throw new IllegalArgumentException(""String_Node_Str"" + jobInstance.getType() + ""String_Node_Str"");
}
}","public List<JobStep> buildSteps(JobInstance jobInstance) throws IOException {
  init(jobInstance);
switch (jobInstance.getType()) {
case BUILD:
    return createBuildCubeSegmentSteps(jobInstance);
case MERGE:
  return createMergeCubeSegmentsSteps(jobInstance);
default :
throw new IllegalArgumentException(""String_Node_Str"" + jobInstance.getType() + ""String_Node_Str"");
}
}",0.9814814814814816
63323,"public void updateJobInstance(JobInstance jobInstance) throws IOException {
  JobInstance updatedJob=null;
  try {
    updatedJob=getJob(jobInstance.getUuid());
    if (updatedJob == null) {
      saveJob(jobInstance);
      return;
    }
    updatedJob.setExecEndTime(jobInstance.getExecEndTime());
    updatedJob.setExecStartTime(jobInstance.getExecStartTime());
    updatedJob.setDuration(jobInstance.getDuration());
    updatedJob.setMrWaiting(jobInstance.getMrWaiting());
    updatedJob.setRelatedCube(jobInstance.getRelatedCube());
    updatedJob.setRelatedSegment(jobInstance.getRelatedSegment());
    updatedJob.setType(jobInstance.getType());
    updatedJob.clearSteps();
    updatedJob.addSteps(jobInstance.getSteps());
    saveJob(updatedJob);
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage(),e);
    throw e;
  }
}","public void updateJobInstance(JobInstance jobInstance) throws IOException {
  try {
    JobInstance updatedJob=getJob(jobInstance.getUuid());
    if (updatedJob == null) {
      saveJob(jobInstance);
      return;
    }
    updatedJob.setExecEndTime(jobInstance.getExecEndTime());
    updatedJob.setExecStartTime(jobInstance.getExecStartTime());
    updatedJob.setDuration(jobInstance.getDuration());
    updatedJob.setMrWaiting(jobInstance.getMrWaiting());
    updatedJob.setRelatedCube(jobInstance.getRelatedCube());
    updatedJob.setRelatedSegment(jobInstance.getRelatedSegment());
    updatedJob.setType(jobInstance.getType());
    updatedJob.clearSteps();
    updatedJob.addSteps(jobInstance.getSteps());
    saveJob(updatedJob);
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage(),e);
    throw e;
  }
}",0.9742976688583384
63324,"List<JobStep> getSteps(){
  if (steps == null) {
    steps=Lists.newArrayList();
  }
  return steps;
}","public List<JobStep> getSteps(){
  if (steps == null) {
    steps=Lists.newArrayList();
  }
  return steps;
}",0.966824644549763
63325,"private static void undo(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case CHANGE_HTABLE_HOST:
{
      String tableName=(String)opt.params[0];
      HTableDescriptor desc=hbaseAdmin.getTableDescriptor(TableName.valueOf(tableName));
      hbaseAdmin.disableTable(tableName);
      desc.setValue(CubeManager.getHtableMetadataKey(),dstConfig.getMetadataUrlPrefix());
      hbaseAdmin.modifyTable(tableName,desc);
      hbaseAdmin.enableTable(tableName);
    }
case COPY_FILE_IN_META:
{
    logger.info(""String_Node_Str"");
    break;
  }
case COPY_DICT_OR_SNAPSHOT:
{
  logger.info(""String_Node_Str"");
  break;
}
case RENAME_FOLDER_IN_HDFS:
{
String srcPath=(String)opt.params[1];
String dstPath=(String)opt.params[0];
if (hdfsFS.exists(new Path(srcPath)) && !hdfsFS.exists(new Path(dstPath))) {
  hdfsFS.rename(new Path(srcPath),new Path(dstPath));
  logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
}
break;
}
case ADD_INTO_PROJECT:
{
logger.info(""String_Node_Str"");
break;
}
}
}","private static void undo(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case CHANGE_HTABLE_HOST:
{
      String tableName=(String)opt.params[0];
      HTableDescriptor desc=hbaseAdmin.getTableDescriptor(TableName.valueOf(tableName));
      hbaseAdmin.disableTable(tableName);
      desc.setValue(CubeManager.getHtableMetadataKey(),srcConfig.getMetadataUrlPrefix());
      hbaseAdmin.modifyTable(tableName,desc);
      hbaseAdmin.enableTable(tableName);
    }
case COPY_FILE_IN_META:
{
    logger.info(""String_Node_Str"");
    break;
  }
case COPY_DICT_OR_SNAPSHOT:
{
  logger.info(""String_Node_Str"");
  break;
}
case RENAME_FOLDER_IN_HDFS:
{
String srcPath=(String)opt.params[1];
String dstPath=(String)opt.params[0];
if (hdfsFS.exists(new Path(srcPath)) && !hdfsFS.exists(new Path(dstPath))) {
  hdfsFS.rename(new Path(srcPath),new Path(dstPath));
  logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
}
break;
}
case ADD_INTO_PROJECT:
{
logger.info(""String_Node_Str"");
break;
}
}
}",0.9972144846796658
63326,"@SuppressWarnings(""String_Node_Str"") public Cursor createCursor(AvaticaResultSet resultSet){
  KylinPrepare.PrepareResult result=((KylinResultSet)resultSet).getPrepareResult();
  return result.createCursor();
}","public Cursor createCursor(AvaticaResultSet resultSet){
  if (!(resultSet instanceof KylinResultSet))   throw new IllegalStateException(""String_Node_Str"");
  KylinPrepare.PrepareResult result=((KylinResultSet)resultSet).getPrepareResult();
  return result.createCursor();
}",0.5714285714285714
63327,"@Override public Result implement(EnumerableRelImplementor implementor,Prefer pref){
  @SuppressWarnings(""String_Node_Str"") JavaImplementor javaImplementor=(JavaImplementor)implementor;
  int ctxId=this.context.id;
  if (javaImplementor.getParentContext() != null) {
    ctxId=javaImplementor.getParentContext().id;
  }
  PhysType physType=PhysTypeImpl.of(javaImplementor.getTypeFactory(),this.rowType,pref.preferArray());
  String execFunction=genExecFunc();
  return javaImplementor.result(physType,Blocks.toBlock(Expressions.call(table.getExpression(OLAPTable.class),execFunction,javaImplementor.getRootExpression(),Expressions.constant(ctxId))));
}","@Override public Result implement(EnumerableRelImplementor implementor,Prefer pref){
  if (!(implementor instanceof JavaImplementor))   throw new IllegalStateException(""String_Node_Str"");
  JavaImplementor javaImplementor=(JavaImplementor)implementor;
  int ctxId=this.context.id;
  if (javaImplementor.getParentContext() != null) {
    ctxId=javaImplementor.getParentContext().id;
  }
  PhysType physType=PhysTypeImpl.of(javaImplementor.getTypeFactory(),this.rowType,pref.preferArray());
  String execFunction=genExecFunc();
  return javaImplementor.result(physType,Blocks.toBlock(Expressions.call(table.getExpression(OLAPTable.class),execFunction,javaImplementor.getRootExpression(),Expressions.constant(ctxId))));
}",0.9284671532846716
63328,"/** 
 * Get Java Env info as string
 * @return
 */
@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN) public String getEnv(){
  logger.debug(""String_Node_Str"");
  PropertiesConfiguration tempConfig=new PropertiesConfiguration();
  try {
    String content=""String_Node_Str"";
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Map<String,String> env=System.getenv();
    for (    Map.Entry<String,String> entry : env.entrySet()) {
      tempConfig.addProperty(entry.getKey(),entry.getValue());
    }
    Properties properteis=System.getProperties();
    for (    Object propName : properteis.keySet()) {
      tempConfig.setProperty((String)propName,properteis.get(propName));
    }
    tempConfig.save(baos);
    content=baos.toString();
    return content;
  }
 catch (  ConfigurationException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
}","/** 
 * Get Java Env info as string
 * @return
 */
@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN) public String getEnv(){
  logger.debug(""String_Node_Str"");
  PropertiesConfiguration tempConfig=new PropertiesConfiguration();
  try {
    String content=""String_Node_Str"";
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Map<String,String> env=System.getenv();
    for (    Map.Entry<String,String> entry : env.entrySet()) {
      tempConfig.addProperty(entry.getKey(),entry.getValue());
    }
    Properties proterties=System.getProperties();
    for (    Map.Entry<Object,Object> entry : proterties.entrySet()) {
      tempConfig.setProperty((String)entry.getKey(),entry.getValue());
    }
    tempConfig.save(baos);
    content=baos.toString();
    return content;
  }
 catch (  ConfigurationException e) {
    throw new InternalErrorException(""String_Node_Str"",e);
  }
}",0.900511654349062
63329,"/** 
 * return null if no dictionary for given column
 */
public Dictionary<?> getDictionary(CubeSegment cubeSeg,TblColRef col){
  DictionaryInfo info=null;
  try {
    DictionaryManager dictMgr=getDictionaryManager();
    String dictResPath=cubeSeg.getDictResPath(col);
    if (dictResPath == null)     return null;
    info=dictMgr.getDictionaryInfo(dictResPath);
    if (info == null)     throw new IllegalStateException(""String_Node_Str"" + dictResPath + ""String_Node_Str""+ cubeSeg.getName()+ ""String_Node_Str""+ col);
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + cubeSeg.getName() + ""String_Node_Str""+ col,e);
  }
  return info == null ? null : info.getDictionaryObject();
}","/** 
 * return null if no dictionary for given column
 */
public Dictionary<?> getDictionary(CubeSegment cubeSeg,TblColRef col){
  DictionaryInfo info=null;
  try {
    DictionaryManager dictMgr=getDictionaryManager();
    String dictResPath=cubeSeg.getDictResPath(col);
    if (dictResPath == null)     return null;
    info=dictMgr.getDictionaryInfo(dictResPath);
    if (info == null)     throw new IllegalStateException(""String_Node_Str"" + dictResPath + ""String_Node_Str""+ cubeSeg.getName()+ ""String_Node_Str""+ col);
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + cubeSeg.getName() + ""String_Node_Str""+ col,e);
  }
  return info.getDictionaryObject();
}",0.9844632768361582
63330,"private void checkLoopTableConsistency(CubeInstance cube,List<CubeSegment> newSegments) throws CubeIntegrityException {
  CubeSegment cubeSeg=newSegments.get(0);
  DictionaryManager dictMgr=DictionaryManager.getInstance(cube.getConfig());
  List<CubeSegment> segmentList=cube.getMergingSegments(cubeSeg);
  HashSet<TblColRef> cols=new HashSet<TblColRef>();
  for (  DimensionDesc dim : cube.getDescriptor().getDimensions()) {
    for (    TblColRef col : dim.getColumnRefs()) {
      try {
        if (cubeSeg.getCubeDesc().getRowkey().isUseDictionary(col) && !cube.getDescriptor().getFactTable().equalsIgnoreCase((String)dictMgr.decideSourceData(cube.getDescriptor(),col,null)[0])) {
          cols.add(col);
        }
      }
 catch (      IOException e) {
        throw new CubeIntegrityException(""String_Node_Str"");
      }
    }
  }
  for (  TblColRef col : cols) {
    String dictOfFirstSegment=null;
    for (    CubeSegment segment : segmentList) {
      String temp=segment.getDictResPath(col);
      if (temp == null) {
        throw new CubeIntegrityException(""String_Node_Str"" + col + ""String_Node_Str""+ segment);
      }
      if (dictOfFirstSegment == null) {
        dictOfFirstSegment=temp;
      }
 else {
        if (!dictOfFirstSegment.equalsIgnoreCase(temp)) {
          throw new CubeIntegrityException(""String_Node_Str"");
        }
      }
    }
  }
  CubeSegment firstSegment=null;
  for (  CubeSegment segment : segmentList) {
    if (firstSegment == null) {
      firstSegment=segment;
    }
 else {
      Collection<String> a=firstSegment.getSnapshots().values();
      Collection<String> b=segment.getSnapshots().values();
      if ((a.size() == b.size()) && a.containsAll(b)) {
      }
 else {
        throw new CubeIntegrityException(""String_Node_Str"");
      }
    }
  }
}","private void checkLoopTableConsistency(CubeInstance cube,List<CubeSegment> newSegments) throws CubeIntegrityException {
  CubeSegment cubeSeg=newSegments.get(0);
  DictionaryManager dictMgr=DictionaryManager.getInstance(cube.getConfig());
  List<CubeSegment> segmentList=cube.getMergingSegments(cubeSeg);
  HashSet<TblColRef> cols=new HashSet<TblColRef>();
  for (  DimensionDesc dim : cube.getDescriptor().getDimensions()) {
    for (    TblColRef col : dim.getColumnRefs()) {
      try {
        if (cubeSeg.getCubeDesc().getRowkey().isUseDictionary(col) && !cube.getDescriptor().getFactTable().equalsIgnoreCase((String)dictMgr.decideSourceData(cube.getDescriptor(),col,null)[0])) {
          cols.add(col);
        }
      }
 catch (      IOException e) {
        throw new CubeIntegrityException(""String_Node_Str"");
      }
    }
  }
  for (  TblColRef col : cols) {
    String dictOfFirstSegment=null;
    for (    CubeSegment segment : segmentList) {
      String temp=segment.getDictResPath(col);
      if (temp == null) {
        throw new CubeIntegrityException(""String_Node_Str"" + col + ""String_Node_Str""+ segment);
      }
      if (dictOfFirstSegment == null) {
        dictOfFirstSegment=temp;
      }
 else {
        if (!dictOfFirstSegment.equalsIgnoreCase(temp)) {
          throw new CubeIntegrityException(""String_Node_Str"");
        }
      }
    }
  }
  CubeSegment firstSegment=null;
  for (  CubeSegment segment : segmentList) {
    if (firstSegment == null) {
      firstSegment=segment;
    }
 else {
      Collection<String> a=firstSegment.getSnapshots().values();
      Collection<String> b=segment.getSnapshots().values();
      if (!((a.size() == b.size()) && a.containsAll(b)))       throw new CubeIntegrityException(""String_Node_Str"");
    }
  }
}",0.9913383626711372
63331,"@Override public int compare(DimensionDesc o1,DimensionDesc o2){
  JoinDesc j1=o2.getJoin();
  JoinDesc j2=o1.getJoin();
  return new Integer(j1 != null ? j1.getPrimaryKey().length : 0).compareTo(j2 != null ? j2.getPrimaryKey().length : 0);
}","@Override public int compare(DimensionDesc o1,DimensionDesc o2){
  JoinDesc j1=o2.getJoin();
  JoinDesc j2=o1.getJoin();
  return Integer.compare(j1 != null ? j1.getPrimaryKey().length : 0,j2 != null ? j2.getPrimaryKey().length : 0);
}",0.9475890985324948
63332,"private void printColumnMappings(HashMap<String,String> factTableCol2LookupCol,HashSet<String> usedCols,HashSet<String> defaultColumns){
  System.out.println(""String_Node_Str"");
  System.out.format(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  System.out.println();
  System.out.println();
  for (  String key : factTableCol2LookupCol.keySet()) {
    System.out.format(""String_Node_Str"",key,factTableCol2LookupCol.get(key));
    System.out.println();
  }
  for (  String key : usedCols) {
    System.out.format(""String_Node_Str"",key,""String_Node_Str"");
    System.out.println();
  }
  for (  String key : defaultColumns) {
    System.out.format(""String_Node_Str"",key,""String_Node_Str"");
    System.out.println();
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println();
  System.out.println(""String_Node_Str"" + cubeName);
  System.out.println(""String_Node_Str"" + rowCount);
  System.out.println(""String_Node_Str"" + conflictRatio);
  System.out.println(""String_Node_Str"" + linkableRatio);
  System.out.println(""String_Node_Str"" + randomSeed);
  System.out.println();
  System.out.println(""String_Node_Str"" + this.unlinkableRowCount);
  System.out.println(""String_Node_Str"");
  System.out.println();
}","private void printColumnMappings(HashMap<String,String> factTableCol2LookupCol,HashSet<String> usedCols,HashSet<String> defaultColumns){
  System.out.println(""String_Node_Str"");
  System.out.format(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  System.out.println();
  System.out.println();
  for (  Map.Entry<String,String> entry : factTableCol2LookupCol.entrySet()) {
    System.out.format(""String_Node_Str"",entry.getKey(),entry.getValue());
    System.out.println();
  }
  for (  String key : usedCols) {
    System.out.format(""String_Node_Str"",key,""String_Node_Str"");
    System.out.println();
  }
  for (  String key : defaultColumns) {
    System.out.format(""String_Node_Str"",key,""String_Node_Str"");
    System.out.println();
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println();
  System.out.println(""String_Node_Str"" + cubeName);
  System.out.println(""String_Node_Str"" + rowCount);
  System.out.println(""String_Node_Str"" + conflictRatio);
  System.out.println(""String_Node_Str"" + linkableRatio);
  System.out.println(""String_Node_Str"" + randomSeed);
  System.out.println();
  System.out.println(""String_Node_Str"" + this.unlinkableRowCount);
  System.out.println(""String_Node_Str"");
  System.out.println();
}",0.8067556952081697
63333,"private List<DimensionDesc> getSortedDimentsionDescs(){
  List<DimensionDesc> dimensions=desc.getDimensions();
  Collections.sort(dimensions,new Comparator<DimensionDesc>(){
    @Override public int compare(    DimensionDesc o1,    DimensionDesc o2){
      JoinDesc j1=o2.getJoin();
      JoinDesc j2=o1.getJoin();
      return new Integer(j1 != null ? j1.getPrimaryKey().length : 0).compareTo(j2 != null ? j2.getPrimaryKey().length : 0);
    }
  }
);
  return dimensions;
}","private List<DimensionDesc> getSortedDimentsionDescs(){
  List<DimensionDesc> dimensions=desc.getDimensions();
  Collections.sort(dimensions,new Comparator<DimensionDesc>(){
    @Override public int compare(    DimensionDesc o1,    DimensionDesc o2){
      JoinDesc j1=o2.getJoin();
      JoinDesc j2=o1.getJoin();
      return Integer.compare(j1 != null ? j1.getPrimaryKey().length : 0,j2 != null ? j2.getPrimaryKey().length : 0);
    }
  }
);
  return dimensions;
}",0.973432518597237
63334,"private LinkedList<String> createRow(HashMap<String,String> factTableCol2LookupCol,HashSet<String> usedCols,HashSet<String> defaultColumns) throws Exception {
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  LinkedList<String> columnValues=new LinkedList<String>();
  for (  ColumnDesc cDesc : MetadataManager.getInstance(config).getTableDesc(factTableName).getColumns()) {
    int seed=r.nextInt();
    String colName=cDesc.getName();
    if (factTableCol2LookupCol.containsKey(colName)) {
      ArrayList<String> candidates=this.feasibleValues.get(factTableCol2LookupCol.get(colName));
      columnValues.add(candidates.get(Math.abs(seed) % candidates.size()));
    }
 else     if (usedCols.contains(colName)) {
      columnValues.add(createCell(cDesc));
    }
 else {
      columnValues.add(createDefaultsCell(cDesc.getTypeName()));
      defaultColumns.add(colName);
    }
  }
  return columnValues;
}","private LinkedList<String> createRow(HashMap<String,String> factTableCol2LookupCol,HashSet<String> usedCols,HashSet<String> defaultColumns) throws Exception {
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  LinkedList<String> columnValues=new LinkedList<String>();
  for (  ColumnDesc cDesc : MetadataManager.getInstance(config).getTableDesc(factTableName).getColumns()) {
    String colName=cDesc.getName();
    if (factTableCol2LookupCol.containsKey(colName)) {
      ArrayList<String> candidates=this.feasibleValues.get(factTableCol2LookupCol.get(colName));
      columnValues.add(candidates.get(r.nextInt(candidates.size())));
    }
 else     if (usedCols.contains(colName)) {
      columnValues.add(createCell(cDesc));
    }
 else {
      columnValues.add(createDefaultsCell(cDesc.getTypeName()));
      defaultColumns.add(colName);
    }
  }
  return columnValues;
}",0.7346711259754738
63335,"private void loadLookupTableValues(String lookupTableName,LinkedList<String> columnNames,int distinctRowCount) throws Exception {
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  if (columnNames.size() > 1 && !lookupTableCompositeKeyValues.containsKey(lookupTableName)) {
    lookupTableCompositeKeyValues.put(lookupTableName,new HashSet<Array<String>>());
  }
  InputStream tableStream=null;
  BufferedReader tableReader=null;
  try {
    Hashtable<String,Integer> zeroBasedInice=new Hashtable<String,Integer>();
    for (    String columnName : columnNames) {
      ColumnDesc cDesc=MetadataManager.getInstance(config).getTableDesc(lookupTableName).findColumnByName(columnName);
      zeroBasedInice.put(columnName,cDesc.getZeroBasedIndex());
    }
    String path=""String_Node_Str"" + lookupTableName + ""String_Node_Str"";
    tableStream=store.getResource(path);
    tableReader=new BufferedReader(new InputStreamReader(tableStream));
    int rowCount=0;
    int curRowNum=0;
    String curRow;
    while (tableReader.readLine() != null)     rowCount++;
    HashSet<Integer> rows=new HashSet<Integer>();
    distinctRowCount=(distinctRowCount < rowCount) ? distinctRowCount : rowCount;
    while (rows.size() < distinctRowCount) {
      rows.add(new Integer(r.nextInt(rowCount)));
    }
    tableStream.close();
    tableReader.close();
    tableStream=store.getResource(path);
    tableReader=new BufferedReader(new InputStreamReader(tableStream));
    while ((curRow=tableReader.readLine()) != null) {
      if (rows.contains(curRowNum)) {
        String[] tokens=curRow.split(""String_Node_Str"");
        String[] comboKeys=null;
        int index=0;
        if (columnNames.size() > 1)         comboKeys=new String[columnNames.size()];
        for (        String columnName : columnNames) {
          int zeroBasedIndex=zeroBasedInice.get(columnName);
          if (!feasibleValues.containsKey(lookupTableName + ""String_Node_Str"" + columnName))           feasibleValues.put(lookupTableName + ""String_Node_Str"" + columnName,new ArrayList<String>());
          feasibleValues.get(lookupTableName + ""String_Node_Str"" + columnName).add(tokens[zeroBasedIndex]);
          if (columnNames.size() > 1) {
            comboKeys[index]=tokens[zeroBasedIndex];
            index++;
          }
        }
        if (columnNames.size() > 1) {
          Array<String> wrap=new Array<String>(comboKeys);
          if (lookupTableCompositeKeyValues.get(lookupTableName).contains(wrap)) {
            throw new Exception(""String_Node_Str"");
          }
          lookupTableCompositeKeyValues.get(lookupTableName).add(wrap);
        }
      }
      curRowNum++;
    }
    if (tableStream != null)     tableStream.close();
    if (tableReader != null)     tableReader.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
}","private void loadLookupTableValues(String lookupTableName,LinkedList<String> columnNames,int distinctRowCount) throws Exception {
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  if (columnNames.size() > 1 && !lookupTableCompositeKeyValues.containsKey(lookupTableName)) {
    lookupTableCompositeKeyValues.put(lookupTableName,new HashSet<Array<String>>());
  }
  InputStream tableStream=null;
  BufferedReader tableReader=null;
  try {
    Hashtable<String,Integer> zeroBasedInice=new Hashtable<String,Integer>();
    for (    String columnName : columnNames) {
      ColumnDesc cDesc=MetadataManager.getInstance(config).getTableDesc(lookupTableName).findColumnByName(columnName);
      zeroBasedInice.put(columnName,cDesc.getZeroBasedIndex());
    }
    String path=""String_Node_Str"" + lookupTableName + ""String_Node_Str"";
    tableStream=store.getResource(path);
    tableReader=new BufferedReader(new InputStreamReader(tableStream));
    tableReader.mark(0);
    int rowCount=0;
    int curRowNum=0;
    String curRow;
    while (tableReader.readLine() != null)     rowCount++;
    HashSet<Integer> rows=new HashSet<Integer>();
    distinctRowCount=(distinctRowCount < rowCount) ? distinctRowCount : rowCount;
    while (rows.size() < distinctRowCount) {
      rows.add(r.nextInt(rowCount));
    }
    tableStream.close();
    tableReader.close();
    tableStream=null;
    tableReader=null;
    tableStream=store.getResource(path);
    tableReader=new BufferedReader(new InputStreamReader(tableStream));
    while ((curRow=tableReader.readLine()) != null) {
      if (rows.contains(curRowNum)) {
        String[] tokens=curRow.split(""String_Node_Str"");
        String[] comboKeys=null;
        int index=0;
        if (columnNames.size() > 1)         comboKeys=new String[columnNames.size()];
        for (        String columnName : columnNames) {
          int zeroBasedIndex=zeroBasedInice.get(columnName);
          if (!feasibleValues.containsKey(lookupTableName + ""String_Node_Str"" + columnName))           feasibleValues.put(lookupTableName + ""String_Node_Str"" + columnName,new ArrayList<String>());
          feasibleValues.get(lookupTableName + ""String_Node_Str"" + columnName).add(tokens[zeroBasedIndex]);
          if (columnNames.size() > 1) {
            comboKeys[index]=tokens[zeroBasedIndex];
            index++;
          }
        }
        if (columnNames.size() > 1) {
          Array<String> wrap=new Array<String>(comboKeys);
          if (lookupTableCompositeKeyValues.get(lookupTableName).contains(wrap)) {
            throw new Exception(""String_Node_Str"");
          }
          lookupTableCompositeKeyValues.get(lookupTableName).add(wrap);
        }
      }
      curRowNum++;
    }
    if (tableStream != null)     tableStream.close();
    if (tableReader != null)     tableReader.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
}",0.9836975372875476
63336,"/** 
 * Randomly create a fact table and put it to test_kylin_data table in hbase
 * @param cubeName name of the cube
 * @param rowCount expected row count generated
 * @param linkableRatio the percentage of fact table rows that can be linked with all lookup table by INNER join
 * @param randomSeed random seed
 */
public static void generate(String cubeName,String rowCount,String linkableRatio,String randomSeed,String joinType) throws Exception {
  if (cubeName == null)   cubeName=""String_Node_Str"";
  if (rowCount == null)   rowCount=""String_Node_Str"";
  if (linkableRatio == null)   linkableRatio=""String_Node_Str"";
  if (randomSeed == null)   ;
  FactTableGenerator generator=new FactTableGenerator();
  long seed;
  if (randomSeed != null) {
    seed=Long.parseLong(randomSeed);
  }
 else {
    Random r=new Random();
    seed=r.nextLong();
  }
  generator.init(cubeName,Integer.parseInt(rowCount),5,Double.parseDouble(linkableRatio),seed);
  generator.prepare();
  generator.execute(joinType);
}","/** 
 * Randomly create a fact table and put it to test_kylin_data table in hbase
 * @param cubeName      name of the cube
 * @param rowCount      expected row count generated
 * @param linkableRatio the percentage of fact table rows that can be linked with alllookup table by INNER join
 * @param randomSeed    random seed
 */
public static void generate(String cubeName,String rowCount,String linkableRatio,String randomSeed,String joinType) throws Exception {
  if (cubeName == null)   cubeName=""String_Node_Str"";
  if (rowCount == null)   rowCount=""String_Node_Str"";
  if (linkableRatio == null)   linkableRatio=""String_Node_Str"";
  FactTableGenerator generator=new FactTableGenerator();
  long seed;
  if (randomSeed != null) {
    seed=Long.parseLong(randomSeed);
  }
 else {
    Random r=new Random();
    seed=r.nextLong();
  }
  generator.init(cubeName,Integer.parseInt(rowCount),5,Double.parseDouble(linkableRatio),seed);
  generator.prepare();
  generator.execute(joinType);
}",0.9779116465863452
63337,"/** 
 * returns a code point from [0, nValues), preserving order of value, or -1 if not found
 * @param n -- the offset of current node
 * @param seq -- the code point under track
 * @param o -- write offset in returnValue
 * @param returnValue -- where return value is written to
 */
private int lookupValueFromSeqNo(int n,int seq,byte[] returnValue,int offset){
  int o=offset;
  while (true) {
    int p=n + firstByteOffset;
    int len=BytesUtil.readUnsigned(trieBytes,p - 1,1);
    System.arraycopy(trieBytes,p,returnValue,o,len);
    o+=len;
    boolean isEndOfValue=checkFlag(n,BIT_IS_END_OF_VALUE);
    if (isEndOfValue) {
      seq--;
      if (seq < 0)       return o - offset;
    }
    int c=headSize + (BytesUtil.readUnsigned(trieBytes,n,sizeChildOffset) & childOffsetMask);
    if (c == headSize)     return -1;
    int nValuesBeneath;
    while (true) {
      nValuesBeneath=BytesUtil.readUnsigned(trieBytes,c + sizeChildOffset,sizeNoValuesBeneath);
      if (seq - nValuesBeneath < 0) {
        n=c;
        break;
      }
 else {
        seq-=nValuesBeneath;
        if (checkFlag(c,BIT_IS_LAST_CHILD))         return -1;
        p=c + firstByteOffset;
        c=p + BytesUtil.readUnsigned(trieBytes,p - 1,1);
      }
    }
  }
}","/** 
 * returns a code point from [0, nValues), preserving order of value, or -1 if not found
 * @param n -- the offset of current node
 * @param seq -- the code point under track
 * @param returnValue -- where return value is written to
 */
private int lookupValueFromSeqNo(int n,int seq,byte[] returnValue,int offset){
  int o=offset;
  while (true) {
    int p=n + firstByteOffset;
    int len=BytesUtil.readUnsigned(trieBytes,p - 1,1);
    System.arraycopy(trieBytes,p,returnValue,o,len);
    o+=len;
    boolean isEndOfValue=checkFlag(n,BIT_IS_END_OF_VALUE);
    if (isEndOfValue) {
      seq--;
      if (seq < 0)       return o - offset;
    }
    int c=headSize + (BytesUtil.readUnsigned(trieBytes,n,sizeChildOffset) & childOffsetMask);
    if (c == headSize)     return -1;
    int nValuesBeneath;
    while (true) {
      nValuesBeneath=BytesUtil.readUnsigned(trieBytes,c + sizeChildOffset,sizeNoValuesBeneath);
      if (seq - nValuesBeneath < 0) {
        n=c;
        break;
      }
 else {
        seq-=nValuesBeneath;
        if (checkFlag(c,BIT_IS_LAST_CHILD))         return -1;
        p=c + firstByteOffset;
        c=p + BytesUtil.readUnsigned(trieBytes,p - 1,1);
      }
    }
  }
}",0.9824418129848916
63338,"public Cursor createCursor(AvaticaResultSet resultSet){
  KylinPrepare.PrepareResult result=((KylinResultSet)resultSet).getPrepareResult();
  return result.createCursor();
}","@SuppressWarnings(""String_Node_Str"") public Cursor createCursor(AvaticaResultSet resultSet){
  KylinPrepare.PrepareResult result=((KylinResultSet)resultSet).getPrepareResult();
  return result.createCursor();
}",0.9033942558746736
63339,"/** 
 * @param statement
 * @param params
 */
private List<StateParam> genPrestateStates(AvaticaStatement statement){
  List<StateParam> params=new ArrayList<StateParam>();
  List<Object> values=((KylinJdbc41PreparedStatement)statement).getParameterValues();
  for (int i=0; i < values.size(); i++) {
    Object value=values.get(i);
    params.add(new StateParam(value.getClass().getCanonicalName(),(null == value) ? null : String.valueOf(value)));
  }
  return params;
}","/** 
 * @param statement
 * @param params
 */
private List<StateParam> genPrestateStates(AvaticaStatement statement){
  List<StateParam> params=new ArrayList<StateParam>();
  List<Object> values=((KylinJdbc41PreparedStatement)statement).getParameterValues();
  for (int i=0; i < values.size(); i++) {
    Object value=values.get(i);
    params.add(new StateParam(value.getClass().getCanonicalName(),String.valueOf(value)));
  }
  return params;
}",0.9727371864776444
63340,"private static void undo(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case CHANGE_HTABLE_HOST:
{
      String tableName=(String)opt.params[0];
      HTableDescriptor desc=hbaseAdmin.getTableDescriptor(TableName.valueOf(tableName));
      hbaseAdmin.disableTable(tableName);
      desc.setValue(CubeManager.getHtableMetadataKey(),srcConfig.getMetadataUrlPrefix());
      hbaseAdmin.modifyTable(tableName,desc);
      hbaseAdmin.enableTable(tableName);
    }
case COPY_FILE_IN_META:
{
    logger.info(""String_Node_Str"");
    break;
  }
case COPY_DICT_OR_SNAPSHOT:
{
  logger.info(""String_Node_Str"");
  break;
}
case RENAME_FOLDER_IN_HDFS:
{
String srcPath=(String)opt.params[1];
String dstPath=(String)opt.params[0];
if (hdfsFS.exists(new Path(srcPath)) && !hdfsFS.exists(new Path(dstPath))) {
  hdfsFS.rename(new Path(srcPath),new Path(dstPath));
  logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
}
break;
}
case ADD_INTO_PROJECT:
{
logger.info(""String_Node_Str"");
break;
}
}
}","private static void undo(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case CHANGE_HTABLE_HOST:
{
      String tableName=(String)opt.params[0];
      HTableDescriptor desc=hbaseAdmin.getTableDescriptor(TableName.valueOf(tableName));
      hbaseAdmin.disableTable(tableName);
      desc.setValue(CubeManager.getHtableMetadataKey(),srcConfig.getMetadataUrlPrefix());
      hbaseAdmin.modifyTable(tableName,desc);
      hbaseAdmin.enableTable(tableName);
      break;
    }
case COPY_FILE_IN_META:
{
    logger.info(""String_Node_Str"");
    break;
  }
case COPY_DICT_OR_SNAPSHOT:
{
  logger.info(""String_Node_Str"");
  break;
}
case RENAME_FOLDER_IN_HDFS:
{
String srcPath=(String)opt.params[1];
String dstPath=(String)opt.params[0];
if (hdfsFS.exists(new Path(srcPath)) && !hdfsFS.exists(new Path(dstPath))) {
  hdfsFS.rename(new Path(srcPath),new Path(dstPath));
  logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
}
break;
}
case ADD_INTO_PROJECT:
{
logger.info(""String_Node_Str"");
break;
}
}
}",0.9940009229349333
63341,"private static String sampleFactTable(String factTableName,int sampleRatio) throws IOException, JobException {
  String sampleTableName=factTableName + ""String_Node_Str"" + sampleRatio;
  String settingQueries=""String_Node_Str"";
  String dropQuery=""String_Node_Str"" + sampleTableName + ""String_Node_Str"";
  String createQuery=""String_Node_Str"" + sampleTableName + ""String_Node_Str""+ factTableName+ ""String_Node_Str"";
  HiveSourceTableMgmt hstm=new HiveSourceTableMgmt();
  File dir=File.createTempFile(""String_Node_Str"",null);
  dir.delete();
  dir.mkdir();
  logger.info(""String_Node_Str"" + factTableName + ""String_Node_Str""+ dir.getAbsolutePath());
  hstm.extractTableDescWithTablePattern(factTableName,dir.getAbsolutePath());
  String factTableExdFilePath=dir.getAbsolutePath() + File.separator + HiveSourceTableMgmt.TABLE_EXD_FOLDER_NAME+ File.separator+ factTableName.toUpperCase()+ ""String_Node_Str""+ HiveSourceTableMgmt.OUTPUT_SURFIX;
  logger.info(""String_Node_Str"" + factTableExdFilePath);
  InputStream is=new FileInputStream(factTableExdFilePath);
  @SuppressWarnings(""String_Node_Str"") Map<String,String> attrs=JsonUtil.readValue(is,HashMap.class);
  is.close();
  String partitionClause=getPartitionClause(attrs);
  String insertQuery=""String_Node_Str"" + sampleTableName + ""String_Node_Str""+ partitionClause+ ""String_Node_Str""+ factTableName+ ""String_Node_Str""+ sampleRatio+ ""String_Node_Str"";
  String query=settingQueries + dropQuery + createQuery+ insertQuery;
  logger.info(""String_Node_Str"" + query);
  is=HiveSourceTableMgmt.executeHiveCommand(query);
  InputStreamReader reader=new InputStreamReader(is);
  BufferedReader bufferedReader=new BufferedReader(reader);
  String line=null;
  while ((line=bufferedReader.readLine()) != null) {
    logger.info(line);
  }
  logger.info(""String_Node_Str"");
  is.close();
  return sampleTableName;
}","private static String sampleFactTable(String factTableName,int sampleRatio) throws IOException, JobException {
  String sampleTableName=factTableName + ""String_Node_Str"" + sampleRatio;
  String settingQueries=""String_Node_Str"";
  String dropQuery=""String_Node_Str"" + sampleTableName + ""String_Node_Str"";
  String createQuery=""String_Node_Str"" + sampleTableName + ""String_Node_Str""+ factTableName+ ""String_Node_Str"";
  HiveSourceTableMgmt hstm=new HiveSourceTableMgmt();
  File dir=File.createTempFile(""String_Node_Str"",null);
  dir.delete();
  dir.mkdir();
  logger.info(""String_Node_Str"" + factTableName + ""String_Node_Str""+ dir.getAbsolutePath());
  hstm.extractTableDescWithTablePattern(factTableName,dir.getAbsolutePath());
  String factTableExdFilePath=dir.getAbsolutePath() + File.separator + HiveSourceTableMgmt.TABLE_EXD_FOLDER_NAME+ File.separator+ factTableName.toUpperCase()+ ""String_Node_Str""+ HiveSourceTableMgmt.OUTPUT_SURFIX;
  logger.info(""String_Node_Str"" + factTableExdFilePath);
  InputStream is=new FileInputStream(factTableExdFilePath);
  @SuppressWarnings(""String_Node_Str"") Map<String,String> attrs=JsonUtil.readValue(is,HashMap.class);
  is.close();
  String partitionClause=getPartitionClause(attrs);
  String insertQuery=""String_Node_Str"" + sampleTableName + ""String_Node_Str""+ partitionClause+ ""String_Node_Str""+ factTableName+ ""String_Node_Str""+ sampleRatio+ ""String_Node_Str"";
  String query=settingQueries + dropQuery + createQuery+ insertQuery;
  logger.info(""String_Node_Str"" + query);
  is=HiveSourceTableMgmt.executeHiveCommand(query);
  InputStreamReader reader=new InputStreamReader(is);
  BufferedReader bufferedReader=new BufferedReader(reader);
  String line=null;
  while ((line=bufferedReader.readLine()) != null) {
    logger.info(line);
  }
  logger.info(""String_Node_Str"");
  bufferedReader.close();
  return sampleTableName;
}",0.995710455764075
63342,"/** 
 * @param context
 * @param cube
 * @param value
 */
private void validateColumnParameter(ValidateContext context,CubeDesc cube,String value){
  String factTable=cube.getFactTable();
  if (StringUtils.isEmpty(factTable)) {
    context.addResult(ResultLevel.ERROR,""String_Node_Str"");
    return;
  }
  TableDesc table=MetadataManager.getInstance(cube.getConfig()).getTableDesc(factTable);
  if (table == null) {
    context.addResult(ResultLevel.ERROR,""String_Node_Str"" + cube);
  }
  Set<String> set=new HashSet<String>();
  ColumnDesc[] cdesc=table.getColumns();
  for (int i=0; i < cdesc.length; i++) {
    ColumnDesc columnDesc=cdesc[i];
    set.add(columnDesc.getName());
  }
  String[] items=value.split(""String_Node_Str"");
  for (int i=0; i < items.length; i++) {
    String item=items[i].trim();
    if (StringUtils.isEmpty(item)) {
      continue;
    }
    if (!set.contains(item)) {
      context.addResult(ResultLevel.ERROR,""String_Node_Str"" + item + ""String_Node_Str""+ factTable);
    }
  }
}","/** 
 * @param context
 * @param cube
 * @param value
 */
private void validateColumnParameter(ValidateContext context,CubeDesc cube,String value){
  String factTable=cube.getFactTable();
  if (StringUtils.isEmpty(factTable)) {
    context.addResult(ResultLevel.ERROR,""String_Node_Str"");
    return;
  }
  TableDesc table=MetadataManager.getInstance(cube.getConfig()).getTableDesc(factTable);
  if (table == null) {
    context.addResult(ResultLevel.ERROR,""String_Node_Str"" + cube);
    return;
  }
  Set<String> set=new HashSet<String>();
  ColumnDesc[] cdesc=table.getColumns();
  for (int i=0; i < cdesc.length; i++) {
    ColumnDesc columnDesc=cdesc[i];
    set.add(columnDesc.getName());
  }
  String[] items=value.split(""String_Node_Str"");
  for (int i=0; i < items.length; i++) {
    String item=items[i].trim();
    if (StringUtils.isEmpty(item)) {
      continue;
    }
    if (!set.contains(item)) {
      context.addResult(ResultLevel.ERROR,""String_Node_Str"" + item + ""String_Node_Str""+ factTable);
    }
  }
}",0.994088669950739
63343,"private JoinDesc buildJoin(RexCall condition){
  Map<TblColRef,TblColRef> joinColumns=new HashMap<TblColRef,TblColRef>();
  translateJoinColumn(condition,joinColumns);
  List<String> pks=new ArrayList<String>();
  List<TblColRef> pkCols=new ArrayList<TblColRef>();
  List<String> fks=new ArrayList<String>();
  List<TblColRef> fkCols=new ArrayList<TblColRef>();
  String factTable=context.firstTableScan.getCubeTable();
  for (  Map.Entry<TblColRef,TblColRef> columnPair : joinColumns.entrySet()) {
    TblColRef fromCol=columnPair.getKey();
    TblColRef toCol=columnPair.getValue();
    if (factTable.equals(fromCol)) {
      fks.add(fromCol.getName());
      fkCols.add(fromCol);
      pks.add(toCol.getName());
      pkCols.add(toCol);
    }
 else {
      fks.add(toCol.getName());
      fkCols.add(toCol);
      pks.add(fromCol.getName());
      pkCols.add(fromCol);
    }
  }
  JoinDesc join=new JoinDesc();
  join.setForeignKey(fks.toArray(COLUMN_ARRAY_MARKER));
  join.setForeignKeyColumns(fkCols.toArray(new TblColRef[fkCols.size()]));
  join.setPrimaryKey(pks.toArray(COLUMN_ARRAY_MARKER));
  join.setPrimaryKeyColumns(pkCols.toArray(new TblColRef[pkCols.size()]));
  return join;
}","private JoinDesc buildJoin(RexCall condition){
  Map<TblColRef,TblColRef> joinColumns=new HashMap<TblColRef,TblColRef>();
  translateJoinColumn(condition,joinColumns);
  List<String> pks=new ArrayList<String>();
  List<TblColRef> pkCols=new ArrayList<TblColRef>();
  List<String> fks=new ArrayList<String>();
  List<TblColRef> fkCols=new ArrayList<TblColRef>();
  String factTable=context.firstTableScan.getCubeTable();
  for (  Map.Entry<TblColRef,TblColRef> columnPair : joinColumns.entrySet()) {
    TblColRef fromCol=columnPair.getKey();
    TblColRef toCol=columnPair.getValue();
    if (factTable.equalsIgnoreCase(fromCol.getTable())) {
      fks.add(fromCol.getName());
      fkCols.add(fromCol);
      pks.add(toCol.getName());
      pkCols.add(toCol);
    }
 else {
      fks.add(toCol.getName());
      fkCols.add(toCol);
      pks.add(fromCol.getName());
      pkCols.add(fromCol);
    }
  }
  JoinDesc join=new JoinDesc();
  join.setForeignKey(fks.toArray(COLUMN_ARRAY_MARKER));
  join.setForeignKeyColumns(fkCols.toArray(new TblColRef[fkCols.size()]));
  join.setPrimaryKey(pks.toArray(COLUMN_ARRAY_MARKER));
  join.setPrimaryKeyColumns(pkCols.toArray(new TblColRef[pkCols.size()]));
  return join;
}",0.9846153846153848
63344,"@Override public Result implement(EnumerableRelImplementor implementor,Prefer pref){
  JavaImplementor javaImplementor=(JavaImplementor)implementor;
  int ctxId=this.context.id;
  if (javaImplementor.getParentContext() != null) {
    ctxId=javaImplementor.getParentContext().id;
  }
  PhysType physType=PhysTypeImpl.of(javaImplementor.getTypeFactory(),this.rowType,pref.preferArray());
  String execFunction=genExecFunc();
  return javaImplementor.result(physType,Blocks.toBlock(Expressions.call(table.getExpression(OLAPTable.class),execFunction,javaImplementor.getRootExpression(),Expressions.constant(ctxId))));
}","@Override public Result implement(EnumerableRelImplementor implementor,Prefer pref){
  @SuppressWarnings(""String_Node_Str"") JavaImplementor javaImplementor=(JavaImplementor)implementor;
  int ctxId=this.context.id;
  if (javaImplementor.getParentContext() != null) {
    ctxId=javaImplementor.getParentContext().id;
  }
  PhysType physType=PhysTypeImpl.of(javaImplementor.getTypeFactory(),this.rowType,pref.preferArray());
  String execFunction=genExecFunc();
  return javaImplementor.result(physType,Blocks.toBlock(Expressions.call(table.getExpression(OLAPTable.class),execFunction,javaImplementor.getRootExpression(),Expressions.constant(ctxId))));
}",0.9707971586424624
63345,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  FixedValueHLLCMockup other=(FixedValueHLLCMockup)obj;
  if (value != other.value)   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  FixedValueHLLCMockup other=(FixedValueHLLCMockup)obj;
  if (!value.equals(other.value))   return false;
  return true;
}",0.976027397260274
63346,"/** 
 * Check if there is kylin.properties exist
 * @param path
 * @param env
 * @return the properties file
 */
private static File getKylinPropertiesFile(String path){
  if (path == null)   return null;
  File propFile=new File(path,KYLIN_CONF_PROPERTIES_FILE);
  if (propFile.exists()) {
    logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
  }
  logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
  return null;
}","/** 
 * Check if there is kylin.properties exist
 * @param path
 * @param env
 * @return the properties file
 */
private static File getKylinPropertiesFile(String path){
  if (path == null)   return null;
  File propFile=new File(path,KYLIN_CONF_PROPERTIES_FILE);
  if (propFile.exists()) {
    logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
    return propFile;
  }
  logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
  return null;
}",0.9793103448275862
63347,"/** 
 * Check if there is kylin.properties exist
 * @param path
 * @param env
 * @return the properties file
 */
private static File getKylinPropertiesFile(String path){
  if (path == null)   return null;
  File propFile=new File(path,KYLIN_CONF_PROPERTIES_FILE);
  if (propFile.exists()) {
    logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
  }
  logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
  return null;
}","/** 
 * Check if there is kylin.properties exist
 * @param path
 * @param env
 * @return the properties file
 */
private static File getKylinPropertiesFile(String path){
  if (path == null)   return null;
  File propFile=new File(path,KYLIN_CONF_PROPERTIES_FILE);
  if (propFile.exists()) {
    logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
    return propFile;
  }
  logger.info(KYLIN_CONF_PROPERTIES_FILE + ""String_Node_Str"" + propFile.getAbsolutePath());
  return null;
}",0.9793103448275862
63348,"@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OPTION_CUBE_NAME);
  options.addOption(OPTION_PARTITION_FILE_PATH);
  options.addOption(OPTION_HTABLE_NAME);
  parseOptions(options,args);
  Path partitionFilePath=new Path(getOptionValue(OPTION_PARTITION_FILE_PATH));
  String cubeName=getOptionValue(OPTION_CUBE_NAME).toUpperCase();
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  CubeManager cubeMgr=CubeManager.getInstance(config);
  CubeInstance cube=cubeMgr.getCube(cubeName);
  CubeDesc cubeDesc=cube.getDescriptor();
  String tableName=getOptionValue(OPTION_HTABLE_NAME).toUpperCase();
  HTableDescriptor tableDesc=new HTableDescriptor(TableName.valueOf(tableName));
  tableDesc.setValue(HTableDescriptor.SPLIT_POLICY,ConstantSizeRegionSplitPolicy.class.getName());
  Configuration conf=HBaseConfiguration.create(getConf());
  HBaseAdmin admin=new HBaseAdmin(conf);
  try {
    if (User.isHBaseSecurityEnabled(conf)) {
      tableDesc.addCoprocessor(""String_Node_Str"");
    }
    for (    HBaseColumnFamilyDesc cfDesc : cubeDesc.getHBaseMapping().getColumnFamily()) {
      HColumnDescriptor cf=new HColumnDescriptor(cfDesc.getName());
      cf.setMaxVersions(1);
      if (LZOSupportnessChecker.getSupportness()) {
        log.info(""String_Node_Str"");
        cf.setCompressionType(Algorithm.LZO);
      }
 else {
        log.info(""String_Node_Str"");
      }
      cf.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF);
      cf.setInMemory(true);
      cf.setBlocksize(4 * 1024 * 1024);
      tableDesc.addFamily(cf);
    }
    byte[][] splitKeys=getSplits(conf,partitionFilePath);
    if (admin.tableExists(tableName)) {
      throw new RuntimeException(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
    try {
      initHTableCoprocessor(tableDesc);
      log.info(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"" + tableName,ex);
      log.error(""String_Node_Str"");
    }
    admin.createTable(tableDesc,splitKeys);
    log.info(""String_Node_Str"" + tableName + ""String_Node_Str"");
    return 0;
  }
 catch (  Exception e) {
    printUsage(options);
    e.printStackTrace(System.err);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
 finally {
    admin.close();
  }
}","@Override public int run(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OPTION_CUBE_NAME);
  options.addOption(OPTION_PARTITION_FILE_PATH);
  options.addOption(OPTION_HTABLE_NAME);
  parseOptions(options,args);
  Path partitionFilePath=new Path(getOptionValue(OPTION_PARTITION_FILE_PATH));
  String cubeName=getOptionValue(OPTION_CUBE_NAME).toUpperCase();
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  CubeManager cubeMgr=CubeManager.getInstance(config);
  CubeInstance cube=cubeMgr.getCube(cubeName);
  CubeDesc cubeDesc=cube.getDescriptor();
  String tableName=getOptionValue(OPTION_HTABLE_NAME).toUpperCase();
  HTableDescriptor tableDesc=new HTableDescriptor(TableName.valueOf(tableName));
  tableDesc.setValue(HTableDescriptor.SPLIT_POLICY,ConstantSizeRegionSplitPolicy.class.getName());
  Configuration conf=HBaseConfiguration.create(getConf());
  HBaseAdmin admin=new HBaseAdmin(conf);
  try {
    if (User.isHBaseSecurityEnabled(conf)) {
      tableDesc.addCoprocessor(""String_Node_Str"");
    }
    for (    HBaseColumnFamilyDesc cfDesc : cubeDesc.getHBaseMapping().getColumnFamily()) {
      HColumnDescriptor cf=new HColumnDescriptor(cfDesc.getName());
      cf.setMaxVersions(1);
      if (LZOSupportnessChecker.getSupportness()) {
        log.info(""String_Node_Str"");
        cf.setCompressionType(Algorithm.LZO);
      }
 else {
        log.info(""String_Node_Str"");
      }
      cf.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF);
      cf.setInMemory(false);
      cf.setBlocksize(4 * 1024 * 1024);
      tableDesc.addFamily(cf);
    }
    byte[][] splitKeys=getSplits(conf,partitionFilePath);
    if (admin.tableExists(tableName)) {
      throw new RuntimeException(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
    try {
      initHTableCoprocessor(tableDesc);
      log.info(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"" + tableName,ex);
      log.error(""String_Node_Str"");
    }
    admin.createTable(tableDesc,splitKeys);
    log.info(""String_Node_Str"" + tableName + ""String_Node_Str"");
    return 0;
  }
 catch (  Exception e) {
    printUsage(options);
    e.printStackTrace(System.err);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
 finally {
    admin.close();
  }
}",0.9985065073607852
63349,"void setLastModified(long lastModified){
  this.lastModified=lastModified;
}","public void setLastModified(long lastModified){
  this.lastModified=lastModified;
}",0.9559748427672956
63350,"private static void doOpt(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case COPY_FILE_IN_META:
{
      String item=(String)opt.params[0];
      InputStream inputStream=srcStore.getResource(item);
      long ts=srcStore.getResourceTimestamp(item);
      dstStore.putResource(item,inputStream,ts);
      inputStream.close();
      logger.info(""String_Node_Str"" + item + ""String_Node_Str"");
      break;
    }
case COPY_DICT_OR_SNAPSHOT:
{
    String item=(String)opt.params[0];
    if (item.toLowerCase().endsWith(""String_Node_Str"")) {
      DictionaryManager dstDictMgr=DictionaryManager.getInstance(dstConfig);
      DictionaryManager srcDicMgr=DictionaryManager.getInstance(srcConfig);
      DictionaryInfo dictSrc=srcDicMgr.getDictionaryInfo(item);
      DictionaryInfo dictSaved=dstDictMgr.trySaveNewDict(dictSrc.getDictionaryObject(),dictSrc);
      if (dictSaved == dictSrc) {
        logger.info(""String_Node_Str"" + item + ""String_Node_Str"");
      }
 else {
        String cubeName=(String)opt.params[1];
        String cubeResPath=CubeInstance.concatResourcePath(cubeName);
        Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
        CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
        for (        CubeSegment segment : cube.getSegments()) {
          for (          Map.Entry<String,String> entry : segment.getDictionaries().entrySet()) {
            if (entry.getValue().equalsIgnoreCase(item)) {
              entry.setValue(dictSaved.getResourcePath());
            }
          }
        }
        dstStore.putResource(cubeResPath,cube,cubeSerializer);
        logger.info(""String_Node_Str"" + item + ""String_Node_Str""+ dictSaved.getResourcePath()+ ""String_Node_Str"");
      }
    }
 else     if (item.toLowerCase().endsWith(""String_Node_Str"")) {
      SnapshotManager dstSnapMgr=SnapshotManager.getInstance(dstConfig);
      SnapshotManager srcSnapMgr=SnapshotManager.getInstance(srcConfig);
      SnapshotTable snapSrc=srcSnapMgr.getSnapshotTable(item);
      SnapshotTable snapSaved=dstSnapMgr.trySaveNewSnapshot(snapSrc);
      if (snapSaved == snapSrc) {
        logger.info(""String_Node_Str"" + item + ""String_Node_Str"");
      }
 else {
        String cubeName=(String)opt.params[1];
        String cubeResPath=CubeInstance.concatResourcePath(cubeName);
        Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
        CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
        for (        CubeSegment segment : cube.getSegments()) {
          for (          Map.Entry<String,String> entry : segment.getSnapshots().entrySet()) {
            if (entry.getValue().equalsIgnoreCase(item)) {
              entry.setValue(snapSaved.getResourcePath());
            }
          }
        }
        dstStore.putResource(cubeResPath,cube,cubeSerializer);
        logger.info(""String_Node_Str"" + item + ""String_Node_Str""+ snapSaved.getResourcePath()+ ""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + item);
      logger.info(""String_Node_Str"");
    }
    break;
  }
case RENAME_FOLDER_IN_HDFS:
{
  String srcPath=(String)opt.params[0];
  String dstPath=(String)opt.params[1];
  hdfsFS.rename(new Path(srcPath),new Path(dstPath));
  logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
  break;
}
case RENAME_TABLE_IN_HBASE:
{
String oldTableName=(String)opt.params[0];
String newTableName=(String)opt.params[1];
String snapshotName=""String_Node_Str"" + oldTableName;
hbaseAdmin.disableTable(oldTableName);
hbaseAdmin.snapshot(snapshotName,oldTableName);
hbaseAdmin.cloneSnapshot(snapshotName,newTableName);
hbaseAdmin.deleteSnapshot(snapshotName);
hbaseAdmin.deleteTable(oldTableName);
logger.info(""String_Node_Str"" + oldTableName + ""String_Node_Str""+ newTableName);
break;
}
case CHANGE_HTABLE_NAME_IN_CUBE:
{
String cubeName=(String)opt.params[0];
@SuppressWarnings(""String_Node_Str"") HashMap<String,String> renamedHtables=(HashMap<String,String>)opt.params[1];
String cubeResPath=CubeInstance.concatResourcePath(cubeName);
Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
for (CubeSegment segment : cube.getSegments()) {
String htable=segment.getStorageLocationIdentifier().trim();
segment.setStorageLocationIdentifier(renamedHtables.get(htable));
}
dstStore.putResource(cubeResPath,cube,cubeSerializer);
logger.info(""String_Node_Str"" + cubeName + ""String_Node_Str"");
break;
}
case ADD_INTO_PROJECT:
{
String cubeName=(String)opt.params[0];
String projectName=(String)opt.params[1];
String projectResPath=ProjectInstance.concatResourcePath(projectName);
Serializer<ProjectInstance> projectSerializer=new JsonSerializer<ProjectInstance>(ProjectInstance.class);
ProjectInstance project=dstStore.getResource(projectResPath,ProjectInstance.class,projectSerializer);
project.removeCube(cubeName);
project.addCube(cubeName);
dstStore.putResource(projectResPath,project,projectSerializer);
logger.info(""String_Node_Str"" + projectName + ""String_Node_Str"");
break;
}
case ALTER_TABLE_COPROCESSOR:
{
String htableName=(String)opt.params[0];
DeployCoprocessorCLI.resetCoprocessor(htableName,hbaseAdmin,dstCoprocessorPath);
logger.info(""String_Node_Str"" + htableName + ""String_Node_Str""+ dstCoprocessorPath);
break;
}
}
}","private static void doOpt(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case COPY_FILE_IN_META:
{
      String item=(String)opt.params[0];
      InputStream inputStream=srcStore.getResource(item);
      long ts=srcStore.getResourceTimestamp(item);
      dstStore.putResource(item,inputStream,ts);
      inputStream.close();
      logger.info(""String_Node_Str"" + item + ""String_Node_Str"");
      break;
    }
case COPY_DICT_OR_SNAPSHOT:
{
    String item=(String)opt.params[0];
    if (item.toLowerCase().endsWith(""String_Node_Str"")) {
      DictionaryManager dstDictMgr=DictionaryManager.getInstance(dstConfig);
      DictionaryManager srcDicMgr=DictionaryManager.getInstance(srcConfig);
      DictionaryInfo dictSrc=srcDicMgr.getDictionaryInfo(item);
      long ts=dictSrc.getLastModified();
      dictSrc.setLastModified(0);
      DictionaryInfo dictSaved=dstDictMgr.trySaveNewDict(dictSrc.getDictionaryObject(),dictSrc);
      dictSrc.setLastModified(ts);
      if (dictSaved == dictSrc) {
        logger.info(""String_Node_Str"" + item + ""String_Node_Str"");
      }
 else {
        String cubeName=(String)opt.params[1];
        String cubeResPath=CubeInstance.concatResourcePath(cubeName);
        Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
        CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
        for (        CubeSegment segment : cube.getSegments()) {
          for (          Map.Entry<String,String> entry : segment.getDictionaries().entrySet()) {
            if (entry.getValue().equalsIgnoreCase(item)) {
              entry.setValue(dictSaved.getResourcePath());
            }
          }
        }
        dstStore.putResource(cubeResPath,cube,cubeSerializer);
        logger.info(""String_Node_Str"" + item + ""String_Node_Str""+ dictSaved.getResourcePath()+ ""String_Node_Str"");
      }
    }
 else     if (item.toLowerCase().endsWith(""String_Node_Str"")) {
      SnapshotManager dstSnapMgr=SnapshotManager.getInstance(dstConfig);
      SnapshotManager srcSnapMgr=SnapshotManager.getInstance(srcConfig);
      SnapshotTable snapSrc=srcSnapMgr.getSnapshotTable(item);
      long ts=snapSrc.getLastModified();
      snapSrc.setLastModified(0);
      SnapshotTable snapSaved=dstSnapMgr.trySaveNewSnapshot(snapSrc);
      snapSrc.setLastModified(ts);
      if (snapSaved == snapSrc) {
        logger.info(""String_Node_Str"" + item + ""String_Node_Str"");
      }
 else {
        String cubeName=(String)opt.params[1];
        String cubeResPath=CubeInstance.concatResourcePath(cubeName);
        Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
        CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
        for (        CubeSegment segment : cube.getSegments()) {
          for (          Map.Entry<String,String> entry : segment.getSnapshots().entrySet()) {
            if (entry.getValue().equalsIgnoreCase(item)) {
              entry.setValue(snapSaved.getResourcePath());
            }
          }
        }
        dstStore.putResource(cubeResPath,cube,cubeSerializer);
        logger.info(""String_Node_Str"" + item + ""String_Node_Str""+ snapSaved.getResourcePath()+ ""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + item);
      logger.info(""String_Node_Str"");
    }
    break;
  }
case RENAME_FOLDER_IN_HDFS:
{
  String srcPath=(String)opt.params[0];
  String dstPath=(String)opt.params[1];
  hdfsFS.rename(new Path(srcPath),new Path(dstPath));
  logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
  break;
}
case RENAME_TABLE_IN_HBASE:
{
String oldTableName=(String)opt.params[0];
String newTableName=(String)opt.params[1];
String snapshotName=""String_Node_Str"" + oldTableName;
hbaseAdmin.disableTable(oldTableName);
hbaseAdmin.snapshot(snapshotName,oldTableName);
hbaseAdmin.cloneSnapshot(snapshotName,newTableName);
hbaseAdmin.deleteSnapshot(snapshotName);
hbaseAdmin.deleteTable(oldTableName);
logger.info(""String_Node_Str"" + oldTableName + ""String_Node_Str""+ newTableName);
break;
}
case CHANGE_HTABLE_NAME_IN_CUBE:
{
String cubeName=(String)opt.params[0];
@SuppressWarnings(""String_Node_Str"") HashMap<String,String> renamedHtables=(HashMap<String,String>)opt.params[1];
String cubeResPath=CubeInstance.concatResourcePath(cubeName);
Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
for (CubeSegment segment : cube.getSegments()) {
String htable=segment.getStorageLocationIdentifier().trim();
segment.setStorageLocationIdentifier(renamedHtables.get(htable));
}
dstStore.putResource(cubeResPath,cube,cubeSerializer);
logger.info(""String_Node_Str"" + cubeName + ""String_Node_Str"");
break;
}
case ADD_INTO_PROJECT:
{
String cubeName=(String)opt.params[0];
String projectName=(String)opt.params[1];
String projectResPath=ProjectInstance.concatResourcePath(projectName);
Serializer<ProjectInstance> projectSerializer=new JsonSerializer<ProjectInstance>(ProjectInstance.class);
ProjectInstance project=dstStore.getResource(projectResPath,ProjectInstance.class,projectSerializer);
project.removeCube(cubeName);
project.addCube(cubeName);
dstStore.putResource(projectResPath,project,projectSerializer);
logger.info(""String_Node_Str"" + projectName + ""String_Node_Str"");
break;
}
case ALTER_TABLE_COPROCESSOR:
{
String htableName=(String)opt.params[0];
DeployCoprocessorCLI.resetCoprocessor(htableName,hbaseAdmin,dstCoprocessorPath);
logger.info(""String_Node_Str"" + htableName + ""String_Node_Str""+ dstCoprocessorPath);
break;
}
}
}",0.9805790960451978
63351,"private static void undo(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case COPY_FILE_IN_META:
{
      logger.info(""String_Node_Str"");
    }
case COPY_DICT_OR_SNAPSHOT:
{
    logger.info(""String_Node_Str"");
  }
case RENAME_FOLDER_IN_HDFS:
{
  String srcPath=(String)opt.params[1];
  String dstPath=(String)opt.params[0];
  if (hdfsFS.exists(new Path(srcPath)) && !hdfsFS.exists(new Path(dstPath))) {
    hdfsFS.rename(new Path(srcPath),new Path(dstPath));
    logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
  }
  break;
}
case RENAME_TABLE_IN_HBASE:
{
String oldTableName=(String)opt.params[1];
String newTableName=(String)opt.params[0];
if (hbaseAdmin.tableExists(oldTableName) && !hbaseAdmin.tableExists(newTableName)) {
  String snapshotName=""String_Node_Str"" + oldTableName;
  hbaseAdmin.disableTable(oldTableName);
  hbaseAdmin.snapshot(snapshotName,oldTableName);
  hbaseAdmin.cloneSnapshot(snapshotName,newTableName);
  hbaseAdmin.deleteSnapshot(snapshotName);
  hbaseAdmin.deleteTable(oldTableName);
  logger.info(""String_Node_Str"" + oldTableName + ""String_Node_Str""+ newTableName);
}
break;
}
case CHANGE_HTABLE_NAME_IN_CUBE:
{
logger.info(""String_Node_Str"");
break;
}
case ADD_INTO_PROJECT:
{
logger.info(""String_Node_Str"");
break;
}
case ALTER_TABLE_COPROCESSOR:
{
String htableName=(String)opt.params[0];
DeployCoprocessorCLI.resetCoprocessor(htableName,hbaseAdmin,srcCoprocessorPath);
logger.info(""String_Node_Str"" + htableName + ""String_Node_Str""+ srcCoprocessorPath);
break;
}
}
}","private static void undo(Opt opt) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"" + opt.toString());
switch (opt.type) {
case COPY_FILE_IN_META:
{
      logger.info(""String_Node_Str"");
      break;
    }
case COPY_DICT_OR_SNAPSHOT:
{
    logger.info(""String_Node_Str"");
    break;
  }
case RENAME_FOLDER_IN_HDFS:
{
  String srcPath=(String)opt.params[1];
  String dstPath=(String)opt.params[0];
  if (hdfsFS.exists(new Path(srcPath)) && !hdfsFS.exists(new Path(dstPath))) {
    hdfsFS.rename(new Path(srcPath),new Path(dstPath));
    logger.info(""String_Node_Str"" + srcPath + ""String_Node_Str""+ dstPath);
  }
  break;
}
case RENAME_TABLE_IN_HBASE:
{
String oldTableName=(String)opt.params[1];
String newTableName=(String)opt.params[0];
if (hbaseAdmin.tableExists(oldTableName) && !hbaseAdmin.tableExists(newTableName)) {
  String snapshotName=""String_Node_Str"" + oldTableName;
  hbaseAdmin.disableTable(oldTableName);
  hbaseAdmin.snapshot(snapshotName,oldTableName);
  hbaseAdmin.cloneSnapshot(snapshotName,newTableName);
  hbaseAdmin.deleteSnapshot(snapshotName);
  hbaseAdmin.deleteTable(oldTableName);
  logger.info(""String_Node_Str"" + oldTableName + ""String_Node_Str""+ newTableName);
}
break;
}
case CHANGE_HTABLE_NAME_IN_CUBE:
{
logger.info(""String_Node_Str"");
break;
}
case ADD_INTO_PROJECT:
{
logger.info(""String_Node_Str"");
break;
}
case ALTER_TABLE_COPROCESSOR:
{
String htableName=(String)opt.params[0];
DeployCoprocessorCLI.resetCoprocessor(htableName,hbaseAdmin,srcCoprocessorPath);
logger.info(""String_Node_Str"" + htableName + ""String_Node_Str""+ srcCoprocessorPath);
break;
}
}
}",0.9925373134328358
63352,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN) public String[] reloadHiveTable(String tables){
  String tableMetaDir=HiveSourceTableMgmt.reloadHiveTable(tables);
  getMetadataManager().reload();
  File metaDir=new File(tableMetaDir);
  if (metaDir.exists()) {
    File tableDir=new File(metaDir,HiveSourceTableMgmt.TABLE_FOLDER_NAME);
    if (tableDir.exists()) {
      return tableDir.list();
    }
  }
  return new String[0];
}","@PreAuthorize(Constant.ACCESS_HAS_ROLE_MODELER) public String[] reloadHiveTable(String tables){
  String tableMetaDir=HiveSourceTableMgmt.reloadHiveTable(tables);
  getMetadataManager().reload();
  File metaDir=new File(tableMetaDir);
  if (metaDir.exists()) {
    File tableDir=new File(metaDir,HiveSourceTableMgmt.TABLE_FOLDER_NAME);
    if (tableDir.exists()) {
      return tableDir.list();
    }
  }
  return new String[0];
}",0.986013986013986
63353,"@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Get get=new Get(Bytes.toBytes(username));
    get.addFamily(Bytes.toBytes(USER_AUTHORITY_FAMILY));
    Result result=htable.get(get);
    byte[] gaBytes=result.getValue(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN));
    Collection<? extends GrantedAuthority> authorities=Arrays.asList(ugaSerializer.deserialize(gaBytes));
    return new User(username,""String_Node_Str"",authorities);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return null;
}","@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Get get=new Get(Bytes.toBytes(username));
    get.addFamily(Bytes.toBytes(USER_AUTHORITY_FAMILY));
    Result result=htable.get(get);
    Collection<? extends GrantedAuthority> authorities=null;
    if (null != result && !result.isEmpty()) {
      byte[] gaBytes=result.getValue(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN));
      authorities=Arrays.asList(ugaSerializer.deserialize(gaBytes));
    }
 else {
      throw new UsernameNotFoundException(""String_Node_Str"" + username + ""String_Node_Str"");
    }
    return new User(username,""String_Node_Str"",authorities);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
    throw new RuntimeException(e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
}",0.8204833141542003
63354,"static CubeInstance findBestMatchCube(ProjectManager projectManager,OLAPContext olapContext) throws CubeNotFoundException {
  String factTableName=olapContext.firstTableScan.getCubeTable();
  String projectName=olapContext.olapSchema.getProjectName();
  Collection<TblColRef> dimensionColumns=getDimensionColumns(olapContext);
  Collection<FunctionDesc> functions=olapContext.aggregations;
  Collection<TblColRef> metricsColumns=olapContext.metricsColumns;
  Collection<JoinDesc> joins=olapContext.joins;
  Map<String,RelDataType> rewriteFields=olapContext.rewriteFields;
  List<CubeInstance> candidates=projectManager.getCubesByTable(projectName,factTableName);
  StringBuilder buf=new StringBuilder();
  for (  CubeInstance cube : candidates) {
    buf.append(cube.getName());
    buf.append(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"" + factTableName + ""String_Node_Str""+ projectName+ ""String_Node_Str""+ buf.toString());
  Iterator<CubeInstance> it=candidates.iterator();
  List<CubeInstance> backups=new ArrayList<CubeInstance>();
  while (it.hasNext()) {
    CubeInstance cube=it.next();
    boolean isOnline=cube.isReady();
    boolean matchDimensions=isMatchedWithDimensions(dimensionColumns,cube);
    boolean matchAggregation=isMatchedWithAggregations(functions,cube);
    boolean matchJoin=isMatchedWithJoins(joins,cube);
    if (isOnline && matchDimensions && !matchAggregation&& matchJoin) {
      if (isWeaklyMatchedWithAggregations(functions,metricsColumns,cube)) {
        logger.info(""String_Node_Str"" + cube);
        backups.add(cube);
      }
    }
    if (!isOnline || !matchDimensions || !matchAggregation|| !matchJoin) {
      logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ ""String_Node_Str""+ isOnline+ ""String_Node_Str""+ matchDimensions+ ""String_Node_Str""+ matchAggregation+ ""String_Node_Str""+ matchJoin);
      it.remove();
    }
  }
  if (!candidates.isEmpty()) {
    return getCheapestCube(candidates);
  }
 else   if (!backups.isEmpty()) {
    CubeInstance cube=getCheapestCube(backups);
    adjustOLAPContext(dimensionColumns,functions,metricsColumns,cube,rewriteFields,olapContext);
    logger.info(""String_Node_Str"" + cube.getName());
    return cube;
  }
  return null;
}","static CubeInstance findBestMatchCube(ProjectManager projectManager,OLAPContext olapContext) throws CubeNotFoundException {
  String factTableName=olapContext.firstTableScan.getCubeTable();
  String projectName=olapContext.olapSchema.getProjectName();
  Collection<TblColRef> dimensionColumns=getDimensionColumns(olapContext);
  Collection<FunctionDesc> functions=olapContext.aggregations;
  Collection<TblColRef> metricsColumns=olapContext.metricsColumns;
  Collection<JoinDesc> joins=olapContext.joins;
  Map<String,RelDataType> rewriteFields=olapContext.rewriteFields;
  List<CubeInstance> candidates=projectManager.getCubesByTable(projectName,factTableName);
  logger.info(""String_Node_Str"" + factTableName + ""String_Node_Str""+ projectName+ ""String_Node_Str""+ StringUtils.join(candidates,""String_Node_Str""));
  Iterator<CubeInstance> it=candidates.iterator();
  List<CubeInstance> backups=new ArrayList<CubeInstance>();
  while (it.hasNext()) {
    CubeInstance cube=it.next();
    boolean isOnline=cube.isReady();
    boolean matchDimensions=isMatchedWithDimensions(dimensionColumns,cube);
    boolean matchAggregation=isMatchedWithAggregations(functions,cube);
    boolean matchJoin=isMatchedWithJoins(joins,cube);
    if (isOnline && matchDimensions && !matchAggregation&& matchJoin) {
      if (isWeaklyMatchedWithAggregations(functions,metricsColumns,cube)) {
        logger.info(""String_Node_Str"" + cube);
        backups.add(cube);
      }
    }
    if (!isOnline || !matchDimensions || !matchAggregation|| !matchJoin) {
      logger.info(""String_Node_Str"" + cube.getName() + ""String_Node_Str""+ ""String_Node_Str""+ isOnline+ ""String_Node_Str""+ matchDimensions+ ""String_Node_Str""+ matchAggregation+ ""String_Node_Str""+ matchJoin);
      it.remove();
    }
  }
  if (!candidates.isEmpty()) {
    return getCheapestCube(candidates);
  }
 else   if (!backups.isEmpty()) {
    CubeInstance cube=getCheapestCube(backups);
    adjustOLAPContext(dimensionColumns,functions,metricsColumns,cube,rewriteFields,olapContext);
    logger.info(""String_Node_Str"" + cube.getName());
    return cube;
  }
  return null;
}",0.9105129974695192
63355,"@Override public LongWritable getState(){
  if (hllAgg != null) {
    state.set(hllAgg.getState().getCountEstimate());
  }
  return state;
}","@Override public LongWritable getState(){
  if (hllAgg == null) {
    return ZERO;
  }
 else {
    state.set(hllAgg.getState().getCountEstimate());
    return state;
  }
}",0.8810289389067524
63356,"@Override public void aggregate(LongWritable value){
  if (state.get() == 0)   state.set(value.get());
 else   throw new IllegalStateException();
}","@Override public void aggregate(LongWritable value){
}",0.5373134328358209
63357,"@Override public LongWritable getState(){
  if (hllAgg == null) {
    return ZERO;
  }
 else {
    state.set(hllAgg.getState().getCountEstimate());
    return state;
  }
}","@Override public LongWritable getState(){
  if (hllAgg != null) {
    state.set(hllAgg.getState().getCountEstimate());
  }
  return state;
}",0.8810289389067524
63358,"@Override public void aggregate(LongWritable value){
}","@Override public void aggregate(LongWritable value){
  if (state.get() == 0)   state.set(value.get());
 else   throw new IllegalStateException();
}",0.5373134328358209
63359,"@Override public void deleteAcl(ObjectIdentity objectIdentity,boolean deleteChildren) throws ChildrenExistException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(objectIdentity.getIdentifier())));
    List<ObjectIdentity> children=findChildren(objectIdentity);
    if (!deleteChildren && children.size() > 0) {
      throw new ChildrenExistException(""String_Node_Str"" + objectIdentity);
    }
    for (    ObjectIdentity oid : children) {
      deleteAcl(oid,deleteChildren);
    }
    htable.delete(delete);
    htable.flushCommits();
    aclCache.remove(objectIdentity);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
}","@Override public void deleteAcl(ObjectIdentity objectIdentity,boolean deleteChildren) throws ChildrenExistException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(objectIdentity.getIdentifier())));
    List<ObjectIdentity> children=findChildren(objectIdentity);
    if (!deleteChildren && children.size() > 0) {
      throw new ChildrenExistException(""String_Node_Str"" + objectIdentity);
    }
    for (    ObjectIdentity oid : children) {
      deleteAcl(oid,deleteChildren);
    }
    htable.delete(delete);
    htable.flushCommits();
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
}",0.9769470404984424
63360,"private void genAces(List<Sid> sids,Result result,AclImpl acl){
  List<AceInfo> aceInfos=new ArrayList<AceInfo>();
  if (null != sids) {
    for (    Sid sid : sids) {
      String sidName=null;
      if (sid instanceof PrincipalSid) {
        sidName=((PrincipalSid)sid).getPrincipal();
      }
 else       if (sid instanceof GrantedAuthoritySid) {
        sidName=((GrantedAuthoritySid)sid).getGrantedAuthority();
      }
      aceInfos.add(aceSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_ACES_FAMILY),Bytes.toBytes(sidName))));
    }
  }
 else {
    NavigableMap<byte[],byte[]> familyMap=result.getFamilyMap(Bytes.toBytes(ACL_ACES_FAMILY));
    for (    byte[] qualifier : familyMap.keySet()) {
      AceInfo aceInfo=aceSerializer.deserialize(familyMap.get(qualifier));
      if (null != aceInfo) {
        aceInfos.add(aceInfo);
      }
    }
  }
  List<AccessControlEntry> newAces=new ArrayList<AccessControlEntry>();
  for (int i=0; i < aceInfos.size(); i++) {
    AceInfo aceInfo=aceInfos.get(i);
    if (null != aceInfo) {
      Sid sid=aceInfo.getSidInfo().isPrincipal() ? new PrincipalSid(aceInfo.getSidInfo().getSid()) : new GrantedAuthoritySid(aceInfo.getSidInfo().getSid());
      AccessControlEntry ace=new AccessControlEntryImpl(Long.valueOf(i),acl,sid,aclPermissionFactory.buildFromMask(aceInfo.getPermissionMask()),true,false,false);
      newAces.add(ace);
    }
  }
  this.setAces(acl,newAces);
}","private void genAces(List<Sid> sids,Result result,AclImpl acl){
  List<AceInfo> aceInfos=new ArrayList<AceInfo>();
  if (null != sids) {
    for (    Sid sid : sids) {
      String sidName=null;
      if (sid instanceof PrincipalSid) {
        sidName=((PrincipalSid)sid).getPrincipal();
      }
 else       if (sid instanceof GrantedAuthoritySid) {
        sidName=((GrantedAuthoritySid)sid).getGrantedAuthority();
      }
      AceInfo aceInfo=aceSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_ACES_FAMILY),Bytes.toBytes(sidName)));
      if (null != aceInfo) {
        aceInfos.add(aceInfo);
      }
    }
  }
 else {
    NavigableMap<byte[],byte[]> familyMap=result.getFamilyMap(Bytes.toBytes(ACL_ACES_FAMILY));
    for (    byte[] qualifier : familyMap.keySet()) {
      AceInfo aceInfo=aceSerializer.deserialize(familyMap.get(qualifier));
      if (null != aceInfo) {
        aceInfos.add(aceInfo);
      }
    }
  }
  List<AccessControlEntry> newAces=new ArrayList<AccessControlEntry>();
  for (int i=0; i < aceInfos.size(); i++) {
    AceInfo aceInfo=aceInfos.get(i);
    if (null != aceInfo) {
      Sid sid=aceInfo.getSidInfo().isPrincipal() ? new PrincipalSid(aceInfo.getSidInfo().getSid()) : new GrantedAuthoritySid(aceInfo.getSidInfo().getSid());
      AccessControlEntry ace=new AccessControlEntryImpl(Long.valueOf(i),acl,sid,aclPermissionFactory.buildFromMask(aceInfo.getPermissionMask()),true,false,false);
      newAces.add(ace);
    }
  }
  this.setAces(acl,newAces);
}",0.9658002735978112
63361,"@Override public Map<ObjectIdentity,Acl> readAclsById(List<ObjectIdentity> oids,List<Sid> sids) throws NotFoundException {
  Map<ObjectIdentity,Acl> aclMaps=new HashMap<ObjectIdentity,Acl>();
  HTableInterface htable=null;
  Result result=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    for (    ObjectIdentity oid : oids) {
      if (aclCache.containsKey(oid)) {
        aclMaps.put(oid,aclCache.get(oid));
      }
 else {
        result=htable.get(new Get(Bytes.toBytes(String.valueOf(oid.getIdentifier()))));
        if (null != result && !result.isEmpty()) {
          SidInfo owner=sidSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_OWNER_COLUMN)));
          Sid ownerSid=(null == owner) ? null : (owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid()));
          boolean entriesInheriting=Bytes.toBoolean(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_ENTRY_INHERIT_COLUMN)));
          Acl parentAcl=null;
          DomainObjectInfo parentInfo=domainObjSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN)));
          if (null != parentInfo) {
            ObjectIdentity parentObj=new ObjectIdentityImpl(parentInfo.getType(),parentInfo.getId());
            parentAcl=readAclById(parentObj,null);
          }
          AclImpl acl=new AclImpl(oid,oid.getIdentifier(),aclAuthorizationStrategy,permissionGrantingStrategy,parentAcl,null,entriesInheriting,ownerSid);
          genAces(sids,result,acl);
          aclMaps.put(oid,acl);
          aclCache.put(oid,acl);
        }
 else {
          throw new NotFoundException(""String_Node_Str"" + oid + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return aclMaps;
}","@Override public Map<ObjectIdentity,Acl> readAclsById(List<ObjectIdentity> oids,List<Sid> sids) throws NotFoundException {
  Map<ObjectIdentity,Acl> aclMaps=new HashMap<ObjectIdentity,Acl>();
  HTableInterface htable=null;
  Result result=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    for (    ObjectIdentity oid : oids) {
      result=htable.get(new Get(Bytes.toBytes(String.valueOf(oid.getIdentifier()))));
      if (null != result && !result.isEmpty()) {
        SidInfo owner=sidSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_OWNER_COLUMN)));
        Sid ownerSid=(null == owner) ? null : (owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid()));
        boolean entriesInheriting=Bytes.toBoolean(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_ENTRY_INHERIT_COLUMN)));
        Acl parentAcl=null;
        DomainObjectInfo parentInfo=domainObjSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN)));
        if (null != parentInfo) {
          ObjectIdentity parentObj=new ObjectIdentityImpl(parentInfo.getType(),parentInfo.getId());
          parentAcl=readAclById(parentObj,null);
        }
        AclImpl acl=new AclImpl(oid,oid.getIdentifier(),aclAuthorizationStrategy,permissionGrantingStrategy,parentAcl,null,entriesInheriting,ownerSid);
        genAces(sids,result,acl);
        aclMaps.put(oid,acl);
      }
 else {
        throw new NotFoundException(""String_Node_Str"" + oid + ""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return aclMaps;
}",0.9399574920297556
63362,"@Override public MutableAcl updateAcl(MutableAcl acl) throws NotFoundException {
  try {
    readAclById(acl.getObjectIdentity());
  }
 catch (  NotFoundException e) {
    throw e;
  }
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    delete.deleteFamily(Bytes.toBytes(ACL_ACES_FAMILY));
    htable.delete(delete);
    Put put=new Put(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    if (null != acl.getParentAcl()) {
      put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN),domainObjSerializer.serialize(new DomainObjectInfo(acl.getParentAcl().getObjectIdentity())));
    }
    for (    AccessControlEntry ace : acl.getEntries()) {
      AceInfo aceInfo=new AceInfo(ace);
      put.add(Bytes.toBytes(ACL_ACES_FAMILY),Bytes.toBytes(aceInfo.getSidInfo().getSid()),aceSerializer.serialize(aceInfo));
    }
    if (!put.isEmpty()) {
      htable.put(put);
      htable.flushCommits();
    }
    aclCache.remove(acl.getObjectIdentity());
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return (MutableAcl)readAclById(acl.getObjectIdentity());
}","@Override public MutableAcl updateAcl(MutableAcl acl) throws NotFoundException {
  try {
    readAclById(acl.getObjectIdentity());
  }
 catch (  NotFoundException e) {
    throw e;
  }
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    delete.deleteFamily(Bytes.toBytes(ACL_ACES_FAMILY));
    htable.delete(delete);
    Put put=new Put(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    if (null != acl.getParentAcl()) {
      put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN),domainObjSerializer.serialize(new DomainObjectInfo(acl.getParentAcl().getObjectIdentity())));
    }
    for (    AccessControlEntry ace : acl.getEntries()) {
      AceInfo aceInfo=new AceInfo(ace);
      put.add(Bytes.toBytes(ACL_ACES_FAMILY),Bytes.toBytes(aceInfo.getSidInfo().getSid()),aceSerializer.serialize(aceInfo));
    }
    if (!put.isEmpty()) {
      htable.put(put);
      htable.flushCommits();
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return (MutableAcl)readAclById(acl.getObjectIdentity());
}",0.9825889477668432
63363,"@Override public void deleteAcl(ObjectIdentity objectIdentity,boolean deleteChildren) throws ChildrenExistException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(objectIdentity.getIdentifier())));
    List<ObjectIdentity> children=findChildren(objectIdentity);
    if (!deleteChildren && children.size() > 0) {
      throw new ChildrenExistException(""String_Node_Str"" + objectIdentity);
    }
    for (    ObjectIdentity oid : children) {
      deleteAcl(oid,deleteChildren);
    }
    htable.delete(delete);
    htable.flushCommits();
    aclCache.remove(objectIdentity);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
}","@Override public void deleteAcl(ObjectIdentity objectIdentity,boolean deleteChildren) throws ChildrenExistException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(objectIdentity.getIdentifier())));
    List<ObjectIdentity> children=findChildren(objectIdentity);
    if (!deleteChildren && children.size() > 0) {
      throw new ChildrenExistException(""String_Node_Str"" + objectIdentity);
    }
    for (    ObjectIdentity oid : children) {
      deleteAcl(oid,deleteChildren);
    }
    htable.delete(delete);
    htable.flushCommits();
    aclCache.remove(objectIdentity);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
}",0.995739500912964
63364,"@Override public MutableAcl createAcl(ObjectIdentity objectIdentity) throws AlreadyExistsException {
  Acl acl=null;
  try {
    acl=readAclById(objectIdentity);
  }
 catch (  NotFoundException e) {
  }
  if (null != acl) {
    throw new AlreadyExistsException(""String_Node_Str"" + objectIdentity + ""String_Node_Str"");
  }
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  PrincipalSid sid=new PrincipalSid(auth);
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Put put=new Put(Bytes.toBytes(String.valueOf(objectIdentity.getIdentifier())));
    put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_TYPE_COLUMN),Bytes.toBytes(objectIdentity.getType()));
    put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_OWNER_COLUMN),sidSerializer.serialize(new SidInfo(sid)));
    put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_ENTRY_INHERIT_COLUMN),Bytes.toBytes(true));
    htable.put(put);
    htable.flushCommits();
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return (MutableAcl)readAclById(objectIdentity);
}","@Override public MutableAcl createAcl(ObjectIdentity objectIdentity) throws AlreadyExistsException {
  Acl acl=null;
  try {
    acl=readAclById(objectIdentity);
  }
 catch (  NotFoundException e) {
  }
  if (null != acl) {
    throw new AlreadyExistsException(""String_Node_Str"" + objectIdentity + ""String_Node_Str"");
  }
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  PrincipalSid sid=new PrincipalSid(auth);
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Put put=new Put(Bytes.toBytes(String.valueOf(objectIdentity.getIdentifier())));
    put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_TYPE_COLUMN),Bytes.toBytes(objectIdentity.getType()));
    put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_OWNER_COLUMN),sidSerializer.serialize(new SidInfo(sid)));
    put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_ENTRY_INHERIT_COLUMN),Bytes.toBytes(true));
    htable.put(put);
    htable.flushCommits();
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return (MutableAcl)readAclById(objectIdentity);
}",0.9971671388101984
63365,"@Override public Map<ObjectIdentity,Acl> readAclsById(List<ObjectIdentity> oids,List<Sid> sids) throws NotFoundException {
  Map<ObjectIdentity,Acl> aclMaps=new HashMap<ObjectIdentity,Acl>();
  HTableInterface htable=null;
  Result result=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    for (    ObjectIdentity oid : oids) {
      if (false && aclCache.containsKey(oid)) {
        aclMaps.put(oid,aclCache.get(oid));
      }
 else {
        result=htable.get(new Get(Bytes.toBytes(String.valueOf(oid.getIdentifier()))));
        if (null != result && !result.isEmpty()) {
          SidInfo owner=sidSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_OWNER_COLUMN)));
          Sid ownerSid=(null == owner) ? null : (owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid()));
          boolean entriesInheriting=Bytes.toBoolean(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_ENTRY_INHERIT_COLUMN)));
          Acl parentAcl=null;
          DomainObjectInfo parentInfo=domainObjSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN)));
          if (null != parentInfo) {
            ObjectIdentity parentObj=new ObjectIdentityImpl(parentInfo.getType(),parentInfo.getId());
            parentAcl=readAclById(parentObj,null);
          }
          AclImpl acl=new AclImpl(oid,oid.getIdentifier(),aclAuthorizationStrategy,permissionGrantingStrategy,parentAcl,null,entriesInheriting,ownerSid);
          genAces(sids,result,acl);
          aclMaps.put(oid,acl);
          aclCache.put(oid,acl);
        }
 else {
          throw new NotFoundException(""String_Node_Str"" + oid + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return aclMaps;
}","@Override public Map<ObjectIdentity,Acl> readAclsById(List<ObjectIdentity> oids,List<Sid> sids) throws NotFoundException {
  Map<ObjectIdentity,Acl> aclMaps=new HashMap<ObjectIdentity,Acl>();
  HTableInterface htable=null;
  Result result=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    for (    ObjectIdentity oid : oids) {
      if (aclCache.containsKey(oid)) {
        aclMaps.put(oid,aclCache.get(oid));
      }
 else {
        result=htable.get(new Get(Bytes.toBytes(String.valueOf(oid.getIdentifier()))));
        if (null != result && !result.isEmpty()) {
          SidInfo owner=sidSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_OWNER_COLUMN)));
          Sid ownerSid=(null == owner) ? null : (owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid()));
          boolean entriesInheriting=Bytes.toBoolean(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_ENTRY_INHERIT_COLUMN)));
          Acl parentAcl=null;
          DomainObjectInfo parentInfo=domainObjSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN)));
          if (null != parentInfo) {
            ObjectIdentity parentObj=new ObjectIdentityImpl(parentInfo.getType(),parentInfo.getId());
            parentAcl=readAclById(parentObj,null);
          }
          AclImpl acl=new AclImpl(oid,oid.getIdentifier(),aclAuthorizationStrategy,permissionGrantingStrategy,parentAcl,null,entriesInheriting,ownerSid);
          genAces(sids,result,acl);
          aclMaps.put(oid,acl);
          aclCache.put(oid,acl);
        }
 else {
          throw new NotFoundException(""String_Node_Str"" + oid + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return aclMaps;
}",0.9959473150962512
63366,"@Override public MutableAcl updateAcl(MutableAcl acl) throws NotFoundException {
  try {
    readAclById(acl.getObjectIdentity());
  }
 catch (  NotFoundException e) {
    throw e;
  }
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    delete.deleteFamily(Bytes.toBytes(ACL_ACES_FAMILY));
    htable.delete(delete);
    Put put=new Put(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    if (null != acl.getParentAcl()) {
      put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN),domainObjSerializer.serialize(new DomainObjectInfo(acl.getParentAcl().getObjectIdentity())));
    }
    for (    AccessControlEntry ace : acl.getEntries()) {
      AceInfo aceInfo=new AceInfo(ace);
      put.add(Bytes.toBytes(ACL_ACES_FAMILY),Bytes.toBytes(aceInfo.getSidInfo().getSid()),aceSerializer.serialize(aceInfo));
    }
    if (!put.isEmpty()) {
      htable.put(put);
      htable.flushCommits();
    }
    aclCache.remove(acl.getObjectIdentity());
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return (MutableAcl)readAclById(acl.getObjectIdentity());
}","@Override public MutableAcl updateAcl(MutableAcl acl) throws NotFoundException {
  try {
    readAclById(acl.getObjectIdentity());
  }
 catch (  NotFoundException e) {
    throw e;
  }
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Delete delete=new Delete(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    delete.deleteFamily(Bytes.toBytes(ACL_ACES_FAMILY));
    htable.delete(delete);
    Put put=new Put(Bytes.toBytes(String.valueOf(acl.getObjectIdentity().getIdentifier())));
    if (null != acl.getParentAcl()) {
      put.add(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN),domainObjSerializer.serialize(new DomainObjectInfo(acl.getParentAcl().getObjectIdentity())));
    }
    for (    AccessControlEntry ace : acl.getEntries()) {
      AceInfo aceInfo=new AceInfo(ace);
      put.add(Bytes.toBytes(ACL_ACES_FAMILY),Bytes.toBytes(aceInfo.getSidInfo().getSid()),aceSerializer.serialize(aceInfo));
    }
    if (!put.isEmpty()) {
      htable.put(put);
      htable.flushCommits();
    }
    aclCache.remove(acl.getObjectIdentity());
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return (MutableAcl)readAclById(acl.getObjectIdentity());
}",0.9973968017850502
63367,"@Override public List<ObjectIdentity> findChildren(ObjectIdentity parentIdentity){
  List<ObjectIdentity> oids=new ArrayList<ObjectIdentity>();
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Scan scan=new Scan();
    SingleColumnValueFilter parentFilter=new SingleColumnValueFilter(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN),CompareOp.EQUAL,domainObjSerializer.serialize(new DomainObjectInfo(parentIdentity)));
    parentFilter.setFilterIfMissing(true);
    scan.setFilter(parentFilter);
    ResultScanner scanner=htable.getScanner(scan);
    for (Result result=scanner.next(); result != null; result=scanner.next()) {
      String id=Bytes.toString(result.getRow());
      String type=Bytes.toString(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_TYPE_COLUMN)));
      oids.add(new ObjectIdentityImpl(type,id));
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return oids;
}","@Override public List<ObjectIdentity> findChildren(ObjectIdentity parentIdentity){
  List<ObjectIdentity> oids=new ArrayList<ObjectIdentity>();
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(aclTableName);
    Scan scan=new Scan();
    SingleColumnValueFilter parentFilter=new SingleColumnValueFilter(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN),CompareOp.EQUAL,domainObjSerializer.serialize(new DomainObjectInfo(parentIdentity)));
    parentFilter.setFilterIfMissing(true);
    scan.setFilter(parentFilter);
    ResultScanner scanner=htable.getScanner(scan);
    for (Result result=scanner.next(); result != null; result=scanner.next()) {
      String id=Bytes.toString(result.getRow());
      String type=Bytes.toString(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_TYPE_COLUMN)));
      oids.add(new ObjectIdentityImpl(type,id));
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return oids;
}",0.9967845659163987
63368,"public AclService(){
  String metadataUrl=KylinConfig.getInstanceFromEnv().getMetadataUrl();
  int cut=metadataUrl.indexOf('@');
  tableNameBase=cut < 0 ? DEFAULT_TABLE_PREFIX : metadataUrl.substring(0,cut);
  hbaseUrl=cut < 0 ? metadataUrl : metadataUrl.substring(cut + 1);
  userTableName=tableNameBase + ACL_TABLE_NAME;
  fieldAces.setAccessible(true);
  fieldAcl.setAccessible(true);
}","public AclService(){
  String metadataUrl=KylinConfig.getInstanceFromEnv().getMetadataUrl();
  int cut=metadataUrl.indexOf('@');
  tableNameBase=cut < 0 ? DEFAULT_TABLE_PREFIX : metadataUrl.substring(0,cut);
  hbaseUrl=cut < 0 ? metadataUrl : metadataUrl.substring(cut + 1);
  aclTableName=tableNameBase + ACL_TABLE_NAME;
  fieldAces.setAccessible(true);
  fieldAcl.setAccessible(true);
  try {
    HadoopUtil.createHTableIfNeeded(hbaseUrl,aclTableName,ACL_INFO_FAMILY,ACL_ACES_FAMILY);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
}",0.8045977011494253
63369,"@Override public List<String> getUserAuthorities(){
  Scan s=new Scan();
  s.addColumn(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN));
  List<String> authorities=new ArrayList<String>();
  HTableInterface htable=null;
  ResultScanner scanner=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    scanner=htable.getScanner(s);
    for (Result result=scanner.next(); result != null; result=scanner.next()) {
      Collection<? extends GrantedAuthority> authCollection=deserialize(result.getValue(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN)));
      for (      GrantedAuthority auth : authCollection) {
        if (!authorities.contains(auth.getAuthority())) {
          authorities.add(auth.getAuthority());
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(scanner);
    IOUtils.closeQuietly(htable);
  }
  return authorities;
}","@Override public List<String> getUserAuthorities(){
  Scan s=new Scan();
  s.addColumn(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN));
  List<String> authorities=new ArrayList<String>();
  HTableInterface htable=null;
  ResultScanner scanner=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    scanner=htable.getScanner(s);
    for (Result result=scanner.next(); result != null; result=scanner.next()) {
      byte[] uaBytes=result.getValue(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN));
      Collection<? extends GrantedAuthority> authCollection=Arrays.asList(ugaSerializer.deserialize(uaBytes));
      for (      GrantedAuthority auth : authCollection) {
        if (!authorities.contains(auth.getAuthority())) {
          authorities.add(auth.getAuthority());
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(scanner);
    IOUtils.closeQuietly(htable);
  }
  return authorities;
}",0.9086515224746254
63370,"private byte[] serialize(Collection<? extends GrantedAuthority> collection){
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  DataOutputStream dout=new DataOutputStream(buf);
  try {
    ObjectMapper mapper=new ObjectMapper();
    mapper.writeValue(dout,collection);
    dout.close();
    buf.close();
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
  return buf.toByteArray();
}","private byte[] serialize(Collection<? extends GrantedAuthority> auths){
  if (null == auths) {
    return null;
  }
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  DataOutputStream dout=new DataOutputStream(buf);
  try {
    ObjectMapper mapper=new ObjectMapper();
    mapper.writeValue(dout,auths);
    dout.close();
    buf.close();
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
  return buf.toByteArray();
}",0.9155251141552512
63371,"@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Get get=new Get(Bytes.toBytes(username));
    get.addFamily(Bytes.toBytes(USER_AUTHORITY_FAMILY));
    Result result=htable.get(get);
    Collection<? extends GrantedAuthority> authorities=deserialize(result.getValue(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN)));
    return new User(username,""String_Node_Str"",authorities);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return null;
}","@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  HTableInterface htable=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    Get get=new Get(Bytes.toBytes(username));
    get.addFamily(Bytes.toBytes(USER_AUTHORITY_FAMILY));
    Result result=htable.get(get);
    byte[] gaBytes=result.getValue(Bytes.toBytes(USER_AUTHORITY_FAMILY),Bytes.toBytes(USER_AUTHORITY_COLUMN));
    Collection<? extends GrantedAuthority> authorities=Arrays.asList(ugaSerializer.deserialize(gaBytes));
    return new User(username,""String_Node_Str"",authorities);
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return null;
}",0.88
63372,"@Test public void testBasics() throws JsonProcessingException, SchedulerException {
  Sid adminSid=accessService.getSid(""String_Node_Str"",true);
  Assert.assertNotNull(adminSid);
  Assert.assertNotNull(AclPermissionFactory.getPermissions());
  AclEntity ae=new MockAclEntity(""String_Node_Str"");
  accessService.clean(ae,true);
  Acl acl=accessService.getAcl(ae);
  Assert.assertNull(acl);
  acl=accessService.init(ae,AclPermission.ADMINISTRATION);
  Assert.assertTrue(((PrincipalSid)acl.getOwner()).getPrincipal().equals(""String_Node_Str""));
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 1);
  AccessEntryResponse aer=accessService.generateAceResponses(acl).get(0);
  Assert.assertTrue(aer.getId() != null);
  Assert.assertTrue(aer.getPermission() == AclPermission.ADMINISTRATION);
  Assert.assertTrue(((PrincipalSid)aer.getSid()).getPrincipal().equals(""String_Node_Str""));
  Sid modeler=accessService.getSid(""String_Node_Str"",true);
  acl=accessService.grant(ae,AclPermission.ADMINISTRATION,modeler);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 2);
  Long modelerEntryId=null;
  for (  AccessControlEntry ace : acl.getEntries()) {
    PrincipalSid sid=(PrincipalSid)ace.getSid();
    if (sid.getPrincipal().equals(""String_Node_Str"")) {
      modelerEntryId=(Long)ace.getId();
      Assert.assertTrue(ace.getPermission() == AclPermission.ADMINISTRATION);
    }
  }
  acl=accessService.update(ae,modelerEntryId,AclPermission.READ);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 2);
  for (  AccessControlEntry ace : acl.getEntries()) {
    PrincipalSid sid=(PrincipalSid)ace.getSid();
    if (sid.getPrincipal().equals(""String_Node_Str"")) {
      modelerEntryId=(Long)ace.getId();
      Assert.assertTrue(ace.getPermission() == AclPermission.READ);
    }
  }
  AclEntity attachedEntity=new MockAclEntity(""String_Node_Str"");
  accessService.clean(attachedEntity,true);
  Acl attachedEntityAcl=accessService.getAcl(attachedEntity);
  Assert.assertNull(attachedEntityAcl);
  attachedEntityAcl=accessService.init(attachedEntity,AclPermission.ADMINISTRATION);
  accessService.inherit(attachedEntity,ae);
  attachedEntityAcl=accessService.getAcl(attachedEntity);
  Assert.assertTrue(attachedEntityAcl.getParentAcl() != null);
  Assert.assertTrue(attachedEntityAcl.getParentAcl().getObjectIdentity().getIdentifier().equals(""String_Node_Str""));
  Assert.assertTrue(attachedEntityAcl.getEntries().size() == 1);
  acl=accessService.revoke(ae,modelerEntryId);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 1);
  accessService.clean(ae,true);
  acl=accessService.getAcl(ae);
  Assert.assertNull(acl);
  attachedEntityAcl=accessService.getAcl(attachedEntity);
  Assert.assertNull(attachedEntityAcl);
}","@Test public void testBasics() throws JsonProcessingException, SchedulerException {
  Sid adminSid=accessService.getSid(""String_Node_Str"",true);
  Assert.assertNotNull(adminSid);
  Assert.assertNotNull(AclPermissionFactory.getPermissions());
  AclEntity ae=new MockAclEntity(""String_Node_Str"");
  accessService.clean(ae,true);
  AclEntity attachedEntity=new MockAclEntity(""String_Node_Str"");
  accessService.clean(attachedEntity,true);
  Acl acl=accessService.getAcl(ae);
  Assert.assertNull(acl);
  acl=accessService.init(ae,AclPermission.ADMINISTRATION);
  Assert.assertTrue(((PrincipalSid)acl.getOwner()).getPrincipal().equals(""String_Node_Str""));
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 1);
  AccessEntryResponse aer=accessService.generateAceResponses(acl).get(0);
  Assert.assertTrue(aer.getId() != null);
  Assert.assertTrue(aer.getPermission() == AclPermission.ADMINISTRATION);
  Assert.assertTrue(((PrincipalSid)aer.getSid()).getPrincipal().equals(""String_Node_Str""));
  Sid modeler=accessService.getSid(""String_Node_Str"",true);
  acl=accessService.grant(ae,AclPermission.ADMINISTRATION,modeler);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 2);
  Long modelerEntryId=null;
  for (  AccessControlEntry ace : acl.getEntries()) {
    PrincipalSid sid=(PrincipalSid)ace.getSid();
    if (sid.getPrincipal().equals(""String_Node_Str"")) {
      modelerEntryId=(Long)ace.getId();
      Assert.assertTrue(ace.getPermission() == AclPermission.ADMINISTRATION);
    }
  }
  acl=accessService.update(ae,modelerEntryId,AclPermission.READ);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 2);
  for (  AccessControlEntry ace : acl.getEntries()) {
    PrincipalSid sid=(PrincipalSid)ace.getSid();
    if (sid.getPrincipal().equals(""String_Node_Str"")) {
      modelerEntryId=(Long)ace.getId();
      Assert.assertTrue(ace.getPermission() == AclPermission.READ);
    }
  }
  accessService.clean(attachedEntity,true);
  Acl attachedEntityAcl=accessService.getAcl(attachedEntity);
  Assert.assertNull(attachedEntityAcl);
  attachedEntityAcl=accessService.init(attachedEntity,AclPermission.ADMINISTRATION);
  accessService.inherit(attachedEntity,ae);
  attachedEntityAcl=accessService.getAcl(attachedEntity);
  Assert.assertTrue(attachedEntityAcl.getParentAcl() != null);
  Assert.assertTrue(attachedEntityAcl.getParentAcl().getObjectIdentity().getIdentifier().equals(""String_Node_Str""));
  Assert.assertTrue(attachedEntityAcl.getEntries().size() == 1);
  acl=accessService.revoke(ae,modelerEntryId);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 1);
  accessService.clean(ae,true);
  acl=accessService.getAcl(ae);
  Assert.assertNull(acl);
  attachedEntityAcl=accessService.getAcl(attachedEntity);
  Assert.assertNull(attachedEntityAcl);
}",0.9690060562878516
63373,"public static SRowFilter fromFilter(final CubeSegment seg,TupleFilter rootFilter){
  byte[] bytes=TupleFilterSerializer.serialize(rootFilter,new Decorator(){
    RowKeyColumnIO columnIO=new RowKeyColumnIO(seg);
    @Override public TupleFilter onSerialize(    TupleFilter filter){
      if (filter == null)       return filter;
      if ((filter instanceof CompareTupleFilter) == false)       return filter;
      if (TupleFilter.isEvaluableRecursively(filter) == false)       return ConstantTupleFilter.TRUE;
      CompareTupleFilter compf=(CompareTupleFilter)filter;
      Pair<ColumnTupleFilter,ConstantTupleFilter> pair=compf.getColumnAndConstant();
      ColumnTupleFilter colf=pair.getFirst();
      ConstantTupleFilter constf=pair.getSecond();
      if (colf == null) {
        return filter;
      }
      TblColRef col=colf.getColumn();
      String nullString=nullString(col);
      if (constf == null) {
        compf.setNullString(nullString);
        return filter;
      }
      TupleFilter result;
      CompareTupleFilter newComp=new CompareTupleFilter(compf.getOperator());
      newComp.setNullString(nullString);
      newComp.addChild(colf);
      String firstValue=constf.getValues().iterator().next();
      String v;
switch (newComp.getOperator()) {
case EQ:
case IN:
        Set<String> newValues=Sets.newHashSet();
      for (      String value : constf.getValues()) {
        v=translate(col,value,0);
        if (nullString.equals(v) == false)         newValues.add(v);
      }
    if (newValues.isEmpty()) {
      result=ConstantTupleFilter.FALSE;
    }
 else {
      newComp.addChild(new ConstantTupleFilter(newValues));
      result=newComp;
    }
  break;
case NEQ:
v=translate(col,firstValue,0);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LT:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LTE:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GT:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GTE:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + newComp.getOperator());
}
return result;
}
private String nullString(TblColRef column){
byte[] id=new byte[columnIO.getColumnLength(column)];
for (int i=0; i < id.length; i++) {
id[i]=Dictionary.NULL;
}
return SRowTuple.dictIdToString(id,0,id.length);
}
private String translate(TblColRef column,String v,int roundingFlag){
byte[] value=Bytes.toBytes(v);
byte[] id=new byte[columnIO.getColumnLength(column)];
columnIO.writeColumn(column,value,value.length,roundingFlag,Dictionary.NULL,id,0);
return SRowTuple.dictIdToString(id,0,id.length);
}
}
);
TupleFilter copy=TupleFilterSerializer.deserialize(bytes);
return new SRowFilter(copy);
}","public static SRowFilter fromFilter(final CubeSegment seg,TupleFilter rootFilter){
  byte[] bytes=TupleFilterSerializer.serialize(rootFilter,new Decorator(){
    RowKeyColumnIO columnIO=new RowKeyColumnIO(seg);
    @Override public TupleFilter onSerialize(    TupleFilter filter){
      if (filter == null)       return filter;
      if (filter.getOperator() == FilterOperatorEnum.NOT && TupleFilter.isEvaluableRecursively(filter) == false)       return ConstantTupleFilter.TRUE;
      if ((filter instanceof CompareTupleFilter) == false)       return filter;
      if (TupleFilter.isEvaluableRecursively(filter) == false)       return ConstantTupleFilter.TRUE;
      CompareTupleFilter compf=(CompareTupleFilter)filter;
      Pair<ColumnTupleFilter,ConstantTupleFilter> pair=compf.getColumnAndConstant();
      ColumnTupleFilter colf=pair.getFirst();
      ConstantTupleFilter constf=pair.getSecond();
      if (colf == null) {
        return filter;
      }
      TblColRef col=colf.getColumn();
      String nullString=nullString(col);
      if (constf == null) {
        compf.setNullString(nullString);
        return filter;
      }
      TupleFilter result;
      CompareTupleFilter newComp=new CompareTupleFilter(compf.getOperator());
      newComp.setNullString(nullString);
      newComp.addChild(colf);
      String firstValue=constf.getValues().iterator().next();
      String v;
switch (newComp.getOperator()) {
case EQ:
case IN:
        Set<String> newValues=Sets.newHashSet();
      for (      String value : constf.getValues()) {
        v=translate(col,value,0);
        if (nullString.equals(v) == false)         newValues.add(v);
      }
    if (newValues.isEmpty()) {
      result=ConstantTupleFilter.FALSE;
    }
 else {
      newComp.addChild(new ConstantTupleFilter(newValues));
      result=newComp;
    }
  break;
case NEQ:
v=translate(col,firstValue,0);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LT:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LTE:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GT:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GTE:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + newComp.getOperator());
}
return result;
}
private String nullString(TblColRef column){
byte[] id=new byte[columnIO.getColumnLength(column)];
for (int i=0; i < id.length; i++) {
id[i]=Dictionary.NULL;
}
return SRowTuple.dictIdToString(id,0,id.length);
}
private String translate(TblColRef column,String v,int roundingFlag){
byte[] value=Bytes.toBytes(v);
byte[] id=new byte[columnIO.getColumnLength(column)];
columnIO.writeColumn(column,value,value.length,roundingFlag,Dictionary.NULL,id,0);
return SRowTuple.dictIdToString(id,0,id.length);
}
}
);
TupleFilter copy=TupleFilterSerializer.deserialize(bytes);
return new SRowFilter(copy);
}",0.9775081385025156
63374,"@Override public TupleFilter onSerialize(TupleFilter filter){
  if (filter == null)   return filter;
  if ((filter instanceof CompareTupleFilter) == false)   return filter;
  if (TupleFilter.isEvaluableRecursively(filter) == false)   return ConstantTupleFilter.TRUE;
  CompareTupleFilter compf=(CompareTupleFilter)filter;
  Pair<ColumnTupleFilter,ConstantTupleFilter> pair=compf.getColumnAndConstant();
  ColumnTupleFilter colf=pair.getFirst();
  ConstantTupleFilter constf=pair.getSecond();
  if (colf == null) {
    return filter;
  }
  TblColRef col=colf.getColumn();
  String nullString=nullString(col);
  if (constf == null) {
    compf.setNullString(nullString);
    return filter;
  }
  TupleFilter result;
  CompareTupleFilter newComp=new CompareTupleFilter(compf.getOperator());
  newComp.setNullString(nullString);
  newComp.addChild(colf);
  String firstValue=constf.getValues().iterator().next();
  String v;
switch (newComp.getOperator()) {
case EQ:
case IN:
    Set<String> newValues=Sets.newHashSet();
  for (  String value : constf.getValues()) {
    v=translate(col,value,0);
    if (nullString.equals(v) == false)     newValues.add(v);
  }
if (newValues.isEmpty()) {
  result=ConstantTupleFilter.FALSE;
}
 else {
  newComp.addChild(new ConstantTupleFilter(newValues));
  result=newComp;
}
break;
case NEQ:
v=translate(col,firstValue,0);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LT:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LTE:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GT:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GTE:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + newComp.getOperator());
}
return result;
}","@Override public TupleFilter onSerialize(TupleFilter filter){
  if (filter == null)   return filter;
  if (filter.getOperator() == FilterOperatorEnum.NOT && TupleFilter.isEvaluableRecursively(filter) == false)   return ConstantTupleFilter.TRUE;
  if ((filter instanceof CompareTupleFilter) == false)   return filter;
  if (TupleFilter.isEvaluableRecursively(filter) == false)   return ConstantTupleFilter.TRUE;
  CompareTupleFilter compf=(CompareTupleFilter)filter;
  Pair<ColumnTupleFilter,ConstantTupleFilter> pair=compf.getColumnAndConstant();
  ColumnTupleFilter colf=pair.getFirst();
  ConstantTupleFilter constf=pair.getSecond();
  if (colf == null) {
    return filter;
  }
  TblColRef col=colf.getColumn();
  String nullString=nullString(col);
  if (constf == null) {
    compf.setNullString(nullString);
    return filter;
  }
  TupleFilter result;
  CompareTupleFilter newComp=new CompareTupleFilter(compf.getOperator());
  newComp.setNullString(nullString);
  newComp.addChild(colf);
  String firstValue=constf.getValues().iterator().next();
  String v;
switch (newComp.getOperator()) {
case EQ:
case IN:
    Set<String> newValues=Sets.newHashSet();
  for (  String value : constf.getValues()) {
    v=translate(col,value,0);
    if (nullString.equals(v) == false)     newValues.add(v);
  }
if (newValues.isEmpty()) {
  result=ConstantTupleFilter.FALSE;
}
 else {
  newComp.addChild(new ConstantTupleFilter(newValues));
  result=newComp;
}
break;
case NEQ:
v=translate(col,firstValue,0);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LT:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case LTE:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GT:
v=translate(col,firstValue,-1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.TRUE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
case GTE:
v=translate(col,firstValue,1);
if (nullString.equals(v)) {
result=ConstantTupleFilter.FALSE;
}
 else {
newComp.addChild(new ConstantTupleFilter(v));
result=newComp;
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + newComp.getOperator());
}
return result;
}",0.9700872455338596
63375,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody @Timed(name=""String_Node_Str"") public SQLResponse query(@RequestBody SQLRequest sqlRequest){
  long startTimestamp=System.currentTimeMillis();
  SQLResponse response=doQuery(sqlRequest);
  response.setDuration(System.currentTimeMillis() - startTimestamp);
  queryService.logQuery(sqlRequest,response,new Date(startTimestamp),new Date(System.currentTimeMillis()));
  if (response.getIsException()) {
    String errorMsg=response.getExceptionMessage();
    throw new InternalErrorException(makeErrorMsgUserFriendly(errorMsg));
  }
  return response;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody @Timed(name=""String_Node_Str"") public SQLResponse query(@RequestBody SQLRequest sqlRequest){
  long startTimestamp=System.currentTimeMillis();
  SQLResponse response=doQuery(sqlRequest);
  response.setDuration(System.currentTimeMillis() - startTimestamp);
  queryService.logQuery(sqlRequest,response,new Date(startTimestamp),new Date(System.currentTimeMillis()));
  return response;
}",0.821917808219178
63376,"/** 
 * @param sqlRequest
 * @return
 */
private SQLResponse doQuery(SQLRequest sqlRequest){
  String sql=sqlRequest.getSql();
  String project=sqlRequest.getProject();
  logger.info(""String_Node_Str"" + project);
  logger.info(""String_Node_Str"" + sql);
  String serverMode=KylinConfig.getInstanceFromEnv().getServerMode();
  if (!(Constant.SERVER_MODE_QUERY.equals(serverMode.toLowerCase()) || Constant.SERVER_MODE_ALL.equals(serverMode.toLowerCase()))) {
    throw new InternalErrorException(""String_Node_Str"" + serverMode + ""String_Node_Str"");
  }
  try {
    if (sql.toLowerCase().contains(""String_Node_Str"")) {
      SQLResponse sqlResponse=null;
      Cache exceptionCache=cacheManager.getCache(EXCEPTION_QUERY_CACHE);
      Cache queryCache=cacheManager.getCache(SUCCESS_QUERY_CACHE);
      if (KylinConfig.getInstanceFromEnv().isQueryCacheEnabled()) {
        if (null != exceptionCache.get(sqlRequest)) {
          Element element=exceptionCache.get(sqlRequest);
          SQLResponse scanExceptionRes=(SQLResponse)element.getObjectValue();
          scanExceptionRes.setHitCache(true);
          return scanExceptionRes;
        }
        if (null != queryCache.get(sqlRequest)) {
          Element element=queryCache.get(sqlRequest);
          SQLResponse cachedRes=(SQLResponse)element.getObjectValue();
          cachedRes.setHitCache(true);
          return cachedRes;
        }
      }
      sqlResponse=queryService.query(sqlRequest);
      long durationThreshold=KylinConfig.getInstanceFromEnv().getQueryDurationCacheThreshold();
      long scancountThreshold=KylinConfig.getInstanceFromEnv().getQueryScanCountCacheThreshold();
      if (!sqlResponse.getIsException() && (sqlResponse.getDuration() > durationThreshold || sqlResponse.getTotalScanCount() > scancountThreshold)) {
        queryCache.put(new Element(sqlRequest,sqlResponse));
      }
      if (!sqlResponse.getIsException() && KylinConfig.getInstanceFromEnv().isQuerySecureEnabled()) {
        CubeInstance cubeInstance=this.queryService.getCubeManager().getCube(sqlResponse.getCube());
        queryService.checkAuthorization(cubeInstance);
      }
      return sqlResponse;
    }
 else {
      logger.debug(""String_Node_Str"");
      return new SQLResponse(null,null,0,true,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SQLResponse exceptionRes=new SQLResponse(null,null,0,true,e.getMessage());
    Cache exceptionCache=cacheManager.getCache(EXCEPTION_QUERY_CACHE);
    exceptionCache.put(new Element(sqlRequest,exceptionRes));
    logger.error(""String_Node_Str"",e);
    return new SQLResponse(null,null,0,true,e.getMessage());
  }
}","private SQLResponse doQuery(SQLRequest sqlRequest){
  String sql=sqlRequest.getSql();
  String project=sqlRequest.getProject();
  logger.info(""String_Node_Str"" + project);
  logger.info(""String_Node_Str"" + sql);
  String serverMode=KylinConfig.getInstanceFromEnv().getServerMode();
  if (!(Constant.SERVER_MODE_QUERY.equals(serverMode.toLowerCase()) || Constant.SERVER_MODE_ALL.equals(serverMode.toLowerCase()))) {
    throw new InternalErrorException(""String_Node_Str"" + serverMode + ""String_Node_Str"");
  }
  if (sql.toLowerCase().contains(""String_Node_Str"")) {
    try {
      SQLResponse sqlResponse=searchQueryInCache(sqlRequest);
      if (null == sqlResponse) {
        sqlResponse=queryService.query(sqlRequest);
        long durationThreshold=KylinConfig.getInstanceFromEnv().getQueryDurationCacheThreshold();
        long scancountThreshold=KylinConfig.getInstanceFromEnv().getQueryScanCountCacheThreshold();
        if (!sqlResponse.getIsException() && (sqlResponse.getDuration() > durationThreshold || sqlResponse.getTotalScanCount() > scancountThreshold)) {
          cacheManager.getCache(SUCCESS_QUERY_CACHE).put(new Element(sqlRequest,sqlResponse));
        }
      }
      checkQueryAuth(sqlResponse);
      return sqlResponse;
    }
 catch (    AccessDeniedException ade) {
      logger.error(""String_Node_Str"",ade);
      throw new ForbiddenException(ade.getLocalizedMessage());
    }
catch (    Exception e) {
      SQLResponse exceptionRes=new SQLResponse(null,null,0,true,e.getMessage());
      Cache exceptionCache=cacheManager.getCache(EXCEPTION_QUERY_CACHE);
      exceptionCache.put(new Element(sqlRequest,exceptionRes));
      logger.error(""String_Node_Str"",e);
      throw new InternalErrorException(makeErrorMsgUserFriendly(e.getLocalizedMessage()));
    }
  }
 else {
    logger.debug(""String_Node_Str"");
    throw new InternalErrorException(makeErrorMsgUserFriendly(""String_Node_Str""));
  }
}",0.3073202901736645
63377,"private Lock getLockForGivenEntry(String key){
  if (!mEditionLocks.containsKey(key)) {
    mEditionLocks.put(key,new ReentrantLock());
  }
  return mEditionLocks.get(key);
}","private Lock getLockForGivenEntry(String key){
  if (!mEditionLocks.containsKey(key)) {
    mEditionLocks.putIfAbsent(key,new ReentrantLock());
  }
  return mEditionLocks.get(key);
}",0.9775280898876404
63378,"public ShellCommands(final List<String> commands){
  this.commands=commands;
}","public ShellCommands(final List<String> commands){
  this(true,commands.toArray(new String[]{}));
}",0.8022598870056498
63379,"public <T extends DbBackedBuild>T getFirstBuild(final DbBackedProject project){
  final DbBackedBuild build=getDatastore().createQuery(DbBackedBuild.class).disableValidation().limit(1).order(""String_Node_Str"").get();
  associateProject(project,build);
  return (T)build;
}","public <T extends DbBackedBuild>T getFirstBuild(final DbBackedProject project){
  final DbBackedBuild build=getQuery(project).disableValidation().limit(1).order(""String_Node_Str"").get();
  associateProject(project,build);
  return (T)build;
}",0.914396887159533
63380,"public int getNextBuildNumber(DynamicProject project){
  BuildNumberCounter seq=getDatastore().createQuery(BuildNumberCounter.class).field(""String_Node_Str"").equal(project.getFullName()).get();
  if (seq == null) {
    return 1;
  }
  return seq.getCounter();
}","public int getNextBuildNumber(DynamicProject project){
  BuildNumberCounter seq=getDatastore().createQuery(BuildNumberCounter.class).field(""String_Node_Str"").equal(project.getFullName()).get();
  if (seq == null) {
    return 1;
  }
  return seq.getCounter() + 1;
}",0.9923954372623576
63381,"public List<String> getBranches(){
  ArrayList<String> configuredBranches=parseBranches();
  ArrayList<String> branchList=new ArrayList<String>();
  if (!configuredBranches.contains(""String_Node_Str""))   branchList.add(""String_Node_Str"");
  if (!configuredBranches.contains(""String_Node_Str""))   branchList.add(""String_Node_Str"");
  branchList.addAll(configuredBranches);
  return branchList;
}","public List<String> getBranches(){
  return parseBranches();
}",0.2631578947368421
63382,"@Exported public Iterable<String> getBuildHistoryTabs(){
  DynamicProjectBranchTabsProperty tabsProperty=dynamicProject.getProperty(DynamicProjectBranchTabsProperty.class);
  return tabsProperty == null ? Collections.<String>emptyList() : tabsProperty.getBranches();
}","@Exported public Iterable<String> getBuildHistoryTabs(){
  DynamicProjectBranchTabsProperty tabsProperty=dynamicProject.getProperty(DynamicProjectBranchTabsProperty.class);
  List<String> tabs=tabsProperty == null ? new ArrayList<String>() : tabsProperty.getBranches();
  ArrayList<String> configuredTabs=new ArrayList<String>();
  if (!tabs.contains(""String_Node_Str""))   configuredTabs.add(""String_Node_Str"");
  if (!tabs.contains(""String_Node_Str""))   configuredTabs.add(""String_Node_Str"");
  configuredTabs.addAll(tabs);
  return configuredTabs;
}",0.5225885225885226
63383,"public Iterable<BuildHistoryRow> getBuilds(String branch){
  return toUiBuilds(filterSkipped(isMyBuilds(branch) ? getDynamicBuildRepository().<DynamicBuild>getCurrentUserBuilds(dynamicProject,BUILD_COUNT) : getDynamicBuildRepository().<DynamicBuild>getLast(dynamicProject,BUILD_COUNT,branch)));
}","public Iterable<BuildHistoryRow> getBuilds(String branch){
  if (""String_Node_Str"".equalsIgnoreCase(branch)) {
    branch=null;
  }
  Iterable<DynamicBuild> builds=isMyBuilds(branch) ? getDynamicBuildRepository().<DynamicBuild>getCurrentUserBuilds(dynamicProject,BUILD_COUNT) : getDynamicBuildRepository().<DynamicBuild>getLast(dynamicProject,BUILD_COUNT,branch);
  return toUiBuilds(filterSkipped(builds));
}",0.7489361702127659
63384,"@Override public BuildCause.CommitInfo getCommit(){
  return build.getCause().getCommitInfo();
}","@Override public BuildCause.CommitInfo getCommit(){
  BuildCause.CommitInfo commitInfo=build.getCause().getCommitInfo();
  if (commitInfo == null) {
    return BuildCause.CommitInfo.NULL_INFO;
  }
  return commitInfo;
}",0.5650793650793651
63385,"public static void render(StaplerResponse rsp,Object output) throws IOException {
  rsp.setContentType(""String_Node_Str"");
  ObjectMapper mapper=new ObjectMapper(new JsonFactory());
  mapper.setVisibilityChecker(mapper.getSerializationConfig().getDefaultVisibilityChecker().withGetterVisibility(JsonAutoDetect.Visibility.PUBLIC_ONLY).withSetterVisibility(JsonAutoDetect.Visibility.NONE));
  mapper.writeValue(rsp.getOutputStream(),output);
  rsp.flushBuffer();
}","public static void render(StaplerResponse rsp,Object output) throws IOException {
  rsp.setContentType(""String_Node_Str"");
  ObjectMapper mapper=new ObjectMapper(new JsonFactory());
  mapper.setVisibilityChecker(mapper.getSerializationConfig().getDefaultVisibilityChecker().withGetterVisibility(JsonAutoDetect.Visibility.PUBLIC_ONLY).withSetterVisibility(JsonAutoDetect.Visibility.NONE));
  mapper.writeValue(rsp.getOutputStream(),output);
}",0.9767441860465116
63386,"@Override public void doAjax(StaplerRequest req,StaplerResponse rsp,@Header(""String_Node_Str"") String n) throws IOException, ServletException {
  if (n == null) {
    throw HttpResponses.error(SC_BAD_REQUEST,new IllegalArgumentException(""String_Node_Str""));
  }
  rsp.setContentType(""String_Node_Str"");
  List<T> items=new LinkedList<T>();
  String nn=null;
  Iterable<T> builds=model.getBuildsAfter(n);
  for (  T t : builds) {
    if (adapter.compare(t,n) >= 0) {
      items.add(t);
      if (adapter.isBuilding(t)) {
        nn=adapter.getKey(t);
      }
    }
 else {
      break;
    }
  }
  if (nn == null) {
    if (items.isEmpty()) {
      nn=n;
    }
 else {
      nn=adapter.getNextKey(adapter.getKey(items.get(0)));
    }
  }
  baseList=items;
  GReflectionUtils.setField(HistoryWidget.class,""String_Node_Str"",this,nn);
  rsp.setHeader(""String_Node_Str"",nn);
  req.getView(this,""String_Node_Str"").forward(req,rsp);
}","@Override public void doAjax(StaplerRequest req,StaplerResponse rsp,@Header(""String_Node_Str"") String n) throws IOException, ServletException {
  if (n == null) {
    throw HttpResponses.error(SC_BAD_REQUEST,new IllegalArgumentException(""String_Node_Str""));
  }
  rsp.setContentType(""String_Node_Str"");
  List<T> items=new LinkedList<T>();
  String nn=null;
  Iterable<T> builds=model.getBuildsAfter(Integer.parseInt(n) - 1);
  for (  T t : builds) {
    if (adapter.compare(t,n) >= 0) {
      items.add(t);
      if (adapter.isBuilding(t)) {
        nn=adapter.getKey(t);
      }
    }
 else {
      break;
    }
  }
  if (nn == null) {
    if (items.isEmpty()) {
      nn=n;
    }
 else {
      nn=adapter.getNextKey(adapter.getKey(items.get(0)));
    }
  }
  baseList=items;
  GReflectionUtils.setField(HistoryWidget.class,""String_Node_Str"",this,nn);
  rsp.setHeader(""String_Node_Str"",nn);
  req.getView(this,""String_Node_Str"").forward(req,rsp);
}",0.987220447284345
63387,"public Iterable<T> getBuildsAfter(String n){
  return filterSkipped(isMyBuilds() ? dynamicBuildRepository.<T>getCurrentUserBuildsGreaterThan((DbBackedProject)owner,n) : dynamicBuildRepository.<T>getBuildGreaterThan((DbBackedProject)owner,n,branch));
}","public Iterable<T> getBuildsAfter(int n){
  return filterSkipped(isMyBuilds() ? dynamicBuildRepository.<T>getCurrentUserBuildsGreaterThan((DbBackedProject)owner,n) : dynamicBuildRepository.<T>getBuildGreaterThan((DbBackedProject)owner,n,branch));
}",0.9819639278557114
63388,"public <T extends DbBackedBuild>Iterable<T> getBuildGreaterThan(DbBackedProject project,String n,String branch){
  int number=Integer.parseInt(n) - 1;
  Query<DbBackedBuild> query=getQuery(project).order(""String_Node_Str"").field(""String_Node_Str"").greaterThan(number);
  if (branch != null) {
    query=query.field(""String_Node_Str"").equal(branch);
  }
  List<DbBackedBuild> builds=query.asList();
  for (  DbBackedBuild build : builds) {
    associateProject(project,build);
  }
  return (Iterable<T>)query.asList();
}","public <T extends DbBackedBuild>Iterable<T> getBuildGreaterThan(DbBackedProject project,int number,String branch){
  Query<DbBackedBuild> query=getQuery(project).order(""String_Node_Str"").field(""String_Node_Str"").greaterThan(number).order(""String_Node_Str"");
  if (branch != null) {
    query=query.field(""String_Node_Str"").equal(branch);
  }
  List<DbBackedBuild> builds=query.asList();
  for (  DbBackedBuild build : builds) {
    associateProject(project,build);
  }
  return (Iterable<T>)query.asList();
}",0.9211295034079844
63389,"public <T extends DbBackedBuild>Iterable<T> getCurrentUserBuildsGreaterThan(DbBackedProject project,String n){
  int number=Integer.parseInt(n) - 1;
  List<DbBackedBuild> builds=getQuery(project).order(""String_Node_Str"").field(""String_Node_Str"").equal(Jenkins.getAuthentication().getName()).field(""String_Node_Str"").greaterThan(number).asList();
  for (  DbBackedBuild build : builds) {
    associateProject(project,build);
  }
  return (Iterable<T>)builds;
}","public <T extends DbBackedBuild>Iterable<T> getCurrentUserBuildsGreaterThan(DbBackedProject project,int number){
  List<DbBackedBuild> builds=getQuery(project).order(""String_Node_Str"").field(""String_Node_Str"").equal(Jenkins.getAuthentication().getName()).field(""String_Node_Str"").greaterThan(number).asList();
  for (  DbBackedBuild build : builds) {
    associateProject(project,build);
  }
  return (Iterable<T>)builds;
}",0.9365079365079364
63390,"protected String getRunCommand(Combination combination){
  List commands=getCommandForCombination(combination);
  return checkoutCommands.add(new ShellCommands(commands)).toSingleShellCommand();
}","protected String getRunCommand(Combination combination){
  List commands=getCommandForCombination(combination);
  return new ShellCommands().add(checkoutCommands).add(new ShellCommands(commands)).toSingleShellCommand();
}",0.9400479616306956
63391,"@Test public void should_run_parallel_build_of_the_combination_if_command_is_parallized() throws Exception {
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",new ShellCommands());
  Assert.assertTrue(dockerImageBuildConfiguration.isParallized());
  ShellCommands shellCommands=dockerImageBuildConfiguration.toShellCommands(new Combination(of(""String_Node_Str"",""String_Node_Str"")));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(0));
}","@Test public void should_run_parallel_build_of_the_combination_if_command_is_parallized() throws Exception {
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",new ShellCommands());
  Assert.assertTrue(dockerImageBuildConfiguration.isParallized());
  ShellCommands shellCommandsForTwoSubBuild=dockerImageBuildConfiguration.toShellCommands(new Combination(of(""String_Node_Str"",""String_Node_Str"")));
  ShellCommands shellCommandsForOneSubBuild=dockerImageBuildConfiguration.toShellCommands(new Combination(of(""String_Node_Str"",""String_Node_Str"")));
  Assert.assertEquals(""String_Node_Str"",shellCommandsForTwoSubBuild.get(0));
  Assert.assertEquals(""String_Node_Str"",shellCommandsForOneSubBuild.get(0));
}",0.8354922279792746
63392,"protected void exportDeployKeysIfPrivateRepo(BuildListener listener,Launcher launcher) throws IOException, InterruptedException {
  if (isPrivateRepo()) {
    DeployKeyPair deployKeyPair=new GithubDeployKeyRepository().get(getGithubRepoUrl());
    WorkspaceFileExporter.WorkspaceFile privateKeyFile=new WorkspaceFileExporter.WorkspaceFile(""String_Node_Str"",deployKeyPair.privateKey,""String_Node_Str"");
    WorkspaceFileExporter.WorkspaceFile publicKeyFile=new WorkspaceFileExporter.WorkspaceFile(""String_Node_Str"",deployKeyPair.privateKey,""String_Node_Str"");
    new WorkspaceFileExporter(publicKeyFile,WorkspaceFileExporter.Operation.CREATE).perform((AbstractBuild)this,launcher,listener);
    new WorkspaceFileExporter(privateKeyFile,WorkspaceFileExporter.Operation.CREATE).perform((AbstractBuild)this,launcher,listener);
  }
}","protected void exportDeployKeysIfPrivateRepo(BuildListener listener,Launcher launcher) throws IOException, InterruptedException {
  if (isPrivateRepo()) {
    DeployKeyPair deployKeyPair=SetupConfig.get().getGithubDeployKeyRepository().get(getGithubRepoUrl());
    WorkspaceFileExporter.WorkspaceFile privateKeyFile=new WorkspaceFileExporter.WorkspaceFile(""String_Node_Str"",deployKeyPair.privateKey,""String_Node_Str"");
    WorkspaceFileExporter.WorkspaceFile publicKeyFile=new WorkspaceFileExporter.WorkspaceFile(""String_Node_Str"",deployKeyPair.privateKey,""String_Node_Str"");
    new WorkspaceFileExporter(publicKeyFile,WorkspaceFileExporter.Operation.CREATE).perform((AbstractBuild)this,launcher,listener);
    new WorkspaceFileExporter(privateKeyFile,WorkspaceFileExporter.Operation.CREATE).perform((AbstractBuild)this,launcher,listener);
  }
}",0.9850746268656716
63393,"public boolean isPrivateRepo(){
  return new GithubDeployKeyRepository().hasDeployKey(getGithubRepoUrl());
}","public boolean isPrivateRepo(){
  return SetupConfig.get().getGithubDeployKeyRepository().hasDeployKey(getGithubRepoUrl());
}",0.9098712446351932
63394,"public void processGitHubPayload(String payloadData){
  final Payload payload=makePayload(payloadData);
  LOGGER.info(""String_Node_Str"" + payload.getPusher());
  if (payload.needsBuild()) {
    LOGGER.info(""String_Node_Str"" + payload.getProjectUrl());
    for (    final AbstractProject<?,?> job : makeDynamicProjectRepo().getJobsFor(payload.getProjectUrl())) {
      LOGGER.info(""String_Node_Str"" + job.getName());
      queue.execute(new Runnable(){
        @Override public void run(){
          StringParameterValue branch=new StringParameterValue(""String_Node_Str"",payload.getBranch());
          job.scheduleBuild(0,payload.getCause(),new NoDuplicatesParameterAction(branch));
        }
      }
);
    }
  }
}","public void processGitHubPayload(String payloadData){
  SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
  final Payload payload=makePayload(payloadData);
  LOGGER.info(""String_Node_Str"" + payload.getPusher());
  if (payload.needsBuild()) {
    LOGGER.info(""String_Node_Str"" + payload.getProjectUrl());
    for (    final AbstractProject<?,?> job : makeDynamicProjectRepo().getJobsFor(payload.getProjectUrl())) {
      LOGGER.info(""String_Node_Str"" + job.getName());
      queue.execute(new Runnable(){
        @Override public void run(){
          StringParameterValue branch=new StringParameterValue(""String_Node_Str"",payload.getBranch());
          job.scheduleBuild(0,payload.getCause(),new NoDuplicatesParameterAction(branch));
        }
      }
);
    }
  }
}",0.9546061415220294
63395,"public void processGitHubPayload(String payloadData){
  SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
  final Payload payload=makePayload(payloadData);
  LOGGER.info(""String_Node_Str"" + payload.getPusher());
  if (payload.needsBuild()) {
    LOGGER.info(""String_Node_Str"" + payload.getProjectUrl());
    for (    final AbstractProject<?,?> job : makeDynamicProjectRepo().getJobsFor(payload.getProjectUrl())) {
      LOGGER.info(""String_Node_Str"" + job.getName());
      queue.execute(new Runnable(){
        @Override public void run(){
          StringParameterValue branch=new StringParameterValue(""String_Node_Str"",payload.getBranch());
          job.scheduleBuild(0,payload.getCause(),new NoDuplicatesParameterAction(branch));
        }
      }
);
    }
  }
}","public void processGitHubPayload(String payloadData){
  SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
  final Payload payload=makePayload(payloadData);
  LOGGER.info(""String_Node_Str"" + payload.getPusher());
  if (payload.needsBuild()) {
    LOGGER.info(""String_Node_Str"" + payload.getProjectUrl());
    for (    final AbstractProject<?,?> job : makeDynamicProjectRepo().getJobsFor(payload.getProjectUrl())) {
      LOGGER.info(""String_Node_Str"" + job.getName());
      queue.execute(new Runnable(){
        @Override public void run(){
          job.scheduleBuild(0,payload.getCause(),new NoDuplicatesParameterAction(getParametersValues(job,payload.getBranch())));
        }
      }
);
    }
  }
}",0.90473017988008
63396,"@Override public void run(){
  StringParameterValue branch=new StringParameterValue(""String_Node_Str"",payload.getBranch());
  job.scheduleBuild(0,payload.getCause(),new NoDuplicatesParameterAction(branch));
}","@Override public void run(){
  job.scheduleBuild(0,payload.getCause(),new NoDuplicatesParameterAction(getParametersValues(job,payload.getBranch())));
}",0.6295264623955432
63397,"public NoDuplicatesParameterAction(StringParameterValue parameterValue){
  super(parameterValue);
}","public NoDuplicatesParameterAction(List<ParameterValue> parametersValues){
  super(parametersValues);
}",0.9306930693069309
63398,"@Test public void should_authenticate_as_SYSTEM() throws IOException, InterruptedException {
  StaplerRequest request=mock(StaplerRequest.class);
  when(request.getParameter(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  verifyBuildTrigger(request);
  Assert.assertEquals(ACL.SYSTEM,SecurityContextHolder.getContext().getAuthentication());
}","@Test public void should_authenticate_as_SYSTEM() throws IOException, InterruptedException {
  StaplerRequest request=mock(StaplerRequest.class);
  DynamicProject project=mock(DynamicProject.class);
  when(request.getParameter(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  kickOffBuildTrigger(request,project);
  Assert.assertEquals(ACL.SYSTEM,SecurityContextHolder.getContext().getAuthentication());
}",0.9047619047619048
63399,"@Test public void should_get_payload_from_post_if_post() throws IOException, InterruptedException {
  StaplerRequest request=mock(StaplerRequest.class);
  when(request.getParameter(""String_Node_Str"")).thenReturn(null);
  when(request.getMethod()).thenReturn(""String_Node_Str"");
  doReturn(""String_Node_Str"").when(githubWebhook).getRequestPayload(request);
  verifyBuildTrigger(request);
}","@Test public void should_get_payload_from_post_if_post() throws IOException, InterruptedException {
  StaplerRequest request=mock(StaplerRequest.class);
  when(request.getParameter(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(request.getMethod()).thenReturn(""String_Node_Str"");
  DynamicProject project=mock(DynamicProject.class);
  ParametersDefinitionProperty paramDefinition=mock(ParametersDefinitionProperty.class);
  when(project.getProperty(ParametersDefinitionProperty.class)).thenReturn(paramDefinition);
  kickOffBuildTrigger(request,project);
  verify(project).scheduleBuild(eq(0),any(GithubCause.class),any(ParametersAction.class));
}",0.5583173996175909
63400,"@Test public void should_trigger_builds_for_payload() throws IOException, InterruptedException {
  StaplerRequest request=mock(StaplerRequest.class);
  when(request.getParameter(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  verifyBuildTrigger(request);
}","@Test public void should_trigger_builds_for_payload() throws IOException, InterruptedException {
  StaplerRequest request=mock(StaplerRequest.class);
  when(request.getParameter(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  DynamicProject project=mock(DynamicProject.class);
  ParametersDefinitionProperty paramDefinition=mock(ParametersDefinitionProperty.class);
  when(project.getProperty(ParametersDefinitionProperty.class)).thenReturn(paramDefinition);
  kickOffBuildTrigger(request,project);
  verify(project).scheduleBuild(eq(0),any(GithubCause.class),any(ParametersAction.class));
}",0.5787631271878646
63401,"@Override public Result runSubBuild(Combination combination,BuildExecutionContext buildExecutionContext,BuildListener listener) throws IOException, InterruptedException {
  return new ShellScriptRunner(buildExecutionContext,listener).runScript(buildConfiguration.toShellCommands(combination));
}","@Override public Result runSubBuild(Combination combination,BuildExecutionContext buildExecutionContext,BuildListener listener) throws IOException, InterruptedException {
  Result buildResult;
  try {
    buildResult=new ShellScriptRunner(buildExecutionContext,listener).runScript(buildConfiguration.toShellCommands(combination));
  }
  finally {
    new ShellScriptRunner(buildExecutionContext,listener).runScript(new ShellCommands().addAll(buildConfiguration.getLinkCleanupCommands()));
  }
  return buildResult;
}",0.7102342786683107
63402,"@Override public Result runBuild(DynamicBuild build,BuildExecutionContext buildExecutionContext,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  try {
    Map<String,Object> buildEnvironment=build.getEnvironmentWithChangeSet(listener);
    Map config=new GroovyYamlTemplateProcessor(getDotCiYml(build),buildEnvironment).getConfig();
    this.buildConfiguration=getBuildConfiguration(config,build.getBuildId(),buildEnvironment);
    build.setAxisList(buildConfiguration.getAxisList());
    Result result;
    if (buildConfiguration.isParallized()) {
      result=runMultiConfigbuildRunner(build,buildConfiguration,listener,launcher);
    }
 else {
      result=runSubBuild(new Combination(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")),buildExecutionContext,listener);
    }
    runPlugins(build,buildConfiguration.getPlugins(),listener,launcher);
    runNotifiers(build,buildConfiguration.getNotifiers(),listener);
    return result;
  }
 catch (  InterruptedException e) {
    if (buildConfiguration != null && Iterables.isEmpty(buildConfiguration.getLinkCleanupCommands())) {
      ShellCommands cleanupCommands=new ShellCommands();
      cleanupCommands.addAll(buildConfiguration.getLinkCleanupCommands());
      new ShellScriptRunner(buildExecutionContext,listener).runScript(cleanupCommands);
    }
    throw e;
  }
}","@Override public Result runBuild(DynamicBuild build,BuildExecutionContext buildExecutionContext,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  Map<String,Object> buildEnvironment=build.getEnvironmentWithChangeSet(listener);
  Map config=new GroovyYamlTemplateProcessor(getDotCiYml(build),buildEnvironment).getConfig();
  this.buildConfiguration=getBuildConfiguration(config,build.getBuildId(),buildEnvironment);
  build.setAxisList(buildConfiguration.getAxisList());
  Result result;
  if (buildConfiguration.isParallized()) {
    result=runMultiConfigbuildRunner(build,buildConfiguration,listener,launcher);
  }
 else {
    result=runSubBuild(new Combination(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")),buildExecutionContext,listener);
  }
  runPlugins(build,buildConfiguration.getPlugins(),listener,launcher);
  runNotifiers(build,buildConfiguration.getNotifiers(),listener);
  return result;
}",0.8179853004755728
63403,"public ShellCommands toShellCommands(Combination combination){
  ShellCommands shellCommands=new ShellCommands();
  DockerCommandBuilder dockerRunCommand=dockerCommand(""String_Node_Str"").flag(""String_Node_Str"").flag(""String_Node_Str"").bulkOptions(config.get(""String_Node_Str"",String.class)).args(getImageName(),""String_Node_Str"" + getRunCommand(combination) + ""String_Node_Str"");
  shellCommands.addAll(linkServicesToRunCommand(dockerRunCommand,config.get(""String_Node_Str"",List.class)));
  shellCommands.addAll(linkCleanupCommands);
  return shellCommands;
}","public ShellCommands toShellCommands(Combination combination){
  ShellCommands shellCommands=new ShellCommands();
  DockerCommandBuilder dockerRunCommand=dockerCommand(""String_Node_Str"").flag(""String_Node_Str"").flag(""String_Node_Str"").bulkOptions(config.get(""String_Node_Str"",String.class)).args(getImageName(),""String_Node_Str"" + getRunCommand(combination) + ""String_Node_Str"");
  shellCommands.addAll(linkServicesToRunCommand(dockerRunCommand,config.get(""String_Node_Str"",List.class)));
  return shellCommands;
}",0.9580615097856476
63404,"@Test @Ignore public void should_support_nested_links(){
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",new ShellCommands());
  ShellCommands shellCommands=dockerImageBuildConfiguration.toShellCommands(null);
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(0));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(1));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(2));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(3));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(4));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(5));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(6));
}","@Test public void should_support_nested_links(){
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",new ShellCommands());
  ShellCommands shellCommands=dockerImageBuildConfiguration.toShellCommands(null);
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(0));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(1));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(2));
  ShellCommands cleanupCommands=new ShellCommands().addAll(dockerImageBuildConfiguration.getLinkCleanupCommands());
  Assert.assertEquals(""String_Node_Str"",cleanupCommands.get(0));
  Assert.assertEquals(""String_Node_Str"",cleanupCommands.get(1));
  Assert.assertEquals(""String_Node_Str"",cleanupCommands.get(2));
  Assert.assertEquals(""String_Node_Str"",cleanupCommands.get(3));
}",0.8556910569105691
63405,"@Test public void should_start_and_link_containers_when_links_are_specified(){
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",new ShellCommands());
  ShellCommands shellCommands=dockerImageBuildConfiguration.toShellCommands(null);
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(0));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(1));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(2));
}","@Test public void should_start_and_link_containers_when_links_are_specified(){
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",new ShellCommands());
  ShellCommands shellCommands=dockerImageBuildConfiguration.toShellCommands(null);
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(0));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(1));
  Assert.assertEquals(""String_Node_Str"",dockerImageBuildConfiguration.getLinkCleanupCommands().get(1));
}",0.9508650519031142
63406,"@Test public void should_start_and_linked_containers_with_run_params_if_specified(){
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",new ShellCommands());
  ShellCommands shellCommands=dockerImageBuildConfiguration.toShellCommands(null);
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(0));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(1));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(2));
}","@Test public void should_start_and_linked_containers_with_run_params_if_specified(){
  DockerImageBuildConfiguration dockerImageBuildConfiguration=new DockerImageBuildConfiguration(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",asList(of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",new ShellCommands());
  ShellCommands shellCommands=dockerImageBuildConfiguration.toShellCommands(null);
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(0));
  Assert.assertEquals(""String_Node_Str"",shellCommands.get(1));
  Assert.assertEquals(""String_Node_Str"",dockerImageBuildConfiguration.getLinkCleanupCommands().get(1));
}",0.9487364620938628
63407,"@Test public void should_generate_key_pair() throws Exception {
  DeployKeyGenerator.DeployKeyPair keyPair=new DeployKeyGenerator().generateKeyPair();
  Assert.notNull(keyPair.publicKey);
  Assert.notNull(keyPair.privateKey);
}","@Test public void should_generate_key_pair() throws Exception {
  DeployKeyPair keyPair=new DeployKeyGenerator().generateKeyPair();
  Assert.notNull(keyPair.publicKey);
  Assert.notNull(keyPair.privateKey);
}",0.8367816091954023
63408,"public void setLayouter(BuildConfiguration buildConfiguration){
  AxisList axisList=new AxisList(new Axis(""String_Node_Str"",""String_Node_Str""));
  if (buildConfiguration.isMultiLanguageVersions() && buildConfiguration.isMultiScript()) {
    axisList=new AxisList(new Axis(""String_Node_Str"",buildConfiguration.getLanguageVersions()),new Axis(""String_Node_Str"",buildConfiguration.getScriptKeys()));
  }
  if (buildConfiguration.isMultiLanguageVersions()) {
    axisList=new AxisList(new Axis(""String_Node_Str"",buildConfiguration.getLanguageVersions()));
  }
  if (buildConfiguration.isMultiScript()) {
    axisList=new AxisList(new Axis(""String_Node_Str"",buildConfiguration.getScriptKeys()));
  }
  DynamicBuildLayouter dynamicBuildLayouter=new DynamicBuildLayouter(axisList,dynamicBuild);
  for (  DynamicBuildLayoutListener dynamicBuildLayoutListener : dynamicBuildLayoutListeners) {
    dynamicBuildLayoutListener.setDyanamicBuildLayouter(dynamicBuildLayouter);
  }
}","public void setLayouter(BuildConfiguration buildConfiguration){
  AxisList axisList=new AxisList(new Axis(""String_Node_Str"",""String_Node_Str""));
  if (buildConfiguration.isMultiLanguageVersions() && buildConfiguration.isMultiScript()) {
    axisList=new AxisList(new Axis(""String_Node_Str"",buildConfiguration.getLanguageVersions()),new Axis(""String_Node_Str"",buildConfiguration.getScriptKeys()));
  }
 else   if (buildConfiguration.isMultiLanguageVersions()) {
    axisList=new AxisList(new Axis(""String_Node_Str"",buildConfiguration.getLanguageVersions()));
  }
 else   if (buildConfiguration.isMultiScript()) {
    axisList=new AxisList(new Axis(""String_Node_Str"",buildConfiguration.getScriptKeys()));
  }
  DynamicBuildLayouter dynamicBuildLayouter=new DynamicBuildLayouter(axisList,dynamicBuild);
  for (  DynamicBuildLayoutListener dynamicBuildLayoutListener : dynamicBuildLayoutListeners) {
    dynamicBuildLayoutListener.setDyanamicBuildLayouter(dynamicBuildLayouter);
  }
}",0.9938398357289528
63409,"public Object getState(String state){
  try {
    return Enum.<Enum>valueOf((Class<Enum>)Class.forName(""String_Node_Str""),state);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
}","public Object getState(String state){
  try {
    return Enum.valueOf((Class<Enum>)Class.forName(""String_Node_Str""),state);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
}",0.985645933014354
63410,"@SuppressWarnings(""String_Node_Str"") public static Options buildOptions(){
  Options o=new Options();
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + Utils.join(""String_Node_Str"",OutputFormat.formatNames()) + ""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  return o;
}","@SuppressWarnings(""String_Node_Str"") public static Options buildOptions(){
  Options o=new Options();
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + Utils.join(""String_Node_Str"",OutputFormat.formatNames()) + ""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  o.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create(""String_Node_Str""));
  return o;
}",0.9636015325670498
63411,"/** 
 * heuristically merge a list of TextElement into a list of TextChunk ported from from PDFBox's PDFTextStripper.writePage, with modifications. Here be dragons
 */
public static List<TextChunk> mergeWords(List<TextElement> textElements,List<Ruling> verticalRulings){
  List<TextChunk> textChunks=new ArrayList<TextChunk>();
  if (textElements.isEmpty()) {
    return textChunks;
  }
  textChunks.add(new TextChunk(textElements.remove(0)));
  TextChunk firstTC=textChunks.get(0);
  float previousAveCharWidth=(float)firstTC.getWidth();
  float endOfLastTextX=(float)firstTC.getRight();
  float maxYForLine=(float)firstTC.getBottom();
  float maxHeightForLine=(float)firstTC.getHeight();
  float minYTopForLine=(float)firstTC.getTop();
  float lastWordSpacing=-1;
  float wordSpacing, deltaSpace, averageCharWidth, deltaCharWidth;
  float expectedStartOfNextWordX, dist;
  TextElement sp, prevChar;
  TextChunk currentChunk;
  boolean sameLine, acrossVerticalRuling;
  for (  TextElement chr : textElements) {
    currentChunk=textChunks.get(textChunks.size() - 1);
    prevChar=currentChunk.textElements.get(currentChunk.textElements.size() - 1);
    if ((chr.getText().equals(prevChar.getText())) && (prevChar.overlapRatio(chr) > 0.5)) {
      continue;
    }
    if (chr.getText().equals(""String_Node_Str"") && Utils.feq(prevChar.getLeft(),chr.getLeft()) && Utils.feq(prevChar.getTop(),chr.getTop())) {
      continue;
    }
    if ((chr.getFont() != prevChar.getFont()) || !Utils.feq(chr.getFontSize(),prevChar.getFontSize())) {
      previousAveCharWidth=-1;
    }
    acrossVerticalRuling=false;
    for (    Ruling r : verticalRulings) {
      if ((verticallyOverlapsRuling(prevChar,r) && verticallyOverlapsRuling(chr,r)) && (prevChar.x < r.getPosition() && chr.x > r.getPosition()) || (prevChar.x > r.getPosition() && chr.x < r.getPosition())) {
        acrossVerticalRuling=true;
        break;
      }
    }
    wordSpacing=chr.getWidthOfSpace();
    deltaSpace=0;
    if (java.lang.Float.isNaN(wordSpacing) || wordSpacing == 0) {
      deltaSpace=java.lang.Float.MAX_VALUE;
    }
 else     if (lastWordSpacing < 0) {
      deltaSpace=wordSpacing * 0.5f;
    }
 else {
      deltaSpace=((wordSpacing + lastWordSpacing) / 2.0f) * 0.5f;
    }
    if (previousAveCharWidth < 0) {
      averageCharWidth=(float)(chr.getWidth() / chr.getText().length());
    }
 else {
      averageCharWidth=(float)((previousAveCharWidth + (chr.getWidth() / chr.getText().length())) / 2.0f);
    }
    deltaCharWidth=averageCharWidth * AVERAGE_CHAR_TOLERANCE;
    expectedStartOfNextWordX=-java.lang.Float.MAX_VALUE;
    if (endOfLastTextX != -1) {
      expectedStartOfNextWordX=endOfLastTextX + Math.min(deltaCharWidth,deltaSpace);
    }
    sameLine=true;
    if (!Utils.overlap((float)chr.getBottom(),chr.height,maxYForLine,maxHeightForLine)) {
      endOfLastTextX=-1;
      expectedStartOfNextWordX=-java.lang.Float.MAX_VALUE;
      maxYForLine=-java.lang.Float.MAX_VALUE;
      maxHeightForLine=-1;
      minYTopForLine=java.lang.Float.MAX_VALUE;
      sameLine=false;
    }
    endOfLastTextX=(float)chr.getRight();
    if (!acrossVerticalRuling && sameLine && expectedStartOfNextWordX < chr.getLeft() && !prevChar.getText().endsWith(""String_Node_Str"")) {
      sp=new TextElement((float)prevChar.getTop(),(float)prevChar.getLeft(),(float)(expectedStartOfNextWordX - prevChar.getLeft()),(float)prevChar.getHeight(),prevChar.getFont(),prevChar.getFontSize(),""String_Node_Str"",prevChar.getWidthOfSpace());
      currentChunk.add(sp);
    }
 else {
      sp=null;
    }
    maxYForLine=(float)Math.max(chr.getBottom(),maxYForLine);
    maxHeightForLine=(float)Math.max(maxHeightForLine,chr.getHeight());
    minYTopForLine=(float)Math.min(minYTopForLine,chr.getTop());
    dist=(float)(chr.getLeft() - (sp != null ? sp.getRight() : prevChar.getRight()));
    if (!acrossVerticalRuling && sameLine && (dist < 0 ? currentChunk.verticallyOverlaps(chr) : dist < wordSpacing)) {
      currentChunk.add(chr);
    }
 else {
      textChunks.add(new TextChunk(chr));
    }
    lastWordSpacing=wordSpacing;
    previousAveCharWidth=(float)(sp != null ? (averageCharWidth + sp.getWidth()) / 2.0f : averageCharWidth);
  }
  List<TextChunk> textChunksSeparatedByDirectionality=new ArrayList<TextChunk>();
  for (  TextChunk chunk : textChunks) {
    boolean isLtrDominant=chunk.isLtrDominant() != -1;
    TextChunk dirChunk=chunk.groupByDirectionality(isLtrDominant);
    textChunksSeparatedByDirectionality.add(dirChunk);
  }
  return textChunksSeparatedByDirectionality;
}","/** 
 * heuristically merge a list of TextElement into a list of TextChunk ported from from PDFBox's PDFTextStripper.writePage, with modifications. Here be dragons
 */
public static List<TextChunk> mergeWords(List<TextElement> textElements,List<Ruling> verticalRulings){
  List<TextChunk> textChunks=new ArrayList<TextChunk>();
  if (textElements.isEmpty()) {
    return textChunks;
  }
  List<TextElement> copyOfTextElements=new ArrayList<TextElement>(textElements);
  textChunks.add(new TextChunk(copyOfTextElements.remove(0)));
  TextChunk firstTC=textChunks.get(0);
  float previousAveCharWidth=(float)firstTC.getWidth();
  float endOfLastTextX=(float)firstTC.getRight();
  float maxYForLine=(float)firstTC.getBottom();
  float maxHeightForLine=(float)firstTC.getHeight();
  float minYTopForLine=(float)firstTC.getTop();
  float lastWordSpacing=-1;
  float wordSpacing, deltaSpace, averageCharWidth, deltaCharWidth;
  float expectedStartOfNextWordX, dist;
  TextElement sp, prevChar;
  TextChunk currentChunk;
  boolean sameLine, acrossVerticalRuling;
  for (  TextElement chr : copyOfTextElements) {
    currentChunk=textChunks.get(textChunks.size() - 1);
    prevChar=currentChunk.textElements.get(currentChunk.textElements.size() - 1);
    if ((chr.getText().equals(prevChar.getText())) && (prevChar.overlapRatio(chr) > 0.5)) {
      continue;
    }
    if (chr.getText().equals(""String_Node_Str"") && Utils.feq(prevChar.getLeft(),chr.getLeft()) && Utils.feq(prevChar.getTop(),chr.getTop())) {
      continue;
    }
    if ((chr.getFont() != prevChar.getFont()) || !Utils.feq(chr.getFontSize(),prevChar.getFontSize())) {
      previousAveCharWidth=-1;
    }
    acrossVerticalRuling=false;
    for (    Ruling r : verticalRulings) {
      if ((verticallyOverlapsRuling(prevChar,r) && verticallyOverlapsRuling(chr,r)) && (prevChar.x < r.getPosition() && chr.x > r.getPosition()) || (prevChar.x > r.getPosition() && chr.x < r.getPosition())) {
        acrossVerticalRuling=true;
        break;
      }
    }
    wordSpacing=chr.getWidthOfSpace();
    deltaSpace=0;
    if (java.lang.Float.isNaN(wordSpacing) || wordSpacing == 0) {
      deltaSpace=java.lang.Float.MAX_VALUE;
    }
 else     if (lastWordSpacing < 0) {
      deltaSpace=wordSpacing * 0.5f;
    }
 else {
      deltaSpace=((wordSpacing + lastWordSpacing) / 2.0f) * 0.5f;
    }
    if (previousAveCharWidth < 0) {
      averageCharWidth=(float)(chr.getWidth() / chr.getText().length());
    }
 else {
      averageCharWidth=(float)((previousAveCharWidth + (chr.getWidth() / chr.getText().length())) / 2.0f);
    }
    deltaCharWidth=averageCharWidth * AVERAGE_CHAR_TOLERANCE;
    expectedStartOfNextWordX=-java.lang.Float.MAX_VALUE;
    if (endOfLastTextX != -1) {
      expectedStartOfNextWordX=endOfLastTextX + Math.min(deltaCharWidth,deltaSpace);
    }
    sameLine=true;
    if (!Utils.overlap((float)chr.getBottom(),chr.height,maxYForLine,maxHeightForLine)) {
      endOfLastTextX=-1;
      expectedStartOfNextWordX=-java.lang.Float.MAX_VALUE;
      maxYForLine=-java.lang.Float.MAX_VALUE;
      maxHeightForLine=-1;
      minYTopForLine=java.lang.Float.MAX_VALUE;
      sameLine=false;
    }
    endOfLastTextX=(float)chr.getRight();
    if (!acrossVerticalRuling && sameLine && expectedStartOfNextWordX < chr.getLeft() && !prevChar.getText().endsWith(""String_Node_Str"")) {
      sp=new TextElement((float)prevChar.getTop(),(float)prevChar.getLeft(),(float)(expectedStartOfNextWordX - prevChar.getLeft()),(float)prevChar.getHeight(),prevChar.getFont(),prevChar.getFontSize(),""String_Node_Str"",prevChar.getWidthOfSpace());
      currentChunk.add(sp);
    }
 else {
      sp=null;
    }
    maxYForLine=(float)Math.max(chr.getBottom(),maxYForLine);
    maxHeightForLine=(float)Math.max(maxHeightForLine,chr.getHeight());
    minYTopForLine=(float)Math.min(minYTopForLine,chr.getTop());
    dist=(float)(chr.getLeft() - (sp != null ? sp.getRight() : prevChar.getRight()));
    if (!acrossVerticalRuling && sameLine && (dist < 0 ? currentChunk.verticallyOverlaps(chr) : dist < wordSpacing)) {
      currentChunk.add(chr);
    }
 else {
      textChunks.add(new TextChunk(chr));
    }
    lastWordSpacing=wordSpacing;
    previousAveCharWidth=(float)(sp != null ? (averageCharWidth + sp.getWidth()) / 2.0f : averageCharWidth);
  }
  List<TextChunk> textChunksSeparatedByDirectionality=new ArrayList<TextChunk>();
  for (  TextChunk chunk : textChunks) {
    boolean isLtrDominant=chunk.isLtrDominant() != -1;
    TextChunk dirChunk=chunk.groupByDirectionality(isLtrDominant);
    textChunksSeparatedByDirectionality.add(dirChunk);
  }
  return textChunksSeparatedByDirectionality;
}",0.9894645378516346
63412,"/** 
 * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're running on JDK7+ 
 */
public static <T extends Comparable<? super T>>void sort(List<T> list){
  if (useQuickSort) {
    QuickSort.sort(list);
  }
 else {
    Collections.sort(list);
  }
}","/** 
 * Wrap Collections.sort so we can fallback to a non-stable quicksort if we're running on JDK7+
 */
public static <T extends Comparable<? super T>>void sort(List<T> list){
  if (useQuickSort) {
    QuickSort.sort(list);
  }
 else {
    Collections.sort(list);
  }
}",0.99815157116451
63413,"public static Rectangle bounds(Collection<? extends Shape> shapes){
  if (shapes.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Iterator<? extends Shape> iter=shapes.iterator();
  Rectangle rv=new Rectangle();
  rv.setRect(iter.next().getBounds2D());
  do {
    Rectangle2D.union(iter.next().getBounds2D(),rv,rv);
  }
 while (iter.hasNext());
  return rv;
}","public static Rectangle bounds(Collection<? extends Shape> shapes){
  if (shapes.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Iterator<? extends Shape> iter=shapes.iterator();
  Rectangle rv=new Rectangle();
  rv.setRect(iter.next().getBounds2D());
  while (iter.hasNext()) {
    Rectangle2D.union(iter.next().getBounds2D(),rv,rv);
  }
  return rv;
}",0.9364461738002594
63414,"@Override public int compare(Ruling a,Ruling b){
  return (int)(!Utils.feq(a.getPosition(),b.getPosition()) ? a.getPosition() - b.getPosition() : a.getStart() - b.getStart());
}","@Override public int compare(SortObject a,SortObject b){
  int rv;
  if (Utils.feq(a.position,b.position)) {
    if (a.type == SOType.VERTICAL && b.type == SOType.HLEFT) {
      rv=1;
    }
 else     if (a.type == SOType.VERTICAL && b.type == SOType.HRIGHT) {
      rv=-1;
    }
 else     if (a.type == SOType.HLEFT && b.type == SOType.VERTICAL) {
      rv=-1;
    }
 else     if (a.type == SOType.HRIGHT && b.type == SOType.VERTICAL) {
      rv=1;
    }
 else {
      rv=java.lang.Double.compare(a.position,b.position);
    }
  }
 else {
    return java.lang.Double.compare(a.position,b.position);
  }
  return rv;
}",0.08816120906801
63415,"public static List<Ruling> collapseOrientedRulings(List<Ruling> lines,int expandAmount){
  ArrayList<Ruling> rv=new ArrayList<Ruling>();
  if (lines.size() == 0) {
    return rv;
  }
  Collections.sort(lines,new Comparator<Ruling>(){
    @Override public int compare(    Ruling a,    Ruling b){
      return (int)(!Utils.feq(a.getPosition(),b.getPosition()) ? a.getPosition() - b.getPosition() : a.getStart() - b.getStart());
    }
  }
);
  rv.add(lines.remove(0));
  for (  Ruling next_line : lines) {
    Ruling last=rv.get(rv.size() - 1);
    if (Utils.feq(next_line.getPosition(),last.getPosition()) && last.nearlyIntersects(next_line,expandAmount)) {
      last.setStart(next_line.getStart() < last.getStart() ? next_line.getStart() : last.getStart());
      last.setEnd(next_line.getEnd() < last.getEnd() ? last.getEnd() : next_line.getEnd());
    }
 else     if (next_line.length() == 0) {
      continue;
    }
 else {
      rv.add(next_line);
    }
  }
  return rv;
}","public static List<Ruling> collapseOrientedRulings(List<Ruling> lines,int expandAmount){
}",0.1688555347091932
63416,"@Override public int compare(Point2D.Float o1,Point2D.Float o2){
  if (o1.equals(o2)) {
    return 0;
  }
  if (o1.getY() == o2.getY()) {
    return Double.compare(o1.getX(),o2.getX());
  }
 else {
    return Double.compare(o1.getY(),o2.getY());
  }
}","@Override public int compare(Line2D.Float o1,Line2D.Float o2){
  if (o1.equals(o2)) {
    return 0;
  }
  if (o1.x1 == o2.x1) {
    return Float.compare(o1.y1,o2.y1);
  }
 else {
    return Float.compare(o1.x1,o2.x1);
  }
}",0.7510548523206751
63417,"private List<Rectangle> getTableAreasFromCells(List<Rectangle> cells){
  List<List<Rectangle>> cellGroups=new ArrayList<List<Rectangle>>();
  for (  Rectangle cell : cells) {
    boolean addedToGroup=false;
    cellCheck:     for (    List<Rectangle> cellGroup : cellGroups) {
      for (      Rectangle groupCell : cellGroup) {
        Point2D[] groupCellCorners=groupCell.getPoints();
        Point2D[] candidateCorners=cell.getPoints();
        for (int i=0; i < candidateCorners.length; i++) {
          for (int j=0; j < groupCellCorners.length; j++) {
            if (candidateCorners[i].distance(groupCellCorners[j]) < 10) {
              cellGroup.add(cell);
              addedToGroup=true;
              break cellCheck;
            }
          }
        }
      }
    }
    if (!addedToGroup) {
      ArrayList<Rectangle> cellGroup=new ArrayList<Rectangle>();
      cellGroup.add(cell);
      cellGroups.add(cellGroup);
    }
  }
  List<Rectangle> tableAreas=new ArrayList<Rectangle>();
  for (  List<Rectangle> cellGroup : cellGroups) {
    float top=Float.MAX_VALUE;
    float left=Float.MAX_VALUE;
    float bottom=Float.MIN_VALUE;
    float right=Float.MIN_VALUE;
    for (    Rectangle cell : cellGroup) {
      if (cell.getTop() < top)       top=cell.getTop();
      if (cell.getLeft() < left)       left=cell.getLeft();
      if (cell.getBottom() > bottom)       bottom=cell.getBottom();
      if (cell.getRight() > right)       right=cell.getRight();
    }
    tableAreas.add(new Rectangle(top,left,right - left,bottom - top));
  }
  return tableAreas;
}","private List<Rectangle> getTableAreasFromCells(List<Rectangle> cells){
  List<List<Rectangle>> cellGroups=new ArrayList<List<Rectangle>>();
  for (  Rectangle cell : cells) {
    boolean addedToGroup=false;
    cellCheck:     for (    List<Rectangle> cellGroup : cellGroups) {
      for (      Rectangle groupCell : cellGroup) {
        Point2D[] groupCellCorners=groupCell.getPoints();
        Point2D[] candidateCorners=cell.getPoints();
        for (int i=0; i < candidateCorners.length; i++) {
          for (int j=0; j < groupCellCorners.length; j++) {
            if (candidateCorners[i].distance(groupCellCorners[j]) < 10) {
              cellGroup.add(cell);
              addedToGroup=true;
              break cellCheck;
            }
          }
        }
      }
    }
    if (!addedToGroup) {
      ArrayList<Rectangle> cellGroup=new ArrayList<Rectangle>();
      cellGroup.add(cell);
      cellGroups.add(cellGroup);
    }
  }
  List<Rectangle> tableAreas=new ArrayList<Rectangle>();
  for (  List<Rectangle> cellGroup : cellGroups) {
    if (cellGroup.size() < 4) {
      continue;
    }
    float top=Float.MAX_VALUE;
    float left=Float.MAX_VALUE;
    float bottom=Float.MIN_VALUE;
    float right=Float.MIN_VALUE;
    for (    Rectangle cell : cellGroup) {
      if (cell.getTop() < top)       top=cell.getTop();
      if (cell.getLeft() < left)       left=cell.getLeft();
      if (cell.getBottom() > bottom)       bottom=cell.getBottom();
      if (cell.getRight() > right)       right=cell.getRight();
    }
    tableAreas.add(new Rectangle(top,left,right - left,bottom - top));
  }
  return tableAreas;
}",0.983125
63418,"@Override public List<Rectangle> detect(Page page,File referenceDocument){
  PDDocument pdfDocument;
  try {
    pdfDocument=PDDocument.load(referenceDocument);
  }
 catch (  Exception e) {
    return new ArrayList<Rectangle>();
  }
  PDPage pdfPage=(PDPage)pdfDocument.getDocumentCatalog().getAllPages().get(page.getPageNumber() - 1);
  debugFileOut=referenceDocument.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str"" + page.getPageNumber() + ""String_Node_Str"");
  BufferedImage image;
  try {
    image=pdfPage.convertToImage(BufferedImage.TYPE_BYTE_GRAY,144);
    debugImage=pdfPage.convertToImage(BufferedImage.TYPE_INT_RGB,72);
  }
 catch (  IOException e) {
    return new ArrayList<Rectangle>();
  }
  List<Line2D.Float> horizontalRulings=this.getHorizontalRulings(image);
  try {
    this.removeText(pdfDocument,pdfPage);
    image=pdfPage.convertToImage(BufferedImage.TYPE_BYTE_GRAY,144);
  }
 catch (  Exception e) {
    return new ArrayList<Rectangle>();
  }
  List<Line2D.Float> verticalRulings=this.getVerticalRulings(image);
  List<Line2D.Float> allEdges=new ArrayList<Line2D.Float>(horizontalRulings);
  allEdges.addAll(verticalRulings);
  List<Rectangle> tableAreas=new ArrayList<Rectangle>();
  List<Rectangle> cells=null;
  Set<Point2D.Float> crossingPoints=null;
  if (allEdges.size() > 0) {
    Utils.snapPoints(allEdges,8f,8f);
    crossingPoints=this.getCrossingPoints(horizontalRulings,verticalRulings);
    cells=this.findRectangles(crossingPoints,horizontalRulings,verticalRulings);
    if (cells.size() >= 4) {
      tableAreas=this.getTableAreasFromCells(cells);
    }
  }
  List<TextChunk> textChunks=TextElement.mergeWords(page.getText());
  List<Line> lines=TextChunk.groupByLines(textChunks);
  List<Line2D.Float> leftTextEdges=new ArrayList<Line2D.Float>();
  List<Line2D.Float> midTextEdges=new ArrayList<Line2D.Float>();
  List<Line2D.Float> rightTextEdges=new ArrayList<Line2D.Float>();
  Map<Integer,List<TextChunk>> currLeftEdges=new HashMap<Integer,List<TextChunk>>();
  Map<Integer,List<TextChunk>> currMidEdges=new HashMap<Integer,List<TextChunk>>();
  Map<Integer,List<TextChunk>> currRightEdges=new HashMap<Integer,List<TextChunk>>();
  for (  Line textRow : lines) {
    for (    TextChunk text : textRow.getTextElements()) {
      Integer left=new Integer((int)Math.floor(text.getLeft()));
      Integer right=new Integer((int)Math.floor(text.getRight()));
      Integer mid=new Integer(left + ((right - left) / 2));
      List<TextChunk> leftEdge=currLeftEdges.getOrDefault(left,new ArrayList<TextChunk>());
      leftEdge.add(text);
      currLeftEdges.put(left,leftEdge);
      List<TextChunk> midEdge=currMidEdges.getOrDefault(mid,new ArrayList<TextChunk>());
      midEdge.add(text);
      currMidEdges.put(mid,midEdge);
      List<TextChunk> rightEdge=currRightEdges.getOrDefault(right,new ArrayList<TextChunk>());
      rightEdge.add(text);
      currRightEdges.put(right,rightEdge);
      for (Iterator<Map.Entry<Integer,List<TextChunk>>> iterator=currLeftEdges.entrySet().iterator(); iterator.hasNext(); ) {
        Map.Entry<Integer,List<TextChunk>> entry=iterator.next();
        Integer key=entry.getKey();
        if (key > left && key < right) {
          iterator.remove();
          List<TextChunk> edgeChunks=entry.getValue();
          if (edgeChunks.size() >= 4) {
            TextChunk first=edgeChunks.get(0);
            TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
            leftTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
          }
        }
      }
      for (Iterator<Map.Entry<Integer,List<TextChunk>>> iterator=currMidEdges.entrySet().iterator(); iterator.hasNext(); ) {
        Map.Entry<Integer,List<TextChunk>> entry=iterator.next();
        Integer key=entry.getKey();
        if (key > left && key < right && Math.abs(key - mid) > 2) {
          iterator.remove();
          List<TextChunk> edgeChunks=entry.getValue();
          if (edgeChunks.size() >= 4) {
            TextChunk first=edgeChunks.get(0);
            TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
            midTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
          }
        }
      }
      for (Iterator<Map.Entry<Integer,List<TextChunk>>> iterator=currRightEdges.entrySet().iterator(); iterator.hasNext(); ) {
        Map.Entry<Integer,List<TextChunk>> entry=iterator.next();
        Integer key=entry.getKey();
        if (key > left && key < right) {
          iterator.remove();
          List<TextChunk> edgeChunks=entry.getValue();
          if (edgeChunks.size() >= 4) {
            TextChunk first=edgeChunks.get(0);
            TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
            rightTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
          }
        }
      }
    }
  }
  for (  Integer key : currLeftEdges.keySet()) {
    List<TextChunk> edgeChunks=currLeftEdges.get(key);
    if (edgeChunks.size() >= 4) {
      TextChunk first=edgeChunks.get(0);
      TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
      leftTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
    }
  }
  for (  Integer key : currMidEdges.keySet()) {
    List<TextChunk> edgeChunks=currMidEdges.get(key);
    if (edgeChunks.size() >= 4) {
      TextChunk first=edgeChunks.get(0);
      TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
      midTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
    }
  }
  for (  Integer key : currRightEdges.keySet()) {
    List<TextChunk> edgeChunks=currRightEdges.get(key);
    if (edgeChunks.size() >= 4) {
      TextChunk first=edgeChunks.get(0);
      TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
      rightTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
    }
  }
  for (  Rectangle area : tableAreas) {
    area.x=area.x / 2;
    area.y=area.y / 2;
    area.width=area.width / 2;
    area.height=area.height / 2;
  }
  return tableAreas;
}","@Override public List<Rectangle> detect(Page page,File referenceDocument){
  PDDocument pdfDocument;
  try {
    pdfDocument=PDDocument.load(referenceDocument);
  }
 catch (  Exception e) {
    return new ArrayList<Rectangle>();
  }
  PDPage pdfPage=(PDPage)pdfDocument.getDocumentCatalog().getAllPages().get(page.getPageNumber() - 1);
  debugFileOut=referenceDocument.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str"" + page.getPageNumber() + ""String_Node_Str"");
  BufferedImage image;
  try {
    image=pdfPage.convertToImage(BufferedImage.TYPE_BYTE_GRAY,144);
    debugImage=pdfPage.convertToImage(BufferedImage.TYPE_INT_RGB,72);
  }
 catch (  IOException e) {
    return new ArrayList<Rectangle>();
  }
  List<Line2D.Float> horizontalRulings=this.getHorizontalRulings(image);
  try {
    this.removeText(pdfDocument,pdfPage);
    image=pdfPage.convertToImage(BufferedImage.TYPE_BYTE_GRAY,144);
  }
 catch (  Exception e) {
    return new ArrayList<Rectangle>();
  }
  List<Line2D.Float> verticalRulings=this.getVerticalRulings(image);
  List<Line2D.Float> allEdges=new ArrayList<Line2D.Float>(horizontalRulings);
  allEdges.addAll(verticalRulings);
  List<Rectangle> tableAreas=new ArrayList<Rectangle>();
  List<Rectangle> cells=null;
  Set<Point2D.Float> crossingPoints=null;
  if (allEdges.size() > 0) {
    Utils.snapPoints(allEdges,8f,8f);
    crossingPoints=this.getCrossingPoints(horizontalRulings,verticalRulings);
    horizontalRulings=this.mergeHorizontalEdges(horizontalRulings);
    verticalRulings=this.mergeVerticalEdges(verticalRulings);
    cells=this.findRectangles(crossingPoints,horizontalRulings,verticalRulings);
    tableAreas=this.getTableAreasFromCells(cells);
  }
  List<TextChunk> textChunks=TextElement.mergeWords(page.getText());
  List<Line> lines=TextChunk.groupByLines(textChunks);
  List<Line2D.Float> leftTextEdges=new ArrayList<Line2D.Float>();
  List<Line2D.Float> midTextEdges=new ArrayList<Line2D.Float>();
  List<Line2D.Float> rightTextEdges=new ArrayList<Line2D.Float>();
  Map<Integer,List<TextChunk>> currLeftEdges=new HashMap<Integer,List<TextChunk>>();
  Map<Integer,List<TextChunk>> currMidEdges=new HashMap<Integer,List<TextChunk>>();
  Map<Integer,List<TextChunk>> currRightEdges=new HashMap<Integer,List<TextChunk>>();
  for (  Line textRow : lines) {
    for (    TextChunk text : textRow.getTextElements()) {
      Integer left=new Integer((int)Math.floor(text.getLeft()));
      Integer right=new Integer((int)Math.floor(text.getRight()));
      Integer mid=new Integer(left + ((right - left) / 2));
      List<TextChunk> leftEdge=currLeftEdges.getOrDefault(left,new ArrayList<TextChunk>());
      leftEdge.add(text);
      currLeftEdges.put(left,leftEdge);
      List<TextChunk> midEdge=currMidEdges.getOrDefault(mid,new ArrayList<TextChunk>());
      midEdge.add(text);
      currMidEdges.put(mid,midEdge);
      List<TextChunk> rightEdge=currRightEdges.getOrDefault(right,new ArrayList<TextChunk>());
      rightEdge.add(text);
      currRightEdges.put(right,rightEdge);
      for (Iterator<Map.Entry<Integer,List<TextChunk>>> iterator=currLeftEdges.entrySet().iterator(); iterator.hasNext(); ) {
        Map.Entry<Integer,List<TextChunk>> entry=iterator.next();
        Integer key=entry.getKey();
        if (key > left && key < right) {
          iterator.remove();
          List<TextChunk> edgeChunks=entry.getValue();
          if (edgeChunks.size() >= 4) {
            TextChunk first=edgeChunks.get(0);
            TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
            leftTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
          }
        }
      }
      for (Iterator<Map.Entry<Integer,List<TextChunk>>> iterator=currMidEdges.entrySet().iterator(); iterator.hasNext(); ) {
        Map.Entry<Integer,List<TextChunk>> entry=iterator.next();
        Integer key=entry.getKey();
        if (key > left && key < right && Math.abs(key - mid) > 2) {
          iterator.remove();
          List<TextChunk> edgeChunks=entry.getValue();
          if (edgeChunks.size() >= 4) {
            TextChunk first=edgeChunks.get(0);
            TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
            midTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
          }
        }
      }
      for (Iterator<Map.Entry<Integer,List<TextChunk>>> iterator=currRightEdges.entrySet().iterator(); iterator.hasNext(); ) {
        Map.Entry<Integer,List<TextChunk>> entry=iterator.next();
        Integer key=entry.getKey();
        if (key > left && key < right) {
          iterator.remove();
          List<TextChunk> edgeChunks=entry.getValue();
          if (edgeChunks.size() >= 4) {
            TextChunk first=edgeChunks.get(0);
            TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
            rightTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
          }
        }
      }
    }
  }
  for (  Integer key : currLeftEdges.keySet()) {
    List<TextChunk> edgeChunks=currLeftEdges.get(key);
    if (edgeChunks.size() >= 4) {
      TextChunk first=edgeChunks.get(0);
      TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
      leftTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
    }
  }
  for (  Integer key : currMidEdges.keySet()) {
    List<TextChunk> edgeChunks=currMidEdges.get(key);
    if (edgeChunks.size() >= 4) {
      TextChunk first=edgeChunks.get(0);
      TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
      midTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
    }
  }
  for (  Integer key : currRightEdges.keySet()) {
    List<TextChunk> edgeChunks=currRightEdges.get(key);
    if (edgeChunks.size() >= 4) {
      TextChunk first=edgeChunks.get(0);
      TextChunk last=edgeChunks.get(edgeChunks.size() - 1);
      rightTextEdges.add(new Line2D.Float(key,first.getTop(),key,last.getBottom()));
    }
  }
  this.debug(leftTextEdges);
  this.debug(midTextEdges);
  this.debug(rightTextEdges);
  for (  Rectangle area : tableAreas) {
    area.x=(float)Math.floor(area.x / 2);
    area.y=(float)Math.floor(area.y / 2);
    area.width=(float)Math.ceil(area.width / 2);
    area.height=(float)Math.ceil(area.height / 2);
  }
  this.debug(tableAreas);
  return tableAreas;
}",0.9648696778371376
63419,"private boolean useCustomQuickSort(){
  String[] versionComponents=System.getProperty(""String_Node_Str"").split(""String_Node_Str"");
  int javaMajorVersion=Integer.parseInt(versionComponents[0]);
  int javaMinorVersion=Integer.parseInt(versionComponents[1]);
  boolean is16orLess=javaMajorVersion == 1 && javaMinorVersion <= 6;
  return !is16orLess;
}","private boolean useCustomQuickSort(){
  String[] versionComponents=System.getProperty(""String_Node_Str"").split(""String_Node_Str"");
  int javaMajorVersion=Integer.parseInt(versionComponents[0]);
  int javaMinorVersion=Integer.parseInt(versionComponents[1]);
  boolean is16orLess=javaMajorVersion == 1 && javaMinorVersion <= 6;
  String useLegacySort=System.getProperty(""String_Node_Str"");
  return !is16orLess || (useLegacySort != null && useLegacySort.equals(""String_Node_Str""));
}",0.8409638554216867
63420,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  destination.top=0;
  destination.bottom=h;
  if (getAdapter() != null)   calculateParallaxParameters();
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  destination.top=0;
  destination.bottom=h;
  if (getAdapter() != null && bitmap != null)   calculateParallaxParameters();
}",0.96
63421,"void initialize(boolean deleteFiles) throws IOException {
  close();
  if (deleteFiles) {
    deleteFiles();
  }
  String mode=READ_OPTION + WRITE_OPTION + (syncWrites ? SYNC_OPTION : NOSYNC_OPTION);
  messageFileWriter=new RandomAccessFile(msgFileName,mode);
  messageFileReader=new RandomAccessFile(msgFileName,READ_OPTION);
  senderSequenceNumberFile=new RandomAccessFile(senderSeqNumFileName,mode);
  targetSequenceNumberFile=new RandomAccessFile(targetSeqNumFileName,mode);
  initializeCache();
}","void initialize(boolean deleteFiles) throws IOException {
  if (deleteFiles) {
    closeAndDeleteFiles();
  }
 else {
    close();
  }
  String mode=READ_OPTION + WRITE_OPTION + (syncWrites ? SYNC_OPTION : NOSYNC_OPTION);
  messageFileWriter=new RandomAccessFile(msgFileName,mode);
  messageFileReader=new RandomAccessFile(msgFileName,READ_OPTION);
  senderSequenceNumberFile=new RandomAccessFile(senderSeqNumFileName,mode);
  targetSequenceNumberFile=new RandomAccessFile(targetSeqNumFileName,mode);
  initializeCache();
}",0.935546875
63422,"protected void tearDown() throws Exception {
  super.tearDown();
  FileStore fileStore=(FileStore)getStore();
  try {
    fileStore.deleteFiles();
  }
 catch (  IOException e) {
    System.err.println(e.getMessage());
  }
}","protected void tearDown() throws Exception {
  super.tearDown();
  FileStore fileStore=(FileStore)getStore();
  try {
    fileStore.closeAndDeleteFiles();
  }
 catch (  IOException e) {
    System.err.println(e.getMessage());
  }
}",0.9823788546255506
63423,"public JdbcLog(SessionSettings settings,SessionID sessionID,DataSource ds) throws SQLException, ClassNotFoundException, ConfigError, FieldConvertError {
  this.sessionID=sessionID;
  dataSource=ds == null ? JdbcUtil.getDataSource(settings,sessionID) : ds;
  logHeartbeats=!settings.isSetting(SETTING_JDBC_LOG_HEARTBEATS) || settings.getBool(SETTING_JDBC_LOG_HEARTBEATS);
  setLogHeartbeats(logHeartbeats);
  if (settings.isSetting(SETTING_LOG_OUTGOING_TABLE)) {
    outgoingMessagesTableName=settings.getString(sessionID,SETTING_LOG_OUTGOING_TABLE);
  }
 else {
    outgoingMessagesTableName=DEFAULT_MESSAGES_LOG_TABLE;
  }
  if (settings.isSetting(SETTING_LOG_INCOMING_TABLE)) {
    incomingMessagesTableName=settings.getString(sessionID,SETTING_LOG_INCOMING_TABLE);
  }
 else {
    incomingMessagesTableName=DEFAULT_MESSAGES_LOG_TABLE;
  }
  if (settings.isSetting(SETTING_LOG_EVENT_TABLE)) {
    eventTableName=settings.getString(sessionID,SETTING_LOG_EVENT_TABLE);
  }
 else {
    eventTableName=DEFAULT_EVENT_LOG_TABLE;
  }
  if (settings.isSetting(sessionID,SETTING_JDBC_SESSION_ID_DEFAULT_PROPERTY_VALUE)) {
    defaultSessionIdPropertyValue=settings.getString(sessionID,SETTING_JDBC_SESSION_ID_DEFAULT_PROPERTY_VALUE);
  }
 else {
    defaultSessionIdPropertyValue=SessionID.NOT_SET;
  }
  extendedSessionIdSupported=determineSessionIdSupport(dataSource,outgoingMessagesTableName);
  createCachedSql();
}","public JdbcLog(SessionSettings settings,SessionID sessionID,DataSource ds) throws SQLException, ClassNotFoundException, ConfigError, FieldConvertError {
  this.sessionID=sessionID;
  dataSource=ds == null ? JdbcUtil.getDataSource(settings,sessionID) : ds;
  logHeartbeats=!settings.isSetting(sessionID,SETTING_JDBC_LOG_HEARTBEATS) || settings.getBool(sessionID,SETTING_JDBC_LOG_HEARTBEATS);
  setLogHeartbeats(logHeartbeats);
  if (settings.isSetting(sessionID,SETTING_LOG_OUTGOING_TABLE)) {
    outgoingMessagesTableName=settings.getString(sessionID,SETTING_LOG_OUTGOING_TABLE);
  }
 else {
    outgoingMessagesTableName=DEFAULT_MESSAGES_LOG_TABLE;
  }
  if (settings.isSetting(sessionID,SETTING_LOG_INCOMING_TABLE)) {
    incomingMessagesTableName=settings.getString(sessionID,SETTING_LOG_INCOMING_TABLE);
  }
 else {
    incomingMessagesTableName=DEFAULT_MESSAGES_LOG_TABLE;
  }
  if (settings.isSetting(sessionID,SETTING_LOG_EVENT_TABLE)) {
    eventTableName=settings.getString(sessionID,SETTING_LOG_EVENT_TABLE);
  }
 else {
    eventTableName=DEFAULT_EVENT_LOG_TABLE;
  }
  if (settings.isSetting(sessionID,SETTING_JDBC_SESSION_ID_DEFAULT_PROPERTY_VALUE)) {
    defaultSessionIdPropertyValue=settings.getString(sessionID,SETTING_JDBC_SESSION_ID_DEFAULT_PROPERTY_VALUE);
  }
 else {
    defaultSessionIdPropertyValue=SessionID.NOT_SET;
  }
  extendedSessionIdSupported=determineSessionIdSupport(dataSource,outgoingMessagesTableName);
  createCachedSql();
}",0.9826026443980516
63424,"protected void logoutAllSessions(boolean forceDisconnect){
  log.info(""String_Node_Str"");
  if (sessions == null) {
    log.error(""String_Node_Str"");
    return;
  }
  for (  Session session : sessions.values()) {
    try {
      session.logout();
    }
 catch (    Throwable e) {
      logError(session.getSessionID(),null,""String_Node_Str"",e);
    }
  }
  if (isLoggedOn()) {
    if (forceDisconnect) {
      for (      Session session : sessions.values()) {
        try {
          if (session.isLoggedOn()) {
            session.disconnect(""String_Node_Str"",false);
          }
        }
 catch (        Throwable e) {
          logError(session.getSessionID(),null,""String_Node_Str"",e);
        }
      }
    }
 else {
      waitForLogout();
    }
  }
}","protected void logoutAllSessions(boolean forceDisconnect){
  log.info(""String_Node_Str"");
  if (sessions == null) {
    log.error(""String_Node_Str"");
    return;
  }
  for (  Session session : sessions.values()) {
    try {
      session.logout();
    }
 catch (    Throwable e) {
      logError(session.getSessionID(),null,""String_Node_Str"",e);
    }
  }
  if (anyLoggedOn()) {
    if (forceDisconnect) {
      for (      Session session : sessions.values()) {
        try {
          if (session.isLoggedOn()) {
            session.disconnect(""String_Node_Str"",false);
          }
        }
 catch (        Throwable e) {
          logError(session.getSessionID(),null,""String_Node_Str"",e);
        }
      }
    }
 else {
      waitForLogout();
    }
  }
}",0.996704021094265
63425,"public void testOneSessionLoggedOnOneSessionNotLoggedOne() throws Exception {
  SessionID sessionID1=new SessionID(FixVersions.BEGINSTRING_FIX40,""String_Node_Str"",""String_Node_Str"");
  SessionSettings settings=setUpSessionSettings(sessionID1);
  DefaultSessionFactory sessionFactory=new DefaultSessionFactory(new UnitTestApplication(),new MemoryStoreFactory(),new SLF4JLogFactory(new SessionSettings()));
  SessionConnector connector=new SessionConnectorUnderTest(settings,sessionFactory);
  Session session1=connector.createSession(sessionID1);
  assertNotNull(session1);
  SessionConnectorListener connectorListener=new SessionConnectorListener();
  connector.addPropertyChangeListener(connectorListener);
  connector.removePropertyChangeListener(connectorListener);
  Map<SessionID,Session> sessions=new HashMap<>();
  sessions.put(session1.getSessionID(),session1);
  connector.setSessions(sessions);
  assertEquals(0,propertyChangeEvents.size());
  assertEquals(1,connector.getManagedSessions().size());
  assertEquals(session1,connector.getManagedSessions().get(0));
  assertFalse(connector.isLoggedOn());
  Field stateField=session1.getClass().getDeclaredField(""String_Node_Str"");
  stateField.setAccessible(true);
  SessionState state=(SessionState)stateField.get(session1);
  state.setLogonSent(true);
  state.setLogonReceived(true);
  assertTrue(connector.isLoggedOn());
  SessionID sessionID2=new SessionID(FixVersions.BEGINSTRING_FIX40,""String_Node_Str"",""String_Node_Str"");
  settings.setString(sessionID2,SessionFactory.SETTING_CONNECTION_TYPE,SessionFactory.ACCEPTOR_CONNECTION_TYPE);
  Session session2=connector.createSession(sessionID2);
  assertNotNull(session2);
  sessions.put(session2.getSessionID(),session2);
  assertFalse(connector.isLoggedOn());
}","public void testOneSessionLoggedOnOneSessionNotLoggedOne() throws Exception {
  SessionID sessionID1=new SessionID(FixVersions.BEGINSTRING_FIX40,""String_Node_Str"",""String_Node_Str"");
  SessionSettings settings=setUpSessionSettings(sessionID1);
  DefaultSessionFactory sessionFactory=new DefaultSessionFactory(new UnitTestApplication(),new MemoryStoreFactory(),new SLF4JLogFactory(new SessionSettings()));
  SessionConnector connector=new SessionConnectorUnderTest(settings,sessionFactory);
  Session session1=connector.createSession(sessionID1);
  assertNotNull(session1);
  SessionConnectorListener connectorListener=new SessionConnectorListener();
  connector.addPropertyChangeListener(connectorListener);
  connector.removePropertyChangeListener(connectorListener);
  Map<SessionID,Session> sessions=new HashMap<>();
  sessions.put(session1.getSessionID(),session1);
  connector.setSessions(sessions);
  assertEquals(0,propertyChangeEvents.size());
  assertEquals(1,connector.getManagedSessions().size());
  assertEquals(session1,connector.getManagedSessions().get(0));
  assertFalse(connector.isLoggedOn());
  Field stateField=session1.getClass().getDeclaredField(""String_Node_Str"");
  stateField.setAccessible(true);
  SessionState state=(SessionState)stateField.get(session1);
  state.setLogonSent(true);
  state.setLogonReceived(true);
  assertTrue(connector.isLoggedOn());
  SessionID sessionID2=new SessionID(FixVersions.BEGINSTRING_FIX40,""String_Node_Str"",""String_Node_Str"");
  settings.setString(sessionID2,SessionFactory.SETTING_CONNECTION_TYPE,SessionFactory.ACCEPTOR_CONNECTION_TYPE);
  Session session2=connector.createSession(sessionID2);
  assertNotNull(session2);
  sessions.put(session2.getSessionID(),session2);
  assertFalse(connector.isLoggedOn());
  assertTrue(connector.anyLoggedOn());
}",0.989115266536422
63426,"/** 
 * Logs out from session and closes the network connection.
 * @param reason the reason why the session is disconnected
 * @param logError set to true if this disconnection is an error
 * @throws IOException IO error
 */
public void disconnect(String reason,boolean logError) throws IOException {
  try {
synchronized (responderLock) {
      if (!hasResponder()) {
        if (!ENCOUNTERED_END_OF_STREAM.equals(reason)) {
          getLog().onEvent(""String_Node_Str"" + reason);
        }
        return;
      }
      final String msg=""String_Node_Str"" + reason;
      if (logError) {
        getLog().onErrorEvent(msg);
      }
 else {
        log.info(""String_Node_Str"" + getSessionID() + ""String_Node_Str""+ msg);
      }
      responder.disconnect();
      setResponder(null);
    }
    final boolean logonReceived=state.isLogonReceived();
    final boolean logonSent=state.isLogonSent();
    if (logonReceived || logonSent) {
      try {
        application.onLogout(sessionID);
      }
 catch (      final Throwable t) {
        logApplicationException(""String_Node_Str"",t);
      }
      stateListener.onLogout();
    }
    if (!state.isInitiator()) {
      setEnabled(true);
    }
  }
  finally {
    state.setLogonReceived(false);
    state.setLogonSent(false);
    state.setLogoutSent(false);
    state.setLogoutReceived(false);
    state.setResetReceived(false);
    state.setResetSent(false);
    state.clearQueue();
    state.clearLogoutReason();
    state.setResendRange(0,0);
    if (resetOnDisconnect) {
      resetState();
    }
  }
}","/** 
 * Logs out from session and closes the network connection.
 * @param reason the reason why the session is disconnected
 * @param logError set to true if this disconnection is an error
 * @throws IOException IO error
 */
public void disconnect(String reason,boolean logError) throws IOException {
  try {
    final boolean logonReceived=state.isLogonReceived();
    final boolean logonSent=state.isLogonSent();
synchronized (responderLock) {
      if (!hasResponder()) {
        if (!ENCOUNTERED_END_OF_STREAM.equals(reason)) {
          getLog().onEvent(""String_Node_Str"" + reason);
        }
        return;
      }
      final String msg=""String_Node_Str"" + reason;
      if (logError) {
        getLog().onErrorEvent(msg);
      }
 else {
        log.info(""String_Node_Str"" + getSessionID() + ""String_Node_Str""+ msg);
      }
      responder.disconnect();
      setResponder(null);
    }
    if (logonReceived || logonSent) {
      try {
        application.onLogout(sessionID);
      }
 catch (      final Throwable t) {
        logApplicationException(""String_Node_Str"",t);
      }
      stateListener.onLogout();
    }
    if (!state.isInitiator()) {
      setEnabled(true);
    }
  }
  finally {
    state.setLogonReceived(false);
    state.setLogonSent(false);
    state.setLogoutSent(false);
    state.setLogoutReceived(false);
    state.setResetReceived(false);
    state.setResetSent(false);
    state.clearQueue();
    state.clearLogoutReason();
    state.setResendRange(0,0);
    if (resetOnDisconnect) {
      resetState();
    }
  }
}",0.9318327974276528
63427,"public void onLogon(SessionID sessionId){
  super.onLogon(sessionId);
  logonLatch.countDown();
}","public void onLogon(){
}",0.396694214876033
63428,"/** 
 * This method cannot move the buffer position until a message is found or an error has occurred. Otherwise, MINA will compact the buffer and we lose data.
 */
private boolean parseMessage(ByteBuffer in,ProtocolDecoderOutput out) throws ProtocolCodecException {
  try {
    boolean messageFound=false;
    while (in.hasRemaining() && !messageFound) {
      if (state == SEEKING_HEADER) {
        BufPos bufPos=indexOf(in,position,HEADER_PATTERN);
        int headerOffset=bufPos._offset;
        if (headerOffset == -1) {
          break;
        }
        in.position(headerOffset);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + getBufferDebugInfo(in));
        }
        position=headerOffset + bufPos._length;
        state=PARSING_LENGTH;
      }
      if (state == PARSING_LENGTH) {
        byte ch=0;
        while (hasRemaining(in)) {
          ch=get(in);
          if (!Character.isDigit((char)ch)) {
            break;
          }
          bodyLength=bodyLength * 10 + (ch - '0');
        }
        if (ch == '\001') {
          state=READING_BODY;
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bodyLength + ""String_Node_Str""+ getBufferDebugInfo(in));
          }
        }
 else {
          if (hasRemaining(in)) {
            handleError(in,in.position() + 1,""String_Node_Str"",false);
            continue;
          }
 else {
            break;
          }
        }
      }
      if (state == READING_BODY) {
        if (remaining(in) < bodyLength) {
          break;
        }
        position+=bodyLength;
        state=PARSING_CHECKSUM;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + getBufferDebugInfo(in));
        }
      }
      if (state == PARSING_CHECKSUM) {
        if (startsWith(in,position,CHECKSUM_PATTERN) > 0) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + getBufferDebugInfo(in));
          }
          position+=CHECKSUM_PATTERN.length;
        }
 else {
          if (position + CHECKSUM_PATTERN.length <= in.limit()) {
            int recoveryPosition=position + 1;
            handleError(in,recoveryPosition,""String_Node_Str"",isLogon(in));
            continue;
          }
 else {
            break;
          }
        }
        String messageString=getMessageString(in);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + getBufferDebugInfo(in) + ""String_Node_Str""+ messageString);
        }
        out.write(messageString);
        state=SEEKING_HEADER;
        bodyLength=0;
        messageFound=true;
      }
    }
    return messageFound;
  }
 catch (  Throwable t) {
    state=SEEKING_HEADER;
    position=0;
    bodyLength=0;
    if (t instanceof ProtocolCodecException) {
      throw (ProtocolCodecException)t;
    }
 else {
      throw new ProtocolCodecException(t);
    }
  }
}","/** 
 * This method cannot move the buffer position until a message is found or an error has occurred. Otherwise, MINA will compact the buffer and we lose data.
 */
private boolean parseMessage(ByteBuffer in,ProtocolDecoderOutput out) throws ProtocolCodecException {
  try {
    boolean messageFound=false;
    while (in.hasRemaining() && !messageFound) {
      if (state == SEEKING_HEADER) {
        BufPos bufPos=indexOf(in,position,HEADER_PATTERN);
        int headerOffset=bufPos._offset;
        if (headerOffset == -1) {
          break;
        }
        in.position(headerOffset);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + getBufferDebugInfo(in));
        }
        position=headerOffset + bufPos._length;
        state=PARSING_LENGTH;
      }
      if (state == PARSING_LENGTH) {
        byte ch=0;
        while (hasRemaining(in)) {
          ch=get(in);
          if (!Character.isDigit((char)ch)) {
            break;
          }
          bodyLength=bodyLength * 10 + (ch - '0');
        }
        if (ch == '\001') {
          state=READING_BODY;
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bodyLength + ""String_Node_Str""+ getBufferDebugInfo(in));
          }
        }
 else {
          if (hasRemaining(in)) {
            String messageString=getMessageStringForError(in);
            handleError(in,in.position() + 1,""String_Node_Str"" + ch + ""String_Node_Str""+ messageString,false);
            continue;
          }
 else {
            break;
          }
        }
      }
      if (state == READING_BODY) {
        if (remaining(in) < bodyLength) {
          break;
        }
        position+=bodyLength;
        state=PARSING_CHECKSUM;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + getBufferDebugInfo(in));
        }
      }
      if (state == PARSING_CHECKSUM) {
        if (startsWith(in,position,CHECKSUM_PATTERN) > 0) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + getBufferDebugInfo(in));
          }
          position+=CHECKSUM_PATTERN.length;
        }
 else {
          if (position + CHECKSUM_PATTERN.length <= in.limit()) {
            int recoveryPosition=position + 1;
            handleError(in,recoveryPosition,""String_Node_Str"",isLogon(in));
            continue;
          }
 else {
            break;
          }
        }
        String messageString=getMessageString(in);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + getBufferDebugInfo(in) + ""String_Node_Str""+ messageString);
        }
        out.write(messageString);
        state=SEEKING_HEADER;
        bodyLength=0;
        messageFound=true;
      }
    }
    return messageFound;
  }
 catch (  Throwable t) {
    state=SEEKING_HEADER;
    position=0;
    bodyLength=0;
    if (t instanceof ProtocolCodecException) {
      throw (ProtocolCodecException)t;
    }
 else {
      throw new ProtocolCodecException(t);
    }
  }
}",0.982468085106383
63429,"public Session create(SessionID sessionID,SessionSettings settings) throws ConfigError {
  try {
    String connectionType=null;
    boolean rejectInvalideMessage=getSetting(settings,sessionID,Session.REJECT_INVALID_MESSAGE,true);
    if (settings.isSetting(sessionID,SessionFactory.SETTING_CONNECTION_TYPE)) {
      connectionType=settings.getString(sessionID,SessionFactory.SETTING_CONNECTION_TYPE);
    }
    if (connectionType == null) {
      throw new ConfigError(""String_Node_Str"");
    }
    if (!connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE) && !connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) {
      throw new ConfigError(""String_Node_Str"");
    }
    if (connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE) && settings.isSetting(sessionID,SessionSettings.SESSION_QUALIFIER)) {
      throw new ConfigError(""String_Node_Str"");
    }
    DefaultApplVerID senderDefaultApplVerID=null;
    if (sessionID.isFIXT()) {
      if (!settings.isSetting(sessionID,Session.SETTING_DEFAULT_APPL_VER_ID)) {
        throw new ConfigError(Session.SETTING_DEFAULT_APPL_VER_ID + ""String_Node_Str"");
      }
      senderDefaultApplVerID=new DefaultApplVerID(toApplVerID(settings.getString(sessionID,Session.SETTING_DEFAULT_APPL_VER_ID)).getValue());
    }
    boolean useDataDictionary=true;
    if (settings.isSetting(sessionID,Session.SETTING_USE_DATA_DICTIONARY)) {
      useDataDictionary=settings.getBool(sessionID,Session.SETTING_USE_DATA_DICTIONARY);
    }
    DefaultDataDictionaryProvider dataDictionaryProvider=null;
    if (useDataDictionary) {
      dataDictionaryProvider=new DefaultDataDictionaryProvider();
      if (sessionID.isFIXT()) {
        processFixtDataDictionaries(sessionID,settings,dataDictionaryProvider);
      }
 else {
        processPreFixtDataDictionary(sessionID,settings,dataDictionaryProvider);
      }
    }
    int heartbeatInterval=0;
    if (connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) {
      rejectInvalideMessage=false;
      heartbeatInterval=(int)settings.getLong(sessionID,Session.SETTING_HEARTBTINT);
      if (heartbeatInterval <= 0) {
        throw new ConfigError(""String_Node_Str"");
      }
    }
    boolean checkLatency=getSetting(settings,sessionID,Session.SETTING_CHECK_LATENCY,true);
    int maxLatency=getSetting(settings,sessionID,Session.SETTING_MAX_LATENCY,Session.DEFAULT_MAX_LATENCY);
    double testRequestDelayMultiplier=getSetting(settings,sessionID,Session.SETTING_TEST_REQUEST_DELAY_MULTIPLIER,Session.DEFAULT_TEST_REQUEST_DELAY_MULTIPLIER);
    boolean millisInTimestamp=getSetting(settings,sessionID,Session.SETTING_MILLISECONDS_IN_TIMESTAMP,true);
    boolean resetOnLogout=getSetting(settings,sessionID,Session.SETTING_RESET_ON_LOGOUT,false);
    boolean resetOnDisconnect=getSetting(settings,sessionID,Session.SETTING_RESET_ON_DISCONNECT,false);
    boolean resetOnLogon=getSetting(settings,sessionID,Session.SETTING_RESET_ON_LOGON,false);
    boolean refreshAtLogon=getSetting(settings,sessionID,Session.SETTING_REFRESH_ON_LOGON,false);
    boolean checkCompID=getSetting(settings,sessionID,Session.SETTING_CHECK_COMP_ID,true);
    boolean redundantResentRequestAllowed=getSetting(settings,sessionID,Session.SETTING_SEND_REDUNDANT_RESEND_REQUEST,false);
    boolean persistMessages=getSetting(settings,sessionID,Session.SETTING_PERSIST_MESSAGES,true);
    boolean useClosedIntervalForResend=getSetting(settings,sessionID,Session.USE_CLOSED_RESEND_INTERVAL,false);
    int logonTimeout=getSetting(settings,sessionID,Session.SETTING_LOGON_TIMEOUT,10);
    int logoutTimeout=getSetting(settings,sessionID,Session.SETTING_LOGOUT_TIMEOUT,2);
    boolean forceResync=getSetting(settings,sessionID,Session.SETTING_FORCE_RESYNC,false);
    final boolean resetOnError=getSetting(settings,sessionID,Session.SETTING_RESET_ON_ERROR,false);
    final boolean disconnectOnError=getSetting(settings,sessionID,Session.SETTING_DISCONNECT_ON_ERROR,false);
    final boolean disableHeartBeatCheck=getSetting(settings,sessionID,Session.SETTING_DISABLE_HEART_BEAT_CHECK,false);
    final boolean checkGapFieldOnAdminMessage=getSetting(settings,sessionID,Session.SETTING_CHECK_GAP_FIELD_ON_ADMIN_MESSAGE,true);
    final boolean forceResendWhenCorruptedStore=getSetting(settings,sessionID,Session.SETTING_FORCE_RESEND_WHEN_CORRUPTED_STORE,false);
    int[] logonIntervals=getLogonIntervalsInSeconds(settings,sessionID);
    Session session=new Session(application,messageStoreFactory,sessionID,dataDictionaryProvider,new SessionSchedule(settings,sessionID),logFactory,messageFactory,heartbeatInterval,checkLatency,maxLatency,millisInTimestamp,resetOnLogon,resetOnLogout,resetOnDisconnect,refreshAtLogon,checkCompID,redundantResentRequestAllowed,persistMessages,useClosedIntervalForResend,testRequestDelayMultiplier,senderDefaultApplVerID,forceResync,logonIntervals,resetOnError,disconnectOnError,disableHeartBeatCheck,rejectInvalideMessage,checkGapFieldOnAdminMessage,forceResendWhenCorruptedStore);
    session.setLogonTimeout(logonTimeout);
    session.setLogoutTimeout(logoutTimeout);
    application.onCreate(sessionID);
    return session;
  }
 catch (  FieldConvertError e) {
    throw new ConfigError(e.getMessage());
  }
}","public Session create(SessionID sessionID,SessionSettings settings) throws ConfigError {
  try {
    String connectionType=null;
    boolean rejectInvalideMessage=getSetting(settings,sessionID,Session.REJECT_INVALID_MESSAGE,true);
    if (settings.isSetting(sessionID,SessionFactory.SETTING_CONNECTION_TYPE)) {
      connectionType=settings.getString(sessionID,SessionFactory.SETTING_CONNECTION_TYPE);
    }
    if (connectionType == null) {
      throw new ConfigError(""String_Node_Str"");
    }
    if (!connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE) && !connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) {
      throw new ConfigError(""String_Node_Str"");
    }
    if (connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE) && settings.isSetting(sessionID,SessionSettings.SESSION_QUALIFIER)) {
      throw new ConfigError(""String_Node_Str"");
    }
    if (connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE) && settings.isSetting(sessionID,Session.SETTING_ALLOWED_REMOTE_ADDRESSES)) {
      throw new ConfigError(""String_Node_Str"");
    }
    DefaultApplVerID senderDefaultApplVerID=null;
    if (sessionID.isFIXT()) {
      if (!settings.isSetting(sessionID,Session.SETTING_DEFAULT_APPL_VER_ID)) {
        throw new ConfigError(Session.SETTING_DEFAULT_APPL_VER_ID + ""String_Node_Str"");
      }
      senderDefaultApplVerID=new DefaultApplVerID(toApplVerID(settings.getString(sessionID,Session.SETTING_DEFAULT_APPL_VER_ID)).getValue());
    }
    boolean useDataDictionary=true;
    if (settings.isSetting(sessionID,Session.SETTING_USE_DATA_DICTIONARY)) {
      useDataDictionary=settings.getBool(sessionID,Session.SETTING_USE_DATA_DICTIONARY);
    }
    DefaultDataDictionaryProvider dataDictionaryProvider=null;
    if (useDataDictionary) {
      dataDictionaryProvider=new DefaultDataDictionaryProvider();
      if (sessionID.isFIXT()) {
        processFixtDataDictionaries(sessionID,settings,dataDictionaryProvider);
      }
 else {
        processPreFixtDataDictionary(sessionID,settings,dataDictionaryProvider);
      }
    }
    int heartbeatInterval=0;
    if (connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) {
      heartbeatInterval=(int)settings.getLong(sessionID,Session.SETTING_HEARTBTINT);
      if (heartbeatInterval <= 0) {
        throw new ConfigError(""String_Node_Str"");
      }
    }
    boolean checkLatency=getSetting(settings,sessionID,Session.SETTING_CHECK_LATENCY,true);
    int maxLatency=getSetting(settings,sessionID,Session.SETTING_MAX_LATENCY,Session.DEFAULT_MAX_LATENCY);
    double testRequestDelayMultiplier=getSetting(settings,sessionID,Session.SETTING_TEST_REQUEST_DELAY_MULTIPLIER,Session.DEFAULT_TEST_REQUEST_DELAY_MULTIPLIER);
    boolean millisInTimestamp=getSetting(settings,sessionID,Session.SETTING_MILLISECONDS_IN_TIMESTAMP,true);
    boolean resetOnLogout=getSetting(settings,sessionID,Session.SETTING_RESET_ON_LOGOUT,false);
    boolean resetOnDisconnect=getSetting(settings,sessionID,Session.SETTING_RESET_ON_DISCONNECT,false);
    boolean resetOnLogon=getSetting(settings,sessionID,Session.SETTING_RESET_ON_LOGON,false);
    boolean refreshAtLogon=getSetting(settings,sessionID,Session.SETTING_REFRESH_ON_LOGON,false);
    boolean checkCompID=getSetting(settings,sessionID,Session.SETTING_CHECK_COMP_ID,true);
    boolean redundantResentRequestAllowed=getSetting(settings,sessionID,Session.SETTING_SEND_REDUNDANT_RESEND_REQUEST,false);
    boolean persistMessages=getSetting(settings,sessionID,Session.SETTING_PERSIST_MESSAGES,true);
    boolean useClosedIntervalForResend=getSetting(settings,sessionID,Session.USE_CLOSED_RESEND_INTERVAL,false);
    int logonTimeout=getSetting(settings,sessionID,Session.SETTING_LOGON_TIMEOUT,10);
    int logoutTimeout=getSetting(settings,sessionID,Session.SETTING_LOGOUT_TIMEOUT,2);
    boolean forceResync=getSetting(settings,sessionID,Session.SETTING_FORCE_RESYNC,false);
    final boolean resetOnError=getSetting(settings,sessionID,Session.SETTING_RESET_ON_ERROR,false);
    final boolean disconnectOnError=getSetting(settings,sessionID,Session.SETTING_DISCONNECT_ON_ERROR,false);
    final boolean disableHeartBeatCheck=getSetting(settings,sessionID,Session.SETTING_DISABLE_HEART_BEAT_CHECK,false);
    final boolean checkGapFieldOnAdminMessage=getSetting(settings,sessionID,Session.SETTING_CHECK_GAP_FIELD_ON_ADMIN_MESSAGE,true);
    final boolean forceResendWhenCorruptedStore=getSetting(settings,sessionID,Session.SETTING_FORCE_RESEND_WHEN_CORRUPTED_STORE,false);
    final int[] logonIntervals=getLogonIntervalsInSeconds(settings,sessionID);
    final Set<InetAddress> allowedRemoteAddresses=getInetAddresses(settings,sessionID);
    final Session session=new Session(application,messageStoreFactory,sessionID,dataDictionaryProvider,new SessionSchedule(settings,sessionID),logFactory,messageFactory,heartbeatInterval,checkLatency,maxLatency,millisInTimestamp,resetOnLogon,resetOnLogout,resetOnDisconnect,refreshAtLogon,checkCompID,redundantResentRequestAllowed,persistMessages,useClosedIntervalForResend,testRequestDelayMultiplier,senderDefaultApplVerID,forceResync,logonIntervals,resetOnError,disconnectOnError,disableHeartBeatCheck,rejectInvalideMessage,checkGapFieldOnAdminMessage,forceResendWhenCorruptedStore,allowedRemoteAddresses);
    session.setLogonTimeout(logonTimeout);
    session.setLogoutTimeout(logoutTimeout);
    application.onCreate(sessionID);
    return session;
  }
 catch (  FieldConvertError e) {
    throw new ConfigError(e.getMessage());
  }
}",0.9664716262654408
63430,"private void executionReport(Message message,SessionID sessionID) throws FieldNotFound {
  ExecID execID=(ExecID)message.getField(new ExecID());
  if (alreadyProcessed(execID,sessionID))   return;
  Order order=orderTableModel.getOrder(message.getField(new ClOrdID()).getValue());
  if (order == null) {
    return;
  }
  BigDecimal fillSize=BigDecimal.ZERO;
  try {
    LastShares lastShares=new LastShares();
    message.getField(lastShares);
    fillSize=new BigDecimal(""String_Node_Str"" + lastShares.getValue());
  }
 catch (  FieldNotFound e) {
    LeavesQty leavesQty=new LeavesQty();
    message.getField(leavesQty);
    fillSize=new BigDecimal(order.getQuantity()).subtract(new BigDecimal(""String_Node_Str"" + leavesQty.getValue()));
  }
  if (fillSize.compareTo(BigDecimal.ZERO) > 0) {
    order.setOpen(order.getOpen() - (int)Double.parseDouble(fillSize.toPlainString()));
    order.setExecuted(new Integer(message.getString(CumQty.FIELD)));
    order.setAvgPx(new Double(message.getString(AvgPx.FIELD)));
  }
  OrdStatus ordStatus=(OrdStatus)message.getField(new OrdStatus());
  if (ordStatus.valueEquals(OrdStatus.REJECTED)) {
    order.setRejected(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.CANCELED) || ordStatus.valueEquals(OrdStatus.DONE_FOR_DAY)) {
    order.setCanceled(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.NEW)) {
    if (order.isNew()) {
      order.setNew(false);
    }
  }
  try {
    order.setMessage(message.getField(new Text()).getValue());
  }
 catch (  FieldNotFound e) {
  }
  orderTableModel.updateOrder(order,message.getField(new ClOrdID()).getValue());
  observableOrder.update(order);
  if (fillSize.compareTo(BigDecimal.ZERO) > 0) {
    Execution execution=new Execution();
    execution.setExchangeID(sessionID + message.getField(new ExecID()).getValue());
    execution.setSymbol(message.getField(new Symbol()).getValue());
    execution.setQuantity(fillSize.intValue());
    if (message.isSetField(LastPx.FIELD)) {
      execution.setPrice(new Double(message.getString(LastPx.FIELD)));
    }
    Side side=(Side)message.getField(new Side());
    execution.setSide(FIXSideToSide(side));
    executionTableModel.addExecution(execution);
  }
}","private void executionReport(Message message,SessionID sessionID) throws FieldNotFound {
  ExecID execID=(ExecID)message.getField(new ExecID());
  if (alreadyProcessed(execID,sessionID))   return;
  Order order=orderTableModel.getOrder(message.getField(new ClOrdID()).getValue());
  if (order == null) {
    return;
  }
  BigDecimal fillSize=BigDecimal.ZERO;
  if (message.isSetField(LastShares.FIELD)) {
    LastShares lastShares=new LastShares();
    message.getField(lastShares);
    fillSize=new BigDecimal(""String_Node_Str"" + lastShares.getValue());
  }
 else {
    LeavesQty leavesQty=new LeavesQty();
    message.getField(leavesQty);
    fillSize=new BigDecimal(order.getQuantity()).subtract(new BigDecimal(""String_Node_Str"" + leavesQty.getValue()));
  }
  if (fillSize.compareTo(BigDecimal.ZERO) > 0) {
    order.setOpen(order.getOpen() - (int)Double.parseDouble(fillSize.toPlainString()));
    order.setExecuted(new Integer(message.getString(CumQty.FIELD)));
    order.setAvgPx(new Double(message.getString(AvgPx.FIELD)));
  }
  OrdStatus ordStatus=(OrdStatus)message.getField(new OrdStatus());
  if (ordStatus.valueEquals(OrdStatus.REJECTED)) {
    order.setRejected(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.CANCELED) || ordStatus.valueEquals(OrdStatus.DONE_FOR_DAY)) {
    order.setCanceled(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.NEW)) {
    if (order.isNew()) {
      order.setNew(false);
    }
  }
  try {
    order.setMessage(message.getField(new Text()).getValue());
  }
 catch (  FieldNotFound e) {
  }
  orderTableModel.updateOrder(order,message.getField(new ClOrdID()).getValue());
  observableOrder.update(order);
  if (fillSize.compareTo(BigDecimal.ZERO) > 0) {
    Execution execution=new Execution();
    execution.setExchangeID(sessionID + message.getField(new ExecID()).getValue());
    execution.setSymbol(message.getField(new Symbol()).getValue());
    execution.setQuantity(fillSize.intValue());
    if (message.isSetField(LastPx.FIELD)) {
      execution.setPrice(new Double(message.getString(LastPx.FIELD)));
    }
    Side side=(Side)message.getField(new Side());
    execution.setSide(FIXSideToSide(side));
    executionTableModel.addExecution(execution);
  }
}",0.9838316722037652
63431,"private void sendMessage(SessionID sessionID,Message message){
  try {
    Session.sendToTarget(message,sessionID);
  }
 catch (  SessionNotFound e) {
    log.error(e.getMessage(),e);
  }
}","private void sendMessage(SessionID sessionID,Message message){
  try {
    Session session=Session.lookupSession(sessionID);
    if (session == null) {
      throw new SessionNotFound(sessionID.toString());
    }
    DataDictionary dataDictionary=session.getDataDictionary();
    if (dataDictionary != null) {
      try {
        session.getDataDictionary().validate(message,true);
      }
 catch (      Exception e) {
        LogUtil.logThrowable(sessionID,""String_Node_Str"" + e.getMessage(),e);
        return;
      }
    }
    session.send(message);
  }
 catch (  SessionNotFound e) {
    log.error(e.getMessage(),e);
  }
}",0.2450980392156862
63432,"public void onMessage(quickfix.fix44.NewOrderSingle order,SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {
  try {
    validateOrder(order);
    OrderQty orderQty=order.getOrderQty();
    Price price=getPrice(order);
    quickfix.fix43.ExecutionReport accept=new quickfix.fix43.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.NEW),order.getSide(),new LeavesQty(0),new CumQty(0),new AvgPx(0));
    accept.set(order.getClOrdID());
    sendMessage(sessionID,accept);
    if (isOrderExecutable(order,price)) {
      quickfix.fix44.ExecutionReport executionReport=new quickfix.fix44.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.FILLED),order.getSide(),new LeavesQty(0),new CumQty(orderQty.getValue()),new AvgPx(price.getValue()));
      executionReport.set(order.getClOrdID());
      executionReport.set(order.getSymbol());
      executionReport.set(orderQty);
      executionReport.set(new LastQty(orderQty.getValue()));
      executionReport.set(new LastPx(price.getValue()));
      sendMessage(sessionID,executionReport);
    }
  }
 catch (  RuntimeException e) {
    LogUtil.logThrowable(sessionID,e.getMessage(),e);
  }
}","public void onMessage(quickfix.fix44.NewOrderSingle order,SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {
  try {
    validateOrder(order);
    OrderQty orderQty=order.getOrderQty();
    Price price=getPrice(order);
    quickfix.fix44.ExecutionReport accept=new quickfix.fix44.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.NEW),order.getSide(),new LeavesQty(order.getOrderQty().getValue()),new CumQty(0),new AvgPx(0));
    accept.set(order.getClOrdID());
    accept.set(order.getSymbol());
    sendMessage(sessionID,accept);
    if (isOrderExecutable(order,price)) {
      quickfix.fix44.ExecutionReport executionReport=new quickfix.fix44.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.FILLED),order.getSide(),new LeavesQty(0),new CumQty(orderQty.getValue()),new AvgPx(price.getValue()));
      executionReport.set(order.getClOrdID());
      executionReport.set(order.getSymbol());
      executionReport.set(orderQty);
      executionReport.set(new LastQty(orderQty.getValue()));
      executionReport.set(new LastPx(price.getValue()));
      sendMessage(sessionID,executionReport);
    }
  }
 catch (  RuntimeException e) {
    LogUtil.logThrowable(sessionID,e.getMessage(),e);
  }
}",0.9727414330218068
63433,"public void run(){
  try {
    MsgType msgType=new MsgType();
    if (isAvailable) {
      if (isMissingField) {
        sendBusinessReject(message,BusinessRejectReason.CONDITIONALLY_REQUIRED_FIELD_MISSING,""String_Node_Str"");
      }
 else       if (message.getHeader().isSetField(DeliverToCompID.FIELD)) {
        sendSessionReject(message,SessionRejectReason.COMPID_PROBLEM);
      }
 else       if (message.getHeader().getField(msgType).valueEquals(""String_Node_Str"")) {
        executionReport(message,sessionID);
      }
 else       if (message.getHeader().getField(msgType).valueEquals(""String_Node_Str"")) {
        cancelReject(message,sessionID);
      }
 else {
        sendBusinessReject(message,BusinessRejectReason.UNSUPPORTED_MESSAGE_TYPE,""String_Node_Str"");
      }
    }
 else {
      sendBusinessReject(message,BusinessRejectReason.APPLICATION_NOT_AVAILABLE,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.out.println(e);
  }
}","public void run(){
  try {
    MsgType msgType=new MsgType();
    if (isAvailable) {
      if (isMissingField) {
        sendBusinessReject(message,BusinessRejectReason.CONDITIONALLY_REQUIRED_FIELD_MISSING,""String_Node_Str"");
      }
 else       if (message.getHeader().isSetField(DeliverToCompID.FIELD)) {
        sendSessionReject(message,SessionRejectReason.COMPID_PROBLEM);
      }
 else       if (message.getHeader().getField(msgType).valueEquals(""String_Node_Str"")) {
        executionReport(message,sessionID);
      }
 else       if (message.getHeader().getField(msgType).valueEquals(""String_Node_Str"")) {
        cancelReject(message,sessionID);
      }
 else {
        sendBusinessReject(message,BusinessRejectReason.UNSUPPORTED_MESSAGE_TYPE,""String_Node_Str"");
      }
    }
 else {
      sendBusinessReject(message,BusinessRejectReason.APPLICATION_NOT_AVAILABLE,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9864583333333332
63434,"private void executionReport(Message message,SessionID sessionID) throws FieldNotFound {
  ExecID execID=(ExecID)message.getField(new ExecID());
  if (alreadyProcessed(execID,sessionID))   return;
  Order order=orderTableModel.getOrder(message.getField(new ClOrdID()).getValue());
  if (order == null) {
    return;
  }
  double fillSize=0;
  try {
    LastShares lastShares=new LastShares();
    message.getField(lastShares);
    fillSize=lastShares.getValue();
  }
 catch (  FieldNotFound e) {
    LeavesQty leavesQty=new LeavesQty();
    message.getField(leavesQty);
    fillSize=order.getQuantity() - leavesQty.getValue();
  }
  if (fillSize > 0) {
    order.setOpen((int)(order.getOpen() - fillSize));
    order.setExecuted((int)message.getField(new CumQty()).getValue());
    order.setAvgPx(message.getField(new AvgPx()).getValue());
  }
  OrdStatus ordStatus=(OrdStatus)message.getField(new OrdStatus());
  if (ordStatus.valueEquals(OrdStatus.REJECTED)) {
    order.setRejected(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.CANCELED) || ordStatus.valueEquals(OrdStatus.DONE_FOR_DAY)) {
    order.setCanceled(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.NEW)) {
    if (order.isNew()) {
      order.setNew(false);
    }
  }
  try {
    order.setMessage(message.getField(new Text()).getValue());
  }
 catch (  FieldNotFound e) {
  }
  orderTableModel.updateOrder(order,message.getField(new ClOrdID()).getValue());
  observableOrder.update(order);
  if (fillSize > 0) {
    Execution execution=new Execution();
    execution.setExchangeID(sessionID + message.getField(new ExecID()).getValue());
    execution.setSymbol(message.getField(new Symbol()).getValue());
    execution.setQuantity((int)fillSize);
    execution.setPrice(message.getField(new LastPx()).getValue());
    Side side=(Side)message.getField(new Side());
    execution.setSide(FIXSideToSide(side));
    executionTableModel.addExecution(execution);
  }
}","private void executionReport(Message message,SessionID sessionID) throws FieldNotFound {
  ExecID execID=(ExecID)message.getField(new ExecID());
  if (alreadyProcessed(execID,sessionID))   return;
  Order order=orderTableModel.getOrder(message.getField(new ClOrdID()).getValue());
  if (order == null) {
    return;
  }
  double fillSize=0;
  try {
    LastShares lastShares=new LastShares();
    message.getField(lastShares);
    fillSize=lastShares.getValue();
  }
 catch (  FieldNotFound e) {
    LeavesQty leavesQty=new LeavesQty();
    message.getField(leavesQty);
    fillSize=order.getQuantity() - leavesQty.getValue();
  }
  if (fillSize > 0) {
    order.setOpen((int)(order.getOpen() - fillSize));
    order.setExecuted((int)message.getField(new CumQty()).getValue());
    order.setAvgPx(message.getField(new AvgPx()).getValue());
  }
  OrdStatus ordStatus=(OrdStatus)message.getField(new OrdStatus());
  if (ordStatus.valueEquals(OrdStatus.REJECTED)) {
    order.setRejected(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.CANCELED) || ordStatus.valueEquals(OrdStatus.DONE_FOR_DAY)) {
    order.setCanceled(true);
    order.setOpen(0);
  }
 else   if (ordStatus.valueEquals(OrdStatus.NEW)) {
    if (order.isNew()) {
      order.setNew(false);
    }
  }
  try {
    order.setMessage(message.getField(new Text()).getValue());
  }
 catch (  FieldNotFound e) {
  }
  orderTableModel.updateOrder(order,message.getField(new ClOrdID()).getValue());
  observableOrder.update(order);
  if (fillSize > 0) {
    Execution execution=new Execution();
    execution.setExchangeID(sessionID + message.getField(new ExecID()).getValue());
    execution.setSymbol(message.getField(new Symbol()).getValue());
    execution.setQuantity((int)fillSize);
    if (message.isSetField(LastPx.FIELD)) {
      execution.setPrice(message.getField(new LastPx()).getValue());
    }
    Side side=(Side)message.getField(new Side());
    execution.setSide(FIXSideToSide(side));
    executionTableModel.addExecution(execution);
  }
}",0.981122702434178
63435,"public void onMessage(quickfix.fix44.NewOrderSingle order,SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {
  validateOrder(order);
  OrderQty orderQty=order.getOrderQty();
  Price price=getPrice(order);
  quickfix.fix43.ExecutionReport accept=new quickfix.fix43.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.NEW),order.getSide(),new LeavesQty(0),new CumQty(0),new AvgPx(0));
  accept.set(order.getClOrdID());
  sendMessage(sessionID,accept);
  if (isOrderExecutable(order,price)) {
    quickfix.fix44.ExecutionReport executionReport=new quickfix.fix44.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.FILLED),order.getSide(),new LeavesQty(0),new CumQty(orderQty.getValue()),new AvgPx(price.getValue()));
    executionReport.set(order.getClOrdID());
    executionReport.set(order.getSymbol());
    executionReport.set(orderQty);
    executionReport.set(new LastQty(orderQty.getValue()));
    executionReport.set(new LastPx(price.getValue()));
    sendMessage(sessionID,executionReport);
  }
}","public void onMessage(quickfix.fix44.NewOrderSingle order,SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {
  try {
    validateOrder(order);
    OrderQty orderQty=order.getOrderQty();
    Price price=getPrice(order);
    quickfix.fix43.ExecutionReport accept=new quickfix.fix43.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.NEW),order.getSide(),new LeavesQty(0),new CumQty(0),new AvgPx(0));
    accept.set(order.getClOrdID());
    sendMessage(sessionID,accept);
    if (isOrderExecutable(order,price)) {
      quickfix.fix44.ExecutionReport executionReport=new quickfix.fix44.ExecutionReport(genOrderID(),genExecID(),new ExecType(ExecType.FILL),new OrdStatus(OrdStatus.FILLED),order.getSide(),new LeavesQty(0),new CumQty(orderQty.getValue()),new AvgPx(price.getValue()));
      executionReport.set(order.getClOrdID());
      executionReport.set(order.getSymbol());
      executionReport.set(orderQty);
      executionReport.set(new LastQty(orderQty.getValue()));
      executionReport.set(new LastPx(price.getValue()));
      sendMessage(sessionID,executionReport);
    }
  }
 catch (  RuntimeException e) {
    LogUtil.logThrowable(sessionID,e.getMessage(),e);
  }
}",0.9443507588532885
63436,"/** 
 * Predicate for determining if a field is valid for a given message type.
 * @param msgType the message type
 * @param field the tag
 * @return true if field is defined for message, false otherwise.
 */
public boolean isMsgField(String msgType,int field){
  Set fields=(Set)messageFields.get(msgType);
  return fields != null & fields.contains(new Integer(field));
}","/** 
 * Predicate for determining if a field is valid for a given message type.
 * @param msgType the message type
 * @param field the tag
 * @return true if field is defined for message, false otherwise.
 */
public boolean isMsgField(String msgType,int field){
  Set fields=(Set)messageFields.get(msgType);
  return fields != null && fields.contains(new Integer(field));
}",0.9986577181208054
63437,"public void testDictionary() throws Exception {
  DataDictionary dd=getDictionary();
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getFieldName(15));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getValueName(4,""String_Node_Str""));
  assertEquals(""String_Node_Str"",FieldType.String,dd.getFieldTypeEnum(1));
  assertEquals(""String_Node_Str"",FixVersions.BEGINSTRING_FIX44,dd.getVersion());
  assertFalse(""String_Node_Str"",dd.hasFieldValue(1));
  assertTrue(""String_Node_Str"",dd.hasFieldValue(4));
  assertFalse(""String_Node_Str"",dd.isField(9999));
  assertTrue(""String_Node_Str"",dd.isField(4));
  assertTrue(""String_Node_Str"",!dd.isFieldValue(4,""String_Node_Str""));
  assertTrue(""String_Node_Str"",dd.isFieldValue(4,""String_Node_Str""));
  assertTrue(""String_Node_Str"",dd.isGroup(""String_Node_Str"",384));
  assertFalse(""String_Node_Str"",dd.isGroup(""String_Node_Str"",1));
  assertNotNull(""String_Node_Str"",dd.getGroup(""String_Node_Str"",232));
  assertTrue(""String_Node_Str"",dd.isHeaderField(8));
  assertFalse(""String_Node_Str"",dd.isHeaderField(1));
  assertTrue(""String_Node_Str"",dd.isTrailerField(89));
  assertFalse(""String_Node_Str"",dd.isTrailerField(1));
  assertTrue(""String_Node_Str"",dd.isMsgField(""String_Node_Str"",98));
  assertFalse(""String_Node_Str"",dd.isMsgField(""String_Node_Str"",1));
  assertTrue(""String_Node_Str"",dd.isMsgField(""String_Node_Str"",235));
  assertTrue(""String_Node_Str"",dd.isMsgType(""String_Node_Str""));
  assertFalse(""String_Node_Str"",dd.isMsgType(""String_Node_Str""));
  assertTrue(""String_Node_Str"",dd.isRequiredField(""String_Node_Str"",98));
  assertFalse(""String_Node_Str"",dd.isRequiredField(""String_Node_Str"",95));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getFieldName(1));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getMsgType(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getMsgType(""String_Node_Str""));
}","public void testDictionary() throws Exception {
  DataDictionary dd=getDictionary();
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getFieldName(15));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getValueName(4,""String_Node_Str""));
  assertEquals(""String_Node_Str"",FieldType.String,dd.getFieldTypeEnum(1));
  assertEquals(""String_Node_Str"",FixVersions.BEGINSTRING_FIX44,dd.getVersion());
  assertFalse(""String_Node_Str"",dd.hasFieldValue(1));
  assertTrue(""String_Node_Str"",dd.hasFieldValue(4));
  assertFalse(""String_Node_Str"",dd.isField(9999));
  assertTrue(""String_Node_Str"",dd.isField(4));
  assertTrue(""String_Node_Str"",!dd.isFieldValue(4,""String_Node_Str""));
  assertTrue(""String_Node_Str"",dd.isFieldValue(4,""String_Node_Str""));
  assertTrue(""String_Node_Str"",dd.isGroup(""String_Node_Str"",384));
  assertFalse(""String_Node_Str"",dd.isGroup(""String_Node_Str"",1));
  assertNotNull(""String_Node_Str"",dd.getGroup(""String_Node_Str"",232));
  assertTrue(""String_Node_Str"",dd.isHeaderField(8));
  assertFalse(""String_Node_Str"",dd.isHeaderField(1));
  assertTrue(""String_Node_Str"",dd.isTrailerField(89));
  assertFalse(""String_Node_Str"",dd.isTrailerField(1));
  assertTrue(""String_Node_Str"",dd.isMsgField(""String_Node_Str"",98));
  assertFalse(""String_Node_Str"",dd.isMsgField(""String_Node_Str"",1));
  assertTrue(""String_Node_Str"",dd.isMsgField(""String_Node_Str"",235));
  assertTrue(""String_Node_Str"",dd.isMsgType(""String_Node_Str""));
  assertFalse(""String_Node_Str"",dd.isMsgType(""String_Node_Str""));
  assertTrue(""String_Node_Str"",dd.isRequiredField(""String_Node_Str"",98));
  assertFalse(""String_Node_Str"",dd.isRequiredField(""String_Node_Str"",95));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getFieldName(1));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getMsgType(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",dd.getMsgType(""String_Node_Str""));
  assertFalse(dd.isMsgField(""String_Node_Str"",1));
}",0.986784140969163
63438,"private void createSessionAndGenerateException(LogFactory mockLogFactory) throws ConfigError, FieldConvertError {
  SessionSettings settings=new SessionSettings();
  settings.setString(Session.SETTING_START_DAY,""String_Node_Str"");
  settings.setString(Session.SETTING_START_TIME,""String_Node_Str"");
  settings.setString(Session.SETTING_END_DAY,""String_Node_Str"");
  settings.setString(Session.SETTING_END_TIME,""String_Node_Str"");
  SessionID sessionID=new SessionID(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SessionSchedule schedule=new SessionSchedule(settings,sessionID);
  new Session(null,new MessageStoreFactory(){
    public MessageStore create(    SessionID sessionID){
      try {
        return new MemoryStore(){
          public Date getCreationTime() throws IOException {
            throw new IOException(""String_Node_Str"");
          }
        }
;
      }
 catch (      IOException e) {
        return null;
      }
    }
  }
,null,null,schedule,mockLogFactory,null,0);
}","private void createSessionAndGenerateException(LogFactory mockLogFactory) throws ConfigError, FieldConvertError {
  SessionSettings settings=new SessionSettings();
  settings.setString(Session.SETTING_START_TIME,""String_Node_Str"");
  settings.setString(Session.SETTING_END_TIME,""String_Node_Str"");
  SessionID sessionID=new SessionID(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SessionSchedule schedule=new SessionSchedule(settings,sessionID);
  new Session(null,new MessageStoreFactory(){
    public MessageStore create(    SessionID sessionID){
      try {
        return new MemoryStore(){
          public Date getCreationTime() throws IOException {
            throw new IOException(""String_Node_Str"");
          }
        }
;
      }
 catch (      IOException e) {
        return null;
      }
    }
  }
,null,null,schedule,mockLogFactory,null,0);
}",0.9251336898395722
63439,"private ObjectName createSessionName(Session session) throws MalformedObjectNameException {
  TreeMap properties=new TreeMap();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  SessionID sessionID=session.getSessionID();
  ObjectNameFactory nameFactory=new ObjectNameFactory();
  nameFactory.addProperty(""String_Node_Str"",""String_Node_Str"");
  addSessionIdProperties(sessionID,nameFactory);
  String sessionQualifier=sessionID.getSessionQualifier();
  if (!""String_Node_Str"".equals(sessionQualifier)) {
    nameFactory.addProperty(""String_Node_Str"",sessionQualifier);
  }
  return nameFactory.createName();
}","private ObjectName createSessionName(Session session) throws MalformedObjectNameException {
  TreeMap properties=new TreeMap();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  SessionID sessionID=session.getSessionID();
  ObjectNameFactory nameFactory=new ObjectNameFactory();
  nameFactory.addProperty(""String_Node_Str"",""String_Node_Str"");
  addSessionIdProperties(sessionID,nameFactory);
  return nameFactory.createName();
}",0.768791627021884
63440,"private void addSessionIdProperties(SessionID sessionID,ObjectNameFactory nameFactory){
  nameFactory.addProperty(""String_Node_Str"",sessionID.getBeginString());
  nameFactory.addProperty(""String_Node_Str"",sessionID.getSenderCompID());
  nameFactory.addProperty(""String_Node_Str"",sessionID.getTargetCompID());
  nameFactory.addProperty(""String_Node_Str"",sessionID.getSessionQualifier());
}","private void addSessionIdProperties(SessionID sessionID,ObjectNameFactory nameFactory){
  nameFactory.addProperty(""String_Node_Str"",sessionID.getBeginString());
  nameFactory.addProperty(""String_Node_Str"",sessionID.getSenderCompID());
  nameFactory.addProperty(""String_Node_Str"",sessionID.getTargetCompID());
  String sessionQualifier=sessionID.getSessionQualifier();
  if (!""String_Node_Str"".equals(sessionQualifier)) {
    nameFactory.addProperty(""String_Node_Str"",sessionQualifier);
  }
}",0.7508532423208191
63441,"private void load(InputStream inputStream) throws ConfigError {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  Document document;
  try {
    DocumentBuilder builder=factory.newDocumentBuilder();
    document=builder.parse(inputStream);
  }
 catch (  Throwable e) {
    throw new ConfigError(""String_Node_Str"",e);
  }
  Element documentElement=document.getDocumentElement();
  if (!documentElement.getNodeName().equals(""String_Node_Str"")) {
    throw new ConfigError(""String_Node_Str"");
  }
  if (!documentElement.hasAttribute(""String_Node_Str"")) {
    throw new ConfigError(""String_Node_Str"");
  }
  if (!documentElement.hasAttribute(""String_Node_Str"")) {
    throw new ConfigError(""String_Node_Str"");
  }
  setVersion(""String_Node_Str"" + documentElement.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ documentElement.getAttribute(""String_Node_Str""));
  NodeList componentsNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (componentsNode.getLength() > 0) {
    NodeList componentNodes=componentsNode.item(0).getChildNodes();
    for (int i=0; i < componentNodes.getLength(); i++) {
      Node componentNode=componentNodes.item(i);
      if (componentNode.getNodeName().equals(""String_Node_Str"")) {
        String name=getAttribute(componentNode,""String_Node_Str"");
        if (name == null) {
          throw new ConfigError(""String_Node_Str"");
        }
        components.put(name,componentNode);
      }
    }
  }
  NodeList fieldsNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (fieldsNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList fieldNodes=fieldsNode.item(0).getChildNodes();
  if (fieldNodes.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  for (int i=0; i < fieldNodes.getLength(); i++) {
    Node fieldNode=fieldNodes.item(i);
    if (fieldNode.getNodeName().equals(""String_Node_Str"")) {
      String name=getAttribute(fieldNode,""String_Node_Str"");
      if (name == null) {
        throw new ConfigError(""String_Node_Str"");
      }
      String number=getAttribute(fieldNode,""String_Node_Str"");
      if (number == null) {
        throw new ConfigError(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      int num=Integer.parseInt(number);
      String type=getAttribute(fieldNode,""String_Node_Str"");
      if (type == null) {
        throw new ConfigError(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      addField(num);
      addFieldType(num,FieldType.fromName(getVersion(),type));
      addFieldName(num,name);
      NodeList valueNodes=fieldNode.getChildNodes();
      for (int j=0; j < valueNodes.getLength(); j++) {
        Node valueNode=valueNodes.item(j);
        if (valueNode.getNodeName().equals(""String_Node_Str"")) {
          String enumeration=getAttribute(valueNode,""String_Node_Str"");
          if (enumeration == null) {
            throw new ConfigError(""String_Node_Str"" + name);
          }
          addFieldValue(num,enumeration);
          String description=getAttribute(valueNode,""String_Node_Str"");
          if (description != null) {
            addValueName(num,enumeration,description);
          }
        }
      }
    }
  }
  NodeList headerNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (headerNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList headerFieldNodes=headerNode.item(0).getChildNodes();
  if (headerFieldNodes.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  for (int i=0; i < headerFieldNodes.getLength(); i++) {
    Node headerFieldNode=headerFieldNodes.item(i);
    String nodeName=headerFieldNode.getNodeName();
    if (nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"")) {
      String name=getAttribute(headerFieldNode,""String_Node_Str"");
      if (name == null) {
        throw new ConfigError(""String_Node_Str"" + nodeName + ""String_Node_Str"");
      }
      String required=""String_Node_Str"";
      addHeaderField(lookupXMLFieldNumber(document,name),required.equals(""String_Node_Str""));
    }
  }
  NodeList trailerNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (trailerNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList trailerFieldNodes=trailerNode.item(0).getChildNodes();
  for (int i=0; i < trailerFieldNodes.getLength(); i++) {
    Node trailerFieldNode=trailerFieldNodes.item(i);
    String nodeName=trailerFieldNode.getNodeName();
    if (nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"")) {
      String name=getAttribute(trailerFieldNode,""String_Node_Str"");
      if (name == null) {
        throw new ConfigError(""String_Node_Str"" + nodeName + ""String_Node_Str"");
      }
      String required=""String_Node_Str"";
      addTrailerField(lookupXMLFieldNumber(document,name),required.equals(""String_Node_Str""));
    }
  }
  NodeList messagesNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (messagesNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList messageNodes=messagesNode.item(0).getChildNodes();
  if (messageNodes.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  for (int i=0; i < messageNodes.getLength(); i++) {
    Node messageNode=messageNodes.item(i);
    if (messageNode.getNodeName().equals(""String_Node_Str"")) {
      String msgtype=getAttribute(messageNode,""String_Node_Str"");
      if (msgtype == null) {
        throw new ConfigError(""String_Node_Str"");
      }
      addMsgType(msgtype);
      String name=getAttribute(messageNode,""String_Node_Str"");
      if (name != null) {
        addValueName(MsgType.FIELD,msgtype,name);
      }
      NodeList messageFieldNodes=messageNode.getChildNodes();
      if (messageFieldNodes.getLength() == 0) {
        throw new ConfigError(""String_Node_Str"");
      }
      for (int j=0; j < messageFieldNodes.getLength(); j++) {
        Node messageFieldNode=messageFieldNodes.item(j);
        if (messageFieldNode.getNodeName().equals(""String_Node_Str"") || messageFieldNode.getNodeName().equals(""String_Node_Str"")) {
          name=getAttribute(messageFieldNode,""String_Node_Str"");
          if (name == null) {
            throw new ConfigError(""String_Node_Str"");
          }
          int num=lookupXMLFieldNumber(document,name);
          addMsgField(msgtype,num);
          String required=getAttribute(messageFieldNode,""String_Node_Str"",NO);
          if (required == null) {
            throw new ConfigError(""String_Node_Str"" + messageFieldNode.getNodeName() + ""String_Node_Str"");
          }
          if (required.equalsIgnoreCase(""String_Node_Str"")) {
            addRequiredField(msgtype,num);
          }
        }
 else         if (messageFieldNode.getNodeName().equals(""String_Node_Str"")) {
          String required=getAttribute(messageFieldNode,""String_Node_Str"");
          if (required == null) {
            throw new ConfigError(""String_Node_Str"");
          }
          addXMLComponentFields(document,messageFieldNode,msgtype,this,required.equalsIgnoreCase(""String_Node_Str""));
        }
        if (messageFieldNode.getNodeName().equals(""String_Node_Str"")) {
          String required=getAttribute(messageFieldNode,""String_Node_Str"");
          if (required == null) {
            throw new ConfigError(""String_Node_Str"");
          }
          addXMLGroup(document,messageFieldNode,msgtype,this,required.equalsIgnoreCase(""String_Node_Str""));
        }
      }
    }
  }
}","private void load(InputStream inputStream) throws ConfigError {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  Document document;
  try {
    DocumentBuilder builder=factory.newDocumentBuilder();
    document=builder.parse(inputStream);
  }
 catch (  Throwable e) {
    throw new ConfigError(""String_Node_Str"",e);
  }
  Element documentElement=document.getDocumentElement();
  if (!documentElement.getNodeName().equals(""String_Node_Str"")) {
    throw new ConfigError(""String_Node_Str"");
  }
  if (!documentElement.hasAttribute(""String_Node_Str"")) {
    throw new ConfigError(""String_Node_Str"");
  }
  if (!documentElement.hasAttribute(""String_Node_Str"")) {
    throw new ConfigError(""String_Node_Str"");
  }
  setVersion(""String_Node_Str"" + documentElement.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ documentElement.getAttribute(""String_Node_Str""));
  NodeList componentsNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (componentsNode.getLength() > 0) {
    NodeList componentNodes=componentsNode.item(0).getChildNodes();
    for (int i=0; i < componentNodes.getLength(); i++) {
      Node componentNode=componentNodes.item(i);
      if (componentNode.getNodeName().equals(""String_Node_Str"")) {
        String name=getAttribute(componentNode,""String_Node_Str"");
        if (name == null) {
          throw new ConfigError(""String_Node_Str"");
        }
        components.put(name,componentNode);
      }
    }
  }
  NodeList fieldsNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (fieldsNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList fieldNodes=fieldsNode.item(0).getChildNodes();
  if (fieldNodes.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  for (int i=0; i < fieldNodes.getLength(); i++) {
    Node fieldNode=fieldNodes.item(i);
    if (fieldNode.getNodeName().equals(""String_Node_Str"")) {
      String name=getAttribute(fieldNode,""String_Node_Str"");
      if (name == null) {
        throw new ConfigError(""String_Node_Str"");
      }
      String number=getAttribute(fieldNode,""String_Node_Str"");
      if (number == null) {
        throw new ConfigError(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      int num=Integer.parseInt(number);
      String type=getAttribute(fieldNode,""String_Node_Str"");
      if (type == null) {
        throw new ConfigError(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      addField(num);
      addFieldType(num,FieldType.fromName(getVersion(),type));
      addFieldName(num,name);
      NodeList valueNodes=fieldNode.getChildNodes();
      for (int j=0; j < valueNodes.getLength(); j++) {
        Node valueNode=valueNodes.item(j);
        if (valueNode.getNodeName().equals(""String_Node_Str"")) {
          String enumeration=getAttribute(valueNode,""String_Node_Str"");
          if (enumeration == null) {
            throw new ConfigError(""String_Node_Str"" + name);
          }
          addFieldValue(num,enumeration);
          String description=getAttribute(valueNode,""String_Node_Str"");
          if (description != null) {
            addValueName(num,enumeration,description);
          }
        }
      }
    }
  }
  NodeList headerNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (headerNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList headerFieldNodes=headerNode.item(0).getChildNodes();
  if (headerFieldNodes.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  for (int i=0; i < headerFieldNodes.getLength(); i++) {
    Node headerFieldNode=headerFieldNodes.item(i);
    String nodeName=headerFieldNode.getNodeName();
    if (nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"")) {
      String name=getAttribute(headerFieldNode,""String_Node_Str"");
      if (name == null) {
        throw new ConfigError(""String_Node_Str"" + nodeName + ""String_Node_Str"");
      }
      String required=getAttribute(headerFieldNode,""String_Node_Str"",NO);
      if (required == null) {
        throw new ConfigError(""String_Node_Str"" + headerFieldNode.getNodeName() + ""String_Node_Str"");
      }
      addHeaderField(lookupXMLFieldNumber(document,name),required.equalsIgnoreCase(""String_Node_Str""));
    }
  }
  NodeList trailerNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (trailerNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList trailerFieldNodes=trailerNode.item(0).getChildNodes();
  for (int i=0; i < trailerFieldNodes.getLength(); i++) {
    Node trailerFieldNode=trailerFieldNodes.item(i);
    String nodeName=trailerFieldNode.getNodeName();
    if (nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"")) {
      String name=getAttribute(trailerFieldNode,""String_Node_Str"");
      if (name == null) {
        throw new ConfigError(""String_Node_Str"" + nodeName + ""String_Node_Str"");
      }
      String required=getAttribute(trailerFieldNode,""String_Node_Str"",NO);
      if (required == null) {
        throw new ConfigError(""String_Node_Str"" + trailerFieldNode.getNodeName() + ""String_Node_Str"");
      }
      addTrailerField(lookupXMLFieldNumber(document,name),required.equalsIgnoreCase(""String_Node_Str""));
    }
  }
  NodeList messagesNode=documentElement.getElementsByTagName(""String_Node_Str"");
  if (messagesNode.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  NodeList messageNodes=messagesNode.item(0).getChildNodes();
  if (messageNodes.getLength() == 0) {
    throw new ConfigError(""String_Node_Str"");
  }
  for (int i=0; i < messageNodes.getLength(); i++) {
    Node messageNode=messageNodes.item(i);
    if (messageNode.getNodeName().equals(""String_Node_Str"")) {
      String msgtype=getAttribute(messageNode,""String_Node_Str"");
      if (msgtype == null) {
        throw new ConfigError(""String_Node_Str"");
      }
      addMsgType(msgtype);
      String name=getAttribute(messageNode,""String_Node_Str"");
      if (name != null) {
        addValueName(MsgType.FIELD,msgtype,name);
      }
      NodeList messageFieldNodes=messageNode.getChildNodes();
      if (messageFieldNodes.getLength() == 0) {
        throw new ConfigError(""String_Node_Str"");
      }
      for (int j=0; j < messageFieldNodes.getLength(); j++) {
        Node messageFieldNode=messageFieldNodes.item(j);
        if (messageFieldNode.getNodeName().equals(""String_Node_Str"") || messageFieldNode.getNodeName().equals(""String_Node_Str"")) {
          name=getAttribute(messageFieldNode,""String_Node_Str"");
          if (name == null) {
            throw new ConfigError(""String_Node_Str"");
          }
          int num=lookupXMLFieldNumber(document,name);
          addMsgField(msgtype,num);
          String required=getAttribute(messageFieldNode,""String_Node_Str"",NO);
          if (required == null) {
            throw new ConfigError(""String_Node_Str"" + messageFieldNode.getNodeName() + ""String_Node_Str"");
          }
          if (required.equalsIgnoreCase(""String_Node_Str"")) {
            addRequiredField(msgtype,num);
          }
        }
 else         if (messageFieldNode.getNodeName().equals(""String_Node_Str"")) {
          String required=getAttribute(messageFieldNode,""String_Node_Str"");
          if (required == null) {
            throw new ConfigError(""String_Node_Str"");
          }
          addXMLComponentFields(document,messageFieldNode,msgtype,this,required.equalsIgnoreCase(""String_Node_Str""));
        }
        if (messageFieldNode.getNodeName().equals(""String_Node_Str"")) {
          String required=getAttribute(messageFieldNode,""String_Node_Str"");
          if (required == null) {
            throw new ConfigError(""String_Node_Str"");
          }
          addXMLGroup(document,messageFieldNode,msgtype,this,required.equalsIgnoreCase(""String_Node_Str""));
        }
      }
    }
  }
}",0.9714730290456433
63442,"public void testMessageGroupCountValidation() throws InvalidMessage, Exception {
  String data=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  Message message=new Message();
  DataDictionary dd=DataDictionaryTest.getDictionary();
  message.fromString(data,dd,true);
  try {
    dd.validate(message);
    fail(""String_Node_Str"");
  }
 catch (  FieldException e) {
    String emsg=e.getMessage();
    assertNotNull(""String_Node_Str"",emsg);
    assertTrue(emsg.startsWith(""String_Node_Str""));
  }
}","public void testMessageGroupCountValidation() throws Exception {
  String data=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  Message message=new Message();
  DataDictionary dd=DataDictionaryTest.getDictionary();
  message.fromString(data,dd,true);
  try {
    dd.validate(message);
    fail(""String_Node_Str"");
  }
 catch (  FieldException e) {
    String emsg=e.getMessage();
    assertNotNull(""String_Node_Str"",emsg);
    assertTrue(emsg.startsWith(""String_Node_Str""));
  }
}",0.9845857418111752
63443,"private boolean isSameWeeklySession(Calendar timestamp1,Calendar timestamp2){
  if (!isWeeklySessionTime(timestamp1) || !isWeeklySessionTime(timestamp2)) {
    return false;
  }
  if (timestamp1.equals(timestamp2)) {
    return true;
  }
  int time1Range=timestamp1.get(Calendar.DAY_OF_WEEK) - startDay;
  int time2Range=timestamp2.get(Calendar.DAY_OF_WEEK) - startDay;
  if (time1Range == 0) {
    Calendar timeOnly=getTimeOnly(timestamp1,calendar1);
    if (timeOnly.before(startTime)) {
      time1Range=7;
    }
  }
  if (time2Range == 0) {
    Calendar timeOnly=getTimeOnly(timestamp2,calendar2);
    if (timeOnly.before(startTime)) {
      time2Range=7;
    }
  }
  timestamp1=(Calendar)timestamp1.clone();
  timestamp1.add(Calendar.DATE,-1 * time1Range);
  timestamp2=(Calendar)timestamp2.clone();
  timestamp2.add(Calendar.DATE,-1 * time2Range);
  return timestamp1.get(Calendar.YEAR) == timestamp2.get(Calendar.YEAR) && timestamp1.get(Calendar.DAY_OF_YEAR) == timestamp2.get(Calendar.DAY_OF_YEAR);
}","private boolean isSameWeeklySession(Calendar timestamp1,Calendar timestamp2){
  if (!isWeeklySessionTime(timestamp1) || !isWeeklySessionTime(timestamp2)) {
    return false;
  }
  long day1=timestamp1.getTimeInMillis() / 86400000L;
  long day2=timestamp2.getTimeInMillis() / 86400000L;
  return Math.abs(day1 - day2) < 7;
}",0.3395942900075131
63444,"public void testIsSameSessionWithDay() throws Exception {
  SessionSchedule schedule=new SessionSchedule(getUtcTime(3,0,0).getTime(),getUtcTime(18,0,0).getTime(),2,5);
  Calendar t1=getUtcTimeStamp(2004,6,27,3,0,0);
  Calendar t2=getUtcTimeStamp(2004,6,25,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,31,3,0,0);
  t2=getUtcTimeStamp(2004,6,27,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,27,3,0,0);
  t2=getUtcTimeStamp(2004,6,27,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2004,6,26,10,0,0);
  t2=getUtcTimeStamp(2004,6,27,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2004,6,27,10,0,0);
  t2=getUtcTimeStamp(2004,6,29,2,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2004,6,27,10,0,0);
  t2=getUtcTimeStamp(2004,6,20,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,27,2,0,0);
  t2=getUtcTimeStamp(2004,6,20,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,26,2,0,0);
  t2=getUtcTimeStamp(2004,6,19,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
}","public void testIsSameSessionWithDay() throws Exception {
  SessionSchedule schedule=new SessionSchedule(getUtcTime(3,0,0).getTime(),getUtcTime(18,0,0).getTime(),2,5);
  Calendar t1=getUtcTimeStamp(2004,6,27,3,0,0);
  Calendar t2=getUtcTimeStamp(2004,6,25,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,31,3,0,0);
  t2=getUtcTimeStamp(2004,6,27,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,27,3,0,0);
  t2=getUtcTimeStamp(2004,6,27,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2004,6,26,10,0,0);
  t2=getUtcTimeStamp(2004,6,27,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2004,6,27,10,0,0);
  t2=getUtcTimeStamp(2004,6,29,2,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2004,6,27,10,0,0);
  t2=getUtcTimeStamp(2004,6,20,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,27,2,0,0);
  t2=getUtcTimeStamp(2004,6,20,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2004,6,26,2,0,0);
  t2=getUtcTimeStamp(2004,6,19,3,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  Calendar startTime=getUtcTime(0,5,0);
  Calendar endTime=getUtcTime(23,45,0);
  int startDay=1;
  int endDay=7;
  schedule=new SessionSchedule(startTime.getTime(),endTime.getTime(),startDay,endDay);
  t1=getUtcTimeStamp(2006,4,4,0,0,0);
  t2=getUtcTimeStamp(2006,4,3,1,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2006,10,30,1,0,0);
  t2=getUtcTimeStamp(2006,10,31,1,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2006,12,31,10,10,10);
  t2=getUtcTimeStamp(2007,1,1,10,10,10);
  doIsSameSessionTest(schedule,t1,t2,true);
}",0.8034305317324185
63445,"int[] getOrderedFields(){
  if (orderedFieldsArray != null) {
    return orderedFieldsArray;
  }
  orderedFieldsArray=new int[orderedFields.size()];
  for (int i=0; i < orderedFields.size(); i++) {
    orderedFieldsArray[i]=((Integer)orderedFields.get(i)).intValue();
  }
  return orderedFieldsArray;
}","int[] getOrderedFields(){
  if (orderedFieldsArray == null) {
    orderedFieldsArray=new int[fields.size()];
    Iterator fieldItr=fields.iterator();
    int i=0;
    while (fieldItr.hasNext()) {
      orderedFieldsArray[i++]=((Integer)fieldItr.next()).intValue();
    }
  }
  return orderedFieldsArray;
}",0.4184514003294893
63446,"private void copyFrom(DataDictionary rhs){
  hasVersion=rhs.hasVersion;
  beginString=rhs.beginString;
  checkFieldsOutOfOrder=rhs.checkFieldsOutOfOrder;
  checkFieldsHaveValues=rhs.checkFieldsHaveValues;
  checkUserDefinedFields=rhs.checkUserDefinedFields;
  copyMap(messageFields,rhs.messageFields);
  copyMap(requiredFields,rhs.requiredFields);
  copyCollection(messages,rhs.messages);
  copyCollection(fields,rhs.fields);
  copyCollection(orderedFields,rhs.orderedFields);
  if (rhs.orderedFieldsArray != null) {
    orderedFieldsArray=new int[rhs.orderedFieldsArray.length];
    for (int i=0; i < rhs.orderedFieldsArray.length; i++) {
      orderedFieldsArray[i]=rhs.orderedFieldsArray[i];
    }
  }
  copyMap(headerFields,rhs.headerFields);
  copyMap(trailerFields,rhs.trailerFields);
  copyMap(fieldTypes,rhs.fieldTypes);
  copyMap(fieldValues,rhs.fieldValues);
  copyMap(fieldNames,rhs.fieldNames);
  copyMap(names,rhs.names);
  copyMap(valueNames,rhs.valueNames);
  copyMap(groups,rhs.groups);
  copyMap(components,rhs.components);
}","private void copyFrom(DataDictionary rhs){
  hasVersion=rhs.hasVersion;
  beginString=rhs.beginString;
  checkFieldsOutOfOrder=rhs.checkFieldsOutOfOrder;
  checkFieldsHaveValues=rhs.checkFieldsHaveValues;
  checkUserDefinedFields=rhs.checkUserDefinedFields;
  copyMap(messageFields,rhs.messageFields);
  copyMap(requiredFields,rhs.requiredFields);
  copyCollection(messages,rhs.messages);
  copyCollection(fields,rhs.fields);
  copyMap(headerFields,rhs.headerFields);
  copyMap(trailerFields,rhs.trailerFields);
  copyMap(fieldTypes,rhs.fieldTypes);
  copyMap(fieldValues,rhs.fieldValues);
  copyMap(fieldNames,rhs.fieldNames);
  copyMap(names,rhs.names);
  copyMap(valueNames,rhs.valueNames);
  copyMap(groups,rhs.groups);
  copyMap(components,rhs.components);
}",0.4797783933518005
63447,"private void setGroupCount(int countTag,int groupSize){
  try {
    IntField count;
    if (groupSize == 1) {
      count=new IntField(countTag,1);
      setField(countTag,count);
    }
 else {
      count=getIntField(countTag);
    }
    count.setValue(groupSize);
  }
 catch (  FieldNotFound e) {
    throw new RuntimeError(e);
  }
}","private void setGroupCount(int countTag,int groupSize){
  try {
    StringField count;
    if (groupSize == 1) {
      count=new StringField(countTag,""String_Node_Str"");
      setField(countTag,count);
    }
 else {
      count=getField(countTag);
    }
    count.setValue(Integer.toString(groupSize));
  }
 catch (  FieldNotFound e) {
    throw new RuntimeError(e);
  }
}",0.9193776520509194
63448,"private void parseGroup(StringField field,DataDictionary dd,FieldMap parent) throws InvalidMessage {
  DataDictionary.GroupInfo rg=dd.getGroup(getMsgType(),field.getField());
  int groupField=field.getField();
  int firstField=rg.getDelimeterField();
  boolean firstFieldFound=false;
  Group group=null;
  boolean inGroupParse=true;
  while (inGroupParse) {
    field=extractField(group,dd);
    if (field.getTag() == firstField) {
      if (group != null) {
        parent.addGroup(group);
      }
      group=new Group(groupField,firstField);
      group.setField(field);
      firstFieldFound=true;
    }
 else {
      if (rg.getDataDictionary().isGroup(getMsgType(),field.getField())) {
        if (firstFieldFound) {
          parseGroup(field,rg.getDataDictionary(),group);
        }
 else {
          throw new InvalidMessage(""String_Node_Str"" + groupField + ""String_Node_Str""+ firstField);
        }
      }
 else {
        if (rg.getDataDictionary().isField(field.getTag())) {
          group.setField(field);
        }
 else {
          if (group != null) {
            parent.addGroup(group);
          }
          pushBack(field);
          inGroupParse=false;
        }
      }
    }
  }
}","private void parseGroup(StringField field,DataDictionary dd,FieldMap parent) throws InvalidMessage {
  DataDictionary.GroupInfo rg=dd.getGroup(getMsgType(),field.getField());
  int groupCountTag=field.getField();
  parent.setField(groupCountTag,field);
  int firstField=rg.getDelimeterField();
  boolean firstFieldFound=false;
  Group group=null;
  boolean inGroupParse=true;
  while (inGroupParse) {
    field=extractField(group,dd);
    if (field.getTag() == firstField) {
      if (group != null) {
        parent.addGroup(group);
      }
      group=new Group(groupCountTag,firstField,rg.getDataDictionary().getOrderedFields());
      group.setField(field);
      firstFieldFound=true;
    }
 else {
      if (rg.getDataDictionary().isGroup(getMsgType(),field.getField())) {
        if (firstFieldFound) {
          parseGroup(field,rg.getDataDictionary(),group);
        }
 else {
          throw new InvalidMessage(""String_Node_Str"" + groupCountTag + ""String_Node_Str""+ firstField);
        }
      }
 else {
        if (rg.getDataDictionary().isField(field.getTag())) {
          group.setField(field);
        }
 else {
          if (group != null) {
            parent.addGroup(group);
          }
          pushBack(field);
          inGroupParse=false;
        }
      }
    }
  }
}",0.9386773547094188
63449,"/** 
 * @deprecated Use getFieldTag 
 * @return
 */
public int field(){
  return getFieldTag();
}","/** 
 * @deprecated Use getFieldTag 
 * @return the field's tag number
 */
public int field(){
  return getFieldTag();
}",0.8940092165898618
63450,"/** 
 * Create factory with explicit control of message categories.
 * @param incoming if true, log incoming messages
 * @param outgoing if true, log outgoing messages
 * @param events if true, log events
 * @param heartBeats if true, log heart beat messages (the default)
 */
public ScreenLogFactory(boolean incoming,boolean outgoing,boolean events,boolean logHeartBeats){
  this.incoming=incoming;
  this.outgoing=outgoing;
  this.events=events;
  this.heartBeats=logHeartBeats;
}","/** 
 * Create factory with explicit control of message categories.
 * @param incoming if true, log incoming messages
 * @param outgoing if true, log outgoing messages
 * @param events if true, log events
 * @param logHeartBeats if true, log heart beat messages (the default)
 */
public ScreenLogFactory(boolean incoming,boolean outgoing,boolean events,boolean logHeartBeats){
  this.incoming=incoming;
  this.outgoing=outgoing;
  this.events=events;
  this.heartBeats=logHeartBeats;
}",0.9948293691830404
63451,"private boolean isSameDailySession(Calendar timestamp1,Calendar timestamp2){
  if (!isDailySessionTime(timestamp1) || !isDailySessionTime(timestamp2)) {
    return false;
  }
  if (timestamp1.equals(timestamp2)) {
    return true;
  }
  Calendar date1=getDateOnly(timestamp1,calendar1);
  Calendar date2=getDateOnly(timestamp2,calendar2);
  if (startTime.before(endTime) || startTime.equals(endTime)) {
    return date1.equals(date2);
  }
 else {
    return Math.abs(timestamp1.getTimeInMillis() - timestamp2.getTimeInMillis()) < ONE_DAY_IN_MILLIS;
  }
}","private boolean isSameDailySession(Calendar timestamp1,Calendar timestamp2){
  if (!isDailySessionTime(timestamp1) || !isDailySessionTime(timestamp2)) {
    return false;
  }
  if (timestamp1.equals(timestamp2)) {
    return true;
  }
  Calendar date1=getDateOnly(timestamp1,calendar1);
  Calendar date2=getDateOnly(timestamp2,calendar2);
  if (startTime.before(endTime) || startTime.equals(endTime)) {
    return date1.equals(date2);
  }
 else {
    long sessionLength=ONE_DAY_IN_MILLIS - (startTime.getTimeInMillis() - endTime.getTimeInMillis());
    long timeInMillis1=timestamp1.getTimeInMillis();
    long timeInMillis2=timestamp2.getTimeInMillis();
    if (timestamp1.after(timestamp2)) {
      long delta=getTimeOnly(timestamp2,calendar1).getTimeInMillis() - startTime.getTimeInMillis();
      if (delta < 0) {
        delta=ONE_DAY_IN_MILLIS + delta;
      }
      return (timeInMillis1 - timeInMillis2) < (sessionLength - delta);
    }
 else {
      return (timeInMillis2 - timeInMillis1) < sessionLength;
    }
  }
}",0.6012658227848101
63452,"private void doIsSameSessionTest(SessionSchedule schedule,Calendar time1,Calendar time2,boolean isSameSession){
  assertEquals(""String_Node_Str"",schedule.isSameSession(time1,time2),isSameSession);
  assertEquals(""String_Node_Str"",schedule.isSameSession(time2,time1),isSameSession);
}","private void doIsSameSessionTest(SessionSchedule schedule,Calendar time1,Calendar time2,boolean isSameSession){
  assertEquals(""String_Node_Str"",isSameSession,schedule.isSameSession(time1,time2));
  assertEquals(""String_Node_Str"",isSameSession,schedule.isSameSession(time2,time1));
}",0.901060070671378
63453,"public void testIsSameSessionWithoutDay() throws Exception {
  Calendar start=getUtcTime(3,0,0);
  Calendar end=getUtcTime(18,0,0);
  SessionSchedule schedule=new SessionSchedule(start.getTime(),end.getTime(),-1,-1);
  Calendar t1=getUtcTimeStamp(2000,10,10,10,0,0);
  Calendar t2=getUtcTimeStamp(2000,10,10,10,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,10,0,0);
  t2=getUtcTimeStamp(2000,10,10,11,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,11,0,0);
  t2=getUtcTimeStamp(2000,10,10,10,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,10,10,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2000,10,10,10,0,0);
  t2=getUtcTimeStamp(2000,10,10,2,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2000,10,10,12,0,0);
  t2=getUtcTimeStamp(2000,10,11,12,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  start=getUtcTime(18,0,0);
  end=getUtcTime(13,0,0);
  schedule=new SessionSchedule(start.getTime(),end.getTime(),-1,-1);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,10,20,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,11,19,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,11,2,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,11,2,0,0);
  t2=getUtcTimeStamp(2000,10,10,19,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,11,21,0,0);
  t2=getUtcTimeStamp(2000,10,10,20,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  start=getUtcTime(6,0,0);
  end=getUtcTime(6,0,0);
  schedule=new SessionSchedule(start.getTime(),end.getTime(),-1,-1);
  t1=getUtcTimeStamp(2004,1,13,19,10,0);
  t2=getUtcTimeStamp(2004,10,14,19,06,0);
  doIsSameSessionTest(schedule,t1,t2,false);
}","public void testIsSameSessionWithoutDay() throws Exception {
  Calendar start=getUtcTime(3,0,0);
  Calendar end=getUtcTime(18,0,0);
  SessionSchedule schedule=new SessionSchedule(start.getTime(),end.getTime(),-1,-1);
  Calendar t1=getUtcTimeStamp(2000,10,10,10,0,0);
  Calendar t2=getUtcTimeStamp(2000,10,10,10,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,10,0,0);
  t2=getUtcTimeStamp(2000,10,10,11,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,11,0,0);
  t2=getUtcTimeStamp(2000,10,10,10,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,10,10,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2000,10,10,10,0,0);
  t2=getUtcTimeStamp(2000,10,10,2,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2000,10,10,12,0,0);
  t2=getUtcTimeStamp(2000,10,11,12,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  start=getUtcTime(18,0,0);
  end=getUtcTime(13,0,0);
  schedule=new SessionSchedule(start.getTime(),end.getTime(),-1,-1);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,10,20,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,11,19,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t1=getUtcTimeStamp(2000,10,10,19,0,0);
  t2=getUtcTimeStamp(2000,10,11,2,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,11,2,0,0);
  t2=getUtcTimeStamp(2000,10,10,19,0,0);
  doIsSameSessionTest(schedule,t1,t2,true);
  t1=getUtcTimeStamp(2000,10,11,21,0,0);
  t2=getUtcTimeStamp(2000,10,10,20,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  start=getUtcTime(10,0,0);
  end=getUtcTime(2,0,0);
  schedule=new SessionSchedule(start.getTime(),end.getTime(),-1,-1);
  t1=getUtcTimeStamp(2000,10,10,17,0,0);
  t2=getUtcTimeStamp(2000,10,10,1,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  t2=getUtcTimeStamp(2000,10,9,23,0,0);
  doIsSameSessionTest(schedule,t1,t2,false);
  start=getUtcTime(6,0,0);
  end=getUtcTime(6,0,0);
  schedule=new SessionSchedule(start.getTime(),end.getTime(),-1,-1);
  t1=getUtcTimeStamp(2004,1,13,19,10,0);
  t2=getUtcTimeStamp(2004,10,14,19,06,0);
  doIsSameSessionTest(schedule,t1,t2,false);
}",0.9230057803468208
63454,"private Token getToken(InputStream inputStream) throws IOException {
  if (ch == '\0') {
    ch=nextCharacter(inputStream);
  }
  skipWhitespace(inputStream);
  if (isLabelCharacter(ch)) {
    sb.setLength(0);
    do {
      sb.append(ch);
      ch=nextCharacter(inputStream);
    }
 while (isLabelCharacter(ch));
    return new Token(ID_TOKEN,sb.toString());
  }
 else   if (ch == '=') {
    ch=nextCharacter(inputStream);
    skipWhitespace(inputStream);
    if (isValueCharacter(ch)) {
      sb.setLength(0);
      do {
        sb.append(ch);
        ch=nextCharacter(inputStream);
      }
 while (isValueCharacter(ch));
      return new Token(VALUE_TOKEN,sb.toString().trim());
    }
  }
 else   if (ch == '[') {
    ch=nextCharacter(inputStream);
    Token id=getToken(inputStream);
    ch=nextCharacter(inputStream);
    return new Token(SECTION_TOKEN,id.getValue());
  }
 else   if (ch == '#') {
    do {
      ch=nextCharacter(inputStream);
    }
 while (!isNewLineCharacter(ch));
    return getToken(inputStream);
  }
  return null;
}","private Token getToken(InputStream inputStream) throws IOException {
  if (ch == '\0') {
    ch=nextCharacter(inputStream);
  }
  skipWhitespace(inputStream);
  if (isLabelCharacter(ch)) {
    sb.setLength(0);
    do {
      sb.append(ch);
      ch=nextCharacter(inputStream);
    }
 while (isLabelCharacter(ch));
    return new Token(ID_TOKEN,sb.toString());
  }
 else   if (ch == '=') {
    ch=nextCharacter(inputStream);
    sb.setLength(0);
    if (isValueCharacter(ch)) {
      do {
        sb.append(ch);
        ch=nextCharacter(inputStream);
      }
 while (isValueCharacter(ch));
    }
    return new Token(VALUE_TOKEN,sb.toString().trim());
  }
 else   if (ch == '[') {
    ch=nextCharacter(inputStream);
    Token id=getToken(inputStream);
    ch=nextCharacter(inputStream);
    return new Token(SECTION_TOKEN,id.getValue());
  }
 else   if (ch == '#') {
    do {
      ch=nextCharacter(inputStream);
    }
 while (!isNewLineCharacter(ch));
    return getToken(inputStream);
  }
  return null;
}",0.9468033186920448
63455,"private SessionSettings setUpSession(String extra) throws ConfigError {
  String data=new String();
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  if (extra != null) {
    data+=extra;
  }
  ByteArrayInputStream cfg=new ByteArrayInputStream(data.getBytes());
  SessionSettings settings=new SessionSettings(cfg);
  return settings;
}","private SessionSettings setUpSession(String extra) throws ConfigError {
  String data=new String();
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  if (extra != null) {
    data+=extra;
  }
  ByteArrayInputStream cfg=new ByteArrayInputStream(data.getBytes());
  SessionSettings settings=new SessionSettings(cfg);
  return settings;
}",0.9861609431060996
63456,"private String insertTimes(String message){
  Matcher matcher=TIME_PATTERN.matcher(message);
  while (matcher.find()) {
    long offset=0;
    if (matcher.group(2) != null) {
      offset=Long.parseLong(matcher.group(2)) * 1000L;
      if (matcher.group(2).equals(""String_Node_Str"")) {
        offset*=-1;
      }
    }
    String beginString=message.substring(2,9);
    boolean includeMillis=beginString.compareTo(FixVersions.BEGINSTRING_FIX42) >= 0;
    message=matcher.replaceFirst(UtcTimestampConverter.convert(new Date(System.currentTimeMillis() + (offset * 1000)),includeMillis));
    matcher=TIME_PATTERN.matcher(message);
  }
  return message;
}","private String insertTimes(String message){
  Matcher matcher=TIME_PATTERN.matcher(message);
  while (matcher.find()) {
    long offset=0;
    if (matcher.group(2) != null) {
      offset=Long.parseLong(matcher.group(2)) * 1000L;
      if (matcher.group(2).equals(""String_Node_Str"")) {
        offset*=-1;
      }
    }
    String beginString=message.substring(2,9);
    boolean includeMillis=beginString.compareTo(FixVersions.BEGINSTRING_FIX42) >= 0;
    message=matcher.replaceFirst(UtcTimestampConverter.convert(new Date(System.currentTimeMillis() + offset),includeMillis));
    matcher=TIME_PATTERN.matcher(message);
  }
  return message;
}",0.9838087895142636
63457,"/** 
 * Get the field tag given a field name.
 * @param name the field name
 * @return the tag
 */
public int getFieldTag(String name){
  Integer tag=(Integer)fieldNames.get(name);
  return tag != null ? tag.intValue() : -1;
}","/** 
 * Get the field tag given a field name.
 * @param name the field name
 * @return the tag
 */
public int getFieldTag(String name){
  Integer tag=(Integer)names.get(name);
  return tag != null ? tag.intValue() : -1;
}",0.9843400447427292
63458,"private boolean isLabelCharacter(char ch){
  return (byte)ch != -1 && ""String_Node_Str"".indexOf(ch) == -1;
}","private boolean isLabelCharacter(char ch){
  return !isEndOfStream(ch) && ""String_Node_Str"".indexOf(ch) == -1;
}",0.8818181818181818
63459,"private boolean isValueCharacter(char ch){
  return (byte)ch != -1 && ""String_Node_Str"".indexOf(ch) == -1;
}","private boolean isValueCharacter(char ch){
  return !isEndOfStream(ch) && !isNewLineCharacter(ch);
}",0.6346153846153846
63460,"private Token getToken(InputStream inputStream) throws IOException {
  if (ch == '\0') {
    ch=nextCharacter(inputStream);
  }
  skipWhitespace(inputStream);
  if (isLabelCharacter(ch)) {
    sb.setLength(0);
    do {
      sb.append(ch);
      ch=nextCharacter(inputStream);
    }
 while (isLabelCharacter(ch));
    return new Token(ID_TOKEN,sb.toString());
  }
 else   if (ch == '=') {
    ch=nextCharacter(inputStream);
    skipWhitespace(inputStream);
    if (isValueCharacter(ch)) {
      sb.setLength(0);
      do {
        sb.append(ch);
        ch=nextCharacter(inputStream);
      }
 while (isValueCharacter(ch));
      return new Token(VALUE_TOKEN,sb.toString());
    }
  }
 else   if (ch == '[') {
    ch=nextCharacter(inputStream);
    Token id=getToken(inputStream);
    ch=nextCharacter(inputStream);
    return new Token(SECTION_TOKEN,id.getValue());
  }
 else   if (ch == '#') {
    do {
      ch=nextCharacter(inputStream);
    }
 while (""String_Node_Str"".indexOf(ch) == -1);
    return getToken(inputStream);
  }
  return null;
}","private Token getToken(InputStream inputStream) throws IOException {
  if (ch == '\0') {
    ch=nextCharacter(inputStream);
  }
  skipWhitespace(inputStream);
  if (isLabelCharacter(ch)) {
    sb.setLength(0);
    do {
      sb.append(ch);
      ch=nextCharacter(inputStream);
    }
 while (isLabelCharacter(ch));
    return new Token(ID_TOKEN,sb.toString());
  }
 else   if (ch == '=') {
    ch=nextCharacter(inputStream);
    skipWhitespace(inputStream);
    if (isValueCharacter(ch)) {
      sb.setLength(0);
      do {
        sb.append(ch);
        ch=nextCharacter(inputStream);
      }
 while (isValueCharacter(ch));
      return new Token(VALUE_TOKEN,sb.toString());
    }
  }
 else   if (ch == '[') {
    ch=nextCharacter(inputStream);
    Token id=getToken(inputStream);
    ch=nextCharacter(inputStream);
    return new Token(SECTION_TOKEN,id.getValue());
  }
 else   if (ch == '#') {
    do {
      ch=nextCharacter(inputStream);
    }
 while (!isNewLineCharacter(ch));
    return getToken(inputStream);
  }
  return null;
}",0.9587332053742802
63461,"private SessionSettings setUpSession(String extra) throws ConfigError {
  String data=new String();
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  if (extra != null) {
    data+=extra;
  }
  ByteArrayInputStream cfg=new ByteArrayInputStream(data.getBytes());
  SessionSettings settings=new SessionSettings(cfg);
  return settings;
}","private SessionSettings setUpSession(String extra) throws ConfigError {
  String data=new String();
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  data+=""String_Node_Str"";
  if (extra != null) {
    data+=extra;
  }
  ByteArrayInputStream cfg=new ByteArrayInputStream(data.getBytes());
  SessionSettings settings=new SessionSettings(cfg);
  return settings;
}",0.9857670005271482
63462,"public boolean read(ByteBuffer buffer) throws MessageParseException {
  for (; ; ) {
    try {
      if (state == SEEKING_HEADER) {
        if (buffer.remaining() < headerBytes.length) {
          break;
        }
        messageStartPosition=indexOf(buffer,buffer.position(),headerBytes);
        if (messageStartPosition == -1) {
          throw new MessageParseException(""String_Node_Str"" + ""String_Node_Str"");
        }
        log.debug(""String_Node_Str"");
        position=messageStartPosition + headerBytes.length;
        state=PARSING_LENGTH;
      }
      if (state == PARSING_LENGTH) {
        bodyLength=0;
        byte ch=buffer.get(position++);
        while (Character.isDigit((char)ch)) {
          bodyLength=bodyLength * 10 + (ch - '0');
          if (buffer.hasRemaining()) {
            ch=buffer.get(position++);
          }
 else {
            break;
          }
        }
        if (ch != '\001') {
          handleError(buffer,""String_Node_Str"",false);
          break;
        }
        bodyStartPosition=position;
        state=READING_BODY;
        log.debug(""String_Node_Str"" + bodyLength);
      }
      if (state == READING_BODY) {
        if ((buffer.limit() - position) < bodyLength) {
          break;
        }
        position+=bodyLength;
        state=PARSING_CHECKSUM;
      }
      if (state == PARSING_CHECKSUM) {
        if (startsWith(buffer,position,checksumBytes)) {
          log.debug(""String_Node_Str"");
          position+=checksumBytes.length;
        }
 else {
          handleError(buffer,""String_Node_Str"",isLogon(buffer,messageStartPosition));
          if (buffer.remaining() > 0) {
            continue;
          }
 else {
            break;
          }
        }
        byte[] data=new byte[position - messageStartPosition];
        buffer.position(messageStartPosition);
        buffer.get(data);
        message=new String(data);
        if (log.isTraceEnabled()) {
          log.trace(""String_Node_Str"" + message + ""String_Node_Str""+ buffer.remaining());
        }
        return true;
      }
    }
 catch (    Throwable t) {
      state=SEEKING_HEADER;
      throw new MessageParseException(t);
    }
  }
  return false;
}","public boolean read(ByteBuffer buffer) throws MessageParseException {
  for (; ; ) {
    try {
      if (state == SEEKING_HEADER) {
        if (buffer.remaining() < headerBytes.length) {
          break;
        }
        messageStartPosition=indexOf(buffer,buffer.position(),headerBytes);
        if (messageStartPosition == -1) {
          throw new MessageParseException(""String_Node_Str"" + ""String_Node_Str"");
        }
        log.debug(""String_Node_Str"");
        position=messageStartPosition + headerBytes.length;
        state=PARSING_LENGTH;
      }
      if (state == PARSING_LENGTH) {
        if (position >= buffer.limit()) {
          break;
        }
        bodyLength=0;
        byte ch=buffer.get(position++);
        while (Character.isDigit((char)ch)) {
          bodyLength=bodyLength * 10 + (ch - '0');
          if (position < buffer.limit()) {
            ch=buffer.get(position++);
          }
 else {
            break;
          }
        }
        if (position >= buffer.limit()) {
          break;
        }
        if (ch != '\001') {
          handleError(buffer,""String_Node_Str"",false);
          break;
        }
        bodyStartPosition=position;
        state=READING_BODY;
        log.debug(""String_Node_Str"" + bodyLength);
      }
      if (state == READING_BODY) {
        if ((buffer.limit() - position) < bodyLength) {
          break;
        }
        position+=bodyLength;
        state=PARSING_CHECKSUM;
      }
      if (state == PARSING_CHECKSUM) {
        if (startsWith(buffer,position,checksumBytes)) {
          log.debug(""String_Node_Str"");
          position+=checksumBytes.length;
        }
 else {
          if (position + checksumBytes.length < buffer.limit()) {
            handleError(buffer,""String_Node_Str"",isLogon(buffer,messageStartPosition));
            if (buffer.remaining() > 0) {
              continue;
            }
 else {
              break;
            }
          }
 else {
            break;
          }
        }
        byte[] data=new byte[position - messageStartPosition];
        buffer.position(messageStartPosition);
        buffer.get(data);
        message=new String(data);
        if (log.isTraceEnabled()) {
          log.trace(""String_Node_Str"" + message + ""String_Node_Str""+ buffer.remaining());
        }
        return true;
      }
    }
 catch (    Throwable t) {
      state=SEEKING_HEADER;
      throw new MessageParseException(t);
    }
  }
  return false;
}",0.9368942494077104
63463,"private static boolean startsWith(ByteBuffer buffer,int bufferOffset,byte[] data){
  for (int dataOffset=0, bufferLimit=buffer.limit() - data.length + 1; dataOffset < data.length && bufferOffset < bufferLimit; dataOffset++, bufferOffset++) {
    if (buffer.get(bufferOffset) != data[dataOffset] && data[dataOffset] != '?') {
      return false;
    }
  }
  return true;
}","private static boolean startsWith(ByteBuffer buffer,int bufferOffset,byte[] data){
  if (bufferOffset + data.length > buffer.limit()) {
    return false;
  }
  for (int dataOffset=0, bufferLimit=buffer.limit() - data.length + 1; dataOffset < data.length && bufferOffset < bufferLimit; dataOffset++, bufferOffset++) {
    if (buffer.get(bufferOffset) != data[dataOffset] && data[dataOffset] != '?') {
      return false;
    }
  }
  return true;
}",0.9082007343941249
63464,"public void testSplitMessage() throws Exception {
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  String data=""String_Node_Str"";
  buffer.put(data.substring(0,15).getBytes());
  buffer.flip();
  Message message=FIXMessageData.RECOGNIZER.recognize(buffer);
  assertNotNull(""String_Node_Str"",message);
  buffer.compact();
  buffer.put(data.substring(15,data.length()).getBytes());
  buffer.flip();
  assertMessageFound(buffer,data);
}","public void testSplitMessage() throws Exception {
  String data=""String_Node_Str"";
  for (int i=1; i < data.length(); i++) {
    doSplitMessageTest(i,data);
  }
}",0.4436974789915966
63465,"public void start() throws ConfigError, RuntimeError {
  initialize(false);
  onStart();
}","public void start() throws ConfigError, RuntimeError {
  initialize(isHandlingMessageInCallingThread());
  onStart();
}",0.8421052631578947
63466,"public int compare(Object o1,Object o2){
  Integer tag1=(Integer)o1;
  Integer tag2=(Integer)o2;
  int index1=indexOf(tag1.intValue(),fieldOrder);
  int index2=indexOf(tag2.intValue(),fieldOrder);
  return index1 != index2 ? (index1 < index2 ? -1 : 1) : 0;
}","public int compare(Object o1,Object o2){
  Integer tag1=(Integer)o1;
  Integer tag2=(Integer)o2;
  int index1=indexOf(tag1.intValue(),fieldOrder);
  int index2=indexOf(tag2.intValue(),fieldOrder);
  if ((index1 != Integer.MAX_VALUE) && (index2 != Integer.MAX_VALUE)) {
    return index1 != index2 ? (index1 < index2 ? -1 : 1) : 0;
  }
 else {
    return -1;
  }
}",0.8083735909822867
63467,"public void addGroup(Group group){
  getGroups(group.getFieldTag()).add(new Group(group));
}","public void addGroup(Group group){
  getGroups(group.getFieldTag()).add(new Group(group));
  group.clear();
}",0.9154228855721394
63468,"public boolean set(int sequence,String message) throws IOException {
  msgFile.seek(msgFile.length());
  headerFile.seek(headerFile.length());
  long offset=msgFile.getFilePointer();
  if (offset > 0) {
    headerFile.write(' ');
  }
  int size=message.length();
  messageIndex.put(new Integer(sequence),new long[]{offset,size});
  headerFile.write((Integer.toString(sequence) + ""String_Node_Str"" + Long.toString(offset)+ ""String_Node_Str""+ Integer.toString(size)).getBytes());
  msgFile.write(message.getBytes());
  return true;
}","public boolean set(int sequence,String message) throws IOException {
  msgFile.seek(msgFile.length());
  headerFile.seek(headerFile.length());
  long offset=msgFile.getFilePointer();
  StringBuffer headerBuffer=new StringBuffer();
  if (offset > 0) {
    headerBuffer.append(' ');
  }
  int size=message.length();
  messageIndex.put(new Long(sequence),new long[]{offset,size});
  headerBuffer.append(sequence);
  headerBuffer.append(""String_Node_Str"");
  headerBuffer.append(offset);
  headerBuffer.append(""String_Node_Str"");
  headerBuffer.append(size);
  headerFile.write(headerBuffer.toString().getBytes());
  msgFile.write(message.getBytes());
  return true;
}",0.6309623430962343
63469,"private String getMessage(int i) throws IOException {
  long[] offsetAndSize=(long[])messageIndex.get(new Integer(i));
  String message=null;
  if (offsetAndSize != null) {
    msgFile.seek(offsetAndSize[0]);
    byte[] data=new byte[(int)offsetAndSize[1]];
    msgFile.read(data);
    message=new String(data);
  }
  return message;
}","private String getMessage(int i) throws IOException {
  long[] offsetAndSize=(long[])messageIndex.get(new Long(i));
  String message=null;
  if (offsetAndSize != null) {
    msgFile.seek(offsetAndSize[0]);
    byte[] data=new byte[(int)offsetAndSize[1]];
    msgFile.read(data);
    message=new String(data);
  }
  return message;
}",0.9835082458770614
63470,"protected void processMessage(Session nettySession,Message message){
  logDebug(nettySession,null,""String_Node_Str"");
  quickfix.Session quickfixSession=getQuickFixSession(nettySession,message);
  if (quickfixSession == null) {
    return;
  }
  try {
    FIXMessageData fixMessageData=(FIXMessageData)message;
    quickfixSession.getState().logIncoming(fixMessageData.toString());
    DataDictionary dataDictionary=quickfixSession.getDataDictionary();
    quickfix.Message fixMessage=fixMessageData.parse(dataDictionary);
    try {
      if (fixMessage.getHeader().getString(MsgType.FIELD).equals(MsgType.LOGON)) {
        if (quickfixSession.isLoggedOn()) {
          for (long i=0; i < logonPollingTimeout && quickfixSession.isLoggedOn(); i+=logonPollingPeriod) {
            Thread.sleep(logonPollingPeriod);
          }
          if (quickfixSession.isLoggedOn()) {
            logError(nettySession,quickfixSession.getSessionID(),""String_Node_Str"",null);
            nettySession.close();
            return;
          }
        }
        if (fixMessage.isSetField(HeartBtInt.FIELD)) {
          int heartbeatInterval=fixMessage.getInt(HeartBtInt.FIELD);
          nettySession.getConfig().setIdleTime(heartbeatInterval);
          quickfixSession.getState().setHeartBeatInterval(heartbeatInterval);
          if (log.isDebugEnabled()) {
            logDebug(nettySession,quickfixSession.getSessionID(),""String_Node_Str"" + heartbeatInterval);
          }
        }
        quickfixSessionForNettySession.put(nettySession,quickfixSession);
        ResponderAdapter responderAdapter=new ResponderAdapter(nettySession);
        quickfixSession.setResponder(responderAdapter);
        logDebug(nettySession,quickfixSession.getSessionID(),""String_Node_Str"");
      }
      quickfixSession.next(fixMessage);
    }
 catch (    Throwable e) {
      quickfix.Log sessionLog=quickfixSession.getLog();
      LogUtil.logThrowable(sessionLog,""String_Node_Str"",e);
      if (fixMessageData.isLogon()) {
        try {
          quickfixSession.disconnect();
        }
 catch (        IOException ioException) {
          LogUtil.logThrowable(sessionLog,""String_Node_Str"",ioException);
        }
      }
    }
  }
 catch (  InvalidMessage e) {
    LogUtil.logThrowable(quickfixSession.getLog(),""String_Node_Str"",e);
  }
}","protected void processMessage(Session nettySession,Message message){
  logDebug(nettySession,null,""String_Node_Str"");
  quickfix.Session quickfixSession=getQuickFixSession(nettySession,message);
  if (quickfixSession == null) {
    return;
  }
  try {
    FIXMessageData fixMessageData=(FIXMessageData)message;
    quickfixSession.getState().logIncoming(fixMessageData.toString());
    DataDictionary dataDictionary=quickfixSession.getDataDictionary();
    fixMessageData.setSession(quickfixSession);
    quickfix.Message fixMessage=fixMessageData.parse(dataDictionary);
    try {
      if (fixMessage.getHeader().getString(MsgType.FIELD).equals(MsgType.LOGON)) {
        if (quickfixSession.isLoggedOn()) {
          for (long i=0; i < logonPollingTimeout && quickfixSession.isLoggedOn(); i+=logonPollingPeriod) {
            Thread.sleep(logonPollingPeriod);
          }
          if (quickfixSession.isLoggedOn()) {
            logError(nettySession,quickfixSession.getSessionID(),""String_Node_Str"",null);
            nettySession.close();
            return;
          }
        }
        if (fixMessage.isSetField(HeartBtInt.FIELD)) {
          int heartbeatInterval=fixMessage.getInt(HeartBtInt.FIELD);
          nettySession.getConfig().setIdleTime(heartbeatInterval);
          quickfixSession.getState().setHeartBeatInterval(heartbeatInterval);
          if (log.isDebugEnabled()) {
            logDebug(nettySession,quickfixSession.getSessionID(),""String_Node_Str"" + heartbeatInterval);
          }
        }
        quickfixSessionForNettySession.put(nettySession,quickfixSession);
        ResponderAdapter responderAdapter=new ResponderAdapter(nettySession);
        quickfixSession.setResponder(responderAdapter);
        logDebug(nettySession,quickfixSession.getSessionID(),""String_Node_Str"");
      }
      quickfixSession.next(fixMessage);
    }
 catch (    Throwable e) {
      quickfix.Log sessionLog=quickfixSession.getLog();
      LogUtil.logThrowable(sessionLog,""String_Node_Str"",e);
      if (fixMessageData.isLogon()) {
        try {
          quickfixSession.disconnect();
        }
 catch (        IOException ioException) {
          LogUtil.logThrowable(sessionLog,""String_Node_Str"",ioException);
        }
      }
    }
  }
 catch (  InvalidMessage e) {
    LogUtil.logThrowable(quickfixSession.getLog(),""String_Node_Str"",e);
  }
}",0.9897216274089936
63471,"private void handleError(ByteBuffer buffer,String text,boolean disconnect) throws MessageParseException {
  int newOffset=bodyStartPosition + bodyLength;
  int nextHeader=indexOf(buffer,newOffset,headerBytes);
  if (nextHeader != -1) {
    buffer.position(nextHeader);
  }
 else {
    buffer.position(buffer.limit());
  }
  position=0;
  state=SEEKING_HEADER;
  session.getLog().onEvent(text);
  if (disconnect) {
    throw new MessageParseException(text + ""String_Node_Str"");
  }
}","private void handleError(ByteBuffer buffer,String text,boolean disconnect) throws MessageParseException {
  int newOffset=bodyStartPosition + bodyLength;
  int nextHeader=indexOf(buffer,newOffset,headerBytes);
  if (nextHeader != -1) {
    buffer.position(nextHeader);
  }
 else {
    buffer.position(buffer.limit());
  }
  position=0;
  state=SEEKING_HEADER;
  if (session != null) {
    session.getLog().onEvent(text);
  }
 else {
    log.error(text);
  }
  if (disconnect) {
    throw new MessageParseException(text + ""String_Node_Str"");
  }
}",0.9377431906614786
63472,"@Override @SuppressWarnings(""String_Node_Str"") public Entry<K,V> next(){
  if (current == null)   throw new NoSuchElementException();
  String[] properties=mObject.propertyNames();
  Entry<K,V> entry=null;
  int i=0;
  for (; i < properties.length; i++) {
    if (current.equals(properties[i])) {
      final Object key=properties[i];
      entry=new Entry<K,V>(){
        @Override public K getKey(){
          return (K)key;
        }
        @Override public V getValue(){
          return get(key);
        }
        @Override public V setValue(        V object){
          return put((K)key,object);
        }
      }
;
      break;
    }
  }
  if (i + 1 < properties.length)   current=properties[i + 1];
 else   current=null;
  if (entry != null)   return entry;
 else   throw new NoSuchElementException();
}","@Override @SuppressWarnings(""String_Node_Str"") public Entry<String,V> next(){
  if (current == null)   throw new NoSuchElementException();
  String[] properties=mObject.propertyNames();
  Entry<String,V> entry=null;
  int i=0;
  for (; i < properties.length; i++) {
    if (current.equals(properties[i])) {
      final Object key=properties[i];
      entry=new Entry<String,V>(){
        @Override public String getKey(){
          return (String)key;
        }
        @Override public V getValue(){
          return get(key);
        }
        @Override public V setValue(        V object){
          return put((String)key,object);
        }
      }
;
      break;
    }
  }
  if (i + 1 < properties.length)   current=properties[i + 1];
 else   current=null;
  if (entry != null)   return entry;
 else   throw new NoSuchElementException();
}",0.9698431845597104
63473,"@Override public K getKey(){
  return (K)key;
}","@Override public String getKey(){
  return (String)key;
}",0.8653846153846154
63474,"/** 
 * @see java.util.Map#entrySet()
 */
@Override public @NonNull Set<Entry<K,V>> entrySet(){
  return new AbstractSet<Entry<K,V>>(){
    @Override public @NonNull Iterator<Entry<K,V>> iterator(){
      return new SetIterator();
    }
    @Override public int size(){
      return mObject.propertyNames().length;
    }
  }
;
}","/** 
 * @see java.util.Map#entrySet()
 * @since 3.0
 */
@Override public @NonNull Set<Entry<String,V>> entrySet(){
  return new AbstractSet<Entry<String,V>>(){
    @Override public @NonNull Iterator<Entry<String,V>> iterator(){
      return new SetIterator();
    }
    @Override public int size(){
      return mObject.propertyNames().length;
    }
  }
;
}",0.948905109489051
63475,"/** 
 * @see java.util.Map#containsKey(java.lang.Object)
 */
@Override public boolean containsKey(final Object key){
  return mObject.hasProperty(key.toString());
}","/** 
 * @see java.util.Map#containsKey(java.lang.Object)
 * @since 3.0
 */
@Override public boolean containsKey(final Object key){
  return mObject.hasProperty(key.toString());
}",0.95906432748538
63476,"/** 
 * @see java.util.Map#values()
 */
@Override public @NonNull Collection<V> values(){
  return new AbstractList<V>(){
    @Override public V get(    final int index){
      String[] propertyNames=mObject.propertyNames();
      if (index > propertyNames.length) {
        throw new IndexOutOfBoundsException();
      }
      return JSMap.this.get(propertyNames[index]);
    }
    @Override public int size(){
      return mObject.propertyNames().length;
    }
  }
;
}","/** 
 * @see java.util.Map#values()
 * @since 3.0
 */
@Override public @NonNull Collection<V> values(){
  return new AbstractList<V>(){
    @Override public V get(    final int index){
      String[] propertyNames=mObject.propertyNames();
      if (index > propertyNames.length) {
        throw new IndexOutOfBoundsException();
      }
      return JSMap.this.get(propertyNames[index]);
    }
    @Override public int size(){
      return mObject.propertyNames().length;
    }
    @Override public boolean contains(    Object val){
      return containsValue(val);
    }
  }
;
}",0.8969465648854962
63477,"/** 
 * @see java.util.Map#isEmpty()
 */
@Override public boolean isEmpty(){
  return size() == 0;
}","/** 
 * @see java.util.Map#isEmpty()
 * @since 3.0
 */
@Override public boolean isEmpty(){
  return size() == 0;
}",0.9345794392523364
63478,"/** 
 * @see java.util.Map#clear()
 */
@Override public void clear(){
  for (  String prop : mObject.propertyNames()) {
    mObject.deleteProperty(prop);
  }
}","/** 
 * @see java.util.Map#clear()
 * @since 3.0
 */
@Override public void clear(){
  for (  String prop : mObject.propertyNames()) {
    mObject.deleteProperty(prop);
  }
}",0.9578313253012049
63479,"public JSMap(JSContext context,Class<V> cls){
  mObject=new JSObject(context);
  mType=cls;
}","/** 
 * Creates a new Map object and underlying JSObject with no initial properties. Assumes value class of type 'cls'. Example: <code> java.util.Map<String,Double> jsmap = new JSMap<String,Double>(context,Double.class) </code>
 * @param context  The JSContext in which to create the object
 * @param cls      The class of the component Values; must match template
 * @since 3.0
 */
public JSMap(JSContext context,Class<V> cls){
  mObject=new JSObject(context);
  mType=cls;
}",0.3268892794376098
63480,"/** 
 * @see java.util.Map#containsValue(java.lang.Object)
 */
@Override public boolean containsValue(final Object value){
  String[] properties=mObject.propertyNames();
  for (  String key : properties) {
    if (mObject.property(key).equals(value))     return true;
  }
  return false;
}","/** 
 * @see java.util.Map#containsValue(java.lang.Object)
 * @since 3.0
 */
@Override public boolean containsValue(final Object value){
  String[] properties=mObject.propertyNames();
  for (  String key : properties) {
    if (mObject.property(key).equals(value))     return true;
  }
  return false;
}",0.9763513513513512
63481,"/** 
 * @see java.util.Map#put(java.lang.Object,java.lang.Object)
 */
@Override public V put(final K key,final V value){
  final V oldValue=get(key);
  mObject.property(key.toString(),value);
  return oldValue;
}","/** 
 * @see java.util.Map#put(java.lang.Object,java.lang.Object)
 * @since 3.0
 */
@Override public V put(final String key,final V value){
  final V oldValue=get(key);
  mObject.property(key,value);
  return oldValue;
}",0.8101851851851852
63482,"@Override public void remove(){
  Entry<K,V> entry=next();
  mObject.deleteProperty(entry.getKey().toString());
}","@Override public void remove(){
  Entry<String,V> entry=next();
  mObject.deleteProperty(entry.getKey());
}",0.9181818181818182
63483,"@Override public @NonNull Iterator<Entry<K,V>> iterator(){
  return new SetIterator();
}","@Override public @NonNull Iterator<Entry<String,V>> iterator(){
  return new SetIterator();
}",0.9613259668508288
63484,"/** 
 * @see java.util.Map#putAll(java.util.Map)
 */
@Override public void putAll(final @NonNull Map<? extends K,? extends V> map){
  for (  K key : map.keySet()) {
    put(key,map.get(key));
  }
}","/** 
 * @see java.util.Map#putAll(java.util.Map)
 * @since 3.0
 */
@Override public void putAll(final @NonNull Map<? extends String,? extends V> map){
  for (  String key : map.keySet()) {
    put(key,map.get(key));
  }
}",0.9330143540669856
63485,"@Override public V setValue(V object){
  return put((K)key,object);
}","@Override public V setValue(V object){
  return put((String)key,object);
}",0.951048951048951
63486,"/** 
 * @see java.util.Map#keySet()
 */
@Override @SuppressWarnings(""String_Node_Str"") public @NonNull Set keySet(){
  return new HashSet(Arrays.asList(mObject.propertyNames()));
}","/** 
 * @see java.util.Map#keySet()
 * @since 3.0
 */
@Override @SuppressWarnings(""String_Node_Str"") public @NonNull Set keySet(){
  return new HashSet(Arrays.asList(mObject.propertyNames()));
}",0.962566844919786
63487,"public JSObject getJSObject(){
  return mObject;
}","/** 
 * Gets the underlying JSObject for this map
 * @return the underlying JSObject
 * @since 3.0
 */
public JSObject getJSObject(){
  return mObject;
}",0.4926108374384236
63488,"/** 
 * If an exception handler is set, calls the exception handler, otherwise throws the JSException.
 * @param exception The JSException to be thrown
 */
public void throwJSException(JSException exception) throws JSException {
  if (exceptionHandler == null) {
    throw exception;
  }
 else {
    exceptionHandler.handle(exception);
  }
}","/** 
 * If an exception handler is set, calls the exception handler, otherwise throws the JSException.
 * @param exception The JSException to be thrown
 */
public void throwJSException(JSException exception) throws JSException {
  if (exceptionHandler == null) {
    throw exception;
  }
 else {
    IJSExceptionHandler temp=exceptionHandler;
    exceptionHandler=null;
    temp.handle(exception);
    exceptionHandler=temp;
  }
}",0.8819714656290532
63489,"@Override protected void finalize() throws Throwable {
  if (ctx != null)   release(ctx);
  super.finalize();
}","@Override protected void finalize() throws Throwable {
  if (ctx != null) {
    release(ctx);
    finalizeContext(ctx);
  }
  super.finalize();
}",0.8671875
63490,"@Override public void alert(String msg){
  CharSequence text=msg.toString();
  int duration=Toast.LENGTH_LONG;
  Toast toast=Toast.makeText(androidCtx,text,duration);
  toast.show();
}","@Override public void alert(String msg){
  final String message=msg;
  Handler handler=new Handler(Looper.getMainLooper());
  handler.post(new Runnable(){
    @Override public void run(){
      CharSequence text=message.toString();
      int duration=Toast.LENGTH_LONG;
      Toast toast=Toast.makeText(androidCtx,text,duration);
      toast.show();
    }
  }
);
}",0.6642335766423357
63491,"@Override public void log(String msg){
  log=log.concat(msg);
  log=log.concat(""String_Node_Str"");
  tv.setText(log);
}","@Override public void log(String msg){
  final String message=msg;
  Handler handler=new Handler(Looper.getMainLooper());
  handler.post(new Runnable(){
    @Override public void run(){
      log=log.concat(message);
      log=log.concat(""String_Node_Str"");
      tv.setText(log);
    }
  }
);
}",0.4734299516908212
63492,"protected JSValue function(JSValue[] args) throws JSException {
  Class<?>[] pType=method.getParameterTypes();
  Object[] passArgs=new Object[pType.length];
  for (int i=0; i < passArgs.length; i++) {
    if (i < args.length) {
      if (pType[i] == String.class)       passArgs[i]=args[i].toString();
 else       if (pType[i] == Double.class)       passArgs[i]=args[i].toNumber();
 else       if (pType[i] == Integer.class)       passArgs[i]=args[i].toNumber().intValue();
 else       if (pType[i] == Long.class)       passArgs[i]=args[i].toNumber().longValue();
 else       if (pType[i] == Boolean.class)       passArgs[i]=args[i].toBoolean();
 else       if (pType[i] == JSObject.class)       passArgs[i]=args[i].toObject();
 else       if (pType[i] == JSString.class)       passArgs[i]=args[i].toJSString();
 else       if (pType[i].isArray()) {
        JSObject arr=args[i].toObject();
        if (arr.property(""String_Node_Str"") == null) {
          throw (new JSException(context,""String_Node_Str""));
        }
        Integer length=arr.property(""String_Node_Str"").toNumber().intValue();
        ArrayList<Object> objList=new ArrayList<Object>();
        for (int j=0; j < length; j++) {
          if (pType[i] == Boolean[].class)           objList.add(arr.propertyAtIndex(j).toBoolean());
 else           if (pType[i] == Integer[].class)           objList.add(arr.propertyAtIndex(j).toNumber().intValue());
 else           if (pType[i] == String[].class)           objList.add(arr.propertyAtIndex(j).toString());
 else           if (pType[i] == Long[].class)           objList.add(arr.propertyAtIndex(j).toNumber().longValue());
 else           if (pType[i] == Double[].class)           objList.add(arr.propertyAtIndex(j).toNumber());
 else           if (pType[i] == JSValue[].class)           objList.add(arr.propertyAtIndex(j));
 else           if (pType[i] == JSObject[].class)           objList.add(arr.propertyAtIndex(j).toObject());
 else           if (pType[i] == JSString[].class)           objList.add(arr.propertyAtIndex(j).toJSString());
 else           objList.add(null);
        }
        passArgs[i]=objList.toArray(new Object[objList.size()]);
      }
 else       if (pType[i] == JSValue.class)       passArgs[i]=args[i];
 else       passArgs[i]=null;
    }
 else {
      passArgs[i]=null;
    }
  }
  try {
    Object ret=method.invoke(invokeObject,passArgs);
    if (method.getReturnType() == Void.class)     return null;
    if (ret instanceof JSValue)     return (JSValue)ret;
    return new JSValue(context,ret);
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
    throw (new JSException(context,e.toString()));
  }
catch (  IllegalAccessException e) {
    throw (new JSException(context,e.toString()));
  }
}","protected JSValue function(JSValue[] args) throws JSException {
  Class<?>[] pType=method.getParameterTypes();
  Object[] passArgs=new Object[pType.length];
  for (int i=0; i < passArgs.length; i++) {
    if (i < args.length) {
      if (pType[i] == String.class)       passArgs[i]=args[i].toString();
 else       if (pType[i] == Double.class)       passArgs[i]=args[i].toNumber();
 else       if (pType[i] == Integer.class)       passArgs[i]=args[i].toNumber().intValue();
 else       if (pType[i] == Long.class)       passArgs[i]=args[i].toNumber().longValue();
 else       if (pType[i] == Boolean.class)       passArgs[i]=args[i].toBoolean();
 else       if (pType[i] == JSObject.class)       passArgs[i]=args[i].toObject();
 else       if (pType[i] == JSString.class)       passArgs[i]=args[i].toJSString();
 else       if (pType[i].isArray()) {
        JSObject arr=args[i].toObject();
        if (arr.property(""String_Node_Str"") == null) {
          throw (new JSException(context,""String_Node_Str""));
        }
        Integer length=arr.property(""String_Node_Str"").toNumber().intValue();
        ArrayList<Object> objList=new ArrayList<Object>();
        for (int j=0; j < length; j++) {
          if (pType[i] == Boolean[].class)           objList.add(arr.propertyAtIndex(j).toBoolean());
 else           if (pType[i] == Integer[].class)           objList.add(arr.propertyAtIndex(j).toNumber().intValue());
 else           if (pType[i] == String[].class)           objList.add(arr.propertyAtIndex(j).toString());
 else           if (pType[i] == Long[].class)           objList.add(arr.propertyAtIndex(j).toNumber().longValue());
 else           if (pType[i] == Double[].class)           objList.add(arr.propertyAtIndex(j).toNumber());
 else           if (pType[i] == JSValue[].class)           objList.add(arr.propertyAtIndex(j));
 else           if (pType[i] == JSObject[].class)           objList.add(arr.propertyAtIndex(j).toObject());
 else           if (pType[i] == JSString[].class)           objList.add(arr.propertyAtIndex(j).toJSString());
 else           objList.add(null);
        }
        if (pType[i] == Boolean[].class)         passArgs[i]=objList.toArray(new Boolean[objList.size()]);
 else         if (pType[i] == Integer[].class)         passArgs[i]=objList.toArray(new Integer[objList.size()]);
 else         if (pType[i] == String[].class)         passArgs[i]=objList.toArray(new String[objList.size()]);
 else         if (pType[i] == Long[].class)         passArgs[i]=objList.toArray(new Long[objList.size()]);
 else         if (pType[i] == Double[].class)         passArgs[i]=objList.toArray(new Double[objList.size()]);
 else         if (pType[i] == JSValue[].class)         passArgs[i]=objList.toArray(new JSValue[objList.size()]);
 else         if (pType[i] == JSObject[].class)         passArgs[i]=objList.toArray(new JSObject[objList.size()]);
 else         if (pType[i] == JSString[].class)         passArgs[i]=objList.toArray(new JSString[objList.size()]);
 else         passArgs[i]=objList.toArray(new Object[objList.size()]);
      }
 else       if (pType[i] == JSValue.class)       passArgs[i]=args[i];
 else       passArgs[i]=null;
    }
 else {
      passArgs[i]=null;
    }
  }
  try {
    Object ret=method.invoke(invokeObject,passArgs);
    if (method.getReturnType() == Void.class)     return null;
    if (ret instanceof JSValue)     return (JSValue)ret;
    return new JSValue(context,ret);
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
    throw (new JSException(context,e.toString()));
  }
catch (  IllegalAccessException e) {
    throw (new JSException(context,e.toString()));
  }
}",0.8600810221252727
63493,"@Override public void onPause(){
  ;
  mMediaPlayer.pause();
  super.onPause();
}","@Override public void onPause(){
  super.onPause();
  mMediaPlayer.pause();
}",0.7848101265822784
63494,"@Override public void onResume(){
  mMediaPlayer.start();
  super.onResume();
}","@Override public void onResume(){
  super.onResume();
  mMediaPlayer.start();
}",0.7468354430379747
63495,"private MediaPlayer createMediaPlayerForGfyItem(final GfyItem gfyItem){
  MediaPlayer mediaPlayer=new MediaPlayer();
  mediaPlayer.setLooping(true);
  Observable.create(new VideoSizeChangedOnSubscribe(mediaPlayer)).subscribe(__ -> correctVideoAspectRatio());
  Observable.create(new MediaPlayerPreparedOnSubscribe(mediaPlayer)).subscribe(mp -> {
    mProgressBar.setVisibility(View.GONE);
    mp.start();
    mp.seekTo(mCurrentPosition);
    if (mp.getDuration() > 1000) {
      mVideoProgressBar.setVisibility(View.VISIBLE);
      mVideoProgressBar.setProgress(mCurrentPosition);
      mVideoProgressBar.setMax(mp.getDuration());
      mVideoProgressBarSubscription=Observable.interval(10,TimeUnit.MILLISECONDS).filter(__ -> mMediaPlayerPrepared).map(__ -> mp.getCurrentPosition()).subscribe(progress -> mVideoProgressBar.setProgress(progress),throwable -> {
        Crashlytics.logException(throwable);
        showErrorDialog();
      }
);
    }
 else {
      mVideoProgressBar.setVisibility(View.INVISIBLE);
    }
    if (!mRecordedStats) {
      Stats stats=new Stats(MainActivity.this);
      stats.addItem(gfyItem);
      mRecordedStats=true;
    }
    mMediaPlayerPrepared=true;
  }
);
  Observable.create(new MediaPlayerCompletionOnSubscribe(mediaPlayer)).subscribe(completedMediaPlayer -> {
    completedMediaPlayer.pause();
    completedMediaPlayer.seekTo(0);
    completedMediaPlayer.start();
  }
);
  Observable.create(new MediaPlayerErrorOnSubscribe(mediaPlayer)).subscribe(errorEvent -> {
    mMediaPlayerPrepared=false;
    Crashlytics.log(""String_Node_Str"" + errorEvent.getWhat() + ""String_Node_Str""+ errorEvent.getExtra());
    showErrorDialog();
  }
);
  try {
    mediaPlayer.setDataSource(gfyItem.getWebmUrl());
    mediaPlayer.setSurface(new Surface(mVideoView.getSurfaceTexture()));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return mediaPlayer;
}","private MediaPlayer createMediaPlayerForGfyItem(final GfyItem gfyItem){
  MediaPlayer mediaPlayer=new MediaPlayer();
  mediaPlayer.setLooping(true);
  Observable.create(new VideoSizeChangedOnSubscribe(mediaPlayer)).subscribe(__ -> correctVideoAspectRatio());
  Observable.create(new MediaPlayerPreparedOnSubscribe(mediaPlayer)).subscribe(mp -> {
    mProgressBar.setVisibility(View.GONE);
    mp.start();
    mp.seekTo(mCurrentPosition);
    if (mp.getDuration() > 1000) {
      mVideoProgressBar.setVisibility(View.VISIBLE);
      mVideoProgressBar.setProgress(mCurrentPosition);
      mVideoProgressBar.setMax(mp.getDuration());
      mVideoProgressBarSubscription=Observable.interval(10,TimeUnit.MILLISECONDS).filter(__ -> mMediaPlayerPrepared).map(__ -> mp.getCurrentPosition()).subscribe(progress -> mVideoProgressBar.setProgress(progress),throwable -> {
        Crashlytics.logException(throwable);
        showErrorDialog();
      }
);
    }
 else {
      mVideoProgressBar.setVisibility(View.INVISIBLE);
    }
    if (!mRecordedStats) {
      Stats stats=new Stats(MainActivity.this);
      stats.addItem(gfyItem);
      mRecordedStats=true;
    }
    mMediaPlayerPrepared=true;
  }
);
  Observable.create(new MediaPlayerCompletionOnSubscribe(mediaPlayer)).subscribe(completedMediaPlayer -> {
    completedMediaPlayer.pause();
    completedMediaPlayer.seekTo(0);
    completedMediaPlayer.start();
  }
);
  Observable.create(new MediaPlayerErrorOnSubscribe(mediaPlayer)).subscribe(errorEvent -> {
    if (!isFinishing()) {
      mMediaPlayerPrepared=false;
      Crashlytics.log(""String_Node_Str"" + errorEvent.getWhat() + ""String_Node_Str""+ errorEvent.getExtra());
      showErrorDialog();
    }
  }
);
  try {
    mediaPlayer.setDataSource(gfyItem.getWebmUrl());
    mediaPlayer.setSurface(new Surface(mVideoView.getSurfaceTexture()));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return mediaPlayer;
}",0.9900835073068892
63496,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    mGfyName=savedInstanceState.getString(INSTANCE_GFY_NAME);
    mGfyMetadata=savedInstanceState.getParcelable(INSTANCE_GFY_METADATA);
    mCurrentPosition=savedInstanceState.getInt(INSTANCE_CURRENT_POSITION);
    mRecordedStats=savedInstanceState.getBoolean(INSTANCE_RECORDED_STATS);
  }
  GfycatApplication.get(this).inject(this);
  setContentView(R.layout.activity_main);
  ButterKnife.inject(this);
  mGestureDetector=new GestureDetector(this,mOnGestureListener);
  mVideoView.setSurfaceTextureListener(mSurfaceTextureListener);
  if (mGfyName == null && mGifUrl == null) {
    Intent intent=getIntent();
    if (Intent.ACTION_SEND.equals(intent.getAction())) {
      CharSequence sharedText=intent.getCharSequenceExtra(Intent.EXTRA_TEXT);
      if (!TextUtils.isEmpty(sharedText) && URLUtil.isNetworkUrl(sharedText.toString())) {
        mGifUrl=sharedText.toString();
      }
    }
 else {
      Uri data=intent.getData();
      String host=data.getHost();
      if (host != null && host.endsWith(""String_Node_Str"")) {
        List<String> pathSegments=data.getPathSegments();
        if (pathSegments.size() == 0) {
          showErrorDialog();
        }
 else         if (pathSegments.size() == 1) {
          mGfyName=pathSegments.get(0);
        }
 else         if (pathSegments.size() > 1 && pathSegments.get(0).equals(""String_Node_Str"")) {
          String strUrl=data.toString();
          mGifUrl=strUrl.substring(strUrl.indexOf(""String_Node_Str"") + 6);
        }
      }
 else {
        mGifUrl=data.toString();
      }
    }
    if (mGifUrl == null && mGfyName == null) {
      showErrorDialog();
      return;
    }
  }
  if (savedInstanceState == null) {
    mContainer.setAlpha(0);
    mContainer.animate().alpha(1);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    mGfyName=savedInstanceState.getString(INSTANCE_GFY_NAME);
    mGfyMetadata=savedInstanceState.getParcelable(INSTANCE_GFY_METADATA);
    mCurrentPosition=savedInstanceState.getInt(INSTANCE_CURRENT_POSITION);
    mRecordedStats=savedInstanceState.getBoolean(INSTANCE_RECORDED_STATS);
  }
  GfycatApplication.get(this).inject(this);
  setContentView(R.layout.activity_main);
  ButterKnife.inject(this);
  mGestureDetector=new GestureDetector(this,mOnGestureListener);
  mVideoView.setSurfaceTextureListener(mSurfaceTextureListener);
  if (mGfyName == null && mGifUrl == null) {
    Intent intent=getIntent();
    if (Intent.ACTION_SEND.equals(intent.getAction())) {
      CharSequence sharedText=intent.getCharSequenceExtra(Intent.EXTRA_TEXT);
      if (!TextUtils.isEmpty(sharedText) && URLUtil.isNetworkUrl(sharedText.toString())) {
        mGifUrl=sharedText.toString();
      }
    }
 else {
      Uri data=intent.getData();
      if (data.getHost() != null && data.getHost().endsWith(""String_Node_Str"")) {
        List<String> pathSegments=data.getPathSegments();
        if (pathSegments.size() == 0) {
          showErrorDialog();
        }
 else         if (pathSegments.size() == 1) {
          mGfyName=pathSegments.get(0);
        }
 else         if (pathSegments.size() > 1 && pathSegments.get(0).equals(""String_Node_Str"")) {
          String strUrl=data.toString();
          mGifUrl=strUrl.substring(strUrl.indexOf(""String_Node_Str"") + 6);
        }
      }
 else {
        mGifUrl=data.toString();
      }
    }
    if (mGifUrl == null && mGfyName == null) {
      showErrorDialog();
      return;
    }
  }
  if (savedInstanceState == null) {
    mContainer.setAlpha(0);
    mContainer.animate().alpha(1);
  }
}",0.98663816141101
63497,"private GfyMetadata(Parcel in){
  this.mGfyItem=in.readParcelable(((Object)mGfyItem).getClass().getClassLoader());
}","private GfyMetadata(Parcel in){
  this.mGfyItem=in.readParcelable(GfyItem.class.getClassLoader());
}",0.9166666666666666
63498,"public Object getEmitter(){
  return emitter.get();
}","public Object getEmitter(){
  return emitter != null ? emitter.get() : null;
}",0.8091603053435115
63499,"private void createDelegateMethod(JavaWriter classWriter,ExecutableElement method,String newElementName) throws IOException {
  if (!isPublicOrProtectedMethod(method))   return;
  if (isAnnotatedWith(method,Init.class))   return;
  AnnotationMirror cachedAnnotation=getAnnotation(method,CacheThenCall.class);
  boolean isCached=cachedAnnotation != null;
  boolean isUiThread=getAnnotation(method,Ui.class) != null;
  boolean hasResult=!isVoid(method);
  if (isCached && !hasResult)   logger.error(method,cachedAnnotation,""String_Node_Str"");
  if (hasResult && hasTypeParameters(processingEnv,method.getReturnType()))   logger.error(method,""String_Node_Str"");
  String annotationCacheToParse=null;
  String cacheValueFromMethodSignatureToParse=defineKeyFromMethod(method);
  if (isCached) {
    String annotationValue=getAnnotationValue(cachedAnnotation,""String_Node_Str"");
    annotationCacheToParse=annotationValue == null ? cacheValueFromMethodSignatureToParse : annotationValue;
    if (!isAssignable(processingEnv,method.getReturnType(),Serializable.class))     logger.error(method,method.getReturnType() + ""String_Node_Str"");
  }
  classWriter.emitEmptyLine().beginMethod(method.getReturnType().toString(),method.getSimpleName().toString(),method.getModifiers(),Utils.formatParameters(method,true),null);
  classWriter.emitField(""String_Node_Str"",""String_Node_Str"",of(FINAL),parseCacheKeyValue(cacheValueFromMethodSignatureToParse));
  AnnotationMirror annotation=getAnnotation(method,Serial.class);
  String serial=annotation == null ? SERIAL_DEFAULT : (String)getAnnotationValue(annotation,""String_Node_Str"");
  AnnotationMirror nullAnnotation=getAnnotation(method,Null.class);
  boolean isNullManaged=nullAnnotation != null;
  if (isNullManaged && isVoid(method))   logger.error(method,""String_Node_Str"");
  TypeMirror nullClass=nullAnnotation == null ? null : (TypeMirror)getAnnotationValue(nullAnnotation,""String_Node_Str"");
  if (isNullManaged) {
    TypeElement nullTypeElement=processingEnv.getElementUtils().getTypeElement(nullClass.toString());
    if (isAbstract(nullTypeElement))     logger.error(method,nullAnnotation,""String_Node_Str"",""String_Node_Str"");
    if (!hasPublicConstructor(nullTypeElement))     logger.error(method,nullAnnotation,""String_Node_Str"",""String_Node_Str"");
  }
  if (isCached) {
    classWriter.emitField(""String_Node_Str"",""String_Node_Str"",of(FINAL),parseCacheKeyValue(annotationCacheToParse));
    StringWriter buffer=new StringWriter();
    JavaWriter inner=new JavaWriter(buffer);
    inner.emitPackage(""String_Node_Str"").beginType(""String_Node_Str"",""String_Node_Str"").emitAnnotation(""String_Node_Str"").beginMethod(""String_Node_Str"",""String_Node_Str"",of(PUBLIC)).emitStatement(""String_Node_Str"",method.getReturnType(),method.getReturnType()).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endMethod().endType();
    classWriter.emitStatement(""String_Node_Str"",buffer.toString(),SERIAL_CHECK_CACHE);
  }
  String threadingPrefix=isUiThread ? ""String_Node_Str"" : ""String_Node_Str"";
  String threadingSuffix=isUiThread ? ""String_Node_Str"" : ""String_Node_Str"";
  String runnableCode;
  StringWriter buffer=new StringWriter();
  JavaWriter inner=new JavaWriter(buffer);
  inner.emitPackage(""String_Node_Str"");
  inner.beginType(""String_Node_Str"",""String_Node_Str"");
  inner.emitAnnotation(""String_Node_Str"");
  inner.beginMethod(""String_Node_Str"",""String_Node_Str"",of(PUBLIC));
  beginErrorManagement(method,inner);
  if (hasResult) {
    inner.emitStatement(""String_Node_Str"",method.getReturnType(),newElementName,method.getSimpleName(),formatParametersForCall(method)).beginControlFlow(""String_Node_Str"");
    if (isNullManaged) {
      inner.emitStatement(""String_Node_Str"",nullClass).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"");
    }
 else {
      inner.emitStatement(""String_Node_Str"");
    }
    inner.endControlFlow().emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"");
    if (isCached)     inner.emitStatement(""String_Node_Str"");
    inner.emitStatement(""String_Node_Str"");
  }
 else {
    inner.emitStatement(""String_Node_Str"",newElementName,method.getSimpleName(),formatParametersForCall(method));
  }
  endErrorManagement(method,inner);
  inner.endMethod();
  inner.endType();
  runnableCode=buffer.toString();
  classWriter.emitStatement(threadingPrefix + runnableCode + threadingSuffix,serial);
  if (hasResult)   classWriter.emitStatement(""String_Node_Str"");
  classWriter.endMethod();
}","private void createDelegateMethod(JavaWriter classWriter,ExecutableElement method,String newElementName) throws IOException {
  if (!isPublicOrProtectedMethod(method))   return;
  if (isAnnotatedWith(method,Init.class))   return;
  AnnotationMirror cachedAnnotation=getAnnotation(method,CacheThenCall.class);
  boolean isCached=cachedAnnotation != null;
  boolean isUiThread=getAnnotation(method,Ui.class) != null;
  boolean hasResult=!isVoid(method);
  if (isCached && !hasResult)   logger.error(method,cachedAnnotation,""String_Node_Str"");
  if (hasResult && hasTypeParameters(processingEnv,method.getReturnType()))   logger.error(method,""String_Node_Str"");
  String annotationCacheToParse=null;
  String cacheValueFromMethodSignatureToParse=defineKeyFromMethod(method);
  if (isCached) {
    String annotationValue=getAnnotationValue(cachedAnnotation,""String_Node_Str"");
    annotationCacheToParse=annotationValue == null ? cacheValueFromMethodSignatureToParse : annotationValue;
    if (!isAssignable(processingEnv,method.getReturnType(),Serializable.class))     logger.error(method,method.getReturnType() + ""String_Node_Str"");
  }
  classWriter.emitEmptyLine().beginMethod(method.getReturnType().toString(),method.getSimpleName().toString(),method.getModifiers(),Utils.formatParameters(method,true),null);
  classWriter.emitField(""String_Node_Str"",""String_Node_Str"",of(FINAL),parseCacheKeyValue(cacheValueFromMethodSignatureToParse));
  AnnotationMirror annotation=getAnnotation(method,Serial.class);
  String serial=annotation == null ? SERIAL_DEFAULT : (String)getAnnotationValue(annotation,""String_Node_Str"");
  AnnotationMirror nullAnnotation=getAnnotation(method,Null.class);
  boolean isNullManaged=nullAnnotation != null;
  if (isNullManaged && isVoid(method))   logger.error(method,""String_Node_Str"");
  TypeMirror nullClass=nullAnnotation == null ? null : (TypeMirror)getAnnotationValue(nullAnnotation,""String_Node_Str"");
  if (isNullManaged) {
    TypeElement nullTypeElement=processingEnv.getElementUtils().getTypeElement(nullClass.toString());
    if (isAbstract(nullTypeElement))     logger.error(method,nullAnnotation,""String_Node_Str"",""String_Node_Str"");
    if (!hasPublicConstructor(nullTypeElement))     logger.error(method,nullAnnotation,""String_Node_Str"",""String_Node_Str"");
  }
  if (isCached) {
    classWriter.emitField(""String_Node_Str"",""String_Node_Str"",of(FINAL),parseCacheKeyValue(annotationCacheToParse));
    StringWriter buffer=new StringWriter();
    JavaWriter inner=new JavaWriter(buffer);
    inner.emitPackage(""String_Node_Str"").beginType(""String_Node_Str"",""String_Node_Str"").emitAnnotation(""String_Node_Str"").beginMethod(""String_Node_Str"",""String_Node_Str"",of(PUBLIC)).emitStatement(""String_Node_Str"",method.getReturnType(),method.getReturnType()).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").endMethod().endType();
    classWriter.emitStatement(""String_Node_Str"",buffer.toString(),SERIAL_CHECK_CACHE);
  }
  String threadingPrefix=isUiThread ? ""String_Node_Str"" : ""String_Node_Str"";
  String threadingSuffix=isUiThread ? ""String_Node_Str"" : ""String_Node_Str"";
  String runnableCode;
  StringWriter buffer=new StringWriter();
  JavaWriter inner=new JavaWriter(buffer);
  inner.emitPackage(""String_Node_Str"");
  inner.beginType(""String_Node_Str"",""String_Node_Str"");
  inner.emitAnnotation(""String_Node_Str"");
  inner.beginMethod(""String_Node_Str"",""String_Node_Str"",of(PUBLIC));
  beginErrorManagement(method,inner);
  if (hasResult) {
    inner.emitStatement(""String_Node_Str"",method.getReturnType(),newElementName,method.getSimpleName(),formatParametersForCall(method)).beginControlFlow(""String_Node_Str"");
    if (isNullManaged) {
      inner.emitStatement(""String_Node_Str"",nullClass).emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"");
    }
 else {
      inner.emitStatement(""String_Node_Str"");
    }
    inner.endControlFlow().emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"").emitStatement(""String_Node_Str"");
    if (isCached)     inner.emitStatement(""String_Node_Str"");
    inner.emitStatement(""String_Node_Str"");
  }
 else {
    inner.emitStatement(""String_Node_Str"",newElementName,method.getSimpleName(),formatParametersForCall(method));
  }
  endErrorManagement(method,inner);
  inner.endMethod();
  inner.endType();
  runnableCode=buffer.toString();
  classWriter.emitStatement(threadingPrefix + runnableCode + threadingSuffix,serial);
  if (hasResult)   classWriter.emitStatement(""String_Node_Str"");
  classWriter.endMethod();
}",0.9964250893727656
63500,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=findViewById(R.id.mapView);
  mCommentListView=findViewById(R.id.comment_list);
  List<String> commentList=new ArrayList<>();
  ArrayList<Feature> featureList=new ArrayList<>();
  ArcGISMap map=new ArcGISMap(Basemap.createStreets());
  ArcGISMapImageLayer serviceRequestMapImageLayer=new ArcGISMapImageLayer(getString(R.string.map_service));
  serviceRequestMapImageLayer.loadTablesAndLayersAsync();
  GraphicsOverlay graphicsOverlay=new GraphicsOverlay();
  serviceRequestMapImageLayer.addDoneLoadingListener(() -> {
    if (serviceRequestMapImageLayer.getLoadStatus() == LoadStatus.LOADED) {
      Envelope extent=serviceRequestMapImageLayer.getFullExtent();
      mMapView.setViewpoint(new Viewpoint(extent));
      ServiceFeatureTable commentsTable=serviceRequestMapImageLayer.getTables().get(0);
      QueryParameters queryParameters=new QueryParameters();
      queryParameters.setWhereClause(""String_Node_Str"");
      ListenableFuture<FeatureQueryResult> commentQueryResultFuture=commentsTable.queryFeaturesAsync(queryParameters,ServiceFeatureTable.QueryFeatureFields.LOAD_ALL);
      commentQueryResultFuture.addDoneListener(() -> {
        try {
          FeatureQueryResult commentQueryResult=commentQueryResultFuture.get();
          for (          Feature feature : commentQueryResult) {
            featureList.add(feature);
            commentList.add(feature.getAttributes().get(""String_Node_Str"").toString());
          }
          ArrayAdapter<String> adapter=new ArrayAdapter<>(MainActivity.this,android.R.layout.simple_list_item_1,commentList);
          mCommentListView.setAdapter(adapter);
        }
 catch (        InterruptedException|ExecutionException e) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
);
    }
  }
);
  mCommentListView.setOnItemClickListener((parent,view,position,id) -> {
    graphicsOverlay.getGraphics().clear();
    Feature selectedComment=featureList.get(position);
    ServiceFeatureTable commentsTable=serviceRequestMapImageLayer.getTables().get(0);
    RelationshipInfo commentsRelationshipInfo=commentsTable.getLayerInfo().getRelationshipInfos().get(0);
    RelatedQueryParameters relatedQueryParameters=new RelatedQueryParameters(commentsRelationshipInfo);
    relatedQueryParameters.setReturnGeometry(true);
    ListenableFuture<List<RelatedFeatureQueryResult>> relatedRequestResult=commentsTable.queryRelatedFeaturesAsync((ArcGISFeature)selectedComment,relatedQueryParameters);
    relatedRequestResult.addDoneListener(() -> {
      try {
        RelatedFeatureQueryResult result=relatedRequestResult.get().get(0);
        ArcGISFeature serviceRequestFeature=(ArcGISFeature)result.iterator().next();
        if (serviceRequestFeature == null) {
          Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          return;
        }
        serviceRequestFeature.loadAsync();
        serviceRequestFeature.addDoneLoadingListener(() -> {
          if (serviceRequestFeature.getLoadStatus() == LoadStatus.LOADED) {
            Point serviceRequestPoint=(Point)serviceRequestFeature.getGeometry();
            Symbol selectedRequestedSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CIRCLE,Color.CYAN,14);
            Graphic requestGraphic=new Graphic(serviceRequestPoint,selectedRequestedSymbol);
            graphicsOverlay.getGraphics().add(requestGraphic);
            mMapView.setViewpointCenterAsync(serviceRequestPoint,150000);
          }
        }
);
      }
 catch (      InterruptedException|ExecutionException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
);
  }
);
  map.getOperationalLayers().add(serviceRequestMapImageLayer);
  mMapView.getGraphicsOverlays().add(graphicsOverlay);
  mMapView.setMap(map);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=findViewById(R.id.mapView);
  mCommentListView=findViewById(R.id.comment_list);
  List<String> commentList=new ArrayList<>();
  ArrayList<Feature> featureList=new ArrayList<>();
  ArcGISMap map=new ArcGISMap(Basemap.createStreets());
  ArcGISMapImageLayer serviceRequestMapImageLayer=new ArcGISMapImageLayer(getString(R.string.map_service));
  serviceRequestMapImageLayer.loadTablesAndLayersAsync();
  GraphicsOverlay graphicsOverlay=new GraphicsOverlay();
  serviceRequestMapImageLayer.addDoneLoadingListener(() -> {
    if (serviceRequestMapImageLayer.getLoadStatus() == LoadStatus.LOADED) {
      Envelope extent=serviceRequestMapImageLayer.getFullExtent();
      mMapView.setViewpoint(new Viewpoint(extent));
      ServiceFeatureTable commentsTable=serviceRequestMapImageLayer.getTables().get(0);
      QueryParameters queryParameters=new QueryParameters();
      queryParameters.setWhereClause(""String_Node_Str"");
      ListenableFuture<FeatureQueryResult> commentQueryResultFuture=commentsTable.queryFeaturesAsync(queryParameters,ServiceFeatureTable.QueryFeatureFields.LOAD_ALL);
      commentQueryResultFuture.addDoneListener(() -> {
        try {
          FeatureQueryResult commentQueryResult=commentQueryResultFuture.get();
          for (          Feature feature : commentQueryResult) {
            featureList.add(feature);
            commentList.add(feature.getAttributes().get(""String_Node_Str"").toString());
          }
          ArrayAdapter<String> adapter=new ArrayAdapter<>(MainActivity.this,android.R.layout.simple_list_item_1,commentList);
          mCommentListView.setAdapter(adapter);
        }
 catch (        InterruptedException|ExecutionException e) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
);
    }
  }
);
  mCommentListView.setOnItemClickListener((parent,view,position,id) -> {
    graphicsOverlay.getGraphics().clear();
    Feature selectedComment=featureList.get(position);
    ServiceFeatureTable commentsTable=serviceRequestMapImageLayer.getTables().get(0);
    RelationshipInfo commentsRelationshipInfo=commentsTable.getLayerInfo().getRelationshipInfos().get(0);
    RelatedQueryParameters relatedQueryParameters=new RelatedQueryParameters(commentsRelationshipInfo);
    relatedQueryParameters.setReturnGeometry(true);
    ListenableFuture<List<RelatedFeatureQueryResult>> relatedRequestResult=commentsTable.queryRelatedFeaturesAsync((ArcGISFeature)selectedComment,relatedQueryParameters);
    relatedRequestResult.addDoneListener(() -> {
      try {
        RelatedFeatureQueryResult result=relatedRequestResult.get().get(0);
        serviceRequestFeature=null;
        for (        Feature relatedFeature : result) {
          if (!relatedFeature.getGeometry().isEmpty()) {
            serviceRequestFeature=(ArcGISFeature)relatedFeature;
            break;
          }
        }
        if (serviceRequestFeature == null) {
          Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          return;
        }
        serviceRequestFeature.loadAsync();
        serviceRequestFeature.addDoneLoadingListener(() -> {
          if (serviceRequestFeature.getLoadStatus() == LoadStatus.LOADED) {
            Point serviceRequestPoint=(Point)serviceRequestFeature.getGeometry();
            Symbol selectedRequestedSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CIRCLE,Color.CYAN,14);
            Graphic requestGraphic=new Graphic(serviceRequestPoint,selectedRequestedSymbol);
            graphicsOverlay.getGraphics().add(requestGraphic);
            mMapView.setViewpointCenterAsync(serviceRequestPoint,150000);
          }
        }
);
      }
 catch (      InterruptedException|ExecutionException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
);
  }
);
  map.getOperationalLayers().add(serviceRequestMapImageLayer);
  mMapView.getGraphicsOverlays().add(graphicsOverlay);
  mMapView.setMap(map);
}",0.964501510574018
63501,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=findViewById(R.id.mapView);
  queryButton=findViewById(R.id.queryButton);
  queryInputBox=findViewById(R.id.queryInputBox);
  ArcGISMap map=new ArcGISMap(Basemap.createStreetsVector());
  Point initialLocation=new Point(-13171939.239529,3923971.284048,SpatialReferences.getWebMercator());
  Viewpoint viewpoint=new Viewpoint(initialLocation,9500000);
  map.setInitialViewpoint(viewpoint);
  mMapView.setMap(map);
  ArcGISMapImageLayer imageLayer=new ArcGISMapImageLayer(getString(R.string.usa_map));
  map.getOperationalLayers().add(imageLayer);
  GraphicsOverlay graphicsOverlay=new GraphicsOverlay();
  mMapView.getGraphicsOverlays().add(graphicsOverlay);
  SimpleMarkerSymbol citySymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CIRCLE,0xFFFF0000,16);
  SimpleLineSymbol stateSymbol=new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID,0xFF0000FF,6);
  SimpleLineSymbol countyLineSymbol=new SimpleLineSymbol(SimpleLineSymbol.Style.DASH,0xFF00FFFF,2);
  SimpleFillSymbol countySymbol=new SimpleFillSymbol(SimpleFillSymbol.Style.DIAGONAL_CROSS,0xFF00FFFF,countyLineSymbol);
  queryInputBox.setText(Integer.toString(1800000));
  queryButton.setEnabled(false);
  imageLayer.addDoneLoadingListener(() -> {
    if (imageLayer.getLoadStatus() == LoadStatus.LOADED) {
      queryButton.setEnabled(true);
      ArcGISMapImageSublayer citiesSublayer=(ArcGISMapImageSublayer)imageLayer.getSublayers().get(0);
      ArcGISMapImageSublayer statesSublayer=(ArcGISMapImageSublayer)imageLayer.getSublayers().get(2);
      ArcGISMapImageSublayer countiesSublayer=(ArcGISMapImageSublayer)imageLayer.getSublayers().get(3);
      citiesSublayer.loadAsync();
      statesSublayer.loadAsync();
      countiesSublayer.loadAsync();
      queryButton.setOnClickListener(v -> {
        graphicsOverlay.getGraphics().clear();
        QueryParameters populationQuery=new QueryParameters();
        populationQuery.setWhereClause(""String_Node_Str"" + queryInputBox.getText().toString());
        populationQuery.setGeometry(mMapView.getCurrentViewpoint(Viewpoint.Type.BOUNDING_GEOMETRY).getTargetGeometry());
        QueryAndDisplayGraphics(citiesSublayer,citySymbol,populationQuery,graphicsOverlay);
        QueryAndDisplayGraphics(statesSublayer,stateSymbol,populationQuery,graphicsOverlay);
        QueryAndDisplayGraphics(countiesSublayer,countySymbol,populationQuery,graphicsOverlay);
      }
);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=findViewById(R.id.mapView);
  mQueryButton=findViewById(R.id.queryButton);
  mQueryInputBox=findViewById(R.id.queryInputBox);
  ArcGISMap map=new ArcGISMap(Basemap.createStreetsVector());
  Point initialLocation=new Point(-13171939.239529,3923971.284048,SpatialReferences.getWebMercator());
  Viewpoint viewpoint=new Viewpoint(initialLocation,9500000);
  map.setInitialViewpoint(viewpoint);
  mMapView.setMap(map);
  ArcGISMapImageLayer imageLayer=new ArcGISMapImageLayer(getString(R.string.usa_map));
  map.getOperationalLayers().add(imageLayer);
  GraphicsOverlay graphicsOverlay=new GraphicsOverlay();
  mMapView.getGraphicsOverlays().add(graphicsOverlay);
  SimpleMarkerSymbol citySymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CIRCLE,0xFFFF0000,16);
  SimpleLineSymbol stateSymbol=new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID,0xFF0000FF,6);
  SimpleLineSymbol countyLineSymbol=new SimpleLineSymbol(SimpleLineSymbol.Style.DASH,0xFF00FFFF,2);
  SimpleFillSymbol countySymbol=new SimpleFillSymbol(SimpleFillSymbol.Style.DIAGONAL_CROSS,0xFF00FFFF,countyLineSymbol);
  mQueryInputBox.setText(Integer.toString(1800000));
  mQueryButton.setEnabled(false);
  imageLayer.addDoneLoadingListener(() -> {
    if (imageLayer.getLoadStatus() == LoadStatus.LOADED) {
      mQueryButton.setEnabled(true);
      ArcGISMapImageSublayer citiesSublayer=(ArcGISMapImageSublayer)imageLayer.getSublayers().get(0);
      ArcGISMapImageSublayer statesSublayer=(ArcGISMapImageSublayer)imageLayer.getSublayers().get(2);
      ArcGISMapImageSublayer countiesSublayer=(ArcGISMapImageSublayer)imageLayer.getSublayers().get(3);
      citiesSublayer.loadAsync();
      statesSublayer.loadAsync();
      countiesSublayer.loadAsync();
      mQueryButton.setOnClickListener(v -> {
        graphicsOverlay.getGraphics().clear();
        QueryParameters populationQuery=new QueryParameters();
        populationQuery.setWhereClause(""String_Node_Str"" + mQueryInputBox.getText().toString());
        populationQuery.setGeometry(mMapView.getCurrentViewpoint(Viewpoint.Type.BOUNDING_GEOMETRY).getTargetGeometry());
        QueryAndDisplayGraphics(citiesSublayer,citySymbol,populationQuery,graphicsOverlay);
        QueryAndDisplayGraphics(statesSublayer,stateSymbol,populationQuery,graphicsOverlay);
        QueryAndDisplayGraphics(countiesSublayer,countySymbol,populationQuery,graphicsOverlay);
      }
);
    }
  }
);
}",0.9958783120706576
63502,"/** 
 * Queries the sublayer's feature table with the query parameters and displays the result features as graphics
 * @param sublayer        - type of sublayer to query from
 * @param sublayerSymbol  - symbol to display on map
 * @param query           - filters based on the population and the current view point
 * @param graphicsOverlay - manages the graphics that will be added to the map view
 */
private void QueryAndDisplayGraphics(ArcGISMapImageSublayer sublayer,Symbol sublayerSymbol,QueryParameters query,GraphicsOverlay graphicsOverlay){
  if (sublayer.getLoadStatus() == LoadStatus.LOADED) {
    ServiceFeatureTable sublayerTable=sublayer.getTable();
    ListenableFuture<FeatureQueryResult> sublayerQuery=sublayerTable.queryFeaturesAsync(query);
    sublayerQuery.addDoneListener(() -> {
      try {
        FeatureQueryResult result=sublayerQuery.get();
        for (        Feature feature : result) {
          Graphic sublayerGraphic=new Graphic(feature.getGeometry(),sublayerSymbol);
          graphicsOverlay.getGraphics().add(sublayerGraphic);
        }
      }
 catch (      InterruptedException|ExecutionException e) {
        Toast.makeText(MainActivity.this,e.toString(),Toast.LENGTH_SHORT).show();
      }
    }
);
  }
}","/** 
 * Queries the sublayer's feature table with the query parameters and displays the result features as graphics
 * @param sublayer        - type of sublayer to query from
 * @param sublayerSymbol  - symbol to display on map
 * @param query           - filters based on the population and the current view point
 * @param graphicsOverlay - manages the graphics that will be added to the map view
 */
private static void QueryAndDisplayGraphics(ArcGISMapImageSublayer sublayer,Symbol sublayerSymbol,QueryParameters query,GraphicsOverlay graphicsOverlay){
  if (sublayer.getLoadStatus() == LoadStatus.LOADED) {
    ServiceFeatureTable sublayerTable=sublayer.getTable();
    ListenableFuture<FeatureQueryResult> sublayerQuery=sublayerTable.queryFeaturesAsync(query);
    sublayerQuery.addDoneListener(() -> {
      try {
        FeatureQueryResult result=sublayerQuery.get();
        for (        Feature feature : result) {
          Graphic sublayerGraphic=new Graphic(feature.getGeometry(),sublayerSymbol);
          graphicsOverlay.getGraphics().add(sublayerGraphic);
        }
      }
 catch (      InterruptedException|ExecutionException e) {
        Log.e(MainActivity.class.getSimpleName(),e.toString());
      }
    }
);
  }
}",0.969770253929867
63503,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=findViewById(R.id.mapView);
  ArcGISMap map=new ArcGISMap(SpatialReference.create(3857));
  map.setBasemap(Basemap.createNationalGeographic());
  mMapView.setMap(map);
  Geometry startingEnvelope=new Envelope(-10995912.335747,5267868.874421,-9880363.974046,5960699.183877,SpatialReferences.getWebMercator());
  mMapView.setViewpointGeometryAsync(startingEnvelope);
  GraphicsOverlay graphicsOverlay=new GraphicsOverlay();
  mMapView.getGraphicsOverlays().add(graphicsOverlay);
  final SimpleMarkerSymbol markerSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CIRCLE,0xFFFF0000,5);
  Graphic inputPointGraphic=new Graphic();
  inputPointGraphic.setSymbol(markerSymbol);
  graphicsOverlay.getGraphics().add(inputPointGraphic);
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  mMapView.setOnTouchListener(new DefaultMapViewOnTouchListener(this,mMapView){
    @Override public boolean onSingleTapConfirmed(    MotionEvent motionEvent){
      android.graphics.Point clickedLocation=new android.graphics.Point(Math.round(motionEvent.getX()),Math.round(motionEvent.getY()));
      Point originalPoint=mMapView.screenToLocation(clickedLocation);
      inputPointGraphic.setGeometry(originalPoint);
      Point projectedPoint=(Point)GeometryEngine.project(originalPoint,SpatialReference.create(4236));
      String ox=decimalFormat.format(originalPoint.getX());
      String oy=decimalFormat.format(originalPoint.getY());
      String px=decimalFormat.format(projectedPoint.getX());
      String py=decimalFormat.format(projectedPoint.getY());
      TextView calloutContent=new TextView(getApplicationContext());
      calloutContent.setTextColor(Color.BLACK);
      calloutContent.setText(String.format(""String_Node_Str"",ox,oy,px,py));
      final Callout callout=mMapView.getCallout();
      callout.setLocation(originalPoint);
      callout.setContent(calloutContent);
      callout.show();
      return true;
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=findViewById(R.id.mapView);
  ArcGISMap map=new ArcGISMap(SpatialReference.create(3857));
  map.setBasemap(Basemap.createNationalGeographic());
  mMapView.setMap(map);
  Geometry startingEnvelope=new Envelope(-10995912.335747,5267868.874421,-9880363.974046,5960699.183877,SpatialReferences.getWebMercator());
  mMapView.setViewpointGeometryAsync(startingEnvelope);
  GraphicsOverlay graphicsOverlay=new GraphicsOverlay();
  mMapView.getGraphicsOverlays().add(graphicsOverlay);
  final SimpleMarkerSymbol markerSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CIRCLE,0xFFFF0000,5);
  final Graphic inputPointGraphic=new Graphic();
  inputPointGraphic.setSymbol(markerSymbol);
  graphicsOverlay.getGraphics().add(inputPointGraphic);
  final DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  mMapView.setOnTouchListener(new DefaultMapViewOnTouchListener(this,mMapView){
    @Override public boolean onSingleTapConfirmed(    MotionEvent motionEvent){
      android.graphics.Point clickedLocation=new android.graphics.Point(Math.round(motionEvent.getX()),Math.round(motionEvent.getY()));
      Point originalPoint=mMapView.screenToLocation(clickedLocation);
      inputPointGraphic.setGeometry(originalPoint);
      Point projectedPoint=(Point)GeometryEngine.project(originalPoint,SpatialReference.create(4236));
      String ox=decimalFormat.format(originalPoint.getX());
      String oy=decimalFormat.format(originalPoint.getY());
      String px=decimalFormat.format(projectedPoint.getX());
      String py=decimalFormat.format(projectedPoint.getY());
      TextView calloutContent=new TextView(getApplicationContext());
      calloutContent.setTextColor(Color.BLACK);
      calloutContent.setText(String.format(""String_Node_Str"",ox,oy,px,py));
      final Callout callout=mMapView.getCallout();
      callout.setLocation(originalPoint);
      callout.setContent(calloutContent);
      callout.show();
      return true;
    }
  }
);
}",0.997148288973384
63504,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=(MapView)findViewById(R.id.mapView);
  final ArcGISTiledLayer tiledLayerBaseMap=new ArcGISTiledLayer(getResources().getString(R.string.world_topo_service));
  Basemap basemap=new Basemap(tiledLayerBaseMap);
  Map map=new Map(basemap);
  mMapView.setMap(map);
  Spinner rendermodesSpinner=(Spinner)findViewById(R.id.rendermodesspinner);
  mRendermodeSpinnerList=new ArrayList<>();
  mRendermodeSpinnerList.add(""String_Node_Str"");
  mRendermodeSpinnerList.add(""String_Node_Str"");
  mRendermodeSpinnerList.add(""String_Node_Str"");
  mDataAdapter=new ArrayAdapter<>(this,R.layout.spinner_item,mRendermodeSpinnerList);
  rendermodesSpinner.setAdapter(mDataAdapter);
  rendermodesSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
switch (position) {
case 0:
        tiledLayerBaseMap.setRenderMode(ImageTiledLayer.RenderMode.DEFAULT);
      break;
case 1:
    tiledLayerBaseMap.setRenderMode(ImageTiledLayer.RenderMode.AESTHETIC);
  break;
case 2:
tiledLayerBaseMap.setRenderMode(ImageTiledLayer.RenderMode.SCALE);
break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
mSeekBar=(VerticalSeekBar)findViewById(R.id.seekBar);
mSeekBarScale=(TextView)findViewById(R.id.seekbarscale);
mMapViewScale=(TextView)findViewById(R.id.mapviewscale);
mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
switch (progress) {
case 0:
mMapView.setViewpointScaleAsync(5.91657527591555E8);
mSeekBarScale.setText(""String_Node_Str"" + 5.91657527591555E8);
break;
case 1:
mMapView.setViewpointScaleAsync(2.95828763795777E8);
mSeekBarScale.setText(""String_Node_Str"" + 2.95828763795777E8);
break;
case 2:
mMapView.setViewpointScaleAsync(1.47914381897889E8);
mSeekBarScale.setText(""String_Node_Str"" + 1.47914381897889E8);
break;
case 3:
mMapView.setViewpointScaleAsync(7.3957190948944E7);
mSeekBarScale.setText(""String_Node_Str"" + 7.3957190948944E7);
break;
case 4:
mMapView.setViewpointScaleAsync(3.6978595474472E7);
mSeekBarScale.setText(""String_Node_Str"" + 3.6978595474472E7);
break;
case 5:
mMapView.setViewpointScaleAsync(1.8489297737236E7);
mSeekBarScale.setText(""String_Node_Str"" + 1.8489297737236E7);
break;
case 6:
mMapView.setViewpointScaleAsync(9244648.868618);
mSeekBarScale.setText(""String_Node_Str"" + 9244648.868618);
break;
case 7:
mMapView.setViewpointScaleAsync(4622324.434309);
mSeekBarScale.setText(""String_Node_Str"" + 4622324.434309);
break;
case 8:
mMapView.setViewpointScaleAsync(2311162.217155);
mSeekBarScale.setText(""String_Node_Str"" + 2311162.217155);
break;
case 9:
mMapView.setViewpointScaleAsync(1155581.108577);
mSeekBarScale.setText(""String_Node_Str"" + 1155581.108577);
break;
case 10:
mMapView.setViewpointScaleAsync(577790.554289);
mSeekBarScale.setText(""String_Node_Str"" + 577790.554289);
break;
case 11:
mMapView.setViewpointScaleAsync(288895.277144);
mSeekBarScale.setText(""String_Node_Str"" + 288895.277144);
break;
case 12:
mMapView.setViewpointScaleAsync(144447.638572);
mSeekBarScale.setText(""String_Node_Str"" + 144447.638572);
break;
case 13:
mMapView.setViewpointScaleAsync(72223.819286);
mSeekBarScale.setText(""String_Node_Str"" + 72223.819286);
break;
case 14:
mMapView.setViewpointScaleAsync(36111.909643);
mSeekBarScale.setText(""String_Node_Str"" + 36111.909643);
break;
case 15:
mMapView.setViewpointScaleAsync(18055.954822);
mSeekBarScale.setText(""String_Node_Str"" + 18055.954822);
break;
case 16:
mMapView.setViewpointScaleAsync(9027.977411);
mSeekBarScale.setText(""String_Node_Str"" + 9027.977411);
break;
case 17:
mMapView.setViewpointScaleAsync(4513.988705);
mSeekBarScale.setText(""String_Node_Str"" + 4513.988705);
break;
case 18:
mMapView.setViewpointScaleAsync(2256.994353);
mSeekBarScale.setText(""String_Node_Str"" + 2256.994353);
break;
case 19:
mMapView.setViewpointScaleAsync(1128.497176);
mSeekBarScale.setText(""String_Node_Str"" + 1128.497176);
break;
case 20:
mMapView.setViewpointScaleAsync(564.248588);
mSeekBarScale.setText(""String_Node_Str"" + 564.248588);
break;
case 21:
mMapView.setViewpointScaleAsync(282.124294);
mSeekBarScale.setText(""String_Node_Str"" + 282.124294);
break;
case 22:
mMapView.setViewpointScaleAsync(141.062147);
mSeekBarScale.setText(""String_Node_Str"" + 141.062147);
break;
case 23:
mMapView.setViewpointScaleAsync(70.5310735);
mSeekBarScale.setText(""String_Node_Str"" + 70.5310735);
break;
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
}
}
);
mMapView.addVisibleAreaChangedListener(new VisibleAreaChangedListener(){
@Override public void visibleAreaChanged(VisibleAreaChangedEvent visibleAreaChangedEvent){
double mapScale=mMapView.getMapScale();
mMapViewScale.setText(""String_Node_Str"" + mapScale);
if (mapScale == 5.91657527591555E8) {
mSeekBar.setProgress(0);
mSeekBarScale.setText(""String_Node_Str"" + 5.91657527591555E8);
}
 else if (mapScale == 2.95828763795777E8) {
mSeekBar.setProgress(1);
mSeekBarScale.setText(""String_Node_Str"" + 2.95828763795777E8);
}
 else if (mapScale == 1.47914381897889E8) {
mSeekBar.setProgress(2);
mSeekBarScale.setText(""String_Node_Str"" + 1.47914381897889E8);
}
 else if (mapScale == 7.3957190948944E7) {
mSeekBar.setProgress(3);
mSeekBarScale.setText(""String_Node_Str"" + 7.3957190948944E7);
}
 else if (mapScale == 3.6978595474472E7) {
mSeekBar.setProgress(4);
mSeekBarScale.setText(""String_Node_Str"" + 3.6978595474472E7);
}
 else if (mapScale == 1.8489297737236E7) {
mSeekBar.setProgress(5);
mSeekBarScale.setText(""String_Node_Str"" + 1.8489297737236E7);
}
 else if (mapScale == 9244648.868618) {
mSeekBar.setProgress(6);
mSeekBarScale.setText(""String_Node_Str"" + 9244648.868618);
}
 else if (mapScale == 4622324.434309) {
mSeekBar.setProgress(7);
mSeekBarScale.setText(""String_Node_Str"" + 4622324.434309);
}
 else if (mapScale == 2311162.217155) {
mSeekBar.setProgress(8);
mSeekBarScale.setText(""String_Node_Str"" + 2311162.217155);
}
 else if (mapScale == 1155581.108577) {
mSeekBar.setProgress(9);
mSeekBarScale.setText(""String_Node_Str"" + 1155581.108577);
}
 else if (mapScale == 577790.554289) {
mSeekBar.setProgress(10);
mSeekBarScale.setText(""String_Node_Str"" + 577790.554289);
}
 else if (mapScale == 288895.277144) {
mSeekBar.setProgress(11);
mSeekBarScale.setText(""String_Node_Str"" + 288895.277144);
}
 else if (mapScale == 144447.638572) {
mSeekBar.setProgress(12);
mSeekBarScale.setText(""String_Node_Str"" + 144447.638572);
}
 else if (mapScale == 72223.819286) {
mSeekBar.setProgress(13);
mSeekBarScale.setText(""String_Node_Str"" + 72223.819286);
}
 else if (mapScale == 36111.909643) {
mSeekBar.setProgress(14);
mSeekBarScale.setText(""String_Node_Str"" + 36111.909643);
}
 else if (mapScale == 18055.954822) {
mSeekBar.setProgress(15);
mSeekBarScale.setText(""String_Node_Str"" + 18055.954822);
}
 else if (mapScale == 9027.977411) {
mSeekBar.setProgress(16);
mSeekBarScale.setText(""String_Node_Str"" + 9027.977411);
}
 else if (mapScale == 4513.988705) {
mSeekBar.setProgress(17);
mSeekBarScale.setText(""String_Node_Str"" + 4513.988705);
}
 else if (mapScale == 2256.994353) {
mSeekBar.setProgress(18);
mSeekBarScale.setText(""String_Node_Str"" + 2256.994353);
}
 else if (mapScale == 1128.497176) {
mSeekBar.setProgress(19);
mSeekBarScale.setText(""String_Node_Str"" + 1128.497176);
}
 else if (mapScale == 564.248588) {
mSeekBar.setProgress(20);
mSeekBarScale.setText(""String_Node_Str"" + 564.248588);
}
 else if (mapScale == 282.124294) {
mSeekBar.setProgress(21);
mSeekBarScale.setText(""String_Node_Str"" + 282.124294);
}
 else if (mapScale == 141.062147) {
mSeekBar.setProgress(22);
mSeekBarScale.setText(""String_Node_Str"" + 141.062147);
}
 else if (mapScale == 70.5310735) {
mSeekBar.setProgress(23);
mSeekBarScale.setText(""String_Node_Str"" + 70.5310735);
}
}
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mMapView=(MapView)findViewById(R.id.mapView);
  final ArcGISTiledLayer tiledLayerBaseMap=new ArcGISTiledLayer(getResources().getString(R.string.world_topo_service));
  Basemap basemap=new Basemap(tiledLayerBaseMap);
  Map map=new Map(basemap);
  mMapView.setMap(map);
  Spinner rendermodesSpinner=(Spinner)findViewById(R.id.rendermodesspinner);
  mRendermodeSpinnerList=new ArrayList<>();
  mRendermodeSpinnerList.add(""String_Node_Str"");
  mRendermodeSpinnerList.add(""String_Node_Str"");
  mRendermodeSpinnerList.add(""String_Node_Str"");
  mDataAdapter=new ArrayAdapter<>(this,R.layout.spinner_item,mRendermodeSpinnerList);
  rendermodesSpinner.setAdapter(mDataAdapter);
  rendermodesSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
switch (position) {
case 0:
        tiledLayerBaseMap.setRenderMode(ImageTiledLayer.RenderMode.DEFAULT);
      break;
case 1:
    tiledLayerBaseMap.setRenderMode(ImageTiledLayer.RenderMode.AESTHETIC);
  break;
case 2:
tiledLayerBaseMap.setRenderMode(ImageTiledLayer.RenderMode.SCALE);
break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
mSeekBar=(VerticalSeekBar)findViewById(R.id.seekBar);
mSeekBarScale=(TextView)findViewById(R.id.seekbarscale);
mMapViewScale=(TextView)findViewById(R.id.mapviewscale);
mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
switch (progress) {
case 0:
mMapView.setViewpointScaleAsync(5.91657527591555E8);
mSeekBarScale.setText(""String_Node_Str"" + 5.91657527591555E8);
break;
case 1:
mMapView.setViewpointScaleAsync(2.95828763795777E8);
mSeekBarScale.setText(""String_Node_Str"" + 2.95828763795777E8);
break;
case 2:
mMapView.setViewpointScaleAsync(1.47914381897889E8);
mSeekBarScale.setText(""String_Node_Str"" + 1.47914381897889E8);
break;
case 3:
mMapView.setViewpointScaleAsync(7.3957190948944E7);
mSeekBarScale.setText(""String_Node_Str"" + 7.3957190948944E7);
break;
case 4:
mMapView.setViewpointScaleAsync(3.6978595474472E7);
mSeekBarScale.setText(""String_Node_Str"" + 3.6978595474472E7);
break;
case 5:
mMapView.setViewpointScaleAsync(1.8489297737236E7);
mSeekBarScale.setText(""String_Node_Str"" + 1.8489297737236E7);
break;
case 6:
mMapView.setViewpointScaleAsync(9244648.868618);
mSeekBarScale.setText(""String_Node_Str"" + 9244648.868618);
break;
case 7:
mMapView.setViewpointScaleAsync(4622324.434309);
mSeekBarScale.setText(""String_Node_Str"" + 4622324.434309);
break;
case 8:
mMapView.setViewpointScaleAsync(2311162.217155);
mSeekBarScale.setText(""String_Node_Str"" + 2311162.217155);
break;
case 9:
mMapView.setViewpointScaleAsync(1155581.108577);
mSeekBarScale.setText(""String_Node_Str"" + 1155581.108577);
break;
case 10:
mMapView.setViewpointScaleAsync(577790.554289);
mSeekBarScale.setText(""String_Node_Str"" + 577790.554289);
break;
case 11:
mMapView.setViewpointScaleAsync(288895.277144);
mSeekBarScale.setText(""String_Node_Str"" + 288895.277144);
break;
case 12:
mMapView.setViewpointScaleAsync(144447.638572);
mSeekBarScale.setText(""String_Node_Str"" + 144447.638572);
break;
case 13:
mMapView.setViewpointScaleAsync(72223.819286);
mSeekBarScale.setText(""String_Node_Str"" + 72223.819286);
break;
case 14:
mMapView.setViewpointScaleAsync(36111.909643);
mSeekBarScale.setText(""String_Node_Str"" + 36111.909643);
break;
case 15:
mMapView.setViewpointScaleAsync(18055.954822);
mSeekBarScale.setText(""String_Node_Str"" + 18055.954822);
break;
case 16:
mMapView.setViewpointScaleAsync(9027.977411);
mSeekBarScale.setText(""String_Node_Str"" + 9027.977411);
break;
case 17:
mMapView.setViewpointScaleAsync(4513.988705);
mSeekBarScale.setText(""String_Node_Str"" + 4513.988705);
break;
case 18:
mMapView.setViewpointScaleAsync(2256.994353);
mSeekBarScale.setText(""String_Node_Str"" + 2256.994353);
break;
case 19:
mMapView.setViewpointScaleAsync(1128.497176);
mSeekBarScale.setText(""String_Node_Str"" + 1128.497176);
break;
case 20:
mMapView.setViewpointScaleAsync(564.248588);
mSeekBarScale.setText(""String_Node_Str"" + 564.248588);
break;
case 21:
mMapView.setViewpointScaleAsync(282.124294);
mSeekBarScale.setText(""String_Node_Str"" + 282.124294);
break;
case 22:
mMapView.setViewpointScaleAsync(141.062147);
mSeekBarScale.setText(""String_Node_Str"" + 141.062147);
break;
case 23:
mMapView.setViewpointScaleAsync(70.5310735);
mSeekBarScale.setText(""String_Node_Str"" + 70.5310735);
break;
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
}
}
);
mMapView.addVisibleAreaChangedListener(new VisibleAreaChangedListener(){
@Override public void visibleAreaChanged(VisibleAreaChangedEvent visibleAreaChangedEvent){
double mapScale=mMapView.getMapScale();
mMapViewScale.setText(""String_Node_Str"" + mapScale);
if (mapScale >= 2.95828763795777E8 && mapScale <= 5.91657527591555E8) {
mSeekBar.setProgress(0);
mSeekBarScale.setText(""String_Node_Str"" + 2.95828763795777E8);
}
 else if (mapScale >= 1.47914381897889E8 && mapScale <= 2.95828763795777E8) {
mSeekBar.setProgress(1);
mSeekBarScale.setText(""String_Node_Str"" + 1.47914381897889E8);
}
 else if (mapScale >= 7.3957190948944E7 && mapScale <= 1.47914381897889E8) {
mSeekBar.setProgress(2);
mSeekBarScale.setText(""String_Node_Str"" + 7.3957190948944E7);
}
 else if (mapScale >= 3.6978595474472E7 && mapScale <= 7.3957190948944E7) {
mSeekBar.setProgress(3);
mSeekBarScale.setText(""String_Node_Str"" + 3.6978595474472E7);
}
 else if (mapScale >= 1.8489297737236E7 && mapScale <= 3.6978595474472E7) {
mSeekBar.setProgress(4);
mSeekBarScale.setText(""String_Node_Str"" + 1.8489297737236E7);
}
 else if (mapScale >= 9244648.868618 && mapScale <= 1.8489297737236E7) {
mSeekBar.setProgress(5);
mSeekBarScale.setText(""String_Node_Str"" + 9244648.868618);
}
 else if (mapScale >= 4622324.434309 && mapScale <= 9244648.868618) {
mSeekBar.setProgress(6);
mSeekBarScale.setText(""String_Node_Str"" + 4622324.434309);
}
 else if (mapScale >= 2311162.217155 && mapScale <= 4622324.434309) {
mSeekBar.setProgress(7);
mSeekBarScale.setText(""String_Node_Str"" + 2311162.217155);
}
 else if (mapScale >= 1155581.108577 && mapScale <= 2311162.217155) {
mSeekBar.setProgress(8);
mSeekBarScale.setText(""String_Node_Str"" + 1155581.108577);
}
 else if (mapScale >= 577790.554289 && mapScale <= 1155581.108577) {
mSeekBar.setProgress(9);
mSeekBarScale.setText(""String_Node_Str"" + 577790.554289);
}
 else if (mapScale >= 288895.277144 && mapScale <= 577790.554289) {
mSeekBar.setProgress(10);
mSeekBarScale.setText(""String_Node_Str"" + 288895.277144);
}
 else if (mapScale >= 144447.638572 && mapScale <= 288895.277144) {
mSeekBar.setProgress(11);
mSeekBarScale.setText(""String_Node_Str"" + 144447.638572);
}
 else if (mapScale >= 72223.819286 && mapScale <= 144447.638572) {
mSeekBar.setProgress(12);
mSeekBarScale.setText(""String_Node_Str"" + 72223.819286);
}
 else if (mapScale >= 36111.909643 && mapScale <= 72223.819286) {
mSeekBar.setProgress(13);
mSeekBarScale.setText(""String_Node_Str"" + 36111.909643);
}
 else if (mapScale >= 18055.954822 && mapScale <= 36111.909643) {
mSeekBar.setProgress(14);
mSeekBarScale.setText(""String_Node_Str"" + 18055.954822);
}
 else if (mapScale >= 9027.977411 && mapScale <= 18055.954822) {
mSeekBar.setProgress(15);
mSeekBarScale.setText(""String_Node_Str"" + 9027.977411);
}
 else if (mapScale >= 4513.988705 && mapScale <= 9027.977411) {
mSeekBar.setProgress(16);
mSeekBarScale.setText(""String_Node_Str"" + 4513.988705);
}
 else if (mapScale >= 2256.994353 && mapScale <= 4513.988705) {
mSeekBar.setProgress(17);
mSeekBarScale.setText(""String_Node_Str"" + 2256.994353);
}
 else if (mapScale >= 1128.497176 && mapScale <= 2256.994353) {
mSeekBar.setProgress(18);
mSeekBarScale.setText(""String_Node_Str"" + 1128.497176);
}
 else if (mapScale >= 564.248588 && mapScale <= 1128.497176) {
mSeekBar.setProgress(19);
mSeekBarScale.setText(""String_Node_Str"" + 564.248588);
}
 else if (mapScale >= 282.124294 && mapScale <= 564.248588) {
mSeekBar.setProgress(20);
mSeekBarScale.setText(""String_Node_Str"" + 282.124294);
}
 else if (mapScale >= 141.062147 && mapScale <= 282.124294) {
mSeekBar.setProgress(21);
mSeekBarScale.setText(""String_Node_Str"" + 141.062147);
}
 else if (mapScale >= 70.5310735 && mapScale <= 141.062147) {
mSeekBar.setProgress(22);
mSeekBarScale.setText(""String_Node_Str"" + 70.5310735);
}
}
}
);
}",0.7181670965033288
63505,"@Override public void visibleAreaChanged(VisibleAreaChangedEvent visibleAreaChangedEvent){
  double mapScale=mMapView.getMapScale();
  mMapViewScale.setText(""String_Node_Str"" + mapScale);
  if (mapScale == 5.91657527591555E8) {
    mSeekBar.setProgress(0);
    mSeekBarScale.setText(""String_Node_Str"" + 5.91657527591555E8);
  }
 else   if (mapScale == 2.95828763795777E8) {
    mSeekBar.setProgress(1);
    mSeekBarScale.setText(""String_Node_Str"" + 2.95828763795777E8);
  }
 else   if (mapScale == 1.47914381897889E8) {
    mSeekBar.setProgress(2);
    mSeekBarScale.setText(""String_Node_Str"" + 1.47914381897889E8);
  }
 else   if (mapScale == 7.3957190948944E7) {
    mSeekBar.setProgress(3);
    mSeekBarScale.setText(""String_Node_Str"" + 7.3957190948944E7);
  }
 else   if (mapScale == 3.6978595474472E7) {
    mSeekBar.setProgress(4);
    mSeekBarScale.setText(""String_Node_Str"" + 3.6978595474472E7);
  }
 else   if (mapScale == 1.8489297737236E7) {
    mSeekBar.setProgress(5);
    mSeekBarScale.setText(""String_Node_Str"" + 1.8489297737236E7);
  }
 else   if (mapScale == 9244648.868618) {
    mSeekBar.setProgress(6);
    mSeekBarScale.setText(""String_Node_Str"" + 9244648.868618);
  }
 else   if (mapScale == 4622324.434309) {
    mSeekBar.setProgress(7);
    mSeekBarScale.setText(""String_Node_Str"" + 4622324.434309);
  }
 else   if (mapScale == 2311162.217155) {
    mSeekBar.setProgress(8);
    mSeekBarScale.setText(""String_Node_Str"" + 2311162.217155);
  }
 else   if (mapScale == 1155581.108577) {
    mSeekBar.setProgress(9);
    mSeekBarScale.setText(""String_Node_Str"" + 1155581.108577);
  }
 else   if (mapScale == 577790.554289) {
    mSeekBar.setProgress(10);
    mSeekBarScale.setText(""String_Node_Str"" + 577790.554289);
  }
 else   if (mapScale == 288895.277144) {
    mSeekBar.setProgress(11);
    mSeekBarScale.setText(""String_Node_Str"" + 288895.277144);
  }
 else   if (mapScale == 144447.638572) {
    mSeekBar.setProgress(12);
    mSeekBarScale.setText(""String_Node_Str"" + 144447.638572);
  }
 else   if (mapScale == 72223.819286) {
    mSeekBar.setProgress(13);
    mSeekBarScale.setText(""String_Node_Str"" + 72223.819286);
  }
 else   if (mapScale == 36111.909643) {
    mSeekBar.setProgress(14);
    mSeekBarScale.setText(""String_Node_Str"" + 36111.909643);
  }
 else   if (mapScale == 18055.954822) {
    mSeekBar.setProgress(15);
    mSeekBarScale.setText(""String_Node_Str"" + 18055.954822);
  }
 else   if (mapScale == 9027.977411) {
    mSeekBar.setProgress(16);
    mSeekBarScale.setText(""String_Node_Str"" + 9027.977411);
  }
 else   if (mapScale == 4513.988705) {
    mSeekBar.setProgress(17);
    mSeekBarScale.setText(""String_Node_Str"" + 4513.988705);
  }
 else   if (mapScale == 2256.994353) {
    mSeekBar.setProgress(18);
    mSeekBarScale.setText(""String_Node_Str"" + 2256.994353);
  }
 else   if (mapScale == 1128.497176) {
    mSeekBar.setProgress(19);
    mSeekBarScale.setText(""String_Node_Str"" + 1128.497176);
  }
 else   if (mapScale == 564.248588) {
    mSeekBar.setProgress(20);
    mSeekBarScale.setText(""String_Node_Str"" + 564.248588);
  }
 else   if (mapScale == 282.124294) {
    mSeekBar.setProgress(21);
    mSeekBarScale.setText(""String_Node_Str"" + 282.124294);
  }
 else   if (mapScale == 141.062147) {
    mSeekBar.setProgress(22);
    mSeekBarScale.setText(""String_Node_Str"" + 141.062147);
  }
 else   if (mapScale == 70.5310735) {
    mSeekBar.setProgress(23);
    mSeekBarScale.setText(""String_Node_Str"" + 70.5310735);
  }
}","@Override public void visibleAreaChanged(VisibleAreaChangedEvent visibleAreaChangedEvent){
  double mapScale=mMapView.getMapScale();
  mMapViewScale.setText(""String_Node_Str"" + mapScale);
  if (mapScale >= 2.95828763795777E8 && mapScale <= 5.91657527591555E8) {
    mSeekBar.setProgress(0);
    mSeekBarScale.setText(""String_Node_Str"" + 2.95828763795777E8);
  }
 else   if (mapScale >= 1.47914381897889E8 && mapScale <= 2.95828763795777E8) {
    mSeekBar.setProgress(1);
    mSeekBarScale.setText(""String_Node_Str"" + 1.47914381897889E8);
  }
 else   if (mapScale >= 7.3957190948944E7 && mapScale <= 1.47914381897889E8) {
    mSeekBar.setProgress(2);
    mSeekBarScale.setText(""String_Node_Str"" + 7.3957190948944E7);
  }
 else   if (mapScale >= 3.6978595474472E7 && mapScale <= 7.3957190948944E7) {
    mSeekBar.setProgress(3);
    mSeekBarScale.setText(""String_Node_Str"" + 3.6978595474472E7);
  }
 else   if (mapScale >= 1.8489297737236E7 && mapScale <= 3.6978595474472E7) {
    mSeekBar.setProgress(4);
    mSeekBarScale.setText(""String_Node_Str"" + 1.8489297737236E7);
  }
 else   if (mapScale >= 9244648.868618 && mapScale <= 1.8489297737236E7) {
    mSeekBar.setProgress(5);
    mSeekBarScale.setText(""String_Node_Str"" + 9244648.868618);
  }
 else   if (mapScale >= 4622324.434309 && mapScale <= 9244648.868618) {
    mSeekBar.setProgress(6);
    mSeekBarScale.setText(""String_Node_Str"" + 4622324.434309);
  }
 else   if (mapScale >= 2311162.217155 && mapScale <= 4622324.434309) {
    mSeekBar.setProgress(7);
    mSeekBarScale.setText(""String_Node_Str"" + 2311162.217155);
  }
 else   if (mapScale >= 1155581.108577 && mapScale <= 2311162.217155) {
    mSeekBar.setProgress(8);
    mSeekBarScale.setText(""String_Node_Str"" + 1155581.108577);
  }
 else   if (mapScale >= 577790.554289 && mapScale <= 1155581.108577) {
    mSeekBar.setProgress(9);
    mSeekBarScale.setText(""String_Node_Str"" + 577790.554289);
  }
 else   if (mapScale >= 288895.277144 && mapScale <= 577790.554289) {
    mSeekBar.setProgress(10);
    mSeekBarScale.setText(""String_Node_Str"" + 288895.277144);
  }
 else   if (mapScale >= 144447.638572 && mapScale <= 288895.277144) {
    mSeekBar.setProgress(11);
    mSeekBarScale.setText(""String_Node_Str"" + 144447.638572);
  }
 else   if (mapScale >= 72223.819286 && mapScale <= 144447.638572) {
    mSeekBar.setProgress(12);
    mSeekBarScale.setText(""String_Node_Str"" + 72223.819286);
  }
 else   if (mapScale >= 36111.909643 && mapScale <= 72223.819286) {
    mSeekBar.setProgress(13);
    mSeekBarScale.setText(""String_Node_Str"" + 36111.909643);
  }
 else   if (mapScale >= 18055.954822 && mapScale <= 36111.909643) {
    mSeekBar.setProgress(14);
    mSeekBarScale.setText(""String_Node_Str"" + 18055.954822);
  }
 else   if (mapScale >= 9027.977411 && mapScale <= 18055.954822) {
    mSeekBar.setProgress(15);
    mSeekBarScale.setText(""String_Node_Str"" + 9027.977411);
  }
 else   if (mapScale >= 4513.988705 && mapScale <= 9027.977411) {
    mSeekBar.setProgress(16);
    mSeekBarScale.setText(""String_Node_Str"" + 4513.988705);
  }
 else   if (mapScale >= 2256.994353 && mapScale <= 4513.988705) {
    mSeekBar.setProgress(17);
    mSeekBarScale.setText(""String_Node_Str"" + 2256.994353);
  }
 else   if (mapScale >= 1128.497176 && mapScale <= 2256.994353) {
    mSeekBar.setProgress(18);
    mSeekBarScale.setText(""String_Node_Str"" + 1128.497176);
  }
 else   if (mapScale >= 564.248588 && mapScale <= 1128.497176) {
    mSeekBar.setProgress(19);
    mSeekBarScale.setText(""String_Node_Str"" + 564.248588);
  }
 else   if (mapScale >= 282.124294 && mapScale <= 564.248588) {
    mSeekBar.setProgress(20);
    mSeekBarScale.setText(""String_Node_Str"" + 282.124294);
  }
 else   if (mapScale >= 141.062147 && mapScale <= 282.124294) {
    mSeekBar.setProgress(21);
    mSeekBarScale.setText(""String_Node_Str"" + 141.062147);
  }
 else   if (mapScale >= 70.5310735 && mapScale <= 141.062147) {
    mSeekBar.setProgress(22);
    mSeekBarScale.setText(""String_Node_Str"" + 70.5310735);
  }
}",0.4307281229124916
63506,"private void removeSingleTx(SQLiteDatabase db,String tx){
  String deleteTx=""String_Node_Str"" + tx + ""String_Node_Str"";
  String deleteIn=""String_Node_Str"" + tx + ""String_Node_Str"";
  String deleteOut=""String_Node_Str"" + tx + ""String_Node_Str"";
  String deleteAddressesTx=""String_Node_Str"" + tx + ""String_Node_Str"";
  String inSql=""String_Node_Str"" + tx + ""String_Node_Str"";
  String existOtherIn=""String_Node_Str"";
  String updatePrevOut=""String_Node_Str"";
  Cursor c=db.rawQuery(inSql,new String[]{tx});
  List<Object[]> needUpdateOuts=new ArrayList<Object[]>();
  while (c.moveToNext()) {
    int idColumn=c.getColumnIndex(AbstractDb.InsColumns.PREV_TX_HASH);
    String prevTxHash=null;
    int prevOutSn=0;
    if (idColumn != -1) {
      prevTxHash=c.getString(idColumn);
    }
    idColumn=c.getColumnIndex(AbstractDb.InsColumns.PREV_OUT_SN);
    if (idColumn != -1) {
      prevOutSn=c.getInt(idColumn);
    }
    needUpdateOuts.add(new Object[]{prevTxHash,prevOutSn});
  }
  c.close();
  db.execSQL(deleteAddressesTx);
  db.execSQL(deleteOut);
  db.execSQL(deleteIn);
  db.execSQL(deleteTx);
  for (  Object[] array : needUpdateOuts) {
    c=db.rawQuery(existOtherIn,new String[]{array[0].toString(),array[1].toString()});
    while (c.moveToNext()) {
      if (c.getInt(0) == 0) {
        String updateSql=Utils.format(updatePrevOut,Out.OutStatus.unspent.getValue(),array[0].toString(),Integer.valueOf(array[1].toString()));
        db.execSQL(updateSql);
      }
    }
    c.close();
  }
}","private void removeSingleTx(SQLiteDatabase db,String tx){
  String deleteTx=""String_Node_Str"" + tx + ""String_Node_Str"";
  String deleteIn=""String_Node_Str"" + tx + ""String_Node_Str"";
  String deleteOut=""String_Node_Str"" + tx + ""String_Node_Str"";
  String deleteAddressesTx=""String_Node_Str"" + tx + ""String_Node_Str"";
  String inSql=""String_Node_Str"" + tx + ""String_Node_Str"";
  String existOtherIn=""String_Node_Str"";
  String updatePrevOut=""String_Node_Str"";
  Cursor c=db.rawQuery(inSql,null);
  List<Object[]> needUpdateOuts=new ArrayList<Object[]>();
  while (c.moveToNext()) {
    int idColumn=c.getColumnIndex(AbstractDb.InsColumns.PREV_TX_HASH);
    String prevTxHash=null;
    int prevOutSn=0;
    if (idColumn != -1) {
      prevTxHash=c.getString(idColumn);
    }
    idColumn=c.getColumnIndex(AbstractDb.InsColumns.PREV_OUT_SN);
    if (idColumn != -1) {
      prevOutSn=c.getInt(idColumn);
    }
    needUpdateOuts.add(new Object[]{prevTxHash,prevOutSn});
  }
  c.close();
  db.execSQL(deleteAddressesTx);
  db.execSQL(deleteOut);
  db.execSQL(deleteIn);
  db.execSQL(deleteTx);
  for (  Object[] array : needUpdateOuts) {
    c=db.rawQuery(existOtherIn,new String[]{array[0].toString(),array[1].toString()});
    while (c.moveToNext()) {
      if (c.getInt(0) == 0) {
        String updateSql=Utils.format(updatePrevOut,Out.OutStatus.unspent.getValue(),array[0].toString(),Integer.valueOf(array[1].toString()));
        db.execSQL(updateSql);
      }
    }
    c.close();
  }
}",0.993975903614458
63507,"@Override public int addMonitoredHDAccount(boolean isXrandom,byte[] externalPub,byte[] internalPub){
  SQLiteDatabase db=this.mDb.getWritableDatabase();
  db.beginTransaction();
  ContentValues cv=new ContentValues();
  cv.put(AbstractDb.HDAccountColumns.IS_XRANDOM,isXrandom ? 1 : 0);
  cv.put(AbstractDb.HDAccountColumns.EXTERNAL_PUB,Base58.encode(externalPub));
  cv.put(AbstractDb.HDAccountColumns.INTERNAL_PUB,Base58.encode(internalPub));
  int seedId=(int)db.insert(AbstractDb.Tables.HD_ACCOUNT,null,cv);
  db.setTransactionSuccessful();
  db.endTransaction();
  return seedId;
}","@Override public int addMonitoredHDAccount(String firstAddress,boolean isXrandom,byte[] externalPub,byte[] internalPub){
  SQLiteDatabase db=this.mDb.getWritableDatabase();
  db.beginTransaction();
  ContentValues cv=new ContentValues();
  cv.put(AbstractDb.HDAccountColumns.HD_ADDRESS,firstAddress);
  cv.put(AbstractDb.HDAccountColumns.IS_XRANDOM,isXrandom ? 1 : 0);
  cv.put(AbstractDb.HDAccountColumns.EXTERNAL_PUB,Base58.encode(externalPub));
  cv.put(AbstractDb.HDAccountColumns.INTERNAL_PUB,Base58.encode(internalPub));
  int seedId=(int)db.insert(AbstractDb.Tables.HD_ACCOUNT,null,cv);
  db.setTransactionSuccessful();
  db.endTransaction();
  return seedId;
}",0.9337589784517158
63508,"public void check(){
  if ((AddressManager.getInstance().getPrivKeyAddresses() == null || AddressManager.getInstance().getPrivKeyAddresses().size() == 0) && !AddressManager.getInstance().hasHDMKeychain() && (AppSharedPreference.getInstance().getAppMode() == BitherjSettings.AppMode.HOT || !AddressManager.getInstance().hasHDAccountCold())) {
    DropdownMessage.showDropdownMessage((Activity)getContext(),R.string.private_key_is_empty);
    return;
  }
  DialogPassword dialog=new DialogPassword(getContext(),CheckHeaderView.this);
  dialog.show();
}","public void check(){
  if ((AddressManager.getInstance().getPrivKeyAddresses() == null || AddressManager.getInstance().getPrivKeyAddresses().size() == 0) && !AddressManager.getInstance().hasHDMKeychain() && !(AppSharedPreference.getInstance().getAppMode() == BitherjSettings.AppMode.COLD && AddressManager.getInstance().hasHDAccountCold())&& !(AppSharedPreference.getInstance().getAppMode() == BitherjSettings.AppMode.HOT && AddressManager.getInstance().hasHDAccountHot())) {
    DropdownMessage.showDropdownMessage((Activity)getContext(),R.string.private_key_is_empty);
    return;
  }
  DialogPassword dialog=new DialogPassword(getContext(),CheckHeaderView.this);
  dialog.show();
}",0.8784440842787682
63509,"public static void setHDAccount(HDAccount hdAccount){
  AddressManager.getInstance().setHdAccountHot(hdAccount);
  if (AppSharedPreference.getInstance().getAppMode() == BitherjSettings.AppMode.COLD) {
    BackupUtil.backupColdKey(false);
  }
 else {
    BackupUtil.backupHotKey();
  }
}","public static void setHDAccount(HDAccount hdAccount){
  if (AppSharedPreference.getInstance().getAppMode() == BitherjSettings.AppMode.COLD) {
    BackupUtil.backupColdKey(false);
  }
 else {
    AddressManager.getInstance().setHdAccountHot(hdAccount);
    BackupUtil.backupHotKey();
  }
}",0.7909407665505227
63510,"private void v2Tov3(SQLiteDatabase db){
  Cursor c=db.rawQuery(""String_Node_Str"",null);
  int cnt=0;
  if (c.moveToNext()) {
    cnt=c.getInt(0);
  }
  c.close();
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (cnt > 0) {
    db.execSQL(""String_Node_Str"");
    int hd_account_id=-1;
    c=BitherApplication.mAddressDbHelper.getReadableDatabase().rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      hd_account_id=c.getInt(0);
      if (c.moveToNext()) {
        c.close();
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        c.close();
      }
    }
 else {
      c.close();
      throw new RuntimeException(""String_Node_Str"");
    }
    db.execSQL(""String_Node_Str"" + String.valueOf(hd_account_id));
    db.execSQL(""String_Node_Str"");
  }
  int oldCnt=0;
  int newCnt=0;
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    oldCnt=c.getInt(0);
  }
  c.close();
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    newCnt=c.getInt(0);
  }
  c.close();
  if (oldCnt != newCnt) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  db.execSQL(AbstractDb.CREATE_OUT_HD_ACCOUNT_ID_INDEX);
  db.execSQL(AbstractDb.CREATE_HD_ACCOUNT_ACCOUNT_ID_AND_PATH_TYPE_INDEX);
}","private void v2Tov3(SQLiteDatabase db){
  Cursor c=db.rawQuery(""String_Node_Str"",null);
  int cnt=0;
  if (c.moveToNext()) {
    cnt=c.getInt(0);
  }
  c.close();
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (cnt > 0) {
    db.execSQL(""String_Node_Str"");
    int hd_account_id=-1;
    c=BitherApplication.mAddressDbHelper.getReadableDatabase().rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      hd_account_id=c.getInt(0);
      if (c.moveToNext()) {
        c.close();
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        c.close();
      }
    }
 else {
      c.close();
      throw new RuntimeException(""String_Node_Str"");
    }
    db.execSQL(""String_Node_Str"",new String[]{Integer.toString(hd_account_id)});
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"");
  }
  int oldCnt=0;
  int newCnt=0;
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    oldCnt=c.getInt(0);
  }
  c.close();
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    newCnt=c.getInt(0);
  }
  c.close();
  if (oldCnt != newCnt) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  db.execSQL(AbstractDb.CREATE_OUT_HD_ACCOUNT_ID_INDEX);
  db.execSQL(AbstractDb.CREATE_HD_ACCOUNT_ACCOUNT_ID_AND_PATH_TYPE_INDEX);
}",0.9680213191205864
63511,"private void v2Tov3(SQLiteDatabase db){
  Cursor c=db.rawQuery(""String_Node_Str"",null);
  int cnt=0;
  if (c.moveToNext()) {
    cnt=c.getInt(0);
  }
  c.close();
  if (cnt > 0) {
    db.execSQL(""String_Node_Str"");
    int hd_account_id=-1;
    c=BitherApplication.mAddressDbHelper.getReadableDatabase().rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      hd_account_id=c.getInt(0);
      if (c.moveToNext()) {
        c.close();
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        c.close();
      }
    }
 else {
      c.close();
      throw new RuntimeException(""String_Node_Str"");
    }
    db.execSQL(""String_Node_Str"" + String.valueOf(hd_account_id));
  }
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  int oldCnt=0;
  int newCnt=0;
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    oldCnt=c.getInt(0);
  }
  c.close();
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    newCnt=c.getInt(0);
  }
  c.close();
  if (oldCnt != newCnt) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  db.execSQL(AbstractDb.CREATE_OUT_HD_ACCOUNT_ID_INDEX);
  db.execSQL(AbstractDb.CREATE_HD_ACCOUNT_ACCOUNT_ID_AND_PATH_TYPE_INDEX);
}","private void v2Tov3(SQLiteDatabase db){
  Cursor c=db.rawQuery(""String_Node_Str"",null);
  int cnt=0;
  if (c.moveToNext()) {
    cnt=c.getInt(0);
  }
  c.close();
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  if (cnt > 0) {
    db.execSQL(""String_Node_Str"");
    int hd_account_id=-1;
    c=BitherApplication.mAddressDbHelper.getReadableDatabase().rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      hd_account_id=c.getInt(0);
      if (c.moveToNext()) {
        c.close();
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        c.close();
      }
    }
 else {
      c.close();
      throw new RuntimeException(""String_Node_Str"");
    }
    db.execSQL(""String_Node_Str"" + String.valueOf(hd_account_id));
    db.execSQL(""String_Node_Str"");
  }
  int oldCnt=0;
  int newCnt=0;
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    oldCnt=c.getInt(0);
  }
  c.close();
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    newCnt=c.getInt(0);
  }
  c.close();
  if (oldCnt != newCnt) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  db.execSQL(AbstractDb.CREATE_OUT_HD_ACCOUNT_ID_INDEX);
  db.execSQL(AbstractDb.CREATE_HD_ACCOUNT_ACCOUNT_ID_AND_PATH_TYPE_INDEX);
}",0.8577208361429535
63512,"private void v2Tov3(SQLiteDatabase db){
  Cursor c=db.rawQuery(""String_Node_Str"",null);
  int cnt=0;
  if (c.moveToNext()) {
    cnt=c.getInt(0);
  }
  c.close();
  if (cnt == 0) {
    db.execSQL(""String_Node_Str"");
  }
 else {
    db.execSQL(""String_Node_Str"");
    int hd_account_id=-1;
    c=BitherApplication.mAddressDbHelper.getReadableDatabase().rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      hd_account_id=c.getInt(0);
      if (c.moveToNext()) {
        c.close();
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        c.close();
      }
    }
 else {
      c.close();
      throw new RuntimeException(""String_Node_Str"");
    }
    db.execSQL(""String_Node_Str"" + String.valueOf(hd_account_id));
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    int oldCnt=0;
    int newCnt=0;
    c=db.rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      oldCnt=c.getInt(0);
    }
    c.close();
    c=db.rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      newCnt=c.getInt(0);
    }
    c.close();
    if (oldCnt != newCnt) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else {
      db.execSQL(""String_Node_Str"");
      db.execSQL(""String_Node_Str"");
    }
  }
  db.execSQL(AbstractDb.CREATE_OUT_HD_ACCOUNT_ID_INDEX);
  db.execSQL(AbstractDb.CREATE_HD_ACCOUNT_ACCOUNT_ID_AND_PATH_TYPE_INDEX);
}","private void v2Tov3(SQLiteDatabase db){
  Cursor c=db.rawQuery(""String_Node_Str"",null);
  int cnt=0;
  if (c.moveToNext()) {
    cnt=c.getInt(0);
  }
  c.close();
  if (cnt > 0) {
    db.execSQL(""String_Node_Str"");
    int hd_account_id=-1;
    c=BitherApplication.mAddressDbHelper.getReadableDatabase().rawQuery(""String_Node_Str"",null);
    if (c.moveToNext()) {
      hd_account_id=c.getInt(0);
      if (c.moveToNext()) {
        c.close();
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        c.close();
      }
    }
 else {
      c.close();
      throw new RuntimeException(""String_Node_Str"");
    }
    db.execSQL(""String_Node_Str"" + String.valueOf(hd_account_id));
  }
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  int oldCnt=0;
  int newCnt=0;
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    oldCnt=c.getInt(0);
  }
  c.close();
  c=db.rawQuery(""String_Node_Str"",null);
  if (c.moveToNext()) {
    newCnt=c.getInt(0);
  }
  c.close();
  if (oldCnt != newCnt) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  db.execSQL(AbstractDb.CREATE_OUT_HD_ACCOUNT_ID_INDEX);
  db.execSQL(AbstractDb.CREATE_HD_ACCOUNT_ACCOUNT_ID_AND_PATH_TYPE_INDEX);
}",0.95478374836173
63513,"@Override public Tx updateOutHDAccountId(Tx tx){
  List<String> addressList=tx.getOutAddressList();
  if (addressList != null) {
    HashSet<String> set=new HashSet<String>();
    set.addAll(addressList);
    StringBuilder strBuilder=new StringBuilder();
    for (    String str : set) {
      strBuilder.append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
    if (strBuilder.length() > 0) {
      strBuilder.substring(0,strBuilder.length() - 1);
    }
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    String sql=Utils.format(""String_Node_Str"",strBuilder.toString());
    Cursor c=db.rawQuery(sql,null);
    while (c.moveToNext()) {
      String address=c.getString(0);
      int hdAccountId=c.getInt(1);
      for (      Out out : tx.getOuts()) {
        if (Utils.compareString(out.getOutAddress(),address)) {
          out.setHDAccountId(hdAccountId);
        }
      }
    }
    c.close();
  }
  return tx;
}","@Override public Tx updateOutHDAccountId(Tx tx){
  List<String> addressList=tx.getOutAddressList();
  if (addressList != null && addressList.size() > 0) {
    HashSet<String> set=new HashSet<String>();
    set.addAll(addressList);
    StringBuilder strBuilder=new StringBuilder();
    for (    String str : set) {
      strBuilder.append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    String sql=Utils.format(""String_Node_Str"",strBuilder.substring(0,strBuilder.length() - 1));
    Cursor c=db.rawQuery(sql,null);
    while (c.moveToNext()) {
      String address=c.getString(0);
      int hdAccountId=c.getInt(1);
      for (      Out out : tx.getOuts()) {
        if (Utils.compareString(out.getOutAddress(),address)) {
          out.setHDAccountId(hdAccountId);
        }
      }
    }
    c.close();
  }
  return tx;
}",0.90958605664488
63514,"@Override public List<Integer> getRelatedHDAccountIdList(List<String> addresses){
  List<Integer> hdAccountIdList=new ArrayList<Integer>();
  if (addresses != null) {
    HashSet<String> set=new HashSet<String>();
    set.addAll(addresses);
    StringBuilder strBuilder=new StringBuilder();
    for (    String str : set) {
      strBuilder.append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
    if (strBuilder.length() > 0) {
      strBuilder.substring(0,strBuilder.length() - 1);
    }
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    String sql=Utils.format(""String_Node_Str"",strBuilder.toString());
    Cursor c=db.rawQuery(sql,null);
    while (c.moveToNext()) {
      hdAccountIdList.add(c.getInt(0));
    }
    c.close();
  }
  return hdAccountIdList;
}","@Override public List<Integer> getRelatedHDAccountIdList(List<String> addresses){
  List<Integer> hdAccountIdList=new ArrayList<Integer>();
  if (addresses != null && addresses.size() > 0) {
    HashSet<String> set=new HashSet<String>();
    set.addAll(addresses);
    StringBuilder strBuilder=new StringBuilder();
    for (    String str : set) {
      strBuilder.append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    String sql=Utils.format(""String_Node_Str"",strBuilder.substring(0,strBuilder.length() - 1));
    Cursor c=db.rawQuery(sql,null);
    while (c.moveToNext()) {
      hdAccountIdList.add(c.getInt(0));
    }
    c.close();
  }
  return hdAccountIdList;
}",0.8929503916449086
63515,"@Override public int getRelatedAddressCnt(List<String> addresses){
  int cnt=0;
  if (addresses != null) {
    HashSet<String> set=new HashSet<String>();
    set.addAll(addresses);
    StringBuilder strBuilder=new StringBuilder();
    for (    String str : set) {
      strBuilder.append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
    if (strBuilder.length() > 0) {
      strBuilder.substring(0,strBuilder.length() - 1);
    }
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    String sql=Utils.format(""String_Node_Str"",strBuilder.toString());
    Cursor c=db.rawQuery(sql,null);
    if (c.moveToNext()) {
      cnt=c.getInt(0);
    }
    c.close();
  }
  return cnt;
}","@Override public int getRelatedAddressCnt(List<String> addresses){
  int cnt=0;
  if (addresses != null && addresses.size() > 0) {
    HashSet<String> set=new HashSet<String>();
    set.addAll(addresses);
    StringBuilder strBuilder=new StringBuilder();
    for (    String str : set) {
      strBuilder.append(""String_Node_Str"").append(str).append(""String_Node_Str"");
    }
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    String sql=Utils.format(""String_Node_Str"",strBuilder.substring(0,strBuilder.length() - 1));
    Cursor c=db.rawQuery(sql,null);
    if (c.moveToNext()) {
      cnt=c.getInt(0);
    }
    c.close();
  }
  return cnt;
}",0.7893175074183977
63516,"@Override public void runWithService(BlockchainService service){
  service.stopAndUnregister();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.setSyncComplete(false);
    address.updateSyncComplete();
  }
  HDAccountProvider.getInstance().setSyncdNotComplete();
  TxProvider.getInstance().clearAllTx();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.notificatTx(null,Tx.TxNotificationType.txFromApi);
  }
  try {
    if (!AddressManager.getInstance().addressIsSyncComplete()) {
      TransactionsUtil.getMyTxFromBither();
    }
    service.startAndRegister();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
      }
    }
);
  }
}","@Override public void runWithService(BlockchainService service){
  service.stopAndUnregister();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.setSyncComplete(false);
    address.updateSyncComplete();
  }
  HDAccountProvider.getInstance().setSyncdNotComplete();
  ColdHDAccountProvider.getInstance().setSyncdNotComplete();
  TxProvider.getInstance().clearAllTx();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.notificatTx(null,Tx.TxNotificationType.txFromApi);
  }
  try {
    if (!AddressManager.getInstance().addressIsSyncComplete()) {
      TransactionsUtil.getMyTxFromBither();
    }
    service.startAndRegister();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
      }
    }
);
  }
}",0.974615064502705
63517,"private void resetTx(){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (dp == null) {
        dp=new DialogProgress(HotAdvanceActivity.this,R.string.please_wait);
      }
      dp.show();
    }
  }
);
  ThreadNeedService threadNeedService=new ThreadNeedService(dp,HotAdvanceActivity.this){
    @Override public void runWithService(    BlockchainService service){
      service.stopAndUnregister();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.setSyncComplete(false);
        address.updateSyncComplete();
      }
      HDAccountProvider.getInstance().setSyncdNotComplete();
      TxProvider.getInstance().clearAllTx();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.notificatTx(null,Tx.TxNotificationType.txFromApi);
      }
      try {
        if (!AddressManager.getInstance().addressIsSyncComplete()) {
          TransactionsUtil.getMyTxFromBither();
        }
        service.startAndRegister();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
          }
        }
);
      }
    }
  }
;
  threadNeedService.start();
}","private void resetTx(){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (dp == null) {
        dp=new DialogProgress(HotAdvanceActivity.this,R.string.please_wait);
      }
      dp.show();
    }
  }
);
  ThreadNeedService threadNeedService=new ThreadNeedService(dp,HotAdvanceActivity.this){
    @Override public void runWithService(    BlockchainService service){
      service.stopAndUnregister();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.setSyncComplete(false);
        address.updateSyncComplete();
      }
      HDAccountProvider.getInstance().setSyncdNotComplete();
      ColdHDAccountProvider.getInstance().setSyncdNotComplete();
      TxProvider.getInstance().clearAllTx();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.notificatTx(null,Tx.TxNotificationType.txFromApi);
      }
      try {
        if (!AddressManager.getInstance().addressIsSyncComplete()) {
          TransactionsUtil.getMyTxFromBither();
        }
        service.startAndRegister();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
          }
        }
);
      }
    }
  }
;
  threadNeedService.start();
}",0.9808992065824272
63518,"@Override public boolean changePassword(CharSequence oldPassword,CharSequence newPassword){
  SQLiteDatabase readDb=this.mDb.getReadableDatabase();
  HashMap<String,String> addressesPrivKeyHashMap=new HashMap<String,String>();
  String sql=""String_Node_Str"";
  Cursor c=readDb.rawQuery(sql,null);
  while (c.moveToNext()) {
    addressesPrivKeyHashMap.put(c.getString(0),c.getString(1));
  }
  c.close();
  String hdmEncryptPassword=null;
  sql=""String_Node_Str"";
  c=readDb.rawQuery(sql,null);
  if (c.moveToNext()) {
    hdmEncryptPassword=c.getString(0);
  }
  c.close();
  HashMap<Integer,String> encryptSeedHashMap=new HashMap<Integer,String>();
  HashMap<Integer,String> encryptHDSeedHashMap=new HashMap<Integer,String>();
  HashMap<Integer,String> singularModeBackupHashMap=new HashMap<Integer,String>();
  sql=""String_Node_Str"";
  c=readDb.rawQuery(sql,null);
  while (c.moveToNext()) {
    Integer hdSeedId=c.getInt(0);
    String encryptSeed=c.getString(1);
    if (!c.isNull(2)) {
      String encryptHDSeed=c.getString(2);
      encryptHDSeedHashMap.put(hdSeedId,encryptHDSeed);
    }
    if (!c.isNull(3)) {
      String singularModeBackup=c.getString(3);
      singularModeBackupHashMap.put(hdSeedId,singularModeBackup);
    }
    encryptSeedHashMap.put(hdSeedId,encryptSeed);
  }
  c.close();
  HashMap<Integer,String> hdEncryptSeedHashMap=new HashMap<Integer,String>();
  HashMap<Integer,String> hdEncryptHDSeedHashMap=new HashMap<Integer,String>();
  c=readDb.rawQuery(""String_Node_Str"",null);
  while (c.moveToNext()) {
    int idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.HD_ACCOUNT_ID);
    Integer hdAccountId=0;
    if (idColumn != -1) {
      hdAccountId=c.getInt(idColumn);
    }
    idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.ENCRYPT_SEED);
    if (idColumn != -1) {
      String encryptSeed=c.getString(idColumn);
      hdEncryptSeedHashMap.put(hdAccountId,encryptSeed);
    }
    idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.ENCRYPT_MNMONIC_SEED);
    if (idColumn != -1) {
      String encryptHDSeed=c.getString(idColumn);
      hdEncryptHDSeedHashMap.put(hdAccountId,encryptHDSeed);
    }
  }
  c.close();
  PasswordSeed passwordSeed=null;
  sql=""String_Node_Str"";
  c=readDb.rawQuery(sql,null);
  if (c.moveToNext()) {
    passwordSeed=new PasswordSeed(c.getString(0));
  }
  c.close();
  for (  Map.Entry<String,String> kv : addressesPrivKeyHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  if (hdmEncryptPassword != null) {
    hdmEncryptPassword=EncryptedData.changePwd(hdmEncryptPassword,oldPassword,newPassword);
  }
  for (  Map.Entry<Integer,String> kv : encryptSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : encryptHDSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : hdEncryptSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : hdEncryptHDSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : singularModeBackupHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  if (passwordSeed != null) {
    boolean result=passwordSeed.changePassword(oldPassword,newPassword);
    if (!result) {
      return false;
    }
  }
  SQLiteDatabase writeDb=this.mDb.getWritableDatabase();
  writeDb.beginTransaction();
  ContentValues cv;
  for (  Map.Entry<String,String> kv : addressesPrivKeyHashMap.entrySet()) {
    cv=new ContentValues();
    cv.put(AbstractDb.AddressesColumns.ENCRYPT_PRIVATE_KEY,kv.getValue());
    writeDb.update(AbstractDb.Tables.Addresses,cv,""String_Node_Str"",new String[]{kv.getKey()});
  }
  if (hdmEncryptPassword != null) {
    cv=new ContentValues();
    cv.put(AbstractDb.HDMBIdColumns.ENCRYPT_BITHER_PASSWORD,hdmEncryptPassword);
    writeDb.update(AbstractDb.Tables.HDM_BID,cv,null,null);
  }
  for (  Map.Entry<Integer,String> kv : encryptSeedHashMap.entrySet()) {
    cv=new ContentValues();
    cv.put(AbstractDb.HDSeedsColumns.ENCRYPT_SEED,kv.getValue());
    if (encryptHDSeedHashMap.containsKey(kv.getKey())) {
      cv.put(AbstractDb.HDSeedsColumns.ENCRYPT_MNMONIC_SEED,encryptHDSeedHashMap.get(kv.getKey()));
    }
    if (singularModeBackupHashMap.containsKey(kv.getKey())) {
      cv.put(AbstractDb.HDSeedsColumns.SINGULAR_MODE_BACKUP,singularModeBackupHashMap.get(kv.getKey()));
    }
    writeDb.update(AbstractDb.Tables.HDSEEDS,cv,""String_Node_Str"",new String[]{kv.getKey().toString()});
  }
  for (  Map.Entry<Integer,String> kv : hdEncryptSeedHashMap.entrySet()) {
    cv=new ContentValues();
    cv.put(AbstractDb.HDAccountColumns.ENCRYPT_SEED,kv.getValue());
    if (hdEncryptHDSeedHashMap.containsKey(kv.getKey())) {
      cv.put(AbstractDb.HDAccountColumns.ENCRYPT_MNMONIC_SEED,hdEncryptHDSeedHashMap.get(kv.getValue()));
    }
    writeDb.update(AbstractDb.Tables.HD_ACCOUNT,cv,""String_Node_Str"",new String[]{kv.getKey().toString()});
  }
  if (passwordSeed != null) {
    cv=new ContentValues();
    cv.put(AbstractDb.PasswordSeedColumns.PASSWORD_SEED,passwordSeed.toPasswordSeedString());
    writeDb.update(AbstractDb.Tables.PASSWORD_SEED,cv,null,null);
  }
  writeDb.setTransactionSuccessful();
  writeDb.endTransaction();
  return true;
}","@Override public boolean changePassword(CharSequence oldPassword,CharSequence newPassword){
  SQLiteDatabase readDb=this.mDb.getReadableDatabase();
  HashMap<String,String> addressesPrivKeyHashMap=new HashMap<String,String>();
  String sql=""String_Node_Str"";
  Cursor c=readDb.rawQuery(sql,null);
  while (c.moveToNext()) {
    addressesPrivKeyHashMap.put(c.getString(0),c.getString(1));
  }
  c.close();
  String hdmEncryptPassword=null;
  sql=""String_Node_Str"";
  c=readDb.rawQuery(sql,null);
  if (c.moveToNext()) {
    hdmEncryptPassword=c.getString(0);
  }
  c.close();
  HashMap<Integer,String> encryptSeedHashMap=new HashMap<Integer,String>();
  HashMap<Integer,String> encryptHDSeedHashMap=new HashMap<Integer,String>();
  HashMap<Integer,String> singularModeBackupHashMap=new HashMap<Integer,String>();
  sql=""String_Node_Str"";
  c=readDb.rawQuery(sql,null);
  while (c.moveToNext()) {
    Integer hdSeedId=c.getInt(0);
    String encryptSeed=c.getString(1);
    if (!c.isNull(2)) {
      String encryptHDSeed=c.getString(2);
      encryptHDSeedHashMap.put(hdSeedId,encryptHDSeed);
    }
    if (!c.isNull(3)) {
      String singularModeBackup=c.getString(3);
      singularModeBackupHashMap.put(hdSeedId,singularModeBackup);
    }
    encryptSeedHashMap.put(hdSeedId,encryptSeed);
  }
  c.close();
  HashMap<Integer,String> hdEncryptSeedHashMap=new HashMap<Integer,String>();
  HashMap<Integer,String> hdEncryptMnemonicSeedHashMap=new HashMap<Integer,String>();
  c=readDb.rawQuery(""String_Node_Str"",null);
  while (c.moveToNext()) {
    int idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.HD_ACCOUNT_ID);
    Integer hdAccountId=0;
    if (idColumn != -1) {
      hdAccountId=c.getInt(idColumn);
    }
    idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.ENCRYPT_SEED);
    if (idColumn != -1) {
      String encryptSeed=c.getString(idColumn);
      hdEncryptSeedHashMap.put(hdAccountId,encryptSeed);
    }
    idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.ENCRYPT_MNMONIC_SEED);
    if (idColumn != -1) {
      String encryptHDSeed=c.getString(idColumn);
      hdEncryptMnemonicSeedHashMap.put(hdAccountId,encryptHDSeed);
    }
  }
  c.close();
  PasswordSeed passwordSeed=null;
  sql=""String_Node_Str"";
  c=readDb.rawQuery(sql,null);
  if (c.moveToNext()) {
    passwordSeed=new PasswordSeed(c.getString(0));
  }
  c.close();
  for (  Map.Entry<String,String> kv : addressesPrivKeyHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  if (hdmEncryptPassword != null) {
    hdmEncryptPassword=EncryptedData.changePwd(hdmEncryptPassword,oldPassword,newPassword);
  }
  for (  Map.Entry<Integer,String> kv : encryptSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : encryptHDSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : hdEncryptSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : hdEncryptMnemonicSeedHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  for (  Map.Entry<Integer,String> kv : singularModeBackupHashMap.entrySet()) {
    kv.setValue(EncryptedData.changePwd(kv.getValue(),oldPassword,newPassword));
  }
  if (passwordSeed != null) {
    boolean result=passwordSeed.changePassword(oldPassword,newPassword);
    if (!result) {
      return false;
    }
  }
  SQLiteDatabase writeDb=this.mDb.getWritableDatabase();
  writeDb.beginTransaction();
  ContentValues cv;
  for (  Map.Entry<String,String> kv : addressesPrivKeyHashMap.entrySet()) {
    cv=new ContentValues();
    cv.put(AbstractDb.AddressesColumns.ENCRYPT_PRIVATE_KEY,kv.getValue());
    writeDb.update(AbstractDb.Tables.Addresses,cv,""String_Node_Str"",new String[]{kv.getKey()});
  }
  if (hdmEncryptPassword != null) {
    cv=new ContentValues();
    cv.put(AbstractDb.HDMBIdColumns.ENCRYPT_BITHER_PASSWORD,hdmEncryptPassword);
    writeDb.update(AbstractDb.Tables.HDM_BID,cv,null,null);
  }
  for (  Map.Entry<Integer,String> kv : encryptSeedHashMap.entrySet()) {
    cv=new ContentValues();
    cv.put(AbstractDb.HDSeedsColumns.ENCRYPT_SEED,kv.getValue());
    if (encryptHDSeedHashMap.containsKey(kv.getKey())) {
      cv.put(AbstractDb.HDSeedsColumns.ENCRYPT_MNMONIC_SEED,encryptHDSeedHashMap.get(kv.getKey()));
    }
    if (singularModeBackupHashMap.containsKey(kv.getKey())) {
      cv.put(AbstractDb.HDSeedsColumns.SINGULAR_MODE_BACKUP,singularModeBackupHashMap.get(kv.getKey()));
    }
    writeDb.update(AbstractDb.Tables.HDSEEDS,cv,""String_Node_Str"",new String[]{kv.getKey().toString()});
  }
  for (  Map.Entry<Integer,String> kv : hdEncryptSeedHashMap.entrySet()) {
    cv=new ContentValues();
    cv.put(AbstractDb.HDAccountColumns.ENCRYPT_SEED,kv.getValue());
    if (hdEncryptMnemonicSeedHashMap.containsKey(kv.getKey())) {
      cv.put(AbstractDb.HDAccountColumns.ENCRYPT_MNMONIC_SEED,hdEncryptMnemonicSeedHashMap.get(kv.getKey()));
    }
    writeDb.update(AbstractDb.Tables.HD_ACCOUNT,cv,""String_Node_Str"",new String[]{kv.getKey().toString()});
  }
  if (passwordSeed != null) {
    cv=new ContentValues();
    cv.put(AbstractDb.PasswordSeedColumns.PASSWORD_SEED,passwordSeed.toPasswordSeedString());
    writeDb.update(AbstractDb.Tables.PASSWORD_SEED,cv,null,null);
  }
  writeDb.setTransactionSuccessful();
  writeDb.endTransaction();
  return true;
}",0.9948000717231488
63519,"@Override public void onCreate(){
  new LinuxSecureRandom();
  super.onCreate();
  mContext=getApplicationContext();
  mDbHelper=new BitherDatabaseHelper(mContext);
  mAddressDbHelper=new AddressDatabaseHelper(mContext);
  mHDDbHelper=new HDAccountDatabaseHelper(mContext);
  AndroidDbImpl androidDb=new AndroidDbImpl();
  androidDb.construct();
  AndroidImplAbstractApp appAndroid=new AndroidImplAbstractApp();
  appAndroid.construct();
  AbstractApp.notificationService.removeAddressLoadCompleteState();
  StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().permitDiskReads().permitDiskWrites().penaltyLog().build());
  Threading.throwOnLockCycles();
  initApp();
  mBitherApplication=this;
  ueHandler=new UEHandler();
  Thread.setDefaultUncaughtExceptionHandler(ueHandler);
  activityManager=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
}","@Override public void onCreate(){
  new LinuxSecureRandom();
  super.onCreate();
  mContext=getApplicationContext();
  mDbHelper=new BitherDatabaseHelper(mContext);
  mAddressDbHelper=new AddressDatabaseHelper(mContext);
  AndroidDbImpl androidDb=new AndroidDbImpl();
  androidDb.construct();
  AndroidImplAbstractApp appAndroid=new AndroidImplAbstractApp();
  appAndroid.construct();
  AbstractApp.notificationService.removeAddressLoadCompleteState();
  StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().permitDiskReads().permitDiskWrites().penaltyLog().build());
  Threading.throwOnLockCycles();
  initApp();
  mBitherApplication=this;
  ueHandler=new UEHandler();
  Thread.setDefaultUncaughtExceptionHandler(ueHandler);
  activityManager=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
}",0.9690601284296556
63520,"@Override public void runWithService(BlockchainService service){
  service.stopAndUnregister();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.setSyncComplete(false);
    address.updateSyncComplete();
  }
  HDAccountProvider.getInstance().setSyncdNotComplete();
  HDAccountProvider.getInstance().clearAllTx();
  TxProvider.getInstance().clearAllTx();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.notificatTx(null,Tx.TxNotificationType.txFromApi);
  }
  try {
    if (!AddressManager.getInstance().addressIsSyncComplete()) {
      TransactionsUtil.getMyTxFromBither();
    }
    service.startAndRegister();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
      }
    }
);
  }
}","@Override public void runWithService(BlockchainService service){
  service.stopAndUnregister();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.setSyncComplete(false);
    address.updateSyncComplete();
  }
  HDAccountProvider.getInstance().setSyncdNotComplete();
  TxProvider.getInstance().clearAllTx();
  for (  Address address : AddressManager.getInstance().getAllAddresses()) {
    address.notificatTx(null,Tx.TxNotificationType.txFromApi);
  }
  try {
    if (!AddressManager.getInstance().addressIsSyncComplete()) {
      TransactionsUtil.getMyTxFromBither();
    }
    service.startAndRegister();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    HotAdvanceActivity.this.runOnUiThread(new Runnable(){
      @Override public void run(){
        dp.dismiss();
        DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
      }
    }
);
  }
}",0.9799163179916318
63521,"private void resetTx(){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (dp == null) {
        dp=new DialogProgress(HotAdvanceActivity.this,R.string.please_wait);
      }
      dp.show();
    }
  }
);
  ThreadNeedService threadNeedService=new ThreadNeedService(dp,HotAdvanceActivity.this){
    @Override public void runWithService(    BlockchainService service){
      service.stopAndUnregister();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.setSyncComplete(false);
        address.updateSyncComplete();
      }
      HDAccountProvider.getInstance().setSyncdNotComplete();
      HDAccountProvider.getInstance().clearAllTx();
      TxProvider.getInstance().clearAllTx();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.notificatTx(null,Tx.TxNotificationType.txFromApi);
      }
      try {
        if (!AddressManager.getInstance().addressIsSyncComplete()) {
          TransactionsUtil.getMyTxFromBither();
        }
        service.startAndRegister();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
          }
        }
);
      }
    }
  }
;
  threadNeedService.start();
}","private void resetTx(){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (dp == null) {
        dp=new DialogProgress(HotAdvanceActivity.this,R.string.please_wait);
      }
      dp.show();
    }
  }
);
  ThreadNeedService threadNeedService=new ThreadNeedService(dp,HotAdvanceActivity.this){
    @Override public void runWithService(    BlockchainService service){
      service.stopAndUnregister();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.setSyncComplete(false);
        address.updateSyncComplete();
      }
      HDAccountProvider.getInstance().setSyncdNotComplete();
      TxProvider.getInstance().clearAllTx();
      for (      Address address : AddressManager.getInstance().getAllAddresses()) {
        address.notificatTx(null,Tx.TxNotificationType.txFromApi);
      }
      try {
        if (!AddressManager.getInstance().addressIsSyncComplete()) {
          TransactionsUtil.getMyTxFromBither();
        }
        service.startAndRegister();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.reload_tx_success);
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
        HotAdvanceActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            dp.dismiss();
            DropdownMessage.showDropdownMessage(HotAdvanceActivity.this,R.string.network_or_connection_error);
          }
        }
);
      }
    }
  }
;
  threadNeedService.start();
}",0.984660766961652
63522,"@Override public void onCreate(SQLiteDatabase db){
  createBlocksTable(db);
  createTxsTable(db);
  createAddressTxsTable(db);
  createInsTable(db);
  createOutsTable(db);
  createPeersTable(db);
}","@Override public void onCreate(SQLiteDatabase db){
  createBlocksTable(db);
  createTxsTable(db);
  createAddressTxsTable(db);
  createInsTable(db);
  createOutsTable(db);
  createPeersTable(db);
  createHDAccountAddress(db);
}",0.929245283018868
63523,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
switch (oldVersion) {
case 1:
    v1Tov2(db);
}
}",0.7757009345794392
63524,"@Override public long getConfirmedBanlance(){
  long sum=0;
  String unspendOutSql=""String_Node_Str"" + ""String_Node_Str"";
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  Cursor c=db.rawQuery(unspendOutSql,new String[]{Integer.toString(Out.OutStatus.unspent.getValue())});
  if (c.moveToNext()) {
    int idColumn=c.getColumnIndex(""String_Node_Str"");
    if (idColumn != -1) {
      sum=c.getLong(idColumn);
    }
  }
  c.close();
  return sum;
}","@Override public long getConfirmedBanlance(){
  long sum=0;
  String unspendOutSql=""String_Node_Str"" + ""String_Node_Str"";
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  Cursor c=db.rawQuery(unspendOutSql,new String[]{Integer.toString(Out.OutStatus.unspent.getValue()),""String_Node_Str""});
  if (c.moveToNext()) {
    int idColumn=c.getColumnIndex(""String_Node_Str"");
    if (idColumn != -1) {
      sum=c.getLong(idColumn);
    }
  }
  c.close();
  return sum;
}",0.9804347826086957
63525,"@Override public byte[] getInternalPub(int hdSeedId){
  byte[] pub=null;
  try {
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    Cursor c=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
    if (c.moveToNext()) {
      int idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.EXTERNAL_PUB);
      if (idColumn != -1) {
        String pubStr=c.getString(idColumn);
        pub=Base58.decode(pubStr);
      }
    }
  }
 catch (  AddressFormatException e) {
    e.printStackTrace();
  }
  return pub;
}","@Override public byte[] getInternalPub(int hdSeedId){
  byte[] pub=null;
  try {
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    Cursor c=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
    if (c.moveToNext()) {
      int idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.INTERNAL_PUB);
      if (idColumn != -1) {
        String pubStr=c.getString(idColumn);
        pub=Base58.decode(pubStr);
      }
    }
  }
 catch (  AddressFormatException e) {
    e.printStackTrace();
  }
  return pub;
}",0.99625468164794
63526,"@Override public byte[] getExternalPub(int hdSeedId){
  byte[] pub=null;
  try {
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    Cursor c=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
    if (c.moveToNext()) {
      int idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.ENCRYPT_SEED);
      if (idColumn != -1) {
        String pubStr=c.getString(idColumn);
        pub=Base58.decode(pubStr);
      }
    }
  }
 catch (  AddressFormatException e) {
    e.printStackTrace();
  }
  return pub;
}","@Override public byte[] getExternalPub(int hdSeedId){
  byte[] pub=null;
  try {
    SQLiteDatabase db=this.mDb.getReadableDatabase();
    Cursor c=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
    if (c.moveToNext()) {
      int idColumn=c.getColumnIndex(AbstractDb.HDAccountColumns.EXTERNAL_PUB);
      if (idColumn != -1) {
        String pubStr=c.getString(idColumn);
        pub=Base58.decode(pubStr);
      }
    }
  }
 catch (  AddressFormatException e) {
    e.printStackTrace();
  }
  return pub;
}",0.9831460674157304
63527,"@Override public List<HDAccount.HDAccountAddress> getSigningAddressesForInputs(List<In> inList){
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  List<HDAccount.HDAccountAddress> hdAccountAddressList=new ArrayList<HDAccount.HDAccountAddress>();
  Cursor c;
  for (  In in : inList) {
    String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    OutPoint outPoint=in.getOutpoint();
    c=db.rawQuery(sql,new String[]{Base58.encode(outPoint.getTxHash()),Integer.toString(in.getInSn())});
    if (c.moveToNext()) {
      hdAccountAddressList.add(formatAddress(c));
    }
    c.close();
  }
  return hdAccountAddressList;
}","@Override public List<HDAccount.HDAccountAddress> getSigningAddressesForInputs(List<In> inList){
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  List<HDAccount.HDAccountAddress> hdAccountAddressList=new ArrayList<HDAccount.HDAccountAddress>();
  Cursor c;
  for (  In in : inList) {
    String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    OutPoint outPoint=in.getOutpoint();
    c=db.rawQuery(sql,new String[]{Base58.encode(in.getPrevTxHash()),Integer.toString(outPoint.getOutSn())});
    if (c.moveToNext()) {
      hdAccountAddressList.add(formatAddress(c));
    }
    c.close();
  }
  return hdAccountAddressList;
}",0.9690566037735848
63528,"@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(AbstractDb.CREATE_ADDRESSES_SQL);
  db.execSQL(AbstractDb.CREATE_HDM_BID_SQL);
  db.execSQL(AbstractDb.CREATE_HD_SEEDS_SQL);
  db.execSQL(AbstractDb.CREATE_HDM_ADDRESSES_SQL);
  db.execSQL(AbstractDb.CREATE_PASSWORD_SEED_SQL);
}","@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(AbstractDb.CREATE_ADDRESSES_SQL);
  db.execSQL(AbstractDb.CREATE_HDM_BID_SQL);
  db.execSQL(AbstractDb.CREATE_HD_SEEDS_SQL);
  db.execSQL(AbstractDb.CREATE_HDM_ADDRESSES_SQL);
  db.execSQL(AbstractDb.CREATE_PASSWORD_SEED_SQL);
  db.execSQL(AbstractDb.CREATE_ALIASES_SQL);
}",0.9284578696343402
63529,"@Override public void onShow(DialogInterface dialog){
  if (showSigningInfo) {
    new Thread(){
      @Override public void run(){
        HDMAddress hdm=(HDMAddress)address;
        List<byte[]> signingPubs=tx.getIns().get(0).getP2SHPubKeys();
        boolean isHot=false;
        boolean isCold=false;
        boolean isServer=false;
        for (        byte[] pub : signingPubs) {
          if (!isHot && Arrays.equals(pub,hdm.getPubHot())) {
            isHot=true;
            continue;
          }
          if (!isCold && Arrays.equals(pub,hdm.getPubCold())) {
            isCold=true;
            continue;
          }
          if (!isServer && Arrays.equals(pub,hdm.getPubRemote())) {
            isServer=true;
            continue;
          }
        }
        final boolean _isHot=isHot;
        final boolean _isCold=isCold;
        final boolean _isServer=isServer;
        pb.post(new Runnable(){
          @Override public void run(){
            if (_isHot) {
              ivHot.setVisibility(View.VISIBLE);
            }
 else {
              ivHot.setVisibility(View.GONE);
            }
            if (_isCold) {
              ivCold.setVisibility(View.VISIBLE);
            }
 else {
              ivCold.setVisibility(View.GONE);
            }
            if (_isServer) {
              ivServer.setVisibility(View.VISIBLE);
            }
 else {
              ivServer.setVisibility(View.GONE);
            }
            pb.setVisibility(View.GONE);
          }
        }
);
      }
    }
.start();
  }
}","@Override public void onShow(DialogInterface dialog){
  if (showSigningInfo) {
    new Thread(){
      @Override public void run(){
        HDMAddress hdm=(HDMAddress)address;
        tx.getIns().get(0).setTx(tx);
        List<byte[]> signingPubs=tx.getIns().get(0).getP2SHPubKeys();
        boolean isHot=false;
        boolean isCold=false;
        boolean isServer=false;
        for (        byte[] pub : signingPubs) {
          if (!isHot && Arrays.equals(pub,hdm.getPubHot())) {
            isHot=true;
            continue;
          }
          if (!isCold && Arrays.equals(pub,hdm.getPubCold())) {
            isCold=true;
            continue;
          }
          if (!isServer && Arrays.equals(pub,hdm.getPubRemote())) {
            isServer=true;
            continue;
          }
        }
        final boolean _isHot=isHot;
        final boolean _isCold=isCold;
        final boolean _isServer=isServer;
        pb.post(new Runnable(){
          @Override public void run(){
            if (_isHot) {
              ivHot.setVisibility(View.VISIBLE);
            }
 else {
              ivHot.setVisibility(View.GONE);
            }
            if (_isCold) {
              ivCold.setVisibility(View.VISIBLE);
            }
 else {
              ivCold.setVisibility(View.GONE);
            }
            if (_isServer) {
              ivServer.setVisibility(View.VISIBLE);
            }
 else {
              ivServer.setVisibility(View.GONE);
            }
            pb.setVisibility(View.GONE);
          }
        }
);
      }
    }
.start();
  }
}",0.9877577319587628
63530,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion == 1 && newVersion == 2) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(AbstractDb.CREATE_PASSWORD_SEED_SQL);
    String passwordSeedStr=AppSharedPreference.getInstance().getPasswordSeedString();
    db.execSQL(""String_Node_Str"",new String[]{passwordSeedStr});
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion == 1 && newVersion == 2) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(AbstractDb.CREATE_PASSWORD_SEED_SQL);
    String passwordSeedStr=AppSharedPreference.getInstance().getPasswordSeedString();
    if (!Utils.isEmpty(passwordSeedStr)) {
      db.execSQL(""String_Node_Str"",new String[]{passwordSeedStr});
    }
  }
}",0.9355246523388115
63531,"@Override public void setEncryptSeed(int hdSeedId,String encryptedSeed){
  SQLiteDatabase db=this.mDb.getWritableDatabase();
  ContentValues cv=new ContentValues();
  cv.put(AbstractDb.HDSeedsColumns.ENCRYPT_SEED,encryptedSeed);
  db.update(AbstractDb.Tables.HDMAddresses,cv,""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
}","@Override public void setEncryptSeed(int hdSeedId,String encryptedSeed){
  SQLiteDatabase db=this.mDb.getWritableDatabase();
  ContentValues cv=new ContentValues();
  cv.put(AbstractDb.HDSeedsColumns.ENCRYPT_SEED,encryptedSeed);
  db.update(AbstractDb.Tables.HDSeeds,cv,""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
}",0.9805680119581464
63532,"@Override public boolean onLongClick(View v){
switch (groupTag) {
case PrivateGroupTag:
    new DialogAddressWithShowPrivateKey(activity,privates.get(position)).show();
case WatchOnlyGroupTag:
  new DialogAddressWatchOnlyLongClick(activity,watchOnlys.get(position)).show();
case HDMGroupTag:
}
return true;
}","@Override public boolean onLongClick(View v){
switch (groupTag) {
case PrivateGroupTag:
    new DialogAddressWithShowPrivateKey(activity,privates.get(position)).show();
  break;
case WatchOnlyGroupTag:
new DialogAddressWatchOnlyLongClick(activity,watchOnlys.get(position)).show();
break;
case HDMGroupTag:
break;
}
return true;
}",0.9607535321821036
63533,"@Override public int maxHDMAddressPubIndex(int hdSeedId){
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  Cursor cursor=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
  int maxIndex=0;
  int idColumn=cursor.getColumnIndex(AbstractDb.HDMAddressesColumns.HD_SEED_INDEX);
  if (idColumn != -1) {
    maxIndex=cursor.getInt(idColumn);
  }
  cursor.close();
  return maxIndex;
}","@Override public int maxHDMAddressPubIndex(int hdSeedId){
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  Cursor cursor=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
  int maxIndex=0;
  if (cursor.moveToNext()) {
    int idColumn=cursor.getColumnIndex(AbstractDb.HDMAddressesColumns.HD_SEED_INDEX);
    if (idColumn != -1) {
      maxIndex=cursor.getInt(idColumn);
    }
  }
  cursor.close();
  return maxIndex;
}",0.7896592244418331
63534,"@Override public int uncompletedHDMAddressCount(int hdSeedId){
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  Cursor cursor=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
  int count=0;
  int idColumn=cursor.getColumnIndex(""String_Node_Str"");
  if (idColumn != -1) {
    count=cursor.getInt(idColumn);
  }
  cursor.close();
  return count;
}","@Override public int uncompletedHDMAddressCount(int hdSeedId){
  SQLiteDatabase db=this.mDb.getReadableDatabase();
  Cursor cursor=db.rawQuery(""String_Node_Str"",new String[]{Integer.toString(hdSeedId)});
  int count=0;
  if (cursor.moveToNext()) {
    int idColumn=cursor.getColumnIndex(""String_Node_Str"");
    if (idColumn != -1) {
      count=cursor.getInt(idColumn);
    }
  }
  cursor.close();
  return count;
}",0.8669201520912547
63535,"@Override public void onPasswordEntered(String password){
  if (dp != null && !dp.isShowing()) {
    dp.setMessage(R.string.import_private_key_qr_code_importing);
    ImportPrivateKeyThread importPrivateKeyThread=new ImportPrivateKeyThread(content,password);
    importPrivateKeyThread.start();
  }
}","@Override public void onPasswordEntered(String password){
  if (dp != null && !dp.isShowing()) {
    dp.setMessage(R.string.import_private_key_qr_code_importing);
    dp.show();
    ImportPrivateKeyThread importPrivateKeyThread=new ImportPrivateKeyThread(content,password);
    importPrivateKeyThread.start();
  }
}",0.975609756097561
63536,"public void setContent(String order,String price,String volume){
  this.tvOrder.setText(order);
  this.tvPrice.setText(price);
  this.tvVolume.setText(""String_Node_Str"" + volume);
  this.ivSymbolBtc.setImageBitmap(btcBit);
  this.tvSymbol.setText(AppSharedPreference.getInstance().getDefaultExchangeType().getSymbol());
}","public void setContent(String order,String price,String volume){
  this.tvOrder.setText(order);
  this.tvPrice.setText(price);
  this.tvVolume.setText(volume);
  this.ivSymbolBtc.setImageBitmap(btcBit);
  this.tvSymbol.setText(AppSharedPreference.getInstance().getDefaultExchangeType().getSymbol());
}",0.9678456591639872
63537,"private void comporePriceAlert(List<Ticker> tickerList){
  List<PriceAlert> priceAlertList=PriceAlert.getPriceAlertList();
  for (  PriceAlert priceAlert : priceAlertList) {
    for (    Ticker ticker : tickerList) {
      if (priceAlert.getMarketType() == ticker.getMarketType()) {
        if (priceAlert.getHigher() > 0 && ticker.getDefaultExchangeHigh() >= priceAlert.getHigher()) {
          notif(ticker.getMarketType(),true,priceAlert.getHigher());
          PriceAlert.removePriceAlert(priceAlert);
        }
        if (priceAlert.getLower() > 0 && ticker.getDefaultExchangeLow() <= priceAlert.getLower()) {
          notif(ticker.getMarketType(),false,priceAlert.getLower());
          PriceAlert.removePriceAlert(priceAlert);
        }
      }
    }
  }
}","private void comporePriceAlert(List<Ticker> tickerList){
  List<PriceAlert> priceAlertList=PriceAlert.getPriceAlertList();
  for (  PriceAlert priceAlert : priceAlertList) {
    for (    Ticker ticker : tickerList) {
      if (priceAlert.getMarketType() == ticker.getMarketType()) {
        if (priceAlert.getExchangeHigher() > 0 && ticker.getDefaultExchangeHigh() >= priceAlert.getExchangeHigher()) {
          notif(ticker.getMarketType(),true,priceAlert.getExchangeHigher());
          PriceAlert.removePriceAlert(priceAlert);
        }
        if (priceAlert.getExchangeLower() > 0 && ticker.getDefaultExchangeLow() <= priceAlert.getExchangeLower()) {
          notif(ticker.getMarketType(),false,priceAlert.getExchangeLower());
          PriceAlert.removePriceAlert(priceAlert);
        }
      }
    }
  }
}",0.9695817490494296
63538,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_share:
    final CharSequence[] shareItems={getString(R.string.action_share_link),getString(R.string.action_share_comments)};
  new AlertDialog.Builder(getActivity()).setItems(shareItems,(dialogInterface,i) -> {
    Intent sendIntent=new Intent();
    sendIntent.setAction(Intent.ACTION_SEND);
switch (i) {
case 0:
      sendIntent.putExtra(Intent.EXTRA_TEXT,getViewModel().getStoryDetail().getUrl());
    break;
case 1:
  sendIntent.putExtra(Intent.EXTRA_TEXT,HACKER_NEWS_ITEM_BASE_URL + getViewModel().getStoryId());
break;
}
sendIntent.setType(""String_Node_Str"");
startActivity(sendIntent);
}
).create().show();
break;
case R.id.action_open_browser:
Intent browserIntent=new Intent();
browserIntent.setAction(Intent.ACTION_VIEW);
browserIntent.setData(Uri.parse(HACKER_NEWS_ITEM_BASE_URL + getViewModel().getStoryId()));
startActivity(browserIntent);
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_share:
    final CharSequence[] shareItems={getString(R.string.action_share_link),getString(R.string.action_share_comments)};
  new AlertDialog.Builder(getActivity()).setItems(shareItems,(dialogInterface,i) -> {
    Intent sendIntent=new Intent();
    sendIntent.setAction(Intent.ACTION_SEND);
switch (i) {
case 0:
      sendIntent.putExtra(Intent.EXTRA_TEXT,getViewModel().getStoryDetail().getUrl());
    break;
case 1:
  sendIntent.putExtra(Intent.EXTRA_TEXT,HACKER_NEWS_ITEM_BASE_URL + getViewModel().getStoryId());
break;
}
sendIntent.setType(""String_Node_Str"");
startActivity(sendIntent);
}
).create().show();
break;
case R.id.action_open_browser:
final CharSequence[] openInBrowserItems={getString(R.string.action_open_in_browser_link),getString(R.string.action_open_in_browser_comments)};
new AlertDialog.Builder(getActivity()).setItems(openInBrowserItems,(dialogInterface,i) -> {
Intent browserIntent=new Intent();
browserIntent.setAction(Intent.ACTION_VIEW);
switch (i) {
case 0:
browserIntent.setData(Uri.parse(getViewModel().getStoryDetail().getUrl()));
break;
case 1:
browserIntent.setData(Uri.parse(HACKER_NEWS_ITEM_BASE_URL + getViewModel().getStoryId()));
break;
}
startActivity(browserIntent);
}
).create().show();
break;
}
return super.onOptionsItemSelected(item);
}",0.8432432432432433
63539,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  DaggerViewModelComponent.builder().appComponent(HackerNewsApplication.getAppComponent()).build().inject(this);
  if (savedInstanceState != null) {
    getViewModel().setStoryList(savedInstanceState.getParcelableArrayList(STORY_LIST));
    getViewModel().isRestoring(true);
  }
  if (getArguments() != null) {
    @StoryListViewModel.FeedType final int feedType=getArguments().getInt(FEED_TO_LOAD);
    getViewModel().setFeedType(feedType);
  }
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  DaggerViewModelComponent.builder().appComponent(HackerNewsApplication.getAppComponent()).build().inject(this);
  if (savedInstanceState != null) {
    getViewModel().setStoryList(savedInstanceState.getParcelableArrayList(STORY_LIST));
    getViewModel().setIsRestoring(true);
  }
  if (getArguments() != null) {
    @StoryListViewModel.FeedType final int feedType=getArguments().getInt(FEED_TO_LOAD);
    getViewModel().setFeedType(feedType);
  }
  setHasOptionsMenu(true);
}",0.9956331877729258
63540,"private void refresh(){
  mRecyclerAdapter.clear();
  react(getViewModel().getStories(),false);
}","private void refresh(){
  mRecyclerAdapter.clear();
  getViewModel().setIsRestoring(false);
  getViewModel().setStoryList(null);
  react(getViewModel().getStories(),false);
}",0.7158671586715867
63541,"@NonNull @StringRes int getTitle(){
  @StringRes int title;
switch (mFeedType) {
case FEED_TYPE_TOP:
    title=R.string.title_top;
  break;
case FEED_TYPE_BEST:
title=R.string.title_best;
break;
case FEED_TYPE_NEW:
title=R.string.title_newest;
break;
case FEED_TYPE_SAVED:
title=R.string.title_section_saved;
break;
case FEED_TYPE_ASK:
title=R.string.title_section_ask;
break;
default :
title=R.string.app_name;
}
return title;
}","@StringRes int getTitle(){
  @StringRes int title;
switch (mFeedType) {
case FEED_TYPE_TOP:
    title=R.string.title_top;
  break;
case FEED_TYPE_BEST:
title=R.string.title_best;
break;
case FEED_TYPE_NEW:
title=R.string.title_newest;
break;
case FEED_TYPE_SAVED:
title=R.string.title_section_saved;
break;
case FEED_TYPE_ASK:
title=R.string.title_section_ask;
break;
default :
title=R.string.app_name;
}
return title;
}",0.9893992932862192
63542,"static void bind(@NonNull Context context,@NonNull HeaderViewHolder headerViewHolder,@NonNull StoryDetail storyDetail){
  headerViewHolder.mStoryTitle.setText(storyDetail.getTitle());
  headerViewHolder.mStorySubmitter.setText(storyDetail.getUser());
  if (!StoryDetail.JOB.equals(storyDetail.getType())) {
    headerViewHolder.mContent.setVisibility(View.GONE);
    if (StoryDetail.LINK.equals(storyDetail.getType()) && !TextUtils.isEmpty(storyDetail.getDomain())) {
      String domain=storyDetail.getDomain();
      headerViewHolder.mStoryDomain.setVisibility(View.VISIBLE);
      headerViewHolder.mStoryDomain.setText(""String_Node_Str"" + domain.substring(0,20 > domain.length() ? domain.length() : 20));
    }
 else {
      headerViewHolder.mStoryDomain.setVisibility(View.GONE);
      headerViewHolder.mContent.setVisibility(View.VISIBLE);
      Spanned jobContent=Html.fromHtml(storyDetail.getContent());
      headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
      headerViewHolder.mContent.setText(jobContent);
      headerViewHolder.mContent.setTextColor(context.getResources().getColor(UserPreferenceManager.getInstance().isNightModeEnabled() ? android.R.color.white : android.R.color.black));
    }
    headerViewHolder.mStoryPoints.setText(String.valueOf(storyDetail.getPoints()));
    headerViewHolder.mStoryLongAgo.setText(""String_Node_Str"" + storyDetail.getTimeAgo());
    headerViewHolder.mCommentsCount.setText(storyDetail.getCommentsCount() + ""String_Node_Str"");
  }
 else {
    headerViewHolder.mContent.setVisibility(View.VISIBLE);
    Spanned jobContent=Html.fromHtml(storyDetail.getContent());
    headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
    headerViewHolder.mContent.setTextColor(context.getResources().getColor(android.R.color.black));
    headerViewHolder.mContent.setText(jobContent);
    headerViewHolder.mStoryDomain.setVisibility(View.GONE);
    headerViewHolder.mCommentsCount.setVisibility(View.GONE);
    headerViewHolder.mStoryPoints.setVisibility(View.GONE);
  }
}","static void bind(@NonNull Context context,@NonNull HeaderViewHolder headerViewHolder,@NonNull StoryDetail storyDetail){
  headerViewHolder.mStoryTitle.setText(storyDetail.getTitle());
  headerViewHolder.mStorySubmitter.setText(storyDetail.getUser());
  if (!StoryDetail.JOB.equals(storyDetail.getType())) {
    headerViewHolder.mContent.setVisibility(View.GONE);
    if (StoryDetail.LINK.equals(storyDetail.getType()) && !TextUtils.isEmpty(storyDetail.getDomain())) {
      String domain=storyDetail.getDomain();
      headerViewHolder.mStoryDomain.setVisibility(View.VISIBLE);
      headerViewHolder.mStoryDomain.setText(""String_Node_Str"" + domain.substring(0,20 > domain.length() ? domain.length() : 20));
    }
 else {
      headerViewHolder.mStoryDomain.setVisibility(View.GONE);
      if (!TextUtils.isEmpty(storyDetail.getContent())) {
        headerViewHolder.mContent.setVisibility(View.VISIBLE);
        Spanned jobContent=Html.fromHtml(storyDetail.getContent());
        headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
        headerViewHolder.mContent.setText(jobContent);
        headerViewHolder.mContent.setTextColor(context.getResources().getColor(UserPreferenceManager.getInstance().isNightModeEnabled() ? android.R.color.white : android.R.color.black));
      }
    }
    headerViewHolder.mStoryPoints.setText(String.valueOf(storyDetail.getPoints()));
    headerViewHolder.mStoryLongAgo.setText(""String_Node_Str"" + storyDetail.getTimeAgo());
    headerViewHolder.mCommentsCount.setText(storyDetail.getCommentsCount() + ""String_Node_Str"");
  }
 else {
    headerViewHolder.mContent.setVisibility(View.VISIBLE);
    Spanned jobContent=Html.fromHtml(storyDetail.getContent());
    headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
    headerViewHolder.mContent.setTextColor(context.getResources().getColor(android.R.color.black));
    headerViewHolder.mContent.setText(jobContent);
    headerViewHolder.mStoryDomain.setVisibility(View.GONE);
    headerViewHolder.mCommentsCount.setVisibility(View.GONE);
    headerViewHolder.mStoryPoints.setVisibility(View.GONE);
  }
}",0.9819477434679336
63543,"static void bind(@NonNull Context context,@NonNull HeaderViewHolder headerViewHolder,@NonNull StoryDetail storyDetail){
  headerViewHolder.mStoryTitle.setText(storyDetail.getTitle());
  headerViewHolder.mStorySubmitter.setText(storyDetail.getUser());
  if (!StoryDetail.JOB.equals(storyDetail.getType())) {
    headerViewHolder.mContent.setVisibility(View.GONE);
    if (StoryDetail.LINK.equals(storyDetail.getType()) && !TextUtils.isEmpty(storyDetail.getDomain())) {
      String domain=storyDetail.getDomain();
      headerViewHolder.mStoryDomain.setVisibility(View.VISIBLE);
      headerViewHolder.mStoryDomain.setText(""String_Node_Str"" + domain.substring(0,20 > domain.length() ? domain.length() : 20));
    }
 else {
      headerViewHolder.mStoryDomain.setVisibility(View.GONE);
      if (!TextUtils.isEmpty(storyDetail.getContent())) {
        headerViewHolder.mContent.setVisibility(View.VISIBLE);
        Spanned jobContent=Html.fromHtml(storyDetail.getContent());
        headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
        headerViewHolder.mContent.setText(jobContent);
        headerViewHolder.mContent.setTextColor(context.getResources().getColor(UserPreferenceManager.getInstance().isNightModeEnabled() ? android.R.color.white : android.R.color.black));
      }
    }
    headerViewHolder.mStoryPoints.setText(String.valueOf(storyDetail.getPoints()));
    headerViewHolder.mStoryLongAgo.setText(""String_Node_Str"" + storyDetail.getTimeAgo());
    headerViewHolder.mCommentsCount.setText(storyDetail.getCommentsCount() + ""String_Node_Str"");
  }
 else {
    headerViewHolder.mContent.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(storyDetail.getContent())) {
      Spanned jobContent=Html.fromHtml(storyDetail.getContent());
    }
    headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
    headerViewHolder.mContent.setTextColor(context.getResources().getColor(android.R.color.black));
    headerViewHolder.mContent.setText(jobContent);
    headerViewHolder.mStoryDomain.setVisibility(View.GONE);
    headerViewHolder.mCommentsCount.setVisibility(View.GONE);
    headerViewHolder.mStoryPoints.setVisibility(View.GONE);
  }
}","static void bind(@NonNull Context context,@NonNull HeaderViewHolder headerViewHolder,@NonNull StoryDetail storyDetail){
  headerViewHolder.mStoryTitle.setText(storyDetail.getTitle());
  headerViewHolder.mStorySubmitter.setText(storyDetail.getUser());
  if (!StoryDetail.JOB.equals(storyDetail.getType())) {
    headerViewHolder.mContent.setVisibility(View.GONE);
    if (StoryDetail.LINK.equals(storyDetail.getType()) && !TextUtils.isEmpty(storyDetail.getDomain())) {
      String domain=storyDetail.getDomain();
      headerViewHolder.mStoryDomain.setVisibility(View.VISIBLE);
      headerViewHolder.mStoryDomain.setText(""String_Node_Str"" + domain.substring(0,20 > domain.length() ? domain.length() : 20));
    }
 else {
      headerViewHolder.mStoryDomain.setVisibility(View.GONE);
      if (!TextUtils.isEmpty(storyDetail.getContent())) {
        headerViewHolder.mContent.setVisibility(View.VISIBLE);
        Spanned jobContent=Html.fromHtml(storyDetail.getContent());
        headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
        headerViewHolder.mContent.setText(jobContent);
        headerViewHolder.mContent.setTextColor(context.getResources().getColor(UserPreferenceManager.getInstance().isNightModeEnabled() ? android.R.color.white : android.R.color.black));
      }
    }
    headerViewHolder.mStoryPoints.setText(String.valueOf(storyDetail.getPoints()));
    headerViewHolder.mStoryLongAgo.setText(""String_Node_Str"" + storyDetail.getTimeAgo());
    headerViewHolder.mCommentsCount.setText(storyDetail.getCommentsCount() + ""String_Node_Str"");
  }
 else {
    headerViewHolder.mContent.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(storyDetail.getContent())) {
      headerViewHolder.mContent.setText(Html.fromHtml(storyDetail.getContent()));
    }
    headerViewHolder.mContent.setMovementMethod(LinkMovementMethod.getInstance());
    headerViewHolder.mContent.setTextColor(context.getResources().getColor(android.R.color.black));
    headerViewHolder.mStoryDomain.setVisibility(View.GONE);
    headerViewHolder.mCommentsCount.setVisibility(View.GONE);
    headerViewHolder.mStoryPoints.setVisibility(View.GONE);
  }
}",0.9760219228134276
63544,"@SuppressLint(""String_Node_Str"") @Override public void onStoryListFragmentInteraction(long id,boolean saved){
  if (HackerNewsApplication.isDebug()) {
    Toast.makeText(this,String.valueOf(id),Toast.LENGTH_SHORT).show();
  }
  if (mIsDualPane && mDetailsContainer != null) {
    mStoryDetailFragment=StoryDetailFragment.newInstance(id,saved);
    mDetailsContainer.setVisibility(View.VISIBLE);
    getSupportFragmentManager().beginTransaction().replace(R.id.details_container,mStoryDetailFragment).commit();
  }
 else {
    Intent detailIntent=new Intent(this,StoryDetailActivity.class);
    detailIntent.putExtra(STORY_ID,id);
    detailIntent.putExtra(StoryDetailFragment.LOADING_FROM_SAVED,saved);
    startActivity(detailIntent);
    overridePendingTransition(R.anim.offscreen_left_to_view,R.anim.fadeout);
  }
}","@SuppressLint(""String_Node_Str"") @Override public void onStoryListFragmentInteraction(long id,boolean saved){
  if (HackerNewsApplication.isDebug()) {
    Toast.makeText(this,String.valueOf(id),Toast.LENGTH_SHORT).show();
  }
  if (mIsDualPane && mDetailsContainer != null) {
    mStoryDetailFragment=StoryDetailFragment.newInstance(id,saved);
    mDetailsContainer.postDelayed(() -> {
      mDetailsContainer.setVisibility(View.VISIBLE);
      getSupportFragmentManager().beginTransaction().replace(R.id.details_container,mStoryDetailFragment).commit();
    }
,200);
  }
 else {
    Intent detailIntent=new Intent(this,StoryDetailActivity.class);
    detailIntent.putExtra(STORY_ID,id);
    detailIntent.putExtra(StoryDetailFragment.LOADING_FROM_SAVED,saved);
    startActivity(detailIntent);
    overridePendingTransition(R.anim.offscreen_left_to_view,R.anim.fadeout);
  }
}",0.965150620200827
63545,"private void setupWebViewDrawer(){
  Display display=getActivity().getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  mLinkLayout.setStashPixel(height);
  mLinkLayout.setRevealPixel(0);
  mLinkLayout.setTranslateDirection(ReboundRevealRelativeLayout.TRANSLATE_DIRECTION_VERTICAL);
  if (!UserPreferenceManager.isExternalBrowserEnabled(getActivity())) {
    mLinkLayout.setOpen(mWasLinkLayoutOpen || (UserPreferenceManager.showLinkFirst(getActivity())));
  }
  final ProgressBar webProgressBar=(ProgressBar)mLinkLayout.findViewById(R.id.web_progress_bar);
  mCloseLink.setOnClickListener(view -> mLinkLayout.setOpen(false));
  mWebView.setVisibility(View.INVISIBLE);
  webProgressBar.setVisibility(View.VISIBLE);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setLoadWithOverviewMode(true);
  webSettings.setUseWideViewPort(true);
  webSettings.setSupportZoom(true);
  webSettings.setBuiltInZoomControls(true);
  webSettings.setDisplayZoomControls(false);
  webSettings.setJavaScriptEnabled(true);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      mWebView.setVisibility(View.VISIBLE);
      webProgressBar.setVisibility(View.GONE);
    }
  }
);
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    int newProgress){
      super.onProgressChanged(view,newProgress);
      webProgressBar.setMax(100);
      webProgressBar.setProgress(newProgress);
    }
  }
);
  mWebView.setOnScrollChangedCallback(this);
  mWebBack.setOnClickListener(view -> {
    if (mWebView.canGoBack()) {
      mWebView.goBack();
    }
  }
);
  mWebForward.setOnClickListener(view -> {
    if (mWebView.canGoForward()) {
      mWebView.goForward();
    }
  }
);
}","private void setupWebViewDrawer(){
  updateWebViewDrawerPosition();
  mLinkLayout.setTranslateDirection(ReboundRevealRelativeLayout.TRANSLATE_DIRECTION_VERTICAL);
  if (!UserPreferenceManager.isExternalBrowserEnabled(getActivity())) {
    mLinkLayout.setOpen(mWasLinkLayoutOpen || (UserPreferenceManager.showLinkFirst(getActivity())));
  }
  final ProgressBar webProgressBar=(ProgressBar)mLinkLayout.findViewById(R.id.web_progress_bar);
  mCloseLink.setOnClickListener(view -> mLinkLayout.setOpen(false));
  mWebView.setVisibility(View.INVISIBLE);
  webProgressBar.setVisibility(View.VISIBLE);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setLoadWithOverviewMode(true);
  webSettings.setUseWideViewPort(true);
  webSettings.setSupportZoom(true);
  webSettings.setBuiltInZoomControls(true);
  webSettings.setDisplayZoomControls(false);
  webSettings.setJavaScriptEnabled(true);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      mWebView.setVisibility(View.VISIBLE);
      webProgressBar.setVisibility(View.GONE);
    }
  }
);
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    int newProgress){
      super.onProgressChanged(view,newProgress);
      webProgressBar.setMax(100);
      webProgressBar.setProgress(newProgress);
    }
  }
);
  mWebView.setOnScrollChangedCallback(this);
  mWebBack.setOnClickListener(view -> {
    if (mWebView.canGoBack()) {
      mWebView.goBack();
    }
  }
);
  mWebForward.setOnClickListener(view -> {
    if (mWebView.canGoForward()) {
      mWebView.goForward();
    }
  }
);
}",0.9298100743187449
63546,"public ReboundRevealRelativeLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  SpringSystem springSystem=SpringSystem.create();
  mSpring=springSystem.createSpring();
  mSpring.setSpringConfig(SPRING_CONFIG);
  LinkSpringListener linkSpringListener=new LinkSpringListener();
  mSpring.setCurrentValue(0).setEndValue(1).addListener(linkSpringListener);
}","public ReboundRevealRelativeLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  SpringSystem springSystem=SpringSystem.create();
  mSpring=springSystem.createSpring();
  mSpring.setSpringConfig(SPRING_CONFIG);
  updateListener();
}",0.7759398496240602
63547,"private void setupWebViewDrawer(){
  Display display=getActivity().getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  mLinkLayout.setStashPixel(height);
  mLinkLayout.setRevealPixel(0);
  mLinkLayout.setTranslateDirection(ReboundRevealRelativeLayout.TRANSLATE_DIRECTION_VERTICAL);
  if (!UserPreferenceManager.isExternalBrowserEnabled(getActivity())) {
    mLinkLayout.setOpen(mWasLinkLayoutOpen || (UserPreferenceManager.showLinkFirst(getActivity())));
  }
  final ProgressBar webProgressBar=(ProgressBar)mLinkLayout.findViewById(R.id.web_progress_bar);
  mCloseLink.setOnClickListener(view -> mLinkLayout.setOpen(false));
  mWebView.setVisibility(View.INVISIBLE);
  webProgressBar.setVisibility(View.VISIBLE);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setLoadWithOverviewMode(true);
  webSettings.setUseWideViewPort(true);
  webSettings.setSupportZoom(true);
  webSettings.setBuiltInZoomControls(true);
  webSettings.setDisplayZoomControls(false);
  webSettings.setJavaScriptEnabled(true);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      mWebView.setVisibility(View.VISIBLE);
      webProgressBar.setVisibility(View.GONE);
    }
  }
);
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    int newProgress){
      super.onProgressChanged(view,newProgress);
      webProgressBar.setMax(100);
      webProgressBar.setProgress(newProgress);
    }
  }
);
  mWebView.setOnScrollChangedCallback(this);
  mWebBack.setOnClickListener(view -> {
    if (mWebView.canGoBack()) {
      mWebView.goBack();
    }
  }
);
  mWebForward.setOnClickListener(view -> {
    if (mWebView.canGoForward()) {
      mWebView.goForward();
    }
  }
);
}","private void setupWebViewDrawer(){
  updateWebViewDrawerPosition();
  mLinkLayout.setTranslateDirection(ReboundRevealRelativeLayout.TRANSLATE_DIRECTION_VERTICAL);
  if (!UserPreferenceManager.isExternalBrowserEnabled(getActivity())) {
    mLinkLayout.setOpen(mWasLinkLayoutOpen || (UserPreferenceManager.showLinkFirst(getActivity())));
  }
  final ProgressBar webProgressBar=(ProgressBar)mLinkLayout.findViewById(R.id.web_progress_bar);
  mCloseLink.setOnClickListener(view -> mLinkLayout.setOpen(false));
  mWebView.setVisibility(View.INVISIBLE);
  webProgressBar.setVisibility(View.VISIBLE);
  WebSettings webSettings=mWebView.getSettings();
  webSettings.setLoadWithOverviewMode(true);
  webSettings.setUseWideViewPort(true);
  webSettings.setSupportZoom(true);
  webSettings.setBuiltInZoomControls(true);
  webSettings.setDisplayZoomControls(false);
  webSettings.setJavaScriptEnabled(true);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      mWebView.setVisibility(View.VISIBLE);
      webProgressBar.setVisibility(View.GONE);
    }
  }
);
  mWebView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    int newProgress){
      super.onProgressChanged(view,newProgress);
      webProgressBar.setMax(100);
      webProgressBar.setProgress(newProgress);
    }
  }
);
  mWebView.setOnScrollChangedCallback(this);
  mWebBack.setOnClickListener(view -> {
    if (mWebView.canGoBack()) {
      mWebView.goBack();
    }
  }
);
  mWebForward.setOnClickListener(view -> {
    if (mWebView.canGoForward()) {
      mWebView.goForward();
    }
  }
);
}",0.9298100743187449
63548,"public ReboundRevealRelativeLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  SpringSystem springSystem=SpringSystem.create();
  mSpring=springSystem.createSpring();
  mSpring.setSpringConfig(SPRING_CONFIG);
  LinkSpringListener linkSpringListener=new LinkSpringListener();
  mSpring.setCurrentValue(0).setEndValue(1).addListener(linkSpringListener);
}","public ReboundRevealRelativeLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  SpringSystem springSystem=SpringSystem.create();
  mSpring=springSystem.createSpring();
  mSpring.setSpringConfig(SPRING_CONFIG);
  updateListener();
}",0.7759398496240602
63549,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  GsonBuilder gsonBuilder=new GsonBuilder();
  gsonBuilder.registerTypeAdapter(Long.class,new LongTypeAdapter());
  Gson gson=gsonBuilder.create();
  RestAdapter restAdapter=new RestAdapter.Builder().setConverter(new GsonConverter(gson)).setEndpoint(""String_Node_Str"").build();
  mHackerNewsService=restAdapter.create(HackerNewsService.class);
  if (HoloHackerNewsApplication.isTRAVIS()) {
    RestAdapter readabilityRestAdapter=new RestAdapter.Builder().setEndpoint(""String_Node_Str"").build();
    mReadabilityService=readabilityRestAdapter.create(ReadabilityService.class);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  GsonBuilder gsonBuilder=new GsonBuilder();
  gsonBuilder.registerTypeAdapter(Long.class,new LongTypeAdapter());
  Gson gson=gsonBuilder.create();
  RestAdapter restAdapter=new RestAdapter.Builder().setConverter(new GsonConverter(gson)).setEndpoint(""String_Node_Str"").build();
  mHackerNewsService=restAdapter.create(HackerNewsService.class);
  if (!HoloHackerNewsApplication.isTRAVIS()) {
    RestAdapter readabilityRestAdapter=new RestAdapter.Builder().setEndpoint(""String_Node_Str"").build();
    mReadabilityService=readabilityRestAdapter.create(ReadabilityService.class);
  }
}",0.9992630803242448
63550,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  HeaderViewHolder headerViewHolder;
  if (convertView != null && convertView.getTag() instanceof HeaderViewHolder) {
    convertView=null;
  }
  if (position != 0) {
    if (convertView == null) {
      convertView=((Activity)mContext).getLayoutInflater().inflate(mResource,parent,false);
      viewHolder=new ViewHolder();
      viewHolder.mCommentContent=(TextView)convertView.findViewById(R.id.comment_content);
      viewHolder.mColorCodeView=convertView.findViewById(R.id.color_code);
      viewHolder.mCommentSubmissionTime=(TextView)convertView.findViewById(R.id.comment_submission_time);
      viewHolder.mCommentSubmitter=(TextView)convertView.findViewById(R.id.comment_submitter);
      convertView.setTag(viewHolder);
    }
 else {
      viewHolder=(ViewHolder)convertView.getTag();
    }
    position-=1;
    Spanned commentContent=Html.fromHtml(getItem(position).getContent());
    viewHolder.mCommentContent.setMovementMethod(LinkMovementMethod.getInstance());
    viewHolder.mCommentContent.setText(commentContent);
    viewHolder.mCommentSubmissionTime.setText(getItem(position).getTimeAgo());
    String submitter=getItem(position).getUser();
    if (HoloHackerNewsApplication.isDebug()) {
      viewHolder.mCommentSubmitter.setText(position + ""String_Node_Str"" + submitter);
    }
 else {
      viewHolder.mCommentSubmitter.setText(submitter);
    }
    viewHolder.mCommentSubmitter.setTextColor(mContext.getResources().getColor(mStoryDetail.getUser().equals(submitter) ? android.R.color.holo_orange_light : android.R.color.black));
    float scale=mContext.getResources().getDisplayMetrics().density;
    int dpAsPixels=(int)(getItem(position).getLevel() * 12 * scale + 0.5f);
    if (getItem(position).getLevel() != 0) {
      convertView.setPadding(dpAsPixels,0,4,0);
    }
 else {
      convertView.setPadding(4,0,4,0);
    }
switch (getItem(position).getLevel() % 8) {
case 0:
      viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_blue_bright);
    break;
case 1:
  viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_green_light);
break;
case 2:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_red_light);
break;
case 3:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_orange_light);
break;
case 4:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_purple);
break;
case 5:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_green_dark);
break;
case 6:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_red_dark);
break;
case 7:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_orange_dark);
break;
}
}
 else {
convertView=((Activity)mContext).getLayoutInflater().inflate(R.layout.comments_header,parent,false);
headerViewHolder=new HeaderViewHolder();
convertView.setTag(headerViewHolder);
headerViewHolder.mStoryTitle=(TextView)convertView.findViewById(R.id.story_title);
headerViewHolder.mStoryDomain=(TextView)convertView.findViewById(R.id.story_domain);
headerViewHolder.mStorySubmitter=(TextView)convertView.findViewById(R.id.story_submitter);
headerViewHolder.mStoryPoints=(TextView)convertView.findViewById(R.id.story_points);
headerViewHolder.mStoryLongAgo=(TextView)convertView.findViewById(R.id.story_long_ago);
headerViewHolder.mCommentsCount=(TextView)convertView.findViewById(R.id.comment_count);
headerViewHolder.mStoryTitle.setText(mStoryDetail.getTitle());
headerViewHolder.mStorySubmitter.setText(mStoryDetail.getUser());
headerViewHolder.mStoryDomain.setText(""String_Node_Str"" + mStoryDetail.getDomain());
headerViewHolder.mStoryPoints.setText(String.valueOf(mStoryDetail.getPoints()));
headerViewHolder.mStoryLongAgo.setText(""String_Node_Str"" + mStoryDetail.getTimeAgo());
headerViewHolder.mCommentsCount.setText(mStoryDetail.getCommentsCount() + ""String_Node_Str"");
}
return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  if (convertView == null) {
    convertView=((Activity)mContext).getLayoutInflater().inflate(mResource,parent,false);
    viewHolder=new ViewHolder();
    viewHolder.mCommentContent=(TextView)convertView.findViewById(R.id.comment_content);
    viewHolder.mColorCodeView=convertView.findViewById(R.id.color_code);
    viewHolder.mCommentSubmissionTime=(TextView)convertView.findViewById(R.id.comment_submission_time);
    viewHolder.mCommentSubmitter=(TextView)convertView.findViewById(R.id.comment_submitter);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  Spanned commentContent=Html.fromHtml(getItem(position).getContent());
  viewHolder.mCommentContent.setMovementMethod(LinkMovementMethod.getInstance());
  viewHolder.mCommentContent.setText(commentContent);
  viewHolder.mCommentSubmissionTime.setText(getItem(position).getTimeAgo());
  String submitter=getItem(position).getUser();
  if (HoloHackerNewsApplication.isDebug()) {
    viewHolder.mCommentSubmitter.setText(position + ""String_Node_Str"" + submitter);
  }
 else {
    viewHolder.mCommentSubmitter.setText(submitter);
  }
  viewHolder.mCommentSubmitter.setTextColor(mContext.getResources().getColor(mStoryDetail.getUser().equals(submitter) ? android.R.color.holo_orange_light : android.R.color.black));
  float scale=mContext.getResources().getDisplayMetrics().density;
  int dpAsPixels=(int)(getItem(position).getLevel() * 12 * scale + 0.5f);
  if (getItem(position).getLevel() != 0) {
    convertView.setPadding(dpAsPixels,0,4,0);
  }
 else {
    convertView.setPadding(4,0,4,0);
  }
switch (getItem(position).getLevel() % 8) {
case 0:
    viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_blue_bright);
  break;
case 1:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_green_light);
break;
case 2:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_red_light);
break;
case 3:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_orange_light);
break;
case 4:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_purple);
break;
case 5:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_green_dark);
break;
case 6:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_red_dark);
break;
case 7:
viewHolder.mColorCodeView.setBackgroundResource(android.R.color.holo_orange_dark);
break;
}
return convertView;
}",0.7747252747252747
63551,"private void refresh(){
  mService.getItemDetails(mStoryId,new Callback<StoryDetail>(){
    @Override public void success(    final StoryDetail storyDetail,    Response response){
      mCommentsListView.setOnScrollListener(new AbsListView.OnScrollListener(){
        public int mPrevVisibleItem;
        @Override public void onScrollStateChanged(        AbsListView absListView,        int scrollState){
        }
        @Override public void onScroll(        AbsListView absListView,        int firstVisibleItem,        int i2,        int i3){
          if (mPrevVisibleItem != firstVisibleItem) {
            mPrevVisibleItem=firstVisibleItem;
          }
          if (firstVisibleItem == 0) {
            mActionBar.setTitle(""String_Node_Str"");
          }
 else {
            mActionBar.setTitle(storyDetail.getTitle());
          }
        }
      }
);
      mOpenLinkDialogButton.setVisibility(View.VISIBLE);
      mOpenLinkDialogButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          mListener.onStoryFragmentInteraction(storyDetail.getUrl());
        }
      }
);
      mListAdapter.setStoryDetail(storyDetail);
      mListAdapter.setComments(storyDetail.getCommentList());
      mListAdapter.notifyDataSetChanged();
      showProgress(false);
      mSwipeRefreshLayout.setRefreshing(false);
    }
    @Override public void failure(    RetrofitError error){
      Log.d(TAG,error.toString());
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
}","private void refresh(){
  mService.getItemDetails(mStoryId,new Callback<StoryDetail>(){
    @Override public void success(    final StoryDetail storyDetail,    Response response){
      mHeaderViewHolder.mStoryTitle.setText(storyDetail.getTitle());
      mHeaderViewHolder.mStorySubmitter.setText(storyDetail.getUser());
      mHeaderViewHolder.mStoryDomain.setText(""String_Node_Str"" + storyDetail.getDomain());
      mHeaderViewHolder.mStoryPoints.setText(String.valueOf(storyDetail.getPoints()));
      mHeaderViewHolder.mStoryLongAgo.setText(""String_Node_Str"" + storyDetail.getTimeAgo());
      mHeaderViewHolder.mCommentsCount.setText(storyDetail.getCommentsCount() + ""String_Node_Str"");
      mCommentsListView.setOnScrollListener(new AbsListView.OnScrollListener(){
        public int mPrevVisibleItem;
        @Override public void onScrollStateChanged(        AbsListView absListView,        int scrollState){
        }
        @Override public void onScroll(        AbsListView absListView,        int firstVisibleItem,        int i2,        int i3){
          if (mPrevVisibleItem != firstVisibleItem) {
            mPrevVisibleItem=firstVisibleItem;
          }
          if (firstVisibleItem == 0) {
            mActionBar.setTitle(""String_Node_Str"");
          }
 else {
            mActionBar.setTitle(storyDetail.getTitle());
          }
        }
      }
);
      mOpenLinkDialogButton.setVisibility(View.VISIBLE);
      mOpenLinkDialogButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          mListener.onStoryFragmentInteraction(storyDetail.getUrl());
        }
      }
);
      mListAdapter.setStoryDetail(storyDetail);
      mListAdapter.setComments(storyDetail.getCommentList());
      mListAdapter.notifyDataSetChanged();
      showProgress(false);
      mSwipeRefreshLayout.setRefreshing(false);
    }
    @Override public void failure(    RetrofitError error){
      Log.d(TAG,error.toString());
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
}",0.85957213384531
63552,"@Override public void success(final StoryDetail storyDetail,Response response){
  mCommentsListView.setOnScrollListener(new AbsListView.OnScrollListener(){
    public int mPrevVisibleItem;
    @Override public void onScrollStateChanged(    AbsListView absListView,    int scrollState){
    }
    @Override public void onScroll(    AbsListView absListView,    int firstVisibleItem,    int i2,    int i3){
      if (mPrevVisibleItem != firstVisibleItem) {
        mPrevVisibleItem=firstVisibleItem;
      }
      if (firstVisibleItem == 0) {
        mActionBar.setTitle(""String_Node_Str"");
      }
 else {
        mActionBar.setTitle(storyDetail.getTitle());
      }
    }
  }
);
  mOpenLinkDialogButton.setVisibility(View.VISIBLE);
  mOpenLinkDialogButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mListener.onStoryFragmentInteraction(storyDetail.getUrl());
    }
  }
);
  mListAdapter.setStoryDetail(storyDetail);
  mListAdapter.setComments(storyDetail.getCommentList());
  mListAdapter.notifyDataSetChanged();
  showProgress(false);
  mSwipeRefreshLayout.setRefreshing(false);
}","@Override public void success(final StoryDetail storyDetail,Response response){
  mHeaderViewHolder.mStoryTitle.setText(storyDetail.getTitle());
  mHeaderViewHolder.mStorySubmitter.setText(storyDetail.getUser());
  mHeaderViewHolder.mStoryDomain.setText(""String_Node_Str"" + storyDetail.getDomain());
  mHeaderViewHolder.mStoryPoints.setText(String.valueOf(storyDetail.getPoints()));
  mHeaderViewHolder.mStoryLongAgo.setText(""String_Node_Str"" + storyDetail.getTimeAgo());
  mHeaderViewHolder.mCommentsCount.setText(storyDetail.getCommentsCount() + ""String_Node_Str"");
  mCommentsListView.setOnScrollListener(new AbsListView.OnScrollListener(){
    public int mPrevVisibleItem;
    @Override public void onScrollStateChanged(    AbsListView absListView,    int scrollState){
    }
    @Override public void onScroll(    AbsListView absListView,    int firstVisibleItem,    int i2,    int i3){
      if (mPrevVisibleItem != firstVisibleItem) {
        mPrevVisibleItem=firstVisibleItem;
      }
      if (firstVisibleItem == 0) {
        mActionBar.setTitle(""String_Node_Str"");
      }
 else {
        mActionBar.setTitle(storyDetail.getTitle());
      }
    }
  }
);
  mOpenLinkDialogButton.setVisibility(View.VISIBLE);
  mOpenLinkDialogButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mListener.onStoryFragmentInteraction(storyDetail.getUrl());
    }
  }
);
  mListAdapter.setStoryDetail(storyDetail);
  mListAdapter.setComments(storyDetail.getCommentList());
  mListAdapter.notifyDataSetChanged();
  showProgress(false);
  mSwipeRefreshLayout.setRefreshing(false);
}",0.8236994219653179
63553,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_story_comments,container,false);
  mActionBar=getActivity().getActionBar();
  mActionBar.show();
  mActionBar.setTitle(""String_Node_Str"");
  mCommentList=new ArrayList<Comment>();
  mProgressBar=(ProgressBar)rootView.findViewById(R.id.progress_bar);
  mContainer=rootView.findViewById(R.id.container);
  showProgress(true);
  mCommentsListView=(ListView)rootView.findViewById(R.id.comments_list);
  mPreviousTopLevelButton=(Button)rootView.findViewById(R.id.prev_top_level);
  mPreviousTopLevelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int currentIndex=mCommentsListView.getFirstVisiblePosition() - 1;
      for (int i=currentIndex - 1; i >= 0; i--) {
        if (mListAdapter.getItem(i).getLevel() == 0) {
          mCommentsListView.setSelectionFromTop(i + 1,0);
          return;
        }
      }
    }
  }
);
  mNextTopLevelButton=(Button)rootView.findViewById(R.id.next_top_level);
  mNextTopLevelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int currentIndex=mCommentsListView.getFirstVisiblePosition() + 1;
      for (int i=currentIndex + 1; i < mListAdapter.getCount(); i++) {
        if (mListAdapter.getItem(i).getLevel() == 0) {
          mCommentsListView.setSelectionFromTop(i - 1,0);
          return;
        }
      }
    }
  }
);
  mCommentsListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      return false;
    }
  }
);
  mListAdapter=new CommentsListAdapter(getActivity(),R.layout.comments_list_item,mCommentList);
  mCommentsListView.setAdapter(mListAdapter);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.swipe_container);
  mSwipeRefreshLayout.setColorScheme(android.R.color.holo_orange_dark,android.R.color.holo_orange_light,android.R.color.holo_orange_dark,android.R.color.holo_orange_light);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      mSwipeRefreshLayout.setRefreshing(true);
      refresh();
    }
  }
);
  mOpenLinkDialogButton=(Button)rootView.findViewById(R.id.open_link);
  refresh();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_story_comments,container,false);
  mActionBar=getActivity().getActionBar();
  mActionBar.show();
  mActionBar.setTitle(""String_Node_Str"");
  mCommentList=new ArrayList<Comment>();
  mProgressBar=(ProgressBar)rootView.findViewById(R.id.progress_bar);
  mContainer=rootView.findViewById(R.id.container);
  showProgress(true);
  mCommentsListView=(ListView)rootView.findViewById(R.id.comments_list);
  mPreviousTopLevelButton=(Button)rootView.findViewById(R.id.prev_top_level);
  mPreviousTopLevelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int currentIndex=mCommentsListView.getFirstVisiblePosition() - 1;
      for (int i=currentIndex - 1; i >= 0; i--) {
        if (mListAdapter.getItem(i).getLevel() == 0) {
          mCommentsListView.setSelectionFromTop(i + 1,0);
          return;
        }
      }
    }
  }
);
  mNextTopLevelButton=(Button)rootView.findViewById(R.id.next_top_level);
  mNextTopLevelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int currentIndex=mCommentsListView.getFirstVisiblePosition() + 1;
      for (int i=currentIndex + 1; i < mListAdapter.getCount(); i++) {
        if (mListAdapter.getItem(i).getLevel() == 0) {
          mCommentsListView.setSelectionFromTop(i - 1,0);
          return;
        }
      }
    }
  }
);
  mCommentsListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      return false;
    }
  }
);
  mListAdapter=new CommentsListAdapter(getActivity(),R.layout.comments_list_item,mCommentList);
  mHeaderViewHolder=new HeaderViewHolder();
  View headerView=inflater.inflate(R.layout.comments_header,null);
  mHeaderViewHolder.mStoryTitle=(TextView)headerView.findViewById(R.id.story_title);
  mHeaderViewHolder.mStoryDomain=(TextView)headerView.findViewById(R.id.story_domain);
  mHeaderViewHolder.mStorySubmitter=(TextView)headerView.findViewById(R.id.story_submitter);
  mHeaderViewHolder.mStoryPoints=(TextView)headerView.findViewById(R.id.story_points);
  mHeaderViewHolder.mStoryLongAgo=(TextView)headerView.findViewById(R.id.story_long_ago);
  mHeaderViewHolder.mCommentsCount=(TextView)headerView.findViewById(R.id.comment_count);
  mCommentsListView.addHeaderView(headerView);
  mCommentsListView.setAdapter(mListAdapter);
  mSwipeRefreshLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.swipe_container);
  mSwipeRefreshLayout.setColorScheme(android.R.color.holo_orange_dark,android.R.color.holo_orange_light,android.R.color.holo_orange_dark,android.R.color.holo_orange_light);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      mSwipeRefreshLayout.setRefreshing(true);
      refresh();
    }
  }
);
  mOpenLinkDialogButton=(Button)rootView.findViewById(R.id.open_link);
  refresh();
  return rootView;
}",0.878005657708628
63554,"@Override public NBTTagCompound fixTagCompound(NBTTagCompound compound){
  String oldName=compound.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (oldName.startsWith(""String_Node_Str"")) {
    String remappedName=MigrationHelper.getRemappedTileName(oldName);
    if (remappedName != null) {
      Log.info(""String_Node_Str"",oldName,remappedName);
      compound.setString(""String_Node_Str"",remappedName);
    }
 else {
      Log.error(""String_Node_Str"",oldName);
    }
  }
  return compound;
}","@Override public NBTTagCompound fixTagCompound(NBTTagCompound compound){
  String oldName=compound.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (oldName.startsWith(""String_Node_Str"")) {
    String remappedName=MigrationHelper.getRemappedTileName(oldName);
    if (remappedName != null) {
      Log.debug(""String_Node_Str"",oldName,remappedName);
      compound.setString(""String_Node_Str"",remappedName);
    }
 else {
      Log.error(""String_Node_Str"",oldName);
    }
  }
  return compound;
}",0.9914367269267363
63555,"@Override public NBTTagCompound writeToNBT(NBTTagCompound nbttagcompound){
  NBTTagCompound hasFlowerCacheNBT=new NBTTagCompound();
  if (!flowerCoords.isEmpty()) {
    int[] flowersList=new int[flowerCoords.size() * 3];
    int i=0;
    for (    BlockPos flowerPos : flowerCoords) {
      flowersList[i]=flowerPos.getX();
      flowersList[i + 1]=flowerPos.getY();
      flowersList[i + 2]=flowerPos.getZ();
      i++;
    }
    hasFlowerCacheNBT.setIntArray(NBT_KEY_FLOWERS,flowersList);
  }
  nbttagcompound.setTag(NBT_KEY,hasFlowerCacheNBT);
  return nbttagcompound;
}","@Override public NBTTagCompound writeToNBT(NBTTagCompound nbttagcompound){
  NBTTagCompound hasFlowerCacheNBT=new NBTTagCompound();
  if (!flowerCoords.isEmpty()) {
    int[] flowersList=new int[flowerCoords.size() * 3];
    int i=0;
    for (    BlockPos flowerPos : flowerCoords) {
      flowersList[i]=flowerPos.getX();
      flowersList[i + 1]=flowerPos.getY();
      flowersList[i + 2]=flowerPos.getZ();
      i+=3;
    }
    hasFlowerCacheNBT.setIntArray(NBT_KEY_FLOWERS,flowersList);
  }
  nbttagcompound.setTag(NBT_KEY,hasFlowerCacheNBT);
  return nbttagcompound;
}",0.9973799126637556
63556,"@Override public void registerItemSubtypes(ISubtypeRegistry subtypeRegistry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.APICULTURE))) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  ISubtypeRegistry.ISubtypeInterpreter beeSubtypeInterpreter=itemStack -> {
    IAlleleSpecies species=Genome.getSpeciesDirectly(BeeManager.beeRoot,itemStack);
    return species == null ? ISubtypeRegistry.ISubtypeInterpreter.NONE : species.getUID();
  }
;
  subtypeRegistry.registerSubtypeInterpreter(items.beeDroneGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beePrincessGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beeQueenGE,beeSubtypeInterpreter);
}","@Override public void registerItemSubtypes(ISubtypeRegistry subtypeRegistry){
  if (!ModuleHelper.isEnabled(ForestryModuleUids.APICULTURE)) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  ISubtypeRegistry.ISubtypeInterpreter beeSubtypeInterpreter=itemStack -> {
    IAlleleSpecies species=Genome.getSpeciesDirectly(BeeManager.beeRoot,itemStack);
    return species == null ? ISubtypeRegistry.ISubtypeInterpreter.NONE : species.getUID();
  }
;
  subtypeRegistry.registerSubtypeInterpreter(items.beeDroneGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beePrincessGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beeQueenGE,beeSubtypeInterpreter);
}",0.94625
63557,"@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.APICULTURE))) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.frameImpregnated,items.frameProven,items.frameUntreated);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.apiaristBoots,items.apiaristChest,items.apiaristHat,items.apiaristLegs);
  JeiUtil.addDescription(registry,items.habitatLocator,items.scoop,items.imprinter);
}","@Override public void register(IModRegistry registry){
  if (!ModuleHelper.isEnabled(ForestryModuleUids.APICULTURE)) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.frameImpregnated,items.frameProven,items.frameUntreated);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.apiaristBoots,items.apiaristChest,items.apiaristHat,items.apiaristLegs);
  JeiUtil.addDescription(registry,items.habitatLocator,items.scoop,items.imprinter);
}",0.9272419627749576
63558,"@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.ARBORICULTURE))) {
    return;
  }
  ItemRegistryArboriculture items=ModuleArboriculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,items.grafter,items.grafterProven);
}","@Override public void register(IModRegistry registry){
  if (!ModuleHelper.isEnabled(ForestryModuleUids.ARBORICULTURE)) {
    return;
  }
  ItemRegistryArboriculture items=ModuleArboriculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,items.grafter,items.grafterProven);
}",0.8727810650887574
63559,"@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.MAIL))) {
    return;
  }
  BlockRegistryMail blocks=ModuleMail.getBlocks();
  JeiUtil.addDescription(registry,blocks.mailbox,blocks.stampCollector,blocks.tradeStation);
}","@Override public void register(IModRegistry registry){
  if (!ModuleHelper.isEnabled(ForestryModuleUids.MAIL)) {
    return;
  }
  BlockRegistryMail blocks=ModuleMail.getBlocks();
  JeiUtil.addDescription(registry,blocks.mailbox,blocks.stampCollector,blocks.tradeStation);
}",0.8366666666666667
63560,"@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.BACKPACKS))) {
    return;
  }
  ItemRegistryBackpacks items=ModuleBackpacks.getItems();
  JeiUtil.addDescription(registry,""String_Node_Str"",items.minerBackpack,items.minerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.diggerBackpack,items.diggerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.foresterBackpack,items.foresterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.hunterBackpack,items.hunterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.adventurerBackpack,items.adventurerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.builderBackpack,items.builderBackpackT2);
  JeiUtil.addDescription(registry,items.apiaristBackpack,items.lepidopteristBackpack);
}","@Override public void register(IModRegistry registry){
  if (!ModuleHelper.isEnabled(ForestryModuleUids.BACKPACKS)) {
    return;
  }
  ItemRegistryBackpacks items=ModuleBackpacks.getItems();
  JeiUtil.addDescription(registry,""String_Node_Str"",items.minerBackpack,items.minerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.diggerBackpack,items.diggerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.foresterBackpack,items.foresterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.hunterBackpack,items.hunterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.adventurerBackpack,items.adventurerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.builderBackpack,items.builderBackpackT2);
  if (ModuleHelper.isEnabled(ForestryModuleUids.APICULTURE)) {
    JeiUtil.addDescription(registry,items.apiaristBackpack);
  }
  if (ModuleHelper.isEnabled(ForestryModuleUids.LEPIDOPTEROLOGY)) {
    JeiUtil.addDescription(registry,items.lepidopteristBackpack);
  }
}",0.838774485183325
63561,"@Override public void registerItemSubtypes(ISubtypeRegistry subtypeRegistry){
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  ISubtypeRegistry.ISubtypeInterpreter beeSubtypeInterpreter=itemStack -> {
    IAlleleSpecies species=Genome.getSpeciesDirectly(BeeManager.beeRoot,itemStack);
    return species == null ? ISubtypeRegistry.ISubtypeInterpreter.NONE : species.getUID();
  }
;
  subtypeRegistry.registerSubtypeInterpreter(items.beeDroneGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beePrincessGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beeQueenGE,beeSubtypeInterpreter);
}","@Override public void registerItemSubtypes(ISubtypeRegistry subtypeRegistry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.APICULTURE))) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  ISubtypeRegistry.ISubtypeInterpreter beeSubtypeInterpreter=itemStack -> {
    IAlleleSpecies species=Genome.getSpeciesDirectly(BeeManager.beeRoot,itemStack);
    return species == null ? ISubtypeRegistry.ISubtypeInterpreter.NONE : species.getUID();
  }
;
  subtypeRegistry.registerSubtypeInterpreter(items.beeDroneGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beePrincessGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beeQueenGE,beeSubtypeInterpreter);
}",0.913157894736842
63562,"@Override public void register(IModRegistry registry){
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.frameImpregnated,items.frameProven,items.frameUntreated);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.apiaristBoots,items.apiaristChest,items.apiaristHat,items.apiaristLegs);
  JeiUtil.addDescription(registry,items.habitatLocator,items.scoop,items.imprinter);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.APICULTURE))) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.frameImpregnated,items.frameProven,items.frameUntreated);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.apiaristBoots,items.apiaristChest,items.apiaristHat,items.apiaristLegs);
  JeiUtil.addDescription(registry,items.habitatLocator,items.scoop,items.imprinter);
}",0.8802177858439202
63563,"@Override public void registerCategories(IRecipeCategoryRegistration registry){
  IGuiHelper guiHelper=registry.getJeiHelpers().getGuiHelper();
  registry.addRecipeCategories(new CharcoalPileWallCategory(guiHelper));
}","@Override public void registerCategories(IRecipeCategoryRegistration registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.CHARCOAL))) {
    return;
  }
  IGuiHelper guiHelper=registry.getJeiHelpers().getGuiHelper();
  registry.addRecipeCategories(new CharcoalPileWallCategory(guiHelper));
}",0.7703180212014135
63564,"@Override public void register(IModRegistry registry){
  registry.handleRecipes(CharcoalPileWall.class,CharcoalPileWallWrapper::new,RECIPE_UID);
  registry.addRecipes(TreeManager.pileWalls,RECIPE_UID);
  registry.addRecipeCatalyst(new ItemStack(ModuleCharcoal.getBlocks().woodPile),RECIPE_UID);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.CHARCOAL))) {
    return;
  }
  registry.handleRecipes(CharcoalPileWall.class,CharcoalPileWallWrapper::new,RECIPE_UID);
  registry.addRecipes(TreeManager.pileWalls,RECIPE_UID);
  registry.addRecipeCatalyst(new ItemStack(ModuleCharcoal.getBlocks().woodPile),RECIPE_UID);
}",0.8199445983379502
63565,"@Override public void register(IModRegistry registry){
  ItemRegistryArboriculture items=ModuleArboriculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,items.grafter,items.grafterProven);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.ARBORICULTURE))) {
    return;
  }
  ItemRegistryArboriculture items=ModuleArboriculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,items.grafter,items.grafterProven);
}",0.7723440134907251
63566,"@Override public void register(IModRegistry registry){
  BlockRegistryMail blocks=ModuleMail.getBlocks();
  JeiUtil.addDescription(registry,blocks.mailbox,blocks.stampCollector,blocks.tradeStation);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.MAIL))) {
    return;
  }
  BlockRegistryMail blocks=ModuleMail.getBlocks();
  JeiUtil.addDescription(registry,blocks.mailbox,blocks.stampCollector,blocks.tradeStation);
}",0.7604562737642585
63567,"@Override public void register(IModRegistry registry){
  ItemRegistryBackpacks items=ModuleBackpacks.getItems();
  JeiUtil.addDescription(registry,""String_Node_Str"",items.minerBackpack,items.minerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.diggerBackpack,items.diggerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.foresterBackpack,items.foresterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.hunterBackpack,items.hunterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.adventurerBackpack,items.adventurerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.builderBackpack,items.builderBackpackT2);
  JeiUtil.addDescription(registry,items.apiaristBackpack,items.lepidopteristBackpack);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.BACKPACKS))) {
    return;
  }
  ItemRegistryBackpacks items=ModuleBackpacks.getItems();
  JeiUtil.addDescription(registry,""String_Node_Str"",items.minerBackpack,items.minerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.diggerBackpack,items.diggerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.foresterBackpack,items.foresterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.hunterBackpack,items.hunterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.adventurerBackpack,items.adventurerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.builderBackpack,items.builderBackpackT2);
  JeiUtil.addDescription(registry,items.apiaristBackpack,items.lepidopteristBackpack);
}",0.924408540103866
63568,"@Override public void registerItemSubtypes(ISubtypeRegistry subtypeRegistry){
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  ISubtypeRegistry.ISubtypeInterpreter beeSubtypeInterpreter=itemStack -> {
    IAlleleSpecies species=Genome.getSpeciesDirectly(BeeManager.beeRoot,itemStack);
    return species == null ? ISubtypeRegistry.ISubtypeInterpreter.NONE : species.getUID();
  }
;
  subtypeRegistry.registerSubtypeInterpreter(items.beeDroneGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beePrincessGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beeQueenGE,beeSubtypeInterpreter);
}","@Override public void registerItemSubtypes(ISubtypeRegistry subtypeRegistry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.APICULTURE))) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  ISubtypeRegistry.ISubtypeInterpreter beeSubtypeInterpreter=itemStack -> {
    IAlleleSpecies species=Genome.getSpeciesDirectly(BeeManager.beeRoot,itemStack);
    return species == null ? ISubtypeRegistry.ISubtypeInterpreter.NONE : species.getUID();
  }
;
  subtypeRegistry.registerSubtypeInterpreter(items.beeDroneGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beePrincessGE,beeSubtypeInterpreter);
  subtypeRegistry.registerSubtypeInterpreter(items.beeQueenGE,beeSubtypeInterpreter);
}",0.913157894736842
63569,"@Override public void register(IModRegistry registry){
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.frameImpregnated,items.frameProven,items.frameUntreated);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.apiaristBoots,items.apiaristChest,items.apiaristHat,items.apiaristLegs);
  JeiUtil.addDescription(registry,items.habitatLocator,items.scoop,items.imprinter);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.APICULTURE))) {
    return;
  }
  ItemRegistryApiculture items=ModuleApiculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.frameImpregnated,items.frameProven,items.frameUntreated);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.apiaristBoots,items.apiaristChest,items.apiaristHat,items.apiaristLegs);
  JeiUtil.addDescription(registry,items.habitatLocator,items.scoop,items.imprinter);
}",0.8802177858439202
63570,"@Override public void registerCategories(IRecipeCategoryRegistration registry){
  IGuiHelper guiHelper=registry.getJeiHelpers().getGuiHelper();
  registry.addRecipeCategories(new CharcoalPileWallCategory(guiHelper));
}","@Override public void registerCategories(IRecipeCategoryRegistration registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.CHARCOAL))) {
    return;
  }
  IGuiHelper guiHelper=registry.getJeiHelpers().getGuiHelper();
  registry.addRecipeCategories(new CharcoalPileWallCategory(guiHelper));
}",0.7703180212014135
63571,"@Override public void register(IModRegistry registry){
  registry.handleRecipes(CharcoalPileWall.class,CharcoalPileWallWrapper::new,RECIPE_UID);
  registry.addRecipes(TreeManager.pileWalls,RECIPE_UID);
  registry.addRecipeCatalyst(new ItemStack(ModuleCharcoal.getBlocks().woodPile),RECIPE_UID);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.CHARCOAL))) {
    return;
  }
  registry.handleRecipes(CharcoalPileWall.class,CharcoalPileWallWrapper::new,RECIPE_UID);
  registry.addRecipes(TreeManager.pileWalls,RECIPE_UID);
  registry.addRecipeCatalyst(new ItemStack(ModuleCharcoal.getBlocks().woodPile),RECIPE_UID);
}",0.8199445983379502
63572,"@Override public void register(IModRegistry registry){
  ItemRegistryArboriculture items=ModuleArboriculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,items.grafter,items.grafterProven);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.ARBORICULTURE))) {
    return;
  }
  ItemRegistryArboriculture items=ModuleArboriculture.getItems();
  Preconditions.checkNotNull(items);
  JeiUtil.addDescription(registry,items.grafter,items.grafterProven);
}",0.7723440134907251
63573,"@Override public void register(IModRegistry registry){
  BlockRegistryMail blocks=ModuleMail.getBlocks();
  JeiUtil.addDescription(registry,blocks.mailbox,blocks.stampCollector,blocks.tradeStation);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.MAIL))) {
    return;
  }
  BlockRegistryMail blocks=ModuleMail.getBlocks();
  JeiUtil.addDescription(registry,blocks.mailbox,blocks.stampCollector,blocks.tradeStation);
}",0.7604562737642585
63574,"@Override public void register(IModRegistry registry){
  ItemRegistryBackpacks items=ModuleBackpacks.getItems();
  JeiUtil.addDescription(registry,""String_Node_Str"",items.minerBackpack,items.minerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.diggerBackpack,items.diggerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.foresterBackpack,items.foresterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.hunterBackpack,items.hunterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.adventurerBackpack,items.adventurerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.builderBackpack,items.builderBackpackT2);
  JeiUtil.addDescription(registry,items.apiaristBackpack,items.lepidopteristBackpack);
}","@Override public void register(IModRegistry registry){
  if (!ForestryAPI.enabledModules.contains(new ResourceLocation(Constants.MOD_ID,ForestryModuleUids.BACKPACKS))) {
    return;
  }
  ItemRegistryBackpacks items=ModuleBackpacks.getItems();
  JeiUtil.addDescription(registry,""String_Node_Str"",items.minerBackpack,items.minerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.diggerBackpack,items.diggerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.foresterBackpack,items.foresterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.hunterBackpack,items.hunterBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.adventurerBackpack,items.adventurerBackpackT2);
  JeiUtil.addDescription(registry,""String_Node_Str"",items.builderBackpack,items.builderBackpackT2);
  JeiUtil.addDescription(registry,items.apiaristBackpack,items.lepidopteristBackpack);
}",0.924408540103866
63575,"@Override public void registerFilter(IFilterRuleType rule){
  filterByName.put(rule.getUID(),rule);
  filterIDByName.put(rule.getUID(),ids++);
  filterByID.put(ids - 1,rule);
}","@Override public void registerFilter(IFilterRuleType rule){
  if (!filterByID.isEmpty()) {
    return;
  }
  filterByName.put(rule.getUID(),rule);
}",0.6234567901234568
63576,"@Override public void doInit(){
  GameRegistry.registerTileEntity(TileGeneticFilter.class,""String_Node_Str"");
}","@Override public void doInit(){
  GameRegistry.registerTileEntity(TileGeneticFilter.class,""String_Node_Str"");
  ((FilterRegistry)AlleleManager.filterRegistry).init();
}",0.7956989247311828
63577,"@Nonnull public FluidStack getFluidStack(){
  return fluidStack;
}","@Nullable public FluidStack getFluidStack(){
  return fluidStack;
}",0.9473684210526316
63578,"public TankRenderInfo(@Nonnull FluidStack fluidStack,@Nonnull EnumTankLevel level){
  this.fluidStack=fluidStack;
  this.level=level;
}","public TankRenderInfo(@Nullable FluidStack fluidStack,@Nonnull EnumTankLevel level){
  this.fluidStack=fluidStack;
  this.level=level;
}",0.974169741697417
63579,"@Override public void registerRecipes(){
  ItemElectronTube electronTube=PluginCore.items.tubes;
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.COPPER,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.TIN,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.BRONZE,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.IRON,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.GOLD,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.DIAMOND,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.OBSIDIAN,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',Blocks.OBSIDIAN});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.BLAZE,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',Items.BLAZE_POWDER});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.EMERALD,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.APATITE,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.LAPIS,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',new ItemStack(Items.DYE,1,4)});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.ENDER,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',new ItemStack(Items.ENDER_EYE,1,0),'X',new ItemStack(Blocks.END_STONE,1,0)});
  String[] dyes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (ForestryAPI.enabledPlugins.contains(ForestryPluginUids.APICULTURE)) {
    ItemRegistryApiculture beeItems=PluginApiculture.items;
    FluidStack liquidGlass=Fluids.GLASS.getFluid(Fluid.BUCKET_VOLUME);
    FluidStack liquidGlassX4=Fluids.GLASS.getFluid(Fluid.BUCKET_VOLUME * 4);
    for (int i=0; i < 16; i++) {
      RecipeManagers.fabricatorManager.addRecipe(beeItems.waxCast.getWildcard(),liquidGlass,new ItemStack(Blocks.STAINED_GLASS,4,15 - i),new Object[]{""String_Node_Str"",""String_Node_Str"",'#',dyes[i],'X',beeItems.propolis.getWildcard()});
    }
    RecipeManagers.fabricatorManager.addRecipe(beeItems.waxCast.getWildcard(),liquidGlassX4,new ItemStack(Blocks.GLASS,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',beeItems.propolis.getWildcard()});
  }
  int appleMulchAmount=ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str"");
  int appleJuiceAmount=ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str"");
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.APPLE)},Fluids.JUICE.getFluid(appleJuiceAmount),PluginCore.items.mulch.getItemStack(),appleMulchAmount);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.CARROT)},Fluids.JUICE.getFluid(appleJuiceAmount),PluginCore.items.mulch.getItemStack(),appleMulchAmount);
  int seedOilAmount=ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str"");
  FluidStack seedOil=Fluids.SEED_OIL.getFluid(seedOilAmount);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.WHEAT_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.PUMPKIN_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.MELON_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.BEETROOT_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{PluginCore.items.phosphor.getItemStack(2),new ItemStack(Blocks.COBBLESTONE)},new FluidStack(FluidRegistry.LAVA,1600));
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Blocks.CACTUS)},new FluidStack(FluidRegistry.WATER,500));
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.SNOWBALL),PluginCore.items.craftingMaterial.getIceShard(4)},Fluids.ICE.getFluid(4000));
  RecipeManagers.stillManager.addRecipe(Constants.STILL_DESTILLATION_DURATION,Fluids.BIOMASS.getFluid(Constants.STILL_DESTILLATION_INPUT),Fluids.BIO_ETHANOL.getFluid(Constants.STILL_DESTILLATION_OUTPUT));
  RecipeManagers.moistenerManager.addRecipe(new ItemStack(Items.WHEAT_SEEDS),new ItemStack(Blocks.MYCELIUM),5000);
  RecipeManagers.moistenerManager.addRecipe(new ItemStack(Blocks.COBBLESTONE),new ItemStack(Blocks.MOSSY_COBBLESTONE),20000);
  RecipeManagers.moistenerManager.addRecipe(new ItemStack(Blocks.STONEBRICK),new ItemStack(Blocks.STONEBRICK,1,1),20000);
  for (int i=0; i < 6; i++) {
    RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.SAPLING,1,i),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  }
  RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.CACTUS),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Items.WHEAT),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Items.POTATO),2 * ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Items.REEDS),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.BROWN_MUSHROOM),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.RED_MUSHROOM),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.GLASS),Fluids.GLASS.getFluid(1000),1000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.GLASS_PANE),Fluids.GLASS.getFluid(375),1000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SAND),Fluids.GLASS.getFluid(1000),3000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SAND,1,1),Fluids.GLASS.getFluid(1000),3000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SANDSTONE),Fluids.GLASS.getFluid(4000),4800);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SANDSTONE,1,1),Fluids.GLASS.getFluid(4000),4800);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SANDSTONE,1,2),Fluids.GLASS.getFluid(4000),4800);
  RecipeManagers.carpenterManager.addRecipe(50,Fluids.SEED_OIL.getFluid(250),null,PluginCore.items.impregnatedCasing.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(50,Fluids.SEED_OIL.getFluid(500),null,new ItemStack(PluginCore.blocks.escritoire),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(10,Fluids.SEED_OIL.getFluid(100),null,PluginCore.items.stickImpregnated.getItemStack(2),""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,250),null,PluginCore.items.woodPulp.getItemStack(4),""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,250),null,new ItemStack(Items.PAPER,1),""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,new ItemStack(PluginCore.blocks.humus,9),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',Blocks.DIRT,'X',PluginCore.items.mulch);
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.blocks.bogEarth.get(BlockBogEarth.SoilType.BOG_EARTH,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',Blocks.DIRT,'X',""String_Node_Str"",'Y',PluginCore.items.mulch);
  RecipeManagers.carpenterManager.addRecipe(75,new FluidStack(FluidRegistry.WATER,5000),null,PluginCore.items.hardenedCasing.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  ItemCircuitBoard circuitBoard=PluginCore.items.circuitboards;
  RecipeManagers.carpenterManager.addRecipe(20,new FluidStack(FluidRegistry.WATER,1000),null,ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.BASIC,null,new ICircuit[]{}),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(40,new FluidStack(FluidRegistry.WATER,1000),null,ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.ENHANCED,null,new ICircuit[]{}),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(80,new FluidStack(FluidRegistry.WATER,1000),null,ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.REFINED,null,new ICircuit[]{}),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(80,new FluidStack(FluidRegistry.WATER,1000),null,ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.INTRICATE,null,new ICircuit[]{}),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(40,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.solderingIron.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'B',""String_Node_Str"");
  ItemRegistryApiculture beeItems=PluginApiculture.items;
  if (beeItems != null) {
    RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.iodineCharge.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',beeItems.pollenCluster.getWildcard(),'X',Items.GUNPOWDER,'Y',PluginFluids.items.canEmpty,'Z',beeItems.honeyDrop);
    RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.craftingMaterial.getDissipationCharge(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',beeItems.royalJelly,'X',Items.GUNPOWDER,'Y',PluginFluids.items.canEmpty,'Z',beeItems.honeydew);
  }
  RecipeManagers.carpenterManager.addRecipe(100,null,new ItemStack(Items.ENDER_PEARL,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',PluginCore.items.craftingMaterial.getPulsatingMesh());
  RecipeManagers.carpenterManager.addRecipe(10,new FluidStack(FluidRegistry.WATER,500),null,PluginCore.items.craftingMaterial.getWovenSilk(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',PluginCore.items.craftingMaterial.getSilkWisp());
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.carton.getItemStack(2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(20,null,PluginCore.items.carton.getItemStack(),PluginCore.items.kitPickaxe.getItemStack(),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.carpenterManager.addRecipe(20,null,PluginCore.items.carton.getItemStack(),PluginCore.items.kitShovel.getItemStack(),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  ItemStack ingotBronze=PluginCore.items.ingotBronze.copy();
  ingotBronze.stackSize=2;
  RecipeManagers.carpenterManager.addRecipe(null,ingotBronze,""String_Node_Str"",'#',PluginCore.items.brokenBronzePickaxe);
  ingotBronze=ingotBronze.copy();
  ingotBronze.stackSize=1;
  RecipeManagers.carpenterManager.addRecipe(null,ingotBronze,""String_Node_Str"",'#',PluginCore.items.brokenBronzeShovel);
  if (ForestryAPI.enabledPlugins.contains(ForestryPluginUids.STORAGE)) {
    PluginStorage.createCrateRecipes();
  }
  ICircuitLayout layout=ChipsetManager.circuitRegistry.getLayout(""String_Node_Str"");
  ChipsetManager.solderManager.addRecipe(layout,PluginCore.items.tubes.get(EnumElectronTube.EMERALD,1),Circuit.machineSpeedUpgrade1);
  ChipsetManager.solderManager.addRecipe(layout,PluginCore.items.tubes.get(EnumElectronTube.BLAZE,1),Circuit.machineSpeedUpgrade2);
  ChipsetManager.solderManager.addRecipe(layout,PluginCore.items.tubes.get(EnumElectronTube.GOLD,1),Circuit.machineEfficiencyUpgrade1);
  RecipeUtil.addRecipe(blocks.bottler,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',PluginFluids.items.canEmpty,'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.carpenter,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.centrifuge,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.fermenter,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.moistener,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.squeezer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.still,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.rainmaker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.hardenedCasing);
  RecipeUtil.addRecipe(blocks.fabricator,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing,'Z',""String_Node_Str"");
  RecipeUtil.addRecipe(blocks.raintank,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.worktable,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',Items.BOOK,'W',""String_Node_Str"",'C',""String_Node_Str"");
}","@Override public void registerRecipes(){
  ItemElectronTube electronTube=PluginCore.items.tubes;
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.COPPER,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.TIN,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.BRONZE,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.IRON,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.GOLD,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.DIAMOND,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.OBSIDIAN,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',Blocks.OBSIDIAN});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.BLAZE,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',Items.BLAZE_POWDER});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.EMERALD,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.APATITE,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.LAPIS,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',new ItemStack(Items.DYE,1,4)});
  RecipeManagers.fabricatorManager.addRecipe(null,Fluids.GLASS.getFluid(500),electronTube.get(EnumElectronTube.ENDER,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',new ItemStack(Items.ENDER_EYE,1,0),'X',new ItemStack(Blocks.END_STONE,1,0)});
  String[] dyes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (ForestryAPI.enabledPlugins.contains(ForestryPluginUids.APICULTURE)) {
    ItemRegistryApiculture beeItems=PluginApiculture.items;
    FluidStack liquidGlass=Fluids.GLASS.getFluid(Fluid.BUCKET_VOLUME);
    FluidStack liquidGlassX4=Fluids.GLASS.getFluid(Fluid.BUCKET_VOLUME * 4);
    for (int i=0; i < 16; i++) {
      RecipeManagers.fabricatorManager.addRecipe(beeItems.waxCast.getWildcard(),liquidGlass,new ItemStack(Blocks.STAINED_GLASS,4,15 - i),new Object[]{""String_Node_Str"",""String_Node_Str"",'#',dyes[i],'X',beeItems.propolis.getWildcard()});
    }
    RecipeManagers.fabricatorManager.addRecipe(beeItems.waxCast.getWildcard(),liquidGlassX4,new ItemStack(Blocks.GLASS,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',beeItems.propolis.getWildcard()});
  }
  int appleMulchAmount=ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str"");
  int appleJuiceAmount=ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str"");
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.APPLE)},Fluids.JUICE.getFluid(appleJuiceAmount),PluginCore.items.mulch.getItemStack(),appleMulchAmount);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.CARROT)},Fluids.JUICE.getFluid(appleJuiceAmount),PluginCore.items.mulch.getItemStack(),appleMulchAmount);
  int seedOilAmount=ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str"");
  FluidStack seedOil=Fluids.SEED_OIL.getFluid(seedOilAmount);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.WHEAT_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.PUMPKIN_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.MELON_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.BEETROOT_SEEDS)},seedOil);
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{PluginCore.items.phosphor.getItemStack(2),new ItemStack(Blocks.COBBLESTONE)},new FluidStack(FluidRegistry.LAVA,1600));
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Blocks.CACTUS)},new FluidStack(FluidRegistry.WATER,500));
  RecipeManagers.squeezerManager.addRecipe(10,new ItemStack[]{new ItemStack(Items.SNOWBALL),PluginCore.items.craftingMaterial.getIceShard(4)},Fluids.ICE.getFluid(4000));
  RecipeManagers.stillManager.addRecipe(Constants.STILL_DESTILLATION_DURATION,Fluids.BIOMASS.getFluid(Constants.STILL_DESTILLATION_INPUT),Fluids.BIO_ETHANOL.getFluid(Constants.STILL_DESTILLATION_OUTPUT));
  RecipeManagers.moistenerManager.addRecipe(new ItemStack(Items.WHEAT_SEEDS),new ItemStack(Blocks.MYCELIUM),5000);
  RecipeManagers.moistenerManager.addRecipe(new ItemStack(Blocks.COBBLESTONE),new ItemStack(Blocks.MOSSY_COBBLESTONE),20000);
  RecipeManagers.moistenerManager.addRecipe(new ItemStack(Blocks.STONEBRICK),new ItemStack(Blocks.STONEBRICK,1,1),20000);
  for (int i=0; i < 6; i++) {
    RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.SAPLING,1,i),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  }
  RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.CACTUS),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Items.WHEAT),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Items.POTATO),2 * ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Items.REEDS),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.BROWN_MUSHROOM),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeUtil.addFermenterRecipes(new ItemStack(Blocks.RED_MUSHROOM),ForestryAPI.activeMode.getIntegerSetting(""String_Node_Str""),Fluids.BIOMASS);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.GLASS),Fluids.GLASS.getFluid(1000),1000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.GLASS_PANE),Fluids.GLASS.getFluid(375),1000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SAND),Fluids.GLASS.getFluid(1000),3000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SAND,1,1),Fluids.GLASS.getFluid(1000),3000);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SANDSTONE),Fluids.GLASS.getFluid(4000),4800);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SANDSTONE,1,1),Fluids.GLASS.getFluid(4000),4800);
  RecipeManagers.fabricatorSmeltingManager.addSmelting(new ItemStack(Blocks.SANDSTONE,1,2),Fluids.GLASS.getFluid(4000),4800);
  RecipeManagers.carpenterManager.addRecipe(50,Fluids.SEED_OIL.getFluid(250),null,PluginCore.items.impregnatedCasing.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(50,Fluids.SEED_OIL.getFluid(500),null,new ItemStack(PluginCore.blocks.escritoire),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(10,Fluids.SEED_OIL.getFluid(100),null,PluginCore.items.stickImpregnated.getItemStack(2),""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,250),null,PluginCore.items.woodPulp.getItemStack(4),""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,250),null,new ItemStack(Items.PAPER,1),""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,new ItemStack(PluginCore.blocks.humus,9),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',Blocks.DIRT,'X',PluginCore.items.mulch);
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.blocks.bogEarth.get(BlockBogEarth.SoilType.BOG_EARTH,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',Blocks.DIRT,'X',""String_Node_Str"",'Y',PluginCore.items.mulch);
  RecipeManagers.carpenterManager.addRecipe(75,new FluidStack(FluidRegistry.WATER,5000),null,PluginCore.items.hardenedCasing.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  ItemStack basicCircuitboard=ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.BASIC,null,new ICircuit[]{});
  ItemStack enhancedCircuitboard=ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.ENHANCED,null,new ICircuit[]{});
  ItemStack refinedCircuitboard=ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.REFINED,null,new ICircuit[]{});
  ItemStack intricateCircuitboard=ItemCircuitBoard.createCircuitboard(EnumCircuitBoardType.INTRICATE,null,new ICircuit[]{});
  RecipeManagers.carpenterManager.addRecipe(20,new FluidStack(FluidRegistry.WATER,1000),null,basicCircuitboard,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(40,new FluidStack(FluidRegistry.WATER,1000),null,enhancedCircuitboard,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(80,new FluidStack(FluidRegistry.WATER,1000),null,refinedCircuitboard,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(80,new FluidStack(FluidRegistry.WATER,1000),null,intricateCircuitboard,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'R',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(40,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.solderingIron.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'B',""String_Node_Str"");
  ItemRegistryApiculture beeItems=PluginApiculture.items;
  if (beeItems != null) {
    RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.iodineCharge.getItemStack(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',beeItems.pollenCluster.getWildcard(),'X',Items.GUNPOWDER,'Y',PluginFluids.items.canEmpty,'Z',beeItems.honeyDrop);
    RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.craftingMaterial.getDissipationCharge(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',beeItems.royalJelly,'X',Items.GUNPOWDER,'Y',PluginFluids.items.canEmpty,'Z',beeItems.honeydew);
  }
  RecipeManagers.carpenterManager.addRecipe(100,null,new ItemStack(Items.ENDER_PEARL,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',PluginCore.items.craftingMaterial.getPulsatingMesh());
  RecipeManagers.carpenterManager.addRecipe(10,new FluidStack(FluidRegistry.WATER,500),null,PluginCore.items.craftingMaterial.getWovenSilk(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',PluginCore.items.craftingMaterial.getSilkWisp());
  RecipeManagers.carpenterManager.addRecipe(5,new FluidStack(FluidRegistry.WATER,1000),null,PluginCore.items.carton.getItemStack(2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"");
  RecipeManagers.carpenterManager.addRecipe(20,null,PluginCore.items.carton.getItemStack(),PluginCore.items.kitPickaxe.getItemStack(),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  RecipeManagers.carpenterManager.addRecipe(20,null,PluginCore.items.carton.getItemStack(),PluginCore.items.kitShovel.getItemStack(),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str""});
  ItemStack ingotBronze=PluginCore.items.ingotBronze.copy();
  ingotBronze.stackSize=2;
  RecipeManagers.carpenterManager.addRecipe(null,ingotBronze,""String_Node_Str"",'#',PluginCore.items.brokenBronzePickaxe);
  ingotBronze=ingotBronze.copy();
  ingotBronze.stackSize=1;
  RecipeManagers.carpenterManager.addRecipe(null,ingotBronze,""String_Node_Str"",'#',PluginCore.items.brokenBronzeShovel);
  if (ForestryAPI.enabledPlugins.contains(ForestryPluginUids.STORAGE)) {
    PluginStorage.createCrateRecipes();
  }
  ICircuitLayout layout=ChipsetManager.circuitRegistry.getLayout(""String_Node_Str"");
  ChipsetManager.solderManager.addRecipe(layout,PluginCore.items.tubes.get(EnumElectronTube.EMERALD,1),Circuit.machineSpeedUpgrade1);
  ChipsetManager.solderManager.addRecipe(layout,PluginCore.items.tubes.get(EnumElectronTube.BLAZE,1),Circuit.machineSpeedUpgrade2);
  ChipsetManager.solderManager.addRecipe(layout,PluginCore.items.tubes.get(EnumElectronTube.GOLD,1),Circuit.machineEfficiencyUpgrade1);
  RecipeUtil.addRecipe(blocks.bottler,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',PluginFluids.items.canEmpty,'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.carpenter,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.centrifuge,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.fermenter,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.moistener,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.squeezer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.still,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.rainmaker,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.hardenedCasing);
  RecipeUtil.addRecipe(blocks.fabricator,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing,'Z',""String_Node_Str"");
  RecipeUtil.addRecipe(blocks.raintank,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',""String_Node_Str"",'X',""String_Node_Str"",'Y',PluginCore.items.sturdyCasing);
  RecipeUtil.addRecipe(blocks.worktable,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',Items.BOOK,'W',""String_Node_Str"",'C',""String_Node_Str"");
}",0.9753945569777556
63580,"public static void createLoot(){
  cocoonSilk.getCocoonLoot().put(PluginCore.items.craftingMaterial.getSilkWisp(),0.75F);
  cocoonSilk.getCocoonLoot().put(PluginCore.items.craftingMaterial.getSilkWisp(),0.25F);
}","public static void createLoot(){
  cocoonDefault.getCocoonLoot().put(new ItemStack(Items.STRING,2),1F);
  cocoonDefault.getCocoonLoot().put(new ItemStack(Items.STRING),0.75F);
  cocoonDefault.getCocoonLoot().put(new ItemStack(Items.STRING,3),0.25F);
  cocoonSilk.getCocoonLoot().put(new ItemStack(PluginCore.items.craftingMaterial,3,2),0.75F);
  cocoonSilk.getCocoonLoot().put(new ItemStack(PluginCore.items.craftingMaterial,2,2),0.25F);
}",0.2211981566820276
63581,"@Override public EnumActionResult onItemUse(ItemStack stack,EntityPlayer playerIn,World worldIn,final BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){
  if (worldIn.isRemote) {
    return EnumActionResult.PASS;
  }
  IButterfly flutter=ButterflyManager.butterflyRoot.getMember(stack);
  if (flutter == null) {
    return EnumActionResult.PASS;
  }
  TileEntity tileEntity=worldIn.getTileEntity(pos);
  IBlockState blockState=worldIn.getBlockState(pos);
  if (type == EnumFlutterType.COCOON) {
    int age=stack.getTagCompound().getInteger(NBT_AGE);
    int yShift;
    if (!BlockUtil.isReplaceableBlock(blockState,worldIn,pos)) {
      if (!worldIn.isAirBlock(pos.down())) {
        return EnumActionResult.PASS;
      }
      yShift=1;
    }
 else {
      yShift=0;
    }
    BlockPos posS=pos.add(0,-yShift,0);
    IButterflyNursery nursery=null;
    if (tileEntity instanceof IButterflyNursery) {
      nursery=(IButterflyNursery)tileEntity;
    }
 else {
      ITree treeLeave=GeneticsUtil.getPollen(worldIn,pos);
      if (treeLeave != null) {
        treeLeave.setLeaves(worldIn,playerIn.getGameProfile(),pos);
        nursery=(IButterflyNursery)tileEntity;
      }
    }
    if (nursery != null) {
      if (nursery.canNurse(flutter)) {
        nursery.setCaterpillar(flutter);
        if (ButterflyManager.butterflyRoot.plantCocoon(worldIn,nursery,playerIn.getGameProfile(),age)) {
          PacketFXSignal packet=new PacketFXSignal(PacketFXSignal.SoundFXType.BLOCK_PLACE,pos,worldIn.getBlockState(posS));
          Proxies.net.sendNetworkPacket(packet,worldIn);
          if (!playerIn.capabilities.isCreativeMode) {
            stack.stackSize--;
          }
          nursery.setCaterpillar(null);
          return EnumActionResult.SUCCESS;
        }
 else {
          nursery.setCaterpillar(null);
          return EnumActionResult.PASS;
        }
      }
    }
    return EnumActionResult.PASS;
  }
 else   if (type == EnumFlutterType.CATERPILLAR) {
    if (!(tileEntity instanceof IButterflyNursery)) {
      return EnumActionResult.PASS;
    }
    IButterflyNursery pollinatable=(IButterflyNursery)tileEntity;
    if (!pollinatable.canNurse(flutter)) {
      return EnumActionResult.PASS;
    }
    pollinatable.setCaterpillar(flutter);
    PacketFXSignal packet=new PacketFXSignal(PacketFXSignal.VisualFXType.BLOCK_BREAK,PacketFXSignal.SoundFXType.BLOCK_BREAK,pos,blockState);
    Proxies.net.sendNetworkPacket(packet,worldIn);
    if (!playerIn.capabilities.isCreativeMode) {
      stack.stackSize--;
    }
    return EnumActionResult.SUCCESS;
  }
 else {
    return EnumActionResult.PASS;
  }
}","@Override public EnumActionResult onItemUse(ItemStack stack,EntityPlayer playerIn,World worldIn,final BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){
  if (worldIn.isRemote) {
    return EnumActionResult.PASS;
  }
  IButterfly flutter=ButterflyManager.butterflyRoot.getMember(stack);
  if (flutter == null) {
    return EnumActionResult.PASS;
  }
  TileEntity tileEntity=worldIn.getTileEntity(pos);
  IBlockState blockState=worldIn.getBlockState(pos);
  if (type == EnumFlutterType.COCOON) {
    int age=stack.getTagCompound().getInteger(NBT_AGE);
    int yShift;
    if (!BlockUtil.isReplaceableBlock(blockState,worldIn,pos)) {
      if (!worldIn.isAirBlock(pos.down())) {
        return EnumActionResult.PASS;
      }
      yShift=1;
    }
 else {
      yShift=0;
    }
    BlockPos posS=pos.add(0,-yShift,0);
    IButterflyNursery nursery=null;
    if (tileEntity instanceof IButterflyNursery) {
      nursery=(IButterflyNursery)tileEntity;
    }
 else {
      ITree treeLeave=GeneticsUtil.getPollen(worldIn,pos);
      if (treeLeave != null) {
        if (treeLeave.setLeaves(worldIn,playerIn.getGameProfile(),pos)) {
          nursery=(IButterflyNursery)worldIn.getTileEntity(pos);
        }
      }
    }
    if (nursery != null) {
      if (nursery.canNurse(flutter)) {
        nursery.setCaterpillar(flutter);
        if (ButterflyManager.butterflyRoot.plantCocoon(worldIn,nursery,playerIn.getGameProfile(),age)) {
          PacketFXSignal packet=new PacketFXSignal(PacketFXSignal.SoundFXType.BLOCK_PLACE,pos,worldIn.getBlockState(posS));
          Proxies.net.sendNetworkPacket(packet,worldIn);
          if (!playerIn.capabilities.isCreativeMode) {
            stack.stackSize--;
          }
          nursery.setCaterpillar(null);
          return EnumActionResult.SUCCESS;
        }
 else {
          nursery.setCaterpillar(null);
          return EnumActionResult.PASS;
        }
      }
    }
    return EnumActionResult.PASS;
  }
 else   if (type == EnumFlutterType.CATERPILLAR) {
    if (!(tileEntity instanceof IButterflyNursery)) {
      return EnumActionResult.PASS;
    }
    IButterflyNursery pollinatable=(IButterflyNursery)tileEntity;
    if (!pollinatable.canNurse(flutter)) {
      return EnumActionResult.PASS;
    }
    pollinatable.setCaterpillar(flutter);
    PacketFXSignal packet=new PacketFXSignal(PacketFXSignal.VisualFXType.BLOCK_BREAK,PacketFXSignal.SoundFXType.BLOCK_BREAK,pos,blockState);
    Proxies.net.sendNetworkPacket(packet,worldIn);
    if (!playerIn.capabilities.isCreativeMode) {
      stack.stackSize--;
    }
    return EnumActionResult.SUCCESS;
  }
 else {
    return EnumActionResult.PASS;
  }
}",0.9887218045112782
63582,"@Nonnull Map<Integer,List<IClimateSource>> getSources();","@Nonnull Map<Integer,Map<BlockPos,IClimateSource>> getSources();",0.8666666666666667
63583,"@Override public <G extends IGreenhouseController & IGreenhouseHousing>boolean canWork(G greenhouse,boolean canWork){
  return true;
}","@Override public boolean canWork(IGreenhouseController greenhouse,boolean canWork){
  return true;
}",0.7350427350427351
63584,"@SubscribeEvent public void onWorldTick(TickEvent.WorldTickEvent event){
  int dim=event.world.provider.getDimension();
  if (event.phase == TickEvent.Phase.END) {
    if (!serverTicks.containsKey(Integer.valueOf(dim))) {
      serverTicks.put(Integer.valueOf(dim),1);
    }
    int ticks=serverTicks.get(Integer.valueOf(dim));
    if (ticks % 20 == 0) {
      for (      IClimateRegion region : ForestryAPI.climateManager.getRegions().get(Integer.valueOf(dim))) {
        region.updateClimate();
      }
    }
    for (    IClimateSource source : ForestryAPI.climateManager.getSources().get(Integer.valueOf(dim))) {
      source.changeClimate(ticks,ForestryAPI.climateManager.getRegionForPos(event.world,source.getPos()));
    }
    serverTicks.put(Integer.valueOf(dim),ticks + 1);
  }
}","@SubscribeEvent public void onWorldTick(TickEvent.WorldTickEvent event){
  int dim=event.world.provider.getDimension();
  if (event.phase == TickEvent.Phase.END) {
    if (!serverTicks.containsKey(Integer.valueOf(dim))) {
      serverTicks.put(Integer.valueOf(dim),1);
    }
    int ticks=serverTicks.get(Integer.valueOf(dim));
    if (ticks % 20 == 0) {
      for (      IClimateRegion region : ForestryAPI.climateManager.getRegions().get(Integer.valueOf(dim))) {
        region.updateClimate();
      }
    }
    for (    IClimateSource source : ForestryAPI.climateManager.getSources().get(Integer.valueOf(dim)).values()) {
      source.changeClimate(ticks,ForestryAPI.climateManager.getRegionForPos(event.world,source.getPos()));
    }
    serverTicks.put(Integer.valueOf(dim),ticks + 1);
  }
}",0.9943217665615142
63585,"@Override public <G extends IGreenhouseController & IGreenhouseHousing>boolean canWork(G greenhouse,boolean canWork){
  return canWork && !hasRedstoneSignal();
}","@Override public boolean canWork(IGreenhouseController greenhouse,boolean canWork){
  return canWork && !hasRedstoneSignal();
}",0.7847222222222222
63586,"@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  ParticleSnow.sprites=new TextureAtlasSprite[3];
  for (int i=0; i < ParticleSnow.sprites.length; i++) {
    ParticleSnow.sprites[i]=event.getMap().registerSprite(new ResourceLocation(""String_Node_Str"" + (i + 1)));
  }
  beeSprite=event.getMap().registerSprite(new ResourceLocation(""String_Node_Str""));
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  ParticleSnow.sprites=new TextureAtlasSprite[3];
  for (int i=0; i < ParticleSnow.sprites.length; i++) {
    ParticleSnow.sprites[i]=event.getMap().registerSprite(new ResourceLocation(""String_Node_Str"" + (i + 1)));
  }
  ProxyApicultureClient.beeSprite=event.getMap().registerSprite(new ResourceLocation(""String_Node_Str""));
}",0.973170731707317
63587,"public ParticleBeeExplore(World world,Vec3d origin,BlockPos destination,int color){
  super(world,origin.xCoord,origin.yCoord,origin.zCoord,0.0D,0.0D,0.0D);
  setParticleTexture(PluginApiculture.beeSprite);
  this.origin=origin;
  this.motionX=(destination.getX() + 0.5 - this.posX) * 0.015;
  this.motionY=(destination.getY() + 0.5 - this.posY) * 0.015;
  this.motionZ=(destination.getZ() + 0.5 - this.posZ) * 0.015;
  particleRed=(color >> 16 & 255) / 255.0F;
  particleGreen=(color >> 8 & 255) / 255.0F;
  particleBlue=(color & 255) / 255.0F;
  this.setSize(0.1F,0.1F);
  this.particleScale*=0.2F;
  this.particleMaxAge=(int)(80.0D / (Math.random() * 0.8D + 0.2D));
  this.motionX*=0.9D;
  this.motionY*=0.015D;
  this.motionZ*=0.9D;
}","public ParticleBeeExplore(World world,Vec3d origin,BlockPos destination,int color){
  super(world,origin.xCoord,origin.yCoord,origin.zCoord,0.0D,0.0D,0.0D);
  setParticleTexture(ProxyApicultureClient.beeSprite);
  this.origin=origin;
  this.motionX=(destination.getX() + 0.5 - this.posX) * 0.015;
  this.motionY=(destination.getY() + 0.5 - this.posY) * 0.015;
  this.motionZ=(destination.getZ() + 0.5 - this.posZ) * 0.015;
  particleRed=(color >> 16 & 255) / 255.0F;
  particleGreen=(color >> 8 & 255) / 255.0F;
  particleBlue=(color & 255) / 255.0F;
  this.setSize(0.1F,0.1F);
  this.particleScale*=0.2F;
  this.particleMaxAge=(int)(80.0D / (Math.random() * 0.8D + 0.2D));
  this.motionX*=0.9D;
  this.motionY*=0.015D;
  this.motionZ*=0.9D;
}",0.9790681971640784
63588,"public ParticleBeeRoundTrip(World world,Vec3d origin,BlockPos destination,int color){
  super(world,origin.xCoord,origin.yCoord,origin.zCoord,0.0D,0.0D,0.0D);
  setParticleTexture(PluginApiculture.beeSprite);
  this.origin=origin;
  this.destination=destination;
  this.motionX=(destination.getX() + 0.5 - this.posX) * 0.02 + 0.1 * rand.nextFloat();
  this.motionY=(destination.getY() + 0.5 - this.posY) * 0.015 + 0.1 * rand.nextFloat();
  this.motionZ=(destination.getZ() + 0.5 - this.posZ) * 0.02 + 0.1 * rand.nextFloat();
  particleRed=(color >> 16 & 255) / 255.0F;
  particleGreen=(color >> 8 & 255) / 255.0F;
  particleBlue=(color & 255) / 255.0F;
  this.setSize(0.1F,0.1F);
  this.particleScale*=0.2F;
  this.particleMaxAge=(int)(80.0D / (Math.random() * 0.8D + 0.2D));
  this.motionX*=0.9D;
  this.motionY*=0.015D;
  this.motionZ*=0.9D;
}","public ParticleBeeRoundTrip(World world,Vec3d origin,BlockPos destination,int color){
  super(world,origin.xCoord,origin.yCoord,origin.zCoord,0.0D,0.0D,0.0D);
  setParticleTexture(ProxyApicultureClient.beeSprite);
  this.origin=origin;
  this.destination=destination;
  this.motionX=(destination.getX() + 0.5 - this.posX) * 0.02 + 0.1 * rand.nextFloat();
  this.motionY=(destination.getY() + 0.5 - this.posY) * 0.015 + 0.1 * rand.nextFloat();
  this.motionZ=(destination.getZ() + 0.5 - this.posZ) * 0.02 + 0.1 * rand.nextFloat();
  particleRed=(color >> 16 & 255) / 255.0F;
  particleGreen=(color >> 8 & 255) / 255.0F;
  particleBlue=(color & 255) / 255.0F;
  this.setSize(0.1F,0.1F);
  this.particleScale*=0.2F;
  this.particleMaxAge=(int)(80.0D / (Math.random() * 0.8D + 0.2D));
  this.motionX*=0.9D;
  this.motionY*=0.015D;
  this.motionZ*=0.9D;
}",0.9817109144542772
63589,"public ParticleBeeTargetEntity(World world,Vec3d origin,Entity entity,int color){
  super(world,origin.xCoord,origin.yCoord,origin.zCoord,0.0D,0.0D,0.0D);
  setParticleTexture(PluginApiculture.beeSprite);
  this.origin=origin;
  this.entity=entity;
  this.motionX=(entity.posX - this.posX) * 0.015;
  this.motionY=(entity.posY + 1.62F - this.posY) * 0.015;
  this.motionZ=(entity.posZ - this.posZ) * 0.015;
  particleRed=(color >> 16 & 255) / 255.0F;
  particleGreen=(color >> 8 & 255) / 255.0F;
  particleBlue=(color & 255) / 255.0F;
  this.setSize(0.1F,0.1F);
  this.particleScale*=0.2F;
  this.particleMaxAge=(int)(80.0D / (Math.random() * 0.8D + 0.2D));
  this.motionX*=0.9D;
  this.motionY*=0.9D;
  this.motionZ*=0.9D;
}","public ParticleBeeTargetEntity(World world,Vec3d origin,Entity entity,int color){
  super(world,origin.xCoord,origin.yCoord,origin.zCoord,0.0D,0.0D,0.0D);
  setParticleTexture(ProxyApicultureClient.beeSprite);
  this.origin=origin;
  this.entity=entity;
  this.motionX=(entity.posX - this.posX) * 0.015;
  this.motionY=(entity.posY + 1.62F - this.posY) * 0.015;
  this.motionZ=(entity.posZ - this.posZ) * 0.015;
  particleRed=(color >> 16 & 255) / 255.0F;
  particleGreen=(color >> 8 & 255) / 255.0F;
  particleBlue=(color & 255) / 255.0F;
  this.setSize(0.1F,0.1F);
  this.particleScale*=0.2F;
  this.particleMaxAge=(int)(80.0D / (Math.random() * 0.8D + 0.2D));
  this.motionX*=0.9D;
  this.motionY*=0.9D;
  this.motionZ*=0.9D;
}",0.9786941580756012
63590,"@Override public void doInit(){
  super.doInit();
  blocks.analyzer.init();
  blocks.escritoire.init();
  ForestryModEnvWarningCallable.register();
  AlleleHelper.instance.init();
  Proxies.render.initRendering();
}","@Override public void doInit(){
  super.doInit();
  blocks.analyzer.init();
  blocks.escritoire.init();
  AlleleHelper.instance.init();
  Proxies.render.initRendering();
}",0.8860103626943006
63591,"@Override public boolean hasWork(){
  checkRecipe();
  checkFuel();
  boolean hasRecipe=currentRecipe != null;
  boolean hasFuel=fuelBurnTime > 0;
  boolean hasResource=fermentationTime > 0 || getStackInSlot(InventoryFermenter.SLOT_RESOURCE) != null;
  boolean hasFluidResource=resourceTank.canDrain(fuelCurrentFerment);
  boolean hasFluidSpace=true;
  if (hasRecipe) {
    int fermented=Math.min(fermentationTime,fuelCurrentFerment);
    int productAmount=Math.round(fermented * currentRecipe.getModifier() * currentResourceModifier);
    hasFluidSpace=productTank.canFill(currentRecipe.getOutput(),productAmount);
  }
  IErrorLogic errorLogic=getErrorLogic();
  errorLogic.setCondition(!hasRecipe,EnumErrorCode.NO_RECIPE);
  errorLogic.setCondition(!hasFuel,EnumErrorCode.NO_FUEL);
  errorLogic.setCondition(!hasResource,EnumErrorCode.NO_RESOURCE);
  errorLogic.setCondition(!hasFluidResource,EnumErrorCode.NO_RESOURCE_LIQUID);
  errorLogic.setCondition(!hasFluidSpace,EnumErrorCode.NO_SPACE_TANK);
  return hasRecipe && hasFuel && hasResource&& hasFluidResource&& hasFluidSpace;
}","@Override public boolean hasWork(){
  checkRecipe();
  checkFuel();
  int fermented=Math.min(fermentationTime,fuelCurrentFerment);
  boolean hasRecipe=currentRecipe != null;
  boolean hasFuel=fuelBurnTime > 0;
  boolean hasResource=fermentationTime > 0 || getStackInSlot(InventoryFermenter.SLOT_RESOURCE) != null;
  boolean hasFluidResource=resourceTank.canDrain(fermented);
  boolean hasFluidSpace=true;
  if (hasRecipe) {
    int productAmount=Math.round(fermented * currentRecipe.getModifier() * currentResourceModifier);
    hasFluidSpace=productTank.canFill(currentRecipe.getOutput(),productAmount);
  }
  IErrorLogic errorLogic=getErrorLogic();
  errorLogic.setCondition(!hasRecipe,EnumErrorCode.NO_RECIPE);
  errorLogic.setCondition(!hasFuel,EnumErrorCode.NO_FUEL);
  errorLogic.setCondition(!hasResource,EnumErrorCode.NO_RESOURCE);
  errorLogic.setCondition(!hasFluidResource,EnumErrorCode.NO_RESOURCE_LIQUID);
  errorLogic.setCondition(!hasFluidSpace,EnumErrorCode.NO_SPACE_TANK);
  return hasRecipe && hasFuel && hasResource&& hasFluidResource&& hasFluidSpace;
}",0.9290023201856148
63592,"@Override public boolean workCycle(){
  int fermented=Math.min(fermentationTime,fuelCurrentFerment);
  int productAmount=Math.round(fermented * currentRecipe.getModifier() * currentResourceModifier);
  productTank.fill(new FluidStack(currentRecipe.getOutput(),productAmount),true);
  fuelBurnTime--;
  resourceTank.drain(fuelCurrentFerment,true);
  fermentationTime-=this.fuelCurrentFerment;
  if (fermentationTime > 0) {
    return false;
  }
  currentRecipe=null;
  return true;
}","@Override public boolean workCycle(){
  int fermented=Math.min(fermentationTime,fuelCurrentFerment);
  int productAmount=Math.round(fermented * currentRecipe.getModifier() * currentResourceModifier);
  productTank.fill(new FluidStack(currentRecipe.getOutput(),productAmount),true);
  fuelBurnTime--;
  resourceTank.drain(fermented,true);
  fermentationTime-=fermented;
  if (fermentationTime > 0) {
    return false;
  }
  currentRecipe=null;
  return true;
}",0.8416578108395324
63593,"@Override public float getExactHumidity(){
  return getBiome().getRainfall() + tempChange;
}","@Override public float getExactHumidity(){
  return getBiome().getRainfall() + humidChange;
}",0.9621621621621622
63594,"private void render(TemperatureState state,float progress,EnumFacing orientation,double x,double y,double z){
  GlStateManager.pushMatrix();
  GlStateManager.pushAttrib();
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.enableCull();
  GlStateManager.color(1,1,1);
  GlStateManager.translate((float)x,(float)y,(float)z);
  float step;
  if (progress > 0.5) {
    step=5.99F - (progress - 0.5F) * 2F * 5.99F;
  }
 else {
    step=progress * 2F * 5.99F;
  }
  float tfactor=step / 16;
  float[] angle={0,0,0};
  float[] translate={orientation.getFrontOffsetX(),orientation.getFrontOffsetY(),orientation.getFrontOffsetZ()};
switch (orientation) {
case EAST:
case WEST:
case DOWN:
    angle[2]=angleMap[orientation.ordinal()];
  break;
case SOUTH:
case NORTH:
default :
angle[0]=angleMap[orientation.ordinal()];
break;
}
boiler.rotateAngleX=angle[0];
boiler.rotateAngleY=angle[1];
boiler.rotateAngleZ=angle[2];
trunk.rotateAngleX=angle[0];
trunk.rotateAngleY=angle[1];
trunk.rotateAngleZ=angle[2];
piston.rotateAngleX=angle[0];
piston.rotateAngleY=angle[1];
piston.rotateAngleZ=angle[2];
extension.rotateAngleX=angle[0];
extension.rotateAngleY=angle[1];
extension.rotateAngleZ=angle[2];
float factor=(float)(1.0 / 16.0);
Proxies.render.bindTexture(textures[Textures.BASE.ordinal()]);
boiler.render(factor);
Proxies.render.bindTexture(textures[Textures.PISTON.ordinal()]);
GlStateManager.translate(translate[0] * tfactor,translate[1] * tfactor,translate[2] * tfactor);
piston.render(factor);
GlStateManager.translate(-translate[0] * tfactor,-translate[1] * tfactor,-translate[2] * tfactor);
ResourceLocation texture;
switch (state) {
case OVERHEATING:
texture=textures[Textures.TRUNK_HIGHEST.ordinal()];
break;
case RUNNING_HOT:
texture=textures[Textures.TRUNK_HIGHER.ordinal()];
break;
case OPERATING_TEMPERATURE:
texture=textures[Textures.TRUNK_HIGH.ordinal()];
break;
case WARMED_UP:
texture=textures[Textures.TRUNK_MEDIUM.ordinal()];
break;
case COOL:
default :
texture=textures[Textures.TRUNK_LOW.ordinal()];
break;
}
Proxies.render.bindTexture(texture);
trunk.render(factor);
Proxies.render.bindTexture(textures[Textures.EXTENSION.ordinal()]);
float chamberf=2F / 16F;
if (step > 0) {
for (int i=0; i <= step + 2; i+=2) {
extension.render(factor);
GlStateManager.translate(translate[0] * chamberf,translate[1] * chamberf,translate[2] * chamberf);
}
}
GlStateManager.popAttrib();
GlStateManager.popMatrix();
}","private void render(TemperatureState state,float progress,EnumFacing orientation,double x,double y,double z){
  GlStateManager.color(1,1,1);
  GlStateManager.pushMatrix();
  GlStateManager.translate((float)x,(float)y,(float)z);
  float step;
  if (progress > 0.5) {
    step=5.99F - (progress - 0.5F) * 2F * 5.99F;
  }
 else {
    step=progress * 2F * 5.99F;
  }
  float tfactor=step / 16;
  float[] angle={0,0,0};
  float[] translate={orientation.getFrontOffsetX(),orientation.getFrontOffsetY(),orientation.getFrontOffsetZ()};
switch (orientation) {
case EAST:
case WEST:
case DOWN:
    angle[2]=angleMap[orientation.ordinal()];
  break;
case SOUTH:
case NORTH:
default :
angle[0]=angleMap[orientation.ordinal()];
break;
}
boiler.rotateAngleX=angle[0];
boiler.rotateAngleY=angle[1];
boiler.rotateAngleZ=angle[2];
trunk.rotateAngleX=angle[0];
trunk.rotateAngleY=angle[1];
trunk.rotateAngleZ=angle[2];
piston.rotateAngleX=angle[0];
piston.rotateAngleY=angle[1];
piston.rotateAngleZ=angle[2];
extension.rotateAngleX=angle[0];
extension.rotateAngleY=angle[1];
extension.rotateAngleZ=angle[2];
float factor=(float)(1.0 / 16.0);
Proxies.render.bindTexture(textures[Textures.BASE.ordinal()]);
boiler.render(factor);
Proxies.render.bindTexture(textures[Textures.PISTON.ordinal()]);
GlStateManager.translate(translate[0] * tfactor,translate[1] * tfactor,translate[2] * tfactor);
piston.render(factor);
GlStateManager.translate(-translate[0] * tfactor,-translate[1] * tfactor,-translate[2] * tfactor);
ResourceLocation texture;
switch (state) {
case OVERHEATING:
texture=textures[Textures.TRUNK_HIGHEST.ordinal()];
break;
case RUNNING_HOT:
texture=textures[Textures.TRUNK_HIGHER.ordinal()];
break;
case OPERATING_TEMPERATURE:
texture=textures[Textures.TRUNK_HIGH.ordinal()];
break;
case WARMED_UP:
texture=textures[Textures.TRUNK_MEDIUM.ordinal()];
break;
case COOL:
default :
texture=textures[Textures.TRUNK_LOW.ordinal()];
break;
}
Proxies.render.bindTexture(texture);
trunk.render(factor);
Proxies.render.bindTexture(textures[Textures.EXTENSION.ordinal()]);
float chamberf=2F / 16F;
if (step > 0) {
for (int i=0; i <= step + 2; i+=2) {
extension.render(factor);
GlStateManager.translate(translate[0] * chamberf,translate[1] * chamberf,translate[2] * chamberf);
}
}
GlStateManager.popMatrix();
}",0.9535276721588508
63595,"@Override protected void drawGuiContainerBackgroundLayer(float var1,int mouseX,int mouseY){
  super.drawGuiContainerBackgroundLayer(var1,mouseX,mouseY);
  String str=StatCollector.translateToLocal(""String_Node_Str"").toUpperCase();
  fontRendererObj.drawString(str,startX + 8 + textLayout.getCenteredOffset(str,138),startY + 16,fontColor.get(""String_Node_Str""));
  Set<BiomeDictionary.Type> activeBiomeTypes=EnumSet.noneOf(BiomeDictionary.Type.class);
  for (  BiomeGenBase biome : inventory.getBiomesToSearch()) {
    Collections.addAll(activeBiomeTypes,BiomeDictionary.getTypesForBiome(biome));
  }
  for (  HabitatSlot habitatSlot : habitatSlots) {
    habitatSlot.setActive(activeBiomeTypes);
  }
  for (  HabitatSlot slot : habitatSlots) {
    slot.draw(startX,startY);
  }
  GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
}","@Override protected void drawGuiContainerBackgroundLayer(float var1,int mouseX,int mouseY){
  super.drawGuiContainerBackgroundLayer(var1,mouseX,mouseY);
  String str=StatCollector.translateToLocal(""String_Node_Str"").toUpperCase();
  fontRendererObj.drawString(str,startX + 8 + textLayout.getCenteredOffset(str,138),startY + 16,fontColor.get(""String_Node_Str""));
  Set<BiomeDictionary.Type> activeBiomeTypes=EnumSet.noneOf(BiomeDictionary.Type.class);
  for (  BiomeGenBase biome : inventory.getBiomesToSearch()) {
    Collections.addAll(activeBiomeTypes,BiomeDictionary.getTypesForBiome(biome));
  }
  for (  HabitatSlot habitatSlot : habitatSlots) {
    habitatSlot.setActive(activeBiomeTypes);
  }
  for (  HabitatSlot slot : habitatSlots) {
    slot.draw(startX,startY);
  }
  GlStateManager.color(1.0f,1.0f,1.0f,1.0f);
}",0.9707673568818516
63596,"@Override public void draw(int startX,int startY){
  if (getIcon() != null) {
    if (!isActive) {
      GL11.glColor4f(0.2f,0.2f,0.2f,0.2f);
    }
 else {
      GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
    }
    Proxies.render.bindTexture(TextureMap.locationBlocksTexture);
    manager.gui.drawTexturedModalRect(startX + xPos,startY + yPos,getIcon(),16,16);
  }
}","@Override public void draw(int startX,int startY){
  if (getIcon() != null) {
    if (!isActive) {
      GlStateManager.color(0.2f,0.2f,0.2f,0.2f);
    }
 else {
      GlStateManager.color(1.0f,1.0f,1.0f,1.0f);
    }
    Proxies.render.bindTexture(TextureMap.locationBlocksTexture);
    manager.gui.drawTexturedModalRect(startX + xPos,startY + yPos,getIcon(),16,16);
  }
}",0.912568306010929
63597,"public void render(EnumFacing orientation,float posX,float posY,float posZ){
  GL11.glPushMatrix();
  GL11.glTranslatef(posX,posY,posZ);
  float[] angle={0,0,0};
  if (orientation == null) {
    orientation=EnumFacing.WEST;
  }
switch (orientation) {
case EAST:
    angle[1]=(float)Math.PI / 2;
  break;
case WEST:
angle[1]=-(float)Math.PI / 2;
break;
case SOUTH:
break;
case NORTH:
default :
angle[1]=(float)Math.PI;
break;
}
float factor=(float)(1.0 / 16.0);
Proxies.render.bindTexture(textures[0]);
pedestal.rotateAngleX=angle[0];
pedestal.rotateAngleY=angle[1];
pedestal.rotateAngleZ=angle[2];
pedestal.render(factor);
cover.rotateAngleX=angle[0];
cover.rotateAngleY=angle[1];
cover.rotateAngleZ=(float)Math.PI;
cover.render(factor);
tower1.rotateAngleX=angle[0];
tower1.rotateAngleY=angle[1];
tower1.rotateAngleZ=angle[2];
Proxies.render.bindTexture(textures[1]);
tower1.render(factor);
tower2.rotateAngleX=angle[0];
tower2.rotateAngleY=angle[1];
tower2.rotateAngleZ=angle[2];
Proxies.render.bindTexture(textures[2]);
tower2.render(factor);
GL11.glPopMatrix();
}","public void render(EnumFacing orientation,float posX,float posY,float posZ){
  GlStateManager.pushMatrix();
  GlStateManager.translate(posX,posY,posZ);
  float[] angle={0,0,0};
  if (orientation == null) {
    orientation=EnumFacing.WEST;
  }
switch (orientation) {
case EAST:
    angle[1]=(float)Math.PI / 2;
  break;
case WEST:
angle[1]=-(float)Math.PI / 2;
break;
case SOUTH:
break;
case NORTH:
default :
angle[1]=(float)Math.PI;
break;
}
float factor=(float)(1.0 / 16.0);
Proxies.render.bindTexture(textures[0]);
pedestal.rotateAngleX=angle[0];
pedestal.rotateAngleY=angle[1];
pedestal.rotateAngleZ=angle[2];
pedestal.render(factor);
cover.rotateAngleX=angle[0];
cover.rotateAngleY=angle[1];
cover.rotateAngleZ=(float)Math.PI;
cover.render(factor);
tower1.rotateAngleX=angle[0];
tower1.rotateAngleY=angle[1];
tower1.rotateAngleZ=angle[2];
Proxies.render.bindTexture(textures[1]);
tower1.render(factor);
tower2.rotateAngleX=angle[0];
tower2.rotateAngleY=angle[1];
tower2.rotateAngleZ=angle[2];
Proxies.render.bindTexture(textures[2]);
tower2.render(factor);
GlStateManager.popMatrix();
}",0.9596662030598052
63598,"@Override public void render(Entity entity,float f,float f1,float swing,float f3,float f4,float f5){
  super.render(entity,f,f1,swing,f3,f4,f5);
  wingRight.rotateAngleZ=MathHelper.cos(swing * 1.3F) * (float)Math.PI * 0.25F;
  wingLeft.rotateAngleZ=-wingRight.rotateAngleZ;
  GL11.glPushMatrix();
  float scale=0.75f;
  GL11.glScalef(scale,scale,scale);
  GL11.glTranslatef(0.0F,12.0f / scale * f5,0.0F);
  snout.render(f5);
  torsoWing.render(f5);
  rump.render(f5);
  tail.render(f5);
  tailEnd.render(f5);
  bridge.render(f5);
  eyeRight.render(f5);
  eyeLeft.render(f5);
  wingLeft.render(f5);
  wingRight.render(f5);
  if (type == EnumBeeType.PRINCESS) {
    crownPrincess.render(f5);
  }
 else   if (type == EnumBeeType.QUEEN) {
    crownQueen.render(f5);
  }
  GL11.glPopMatrix();
}","@Override public void render(Entity entity,float f,float f1,float swing,float f3,float f4,float f5){
  super.render(entity,f,f1,swing,f3,f4,f5);
  wingRight.rotateAngleZ=MathHelper.cos(swing * 1.3F) * (float)Math.PI * 0.25F;
  wingLeft.rotateAngleZ=-wingRight.rotateAngleZ;
  GlStateManager.pushMatrix();
  float scale=0.75f;
  GlStateManager.scale(scale,scale,scale);
  GlStateManager.translate(0.0F,12.0f / scale * f5,0.0F);
  snout.render(f5);
  torsoWing.render(f5);
  rump.render(f5);
  tail.render(f5);
  tailEnd.render(f5);
  bridge.render(f5);
  eyeRight.render(f5);
  eyeLeft.render(f5);
  wingLeft.render(f5);
  wingRight.render(f5);
  if (type == EnumBeeType.PRINCESS) {
    crownPrincess.render(f5);
  }
 else   if (type == EnumBeeType.QUEEN) {
    crownQueen.render(f5);
  }
  GlStateManager.popMatrix();
}",0.9291044776119404
63599,"private synchronized void render(float partialTicks){
  Minecraft.getMinecraft().mcProfiler.startSection(name + ""String_Node_Str"");
  float rotationX=ActiveRenderInfo.getRotationX();
  float rotationZ=ActiveRenderInfo.getRotationZ();
  float rotationYZ=ActiveRenderInfo.getRotationYZ();
  float rotationXY=ActiveRenderInfo.getRotationXY();
  float rotationXZ=ActiveRenderInfo.getRotationXZ();
  EntityLivingBase player=(EntityLivingBase)Minecraft.getMinecraft().getRenderViewEntity();
  EntityFX.interpPosX=player.lastTickPosX + (player.posX - player.lastTickPosX) * partialTicks;
  EntityFX.interpPosY=player.lastTickPosY + (player.posY - player.lastTickPosY) * partialTicks;
  EntityFX.interpPosZ=player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * partialTicks;
  Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationBlocksTexture);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glDepthMask(false);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GlStateManager.alphaFunc(GL11.GL_GREATER,0.003921569F);
  Tessellator tessellator=Tessellator.getInstance();
  WorldRenderer worldRenderer=tessellator.getWorldRenderer();
  worldRenderer.begin(7,DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
  for (  EntityFX particle : particles) {
    particle.renderParticle(worldRenderer,particle,partialTicks,rotationX,rotationXZ,rotationZ,rotationYZ,rotationXY);
  }
  tessellator.draw();
  GlStateManager.depthMask(true);
  GlStateManager.disableBlend();
  GlStateManager.alphaFunc(GL11.GL_GREATER,0.1F);
  Minecraft.getMinecraft().mcProfiler.endSection();
}","private synchronized void render(float partialTicks){
  Minecraft.getMinecraft().mcProfiler.startSection(name + ""String_Node_Str"");
  float rotationX=ActiveRenderInfo.getRotationX();
  float rotationZ=ActiveRenderInfo.getRotationZ();
  float rotationYZ=ActiveRenderInfo.getRotationYZ();
  float rotationXY=ActiveRenderInfo.getRotationXY();
  float rotationXZ=ActiveRenderInfo.getRotationXZ();
  EntityLivingBase player=(EntityLivingBase)Minecraft.getMinecraft().getRenderViewEntity();
  EntityFX.interpPosX=player.lastTickPosX + (player.posX - player.lastTickPosX) * partialTicks;
  EntityFX.interpPosY=player.lastTickPosY + (player.posY - player.lastTickPosY) * partialTicks;
  EntityFX.interpPosZ=player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * partialTicks;
  Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationBlocksTexture);
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.depthMask(false);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GlStateManager.alphaFunc(GL11.GL_GREATER,0.003921569F);
  Tessellator tessellator=Tessellator.getInstance();
  WorldRenderer worldRenderer=tessellator.getWorldRenderer();
  worldRenderer.begin(7,DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
  for (  EntityFX particle : particles) {
    particle.renderParticle(worldRenderer,particle,partialTicks,rotationX,rotationXZ,rotationZ,rotationYZ,rotationXY);
  }
  tessellator.draw();
  GlStateManager.depthMask(true);
  GlStateManager.disableBlend();
  GlStateManager.alphaFunc(GL11.GL_GREATER,0.1F);
  Minecraft.getMinecraft().mcProfiler.endSection();
}",0.9836363636363636
63600,"protected void drawFertilityInfo(int fertility,int x,int textColor,int texOffset){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  String fertilityString=Integer.toString(fertility) + ""String_Node_Str"";
  int stringWidth=fontRendererObj.getStringWidth(fertilityString);
  Proxies.render.bindTexture(textureFile);
  drawTexturedModalRect(guiLeft + x + stringWidth+ 2,guiTop + textLayout.getLineY() - 1,60,240 + texOffset,12,8);
  textLayout.drawLine(fertilityString,x,textColor);
}","protected void drawFertilityInfo(int fertility,int x,int textColor,int texOffset){
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  String fertilityString=Integer.toString(fertility) + ""String_Node_Str"";
  int stringWidth=fontRendererObj.getStringWidth(fertilityString);
  Proxies.render.bindTexture(textureFile);
  drawTexturedModalRect(guiLeft + x + stringWidth+ 2,guiTop + textLayout.getLineY() - 1,60,240 + texOffset,12,8);
  textLayout.drawLine(fertilityString,x,textColor);
}",0.9663865546218487
63601,"private void drawProbabilityArrow(IMutation combination,int x,int y){
  float chance=combination.getBaseChance();
  int line=247;
  int column=100;
switch (EnumMutateChance.rateChance(chance)) {
case HIGHEST:
    column=100;
  break;
case HIGHER:
column=100 + 15;
break;
case HIGH:
column=100 + 15 * 2;
break;
case NORMAL:
column=100 + 15 * 3;
break;
case LOW:
column=100 + 15 * 4;
break;
case LOWEST:
column=100 + 15 * 5;
default :
break;
}
Proxies.render.bindTexture(textureFile);
drawTexturedModalRect(x,y,column,line,15,9);
boolean researched=breedingTracker.isResearched(combination);
if (researched) {
fontRendererObj.drawString(""String_Node_Str"",x + 9,y + 1,0);
GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
}
}","private void drawProbabilityArrow(IMutation combination,int x,int y){
  float chance=combination.getBaseChance();
  int line=247;
  int column=100;
switch (EnumMutateChance.rateChance(chance)) {
case HIGHEST:
    column=100;
  break;
case HIGHER:
column=100 + 15;
break;
case HIGH:
column=100 + 15 * 2;
break;
case NORMAL:
column=100 + 15 * 3;
break;
case LOW:
column=100 + 15 * 4;
break;
case LOWEST:
column=100 + 15 * 5;
default :
break;
}
Proxies.render.bindTexture(textureFile);
drawTexturedModalRect(x,y,column,line,15,9);
boolean researched=breedingTracker.isResearched(combination);
if (researched) {
fontRendererObj.drawString(""String_Node_Str"",x + 9,y + 1,0);
GlStateManager.color(1.0f,1.0f,1.0f,1.0f);
}
}",0.9719101123595506
63602,"protected void drawToleranceInfo(IAlleleTolerance toleranceAllele,int x){
  int textColor=getColorCoding(toleranceAllele.isDominant());
  EnumTolerance tolerance=toleranceAllele.getValue();
  String text=""String_Node_Str"" + toleranceAllele.getName() + ""String_Node_Str"";
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
switch (tolerance) {
case BOTH_1:
case BOTH_2:
case BOTH_3:
case BOTH_4:
case BOTH_5:
    drawBothSymbol(x - 2,textLayout.getLineY() - 1);
  textLayout.drawLine(text,x + 14,textColor);
break;
case DOWN_1:
case DOWN_2:
case DOWN_3:
case DOWN_4:
case DOWN_5:
drawDownSymbol(x - 2,textLayout.getLineY() - 1);
textLayout.drawLine(text,x + 14,textColor);
break;
case UP_1:
case UP_2:
case UP_3:
case UP_4:
case UP_5:
drawUpSymbol(x - 2,textLayout.getLineY() - 1);
textLayout.drawLine(text,x + 14,textColor);
break;
default :
drawNoneSymbol(x - 2,textLayout.getLineY() - 1);
textLayout.drawLine(""String_Node_Str"",x + 14,textColor);
break;
}
}","protected void drawToleranceInfo(IAlleleTolerance toleranceAllele,int x){
  int textColor=getColorCoding(toleranceAllele.isDominant());
  EnumTolerance tolerance=toleranceAllele.getValue();
  String text=""String_Node_Str"" + toleranceAllele.getName() + ""String_Node_Str"";
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
switch (tolerance) {
case BOTH_1:
case BOTH_2:
case BOTH_3:
case BOTH_4:
case BOTH_5:
    drawBothSymbol(x - 2,textLayout.getLineY() - 1);
  textLayout.drawLine(text,x + 14,textColor);
break;
case DOWN_1:
case DOWN_2:
case DOWN_3:
case DOWN_4:
case DOWN_5:
drawDownSymbol(x - 2,textLayout.getLineY() - 1);
textLayout.drawLine(text,x + 14,textColor);
break;
case UP_1:
case UP_2:
case UP_3:
case UP_4:
case UP_5:
drawUpSymbol(x - 2,textLayout.getLineY() - 1);
textLayout.drawLine(text,x + 14,textColor);
break;
default :
drawNoneSymbol(x - 2,textLayout.getLineY() - 1);
textLayout.drawLine(""String_Node_Str"",x + 14,textColor);
break;
}
}",0.9831401475237092
63603,"@Override protected void drawGuiContainerBackgroundLayer(float var1,int mouseX,int mouseY){
  super.drawGuiContainerBackgroundLayer(var1,mouseX,mouseY);
  for (int i=0; i <= inventory.getGame().getBountyLevel() / 4; i++) {
    GuiUtil.drawItemStack(this,LEVEL_ITEM,guiLeft + 170 + i * 8,guiTop + 7);
  }
  textLayout.startPage();
{
    GL11.glScaled(0.5,0.5,0.5);
    GL11.glTranslated(guiLeft + 170,guiTop + 10,0.0);
    textLayout.newLine();
    textLayout.newLine();
    String format=EnumChatFormatting.UNDERLINE + EnumChatFormatting.ITALIC.toString();
    int attemptNo=EscritoireGame.BOUNTY_MAX - inventory.getGame().getBountyLevel();
    String attemptNoString=StringUtil.localizeAndFormat(""String_Node_Str"",attemptNo);
    textLayout.drawLine(format + attemptNoString,170,fontColor.get(""String_Node_Str""));
    textLayout.newLine();
    String escritoireText=textSource.getText(inventory.getGame());
    textLayout.drawSplitLine(escritoireText,170,90,fontColor.get(""String_Node_Str""));
  }
  textLayout.endPage();
}","@Override protected void drawGuiContainerBackgroundLayer(float var1,int mouseX,int mouseY){
  super.drawGuiContainerBackgroundLayer(var1,mouseX,mouseY);
  for (int i=0; i <= inventory.getGame().getBountyLevel() / 4; i++) {
    GuiUtil.drawItemStack(this,LEVEL_ITEM,guiLeft + 170 + i * 8,guiTop + 7);
  }
  textLayout.startPage();
{
    GlStateManager.scale(0.5,0.5,0.5);
    GlStateManager.translate(guiLeft + 170,guiTop + 10,0.0);
    textLayout.newLine();
    textLayout.newLine();
    String format=EnumChatFormatting.UNDERLINE + EnumChatFormatting.ITALIC.toString();
    int attemptNo=EscritoireGame.BOUNTY_MAX - inventory.getGame().getBountyLevel();
    String attemptNoString=StringUtil.localizeAndFormat(""String_Node_Str"",attemptNo);
    textLayout.drawLine(format + attemptNoString,170,fontColor.get(""String_Node_Str""));
    textLayout.newLine();
    String escritoireText=textSource.getText(inventory.getGame());
    textLayout.drawSplitLine(escritoireText,170,90,fontColor.get(""String_Node_Str""));
  }
  textLayout.endPage();
}",0.9699029126213592
63604,"protected void bindTexture(ResourceLocation texturePath){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  Proxies.render.bindTexture(texturePath);
}","protected void bindTexture(ResourceLocation texturePath){
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  Proxies.render.bindTexture(texturePath);
}",0.9236111111111112
63605,"@Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){
  bindTexture(textureFile);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  drawTexturedModalRect(x,y,0,0,xSize,ySize);
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
{
    RenderHelper.enableGUIStandardItemLighting();
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glDisable(GL11.GL_DEPTH_TEST);
    GL11.glPushMatrix();
{
      GL11.glTranslatef(guiLeft,guiTop,0.0F);
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
      GL11.glEnable(GL12.GL_RESCALE_NORMAL);
      OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240 / 1.0F,240 / 1.0F);
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
      drawWidgets();
    }
    GL11.glPopMatrix();
  }
  GL11.glPopAttrib();
  bindTexture(textureFile);
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){
  bindTexture(textureFile);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  drawTexturedModalRect(x,y,0,0,xSize,ySize);
  RenderHelper.enableGUIStandardItemLighting();
  GlStateManager.disableLighting();
  GlStateManager.enableRescaleNormal();
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  GlStateManager.pushMatrix();
{
    GlStateManager.translate(guiLeft,guiTop,0.0F);
    drawWidgets();
  }
  GlStateManager.popMatrix();
  bindTexture(textureFile);
}",0.4642593957258659
63606,"public static void drawItemStack(GuiForestry gui,ItemStack stack,int xPos,int yPos){
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  RenderHelper.enableGUIStandardItemLighting();
  RenderItem itemRender=GuiForestry.getItemRenderer();
  GL11.glTranslatef(0.0F,0.0F,32.0F);
  gui.setZLevel(100.0F);
  itemRender.zLevel=100.0F;
  FontRenderer font=null;
  if (stack != null) {
    font=stack.getItem().getFontRenderer(stack);
  }
  if (font == null) {
    font=gui.getFontRenderer();
  }
  itemRender.renderItemAndEffectIntoGUI(stack,xPos,yPos);
  itemRender.renderItemOverlayIntoGUI(font,stack,xPos,yPos,""String_Node_Str"");
  gui.setZLevel(0.0F);
  itemRender.zLevel=0.0F;
  RenderHelper.disableStandardItemLighting();
  GL11.glPopAttrib();
}","public static void drawItemStack(GuiForestry gui,ItemStack stack,int xPos,int yPos){
  FontRenderer font=null;
  if (stack != null) {
    font=stack.getItem().getFontRenderer(stack);
  }
  if (font == null) {
    font=gui.getFontRenderer();
  }
  RenderItem itemRender=GuiForestry.getItemRenderer();
  itemRender.renderItemAndEffectIntoGUI(stack,xPos,yPos);
  itemRender.renderItemOverlayIntoGUI(font,stack,xPos,yPos,null);
}",0.2103448275862069
63607,"@Override public void setupAPI(){
  ChipsetManager.solderManager=new SolderManager();
  ChipsetManager.circuitRegistry=new CircuitRegistry();
  AlleleRegistry alleleRegistry=new AlleleRegistry();
  AlleleManager.alleleRegistry=alleleRegistry;
  AlleleManager.climateHelper=new ClimateUtil();
  AlleleManager.alleleFactory=new AlleleFactory();
  alleleRegistry.initialize();
  AlleleHelper.instance=new AlleleHelper();
  MultiblockManager.logicFactory=new MultiblockLogicFactory();
  ForestryAPI.climateManager=new ClimateManager();
  CapabilityIndividual.register();
}","@Override public void setupAPI(){
  ChipsetManager.solderManager=new SolderManager();
  ChipsetManager.circuitRegistry=new CircuitRegistry();
  AlleleRegistry alleleRegistry=new AlleleRegistry();
  AlleleManager.alleleRegistry=alleleRegistry;
  AlleleManager.climateHelper=new ClimateUtil();
  AlleleManager.alleleFactory=new AlleleFactory();
  alleleRegistry.initialize();
  AlleleHelper.instance=new AlleleHelper();
  MultiblockManager.logicFactory=new MultiblockLogicFactory();
  ForestryAPI.climateManager=new ClimateManager();
}",0.9682107175295186
63608,"@Override public void updateTask(){
  if (continueExecuting()) {
    if (entity.getButterfly().getMate() == null) {
      if (entity.cooldownMate <= 0 && entity.getDistanceSqToEntity(targetMate) < 9.0D) {
        entity.getButterfly().mate(targetMate.getButterfly());
        entity.cooldownMate=EntityButterfly.COOLDOWNS;
      }
    }
 else {
      IPollinatable tile=GeneticsUtil.getOrCreatePollinatable(null,entity.worldObj,rest);
      if (tile instanceof IButterflyNursery) {
        IButterflyNursery nursery=(IButterflyNursery)tile;
        if (nursery.canNurse(entity.getButterfly())) {
          nursery.setCaterpillar(entity.getButterfly().spawnCaterpillar(entity.worldObj,nursery));
          if (entity.getRNG().nextFloat() < 1.0f / entity.getButterfly().getGenome().getFertility()) {
            entity.setHealth(0);
          }
        }
      }
      setHasInteracted();
      entity.cooldownEgg=EntityButterfly.COOLDOWNS;
    }
  }
}","@Override public void updateTask(){
  if (continueExecuting()) {
    if (entity.getButterfly().getMate() == null) {
      if (entity.cooldownMate <= 0 && entity.getDistanceSqToEntity(targetMate) < 9.0D) {
        entity.getButterfly().mate(targetMate.getButterfly());
        targetMate.getButterfly().mate(entity.getButterfly());
        entity.cooldownMate=EntityButterfly.COOLDOWNS;
      }
    }
 else {
      IPollinatable tile=GeneticsUtil.getOrCreatePollinatable(null,entity.worldObj,rest);
      if (tile instanceof IButterflyNursery) {
        IButterflyNursery nursery=(IButterflyNursery)tile;
        if (nursery.canNurse(entity.getButterfly())) {
          nursery.setCaterpillar(entity.getButterfly().spawnCaterpillar(entity.worldObj,nursery));
          if (entity.getRNG().nextFloat() < 1.0f / entity.getButterfly().getGenome().getFertility()) {
            entity.setHealth(0);
          }
        }
      }
      setHasInteracted();
      entity.cooldownEgg=EntityButterfly.COOLDOWNS;
    }
  }
}",0.9679062659195108
63609,"@Override public void onNeighborBlockChange(World world,BlockPos pos,IBlockState state,Block neighborBlock){
  super.onNeighborBlockChange(world,pos,state,neighborBlock);
  TileEntity tileEntity=world.getTileEntity(pos);
  if (tileEntity instanceof TileAlveary) {
    TileAlveary tileAlveary=(TileAlveary)tileEntity;
    tileAlveary.getMultiblockLogic().getController().reassemble();
  }
}","@Override public void onNeighborBlockChange(World world,BlockPos pos,IBlockState state,Block neighborBlock){
  super.onNeighborBlockChange(world,pos,state,neighborBlock);
  TileEntity tileEntity=world.getTileEntity(pos);
  if (tileEntity instanceof TileAlveary) {
    TileAlveary tileAlveary=(TileAlveary)tileEntity;
    IAlvearyControllerInternal alvery=tileAlveary.getMultiblockLogic().getController();
    alvery.reassemble();
    Proxies.net.sendNetworkPacket(new PacketAlveryChange(alvery),world);
  }
}",0.867335562987737
63610,"@Override public void registerPackets(){
  registerClientPacket(new PacketImprintSelectionResponse());
  registerClientPacket(new PacketActiveUpdate());
  registerClientPacket(new PacketBeeLogicActive());
  registerClientPacket(new PacketBeeLogicActiveEntity());
  registerClientPacket(new PacketHabitatBiomePointer());
  registerClientPacket(new PacketCandleUpdate());
  registerServerPacket(new PacketBeeLogicEntityRequest());
}","@Override public void registerPackets(){
  registerClientPacket(new PacketImprintSelectionResponse());
  registerClientPacket(new PacketActiveUpdate());
  registerClientPacket(new PacketBeeLogicActive());
  registerClientPacket(new PacketBeeLogicActiveEntity());
  registerClientPacket(new PacketHabitatBiomePointer());
  registerClientPacket(new PacketCandleUpdate());
  registerServerPacket(new PacketBeeLogicEntityRequest());
  registerClientPacket(new PacketAlveryChange());
}",0.945054945054945
63611,"public static boolean isWoodSlabBlock(Block block,IBlockAccess world,BlockPos pos){
  if (block == null || block.isAir(world,pos)) {
    return false;
  }
  int[] oreIds=OreDictionary.getOreIDs(new ItemStack(block));
  for (  int oreId : oreIds) {
    if (oreId == slabWoodId) {
      return true;
    }
  }
  return false;
}","public static boolean isWoodSlabBlock(Block block,IBlockAccess world,BlockPos pos){
  if (block == null || block.isAir(world,pos)) {
    return false;
  }
  if (Item.getItemFromBlock(block) == null) {
    return false;
  }
  int[] oreIds=OreDictionary.getOreIDs(new ItemStack(block));
  for (  int oreId : oreIds) {
    if (oreId == slabWoodId) {
      return true;
    }
  }
  return false;
}",0.9052924791086352
63612,"@Override public void onNeighborBlockChange(World world,BlockPos pos,IBlockState state,Block neighborBlock){
  super.onNeighborBlockChange(world,pos,state,neighborBlock);
  TileEntity tileEntity=world.getTileEntity(pos);
  if (tileEntity instanceof TileAlveary) {
    TileAlveary tileAlveary=(TileAlveary)tileEntity;
    IAlvearyControllerInternal alvery=tileAlveary.getMultiblockLogic().getController();
    alvery.reassemble();
    Proxies.net.sendNetworkPacket(new PacketAlveryChange(alvery),world);
  }
}","@Override public void onNeighborBlockChange(World world,BlockPos pos,IBlockState state,Block neighborBlock){
  super.onNeighborBlockChange(world,pos,state,neighborBlock);
  TileEntity tileEntity=world.getTileEntity(pos);
  if (tileEntity instanceof TileAlveary) {
    TileAlveary tileAlveary=(TileAlveary)tileEntity;
    IAlvearyControllerInternal alveary=tileAlveary.getMultiblockLogic().getController();
    alveary.reassemble();
    if (alveary.getReferenceCoord() != null) {
      Proxies.net.sendNetworkPacket(new PacketAlveryChange(alveary),world);
    }
  }
}",0.9459962756052142
63613,"@Override public IGreenhouseState getGreenhouseState(World world,BlockPos pos){
  for (  IMultiblockControllerInternal controllerInternal : MultiblockRegistry.getControllersFromWorld(world)) {
    if (controllerInternal instanceof IGreenhouseControllerInternal) {
      if (controllerInternal.isAssembled()) {
        if (isPosiotionInGreenhouse((IGreenhouseControllerInternal)controllerInternal,pos)) {
          return ((IGreenhouseControllerInternal)controllerInternal).createState();
        }
      }
    }
  }
  return null;
}","@Override public IGreenhouseState getGreenhouseState(World world,BlockPos pos){
  if (MultiblockRegistry.getControllersFromWorld(world) != null) {
    for (    IMultiblockControllerInternal controllerInternal : MultiblockRegistry.getControllersFromWorld(world)) {
      if (controllerInternal instanceof IGreenhouseControllerInternal) {
        if (controllerInternal.isAssembled()) {
          if (isPosiotionInGreenhouse((IGreenhouseControllerInternal)controllerInternal,pos)) {
            return ((IGreenhouseControllerInternal)controllerInternal).createState();
          }
        }
      }
    }
  }
  return null;
}",0.7688311688311689
63614,ModelResourceLocation getModel(EnumBeeType type);,@SideOnly(Side.CLIENT) ModelResourceLocation getModel(EnumBeeType type);,0.8099173553719008
63615,"void registerModels(Item item,IModelManager manager);","@SideOnly(Side.CLIENT) void registerModels(Item item,IModelManager manager);",0.8217054263565892
63616,void registerStateMapper();,@SideOnly(Side.CLIENT) void registerStateMapper();,0.7012987012987013
63617,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new AlvearyStateMapper(getAlvearyType()));
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new AlvearyStateMapper(getAlvearyType()));
}",0.9192982456140352
63618,"@Override public ModelResourceLocation getModel(EnumBeeType type){
  return models[type.ordinal()];
}","@Override @SideOnly(Side.CLIENT) public ModelResourceLocation getModel(EnumBeeType type){
  return models[type.ordinal()];
}",0.8977777777777778
63619,"@Override public void registerModels(Item item,IModelManager manager){
  String beeIconDir=""String_Node_Str"";
  EnumBeeType beeType=((ItemBeeGE)item).getType();
  String beeTypeNameBase=beeIconDir + beeType.toString().toLowerCase(Locale.ENGLISH);
  models[beeType.ordinal()]=manager.getModelLocation(beeTypeNameBase);
  manager.registerVariant(item,new ResourceLocation(""String_Node_Str"" + beeTypeNameBase));
}","@Override @SideOnly(Side.CLIENT) public void registerModels(Item item,IModelManager manager){
  String beeIconDir=""String_Node_Str"";
  EnumBeeType beeType=((ItemBeeGE)item).getType();
  String beeTypeNameBase=beeIconDir + beeType.toString().toLowerCase(Locale.ENGLISH);
  if (models == null) {
    models=new ModelResourceLocation[EnumBeeType.values().length];
  }
  models[beeType.ordinal()]=manager.getModelLocation(beeTypeNameBase);
  manager.registerVariant(item,new ResourceLocation(""String_Node_Str"" + beeTypeNameBase));
}",0.8251599147121536
63620,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,null));
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,null));
}",0.9157509157509156
63621,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,getVariant()));
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,getVariant()));
}",0.9204152249134948
63622,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,getVariant()));
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,getVariant()));
}",0.9204152249134948
63623,"@Override public void registerStateMapper(){
  String blockPath=isDouble() ? ""String_Node_Str"" : ""String_Node_Str"";
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,blockPath,getVariant()));
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  String blockPath=isDouble() ? ""String_Node_Str"" : ""String_Node_Str"";
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,blockPath,getVariant()));
}",0.9490022172949002
63624,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,null));
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,null));
}",0.9157509157509156
63625,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new SaplingStateMapper());
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new SaplingStateMapper());
}",0.9090909090909092
63626,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new MachineStateMapper<>(machinePropertiesClass,TYPE,FACE));
}","@Override @SideOnly(Side.CLIENT) public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new MachineStateMapper<>(machinePropertiesClass,TYPE,FACE));
}",0.9283489096573208
63627,"@SideOnly(Side.CLIENT) @Override public void registerModel(Item item,IModelManager manager){
  models[0]=manager.getModelLocation(""String_Node_Str"");
  models[1]=manager.getModelLocation(""String_Node_Str"");
  manager.registerVariant(item,new ResourceLocation(""String_Node_Str""));
  manager.registerVariant(item,new ResourceLocation(""String_Node_Str""));
  manager.registerItemModel(item,new PipetteMeshDefinition());
}","@SideOnly(Side.CLIENT) @Override public void registerModel(Item item,IModelManager manager){
  models=new ModelResourceLocation[2];
  models[0]=manager.getModelLocation(""String_Node_Str"");
  models[1]=manager.getModelLocation(""String_Node_Str"");
  manager.registerVariant(item,new ResourceLocation(""String_Node_Str""));
  manager.registerVariant(item,new ResourceLocation(""String_Node_Str""));
  manager.registerItemModel(item,new PipetteMeshDefinition());
}",0.9553264604810996
63628,"public static void registerModels(){
  for (  Block block : GameData.getBlockRegistry()) {
    if (block instanceof IItemModelRegister) {
      ((IItemModelRegister)block).registerModel(Item.getItemFromBlock(block),getInstance());
    }
    if (block instanceof IStateMapperRegister) {
      ((IStateMapperRegister)block).registerStateMapper();
    }
  }
  for (  Item item : GameData.getItemRegistry()) {
    if (item instanceof IItemModelRegister) {
      ((IItemModelRegister)item).registerModel(item,getInstance());
    }
  }
}","@SideOnly(Side.CLIENT) public static void registerModels(){
  for (  Block block : GameData.getBlockRegistry()) {
    if (block instanceof IItemModelRegister) {
      ((IItemModelRegister)block).registerModel(Item.getItemFromBlock(block),getInstance());
    }
    if (block instanceof IStateMapperRegister) {
      ((IStateMapperRegister)block).registerStateMapper();
    }
  }
  for (  Item item : GameData.getItemRegistry()) {
    if (item instanceof IItemModelRegister) {
      ((IItemModelRegister)item).registerModel(item,getInstance());
    }
  }
}",0.9788018433179724
63629,"@Override public TextureAtlasSprite getSprite(short texUID){
  return null;
}","@Override @SideOnly(Side.CLIENT) public TextureAtlasSprite getSprite(short texUID){
  return null;
}",0.8700564971751412
63630,"@Override public void registerSprites(){
  String spriteName=getItemTexture();
  TextureMap textureMap=Minecraft.getMinecraft().getTextureMapBlocks();
  textureMap.setTextureEntry(spriteName,new TextureAtlasButterfly(spriteName));
}","@Override @SideOnly(Side.CLIENT) public void registerSprites(){
  String spriteName=getItemTexture();
  TextureMap textureMap=Minecraft.getMinecraft().getTextureMapBlocks();
  textureMap.setTextureEntry(spriteName,new TextureAtlasButterfly(spriteName));
}",0.9527720739219712
63631,"/** 
 * Creates a new butterfly species. Automatically registered with AlleleManager.alleleRegistry.registerAllele() See IAlleleButterflySpeciesBuilder and IAlleleSpeciesBuilder for adding additional properties to the returned species.
 * @param uid Unique Identifier for this species
 * @param unlocalizedName Unlocalized name for this species
 * @param authority Authority for the binomial name, e.g. ""Sengir"" on species of base Forestry.
 * @param unlocalizedDescription Unlocalized description for this species
 * @param modID The modID form the mod of the butterfly
 * @param texturePath String texture path for this butterfly e.g. ""forestry:textures/entities/butterfly/...""
 * @param dominant Whether this species is genetically dominant (false means it is recessive)
 * @param branch Classification of this species
 * @param binomial Binomial name of the species sans genus. ""humboldti"" will have the bee species flavour name be ""Apis humboldti"". Feel free to use fun names or null.
 * @param serumColour The color of this butterfly's serum.
 * @return a new butterfly species allele.
 */
IAlleleButterflySpeciesBuilder createSpecies(String uid,String unlocalizedName,String authority,String unlocalizedDescription,String modID,String texturePath,boolean dominant,IClassification branch,String binomial,Color serumColour);","/** 
 * Creates a new butterfly species. Automatically registered with AlleleManager.alleleRegistry.registerAllele() See IAlleleButterflySpeciesBuilder and IAlleleSpeciesBuilder for adding additional properties to the returned species.
 * @param uid Unique Identifier for this species
 * @param unlocalizedName Unlocalized name for this species
 * @param authority Authority for the binomial name, e.g. ""Sengir"" on species of base Forestry.
 * @param unlocalizedDescription Unlocalized description for this species
 * @param modID The modID form the mod of the butterfly
 * @param texturePath String texture path for this butterfly e.g. ""forestry:butterfly/...""
 * @param dominant Whether this species is genetically dominant (false means it is recessive)
 * @param branch Classification of this species
 * @param binomial Binomial name of the species sans genus. ""humboldti"" will have the bee species flavour name be ""Apis humboldti"". Feel free to use fun names or null.
 * @param serumColour The color of this butterfly's serum.
 * @param cocoonProvider A IButterflyCocoonProvider for the butterfly
 * @return a new butterfly species allele.
 */
IAlleleButterflySpeciesBuilder createSpecies(String uid,String unlocalizedName,String authority,String unlocalizedDescription,String modID,String texturePath,boolean dominant,IClassification branch,String binomial,Color serumColour,IButterflyCocoonProvider cocoonProvider);",0.9534545454545454
63632,"private void harmEntities(IBeeGenome genome,IBeeHousing housing){
  List<EntityLivingBase> entities=getEntitiesInRange(genome,housing,EntityLivingBase.class);
  for (  EntityLivingBase entity : entities) {
    int damage=8;
    int count=BeeManager.armorApiaristHelper.wearsItems(entity,getUID(),true);
    damage-=(count * 2);
    if (damage <= 0) {
      continue;
    }
    entity.attackEntityFrom(damageSourceBeeRadioactive,damage);
  }
}","private void harmEntities(IBeeGenome genome,IBeeHousing housing){
  List<EntityLivingBase> entities=getEntitiesInRange(genome,housing,EntityLivingBase.class);
  for (  EntityLivingBase entity : entities) {
    int damage=8;
    int count=BeeManager.armorApiaristHelper.wearsItems(entity,getUID(),true);
    damage-=count * 2;
    if (damage <= 0) {
      continue;
    }
    entity.attackEntityFrom(damageSourceBeeRadioactive,damage);
  }
}",0.9977324263038548
63633,"@Override public boolean canReplace(World world,BlockPos pos){
  Block block=BlockUtil.getBlock(world,pos);
  Material material=block.getMaterial();
  return material.isReplaceable() && !material.isLiquid() || material == Material.air || material == Material.plants;
}","@Override public boolean canReplace(World world,BlockPos pos){
  Block block=BlockUtil.getBlock(world,pos);
  Material material=block.getMaterial();
  return block.isReplaceable(world,pos) && !material.isLiquid() || block.isAir(world,pos) || material == Material.plants;
}",0.8592592592592593
63634,"public BlockForestryLeaves(){
  super(Material.leaves,false);
  this.setCreativeTab(Tabs.tabArboriculture);
  setStepSound(soundTypeGrass);
}","public BlockForestryLeaves(){
  super(Material.leaves,false);
  setCreativeTab(Tabs.tabArboriculture);
  setStepSound(soundTypeGrass);
  setTickRandomly(true);
  setHardness(0.2F);
  setLightOpacity(1);
}",0.4
63635,"private void matureCaterpillar(){
  maturationTime++;
  ITree tree=getTree();
  boolean wasDestroyed=isDestroyed(tree,damage);
  damage+=caterpillar.getGenome().getMetabolism();
  IButterflyGenome caterpillarGenome=caterpillar.getGenome();
  int caterpillarMatureTime=Math.round((float)caterpillarGenome.getLifespan() / (caterpillarGenome.getFertility() * 2));
  if (maturationTime >= caterpillarMatureTime && caterpillar.canTakeFlight(worldObj,getPos().getX(),getPos().getY(),getPos().getZ())) {
    if (worldObj.isAirBlock(getPos().add(-1,0,0))) {
      attemptButterflySpawn(worldObj,caterpillar,getPos().add(-1,0,0));
    }
 else     if (worldObj.isAirBlock(getPos().add(1,0,0))) {
      attemptButterflySpawn(worldObj,caterpillar,getPos().add(1,0,0));
    }
 else     if (worldObj.isAirBlock(getPos().add(0,0,-1))) {
      attemptButterflySpawn(worldObj,caterpillar,getPos().add(0,0,-1));
    }
 else     if (worldObj.isAirBlock(getPos().add(0,0,1))) {
      attemptButterflySpawn(worldObj,caterpillar,getPos().add(0,0,1));
    }
    setCaterpillar(null);
  }
 else   if (!wasDestroyed && isDestroyed(tree,damage)) {
    sendNetworkUpdate();
  }
}","private void matureCaterpillar(){
  maturationTime++;
  ITree tree=getTree();
  boolean wasDestroyed=isDestroyed(tree,damage);
  damage+=caterpillar.getGenome().getMetabolism();
  IButterflyGenome caterpillarGenome=caterpillar.getGenome();
  int caterpillarMatureTime=Math.round((float)caterpillarGenome.getLifespan() / (caterpillarGenome.getFertility() * 2));
  if (maturationTime >= caterpillarMatureTime) {
    ButterflyManager.butterflyRoot.plantCocoon(worldObj,this,getOwner());
    setCaterpillar(null);
  }
 else   if (!wasDestroyed && isDestroyed(tree,damage)) {
    sendNetworkUpdate();
  }
}",0.6149458071876782
63636,"@Override public void preInit(){
  MinecraftForge.EVENT_BUS.register(this);
  ButterflyBranchDefinition.createAlleles();
  AlleleButterflyEffect.createAlleles();
  blocks.lepidopterology.addDefinitions(BlockTypeLepidopterologyTesr.VALUES);
}","@Override public void preInit(){
  MinecraftForge.EVENT_BUS.register(this);
  ButterflyBranchDefinition.createAlleles();
  AlleleButterflyEffect.createAlleles();
  GameRegistry.registerTileEntity(TileCocoon.class,""String_Node_Str"");
  proxy.preInitializeRendering();
  blocks.lepidopterology.addDefinitions(BlockTypeLepidopterologyTesr.VALUES);
}",0.8211243611584327
63637,"@Override public void doInit(){
  File configFile=new File(Forestry.instance.getConfigFolder(),CONFIG_CATEGORY + ""String_Node_Str"");
  loadConfig(configFile);
  PluginCore.rootCommand.addChildCommand(new CommandButterfly());
  EntityUtil.registerEntity(EntityButterfly.class,""String_Node_Str"",0,0x000000,0xffffff,50,1,true);
  proxy.initializeRendering();
  MothDefinition.initMoths();
  ButterflyDefinition.initButterflies();
  blocks.lepidopterology.init();
  TreeManager.treeRoot.registerLeafTickHandler(new ButterflySpawner());
  RecipeSorter.register(""String_Node_Str"",MatingRecipe.class,RecipeSorter.Category.SHAPELESS,""String_Node_Str"");
}","@Override public void doInit(){
  File configFile=new File(Forestry.instance.getConfigFolder(),CONFIG_CATEGORY + ""String_Node_Str"");
  loadConfig(configFile);
  PluginCore.rootCommand.addChildCommand(new CommandButterfly());
  EntityUtil.registerEntity(EntityButterfly.class,""String_Node_Str"",0,0x000000,0xffffff,50,1,true);
  MothDefinition.initMoths();
  ButterflyDefinition.initButterflies();
  blocks.lepidopterology.init();
  TreeManager.treeRoot.registerLeafTickHandler(new ButterflySpawner());
  RecipeSorter.register(""String_Node_Str"",MatingRecipe.class,RecipeSorter.Category.SHAPELESS,""String_Node_Str"");
}",0.9754163362410784
63638,"public BlockRegistryLepidopterology(){
  lepidopterology=registerBlock(new BlockLepidopterology(),ItemBlockForestry.class,""String_Node_Str"");
}","public BlockRegistryLepidopterology(){
  lepidopterology=registerBlock(new BlockLepidopterology(),ItemBlockForestry.class,""String_Node_Str"");
  cocoon=registerBlock(new BlockCocoon(),ItemBlockForestry.class,""String_Node_Str"");
}",0.77088948787062
63639,"@Override public IBakedModel handleBlockState(IBlockState state){
  IModelBaker baker=ModelBaker.getInstance();
  Block block=state.getBlock();
  if (!blockClass.isInstance(block)) {
    return null;
  }
  BlockDecorativeLeaves bBlock=blockClass.cast(block);
  TreeDefinition tree=state.getValue(bBlock.getVariant());
  baker.setRenderBoundsFromBlock(block);
  bakeBlock(bBlock,tree,baker);
  return latestBlockModel=baker.bakeModel(false);
}","@Override public IBakedModel handleBlockState(IBlockState state){
  IModelBaker baker=new ModelBaker();
  Block block=state.getBlock();
  if (!blockClass.isInstance(block)) {
    return null;
  }
  BlockDecorativeLeaves bBlock=blockClass.cast(block);
  TreeDefinition tree=state.getValue(bBlock.getVariant());
  baker.setRenderBoundsFromBlock(block);
  bakeBlock(bBlock,tree,baker);
  return latestBlockModel=baker.bakeModel(false);
}",0.2853881278538813
63640,"public static boolean bakeBlock(BlockDecorativeLeaves block,TreeDefinition treeDefinition,IModelBaker baker){
  if (treeDefinition == null) {
    return false;
  }
  ITreeGenome genome=treeDefinition.getGenome();
  IAlleleTreeSpecies species=genome.getPrimary();
  ILeafSpriteProvider leafSpriteProvider=species.getLeafSpriteProvider();
  TextureAtlasSprite leaveSprite=leafSpriteProvider.getSprite(false,Proxies.render.fancyGraphicsEnabled());
  baker.addBlockModel(block,null,leaveSprite,0);
  TextureAtlasSprite fruitSprite=TextureManager.getInstance().getSprite(genome.getFruitProvider().getDecorativeSpriteIndex());
  if (fruitSprite != null) {
    baker.addBlockModel(block,null,fruitSprite,1);
  }
  baker.getCurrentModel().setParticleSprite(leaveSprite);
  return true;
}","public static boolean bakeBlock(BlockDecorativeLeaves block,TreeDefinition treeDefinition,IModelBaker baker){
  if (treeDefinition == null) {
    return false;
  }
  ITreeGenome genome=treeDefinition.getGenome();
  IAlleleTreeSpecies species=genome.getPrimary();
  ILeafSpriteProvider leafSpriteProvider=species.getLeafSpriteProvider();
  TextureAtlasSprite leaveSprite=leafSpriteProvider.getSprite(false,Proxies.render.fancyGraphicsEnabled());
  baker.addBlockModel(block,null,leaveSprite,0);
  TextureAtlasSprite fruitSprite=TextureManager.getInstance().getSprite(genome.getFruitProvider().getDecorativeSpriteIndex());
  if (fruitSprite != null) {
    baker.addBlockModel(block,null,fruitSprite,1);
  }
  baker.setParticleSprite(leaveSprite);
  return true;
}",0.9883116883116884
63641,"@Override public IBakedModel handleItemState(ItemStack stack){
  IModelBaker baker=ModelBaker.getInstance();
  Block block=Block.getBlockFromItem(stack.getItem());
  if (!blockClass.isInstance(block)) {
    return null;
  }
  BlockDecorativeLeaves bBlock=blockClass.cast(block);
  TreeDefinition tree=bBlock.getTreeType(stack.getMetadata());
  block.setBlockBoundsForItemRender();
  baker.setRenderBoundsFromBlock(block);
  bakeBlock(bBlock,tree,baker);
  return latestItemModel=baker.bakeModel(true);
}","@Override public IBakedModel handleItemState(ItemStack stack){
  IModelBaker baker=new ModelBaker();
  Block block=Block.getBlockFromItem(stack.getItem());
  if (!blockClass.isInstance(block)) {
    return null;
  }
  BlockDecorativeLeaves bBlock=blockClass.cast(block);
  TreeDefinition tree=bBlock.getTreeType(stack.getMetadata());
  block.setBlockBoundsForItemRender();
  baker.setRenderBoundsFromBlock(block);
  bakeBlock(bBlock,tree,baker);
  return latestItemModel=baker.bakeModel(true);
}",0.9639278557114228
63642,"@Override public boolean bakeWorldBlock(BlockForestryLeaves block,IBlockAccess world,BlockPos pos,IModelBaker baker){
  TileLeaves tile=TileUtil.getTile(world,pos,TileLeaves.class);
  if (tile == null) {
    return false;
  }
  TextureAtlasSprite leaveSprite=tile.getLeaveSprite(Proxies.render.fancyGraphicsEnabled());
  baker.addBlockModel(block,pos,leaveSprite,0);
  TextureAtlasSprite fruitSprite=tile.getFruitSprite();
  if (fruitSprite != null) {
    baker.addBlockModel(block,pos,fruitSprite,1);
  }
  baker.getCurrentModel().setParticleSprite(leaveSprite);
  return true;
}","@Override public boolean bakeWorldBlock(BlockForestryLeaves block,IBlockAccess world,BlockPos pos,IModelBaker baker){
  TileLeaves tile=TileUtil.getTile(world,pos,TileLeaves.class);
  if (tile == null) {
    return false;
  }
  TextureAtlasSprite leaveSprite=tile.getLeaveSprite(Proxies.render.fancyGraphicsEnabled());
  baker.addBlockModel(block,pos,leaveSprite,0);
  TextureAtlasSprite fruitSprite=tile.getFruitSprite();
  if (fruitSprite != null) {
    baker.addBlockModel(block,pos,fruitSprite,1);
  }
  baker.setParticleSprite(leaveSprite);
  return true;
}",0.9842381786339754
63643,"@Override public void setupAPI(){
  ChipsetManager.solderManager=new SolderManager();
  ChipsetManager.circuitRegistry=new CircuitRegistry();
  AlleleRegistry alleleRegistry=new AlleleRegistry();
  AlleleManager.alleleRegistry=alleleRegistry;
  AlleleManager.climateHelper=new ClimateUtil();
  AlleleManager.alleleFactory=new AlleleFactory();
  alleleRegistry.initialize();
  AlleleHelper.instance=new AlleleHelper();
  MultiblockManager.logicFactory=new MultiblockLogicFactory();
  ModelBaker.getInstance();
}","@Override public void setupAPI(){
  ChipsetManager.solderManager=new SolderManager();
  ChipsetManager.circuitRegistry=new CircuitRegistry();
  AlleleRegistry alleleRegistry=new AlleleRegistry();
  AlleleManager.alleleRegistry=alleleRegistry;
  AlleleManager.climateHelper=new ClimateUtil();
  AlleleManager.alleleFactory=new AlleleFactory();
  alleleRegistry.initialize();
  AlleleHelper.instance=new AlleleHelper();
  MultiblockManager.logicFactory=new MultiblockLogicFactory();
}",0.9717741935483872
63644,"@Override public IBakedModel handleBlockState(IBlockState state){
  IModelBaker baker=ModelBaker.getInstance();
  IExtendedBlockState stateExtended=(IExtendedBlockState)state;
  IBlockAccess world=stateExtended.getValue(UnlistedBlockAccess.BLOCKACCESS);
  BlockPos pos=stateExtended.getValue(UnlistedBlockPos.POS);
  Block block=state.getBlock();
  if (!blockClass.isInstance(block)) {
    return null;
  }
  B bBlock=blockClass.cast(block);
  baker.setRenderBoundsFromBlock(block);
  bakeWorldBlock(bBlock,world,pos,baker);
  return latestBlockModel=baker.bakeModel(false);
}","@Override public IBakedModel handleBlockState(IBlockState state){
  IModelBaker baker=new ModelBaker();
  IExtendedBlockState stateExtended=(IExtendedBlockState)state;
  IBlockAccess world=stateExtended.getValue(UnlistedBlockAccess.BLOCKACCESS);
  BlockPos pos=stateExtended.getValue(UnlistedBlockPos.POS);
  Block block=state.getBlock();
  if (!blockClass.isInstance(block)) {
    return null;
  }
  B bBlock=blockClass.cast(block);
  baker.setRenderBoundsFromBlock(block);
  bakeWorldBlock(bBlock,world,pos,baker);
  return latestBlockModel=baker.bakeModel(false);
}",0.986013986013986
63645,"@Override public IBakedModel handleItemState(ItemStack stack){
  IModelBaker baker=ModelBaker.getInstance();
  Block block=Block.getBlockFromItem(stack.getItem());
  if (!blockClass.isInstance(block)) {
    return null;
  }
  B bBlock=blockClass.cast(block);
  block.setBlockBoundsForItemRender();
  baker.setRenderBoundsFromBlock(block);
  try {
    bakeInventoryBlock(bBlock,stack,baker);
  }
 catch (  RuntimeException e) {
    return null;
  }
  return latestItemModel=baker.bakeModel(true);
}","@Override public IBakedModel handleItemState(ItemStack stack){
  IModelBaker baker=new ModelBaker();
  Block block=Block.getBlockFromItem(stack.getItem());
  if (!blockClass.isInstance(block)) {
    return null;
  }
  B bBlock=blockClass.cast(block);
  block.setBlockBoundsForItemRender();
  baker.setRenderBoundsFromBlock(block);
  bakeInventoryBlock(bBlock,stack,baker);
  return latestItemModel=baker.bakeModel(true);
}",0.7856365614798694
63646,"protected float[] getFaceUvs(final EnumFacing face,final Vector3f to_16,final Vector3f from_16){
  float from_a=0;
  float from_b=0;
  float to_a=0;
  float to_b=0;
switch (face) {
case UP:
    from_a=from_16.x / 16.0f;
  from_b=from_16.z / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.z / 16.0f;
break;
case DOWN:
from_a=from_16.x / 16.0f;
from_b=from_16.z / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.z / 16.0f;
break;
case SOUTH:
from_a=from_16.x / 16.0f;
from_b=from_16.y / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.y / 16.0f;
break;
case NORTH:
from_a=from_16.x / 16.0f;
from_b=from_16.y / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.y / 16.0f;
break;
case EAST:
from_a=from_16.y / 16.0f;
from_b=from_16.z / 16.0f;
to_a=to_16.y / 16.0f;
to_b=to_16.z / 16.0f;
break;
case WEST:
from_a=from_16.y / 16.0f;
from_b=from_16.z / 16.0f;
to_a=to_16.y / 16.0f;
to_b=to_16.z / 16.0f;
break;
default :
}
from_a=1.0f - from_a;
from_b=1.0f - from_b;
to_a=1.0f - to_a;
to_b=1.0f - to_b;
final float[] afloat=new float[]{16.0f * (quadsUV[0] + quadsUV[2] * from_a + quadsUV[4] * from_b),16.0f * (quadsUV[1] + quadsUV[3] * from_a + quadsUV[5] * from_b),16.0f * (quadsUV[0] + quadsUV[2] * to_a + quadsUV[4] * from_b),16.0f * (quadsUV[1] + quadsUV[3] * to_a + quadsUV[5] * from_b),16.0f * (quadsUV[0] + quadsUV[2] * to_a + quadsUV[4] * to_b),16.0f * (quadsUV[1] + quadsUV[3] * to_a + quadsUV[5] * to_b),16.0f * (quadsUV[0] + quadsUV[2] * from_a + quadsUV[4] * to_b),16.0f * (quadsUV[1] + quadsUV[3] * from_a + quadsUV[5] * to_b)};
return afloat;
}","protected float[] getFaceUvs(final EnumFacing face,final Vector3f to_16,final Vector3f from_16){
  float from_a=0;
  float from_b=0;
  float to_a=0;
  float to_b=0;
switch (face) {
case UP:
    from_a=from_16.x / 16.0f;
  from_b=from_16.z / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.z / 16.0f;
break;
case DOWN:
from_a=from_16.x / 16.0f;
from_b=from_16.z / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.z / 16.0f;
break;
case SOUTH:
from_a=from_16.x / 16.0f;
from_b=from_16.y / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.y / 16.0f;
break;
case NORTH:
from_a=from_16.x / 16.0f;
from_b=from_16.y / 16.0f;
to_a=to_16.x / 16.0f;
to_b=to_16.y / 16.0f;
break;
case EAST:
from_a=from_16.y / 16.0f;
from_b=from_16.z / 16.0f;
to_a=to_16.y / 16.0f;
to_b=to_16.z / 16.0f;
break;
case WEST:
from_a=from_16.y / 16.0f;
from_b=from_16.z / 16.0f;
to_a=to_16.y / 16.0f;
to_b=to_16.z / 16.0f;
break;
default :
}
from_a=1.0f - from_a;
from_b=1.0f - from_b;
to_a=1.0f - to_a;
to_b=1.0f - to_b;
return new float[]{16.0f * (quadsUV[0] + quadsUV[2] * from_a + quadsUV[4] * from_b),16.0f * (quadsUV[1] + quadsUV[3] * from_a + quadsUV[5] * from_b),16.0f * (quadsUV[0] + quadsUV[2] * to_a + quadsUV[4] * from_b),16.0f * (quadsUV[1] + quadsUV[3] * to_a + quadsUV[5] * from_b),16.0f * (quadsUV[0] + quadsUV[2] * to_a + quadsUV[4] * to_b),16.0f * (quadsUV[1] + quadsUV[3] * to_a + quadsUV[5] * to_b),16.0f * (quadsUV[0] + quadsUV[2] * from_a + quadsUV[4] * to_b),16.0f * (quadsUV[1] + quadsUV[3] * from_a + quadsUV[5] * to_b)};
}",0.986365147988028
63647,"@Override public IModelBakerModel bakeModel(boolean flip){
  ModelRotation mr=ModelRotation.X0_Y0;
  if (flip)   mr=ModelRotation.X0_Y180;
  for (  ModelBakerFace face : new ArrayList<>(faces)) {
    final EnumFacing myFace=face.face;
    final float[] uvs=getFaceUvs(myFace,face.from,face.to);
    final BlockFaceUV uv=new BlockFaceUV(uvs,0);
    final BlockPartFace bpf=new BlockPartFace(myFace,face.colorIndex,""String_Node_Str"",uv);
    BakedQuad bf=faceBakery.makeBakedQuad(face.to,face.from,bpf,face.spite,myFace,mr,null,true,true);
    bf=new IColoredBakedQuad.ColoredBakedQuad(bf.getVertexData(),face.colorIndex,bf.getFace());
    if (face.isEdge)     this.currentModel.getFaceQuads(myFace).add(bf);
 else     this.currentModel.getGeneralQuads().add(bf);
  }
  return clear();
}","@Override public IModelBakerModel bakeModel(boolean flip){
  ModelRotation mr=ModelRotation.X0_Y0;
  if (flip)   mr=ModelRotation.X0_Y180;
  for (  ModelBakerFace face : faces) {
    final EnumFacing myFace=face.face;
    final float[] uvs=getFaceUvs(myFace,face.from,face.to);
    final BlockFaceUV uv=new BlockFaceUV(uvs,0);
    final BlockPartFace bpf=new BlockPartFace(myFace,face.colorIndex,""String_Node_Str"",uv);
    BakedQuad bf=faceBakery.makeBakedQuad(face.to,face.from,bpf,face.spite,myFace,mr,null,true,true);
    bf=new IColoredBakedQuad.ColoredBakedQuad(bf.getVertexData(),face.colorIndex,bf.getFace());
    if (face.isEdge)     this.currentModel.getFaceQuads(myFace).add(bf);
 else     this.currentModel.getGeneralQuads().add(bf);
  }
  return currentModel;
}",0.9717586649550706
63648,"@Override public boolean bakeWorldBlock(BlockFarm blockFarm,IBlockAccess world,BlockPos pos,IModelBaker baker){
  TileFarm farm=(TileFarm)world.getTileEntity(pos);
  TextureAtlasSprite[] textures=getSprites(farm.getFarmBlockTexture());
  baker.addBlockModel(blockFarm,pos,textures,0);
  baker.addBlockModel(blockFarm,pos,getOverlaySprites(farm.getFarmBlockType()),0);
  baker.getCurrentModel().setParticleSprite(textures[0]);
  return true;
}","@Override public boolean bakeWorldBlock(BlockFarm blockFarm,IBlockAccess world,BlockPos pos,IModelBaker baker){
  TileFarm farm=(TileFarm)world.getTileEntity(pos);
  TextureAtlasSprite[] textures=getSprites(farm.getFarmBlockTexture());
  baker.addBlockModel(blockFarm,pos,textures,0);
  baker.addBlockModel(blockFarm,pos,getOverlaySprites(farm.getFarmBlockType()),0);
  baker.setParticleSprite(textures[0]);
  return true;
}",0.979214780600462
63649,"@Override public ModelResourceLocation getModelLocation(ItemStack stack){
  int meta=stack.getMetadata();
  EnumWoodType woodType=wood.getWoodType(meta);
  String blockKind=wood.getBlockKind().replace('.','/');
  return ModelManager.getInstance().getModelLocation(blockKind + ""String_Node_Str"" + woodType);
}","@Override public ModelResourceLocation getModelLocation(ItemStack stack){
  int meta=stack.getMetadata();
  EnumWoodType woodType=wood.getWoodType(meta);
  String blockKind=wood.getBlockKind();
  return ModelManager.getInstance().getModelLocation(blockKind + ""String_Node_Str"" + woodType);
}",0.9716193656093488
63650,"public static ResourceLocation[] getResourceLocations(IWoodTyped typed){
  List<ResourceLocation> resourceLocations=new ArrayList<>();
  for (  EnumWoodType woodType : typed.getWoodTypes()) {
    String blockKind=typed.getBlockKind().replace('.','/');
    ResourceLocation resourceLocation=new ForestryResource(blockKind + ""String_Node_Str"" + woodType);
    resourceLocations.add(resourceLocation);
  }
  return resourceLocations.toArray(new ResourceLocation[resourceLocations.size()]);
}","public static ResourceLocation[] getResourceLocations(IWoodTyped typed){
  List<ResourceLocation> resourceLocations=new ArrayList<>();
  for (  EnumWoodType woodType : typed.getWoodTypes()) {
    String blockKind=typed.getBlockKind();
    ResourceLocation resourceLocation=new ForestryResource(blockKind + ""String_Node_Str"" + woodType);
    resourceLocations.add(resourceLocation);
  }
  return resourceLocations.toArray(new ResourceLocation[resourceLocations.size()]);
}",0.9822732012513036
63651,"@Nonnull @Override public String getBlockKind(){
  return isDouble() ? ""String_Node_Str"" : ""String_Node_Str"";
}","@Nonnull @Override public String getBlockKind(){
  return ""String_Node_Str"";
}",0.8253968253968254
63652,"@Override public void registerStateMapper(){
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,getVariant()));
}","@Override public void registerStateMapper(){
  String blockPath=isDouble() ? ""String_Node_Str"" : ""String_Node_Str"";
  Proxies.render.registerStateMapper(this,new WoodTypeStateMapper(this,blockPath,getVariant()));
}",0.7665706051873199
63653,"@Override protected ModelResourceLocation getModelResourceLocation(IBlockState state){
  final Map<IProperty,Comparable> properties;
  if (propertyWoodType != null) {
    properties=Maps.newLinkedHashMap(state.getProperties());
    properties.remove(propertyWoodType);
  }
 else {
    properties=state.getProperties();
  }
  Block block=state.getBlock();
  int meta=block.getMetaFromState(state);
  EnumWoodType woodType=woodTyped.getWoodType(meta);
  String resourceDomain=Block.blockRegistry.getNameForObject(block).getResourceDomain();
  String blockKind=woodTyped.getBlockKind().replace('.','/');
  String resourceLocation=""String_Node_Str"" + blockKind + '/'+ woodType;
  String propertyString=this.getPropertyString(properties);
  return new ModelResourceLocation(resourceDomain + ':' + resourceLocation,propertyString);
}","@Override protected ModelResourceLocation getModelResourceLocation(IBlockState state){
  final Map<IProperty,Comparable> properties;
  if (propertyWoodType != null) {
    properties=Maps.newLinkedHashMap(state.getProperties());
    properties.remove(propertyWoodType);
  }
 else {
    properties=state.getProperties();
  }
  Block block=state.getBlock();
  int meta=block.getMetaFromState(state);
  EnumWoodType woodType=woodTyped.getWoodType(meta);
  String resourceDomain=Block.blockRegistry.getNameForObject(block).getResourceDomain();
  String resourceLocation=""String_Node_Str"" + blockPath + '/'+ woodType;
  String propertyString=this.getPropertyString(properties);
  return new ModelResourceLocation(resourceDomain + ':' + resourceLocation,propertyString);
}",0.9560301507537688
63654,"public WoodTypeStateMapper(@Nonnull IWoodTyped woodTyped,@Nullable PropertyWoodType propertyWoodType){
  this.woodTyped=woodTyped;
  this.propertyWoodType=propertyWoodType;
}","public WoodTypeStateMapper(@Nonnull IWoodTyped woodTyped,@Nonnull String blockPath,@Nullable PropertyWoodType propertyWoodType){
  this.woodTyped=woodTyped;
  this.blockPath=blockPath;
  this.propertyWoodType=propertyWoodType;
}",0.7064676616915423
63655,"@Override public int getMetaFromState(IBlockState state){
  return ((Type)state.getValue(TYPE)).ordinal();
}","@Override public int getMetaFromState(IBlockState state){
  return ((AlvearyType)state.getValue(TYPE)).ordinal();
}",0.968609865470852
63656,"public BlockAlveary(){
  super(new MaterialBeehive(false));
  setHardness(1.0f);
  setCreativeTab(Tabs.tabApiculture);
  setHarvestLevel(""String_Node_Str"",0);
  setDefaultState(this.blockState.getBaseState().withProperty(TYPE,Type.PLAIN).withProperty(STATE,State.OFF).withProperty(LEVEL,Level.BOTTOM));
}","public BlockAlveary(){
  super(new MaterialBeehive(false));
  setHardness(1.0f);
  setCreativeTab(Tabs.tabApiculture);
  setHarvestLevel(""String_Node_Str"",0);
  setStepSound(soundTypeWood);
  setDefaultState(this.blockState.getBaseState().withProperty(TYPE,AlvearyType.PLAIN).withProperty(STATE,State.OFF).withProperty(LEVEL,AlvearyLevel.MIDDLE));
}",0.8973966309341501
63657,"@Override protected ModelResourceLocation getModelResourceLocation(IBlockState state){
  LinkedHashMap linkedhashmap=Maps.newLinkedHashMap(state.getProperties());
  if (linkedhashmap.get(TYPE) != Type.PLAIN) {
    linkedhashmap.remove(LEVEL);
  }
  if (linkedhashmap.get(TYPE) == Type.SIEVE || linkedhashmap.get(TYPE) == Type.ENTRANCE || linkedhashmap.get(TYPE) == Type.STABILISER || linkedhashmap.get(TYPE) == Type.HYGRO || linkedhashmap.get(TYPE) == Type.PLAIN) {
    linkedhashmap.remove(STATE);
  }
  String s=String.format(""String_Node_Str"",Block.blockRegistry.getNameForObject(state.getBlock()).getResourceDomain(),""String_Node_Str"" + TYPE.getName((Enum)linkedhashmap.remove(TYPE)));
  ;
  return new ModelResourceLocation(s,this.getPropertyString(linkedhashmap));
}","@Override protected ModelResourceLocation getModelResourceLocation(IBlockState state){
  LinkedHashMap linkedhashmap=Maps.newLinkedHashMap(state.getProperties());
  if (linkedhashmap.get(TYPE) != AlvearyType.PLAIN) {
    linkedhashmap.remove(LEVEL);
  }
  if (linkedhashmap.get(TYPE) == AlvearyType.SIEVE || linkedhashmap.get(TYPE) == AlvearyType.ENTRANCE || linkedhashmap.get(TYPE) == AlvearyType.STABILISER || linkedhashmap.get(TYPE) == AlvearyType.HYGRO || linkedhashmap.get(TYPE) == AlvearyType.PLAIN) {
    linkedhashmap.remove(STATE);
  }
  String s=String.format(""String_Node_Str"",Block.blockRegistry.getNameForObject(state.getBlock()).getResourceDomain(),""String_Node_Str"" + TYPE.getName((Enum)linkedhashmap.remove(TYPE)));
  ;
  return new ModelResourceLocation(s,this.getPropertyString(linkedhashmap));
}",0.9735182849936947
63658,"@Override public IBlockState getActualState(IBlockState state,IBlockAccess world,BlockPos pos){
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof TileAlveary) {
    if (tile instanceof TileAlvearyClimatiser) {
      TileAlvearyClimatiser alveary=(TileAlvearyClimatiser)tile;
      if (alveary.isActive()) {
        state=state.withProperty(STATE,State.ON);
      }
 else {
        state=state.withProperty(STATE,State.OFF);
      }
    }
 else     if (tile instanceof TileAlvearySwarmer) {
      TileAlvearySwarmer alveary=(TileAlvearySwarmer)tile;
      if (alveary.isActive()) {
        state=state.withProperty(STATE,State.ON);
      }
 else {
        state=state.withProperty(STATE,State.OFF);
      }
    }
  }
  int meta=((Type)state.getValue(TYPE)).ordinal();
  Block blockXP=world.getBlockState(new BlockPos(pos.getX() + 1,pos.getY(),pos.getZ())).getBlock();
  Block blockXM=world.getBlockState(new BlockPos(pos.getX() - 1,pos.getY(),pos.getZ())).getBlock();
  state=state.withProperty(LEVEL,Level.BOTTOM);
  if (blockXP == this && blockXM != this) {
    IBlockState stateNeighbor=world.getBlockState(new BlockPos(pos.getX() + 1,pos.getY(),pos.getZ()));
    if (stateNeighbor.getBlock().getMetaFromState(stateNeighbor) == 1) {
      if (world.getBlockState(new BlockPos(pos.getX(),pos.getY(),pos.getZ() + 1)).getBlock() != this) {
        switchForSide(state,world,pos);
      }
 else {
        switchForSide(state,world,pos);
      }
    }
  }
 else   if (blockXP != this && blockXM == this) {
    IBlockState stateNeighbor=world.getBlockState(new BlockPos(pos.getX() - 1,pos.getY(),pos.getZ()));
    if (stateNeighbor.getBlock().getMetaFromState(stateNeighbor) == 1) {
      if (world.getBlockState(new BlockPos(pos.getX(),pos.getY(),pos.getZ() + 1)).getBlock() != this) {
        switchForSide(state,world,pos);
      }
 else {
        switchForSide(state,world,pos);
      }
    }
  }
  return super.getActualState(state,world,pos);
}","@Override public IBlockState getActualState(IBlockState state,IBlockAccess world,BlockPos pos){
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof TileAlveary) {
    if (tile instanceof TileAlvearyClimatiser) {
      TileAlvearyClimatiser alveary=(TileAlvearyClimatiser)tile;
      if (alveary.isActive()) {
        state=state.withProperty(STATE,State.ON);
      }
 else {
        state=state.withProperty(STATE,State.OFF);
      }
    }
 else     if (tile instanceof TileAlvearySwarmer) {
      TileAlvearySwarmer alveary=(TileAlvearySwarmer)tile;
      if (alveary.isActive()) {
        state=state.withProperty(STATE,State.ON);
      }
 else {
        state=state.withProperty(STATE,State.OFF);
      }
    }
  }
  IBlockState stateXP=world.getBlockState(new BlockPos(pos.getX() + 1,pos.getY(),pos.getZ()));
  IBlockState stateXM=world.getBlockState(new BlockPos(pos.getX() - 1,pos.getY(),pos.getZ()));
  Block blockXP=stateXP.getBlock();
  Block blockXM=stateXM.getBlock();
  state=state.withProperty(LEVEL,AlvearyLevel.MIDDLE);
  if (blockXP == this && blockXM != this) {
    if (stateXP.getValue(TYPE) == AlvearyType.ENTRANCE) {
      if (world.getBlockState(new BlockPos(pos.getX(),pos.getY(),pos.getZ() + 1)).getBlock() != this) {
        state=state.withProperty(LEVEL,AlvearyLevel.RIGHT);
      }
 else {
        state=state.withProperty(LEVEL,AlvearyLevel.LEFT);
      }
    }
  }
 else   if (blockXP != this && blockXM == this) {
    if (stateXM.getValue(TYPE) == AlvearyType.ENTRANCE) {
      if (world.getBlockState(new BlockPos(pos.getX(),pos.getY(),pos.getZ() + 1)).getBlock() != this) {
        state=state.withProperty(LEVEL,AlvearyLevel.LEFT);
      }
 else {
        state=state.withProperty(LEVEL,AlvearyLevel.RIGHT);
      }
    }
  }
  return super.getActualState(state,world,pos);
}",0.5264270613107822
63659,"@Override public TileEntity createTileEntity(World world,IBlockState state){
  int metadata=getMetaFromState(state);
  if (metadata < 0 || metadata > Type.VALUES.length) {
    return null;
  }
  Type type=Type.VALUES[metadata];
switch (type) {
case SWARMER:
    return new TileAlvearySwarmer();
case FAN:
  return new TileAlvearyFan();
case HEATER:
return new TileAlvearyHeater();
case HYGRO:
return new TileAlvearyHygroregulator();
case STABILISER:
return new TileAlvearyStabiliser();
case SIEVE:
return new TileAlvearySieve();
case PLAIN:
default :
return new TileAlvearyPlain();
}
}","@Override public TileEntity createTileEntity(World world,IBlockState state){
  int metadata=getMetaFromState(state);
  if (metadata < 0 || metadata > AlvearyType.VALUES.length) {
    return null;
  }
  AlvearyType type=AlvearyType.VALUES[metadata];
switch (type) {
case SWARMER:
    return new TileAlvearySwarmer();
case FAN:
  return new TileAlvearyFan();
case HEATER:
return new TileAlvearyHeater();
case HYGRO:
return new TileAlvearyHygroregulator();
case STABILISER:
return new TileAlvearyStabiliser();
case SIEVE:
return new TileAlvearySieve();
case PLAIN:
default :
return new TileAlvearyPlain();
}
}",0.982367758186398
63660,"public ItemStack get(Type type){
  return new ItemStack(this,1,type.ordinal());
}","public ItemStack get(AlvearyType type){
  return new ItemStack(this,1,type.ordinal());
}",0.9585798816568049
63661,"@Override public IBlockState getStateFromMeta(int meta){
  return getDefaultState().withProperty(TYPE,Type.values()[meta]);
}","@Override public IBlockState getStateFromMeta(int meta){
  return getDefaultState().withProperty(TYPE,AlvearyType.values()[meta]);
}",0.9727626459143968
63662,"@SideOnly(Side.CLIENT) @Override public void registerModel(Item item,IModelManager manager){
  manager.registerItemModel(item,0,""String_Node_Str"");
}","@SideOnly(Side.CLIENT) @Override public void registerModel(Item item,IModelManager manager){
  manager.registerItemModel(item,0,""String_Node_Str"");
  manager.registerItemModel(item,1,""String_Node_Str"");
}",0.8441926345609065
63663,"@Override public int colorMultiplier(IBlockAccess worldIn,BlockPos pos,int renderPass){
  if (renderPass < 3) {
    return ((TileCandle)worldIn.getTileEntity(pos)).getColour();
  }
  return 16777215;
}","@Override public int colorMultiplier(IBlockAccess worldIn,BlockPos pos,int renderPass){
  return ((TileCandle)worldIn.getTileEntity(pos)).getColour();
}",0.8611898016997167
63664,"@Override @SideOnly(Side.CLIENT) public int getColorFromItemStack(ItemStack stack,int pass){
  int value=0xffffff;
  if (pass == 1 && stack.hasTagCompound()) {
    NBTTagCompound tag=stack.getTagCompound();
    if (tag.hasKey(""String_Node_Str"")) {
      value=tag.getInteger(""String_Node_Str"");
    }
  }
  return value;
}","@Override @SideOnly(Side.CLIENT) public int getColorFromItemStack(ItemStack stack,int pass){
  int value=0xffffff;
  if (pass == 1 && stack.hasTagCompound()) {
    NBTTagCompound tag=stack.getTagCompound();
    if (tag.hasKey(BlockCandle.colourTagName)) {
      value=tag.getInteger(BlockCandle.colourTagName);
    }
  }
  return value;
}",0.8787878787878788
63665,"protected TileAlveary(BlockAlveary.Type type){
  super(new MultiblockLogicAlveary());
  this.unlocalizedTitle=""String_Node_Str"" + type.ordinal() + ""String_Node_Str"";
}","protected TileAlveary(BlockAlveary.AlvearyType type){
  super(new MultiblockLogicAlveary());
  this.unlocalizedTitle=""String_Node_Str"" + type.ordinal() + ""String_Node_Str"";
}",0.9794721407624634
63666,"public TileAlvearyHygroregulator(){
  super(BlockAlveary.Type.HYGRO);
  this.inventory=new InventoryHygroregulator(this);
  Fluid water=Fluids.WATER.getFluid();
  Fluid lava=Fluids.LAVA.getFluid();
  Fluid liquidIce=Fluids.ICE.getFluid();
  this.liquidTank=new FilteredTank(Constants.PROCESSOR_TANK_CAPACITY,water,lava,liquidIce);
  this.tankManager=new TankManager(this,liquidTank);
  this.recipes=new HygroregulatorRecipe[]{new HygroregulatorRecipe(new FluidStack(water,1),1,0.01f,-0.005f),new HygroregulatorRecipe(new FluidStack(lava,1),10,-0.01f,+0.005f),new HygroregulatorRecipe(new FluidStack(liquidIce,1),10,0.02f,-0.01f)};
}","public TileAlvearyHygroregulator(){
  super(BlockAlveary.AlvearyType.HYGRO);
  this.inventory=new InventoryHygroregulator(this);
  Fluid water=Fluids.WATER.getFluid();
  Fluid lava=Fluids.LAVA.getFluid();
  Fluid liquidIce=Fluids.ICE.getFluid();
  this.liquidTank=new FilteredTank(Constants.PROCESSOR_TANK_CAPACITY,water,lava,liquidIce);
  this.tankManager=new TankManager(this,liquidTank);
  this.recipes=new HygroregulatorRecipe[]{new HygroregulatorRecipe(new FluidStack(water,1),1,0.01f,-0.005f),new HygroregulatorRecipe(new FluidStack(lava,1),10,-0.01f,+0.005f),new HygroregulatorRecipe(new FluidStack(liquidIce,1),10,0.02f,-0.01f)};
}",0.994492525570417
63667,"@Override public void onMachineBroken(){
  super.onMachineBroken();
  if (!worldObj.isRemote) {
    this.worldObj.setBlockState(getPos(),getBlockType().getStateFromMeta(BlockAlveary.Type.PLAIN.ordinal()),2);
  }
}","@Override public void onMachineBroken(){
  super.onMachineBroken();
  if (!worldObj.isRemote) {
    this.worldObj.setBlockState(getPos(),getBlockType().getStateFromMeta(BlockAlveary.AlvearyType.PLAIN.ordinal()),2);
  }
}",0.9838337182448036
63668,"@Override public void onMachineAssembled(IMultiblockController multiblockController,BlockPos minCoord,BlockPos maxCoord){
  super.onMachineAssembled(multiblockController,minCoord,maxCoord);
  if (!worldObj.isRemote) {
    if (getPos().getY() == maxCoord.getY()) {
      if ((getPos().getX() > minCoord.getX() && getPos().getX() < maxCoord.getX()) || (getPos().getZ() > minCoord.getZ() && getPos().getZ() < maxCoord.getZ())) {
        this.worldObj.setBlockState(getPos(),getBlockType().getStateFromMeta(BlockAlveary.Type.ENTRANCE.ordinal()),2);
      }
    }
  }
}","@Override public void onMachineAssembled(IMultiblockController multiblockController,BlockPos minCoord,BlockPos maxCoord){
  super.onMachineAssembled(multiblockController,minCoord,maxCoord);
  if (!worldObj.isRemote) {
    if (getPos().getY() == maxCoord.getY()) {
      if ((getPos().getX() > minCoord.getX() && getPos().getX() < maxCoord.getX()) || (getPos().getZ() > minCoord.getZ() && getPos().getZ() < maxCoord.getZ())) {
        this.worldObj.setBlockState(getPos(),getBlockType().getStateFromMeta(BlockAlveary.AlvearyType.ENTRANCE.ordinal()),2);
      }
    }
  }
}",0.9938325991189428
63669,"public TileAlvearySieve(){
  super(BlockAlveary.Type.SIEVE);
  this.inventory=new InventoryAlvearySieve(this);
  this.beeListener=new AlvearySieveBeeListener(inventory);
}","public TileAlvearySieve(){
  super(BlockAlveary.AlvearyType.SIEVE);
  this.inventory=new InventoryAlvearySieve(this);
  this.beeListener=new AlvearySieveBeeListener(inventory);
}",0.9799426934097422
63670,"public TileAlvearySwarmer(){
  super(BlockAlveary.Type.SWARMER);
  this.inventory=new InventorySwarmer(this);
}","public TileAlvearySwarmer(){
  super(BlockAlveary.AlvearyType.SWARMER);
  this.inventory=new InventorySwarmer(this);
}",0.9694323144104804
63671,"@SideOnly(Side.CLIENT) @Override public int colorMultiplier(IBlockAccess world,BlockPos pos,int renderPass){
  TileLeaves leaves=getLeafTile(world,pos);
  if (leaves == null) {
    return super.colorMultiplier(world,pos);
  }
  int colour=leaves.getFoliageColour(Proxies.common.getClientInstance().thePlayer);
  if (colour == PluginArboriculture.proxy.getFoliageColorBasic()) {
    colour=super.colorMultiplier(world,pos);
  }
  return colour;
}","@SideOnly(Side.CLIENT) @Override public int colorMultiplier(IBlockAccess world,BlockPos pos,int renderPass){
  TileLeaves leaves=getLeafTile(world,pos);
  if (leaves == null) {
    return super.colorMultiplier(world,pos,0);
  }
  int colour=super.colorMultiplier(world,pos,0);
  if (renderPass == 0) {
    colour=leaves.getFoliageColour(Proxies.common.getClientInstance().thePlayer);
    if (colour == PluginArboriculture.proxy.getFoliageColorBasic()) {
      return super.colorMultiplier(world,pos,0);
    }
  }
 else {
    colour=leaves.getFruitColour();
  }
  return colour;
}",0.8203125
63672,"@Override public int getColorFromItemStack(ItemStack itemStack,int renderPass){
  if (!itemStack.hasTagCompound()) {
    return PluginArboriculture.proxy.getFoliageColorBasic();
  }
  TileLeaves tileLeaves=new TileLeaves();
  tileLeaves.readFromNBT(itemStack.getTagCompound());
  return tileLeaves.getFoliageColour(Proxies.common.getPlayer());
}","@Override public int getColorFromItemStack(ItemStack itemStack,int renderPass){
  if (!itemStack.hasTagCompound()) {
    return PluginArboriculture.proxy.getFoliageColorBasic();
  }
  TileLeaves tileLeaves=new TileLeaves();
  tileLeaves.readFromNBT(itemStack.getTagCompound());
  if (renderPass == 1) {
    return tileLeaves.getFruitColour();
  }
 else {
    return tileLeaves.getFoliageColour(Proxies.common.getPlayer());
  }
}",0.8926261319534282
63673,"public ApiaristTracker(String s,GameProfile player,World world){
  super(s,player,world);
}","/** 
 * Required for creation from map storage 
 */
public ApiaristTracker(String s){
  super(s);
}",0.4947368421052631
63674,"@Override public IApiaristTracker getBreedingTracker(World world,GameProfile player){
  String filename=""String_Node_Str"" + (player == null ? ""String_Node_Str"" : player.getId());
  ApiaristTracker tracker=(ApiaristTracker)world.loadItemData(ApiaristTracker.class,filename);
  if (tracker == null) {
    tracker=new ApiaristTracker(filename,player,world);
    world.setItemData(filename,tracker);
  }
  return tracker;
}","@Override public IApiaristTracker getBreedingTracker(World world,GameProfile player){
  String filename=""String_Node_Str"" + (player == null ? ""String_Node_Str"" : player.getId());
  ApiaristTracker tracker=(ApiaristTracker)world.loadItemData(ApiaristTracker.class,filename);
  if (tracker == null) {
    tracker=new ApiaristTracker(filename);
    world.setItemData(filename,tracker);
  }
  tracker.setUsername(player);
  tracker.setWorld(world);
  return tracker;
}",0.8086070215175538
63675,"public ArboristTracker(String s,GameProfile player,World world){
  super(s,player,world);
}","/** 
 * Required for creation from map storage 
 */
public ArboristTracker(String s){
  super(s);
}",0.4947368421052631
63676,"@Override public IArboristTracker getBreedingTracker(World world,GameProfile player){
  String filename=""String_Node_Str"" + (player == null ? ""String_Node_Str"" : player.getId());
  ArboristTracker tracker=(ArboristTracker)world.loadItemData(ArboristTracker.class,filename);
  if (tracker == null) {
    tracker=new ArboristTracker(filename,player,world);
    world.setItemData(filename,tracker);
  }
  return tracker;
}","@Override public IArboristTracker getBreedingTracker(World world,GameProfile player){
  String filename=""String_Node_Str"" + (player == null ? ""String_Node_Str"" : player.getId());
  ArboristTracker tracker=(ArboristTracker)world.loadItemData(ArboristTracker.class,filename);
  if (tracker == null) {
    tracker=new ArboristTracker(filename);
    world.setItemData(filename,tracker);
  }
  tracker.setUsername(player);
  tracker.setWorld(world);
  return tracker;
}",0.8086070215175538
63677,"@Override public void researchMutation(IMutation mutation){
  String mutationString=getMutationString(mutation);
  if (!researchedMutations.contains(mutationString)) {
    researchedMutations.add(mutationString);
    markDirty();
    registerMutation(mutation);
  }
}","@Override public void researchMutation(IMutation mutation){
  String mutationString=getMutationString(mutation);
  if (!researchedMutations.contains(mutationString)) {
    researchedMutations.add(mutationString);
    markDirty();
    registerMutation(mutation);
    syncToPlayer(emptyStringCollection,emptyStringCollection,Collections.singleton(mutationString));
  }
}",0.8409448818897638
63678,"protected BreedingTracker(String s,@Nullable GameProfile username,@Nullable World world){
  super(s);
  this.username=username;
  this.world=world;
}","protected BreedingTracker(String s){
  super(s);
}",0.5025125628140703
63679,"@Override public void synchToPlayer(EntityPlayer player){
  if (player instanceof EntityPlayerMP && !(player instanceof FakePlayer)) {
    IBreedingTracker breedingTracker=getBreedingTracker(player);
    String modeName=breedingTracker.getModeName();
    setModeName(modeName);
    NBTTagCompound nbttagcompound=new NBTTagCompound();
    encodeToNBT(nbttagcompound);
    Proxies.net.sendToPlayer(new PacketGenomeTrackerUpdate(nbttagcompound),player);
  }
}","@Override public void synchToPlayer(EntityPlayer player){
  if (player instanceof EntityPlayerMP && !(player instanceof FakePlayer)) {
    IBreedingTracker breedingTracker=getBreedingTracker(player);
    String modeName=breedingTracker.getModeName();
    setModeName(modeName);
    NBTTagCompound nbttagcompound=new NBTTagCompound();
    encodeToNBT(nbttagcompound);
    PacketGenomeTrackerSync packet=new PacketGenomeTrackerSync(nbttagcompound);
    Proxies.net.sendToPlayer(packet,player);
  }
}",0.8625393494228751
63680,"@Override public void registerSpecies(IAlleleSpecies species){
  if (!discoveredSpecies.contains(species.getUID())) {
    discoveredSpecies.add(species.getUID());
    ISpeciesRoot speciesRoot=AlleleManager.alleleRegistry.getSpeciesRoot(speciesRootUID());
    ForestryEvent event=new ForestryEvent.SpeciesDiscovered(speciesRoot,username,species,this);
    MinecraftForge.EVENT_BUS.post(event);
    syncToPlayer();
  }
}","@Override public void registerSpecies(IAlleleSpecies species){
  if (!discoveredSpecies.contains(species.getUID())) {
    discoveredSpecies.add(species.getUID());
    ISpeciesRoot speciesRoot=AlleleManager.alleleRegistry.getSpeciesRoot(speciesRootUID());
    ForestryEvent event=new ForestryEvent.SpeciesDiscovered(speciesRoot,username,species,this);
    MinecraftForge.EVENT_BUS.post(event);
    syncToPlayer(Collections.singleton(species.getUID()),emptyStringCollection,emptyStringCollection);
  }
}",0.9096844396082698
63681,"private void syncToPlayer(){
  if (world != null && username != null) {
    EntityPlayer player=world.getPlayerEntityByName(username.getName());
    synchToPlayer(player);
  }
}","private void syncToPlayer(Collection<String> discoveredSpecies,Collection<String> discoveredMutations,Collection<String> researchedMutations){
  if (world != null && username != null) {
    EntityPlayer player=world.getPlayerEntityByName(username.getName());
    if (player instanceof EntityPlayerMP && !(player instanceof FakePlayer)) {
      IBreedingTracker breedingTracker=getBreedingTracker(player);
      String modeName=breedingTracker.getModeName();
      setModeName(modeName);
      NBTTagCompound nbtTagCompound=new NBTTagCompound();
      writeToNBT(nbtTagCompound,discoveredSpecies,discoveredMutations,researchedMutations);
      PacketGenomeTrackerSync packet=new PacketGenomeTrackerSync(nbtTagCompound);
      Proxies.net.sendToPlayer(packet,player);
    }
  }
}",0.3333333333333333
63682,"private static void readValuesFromNBT(NBTTagCompound nbttagcompound,Collection<String> values,String countKey,String key){
  values.clear();
  if (nbttagcompound.hasKey(countKey)) {
    final int count=nbttagcompound.getInteger(countKey);
    for (int i=0; i < count; i++) {
      String value=nbttagcompound.getString(key + i);
      if (value != null && value.length() > 0) {
        values.add(value);
      }
    }
  }
}","private static void readValuesFromNBT(NBTTagCompound nbttagcompound,Set<String> values,String countKey,String key){
  if (nbttagcompound.hasKey(countKey)) {
    final int count=nbttagcompound.getInteger(countKey);
    for (int i=0; i < count; i++) {
      String value=nbttagcompound.getString(key + i);
      if (value != null && value.length() > 0) {
        values.add(value);
      }
    }
  }
}",0.9623329283110572
63683,"@Override public void writeToNBT(NBTTagCompound nbttagcompound){
  if (modeName != null && !modeName.isEmpty()) {
    nbttagcompound.setString(MODE_NAME_KEY,modeName);
  }
  nbttagcompound.setString(TYPE_KEY,speciesRootUID());
  writeValuesToNBT(nbttagcompound,discoveredSpecies,SPECIES_COUNT_KEY,SPECIES_KEY);
  writeValuesToNBT(nbttagcompound,discoveredMutations,MUTATIONS_COUNT_KEY,MUTATIONS_KEY);
  writeValuesToNBT(nbttagcompound,researchedMutations,RESEARCHED_COUNT_KEY,RESEARCHED_KEY);
}","private void writeToNBT(NBTTagCompound nbtTagCompound,Collection<String> discoveredSpecies,Collection<String> discoveredMutations,Collection<String> researchedMutations){
  if (modeName != null && !modeName.isEmpty()) {
    nbtTagCompound.setString(MODE_NAME_KEY,modeName);
  }
  nbtTagCompound.setString(TYPE_KEY,speciesRootUID());
  writeValuesToNBT(nbtTagCompound,discoveredSpecies,SPECIES_COUNT_KEY,SPECIES_KEY);
  writeValuesToNBT(nbtTagCompound,discoveredMutations,MUTATIONS_COUNT_KEY,MUTATIONS_KEY);
  writeValuesToNBT(nbtTagCompound,researchedMutations,RESEARCHED_COUNT_KEY,RESEARCHED_KEY);
}",0.7586837294332724
63684,"@Override public void registerMutation(IMutation mutation){
  String mutationString=getMutationString(mutation);
  if (!discoveredMutations.contains(mutationString)) {
    discoveredMutations.add(mutationString);
    markDirty();
    ISpeciesRoot speciesRoot=AlleleManager.alleleRegistry.getSpeciesRoot(speciesRootUID());
    ForestryEvent event=new ForestryEvent.MutationDiscovered(speciesRoot,username,mutation,this);
    MinecraftForge.EVENT_BUS.post(event);
    syncToPlayer();
  }
}","@Override public void registerMutation(IMutation mutation){
  String mutationString=getMutationString(mutation);
  if (!discoveredMutations.contains(mutationString)) {
    discoveredMutations.add(mutationString);
    markDirty();
    ISpeciesRoot speciesRoot=AlleleManager.alleleRegistry.getSpeciesRoot(speciesRootUID());
    ForestryEvent event=new ForestryEvent.MutationDiscovered(speciesRoot,username,mutation,this);
    MinecraftForge.EVENT_BUS.post(event);
    syncToPlayer(emptyStringCollection,Collections.singleton(mutationString),emptyStringCollection);
  }
}",0.923222748815166
63685,"private void drawProbabilityArrow(float chance,int x,int y){
  int line=247;
  int column=100;
switch (EnumMutateChance.rateChance(chance)) {
case HIGHEST:
    column=100;
  break;
case HIGHER:
column=100 + 15;
break;
case HIGH:
column=100 + 15 * 2;
break;
case NORMAL:
column=100 + 15 * 3;
break;
case LOW:
column=100 + 15 * 4;
break;
case LOWEST:
column=100 + 15 * 5;
default :
break;
}
Proxies.render.bindTexture(textureFile);
drawTexturedModalRect(x,y,column,line,15,9);
}","private void drawProbabilityArrow(IMutation combination,int x,int y){
  float chance=combination.getBaseChance();
  int line=247;
  int column=100;
switch (EnumMutateChance.rateChance(chance)) {
case HIGHEST:
    column=100;
  break;
case HIGHER:
column=100 + 15;
break;
case HIGH:
column=100 + 15 * 2;
break;
case NORMAL:
column=100 + 15 * 3;
break;
case LOW:
column=100 + 15 * 4;
break;
case LOWEST:
column=100 + 15 * 5;
default :
break;
}
Proxies.render.bindTexture(textureFile);
drawTexturedModalRect(x,y,column,line,15,9);
boolean researched=breedingTracker.isResearched(combination);
if (researched) {
fontRendererObj.drawString(""String_Node_Str"",x + 9,y + 1,0);
GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
}
}",0.7831223628691983
63686,"protected void drawMutationInfo(IMutation combination,IAllele species,int x){
  ItemStack partnerBee=iconStacks.get(combination.getPartner(species).getUID());
  widgetManager.add(new ItemStackWidget(widgetManager,x,textLayout.getLineY(),partnerBee));
  drawProbabilityArrow(combination.getBaseChance(),guiLeft + x + 18,guiTop + textLayout.getLineY() + 4);
  IAllele result=combination.getTemplate()[EnumBeeChromosome.SPECIES.ordinal()];
  ItemStack resultBee=iconStacks.get(result.getUID());
  widgetManager.add(new ItemStackWidget(widgetManager,x + 33,textLayout.getLineY(),resultBee));
}","protected void drawMutationInfo(IMutation combination,IAllele species,int x){
  ItemStack partnerBee=iconStacks.get(combination.getPartner(species).getUID());
  widgetManager.add(new ItemStackWidget(widgetManager,x,textLayout.getLineY(),partnerBee));
  drawProbabilityArrow(combination,guiLeft + x + 18,guiTop + textLayout.getLineY() + 4);
  IAllele result=combination.getTemplate()[EnumBeeChromosome.SPECIES.ordinal()];
  ItemStack resultBee=iconStacks.get(result.getUID());
  widgetManager.add(new ItemStackWidget(widgetManager,x + 33,textLayout.getLineY(),resultBee));
}",0.9862306368330463
63687,"protected void drawAnalyticsPageMutations(IIndividual individual){
  textLayout.startPage(COLUMN_0,COLUMN_1,COLUMN_2);
  textLayout.drawLine(StringUtil.localize(""String_Node_Str"") + ""String_Node_Str"",COLUMN_0);
  textLayout.newLine();
  RenderHelper.enableGUIStandardItemLighting();
  HashMap<IMutation,IAllele> combinations=new HashMap<>();
  for (  IMutation mutation : speciesRoot.getCombinations(individual.getGenome().getPrimary())) {
    combinations.put(mutation,individual.getGenome().getPrimary());
  }
  for (  IMutation mutation : speciesRoot.getCombinations(individual.getGenome().getSecondary())) {
    combinations.put(mutation,individual.getGenome().getSecondary());
  }
  int columnWidth=50;
  int x=0;
  for (  Map.Entry<IMutation,IAllele> mutation : combinations.entrySet()) {
    if (breedingTracker.isDiscovered(mutation.getKey())) {
      drawMutationInfo(mutation.getKey(),mutation.getValue(),COLUMN_0 + x);
    }
 else {
      if (mutation.getKey().isSecret()) {
        continue;
      }
      drawUnknownMutation(mutation.getKey(),COLUMN_0 + x);
    }
    x+=columnWidth;
    if (x >= columnWidth * 4) {
      x=0;
      textLayout.newLine();
    }
  }
  textLayout.endPage();
}","protected void drawAnalyticsPageMutations(IIndividual individual){
  textLayout.startPage(COLUMN_0,COLUMN_1,COLUMN_2);
  textLayout.drawLine(StringUtil.localize(""String_Node_Str"") + ""String_Node_Str"",COLUMN_0);
  textLayout.newLine();
  RenderHelper.enableGUIStandardItemLighting();
  HashMap<IMutation,IAllele> combinations=new HashMap<>();
  for (  IMutation mutation : speciesRoot.getCombinations(individual.getGenome().getPrimary())) {
    combinations.put(mutation,individual.getGenome().getPrimary());
  }
  for (  IMutation mutation : speciesRoot.getCombinations(individual.getGenome().getSecondary())) {
    combinations.put(mutation,individual.getGenome().getSecondary());
  }
  int columnWidth=50;
  int x=0;
  for (  Map.Entry<IMutation,IAllele> mutation : combinations.entrySet()) {
    if (breedingTracker.isDiscovered(mutation.getKey())) {
      drawMutationInfo(mutation.getKey(),mutation.getValue(),COLUMN_0 + x);
    }
 else {
      if (mutation.getKey().isSecret()) {
        continue;
      }
      drawUnknownMutation(mutation.getKey(),COLUMN_0 + x);
    }
    x+=columnWidth;
    if (x >= columnWidth * 4) {
      x=0;
      textLayout.newLine(16);
    }
  }
  textLayout.endPage();
}",0.9991694352159468
63688,"private void drawUnknownMutation(IMutation combination,int x){
  drawQuestionMark(guiLeft + x,guiTop + textLayout.getLineY());
  drawProbabilityArrow(combination.getBaseChance(),guiLeft + x + 18,guiTop + textLayout.getLineY() + 4);
  drawQuestionMark(guiLeft + x + 32,guiTop + textLayout.getLineY());
}","private void drawUnknownMutation(IMutation combination,int x){
  drawQuestionMark(guiLeft + x,guiTop + textLayout.getLineY());
  drawProbabilityArrow(combination,guiLeft + x + 18,guiTop + textLayout.getLineY() + 4);
  drawQuestionMark(guiLeft + x + 32,guiTop + textLayout.getLineY());
}",0.9727891156462584
63689,"protected void drawAnalyticsOverview(){
  textLayout.startPage();
  textLayout.newLine();
  String title=StringUtil.localize(guiName).toUpperCase();
  textLayout.drawCenteredLine(title,8,208,fontColor.get(""String_Node_Str""));
  textLayout.newLine();
  fontRendererObj.drawSplitString(StringUtil.localize(guiName + ""String_Node_Str""),guiLeft + COLUMN_0 + 4,guiTop + 42,200,fontColor.get(""String_Node_Str""));
  textLayout.newLine();
  textLayout.newLine();
  textLayout.newLine();
  textLayout.drawLine(StringUtil.localize(""String_Node_Str"") + ""String_Node_Str"",COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.newLine();
  String mode=breedingTracker.getModeName();
  if (mode != null && !mode.isEmpty()) {
    String rules=StringUtil.localize(guiName + ""String_Node_Str"") + ""String_Node_Str"" + WordUtils.capitalize(mode);
    textLayout.drawCenteredLine(rules,8,208,fontColor.get(guiName + ""String_Node_Str""));
  }
  textLayout.endPage();
}","protected void drawAnalyticsOverview(){
  textLayout.startPage();
  textLayout.newLine();
  String title=StringUtil.localize(guiName).toUpperCase();
  textLayout.drawCenteredLine(title,8,208,fontColor.get(""String_Node_Str""));
  textLayout.newLine();
  fontRendererObj.drawSplitString(StringUtil.localize(guiName + ""String_Node_Str""),guiLeft + COLUMN_0 + 4,guiTop + 42,200,fontColor.get(""String_Node_Str""));
  textLayout.newLine();
  textLayout.newLine();
  textLayout.newLine();
  textLayout.drawLine(StringUtil.localize(""String_Node_Str"") + ""String_Node_Str"",COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.newLine();
  textLayout.drawLine(""String_Node_Str"" + StringUtil.localize(""String_Node_Str""),COLUMN_0 + 4);
  textLayout.endPage();
}",0.8624445340863252
63690,"@Override public void registerPackets(){
  registerClientPacket(new PacketErrorUpdate());
  registerClientPacket(new PacketErrorUpdateEntity());
  registerClientPacket(new PacketGuiUpdate());
  registerClientPacket(new PacketGuiUpdateEntity());
  registerClientPacket(new PacketGuiLayoutSelect());
  registerClientPacket(new PacketGuiEnergy());
  registerClientPacket(new PacketSocketUpdate());
  registerClientPacket(new PacketAccessUpdate());
  registerClientPacket(new PacketAccessUpdateEntity());
  registerClientPacket(new PacketTileStream());
  registerClientPacket(new PacketItemStackDisplay());
  registerClientPacket(new PacketFXSignal());
  registerClientPacket(new PacketTankLevelUpdate());
  registerClientPacket(new PacketGenomeTrackerUpdate());
  registerServerPacket(new PacketGuiSelectRequest());
  registerServerPacket(new PacketPipetteClick());
  registerServerPacket(new PacketAccessSwitch());
  registerServerPacket(new PacketAccessSwitchEntity());
  registerServerPacket(new PacketChipsetClick());
  registerServerPacket(new PacketSolderingIronClick());
}","@Override public void registerPackets(){
  registerClientPacket(new PacketErrorUpdate());
  registerClientPacket(new PacketErrorUpdateEntity());
  registerClientPacket(new PacketGuiUpdate());
  registerClientPacket(new PacketGuiUpdateEntity());
  registerClientPacket(new PacketGuiLayoutSelect());
  registerClientPacket(new PacketGuiEnergy());
  registerClientPacket(new PacketSocketUpdate());
  registerClientPacket(new PacketAccessUpdate());
  registerClientPacket(new PacketAccessUpdateEntity());
  registerClientPacket(new PacketTileStream());
  registerClientPacket(new PacketItemStackDisplay());
  registerClientPacket(new PacketFXSignal());
  registerClientPacket(new PacketTankLevelUpdate());
  registerClientPacket(new PacketGenomeTrackerSync());
  registerServerPacket(new PacketGuiSelectRequest());
  registerServerPacket(new PacketPipetteClick());
  registerServerPacket(new PacketAccessSwitch());
  registerServerPacket(new PacketAccessSwitchEntity());
  registerServerPacket(new PacketChipsetClick());
  registerServerPacket(new PacketSolderingIronClick());
}",0.9953488372093025
63691,"@Override public ILepidopteristTracker getBreedingTracker(World world,GameProfile player){
  String filename=""String_Node_Str"" + (player == null ? ""String_Node_Str"" : player.getId());
  LepidopteristTracker tracker=(LepidopteristTracker)world.loadItemData(LepidopteristTracker.class,filename);
  if (tracker == null) {
    tracker=new LepidopteristTracker(filename,player,world);
    world.setItemData(filename,tracker);
  }
  return tracker;
}","@Override public ILepidopteristTracker getBreedingTracker(World world,GameProfile player){
  String filename=""String_Node_Str"" + (player == null ? ""String_Node_Str"" : player.getId());
  LepidopteristTracker tracker=(LepidopteristTracker)world.loadItemData(LepidopteristTracker.class,filename);
  if (tracker == null) {
    tracker=new LepidopteristTracker(filename);
    world.setItemData(filename,tracker);
  }
  tracker.setUsername(player);
  tracker.setWorld(world);
  return tracker;
}",0.8188638799571275
63692,"public LepidopteristTracker(String s,GameProfile player,World world){
  super(s,player,world);
}","/** 
 * Required for creation from map storage 
 */
public LepidopteristTracker(String s){
  super(s);
}",0.52
63693,"private static void parsePlantableFlowers(Property property,String flowerType){
  for (  String string : property.getStringList()) {
    StackUtils.Stack plantableFlower=StackUtils.parseStackString(string,OreDictionary.WILDCARD_VALUE);
    if (plantableFlower == null) {
      continue;
    }
    Block plantableFlowerBlock=plantableFlower.getBlock();
    int meta=plantableFlower.getMeta();
    if (plantableFlowerBlock != null) {
      FlowerManager.flowerRegistry.registerPlantableFlower(plantableFlowerBlock,meta,1.0,flowerType);
    }
 else {
      Proxies.log.warning(""String_Node_Str"" + plantableFlower + ""String_Node_Str""+ property.getName()+ ""String_Node_Str"");
    }
  }
}","private static void parsePlantableFlowers(Property property,String flowerType){
  for (  String string : property.getStringList()) {
    StackUtils.Stack plantableFlower=StackUtils.parseStackString(string,OreDictionary.WILDCARD_VALUE);
    if (plantableFlower == null) {
      continue;
    }
    Block plantableFlowerBlock=plantableFlower.getBlock();
    int meta=plantableFlower.getMeta();
    if (plantableFlowerBlock != null) {
      FlowerManager.flowerRegistry.registerPlantableFlower(plantableFlowerBlock,meta,1.0,flowerType);
    }
 else {
      Proxies.log.warning(""String_Node_Str"" + string + ""String_Node_Str""+ property.getName()+ ""String_Node_Str"");
    }
  }
}",0.9845018450184502
63694,"public static boolean tryAddStack(IInventory inventory,ItemStack stack,int startSlot,int slots,boolean all,boolean doAdd){
  int added=addStack(inventory,stack,startSlot,slots,doAdd);
  if (all) {
    return added == stack.stackSize;
  }
 else {
    return added > 0;
  }
}","public static boolean tryAddStack(IInventory inventory,ItemStack stack,int startSlot,int slots,boolean all,boolean doAdd){
  int added=addStack(inventory,stack,startSlot,slots,false);
  boolean success=all ? (added == stack.stackSize) : (added > 0);
  if (success && doAdd) {
    addStack(inventory,stack,startSlot,slots,true);
  }
  return success;
}",0.6891025641025641
63695,"private boolean hasFlowers(){
  if (queen == null) {
    return true;
  }
  if (hasFlowersCooldown <= 0) {
    hasFlowersCached=queen.hasFlower(housing);
    hasFlowersCooldown=PluginApiculture.ticksPerBeeWorkCycle / ticksPerCheckCanWork;
    if (!hasFlowersCached) {
      hasFlowersCooldown/=2;
    }
  }
 else {
    hasFlowersCooldown--;
  }
  if (housingSupportsMultipleErrorStates) {
    housing.setErrorCondition(!hasFlowersCached,EnumErrorCode.NOFLOWER);
  }
 else {
    if (hasFlowersCached) {
      housing.setErrorState(EnumErrorCode.OK);
    }
 else {
      housing.setErrorState(EnumErrorCode.NOFLOWER);
    }
  }
  return hasFlowersCached;
}","private boolean hasFlowers(){
  if (queen == null) {
    return true;
  }
  if (hasFlowersCooldown <= 0) {
    hasFlowersCached=queen.hasFlower(housing);
    hasFlowersCooldown=PluginApiculture.ticksPerBeeWorkCycle;
    if (!hasFlowersCached) {
      hasFlowersCooldown/=2;
    }
  }
 else {
    hasFlowersCooldown--;
  }
  if (housingSupportsMultipleErrorStates) {
    housing.setErrorCondition(!hasFlowersCached,EnumErrorCode.NOFLOWER);
  }
 else {
    if (hasFlowersCached) {
      housing.setErrorState(EnumErrorCode.OK);
    }
 else {
      housing.setErrorState(EnumErrorCode.NOFLOWER);
    }
  }
  return hasFlowersCached;
}",0.982101167315175
63696,"@Override public boolean canWork(){
  if (canWorkCooldown > 0) {
    canWorkCooldown--;
  }
 else {
    canWorkCached=checkCanWork();
    canWorkCooldown=ticksPerCheckCanWork;
  }
  return canWorkCached;
}","@Override public boolean canWork(){
  if (housingSupportsMultipleErrorStates) {
    Set<IErrorState> errorStates=housing.getErrorStates();
    for (    IErrorState errorState : errorStates) {
      housing.setErrorCondition(false,errorState);
    }
  }
  boolean hasSpace=addPendingProducts();
  if (hasBreedablePrincess()) {
    return hasSpace;
  }
  if (hasHealthyQueen()) {
    boolean canWork=queenCanWork();
    boolean hasFlowers=hasFlowers();
    return hasSpace && canWork && hasFlowers;
  }
  return false;
}",0.1936376210235131
63697,"private boolean queenCanWork(){
  if (queen == null) {
    return false;
  }
  if (housingSupportsMultipleErrorStates) {
    try {
      Set<IErrorState> errorStates=queen.getCanWork(housing);
      for (      IErrorState errorState : errorStates) {
        housing.setErrorCondition(true,errorState);
      }
      return (errorStates.size() == 0);
    }
 catch (    Throwable ignored) {
    }
  }
  IErrorState state=queen.canWork(housing);
  if (state != EnumErrorCode.OK) {
    housing.setErrorState(state);
    return false;
  }
  return true;
}","private boolean queenCanWork(){
  if (queenCanWorkCooldown > 0) {
    queenCanWorkCooldown--;
  }
 else {
    if (queen == null) {
      return false;
    }
    queenCanWorkCached=checkQueenCanWork();
    queenCanWorkCooldown=ticksPerCheckQueenCanWork;
  }
  Set<IErrorState> errorStates=queenCanWorkCached;
  if (errorStates.size() > 0) {
    if (housingSupportsMultipleErrorStates) {
      for (      IErrorState errorState : errorStates) {
        housing.setErrorCondition(true,errorState);
      }
    }
 else {
      IErrorState state=errorStates.iterator().next();
      housing.setErrorState(state);
    }
    return false;
  }
 else {
    return true;
  }
}",0.5180921052631579
63698,"private boolean hasHealthyQueen(){
  boolean hasQueen=true;
  EnumErrorCode housingErrorState=null;
  ItemStack queenStack=housing.getQueen();
  if (queenStack == null || !ForestryItem.beeQueenGE.isItemEqual(housing.getQueen())) {
    housingErrorState=EnumErrorCode.NOQUEEN;
    hasQueen=false;
    queen=null;
  }
 else   if (!isQueenAlive(queenStack)) {
    if (queen == null) {
      queen=BeeManager.beeRoot.getMember(queenStack);
    }
    killQueen();
    housingErrorState=EnumErrorCode.OK;
    hasQueen=false;
    queen=null;
  }
  if (housingSupportsMultipleErrorStates) {
    housing.setErrorCondition(!hasQueen,EnumErrorCode.NOQUEEN);
  }
 else {
    if (housingErrorState != null) {
      housing.setErrorState(housingErrorState);
    }
  }
  if (hasQueen && queen == null) {
    queen=BeeManager.beeRoot.getMember(queenStack);
  }
  return hasQueen;
}","private boolean hasHealthyQueen(){
  boolean hasQueen=true;
  EnumErrorCode housingErrorState=null;
  ItemStack queenStack=housing.getQueen();
  if (queenStack == null || !ForestryItem.beeQueenGE.isItemEqual(queenStack)) {
    housingErrorState=EnumErrorCode.NOQUEEN;
    hasQueen=false;
    queen=null;
  }
 else   if (!isQueenAlive(queenStack)) {
    if (queen == null) {
      queen=BeeManager.beeRoot.getMember(queenStack);
    }
    killQueen();
    housingErrorState=EnumErrorCode.OK;
    hasQueen=false;
    queen=null;
  }
  if (housingSupportsMultipleErrorStates) {
    housing.setErrorCondition(!hasQueen,EnumErrorCode.NOQUEEN);
  }
 else {
    if (housingErrorState != null) {
      housing.setErrorState(housingErrorState);
    }
  }
  if (hasQueen && queen == null) {
    queen=BeeManager.beeRoot.getMember(queenStack);
  }
  return hasQueen;
}",0.983739837398374
63699,"private static void onPOBoxInfoRequest(EntityPlayer player){
  MailAddress address=new MailAddress(player.getGameProfile());
  POBox pobox=PostRegistry.getPOBox(player.worldObj,address);
  if (pobox == null) {
    return;
  }
  Proxies.net.sendToPlayer(new PacketPOBoxInfo(PacketId.POBOX_INFO,pobox.getPOBoxInfo()),player);
}","private static void onPOBoxInfoRequest(EntityPlayer player){
  MailAddress address=new MailAddress(player.getGameProfile());
  POBox pobox=PostRegistry.getOrCreatePOBox(player.worldObj,address);
  if (pobox == null) {
    return;
  }
  Proxies.net.sendToPlayer(new PacketPOBoxInfo(PacketId.POBOX_INFO,pobox.getPOBoxInfo()),player);
}",0.9878419452887538
63700,"public void readFromNBT(NBTTagCompound nbt){
  if (nbt == null) {
    return;
  }
  if (nbt.hasKey(KEY_SLOTS)) {
    NBTTagCompound nbtSlots=nbt.getCompoundTag(KEY_SLOTS);
    for (int i=0; i < inventoryStacks.length; i++) {
      String slotKey=getSlotNBTKey(i);
      if (nbtSlots.hasKey(slotKey)) {
        NBTTagCompound itemNbt=nbtSlots.getCompoundTag(slotKey);
        ItemStack itemStack=ItemStack.loadItemStackFromNBT(itemNbt);
        inventoryStacks[i]=itemStack;
      }
 else {
        inventoryStacks[i]=null;
      }
    }
  }
 else {
    if (nbt.hasKey(KEY_ITEMS)) {
      for (int i=0; i < inventoryStacks.length; i++) {
        inventoryStacks[i]=null;
      }
      NBTTagList nbttaglist=nbt.getTagList(KEY_ITEMS,10);
      for (int i=0; i < nbttaglist.tagCount(); i++) {
        NBTTagCompound nbttagcompound1=nbttaglist.getCompoundTagAt(i);
        byte byte0=nbttagcompound1.getByte(""String_Node_Str"");
        if (byte0 >= 0 && byte0 < inventoryStacks.length) {
          ItemStack itemStack=ItemStack.loadItemStackFromNBT(nbttagcompound1);
          inventoryStacks[byte0]=itemStack;
        }
      }
      migrateToNewNBT();
    }
  }
}","public void readFromNBT(NBTTagCompound nbt){
  if (nbt == null) {
    return;
  }
  if (nbt.hasKey(KEY_SLOTS)) {
    NBTTagCompound nbtSlots=nbt.getCompoundTag(KEY_SLOTS);
    for (int i=0; i < inventoryStacks.length; i++) {
      String slotKey=getSlotNBTKey(i);
      if (nbtSlots.hasKey(slotKey)) {
        NBTTagCompound itemNbt=nbtSlots.getCompoundTag(slotKey);
        ItemStack itemStack=ItemStack.loadItemStackFromNBT(itemNbt);
        inventoryStacks[i]=itemStack;
      }
 else {
        inventoryStacks[i]=null;
      }
    }
  }
 else {
    if (nbt.hasKey(KEY_ITEMS)) {
      for (int i=0; i < inventoryStacks.length; i++) {
        inventoryStacks[i]=null;
      }
      NBTTagList nbttaglist=nbt.getTagList(KEY_ITEMS,10);
      for (int i=0; i < nbttaglist.tagCount(); i++) {
        NBTTagCompound nbttagcompound1=nbttaglist.getCompoundTagAt(i);
        byte byte0=nbttagcompound1.getByte(""String_Node_Str"");
        if (byte0 >= 0 && byte0 < inventoryStacks.length) {
          ItemStack itemStack=ItemStack.loadItemStackFromNBT(nbttagcompound1);
          inventoryStacks[byte0]=itemStack;
        }
      }
      writeToParentNBT();
    }
  }
}",0.99009900990099
63701,"@Override public final void markDirty(){
}","@Override public final void markDirty(){
  writeToParentNBT();
}",0.7924528301886793
63702,"private void registerFlower(Block block,int meta,double weight,String... flowerTypes){
  if (block == null) {
    return;
  }
  if (weight <= 0.0) {
    weight=0.0;
  }
  if (weight >= 1.0) {
    weight=1.0;
  }
  Flower newFlower=new Flower(block,meta,weight);
  Integer index;
  for (  String flowerType : flowerTypes) {
    List<IFlower> flowers=this.registeredFlowers.get(flowerType);
    index=flowers.indexOf(newFlower);
    if (index == -1) {
      flowers.add(newFlower);
    }
 else     if (flowers.get(index).getWeight() > newFlower.getWeight()) {
      flowers.get(index).setWeight(newFlower.getWeight());
    }
    if (this.chances.containsKey(flowerType)) {
      this.chances.remove(flowerType);
    }
    Collections.sort(this.registeredFlowers.get(flowerType));
  }
}","private void registerFlower(Block block,int meta,double weight,String... flowerTypes){
  if (block == null) {
    return;
  }
  if (weight <= 0.0) {
    weight=0.0;
  }
  if (weight >= 1.0) {
    weight=1.0;
  }
  Flower newFlower=new Flower(block,meta,weight);
  Integer index;
  for (  String flowerType : flowerTypes) {
    List<IFlower> flowers=this.registeredFlowers.get(flowerType);
    index=flowers.indexOf(newFlower);
    if (index == -1) {
      flowers.add(newFlower);
    }
 else     if (flowers.get(index).getMeta() != newFlower.getMeta()) {
      flowers.add(newFlower);
    }
 else     if (flowers.get(index).getWeight() < newFlower.getWeight()) {
      flowers.get(index).setWeight(newFlower.getWeight());
    }
    if (this.chances.containsKey(flowerType)) {
      this.chances.remove(flowerType);
    }
    Collections.sort(this.registeredFlowers.get(flowerType));
  }
}",0.935966487133453
63703,"@Override public void fromPacketPayload(PacketPayload payload){
  EnumFarmBlock farmType=EnumFarmBlock.values()[payload.shortPayload[0]];
  if (payload.shortPayload[1] > 0) {
    makeMaster();
  }
  this.masterY=payload.shortPayload[2];
  if (this.farmBlock != farmType) {
    this.farmBlock=farmType;
    worldObj.func_147479_m(xCoord,yCoord,zCoord);
  }
}","@Override public void fromPacketPayload(PacketPayload payload){
  EnumFarmBlock farmType=EnumFarmBlock.values()[payload.shortPayload[0]];
  if (payload.shortPayload[1] > 0 && !isMaster()) {
    makeMaster();
  }
  this.masterY=payload.shortPayload[2];
  if (this.farmBlock != farmType) {
    this.farmBlock=farmType;
    worldObj.func_147479_m(xCoord,yCoord,zCoord);
  }
}",0.9794238683127572
63704,"@Override public boolean doWork(){
  if (targets == null) {
    Vect targetStart=new Vect(xCoord,yCoord,zCoord);
    int sizeNorthSouth=FarmHelper.getFarmSizeNorthSouth(worldObj,targetStart);
    int sizeEastWest=FarmHelper.getFarmSizeEastWest(worldObj,targetStart);
    allowedExtent=Math.max(sizeNorthSouth,sizeEastWest) * 3;
    targets=createTargets(worldObj,targetStart,allowedExtent,sizeNorthSouth,sizeEastWest);
    setExtents();
  }
 else   if (checkTimer.delayPassed(worldObj,400)) {
    setExtents();
  }
  if (tryAddPending()) {
    return true;
  }
  if (!pendingProduce.isEmpty()) {
    setErrorState(EnumErrorCode.NOSPACE);
    return false;
  }
  if (storedFertilizer <= BUFFER_FERTILIZER) {
    replenishFertilizer();
    if (storedFertilizer <= 0) {
      setErrorState(EnumErrorCode.NOFERTILIZER);
      return false;
    }
  }
  if (!pendingCrops.isEmpty()) {
    if (cullCrop(pendingCrops.peek(),harvestProvider)) {
      pendingCrops.pop();
      return true;
    }
 else {
      return false;
    }
  }
  boolean didWork=false;
  for (  Map.Entry<ForgeDirection,List<FarmTarget>> entry : targets.entrySet()) {
    ForgeDirection farmSide=entry.getKey();
    IFarmLogic logic=getFarmLogic(farmSide);
    if (logic == null) {
      continue;
    }
    if (isCycleCanceledByListeners(logic,farmSide)) {
      continue;
    }
    if (collectWindfall(logic)) {
      didWork=true;
    }
 else {
      List<FarmTarget> farmTargets=entry.getValue();
      if (stage == Stage.HARVEST) {
        didWork=harvestTargets(farmTargets,logic);
      }
 else {
        didWork=cultivateTargets(farmTargets,logic);
      }
    }
    if (didWork) {
      break;
    }
  }
  stage=stage.next();
  return didWork;
}","@Override public boolean doWork(){
  if (targets == null) {
    Vect targetStart=new Vect(xCoord,yCoord,zCoord);
    int sizeNorthSouth=FarmHelper.getFarmSizeNorthSouth(worldObj,targetStart);
    int sizeEastWest=FarmHelper.getFarmSizeEastWest(worldObj,targetStart);
    allowedExtent=Math.max(sizeNorthSouth,sizeEastWest) * 3;
    targets=createTargets(worldObj,targetStart,allowedExtent,sizeNorthSouth,sizeEastWest);
    setExtents();
  }
 else   if (checkTimer.delayPassed(worldObj,400)) {
    setExtents();
  }
  if (tryAddPending()) {
    return true;
  }
  if (!pendingProduce.isEmpty()) {
    setErrorState(EnumErrorCode.NOSPACE);
    return false;
  }
  if (storedFertilizer <= BUFFER_FERTILIZER) {
    replenishFertilizer();
    if (storedFertilizer <= 0) {
      setErrorState(EnumErrorCode.NOFERTILIZER);
      return false;
    }
  }
  if (!pendingCrops.isEmpty()) {
    if (cullCrop(pendingCrops.peek(),harvestProvider)) {
      pendingCrops.pop();
      return true;
    }
 else {
      return false;
    }
  }
  FarmWorkStatus farmWorkStatus=new FarmWorkStatus();
  for (  Map.Entry<ForgeDirection,List<FarmTarget>> entry : targets.entrySet()) {
    ForgeDirection farmSide=entry.getKey();
    IFarmLogic logic=getFarmLogic(farmSide);
    if (logic == null) {
      continue;
    }
    if (isCycleCanceledByListeners(logic,farmSide)) {
      continue;
    }
    if (collectWindfall(logic)) {
      farmWorkStatus.didWork=true;
    }
 else {
      List<FarmTarget> farmTargets=entry.getValue();
      if (stage == Stage.HARVEST) {
        farmWorkStatus.didWork=harvestTargets(farmTargets,logic);
      }
 else {
        farmWorkStatus=cultivateTargets(farmWorkStatus,farmTargets,logic);
      }
    }
    if (farmWorkStatus.didWork) {
      break;
    }
  }
  if (farmWorkStatus.didWork) {
    setErrorState(EnumErrorCode.OK);
  }
 else   if (stage == Stage.CULTIVATE) {
    if (!farmWorkStatus.hasFarmland) {
      setErrorState(EnumErrorCode.NOFARMLAND);
    }
 else     if (!farmWorkStatus.hasFertilizer) {
      setErrorState(EnumErrorCode.NOFERTILIZER);
    }
 else     if (!farmWorkStatus.hasLiquid) {
      setErrorState(EnumErrorCode.NOLIQUID);
    }
  }
  stage=stage.next();
  return farmWorkStatus.didWork;
}",0.854251012145749
63705,"private boolean cultivateTargets(List<FarmTarget> farmTargets,IFarmLogic logic){
  boolean didWork=false;
  boolean hasFarmland=false;
  boolean hasFertilizer=false;
  boolean hasLiquid=false;
  for (  FarmTarget target : farmTargets) {
    if (target.getExtent() <= 0) {
      break;
    }
 else {
      hasFarmland=true;
    }
    if (!hasFertilizer(logic.getFertilizerConsumption())) {
      continue;
    }
 else {
      hasFertilizer=true;
    }
    int liquidAmount=logic.getWaterConsumption(getHydrationModifier());
    FluidStack liquid=Fluids.WATER.getFluid(liquidAmount);
    if (liquid.amount > 0 && !hasLiquid(liquid)) {
      continue;
    }
 else {
      hasLiquid=true;
    }
    if (cultivateTarget(target,logic)) {
      removeFertilizer(logic.getFertilizerConsumption());
      removeLiquid(liquid);
      didWork=true;
    }
  }
  if (!hasFarmland) {
    setErrorState(EnumErrorCode.NOFARMLAND);
  }
 else   if (!hasFertilizer) {
    setErrorState(EnumErrorCode.NOFERTILIZER);
  }
 else   if (!hasLiquid) {
    setErrorState(EnumErrorCode.NOLIQUID);
  }
 else {
    setErrorState(EnumErrorCode.OK);
  }
  return didWork;
}","private FarmWorkStatus cultivateTargets(FarmWorkStatus farmWorkStatus,List<FarmTarget> farmTargets,IFarmLogic logic){
  for (  FarmTarget target : farmTargets) {
    if (target.getExtent() <= 0) {
      break;
    }
 else {
      farmWorkStatus.hasFarmland=true;
    }
    if (!hasFertilizer(logic.getFertilizerConsumption())) {
      continue;
    }
 else {
      farmWorkStatus.hasFertilizer=true;
    }
    int liquidAmount=logic.getWaterConsumption(getHydrationModifier());
    FluidStack liquid=Fluids.WATER.getFluid(liquidAmount);
    if (liquid.amount > 0 && !hasLiquid(liquid)) {
      continue;
    }
 else {
      farmWorkStatus.hasLiquid=true;
    }
    if (cultivateTarget(target,logic)) {
      removeFertilizer(logic.getFertilizerConsumption());
      removeLiquid(liquid);
      farmWorkStatus.didWork=true;
    }
  }
  return farmWorkStatus;
}",0.736
63706,"private void drawTradePreview(int x,int y){
  fontRendererObj.drawString(boldUnderline + container.getTradeInfo().address.getName(),x,y,fontColor.get(""String_Node_Str""));
  TradeStationInfo info=container.getTradeInfo();
  fontRendererObj.drawString(String.format(StringUtil.localize(""String_Node_Str""),info.owner.getName()),x,y + 18,fontColor.get(""String_Node_Str""));
  clearTradeInfoWidgets();
  addTradeInfoWidget(new ItemStackWidget(x - guiLeft,y - guiTop + 28,info.tradegood));
  fontRendererObj.drawString(StringUtil.localize(""String_Node_Str""),x,y + 46,fontColor.get(""String_Node_Str""));
  for (int i=0; i < container.getTradeInfo().required.length; i++) {
    addTradeInfoWidget(new ItemStackWidget(x - guiLeft + i * 18,y - guiTop + 56,info.required[i]));
  }
  if (info.state.isOk())   fontRendererObj.drawSplitString(EnumChatFormatting.DARK_GREEN + StringUtil.localize(""String_Node_Str"" + info.state.getIdentifier()),x,y + 82,119,fontColor.get(""String_Node_Str""));
 else   fontRendererObj.drawSplitString(EnumChatFormatting.DARK_RED + StringUtil.localize(""String_Node_Str"" + info.state.getIdentifier()),x,y + 82,119,fontColor.get(""String_Node_Str""));
}","private void drawTradePreview(int x,int y){
  fontRendererObj.drawString(boldUnderline + container.getTradeInfo().address.getName(),x,y,fontColor.get(""String_Node_Str""));
  TradeStationInfo info=container.getTradeInfo();
  fontRendererObj.drawString(String.format(StringUtil.localize(""String_Node_Str""),info.owner.getName()),x,y + 18,fontColor.get(""String_Node_Str""));
  addTradeInfoWidget(new ItemStackWidget(x - guiLeft,y - guiTop + 28,info.tradegood));
  fontRendererObj.drawString(StringUtil.localize(""String_Node_Str""),x,y + 46,fontColor.get(""String_Node_Str""));
  for (int i=0; i < container.getTradeInfo().required.length; i++) {
    addTradeInfoWidget(new ItemStackWidget(x - guiLeft + i * 18,y - guiTop + 56,info.required[i]));
  }
  if (info.state.isOk())   fontRendererObj.drawSplitString(EnumChatFormatting.DARK_GREEN + StringUtil.localize(""String_Node_Str"" + info.state.getIdentifier()),x,y + 82,119,fontColor.get(""String_Node_Str""));
 else   fontRendererObj.drawSplitString(EnumChatFormatting.DARK_RED + StringUtil.localize(""String_Node_Str"" + info.state.getIdentifier()),x,y + 82,119,fontColor.get(""String_Node_Str""));
}",0.9882455376578144
63707,"@Override protected void drawGuiContainerBackgroundLayer(float var1,int mouseX,int mouseY){
  super.drawGuiContainerBackgroundLayer(var1,mouseX,mouseY);
  fontRendererObj.drawString(String.format(""String_Node_Str"",container.getCurrentPos(),container.getMaxCount()),guiLeft + xSize - 72,guiTop + 12,fontColor.get(""String_Node_Str""));
  if (container.getTradeInfo() != null)   drawTradePreview(guiLeft + 38,guiTop + 30);
 else   drawNoTrade(guiLeft + 38,guiTop + 30);
  buttonFilter.displayString=StringUtil.localize(""String_Node_Str"" + container.getFilterIdent());
  buttonCopy.enabled=container.getTradeInfo() != null && container.getTradeInfo().state.isOk();
}","@Override protected void drawGuiContainerBackgroundLayer(float var1,int mouseX,int mouseY){
  super.drawGuiContainerBackgroundLayer(var1,mouseX,mouseY);
  fontRendererObj.drawString(String.format(""String_Node_Str"",container.getCurrentPos(),container.getMaxCount()),guiLeft + xSize - 72,guiTop + 12,fontColor.get(""String_Node_Str""));
  clearTradeInfoWidgets();
  if (container.getTradeInfo() != null)   drawTradePreview(guiLeft + 38,guiTop + 30);
 else   drawNoTrade(guiLeft + 38,guiTop + 30);
  buttonFilter.displayString=StringUtil.localize(""String_Node_Str"" + container.getFilterIdent());
  buttonCopy.enabled=container.getTradeInfo() != null && container.getTradeInfo().state.isOk();
}",0.9799851742031134
63708,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int facing,float facingX,float facingY,float facingZ){
  boolean flag=false;
  int meta=world.getBlockMetadata(x,y,z);
  boolean toggleLitState=true;
  ItemStack held=player.getCurrentEquippedItem();
  if (!isLit(meta)) {
    if (held == null || !lightingItems.contains(held.getItem())) {
      toggleLitState=false;
    }
 else     if (StackUtils.equals(this,held) && isLit(held)) {
      toggleLitState=true;
    }
  }
  if (held != null) {
    TileCandle te=(TileCandle)world.getTileEntity(x,y,z);
    if (te == null) {
      world.setTileEntity(x,y,z,this.createTileEntity(world,meta));
    }
    if (StackUtils.equals(this,held)) {
      if (!isLit(held)) {
        if (held.hasTagCompound() && held.getTagCompound().hasKey(colourTagName)) {
          te.setColour(held.getTagCompound().getInteger(colourTagName));
        }
 else {
          te.setColour(0xffffff);
        }
      }
 else {
        toggleLitState=true;
      }
      flag=true;
    }
 else {
      boolean matched=false;
      for (int i=0; i < dyes.length; ++i) {
        for (        ItemStack stack : OreDictionary.getOres(dyes[i])) {
          if (OreDictionary.itemMatches(stack,held,true)) {
            if (isLit(meta)) {
              te.setColour(colours[i][0],colours[i][1],colours[i][2]);
            }
 else {
              te.addColour(colours[i][0],colours[i][1],colours[i][2]);
            }
            world.markBlockForUpdate(x,y,z);
            matched=true;
            toggleLitState=false;
            flag=true;
            break;
          }
        }
        if (matched) {
          break;
        }
      }
    }
  }
  if (toggleLitState) {
    meta=this.toggleLitStatus(meta);
    world.setBlockMetadataWithNotify(x,y,z,meta,Defaults.FLAG_BLOCK_SYNCH | Defaults.FLAG_BLOCK_UPDATE);
    flag=true;
  }
  return flag;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int facing,float facingX,float facingY,float facingZ){
  boolean flag=false;
  int meta=world.getBlockMetadata(x,y,z);
  boolean toggleLitState=true;
  ItemStack held=player.getCurrentEquippedItem();
  if (!isLit(meta)) {
    if (held == null || !lightingItems.contains(held.getItem())) {
      toggleLitState=false;
    }
 else     if (StackUtils.equals(this,held) && isLit(held)) {
      toggleLitState=true;
    }
  }
  if (held != null) {
    TileCandle te=(TileCandle)world.getTileEntity(x,y,z);
    if (te == null) {
      world.setTileEntity(x,y,z,this.createTileEntity(world,meta));
      te=(TileCandle)world.getTileEntity(x,y,z);
    }
    if (StackUtils.equals(this,held)) {
      if (!isLit(held)) {
        if (held.hasTagCompound() && held.getTagCompound().hasKey(colourTagName)) {
          te.setColour(held.getTagCompound().getInteger(colourTagName));
        }
 else {
          te.setColour(0xffffff);
        }
      }
 else {
        toggleLitState=true;
      }
      flag=true;
    }
 else {
      boolean matched=false;
      for (int i=0; i < dyes.length; ++i) {
        for (        ItemStack stack : OreDictionary.getOres(dyes[i])) {
          if (OreDictionary.itemMatches(stack,held,true)) {
            if (isLit(meta)) {
              te.setColour(colours[i][0],colours[i][1],colours[i][2]);
            }
 else {
              te.addColour(colours[i][0],colours[i][1],colours[i][2]);
            }
            world.markBlockForUpdate(x,y,z);
            matched=true;
            toggleLitState=false;
            flag=true;
            break;
          }
        }
        if (matched) {
          break;
        }
      }
    }
  }
  if (toggleLitState) {
    meta=this.toggleLitStatus(meta);
    world.setBlockMetadataWithNotify(x,y,z,meta,Defaults.FLAG_BLOCK_SYNCH | Defaults.FLAG_BLOCK_UPDATE);
    flag=true;
  }
  return flag;
}",0.9873417721518988
63709,"@Override public Collection<ICrop> harvest(int x,int y,int z,ForgeDirection direction,int extent){
  World world=getWorld();
  Stack<ICrop> crops=new Stack<ICrop>();
  for (int i=0; i < extent; i++) {
    Vect position=translateWithOffset(x,y,z,direction,i);
    ItemStack occupant=getAsItemStack(position);
    if (occupant == null)     continue;
    Block block=BlockSoil.getBlockFromItem(occupant.getItem());
    if (block == null || !(block instanceof BlockSoil))     continue;
    BlockSoil blockSoil=(BlockSoil)block;
    BlockSoil.SoilType soilType=blockSoil.getTypeFromMeta(occupant.getItemDamage());
    if (soilType == BlockSoil.SoilType.PEAT)     crops.push(new CropPeat(world,position));
  }
  return crops;
}","@Override public Collection<ICrop> harvest(int x,int y,int z,ForgeDirection direction,int extent){
  World world=getWorld();
  Stack<ICrop> crops=new Stack<ICrop>();
  for (int i=0; i < extent; i++) {
    Vect position=translateWithOffset(x,y,z,direction,i);
    ItemStack occupant=getAsItemStack(position);
    if (occupant.getItem() == null)     continue;
    Block block=BlockSoil.getBlockFromItem(occupant.getItem());
    if (block == null || !(block instanceof BlockSoil))     continue;
    BlockSoil blockSoil=(BlockSoil)block;
    BlockSoil.SoilType soilType=blockSoil.getTypeFromMeta(occupant.getItemDamage());
    if (soilType == BlockSoil.SoilType.PEAT)     crops.push(new CropPeat(world,position));
  }
  return crops;
}",0.9931129476584022
63710,"@Override public ItemStack getCraftingResult(InventoryCrafting crafting){
  IButterfly butterfly=null;
  IButterfly serum=null;
  for (int i=0; i < crafting.getSizeInventory(); i++) {
    if (PluginLepidopterology.butterflyInterface.isMember(crafting.getStackInSlot(i),EnumFlutterType.BUTTERFLY.ordinal())) {
      butterfly=PluginLepidopterology.butterflyInterface.getMember(crafting.getStackInSlot(i));
    }
 else     if (PluginLepidopterology.butterflyInterface.isMember(crafting.getStackInSlot(i),EnumFlutterType.SERUM.ordinal()))     serum=PluginLepidopterology.butterflyInterface.getMember(crafting.getStackInSlot(i));
  }
  IButterfly mated=butterfly.copy();
  mated.mate(serum);
  return PluginLepidopterology.butterflyInterface.getMemberStack(mated,EnumFlutterType.BUTTERFLY.ordinal());
}","@Override public ItemStack getCraftingResult(InventoryCrafting crafting){
  IButterfly butterfly=null;
  IButterfly serum=null;
  for (int i=0; i < crafting.getSizeInventory(); i++) {
    if (PluginLepidopterology.butterflyInterface.isMember(crafting.getStackInSlot(i),EnumFlutterType.BUTTERFLY.ordinal())) {
      butterfly=PluginLepidopterology.butterflyInterface.getMember(crafting.getStackInSlot(i));
    }
 else     if (PluginLepidopterology.butterflyInterface.isMember(crafting.getStackInSlot(i),EnumFlutterType.SERUM.ordinal()))     serum=PluginLepidopterology.butterflyInterface.getMember(crafting.getStackInSlot(i));
  }
  if (butterfly == null || serum == null)   return null;
  IButterfly mated=butterfly.copy();
  mated.mate(serum);
  return PluginLepidopterology.butterflyInterface.getMemberStack(mated,EnumFlutterType.BUTTERFLY.ordinal());
}",0.9655172413793104
63711,"@Override public boolean shouldExecute(){
  player=entity.worldObj.getClosestPlayerToEntity(entity,entity.getButterfly().getGenome().getPrimary().getFlightDistance());
  if (player == null || player.isSneaking())   return false;
  if (!entity.getEntitySenses().canSee(player))   return false;
  flightTarget=getRandomDestination();
  if (flightTarget == null)   return false;
  if (player.getDistanceSq(flightTarget.posX,flightTarget.posY,flightTarget.posZ) < player.getDistanceSqToEntity(entity))   return false;
  entity.setDestination(flightTarget);
  entity.setState(EnumButterflyState.FLYING);
  return true;
}","@Override public boolean shouldExecute(){
  EntityPlayer player=entity.worldObj.getClosestPlayerToEntity(entity,entity.getButterfly().getGenome().getPrimary().getFlightDistance());
  if (player == null || player.isSneaking())   return false;
  if (!entity.getEntitySenses().canSee(player))   return false;
  flightTarget=getRandomDestination();
  if (flightTarget == null)   return false;
  if (player.getDistanceSq(flightTarget.posX,flightTarget.posY,flightTarget.posZ) < player.getDistanceSqToEntity(entity))   return false;
  entity.setDestination(flightTarget);
  entity.setState(EnumButterflyState.FLYING);
  return true;
}",0.989541432019308
63712,"@Override public IInventory getInventory(){
  return getInternalInventory();
}","@Override public final IInventory getInventory(){
  return getStructureInventory();
}",0.8834355828220859
63713,"@Override protected void updateServerSide(){
  super.updateServerSide();
  if (transferTime <= 0 && liquidTank.getFluidAmount() > 0) {
    currentRecipe=getRecipe(liquidTank.getFluid());
    if (currentRecipe != null) {
      liquidTank.drain(currentRecipe.liquid.amount,true);
      transferTime=currentRecipe.transferTime;
    }
  }
  if (transferTime > 0) {
    transferTime--;
    if (currentRecipe != null) {
      IAlvearyComponent component=(IAlvearyComponent)this.getCentralTE();
      if (component != null) {
        component.addHumidityChange(currentRecipe.humidChange,0.0f,1.0f);
        component.addTemperatureChange(currentRecipe.tempChange,0.0f,2.0f);
      }
    }
 else     transferTime=0;
  }
  if (worldObj.getTotalWorldTime() % 20 * 10 != 0)   return;
  TileInventoryAdapter canInventory=getInternalInventory();
  if (canInventory.getStackInSlot(0) != null) {
    FluidHelper.drainContainers(tankManager,canInventory,0);
  }
}","@Override protected void updateServerSide(){
  super.updateServerSide();
  if (transferTime <= 0 && liquidTank.getFluidAmount() > 0) {
    currentRecipe=getRecipe(liquidTank.getFluid());
    if (currentRecipe != null) {
      liquidTank.drain(currentRecipe.liquid.amount,true);
      transferTime=currentRecipe.transferTime;
    }
  }
  if (transferTime > 0) {
    transferTime--;
    if (currentRecipe != null) {
      IAlvearyComponent component=(IAlvearyComponent)this.getCentralTE();
      if (component != null) {
        component.addHumidityChange(currentRecipe.humidChange,0.0f,1.0f);
        component.addTemperatureChange(currentRecipe.tempChange,0.0f,2.0f);
      }
    }
 else     transferTime=0;
  }
  if (worldObj.getTotalWorldTime() % 20 * 10 != 0)   return;
  TileInventoryAdapter canInventory=getInternalInventory();
  if (canInventory.getStackInSlot(0) != null)   FluidHelper.drainContainers(tankManager,canInventory,0);
}",0.9957627118644068
63714,"@Override public void setInventorySlotContents(int slotIndex,ItemStack itemstack){
  TileInventoryAdapter inventory=getInternalInventory();
  if (inventory == null && !Proxies.common.isSimulating(worldObj))   createInventory();
  IInventory inv=getStructureInventory();
  if (inv != null)   inv.setInventorySlotContents(slotIndex,itemstack);
}","@Override public void setInventorySlotContents(int slotIndex,ItemStack itemstack){
  IInventory inv=getStructureInventory();
  if (inv == null && !Proxies.common.isSimulating(worldObj)) {
    createInventory();
    inv=getInternalInventory();
  }
  if (inv != null)   inv.setInventorySlotContents(slotIndex,itemstack);
}",0.8446455505279035
63715,"@Override public boolean canExtractItem(int slotIndex,ItemStack itemstack,int side){
  TileInventoryAdapter inventory=getInternalInventory();
  if (inventory == null)   return false;
  if (!inventory.canExtractItem(slotIndex,itemstack,side))   return false;
  return slotIndex != SLOT_QUEEN && slotIndex != SLOT_DRONE;
}","@Override public boolean canExtractItem(int slotIndex,ItemStack itemstack,int side){
  ISidedInventory inventory=getStructureInventory();
  if (inventory == null)   return false;
  if (!inventory.canExtractItem(slotIndex,itemstack,side))   return false;
  return slotIndex != SLOT_QUEEN && slotIndex != SLOT_DRONE;
}",0.9182389937106918
63716,"private int getHealthDisplay(){
  IInventory inventory=getInternalInventory();
  if (inventory == null || inventory.getStackInSlot(SLOT_QUEEN) == null)   return 0;
  if (PluginApiculture.beeInterface.isMated(inventory.getStackInSlot(SLOT_QUEEN)))   return PluginApiculture.beeInterface.getMember(inventory.getStackInSlot(SLOT_QUEEN)).getHealth();
 else   if (!PluginApiculture.beeInterface.isDrone(inventory.getStackInSlot(SLOT_QUEEN)))   return displayHealth;
 else   return 0;
}","private int getHealthDisplay(){
  IInventory inventory=getStructureInventory();
  if (inventory == null || inventory.getStackInSlot(SLOT_QUEEN) == null)   return 0;
  if (PluginApiculture.beeInterface.isMated(inventory.getStackInSlot(SLOT_QUEEN)))   return PluginApiculture.beeInterface.getMember(inventory.getStackInSlot(SLOT_QUEEN)).getHealth();
 else   if (!PluginApiculture.beeInterface.isDrone(inventory.getStackInSlot(SLOT_QUEEN)))   return displayHealth;
 else   return 0;
}",0.9823100936524454
63717,"private int getMaxHealthDisplay(){
  IInventory inventory=getInternalInventory();
  if (inventory == null || inventory.getStackInSlot(SLOT_QUEEN) == null)   return 0;
  if (PluginApiculture.beeInterface.isMated(inventory.getStackInSlot(SLOT_QUEEN)))   return PluginApiculture.beeInterface.getMember(inventory.getStackInSlot(SLOT_QUEEN)).getMaxHealth();
 else   if (!PluginApiculture.beeInterface.isDrone(inventory.getStackInSlot(SLOT_QUEEN)))   return displayHealthMax;
 else   return 0;
}","private int getMaxHealthDisplay(){
  IInventory inventory=getStructureInventory();
  if (inventory == null || inventory.getStackInSlot(SLOT_QUEEN) == null)   return 0;
  if (PluginApiculture.beeInterface.isMated(inventory.getStackInSlot(SLOT_QUEEN)))   return PluginApiculture.beeInterface.getMember(inventory.getStackInSlot(SLOT_QUEEN)).getMaxHealth();
 else   if (!PluginApiculture.beeInterface.isDrone(inventory.getStackInSlot(SLOT_QUEEN)))   return displayHealthMax;
 else   return 0;
}",0.982635342185904
63718,"@Override protected void updateServerSide(){
  if (beekeepingLogic == null)   return;
  if (!isMaster())   return;
  beekeepingLogic.update();
  equalizeTemperature();
  equalizeHumidity();
  IBee queen=beekeepingLogic.getQueen();
  if (queen == null)   return;
  if (worldObj.getTotalWorldTime() % 200 * 10 == 0)   onQueenChange(getInternalInventory().getStackInSlot(SLOT_QUEEN));
  if (getErrorState() == EnumErrorCode.OK)   queen.doFX(beekeepingLogic.getEffectData(),this);
  if (getErrorState() == EnumErrorCode.OK && worldObj.getTotalWorldTime() % 50 == 0) {
    float f=xCoord + 0.5F;
    float f1=yCoord + 0.0F + (worldObj.rand.nextFloat() * 6F) / 16F;
    float f2=zCoord + 0.5F;
    float f3=0.52F;
    float f4=worldObj.rand.nextFloat() * 0.6F - 0.3F;
    Proxies.common.addEntitySwarmFX(worldObj,(f - f3),f1,(f2 + f4),0F,0F,0F);
    Proxies.common.addEntitySwarmFX(worldObj,(f + f3),f1,(f2 + f4),0F,0F,0F);
    Proxies.common.addEntitySwarmFX(worldObj,(f + f4),f1,(f2 - f3),0F,0F,0F);
    Proxies.common.addEntitySwarmFX(worldObj,(f + f4),f1,(f2 + f3),0F,0F,0F);
  }
}","@Override protected void updateServerSide(){
  if (beekeepingLogic == null)   return;
  if (!isMaster())   return;
  beekeepingLogic.update();
  equalizeTemperature();
  equalizeHumidity();
  IBee queen=beekeepingLogic.getQueen();
  if (queen == null)   return;
  if (worldObj.getTotalWorldTime() % 200 * 10 == 0)   onQueenChange(getStructureInventory().getStackInSlot(SLOT_QUEEN));
  if (getErrorState() == EnumErrorCode.OK)   queen.doFX(beekeepingLogic.getEffectData(),this);
  if (getErrorState() == EnumErrorCode.OK && worldObj.getTotalWorldTime() % 50 == 0) {
    float f=xCoord + 0.5F;
    float f1=yCoord + 0.0F + (worldObj.rand.nextFloat() * 6F) / 16F;
    float f2=zCoord + 0.5F;
    float f3=0.52F;
    float f4=worldObj.rand.nextFloat() * 0.6F - 0.3F;
    Proxies.common.addEntitySwarmFX(worldObj,(f - f3),f1,(f2 + f4),0F,0F,0F);
    Proxies.common.addEntitySwarmFX(worldObj,(f + f3),f1,(f2 + f4),0F,0F,0F);
    Proxies.common.addEntitySwarmFX(worldObj,(f + f4),f1,(f2 - f3),0F,0F,0F);
    Proxies.common.addEntitySwarmFX(worldObj,(f + f4),f1,(f2 + f3),0F,0F,0F);
  }
}",0.9921259842519684
63719,"@Override public boolean addProduct(ItemStack product,boolean all){
  TileInventoryAdapter inventory=getInternalInventory();
  if (inventory == null)   return false;
  return inventory.tryAddStack(product,SLOT_PRODUCT_1,inventory.getSizeInventory() - SLOT_PRODUCT_1,all);
}","@Override public boolean addProduct(ItemStack product,boolean all){
  TileInventoryAdapter inventory=getStructureInventory();
  if (inventory == null)   return false;
  return inventory.tryAddStack(product,SLOT_PRODUCT_1,inventory.getSizeInventory() - SLOT_PRODUCT_1,all);
}",0.9689213893967094
63720,"@Override public int[] getAccessibleSlotsFromSide(int side){
  TileInventoryAdapter inventory=getInternalInventory();
  if (inventory == null)   return Defaults.FACINGS_NONE;
  return inventory.getAccessibleSlotsFromSide(side);
}","@Override public int[] getAccessibleSlotsFromSide(int side){
  ISidedInventory inventory=getStructureInventory();
  if (inventory == null)   return Defaults.FACINGS_NONE;
  return inventory.getAccessibleSlotsFromSide(side);
}",0.8854625550660793
63721,"@Override protected void updateClientSide(){
  if (!isMaster())   return;
  if (getInternalInventory() == null)   return;
  if (PluginApiculture.beeInterface.isMated(getInternalInventory().getStackInSlot(SLOT_QUEEN)))   if (getErrorState() == EnumErrorCode.OK && worldObj.getTotalWorldTime() % 2 == 0) {
    IBee displayQueen=PluginApiculture.beeInterface.getMember(getInternalInventory().getStackInSlot(SLOT_QUEEN));
    displayQueen.doFX(beekeepingLogic.getEffectData(),this);
  }
}","@Override protected void updateClientSide(){
  if (!isMaster())   return;
  if (getStructureInventory() == null)   return;
  if (PluginApiculture.beeInterface.isMated(getStructureInventory().getStackInSlot(SLOT_QUEEN)))   if (getErrorState() == EnumErrorCode.OK && worldObj.getTotalWorldTime() % 2 == 0) {
    IBee displayQueen=PluginApiculture.beeInterface.getMember(getStructureInventory().getStackInSlot(SLOT_QUEEN));
    displayQueen.doFX(beekeepingLogic.getEffectData(),this);
  }
}",0.9474768280123584
63722,"private IInventory getStructureInventory(){
  TileInventoryAdapter inventory=getInternalInventory();
  if (inventory != null) {
    if (isMaster() || !Proxies.common.isSimulating(worldObj))     return inventory;
  }
 else   if (hasMaster()) {
    ITileStructure central=getCentralTE();
    if (central != null)     return central.getInventory();
  }
  return null;
}","@Override public TileInventoryAdapter getStructureInventory(){
  TileInventoryAdapter inventory=getInternalInventory();
  if (inventory != null) {
    if (isMaster() || !Proxies.common.isSimulating(worldObj))     return inventory;
  }
 else   if (hasMaster()) {
    ITileStructure central=getCentralTE();
    if (central != null)     return (TileInventoryAdapter)central.getInventory();
  }
  return null;
}",0.9029754204398448
63723,"@Override public boolean isItemValidForSlot(int slotIndex,ItemStack itemstack){
  TileInventoryAdapter inventory=getInternalInventory();
  if (inventory == null)   return false;
  if (!inventory.isItemValidForSlot(slotIndex,itemstack))   return false;
  if (slotIndex == SLOT_QUEEN && PluginApiculture.beeInterface.isMember(itemstack) && !PluginApiculture.beeInterface.isDrone(itemstack))   return true;
  return slotIndex == SLOT_DRONE && PluginApiculture.beeInterface.isDrone(itemstack);
}","@Override public boolean isItemValidForSlot(int slotIndex,ItemStack itemstack){
  ISidedInventory inventory=getStructureInventory();
  if (inventory == null)   return false;
  if (!inventory.isItemValidForSlot(slotIndex,itemstack))   return false;
  if (slotIndex == SLOT_QUEEN && PluginApiculture.beeInterface.isMember(itemstack) && !PluginApiculture.beeInterface.isDrone(itemstack))   return true;
  return slotIndex == SLOT_DRONE && PluginApiculture.beeInterface.isDrone(itemstack);
}",0.9652351738241308
63724,"public int getIcon(int side,int metadata){
  if (side == 0 || side == 1)   return BlockAlveary.BOTTOM;
  return BlockAlveary.STABILISER;
}","@Override public int getIcon(int side,int metadata){
  if (side == 0 || side == 1)   return BlockAlveary.BOTTOM;
  return BlockAlveary.STABILISER;
}",0.965034965034965
63725,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block neighbour){
  if (Proxies.common.isSimulating(world) && !this.canBlockStay(world,x,y,z)) {
    dropAsSapling(world,x,y,z);
    world.setBlockToAir(x,y,z);
  }
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block neighbour){
  super.onNeighborBlockChange(world,x,y,z,neighbour);
  if (Proxies.common.isSimulating(world) && !this.canBlockStay(world,x,y,z)) {
    dropAsSapling(world,x,y,z);
    world.setBlockToAir(x,y,z);
  }
}",0.898876404494382
63726,"@Override public void initialize(){
  super.initialize();
  this.biome=Utils.getBiomeAt(worldObj,xCoord,zCoord);
  setErrorState(EnumErrorCode.OK);
}","@Override public void initialize(){
  super.initialize();
  setBiomeInformation();
}",0.6609442060085837
63727,"/** 
 * Writes the actual data to the packet payload
 * @param obj {@link TileForestry} to write to packet
 * @param intPayload
 * @param floatPayload
 * @param stringPayload
 * @param index
 */
@SuppressWarnings(""String_Node_Str"") public void setData(Object obj,int[] intPayload,float[] floatPayload,String[] stringPayload,IndexInPayload index) throws IllegalAccessException {
  for (  Field member : intMember) {
    intPayload[index.intIndex]=member.getInt(obj);
    index.intIndex++;
  }
  for (  Field member : floatMember) {
    floatPayload[index.floatIndex]=member.getFloat(obj);
    index.floatIndex++;
  }
  for (  Field member : booleanMember) {
    if (member.getBoolean(obj))     floatPayload[index.intIndex]=1;
 else     floatPayload[index.intIndex]=0;
    index.intIndex++;
  }
  for (  Field member : stringMember) {
    stringPayload[index.stringIndex]=(String)member.get(obj);
    index.stringIndex++;
  }
  for (  Field member : enumMember) {
    intPayload[index.intIndex]=((Enum)member.get(obj)).ordinal();
    index.intIndex++;
  }
  for (  Field member : gameProfileMember) {
    GameProfile profile=(GameProfile)member.get(obj);
    UUID profileID=profile.getId();
    if (profileID == null)     profileID=new UUID(0,0);
    intPayload[index.intIndex]=(int)profileID.getMostSignificantBits() >>> 32;
    intPayload[index.intIndex + 1]=(int)profileID.getMostSignificantBits();
    intPayload[index.intIndex + 2]=(int)profileID.getLeastSignificantBits() >>> 32;
    intPayload[index.intIndex + 3]=(int)profileID.getLeastSignificantBits();
    index.intIndex+=4;
    stringPayload[index.stringIndex]=profile.getName();
    index.stringIndex++;
  }
  for (  ClassMap submap : objectMember) {
    Object source=submap.field.get(obj);
    if (source == null) {
      intPayload[index.intIndex]=0;
      index.intIndex++;
      index.intIndex+=submap.intSize;
      index.floatIndex+=submap.floatSize;
      index.stringIndex+=submap.stringSize;
    }
 else {
      intPayload[index.intIndex]=1;
      index.intIndex++;
      submap.setData(source,intPayload,floatPayload,stringPayload,index);
    }
  }
}","/** 
 * Writes the actual data to the packet payload
 * @param obj {@link TileForestry} to write to packet
 * @param intPayload
 * @param floatPayload
 * @param stringPayload
 * @param index
 */
@SuppressWarnings(""String_Node_Str"") public void setData(Object obj,int[] intPayload,float[] floatPayload,String[] stringPayload,IndexInPayload index) throws IllegalAccessException {
  for (  Field member : intMember) {
    intPayload[index.intIndex]=member.getInt(obj);
    index.intIndex++;
  }
  for (  Field member : floatMember) {
    floatPayload[index.floatIndex]=member.getFloat(obj);
    index.floatIndex++;
  }
  for (  Field member : booleanMember) {
    if (member.getBoolean(obj))     floatPayload[index.intIndex]=1;
 else     floatPayload[index.intIndex]=0;
    index.intIndex++;
  }
  for (  Field member : stringMember) {
    stringPayload[index.stringIndex]=(String)member.get(obj);
    index.stringIndex++;
  }
  for (  Field member : enumMember) {
    intPayload[index.intIndex]=((Enum)member.get(obj)).ordinal();
    index.intIndex++;
  }
  for (  Field member : gameProfileMember) {
    GameProfile profile=(GameProfile)member.get(obj);
    UUID profileID=profile.getId();
    if (profileID == null)     profileID=new UUID(0,0);
    intPayload[index.intIndex]=(int)(profileID.getMostSignificantBits() >>> 32);
    intPayload[index.intIndex + 1]=(int)profileID.getMostSignificantBits();
    intPayload[index.intIndex + 2]=(int)(profileID.getLeastSignificantBits() >>> 32);
    intPayload[index.intIndex + 3]=(int)profileID.getLeastSignificantBits();
    index.intIndex+=4;
    stringPayload[index.stringIndex]=profile.getName();
    index.stringIndex++;
  }
  for (  ClassMap submap : objectMember) {
    Object source=submap.field.get(obj);
    if (source == null) {
      intPayload[index.intIndex]=0;
      index.intIndex++;
      index.intIndex+=submap.intSize;
      index.floatIndex+=submap.floatSize;
      index.stringIndex+=submap.stringSize;
    }
 else {
      intPayload[index.intIndex]=1;
      index.intIndex++;
      submap.setData(source,intPayload,floatPayload,stringPayload,index);
    }
  }
}",0.9990583804143126
63728,"@Override public void updateServerSide(){
  if (ic2EnergySink == null) {
    setErrorState(EnumErrorCode.NOENERGYNET);
    return;
  }
  ic2EnergySink.updateEntity();
  super.updateServerSide();
  if (forceCooldown) {
    setErrorState(EnumErrorCode.FORCEDCOOLDOWN);
    return;
  }
  if (inventory.getStackInSlot(batterySlot) != null)   replenishFromBattery(batterySlot);
  if (!delayUpdateTimer.delayPassed(worldObj,80))   return;
  if (currentOutput <= 0 && getErrorState() == EnumErrorCode.OK)   setErrorState(EnumErrorCode.NOFUEL);
 else   setErrorState(EnumErrorCode.OK);
}","@Override public void updateServerSide(){
  if (ic2EnergySink == null) {
    setErrorState(EnumErrorCode.NOENERGYNET);
    return;
  }
  ic2EnergySink.updateEntity();
  super.updateServerSide();
  if (forceCooldown) {
    setErrorState(EnumErrorCode.FORCEDCOOLDOWN);
    return;
  }
  if (inventory.getStackInSlot(batterySlot) != null)   replenishFromBattery(batterySlot);
  if (!delayUpdateTimer.delayPassed(worldObj,80))   return;
  if (currentOutput <= 0)   setErrorState(EnumErrorCode.NOFUEL);
 else   setErrorState(EnumErrorCode.OK);
}",0.96514745308311
63729,"@Override public boolean workCycle(){
  if (tryAddPending())   return false;
  if (!pendingProducts.isEmpty()) {
    setErrorState(EnumErrorCode.NOSPACE);
    return false;
  }
  FluidHelper.drainContainers(tankManager,this,SLOT_CAN);
  ItemStack can=getStackInSlot(SLOT_CAN);
  if (ForestryItem.honeyDrop.isItemEqual(can) && resourceTank.fill(Fluids.HONEY.get(Defaults.FLUID_PER_HONEY_DROP),false) == Defaults.FLUID_PER_HONEY_DROP) {
    setInventorySlotContents(SLOT_CAN,InvTools.depleteItem(can));
    resourceTank.fill(Fluids.HONEY.get(Defaults.FLUID_PER_HONEY_DROP),true);
  }
  ItemStack stackToAnalyze=getStackInSlot(SLOT_ANALYZE);
  if (analyzeTime > 0 && stackToAnalyze != null && AlleleManager.alleleRegistry.isIndividual(stackToAnalyze)) {
    analyzeTime--;
    if (analyzeTime > 0) {
      setErrorState(EnumErrorCode.OK);
      return true;
    }
    IIndividual individual=AlleleManager.alleleRegistry.getIndividual(stackToAnalyze);
    if (individual == null)     return false;
    individual.analyze();
    NBTTagCompound nbttagcompound=new NBTTagCompound();
    individual.writeToNBT(nbttagcompound);
    stackToAnalyze.setTagCompound(nbttagcompound);
    pendingProducts.push(stackToAnalyze);
    setInventorySlotContents(SLOT_ANALYZE,null);
    sendNetworkUpdate();
    return true;
  }
  analyzeTime=0;
  if (stackToAnalyze != null)   return false;
  if (resourceTank.getFluidAmount() < HONEY_REQUIRED) {
    setErrorState(EnumErrorCode.NORESOURCE);
    return false;
  }
  for (  IInvSlot slot : InventoryIterator.getIterable(invInput)) {
    ItemStack inputStack=slot.getStackInSlot();
    if (inputStack == null || !AlleleManager.alleleRegistry.isIndividual(inputStack))     continue;
    IIndividual individual=AlleleManager.alleleRegistry.getIndividual(inputStack);
    if (individual.isAnalyzed()) {
      pendingProducts.push(inputStack);
      slot.setStackInSlot(null);
      continue;
    }
    setInventorySlotContents(SLOT_ANALYZE,inputStack);
    slot.setStackInSlot(null);
    resourceTank.drain(HONEY_REQUIRED,true);
    analyzeTime=TIME_TO_ANALYZE;
    sendNetworkUpdate();
    return true;
  }
  setErrorState(EnumErrorCode.NOTHINGANALYZE);
  return false;
}","@Override public boolean workCycle(){
  ItemStack stackToAnalyze=getStackInSlot(SLOT_ANALYZE);
  if (analyzeTime > 0 && stackToAnalyze != null && AlleleManager.alleleRegistry.isIndividual(stackToAnalyze)) {
    analyzeTime--;
    if (analyzeTime > 0) {
      setErrorState(EnumErrorCode.OK);
      return true;
    }
    IIndividual individual=AlleleManager.alleleRegistry.getIndividual(stackToAnalyze);
    if (individual == null)     return false;
    individual.analyze();
    NBTTagCompound nbttagcompound=new NBTTagCompound();
    individual.writeToNBT(nbttagcompound);
    stackToAnalyze.setTagCompound(nbttagcompound);
    pendingProducts.push(stackToAnalyze);
    setInventorySlotContents(SLOT_ANALYZE,null);
    sendNetworkUpdate();
    return true;
  }
  analyzeTime=0;
  if (stackToAnalyze != null)   return false;
  if (getErrorState() != EnumErrorCode.OK)   return false;
  IInvSlot slot=getInputSlot();
  ItemStack inputStack=slot.getStackInSlot();
  setInventorySlotContents(SLOT_ANALYZE,inputStack);
  slot.setStackInSlot(null);
  resourceTank.drain(HONEY_REQUIRED,true);
  analyzeTime=TIME_TO_ANALYZE;
  sendNetworkUpdate();
  return true;
}",0.0441264162194394
63730,"@Override public boolean workCycle(){
  if (currentRecipe == null) {
    checkRecipe();
    resetRecipe();
    if (currentRecipe != null) {
      currentResourceModifier=determineResourceMod(inventory.getStackInSlot(SLOT_RESOURCE));
      decrStackSize(SLOT_RESOURCE,1);
      return true;
    }
 else     return false;
  }
 else   if (fuelBurnTime > 0) {
    if (currentRecipe == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    if (resourceTank.getFluidAmount() < fuelCurrentFerment)     return false;
    if (fermentationTime <= 0)     return false;
    int fermented=Math.min(fermentationTime,this.fuelCurrentFerment);
    if (!addProduct(new FluidStack(currentRecipe.output,Math.round(fermented * currentRecipe.modifier * currentResourceModifier)))) {
      return false;
    }
    fuelBurnTime--;
    resourceTank.drain(fuelCurrentFerment,true);
    fermentationTime-=this.fuelCurrentFerment;
    if (fermentationTime > 0)     return true;
    currentRecipe=null;
    return true;
  }
 else {
    fuelBurnTime=fuelTotalTime=determineFuelValue(getFuelStack());
    if (fuelBurnTime > 0) {
      this.fuelCurrentFerment=determineFermentPerCycle(getFuelStack());
      decrStackSize(1,1);
      return true;
    }
 else {
      this.fuelCurrentFerment=0;
      return false;
    }
  }
}","@Override public boolean workCycle(){
  if (currentRecipe == null) {
    checkRecipe();
    resetRecipe();
    if (currentRecipe != null) {
      currentResourceModifier=determineResourceMod(inventory.getStackInSlot(SLOT_RESOURCE));
      decrStackSize(SLOT_RESOURCE,1);
      return true;
    }
 else     return false;
  }
 else   if (fuelBurnTime > 0) {
    if (resourceTank.getFluidAmount() < fuelCurrentFerment)     return false;
    if (fermentationTime <= 0)     return false;
    int fermented=Math.min(fermentationTime,this.fuelCurrentFerment);
    if (!addProduct(new FluidStack(currentRecipe.output,Math.round(fermented * currentRecipe.modifier * currentResourceModifier)))) {
      return false;
    }
    fuelBurnTime--;
    resourceTank.drain(fuelCurrentFerment,true);
    fermentationTime-=this.fuelCurrentFerment;
    if (fermentationTime > 0)     return true;
    currentRecipe=null;
    return true;
  }
 else {
    fuelBurnTime=fuelTotalTime=determineFuelValue(getFuelStack());
    if (fuelBurnTime > 0) {
      this.fuelCurrentFerment=determineFermentPerCycle(getFuelStack());
      decrStackSize(1,1);
      return true;
    }
 else {
      this.fuelCurrentFerment=0;
      return false;
    }
  }
}",0.9621152328334648
63731,"@Override public boolean hasWork(){
  if (this.getFuelStack() == null && fuelBurnTime <= 0)   return false;
 else   if (fuelBurnTime <= 0)   if (RecipeManager.findMatchingRecipe(inventory.getStackInSlot(SLOT_RESOURCE),resourceTank.getFluid()) == null)   return false;
  if (this.getFermentationStack() == null && fermentationTime <= 0)   return false;
 else   if (fermentationTime <= 0)   if (RecipeManager.findMatchingRecipe(inventory.getStackInSlot(SLOT_RESOURCE),resourceTank.getFluid()) == null)   return false;
  if (resourceTank.getFluidAmount() <= 0)   return false;
  if (productTank.getFluidAmount() >= productTank.getCapacity())   return false;
  return true;
}","@Override public boolean hasWork(){
  if (this.getFuelStack() == null && fuelBurnTime <= 0)   return false;
 else   if (fuelBurnTime <= 0)   if (RecipeManager.findMatchingRecipe(inventory.getStackInSlot(SLOT_RESOURCE),resourceTank.getFluid()) == null)   return false;
  if (this.getFermentationStack() == null && fermentationTime <= 0)   return false;
 else   if (fermentationTime <= 0)   if (RecipeManager.findMatchingRecipe(inventory.getStackInSlot(SLOT_RESOURCE),resourceTank.getFluid()) == null)   return false;
  if (resourceTank.getFluidAmount() <= fuelCurrentFerment)   return false;
  if (productTank.getFluidAmount() >= productTank.getCapacity())   return false;
  return true;
}",0.986019131714496
63732,"@Override public void updateServerSide(){
  if (inventory.getStackInSlot(SLOT_INPUT) != null) {
    FluidContainerData container=LiquidHelper.getLiquidContainer(inventory.getStackInSlot(SLOT_INPUT));
    if (container != null && RecipeManager.isLiquidResource(container.fluid)) {
      inventory.setInventorySlotContents(SLOT_INPUT,StackUtils.replenishByContainer(this,inventory.getStackInSlot(SLOT_INPUT),container,resourceTank));
      if (inventory.getStackInSlot(SLOT_INPUT).stackSize <= 0)       inventory.setInventorySlotContents(SLOT_INPUT,null);
    }
  }
  if (inventory.getStackInSlot(SLOT_CAN_INPUT) != null) {
    FluidContainerData container=LiquidHelper.getEmptyContainer(inventory.getStackInSlot(SLOT_CAN_INPUT),productTank.getFluid());
    if (container != null) {
      inventory.setInventorySlotContents(SLOT_CAN_OUTPUT,bottleIntoContainer(inventory.getStackInSlot(SLOT_CAN_INPUT),inventory.getStackInSlot(SLOT_CAN_OUTPUT),container,productTank));
      if (inventory.getStackInSlot(SLOT_CAN_INPUT).stackSize <= 0)       inventory.setInventorySlotContents(SLOT_CAN_INPUT,null);
    }
  }
  if (worldObj.getTotalWorldTime() % 20 * 10 != 0)   return;
  if (RecipeManager.findMatchingRecipe(inventory.getStackInSlot(SLOT_RESOURCE),resourceTank.getFluid()) != null)   setErrorState(EnumErrorCode.OK);
 else   if (inventory.getStackInSlot(SLOT_FUEL) == null && fuelBurnTime <= 0)   setErrorState(EnumErrorCode.NOFUEL);
 else   if (energyManager.getTotalEnergyStored() == 0)   setErrorState(EnumErrorCode.NOPOWER);
 else   setErrorState(EnumErrorCode.NORECIPE);
}","@Override public void updateServerSide(){
  if (inventory.getStackInSlot(SLOT_INPUT) != null) {
    FluidContainerData container=LiquidHelper.getLiquidContainer(inventory.getStackInSlot(SLOT_INPUT));
    if (container != null && RecipeManager.isLiquidResource(container.fluid)) {
      inventory.setInventorySlotContents(SLOT_INPUT,StackUtils.replenishByContainer(this,inventory.getStackInSlot(SLOT_INPUT),container,resourceTank));
      if (inventory.getStackInSlot(SLOT_INPUT).stackSize <= 0)       inventory.setInventorySlotContents(SLOT_INPUT,null);
    }
  }
  if (inventory.getStackInSlot(SLOT_CAN_INPUT) != null) {
    FluidContainerData container=LiquidHelper.getEmptyContainer(inventory.getStackInSlot(SLOT_CAN_INPUT),productTank.getFluid());
    if (container != null) {
      inventory.setInventorySlotContents(SLOT_CAN_OUTPUT,bottleIntoContainer(inventory.getStackInSlot(SLOT_CAN_INPUT),inventory.getStackInSlot(SLOT_CAN_OUTPUT),container,productTank));
      if (inventory.getStackInSlot(SLOT_CAN_INPUT).stackSize <= 0)       inventory.setInventorySlotContents(SLOT_CAN_INPUT,null);
    }
  }
  if (worldObj.getTotalWorldTime() % 20 * 10 != 0)   return;
  if (RecipeManager.findMatchingRecipe(inventory.getStackInSlot(SLOT_RESOURCE),resourceTank.getFluid()) != null) {
    if (resourceTank.getFluidAmount() < fuelCurrentFerment)     setErrorState(EnumErrorCode.NORESOURCE);
 else     setErrorState(EnumErrorCode.OK);
  }
 else   if (inventory.getStackInSlot(SLOT_FUEL) == null && fuelBurnTime <= 0)   setErrorState(EnumErrorCode.NOFUEL);
 else   if (energyManager.getTotalEnergyStored() == 0)   setErrorState(EnumErrorCode.NOPOWER);
 else   setErrorState(EnumErrorCode.NORECIPE);
}",0.951973080452738
63733,"@Override public boolean canSustainPlant(IBlockAccess world,int x,int y,int z,ForgeDirection direction,IPlantable plant){
  EnumPlantType plantType=plant.getPlantType(world,x,y,z);
  if (plantType != EnumPlantType.Crop && plantType != EnumPlantType.Plains)   return false;
  int meta=world.getBlockMetadata(x,y,z);
  return (meta & 0x03) == 0;
}","@Override public boolean canSustainPlant(IBlockAccess world,int x,int y,int z,ForgeDirection direction,IPlantable plant){
  EnumPlantType plantType=plant.getPlantType(world,x,y,z);
  if (plantType != EnumPlantType.Crop && plantType != EnumPlantType.Plains)   return false;
  int meta=world.getBlockMetadata(x,y,z);
  SoilType type=getTypeFromMeta(meta);
  return type == SoilType.HUMUS;
}",0.8731241473396999
63734,"@Override @SideOnly(Side.CLIENT) public IIcon getIcon(int i,int j){
  int meta=j;
  int type=meta & 0x0f;
  int maturity=meta >> 2;
  if (type == 1)   if (maturity < this.degradeDelimiter)   return iconBogEarth;
 else   return iconPeat;
 else   if (type == 0)   return iconHumus;
 else   return null;
}","@Override @SideOnly(Side.CLIENT) public IIcon getIcon(int side,int meta){
  SoilType type=getTypeFromMeta(meta);
switch (type) {
case HUMUS:
    return iconHumus;
case BOG_EARTH:
  return iconBogEarth;
case PEAT:
return iconPeat;
}
return null;
}",0.2992700729927007
63735,"@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  int type=(metadata & 0x03);
  int maturity=metadata >> 2;
  if (maturity >= this.degradeDelimiter && type == 1) {
    ret.add(ForestryItem.peat.getItemStack());
    ret.add(new ItemStack(Blocks.dirt));
  }
 else   if (type == 0)   ret.add(new ItemStack(Blocks.dirt));
 else   ret.add(new ItemStack(this,1,type));
  return ret;
}","@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  SoilType type=getTypeFromMeta(metadata);
  if (type == SoilType.PEAT) {
    ret.add(ForestryItem.peat.getItemStack());
    ret.add(new ItemStack(Blocks.dirt));
  }
 else   if (type == SoilType.HUMUS)   ret.add(new ItemStack(Blocks.dirt));
 else   ret.add(new ItemStack(this,1,SoilType.BOG_EARTH.ordinal()));
  return ret;
}",0.3391572456320658
63736,"@Override public void updateTick(World world,int i,int j,int k,Random random){
  if (!Proxies.common.isSimulating(world))   return;
  int meta=world.getBlockMetadata(i,j,k);
  int type=(meta & 0x03);
  if (type == 0)   updateTickHumus(world,i,j,k,random);
 else   if (type == 1)   updateTickBogEarth(world,i,j,k,random);
 else   Proxies.log.warning(this.getClass() + ""String_Node_Str"" + type+ ""String_Node_Str"");
}","@Override public void updateTick(World world,int i,int j,int k,Random random){
  if (!Proxies.common.isSimulating(world))   return;
  int meta=world.getBlockMetadata(i,j,k);
  SoilType type=getTypeFromMeta(meta);
  if (type == SoilType.HUMUS)   updateTickHumus(world,i,j,k,random);
 else   if (type == SoilType.BOG_EARTH)   updateTickBogEarth(world,i,j,k,random);
}",0.7317073170731707
63737,"@Override public void preInit(){
  super.preInit();
  ChipsetManager.solderManager=new ItemSolderingIron.SolderManager();
  CircuitRegistry circuitRegistry=new CircuitRegistry();
  ChipsetManager.circuitRegistry=circuitRegistry;
  circuitRegistry.initialize();
  AlleleRegistry alleleRegistry=new AlleleRegistry();
  AlleleManager.alleleRegistry=alleleRegistry;
  AlleleManager.climateHelper=new ClimateHelper();
  alleleRegistry.initialize();
  Allele.initialize();
  ForestryBlock.core.registerBlock(new BlockBase(Material.iron,true),ItemForestryBlock.class,""String_Node_Str"");
  definitionAnalyzer=((BlockBase)ForestryBlock.core.block()).addDefinition(new MachineDefinition(Defaults.DEFINITION_ANALYZER_META,""String_Node_Str"",TileAnalyzer.class,PluginApiculture.proxy.getRendererAnalyzer(Defaults.TEXTURE_PATH_BLOCKS + ""String_Node_Str"")));
  definitionEscritoire=((BlockBase)ForestryBlock.core.block()).addDefinition(new MachineDefinition(Defaults.DEFINITION_ESCRITOIRE_META,""String_Node_Str"",TileEscritoire.class,Proxies.render.getRenderEscritoire()));
  ForestryBlock.soil.registerBlock(new BlockSoil(),ItemForestryBlock.class,""String_Node_Str"");
  ForestryBlock.soil.block().setHarvestLevel(""String_Node_Str"",0,0);
  ForestryBlock.soil.block().setHarvestLevel(""String_Node_Str"",0,1);
  ForestryBlock.resources.registerBlock(new BlockResource(),ItemForestryBlock.class,""String_Node_Str"");
  ForestryBlock.resources.block().setHarvestLevel(""String_Node_Str"",1,0);
  ForestryBlock.resources.block().setHarvestLevel(""String_Node_Str"",1,1);
  ForestryBlock.resources.block().setHarvestLevel(""String_Node_Str"",1,2);
  OreDictionary.registerOre(""String_Node_Str"",ForestryBlock.resources.getItemStack(1,0));
  OreDictionary.registerOre(""String_Node_Str"",ForestryBlock.resources.getItemStack(1,1));
  OreDictionary.registerOre(""String_Node_Str"",ForestryBlock.resources.getItemStack(1,2));
  ForestryBlock.glass.registerBlock(new BlockStainedGlass(),ItemForestryBlock.class,""String_Node_Str"");
  FurnaceRecipes.smelting().func_151394_a(ForestryBlock.resources.getItemStack(1,1),ForestryItem.ingotCopper.getItemStack(),0.5f);
  FurnaceRecipes.smelting().func_151394_a(ForestryBlock.resources.getItemStack(1,2),ForestryItem.ingotTin.getItemStack(),0.5f);
  GameRegistry.registerFuelHandler(this);
}","@Override public void preInit(){
  super.preInit();
  ChipsetManager.solderManager=new ItemSolderingIron.SolderManager();
  CircuitRegistry circuitRegistry=new CircuitRegistry();
  ChipsetManager.circuitRegistry=circuitRegistry;
  circuitRegistry.initialize();
  AlleleRegistry alleleRegistry=new AlleleRegistry();
  AlleleManager.alleleRegistry=alleleRegistry;
  AlleleManager.climateHelper=new ClimateHelper();
  alleleRegistry.initialize();
  Allele.initialize();
  ForestryBlock.core.registerBlock(new BlockBase(Material.iron,true),ItemForestryBlock.class,""String_Node_Str"");
  definitionAnalyzer=((BlockBase)ForestryBlock.core.block()).addDefinition(new MachineDefinition(Defaults.DEFINITION_ANALYZER_META,""String_Node_Str"",TileAnalyzer.class,PluginApiculture.proxy.getRendererAnalyzer(Defaults.TEXTURE_PATH_BLOCKS + ""String_Node_Str"")));
  definitionEscritoire=((BlockBase)ForestryBlock.core.block()).addDefinition(new MachineDefinition(Defaults.DEFINITION_ESCRITOIRE_META,""String_Node_Str"",TileEscritoire.class,Proxies.render.getRenderEscritoire()));
  ForestryBlock.soil.registerBlock(new BlockSoil(),ItemSoilBlock.class,""String_Node_Str"");
  ForestryBlock.soil.block().setHarvestLevel(""String_Node_Str"",0,0);
  ForestryBlock.soil.block().setHarvestLevel(""String_Node_Str"",0,1);
  ForestryBlock.resources.registerBlock(new BlockResource(),ItemForestryBlock.class,""String_Node_Str"");
  ForestryBlock.resources.block().setHarvestLevel(""String_Node_Str"",1,0);
  ForestryBlock.resources.block().setHarvestLevel(""String_Node_Str"",1,1);
  ForestryBlock.resources.block().setHarvestLevel(""String_Node_Str"",1,2);
  OreDictionary.registerOre(""String_Node_Str"",ForestryBlock.resources.getItemStack(1,0));
  OreDictionary.registerOre(""String_Node_Str"",ForestryBlock.resources.getItemStack(1,1));
  OreDictionary.registerOre(""String_Node_Str"",ForestryBlock.resources.getItemStack(1,2));
  ForestryBlock.glass.registerBlock(new BlockStainedGlass(),ItemForestryBlock.class,""String_Node_Str"");
  FurnaceRecipes.smelting().func_151394_a(ForestryBlock.resources.getItemStack(1,1),ForestryItem.ingotCopper.getItemStack(),0.5f);
  FurnaceRecipes.smelting().func_151394_a(ForestryBlock.resources.getItemStack(1,2),ForestryItem.ingotTin.getItemStack(),0.5f);
  GameRegistry.registerFuelHandler(this);
}",0.9973810563072892
63738,"@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localize(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str""))   listModes(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str""))   listModeInfo(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    World world=getWorld(sender,arguments);
    String desired=arguments[arguments.length - 1];
    IBeekeepingMode mode=PluginApiculture.beeInterface.getBeekeepingMode(desired);
    if (mode == null)     throw new CommandException(StringUtil.localize(""String_Node_Str""),desired);
    PluginApiculture.beeInterface.setBeekeepingMode(world,mode.getName());
    func_152373_a(sender,this,StringUtil.localize(""String_Node_Str""),mode.getName());
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    saveStatistics(sender,arguments);
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
  }
}","@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str""))   listModes(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str""))   listModeInfo(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    World world=getWorld(sender,arguments);
    String desired=arguments[arguments.length - 1];
    IBeekeepingMode mode=PluginApiculture.beeInterface.getBeekeepingMode(desired);
    if (mode == null)     throw new CommandException(StringUtil.localize(""String_Node_Str""),desired);
    PluginApiculture.beeInterface.setBeekeepingMode(world,mode.getName());
    func_152373_a(sender,this,StringUtil.localize(""String_Node_Str""),mode.getName());
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    saveStatistics(sender,arguments);
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
  }
}",0.9948006932409011
63739,"private void drawAnalyticsPage2(IBee bee,EnumBeeType type){
  startPage(COLUMN_0,COLUMN_1,COLUMN_2);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_1);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_2);
  newLine();
  newLine();
  drawRow(StringUtil.localize(""String_Node_Str""),AlleleManager.climateHelper.toDisplay(bee.getGenome().getPrimary().getTemperature()),AlleleManager.climateHelper.toDisplay(bee.getGenome().getSecondary().getTemperature()),bee,EnumBeeChromosome.SPECIES);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawToleranceInfo(bee.getGenome().getToleranceTemp(),COLUMN_1,getColorCoding(bee.getGenome().getActiveAllele(EnumBeeChromosome.TEMPERATURE_TOLERANCE.ordinal()).isDominant()));
  drawToleranceInfo(((AlleleTolerance)bee.getGenome().getInactiveAllele(EnumBeeChromosome.TEMPERATURE_TOLERANCE.ordinal())).getValue(),COLUMN_2,getColorCoding(bee.getGenome().getInactiveAllele(EnumBeeChromosome.TEMPERATURE_TOLERANCE.ordinal()).isDominant()));
  newLine();
  drawRow(StringUtil.localize(""String_Node_Str""),AlleleManager.climateHelper.toDisplay(bee.getGenome().getPrimary().getHumidity()),AlleleManager.climateHelper.toDisplay(bee.getGenome().getSecondary().getHumidity()),bee,EnumBeeChromosome.SPECIES);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawToleranceInfo(bee.getGenome().getToleranceHumid(),COLUMN_1,getColorCoding(bee.getGenome().getActiveAllele(EnumBeeChromosome.HUMIDITY_TOLERANCE.ordinal()).isDominant()));
  drawToleranceInfo(((AlleleTolerance)bee.getGenome().getInactiveAllele(EnumBeeChromosome.HUMIDITY_TOLERANCE.ordinal())).getValue(),COLUMN_2,getColorCoding(bee.getGenome().getInactiveAllele(EnumBeeChromosome.HUMIDITY_TOLERANCE.ordinal()).isDominant()));
  newLine();
  newLine();
  String yes=StringUtil.localize(""String_Node_Str"");
  String no=StringUtil.localize(""String_Node_Str"");
  String diurnal0, diurnal1, nocturnal0, nocturnal1;
  if (bee.getGenome().getNocturnal()) {
    nocturnal0=diurnal0=yes;
  }
 else {
    nocturnal0=bee.getGenome().getPrimary().isNocturnal() ? yes : no;
    diurnal0=!bee.getGenome().getPrimary().isNocturnal() ? yes : no;
  }
  if (((AlleleBoolean)bee.getGenome().getInactiveAllele(EnumBeeChromosome.NOCTURNAL.ordinal())).getValue()) {
    nocturnal1=diurnal1=yes;
  }
 else {
    nocturnal1=bee.getGenome().getSecondary().isNocturnal() ? yes : no;
    diurnal1=!bee.getGenome().getSecondary().isNocturnal() ? yes : no;
  }
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawLine(diurnal0,COLUMN_1,getColorCoding(false));
  drawLine(diurnal1,COLUMN_2,getColorCoding(false));
  newLine();
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawLine(nocturnal0,COLUMN_1,getColorCoding(false));
  drawLine(nocturnal1,COLUMN_2,getColorCoding(false));
  newLine();
  String primary=StringUtil.readableBoolean(bee.getGenome().getTolerantFlyer(),yes,no);
  String secondary=StringUtil.readableBoolean(((AlleleBoolean)bee.getGenome().getInactiveAllele(EnumBeeChromosome.TOLERANT_FLYER.ordinal())).getValue(),yes,no);
  drawRow(StringUtil.localize(""String_Node_Str""),primary,secondary,bee,EnumBeeChromosome.TOLERANT_FLYER);
  primary=StringUtil.readableBoolean(bee.getGenome().getCaveDwelling(),yes,no);
  secondary=StringUtil.readableBoolean(((AlleleBoolean)bee.getGenome().getInactiveAllele(EnumBeeChromosome.CAVE_DWELLING.ordinal())).getValue(),yes,no);
  drawRow(StringUtil.localize(""String_Node_Str""),primary,secondary,bee,EnumBeeChromosome.CAVE_DWELLING);
  newLine();
  String displayText;
  if (type == EnumBeeType.PRINCESS || type == EnumBeeType.QUEEN) {
    displayText=""String_Node_Str"";
    if (!bee.isNatural())     displayText=""String_Node_Str"";
    displayText=StringUtil.localize(displayText);
    drawCenteredLine(displayText,8,158,fontColor.get(""String_Node_Str""));
    ;
  }
  if (bee.getGeneration() >= 0) {
    newLine();
    displayText=StringUtil.localize(""String_Node_Str"",bee.getGeneration());
    drawCenteredLine(displayText,8,158,fontColor.get(""String_Node_Str""));
  }
  endPage();
}","private void drawAnalyticsPage2(IBee bee,EnumBeeType type){
  startPage(COLUMN_0,COLUMN_1,COLUMN_2);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_1);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_2);
  newLine();
  newLine();
  drawRow(StringUtil.localize(""String_Node_Str""),AlleleManager.climateHelper.toDisplay(bee.getGenome().getPrimary().getTemperature()),AlleleManager.climateHelper.toDisplay(bee.getGenome().getSecondary().getTemperature()),bee,EnumBeeChromosome.SPECIES);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawToleranceInfo(bee.getGenome().getToleranceTemp(),COLUMN_1,getColorCoding(bee.getGenome().getActiveAllele(EnumBeeChromosome.TEMPERATURE_TOLERANCE.ordinal()).isDominant()));
  drawToleranceInfo(((AlleleTolerance)bee.getGenome().getInactiveAllele(EnumBeeChromosome.TEMPERATURE_TOLERANCE.ordinal())).getValue(),COLUMN_2,getColorCoding(bee.getGenome().getInactiveAllele(EnumBeeChromosome.TEMPERATURE_TOLERANCE.ordinal()).isDominant()));
  newLine();
  drawRow(StringUtil.localize(""String_Node_Str""),AlleleManager.climateHelper.toDisplay(bee.getGenome().getPrimary().getHumidity()),AlleleManager.climateHelper.toDisplay(bee.getGenome().getSecondary().getHumidity()),bee,EnumBeeChromosome.SPECIES);
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawToleranceInfo(bee.getGenome().getToleranceHumid(),COLUMN_1,getColorCoding(bee.getGenome().getActiveAllele(EnumBeeChromosome.HUMIDITY_TOLERANCE.ordinal()).isDominant()));
  drawToleranceInfo(((AlleleTolerance)bee.getGenome().getInactiveAllele(EnumBeeChromosome.HUMIDITY_TOLERANCE.ordinal())).getValue(),COLUMN_2,getColorCoding(bee.getGenome().getInactiveAllele(EnumBeeChromosome.HUMIDITY_TOLERANCE.ordinal()).isDominant()));
  newLine();
  newLine();
  String yes=StringUtil.localize(""String_Node_Str"");
  String no=StringUtil.localize(""String_Node_Str"");
  String diurnal0, diurnal1, nocturnal0, nocturnal1;
  if (bee.getGenome().getNocturnal()) {
    nocturnal0=diurnal0=yes;
  }
 else {
    nocturnal0=bee.getGenome().getPrimary().isNocturnal() ? yes : no;
    diurnal0=!bee.getGenome().getPrimary().isNocturnal() ? yes : no;
  }
  if (((AlleleBoolean)bee.getGenome().getInactiveAllele(EnumBeeChromosome.NOCTURNAL.ordinal())).getValue()) {
    nocturnal1=diurnal1=yes;
  }
 else {
    nocturnal1=bee.getGenome().getSecondary().isNocturnal() ? yes : no;
    diurnal1=!bee.getGenome().getSecondary().isNocturnal() ? yes : no;
  }
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawLine(diurnal0,COLUMN_1,getColorCoding(false));
  drawLine(diurnal1,COLUMN_2,getColorCoding(false));
  newLine();
  drawLine(StringUtil.localize(""String_Node_Str""),COLUMN_0);
  drawLine(nocturnal0,COLUMN_1,getColorCoding(false));
  drawLine(nocturnal1,COLUMN_2,getColorCoding(false));
  newLine();
  String primary=StringUtil.readableBoolean(bee.getGenome().getTolerantFlyer(),yes,no);
  String secondary=StringUtil.readableBoolean(((AlleleBoolean)bee.getGenome().getInactiveAllele(EnumBeeChromosome.TOLERANT_FLYER.ordinal())).getValue(),yes,no);
  drawRow(StringUtil.localize(""String_Node_Str""),primary,secondary,bee,EnumBeeChromosome.TOLERANT_FLYER);
  primary=StringUtil.readableBoolean(bee.getGenome().getCaveDwelling(),yes,no);
  secondary=StringUtil.readableBoolean(((AlleleBoolean)bee.getGenome().getInactiveAllele(EnumBeeChromosome.CAVE_DWELLING.ordinal())).getValue(),yes,no);
  drawRow(StringUtil.localize(""String_Node_Str""),primary,secondary,bee,EnumBeeChromosome.CAVE_DWELLING);
  newLine();
  String displayText;
  if (type == EnumBeeType.PRINCESS || type == EnumBeeType.QUEEN) {
    displayText=""String_Node_Str"";
    if (!bee.isNatural())     displayText=""String_Node_Str"";
    displayText=StringUtil.localize(displayText);
    drawCenteredLine(displayText,8,158,fontColor.get(""String_Node_Str""));
    ;
  }
  if (bee.getGeneration() >= 0) {
    newLine();
    displayText=StringUtil.localizeAndFormat(""String_Node_Str"",bee.getGeneration());
    drawCenteredLine(displayText,8,158,fontColor.get(""String_Node_Str""));
  }
  endPage();
}",0.9988939412559912
63740,"@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localize(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str""))   listModes(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str""))   listModeInfo(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    World world=getWorld(sender,arguments);
    String desired=arguments[arguments.length - 1];
    ITreekeepingMode mode=PluginArboriculture.treeInterface.getTreekeepingMode(desired);
    if (mode == null)     throw new CommandException(StringUtil.localize(""String_Node_Str""),desired);
    PluginArboriculture.treeInterface.setTreekeepingMode(world,mode.getName());
    func_152373_a(sender,this,StringUtil.localize(""String_Node_Str""),mode.getName());
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    saveStatistics(sender,arguments);
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
  }
}","@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str""))   listModes(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str""))   listModeInfo(sender,arguments);
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    World world=getWorld(sender,arguments);
    String desired=arguments[arguments.length - 1];
    ITreekeepingMode mode=PluginArboriculture.treeInterface.getTreekeepingMode(desired);
    if (mode == null)     throw new CommandException(StringUtil.localize(""String_Node_Str""),desired);
    PluginArboriculture.treeInterface.setTreekeepingMode(world,mode.getName());
    func_152373_a(sender,this,StringUtil.localize(""String_Node_Str""),mode.getName());
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    if (arguments.length <= 1)     throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
    saveStatistics(sender,arguments);
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
  }
}",0.994833524684271
63741,"private void listPluginInfoForSender(ICommandSender sender,String[] arguments){
  if (arguments.length < 3)   throw new WrongUsageException(""String_Node_Str"" + getCommandName() + ""String_Node_Str"");
  IPlugin found=null;
  for (  IPlugin plugin : PluginManager.plugins) {
    PluginInfo info=plugin.getClass().getAnnotation(PluginInfo.class);
    if (info == null)     continue;
    if ((info.pluginID().equalsIgnoreCase(arguments[2]) || info.name().equalsIgnoreCase(arguments[2]))) {
      found=plugin;
      break;
    }
  }
  if (found == null)   throw new CommandException(StringUtil.localize(""String_Node_Str"",arguments[2]));
  String entry=""String_Node_Str"";
  if (found.isAvailable())   entry=""String_Node_Str"";
  PluginInfo info=found.getClass().getAnnotation(PluginInfo.class);
  if (info != null) {
    sendChatMessage(sender,entry + ""String_Node_Str"" + info.name());
    if (!info.version().isEmpty())     sendChatMessage(sender,""String_Node_Str"" + info.version());
    if (!info.author().isEmpty())     sendChatMessage(sender,""String_Node_Str"" + info.author());
    if (!info.url().isEmpty())     sendChatMessage(sender,""String_Node_Str"" + info.url());
    if (!info.description().isEmpty())     sendChatMessage(sender,info.description());
  }
}","private void listPluginInfoForSender(ICommandSender sender,String[] arguments){
  if (arguments.length < 3)   throw new WrongUsageException(""String_Node_Str"" + getCommandName() + ""String_Node_Str"");
  IPlugin found=null;
  for (  IPlugin plugin : PluginManager.plugins) {
    PluginInfo info=plugin.getClass().getAnnotation(PluginInfo.class);
    if (info == null)     continue;
    if ((info.pluginID().equalsIgnoreCase(arguments[2]) || info.name().equalsIgnoreCase(arguments[2]))) {
      found=plugin;
      break;
    }
  }
  if (found == null)   throw new CommandException(StringUtil.localizeAndFormat(""String_Node_Str"",arguments[2]));
  String entry=""String_Node_Str"";
  if (found.isAvailable())   entry=""String_Node_Str"";
  PluginInfo info=found.getClass().getAnnotation(PluginInfo.class);
  if (info != null) {
    sendChatMessage(sender,entry + ""String_Node_Str"" + info.name());
    if (!info.version().isEmpty())     sendChatMessage(sender,""String_Node_Str"" + info.version());
    if (!info.author().isEmpty())     sendChatMessage(sender,""String_Node_Str"" + info.author());
    if (!info.url().isEmpty())     sendChatMessage(sender,""String_Node_Str"" + info.url());
    if (!info.description().isEmpty())     sendChatMessage(sender,info.description());
  }
}",0.9964356435643564
63742,"@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localize(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str"")) {
    commandVersion(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    commandPlugins(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    return;
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}","@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str"")) {
    commandVersion(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    commandPlugins(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    return;
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}",0.9903121636167922
63743,"@Override public String getItemStackDisplayName(ItemStack itemstack){
  ResearchNote note=new ResearchNote(itemstack.getTagCompound());
  return StringUtil.localize(getUnlocalizedName(itemstack) + ""String_Node_Str"",note.researcher);
}","@Override public String getItemStackDisplayName(ItemStack itemstack){
  ResearchNote note=new ResearchNote(itemstack.getTagCompound());
  return StringUtil.localizeAndFormat(getUnlocalizedName(itemstack) + ""String_Node_Str"",note.researcher);
}",0.981132075471698
63744,"public static String localize(String key,Object... args){
  String text=StringUtil.localize(key);
  try {
    return String.format(text,args);
  }
 catch (  IllegalFormatException ex) {
    return ""String_Node_Str"" + text;
  }
}","public static String localize(String key){
  return StatCollector.translateToLocal(key).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}",0.2339955849889624
63745,"@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localize(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str"")) {
    commandTrades(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    commandVirtualize(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    return;
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}","@Override public void processCommand(ICommandSender sender,String[] arguments){
  if (arguments.length <= 0)   throw new WrongUsageException(StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandUsage(sender)));
  if (arguments[0].matches(""String_Node_Str"")) {
    commandTrades(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    commandVirtualize(sender,arguments);
    return;
  }
 else   if (arguments[0].matches(""String_Node_Str"")) {
    sendChatMessage(sender,StringUtil.localizeAndFormat(""String_Node_Str"",this.getCommandName()));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    sendChatMessage(sender,StringUtil.localize(""String_Node_Str""));
    return;
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}",0.9895712630359212
63746,"@Override public boolean onItemPickup(EntityPlayer player,EntityItem entityitem){
  ItemStack itemstack=entityitem.getEntityItem();
  if (itemstack == null || itemstack.stackSize <= 0)   return false;
  if (player.openContainer instanceof ContainerBackpack || player.openContainer instanceof ContainerNaturalistInventory)   return true;
  topOffPlayerInventory(player,itemstack);
  for (  ItemStack pack : player.inventory.mainInventory) {
    if (pack == null || pack.stackSize <= 0)     continue;
    if (itemstack == null || itemstack.stackSize <= 0)     break;
    if (!(pack.getItem() instanceof ItemBackpack))     continue;
    ItemBackpack backpack=((ItemBackpack)pack.getItem());
    if (backpack.getDefinition().isValidItem(player,itemstack))     backpack.tryStowing(player,pack,itemstack);
  }
  if (itemstack == null || itemstack.stackSize <= 0)   return false;
 else   return true;
}","@Override public boolean onItemPickup(EntityPlayer player,EntityItem entityitem){
  ItemStack itemstack=entityitem.getEntityItem();
  if (itemstack == null || itemstack.stackSize <= 0)   return false;
  if (player.openContainer instanceof ContainerBackpack || player.openContainer instanceof ContainerNaturalistBackpack)   return true;
  topOffPlayerInventory(player,itemstack);
  for (  ItemStack pack : player.inventory.mainInventory) {
    if (pack == null || pack.stackSize <= 0)     continue;
    if (itemstack == null || itemstack.stackSize <= 0)     break;
    if (!(pack.getItem() instanceof ItemBackpack))     continue;
    ItemBackpack backpack=((ItemBackpack)pack.getItem());
    if (backpack.getDefinition().isValidItem(player,itemstack))     backpack.tryStowing(player,pack,itemstack);
  }
  if (itemstack == null || itemstack.stackSize <= 0)   return false;
 else   return true;
}",0.4147568474007825
63747,"@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer entityplayer){
  if (Proxies.common.isSimulating(world)) {
    if (contained == null)     return itemstack;
    itemstack.stackSize--;
    EntityItem entity=new EntityItem(world,entityplayer.posX,entityplayer.posY,entityplayer.posZ,new ItemStack(contained.getItem(),9,contained.getItemDamage()));
    entity.delayBeforeCanPickup=40;
    float f1=0.3F;
    entity.motionX=-MathHelper.sin((entityplayer.rotationYaw / 180F) * 3.141593F) * MathHelper.cos((entityplayer.rotationPitch / 180F) * 3.141593F) * f1;
    entity.motionZ=MathHelper.cos((entityplayer.rotationYaw / 180F) * 3.141593F) * MathHelper.cos((entityplayer.rotationPitch / 180F) * 3.141593F) * f1;
    entity.motionY=-MathHelper.sin((entityplayer.rotationPitch / 180F) * 3.141593F) * f1 + 0.1F;
    f1=0.02F;
    float f3=world.rand.nextFloat() * 3.141593F * 2.0F;
    f1*=world.rand.nextFloat();
    entity.motionX+=Math.cos(f3) * f1;
    entity.motionY+=(world.rand.nextFloat() - world.rand.nextFloat()) * 0.1F;
    entity.motionZ+=Math.sin(f3) * f1;
    world.spawnEntityInWorld(entity);
  }
  return itemstack;
}","@Override public ItemStack onItemRightClick(ItemStack itemstack,World world,EntityPlayer entityplayer){
  if (Proxies.common.isSimulating(world)) {
    if (contained == null || itemstack.stackSize == 0)     return itemstack;
    itemstack.stackSize--;
    EntityItem entity=new EntityItem(world,entityplayer.posX,entityplayer.posY,entityplayer.posZ,new ItemStack(contained.getItem(),9,contained.getItemDamage()));
    entity.delayBeforeCanPickup=40;
    float f1=0.3F;
    entity.motionX=-MathHelper.sin((entityplayer.rotationYaw / 180F) * 3.141593F) * MathHelper.cos((entityplayer.rotationPitch / 180F) * 3.141593F) * f1;
    entity.motionZ=MathHelper.cos((entityplayer.rotationYaw / 180F) * 3.141593F) * MathHelper.cos((entityplayer.rotationPitch / 180F) * 3.141593F) * f1;
    entity.motionY=-MathHelper.sin((entityplayer.rotationPitch / 180F) * 3.141593F) * f1 + 0.1F;
    f1=0.02F;
    float f3=world.rand.nextFloat() * 3.141593F * 2.0F;
    f1*=world.rand.nextFloat();
    entity.motionX+=Math.cos(f3) * f1;
    entity.motionY+=(world.rand.nextFloat() - world.rand.nextFloat()) * 0.1F;
    entity.motionZ+=Math.sin(f3) * f1;
    world.spawnEntityInWorld(entity);
  }
  return itemstack;
}",0.988135593220339
63748,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  AccountInfo accountInfo=AccountInfo.getSavedAccountInfo(AccountEditor.this,spinnerItems[position]);
  tempAccountCategory=spinnerItems[position];
  if (accountInfo.getAccountCategory() != null) {
    userName.setText(accountInfo.getUserName());
    passWord.setText(accountInfo.getPassWord());
  }
 else {
    userName.setText(""String_Node_Str"");
  }
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  AccountInfo accountInfo=AccountInfo.getSavedAccountInfo(AccountEditor.this,spinnerItems[position]);
  tempAccountCategory=spinnerItems[position];
  if (accountInfo.getAccountCategory() != null) {
    userName.setText(accountInfo.getUserName());
    passWord.setText(accountInfo.getPassWord());
  }
}",0.9368295589988082
63749,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_account_editor);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  accountCategory=getIntent().getStringExtra(""String_Node_Str"");
  tempAccountCategory=""String_Node_Str"";
  userName=(EditText)findViewById(R.id.accountEditorActivityUserName);
  passWord=(EditText)findViewById(R.id.accountEditorActivityPassword);
  setSpinner();
  Button saveAccountInfo=(Button)findViewById(R.id.accountEditorActivityButton);
  saveAccountInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (accountCategory.equals(""String_Node_Str"")) {
        accountCategory=tempAccountCategory;
      }
      SharedPreferences.Editor accountInfo=getSharedPreferences(accountCategory,MODE_PRIVATE).edit();
      accountInfo.putString(accountCategory,accountCategory);
      accountInfo.putString(""String_Node_Str"",userName.getText().toString());
      accountInfo.putString(""String_Node_Str"",passWord.getText().toString());
      if (accountCategory.equals(""String_Node_Str"")) {
        accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (accountCategory.equals(""String_Node_Str"")) {
        accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (accountCategory.equals(""String_Node_Str"")) {
        accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
      }
      accountInfo.commit();
      finish();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_account_editor);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  accountCategory=getIntent().getStringExtra(""String_Node_Str"");
  tempAccountCategory=""String_Node_Str"";
  userName=(EditText)findViewById(R.id.editTextUsername);
  passWord=(EditText)findViewById(R.id.editTextPassword);
  setSpinner();
  Button saveAccountInfo=(Button)findViewById(R.id.buttonSave);
  saveAccountInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (accountCategory.equals(""String_Node_Str""))       accountCategory=tempAccountCategory;
      SharedPreferences.Editor accountInfo=getSharedPreferences(accountCategory,MODE_PRIVATE).edit();
      accountInfo.putString(accountCategory,accountCategory);
      accountInfo.putString(""String_Node_Str"",userName.getText().toString());
      accountInfo.putString(""String_Node_Str"",passWord.getText().toString());
      if (accountCategory.equals(""String_Node_Str"")) {
        accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (accountCategory.equals(""String_Node_Str"")) {
        accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (accountCategory.equals(""String_Node_Str"")) {
        accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
      }
      accountInfo.apply();
      finish();
    }
  }
);
}",0.9614882506527416
63750,"@Override public void onNothingSelected(AdapterView<?> parent){
  userName.setText(""String_Node_Str"");
}","@Override public void onNothingSelected(AdapterView<?> parent){
}",0.7692307692307693
63751,"@Override public void onClick(View view){
  if (accountCategory.equals(""String_Node_Str"")) {
    accountCategory=tempAccountCategory;
  }
  SharedPreferences.Editor accountInfo=getSharedPreferences(accountCategory,MODE_PRIVATE).edit();
  accountInfo.putString(accountCategory,accountCategory);
  accountInfo.putString(""String_Node_Str"",userName.getText().toString());
  accountInfo.putString(""String_Node_Str"",passWord.getText().toString());
  if (accountCategory.equals(""String_Node_Str"")) {
    accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (accountCategory.equals(""String_Node_Str"")) {
    accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (accountCategory.equals(""String_Node_Str"")) {
    accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
  }
  accountInfo.commit();
  finish();
}","@Override public void onClick(View view){
  if (accountCategory.equals(""String_Node_Str""))   accountCategory=tempAccountCategory;
  SharedPreferences.Editor accountInfo=getSharedPreferences(accountCategory,MODE_PRIVATE).edit();
  accountInfo.putString(accountCategory,accountCategory);
  accountInfo.putString(""String_Node_Str"",userName.getText().toString());
  accountInfo.putString(""String_Node_Str"",passWord.getText().toString());
  if (accountCategory.equals(""String_Node_Str"")) {
    accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (accountCategory.equals(""String_Node_Str"")) {
    accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (accountCategory.equals(""String_Node_Str"")) {
    accountInfo.putString(""String_Node_Str"",""String_Node_Str"");
  }
  accountInfo.apply();
  finish();
}",0.988737403675163
63752,"private void setSpinner(){
  Spinner spinner=(Spinner)findViewById(R.id.accountEditorActivityAccountCategory);
  final String[] spinnerItems=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  spinner.setAdapter(new ArrayAdapter<String>(AccountEditor.this,android.R.layout.simple_spinner_item,spinnerItems));
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      AccountInfo accountInfo=AccountInfo.getSavedAccountInfo(AccountEditor.this,spinnerItems[position]);
      tempAccountCategory=spinnerItems[position];
      if (accountInfo.getAccountCategory() != null) {
        userName.setText(accountInfo.getUserName());
        passWord.setText(accountInfo.getPassWord());
      }
 else {
        userName.setText(""String_Node_Str"");
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      userName.setText(""String_Node_Str"");
    }
  }
);
}","private void setSpinner(){
  Spinner spinner=(Spinner)findViewById(R.id.spinnerCategory);
  final String[] spinnerItems=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  spinner.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,spinnerItems));
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      AccountInfo accountInfo=AccountInfo.getSavedAccountInfo(AccountEditor.this,spinnerItems[position]);
      tempAccountCategory=spinnerItems[position];
      if (accountInfo.getAccountCategory() != null) {
        userName.setText(accountInfo.getUserName());
        passWord.setText(accountInfo.getPassWord());
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
}",0.9148167268972638
63753,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Configuration.HOME_PAGE_WEBSITE) {
    setContentView(R.layout.activity_main_webview);
    WebView webView=(WebView)findViewById(R.id.webView);
    webView.getSettings().setJavaScriptEnabled(true);
    webView.loadUrl(Configuration.HOME_PAGE_WEBSITE_URL);
    webView.setWebViewClient(new WebViewClient(){
      public boolean shouldOverrideUrlLoading(      WebView view,      String url){
        view.loadUrl(url);
        return true;
      }
    }
);
  }
 else {
    setContentView(R.layout.activity_main_image);
    ImageView imageView=(ImageView)findViewById(R.id.imageView);
    try {
      imageView.setImageBitmap(MediaStore.Images.Media.getBitmap(this.getContentResolver(),Configuration.HOME_PAGE_IMAGE_PATH));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  WebView webView=(WebView)findViewById(R.id.webView);
  if (Configuration.HOME_SHOW_WEBPAGE) {
    webView.getSettings().setJavaScriptEnabled(true);
    webView.loadUrl(Configuration.HOME_WEBPAGE_URL);
    webView.setWebViewClient(new WebViewClient(){
      public boolean shouldOverrideUrlLoading(      WebView view,      String url){
        view.loadUrl(url);
        return true;
      }
    }
);
  }
 else {
    webView.setVisibility(View.GONE);
  }
}",0.6124082721814543
63754,"@Override protected Void doInBackground(String... params){
  String userName=accountInfo.getUserName(), passWord=accountInfo.getPassWord();
  JoooidRpc joooidRpc=new JoooidRpc(joomlaURL,userName,passWord).getInstance(joomlaURL,null,accountInfo.getUserName(),accountInfo.getPassWord(),User.JOOMLA_16);
  try {
    final File imageFile=new File(imagePath);
    joooidRpc.uploadFile(userName,passWord,imageFile,Configuration.JOOMLA_DIR);
    try {
      final String currentDate=new SimpleDateFormat(""String_Node_Str"").format(new Date());
      String[] position=new ConvertLatlng().convertToDegreeForm(imagePath).split(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + currentDate);
      joooidRpc.newPost(userName,passWord,Configuration.JOOMLA_CATEGORY,imageFile.getName(),imageFile.getName(),params,""String_Node_Str"" + position[0] + ""String_Node_Str""+ position[1]+ ""String_Node_Str"",1,1,true,currentDate);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    ShareToJoomla.this.activity.runOnUiThread(new Runnable(){
      @Override public void run(){
        Toast.makeText(ShareToJoomla.this.activity.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
);
  }
 catch (  XMLRPCException e) {
    ShareToJoomla.this.activity.runOnUiThread(new Runnable(){
      @Override public void run(){
        Toast.makeText(ShareToJoomla.this.activity.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
);
    e.printStackTrace();
  }
  return null;
}","@Override protected Void doInBackground(String... params){
  final String username=accountInfo.getUserName();
  final String password=accountInfo.getPassWord();
  JoooidRpc joooidRpc=JoooidRpc.getInstance(joomlaURL,null,username,password,User.JOOMLA_16);
  try {
    final File imageFile=new File(imagePath);
    String res=joooidRpc.uploadFile(username,password,imageFile,Configuration.JOOMLA_DIR);
    String imageUrl=res.replaceAll(""String_Node_Str"",""String_Node_Str"");
    try {
      final String currentDate=new SimpleDateFormat(""String_Node_Str"").format(new Date());
      String[] position=new ConvertLatlng().convertToDegreeForm(imagePath).split(""String_Node_Str"");
      String[] introduction=new String[]{""String_Node_Str"" + imageUrl + ""String_Node_Str""};
      String content=""String_Node_Str"";
      if (Configuration.JOOMLA_SHOW_MAP_IN_POST)       content+=""String_Node_Str"" + position[0] + ""String_Node_Str""+ position[1]+ ""String_Node_Str"";
      joooidRpc.newPost(username,password,Configuration.JOOMLA_CATEGORY,imageFile.getName(),imageFile.getName(),introduction,content,1,1,true,currentDate);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    ShareToJoomla.this.activity.runOnUiThread(new Runnable(){
      @Override public void run(){
        Toast.makeText(ShareToJoomla.this.activity.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
);
  }
 catch (  XMLRPCException e) {
    ShareToJoomla.this.activity.runOnUiThread(new Runnable(){
      @Override public void run(){
        Toast.makeText(ShareToJoomla.this.activity.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
);
    e.printStackTrace();
  }
  return null;
}",0.7519902020820576
63755,"private void enable_functions_or_hide_views(){
  if (Configuration.ENABLE_NFC) {
    if (!enable_nfc()) {
      nfcTextView.setText(""String_Node_Str"");
    }
  }
 else {
    nfcTextView.setVisibility(View.GONE);
  }
  if (Configuration.ENABLE_PHOTO_LOCATION_MODIFICATION) {
    enable_location_modification();
  }
 else {
    locationSwitch.setVisibility(View.GONE);
    locationButton.setVisibility(View.GONE);
  }
  try {
    preview.setImageBitmap(MediaStore.Images.Media.getBitmap(this.getContentResolver(),imageUri));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (Configuration.ENABLE_ANDROID_SHARING) {
    enable_android_sharing();
  }
 else {
    AndroidSharingListButton.setVisibility(View.GONE);
  }
  if (Configuration.ENABLE_BLUETOOTH) {
    enable_bluetooth();
  }
 else {
    bluetoothButton.setVisibility(View.GONE);
  }
  if (Configuration.ENABLE_DONATE) {
    enable_donate();
  }
 else {
    donateButton.setVisibility(View.GONE);
  }
  if (Configuration.ENABLE_ADVERTISEMENT) {
    enable_adView();
  }
}","private void enable_functions_or_hide_views(){
  if (Configuration.ENABLE_NFC) {
    if (!enable_nfc()) {
      nfcTextView.setText(""String_Node_Str"");
    }
  }
 else {
    nfcTextView.setVisibility(View.GONE);
  }
  if (Configuration.ENABLE_PHOTO_LOCATION_MODIFICATION) {
    enable_location_modification();
  }
 else {
    locationSwitch.setVisibility(View.GONE);
    locationButton.setVisibility(View.GONE);
  }
  try {
    preview.setImageBitmap(MediaStore.Images.Media.getBitmap(this.getContentResolver(),imageUri));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (Configuration.ENABLE_ANDROID_SHARING) {
    enable_android_sharing();
  }
 else {
    AndroidSharingListButton.setVisibility(View.GONE);
  }
  if (Configuration.ENABLE_BLUETOOTH) {
    enable_bluetooth();
  }
 else {
    bluetoothButton.setVisibility(View.GONE);
  }
  if (Configuration.ENABLE_ADVERTISEMENT) {
    enable_adView();
  }
}",0.9405789740985272
63756,"private void find_views(){
  bluetoothButton=(Button)findViewById(R.id.bluetoothButton);
  AndroidSharingListButton=(Button)findViewById(R.id.otherButton);
  donateButton=(Button)findViewById(R.id.donateButton);
  preview=(ImageView)findViewById(R.id.imageView);
  descriptionEditText=(EditText)findViewById(R.id.descriptionEditText);
  nfcTextView=(TextView)findViewById(R.id.nfcTextView);
  imageUri=(Uri)getIntent().getExtras().get(""String_Node_Str"");
  locationSwitch=(Switch)findViewById(R.id.locationSwitch);
  locationButton=(Button)findViewById(R.id.locationButton);
}","private void find_views(){
  bluetoothButton=(Button)findViewById(R.id.bluetoothButton);
  AndroidSharingListButton=(Button)findViewById(R.id.otherButton);
  preview=(ImageView)findViewById(R.id.imageView);
  descriptionEditText=(EditText)findViewById(R.id.descriptionEditText);
  nfcTextView=(TextView)findViewById(R.id.nfcTextView);
  imageUri=(Uri)getIntent().getExtras().get(""String_Node_Str"");
  locationSwitch=(Switch)findViewById(R.id.locationSwitch);
  locationButton=(Button)findViewById(R.id.locationButton);
}",0.948905109489051
63757,"public ShareToDrupal(Activity activity,AccountInfo accountInfo,String imagePath,String imageTitle){
  assertNotNullOrEmpty(context);
  assertNotNullOrEmpty(accountInfo);
  assertNotNullOrEmpty(imageTitle);
  assertNotNullOrEmpty(imagePath);
  this.activity=activity;
  this.context=activity.getApplicationContext();
  this.accountInfo=accountInfo;
  this.imagePath=imagePath;
  this.imageTitle=imageTitle;
  drupalURL=Configuration.DRUPAL_ROOT_URL;
}","public ShareToDrupal(Activity activity,AccountInfo accountInfo,String imagePath,String imageTitle){
  assertNotNullOrEmpty(activity);
  assertNotNullOrEmpty(accountInfo);
  assertNotNullOrEmpty(imagePath);
  assertNotNullOrEmpty(imageTitle);
  this.activity=activity;
  this.context=activity.getApplicationContext();
  this.accountInfo=accountInfo;
  this.imagePath=imagePath;
  this.imageTitle=imageTitle;
  drupalURL=Configuration.DRUPAL_ROOT_URL;
}",0.9633740288568258
63758,"public void saveSexagesimalBack(Uri imageUri,double latitude,double longitude) throws IOException {
  ExifInterface exifInterface=new ExifInterface(imageUri.getPath());
  if (latitude < 0) {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF,""String_Node_Str"");
  }
 else {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF,""String_Node_Str"");
  }
  exifInterface.setAttribute(ExifInterface.TAG_GPS_LATITUDE,convertToSexagesimal(latitude));
  if (longitude < 0) {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF,""String_Node_Str"");
  }
 else {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF,""String_Node_Str"");
  }
  exifInterface.setAttribute(ExifInterface.TAG_GPS_LONGITUDE,convertToSexagesimal(longitude));
}","public void saveSexagesimalBack(Uri imageUri,double latitude,double longitude) throws IOException {
  ExifInterface exifInterface=new ExifInterface(imageUri.getPath());
  if (latitude < 0) {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF,""String_Node_Str"");
  }
 else {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF,""String_Node_Str"");
  }
  exifInterface.setAttribute(ExifInterface.TAG_GPS_LATITUDE,convertToSexagesimal(latitude));
  if (longitude < 0) {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF,""String_Node_Str"");
  }
 else {
    exifInterface.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF,""String_Node_Str"");
  }
  exifInterface.setAttribute(ExifInterface.TAG_GPS_LONGITUDE,convertToSexagesimal(longitude));
  exifInterface.saveAttributes();
}",0.9786967418546366
63759,"public String convertToDegreeForm(Uri imageUri) throws IOException {
  ExifInterface exifInterface=new ExifInterface(imageUri.getPath());
  return getDegree(exifInterface.getAttribute(ExifInterface.TAG_GPS_LATITUDE),ExifInterface.TAG_GPS_LATITUDE_REF) + ""String_Node_Str"" + getDegree(exifInterface.getAttribute(ExifInterface.TAG_GPS_LONGITUDE),ExifInterface.TAG_GPS_LONGITUDE_REF);
}","public String convertToDegreeForm(Uri imageUri) throws IOException {
  ExifInterface exifInterface=new ExifInterface(imageUri.getPath());
  return getDegree(exifInterface.getAttribute(ExifInterface.TAG_GPS_LATITUDE),exifInterface.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF)) + ""String_Node_Str"" + getDegree(exifInterface.getAttribute(ExifInterface.TAG_GPS_LONGITUDE),exifInterface.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF));
}",0.9318734793187348
63760,"public RangeSeekbar(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  applyConfig(context,attrs);
  mPaddingRect=new Rect(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());
  mLeftCursorRect=new Rect();
  mRightCursorRect=new Rect();
  mSeekbarRect=new RectF();
  mSeekbarRectSelected=new RectF();
  mTextWidthArray=new float[mTextArray.length];
  mLeftScroller=new Scroller(context,new DecelerateInterpolator());
  mRightScroller=new Scroller(context,new DecelerateInterpolator());
  initPaint();
  initTextWidthArray();
  setWillNotDraw(false);
  setFocusable(true);
  setClickable(true);
}","public RangeSeekbar(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  applyConfig(context,attrs);
  mPaddingRect=new Rect(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());
  mLeftCursorRect=new Rect();
  mRightCursorRect=new Rect();
  mSeekbarRect=new RectF();
  mSeekbarRectSelected=new RectF();
  if (mTextArray != null) {
    mTextWidthArray=new float[mTextArray.length];
  }
  mLeftScroller=new Scroller(context,new DecelerateInterpolator());
  mRightScroller=new Scroller(context,new DecelerateInterpolator());
  initPaint();
  initTextWidthArray();
  setWillNotDraw(false);
  setFocusable(true);
  setClickable(true);
}",0.974436090225564
63761,"/** 
 * This method should be called after   {@link #setTextMarkSize(int)}, because view will measure size of text mark by paint.
 * @param size
 */
public void setTextMarks(CharSequence... marks){
  if (marks == null || marks.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextArray=marks;
  mLeftCursorIndex=0;
  mRightCursorIndex=mTextArray.length - 1;
  mRightCursorNextIndex=(int)mRightCursorIndex;
  initTextWidthArray();
  requestLayout();
  invalidate();
}","/** 
 * This method should be called after   {@link #setTextMarkSize(int)}, because view will measure size of text mark by paint.
 * @param size
 */
public void setTextMarks(CharSequence... marks){
  if (marks == null || marks.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextArray=marks;
  mLeftCursorIndex=0;
  mRightCursorIndex=mTextArray.length - 1;
  mRightCursorNextIndex=(int)mRightCursorIndex;
  mTextWidthArray=new float[marks.length];
  initTextWidthArray();
  requestLayout();
  invalidate();
}",0.9509143407122232
63762,"public void setLeftSelection(int partIndex){
  if (partIndex >= mTextArray.length - 1 || partIndex <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (partIndex != mLeftCursorIndex) {
    if (!mLeftScroller.isFinished()) {
      mLeftScroller.abortAnimation();
    }
    mLeftCursorNextIndex=partIndex;
    final int leftFromX=(int)(mLeftCursorIndex * mPartLength);
    mLeftScroller.startScroll(leftFromX,0,mLeftCursorNextIndex * mPartLength - leftFromX,0,mDuration);
    triggleCallback(true,mLeftCursorNextIndex);
    if (mRightCursorIndex <= mLeftCursorNextIndex) {
      if (!mRightScroller.isFinished()) {
        mRightScroller.abortAnimation();
      }
      mRightCursorNextIndex=mLeftCursorNextIndex + 1;
      final int rightFromX=(int)(mRightCursorIndex * mPartLength);
      mRightScroller.startScroll(rightFromX,0,mRightCursorNextIndex * mPartLength - rightFromX,0,mDuration);
      triggleCallback(false,mRightCursorNextIndex);
    }
    invalidate();
  }
}","public void setLeftSelection(int partIndex){
  if (partIndex >= mTextArray.length - 1 || partIndex < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mPartLength == 0) {
    mLeftCursorIndex=partIndex;
    return;
  }
  if (partIndex != mLeftCursorIndex) {
    if (!mLeftScroller.isFinished()) {
      mLeftScroller.abortAnimation();
    }
    mLeftCursorNextIndex=partIndex;
    final int leftFromX=(int)(mLeftCursorIndex * mPartLength);
    mLeftScroller.startScroll(leftFromX,0,mLeftCursorNextIndex * mPartLength - leftFromX,0,mDuration);
    triggleCallback(true,mLeftCursorNextIndex);
    if (mRightCursorIndex <= mLeftCursorNextIndex) {
      if (!mRightScroller.isFinished()) {
        mRightScroller.abortAnimation();
      }
      mRightCursorNextIndex=mLeftCursorNextIndex + 1;
      final int rightFromX=(int)(mRightCursorIndex * mPartLength);
      mRightScroller.startScroll(rightFromX,0,mRightCursorNextIndex * mPartLength - rightFromX,0,mDuration);
      triggleCallback(false,mRightCursorNextIndex);
    }
    invalidate();
  }
}",0.9637155297532656
63763,"public void setRightSelection(int partIndex){
  if (partIndex >= mTextArray.length || partIndex <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (partIndex != mRightCursorIndex) {
    if (!mRightScroller.isFinished()) {
      mRightScroller.abortAnimation();
    }
    mRightCursorNextIndex=partIndex;
    final int rightFromX=(int)(mPartLength * mRightCursorIndex);
    mRightScroller.startScroll(rightFromX,0,mRightCursorNextIndex * mPartLength - rightFromX,0,mDuration);
    triggleCallback(false,mRightCursorNextIndex);
    if (mLeftCursorIndex >= mRightCursorNextIndex) {
      if (!mLeftScroller.isFinished()) {
        mLeftScroller.abortAnimation();
      }
      mLeftCursorNextIndex=mRightCursorNextIndex - 1;
      final int leftFromX=(int)(mLeftCursorIndex * mPartLength);
      mLeftScroller.startScroll(leftFromX,0,mLeftCursorNextIndex * mPartLength - leftFromX,0,mDuration);
      triggleCallback(true,mLeftCursorNextIndex);
    }
    invalidate();
  }
}","public void setRightSelection(int partIndex){
  if (partIndex > mTextArray.length - 1 || partIndex <= 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mPartLength == 0) {
    mRightCursorIndex=partIndex;
    return;
  }
  if (partIndex != mRightCursorIndex) {
    if (!mRightScroller.isFinished()) {
      mRightScroller.abortAnimation();
    }
    mRightCursorNextIndex=partIndex;
    final int rightFromX=(int)(mPartLength * mRightCursorIndex);
    mRightScroller.startScroll(rightFromX,0,mRightCursorNextIndex * mPartLength - rightFromX,0,mDuration);
    triggleCallback(false,mRightCursorNextIndex);
    if (mLeftCursorIndex >= mRightCursorNextIndex) {
      if (!mLeftScroller.isFinished()) {
        mLeftScroller.abortAnimation();
      }
      mLeftCursorNextIndex=mRightCursorNextIndex - 1;
      final int leftFromX=(int)(mLeftCursorIndex * mPartLength);
      mLeftScroller.startScroll(leftFromX,0,mLeftCursorNextIndex * mPartLength - leftFromX,0,mDuration);
      triggleCallback(true,mLeftCursorNextIndex);
    }
    invalidate();
  }
}",0.9603864734299516
63764,"public void setTextMarkColorSelected(int color){
  if (color <= 0 || color == Color.TRANSPARENT) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextColorSelected=color;
  invalidate();
}","public void setTextMarkColorSelected(int color){
  if (color == Color.TRANSPARENT) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextColorSelected=color;
  invalidate();
}",0.965
63765,"public void setTextMarkColorNormal(int color){
  if (color <= 0 || color == Color.TRANSPARENT) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextColorNormal=color;
  invalidate();
}","public void setTextMarkColorNormal(int color){
  if (color == Color.TRANSPARENT) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextColorNormal=color;
  invalidate();
}",0.9642857142857144
63766,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  final int leftPointerH=mLeftCursorBG.getIntrinsicHeight();
  final int rightPointerH=mRightCursorBG.getIntrinsicHeight();
  final int maxOfCursor=Math.max(leftPointerH,rightPointerH);
  final int maxOfCursorAndSeekbar=Math.max(mSeekbarHeight,maxOfCursor);
  int heightNeeded=maxOfCursorAndSeekbar + mMarginBetween + mTextSize+ mPaddingRect.top+ mPaddingRect.bottom;
  if (heightMode == MeasureSpec.EXACTLY) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.EXACTLY);
  }
 else   if (heightMode == MeasureSpec.AT_MOST) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize < heightNeeded ? heightSize : heightNeeded,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightNeeded,MeasureSpec.EXACTLY);
  }
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  mSeekbarRect.left=mPaddingRect.left + mLeftCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.right=widthSize - mPaddingRect.right - mRightCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.top=mPaddingRect.top + mTextSize + mMarginBetween;
  mSeekbarRect.bottom=mSeekbarRect.top + mSeekbarHeight;
  mSeekbarRectSelected.top=mSeekbarRect.top;
  mSeekbarRectSelected.bottom=mSeekbarRect.bottom;
  mPartLength=((int)(mSeekbarRect.right - mSeekbarRect.left)) / (mTextArray.length - 1);
  mRightBoundary=(int)(mSeekbarRect.right + mRightCursorBG.getIntrinsicWidth() / 2);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int leftPointerH=mLeftCursorBG.getIntrinsicHeight();
  final int rightPointerH=mRightCursorBG.getIntrinsicHeight();
  final int maxOfCursor=Math.max(leftPointerH,rightPointerH);
  final int maxOfCursorAndSeekbar=Math.max(mSeekbarHeight,maxOfCursor);
  int heightNeeded=maxOfCursorAndSeekbar + mMarginBetween + mTextSize+ mPaddingRect.top+ mPaddingRect.bottom;
  if (heightMode == MeasureSpec.EXACTLY) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.EXACTLY);
  }
 else   if (heightMode == MeasureSpec.AT_MOST) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize < heightNeeded ? heightSize : heightNeeded,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightNeeded,MeasureSpec.EXACTLY);
  }
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  mSeekbarRect.left=mPaddingRect.left + mLeftCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.right=widthSize - mPaddingRect.right - mRightCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.top=mPaddingRect.top + mTextSize + mMarginBetween;
  mSeekbarRect.bottom=mSeekbarRect.top + mSeekbarHeight;
  mSeekbarRectSelected.top=mSeekbarRect.top;
  mSeekbarRectSelected.bottom=mSeekbarRect.bottom;
  mPartLength=((int)(mSeekbarRect.right - mSeekbarRect.left)) / (mTextArray.length - 1);
  mRightBoundary=(int)(mSeekbarRect.right + mRightCursorBG.getIntrinsicWidth() / 2);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
}",0.9806926141587496
63767,"public RangeSeekbar(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  applyConfig(context,attrs);
  mPaddingRect=new Rect(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());
  mLeftCursorRect=new Rect();
  mRightCursorRect=new Rect();
  mSeekbarRect=new RectF();
  mSeekbarRectSelected=new RectF();
  mTextWidthArray=new float[mTextArray.length];
  mLeftScroller=new Scroller(context,new DecelerateInterpolator());
  mRightScroller=new Scroller(context,new DecelerateInterpolator());
  initPaint();
  setWillNotDraw(false);
  setFocusable(true);
  setClickable(true);
}","public RangeSeekbar(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  applyConfig(context,attrs);
  mPaddingRect=new Rect(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());
  mLeftCursorRect=new Rect();
  mRightCursorRect=new Rect();
  mSeekbarRect=new RectF();
  mSeekbarRectSelected=new RectF();
  mTextWidthArray=new float[mTextArray.length];
  mLeftScroller=new Scroller(context,new DecelerateInterpolator());
  mRightScroller=new Scroller(context,new DecelerateInterpolator());
  initPaint();
  initTextWithArray();
  setWillNotDraw(false);
  setFocusable(true);
  setClickable(true);
}",0.978756884343037
63768,"private void initPaint(){
  mPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mPaint.setAntiAlias(true);
  mPaint.setStyle(Style.FILL);
  mPaint.setTextSize(mTextSize);
  final int length=mTextArray.length;
  for (int i=0; i < length; i++) {
    mTextWidthArray[i]=mPaint.measureText(mTextArray[i].toString());
  }
}","private void initPaint(){
  mPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mPaint.setAntiAlias(true);
  mPaint.setStyle(Style.FILL);
  mPaint.setTextSize(mTextSize);
}",0.690677966101695
63769,"public void setTextMarks(CharSequence... marks){
  if (marks == null || marks.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextArray=marks;
  mLeftCursorIndex=0;
  mRightCursorIndex=mTextArray.length - 1;
  mRightCursorNextIndex=(int)mRightCursorIndex;
}","public void setTextMarks(CharSequence... marks){
  if (marks == null || marks.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTextArray=marks;
  mLeftCursorIndex=0;
  mRightCursorIndex=mTextArray.length - 1;
  mRightCursorNextIndex=(int)mRightCursorIndex;
  initTextWithArray();
}",0.9618573797678276
63770,"private void applyConfig(Context context,AttributeSet attrs){
  if (attrs == null) {
    return;
  }
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.RangeSeekbar);
  mDuration=a.getInteger(R.styleable.RangeSeekbar_autoMoveDuration,DEFAULT_DURATION);
  mLeftCursorBG=a.getDrawable(R.styleable.RangeSeekbar_leftCursorBackground);
  mRightCursorBG=a.getDrawable(R.styleable.RangeSeekbar_rightCursorBackground);
  mTextColorNormal=a.getColor(R.styleable.RangeSeekbar_textColorNormal,Color.BLACK);
  mTextColorSelected=a.getColor(R.styleable.RangeSeekbar_textColorSelected,Color.rgb(242,79,115));
  mSeekbarColorNormal=a.getColor(R.styleable.RangeSeekbar_seekbarColorNormal,Color.rgb(218,215,215));
  mSeekbarColorSelected=a.getColor(R.styleable.RangeSeekbar_seekbarColorSelected,Color.rgb(242,79,115));
  mSeekbarHeight=(int)a.getDimension(R.styleable.RangeSeekbar_seekbarHeight,10);
  mTextSize=(int)a.getDimension(R.styleable.RangeSeekbar_textSize,15);
  mMarginBetween=(int)a.getDimension(R.styleable.RangeSeekbar_spaceBetween,15);
  mTextArray=a.getTextArray(R.styleable.RangeSeekbar_markTextArray);
  if (mTextArray != null && mTextArray.length > 0) {
    mLeftCursorIndex=0;
    mRightCursorIndex=mTextArray.length - 1;
    mRightCursorNextIndex=(int)mRightCursorIndex;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  a.recycle();
}","private void applyConfig(Context context,AttributeSet attrs){
  if (attrs == null) {
    return;
  }
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.RangeSeekbar);
  mDuration=a.getInteger(R.styleable.RangeSeekbar_autoMoveDuration,DEFAULT_DURATION);
  mLeftCursorBG=a.getDrawable(R.styleable.RangeSeekbar_leftCursorBackground);
  mRightCursorBG=a.getDrawable(R.styleable.RangeSeekbar_rightCursorBackground);
  mTextColorNormal=a.getColor(R.styleable.RangeSeekbar_textColorNormal,Color.BLACK);
  mTextColorSelected=a.getColor(R.styleable.RangeSeekbar_textColorSelected,Color.rgb(242,79,115));
  mSeekbarColorNormal=a.getColor(R.styleable.RangeSeekbar_seekbarColorNormal,Color.rgb(218,215,215));
  mSeekbarColorSelected=a.getColor(R.styleable.RangeSeekbar_seekbarColorSelected,Color.rgb(242,79,115));
  mSeekbarHeight=(int)a.getDimension(R.styleable.RangeSeekbar_seekbarHeight,10);
  mTextSize=(int)a.getDimension(R.styleable.RangeSeekbar_textSize,15);
  mMarginBetween=(int)a.getDimension(R.styleable.RangeSeekbar_spaceBetween,15);
  mTextArray=a.getTextArray(R.styleable.RangeSeekbar_markTextArray);
  if (mTextArray != null && mTextArray.length > 0) {
    mLeftCursorIndex=0;
    mRightCursorIndex=mTextArray.length - 1;
    mRightCursorNextIndex=(int)mRightCursorIndex;
  }
  a.recycle();
}",0.963900260513584
63771,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  final int leftPointerH=mLeftCursorBG.getIntrinsicHeight();
  final int rightPointerH=mRightCursorBG.getIntrinsicHeight();
  final int maxOfCursor=Math.max(leftPointerH,rightPointerH);
  final int maxOfCursorAndSeekbar=Math.max(mSeekbarHeight,maxOfCursor);
  int heightNeeded=maxOfCursorAndSeekbar + mMarginBetween + mTextSize+ mPaddingRect.top+ mPaddingRect.bottom;
  heightMeasureSpec=MeasureSpec.makeMeasureSpec(Math.max(heightSize,heightNeeded),MeasureSpec.EXACTLY);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  mSeekbarRect.left=mPaddingRect.left + mLeftCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.right=widthSize - mPaddingRect.right - mRightCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.top=mPaddingRect.top + mTextSize + mMarginBetween;
  mSeekbarRect.bottom=mSeekbarRect.top + mSeekbarHeight;
  mSeekbarRectSelected.top=mSeekbarRect.top;
  mSeekbarRectSelected.bottom=mSeekbarRect.bottom;
  mPartLength=((int)(mSeekbarRect.right - mSeekbarRect.left)) / (mTextArray.length - 1);
  mRightBoundary=(int)(mSeekbarRect.right + mRightCursorBG.getIntrinsicWidth() / 2);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  final int leftPointerH=mLeftCursorBG.getIntrinsicHeight();
  final int rightPointerH=mRightCursorBG.getIntrinsicHeight();
  final int maxOfCursor=Math.max(leftPointerH,rightPointerH);
  final int maxOfCursorAndSeekbar=Math.max(mSeekbarHeight,maxOfCursor);
  int heightNeeded=maxOfCursorAndSeekbar + mMarginBetween + mTextSize+ mPaddingRect.top+ mPaddingRect.bottom;
  if (heightMode == MeasureSpec.EXACTLY) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.EXACTLY);
  }
 else   if (heightMode == MeasureSpec.AT_MOST) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize < heightNeeded ? heightSize : heightNeeded,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightNeeded,MeasureSpec.EXACTLY);
  }
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  mSeekbarRect.left=mPaddingRect.left + mLeftCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.right=widthSize - mPaddingRect.right - mRightCursorBG.getIntrinsicWidth() / 2;
  mSeekbarRect.top=mPaddingRect.top + mTextSize + mMarginBetween;
  mSeekbarRect.bottom=mSeekbarRect.top + mSeekbarHeight;
  mSeekbarRectSelected.top=mSeekbarRect.top;
  mSeekbarRectSelected.bottom=mSeekbarRect.bottom;
  mPartLength=((int)(mSeekbarRect.right - mSeekbarRect.left)) / (mTextArray.length - 1);
  mRightBoundary=(int)(mSeekbarRect.right + mRightCursorBG.getIntrinsicWidth() / 2);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
}",0.8398895790200138
63772,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  final int length=mTextArray.length;
  mPaint.setTextSize(mTextSize);
  for (int i=0; i < length; i++) {
    if ((i > mLeftCursorIndex && i < mRightCursorIndex) || (i == mLeftCursorIndex || i == mRightCursorIndex)) {
      mPaint.setColor(mTextColorSelected);
    }
 else {
      mPaint.setColor(mTextColorNormal);
    }
    final String text2draw=mTextArray[i].toString();
    final float textWidth=mTextWidthArray[i];
    float textDrawLeft=mSeekbarRect.left + i * mPartLength - textWidth / 2;
    canvas.drawText(text2draw,textDrawLeft,mPaddingRect.top + mTextSize,mPaint);
  }
  final float radius=(float)mSeekbarHeight / 2;
  mSeekbarRectSelected.left=mSeekbarRect.left + mPartLength * mLeftCursorIndex;
  mSeekbarRectSelected.right=mSeekbarRect.left + mPartLength * mRightCursorIndex;
  if (mLeftCursorIndex == 0 && mRightCursorIndex == length - 1) {
    mPaint.setColor(mSeekbarColorSelected);
    canvas.drawRoundRect(mSeekbarRect,radius,radius,mPaint);
  }
 else {
    mPaint.setColor(mSeekbarColorNormal);
    canvas.drawRoundRect(mSeekbarRect,radius,radius,mPaint);
    mPaint.setColor(mSeekbarColorSelected);
    canvas.drawRect(mSeekbarRectSelected,mPaint);
  }
  final int leftWidth=mLeftCursorBG.getIntrinsicWidth();
  final int leftHieght=mLeftCursorBG.getIntrinsicHeight();
  final int leftLeft=(int)(mSeekbarRectSelected.left - (float)leftWidth / 2);
  final int leftTop=(int)((mSeekbarRect.top + mSeekbarHeight / 2) - (leftHieght / 2));
  mLeftCursorRect.left=leftLeft;
  mLeftCursorRect.top=leftTop;
  mLeftCursorRect.right=leftLeft + leftWidth;
  mLeftCursorRect.bottom=leftTop + leftHieght;
  mLeftCursorBG.setBounds(mLeftCursorRect);
  mLeftCursorBG.draw(canvas);
  final int rightWidth=mRightCursorBG.getIntrinsicWidth();
  final int rightHeight=mRightCursorBG.getIntrinsicHeight();
  final int rightLeft=(int)(mSeekbarRectSelected.right - (float)rightWidth / 2);
  final int rightTop=(int)((mSeekbarRectSelected.top + mSeekbarHeight / 2) - (rightHeight / 2));
  mRightCursorRect.left=rightLeft;
  mRightCursorRect.top=rightTop;
  mRightCursorRect.right=rightLeft + rightWidth;
  mRightCursorRect.bottom=rightTop + rightHeight;
  mRightCursorBG.setBounds(mRightCursorRect);
  mRightCursorBG.draw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  final int length=mTextArray.length;
  mPaint.setTextSize(mTextSize);
  for (int i=0; i < length; i++) {
    if ((i > mLeftCursorIndex && i < mRightCursorIndex) || (i == mLeftCursorIndex || i == mRightCursorIndex)) {
      mPaint.setColor(mTextColorSelected);
    }
 else {
      mPaint.setColor(mTextColorNormal);
    }
    final String text2draw=mTextArray[i].toString();
    final float textWidth=mTextWidthArray[i];
    float textDrawLeft=0;
    if (i == length - 1) {
      textDrawLeft=mSeekbarRect.right + (mRightCursorBG.getIntrinsicWidth() / 2) - textWidth;
    }
 else {
      textDrawLeft=mSeekbarRect.left + i * mPartLength - textWidth / 2;
    }
    canvas.drawText(text2draw,textDrawLeft,mPaddingRect.top + mTextSize,mPaint);
  }
  final float radius=(float)mSeekbarHeight / 2;
  mSeekbarRectSelected.left=mSeekbarRect.left + mPartLength * mLeftCursorIndex;
  mSeekbarRectSelected.right=mSeekbarRect.left + mPartLength * mRightCursorIndex;
  if (mLeftCursorIndex == 0 && mRightCursorIndex == length - 1) {
    mPaint.setColor(mSeekbarColorSelected);
    canvas.drawRoundRect(mSeekbarRect,radius,radius,mPaint);
  }
 else {
    mPaint.setColor(mSeekbarColorNormal);
    canvas.drawRoundRect(mSeekbarRect,radius,radius,mPaint);
    mPaint.setColor(mSeekbarColorSelected);
    canvas.drawRect(mSeekbarRectSelected,mPaint);
  }
  final int leftWidth=mLeftCursorBG.getIntrinsicWidth();
  final int leftHieght=mLeftCursorBG.getIntrinsicHeight();
  final int leftLeft=(int)(mSeekbarRectSelected.left - (float)leftWidth / 2);
  final int leftTop=(int)((mSeekbarRect.top + mSeekbarHeight / 2) - (leftHieght / 2));
  mLeftCursorRect.left=leftLeft;
  mLeftCursorRect.top=leftTop;
  mLeftCursorRect.right=leftLeft + leftWidth;
  mLeftCursorRect.bottom=leftTop + leftHieght;
  mLeftCursorBG.setBounds(mLeftCursorRect);
  mLeftCursorBG.draw(canvas);
  final int rightWidth=mRightCursorBG.getIntrinsicWidth();
  final int rightHeight=mRightCursorBG.getIntrinsicHeight();
  final int rightLeft=(int)(mSeekbarRectSelected.right - (float)rightWidth / 2);
  final int rightTop=(int)((mSeekbarRectSelected.top + mSeekbarHeight / 2) - (rightHeight / 2));
  mRightCursorRect.left=rightLeft;
  mRightCursorRect.top=rightTop;
  mRightCursorRect.right=rightLeft + rightWidth;
  mRightCursorRect.bottom=rightTop + rightHeight;
  mRightCursorBG.setBounds(mRightCursorRect);
  mRightCursorBG.draw(canvas);
}",0.9645628014258756
63773,"@Override public void onSurfaceTextureSizeChanged(final SurfaceTexture surface,final int width,final int height){
  mSurfaceWidth=width;
  mSurfaceHeight=height;
  boolean isValidState=(mTargetState == STATE_PLAYING);
  boolean hasValidSize=(mVideoWidth == width && mVideoHeight == height);
  if (mMediaPlayer != null && isValidState && hasValidSize) {
    if (mSeekWhenPrepared != 0) {
      seekTo(mSeekWhenPrepared);
    }
    start();
  }
}","@Override public void onSurfaceTextureSizeChanged(final SurfaceTexture surface,final int width,final int height){
  mSurfaceWidth=width;
  mSurfaceHeight=height;
  boolean isValidState=(mTargetState == STATE_PLAYING);
  boolean hasValidSize=(width > 0 && height > 0);
  if (mMediaPlayer != null && isValidState && hasValidSize) {
    if (mSeekWhenPrepared != 0) {
      seekTo(mSeekWhenPrepared);
    }
    start();
  }
}",0.9341040462427744
63774,"public void onPrepared(MediaPlayer mp){
  mCurrentState=STATE_PREPARED;
  mCanPause=mCanSeekBack=mCanSeekForward=true;
  if (mOnPreparedListener != null) {
    mOnPreparedListener.onPrepared(mMediaPlayer);
  }
  if (mMediaController != null) {
    mMediaController.setEnabled(true);
  }
  mVideoWidth=mp.getVideoWidth();
  mVideoHeight=mp.getVideoHeight();
  int seekToPosition=mSeekWhenPrepared;
  if (seekToPosition != 0) {
    seekTo(seekToPosition);
  }
  if (mVideoWidth != 0 && mVideoHeight != 0) {
    getSurfaceTexture().setDefaultBufferSize(mVideoWidth,mVideoHeight);
    if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) {
      if (mTargetState == STATE_PLAYING) {
        start();
        if (mMediaController != null) {
          mMediaController.show();
        }
      }
 else       if (!isPlaying() && (seekToPosition != 0 || getCurrentPosition() > 0)) {
        if (mMediaController != null) {
          mMediaController.show(0);
        }
      }
    }
  }
 else {
    if (mTargetState == STATE_PLAYING) {
      start();
    }
  }
}","public void onPrepared(MediaPlayer mp){
  mCurrentState=STATE_PREPARED;
  mCanPause=mCanSeekBack=mCanSeekForward=true;
  if (mOnPreparedListener != null) {
    mOnPreparedListener.onPrepared(mMediaPlayer);
  }
  if (mMediaController != null) {
    mMediaController.setEnabled(true);
  }
  mVideoWidth=mp.getVideoWidth();
  mVideoHeight=mp.getVideoHeight();
  int seekToPosition=mSeekWhenPrepared;
  if (seekToPosition != 0) {
    seekTo(seekToPosition);
  }
  if (mVideoWidth != 0 && mVideoHeight != 0) {
    getSurfaceTexture().setDefaultBufferSize(mVideoWidth,mVideoHeight);
    if (mTargetState == STATE_PLAYING) {
      start();
      if (mMediaController != null) {
        mMediaController.show();
      }
    }
 else     if (!isPlaying() && (seekToPosition != 0 || getCurrentPosition() > 0)) {
      if (mMediaController != null) {
        mMediaController.show(0);
      }
    }
  }
 else {
    if (mTargetState == STATE_PLAYING) {
      start();
    }
  }
}",0.928220255653884
63775,"@Override public void setValue(Object value){
  mValue=value;
  if (mValue == null || mValue.toString().equals(""String_Node_Str"")) {
    mValue=-1;
  }
  ODataRow row=new ODataRow();
  if (isEditable()) {
    if (mWidget != null) {
switch (mWidget) {
case RadioGroup:
        if (mResourceArray != -1) {
          ((RadioButton)mRadioGroup.getChildAt(getPos())).setChecked(true);
          row=items.get(getPos());
        }
 else {
          Integer row_id=null;
          if (mValue instanceof OM2ORecord) {
            row=((OM2ORecord)mValue).browse();
            row_id=row.getInt(OColumn.ROW_ID);
          }
 else           row_id=(Integer)mValue;
          int index=0;
          for (int i=0; i < items.size(); i++) {
            if (items.get(i).getInt(OColumn.ROW_ID) == row_id) {
              index=i;
              break;
            }
          }
          row=items.get(index);
          ((RadioButton)mRadioGroup.getChildAt(index)).setChecked(true);
        }
      break;
case Searchable:
case SearchableLive:
case SelectionDialog:
    if (mResourceArray != -1) {
      row=items.get(getPos());
    }
 else {
      if (mValue instanceof OM2ORecord)       row=((OM2ORecord)mValue).browse();
 else       if (mValue instanceof Integer)       row=getRecordData((Integer)mValue);
    }
  txvView.setText(row.getString(mModel.getDefaultNameColumn()));
if (txvView.getTag() != null) {
  AlertDialog dialog=(AlertDialog)txvView.getTag();
  dialog.dismiss();
}
break;
default :
break;
}
}
 else {
if (mResourceArray != -1) {
mSpinner.setSelection(getPos());
row=items.get(getPos());
}
 else if (mCol.getType().isAssignableFrom(OSelection.class)) {
int pos=getPos();
mSpinner.setSelection(pos);
if (pos != -1) {
row=mAdapter.getItem(pos);
mValue=pos;
}
}
 else {
Integer row_id=null;
if (mValue instanceof OM2ORecord) {
row=((OM2ORecord)mValue).browse();
row_id=row.getInt(OColumn.ROW_ID);
}
 else if (mValue instanceof Integer) row_id=(Integer)mValue;
int index=0;
for (int i=0; i < items.size(); i++) {
if (items.get(i).getInt(OColumn.ROW_ID) == row_id) {
index=i;
break;
}
}
row=items.get(index);
mSpinner.setSelection(index);
}
}
}
 else {
if (mResourceArray != -1 || mCol.getType().isAssignableFrom(OSelection.class)) {
int position=getPos();
if (position != -1) row=items.get(position);
}
 else {
if (mValue instanceof OM2ORecord) {
row=((OM2ORecord)mValue).browse();
if (row == null) {
row=new ODataRow();
}
}
 else {
if (!(mValue instanceof Boolean) && mValue != null && !mValue.toString().equals(""String_Node_Str"")) {
int row_id=(Integer)mValue;
row=getRecordData(row_id);
}
 else {
row=new ODataRow();
row.put(mModel.getDefaultNameColumn(),""String_Node_Str"" + mCol.getLabel() + ""String_Node_Str"");
}
}
}
if (!row.getString(mModel.getDefaultNameColumn()).equals(""String_Node_Str"")) txvView.setText(row.getString(mModel.getDefaultNameColumn()));
}
if (isEditable() && mValueUpdateListener != null && (mValue instanceof Integer && (int)mValue != -1)) {
mValueUpdateListener.onValueUpdate(row);
}
}","@Override public void setValue(Object value){
  mValue=value;
  if (mValue == null || mValue.toString().equals(""String_Node_Str"")) {
    mValue=-1;
  }
  ODataRow row=new ODataRow();
  if (isEditable()) {
    if (mWidget != null) {
switch (mWidget) {
case RadioGroup:
        if (mResourceArray != -1) {
          ((RadioButton)mRadioGroup.getChildAt(getPos())).setChecked(true);
          row=items.get(getPos());
        }
 else {
          Integer row_id=null;
          if (mValue instanceof OM2ORecord) {
            row=((OM2ORecord)mValue).browse();
            row_id=row.getInt(OColumn.ROW_ID);
          }
 else           row_id=(Integer)mValue;
          int index=0;
          for (int i=0; i < items.size(); i++) {
            if (items.get(i).getInt(OColumn.ROW_ID) == row_id) {
              index=i;
              break;
            }
          }
          row=items.get(index);
          ((RadioButton)mRadioGroup.getChildAt(index)).setChecked(true);
        }
      break;
case Searchable:
case SearchableLive:
case SelectionDialog:
    if (mResourceArray != -1) {
      row=items.get(getPos());
    }
 else {
      if (mValue instanceof OM2ORecord)       row=((OM2ORecord)mValue).browse();
 else       if (mValue instanceof Integer)       row=getRecordData((Integer)mValue);
    }
  txvView.setText(row.getString(mModel.getDefaultNameColumn()));
if (txvView.getTag() != null) {
  AlertDialog dialog=(AlertDialog)txvView.getTag();
  dialog.dismiss();
}
break;
default :
break;
}
}
 else {
if (mResourceArray != -1) {
mSpinner.setSelection(getPos());
row=items.get(getPos());
}
 else if (mCol.getType().isAssignableFrom(OSelection.class)) {
int pos=getPos();
mSpinner.setSelection(pos);
if (pos != -1) {
row=mAdapter.getItem(pos);
}
}
 else {
Integer row_id=null;
if (mValue instanceof OM2ORecord) {
row=((OM2ORecord)mValue).browse();
row_id=row.getInt(OColumn.ROW_ID);
}
 else if (mValue instanceof Integer) row_id=(Integer)mValue;
int index=0;
for (int i=0; i < items.size(); i++) {
if (items.get(i).getInt(OColumn.ROW_ID) == row_id) {
index=i;
break;
}
}
row=items.get(index);
mSpinner.setSelection(index);
}
}
}
 else {
if (mResourceArray != -1 || mCol.getType().isAssignableFrom(OSelection.class)) {
int position=getPos();
if (position != -1) row=items.get(position);
}
 else {
if (mValue instanceof OM2ORecord) {
row=((OM2ORecord)mValue).browse();
if (row == null) {
row=new ODataRow();
}
}
 else {
if (!(mValue instanceof Boolean) && mValue != null && !mValue.toString().equals(""String_Node_Str"")) {
int row_id=(Integer)mValue;
row=getRecordData(row_id);
}
 else {
row=new ODataRow();
row.put(mModel.getDefaultNameColumn(),""String_Node_Str"" + mCol.getLabel() + ""String_Node_Str"");
}
}
}
if (!row.getString(mModel.getDefaultNameColumn()).equals(""String_Node_Str"")) txvView.setText(row.getString(mModel.getDefaultNameColumn()));
}
if (isEditable() && mValueUpdateListener != null) {
if (mValue instanceof Integer && (int)mValue == -1) return;
mValueUpdateListener.onValueUpdate(row);
}
}",0.9840584523414148
63776,"@Override public void onFocusChange(final View v,final boolean hasFocus){
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (mSelfHostedURL && v.getId() == R.id.edtSelfHostedURL && !hasFocus) {
        if (!TextUtils.isEmpty(edtSelfHosted.getText()) && validateURL(edtSelfHosted.getText().toString())) {
          edtSelfHosted.setError(null);
          if (mAutoLogin) {
            findViewById(R.id.controls).setVisibility(View.GONE);
            findViewById(R.id.login_progress).setVisibility(View.VISIBLE);
            mLoginProcessStatus.setText(OResource.string(OdooLogin.this,R.string.status_connecting_to_server));
          }
          findViewById(R.id.imgValidURL).setVisibility(View.GONE);
          findViewById(R.id.serverURLCheckProgress).setVisibility(View.VISIBLE);
          findViewById(R.id.layoutBorderDB).setVisibility(View.GONE);
          findViewById(R.id.layoutDatabase).setVisibility(View.GONE);
          String test_url=createServerURL(edtSelfHosted.getText().toString());
          Log.v(""String_Node_Str"",""String_Node_Str"" + test_url);
          Odoo.createInstance(OdooLogin.this,test_url).setOnConnect(OdooLogin.this);
        }
      }
    }
  }
,500);
}","@Override public void onFocusChange(final View v,final boolean hasFocus){
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (mSelfHostedURL && v.getId() == R.id.edtSelfHostedURL && !hasFocus) {
        if (!TextUtils.isEmpty(edtSelfHosted.getText()) && validateURL(edtSelfHosted.getText().toString())) {
          edtSelfHosted.setError(null);
          if (mAutoLogin) {
            findViewById(R.id.controls).setVisibility(View.GONE);
            findViewById(R.id.login_progress).setVisibility(View.VISIBLE);
            mLoginProcessStatus.setText(OResource.string(OdooLogin.this,R.string.status_connecting_to_server));
          }
          findViewById(R.id.imgValidURL).setVisibility(View.GONE);
          findViewById(R.id.serverURLCheckProgress).setVisibility(View.VISIBLE);
          findViewById(R.id.layoutBorderDB).setVisibility(View.GONE);
          findViewById(R.id.layoutDatabase).setVisibility(View.GONE);
          String test_url=createServerURL(edtSelfHosted.getText().toString());
          Log.v(""String_Node_Str"",""String_Node_Str"" + test_url);
          try {
            Odoo.createInstance(OdooLogin.this,test_url).setOnConnect(OdooLogin.this);
          }
 catch (          OdooVersionException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
,500);
}",0.9537145079735512
63777,"private void loginUser(){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  String serverURL=createServerURL((mSelfHostedURL) ? edtSelfHosted.getText().toString() : OConstants.URL_ODOO);
  String databaseName;
  edtUsername=(EditText)findViewById(R.id.edtUserName);
  edtPassword=(EditText)findViewById(R.id.edtPassword);
  if (mSelfHostedURL) {
    edtSelfHosted.setError(null);
    if (TextUtils.isEmpty(edtSelfHosted.getText())) {
      edtSelfHosted.setError(OResource.string(this,R.string.error_provide_server_url));
      edtSelfHosted.requestFocus();
      return;
    }
    if (databaseSpinner != null && databases.size() > 1 && databaseSpinner.getSelectedItemPosition() == 0) {
      Toast.makeText(this,OResource.string(this,R.string.label_select_database),Toast.LENGTH_LONG).show();
      return;
    }
  }
  edtUsername.setError(null);
  edtPassword.setError(null);
  if (TextUtils.isEmpty(edtUsername.getText())) {
    edtUsername.setError(OResource.string(this,R.string.error_provide_username));
    edtUsername.requestFocus();
    return;
  }
  if (TextUtils.isEmpty(edtPassword.getText())) {
    edtPassword.setError(OResource.string(this,R.string.error_provide_password));
    edtPassword.requestFocus();
    return;
  }
  findViewById(R.id.controls).setVisibility(View.GONE);
  findViewById(R.id.login_progress).setVisibility(View.VISIBLE);
  mLoginProcessStatus.setText(OResource.string(OdooLogin.this,R.string.status_connecting_to_server));
  if (mConnectedToServer) {
    databaseName=databases.get(0);
    if (databaseSpinner != null) {
      databaseName=databases.get(databaseSpinner.getSelectedItemPosition());
    }
    mAutoLogin=false;
    loginProcess(null,serverURL,databaseName);
  }
 else {
    mAutoLogin=true;
    Log.v(""String_Node_Str"",""String_Node_Str"" + serverURL);
    Odoo.createInstance(OdooLogin.this,serverURL).setOnConnect(OdooLogin.this);
  }
}","private void loginUser(){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  String serverURL=createServerURL((mSelfHostedURL) ? edtSelfHosted.getText().toString() : OConstants.URL_ODOO);
  String databaseName;
  edtUsername=(EditText)findViewById(R.id.edtUserName);
  edtPassword=(EditText)findViewById(R.id.edtPassword);
  if (mSelfHostedURL) {
    edtSelfHosted.setError(null);
    if (TextUtils.isEmpty(edtSelfHosted.getText())) {
      edtSelfHosted.setError(OResource.string(this,R.string.error_provide_server_url));
      edtSelfHosted.requestFocus();
      return;
    }
    if (databaseSpinner != null && databases.size() > 1 && databaseSpinner.getSelectedItemPosition() == 0) {
      Toast.makeText(this,OResource.string(this,R.string.label_select_database),Toast.LENGTH_LONG).show();
      return;
    }
  }
  edtUsername.setError(null);
  edtPassword.setError(null);
  if (TextUtils.isEmpty(edtUsername.getText())) {
    edtUsername.setError(OResource.string(this,R.string.error_provide_username));
    edtUsername.requestFocus();
    return;
  }
  if (TextUtils.isEmpty(edtPassword.getText())) {
    edtPassword.setError(OResource.string(this,R.string.error_provide_password));
    edtPassword.requestFocus();
    return;
  }
  findViewById(R.id.controls).setVisibility(View.GONE);
  findViewById(R.id.login_progress).setVisibility(View.VISIBLE);
  mLoginProcessStatus.setText(OResource.string(OdooLogin.this,R.string.status_connecting_to_server));
  if (mConnectedToServer) {
    databaseName=databases.get(0);
    if (databaseSpinner != null) {
      databaseName=databases.get(databaseSpinner.getSelectedItemPosition());
    }
    mAutoLogin=false;
    loginProcess(null,serverURL,databaseName);
  }
 else {
    mAutoLogin=true;
    Log.v(""String_Node_Str"",""String_Node_Str"" + serverURL);
    try {
      Odoo.createInstance(OdooLogin.this,serverURL).setOnConnect(OdooLogin.this);
    }
 catch (    OdooVersionException e) {
      e.printStackTrace();
    }
  }
}",0.976960911208905
63778,"@Override protected Boolean doInBackground(OUser... params){
  OUser user=params[0];
  Odoo odoo=Odoo.createInstance(mContext,(user.isOAuthLogin()) ? user.getInstanceURL() : user.getHost());
  odoo.helper.OUser mUser=odoo.authenticate(user.getUsername(),user.getPassword(),(user.isOAuthLogin()) ? user.getInstanceDatabase() : user.getDatabase());
  if (mUser != null) {
    OUser updatedUser=new OUser();
    updatedUser.setFromBundle(mUser.getAsBundle());
    OdooAccountManager.updateUserData(mContext,user,updatedUser);
    try {
      Thread.sleep(1500);
    }
 catch (    Exception e) {
    }
    return true;
  }
  return false;
}","@Override protected Boolean doInBackground(OUser... params){
  try {
    OUser user=params[0];
    Odoo odoo=Odoo.createInstance(mContext,(user.isOAuthLogin()) ? user.getInstanceURL() : user.getHost());
    odoo.helper.OUser mUser=odoo.authenticate(user.getUsername(),user.getPassword(),(user.isOAuthLogin()) ? user.getInstanceDatabase() : user.getDatabase());
    if (mUser != null) {
      OUser updatedUser=new OUser();
      updatedUser.setFromBundle(mUser.getAsBundle());
      OdooAccountManager.updateUserData(mContext,user,updatedUser);
      Thread.sleep(1500);
      return true;
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  OdooVersionException e) {
    e.printStackTrace();
  }
  return false;
}",0.8813314037626628
63779,"private void syncData(OModel model,OUser user,ODomain domain_filter,SyncResult result,Boolean checkForDataLimit,Boolean createRelationRecords){
  Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
  model.onSyncStarted();
  try {
    ODomain domain=new ODomain();
    domain.append(model.defaultDomain());
    if (domain_filter != null) {
      domain.append(domain_filter);
    }
    if (checkForWriteCreateDate) {
      List<Integer> serverIds=model.getServerIds();
      if (model.checkForCreateDate() && checkForDataLimit) {
        if (serverIds.size() > 0) {
          if (model.checkForWriteDate() && !model.isEmptyTable()) {
            domain.add(""String_Node_Str"");
          }
          if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords&& model.getLastSyncDateTime() != null)           domain.add(""String_Node_Str"");
        }
        int data_limit=preferenceManager.getInt(""String_Node_Str"",60);
        domain.add(""String_Node_Str"",""String_Node_Str"",ODateUtils.getDateBefore(data_limit));
        if (serverIds.size() > 0) {
          domain.add(""String_Node_Str"",""String_Node_Str"",serverIds);
        }
      }
      if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords) {
        String last_sync_date=model.getLastSyncDateTime();
        if (last_sync_date != null) {
          domain.add(""String_Node_Str"",""String_Node_Str"",last_sync_date);
        }
      }
    }
    OdooResult response=mOdoo.searchRead(model.getModelName(),getFields(model),domain,0,mSyncDataLimit,""String_Node_Str"");
    if (response.containsKey(""String_Node_Str"")) {
      app.setOdoo(null,user);
      OPreferenceManager pref=new OPreferenceManager(mContext);
      OdooResult record=(OdooResult)response.get(""String_Node_Str"");
      if (pref.getBoolean(About.DEVELOPER_MODE,false)) {
      }
      return;
    }
    Log.v(TAG,""String_Node_Str"" + response.getRecords().size() + ""String_Node_Str"");
    OSyncDataUtils dataUtils=new OSyncDataUtils(mContext,mOdoo,model,user,response,result,createRelationRecords);
    if (model.allowUpdateRecordOnServer()) {
      dataUtils.updateRecordsOnServer(this);
    }
    handleRelationRecords(user,dataUtils.getRelationRecordsHashMap(),result);
    if (model.allowCreateRecordOnServer()) {
      createRecordsOnServer(model);
    }
    if (model.allowDeleteRecordOnServer()) {
      removeRecordOnServer(model);
    }
    if (model.allowDeleteRecordInLocal()) {
      removeNonExistRecordFromLocal(model);
    }
    Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
    if (createRelationRecords) {
      IrModel irModel=new IrModel(mContext,user);
      irModel.setLastSyncDateTimeToNow(model);
    }
    model.onSyncFinished();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (mSyncFinishListeners.containsKey(model.getModelName())) {
    OSyncAdapter adapter=mSyncFinishListeners.get(model.getModelName()).performNextSync(user,result);
    mSyncFinishListeners.remove(model.getModelName());
    if (adapter != null) {
      SyncResult syncResult=new SyncResult();
      OModel syncModel=model.createInstance(adapter.getModelClass());
      ContentProviderClient contentProviderClient=mContext.getContentResolver().acquireContentProviderClient(syncModel.authority());
      adapter.onPerformSync(user.getAccount(),null,syncModel.authority(),contentProviderClient,syncResult);
    }
  }
  model.close();
}","private void syncData(OModel model,OUser user,ODomain domain_filter,SyncResult result,Boolean checkForDataLimit,Boolean createRelationRecords){
  Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
  model.onSyncStarted();
  try {
    ODomain domain=new ODomain();
    domain.append(model.defaultDomain());
    if (domain_filter != null) {
      domain.append(domain_filter);
    }
    if (checkForWriteCreateDate) {
      List<Integer> serverIds=model.getServerIds();
      if (model.checkForCreateDate() && checkForDataLimit) {
        if (serverIds.size() > 0) {
          if (model.checkForWriteDate() && !model.isEmptyTable()) {
            domain.add(""String_Node_Str"");
          }
          if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords&& model.getLastSyncDateTime() != null)           domain.add(""String_Node_Str"");
        }
        int data_limit=preferenceManager.getInt(""String_Node_Str"",60);
        domain.add(""String_Node_Str"",""String_Node_Str"",ODateUtils.getDateBefore(data_limit));
        if (serverIds.size() > 0) {
          domain.add(""String_Node_Str"",""String_Node_Str"",serverIds);
        }
      }
      if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords) {
        String last_sync_date=model.getLastSyncDateTime();
        if (last_sync_date != null) {
          domain.add(""String_Node_Str"",""String_Node_Str"",last_sync_date);
        }
      }
    }
    OdooResult response=mOdoo.searchRead(model.getModelName(),getFields(model),domain,0,mSyncDataLimit,""String_Node_Str"");
    if (response.containsKey(""String_Node_Str"")) {
      app.setOdoo(null,user);
      OPreferenceManager pref=new OPreferenceManager(mContext);
      if (pref.getBoolean(About.DEVELOPER_MODE,false)) {
        OdooResult error=response.getMap(""String_Node_Str"");
        OLog.log(""String_Node_Str"" + error);
      }
      return;
    }
    Log.v(TAG,""String_Node_Str"" + response.getRecords().size() + ""String_Node_Str"");
    OSyncDataUtils dataUtils=new OSyncDataUtils(mContext,mOdoo,model,user,response,result,createRelationRecords);
    if (model.allowUpdateRecordOnServer()) {
      dataUtils.updateRecordsOnServer(this);
    }
    handleRelationRecords(user,dataUtils.getRelationRecordsHashMap(),result);
    if (model.allowCreateRecordOnServer()) {
      createRecordsOnServer(model);
    }
    if (model.allowDeleteRecordOnServer()) {
      removeRecordOnServer(model);
    }
    if (model.allowDeleteRecordInLocal()) {
      removeNonExistRecordFromLocal(model);
    }
    Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
    if (createRelationRecords) {
      IrModel irModel=new IrModel(mContext,user);
      irModel.setLastSyncDateTimeToNow(model);
    }
    model.onSyncFinished();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (mSyncFinishListeners.containsKey(model.getModelName())) {
    OSyncAdapter adapter=mSyncFinishListeners.get(model.getModelName()).performNextSync(user,result);
    mSyncFinishListeners.remove(model.getModelName());
    if (adapter != null) {
      SyncResult syncResult=new SyncResult();
      OModel syncModel=model.createInstance(adapter.getModelClass());
      ContentProviderClient contentProviderClient=mContext.getContentResolver().acquireContentProviderClient(syncModel.authority());
      adapter.onPerformSync(user.getAccount(),null,syncModel.authority(),contentProviderClient,syncResult);
    }
  }
  model.close();
}",0.975131448060253
63780,"public static Odoo createOdooInstance(final Context context,final OUser user){
  final App app=(App)context.getApplicationContext();
  Odoo odoo=app.getOdoo(user);
  if (odoo == null) {
    odoo=Odoo.createInstance(context,(user.isOAuthLogin()) ? user.getInstanceURL() : user.getHost());
    odoo.helper.OUser mUser=odoo.authenticate(user.getUsername(),user.getPassword(),(user.isOAuthLogin()) ? user.getInstanceDatabase() : user.getDatabase());
    app.setOdoo(odoo,user);
    if (mUser != null) {
      ResCompany company=new ResCompany(context,user);
      if (company.count(""String_Node_Str"",new String[]{user.getCompanyId() + ""String_Node_Str""}) <= 0) {
        ODataRow company_details=new ODataRow();
        company_details.put(""String_Node_Str"",user.getCompanyId());
        company.quickCreateRecord(company_details);
      }
    }
 else {
      Log.e(TAG,OResource.string(context,R.string.toast_something_gone_wrong));
    }
  }
  return odoo;
}","public static Odoo createOdooInstance(final Context context,final OUser user){
  final App app=(App)context.getApplicationContext();
  Odoo odoo=app.getOdoo(user);
  try {
    if (odoo == null) {
      odoo=Odoo.createQuickInstance(context,(user.isOAuthLogin()) ? user.getInstanceURL() : user.getHost());
      odoo.helper.OUser mUser=odoo.authenticate(user.getUsername(),user.getPassword(),(user.isOAuthLogin()) ? user.getInstanceDatabase() : user.getDatabase());
      app.setOdoo(odoo,user);
      if (mUser != null) {
        ResCompany company=new ResCompany(context,user);
        if (company.count(""String_Node_Str"",new String[]{user.getCompanyId() + ""String_Node_Str""}) <= 0) {
          ODataRow company_details=new ODataRow();
          company_details.put(""String_Node_Str"",user.getCompanyId());
          company.quickCreateRecord(company_details);
        }
      }
 else {
        Log.e(TAG,OResource.string(context,R.string.toast_something_gone_wrong));
      }
    }
  }
 catch (  OdooVersionException e) {
    e.printStackTrace();
  }
  return odoo;
}",0.9318181818181818
63781,"private HashMap<String,String> getWriteDate(OModel model,List<Integer> ids){
  HashMap<String,String> map=new HashMap<>();
  try {
    List<OdooRecord> result;
    if (model.getColumn(""String_Node_Str"") != null) {
      OdooFields fields=new OdooFields(new String[]{""String_Node_Str""});
      ODomain domain=new ODomain();
      domain.add(""String_Node_Str"",""String_Node_Str"",ids);
      OdooResult response=mOdoo.searchRead(model.getModelName(),fields,domain,0,0,null);
      result=response.getRecords();
    }
 else {
      OdooResult response=mOdoo.permRead(model.getModelName(),ids);
      result=response.getRecords();
    }
    if (!result.isEmpty()) {
      for (      OdooRecord record : result) {
        map.put(""String_Node_Str"" + record.getInt(""String_Node_Str""),record.getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return map;
}","private HashMap<String,String> getWriteDate(OModel model,List<Integer> ids){
  HashMap<String,String> map=new HashMap<>();
  try {
    List<OdooRecord> result;
    if (model.getColumn(""String_Node_Str"") != null) {
      OdooFields fields=new OdooFields(new String[]{""String_Node_Str""});
      ODomain domain=new ODomain();
      domain.add(""String_Node_Str"",""String_Node_Str"",ids);
      OdooResult response=mOdoo.searchRead(model.getModelName(),fields,domain,0,0,null);
      result=response.getRecords();
    }
 else {
      Log.i(TAG,""String_Node_Str"" + ids);
      OdooResult response=mOdoo.permRead(model.getModelName(),ids);
      result=response.getArray(""String_Node_Str"");
    }
    if (!result.isEmpty()) {
      for (      OdooRecord record : result) {
        map.put(""String_Node_Str"" + record.getInt(""String_Node_Str""),record.getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return map;
}",0.9607315761161916
63782,"/** 
 * Validate relation record for the record. And if relation record not created on server. It will be created on server before syncing original record
 * @param model
 * @param row
 * @return updatedRow
 */
public boolean validateRelationRecords(OModel model,ODataRow row){
  Log.d(TAG,""String_Node_Str"");
  for (  OColumn column : model.getRelationColumns()) {
    OModel relModel=model.createInstance(column.getType());
switch (column.getRelationType()) {
case ManyToOne:
      if (!row.getString(column.getName()).equals(""String_Node_Str"")) {
        ODataRow m2oRec=row.getM2ORecord(column.getName()).browse();
        if (m2oRec.getInt(""String_Node_Str"") == 0) {
          int new_id=relModel.getServerDataHelper().createOnServer(OdooRecordUtils.createRecordValues(relModel,m2oRec));
          updateRecordServerId(relModel,m2oRec.getInt(OColumn.ROW_ID),new_id);
        }
      }
    break;
case ManyToMany:
  List<ODataRow> m2mRecs=row.getM2MRecord(column.getName()).browseEach();
if (!m2mRecs.isEmpty()) {
  for (  ODataRow m2mRec : m2mRecs) {
    if (m2mRec.getInt(""String_Node_Str"") == 0) {
      int new_id=relModel.getServerDataHelper().createOnServer(OdooRecordUtils.createRecordValues(relModel,m2mRec));
      updateRecordServerId(relModel,m2mRec.getInt(OColumn.ROW_ID),new_id);
    }
  }
}
break;
case OneToMany:
List<ODataRow> o2mRecs=row.getM2MRecord(column.getName()).browseEach();
if (!o2mRecs.isEmpty()) {
for (ODataRow o2mRec : o2mRecs) {
if (o2mRec.getInt(""String_Node_Str"") == 0) {
int new_id=relModel.getServerDataHelper().createOnServer(OdooRecordUtils.createRecordValues(relModel,o2mRec));
updateRecordServerId(relModel,o2mRec.getInt(OColumn.ROW_ID),new_id);
}
}
}
break;
}
}
return true;
}","/** 
 * Validate relation record for the record. And if relation record not created on server. It will be created on server before syncing original record
 * @param model
 * @param row
 * @return updatedRow
 */
public boolean validateRelationRecords(OModel model,ODataRow row){
  Log.d(TAG,""String_Node_Str"");
  for (  OColumn column : model.getRelationColumns()) {
    OModel relModel=model.createInstance(column.getType());
switch (column.getRelationType()) {
case ManyToOne:
      if (!row.getString(column.getName()).equals(""String_Node_Str"")) {
        ODataRow m2oRec=row.getM2ORecord(column.getName()).browse();
        if (m2oRec.getInt(""String_Node_Str"") == 0) {
          int new_id=relModel.getServerDataHelper().createOnServer(OdooRecordUtils.createRecordValues(relModel,m2oRec));
          updateRecordServerId(relModel,m2oRec.getInt(OColumn.ROW_ID),new_id);
        }
      }
    break;
case ManyToMany:
  List<ODataRow> m2mRecs=row.getM2MRecord(column.getName()).browseEach();
if (!m2mRecs.isEmpty()) {
  for (  ODataRow m2mRec : m2mRecs) {
    if (m2mRec.getInt(""String_Node_Str"") == 0) {
      int new_id=relModel.getServerDataHelper().createOnServer(OdooRecordUtils.createRecordValues(relModel,m2mRec));
      updateRecordServerId(relModel,m2mRec.getInt(OColumn.ROW_ID),new_id);
    }
  }
}
break;
case OneToMany:
List<ODataRow> o2mRecs=row.getO2MRecord(column.getName()).browseEach();
if (!o2mRecs.isEmpty()) {
for (ODataRow o2mRec : o2mRecs) {
if (o2mRec.getInt(""String_Node_Str"") == 0) {
int new_id=relModel.getServerDataHelper().createOnServer(OdooRecordUtils.createRecordValues(relModel,o2mRec));
updateRecordServerId(relModel,o2mRec.getInt(OColumn.ROW_ID),new_id);
}
}
}
break;
}
}
return true;
}",0.9994186046511628
63783,"public void setLastSyncDateTimeToNow(OModel model){
  Log.i(TAG,""String_Node_Str"" + model.getModelName());
  OValues values=new OValues();
  values.put(""String_Node_Str"",model.getModelName());
  values.put(""String_Node_Str"",ODateUtils.getUTCDate());
  insertOrUpdate(""String_Node_Str"",new String[]{model.getModelName()},values);
}","public void setLastSyncDateTimeToNow(OModel model){
  Log.i(TAG,""String_Node_Str"" + model.getModelName());
  OValues values=new OValues();
  values.put(""String_Node_Str"",model.getModelName());
  Date last_sync=ODateUtils.createDateObject(ODateUtils.getUTCDate(),ODateUtils.DEFAULT_FORMAT,true);
  Calendar cal=Calendar.getInstance();
  cal.setTime(last_sync);
  cal.set(Calendar.SECOND,cal.get(Calendar.SECOND) + 2);
  last_sync=cal.getTime();
  values.put(""String_Node_Str"",ODateUtils.getDate(last_sync,ODateUtils.DEFAULT_FORMAT));
  insertOrUpdate(""String_Node_Str"",new String[]{model.getModelName()},values);
}",0.6829268292682927
63784,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.base_about);
  OActionBarUtils.setActionBar(this,true);
  setTitle(""String_Node_Str"");
  findViewById(R.id.abtus_header).setOnClickListener(this);
  TextView versionName, aboutLine2, aboutLine3, aboutLine4;
  versionName=(TextView)findViewById(R.id.txvVersionName);
  handler=getWindow().getDecorView().getHandler();
  try {
    PackageManager packageManager=getPackageManager();
    String version=packageManager.getPackageInfo(getPackageName(),0).versionName;
    String versionCode=packageManager.getPackageInfo(getPackageName(),0).versionCode + ""String_Node_Str"";
    versionName.setText(getResources().getString(R.string.label_version) + ""String_Node_Str"" + version+ ""String_Node_Str""+ versionCode+ ""String_Node_Str"");
    aboutLine2=(TextView)findViewById(R.id.line2);
    if (aboutLine2 != null) {
      aboutLine2.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine3=(TextView)findViewById(R.id.line3);
    if (aboutLine3 != null) {
      aboutLine3.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine4=(TextView)findViewById(R.id.line4);
    if (aboutLine4 != null) {
      aboutLine4.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.base_about);
  OActionBarUtils.setActionBar(this,true);
  setTitle(""String_Node_Str"");
  findViewById(R.id.abtus_header).setOnClickListener(this);
  TextView versionName, aboutLine2, aboutLine3, aboutLine4;
  versionName=(TextView)findViewById(R.id.txvVersionName);
  handler=new Handler();
  try {
    PackageManager packageManager=getPackageManager();
    String version=packageManager.getPackageInfo(getPackageName(),0).versionName;
    String versionCode=packageManager.getPackageInfo(getPackageName(),0).versionCode + ""String_Node_Str"";
    versionName.setText(getResources().getString(R.string.label_version) + ""String_Node_Str"" + version+ ""String_Node_Str""+ versionCode+ ""String_Node_Str"");
    aboutLine2=(TextView)findViewById(R.id.line2);
    if (aboutLine2 != null) {
      aboutLine2.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine3=(TextView)findViewById(R.id.line3);
    if (aboutLine3 != null) {
      aboutLine3.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine4=(TextView)findViewById(R.id.line4);
    if (aboutLine4 != null) {
      aboutLine4.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.988295537673738
63785,"public void exportDB(){
  FileChannel source=null;
  FileChannel destination=null;
  String currentDBPath=getDatabaseLocalPath();
  String backupDBPath=OStorageUtils.getDirectoryPath(""String_Node_Str"") + ""String_Node_Str"" + getDatabaseName();
  File currentDB=new File(currentDBPath);
  File backupDB=new File(backupDBPath);
  try {
    source=new FileInputStream(currentDB).getChannel();
    destination=new FileOutputStream(backupDB).getChannel();
    destination.transferFrom(source,0,source.size());
    source.close();
    destination.close();
    String subject=""String_Node_Str"" + getDatabaseName();
    Uri uri=Uri.fromFile(backupDB);
    Intent intent=new Intent(Intent.ACTION_SEND);
    intent.putExtra(Intent.EXTRA_STREAM,uri);
    intent.putExtra(Intent.EXTRA_SUBJECT,subject);
    intent.setType(""String_Node_Str"");
    mContext.startActivity(intent);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void exportDB(){
  FileChannel source;
  FileChannel destination;
  String currentDBPath=getDatabaseLocalPath();
  String backupDBPath=OStorageUtils.getDirectoryPath(""String_Node_Str"") + ""String_Node_Str"" + getDatabaseName();
  File currentDB=new File(currentDBPath);
  File backupDB=new File(backupDBPath);
  try {
    source=new FileInputStream(currentDB).getChannel();
    destination=new FileOutputStream(backupDB).getChannel();
    destination.transferFrom(source,0,source.size());
    source.close();
    destination.close();
    String subject=""String_Node_Str"" + getDatabaseName();
    Uri uri=Uri.fromFile(backupDB);
    Intent intent=new Intent(Intent.ACTION_SEND);
    intent.putExtra(Intent.EXTRA_STREAM,uri);
    intent.putExtra(Intent.EXTRA_SUBJECT,subject);
    intent.setType(""String_Node_Str"");
    mContext.startActivity(intent);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.99457111834962
63786,"public String getLastSyncDateTime(){
  IrModel model=new IrModel(mContext,mUser);
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{getModelName()});
  if (records.size() > 0) {
    return records.get(0).getString(""String_Node_Str"");
  }
  return null;
}","public String getLastSyncDateTime(){
  IrModel model=new IrModel(mContext,mUser);
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{getModelName()});
  if (records.size() > 0) {
    String date=records.get(0).getString(""String_Node_Str"");
    Date write_date=ODateUtils.createDateObject(date,ODateUtils.DEFAULT_FORMAT,true);
    Calendar cal=Calendar.getInstance();
    cal.setTime(write_date);
    cal.set(Calendar.SECOND,cal.get(Calendar.SECOND) + 2);
    write_date=cal.getTime();
    return ODateUtils.getDate(write_date,ODateUtils.DEFAULT_FORMAT);
  }
  return null;
}",0.528
63787,"private void syncData(OModel model,OUser user,ODomain domain_filter,SyncResult result,Boolean checkForDataLimit,Boolean createRelationRecords){
  Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
  try {
    ODomain domain=new ODomain();
    domain.append(model.defaultDomain());
    if (domain_filter != null) {
      domain.append(domain_filter);
    }
    if (checkForWriteCreateDate) {
      List<Integer> serverIds=model.getServerIds();
      if (model.checkForCreateDate() && checkForDataLimit) {
        if (serverIds.size() > 0) {
          if (model.checkForWriteDate() && !model.isEmptyTable()) {
            domain.add(""String_Node_Str"");
          }
          if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords&& model.getLastSyncDateTime() != null)           domain.add(""String_Node_Str"");
        }
        int data_limit=preferenceManager.getInt(""String_Node_Str"",60);
        domain.add(""String_Node_Str"",""String_Node_Str"",ODateUtils.getDateBefore(data_limit));
        if (serverIds.size() > 0) {
          domain.add(""String_Node_Str"",""String_Node_Str"",new JSONArray(serverIds.toString()));
        }
      }
      if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords) {
        String last_sync_date=model.getLastSyncDateTime();
        if (last_sync_date != null) {
          domain.add(""String_Node_Str"",""String_Node_Str"",last_sync_date);
        }
      }
    }
    JSONObject response=mOdoo.search_read(model.getModelName(),getFields(model),domain.get(),0,mSyncDataLimit,""String_Node_Str"",""String_Node_Str"");
    OSyncDataUtils dataUtils=new OSyncDataUtils(mContext,mOdoo,model,user,response,result,createRelationRecords);
    if (model.allowUpdateRecordOnServer()) {
      dataUtils.updateRecordsOnServer();
    }
    handleRelationRecords(user,dataUtils.getRelationRecordsHashMap(),result);
    if (model.allowCreateRecordOnServer()) {
      createRecordsOnServer(model);
    }
    if (model.allowDeleteRecordOnServer()) {
      removeRecordOnServer(model);
    }
    if (model.allowDeleteRecordInLocal()) {
      removeNonExistRecordFromLocal(model);
    }
    Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
    if (createRelationRecords) {
      IrModel irModel=new IrModel(mContext,user);
      irModel.setLastSyncDateTimeToNow(model);
    }
  }
 catch (  OdooSessionExpiredException odooSession) {
    app.setOdoo(null,user);
    if (user.isOAauthLogin()) {
    }
 else {
      showSignInErrorNotification(user);
    }
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  if (mSyncFinishListeners.containsKey(model.getModelName())) {
    OSyncAdapter adapter=mSyncFinishListeners.get(model.getModelName()).performNextSync(user,result);
    mSyncFinishListeners.remove(model.getModelName());
    if (adapter != null) {
      SyncResult syncResult=new SyncResult();
      OModel syncModel=model.createInstance(adapter.getModelClass());
      ContentProviderClient contentProviderClient=mContext.getContentResolver().acquireContentProviderClient(syncModel.authority());
      adapter.onPerformSync(user.getAccount(),null,syncModel.authority(),contentProviderClient,syncResult);
    }
  }
  model.close();
}","private void syncData(OModel model,OUser user,ODomain domain_filter,SyncResult result,Boolean checkForDataLimit,Boolean createRelationRecords){
  Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
  model.onSyncStarted();
  try {
    ODomain domain=new ODomain();
    domain.append(model.defaultDomain());
    if (domain_filter != null) {
      domain.append(domain_filter);
    }
    if (checkForWriteCreateDate) {
      List<Integer> serverIds=model.getServerIds();
      if (model.checkForCreateDate() && checkForDataLimit) {
        if (serverIds.size() > 0) {
          if (model.checkForWriteDate() && !model.isEmptyTable()) {
            domain.add(""String_Node_Str"");
          }
          if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords&& model.getLastSyncDateTime() != null)           domain.add(""String_Node_Str"");
        }
        int data_limit=preferenceManager.getInt(""String_Node_Str"",60);
        domain.add(""String_Node_Str"",""String_Node_Str"",ODateUtils.getDateBefore(data_limit));
        if (serverIds.size() > 0) {
          domain.add(""String_Node_Str"",""String_Node_Str"",new JSONArray(serverIds.toString()));
        }
      }
      if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords) {
        String last_sync_date=model.getLastSyncDateTime();
        if (last_sync_date != null) {
          domain.add(""String_Node_Str"",""String_Node_Str"",last_sync_date);
        }
      }
    }
    JSONObject response=mOdoo.search_read(model.getModelName(),getFields(model),domain.get(),0,mSyncDataLimit,""String_Node_Str"",""String_Node_Str"");
    OSyncDataUtils dataUtils=new OSyncDataUtils(mContext,mOdoo,model,user,response,result,createRelationRecords);
    if (model.allowUpdateRecordOnServer()) {
      dataUtils.updateRecordsOnServer(this);
    }
    handleRelationRecords(user,dataUtils.getRelationRecordsHashMap(),result);
    if (model.allowCreateRecordOnServer()) {
      createRecordsOnServer(model);
    }
    if (model.allowDeleteRecordOnServer()) {
      removeRecordOnServer(model);
    }
    if (model.allowDeleteRecordInLocal()) {
      removeNonExistRecordFromLocal(model);
    }
    Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
    if (createRelationRecords) {
      IrModel irModel=new IrModel(mContext,user);
      irModel.setLastSyncDateTimeToNow(model);
    }
    model.onSyncFinished();
  }
 catch (  OdooSessionExpiredException odooSession) {
    app.setOdoo(null,user);
    if (user.isOAauthLogin()) {
    }
 else {
      showSignInErrorNotification(user);
    }
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  if (mSyncFinishListeners.containsKey(model.getModelName())) {
    OSyncAdapter adapter=mSyncFinishListeners.get(model.getModelName()).performNextSync(user,result);
    mSyncFinishListeners.remove(model.getModelName());
    if (adapter != null) {
      SyncResult syncResult=new SyncResult();
      OModel syncModel=model.createInstance(adapter.getModelClass());
      ContentProviderClient contentProviderClient=mContext.getContentResolver().acquireContentProviderClient(syncModel.authority());
      adapter.onPerformSync(user.getAccount(),null,syncModel.authority(),contentProviderClient,syncResult);
    }
  }
  model.close();
}",0.991404011461318
63788,"/** 
 * Creates locally created record on server (id with zero)
 * @param model model object
 */
private void createRecordsOnServer(OModel model){
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  int counter=0;
  for (  ODataRow record : records) {
    int id=createOnServer(model,JSONUtils.createJSONValues(model,record));
    if (id != OModel.INVALID_ROW_ID) {
      OValues values=new OValues();
      values.put(""String_Node_Str"",id);
      values.put(""String_Node_Str"",""String_Node_Str"");
      values.put(""String_Node_Str"",ODateUtils.getUTCDate());
      model.update(record.getInt(OColumn.ROW_ID),values);
      counter++;
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  if (counter == records.size()) {
    Log.i(TAG,counter + ""String_Node_Str"");
  }
}","/** 
 * Creates locally created record on server (id with zero)
 * @param model model object
 */
private void createRecordsOnServer(OModel model){
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  int counter=0;
  for (  ODataRow record : records) {
    if (validateRelationRecords(model,record)) {
      if (model.selectServerId(record.getInt(OColumn.ROW_ID)) == 0) {
        int id=createOnServer(model,JSONUtils.createJSONValues(model,record));
        if (id != OModel.INVALID_ROW_ID) {
          OValues values=new OValues();
          values.put(""String_Node_Str"",id);
          values.put(""String_Node_Str"",""String_Node_Str"");
          values.put(""String_Node_Str"",ODateUtils.getUTCDate());
          model.update(record.getInt(OColumn.ROW_ID),values);
          counter++;
        }
 else {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
  if (counter == records.size()) {
    Log.i(TAG,counter + ""String_Node_Str"");
  }
}",0.8992999461497039
63789,"private void showSignInErrorNotification(OUser user){
  ONotificationBuilder builder=new ONotificationBuilder(mContext,REQUEST_SIGN_IN_ERROR);
  builder.setTitle(""String_Node_Str"");
  builder.setBigText(""String_Node_Str"" + ""String_Node_Str"");
  builder.setIcon(R.drawable.ic_action_alert_warning);
  builder.setText(user.getAndroidName());
  builder.allowVibrate(true);
  builder.withRingTone(false);
  builder.setOngoing(true);
  builder.withLargeIcon(false);
  builder.setColor(R.color.android_orange_dark);
  Bundle extra=user.getAsBundle();
  ONotificationBuilder.NotificationAction actionReset=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_refresh,""String_Node_Str"",110,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  ONotificationBuilder.NotificationAction deleteAccount=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_navigation_close,""String_Node_Str"",111,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  builder.addAction(actionReset);
  builder.addAction(deleteAccount);
  builder.build().show();
}","private void showSignInErrorNotification(OUser user){
  ONotificationBuilder builder=new ONotificationBuilder(mContext,REQUEST_SIGN_IN_ERROR);
  builder.setTitle(""String_Node_Str"");
  builder.setBigText(""String_Node_Str"" + ""String_Node_Str"");
  builder.setIcon(R.drawable.ic_action_alert_warning);
  builder.setText(user.getAndroidName());
  builder.allowVibrate(true);
  builder.withRingTone(false);
  builder.setOngoing(true);
  builder.withLargeIcon(false);
  builder.setColor(OResource.color(mContext,R.color.android_orange_dark));
  Bundle extra=user.getAsBundle();
  ONotificationBuilder.NotificationAction actionReset=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_refresh,""String_Node_Str"",110,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  ONotificationBuilder.NotificationAction deleteAccount=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_navigation_close,""String_Node_Str"",111,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  builder.addAction(actionReset);
  builder.addAction(deleteAccount);
  builder.build().show();
}",0.9878957169459964
63790,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mSavedInstanceState=savedInstanceState;
  Log.i(TAG,""String_Node_Str"");
  OPreferenceManager preferenceManager=new OPreferenceManager(this);
  if (!preferenceManager.getBoolean(KEY_FRESH_LOGIN,false)) {
    preferenceManager.setBoolean(KEY_FRESH_LOGIN,true);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        startActivity(new Intent(OdooActivity.this,AppIntro.class));
      }
    }
,1000);
  }
  setContentView(R.layout.odoo_activity);
  OActionBarUtils.setActionBar(this,true);
  setupDrawer();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.i(TAG,""String_Node_Str"");
  mSavedInstanceState=savedInstanceState;
  OPreferenceManager preferenceManager=new OPreferenceManager(this);
  if (!preferenceManager.getBoolean(KEY_FRESH_LOGIN,false)) {
    preferenceManager.setBoolean(KEY_FRESH_LOGIN,true);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        startActivity(new Intent(OdooActivity.this,AppIntro.class));
      }
    }
,1000);
  }
  setContentView(R.layout.odoo_activity);
  OActionBarUtils.setActionBar(this,true);
  setupDrawer();
}",0.934065934065934
63791,"private void settingUpdated(){
  OPreferenceManager mPref=new OPreferenceManager(this);
  int sync_interval=mPref.getInt(""String_Node_Str"",1440);
  List<String> default_authorities=new ArrayList<>();
  default_authorities.add(""String_Node_Str"");
  default_authorities.add(""String_Node_Str"");
  SyncAdapterType[] list=ContentResolver.getSyncAdapterTypes();
  Account mAccount=OUser.current(this).getAccount();
  for (  SyncAdapterType lst : list) {
    if (lst.authority.contains(""String_Node_Str"") && lst.authority.contains(""String_Node_Str"")) {
      default_authorities.add(lst.authority);
    }
  }
  for (  String authority : default_authorities) {
    boolean isSyncActive=ContentResolver.getSyncAutomatically(mAccount,authority);
    if (isSyncActive) {
      SyncUtils.get(this).setSyncPeriodic(authority,sync_interval,60,1);
    }
  }
  Toast.makeText(this,OResource.string(this,R.string.toast_setting_saved),Toast.LENGTH_LONG).show();
}","private void settingUpdated(){
  OUser user=OUser.current(this);
  if (user == null) {
    Intent loginActivity=new Intent(this,OdooLogin.class);
    loginActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
    startActivity(loginActivity);
    finish();
  }
 else {
    Account mAccount=user.getAccount();
    OPreferenceManager mPref=new OPreferenceManager(this);
    int sync_interval=mPref.getInt(""String_Node_Str"",1440);
    List<String> default_authorities=new ArrayList<>();
    default_authorities.add(""String_Node_Str"");
    default_authorities.add(""String_Node_Str"");
    SyncAdapterType[] list=ContentResolver.getSyncAdapterTypes();
    for (    SyncAdapterType lst : list) {
      if (lst.authority.contains(""String_Node_Str"") && lst.authority.contains(""String_Node_Str"")) {
        default_authorities.add(lst.authority);
      }
    }
    for (    String authority : default_authorities) {
      boolean isSyncActive=ContentResolver.getSyncAutomatically(mAccount,authority);
      if (isSyncActive) {
        SyncUtils.get(this).setSyncPeriodic(authority,sync_interval,60,1);
      }
    }
    Toast.makeText(this,OResource.string(this,R.string.toast_setting_saved),Toast.LENGTH_LONG).show();
  }
}",0.7693010507080859
63792,"@Override protected void onPostExecute(OUser oUser){
  super.onPostExecute(oUser);
  if (oUser != null) {
    OdooAccountManager.updateUserData(OdooAccountQuickManage.this,user);
    finish();
    Intent intent=new Intent(OdooAccountQuickManage.this,OdooActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    getApplicationContext().startActivity(intent);
  }
 else {
    edtPassword.setText(""String_Node_Str"");
    edtPassword.setError(""String_Node_Str"");
  }
}","@Override protected void onPostExecute(OUser oUser){
  super.onPostExecute(oUser);
  progressDialog.dismiss();
  if (oUser != null) {
    OdooAccountManager.updateUserData(OdooAccountQuickManage.this,user);
    finish();
    Intent intent=new Intent(OdooAccountQuickManage.this,OdooActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    getApplicationContext().startActivity(intent);
  }
 else {
    edtPassword.setText(""String_Node_Str"");
    edtPassword.setError(""String_Node_Str"");
  }
}",0.9767054908485856
63793,"private void removeAccount(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.title_confirm);
  builder.setMessage(R.string.toast_are_you_sure_delete_account);
  builder.setPositiveButton(R.string.label_delete,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      OdooAccountManager.removeAccount(OdooAccountQuickManage.this,user.getAndroidName());
      IntentUtils.startActivity(OdooAccountQuickManage.this,OdooLogin.class,null);
      finish();
    }
  }
);
  builder.setNegativeButton(R.string.label_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
      finish();
    }
  }
);
  builder.show();
}","private void removeAccount(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.title_confirm);
  builder.setMessage(R.string.toast_are_you_sure_delete_account);
  builder.setPositiveButton(R.string.label_delete,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (OdooAccountManager.removeAccount(OdooAccountQuickManage.this,user.getAndroidName())) {
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Intent loginActivity=new Intent(OdooAccountQuickManage.this,OdooLogin.class);
            loginActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            startActivity(loginActivity);
            finish();
          }
        }
,500);
      }
    }
  }
);
  builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      dialog.dismiss();
      finish();
    }
  }
);
  builder.setNegativeButton(R.string.label_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
      finish();
    }
  }
);
  builder.show();
}",0.7384026781444285
63794,"@Override public void onPause(){
  super.onPause();
  if (mSyncObserverHandle != null) {
    ContentResolver.removeStatusChangeListener(mSyncObserverHandle);
    mSyncObserverHandle=null;
  }
  parent().unregisterReceiver(syncFinishReceiver);
}","@Override public void onPause(){
  super.onPause();
  if (mSyncObserverHandle != null) {
    ContentResolver.removeStatusChangeListener(mSyncObserverHandle);
    mSyncObserverHandle=null;
  }
  try {
    parent().unregisterReceiver(syncFinishReceiver);
  }
 catch (  Exception e) {
  }
}",0.9152542372881356
63795,"public Odoo createInstance(){
  Odoo odoo=null;
  OUser user=OUser.current(getApplicationContext());
  if (user != null) {
    try {
      if (user.isOAauthLogin()) {
        odoo=new Odoo(user.getInstanceUrl(),user.isAllowSelfSignedSSL());
        OdooInstance instance=new OdooInstance();
        instance.setInstanceUrl(user.getInstanceUrl());
        instance.setDatabaseName(user.getInstanceDatabase());
        instance.setClientId(user.getClientId());
        odoo.oauth_authenticate(instance,user.getUsername(),user.getPassword());
      }
 else {
        odoo=new Odoo(user.getHost(),user.isAllowSelfSignedSSL());
        odoo.authenticate(user.getUsername(),user.getPassword(),user.getDatabase());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return odoo;
}","public Odoo createInstance(){
  Odoo odoo=null;
  OUser user=OUser.current(getApplicationContext());
  if (user != null) {
    try {
      if (user.isOAauthLogin()) {
        odoo=new Odoo(user.getInstanceUrl(),user.isAllowSelfSignedSSL());
        OdooInstance instance=new OdooInstance();
        instance.setInstanceUrl(user.getInstanceUrl());
        instance.setDatabaseName(user.getInstanceDatabase());
        instance.setClientId(user.getClientId());
        odoo.oauth_authenticate(instance,user.getUsername(),user.getPassword());
      }
 else {
        odoo=new Odoo(user.getHost(),user.isAllowSelfSignedSSL());
        odoo.authenticate(user.getUsername(),user.getPassword(),user.getDatabase());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  mOdooInstance=odoo;
  return odoo;
}",0.986469864698647
63796,"/** 
 * Removes the account.
 * @param context the context
 * @param username the username
 */
public static void removeAccount(Context context,String username){
  AccountManager accMgr=AccountManager.get(context);
  accMgr.removeAccount(OpenERPAccountManager.getAccount(context,username),null,null);
  App app=(App)context.getApplicationContext();
  app.setOEInstance(null);
  current_user=null;
}","/** 
 * Removes the account.
 * @param context the context
 * @param username the username 
 */
public static void removeAccount(Context context,String username){
  AccountManager accMgr=AccountManager.get(context);
  accMgr.removeAccount(OpenERPAccountManager.getAccount(context,username),null,null);
  App app=(App)context.getApplicationContext();
  app.setOEInstance(null);
  current_user=null;
}",0.998745294855709
63797,"private static boolean cancelAllSync(Account account){
  SyncWizardValues syncVals=new SyncWizardValues();
  boolean flag=false;
  for (  SyncValue sync : syncVals.syncValues()) {
    ContentResolver.cancelSync(account,sync.getAuthority());
    flag=true;
  }
  return flag;
}","private static boolean cancelAllSync(Account account){
  SyncWizardValues syncVals=new SyncWizardValues();
  for (  SyncValue sync : syncVals.syncValues()) {
    ContentResolver.cancelSync(account,sync.getAuthority());
  }
  return true;
}",0.8854368932038835
63798,"private void updateSyncSettings(){
  Log.d(TAG,""String_Node_Str"");
  PreferenceManager mPref=new PreferenceManager(mContext);
  int sync_interval=mPref.getInt(""String_Node_Str"",1440);
  List<String> default_authorities=new ArrayList<String>();
  default_authorities.add(""String_Node_Str"");
  default_authorities.add(""String_Node_Str"");
  SyncAdapterType[] list=ContentResolver.getSyncAdapterTypes();
  Account mAccount=OpenERPAccountManager.getAccount(mContext,OEUser.current(mContext).getAndroidName());
  for (  SyncAdapterType lst : list) {
    if (lst.authority.contains(""String_Node_Str"")) {
      default_authorities.add(lst.authority);
    }
  }
  for (  String authority : default_authorities) {
    boolean isSyncActive=ContentResolver.getSyncAutomatically(mAccount,authority);
    if (isSyncActive) {
      setSyncPeriodic(authority,sync_interval,1,1);
    }
  }
  Toast.makeText(this,R.string.toast_setting_saved,Toast.LENGTH_LONG).show();
}","private void updateSyncSettings(){
  Log.d(TAG,""String_Node_Str"");
  PreferenceManager mPref=new PreferenceManager(mContext);
  int sync_interval=mPref.getInt(""String_Node_Str"",1440);
  List<String> default_authorities=new ArrayList<String>();
  default_authorities.add(""String_Node_Str"");
  default_authorities.add(""String_Node_Str"");
  SyncAdapterType[] list=ContentResolver.getSyncAdapterTypes();
  Account mAccount=OpenERPAccountManager.getAccount(mContext,OEUser.current(mContext).getAndroidName());
  for (  SyncAdapterType lst : list) {
    if (lst.authority.contains(""String_Node_Str"") && lst.authority.contains(""String_Node_Str"")) {
      default_authorities.add(lst.authority);
    }
  }
  for (  String authority : default_authorities) {
    boolean isSyncActive=ContentResolver.getSyncAutomatically(mAccount,authority);
    if (isSyncActive) {
      setSyncPeriodic(authority,sync_interval,60,1);
    }
  }
  Toast.makeText(this,R.string.toast_setting_saved,Toast.LENGTH_LONG).show();
}",0.9753846153846154
63799,"private void initDrawer(List<DrawerItem> drawerItems){
  Res_PartnerDBHelper partner=new Res_PartnerDBHelper(context);
  Object obj=partner.search(partner,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},new String[]{OEUser.current(context).getPartner_id()}).get(""String_Node_Str"");
  String user_name=""String_Node_Str"";
  if (obj instanceof Boolean) {
    user_name=OEUser.current(context).getUsername();
  }
 else {
    user_name=((List<HashMap<String,Object>>)obj).get(0).get(""String_Node_Str"").toString();
  }
  mDrawerTitle=user_name;
  mDrawerSubtitle=OEUser.current(context).getHost();
  getActionBar().setHomeButtonEnabled(true);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setDrawerItems(drawerItems);
  if (mDrawerItemSelectedPosition > 0) {
    mAppTitle=mDrawerListItems.get(mDrawerItemSelectedPosition).getTitle();
    setTitle(mAppTitle);
  }
}","private void initDrawer(List<DrawerItem> drawerItems){
  if (OEUser.current(context) != null) {
    Res_PartnerDBHelper partner=new Res_PartnerDBHelper(context);
    Object obj=partner.search(partner,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},new String[]{OEUser.current(context).getPartner_id()}).get(""String_Node_Str"");
    String user_name=""String_Node_Str"";
    if (obj instanceof Boolean) {
      user_name=OEUser.current(context).getUsername();
    }
 else {
      user_name=((List<HashMap<String,Object>>)obj).get(0).get(""String_Node_Str"").toString();
    }
    mDrawerTitle=user_name;
    mDrawerSubtitle=OEUser.current(context).getHost();
    getActionBar().setHomeButtonEnabled(true);
    getActionBar().setDisplayHomeAsUpEnabled(true);
    setDrawerItems(drawerItems);
    if (mDrawerItemSelectedPosition > 0) {
      mAppTitle=mDrawerListItems.get(mDrawerItemSelectedPosition).getTitle();
      setTitle(mAppTitle);
    }
  }
}",0.9570885388375884
63800,"private void initDrawer(List<DrawerItem> drawerItems){
  Res_PartnerDBHelper partner=new Res_PartnerDBHelper(context);
  Object obj=partner.search(partner,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},new String[]{OEUser.current(context).getPartner_id()}).get(""String_Node_Str"");
  String user_name=""String_Node_Str"";
  if (obj instanceof Boolean) {
    user_name=OEUser.current(context).getUsername();
  }
 else {
    user_name=((List<HashMap<String,Object>>)obj).get(0).get(""String_Node_Str"").toString();
  }
  mDrawerTitle=user_name;
  mDrawerSubtitle=OEUser.current(context).getHost();
  getActionBar().setHomeButtonEnabled(true);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setDrawerItems(drawerItems);
}","private void initDrawer(List<DrawerItem> drawerItems){
  Res_PartnerDBHelper partner=new Res_PartnerDBHelper(context);
  Object obj=partner.search(partner,new String[]{""String_Node_Str""},new String[]{""String_Node_Str""},new String[]{OEUser.current(context).getPartner_id()}).get(""String_Node_Str"");
  String user_name=""String_Node_Str"";
  if (obj instanceof Boolean) {
    user_name=OEUser.current(context).getUsername();
  }
 else {
    user_name=((List<HashMap<String,Object>>)obj).get(0).get(""String_Node_Str"").toString();
  }
  mDrawerTitle=user_name;
  mDrawerSubtitle=OEUser.current(context).getHost();
  getActionBar().setHomeButtonEnabled(true);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setDrawerItems(drawerItems);
  if (mDrawerItemSelectedPosition > 0) {
    mAppTitle=mDrawerListItems.get(mDrawerItemSelectedPosition).getTitle();
    setTitle(mAppTitle);
  }
}",0.9096534653465348
63801,"@Override public void onStart(){
  super.onStart();
  mDrawerListView.setOnItemClickListener(this);
  int position=-1;
  if (mDrawerListItems.size() > 0) {
    if (!mDrawerListItems.get(0).isGroupTitle()) {
      mDrawerListView.setItemChecked(0,true);
      position=0;
    }
 else {
      mDrawerListView.setItemChecked(1,true);
      position=1;
    }
  }
  if (mDrawerItemSelectedPosition >= 0) {
    position=mDrawerItemSelectedPosition;
  }
  if (getIntent().getAction() != null && !getIntent().getAction().toString().equalsIgnoreCase(""String_Node_Str"")) {
    if (getIntent().getAction().toString().equalsIgnoreCase(""String_Node_Str"")) {
      startActivity(new Intent(context,MessageComposeActivty.class));
    }
    if (getIntent().getAction().toString().equalsIgnoreCase(""String_Node_Str"")) {
      startActivity(new Intent(context,ComposeNoteActivity.class));
    }
  }
 else {
    if (position > 0) {
      loadFragment(mDrawerListItems.get(position));
    }
  }
}","@Override public void onStart(){
  super.onStart();
  mDrawerListView.setOnItemClickListener(this);
  int position=-1;
  if (mDrawerListItems.size() > 0) {
    if (!mDrawerListItems.get(0).isGroupTitle()) {
      mDrawerListView.setItemChecked(0,true);
      position=0;
    }
 else {
      mDrawerListView.setItemChecked(1,true);
      position=1;
    }
  }
  if (mDrawerItemSelectedPosition >= 0) {
    position=mDrawerItemSelectedPosition;
  }
  if (getIntent().getAction() != null && !getIntent().getAction().toString().equalsIgnoreCase(""String_Node_Str"")) {
    if (getIntent().getAction().toString().equalsIgnoreCase(""String_Node_Str"")) {
      startActivity(new Intent(context,MessageComposeActivty.class));
    }
    if (getIntent().getAction().toString().equalsIgnoreCase(""String_Node_Str"")) {
      startActivity(new Intent(context,ComposeNoteActivity.class));
    }
  }
 else {
    if (position > 0) {
      if (position != mDrawerItemSelectedPosition) {
        loadFragment(mDrawerListItems.get(position));
      }
    }
  }
}",0.9687344913151364
63802,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  context=this;
  if (isStateExist == null) {
    NoteDBHelper db=new NoteDBHelper(context);
    isStateExist=String.valueOf(db.isPadExist());
  }
  if (findViewById(R.id.fragment_container) != null) {
    initDrawerControls();
    fragmentHandler=new FragmentHandler(this);
    boot=new Boot(this);
    if (savedInstanceState != null) {
      mPullToRefreshAttacher=new PullToRefreshAttacher(this);
      initDrawer(boot.getDrawerItems());
      return;
    }
    if (OpenERPAccountManager.hasAccounts(this) == false) {
      getActionBar().setDisplayHomeAsUpEnabled(false);
      getActionBar().setHomeButtonEnabled(false);
      lockDrawer(true);
      Fragment fragment=new AccountFragment();
      fragmentHandler.setBackStack(true,null);
      fragmentHandler.startNewFragmnet(fragment);
      return;
    }
 else {
      lockDrawer(false);
      Intent intent=getIntent();
      boolean reqForNewAccount=intent.getBooleanExtra(""String_Node_Str"",false);
      if (OpenERPAccountManager.isAnyUser(this) && !reqForNewAccount) {
        initDrawer(boot.getDrawerItems());
        mPullToRefreshAttacher=new PullToRefreshAttacher(this);
        if (savedInstanceState != null) {
          return;
        }
      }
 else {
        if (reqForNewAccount) {
          getActionBar().setDisplayHomeAsUpEnabled(false);
          getActionBar().setHomeButtonEnabled(false);
          Fragment fragment=new AccountFragment();
          fragmentHandler.startNewFragmnet(fragment);
          return;
        }
 else {
          Dialog dialog=onCreateDialogSingleChoice();
          dialog.setCancelable(false);
          dialog.show();
        }
      }
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  context=this;
  if (isStateExist == null) {
    NoteDBHelper db=new NoteDBHelper(context);
    isStateExist=String.valueOf(db.isPadExist());
  }
  if (findViewById(R.id.fragment_container) != null) {
    initDrawerControls();
    fragmentHandler=new FragmentHandler(this);
    boot=new Boot(this);
    if (savedInstanceState != null) {
      mDrawerItemSelectedPosition=savedInstanceState.getInt(""String_Node_Str"");
      mPullToRefreshAttacher=new PullToRefreshAttacher(this);
      initDrawer(boot.getDrawerItems());
      return;
    }
    if (OpenERPAccountManager.hasAccounts(this) == false) {
      getActionBar().setDisplayHomeAsUpEnabled(false);
      getActionBar().setHomeButtonEnabled(false);
      lockDrawer(true);
      Fragment fragment=new AccountFragment();
      fragmentHandler.setBackStack(true,null);
      fragmentHandler.startNewFragmnet(fragment);
      return;
    }
 else {
      lockDrawer(false);
      Intent intent=getIntent();
      boolean reqForNewAccount=intent.getBooleanExtra(""String_Node_Str"",false);
      if (OpenERPAccountManager.isAnyUser(this) && !reqForNewAccount) {
        initDrawer(boot.getDrawerItems());
        mPullToRefreshAttacher=new PullToRefreshAttacher(this);
        if (savedInstanceState != null) {
          return;
        }
      }
 else {
        if (reqForNewAccount) {
          getActionBar().setDisplayHomeAsUpEnabled(false);
          getActionBar().setHomeButtonEnabled(false);
          Fragment fragment=new AccountFragment();
          fragmentHandler.startNewFragmnet(fragment);
          return;
        }
 else {
          Dialog dialog=onCreateDialogSingleChoice();
          dialog.setCancelable(false);
          dialog.show();
        }
      }
    }
  }
}",0.9782608695652174
63803,"@Override public OEMenu menuHelper(Context context){
  OEMenu menu=new OEMenu();
  menu.setId(1);
  menu.setMenuTitle(""String_Node_Str"");
  setNoteStages(context);
  List<OEMenuItems> items=new ArrayList<OEMenuItems>();
  items.add(new OEMenuItems(""String_Node_Str"",getFragBundle(""String_Node_Str"",""String_Node_Str""),getCount(""String_Node_Str"",context)));
  items.add(new OEMenuItems(""String_Node_Str"",getFragBundle(""String_Node_Str"",""String_Node_Str""),0));
  if (stages != null) {
    int i=0;
    for (    String key : stages.keySet()) {
      if (i > tag_colors.length - 1) {
        i=0;
      }
      OEMenuItems stageMenu=new OEMenuItems(stages.get(key).toString(),getFragBundle(""String_Node_Str"",key),getCount(key,context));
      stageMenu.setAutoMenuTagColor(true);
      stageMenu.setMenuTagColor(Color.parseColor(tag_colors[i]));
      stage_colors.put(""String_Node_Str"" + key,stageMenu.getMenuTagColor());
      items.add(stageMenu);
      i++;
    }
  }
  menu.setMenuItems(items);
  return menu;
}","@Override public OEMenu menuHelper(Context context){
  db=(NoteDBHelper)databaseHelper(context);
  if (db.getOEInstance().isInstalled(""String_Node_Str"")) {
    OEMenu menu=new OEMenu();
    menu.setId(1);
    menu.setMenuTitle(""String_Node_Str"");
    setNoteStages(context);
    List<OEMenuItems> items=new ArrayList<OEMenuItems>();
    items.add(new OEMenuItems(""String_Node_Str"",getFragBundle(""String_Node_Str"",""String_Node_Str""),getCount(""String_Node_Str"",context)));
    items.add(new OEMenuItems(""String_Node_Str"",getFragBundle(""String_Node_Str"",""String_Node_Str""),0));
    if (stages != null) {
      int i=0;
      for (      String key : stages.keySet()) {
        if (i > tag_colors.length - 1) {
          i=0;
        }
        OEMenuItems stageMenu=new OEMenuItems(stages.get(key).toString(),getFragBundle(""String_Node_Str"",key),getCount(key,context));
        stageMenu.setAutoMenuTagColor(true);
        stageMenu.setMenuTagColor(Color.parseColor(tag_colors[i]));
        stage_colors.put(""String_Node_Str"" + key,stageMenu.getMenuTagColor());
        items.add(stageMenu);
        i++;
      }
    }
    menu.setMenuItems(items);
    return menu;
  }
 else {
    return null;
  }
}",0.8694469628286491
63804,"public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  scope=new AppScope(MainActivity.userContext,(MainActivity)getActivity());
  db=(NoteDBHelper)getModel();
  rootView=inflater.inflate(R.layout.fragment_note,container,false);
  lstNotes=(ListView)rootView.findViewById(R.id.lstNotes);
  emptyNotesText=(TextView)rootView.findViewById(R.id.txvNoteAllArchive);
  handleArguments((Bundle)getArguments());
  return rootView;
}","public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  scope=new AppScope(MainActivity.userContext,(MainActivity)getActivity());
  db=(NoteDBHelper)getModel();
  setHasOptionsMenu(true);
  rootView=inflater.inflate(R.layout.fragment_note,container,false);
  lstNotes=(ListView)rootView.findViewById(R.id.lstNotes);
  emptyNotesText=(TextView)rootView.findViewById(R.id.txvNoteAllArchive);
  handleArguments((Bundle)getArguments());
  return rootView;
}",0.9455645161290324
63805,"/** 
 * Load base modules.
 */
private void loadBaseModules(){
  this.modules.add(new Module(""String_Node_Str"",""String_Node_Str"",new ResFragment(),0));
  this.modules.add(new Module(""String_Node_Str"",""String_Node_Str"",new AttachmentFragment(),0));
}","/** 
 * Load base modules.
 */
private void loadBaseModules(){
  this.modules.add(new Module(""String_Node_Str"",""String_Node_Str"",new ResFragment(),0));
  this.modules.add(new Module(""String_Node_Str"",""String_Node_Str"",new AttachmentFragment(),0));
  this.modules.add(new Module(""String_Node_Str"",""String_Node_Str"",new Ir_modelFragment(),0));
}",0.8412162162162162
63806,"private void initFloatingMenu(final int sectionNumber,final Bundle savedInstanceState){
  int currentItem=((MainActivity2)getActivity()).mViewPager.getCurrentItem();
  if (sectionNumber == 0 || sectionNumber == 1) {
    Resources res=getResources();
    int action_item_padding=res.getDimensionPixelSize(R.dimen.float_action_item_padding);
    FloatingActionItem item1=new FloatingActionItem.Builder(0).withResId(R.drawable.ic_facebook).withDelay(50).withPadding(action_item_padding).build();
    FloatingActionItem item2=new FloatingActionItem.Builder(1).withResId(R.drawable.ic_twitter).withDelay(100).withPadding(action_item_padding).build();
    FloatingActionItem item3=new FloatingActionItem.Builder(1).withResId(R.drawable.ic_facebook).withDelay(0).withPadding(action_item_padding).build();
    FloatingActionItem item4=new FloatingActionItem.Builder(1).withResId(R.drawable.ic_instagram).withDelay(100).withPadding(action_item_padding).build();
    FloatingActionMenu.Builder builder=new FloatingActionMenu.Builder(getActivity()).withScrollDelegate(new FloatingActionMenu.AbsListViewScrollDelegate(getListView())).withThreshold(R.dimen.float_action_threshold).withGap(R.dimen.float_action_item_gap).withHorizontalPadding(R.dimen.float_action_h_padding).withVerticalPadding(R.dimen.float_action_v_padding).withGravity(sectionNumber == 1 ? FloatingActionMenu.Gravity.RIGHT | FloatingActionMenu.Gravity.BOTTOM : FloatingActionMenu.Gravity.RIGHT | FloatingActionMenu.Gravity.BOTTOM).withDirection(sectionNumber == 1 ? FloatingActionMenu.Direction.Vertical : FloatingActionMenu.Direction.Horizontal).animationDuration(200).animationInterpolator(new AccelerateDecelerateInterpolator()).visible(false);
    if (sectionNumber == 0) {
      builder.addItem(item1);
    }
 else {
      builder.addItem(item3);
      builder.addItem(item4);
    }
    mFloatingMenu=builder.build();
    mFloatingMenu.setOnItemClickListener(this);
  }
}","private void initFloatingMenu(final int sectionNumber,final Bundle savedInstanceState){
  int currentItem=((MainActivity2)getActivity()).mViewPager.getCurrentItem();
  if (sectionNumber == 0 || sectionNumber == 1) {
    Resources res=getResources();
    int action_item_padding=res.getDimensionPixelSize(R.dimen.float_action_item_padding);
    FloatingActionItem item1=new FloatingActionItem.Builder(0).withResId(R.drawable.ic_facebook).withDelay(50).withPadding(action_item_padding).build();
    FloatingActionItem item2=new FloatingActionItem.Builder(1).withResId(R.drawable.ic_twitter).withDelay(100).withPadding(action_item_padding).build();
    FloatingActionItem item3=new FloatingActionItem.Builder(1).withResId(R.drawable.ic_facebook).withDelay(0).withPadding(action_item_padding).build();
    FloatingActionItem item4=new FloatingActionItem.Builder(1).withResId(R.drawable.ic_instagram).withDelay(100).withPadding(action_item_padding).build();
    FloatingActionMenu.Builder builder=new FloatingActionMenu.Builder(getActivity()).withScrollDelegate(new FloatingActionMenu.AbsListViewScrollDelegate(getListView())).withThreshold(R.dimen.float_action_threshold).withGap(R.dimen.float_action_item_gap).withHorizontalPadding(R.dimen.float_action_h_padding).withVerticalPadding(R.dimen.float_action_v_padding).withGravity(sectionNumber == 1 ? FloatingActionMenu.Gravity.RIGHT | FloatingActionMenu.Gravity.BOTTOM : FloatingActionMenu.Gravity.RIGHT | FloatingActionMenu.Gravity.BOTTOM).withDirection(sectionNumber == 1 ? FloatingActionMenu.Direction.Vertical : FloatingActionMenu.Direction.Horizontal).animationDuration(200).animationInterpolator(new DecelerateInterpolator()).visible(false);
    if (sectionNumber == 0) {
      builder.addItem(item1);
    }
 else {
      builder.addItem(item3);
      builder.addItem(item4);
    }
    mFloatingMenu=builder.build();
    mFloatingMenu.setOnItemClickListener(this);
  }
}",0.9974052932018682
63807,"@Override public void run(){
  int currentItem=((MainActivity2)getActivity()).mViewPager.getCurrentItem();
  if (currentItem == sectionNumber) {
    mFloatingMenu.show(false);
  }
}","@Override public void run(){
  int currentItem=((MainActivity2)getActivity()).mViewPager.getCurrentItem();
  if (currentItem == sectionNumber) {
    mFloatingMenu.show(true,true);
  }
}",0.9672131147540984
63808,"@Override public void onViewCreated(final View view,final Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Log.i(TAG,""String_Node_Str"" + sectionNumber);
  initFloatingMenu(sectionNumber,savedInstanceState);
  if (null != mFloatingMenu) {
    view.postDelayed(new Runnable(){
      @Override public void run(){
        int currentItem=((MainActivity2)getActivity()).mViewPager.getCurrentItem();
        if (currentItem == sectionNumber) {
          mFloatingMenu.show(false);
        }
      }
    }
,20);
  }
}","@Override public void onViewCreated(final View view,final Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Log.i(TAG,""String_Node_Str"" + sectionNumber);
  initFloatingMenu(sectionNumber,savedInstanceState);
  if (null != mFloatingMenu) {
    view.postDelayed(new Runnable(){
      @Override public void run(){
        int currentItem=((MainActivity2)getActivity()).mViewPager.getCurrentItem();
        if (currentItem == sectionNumber) {
          mFloatingMenu.show(true,true);
        }
      }
    }
,100);
  }
}",0.9861495844875346
63809,"public static void setTypeface(Context ctx,AttributeSet attrs,TextView view){
  TypedArray a=ctx.obtainStyledAttributes(attrs,R.styleable.MagicTextView);
  String fontStyle=a.getString(R.styleable.MagicTextView_typeFace);
  view.setTypeface(MagicViews.getTypeface(ctx,fontStyle));
  a.recycle();
}","public static void setTypeface(Context ctx,AttributeSet attrs,TextView view){
  TypedArray a=ctx.obtainStyledAttributes(attrs,R.styleable.MagicTextView);
  String fontStyle=a.getString(R.styleable.MagicTextView_typeFace);
  if (fontStyle != null) {
    view.setTypeface(MagicViews.getTypeface(ctx,fontStyle));
  }
  a.recycle();
}",0.9473684210526316
63810,"@Override public void computeScroll(){
  if (mDragHelper.continueSettling(true)) {
    if (!mCanSlide) {
      mDragHelper.abort();
      return;
    }
    ViewCompat.postInvalidateOnAnimation(this);
  }
}","@Override public void computeScroll(){
  if (mDragHelper != null && mDragHelper.continueSettling(true)) {
    if (!mCanSlide) {
      mDragHelper.abort();
      return;
    }
    ViewCompat.postInvalidateOnAnimation(this);
  }
}",0.9468822170900691
63811,"public final int read(ByteBuffer dst) throws IOException {
  int available=this.buf.remaining();
  int size=dst.remaining();
  ByteBuffer slice=this.buf.slice();
  slice.limit(size);
  dst.put(slice);
  this.buf.position(this.buf.position() + size);
  return size;
}","public final int read(ByteBuffer dst) throws IOException {
  int available=this.buf.remaining();
  int size=java.lang.Math.min(dst.remaining(),available);
  ByteBuffer slice=this.buf.slice();
  slice.limit(size);
  dst.put(slice);
  this.buf.position(this.buf.position() + size);
  return size;
}",0.9039145907473308
63812,"static void transferPointer(SegmentBuilder dstSegment,int dstOffset,SegmentBuilder srcSegment,int srcOffset,int srcTargetOffset){
  long src=srcSegment.get(srcOffset);
  long srcTarget=srcSegment.get(srcTargetOffset);
  if (dstSegment == srcSegment) {
    if (WirePointer.kind(src) == WirePointer.STRUCT && StructPointer.wordSize(src) == 0) {
      WirePointer.setKindAndTargetForEmptyStruct(dstSegment.buffer,dstOffset);
    }
 else {
      WirePointer.setKindAndTarget(dstSegment.buffer,dstOffset,WirePointer.kind(src),srcTargetOffset);
      dstSegment.buffer.putInt(dstOffset * Constants.BYTES_PER_WORD + 4,srcSegment.buffer.getInt(srcOffset * Constants.BYTES_PER_WORD + 4));
    }
  }
 else {
    int landingPadOffset=srcSegment.allocate(1);
    if (landingPadOffset == SegmentBuilder.FAILED_ALLOCATION) {
      BuilderArena.AllocateResult allocation=srcSegment.getArena().allocate(2);
      SegmentBuilder farSegment=allocation.segment;
      landingPadOffset=allocation.offset;
      FarPointer.set(farSegment.buffer,landingPadOffset,false,srcTargetOffset);
      FarPointer.setSegmentId(farSegment.buffer,landingPadOffset,srcSegment.id);
      WirePointer.setKindWithZeroOffset(farSegment.buffer,landingPadOffset + 1,WirePointer.kind(srcTarget));
      farSegment.buffer.putInt((landingPadOffset + 1) * Constants.BYTES_PER_WORD + 4,srcSegment.buffer.getInt(srcOffset * Constants.BYTES_PER_WORD + 4));
      FarPointer.set(dstSegment.buffer,dstOffset,true,landingPadOffset);
      FarPointer.setSegmentId(dstSegment.buffer,dstOffset,farSegment.id);
    }
 else {
      WirePointer.setKindAndTarget(srcSegment.buffer,landingPadOffset,WirePointer.kind(srcTarget),srcTargetOffset);
      srcSegment.buffer.putInt(landingPadOffset * Constants.BYTES_PER_WORD + 4,srcSegment.buffer.getInt(srcOffset * Constants.BYTES_PER_WORD + 4));
      FarPointer.set(dstSegment.buffer,dstOffset,false,landingPadOffset);
      FarPointer.setSegmentId(dstSegment.buffer,dstOffset,srcSegment.id);
    }
  }
}","static void transferPointer(SegmentBuilder dstSegment,int dstOffset,SegmentBuilder srcSegment,int srcOffset,int srcTargetOffset){
  long src=srcSegment.get(srcOffset);
  long srcTarget=srcSegment.get(srcTargetOffset);
  if (dstSegment == srcSegment) {
    if (WirePointer.kind(src) == WirePointer.STRUCT && StructPointer.wordSize(src) == 0) {
      WirePointer.setKindAndTargetForEmptyStruct(dstSegment.buffer,dstOffset);
    }
 else {
      WirePointer.setKindAndTarget(dstSegment.buffer,dstOffset,WirePointer.kind(src),srcTargetOffset);
    }
    dstSegment.buffer.putInt(dstOffset * Constants.BYTES_PER_WORD + 4,srcSegment.buffer.getInt(srcOffset * Constants.BYTES_PER_WORD + 4));
  }
 else {
    int landingPadOffset=srcSegment.allocate(1);
    if (landingPadOffset == SegmentBuilder.FAILED_ALLOCATION) {
      BuilderArena.AllocateResult allocation=srcSegment.getArena().allocate(2);
      SegmentBuilder farSegment=allocation.segment;
      landingPadOffset=allocation.offset;
      FarPointer.set(farSegment.buffer,landingPadOffset,false,srcTargetOffset);
      FarPointer.setSegmentId(farSegment.buffer,landingPadOffset,srcSegment.id);
      WirePointer.setKindWithZeroOffset(farSegment.buffer,landingPadOffset + 1,WirePointer.kind(srcTarget));
      farSegment.buffer.putInt((landingPadOffset + 1) * Constants.BYTES_PER_WORD + 4,srcSegment.buffer.getInt(srcOffset * Constants.BYTES_PER_WORD + 4));
      FarPointer.set(dstSegment.buffer,dstOffset,true,landingPadOffset);
      FarPointer.setSegmentId(dstSegment.buffer,dstOffset,farSegment.id);
    }
 else {
      WirePointer.setKindAndTarget(srcSegment.buffer,landingPadOffset,WirePointer.kind(srcTarget),srcTargetOffset);
      srcSegment.buffer.putInt(landingPadOffset * Constants.BYTES_PER_WORD + 4,srcSegment.buffer.getInt(srcOffset * Constants.BYTES_PER_WORD + 4));
      FarPointer.set(dstSegment.buffer,dstOffset,false,landingPadOffset);
      FarPointer.setSegmentId(dstSegment.buffer,dstOffset,srcSegment.id);
    }
  }
}",0.9974899598393574
63813,"public int read(ByteBuffer outBuf) throws IOException {
  int len=outBuf.remaining();
  if (len == 0) {
    return 0;
  }
  if (len % 8 != 0) {
    throw new Error(""String_Node_Str"");
  }
  int outPtr=outBuf.position();
  int outEnd=outPtr + len;
  ByteBuffer inBuf=this.inner.getReadBuffer();
  while (true) {
    byte tag=0;
    if (inBuf.remaining() < 10) {
      if (outBuf.remaining() == 0) {
        return len;
      }
      if (inBuf.remaining() == 0) {
        inBuf=this.inner.getReadBuffer();
        continue;
      }
      tag=inBuf.get();
      for (int i=0; i < 8; ++i) {
        if ((tag & (1 << i)) != 0) {
          if (inBuf.remaining() == 0) {
            inBuf=this.inner.getReadBuffer();
          }
          outBuf.put(inBuf.get());
        }
 else {
          outBuf.put((byte)0);
        }
      }
      if (inBuf.remaining() == 0 && (tag == 0 || tag == (byte)0xff)) {
        inBuf=this.inner.getReadBuffer();
      }
    }
 else {
      tag=inBuf.get();
      for (int n=0; n < 8; ++n) {
        boolean isNonzero=(tag & (1 << n)) != 0;
        outBuf.put((byte)(inBuf.get() & (isNonzero ? -1 : 0)));
        inBuf.position(inBuf.position() + (isNonzero ? 0 : -1));
      }
    }
    if (tag == 0) {
      if (inBuf.remaining() == 0) {
        throw new Error(""String_Node_Str"");
      }
      int runLength=inBuf.get() * 8;
      if (runLength > outEnd - outPtr) {
        throw new Error(""String_Node_Str"");
      }
      for (int i=0; i < runLength; ++i) {
        outBuf.put((byte)0);
      }
    }
 else     if (tag == (byte)0xff) {
      int runLength=inBuf.get() * 8;
      if (inBuf.remaining() >= runLength) {
        ByteBuffer slice=inBuf.slice();
        slice.limit(runLength);
        outBuf.put(slice);
        inBuf.position(inBuf.position() + runLength);
      }
 else {
        runLength-=inBuf.remaining();
        outBuf.put(inBuf);
        ByteBuffer slice=outBuf.slice();
        slice.limit(runLength);
        this.inner.read(slice);
        outBuf.position(outBuf.position() + runLength);
        if (outBuf.remaining() == 0) {
          return len;
        }
 else {
          inBuf=this.inner.getReadBuffer();
          continue;
        }
      }
    }
    if (outBuf.remaining() == 0) {
      return len;
    }
  }
}","public int read(ByteBuffer outBuf) throws IOException {
  int len=outBuf.remaining();
  if (len == 0) {
    return 0;
  }
  if (len % 8 != 0) {
    throw new Error(""String_Node_Str"");
  }
  int outPtr=outBuf.position();
  int outEnd=outPtr + len;
  ByteBuffer inBuf=this.inner.getReadBuffer();
  while (true) {
    byte tag=0;
    if (inBuf.remaining() < 10) {
      if (outBuf.remaining() == 0) {
        return len;
      }
      if (inBuf.remaining() == 0) {
        inBuf=this.inner.getReadBuffer();
        continue;
      }
      tag=inBuf.get();
      for (int i=0; i < 8; ++i) {
        if ((tag & (1 << i)) != 0) {
          if (inBuf.remaining() == 0) {
            inBuf=this.inner.getReadBuffer();
          }
          outBuf.put(inBuf.get());
        }
 else {
          outBuf.put((byte)0);
        }
      }
      if (inBuf.remaining() == 0 && (tag == 0 || tag == (byte)0xff)) {
        inBuf=this.inner.getReadBuffer();
      }
    }
 else {
      tag=inBuf.get();
      for (int n=0; n < 8; ++n) {
        boolean isNonzero=(tag & (1 << n)) != 0;
        outBuf.put((byte)(inBuf.get() & (isNonzero ? -1 : 0)));
        inBuf.position(inBuf.position() + (isNonzero ? 0 : -1));
      }
    }
    if (tag == 0) {
      if (inBuf.remaining() == 0) {
        throw new Error(""String_Node_Str"");
      }
      int runLength=(0xff & (int)inBuf.get()) * 8;
      if (runLength > outEnd - outPtr) {
        throw new Error(""String_Node_Str"");
      }
      for (int i=0; i < runLength; ++i) {
        outBuf.put((byte)0);
      }
    }
 else     if (tag == (byte)0xff) {
      int runLength=(0xff & (int)inBuf.get()) * 8;
      if (inBuf.remaining() >= runLength) {
        ByteBuffer slice=inBuf.slice();
        slice.limit(runLength);
        outBuf.put(slice);
        inBuf.position(inBuf.position() + runLength);
      }
 else {
        runLength-=inBuf.remaining();
        outBuf.put(inBuf);
        ByteBuffer slice=outBuf.slice();
        slice.limit(runLength);
        this.inner.read(slice);
        outBuf.position(outBuf.position() + runLength);
        if (outBuf.remaining() == 0) {
          return len;
        }
 else {
          inBuf=this.inner.getReadBuffer();
          continue;
        }
      }
    }
    if (outBuf.remaining() == 0) {
      return len;
    }
  }
}",0.985133362483603
63814,"public static void writeAddressBook() throws java.io.IOException {
  MessageBuilder message=new MessageBuilder();
  AddressBook.Builder addressbook=message.initRoot(AddressBook.factory);
  StructList.Builder<Person.Builder> people=addressbook.initPeople(2);
  Person.Builder alice=people.get(0);
  alice.setId(123);
  alice.setName(new Text.Reader(""String_Node_Str""));
  alice.setEmail(new Text.Reader(""String_Node_Str""));
  StructList.Builder<Person.PhoneNumber.Builder> alicePhones=alice.initPhones(1);
  alicePhones.get(0).setNumber(new Text.Reader(""String_Node_Str""));
  alicePhones.get(0).setType(Person.PhoneNumber.Type.MOBILE);
  alice.getEmployment().setSchool(new Text.Reader(""String_Node_Str""));
  Person.Builder bob=people.get(1);
  bob.setId(456);
  bob.setName(new Text.Reader(""String_Node_Str""));
  bob.setEmail(new Text.Reader(""String_Node_Str""));
  StructList.Builder<Person.PhoneNumber.Builder> bobPhones=bob.initPhones(2);
  bobPhones.get(0).setNumber(new Text.Reader(""String_Node_Str""));
  bobPhones.get(0).setType(Person.PhoneNumber.Type.HOME);
  bobPhones.get(1).setNumber(new Text.Reader(""String_Node_Str""));
  bobPhones.get(1).setType(Person.PhoneNumber.Type.WORK);
  bob.getEmployment().setUnemployed(org.capnproto.Void.VOID);
  Serialize.writeMessage((new FileOutputStream(FileDescriptor.out)).getChannel(),message);
}","public static void writeAddressBook() throws java.io.IOException {
  MessageBuilder message=new MessageBuilder();
  AddressBook.Builder addressbook=message.initRoot(AddressBook.factory);
  StructList.Builder<Person.Builder> people=addressbook.initPeople(2);
  Person.Builder alice=people.get(0);
  alice.setId(123);
  alice.setName(new Text.Reader(""String_Node_Str""));
  alice.setEmail(new Text.Reader(""String_Node_Str""));
  StructList.Builder<Person.PhoneNumber.Builder> alicePhones=alice.initPhones(1);
  alicePhones.get(0).setNumber(new Text.Reader(""String_Node_Str""));
  alicePhones.get(0).setType(Person.PhoneNumber.Type.MOBILE);
  alice.getEmployment().setSchool(new Text.Reader(""String_Node_Str""));
  Person.Builder bob=people.get(1);
  bob.setId(456);
  bob.setName(new Text.Reader(""String_Node_Str""));
  bob.setEmail(new Text.Reader(""String_Node_Str""));
  StructList.Builder<Person.PhoneNumber.Builder> bobPhones=bob.initPhones(2);
  bobPhones.get(0).setNumber(new Text.Reader(""String_Node_Str""));
  bobPhones.get(0).setType(Person.PhoneNumber.Type.HOME);
  bobPhones.get(1).setNumber(new Text.Reader(""String_Node_Str""));
  bobPhones.get(1).setType(Person.PhoneNumber.Type.WORK);
  bob.getEmployment().setUnemployed(org.capnproto.Void.VOID);
  SerializePacked.writeMessageUnbuffered((new FileOutputStream(FileDescriptor.out)).getChannel(),message);
}",0.994078460399704
63815,"public int write(ByteBuffer inBuf) throws IOException {
  int length=inBuf.remaining();
  ByteBuffer out=this.inner.getWriteBuffer();
  ByteBuffer slowBuffer=ByteBuffer.allocate(20);
  int inPtr=inBuf.position();
  int inEnd=inPtr + length;
  while (inPtr < inEnd) {
    if (out.remaining() < 10) {
      if (out == slowBuffer) {
        int oldLimit=out.limit();
        out.limit(out.position());
        out.rewind();
        this.inner.write(out);
        out.limit(oldLimit);
      }
      out=slowBuffer;
      out.rewind();
    }
    int tagPos=out.position();
    out.position(tagPos + 1);
    byte curByte;
    curByte=inBuf.get(inPtr);
    byte bit0=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit0 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit1=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit1 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit2=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit2 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit3=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit3 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit4=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit4 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit5=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit5 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit6=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit6 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit7=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit7 - 1);
    inPtr+=1;
    byte tag=(byte)((bit0 << 0) | (bit1 << 1) | (bit2 << 2)| (bit3 << 3)| (bit4 << 4)| (bit5 << 5)| (bit6 << 6)| (bit7 << 7));
    out.put(tagPos,tag);
    if (tag == 0) {
      inBuf.position(inPtr);
      long inWord=inBuf.getLong();
      int limit=inEnd;
      if (limit - inPtr > 255 * 8) {
        limit=inPtr + 255 * 8;
      }
      while (inBuf.position() < limit && inWord == 0) {
        inWord=inBuf.getLong();
      }
      out.put((byte)((inBuf.position() - inPtr) / 8 - 1));
      inPtr=inBuf.position() - 8;
    }
 else     if (tag == (byte)0xff) {
      int runStart=inPtr;
      int limit=inEnd;
      if (limit - inPtr > 255 * 8) {
        limit=inPtr + 255 * 8;
      }
      while (inPtr < limit) {
        byte c=0;
        for (int ii=0; ii < 8; ++ii) {
          c+=(inBuf.get(inPtr) == 0 ? 1 : 0);
          inPtr+=1;
        }
        if (c >= 2) {
          inPtr-=8;
          break;
        }
      }
      int count=inPtr - runStart;
      out.put((byte)(count / 8));
      if (count <= out.remaining()) {
        inBuf.position(runStart);
        ByteBuffer slice=inBuf.slice();
        slice.limit(count);
        out.put(slice);
      }
 else {
        if (out == slowBuffer) {
          int oldLimit=out.limit();
          out.limit(out.position());
          out.rewind();
          this.inner.write(out);
          out.limit(oldLimit);
        }
        inBuf.position(runStart);
        ByteBuffer slice=inBuf.slice();
        slice.limit(count);
        while (slice.hasRemaining()) {
          this.inner.write(slice);
        }
        out=this.inner.getWriteBuffer();
      }
    }
  }
  if (out == slowBuffer) {
    out.limit(out.position());
    out.rewind();
    this.inner.write(out);
  }
  return length;
}","public int write(ByteBuffer inBuf) throws IOException {
  int length=inBuf.remaining();
  ByteBuffer out=this.inner.getWriteBuffer();
  ByteBuffer slowBuffer=ByteBuffer.allocate(20);
  int inPtr=inBuf.position();
  int inEnd=inPtr + length;
  while (inPtr < inEnd) {
    if (out.remaining() < 10) {
      if (out == slowBuffer) {
        int oldLimit=out.limit();
        out.limit(out.position());
        out.rewind();
        this.inner.write(out);
        out.limit(oldLimit);
      }
      out=slowBuffer;
      out.rewind();
    }
    int tagPos=out.position();
    out.position(tagPos + 1);
    byte curByte;
    curByte=inBuf.get(inPtr);
    byte bit0=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit0 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit1=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit1 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit2=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit2 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit3=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit3 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit4=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit4 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit5=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit5 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit6=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit6 - 1);
    inPtr+=1;
    curByte=inBuf.get(inPtr);
    byte bit7=(curByte != 0) ? (byte)1 : (byte)0;
    out.put(curByte);
    out.position(out.position() + bit7 - 1);
    inPtr+=1;
    byte tag=(byte)((bit0 << 0) | (bit1 << 1) | (bit2 << 2)| (bit3 << 3)| (bit4 << 4)| (bit5 << 5)| (bit6 << 6)| (bit7 << 7));
    out.put(tagPos,tag);
    if (tag == 0) {
      int runStart=inPtr;
      int limit=inEnd;
      if (limit - inPtr > 255 * 8) {
        limit=inPtr + 255 * 8;
      }
      while (inPtr < limit && inBuf.getLong(inPtr) == 0) {
        inPtr+=8;
      }
      out.put((byte)((inPtr - runStart) / 8));
    }
 else     if (tag == (byte)0xff) {
      int runStart=inPtr;
      int limit=inEnd;
      if (limit - inPtr > 255 * 8) {
        limit=inPtr + 255 * 8;
      }
      while (inPtr < limit) {
        byte c=0;
        for (int ii=0; ii < 8; ++ii) {
          c+=(inBuf.get(inPtr) == 0 ? 1 : 0);
          inPtr+=1;
        }
        if (c >= 2) {
          inPtr-=8;
          break;
        }
      }
      int count=inPtr - runStart;
      out.put((byte)(count / 8));
      if (count <= out.remaining()) {
        inBuf.position(runStart);
        ByteBuffer slice=inBuf.slice();
        slice.limit(count);
        out.put(slice);
      }
 else {
        if (out == slowBuffer) {
          int oldLimit=out.limit();
          out.limit(out.position());
          out.rewind();
          this.inner.write(out);
          out.limit(oldLimit);
        }
        inBuf.position(runStart);
        ByteBuffer slice=inBuf.slice();
        slice.limit(count);
        while (slice.hasRemaining()) {
          this.inner.write(slice);
        }
        out=this.inner.getWriteBuffer();
      }
    }
  }
  if (out == slowBuffer) {
    out.limit(out.position());
    out.rewind();
    this.inner.write(out);
  }
  inBuf.position(inPtr);
  return length;
}",0.967964650648992
63816,"public final int read(ByteBuffer dst) throws IOException {
  int numBytes=dst.remaining();
  if (numBytes < this.buf.remaining()) {
    ByteBuffer slice=this.buf.slice();
    slice.limit(numBytes);
    dst.put(slice);
    this.buf.position(this.buf.position() + numBytes);
    return numBytes;
  }
 else {
    int fromFirstBuffer=this.buf.remaining();
{
      ByteBuffer slice=this.buf.slice();
      slice.limit(fromFirstBuffer);
      dst.put(slice);
    }
    numBytes-=fromFirstBuffer;
    if (numBytes <= this.buf.capacity()) {
      this.buf.clear();
      int n=readAtLeast(this.inner,this.buf,numBytes);
      this.buf.rewind();
      ByteBuffer slice=this.buf.slice();
      slice.limit(numBytes);
      dst.put(slice);
      this.buf.limit(n);
      this.buf.position(numBytes);
      return fromFirstBuffer + numBytes;
    }
 else {
      this.buf.clear();
      return fromFirstBuffer + readAtLeast(this.inner,dst,numBytes);
    }
  }
}","public final int read(ByteBuffer dst) throws IOException {
  int numBytes=dst.remaining();
  if (numBytes < this.buf.remaining()) {
    ByteBuffer slice=this.buf.slice();
    slice.limit(numBytes);
    dst.put(slice);
    this.buf.position(this.buf.position() + numBytes);
    return numBytes;
  }
 else {
    int fromFirstBuffer=this.buf.remaining();
{
      ByteBuffer slice=this.buf.slice();
      slice.limit(fromFirstBuffer);
      dst.put(slice);
    }
    numBytes-=fromFirstBuffer;
    if (numBytes <= this.buf.capacity()) {
      this.buf.clear();
      int n=readAtLeast(this.inner,this.buf,numBytes);
      this.buf.rewind();
      ByteBuffer slice=this.buf.slice();
      slice.limit(numBytes);
      dst.put(slice);
      this.buf.limit(n);
      this.buf.position(numBytes);
      return fromFirstBuffer + numBytes;
    }
 else {
      this.buf.clear();
      this.buf.limit(0);
      return fromFirstBuffer + readAtLeast(this.inner,dst,numBytes);
    }
  }
}",0.986985944820406
63817,"public static MessageReader create(InputStream is) throws IOException {
  ByteBuffer firstWord=makeByteBuffer(readExact(is,8));
  int segmentCount=1 + firstWord.getInt(0);
  int segment0Size=0;
  if (segmentCount > 0) {
    segment0Size=firstWord.getInt(4);
  }
  int totalWords=segment0Size;
  if (segmentCount > 512) {
    throw new IOException(""String_Node_Str"");
  }
  Vector<Integer> moreSizes=new Vector<Integer>();
  if (segmentCount > 1) {
    ByteBuffer moreSizesRaw=makeByteBuffer(readExact(is,4 * (segmentCount & ~1)));
    for (int ii=0; ii < segmentCount - 1; ++ii) {
      int size=moreSizesRaw.getInt(ii * 4);
      moreSizes.add(size);
      totalWords+=size;
    }
  }
  byte[] allSegments=readExact(is,totalWords * 8);
  ByteBuffer[] segmentSlices=new ByteBuffer[segmentCount];
  segmentSlices[0]=ByteBuffer.wrap(allSegments,0,segment0Size);
  int offset=segment0Size;
  for (int ii=1; ii < segmentCount; ++ii) {
    segmentSlices[ii]=ByteBuffer.wrap(allSegments,offset,moreSizes.get(ii - 1));
    offset+=moreSizes.get(ii - 1);
  }
  return new MessageReader(segmentSlices);
}","public static MessageReader create(InputStream is) throws IOException {
  ByteBuffer firstWord=makeByteBuffer(readExact(is,8));
  int segmentCount=1 + firstWord.getInt(0);
  int segment0Size=0;
  if (segmentCount > 0) {
    segment0Size=firstWord.getInt(4);
  }
  int totalWords=segment0Size;
  if (segmentCount > 512) {
    throw new IOException(""String_Node_Str"");
  }
  Vector<Integer> moreSizes=new Vector<Integer>();
  if (segmentCount > 1) {
    ByteBuffer moreSizesRaw=makeByteBuffer(readExact(is,4 * (segmentCount & ~1)));
    for (int ii=0; ii < segmentCount - 1; ++ii) {
      int size=moreSizesRaw.getInt(ii * 4);
      moreSizes.add(size);
      totalWords+=size;
    }
  }
  byte[] allSegments=readExact(is,totalWords * 8);
  ByteBuffer[] segmentSlices=new ByteBuffer[segmentCount];
  segmentSlices[0]=ByteBuffer.wrap(allSegments,0,segment0Size);
  segmentSlices[0].order(ByteOrder.LITTLE_ENDIAN);
  int offset=segment0Size;
  for (int ii=1; ii < segmentCount; ++ii) {
    segmentSlices[ii]=ByteBuffer.wrap(allSegments,offset,moreSizes.get(ii - 1));
    segmentSlices[ii].order(ByteOrder.LITTLE_ENDIAN);
    offset+=moreSizes.get(ii - 1);
  }
  return new MessageReader(segmentSlices);
}",0.954248366013072
63818,"public PointerReader getPointerField(int ptrIndex){
  if (ptrIndex < this.pointerCount) {
    return new PointerReader(this.segment,this.pointers + ptrIndex,this.nestingLimit);
  }
 else {
    System.out.println(""String_Node_Str"" + this.pointerCount);
    return new PointerReader();
  }
}","public PointerReader getPointerField(int ptrIndex){
  if (ptrIndex < this.pointerCount) {
    return new PointerReader(this.segment,this.pointers + ptrIndex,this.nestingLimit);
  }
 else {
    return new PointerReader();
  }
}",0.7805825242718447
63819,"public static StructReader readStructPointer(SegmentReader segment,WirePointer ref,int nestingLimit){
  WordPointer ptr=ref.target();
  StructPointer structPtr=new StructPointer(ref);
  int dataSizeWords=structPtr.dataSize();
  return new StructReader(segment,ptr.offset * 8,(ptr.offset + dataSizeWords) * 8,dataSizeWords * 64,structPtr.ptrCount(),(byte)0,nestingLimit - 1);
}","public static StructReader readStructPointer(SegmentReader segment,WirePointer ref,int nestingLimit){
  WordPointer ptr=ref.target();
  StructPointer structPtr=new StructPointer(ref);
  int dataSizeWords=structPtr.dataSize();
  return new StructReader(segment,ptr.offset * 8,(ptr.offset + dataSizeWords),dataSizeWords * 64,structPtr.ptrCount(),(byte)0,nestingLimit - 1);
}",0.9946524064171124
63820,"public static ListReader readListPointer(SegmentReader segment,WirePointer ref,byte expectedElementSize,int nestingLimit){
  ListPointer listPtr=new ListPointer(ref);
  WordPointer ptr=ref.target();
switch (listPtr.elementSize()) {
case FieldSize.INLINE_COMPOSITE:
{
      int wordCount=listPtr.inlineCompositeWordCount();
      WirePointer tag=new WirePointer(ptr);
      ptr.offset+=1;
      int size=tag.inlineCompositeListElementCount();
      StructPointer structPtr=new StructPointer(tag);
      int wordsPerElement=structPtr.wordSize();
      return new ListReader(segment,ptr.offset * 8,size,wordsPerElement * 64,structPtr.dataSize() * 64,structPtr.ptrCount(),nestingLimit - 1);
    }
case FieldSize.VOID:
  break;
default :
throw new Error(""String_Node_Str"");
}
throw new Error();
}","public static ListReader readListPointer(SegmentReader segment,WirePointer ref,byte expectedElementSize,int nestingLimit){
  ListPointer listPtr=new ListPointer(ref);
  WordPointer ptr=ref.target();
switch (listPtr.elementSize()) {
case FieldSize.INLINE_COMPOSITE:
{
      int wordCount=listPtr.inlineCompositeWordCount();
      WirePointer tag=new WirePointer(ptr);
      ptr.offset+=1;
      int size=tag.inlineCompositeListElementCount();
      System.out.println(""String_Node_Str"" + size);
      StructPointer structPtr=new StructPointer(tag);
      int wordsPerElement=structPtr.wordSize();
      return new ListReader(segment,ptr.offset * 8,size,wordsPerElement * 64,structPtr.dataSize() * 64,structPtr.ptrCount(),nestingLimit - 1);
    }
case FieldSize.VOID:
  break;
default :
throw new Error(""String_Node_Str"");
}
throw new Error();
}",0.9681762545899631
63821,"static ByteBuffer makeByteBuffer(byte[] bytes){
  ByteBuffer result=ByteBuffer.wrap(bytes);
  result.order(ByteOrder.LITTLE_ENDIAN);
  return result;
}","static ByteBuffer makeByteBuffer(byte[] bytes){
  ByteBuffer result=ByteBuffer.wrap(bytes);
  return result;
}",0.842911877394636
63822,"public static MessageReader create(InputStream is) throws IOException {
  ByteBuffer firstWord=makeByteBuffer(readExact(is,8));
  int segmentCount=1 + firstWord.getInt();
  int segment0Size=0;
  if (segmentCount > 0) {
    segment0Size=firstWord.getInt(1);
  }
  int totalWords=segment0Size;
  if (segmentCount > 512) {
    throw new IOException(""String_Node_Str"");
  }
  Vector<Integer> moreSizes=new Vector<Integer>();
  if (segmentCount > 1) {
    ByteBuffer moreSizesRaw=makeByteBuffer(readExact(is,4 * (segmentCount & ~1)));
    for (int ii=0; ii < segmentCount - 1; ++ii) {
      int size=moreSizesRaw.getInt(ii);
      moreSizes.add(size);
      totalWords+=size;
    }
  }
  byte[] allSegments=readExact(is,totalWords * 8);
  ByteBuffer[] segmentSlices=new ByteBuffer[segmentCount];
  segmentSlices[0]=ByteBuffer.wrap(allSegments,0,segment0Size);
  int offset=segment0Size;
  for (int ii=1; ii < segmentCount; ++ii) {
    segmentSlices[ii]=ByteBuffer.wrap(allSegments,offset,moreSizes.get(ii - 1));
    offset+=moreSizes.get(ii - 1);
  }
  return new MessageReader(segmentSlices);
}","public static MessageReader create(InputStream is) throws IOException {
  ByteBuffer firstWord=makeByteBuffer(readExact(is,8));
  int segmentCount=1 + firstWord.getInt(0);
  System.out.println(""String_Node_Str"" + segmentCount);
  int segment0Size=0;
  if (segmentCount > 0) {
    segment0Size=firstWord.getInt(1);
  }
  System.out.println(""String_Node_Str"" + segment0Size);
  int totalWords=segment0Size;
  if (segmentCount > 512) {
    throw new IOException(""String_Node_Str"");
  }
  Vector<Integer> moreSizes=new Vector<Integer>();
  if (segmentCount > 1) {
    ByteBuffer moreSizesRaw=makeByteBuffer(readExact(is,4 * (segmentCount & ~1)));
    for (int ii=0; ii < segmentCount - 1; ++ii) {
      int size=moreSizesRaw.getInt(ii);
      moreSizes.add(size);
      totalWords+=size;
    }
  }
  byte[] allSegments=readExact(is,totalWords * 8);
  ByteBuffer[] segmentSlices=new ByteBuffer[segmentCount];
  segmentSlices[0]=ByteBuffer.wrap(allSegments,0,segment0Size);
  int offset=segment0Size;
  for (int ii=1; ii < segmentCount; ++ii) {
    segmentSlices[ii]=ByteBuffer.wrap(allSegments,offset,moreSizes.get(ii - 1));
    offset+=moreSizes.get(ii - 1);
  }
  return new MessageReader(segmentSlices);
}",0.932402965547318
63823,"public StructPointer(ByteBuffer buffer,int buffer_offset){
  super(buffer,buffer_offset);
}","public StructPointer(WirePointer ptr){
  this.ptr=ptr;
}",0.5170068027210885
63824,"public short ptrCount(){
  return this.buffer.getShort(this.buffer_offset * 4 + 3);
}","public short ptrCount(){
  return this.ptr.buffer.getShort(this.ptr.buffer_offset * 4 + 3);
}",0.9550561797752808
63825,"public short dataSize(){
  return this.buffer.getShort(this.buffer_offset * 4 + 2);
}","public short dataSize(){
  return this.ptr.buffer.getShort(this.ptr.buffer_offset * 4 + 2);
}",0.9550561797752808
63826,"public static StructReader readStructPointer(SegmentReader segment,WirePointer ref,int nestingLimit){
  WordPointer ptr=ref.target();
  StructPointer structPtr=(StructPointer)ref;
  int dataSizeWords=structPtr.dataSize();
  return new StructReader(segment,ptr.offset * 8,(ptr.offset + dataSizeWords) * 8,dataSizeWords * 64,structPtr.ptrCount(),(byte)0,nestingLimit - 1);
}","public static StructReader readStructPointer(SegmentReader segment,WirePointer ref,int nestingLimit){
  WordPointer ptr=ref.target();
  StructPointer structPtr=new StructPointer(ref);
  int dataSizeWords=structPtr.dataSize();
  return new StructReader(segment,ptr.offset * 8,(ptr.offset + dataSizeWords) * 8,dataSizeWords * 64,structPtr.ptrCount(),(byte)0,nestingLimit - 1);
}",0.946524064171123
63827,"public static ListReader readListPointer(SegmentReader segment,WirePointer ref,byte expectedElementSize,int nestingLimit){
  ListPointer listPtr=(ListPointer)ref;
  WordPointer ptr=ref.target();
switch (listPtr.elementSize()) {
case FieldSize.INLINE_COMPOSITE:
{
      int wordCount=listPtr.inlineCompositeWordCount();
      WirePointer tag=new WirePointer(ptr);
      ptr.offset+=1;
      int size=tag.inlineCompositeListElementCount();
      StructPointer structPtr=(StructPointer)tag;
      int wordsPerElement=structPtr.wordSize();
      return new ListReader(segment,ptr.offset * 8,size,wordsPerElement * 64,structPtr.dataSize() * 64,structPtr.ptrCount(),nestingLimit - 1);
    }
case FieldSize.VOID:
  break;
default :
throw new Error(""String_Node_Str"");
}
throw new Error();
}","public static ListReader readListPointer(SegmentReader segment,WirePointer ref,byte expectedElementSize,int nestingLimit){
  ListPointer listPtr=(ListPointer)ref;
  WordPointer ptr=ref.target();
switch (listPtr.elementSize()) {
case FieldSize.INLINE_COMPOSITE:
{
      int wordCount=listPtr.inlineCompositeWordCount();
      WirePointer tag=new WirePointer(ptr);
      ptr.offset+=1;
      int size=tag.inlineCompositeListElementCount();
      StructPointer structPtr=new StructPointer(tag);
      int wordsPerElement=structPtr.wordSize();
      return new ListReader(segment,ptr.offset * 8,size,wordsPerElement * 64,structPtr.dataSize() * 64,structPtr.ptrCount(),nestingLimit - 1);
    }
case FieldSize.VOID:
  break;
default :
throw new Error(""String_Node_Str"");
}
throw new Error();
}",0.9745222929936306
63828,"public static void printAddressBook() throws java.io.IOException {
  System.out.println(""String_Node_Str"");
  capnp.MessageReader message=capnp.InputStreamMessageReader.create(System.in);
  Addressbook.AddressBook.Reader addressbook=message.getRoot(Addressbook.AddressBook.Reader.factory);
  capnp.StructList.Reader<Addressbook.Person> people=addressbook.getPeople();
  int size=people.size();
  for (int ii=0; ii < size; ++ii) {
    people.get(ii);
  }
}","public static void printAddressBook() throws java.io.IOException {
  System.out.println(""String_Node_Str"");
  capnp.MessageReader message=capnp.InputStreamMessageReader.create(System.in);
  Addressbook.AddressBook.Reader addressbook=message.getRoot(Addressbook.AddressBook.Reader.factory);
  capnp.StructList.Reader<Addressbook.Person.Reader> people=addressbook.getPeople();
  int size=people.size();
  for (int ii=0; ii < size; ++ii) {
    Addressbook.Person.Reader person=people.get(ii);
    System.out.println(person.getName().toString() + ""String_Node_Str"");
  }
}",0.8641251221896383
63829,"public static MessageReader create(InputStream is) throws IOException {
  ByteBuffer firstWord=makeByteBuffer(readExact(is,8));
  int segmentCount=1 + firstWord.getInt(0);
  int segment0Size=0;
  if (segmentCount > 0) {
    segment0Size=firstWord.getInt(4);
  }
  int totalWords=segment0Size;
  if (segmentCount > 512) {
    throw new IOException(""String_Node_Str"");
  }
  Vector<Integer> moreSizes=new Vector<Integer>();
  if (segmentCount > 1) {
    ByteBuffer moreSizesRaw=makeByteBuffer(readExact(is,4 * (segmentCount & ~1)));
    for (int ii=0; ii < segmentCount - 1; ++ii) {
      int size=moreSizesRaw.getInt(ii * 4);
      moreSizes.add(size);
      totalWords+=size;
    }
  }
  byte[] allSegments=readExact(is,totalWords * 8);
  ByteBuffer[] segmentSlices=new ByteBuffer[segmentCount];
  segmentSlices[0]=ByteBuffer.wrap(allSegments,0,segment0Size);
  segmentSlices[0].order(ByteOrder.LITTLE_ENDIAN);
  int offset=segment0Size;
  for (int ii=1; ii < segmentCount; ++ii) {
    segmentSlices[ii]=ByteBuffer.wrap(allSegments,offset,moreSizes.get(ii - 1));
    segmentSlices[ii].order(ByteOrder.LITTLE_ENDIAN);
    offset+=moreSizes.get(ii - 1);
  }
  return new MessageReader(segmentSlices);
}","public static MessageReader create(InputStream is) throws IOException {
  ByteBuffer firstWord=makeByteBuffer(readExact(is,8));
  int segmentCount=1 + firstWord.getInt(0);
  int segment0Size=0;
  if (segmentCount > 0) {
    segment0Size=firstWord.getInt(4);
  }
  int totalWords=segment0Size;
  if (segmentCount > 512) {
    throw new IOException(""String_Node_Str"");
  }
  Vector<Integer> moreSizes=new Vector<Integer>();
  if (segmentCount > 1) {
    ByteBuffer moreSizesRaw=makeByteBuffer(readExact(is,4 * (segmentCount & ~1)));
    for (int ii=0; ii < segmentCount - 1; ++ii) {
      int size=moreSizesRaw.getInt(ii * 4);
      moreSizes.add(size);
      totalWords+=size;
    }
  }
  byte[] allSegments=readExact(is,totalWords * 8);
  ByteBuffer[] segmentSlices=new ByteBuffer[segmentCount];
  segmentSlices[0]=ByteBuffer.wrap(allSegments,0,segment0Size * 8);
  segmentSlices[0].order(ByteOrder.LITTLE_ENDIAN);
  int offset=segment0Size;
  for (int ii=1; ii < segmentCount; ++ii) {
    segmentSlices[ii]=ByteBuffer.wrap(allSegments,offset * 8,moreSizes.get(ii - 1) * 8);
    segmentSlices[ii].order(ByteOrder.LITTLE_ENDIAN);
    offset+=moreSizes.get(ii - 1);
  }
  return new MessageReader(segmentSlices);
}",0.9950248756218906
63830,"public StructReader getStructElement(int index){
  int indexBit=index * this.step;
  int structData=this.ptr + (indexBit / 8);
  int structPointers=structData + (this.structDataSize / 8);
  return new StructReader(this.segment,structData,structPointers,this.structDataSize,this.structPointerCount,(byte)(indexBit % 8),this.nestingLimit - 1);
}","public StructReader getStructElement(int index){
  int indexBit=index * this.step;
  int structData=this.ptr + (indexBit / 8);
  int structPointers=structData + (this.structDataSize / 8);
  return new StructReader(this.segment,structData,structPointers / 8,this.structDataSize,this.structPointerCount,(byte)(indexBit % 8),this.nestingLimit - 1);
}",0.9942028985507246
63831,"public static Text.Reader readTextPointer(SegmentReader segment,WirePointer ref){
  ref.target();
  ListPointer listPtr=new ListPointer(ref);
  return new Text.Reader(listPtr);
}","public static Text.Reader readTextPointer(SegmentReader segment,WirePointer ref){
  WordPointer ptr=ref.target();
  ListPointer listPtr=new ListPointer(ref);
  return new Text.Reader(listPtr);
}",0.956989247311828
63832,"public int offset_and_kind(){
  return this.buffer.getInt(buffer_offset * 8);
}","public int offset_and_kind(){
  return this.buffer.getInt(this.buffer_offset * 8);
}",0.9693251533742332
63833,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=UserOpDescription.GET_TENANT_USERS,produces=ContentType.JSON,notes=Notes.USER_NOTES,nickname=""String_Node_Str"") Set<UserResponseJson> getAll();","@GET @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=UserOpDescription.GET_TENANT_USERS,produces=ContentType.JSON,notes=Notes.USER_NOTES,nickname=""String_Node_Str"") SortedSet<UserResponseJson> getAll();",0.9300225733634312
63834,"@Override public Set<UserResponseJson> getAll(){
  IdentityUser user=authenticatedUserService.getCbUser();
  return toJsonSet(userService.getAll(user));
}","@Override public SortedSet<UserResponseJson> getAll(){
  IdentityUser user=authenticatedUserService.getCbUser();
  Set<UserResponseJson> userResponseJsons=userService.getAll(user).stream().map(u -> conversionService.convert(u,UserResponseJson.class)).collect(Collectors.toSet());
  SortedSet<UserResponseJson> results=new TreeSet<>(new UserIdComparator());
  results.addAll(userResponseJsons);
  return results;
}",0.4832451499118165
63835,"public void executePostRecipesOnNewHosts(Long stackId,String hostGroupName) throws CloudbreakException {
  Stack stack=stackService.getByIdWithLists(stackId);
  LOGGER.info(""String_Node_Str"");
  recipeEngine.executePostInstall(stack);
}","public void executePostRecipesOnNewHosts(Long stackId) throws CloudbreakException {
  Stack stack=stackService.getByIdWithLists(stackId);
  LOGGER.info(""String_Node_Str"");
  recipeEngine.executePostInstallRecipes(stack,hostGroupService.getByCluster(stack.getCluster().getId()));
}",0.810077519379845
63836,"@Override public void accept(Event<UpscalePostRecipesRequest> event){
  UpscalePostRecipesRequest request=event.getData();
  UpscalePostRecipesResult result;
  try {
    clusterUpscaleService.executePostRecipesOnNewHosts(request.getStackId(),request.getHostGroupName());
    result=new UpscalePostRecipesResult(request);
  }
 catch (  Exception e) {
    result=new UpscalePostRecipesResult(e.getMessage(),e,request);
  }
  eventBus.notify(result.selector(),new Event<>(event.getHeaders(),result));
}","@Override public void accept(Event<UpscalePostRecipesRequest> event){
  UpscalePostRecipesRequest request=event.getData();
  UpscalePostRecipesResult result;
  try {
    clusterUpscaleService.executePostRecipesOnNewHosts(request.getStackId());
    result=new UpscalePostRecipesResult(request);
  }
 catch (  Exception e) {
    result=new UpscalePostRecipesResult(e.getMessage(),e,request);
  }
  eventBus.notify(result.selector(),new Event<>(event.getHeaders(),result));
}",0.972193614830072
63837,"@Override public void buildCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    clusterService.updateCreationDateOnCluster(cluster);
    AmbariClient ambariClient=clientFactory.getAmbariClient(stack,stack.getCluster());
    Set<HostGroup> hostGroups=hostGroupService.getByCluster(cluster.getId());
    BlueprintPreparationObject blueprintPreparationObject=conversionService.convert(stack,BlueprintPreparationObject.class);
    Map<String,List<Map<String,String>>> hostGroupMappings=hostGroupAssociationBuilder.buildHostGroupAssociations(hostGroups);
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    recipeEngine.executePostAmbariStartRecipes(stack,hostGroups);
    ambariRepositoryVersionService.setBaseRepoURL(stack.getName(),cluster.getId(),stack.getOrchestrator(),ambariClient);
    String blueprintText=centralBlueprintUpdater.getBlueprintText(blueprintPreparationObject);
    addBlueprint(stack.getId(),ambariClient,blueprintText,cluster.getTopologyValidation());
    cluster.setExtendedBlueprintText(blueprintText);
    clusterService.updateCluster(cluster);
    PollingResult waitForHostsResult=ambariPollingServiceProvider.hostsPollingService(stack,ambariClient,hostsInCluster);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(waitForHostsResult,cloudbreakMessagesService.getMessage(AMBARI_CLUSTER_HOST_JOIN_FAILED.code()));
    ambariClusterTemplateService.addClusterTemplate(cluster,hostGroupMappings,ambariClient);
    Pair<PollingResult,Exception> pollingResult=ambariOperationService.waitForOperationsToStart(stack,ambariClient,singletonMap(""String_Node_Str"",1),START_OPERATION_STATE);
    String message=pollingResult.getRight() == null ? constructClusterFailedMessage(cluster.getId(),ambariClient) : pollingResult.getRight().getMessage();
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResult.getLeft(),message);
    Pair<PollingResult,Exception> pollingResultExceptionPair=ambariOperationService.waitForOperations(stack,ambariClient,new HashMap<String,Integer>(){
{
        put(""String_Node_Str"",1);
      }
    }
,INSTALL_AMBARI_PROGRESS_STATE);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResultExceptionPair.getLeft(),constructClusterFailedMessage(cluster.getId(),ambariClient));
    recipeEngine.executePostInstall(stack);
    ambariSmartSenseCapturer.capture(0,ambariClient);
    cluster=ambariViewProvider.provideViewInformation(ambariClient,cluster);
    ambariClusterCreationSuccessHandler.handleClusterCreationSuccess(stack,cluster);
  }
 catch (  CancellationException cancellationException) {
    throw cancellationException;
  }
catch (  Exception e) {
    LOGGER.info(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}","@Override public void buildCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    clusterService.updateCreationDateOnCluster(cluster);
    AmbariClient ambariClient=clientFactory.getAmbariClient(stack,stack.getCluster());
    Set<HostGroup> hostGroups=hostGroupService.getByCluster(cluster.getId());
    BlueprintPreparationObject blueprintPreparationObject=conversionService.convert(stack,BlueprintPreparationObject.class);
    Map<String,List<Map<String,String>>> hostGroupMappings=hostGroupAssociationBuilder.buildHostGroupAssociations(hostGroups);
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    recipeEngine.executePostAmbariStartRecipes(stack,hostGroups);
    ambariRepositoryVersionService.setBaseRepoURL(stack.getName(),cluster.getId(),stack.getOrchestrator(),ambariClient);
    String blueprintText=centralBlueprintUpdater.getBlueprintText(blueprintPreparationObject);
    addBlueprint(stack.getId(),ambariClient,blueprintText,cluster.getTopologyValidation());
    cluster.setExtendedBlueprintText(blueprintText);
    clusterService.updateCluster(cluster);
    PollingResult waitForHostsResult=ambariPollingServiceProvider.hostsPollingService(stack,ambariClient,hostsInCluster);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(waitForHostsResult,cloudbreakMessagesService.getMessage(AMBARI_CLUSTER_HOST_JOIN_FAILED.code()));
    ambariClusterTemplateService.addClusterTemplate(cluster,hostGroupMappings,ambariClient);
    Pair<PollingResult,Exception> pollingResult=ambariOperationService.waitForOperationsToStart(stack,ambariClient,singletonMap(""String_Node_Str"",1),START_OPERATION_STATE);
    String message=pollingResult.getRight() == null ? constructClusterFailedMessage(cluster.getId(),ambariClient) : pollingResult.getRight().getMessage();
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResult.getLeft(),message);
    Pair<PollingResult,Exception> pollingResultExceptionPair=ambariOperationService.waitForOperations(stack,ambariClient,new HashMap<String,Integer>(){
{
        put(""String_Node_Str"",1);
      }
    }
,INSTALL_AMBARI_PROGRESS_STATE);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResultExceptionPair.getLeft(),constructClusterFailedMessage(cluster.getId(),ambariClient));
    recipeEngine.executePostInstallRecipes(stack,hostGroups);
    ambariSmartSenseCapturer.capture(0,ambariClient);
    cluster=ambariViewProvider.provideViewInformation(ambariClient,cluster);
    ambariClusterCreationSuccessHandler.handleClusterCreationSuccess(stack,cluster);
  }
 catch (  CancellationException cancellationException) {
    throw cancellationException;
  }
catch (  Exception e) {
    LOGGER.info(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}",0.9968487394957984
63838,"public void executePreTerminationRecipes(Stack stack,Set<HostGroup> hostGroups,Set<String> hostNames) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (recipesFound(hostGroups,RecipeType.PRE_TERMINATION) && recipesSupportedOnOrchestrator(orchestrator)) {
    orchestratorRecipeExecutor.preTerminationRecipes(stack,hostNames);
  }
}","public void executePreTerminationRecipes(Stack stack,Set<HostGroup> hostGroups,Set<String> hostNames) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(hostGroups,orchestrator,PRE_TERMINATION)) {
    orchestratorRecipeExecutor.preTerminationRecipes(stack,hostNames);
  }
}",0.8470254957507082
63839,"public void executePreAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(stack,hostGroups,orchestrator)) {
    orchestratorRecipeExecutor.preAmbariStartRecipes(stack);
  }
}","public void executePreAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(hostGroups,orchestrator,PRE_AMBARI_START)) {
    orchestratorRecipeExecutor.preAmbariStartRecipes(stack);
  }
}",0.891846921797005
63840,"private void addContainerExecutorScripts(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    if (cluster != null && ExecutorType.CONTAINER.equals(cluster.getExecutorType())) {
      for (      HostGroup hostGroup : hostGroups) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
        RecipeScript recipeScript=new RecipeScript(script,RecipeType.POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}","private void addContainerExecutorScripts(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    if (cluster != null && ExecutorType.CONTAINER.equals(cluster.getExecutorType())) {
      for (      HostGroup hostGroup : hostGroups) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
        RecipeScript recipeScript=new RecipeScript(script,POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}",0.991869918699187
63841,"private void addHDFSRecipe(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    String blueprintText=cluster.getBlueprint().getBlueprintText();
    for (    HostGroup hostGroup : hostGroups) {
      if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"").replaceAll(""String_Node_Str"",cluster.getUserName());
        RecipeScript recipeScript=new RecipeScript(script,RecipeType.POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
        break;
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}","private void addHDFSRecipe(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    String blueprintText=cluster.getBlueprint().getBlueprintText();
    for (    HostGroup hostGroup : hostGroups) {
      if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"").replaceAll(""String_Node_Str"",cluster.getUserName());
        RecipeScript recipeScript=new RecipeScript(script,POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
        break;
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}",0.9929622520793346
63842,"public void executePostAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(stack,hostGroups,orchestrator)) {
    orchestratorRecipeExecutor.postAmbariStartRecipes(stack);
  }
}","public void executePostAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if ((stack.getCluster() != null && stack.getCluster().getLdapConfig() != null) || recipesFound(hostGroups,POST_AMBARI_START) && recipesSupportedOnOrchestrator(orchestrator)) {
    orchestratorRecipeExecutor.postAmbariStartRecipes(stack);
  }
}",0.7290780141843972
63843,"private void addSmartSenseRecipe(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    String blueprintText=cluster.getBlueprint().getBlueprintText();
    if (smartsenseConfigurationLocator.smartsenseConfigurable(smartSenseSubscriptionService.getDefault())) {
      for (      HostGroup hostGroup : hostGroups) {
        if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
          String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
          RecipeScript recipeScript=new RecipeScript(script,RecipeType.POST_CLUSTER_INSTALL);
          Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
          hostGroup.addRecipe(recipe);
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}","private void addSmartSenseRecipe(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    String blueprintText=cluster.getBlueprint().getBlueprintText();
    if (smartsenseConfigurationLocator.smartsenseConfigurable(smartSenseSubscriptionService.getDefault())) {
      for (      HostGroup hostGroup : hostGroups) {
        if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
          String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
          RecipeScript recipeScript=new RecipeScript(script,POST_CLUSTER_INSTALL);
          Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
          hostGroup.addRecipe(recipe);
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}",0.9936817920735208
63844,"private boolean shouldExecuteRecipeOnStack(Stack stack,Set<HostGroup> hostGroups,Orchestrator orchestrator) throws CloudbreakException {
  return ((stack.getCluster() != null && stack.getCluster().getLdapConfig() != null) || recipesFound(hostGroups)) && recipesSupportedOnOrchestrator(orchestrator);
}","private boolean shouldExecuteRecipeOnStack(Set<HostGroup> hostGroups,Orchestrator orchestrator,RecipeType recipeType) throws CloudbreakException {
  return (recipesFound(hostGroups,recipeType)) && recipesSupportedOnOrchestrator(orchestrator);
}",0.7743119266055046
63845,"public boolean canProcessExecutionFailure(Exception e){
  return getNodesWithErrors(e).isPresent();
}","public boolean canProcessExecutionFailure(Exception e){
  return getNodesWithErrors(e).isPresent() && e.getMessage().contains(""String_Node_Str"");
}",0.8145161290322581
63846,"@Test public void testCollectErrors(){
  ArrayListMultimap<String,String> nodesWithErrors=ArrayListMultimap.create();
  nodesWithErrors.putAll(""String_Node_Str"",Arrays.asList(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  nodesWithErrors.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  CloudbreakOrchestratorFailedException exception=new CloudbreakOrchestratorFailedException(EXCEPTION_MESSAGE,nodesWithErrors);
  Recipe failingRecipe1=new Recipe();
  failingRecipe1.setName(""String_Node_Str"");
  Recipe failingRecipe2=new Recipe();
  failingRecipe2.setName(""String_Node_Str"");
  Recipe goodRecipe=new Recipe();
  goodRecipe.setName(""String_Node_Str"");
  HostGroup master=new HostGroup();
  master.setName(""String_Node_Str"");
  master.setRecipes(Sets.newHashSet(failingRecipe1,goodRecipe));
  HostGroup worker=new HostGroup();
  worker.setName(""String_Node_Str"");
  worker.setRecipes(Sets.newHashSet(failingRecipe1,failingRecipe2));
  RecipeModel failingRecipeModel1=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  RecipeModel failingRecipeModel2=new RecipeModel(""String_Node_Str"",PRE_AMBARI_START,""String_Node_Str"");
  RecipeModel goodRecipeModel=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  Map<HostGroup,List<RecipeModel>> hostgroupToRecipeMap=new HashMap<>();
  hostgroupToRecipeMap.put(master,Arrays.asList(failingRecipeModel1,goodRecipeModel));
  hostgroupToRecipeMap.put(worker,Arrays.asList(failingRecipeModel1,failingRecipeModel2));
  Set<InstanceGroup> instanceGroups=new HashSet<>();
  InstanceMetaData instanceMetaData1=new InstanceMetaData();
  instanceMetaData1.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup1=new InstanceGroup();
  instanceGroup1.setGroupName(""String_Node_Str"");
  instanceGroup1.setInstanceMetaData(Sets.newHashSet(instanceMetaData1));
  InstanceMetaData instanceMetaData2=new InstanceMetaData();
  instanceMetaData2.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup2=new InstanceGroup();
  instanceGroup2.setGroupName(""String_Node_Str"");
  instanceGroup2.setInstanceMetaData(Sets.newHashSet(instanceMetaData2));
  instanceGroups.add(instanceGroup1);
  instanceGroups.add(instanceGroup2);
  Set<RecipeExecutionFailure> recipeExecutionFailures=recipeExecutionFailureHandler.collectErrors(exception,hostgroupToRecipeMap,instanceGroups);
  assertEquals(3,recipeExecutionFailures.size());
  long recipe1Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(2,recipe1Failures);
  long recipe2Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(1,recipe2Failures);
  long workerInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).count();
  assertEquals(2,workerInstanceFailures);
  long masterInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).peek(failure -> assertEquals(""String_Node_Str"",failure.getRecipe().getName())).count();
  assertEquals(1,masterInstanceFailures);
}","@Test public void testCollectErrors(){
  ArrayListMultimap<String,String> nodesWithErrors=getNodesWithErrors();
  CloudbreakOrchestratorFailedException exception=new CloudbreakOrchestratorFailedException(EXCEPTION_MESSAGE,nodesWithErrors);
  Recipe failingRecipe1=new Recipe();
  failingRecipe1.setName(""String_Node_Str"");
  Recipe failingRecipe2=new Recipe();
  failingRecipe2.setName(""String_Node_Str"");
  Recipe goodRecipe=new Recipe();
  goodRecipe.setName(""String_Node_Str"");
  HostGroup master=new HostGroup();
  master.setName(""String_Node_Str"");
  master.setRecipes(Sets.newHashSet(failingRecipe1,goodRecipe));
  HostGroup worker=new HostGroup();
  worker.setName(""String_Node_Str"");
  worker.setRecipes(Sets.newHashSet(failingRecipe1,failingRecipe2));
  RecipeModel failingRecipeModel1=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  RecipeModel failingRecipeModel2=new RecipeModel(""String_Node_Str"",PRE_AMBARI_START,""String_Node_Str"");
  RecipeModel goodRecipeModel=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  Map<HostGroup,List<RecipeModel>> hostgroupToRecipeMap=new HashMap<>();
  hostgroupToRecipeMap.put(master,Arrays.asList(failingRecipeModel1,goodRecipeModel));
  hostgroupToRecipeMap.put(worker,Arrays.asList(failingRecipeModel1,failingRecipeModel2));
  Set<InstanceGroup> instanceGroups=new HashSet<>();
  InstanceMetaData instanceMetaData1=new InstanceMetaData();
  instanceMetaData1.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup1=new InstanceGroup();
  instanceGroup1.setGroupName(""String_Node_Str"");
  instanceGroup1.setInstanceMetaData(Sets.newHashSet(instanceMetaData1));
  InstanceMetaData instanceMetaData2=new InstanceMetaData();
  instanceMetaData2.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup2=new InstanceGroup();
  instanceGroup2.setGroupName(""String_Node_Str"");
  instanceGroup2.setInstanceMetaData(Sets.newHashSet(instanceMetaData2));
  instanceGroups.add(instanceGroup1);
  instanceGroups.add(instanceGroup2);
  Set<RecipeExecutionFailure> recipeExecutionFailures=recipeExecutionFailureHandler.collectErrors(exception,hostgroupToRecipeMap,instanceGroups);
  assertEquals(3,recipeExecutionFailures.size());
  long recipe1Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(2,recipe1Failures);
  long recipe2Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(1,recipe2Failures);
  long workerInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).count();
  assertEquals(2,workerInstanceFailures);
  long masterInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).peek(failure -> assertEquals(""String_Node_Str"",failure.getRecipe().getName())).count();
  assertEquals(1,masterInstanceFailures);
}",0.958294428882664
63847,"private void verifyUpScale(String clusterName,int scalingAdjustment){
  if (isUpScale(scalingAdjustment)) {
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"",scalingAdjustment).exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyRegexp(""String_Node_Str"" + scalingAdjustment + ""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName,""String_Node_Str"").atLeast(1).verify();
  }
}","private void verifyUpScale(String clusterName,int scalingAdjustment){
  if (isUpScale(scalingAdjustment)) {
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"",scalingAdjustment).exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(0).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyRegexp(""String_Node_Str"" + scalingAdjustment + ""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName,""String_Node_Str"").atLeast(1).verify();
  }
}",0.9983098591549296
63848,"public void verifyCalls(String clusterName){
  verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
  Verification distributeVerification=verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1);
  for (  CloudVmMetaDataStatus status : getInstanceMap().values()) {
    distributeVerification.bodyContains(""String_Node_Str"" + status.getMetaData().getPrivateIp());
  }
  distributeVerification.verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(2).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName,""String_Node_Str"").exactTimes(1).bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName+ ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(2).verify();
  verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(0).verify();
  verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(4).verify();
}","public void verifyCalls(String clusterName){
  verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
  Verification distributeVerification=verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1);
  for (  CloudVmMetaDataStatus status : getInstanceMap().values()) {
    distributeVerification.bodyContains(""String_Node_Str"" + status.getMetaData().getPrivateIp());
  }
  distributeVerification.verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(2).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName,""String_Node_Str"").exactTimes(1).bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").verify();
  verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName+ ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(0).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(0).verify();
  verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
  verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(0).verify();
  verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(4).verify();
}",0.9983492901947838
63849,"@Override public void buildCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    clusterService.updateCreationDateOnCluster(cluster);
    AmbariClient ambariClient=clientFactory.getAmbariClient(stack,stack.getCluster());
    Set<HostGroup> hostGroups=hostGroupService.getByCluster(cluster.getId());
    BlueprintPreparationObject blueprintPreparationObject=conversionService.convert(stack,BlueprintPreparationObject.class);
    Map<String,List<Map<String,String>>> hostGroupMappings=hostGroupAssociationBuilder.buildHostGroupAssociations(hostGroups);
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    recipeEngine.executePostAmbariStartRecipes(stack,hostGroups);
    ambariRepositoryVersionService.setBaseRepoURL(stack.getName(),cluster.getId(),stack.getOrchestrator(),ambariClient);
    String blueprintText=centralBlueprintUpdater.getBlueprintText(blueprintPreparationObject);
    addBlueprint(stack.getId(),ambariClient,blueprintText,cluster.getTopologyValidation());
    cluster.setExtendedBlueprintText(blueprintText);
    clusterService.updateCluster(cluster);
    PollingResult waitForHostsResult=ambariPollingServiceProvider.hostsPollingService(stack,ambariClient,hostsInCluster);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(waitForHostsResult,cloudbreakMessagesService.getMessage(AMBARI_CLUSTER_HOST_JOIN_FAILED.code()));
    ambariClusterTemplateService.addClusterTemplate(cluster,hostGroupMappings,ambariClient);
    Pair<PollingResult,Exception> pollingResult=ambariOperationService.waitForOperationsToStart(stack,ambariClient,singletonMap(""String_Node_Str"",1),START_OPERATION_STATE);
    String message=pollingResult.getRight() == null ? constructClusterFailedMessage(cluster.getId(),ambariClient) : pollingResult.getRight().getMessage();
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResult.getLeft(),message);
    Pair<PollingResult,Exception> pollingResultExceptionPair=ambariOperationService.waitForOperations(stack,ambariClient,new HashMap<String,Integer>(){
{
        put(""String_Node_Str"",1);
      }
    }
,INSTALL_AMBARI_PROGRESS_STATE);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResultExceptionPair.getLeft(),constructClusterFailedMessage(cluster.getId(),ambariClient));
    recipeEngine.executePostInstall(stack);
    ambariSmartSenseCapturer.capture(0,ambariClient);
    cluster=ambariViewProvider.provideViewInformation(ambariClient,cluster);
    ambariClusterCreationSuccessHandler.handleClusterCreationSuccess(stack,cluster);
  }
 catch (  CancellationException cancellationException) {
    throw cancellationException;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}","@Override public void buildCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    clusterService.updateCreationDateOnCluster(cluster);
    AmbariClient ambariClient=clientFactory.getAmbariClient(stack,stack.getCluster());
    Set<HostGroup> hostGroups=hostGroupService.getByCluster(cluster.getId());
    BlueprintPreparationObject blueprintPreparationObject=conversionService.convert(stack,BlueprintPreparationObject.class);
    Map<String,List<Map<String,String>>> hostGroupMappings=hostGroupAssociationBuilder.buildHostGroupAssociations(hostGroups);
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    recipeEngine.executePostAmbariStartRecipes(stack,hostGroups);
    ambariRepositoryVersionService.setBaseRepoURL(stack.getName(),cluster.getId(),stack.getOrchestrator(),ambariClient);
    String blueprintText=centralBlueprintUpdater.getBlueprintText(blueprintPreparationObject);
    addBlueprint(stack.getId(),ambariClient,blueprintText,cluster.getTopologyValidation());
    cluster.setExtendedBlueprintText(blueprintText);
    clusterService.updateCluster(cluster);
    PollingResult waitForHostsResult=ambariPollingServiceProvider.hostsPollingService(stack,ambariClient,hostsInCluster);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(waitForHostsResult,cloudbreakMessagesService.getMessage(AMBARI_CLUSTER_HOST_JOIN_FAILED.code()));
    ambariClusterTemplateService.addClusterTemplate(cluster,hostGroupMappings,ambariClient);
    Pair<PollingResult,Exception> pollingResult=ambariOperationService.waitForOperationsToStart(stack,ambariClient,singletonMap(""String_Node_Str"",1),START_OPERATION_STATE);
    String message=pollingResult.getRight() == null ? constructClusterFailedMessage(cluster.getId(),ambariClient) : pollingResult.getRight().getMessage();
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResult.getLeft(),message);
    Pair<PollingResult,Exception> pollingResultExceptionPair=ambariOperationService.waitForOperations(stack,ambariClient,new HashMap<String,Integer>(){
{
        put(""String_Node_Str"",1);
      }
    }
,INSTALL_AMBARI_PROGRESS_STATE);
    ambariClusterConnectorPollingResultChecker.checkPollingResult(pollingResultExceptionPair.getLeft(),constructClusterFailedMessage(cluster.getId(),ambariClient));
    recipeEngine.executePostInstallRecipes(stack,hostGroups);
    ambariSmartSenseCapturer.capture(0,ambariClient);
    cluster=ambariViewProvider.provideViewInformation(ambariClient,cluster);
    ambariClusterCreationSuccessHandler.handleClusterCreationSuccess(stack,cluster);
  }
 catch (  CancellationException cancellationException) {
    throw cancellationException;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}",0.9968498424921246
63850,"private String getRecipeExecutionFaiureMessage(Stack stack,CloudbreakOrchestratorFailedException e){
  if (!recipeExecutionFailureCollector.canProcessExecutionFailure(e)) {
    return e.getMessage();
  }
  Map<HostGroup,List<RecipeModel>> recipeMap=getHostgroupToRecipeMap(hostGroupService.getByCluster(stack.getCluster().getId()));
  Set<RecipeExecutionFailure> failures=recipeExecutionFailureCollector.collectErrors((CloudbreakOrchestratorException)e.getCause().getCause(),recipeMap,instanceGroupService.findByStackId(stack.getId()));
  StringBuilder messagePrefix=new StringBuilder(""String_Node_Str"");
  String message=failures.stream().map(failure -> new StringBuilder(""String_Node_Str"").append(failure.getRecipe().getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getInstanceGroup().getGroupName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getDiscoveryFQDN()).toString()).collect(Collectors.joining(""String_Node_Str""));
  return messagePrefix.append(message).toString();
}","private String getRecipeExecutionFaiureMessage(Stack stack,CloudbreakOrchestratorFailedException e){
  if (!recipeExecutionFailureCollector.canProcessExecutionFailure(e)) {
    return e.getMessage();
  }
  Map<HostGroup,List<RecipeModel>> recipeMap=getHostgroupToRecipeMap(hostGroupService.getByCluster(stack.getCluster().getId()));
  Set<RecipeExecutionFailure> failures=recipeExecutionFailureCollector.collectErrors((CloudbreakOrchestratorException)e.getCause().getCause(),recipeMap,instanceGroupService.findByStackId(stack.getId()));
  StringBuilder messagePrefix=new StringBuilder(""String_Node_Str"");
  String message=failures.stream().map(failure -> new StringBuilder(""String_Node_Str"").append(failure.getRecipe().getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getInstanceGroup().getGroupName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getDiscoveryFQDN()).append(']').toString()).collect(Collectors.joining(""String_Node_Str""));
  return messagePrefix.append(message).toString();
}",0.9944495837187788
63851,"private void verifyUpScale(String clusterName,int scalingAdjustment){
  if (isUpScale(scalingAdjustment)) {
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"",scalingAdjustment).exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyRegexp(""String_Node_Str"" + scalingAdjustment + ""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName,""String_Node_Str"").atLeast(1).verify();
  }
}","private void verifyUpScale(String clusterName,int scalingAdjustment){
  if (isUpScale(scalingAdjustment)) {
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(MOCK_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"",scalingAdjustment).exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(2).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").atLeast(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_API_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(0).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyRegexp(""String_Node_Str"" + scalingAdjustment + ""String_Node_Str"").exactTimes(1).verify();
    verify(SALT_BOOT_ROOT + ""String_Node_Str"",""String_Node_Str"").bodyContains(""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").atLeast(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"",""String_Node_Str"").exactTimes(1).verify();
    verify(AMBARI_API_ROOT + ""String_Node_Str"" + clusterName,""String_Node_Str"").atLeast(1).verify();
  }
}",0.9983098591549296
63852,"public void executePostRecipesOnNewHosts(Long stackId,String hostGroupName) throws CloudbreakException {
  Stack stack=stackService.getByIdWithLists(stackId);
  LOGGER.info(""String_Node_Str"");
  recipeEngine.executePostInstall(stack);
}","public void executePostRecipesOnNewHosts(Long stackId) throws CloudbreakException {
  Stack stack=stackService.getByIdWithLists(stackId);
  LOGGER.info(""String_Node_Str"");
  recipeEngine.executePostInstallRecipes(stack,hostGroupService.getByCluster(stack.getCluster().getId()));
}",0.810077519379845
63853,"@Override public void accept(Event<UpscalePostRecipesRequest> event){
  UpscalePostRecipesRequest request=event.getData();
  UpscalePostRecipesResult result;
  try {
    clusterUpscaleService.executePostRecipesOnNewHosts(request.getStackId(),request.getHostGroupName());
    result=new UpscalePostRecipesResult(request);
  }
 catch (  Exception e) {
    result=new UpscalePostRecipesResult(e.getMessage(),e,request);
  }
  eventBus.notify(result.selector(),new Event<>(event.getHeaders(),result));
}","@Override public void accept(Event<UpscalePostRecipesRequest> event){
  UpscalePostRecipesRequest request=event.getData();
  UpscalePostRecipesResult result;
  try {
    clusterUpscaleService.executePostRecipesOnNewHosts(request.getStackId());
    result=new UpscalePostRecipesResult(request);
  }
 catch (  Exception e) {
    result=new UpscalePostRecipesResult(e.getMessage(),e,request);
  }
  eventBus.notify(result.selector(),new Event<>(event.getHeaders(),result));
}",0.972193614830072
63854,"public void buildAmbariCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    if (cluster.getCreationStarted() == null) {
      cluster.setCreationStarted(new Date().getTime());
      cluster=clusterRepository.save(cluster);
    }
    Set<HostGroup> hostGroups=hostGroupService.getByCluster(cluster.getId());
    Map<String,List<Map<String,String>>> hostGroupMappings=buildHostGroupAssociations(hostGroups);
    recipeEngine.executePostAmbariStartRecipes(stack,hostGroups);
    String blueprintText=generateBlueprintText(stack,cluster);
    AmbariClient ambariClient=getAmbariClient(stack);
    ambariRepositoryVersionService.setBaseRepoURL(stack.getName(),cluster.getId(),stack.getOrchestrator(),ambariClient);
    addBlueprint(stack,ambariClient,blueprintText,hostGroups);
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    PollingResult waitForHostsResult=waitForHosts(stack,ambariClient,hostsInCluster);
    checkPollingResult(waitForHostsResult,cloudbreakMessagesService.getMessage(Msg.AMBARI_CLUSTER_HOST_JOIN_FAILED.code()));
    ambariClusterTemplateService.addClusterTemplate(cluster,hostGroupMappings,ambariClient);
    Pair<PollingResult,Exception> pollingResult=ambariOperationService.waitForOperationsToStart(stack,ambariClient,singletonMap(""String_Node_Str"",1),START_OPERATION_STATE);
    String message=pollingResult.getRight() == null ? cloudbreakMessagesService.getMessage(Msg.AMBARI_CLUSTER_INSTALL_FAILED.code()) : pollingResult.getRight().getMessage();
    checkPollingResult(pollingResult.getLeft(),message);
    pollingResult=waitForClusterInstall(stack,ambariClient);
    checkPollingResult(pollingResult.getLeft(),cloudbreakMessagesService.getMessage(Msg.AMBARI_CLUSTER_INSTALL_FAILED.code()));
    recipeEngine.executePostInstall(stack);
    triggerSmartSenseCapture(ambariClient,blueprintText);
    cluster=ambariViewProvider.provideViewInformation(ambariClient,cluster);
    handleClusterCreationSuccess(stack,cluster);
  }
 catch (  CancellationException cancellationException) {
    throw cancellationException;
  }
catch (  HttpResponseException hre) {
    String errorMessage=AmbariClientExceptionUtil.getErrorMessage(hre);
    throw new AmbariOperationFailedException(""String_Node_Str"" + errorMessage,hre);
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}","public void buildAmbariCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    if (cluster.getCreationStarted() == null) {
      cluster.setCreationStarted(new Date().getTime());
      cluster=clusterRepository.save(cluster);
    }
    Set<HostGroup> hostGroups=hostGroupService.getByCluster(cluster.getId());
    Map<String,List<Map<String,String>>> hostGroupMappings=buildHostGroupAssociations(hostGroups);
    recipeEngine.executePostAmbariStartRecipes(stack,hostGroups);
    String blueprintText=generateBlueprintText(stack,cluster);
    AmbariClient ambariClient=getAmbariClient(stack);
    ambariRepositoryVersionService.setBaseRepoURL(stack.getName(),cluster.getId(),stack.getOrchestrator(),ambariClient);
    addBlueprint(stack,ambariClient,blueprintText,hostGroups);
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    PollingResult waitForHostsResult=waitForHosts(stack,ambariClient,hostsInCluster);
    checkPollingResult(waitForHostsResult,cloudbreakMessagesService.getMessage(Msg.AMBARI_CLUSTER_HOST_JOIN_FAILED.code()));
    ambariClusterTemplateService.addClusterTemplate(cluster,hostGroupMappings,ambariClient);
    Pair<PollingResult,Exception> pollingResult=ambariOperationService.waitForOperationsToStart(stack,ambariClient,singletonMap(""String_Node_Str"",1),START_OPERATION_STATE);
    String message=pollingResult.getRight() == null ? cloudbreakMessagesService.getMessage(Msg.AMBARI_CLUSTER_INSTALL_FAILED.code()) : pollingResult.getRight().getMessage();
    checkPollingResult(pollingResult.getLeft(),message);
    pollingResult=waitForClusterInstall(stack,ambariClient);
    checkPollingResult(pollingResult.getLeft(),cloudbreakMessagesService.getMessage(Msg.AMBARI_CLUSTER_INSTALL_FAILED.code()));
    recipeEngine.executePostInstallRecipes(stack,hostGroups);
    triggerSmartSenseCapture(ambariClient,blueprintText);
    cluster=ambariViewProvider.provideViewInformation(ambariClient,cluster);
    handleClusterCreationSuccess(stack,cluster);
  }
 catch (  CancellationException cancellationException) {
    throw cancellationException;
  }
catch (  HttpResponseException hre) {
    String errorMessage=AmbariClientExceptionUtil.getErrorMessage(hre);
    throw new AmbariOperationFailedException(""String_Node_Str"" + errorMessage,hre);
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}",0.9963503649635036
63855,"private String getRecipeExecutionFaiureMessage(Stack stack,CloudbreakOrchestratorFailedException e){
  if (!recipeExecutionFailureCollector.canProcessExecutionFailure(e)) {
    return e.getMessage();
  }
  Map<HostGroup,List<RecipeModel>> recipeMap=getHostgroupToRecipeMap(hostGroupService.getByCluster(stack.getCluster().getId()));
  Set<RecipeExecutionFailure> failures=recipeExecutionFailureCollector.collectErrors((CloudbreakOrchestratorException)e.getCause().getCause(),recipeMap,instanceGroupService.findByStackId(stack.getId()));
  StringBuilder message=new StringBuilder(""String_Node_Str"");
  failures.forEach(failure -> message.append(""String_Node_Str"").append(failure.getRecipe().getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getInstanceGroup().getGroupName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getDiscoveryFQDN()).append(""String_Node_Str""));
  return message.toString();
}","private String getRecipeExecutionFaiureMessage(Stack stack,CloudbreakOrchestratorFailedException e){
  if (!recipeExecutionFailureCollector.canProcessExecutionFailure(e)) {
    return e.getMessage();
  }
  Map<HostGroup,List<RecipeModel>> recipeMap=getHostgroupToRecipeMap(hostGroupService.getByCluster(stack.getCluster().getId()));
  Set<RecipeExecutionFailure> failures=recipeExecutionFailureCollector.collectErrors((CloudbreakOrchestratorException)e.getCause().getCause(),recipeMap,instanceGroupService.findByStackId(stack.getId()));
  StringBuilder messagePrefix=new StringBuilder(""String_Node_Str"");
  String message=failures.stream().map(failure -> new StringBuilder(""String_Node_Str"").append(failure.getRecipe().getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getInstanceGroup().getGroupName()).append(""String_Node_Str"").append(""String_Node_Str"").append(failure.getInstanceMetaData().getDiscoveryFQDN()).append(']').toString()).collect(Collectors.joining(""String_Node_Str""));
  return messagePrefix.append(message).toString();
}",0.934102934102934
63856,"public void executePreTerminationRecipes(Stack stack,Set<HostGroup> hostGroups,Set<String> hostNames) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (recipesFound(hostGroups,RecipeType.PRE_TERMINATION) && recipesSupportedOnOrchestrator(orchestrator)) {
    orchestratorRecipeExecutor.preTerminationRecipes(stack,hostNames);
  }
}","public void executePreTerminationRecipes(Stack stack,Set<HostGroup> hostGroups,Set<String> hostNames) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(hostGroups,orchestrator,PRE_TERMINATION)) {
    orchestratorRecipeExecutor.preTerminationRecipes(stack,hostNames);
  }
}",0.8470254957507082
63857,"public void executePreAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(stack,hostGroups,orchestrator)) {
    orchestratorRecipeExecutor.preAmbariStartRecipes(stack);
  }
}","public void executePreAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(hostGroups,orchestrator,PRE_AMBARI_START)) {
    orchestratorRecipeExecutor.preAmbariStartRecipes(stack);
  }
}",0.891846921797005
63858,"private void addContainerExecutorScripts(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    if (cluster != null && ExecutorType.CONTAINER.equals(cluster.getExecutorType())) {
      for (      HostGroup hostGroup : hostGroups) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
        RecipeScript recipeScript=new RecipeScript(script,RecipeType.POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}","private void addContainerExecutorScripts(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    if (cluster != null && ExecutorType.CONTAINER.equals(cluster.getExecutorType())) {
      for (      HostGroup hostGroup : hostGroups) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
        RecipeScript recipeScript=new RecipeScript(script,POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}",0.991869918699187
63859,"private void addHDFSRecipe(Cluster cluster,String blueprintText,Set<HostGroup> hostGroups){
  try {
    for (    HostGroup hostGroup : hostGroups) {
      if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"").replaceAll(""String_Node_Str"",cluster.getUserName());
        RecipeScript recipeScript=new RecipeScript(script,RecipeType.POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
        break;
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}","private void addHDFSRecipe(Cluster cluster,String blueprintText,Set<HostGroup> hostGroups){
  try {
    for (    HostGroup hostGroup : hostGroups) {
      if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
        String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"").replaceAll(""String_Node_Str"",cluster.getUserName());
        RecipeScript recipeScript=new RecipeScript(script,POST_CLUSTER_INSTALL);
        Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
        hostGroup.addRecipe(recipe);
        break;
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}",0.9921259842519684
63860,"public void executePostAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if (shouldExecuteRecipeOnStack(stack,hostGroups,orchestrator)) {
    orchestratorRecipeExecutor.postAmbariStartRecipes(stack);
  }
}","public void executePostAmbariStartRecipes(Stack stack,Set<HostGroup> hostGroups) throws CloudbreakException {
  Orchestrator orchestrator=stack.getOrchestrator();
  if ((stack.getCluster() != null && stack.getCluster().getLdapConfig() != null) || recipesFound(hostGroups,POST_AMBARI_START) && recipesSupportedOnOrchestrator(orchestrator)) {
    orchestratorRecipeExecutor.postAmbariStartRecipes(stack);
  }
}",0.7290780141843972
63861,"private void addSmartSenseRecipe(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    String blueprintText=cluster.getBlueprint().getBlueprintText();
    if (smartSenseConfigProvider.smartSenseIsConfigurable(blueprintText)) {
      for (      HostGroup hostGroup : hostGroups) {
        if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
          String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
          RecipeScript recipeScript=new RecipeScript(script,RecipeType.POST_CLUSTER_INSTALL);
          Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
          hostGroup.addRecipe(recipe);
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}","private void addSmartSenseRecipe(Stack stack,Set<HostGroup> hostGroups){
  try {
    Cluster cluster=stack.getCluster();
    String blueprintText=cluster.getBlueprint().getBlueprintText();
    if (smartSenseConfigProvider.smartSenseIsConfigurable(blueprintText)) {
      for (      HostGroup hostGroup : hostGroups) {
        if (isComponentPresent(blueprintText,""String_Node_Str"",hostGroup)) {
          String script=FileReaderUtils.readFileFromClasspath(""String_Node_Str"");
          RecipeScript recipeScript=new RecipeScript(script,POST_CLUSTER_INSTALL);
          Recipe recipe=recipeBuilder.buildRecipes(""String_Node_Str"",Collections.singletonList(recipeScript)).get(0);
          hostGroup.addRecipe(recipe);
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    LOGGER.warn(""String_Node_Str"",e);
  }
}",0.9934328358208956
63862,"private boolean shouldExecuteRecipeOnStack(Stack stack,Set<HostGroup> hostGroups,Orchestrator orchestrator) throws CloudbreakException {
  return ((stack.getCluster() != null && stack.getCluster().getLdapConfig() != null) || recipesFound(hostGroups)) && recipesSupportedOnOrchestrator(orchestrator);
}","private boolean shouldExecuteRecipeOnStack(Set<HostGroup> hostGroups,Orchestrator orchestrator,RecipeType recipeType) throws CloudbreakException {
  return (recipesFound(hostGroups,recipeType)) && recipesSupportedOnOrchestrator(orchestrator);
}",0.7743119266055046
63863,"public boolean canProcessExecutionFailure(Exception e){
  if (e.getCause() != null && e.getCause() instanceof CloudbreakOrchestratorException) {
    return !((CloudbreakOrchestratorException)e.getCause()).getNodesWithErrors().isEmpty();
  }
 else   if (e.getCause() != null && e.getCause().getCause() != null && e.getCause().getCause() instanceof CloudbreakOrchestratorException) {
    return !((CloudbreakOrchestratorException)e.getCause().getCause()).getNodesWithErrors().isEmpty();
  }
  return false;
}","public boolean canProcessExecutionFailure(Exception e){
  return getNodesWithErrors(e).isPresent() && e.getMessage().contains(""String_Node_Str"");
}",0.3828483920367534
63864,"public Set<RecipeExecutionFailure> collectErrors(CloudbreakOrchestratorException exception,Map<HostGroup,List<RecipeModel>> hostgroupToRecipeMap,Set<InstanceGroup> instanceGroups){
  return exception.getNodesWithErrors().asMap().entrySet().stream().flatMap((  Entry<String,Collection<String>> nodeWithErrors) -> {
    Map<String,Optional<String>> errorsWithPhase=nodeWithErrors.getValue().stream().collect(Collectors.toMap(e -> e,this::getInstallPhase,(phase1,phase2) -> phase1.map(Optional::of).orElse(phase2)));
    return errorsWithPhase.entrySet().stream().filter(errorWithPhase -> errorWithPhase.getValue().isPresent()).map((    Entry<String,Optional<String>> errorWithPhase) -> StringUtils.substringBetween(errorWithPhase.getKey(),""String_Node_Str"" + errorWithPhase.getValue().get() + '/',""String_Node_Str"")).collect(Collectors.toMap(recipeName -> recipeName,recipeName -> getPossibleFailingHostgroupsByRecipeName(hostgroupToRecipeMap,recipeName),(hg1,hg2) -> Stream.concat(hg1.stream(),hg2.stream()).collect(Collectors.toSet()))).entrySet().stream().flatMap((    Entry<String,Set<String>> recipeWithHostgroups) -> recipeWithHostgroups.getValue().stream().map((    String hostGroup) -> {
      Optional<Recipe> recipe=getRecipeOfHostgroupByRecipeName(hostgroupToRecipeMap,recipeWithHostgroups.getKey(),hostGroup);
      Optional<InstanceMetaData> instanceMetaData=getInstanceMetaDataByHost(instanceGroups,nodeWithErrors.getKey(),hostGroup);
      if (recipe.isPresent() && instanceMetaData.isPresent()) {
        return new RecipeExecutionFailure(recipe.get(),instanceMetaData.get());
      }
      return null;
    }
).filter(Objects::nonNull));
  }
).collect(Collectors.toSet());
}","public Set<RecipeExecutionFailure> collectErrors(CloudbreakOrchestratorException exception,Map<HostGroup,List<RecipeModel>> hostgroupToRecipeMap,Set<InstanceGroup> instanceGroups){
  if (!canProcessExecutionFailure(exception)) {
    throw new CloudbreakServiceException(""String_Node_Str"",exception);
  }
  return exception.getNodesWithErrors().asMap().entrySet().stream().flatMap((  Entry<String,Collection<String>> nodeWithErrors) -> {
    Map<String,Optional<String>> errorsWithPhase=nodeWithErrors.getValue().stream().collect(Collectors.toMap(e -> e,this::getInstallPhase,(phase1,phase2) -> phase1.map(Optional::of).orElse(phase2)));
    return errorsWithPhase.entrySet().stream().filter(errorWithPhase -> errorWithPhase.getValue().isPresent()).map(this::errorWithPhaseToRecipeName).collect(Collectors.toMap(recipeName -> recipeName,recipeName -> getPossibleFailingHostgroupsByRecipeName(hostgroupToRecipeMap,recipeName),(hg1,hg2) -> Stream.concat(hg1.stream(),hg2.stream()).collect(Collectors.toSet()))).entrySet().stream().flatMap((    Entry<String,Set<String>> recipeWithHostgroups) -> recipeWithHostgroups.getValue().stream().map((    String hostGroup) -> {
      Optional<Recipe> recipe=getRecipeOfHostgroupByRecipeName(hostgroupToRecipeMap,recipeWithHostgroups.getKey(),hostGroup);
      Optional<InstanceMetaData> instanceMetaData=getInstanceMetaDataByHost(instanceGroups,nodeWithErrors.getKey(),hostGroup);
      if (recipe.isPresent() && instanceMetaData.isPresent()) {
        return new RecipeExecutionFailure(recipe.get(),instanceMetaData.get());
      }
      return null;
    }
).filter(Objects::nonNull));
  }
).collect(Collectors.toSet());
}",0.9077336518363692
63865,"@Test public void testCollectErrors(){
  ArrayListMultimap<String,String> nodesWithErrors=ArrayListMultimap.create();
  nodesWithErrors.putAll(""String_Node_Str"",Arrays.asList(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  nodesWithErrors.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  CloudbreakOrchestratorFailedException exception=new CloudbreakOrchestratorFailedException(EXCEPTION_MESSAGE,nodesWithErrors);
  Recipe failingRecipe1=new Recipe();
  failingRecipe1.setName(""String_Node_Str"");
  Recipe failingRecipe2=new Recipe();
  failingRecipe2.setName(""String_Node_Str"");
  Recipe goodRecipe=new Recipe();
  goodRecipe.setName(""String_Node_Str"");
  HostGroup master=new HostGroup();
  master.setName(""String_Node_Str"");
  master.setRecipes(Sets.newHashSet(failingRecipe1,goodRecipe));
  HostGroup worker=new HostGroup();
  worker.setName(""String_Node_Str"");
  worker.setRecipes(Sets.newHashSet(failingRecipe1,failingRecipe2));
  RecipeModel failingRecipeModel1=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  RecipeModel failingRecipeModel2=new RecipeModel(""String_Node_Str"",PRE_AMBARI_START,""String_Node_Str"");
  RecipeModel goodRecipeModel=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  Map<HostGroup,List<RecipeModel>> hostgroupToRecipeMap=new HashMap<>();
  hostgroupToRecipeMap.put(master,Arrays.asList(failingRecipeModel1,goodRecipeModel));
  hostgroupToRecipeMap.put(worker,Arrays.asList(failingRecipeModel1,failingRecipeModel2));
  Set<InstanceGroup> instanceGroups=new HashSet<>();
  InstanceMetaData instanceMetaData1=new InstanceMetaData();
  instanceMetaData1.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup1=new InstanceGroup();
  instanceGroup1.setGroupName(""String_Node_Str"");
  instanceGroup1.setInstanceMetaData(Sets.newHashSet(instanceMetaData1));
  InstanceMetaData instanceMetaData2=new InstanceMetaData();
  instanceMetaData2.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup2=new InstanceGroup();
  instanceGroup2.setGroupName(""String_Node_Str"");
  instanceGroup2.setInstanceMetaData(Sets.newHashSet(instanceMetaData2));
  instanceGroups.add(instanceGroup1);
  instanceGroups.add(instanceGroup2);
  Set<RecipeExecutionFailure> recipeExecutionFailures=recipeExecutionFailureHandler.collectErrors(exception,hostgroupToRecipeMap,instanceGroups);
  assertEquals(3,recipeExecutionFailures.size());
  long recipe1Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(2,recipe1Failures);
  long recipe2Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(1,recipe2Failures);
  long workerInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).count();
  assertEquals(2,workerInstanceFailures);
  long masterInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).peek(failure -> assertEquals(""String_Node_Str"",failure.getRecipe().getName())).count();
  assertEquals(1,masterInstanceFailures);
}","@Test public void testCollectErrors(){
  ArrayListMultimap<String,String> nodesWithErrors=getNodesWithErrors();
  CloudbreakOrchestratorFailedException exception=new CloudbreakOrchestratorFailedException(EXCEPTION_MESSAGE,nodesWithErrors);
  Recipe failingRecipe1=new Recipe();
  failingRecipe1.setName(""String_Node_Str"");
  Recipe failingRecipe2=new Recipe();
  failingRecipe2.setName(""String_Node_Str"");
  Recipe goodRecipe=new Recipe();
  goodRecipe.setName(""String_Node_Str"");
  HostGroup master=new HostGroup();
  master.setName(""String_Node_Str"");
  master.setRecipes(Sets.newHashSet(failingRecipe1,goodRecipe));
  HostGroup worker=new HostGroup();
  worker.setName(""String_Node_Str"");
  worker.setRecipes(Sets.newHashSet(failingRecipe1,failingRecipe2));
  RecipeModel failingRecipeModel1=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  RecipeModel failingRecipeModel2=new RecipeModel(""String_Node_Str"",PRE_AMBARI_START,""String_Node_Str"");
  RecipeModel goodRecipeModel=new RecipeModel(""String_Node_Str"",POST_AMBARI_START,""String_Node_Str"");
  Map<HostGroup,List<RecipeModel>> hostgroupToRecipeMap=new HashMap<>();
  hostgroupToRecipeMap.put(master,Arrays.asList(failingRecipeModel1,goodRecipeModel));
  hostgroupToRecipeMap.put(worker,Arrays.asList(failingRecipeModel1,failingRecipeModel2));
  Set<InstanceGroup> instanceGroups=new HashSet<>();
  InstanceMetaData instanceMetaData1=new InstanceMetaData();
  instanceMetaData1.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup1=new InstanceGroup();
  instanceGroup1.setGroupName(""String_Node_Str"");
  instanceGroup1.setInstanceMetaData(Sets.newHashSet(instanceMetaData1));
  InstanceMetaData instanceMetaData2=new InstanceMetaData();
  instanceMetaData2.setDiscoveryFQDN(""String_Node_Str"");
  InstanceGroup instanceGroup2=new InstanceGroup();
  instanceGroup2.setGroupName(""String_Node_Str"");
  instanceGroup2.setInstanceMetaData(Sets.newHashSet(instanceMetaData2));
  instanceGroups.add(instanceGroup1);
  instanceGroups.add(instanceGroup2);
  Set<RecipeExecutionFailure> recipeExecutionFailures=recipeExecutionFailureHandler.collectErrors(exception,hostgroupToRecipeMap,instanceGroups);
  assertEquals(3,recipeExecutionFailures.size());
  long recipe1Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(2,recipe1Failures);
  long recipe2Failures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getRecipe().getName())).count();
  assertEquals(1,recipe2Failures);
  long workerInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).count();
  assertEquals(2,workerInstanceFailures);
  long masterInstanceFailures=recipeExecutionFailures.stream().filter(failure -> ""String_Node_Str"".equals(failure.getInstanceMetaData().getDiscoveryFQDN())).peek(failure -> assertEquals(""String_Node_Str"",failure.getRecipe().getName())).count();
  assertEquals(1,masterInstanceFailures);
}",0.958294428882664
63866,"@Override public boolean isValid(RDSConfigRequest request,ConstraintValidatorContext context){
  boolean supportedScenario=false;
  Optional<DatabaseVendor> vendorByJdbcUrl=DatabaseVendor.getVendorByJdbcUrl(request);
  Optional<SupportedExternalDatabaseServiceEntry> serviceEntry=SupportedDatabaseProvider.supportedExternalDatabases().stream().filter(item -> item.getName().equals(request.getType()) || item.getDisplayName().equals(request.getType())).findFirst();
  if (serviceEntry.isPresent() && vendorByJdbcUrl.isPresent()) {
    Optional<SupportedDatabaseEntry> databaseEntry=serviceEntry.get().getDatabases().stream().filter(item -> item.getDatabaseName().equals(vendorByJdbcUrl.get().name())).findFirst();
    if (databaseEntry.isPresent()) {
      supportedScenario=true;
    }
 else {
      String message=String.format(""String_Node_Str"" + ""String_Node_Str"",serviceEntry.get().getDatabases().stream().map(SupportedDatabaseEntry::getDatabaseName).collect(Collectors.toList()).stream().collect(Collectors.joining(""String_Node_Str"")),request.getType());
      ValidatorUtil.addConstraintViolation(context,message,""String_Node_Str"");
    }
  }
  return supportedScenario;
}","@Override public boolean isValid(RDSConfigRequest request,ConstraintValidatorContext context){
  boolean supportedScenario=false;
  Optional<DatabaseVendor> vendorByJdbcUrl=DatabaseVendor.getVendorByJdbcUrl(request);
  Optional<SupportedExternalDatabaseServiceEntry> serviceEntry=SupportedDatabaseProvider.supportedExternalDatabases().stream().filter(item -> item.getName().toLowerCase().equals(request.getType().toLowerCase()) || item.getDisplayName().toLowerCase().equals(request.getType().toLowerCase())).findFirst();
  if (!serviceEntry.isPresent()) {
    serviceEntry=SupportedDatabaseProvider.getOthers();
  }
  if (serviceEntry.isPresent() && vendorByJdbcUrl.isPresent()) {
    Optional<SupportedDatabaseEntry> databaseEntry=serviceEntry.get().getDatabases().stream().filter(item -> item.getDatabaseName().equals(vendorByJdbcUrl.get().name())).findFirst();
    if (databaseEntry.isPresent()) {
      supportedScenario=true;
    }
 else {
      String message=String.format(""String_Node_Str"" + ""String_Node_Str"",serviceEntry.get().getDatabases().stream().map(SupportedDatabaseEntry::getDatabaseName).collect(Collectors.toList()).stream().collect(Collectors.joining(""String_Node_Str"")),request.getType());
      ValidatorUtil.addConstraintViolation(context,message,""String_Node_Str"");
    }
  }
  return supportedScenario;
}",0.9397686477861986
63867,"@Parameterized.Parameters(name=""String_Node_Str"") public static Iterable<Object[]> data(){
  return Arrays.asList(new Object[][]{{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,false},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,false},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,false},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,false},{""String_Node_Str"",ORACLE12,false},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,false},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,false},{""String_Node_Str"",ORACLE12,false},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,false},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,false},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,false},{""String_Node_Str"",ORACLE12,false},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,false}});
}","@Parameterized.Parameters(name=""String_Node_Str"") public static Iterable<Object[]> data(){
  return Arrays.asList(new Object[][]{{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,false},{""String_Node_Str"",ORACLE12,false},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,false},{""String_Node_Str"",ORACLE12,false},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,true},{""String_Node_Str"",ORACLE12,true},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",ORACLE11,false},{""String_Node_Str"",ORACLE12,false},{""String_Node_Str"",MYSQL,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true},{""String_Node_Str"",POSTGRES,true}});
}",0.3517650734145579
63868,"@Query(""String_Node_Str"") HostGroup findHostGroupsByInstanceGroupName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String instanceGroupName);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") HostGroup findHostGroupsByInstanceGroupName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String instanceGroupName);",0.8109452736318408
63869,"@Query(""String_Node_Str"") Set<HostGroup> findHostGroupsInCluster(@Param(""String_Node_Str"") Long clusterId);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") Set<HostGroup> findHostGroupsInCluster(@Param(""String_Node_Str"") Long clusterId);",0.7379310344827587
63870,"@Query(""String_Node_Str"") HostGroup findHostGroupInClusterByName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String hostGroupName);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") HostGroup findHostGroupInClusterByName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String hostGroupName);",0.8020833333333334
63871,"@Query(""String_Node_Str"") Set<HostGroup> findAllHostGroupsByRecipe(@Param(""String_Node_Str"") Long recipeId);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") Set<HostGroup> findAllHostGroupsByRecipe(@Param(""String_Node_Str"") Long recipeId);",0.7397260273972602
63872,"@Override public void updateStatus(Long stackId,StatusRequest statusRequest){
  Stack stack=stackService.getByIdWithLists(stackId);
  Cluster cluster=stack.getCluster();
  if (cluster == null) {
    throw new BadRequestException(String.format(""String_Node_Str"",stack.getName()));
  }
switch (statusRequest) {
case SYNC:
    sync(stack);
  break;
case STOPPED:
stop(stack,cluster);
break;
case STARTED:
start(stack,cluster);
break;
default :
throw new BadRequestException(""String_Node_Str"");
}
}","@Override public void updateStatus(Stack stack,StatusRequest statusRequest){
  Cluster cluster=stack.getCluster();
  if (cluster == null) {
    throw new BadRequestException(String.format(""String_Node_Str"",stack.getName()));
  }
switch (statusRequest) {
case SYNC:
    sync(stack);
  break;
case STOPPED:
stop(stack,cluster);
break;
case STARTED:
start(stack,cluster);
break;
default :
throw new BadRequestException(""String_Node_Str"");
}
}",0.917470525187567
63873,"void updateStatus(Long stackId,StatusRequest statusRequest);","void updateStatus(Stack stack,StatusRequest statusRequest);",0.907563025210084
63874,"private void start(Stack stack,Cluster cluster,boolean updateCluster){
  if (stack.isAvailable()) {
    String statusDesc=cloudbreakMessagesService.getMessage(Msg.STACK_START_IGNORED.code());
    LOGGER.info(statusDesc);
    eventService.fireCloudbreakEvent(stack.getId(),AVAILABLE.name(),statusDesc);
  }
 else   if ((!stack.isStopped() || (cluster != null && !cluster.isStopped())) && !stack.isStartFailed()) {
    throw new BadRequestException(String.format(""String_Node_Str"",stack.getName()));
  }
 else   if (stack.isStopped() || stack.isStartFailed()) {
    stackUpdater.updateStackStatus(stack.getId(),DetailedStackStatus.START_REQUESTED);
    flowManager.triggerStackStart(stack.getId());
    if (updateCluster && cluster != null) {
      ambariClusterService.updateStatus(stack.getId(),StatusRequest.STARTED);
    }
  }
}","private void start(Stack stack,Cluster cluster,boolean updateCluster){
  if (stack.isAvailable()) {
    String statusDesc=cloudbreakMessagesService.getMessage(Msg.STACK_START_IGNORED.code());
    LOGGER.info(statusDesc);
    eventService.fireCloudbreakEvent(stack.getId(),AVAILABLE.name(),statusDesc);
  }
 else   if ((!stack.isStopped() || (cluster != null && !cluster.isStopped())) && !stack.isStartFailed()) {
    throw new BadRequestException(String.format(""String_Node_Str"",stack.getName()));
  }
 else   if (stack.isStopped() || stack.isStartFailed()) {
    Stack startStack=stackUpdater.updateStackStatus(stack.getId(),DetailedStackStatus.START_REQUESTED);
    flowManager.triggerStackStart(stack.getId());
    if (updateCluster && cluster != null) {
      ambariClusterService.updateStatus(startStack,StatusRequest.STARTED);
    }
  }
}",0.9796893667861408
63875,"@Query(""String_Node_Str"") HostGroup findHostGroupsByInstanceGroupName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String instanceGroupName);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") HostGroup findHostGroupsByInstanceGroupName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String instanceGroupName);",0.8109452736318408
63876,"@Query(""String_Node_Str"") Set<HostGroup> findHostGroupsInCluster(@Param(""String_Node_Str"") Long clusterId);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") Set<HostGroup> findHostGroupsInCluster(@Param(""String_Node_Str"") Long clusterId);",0.7379310344827587
63877,"@Query(""String_Node_Str"") HostGroup findHostGroupInClusterByName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String hostGroupName);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") HostGroup findHostGroupInClusterByName(@Param(""String_Node_Str"") Long clusterId,@Param(""String_Node_Str"") String hostGroupName);",0.8020833333333334
63878,"@Query(""String_Node_Str"") Set<HostGroup> findAllHostGroupsByRecipe(@Param(""String_Node_Str"") Long recipeId);","@EntityGraph(value=""String_Node_Str"",type=EntityGraph.EntityGraphType.LOAD) @Query(""String_Node_Str"") Set<HostGroup> findAllHostGroupsByRecipe(@Param(""String_Node_Str"") Long recipeId);",0.7397260273972602
63879,"@Test public void testCreateImageFoundNoStackStatusUpdate(){
  when(connector.checkAndGetPlatformVariant(stack)).thenReturn(variant);
  when(variant.value()).thenReturn(VARIANT_VALUE);
  when(stack.getStackAuthentication()).thenReturn(stackAuthentication);
  when(stackAuthentication.passwordAuthenticationRequired()).thenReturn(false);
  when(stackRepository.save(stack)).thenReturn(stack);
  when(tlsSecurityService.storeSSHKeys()).thenReturn(securityConfig);
  when(connector.getPlatformParameters(stack)).thenReturn(parameters);
  try {
    Optional<String> imageId=Optional.of(""String_Node_Str"");
    stack=underTest.create(user,stack,""String_Node_Str"",mock(StatedImage.class));
  }
  finally {
    verify(stack,times(1)).setPlatformVariant(eq(VARIANT_VALUE));
    verify(securityConfig,times(1)).setSaltPassword(anyObject());
    verify(securityConfig,times(1)).setSaltBootPassword(anyObject());
    verify(securityConfig,times(1)).setKnoxMasterSecret(anyObject());
    verify(securityConfig,times(1)).setStack(stack);
    verify(securityConfigRepository,times(1)).save(securityConfig);
    verify(stackUpdater,times(0)).updateStackStatus(eq(Long.MAX_VALUE),eq(DetailedStackStatus.PROVISION_FAILED),anyString());
  }
}","@Test public void testCreateImageFoundNoStackStatusUpdate(){
  when(connector.checkAndGetPlatformVariant(stack)).thenReturn(variant);
  when(variant.value()).thenReturn(VARIANT_VALUE);
  when(stack.getStackAuthentication()).thenReturn(stackAuthentication);
  when(stackAuthentication.passwordAuthenticationRequired()).thenReturn(false);
  when(stackRepository.save(stack)).thenReturn(stack);
  when(tlsSecurityService.storeSSHKeys()).thenReturn(securityConfig);
  when(connector.getPlatformParameters(stack)).thenReturn(parameters);
  try {
    stack=underTest.create(user,stack,""String_Node_Str"",mock(StatedImage.class));
  }
  finally {
    verify(stack,times(1)).setPlatformVariant(eq(VARIANT_VALUE));
    verify(securityConfig,times(1)).setSaltPassword(anyObject());
    verify(securityConfig,times(1)).setSaltBootPassword(anyObject());
    verify(securityConfig,times(1)).setKnoxMasterSecret(anyObject());
    verify(securityConfig,times(1)).setStack(stack);
    verify(securityConfigRepository,times(1)).save(securityConfig);
    verify(stackUpdater,times(0)).updateStackStatus(eq(Long.MAX_VALUE),eq(DetailedStackStatus.PROVISION_FAILED),anyString());
  }
}",0.9744449099287807
63880,"public String resolveTypeForKerberos(KerberosConfig kerberosConfig){
  if (!Strings.isNullOrEmpty(kerberosConfig.getContainerDn()) && !Strings.isNullOrEmpty(kerberosConfig.getLdapUrl())) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","public String resolveTypeForKerberos(@Nonnull KerberosConfig kerberosConfig){
  if (!Strings.isNullOrEmpty(kerberosConfig.getContainerDn()) && !Strings.isNullOrEmpty(kerberosConfig.getLdapUrl())) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}",0.9824561403508772
63881,"public String resolvePrincipalForKerberos(KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getPrincipal()) ? kerberosConfig.getAdmin() + PRINCIPAL : kerberosConfig.getPrincipal();
}","public String resolvePrincipalForKerberos(@Nonnull KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getPrincipal()) ? kerberosConfig.getAdmin() + PRINCIPAL : kerberosConfig.getPrincipal();
}",0.9790209790209792
63882,"public String resolveLdapUrlForKerberos(KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getLdapUrl()) ? null : kerberosConfig.getLdapUrl();
}","public String resolveLdapUrlForKerberos(@Nonnull KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getLdapUrl()) ? null : kerberosConfig.getLdapUrl();
}",0.9743589743589745
63883,"public Map<String,Object> getKerberosEnvProperties(KerberosConfig kerberosConfig){
  Map<String,Object> kerberosEnv=(Map<String,Object>)gson.fromJson(kerberosConfig.getDescriptor(),Map.class).get(""String_Node_Str"");
  return (Map<String,Object>)kerberosEnv.get(""String_Node_Str"");
}","public Map<String,Object> getKerberosEnvProperties(@Nonnull KerberosConfig kerberosConfig){
  Map<String,Object> kerberosEnv=(Map<String,Object>)gson.fromJson(kerberosConfig.getDescriptor(),Map.class).get(""String_Node_Str"");
  return (Map<String,Object>)kerberosEnv.get(""String_Node_Str"");
}",0.9842931937172776
63884,"public String resolveHostForKdcAdmin(KerberosConfig kerberosConfig,String defaultHost){
  return Strings.isNullOrEmpty(kerberosConfig.getAdminUrl()) ? defaultHost : kerberosConfig.getAdminUrl();
}","public String resolveHostForKdcAdmin(@Nonnull KerberosConfig kerberosConfig,String defaultHost){
  String adminHost=Optional.ofNullable(kerberosConfig.getAdminUrl()).orElse(""String_Node_Str"").trim();
  return adminHost.isEmpty() ? defaultHost : adminHost;
}",0.5386313465783664
63885,"public boolean isAmbariManagedKerberosPackages(KerberosConfig kerberosConfig) throws IOException {
  if (!StringUtils.hasLength(kerberosConfig.getDescriptor())) {
    return true;
  }
  try {
    JsonNode node=JsonUtil.readTree(kerberosConfig.getDescriptor()).get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"");
    return node.asBoolean();
  }
 catch (  NullPointerException ignored) {
    return true;
  }
}","public boolean isAmbariManagedKerberosPackages(@Nonnull KerberosConfig kerberosConfig) throws IOException {
  if (isEmpty(kerberosConfig.getDescriptor())) {
    return true;
  }
  try {
    JsonNode node=JsonUtil.readTree(kerberosConfig.getDescriptor()).get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"");
    return node.asBoolean();
  }
 catch (  NullPointerException ignored) {
    return true;
  }
}",0.9551886792452832
63886,"public String getRealm(String gwDomain,KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getRealm()) ? gwDomain.toUpperCase() : kerberosConfig.getRealm().toUpperCase();
}","public String getRealm(@Nonnull String gwDomain,@Nonnull KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getRealm()) ? gwDomain.toUpperCase() : kerberosConfig.getRealm().toUpperCase();
}",0.9565217391304348
63887,"public String resolveContainerDnForKerberos(KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getContainerDn()) ? null : kerberosConfig.getContainerDn();
}","public String resolveContainerDnForKerberos(@Nonnull KerberosConfig kerberosConfig){
  return Strings.isNullOrEmpty(kerberosConfig.getContainerDn()) ? null : kerberosConfig.getContainerDn();
}",0.976
63888,"public String resolveHostForKerberos(KerberosConfig kerberosConfig,String defaultHost){
  return Strings.isNullOrEmpty(kerberosConfig.getUrl()) ? defaultHost : kerberosConfig.getUrl();
}","public String resolveHostForKerberos(@Nonnull KerberosConfig kerberosConfig,String defaultHost){
  String host=Optional.ofNullable(kerberosConfig.getUrl()).orElse(""String_Node_Str"").trim();
  return host.isEmpty() ? defaultHost : host;
}",0.5721040189125296
63889,"@Test public void testAmbariManagedKerberosFalse() throws IOException {
  KerberosConfig config=new KerberosConfig();
  config.setDescriptor(""String_Node_Str"");
  Assert.assertFalse(underTest.isAmbariManagedKerberosPackages(config));
}","@Test public void testAmbariManagedKerberosFalse() throws IOException {
  config.setDescriptor(""String_Node_Str"");
  Assert.assertFalse(underTest.isAmbariManagedKerberosPackages(config));
}",0.8915094339622641
63890,"@Test public void testAmbariManagedKerberosTrue() throws IOException {
  KerberosConfig config=new KerberosConfig();
  config.setDescriptor(""String_Node_Str"");
  Assert.assertTrue(underTest.isAmbariManagedKerberosPackages(config));
}","@Test public void testAmbariManagedKerberosTrue() throws IOException {
  config.setDescriptor(""String_Node_Str"");
  Assert.assertTrue(underTest.isAmbariManagedKerberosPackages(config));
}",0.8904761904761904
63891,"@Test public void testAmbariManagedKerberosMissing() throws IOException {
  KerberosConfig config=new KerberosConfig();
  Assert.assertTrue(underTest.isAmbariManagedKerberosPackages(config));
}","@Test public void testAmbariManagedKerberosMissing() throws IOException {
  Assert.assertTrue(underTest.isAmbariManagedKerberosPackages(config));
}",0.8647058823529412
63892,"private SaltConfig createSaltConfig(Stack stack,Cluster cluster,GatewayConfig primaryGatewayConfig,Iterable<GatewayConfig> gatewayConfigs) throws IOException, CloudbreakOrchestratorException {
  Map<String,SaltPillarProperties> servicePillar=new HashMap<>();
  saveDatalakeNameservers(stack,servicePillar);
  saveSharedRangerService(stack,servicePillar);
  if (cluster.isSecure() && kerberosDetailService.isAmbariManagedKerberosPackages(cluster.getKerberosConfig())) {
    Map<String,String> kerberosPillarConf=new HashMap<>();
    KerberosConfig kerberosConfig=cluster.getKerberosConfig();
    putIfNotNull(kerberosPillarConf,kerberosConfig.getMasterKey(),""String_Node_Str"");
    putIfNotNull(kerberosPillarConf,kerberosConfig.getAdmin(),""String_Node_Str"");
    putIfNotNull(kerberosPillarConf,kerberosConfig.getPassword(),""String_Node_Str"");
    if (StringUtils.isEmpty(kerberosConfig.getDescriptor())) {
      putIfNotNull(kerberosPillarConf,kerberosConfig.getUrl(),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,kerberosConfig.getAdminUrl(),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,kerberosConfig.getRealm(),""String_Node_Str"");
    }
 else {
      Map<String,Object> properties=kerberosDetailService.getKerberosEnvProperties(kerberosConfig);
      putIfNotNull(kerberosPillarConf,properties.get(""String_Node_Str""),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,properties.get(""String_Node_Str""),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,properties.get(""String_Node_Str""),""String_Node_Str"");
    }
    putIfNotNull(kerberosPillarConf,cluster.getUserName(),""String_Node_Str"");
    putIfNotNull(kerberosPillarConf,cluster.getPassword(),""String_Node_Str"");
    servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",kerberosPillarConf)));
  }
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",stack.cloudPlatform())));
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",stack.getCluster().getName()))));
  saveGatewayPillar(primaryGatewayConfig,cluster,servicePillar);
  AmbariRepo ambariRepo=clusterComponentConfigProvider.getAmbariRepo(cluster.getId());
  if (ambariRepo != null) {
    servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",ambariRepo))));
  }
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",clusterComponentConfigProvider.getHDPRepo(cluster.getId()).isEnableGplRepo())))));
  decoratePillarWithAmbariDatabase(cluster,servicePillar);
  saveLdapPillar(cluster.getLdapConfig(),servicePillar);
  saveDockerPillar(cluster.getExecutorType(),servicePillar);
  saveHDPPillar(cluster.getId(),servicePillar);
  Map<String,Object> credentials=new HashMap<>();
  credentials.put(""String_Node_Str"",ambariSecurityConfigProvider.getAmbariUserName(stack.getCluster()));
  credentials.put(""String_Node_Str"",ambariSecurityConfigProvider.getAmbariPassword(stack.getCluster()));
  credentials.put(""String_Node_Str"",ambariSecurityConfigProvider.getAmbariSecurityMasterKey(cluster));
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",credentials)));
  if (smartSenseCredentialConfigService.areCredentialsSpecified()) {
    Map<String,Object> smartSenseCredentials=smartSenseCredentialConfigService.getCredentials();
    servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",smartSenseCredentials));
  }
  postgresConfigService.decorateServicePillarWithPostgresIfNeeded(servicePillar,stack,cluster);
  proxyConfigProvider.decoratePillarWithProxyDataIfNeeded(servicePillar,cluster);
  decoratePillarWithJdbcConnectors(cluster,servicePillar);
  return new SaltConfig(servicePillar,createGrainProperties(gatewayConfigs));
}","private SaltConfig createSaltConfig(Stack stack,Cluster cluster,GatewayConfig primaryGatewayConfig,Iterable<GatewayConfig> gatewayConfigs) throws IOException, CloudbreakOrchestratorException {
  Map<String,SaltPillarProperties> servicePillar=new HashMap<>();
  saveDatalakeNameservers(stack,servicePillar);
  saveSharedRangerService(stack,servicePillar);
  if (cluster.isSecure() && kerberosDetailService.isAmbariManagedKerberosPackages(cluster.getKerberosConfig())) {
    Map<String,String> kerberosPillarConf=new HashMap<>();
    KerberosConfig kerberosConfig=cluster.getKerberosConfig();
    putIfNotNull(kerberosPillarConf,kerberosConfig.getMasterKey(),""String_Node_Str"");
    putIfNotNull(kerberosPillarConf,kerberosConfig.getAdmin(),""String_Node_Str"");
    putIfNotNull(kerberosPillarConf,kerberosConfig.getPassword(),""String_Node_Str"");
    if (StringUtils.isEmpty(kerberosConfig.getDescriptor())) {
      putIfNotNull(kerberosPillarConf,kerberosConfig.getUrl(),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,kerberosDetailService.resolveHostForKdcAdmin(kerberosConfig,kerberosConfig.getUrl()),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,kerberosConfig.getRealm(),""String_Node_Str"");
    }
 else {
      Map<String,Object> properties=kerberosDetailService.getKerberosEnvProperties(kerberosConfig);
      putIfNotNull(kerberosPillarConf,properties.get(""String_Node_Str""),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,properties.get(""String_Node_Str""),""String_Node_Str"");
      putIfNotNull(kerberosPillarConf,properties.get(""String_Node_Str""),""String_Node_Str"");
    }
    putIfNotNull(kerberosPillarConf,cluster.getUserName(),""String_Node_Str"");
    putIfNotNull(kerberosPillarConf,cluster.getPassword(),""String_Node_Str"");
    servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",kerberosPillarConf)));
  }
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",stack.cloudPlatform())));
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",stack.getCluster().getName()))));
  saveGatewayPillar(primaryGatewayConfig,cluster,servicePillar);
  AmbariRepo ambariRepo=clusterComponentConfigProvider.getAmbariRepo(cluster.getId());
  if (ambariRepo != null) {
    servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",ambariRepo))));
  }
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",singletonMap(""String_Node_Str"",clusterComponentConfigProvider.getHDPRepo(cluster.getId()).isEnableGplRepo())))));
  decoratePillarWithAmbariDatabase(cluster,servicePillar);
  saveLdapPillar(cluster.getLdapConfig(),servicePillar);
  saveDockerPillar(cluster.getExecutorType(),servicePillar);
  saveHDPPillar(cluster.getId(),servicePillar);
  Map<String,Object> credentials=new HashMap<>();
  credentials.put(""String_Node_Str"",ambariSecurityConfigProvider.getAmbariUserName(stack.getCluster()));
  credentials.put(""String_Node_Str"",ambariSecurityConfigProvider.getAmbariPassword(stack.getCluster()));
  credentials.put(""String_Node_Str"",ambariSecurityConfigProvider.getAmbariSecurityMasterKey(cluster));
  servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",singletonMap(""String_Node_Str"",credentials)));
  if (smartSenseCredentialConfigService.areCredentialsSpecified()) {
    Map<String,Object> smartSenseCredentials=smartSenseCredentialConfigService.getCredentials();
    servicePillar.put(""String_Node_Str"",new SaltPillarProperties(""String_Node_Str"",smartSenseCredentials));
  }
  postgresConfigService.decorateServicePillarWithPostgresIfNeeded(servicePillar,stack,cluster);
  proxyConfigProvider.decoratePillarWithProxyDataIfNeeded(servicePillar,cluster);
  decoratePillarWithJdbcConnectors(cluster,servicePillar);
  return new SaltConfig(servicePillar,createGrainProperties(gatewayConfigs));
}",0.9907497565725414
63893,"public RdsView(RDSConfig rdsConfig){
  connectionURL=rdsConfig.getConnectionURL();
  connectionUserName=rdsConfig.getConnectionUserName();
  connectionPassword=rdsConfig.getConnectionPassword();
  String[] split=connectionURL.split(""String_Node_Str"");
  String withoutJDBCPrefix=split[split.length - 1];
  String hostWithPort=withoutJDBCPrefix.split(""String_Node_Str"")[0];
  int portDelimiterIndex=hostWithPort.indexOf(':');
  if (portDelimiterIndex > 0) {
    host=hostWithPort.substring(0,portDelimiterIndex);
    port=hostWithPort.substring(portDelimiterIndex + 1);
  }
 else {
    host=hostWithPort;
    port=""String_Node_Str"";
  }
  databaseName=getDatabaseName(connectionURL);
  hostWithPortWithJdbc=connectionURL.replace(""String_Node_Str"" + databaseName,""String_Node_Str"");
  this.hostWithPort=createConnectionHost(port);
  connectionDriver=rdsConfig.getConnectionDriver();
  subprotocol=getSubprotocol(connectionURL);
  if (rdsConfig.getDatabaseEngine() != null) {
    lowerCaseDatabaseEngine=rdsConfig.getDatabaseEngine().toLowerCase();
    DatabaseVendor databaseVendor=DatabaseVendor.valueOf(rdsConfig.getDatabaseEngine());
    fancyName=databaseVendor.fancyName();
    ambariVendor=databaseVendor.ambariVendor();
    databaseType=databaseVendor.databaseType();
    upperCaseDatabaseEngine=rdsConfig.getDatabaseEngine().toUpperCase();
  }
}","public RdsView(RDSConfig rdsConfig){
  connectionURL=rdsConfig.getConnectionURL();
  connectionUserName=rdsConfig.getConnectionUserName();
  userName=connectionUserName;
  connectionPassword=rdsConfig.getConnectionPassword();
  password=connectionPassword;
  String[] split=connectionURL.split(""String_Node_Str"");
  String withoutJDBCPrefix=split[split.length - 1];
  String hostWithPort=withoutJDBCPrefix.split(""String_Node_Str"")[0];
  int portDelimiterIndex=hostWithPort.indexOf(':');
  if (portDelimiterIndex > 0) {
    host=hostWithPort.substring(0,portDelimiterIndex);
    port=hostWithPort.substring(portDelimiterIndex + 1);
  }
 else {
    host=hostWithPort;
    port=""String_Node_Str"";
  }
  databaseName=getDatabaseName(connectionURL);
  name=databaseName;
  hostWithPortWithJdbc=connectionURL.replace(""String_Node_Str"" + databaseName,""String_Node_Str"");
  this.hostWithPort=createConnectionHost(port);
  connectionDriver=rdsConfig.getConnectionDriver();
  subprotocol=getSubprotocol(connectionURL);
  if (rdsConfig.getDatabaseEngine() != null) {
    lowerCaseDatabaseEngine=rdsConfig.getDatabaseEngine().toLowerCase();
    DatabaseVendor databaseVendor=DatabaseVendor.valueOf(rdsConfig.getDatabaseEngine());
    fancyName=databaseVendor.fancyName();
    ambariVendor=databaseVendor.ambariVendor();
    vendor=ambariVendor;
    databaseType=databaseVendor.databaseType();
    upperCaseDatabaseEngine=rdsConfig.getDatabaseEngine().toUpperCase();
  }
}",0.9615658362989324
63894,"@Override public Boolean call() throws Exception {
  count++;
  if (count != retryOk) {
    throw new CloudbreakException(""String_Node_Str"");
  }
 else {
    return true;
  }
}","@Override public Boolean call() throws Exception {
  count++;
  if (count != retryOk) {
    throw new CloudbreakException(EXCEPTION_MESSAGE);
  }
 else {
    return true;
  }
}",0.9147727272727272
63895,"private ImmutablePair<Boolean,Exception> doCall() throws CloudbreakOrchestratorCancelledException, InterruptedException {
  Boolean success=null;
  int retryCount=1;
  Exception actualException=null;
  String type=orchestratorBootstrap.getClass().getSimpleName().replace(""String_Node_Str"",""String_Node_Str"");
  long initialStartTime=System.currentTimeMillis();
  while (success == null && retryCount <= maxRetryCount) {
    if (isExitNeeded()) {
      LOGGER.error(exitCriteria.exitMessage());
      throw new CloudbreakOrchestratorCancelledException(exitCriteria.exitMessage());
    }
    long startTime=System.currentTimeMillis();
    try {
      LOGGER.info(""String_Node_Str"",type,orchestratorBootstrap);
      orchestratorBootstrap.call();
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=true;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
 catch (    CloudbreakOrchestratorTerminateException te) {
      actualException=te;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=false;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
catch (    Exception ex) {
      actualException=ex;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"",type,retryCount,maxRetryCount,elapsedTime,totalElapsedTime,actualException.getMessage(),orchestratorBootstrap);
      retryCount++;
      if (retryCount <= maxRetryCount) {
        Thread.sleep(sleepTime);
      }
    }
  }
  return new ImmutablePair<>(success,actualException);
}","private ImmutablePair<Boolean,Exception> doCall() throws CloudbreakOrchestratorCancelledException, InterruptedException {
  Boolean success=null;
  int retryCount=1;
  Exception actualException=null;
  String type=orchestratorBootstrap.getClass().getSimpleName().replace(""String_Node_Str"",""String_Node_Str"");
  long initialStartTime=System.currentTimeMillis();
  while (success == null && retryCount <= maxRetryCount) {
    if (isExitNeeded()) {
      LOGGER.error(exitCriteria.exitMessage());
      throw new CloudbreakOrchestratorCancelledException(exitCriteria.exitMessage());
    }
    long startTime=System.currentTimeMillis();
    try {
      LOGGER.info(""String_Node_Str"",type,orchestratorBootstrap);
      orchestratorBootstrap.call();
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=true;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
 catch (    CloudbreakOrchestratorTerminateException te) {
      actualException=te;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=false;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
catch (    Exception ex) {
      actualException=ex;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"",type,retryCount,maxRetryCount,elapsedTime,totalElapsedTime,actualException.getMessage(),orchestratorBootstrap);
      retryCount++;
      if (retryCount <= maxRetryCount) {
        Thread.sleep(sleepTime);
      }
 else {
        success=Boolean.FALSE;
      }
    }
  }
  return new ImmutablePair<>(success,actualException);
}",0.9878647043635423
63896,"@Override public Boolean call() throws Exception {
  count++;
  if (count != retryOk) {
    throw new CloudbreakException(""String_Node_Str"");
  }
 else {
    return true;
  }
}","@Override public Boolean call() throws Exception {
  count++;
  if (count != retryOk) {
    throw new CloudbreakException(EXCEPTION_MESSAGE);
  }
 else {
    return true;
  }
}",0.9147727272727272
63897,"private ImmutablePair<Boolean,Exception> doCall() throws CloudbreakOrchestratorCancelledException, InterruptedException {
  Boolean success=null;
  int retryCount=1;
  Exception actualException=null;
  String type=orchestratorBootstrap.getClass().getSimpleName().replace(""String_Node_Str"",""String_Node_Str"");
  long initialStartTime=System.currentTimeMillis();
  while (success == null && retryCount <= maxRetryCount) {
    if (isExitNeeded()) {
      LOGGER.error(exitCriteria.exitMessage());
      throw new CloudbreakOrchestratorCancelledException(exitCriteria.exitMessage());
    }
    long startTime=System.currentTimeMillis();
    try {
      LOGGER.info(""String_Node_Str"",type,orchestratorBootstrap);
      orchestratorBootstrap.call();
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=true;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
 catch (    CloudbreakOrchestratorTerminateException te) {
      actualException=te;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=false;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
catch (    Exception ex) {
      actualException=ex;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"",type,retryCount,maxRetryCount,elapsedTime,totalElapsedTime,actualException.getMessage(),orchestratorBootstrap);
      retryCount++;
      if (retryCount <= maxRetryCount) {
        Thread.sleep(sleepTime);
      }
    }
  }
  return new ImmutablePair<>(success,actualException);
}","private ImmutablePair<Boolean,Exception> doCall() throws CloudbreakOrchestratorCancelledException, InterruptedException {
  Boolean success=null;
  int retryCount=1;
  Exception actualException=null;
  String type=orchestratorBootstrap.getClass().getSimpleName().replace(""String_Node_Str"",""String_Node_Str"");
  long initialStartTime=System.currentTimeMillis();
  while (success == null && retryCount <= maxRetryCount) {
    if (isExitNeeded()) {
      LOGGER.error(exitCriteria.exitMessage());
      throw new CloudbreakOrchestratorCancelledException(exitCriteria.exitMessage());
    }
    long startTime=System.currentTimeMillis();
    try {
      LOGGER.info(""String_Node_Str"",type,orchestratorBootstrap);
      orchestratorBootstrap.call();
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=true;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
 catch (    CloudbreakOrchestratorTerminateException te) {
      actualException=te;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      success=false;
      LOGGER.info(""String_Node_Str"" + ""String_Node_Str"",type,elapsedTime,totalElapsedTime,orchestratorBootstrap);
    }
catch (    Exception ex) {
      actualException=ex;
      long elapsedTime=System.currentTimeMillis() - startTime;
      long totalElapsedTime=System.currentTimeMillis() - initialStartTime;
      LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"",type,retryCount,maxRetryCount,elapsedTime,totalElapsedTime,actualException.getMessage(),orchestratorBootstrap);
      retryCount++;
      if (retryCount <= maxRetryCount) {
        Thread.sleep(sleepTime);
      }
 else {
        success=Boolean.FALSE;
      }
    }
  }
  return new ImmutablePair<>(success,actualException);
}",0.9878647043635423
63898,"private void validateImageOptIn(AwsCredentialView credentialView,String region,String imageName){
  try {
    AmazonEC2Client amazonEC2Client=awsClient.createAccess(credentialView,region);
    RunInstancesRequest request=new RunInstancesRequest().withMinCount(1).withMaxCount(1).withImageId(imageName).withInstanceType(InstanceType.M3Xlarge);
    amazonEC2Client.dryRun(request);
    LOGGER.info(""String_Node_Str"",imageName);
  }
 catch (  AmazonServiceException e) {
    String errorMessage=e.getErrorMessage();
    if (e.getErrorCode().equals(""String_Node_Str"")) {
      int marketplaceLinkIndex=errorMessage.indexOf(MARKETPLACE_HTTP_LINK);
      if (marketplaceLinkIndex != -1) {
        errorMessage=IMAGE_OPT_IN_REQUIRED_MSG + ""String_Node_Str"" + LINK_TO_MARKETPLACE_MSG+ errorMessage.substring(marketplaceLinkIndex);
      }
 else {
        errorMessage=IMAGE_OPT_IN_REQUIRED_MSG;
      }
      throw new CloudConnectorException(errorMessage,e);
    }
 else {
      LOGGER.error(String.format(""String_Node_Str"",imageName),e);
    }
  }
}","private void validateImageOptIn(AwsCredentialView credentialView,String region,String imageName){
  try {
    AmazonEC2Client amazonEC2Client=awsClient.createAccess(credentialView,region);
    RunInstancesRequest request=new RunInstancesRequest().withMinCount(1).withMaxCount(1).withImageId(imageName).withInstanceType(InstanceType.M3Xlarge);
    amazonEC2Client.dryRun(request);
    LOGGER.info(""String_Node_Str"",imageName);
  }
 catch (  AmazonClientException ex) {
    if (ex.getCause() != null && (ex.getCause() instanceof AmazonEC2Exception)) {
      AmazonEC2Exception e=(AmazonEC2Exception)ex.getCause();
      String errorMessage=e.getErrorMessage();
      if (e.getErrorCode().equals(""String_Node_Str"")) {
        int marketplaceLinkIndex=errorMessage.indexOf(MARKETPLACE_HTTP_LINK);
        if (marketplaceLinkIndex != -1) {
          errorMessage=IMAGE_OPT_IN_REQUIRED_MSG + ""String_Node_Str"" + LINK_TO_MARKETPLACE_MSG+ errorMessage.substring(marketplaceLinkIndex);
        }
 else {
          errorMessage=IMAGE_OPT_IN_REQUIRED_MSG;
        }
        throw new CloudConnectorException(errorMessage,e);
      }
    }
    LOGGER.error(String.format(""String_Node_Str"",imageName),ex);
  }
catch (  Exception e) {
    LOGGER.error(String.format(""String_Node_Str"",imageName),e);
  }
}",0.8486926703814831
63899,"@Override public List<CloudVmInstanceStatus> check(AuthenticatedContext ac,List<CloudInstance> vms){
  List<CloudVmInstanceStatus> statuses=new ArrayList<>();
  String stackName=armTemplateUtils.getStackName(ac.getCloudContext());
  for (  CloudInstance vm : vms) {
    try {
      AzureClient azureClient=ac.getParameter(AzureClient.class);
      PowerState virtualMachinePowerState=azureClient.getVirtualMachinePowerState(stackName,vm.getInstanceId());
      statuses.add(new CloudVmInstanceStatus(vm,AzureInstanceStatus.get(virtualMachinePowerState)));
    }
 catch (    CloudException e) {
      if (e.getBody() != null && ""String_Node_Str"".equals(e.getBody().getCode())) {
        statuses.add(new CloudVmInstanceStatus(vm,InstanceStatus.TERMINATED));
      }
 else {
        statuses.add(new CloudVmInstanceStatus(vm,InstanceStatus.UNKNOWN));
      }
    }
catch (    Exception e) {
      statuses.add(new CloudVmInstanceStatus(vm,InstanceStatus.UNKNOWN));
    }
  }
  return statuses;
}","@Override public List<CloudVmInstanceStatus> check(AuthenticatedContext ac,List<CloudInstance> vms){
  List<CloudVmInstanceStatus> statuses=new ArrayList<>();
  String stackName=armTemplateUtils.getStackName(ac.getCloudContext());
  for (  CloudInstance vm : vms) {
    try {
      AzureClient azureClient=ac.getParameter(AzureClient.class);
      PowerState virtualMachinePowerState=azureClient.getVirtualMachinePowerState(stackName,vm.getInstanceId());
      statuses.add(new CloudVmInstanceStatus(vm,AzureInstanceStatus.get(virtualMachinePowerState)));
    }
 catch (    CloudException e) {
      if (e.body() != null && ""String_Node_Str"".equals(e.body().code())) {
        statuses.add(new CloudVmInstanceStatus(vm,InstanceStatus.TERMINATED));
      }
 else {
        statuses.add(new CloudVmInstanceStatus(vm,InstanceStatus.UNKNOWN));
      }
    }
catch (    Exception e) {
      statuses.add(new CloudVmInstanceStatus(vm,InstanceStatus.UNKNOWN));
    }
  }
  return statuses;
}",0.992412746585736
63900,"@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String createRecipe(@CliOption(key=""String_Node_Str"",mandatory=true,help=""String_Node_Str"") String name,@CliOption(key=""String_Node_Str"",mandatory=true,help=""String_Node_Str"") RecipeType recipeType,@CliOption(key=""String_Node_Str"",help=""String_Node_Str"") String description,@CliOption(key=""String_Node_Str"",help=""String_Node_Str"") File scriptFile,@CliOption(key=""String_Node_Str"",help=""String_Node_Str"") String url,@CliOption(key=""String_Node_Str"",unspecifiedDefaultValue=""String_Node_Str"",specifiedDefaultValue=""String_Node_Str"",help=""String_Node_Str"") Boolean publicInAccount){
  if (scriptFile != null && !scriptFile.exists()) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(""String_Node_Str"");
  }
 else   if (scriptFile != null && url != null) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(""String_Node_Str"");
  }
 else   if (scriptFile == null && url == null) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(""String_Node_Str"");
  }
  try {
    RecipeRequest recipeRequest=new RecipeRequest();
    recipeRequest.setRecipeType(recipeType);
    recipeRequest.setName(name);
    recipeRequest.setDescription(description);
    recipeRequest.setUri(url);
    if (scriptFile != null) {
      String script=IOUtils.toString(new FileInputStream(scriptFile));
      String encodedContent=Base64.encodeBase64String(script.getBytes());
      recipeRequest.setContent(encodedContent);
    }
    Long id;
    if (publicInAccount) {
      id=shellContext.cloudbreakClient().recipeEndpoint().postPublic(recipeRequest).getId();
    }
 else {
      id=shellContext.cloudbreakClient().recipeEndpoint().postPrivate(recipeRequest).getId();
    }
    return String.format(CREATE_SUCCESS_MESSAGE,id,recipeRequest.getName());
  }
 catch (  Exception ex) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
  }
}","@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String createRecipe(@CliOption(key=""String_Node_Str"",mandatory=true,help=""String_Node_Str"") String name,@CliOption(key=""String_Node_Str"",mandatory=true,help=""String_Node_Str"") RecipeType recipeType,@CliOption(key=""String_Node_Str"",help=""String_Node_Str"") String description,@CliOption(key=""String_Node_Str"",help=""String_Node_Str"") File scriptFile,@CliOption(key=""String_Node_Str"",help=""String_Node_Str"") String scriptUrl,@CliOption(key=""String_Node_Str"",unspecifiedDefaultValue=""String_Node_Str"",specifiedDefaultValue=""String_Node_Str"",help=""String_Node_Str"") Boolean publicInAccount){
  if (scriptFile != null && !scriptFile.exists()) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(""String_Node_Str"");
  }
 else   if (scriptFile != null && scriptUrl != null) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(""String_Node_Str"");
  }
 else   if (scriptFile == null && scriptUrl == null) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(""String_Node_Str"");
  }
  try {
    RecipeRequest recipeRequest=new RecipeRequest();
    recipeRequest.setRecipeType(recipeType);
    recipeRequest.setName(name);
    recipeRequest.setDescription(description);
    recipeRequest.setUri(scriptUrl);
    if (scriptFile != null) {
      String script=IOUtils.toString(new FileInputStream(scriptFile));
      String encodedContent=Base64.encodeBase64String(script.getBytes());
      recipeRequest.setContent(encodedContent);
    }
    Long id;
    if (publicInAccount) {
      id=shellContext.cloudbreakClient().recipeEndpoint().postPublic(recipeRequest).getId();
    }
 else {
      id=shellContext.cloudbreakClient().recipeEndpoint().postPrivate(recipeRequest).getId();
    }
    return String.format(CREATE_SUCCESS_MESSAGE,id,recipeRequest.getName());
  }
 catch (  Exception ex) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
  }
}",0.991947659788626
63901,"public void triggerTermination(Long stackId,Boolean deleteDependencies){
  Stack stack=stackService.get(stackId);
  if (BYOS.equals(stack.cloudPlatform())) {
    String selector=FlowChainTriggers.BYOS_CLUSTER_TERMINATION_TRIGGER_EVENT;
    notify(selector,new TerminationEvent(selector,stackId,null,deleteDependencies));
  }
 else {
    String selector=StackTerminationEvent.TERMINATION_EVENT.event();
    notify(selector,new TerminationEvent(selector,stackId,deleteDependencies));
  }
  cancelRunningFlows(stackId);
}","public void triggerTermination(Long stackId,Boolean deleteDependencies){
  Stack stack=stackService.getById(stackId);
  if (BYOS.equals(stack.cloudPlatform())) {
    String selector=FlowChainTriggers.BYOS_CLUSTER_TERMINATION_TRIGGER_EVENT;
    notify(selector,new TerminationEvent(selector,stackId,null,deleteDependencies));
  }
 else {
    String selector=StackTerminationEvent.TERMINATION_EVENT.event();
    notify(selector,new TerminationEvent(selector,stackId,deleteDependencies));
  }
  cancelRunningFlows(stackId);
}",0.9961538461538462
63902,"@Before public void setUp(){
  reset(reactor);
  reset(eventFactory);
  when(reactor.notify((Object)anyObject(),any(Event.class))).thenReturn(new EventBus(new ThreadPoolExecutorDispatcher(1,1)));
  Acceptable acceptable=new Acceptable(){
    @Override public Promise<Boolean> accepted(){
      Promise<Boolean> a=new Promise<>();
      a.accept(true);
      return a;
    }
    @Override public Long getStackId(){
      return stackId;
    }
  }
;
  when(stackService.get(anyLong())).thenReturn(TestUtil.stack());
  when(eventFactory.createEvent(anyObject())).thenReturn(new Event<>(acceptable));
}","@Before public void setUp(){
  reset(reactor);
  reset(eventFactory);
  when(reactor.notify((Object)anyObject(),any(Event.class))).thenReturn(new EventBus(new ThreadPoolExecutorDispatcher(1,1)));
  Acceptable acceptable=new Acceptable(){
    @Override public Promise<Boolean> accepted(){
      Promise<Boolean> a=new Promise<>();
      a.accept(true);
      return a;
    }
    @Override public Long getStackId(){
      return stackId;
    }
  }
;
  when(stackService.get(anyLong())).thenReturn(TestUtil.stack());
  when(stackService.getById(anyLong())).thenReturn(TestUtil.stack());
  when(eventFactory.createEvent(anyObject())).thenReturn(new Event<>(acceptable));
}",0.9447077409162716
63903,"@Override public Template decorate(final Template subject,Object... data){
  Supplier<VolumeParameterConfig> config=Suppliers.memoize(() -> {
    Platform platform=Platform.platform(subject.cloudPlatform());
    VmType vmType=virtualMachines.get().get(platform).stream().filter(curr -> curr.value().equals(subject.getInstanceType())).findFirst().get();
    Map<String,VolumeParameterType> map=diskMappings.get().get(platform);
    VolumeParameterType volumeParameterType=map.get(subject.getVolumeType());
    return vmType.getVolumeParameterbyVolumeParameterType(volumeParameterType);
  }
);
  if (subject.getVolumeCount() == null) {
    subject.setVolumeCount(config.get().maximumNumber());
  }
  if (subject.getVolumeSize() == null) {
    subject.setVolumeSize(config.get().maximumSize());
  }
  return subject;
}","@Override public Template decorate(final Template subject,Object... data){
  Supplier<VolumeParameterConfig> config=Suppliers.memoize(() -> {
    try {
      Platform platform=Platform.platform(subject.cloudPlatform());
      VmType vmType=virtualMachines.get().get(platform).stream().filter(curr -> curr.value().equals(subject.getInstanceType())).findFirst().get();
      Map<String,VolumeParameterType> map=diskMappings.get().get(platform);
      VolumeParameterType volumeParameterType=map.get(subject.getVolumeType());
      return vmType.getVolumeParameterbyVolumeParameterType(volumeParameterType);
    }
 catch (    NoSuchElementException e) {
      LOGGER.info(""String_Node_Str"");
      return VolumeParameterConfig.EMPTY;
    }
  }
);
  if (config.get().volumeParameterType() != null) {
    if (subject.getVolumeCount() == null) {
      subject.setVolumeCount(config.get().maximumNumber());
    }
    if (subject.getVolumeSize() == null) {
      subject.setVolumeSize(config.get().maximumSize());
    }
  }
  return subject;
}",0.8810810810810811
63904,"private void checkJobFinishedWithSuccess(){
  String jobId=saltJobRunner.getJid().getJobId();
  try {
    Multimap<String,String> missingNodesWithReason=SaltStates.jidInfo(saltConnector,jobId,new Compound(saltJobRunner.getTarget()),saltJobRunner.stateType());
    if (!missingNodesWithReason.isEmpty()) {
      LOGGER.info(""String_Node_Str"",jobId,String.join(""String_Node_Str"",missingNodesWithReason.keySet()));
      JobState jobState=JobState.FAILED;
      jobState.setNodesWithError(missingNodesWithReason);
      saltJobRunner.setJobState(JobState.FAILED);
      Set<String> newTargets=missingNodesWithReason.keySet().stream().map(node -> SaltStates.resolveHostNameToMinionHostName(saltConnector,node)).collect(Collectors.toSet());
      saltJobRunner.setTarget(newTargets);
    }
 else {
      LOGGER.info(""String_Node_Str"",jobId);
      saltJobRunner.setJobState(JobState.FINISHED);
    }
  }
 catch (  RuntimeException e) {
    LOGGER.warn(""String_Node_Str"",jobId,e);
    saltJobRunner.setJobState(JobState.AMBIGUOUS);
  }
}","private void checkJobFinishedWithSuccess(){
  String jobId=saltJobRunner.getJid().getJobId();
  try {
    Multimap<String,String> missingNodesWithReason=SaltStates.jidInfo(saltConnector,jobId,new Compound(saltJobRunner.getTarget()),saltJobRunner.stateType());
    if (!missingNodesWithReason.isEmpty()) {
      LOGGER.info(""String_Node_Str"",jobId,String.join(""String_Node_Str"",missingNodesWithReason.keySet()));
      saltJobRunner.setJobState(JobState.FAILED);
      Set<String> newTargets=missingNodesWithReason.keySet().stream().map(node -> SaltStates.resolveHostNameToMinionHostName(saltConnector,node)).collect(Collectors.toSet());
      saltJobRunner.setNodesWithError(missingNodesWithReason);
      saltJobRunner.setTarget(newTargets);
    }
 else {
      LOGGER.info(""String_Node_Str"",jobId);
      saltJobRunner.setJobState(JobState.FINISHED);
    }
  }
 catch (  RuntimeException e) {
    LOGGER.warn(""String_Node_Str"",jobId,e);
    saltJobRunner.setJobState(JobState.AMBIGUOUS);
  }
}",0.7620927936821322
63905,"private String buildErrorMessage(){
  String jobId=saltJobRunner.getJid().getJobId();
  StringBuilder errorMessageBuilder=new StringBuilder();
  errorMessageBuilder.append(String.format(""String_Node_Str"",jobId,saltJobRunner.getTarget()));
  if (saltJobRunner.getJobState().getNodesWithError() != null) {
    for (    String host : saltJobRunner.getJobState().getNodesWithError().keySet()) {
      Collection<String> errorMessages=saltJobRunner.getJobState().getNodesWithError().get(host);
      errorMessageBuilder.append(""String_Node_Str"").append(""String_Node_Str"").append(host).append(""String_Node_Str"").append(String.join(""String_Node_Str"",errorMessages));
    }
  }
  return errorMessageBuilder.toString();
}","private String buildErrorMessage(){
  String jobId=saltJobRunner.getJid().getJobId();
  StringBuilder errorMessageBuilder=new StringBuilder();
  errorMessageBuilder.append(String.format(""String_Node_Str"",jobId,saltJobRunner.getTarget()));
  if (saltJobRunner.getNodesWithError() != null) {
    for (    String host : saltJobRunner.getNodesWithError().keySet()) {
      Collection<String> errorMessages=saltJobRunner.getNodesWithError().get(host);
      errorMessageBuilder.append(""String_Node_Str"").append(""String_Node_Str"").append(host).append(""String_Node_Str"").append(String.join(""String_Node_Str"",errorMessages));
    }
  }
  return errorMessageBuilder.toString();
}",0.9696092619392184
63906,"@Test public void callWithInProgressAndMissingNodes() throws Exception {
  String jobId=""String_Node_Str"";
  SaltConnector saltConnector=Mockito.mock(SaltConnector.class);
  SaltJobRunner saltJobRunner=Mockito.mock(BaseSaltJobRunner.class);
  when(saltJobRunner.getJid()).thenReturn(JobId.jobId(jobId));
  when(saltJobRunner.getJobState()).thenCallRealMethod();
  doCallRealMethod().when(saltJobRunner).setJobState(any());
  when(saltJobRunner.submit(any(SaltConnector.class))).thenReturn(jobId);
  saltJobRunner.setJobState(JobState.IN_PROGRESS);
  Set<String> targets=new HashSet<>();
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  when(saltJobRunner.getTarget()).thenReturn(targets);
  PowerMockito.mockStatic(SaltStates.class);
  PowerMockito.when(SaltStates.jobIsRunning(any(),any(),any())).thenReturn(false);
  Multimap<String,String> missingNodesWithReason=ArrayListMultimap.create();
  String missingMachine=""String_Node_Str"";
  String errorMessage=""String_Node_Str"";
  missingNodesWithReason.put(missingMachine,errorMessage);
  PowerMockito.when(SaltStates.jidInfo(any(),any(),any(),any())).thenReturn(missingNodesWithReason);
  SaltJobIdTracker saltJobIdTracker=new SaltJobIdTracker(saltConnector,saltJobRunner);
  try {
    saltJobIdTracker.call();
    fail(""String_Node_Str"");
  }
 catch (  CloudbreakOrchestratorFailedException e) {
    assertThat(e.getMessage(),both(containsString(missingMachine)).and(containsString(errorMessage)));
  }
  PowerMockito.verifyStatic();
  SaltStates.jobIsRunning(any(),eq(jobId),targetCaptor.capture());
  checkTargets(targets,targetCaptor.getAllValues());
}","@Test public void callWithInProgressAndMissingNodes() throws Exception {
  String jobId=""String_Node_Str"";
  SaltConnector saltConnector=Mockito.mock(SaltConnector.class);
  SaltJobRunner saltJobRunner=Mockito.mock(BaseSaltJobRunner.class);
  when(saltJobRunner.getJid()).thenReturn(JobId.jobId(jobId));
  when(saltJobRunner.getJobState()).thenCallRealMethod();
  doCallRealMethod().when(saltJobRunner).setJobState(any());
  when(saltJobRunner.submit(any(SaltConnector.class))).thenReturn(jobId);
  saltJobRunner.setJobState(JobState.IN_PROGRESS);
  Set<String> targets=new HashSet<>();
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  when(saltJobRunner.getTarget()).thenReturn(targets);
  PowerMockito.mockStatic(SaltStates.class);
  PowerMockito.when(SaltStates.jobIsRunning(any(),any(),any())).thenReturn(false);
  Multimap<String,String> missingNodesWithReason=ArrayListMultimap.create();
  String missingMachine=""String_Node_Str"";
  String errorMessage=""String_Node_Str"";
  missingNodesWithReason.put(missingMachine,errorMessage);
  when(saltJobRunner.getNodesWithError()).thenReturn(missingNodesWithReason);
  SaltJobIdTracker saltJobIdTracker=new SaltJobIdTracker(saltConnector,saltJobRunner);
  try {
    saltJobIdTracker.call();
    fail(""String_Node_Str"");
  }
 catch (  CloudbreakOrchestratorFailedException e) {
    assertThat(e.getMessage(),both(containsString(missingMachine)).and(containsString(errorMessage)));
  }
  PowerMockito.verifyStatic();
  SaltStates.jobIsRunning(any(),eq(jobId),targetCaptor.capture());
  checkTargets(targets,targetCaptor.getAllValues());
}",0.9712208421690396
63907,"private void checkJobFinishedWithSuccess(){
  String jobId=saltJobRunner.getJid().getJobId();
  try {
    Multimap<String,String> missingNodesWithReason=SaltStates.jidInfo(saltConnector,jobId,new Compound(saltJobRunner.getTarget()),saltJobRunner.stateType());
    if (!missingNodesWithReason.isEmpty()) {
      LOGGER.info(""String_Node_Str"",jobId,String.join(""String_Node_Str"",missingNodesWithReason.keySet()));
      JobState jobState=JobState.FAILED;
      jobState.setNodesWithError(missingNodesWithReason);
      saltJobRunner.setJobState(JobState.FAILED);
      saltJobRunner.setTarget(missingNodesWithReason.keySet());
    }
 else {
      LOGGER.info(""String_Node_Str"",jobId);
      saltJobRunner.setJobState(JobState.FINISHED);
    }
  }
 catch (  RuntimeException e) {
    LOGGER.warn(""String_Node_Str"",jobId,e);
    saltJobRunner.setJobState(JobState.AMBIGUOUS);
  }
}","private void checkJobFinishedWithSuccess(){
  String jobId=saltJobRunner.getJid().getJobId();
  try {
    Multimap<String,String> missingNodesWithReason=SaltStates.jidInfo(saltConnector,jobId,new Compound(saltJobRunner.getTarget()),saltJobRunner.stateType());
    if (!missingNodesWithReason.isEmpty()) {
      LOGGER.info(""String_Node_Str"",jobId,String.join(""String_Node_Str"",missingNodesWithReason.keySet()));
      saltJobRunner.setJobState(JobState.FAILED);
      saltJobRunner.setNodesWithError(missingNodesWithReason);
      saltJobRunner.setTarget(missingNodesWithReason.keySet());
    }
 else {
      LOGGER.info(""String_Node_Str"",jobId);
      saltJobRunner.setJobState(JobState.FINISHED);
    }
  }
 catch (  RuntimeException e) {
    LOGGER.warn(""String_Node_Str"",jobId,e);
    saltJobRunner.setJobState(JobState.AMBIGUOUS);
  }
}",0.9231664726426076
63908,"private String buildErrorMessage(){
  String jobId=saltJobRunner.getJid().getJobId();
  StringBuilder errorMessageBuilder=new StringBuilder();
  errorMessageBuilder.append(String.format(""String_Node_Str"",jobId,saltJobRunner.getTarget()));
  if (saltJobRunner.getJobState().getNodesWithError() != null) {
    for (    String host : saltJobRunner.getJobState().getNodesWithError().keySet()) {
      Collection<String> errorMessages=saltJobRunner.getJobState().getNodesWithError().get(host);
      errorMessageBuilder.append(""String_Node_Str"").append(""String_Node_Str"").append(host).append(""String_Node_Str"").append(String.join(""String_Node_Str"",errorMessages));
    }
  }
  return errorMessageBuilder.toString();
}","private String buildErrorMessage(){
  String jobId=saltJobRunner.getJid().getJobId();
  StringBuilder errorMessageBuilder=new StringBuilder();
  errorMessageBuilder.append(String.format(""String_Node_Str"",jobId,saltJobRunner.getTarget()));
  if (saltJobRunner.getNodesWithError() != null) {
    for (    String host : saltJobRunner.getNodesWithError().keySet()) {
      Collection<String> errorMessages=saltJobRunner.getNodesWithError().get(host);
      errorMessageBuilder.append(""String_Node_Str"").append(""String_Node_Str"").append(host).append(""String_Node_Str"").append(String.join(""String_Node_Str"",errorMessages));
    }
  }
  return errorMessageBuilder.toString();
}",0.9696092619392184
63909,"@Test public void callWithInProgressAndMissingNodes() throws Exception {
  String jobId=""String_Node_Str"";
  SaltConnector saltConnector=Mockito.mock(SaltConnector.class);
  SaltJobRunner saltJobRunner=Mockito.mock(BaseSaltJobRunner.class);
  when(saltJobRunner.getJid()).thenReturn(JobId.jobId(jobId));
  when(saltJobRunner.getJobState()).thenCallRealMethod();
  doCallRealMethod().when(saltJobRunner).setJobState(any());
  when(saltJobRunner.submit(any(SaltConnector.class))).thenReturn(jobId);
  saltJobRunner.setJobState(JobState.IN_PROGRESS);
  Set<String> targets=new HashSet<>();
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  when(saltJobRunner.getTarget()).thenReturn(targets);
  PowerMockito.mockStatic(SaltStates.class);
  PowerMockito.when(SaltStates.jobIsRunning(any(),any(),any())).thenReturn(false);
  Multimap<String,String> missingNodesWithReason=ArrayListMultimap.create();
  String missingMachine=""String_Node_Str"";
  String errorMessage=""String_Node_Str"";
  missingNodesWithReason.put(missingMachine,errorMessage);
  PowerMockito.when(SaltStates.jidInfo(any(),any(),any(),any())).thenReturn(missingNodesWithReason);
  SaltJobIdTracker saltJobIdTracker=new SaltJobIdTracker(saltConnector,saltJobRunner);
  try {
    saltJobIdTracker.call();
    fail(""String_Node_Str"");
  }
 catch (  CloudbreakOrchestratorFailedException e) {
    assertThat(e.getMessage(),both(containsString(missingMachine)).and(containsString(errorMessage)));
  }
  PowerMockito.verifyStatic();
  SaltStates.jobIsRunning(any(),eq(jobId),targetCaptor.capture());
  checkTargets(targets,targetCaptor.getAllValues());
}","@Test public void callWithInProgressAndMissingNodes() throws Exception {
  String jobId=""String_Node_Str"";
  SaltConnector saltConnector=Mockito.mock(SaltConnector.class);
  SaltJobRunner saltJobRunner=Mockito.mock(BaseSaltJobRunner.class);
  when(saltJobRunner.getJid()).thenReturn(JobId.jobId(jobId));
  when(saltJobRunner.getJobState()).thenCallRealMethod();
  doCallRealMethod().when(saltJobRunner).setJobState(any());
  when(saltJobRunner.submit(any(SaltConnector.class))).thenReturn(jobId);
  saltJobRunner.setJobState(JobState.IN_PROGRESS);
  Set<String> targets=new HashSet<>();
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  targets.add(""String_Node_Str"");
  when(saltJobRunner.getTarget()).thenReturn(targets);
  PowerMockito.mockStatic(SaltStates.class);
  PowerMockito.when(SaltStates.jobIsRunning(any(),any(),any())).thenReturn(false);
  Multimap<String,String> missingNodesWithReason=ArrayListMultimap.create();
  String missingMachine=""String_Node_Str"";
  String errorMessage=""String_Node_Str"";
  missingNodesWithReason.put(missingMachine,errorMessage);
  when(saltJobRunner.getNodesWithError()).thenReturn(missingNodesWithReason);
  SaltJobIdTracker saltJobIdTracker=new SaltJobIdTracker(saltConnector,saltJobRunner);
  try {
    saltJobIdTracker.call();
    fail(""String_Node_Str"");
  }
 catch (  CloudbreakOrchestratorFailedException e) {
    assertThat(e.getMessage(),both(containsString(missingMachine)).and(containsString(errorMessage)));
  }
  PowerMockito.verifyStatic();
  SaltStates.jobIsRunning(any(),eq(jobId),targetCaptor.capture());
  checkTargets(targets,targetCaptor.getAllValues());
}",0.9712208421690396
63910,"@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String sync(){
  try {
    UpdateStackJson updateStackJson=new UpdateStackJson();
    updateStackJson.setStatus(StatusRequest.SYNC);
    shellContext.cloudbreakClient().stackEndpoint().put(Long.valueOf(shellContext.getStackId()),updateStackJson);
    return ""String_Node_Str"";
  }
 catch (  Exception ex) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
  }
}","@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String sync(){
  try {
    UpdateStackJson updateStackJson=new UpdateStackJson();
    updateStackJson.setStatus(StatusRequest.SYNC);
    cloudbreakShellUtil.checkResponse(""String_Node_Str"",shellContext.cloudbreakClient().stackEndpoint().put(Long.valueOf(shellContext.getStackId()),updateStackJson));
    return ""String_Node_Str"";
  }
 catch (  Exception ex) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
  }
}",0.9453044375644994
63911,"@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String sync(){
  try {
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    updateClusterJson.setStatus(StatusRequest.SYNC);
    shellContext.cloudbreakClient().clusterEndpoint().put(Long.valueOf(shellContext.getStackId()),updateClusterJson);
    return ""String_Node_Str"";
  }
 catch (  Exception ex) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
  }
}","@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String sync(){
  try {
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    updateClusterJson.setStatus(StatusRequest.SYNC);
    cloudbreakShellUtil.checkResponse(""String_Node_Str"",shellContext.cloudbreakClient().clusterEndpoint().put(Long.valueOf(shellContext.getStackId()),updateClusterJson));
    return ""String_Node_Str"";
  }
 catch (  Exception ex) {
    throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
  }
}",0.94662638469285
63912,"@Override public BlueprintResponse convert(Blueprint entity){
  BlueprintResponse blueprintJson=new BlueprintResponse();
  blueprintJson.setId(String.valueOf(entity.getId()));
  blueprintJson.setBlueprintName(entity.getBlueprintName());
  blueprintJson.setName(entity.getName());
  blueprintJson.setPublicInAccount(entity.isPublicInAccount());
  blueprintJson.setDescription(entity.getDescription() == null ? ""String_Node_Str"" : entity.getDescription());
  blueprintJson.setHostGroupCount(entity.getHostGroupCount());
  blueprintJson.setStatus(entity.getStatus());
  blueprintJson.setInputs(convertNodes(entity.getInputs()));
  try {
    blueprintJson.setAmbariBlueprint(jsonHelper.createJsonFromString(entity.getBlueprintText()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    blueprintJson.setAmbariBlueprint(new TextNode(e.getMessage()));
  }
  return blueprintJson;
}","@Override public BlueprintResponse convert(Blueprint entity){
  BlueprintResponse blueprintJson=new BlueprintResponse();
  blueprintJson.setId(String.valueOf(entity.getId()));
  blueprintJson.setBlueprintName(entity.getBlueprintName());
  blueprintJson.setName(entity.getName());
  blueprintJson.setPublicInAccount(entity.isPublicInAccount());
  blueprintJson.setDescription(entity.getDescription() == null ? ""String_Node_Str"" : entity.getDescription());
  blueprintJson.setHostGroupCount(entity.getHostGroupCount());
  blueprintJson.setStatus(entity.getStatus());
  try {
    blueprintJson.setInputs(convertInputParameters(entity.getInputParameters()));
  }
 catch (  IOException e) {
    LOGGER.error(String.format(""String_Node_Str"",entity.getName(),entity.getId()),e);
  }
  try {
    blueprintJson.setAmbariBlueprint(jsonHelper.createJsonFromString(entity.getBlueprintText()));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    blueprintJson.setAmbariBlueprint(new TextNode(e.getMessage()));
  }
  return blueprintJson;
}",0.7962962962962963
63913,"@PostConstruct public void updateDefaultBlueprints(){
  Iterable<Blueprint> allBlueprint=blueprintRepository.findAll();
  for (  String blueprintStrings : blueprintArray) {
    String[] split=blueprintStrings.split(""String_Node_Str"");
    if (!blueprintStrings.isEmpty() && (split.length == 2 || split.length == 1) && !split[0].isEmpty()) {
      try {
        String bpDefaultText=blueprintUtils.readDefaultBlueprintFromFile(split);
        LOGGER.info(""String_Node_Str"",split[0]);
        for (        Blueprint blueprint : allBlueprint) {
          if (blueprint.getName().equals(split[0]) && blueprint.getStatus().equals(ResourceStatus.DEFAULT)) {
            LOGGER.info(""String_Node_Str"",blueprint.getId(),blueprint.getName());
            JsonNode jsonNode=blueprintUtils.convertStringToJsonNode(bpDefaultText);
            JsonNode blueprintText=jsonNode.get(""String_Node_Str"");
            JsonNode inputs=jsonNode.get(""String_Node_Str"");
            blueprint.setInputs(prepareInputs(inputs));
            blueprint.setBlueprintText(blueprintText.toString());
            blueprint.setHostGroupCount(blueprintUtils.countHostGroups(blueprintText));
            blueprint.setBlueprintName(blueprintUtils.getBlueprintName(blueprintText));
            blueprintRepository.save(blueprint);
          }
        }
      }
 catch (      IOException e) {
        LOGGER.info(""String_Node_Str"",split[0],e);
      }
    }
  }
}","@PostConstruct public void updateDefaultBlueprints(){
  Iterable<Blueprint> allBlueprint=blueprintRepository.findAll();
  for (  String blueprintStrings : blueprintArray) {
    String[] split=blueprintStrings.split(""String_Node_Str"");
    if (!blueprintStrings.isEmpty() && (split.length == 2 || split.length == 1) && !split[0].isEmpty()) {
      try {
        String bpDefaultText=blueprintUtils.readDefaultBlueprintFromFile(split);
        LOGGER.info(""String_Node_Str"",split[0]);
        for (        Blueprint blueprint : allBlueprint) {
          if (blueprint.getName().equals(split[0]) && blueprint.getStatus().equals(ResourceStatus.DEFAULT)) {
            LOGGER.info(""String_Node_Str"",blueprint.getId(),blueprint.getName());
            JsonNode jsonNode=blueprintUtils.convertStringToJsonNode(bpDefaultText);
            JsonNode blueprintText=jsonNode.get(""String_Node_Str"");
            JsonNode inputs=jsonNode.get(""String_Node_Str"");
            BlueprintInputParameters inputParameters=new BlueprintInputParameters(prepareInputs(inputs));
            blueprint.setInputParameters(new Json(inputParameters));
            blueprint.setBlueprintText(blueprintText.toString());
            blueprint.setHostGroupCount(blueprintUtils.countHostGroups(blueprintText));
            blueprint.setBlueprintName(blueprintUtils.getBlueprintName(blueprintText));
            blueprintRepository.save(blueprint);
          }
        }
      }
 catch (      IOException e) {
        LOGGER.info(""String_Node_Str"",split[0],e);
      }
    }
  }
}",0.9410972736452372
63914,"private Set<BlueprintParameter> prepareInputs(JsonNode inputs) throws com.fasterxml.jackson.core.JsonProcessingException {
  Set<BlueprintParameter> blueprintParameters=new HashSet<>();
  if (inputs.isArray()) {
    for (    final JsonNode objNode : inputs) {
      BlueprintParameter blueprintParameter=JsonUtil.treeToValue(objNode,BlueprintParameter.class);
      blueprintParameters.add(blueprintParameter);
    }
  }
  return blueprintParameters;
}","private List<BlueprintParameter> prepareInputs(JsonNode inputs) throws com.fasterxml.jackson.core.JsonProcessingException {
  Set<BlueprintParameter> blueprintParameters=new HashSet<>();
  if (inputs.isArray()) {
    for (    final JsonNode objNode : inputs) {
      BlueprintParameter blueprintParameter=JsonUtil.treeToValue(objNode,BlueprintParameter.class);
      blueprintParameters.add(blueprintParameter);
    }
  }
  return blueprintParameters.stream().collect(Collectors.toList());
}",0.9544008483563096
63915,"public Set<Blueprint> loadBlueprints(CbUser user){
  Set<Blueprint> blueprints=new HashSet<>();
  Set<String> blueprintNames=getDefaultBlueprintNames(user);
  for (  String blueprintStrings : blueprintArray) {
    String[] split=blueprintStrings.split(""String_Node_Str"");
    if (!blueprintStrings.isEmpty() && (split.length == 2 || split.length == 1) && !blueprintNames.contains(blueprintStrings)&& !split[0].isEmpty()) {
      LOGGER.info(""String_Node_Str"",blueprintStrings,user.getUsername());
      try {
        BlueprintRequest blueprintJson=new BlueprintRequest();
        blueprintJson.setName(split[0]);
        blueprintJson.setDescription(split[0]);
        JsonNode jsonNode=blueprintUtils.convertStringToJsonNode(blueprintUtils.readDefaultBlueprintFromFile(split));
        blueprintJson.setAmbariBlueprint(blueprintUtils.convertStringToJsonNode(jsonNode.get(""String_Node_Str"").toString()));
        Blueprint bp=conversionService.convert(blueprintJson,Blueprint.class);
        JsonNode inputs=jsonNode.get(""String_Node_Str"");
        bp.setInputs(prepareInputs(inputs));
        bp.setOwner(user.getUserId());
        bp.setAccount(user.getAccount());
        bp.setPublicInAccount(true);
        bp.setStatus(ResourceStatus.DEFAULT);
        blueprintRepository.save(bp);
        blueprints.add(bp);
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e,user);
      }
    }
  }
  return blueprints;
}","public Set<Blueprint> loadBlueprints(CbUser user){
  Set<Blueprint> blueprints=new HashSet<>();
  Set<String> blueprintNames=getDefaultBlueprintNames(user);
  for (  String blueprintStrings : blueprintArray) {
    String[] split=blueprintStrings.split(""String_Node_Str"");
    if (!blueprintStrings.isEmpty() && (split.length == 2 || split.length == 1) && !blueprintNames.contains(blueprintStrings)&& !split[0].isEmpty()) {
      LOGGER.info(""String_Node_Str"",blueprintStrings,user.getUsername());
      try {
        BlueprintRequest blueprintJson=new BlueprintRequest();
        blueprintJson.setName(split[0]);
        blueprintJson.setDescription(split[0]);
        JsonNode jsonNode=blueprintUtils.convertStringToJsonNode(blueprintUtils.readDefaultBlueprintFromFile(split));
        blueprintJson.setAmbariBlueprint(blueprintUtils.convertStringToJsonNode(jsonNode.get(""String_Node_Str"").toString()));
        Blueprint bp=conversionService.convert(blueprintJson,Blueprint.class);
        JsonNode inputs=jsonNode.get(""String_Node_Str"");
        BlueprintInputParameters inputParameters=new BlueprintInputParameters(prepareInputs(inputs));
        bp.setInputParameters(new Json(inputParameters));
        bp.setOwner(user.getUserId());
        bp.setAccount(user.getAccount());
        bp.setPublicInAccount(true);
        bp.setStatus(ResourceStatus.DEFAULT);
        blueprintRepository.save(bp);
        blueprints.add(bp);
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e,user);
      }
    }
  }
  return blueprints;
}",0.9476142809476142
63916,"protected MachineConfiguration<S,E> getStateMachineConfiguration(){
  StateMachineConfigurationBuilder<S,E> configurationBuilder=new StateMachineConfigurationBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineStateBuilder<S,E> stateBuilder=new StateMachineStateBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineTransitionBuilder<S,E> transitionBuilder=new StateMachineTransitionBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineListener<S,E> listener=new StateMachineListenerAdapter<S,E>(){
    @Override public void stateChanged(    State<S,E> from,    State<S,E> to){
      LOGGER.info(""String_Node_Str"",getClass().getSimpleName(),from,to);
    }
    @Override public void eventNotAccepted(    Message<E> event){
      LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event.getClass().getSimpleName());
    }
  }
;
  return new MachineConfiguration<>(configurationBuilder,stateBuilder,transitionBuilder,listener,new SyncTaskExecutor());
}","protected MachineConfiguration<S,E> getStateMachineConfiguration(){
  StateMachineConfigurationBuilder<S,E> configurationBuilder=new StateMachineConfigurationBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineStateBuilder<S,E> stateBuilder=new StateMachineStateBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineTransitionBuilder<S,E> transitionBuilder=new StateMachineTransitionBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineListener<S,E> listener=new StateMachineListenerAdapter<S,E>(){
    @Override public void stateChanged(    State<S,E> from,    State<S,E> to){
      LOGGER.info(""String_Node_Str"",getClass().getSimpleName(),from,to);
    }
    @Override public void eventNotAccepted(    Message<E> event){
      LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event);
    }
  }
;
  return new MachineConfiguration<>(configurationBuilder,stateBuilder,transitionBuilder,listener,new SyncTaskExecutor());
}",0.986627043090639
63917,"@Override public void eventNotAccepted(Message<E> event){
  LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event.getClass().getSimpleName());
}","@Override public void eventNotAccepted(Message<E> event){
  LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event);
}",0.9039145907473308
63918,"protected MachineConfiguration<S,E> getStateMachineConfiguration(){
  StateMachineConfigurationBuilder<S,E> configurationBuilder=new StateMachineConfigurationBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineStateBuilder<S,E> stateBuilder=new StateMachineStateBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineTransitionBuilder<S,E> transitionBuilder=new StateMachineTransitionBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineListener<S,E> listener=new StateMachineListenerAdapter<S,E>(){
    @Override public void stateChanged(    State<S,E> from,    State<S,E> to){
      LOGGER.info(""String_Node_Str"",getClass().getSimpleName(),from,to);
    }
    @Override public void eventNotAccepted(    Message<E> event){
      LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event.getClass().getSimpleName());
    }
  }
;
  return new MachineConfiguration<>(configurationBuilder,stateBuilder,transitionBuilder,listener,new SyncTaskExecutor());
}","protected MachineConfiguration<S,E> getStateMachineConfiguration(){
  StateMachineConfigurationBuilder<S,E> configurationBuilder=new StateMachineConfigurationBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineStateBuilder<S,E> stateBuilder=new StateMachineStateBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineTransitionBuilder<S,E> transitionBuilder=new StateMachineTransitionBuilder<>(ObjectPostProcessor.QUIESCENT_POSTPROCESSOR,true);
  StateMachineListener<S,E> listener=new StateMachineListenerAdapter<S,E>(){
    @Override public void stateChanged(    State<S,E> from,    State<S,E> to){
      LOGGER.info(""String_Node_Str"",getClass().getSimpleName(),from,to);
    }
    @Override public void eventNotAccepted(    Message<E> event){
      LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event);
    }
  }
;
  return new MachineConfiguration<>(configurationBuilder,stateBuilder,transitionBuilder,listener,new SyncTaskExecutor());
}",0.986627043090639
63919,"@Override public void eventNotAccepted(Message<E> event){
  LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event.getClass().getSimpleName());
}","@Override public void eventNotAccepted(Message<E> event){
  LOGGER.error(""String_Node_Str"",getClass().getSimpleName(),event);
}",0.9039145907473308
63920,"@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testClusterCreation(@Optional(""String_Node_Str"") String clusterName,@Optional(""String_Node_Str"") String ambariUser,@Optional(""String_Node_Str"") String ambariPassword,@Optional(""String_Node_Str"") boolean emailNeeded,@Optional(""String_Node_Str"") boolean enableSecurity,@Optional String kerberosMasterKey,@Optional String kerberosAdmin,@Optional String kerberosPassword,@Optional(""String_Node_Str"") String runRecipesOnHosts) throws Exception {
  IntegrationTestContext itContext=getItContext();
  String stackIdStr=itContext.getContextParam(CloudbreakITContextConstants.STACK_ID);
  Integer stackId=Integer.valueOf(stackIdStr);
  Integer blueprintId=Integer.valueOf(itContext.getContextParam(CloudbreakITContextConstants.BLUEPRINT_ID));
  List<HostGroup> hostgroups=itContext.getContextParam(CloudbreakITContextConstants.HOSTGROUP_ID,List.class);
  Set<HostGroupJson> hostGroupJsons1=convertHostGroups(hostgroups,runRecipesOnHosts);
  itContext.putContextParam(CloudbreakITContextConstants.AMBARI_USER_ID,ambariUser);
  itContext.putContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID,ambariPassword);
  ClusterRequest clusterRequest=new ClusterRequest();
  clusterRequest.setName(clusterName);
  clusterRequest.setDescription(""String_Node_Str"");
  clusterRequest.setKerberosAdmin(kerberosAdmin);
  clusterRequest.setKerberosPassword(kerberosPassword);
  clusterRequest.setKerberosMasterKey(kerberosMasterKey);
  clusterRequest.setEnableSecurity(enableSecurity);
  clusterRequest.setPassword(ambariPassword);
  clusterRequest.setUserName(ambariUser);
  clusterRequest.setBlueprintId(Long.valueOf(blueprintId));
  clusterRequest.setHostGroups(hostGroupJsons1);
  ClusterEndpoint clusterEndpoint=getCloudbreakClient().clusterEndpoint();
  clusterEndpoint.post(Long.valueOf(stackId),clusterRequest);
  CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackIdStr,""String_Node_Str"");
  CloudbreakUtil.checkClusterAvailability(getCloudbreakClient().stackEndpoint(),stackIdStr,ambariUser,ambariPassword);
}","@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testClusterCreation(@Optional(""String_Node_Str"") String clusterName,@Optional(""String_Node_Str"") String ambariUser,@Optional(""String_Node_Str"") String ambariPassword,@Optional(""String_Node_Str"") boolean emailNeeded,@Optional(""String_Node_Str"") boolean enableSecurity,@Optional String kerberosMasterKey,@Optional String kerberosAdmin,@Optional String kerberosPassword,@Optional(""String_Node_Str"") String runRecipesOnHosts) throws Exception {
  IntegrationTestContext itContext=getItContext();
  String stackIdStr=itContext.getContextParam(CloudbreakITContextConstants.STACK_ID);
  Integer stackId=Integer.valueOf(stackIdStr);
  Integer blueprintId=Integer.valueOf(itContext.getContextParam(CloudbreakITContextConstants.BLUEPRINT_ID));
  List<HostGroup> hostgroups=itContext.getContextParam(CloudbreakITContextConstants.HOSTGROUP_ID,List.class);
  Set<HostGroupJson> hostGroupJsons1=convertHostGroups(hostgroups,runRecipesOnHosts);
  itContext.putContextParam(CloudbreakITContextConstants.AMBARI_USER_ID,ambariUser);
  itContext.putContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID,ambariPassword);
  ClusterRequest clusterRequest=new ClusterRequest();
  clusterRequest.setName(clusterName);
  clusterRequest.setDescription(""String_Node_Str"");
  clusterRequest.setKerberosAdmin(kerberosAdmin);
  clusterRequest.setKerberosPassword(kerberosPassword);
  clusterRequest.setKerberosMasterKey(kerberosMasterKey);
  clusterRequest.setEnableSecurity(enableSecurity);
  clusterRequest.setPassword(ambariPassword);
  clusterRequest.setUserName(ambariUser);
  clusterRequest.setBlueprintId(Long.valueOf(blueprintId));
  clusterRequest.setHostGroups(hostGroupJsons1);
  ClusterEndpoint clusterEndpoint=getCloudbreakClient().clusterEndpoint();
  CloudbreakUtil.checkResponse(""String_Node_Str"",clusterEndpoint.post(Long.valueOf(stackId),clusterRequest));
  CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackIdStr,""String_Node_Str"");
  CloudbreakUtil.checkClusterAvailability(getCloudbreakClient().stackEndpoint(),stackIdStr,ambariUser,ambariPassword);
}",0.9892665474060824
63921,"@Test @Parameters({""String_Node_Str"",""String_Node_Str""}) public void testScaling(@Optional(""String_Node_Str"") String instanceGroup,@Optional(""String_Node_Str"") int scalingAdjustment) throws Exception {
  IntegrationTestContext itContext=getItContext();
  String stackId=itContext.getContextParam(CloudbreakITContextConstants.STACK_ID);
  int stackIntId=Integer.valueOf(stackId);
  if (scalingAdjustment < 0) {
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    HostGroupAdjustmentJson hostGroupAdjustmentJson=new HostGroupAdjustmentJson();
    hostGroupAdjustmentJson.setHostGroup(instanceGroup);
    hostGroupAdjustmentJson.setWithStackUpdate(false);
    hostGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    updateClusterJson.setHostGroupAdjustment(hostGroupAdjustmentJson);
    getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson);
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
    UpdateStackJson updateStackJson=new UpdateStackJson();
    InstanceGroupAdjustmentJson instanceGroupAdjustmentJson=new InstanceGroupAdjustmentJson();
    instanceGroupAdjustmentJson.setInstanceGroup(instanceGroup);
    instanceGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    instanceGroupAdjustmentJson.setWithClusterEvent(false);
    updateStackJson.setInstanceGroupAdjustment(instanceGroupAdjustmentJson);
    getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson);
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
  }
 else {
    UpdateStackJson updateStackJson=new UpdateStackJson();
    InstanceGroupAdjustmentJson instanceGroupAdjustmentJson=new InstanceGroupAdjustmentJson();
    instanceGroupAdjustmentJson.setInstanceGroup(instanceGroup);
    instanceGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    instanceGroupAdjustmentJson.setWithClusterEvent(false);
    updateStackJson.setInstanceGroupAdjustment(instanceGroupAdjustmentJson);
    getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson);
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    HostGroupAdjustmentJson hostGroupAdjustmentJson=new HostGroupAdjustmentJson();
    hostGroupAdjustmentJson.setHostGroup(instanceGroup);
    hostGroupAdjustmentJson.setWithStackUpdate(false);
    hostGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    updateClusterJson.setHostGroupAdjustment(hostGroupAdjustmentJson);
    getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson);
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
  }
  CloudbreakUtil.checkClusterAvailability(itContext.getContextParam(CloudbreakITContextConstants.CLOUDBREAK_CLIENT,CloudbreakClient.class).stackEndpoint(),stackId,itContext.getContextParam(CloudbreakITContextConstants.AMBARI_USER_ID),itContext.getContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID));
}","@Test @Parameters({""String_Node_Str"",""String_Node_Str""}) public void testScaling(@Optional(""String_Node_Str"") String instanceGroup,@Optional(""String_Node_Str"") int scalingAdjustment) throws Exception {
  IntegrationTestContext itContext=getItContext();
  String stackId=itContext.getContextParam(CloudbreakITContextConstants.STACK_ID);
  int stackIntId=Integer.valueOf(stackId);
  if (scalingAdjustment < 0) {
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    HostGroupAdjustmentJson hostGroupAdjustmentJson=new HostGroupAdjustmentJson();
    hostGroupAdjustmentJson.setHostGroup(instanceGroup);
    hostGroupAdjustmentJson.setWithStackUpdate(false);
    hostGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    updateClusterJson.setHostGroupAdjustment(hostGroupAdjustmentJson);
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson));
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
    UpdateStackJson updateStackJson=new UpdateStackJson();
    InstanceGroupAdjustmentJson instanceGroupAdjustmentJson=new InstanceGroupAdjustmentJson();
    instanceGroupAdjustmentJson.setInstanceGroup(instanceGroup);
    instanceGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    instanceGroupAdjustmentJson.setWithClusterEvent(false);
    updateStackJson.setInstanceGroupAdjustment(instanceGroupAdjustmentJson);
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson));
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
  }
 else {
    UpdateStackJson updateStackJson=new UpdateStackJson();
    InstanceGroupAdjustmentJson instanceGroupAdjustmentJson=new InstanceGroupAdjustmentJson();
    instanceGroupAdjustmentJson.setInstanceGroup(instanceGroup);
    instanceGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    instanceGroupAdjustmentJson.setWithClusterEvent(false);
    updateStackJson.setInstanceGroupAdjustment(instanceGroupAdjustmentJson);
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson));
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    HostGroupAdjustmentJson hostGroupAdjustmentJson=new HostGroupAdjustmentJson();
    hostGroupAdjustmentJson.setHostGroup(instanceGroup);
    hostGroupAdjustmentJson.setWithStackUpdate(false);
    hostGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    updateClusterJson.setHostGroupAdjustment(hostGroupAdjustmentJson);
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson));
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
  }
  CloudbreakUtil.checkClusterAvailability(itContext.getContextParam(CloudbreakITContextConstants.CLOUDBREAK_CLIENT,CloudbreakClient.class).stackEndpoint(),stackId,itContext.getContextParam(CloudbreakITContextConstants.AMBARI_USER_ID),itContext.getContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID));
}",0.9702970297029704
63922,"@Test @Parameters({""String_Node_Str""}) public void testStatusUpdate(@Optional(STOPPED) String newStatus) throws Exception {
  IntegrationTestContext itContext=getItContext();
  String stackId=itContext.getContextParam(CloudbreakITContextConstants.STACK_ID);
  Integer stackIntId=Integer.valueOf(stackId);
  if (newStatus.equals(STOPPED)) {
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    updateClusterJson.setStatus(StatusRequest.valueOf(newStatus));
    getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson);
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,STOPPED);
    UpdateStackJson updateStackJson=new UpdateStackJson();
    updateStackJson.setStatus(StatusRequest.valueOf(newStatus));
    getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson);
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,STOPPED);
  }
 else {
    UpdateStackJson updateStackJson=new UpdateStackJson();
    updateStackJson.setStatus(StatusRequest.valueOf(newStatus));
    getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson);
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    updateClusterJson.setStatus(StatusRequest.valueOf(newStatus));
    getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson);
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
  }
  if (newStatus.equals(STARTED)) {
    CloudbreakUtil.checkClusterAvailability(getCloudbreakClient().stackEndpoint(),stackId,itContext.getContextParam(CloudbreakITContextConstants.AMBARI_USER_ID),itContext.getContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID));
  }
 else   if (newStatus.equals(STOPPED)) {
    CloudbreakUtil.checkClusterStopped(getCloudbreakClient().stackEndpoint(),stackId,itContext.getContextParam(CloudbreakITContextConstants.AMBARI_USER_ID),itContext.getContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID));
  }
}","@Test @Parameters({""String_Node_Str""}) public void testStatusUpdate(@Optional(STOPPED) String newStatus) throws Exception {
  IntegrationTestContext itContext=getItContext();
  String stackId=itContext.getContextParam(CloudbreakITContextConstants.STACK_ID);
  Integer stackIntId=Integer.valueOf(stackId);
  if (newStatus.equals(STOPPED)) {
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    updateClusterJson.setStatus(StatusRequest.valueOf(newStatus));
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson));
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,STOPPED);
    UpdateStackJson updateStackJson=new UpdateStackJson();
    updateStackJson.setStatus(StatusRequest.valueOf(newStatus));
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson));
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,STOPPED);
  }
 else {
    UpdateStackJson updateStackJson=new UpdateStackJson();
    updateStackJson.setStatus(StatusRequest.valueOf(newStatus));
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().stackEndpoint().put(Long.valueOf(stackIntId),updateStackJson));
    CloudbreakUtil.waitAndCheckStackStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    updateClusterJson.setStatus(StatusRequest.valueOf(newStatus));
    CloudbreakUtil.checkResponse(""String_Node_Str"",getCloudbreakClient().clusterEndpoint().put(Long.valueOf(stackIntId),updateClusterJson));
    CloudbreakUtil.waitAndCheckClusterStatus(getCloudbreakClient(),stackId,""String_Node_Str"");
  }
  if (newStatus.equals(STARTED)) {
    CloudbreakUtil.checkClusterAvailability(getCloudbreakClient().stackEndpoint(),stackId,itContext.getContextParam(CloudbreakITContextConstants.AMBARI_USER_ID),itContext.getContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID));
  }
 else   if (newStatus.equals(STOPPED)) {
    CloudbreakUtil.checkClusterStopped(getCloudbreakClient().stackEndpoint(),stackId,itContext.getContextParam(CloudbreakITContextConstants.AMBARI_USER_ID),itContext.getContextParam(CloudbreakITContextConstants.AMBARI_PASSWORD_ID));
  }
}",0.9571428571428572
63923,"@Override public void accept(Event<GetSSHFingerprintsRequest> getSSHFingerprintsRequestEvent){
  LOGGER.info(""String_Node_Str"",getSSHFingerprintsRequestEvent);
  GetSSHFingerprintsRequest fingerprintsRequest=getSSHFingerprintsRequestEvent.getData();
  try {
    CloudContext cloudContext=fingerprintsRequest.getCloudContext();
    CloudInstance cloudInstance=fingerprintsRequest.getCloudInstance();
    CloudConnector connector=cloudPlatformConnectors.get(cloudContext.getPlatformVariant());
    AuthenticatedContext ac=connector.authentication().authenticate(cloudContext,fingerprintsRequest.getCloudCredential());
    GetSSHFingerprintsResult fingerprintsResult;
    try {
      String initialConsoleOutput=connector.instances().getConsoleOutput(ac,cloudInstance);
      InstanceConsoleOutputResult consoleOutputResult=new InstanceConsoleOutputResult(cloudContext,cloudInstance,initialConsoleOutput);
      PollTask<InstanceConsoleOutputResult> outputPollerTask=statusCheckFactory.newPollConsoleOutputTask(connector.instances(),ac,cloudInstance);
      if (!outputPollerTask.completed(consoleOutputResult)) {
        consoleOutputResult=syncPollingScheduler.schedule(outputPollerTask);
      }
      Set<String> sshFingerprints=FingerprintParserUtil.parseFingerprints(consoleOutputResult.getConsoleOutput());
      if (sshFingerprints.isEmpty()) {
        fingerprintsResult=new GetSSHFingerprintsResult(""String_Node_Str"",null,fingerprintsRequest);
      }
 else {
        fingerprintsResult=new GetSSHFingerprintsResult(fingerprintsRequest,sshFingerprints);
      }
    }
 catch (    CloudOperationNotSupportedException e) {
      fingerprintsResult=new GetSSHFingerprintsResult(fingerprintsRequest,new HashSet<String>());
    }
    fingerprintsRequest.getResult().onNext(fingerprintsResult);
    eventBus.notify(fingerprintsResult.selector(),new Event(getSSHFingerprintsRequestEvent.getHeaders(),fingerprintsResult));
    LOGGER.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    GetSSHFingerprintsResult failure=new GetSSHFingerprintsResult(""String_Node_Str"",e,fingerprintsRequest);
    fingerprintsRequest.getResult().onNext(failure);
    eventBus.notify(failure.selector(),new Event(getSSHFingerprintsRequestEvent.getHeaders(),failure));
  }
}","@Override public void accept(Event<GetSSHFingerprintsRequest> getSSHFingerprintsRequestEvent){
  LOGGER.info(""String_Node_Str"",getSSHFingerprintsRequestEvent);
  GetSSHFingerprintsRequest fingerprintsRequest=getSSHFingerprintsRequestEvent.getData();
  try {
    CloudContext cloudContext=fingerprintsRequest.getCloudContext();
    CloudInstance cloudInstance=fingerprintsRequest.getCloudInstance();
    CloudConnector connector=cloudPlatformConnectors.get(cloudContext.getPlatformVariant());
    AuthenticatedContext ac=connector.authentication().authenticate(cloudContext,fingerprintsRequest.getCloudCredential());
    GetSSHFingerprintsResult fingerprintsResult;
    try {
      String initialConsoleOutput=connector.instances().getConsoleOutput(ac,cloudInstance);
      InstanceConsoleOutputResult consoleOutputResult=new InstanceConsoleOutputResult(cloudContext,cloudInstance,initialConsoleOutput);
      PollTask<InstanceConsoleOutputResult> outputPollerTask=statusCheckFactory.newPollConsoleOutputTask(connector.instances(),ac,cloudInstance);
      if (!outputPollerTask.completed(consoleOutputResult)) {
        consoleOutputResult=syncPollingScheduler.schedule(outputPollerTask);
      }
      Set<String> sshFingerprints=FingerprintParserUtil.parseFingerprints(consoleOutputResult.getConsoleOutput());
      if (sshFingerprints.isEmpty()) {
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        fingerprintsResult=new GetSSHFingerprintsResult(fingerprintsRequest,sshFingerprints);
      }
    }
 catch (    CloudOperationNotSupportedException e) {
      fingerprintsResult=new GetSSHFingerprintsResult(fingerprintsRequest,new HashSet<String>());
    }
    fingerprintsRequest.getResult().onNext(fingerprintsResult);
    eventBus.notify(fingerprintsResult.selector(),new Event(getSSHFingerprintsRequestEvent.getHeaders(),fingerprintsResult));
    LOGGER.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    GetSSHFingerprintsResult failure=new GetSSHFingerprintsResult(""String_Node_Str"",e,fingerprintsRequest);
    fingerprintsRequest.getResult().onNext(failure);
    eventBus.notify(failure.selector(),new Event(getSSHFingerprintsRequestEvent.getHeaders(),failure));
  }
}",0.978961504028648
63924,"@Override public FlowFailureEvent convert(Object payload){
  return new FlowFailureEvent(((CloudPlatformResult)payload).getRequest().getCloudContext().getId(),((CloudPlatformResult)payload).getErrorDetails());
}","@Override public FlowFailureEvent convert(Object payload){
  CloudPlatformResult cloudPlatformResult=(CloudPlatformResult)payload;
  return new FlowFailureEvent(cloudPlatformResult.getRequest().getCloudContext().getId(),cloudPlatformResult.getErrorDetails());
}",0.6398305084745762
63925,"@Override protected void doExecute(StackContext context,FlowFailureEvent payload,Map<Object,Object> variables){
  stackCreationService.handeStackCreationFailure(context,payload.getException());
  sendEvent(context.getFlowId(),StackCreationEvent.STACK_CREATION_FAILED_EVENT.stringRepresentation(),payload);
}","@Override protected void doExecute(StackContext context,FlowFailureEvent payload,Map<Object,Object> variables){
  stackCreationService.handleStackCreationFailure(context,payload.getException());
  sendEvent(context.getFlowId(),StackCreationEvent.STACK_CREATION_FAILED_EVENT.stringRepresentation(),payload);
}",0.9983739837398374
63926,"@CliAvailabilityIndicator({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public boolean isTemplateEc2CreateCommandAvailable(){
  return true;
}","@CliAvailabilityIndicator({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public boolean isTemplateEc2CreateCommandAvailable(){
  return true;
}",0.95
63927,"public Map<String,String> transformObjectToStringMap(Object o,String... exclude){
  Map<String,String> result=new HashMap<>();
  Class<?> current=o.getClass();
  while (current.getSuperclass() != null) {
    for (    Field field : current.getDeclaredFields()) {
      if (!Arrays.asList(exclude).contains(field.getName())) {
        if (field.getType().isAssignableFrom(Map.class)) {
          field.setAccessible(true);
          try {
            Map<Object,Object> o1=(Map<Object,Object>)field.get(o);
            for (            Map.Entry<Object,Object> objectObjectEntry : o1.entrySet()) {
              result.put(field.getName() + ""String_Node_Str"" + objectObjectEntry.getKey(),objectObjectEntry.getValue().toString());
            }
          }
 catch (          IllegalAccessException e) {
            result.put(field.getName(),""String_Node_Str"");
          }
        }
 else         if (!field.getType().isLocalClass()) {
          field.setAccessible(true);
          try {
            result.put(field.getName(),field.get(o) == null ? null : field.get(o).toString());
          }
 catch (          IllegalAccessException e) {
            result.put(field.getName(),""String_Node_Str"");
          }
        }
 else {
          for (          Field field1 : field.getType().getDeclaredFields()) {
            field1.setAccessible(true);
            try {
              result.put(field1.getName(),field1.get(o) == null ? null : field1.get(o).toString());
            }
 catch (            IllegalAccessException e) {
              result.put(field.getName() + ""String_Node_Str"" + field1.getName(),""String_Node_Str"");
            }
          }
        }
      }
    }
    current=current.getSuperclass();
  }
  return result;
}","public Map<String,String> transformObjectToStringMap(Object o,String... exclude){
  Map<String,String> result=new HashMap<>();
  Class<?> current=o.getClass();
  while (current.getSuperclass() != null) {
    for (    Field field : current.getDeclaredFields()) {
      if (!Arrays.asList(exclude).contains(field.getName())) {
        if (field.getType().isAssignableFrom(Map.class)) {
          field.setAccessible(true);
          try {
            Map<Object,Object> o1=(Map<Object,Object>)field.get(o);
            for (            Map.Entry<Object,Object> objectObjectEntry : o1.entrySet()) {
              result.put(field.getName() + ""String_Node_Str"" + objectObjectEntry.getKey(),objectObjectEntry.getValue() == null ? ""String_Node_Str"" : objectObjectEntry.getValue().toString());
            }
          }
 catch (          IllegalAccessException e) {
            result.put(field.getName(),""String_Node_Str"");
          }
        }
 else         if (!field.getType().isLocalClass()) {
          field.setAccessible(true);
          try {
            result.put(field.getName(),field.get(o) == null ? null : field.get(o).toString());
          }
 catch (          IllegalAccessException e) {
            result.put(field.getName(),""String_Node_Str"");
          }
        }
 else {
          for (          Field field1 : field.getType().getDeclaredFields()) {
            field1.setAccessible(true);
            try {
              result.put(field1.getName(),field1.get(o) == null ? null : field1.get(o).toString());
            }
 catch (            IllegalAccessException e) {
              result.put(field.getName() + ""String_Node_Str"" + field1.getName(),""String_Node_Str"");
            }
          }
        }
      }
    }
    current=current.getSuperclass();
  }
  return result;
}",0.9833003113501274
63928,"private void scaleUp(int scalingAdjustment,int totalNodes){
  String hostGroup=policy.getHostGroup();
  String ambari=cluster.getHost();
  AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
  ambariAddressJson.setAmbariAddress(ambari);
  try {
    LOGGER.info(""String_Node_Str"",scalingAdjustment);
    Long stackId=cloudbreakService.stackEndpoint().getStackForAmbari(ambariAddressJson).getId();
    UpdateStackJson updateStackJson=new UpdateStackJson();
    InstanceGroupAdjustmentJson instanceGroupAdjustmentJson=new InstanceGroupAdjustmentJson();
    instanceGroupAdjustmentJson.setWithClusterEvent(true);
    instanceGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    instanceGroupAdjustmentJson.setInstanceGroup(hostGroup);
    updateStackJson.setInstanceGroupAdjustment(instanceGroupAdjustmentJson);
    cloudbreakService.stackEndpoint().put(stackId,updateStackJson);
    historyService.createEntry(ScalingStatus.SUCCESS,""String_Node_Str"",totalNodes,policy);
  }
 catch (  Exception e) {
    historyService.createEntry(ScalingStatus.FAILED,""String_Node_Str"" + e.getMessage(),totalNodes,policy);
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void scaleUp(int scalingAdjustment,int totalNodes){
  String hostGroup=policy.getHostGroup();
  String ambari=cluster.getHost();
  AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
  ambariAddressJson.setAmbariAddress(ambari);
  try {
    LOGGER.info(""String_Node_Str"",scalingAdjustment);
    Long stackId=cloudbreakClient.stackEndpoint().getStackForAmbari(ambariAddressJson).getId();
    UpdateStackJson updateStackJson=new UpdateStackJson();
    InstanceGroupAdjustmentJson instanceGroupAdjustmentJson=new InstanceGroupAdjustmentJson();
    instanceGroupAdjustmentJson.setWithClusterEvent(true);
    instanceGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    instanceGroupAdjustmentJson.setInstanceGroup(hostGroup);
    updateStackJson.setInstanceGroupAdjustment(instanceGroupAdjustmentJson);
    cloudbreakClient.stackEndpoint().put(stackId,updateStackJson);
    historyService.createEntry(ScalingStatus.SUCCESS,""String_Node_Str"",totalNodes,policy);
  }
 catch (  Exception e) {
    historyService.createEntry(ScalingStatus.FAILED,""String_Node_Str"" + e.getMessage(),totalNodes,policy);
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.988860325621251
63929,"private void scaleDown(int scalingAdjustment,int totalNodes){
  String hostGroup=policy.getHostGroup();
  String ambari=cluster.getHost();
  AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
  ambariAddressJson.setAmbariAddress(ambari);
  try {
    LOGGER.info(""String_Node_Str"",scalingAdjustment,hostGroup);
    Long stackId=cloudbreakService.stackEndpoint().getStackForAmbari(ambariAddressJson).getId();
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    HostGroupAdjustmentJson hostGroupAdjustmentJson=new HostGroupAdjustmentJson();
    hostGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    hostGroupAdjustmentJson.setWithStackUpdate(true);
    hostGroupAdjustmentJson.setHostGroup(hostGroup);
    updateClusterJson.setHostGroupAdjustment(hostGroupAdjustmentJson);
    cloudbreakService.clusterEndpoint().put(stackId,updateClusterJson);
    historyService.createEntry(ScalingStatus.SUCCESS,""String_Node_Str"",totalNodes,policy);
  }
 catch (  Exception e) {
    historyService.createEntry(ScalingStatus.FAILED,""String_Node_Str"" + e.getMessage(),totalNodes,policy);
    LOGGER.error(""String_Node_Str"",e);
  }
}","private void scaleDown(int scalingAdjustment,int totalNodes){
  String hostGroup=policy.getHostGroup();
  String ambari=cluster.getHost();
  AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
  ambariAddressJson.setAmbariAddress(ambari);
  try {
    LOGGER.info(""String_Node_Str"",scalingAdjustment,hostGroup);
    Long stackId=cloudbreakClient.stackEndpoint().getStackForAmbari(ambariAddressJson).getId();
    UpdateClusterJson updateClusterJson=new UpdateClusterJson();
    HostGroupAdjustmentJson hostGroupAdjustmentJson=new HostGroupAdjustmentJson();
    hostGroupAdjustmentJson.setScalingAdjustment(scalingAdjustment);
    hostGroupAdjustmentJson.setWithStackUpdate(true);
    hostGroupAdjustmentJson.setHostGroup(hostGroup);
    updateClusterJson.setHostGroupAdjustment(hostGroupAdjustmentJson);
    cloudbreakClient.clusterEndpoint().put(stackId,updateClusterJson);
    historyService.createEntry(ScalingStatus.SUCCESS,""String_Node_Str"",totalNodes,policy);
  }
 catch (  Exception e) {
    historyService.createEntry(ScalingStatus.FAILED,""String_Node_Str"" + e.getMessage(),totalNodes,policy);
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.988734835355286
63930,"private Boolean hasAccess(String userId,String account,String ambariAddress) throws Exception {
  AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
  ambariAddressJson.setAmbariAddress(ambariAddress);
  StackResponse stack=cloudbreakService.stackEndpoint().getStackForAmbari(ambariAddressJson);
  if (stack.getOwner().equals(userId)) {
    return true;
  }
 else   if (stack.isPublicInAccount() && stack.getAccount() == account) {
    return true;
  }
  return false;
}","private Boolean hasAccess(String userId,String account,String ambariAddress) throws Exception {
  AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
  ambariAddressJson.setAmbariAddress(ambariAddress);
  StackResponse stack=cloudbreakClient.stackEndpoint().getStackForAmbari(ambariAddressJson);
  if (stack.getOwner().equals(userId)) {
    return true;
  }
 else   if (stack.isPublicInAccount() && stack.getAccount() == account) {
    return true;
  }
  return false;
}",0.986444212721585
63931,"public AmbariStack tryResolve(Ambari ambari){
  try {
    String host=ambari.getHost();
    String user=ambari.getUser();
    String pass=ambari.getPass();
    AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
    ambariAddressJson.setAmbariAddress(host);
    StackResponse stack=cloudbreakService.stackEndpoint().getStackForAmbari(ambariAddressJson);
    long id=stack.getId();
    SecurityConfig securityConfig=tlsSecurityService.prepareSecurityConfig(id);
    if (user == null && pass == null) {
      ClusterResponse clusterResponse=cloudbreakService.clusterEndpoint().get(id);
      return new AmbariStack(new Ambari(host,ambari.getPort(),clusterResponse.getUserName(),clusterResponse.getPassword()),id,securityConfig);
    }
 else {
      return new AmbariStack(ambari,id,securityConfig);
    }
  }
 catch (  Exception e) {
    return new AmbariStack(ambari);
  }
}","public AmbariStack tryResolve(Ambari ambari){
  try {
    String host=ambari.getHost();
    String user=ambari.getUser();
    String pass=ambari.getPass();
    AmbariAddressJson ambariAddressJson=new AmbariAddressJson();
    ambariAddressJson.setAmbariAddress(host);
    StackResponse stack=cloudbreakClient.stackEndpoint().getStackForAmbari(ambariAddressJson);
    long id=stack.getId();
    SecurityConfig securityConfig=tlsSecurityService.prepareSecurityConfig(id);
    if (user == null && pass == null) {
      ClusterResponse clusterResponse=cloudbreakClient.clusterEndpoint().get(id);
      return new AmbariStack(new Ambari(host,ambari.getPort(),clusterResponse.getUserName(),clusterResponse.getPassword()),id,securityConfig);
    }
 else {
      return new AmbariStack(ambari,id,securityConfig);
    }
  }
 catch (  Exception e) {
    return new AmbariStack(ambari);
  }
}",0.985244040862656
63932,"public SecurityConfig prepareSecurityConfig(Long stackId){
  Path stackCertDir=getCertDir(stackId);
  if (!Files.exists(stackCertDir)) {
    try {
      LOGGER.info(""String_Node_Str"",stackCertDir);
      Files.createDirectory(stackCertDir);
    }
 catch (    IOException e) {
      throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
    }
  }
  Path clientKeyDst=stackCertDir.resolve(KEY_FILE);
  Path clientCertDst=stackCertDir.resolve(CERT_FILE);
  try {
    Files.copy(Paths.get(clientPrivateKeyName),clientKeyDst,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(Paths.get(clientCertName),clientCertDst,StandardCopyOption.REPLACE_EXISTING);
  }
 catch (  IOException e) {
    throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
  }
  byte[] serverCert;
  try {
    serverCert=cloudbreakService.stackEndpoint().getCertificate(stackId).getCertificate();
    Files.write(stackCertDir.resolve(SERVER_CERT_FILE),serverCert,StandardOpenOption.CREATE);
  }
 catch (  Exception e) {
    throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
  }
  byte[] clientKey;
  byte[] clientCert;
  try {
    clientKey=Files.readAllBytes(clientKeyDst);
    clientCert=Files.readAllBytes(clientCertDst);
  }
 catch (  IOException e) {
    throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
  }
  return new SecurityConfig(clientKey,clientCert,serverCert);
}","public SecurityConfig prepareSecurityConfig(Long stackId){
  Path stackCertDir=getCertDir(stackId);
  if (!Files.exists(stackCertDir)) {
    try {
      LOGGER.info(""String_Node_Str"",stackCertDir);
      Files.createDirectory(stackCertDir);
    }
 catch (    IOException e) {
      throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
    }
  }
  Path clientKeyDst=stackCertDir.resolve(KEY_FILE);
  Path clientCertDst=stackCertDir.resolve(CERT_FILE);
  try {
    Files.copy(Paths.get(clientPrivateKeyName),clientKeyDst,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(Paths.get(clientCertName),clientCertDst,StandardCopyOption.REPLACE_EXISTING);
  }
 catch (  IOException e) {
    throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
  }
  byte[] serverCert;
  try {
    serverCert=cloudbreakClient.stackEndpoint().getCertificate(stackId).getCertificate();
    Files.write(stackCertDir.resolve(SERVER_CERT_FILE),serverCert,StandardOpenOption.CREATE);
  }
 catch (  Exception e) {
    throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
  }
  byte[] clientKey;
  byte[] clientCert;
  try {
    clientKey=Files.readAllBytes(clientKeyDst);
    clientCert=Files.readAllBytes(clientCertDst);
  }
 catch (  IOException e) {
    throw new TlsConfigurationException(""String_Node_Str"" + stackCertDir,e);
  }
  return new SecurityConfig(clientKey,clientCert,serverCert);
}",0.995446584938704
63933,"private CloudbreakEvent createStackEvent(Stack stack,String eventType,String eventMessage,String instanceGroupName){
  CloudbreakEvent stackEvent=new CloudbreakEvent();
  stackEvent.setEventTimestamp(Calendar.getInstance().getTime());
  stackEvent.setEventMessage(eventMessage);
  stackEvent.setEventType(eventType);
  stackEvent.setOwner(stack.getOwner());
  stackEvent.setAccount(stack.getAccount());
  stackEvent.setStackId(stack.getId());
  stackEvent.setStackStatus(stack.getStatus());
  stackEvent.setStackName(stack.getName());
  stackEvent.setNodeCount(stack.getRunningInstanceMetaData().size());
  stackEvent.setRegion(stack.getRegion());
  stackEvent.setCloud(stack.cloudPlatform().name());
  populateClusterData(stackEvent,stack);
  if (instanceGroupName != null) {
    stackEvent.setInstanceGroup(instanceGroupName);
  }
  return stackEvent;
}","private CloudbreakEvent createStackEvent(Stack stack,String eventType,String eventMessage,String instanceGroupName){
  CloudbreakEvent stackEvent=new CloudbreakEvent();
  stackEvent.setEventTimestamp(Calendar.getInstance().getTime());
  stackEvent.setEventMessage(eventMessage);
  stackEvent.setEventType(eventType);
  stackEvent.setOwner(stack.getOwner());
  stackEvent.setAccount(stack.getAccount());
  stackEvent.setStackId(stack.getId());
  stackEvent.setStackStatus(stack.getStatus());
  stackEvent.setStackName(stack.getName());
  stackEvent.setNodeCount(stack.getRunningInstanceMetaData().size());
  stackEvent.setRegion(stack.getRegion());
  stackEvent.setCloud(stack.getCredential() == null ? ""String_Node_Str"" : stack.cloudPlatform().name());
  populateClusterData(stackEvent,stack);
  if (instanceGroupName != null) {
    stackEvent.setInstanceGroup(instanceGroupName);
  }
  return stackEvent;
}",0.970488081725312
63934,"private void validateSelectors(){
  LOGGER.debug(""String_Node_Str"");
  Map<Class,CloudPlatformEventHandler> handlerMap=new HashMap<>();
  for (  CloudPlatformEventHandler handler : handlers) {
    CloudPlatformEventHandler entry=handlerMap.put(handler.type(),handler);
    if (null != entry) {
      LOGGER.error(""String_Node_Str"",handler,entry);
      throw new IllegalStateException(""String_Node_Str"" + handler + ""String_Node_Str""+ entry);
    }
  }
}","private void validateSelectors(){
  LOGGER.debug(""String_Node_Str"",handlers.size());
  Map<Class,CloudPlatformEventHandler> handlerMap=new HashMap<>();
  for (  CloudPlatformEventHandler handler : handlers) {
    CloudPlatformEventHandler entry=handlerMap.put(handler.type(),handler);
    if (null != entry) {
      LOGGER.error(""String_Node_Str"",handler,entry);
      throw new IllegalStateException(""String_Node_Str"" + handler + ""String_Node_Str""+ entry);
    }
  }
}",0.982646420824295
63935,"private void handleExceptions(Stack stack,List<ResourceRequestResult> failedResourceRequestResult){
  for (  ResourceRequestResult exception : failedResourceRequestResult) {
    List<Resource> resourceList=new ArrayList<>();
    LOGGER.error(""String_Node_Str"" + exception.getException().orNull().getMessage(),exception.getException());
    for (    Resource resource : exception.getResources()) {
      Resource newResource=resourceRepository.findByStackIdAndNameAndType(stack.getId(),resource.getResourceName(),resource.getResourceType());
      if (newResource != null) {
        LOGGER.info(String.format(""String_Node_Str"",newResource.getResourceName(),newResource.getId(),newResource.getResourceType()));
        resourceList.add(newResource);
      }
    }
    for (    Resource resource : exception.getBuiltResources()) {
      Resource newResource=resourceRepository.findByStackIdAndNameAndType(stack.getId(),resource.getResourceName(),resource.getResourceType());
      if (newResource != null) {
        LOGGER.info(String.format(""String_Node_Str"",newResource.getResourceName(),newResource.getId(),newResource.getResourceType()));
        resourceList.add(newResource);
      }
    }
    if (!resourceList.isEmpty()) {
      LOGGER.info(""String_Node_Str"" + resourceList.size());
      doRollbackAndDecreaseNodeCount(exception.getInstanceGroup(),stack,resourceList,failedResourceRequestResult);
    }
  }
}","private void handleExceptions(Stack stack,List<ResourceRequestResult> failedResourceRequestResult){
  for (  ResourceRequestResult exception : failedResourceRequestResult) {
    List<Resource> resourceList=new ArrayList<>();
    LOGGER.error(""String_Node_Str"" + exception.getException().orNull().getMessage(),exception.getException());
    resourceList.addAll(collectFailedResources(stack.getId(),exception.getResources()));
    resourceList.addAll(collectFailedResources(stack.getId(),exception.getBuiltResources()));
    if (!resourceList.isEmpty()) {
      LOGGER.info(""String_Node_Str"" + resourceList.size());
      doRollbackAndDecreaseNodeCount(exception.getInstanceGroup(),stack,resourceList,failedResourceRequestResult);
    }
  }
}",0.4948932219127205
63936,"private void handleExceptions(Stack stack,List<ResourceRequestResult> failedResourceRequestResult){
  for (  ResourceRequestResult exception : failedResourceRequestResult) {
    List<Resource> resourceList=new ArrayList<>();
    LOGGER.error(""String_Node_Str"",exception.getException().orNull().getMessage());
    for (    Resource resource : exception.getResources()) {
      Resource newResource=resourceRepository.findByStackIdAndNameAndType(stack.getId(),resource.getResourceName(),resource.getResourceType());
      if (newResource != null) {
        LOGGER.info(""String_Node_Str"",newResource.getResourceName(),newResource.getId(),newResource.getResourceType());
        resourceList.add(newResource);
      }
    }
    if (!resourceList.isEmpty()) {
      LOGGER.info(""String_Node_Str"",stack.getId(),resourceList.size());
      doRollback(stack,resourceList);
    }
  }
}","private void handleExceptions(Stack stack,List<ResourceRequestResult> failedResourceRequestResult){
  for (  ResourceRequestResult exception : failedResourceRequestResult) {
    List<Resource> resourceList=new ArrayList<>();
    LOGGER.error(""String_Node_Str"",exception.getException().orNull().getMessage());
    resourceList.addAll(collectFailedResources(stack.getId(),exception.getResources()));
    resourceList.addAll(collectFailedResources(stack.getId(),exception.getBuiltResources()));
    if (!resourceList.isEmpty()) {
      LOGGER.info(""String_Node_Str"",stack.getId(),resourceList.size());
      doRollback(stack,resourceList);
    }
  }
}",0.5787401574803149
63937,"@Override public boolean checkStatus(AmbariOperations t){
  Map<String,Integer> installRequests=t.getRequests();
  boolean allFinished=true;
  for (  Entry<String,Integer> request : installRequests.entrySet()) {
    AmbariClient ambariClient=t.getAmbariClient();
    BigDecimal installProgress=ambariClient.getRequestProgress(request.getValue());
    LOGGER.info(""String_Node_Str"",request.getKey(),installProgress);
    allFinished=allFinished && COMPLETED.compareTo(installProgress) == 0;
    if (FAILED.compareTo(installProgress) == 0) {
      boolean failed=true;
      for (int i=0; i < MAX_RETRY; i++) {
        if (ambariClient.getRequestProgress(request.getValue()).compareTo(FAILED) != 0) {
          failed=false;
          break;
        }
      }
      if (failed) {
        throw new AmbariOperationFailedException(String.format(""String_Node_Str"",request.getKey(),request.getValue()));
      }
    }
  }
  return allFinished;
}","@Override public boolean checkStatus(AmbariOperations t){
  Map<String,Integer> installRequests=t.getRequests();
  boolean allFinished=true;
  for (  Entry<String,Integer> request : installRequests.entrySet()) {
    AmbariClient ambariClient=t.getAmbariClient();
    BigDecimal installProgress=ambariClient.getRequestProgress(request.getValue());
    LOGGER.info(""String_Node_Str"",request.getKey(),installProgress);
    allFinished=allFinished && installProgress != null && COMPLETED.compareTo(installProgress) == 0;
    if (installProgress != null && FAILED.compareTo(installProgress) == 0) {
      boolean failed=true;
      for (int i=0; i < MAX_RETRY; i++) {
        if (ambariClient.getRequestProgress(request.getValue()).compareTo(FAILED) != 0) {
          failed=false;
          break;
        }
      }
      if (failed) {
        throw new AmbariOperationFailedException(String.format(""String_Node_Str"",request.getKey(),request.getValue()));
      }
    }
  }
  return allFinished;
}",0.9720496894409938
63938,"public Cluster buildAmbariCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    cluster.setCreationStarted(new Date().getTime());
    cluster=clusterRepository.save(cluster);
    TLSClientConfig clientConfig=tlsSecurityService.buildTLSClientConfig(stack.getId(),cluster.getAmbariIp());
    AmbariClient ambariClient=ambariClientProvider.getAmbariClient(clientConfig,cluster.getUserName(),cluster.getPassword());
    setBaseRepoURL(cluster,ambariClient);
    addBlueprint(stack,ambariClient,cluster.getBlueprint());
    int nodeCount=stack.getFullNodeCountWithoutDecommissionedNodes() - stack.getGateWayNodeCount();
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    PollingResult waitForHostsResult=waitForHosts(stack,ambariClient,nodeCount,hostsInCluster);
    checkPollingResult(waitForHostsResult,""String_Node_Str"" + waitForHostsResult.name());
    Set<HostGroup> hostGroups=hostGroupRepository.findHostGroupsInCluster(cluster.getId());
    Map<String,List<String>> hostGroupMappings=buildHostGroupAssociations(hostGroups);
    hostGroups=saveHostMetadata(cluster,hostGroupMappings);
    boolean recipesFound=recipesFound(hostGroups);
    if (recipesFound) {
      recipeEngine.setupRecipes(stack,hostGroups);
      recipeEngine.executePreInstall(stack);
    }
    ambariClient.createCluster(cluster.getName(),cluster.getBlueprint().getBlueprintName(),hostGroupMappings);
    PollingResult pollingResult=waitForClusterInstall(stack,ambariClient);
    checkPollingResult(pollingResult,""String_Node_Str"" + pollingResult.name());
    pollingResult=runSmokeTest(stack,ambariClient);
    checkPollingResult(pollingResult,""String_Node_Str"" + pollingResult.name());
    cluster=handleClusterCreationSuccess(stack,cluster);
    if (recipesFound) {
      recipeEngine.executePostInstall(stack);
    }
    return cluster;
  }
 catch (  FlowCancelledException flowCancelledException) {
    throw flowCancelledException;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}","public Cluster buildAmbariCluster(Stack stack){
  Cluster cluster=stack.getCluster();
  try {
    cluster.setCreationStarted(new Date().getTime());
    cluster=clusterRepository.save(cluster);
    TLSClientConfig clientConfig=tlsSecurityService.buildTLSClientConfig(stack.getId(),cluster.getAmbariIp());
    AmbariClient ambariClient=ambariClientProvider.getAmbariClient(clientConfig,cluster.getUserName(),cluster.getPassword());
    setBaseRepoURL(cluster,ambariClient);
    addBlueprint(stack,ambariClient,cluster.getBlueprint());
    int nodeCount=stack.getFullNodeCountWithoutDecommissionedNodes() - stack.getGateWayNodeCount();
    Set<HostGroup> hostGroups=hostGroupRepository.findHostGroupsInCluster(cluster.getId());
    Map<String,List<String>> hostGroupMappings=buildHostGroupAssociations(hostGroups);
    hostGroups=saveHostMetadata(cluster,hostGroupMappings);
    Set<HostMetadata> hostsInCluster=hostMetadataRepository.findHostsInCluster(cluster.getId());
    PollingResult waitForHostsResult=waitForHosts(stack,ambariClient,nodeCount,hostsInCluster);
    checkPollingResult(waitForHostsResult,""String_Node_Str"" + waitForHostsResult.name());
    boolean recipesFound=recipesFound(hostGroups);
    if (recipesFound) {
      recipeEngine.setupRecipes(stack,hostGroups);
      recipeEngine.executePreInstall(stack);
    }
    ambariClient.createCluster(cluster.getName(),cluster.getBlueprint().getBlueprintName(),hostGroupMappings);
    PollingResult pollingResult=waitForClusterInstall(stack,ambariClient);
    checkPollingResult(pollingResult,""String_Node_Str"" + pollingResult.name());
    pollingResult=runSmokeTest(stack,ambariClient);
    checkPollingResult(pollingResult,""String_Node_Str"" + pollingResult.name());
    cluster=handleClusterCreationSuccess(stack,cluster);
    if (recipesFound) {
      recipeEngine.executePostInstall(stack);
    }
    return cluster;
  }
 catch (  FlowCancelledException flowCancelledException) {
    throw flowCancelledException;
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage(),e);
    throw new AmbariOperationFailedException(e.getMessage(),e);
  }
}",0.8793993430314406
63939,"private void validateIamRoleIsAssumable(AwsCredential awsCredential){
  try {
    crossAccountCredentialsProvider.retrieveSessionCredentials(CrossAccountCredentialsProvider.DEFAULT_SESSION_CREDENTIALS_DURATION,crossAccountCredentialsProvider.getExternalId(),awsCredential);
  }
 catch (  Exception e) {
    String errorMessage=String.format(""String_Node_Str"",awsCredential.getRoleArn(),crossAccountCredentialsProvider.getExternalId());
    LOGGER.error(errorMessage,e);
    throw new BadRequestException(errorMessage,e);
  }
}","private void validateIamRoleIsAssumable(AwsCredential awsCredential){
  try {
    crossAccountCredentialsProvider.retrieveSessionCredentials(CrossAccountCredentialsProvider.DEFAULT_SESSION_CREDENTIALS_DURATION,crossAccountCredentialsProvider.getExternalId(),awsCredential);
  }
 catch (  AmazonClientException ae) {
    if (ae.getMessage().contains(""String_Node_Str"")) {
      String errorMessage=String.format(""String_Node_Str"");
      LOGGER.error(errorMessage,ae);
      throw new BadRequestException(errorMessage,ae);
    }
  }
catch (  Exception e) {
    String errorMessage=String.format(""String_Node_Str"",awsCredential.getRoleArn(),crossAccountCredentialsProvider.getExternalId());
    LOGGER.error(errorMessage,e);
    throw new BadRequestException(errorMessage,e);
  }
}",0.6727969348659004
63940,"@Override public FlowContext terminateStack(FlowContext context) throws CloudbreakException {
  DefaultFlowContext actualContext=(DefaultFlowContext)context;
  try {
    stackUpdater.updateStackStatus(actualContext.getStackId(),DELETE_IN_PROGRESS);
    Stack stack=stackService.getById(actualContext.getStackId());
    MDCBuilder.buildMdcContext(stack);
    if (stack != null && stack.getCredential() != null) {
      logBefore(actualContext.getStackId(),context,""String_Node_Str"",DELETE_IN_PROGRESS);
      terminationService.terminateStack(stack.getId(),actualContext.getCloudPlatform());
      logAfter(actualContext.getStackId(),context,""String_Node_Str"",DELETE_IN_PROGRESS);
    }
    logBefore(actualContext.getStackId(),context,""String_Node_Str"",DELETE_IN_PROGRESS);
    terminationService.finalizeTermination(stack.getId());
    logAfter(actualContext.getStackId(),context,""String_Node_Str"",DELETE_COMPLETED);
    cloudbreakEventService.fireCloudbreakEvent(stack.getId(),DELETE_COMPLETED.name(),""String_Node_Str"");
    cloudbreakEventService.fireCloudbreakEvent(stack.getId(),BillingStatus.BILLING_STOPPED.name(),""String_Node_Str"");
    if (stack.getCluster() != null) {
      clusterService.updateClusterStatusByStackId(actualContext.getStackId(),DELETE_COMPLETED);
    }
    stackUpdater.updateStackStatus(actualContext.getStackId(),DELETE_COMPLETED);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage());
    throw new CloudbreakException(e);
  }
  return context;
}","@Override public FlowContext terminateStack(FlowContext context) throws CloudbreakException {
  DefaultFlowContext actualContext=(DefaultFlowContext)context;
  try {
    stackUpdater.updateStackStatus(actualContext.getStackId(),DELETE_IN_PROGRESS);
    Stack stack=stackService.getById(actualContext.getStackId());
    MDCBuilder.buildMdcContext(stack);
    if (stack != null && stack.getCredential() != null) {
      logBefore(actualContext.getStackId(),context,""String_Node_Str"",DELETE_IN_PROGRESS);
      terminationService.terminateStack(stack.getId(),actualContext.getCloudPlatform());
      logAfter(actualContext.getStackId(),context,""String_Node_Str"",DELETE_IN_PROGRESS);
    }
    cloudbreakEventService.fireCloudbreakEvent(stack.getId(),DELETE_COMPLETED.name(),""String_Node_Str"");
    cloudbreakEventService.fireCloudbreakEvent(stack.getId(),BillingStatus.BILLING_STOPPED.name(),""String_Node_Str"");
    if (stack.getCluster() != null) {
      clusterService.updateClusterStatusByStackId(actualContext.getStackId(),DELETE_COMPLETED);
    }
    stackUpdater.updateStackStatus(actualContext.getStackId(),DELETE_COMPLETED);
    terminationService.finalizeTermination(stack.getId());
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e.getMessage());
    throw new CloudbreakException(e);
  }
  return context;
}",0.6991181657848324
63941,"@Override public Boolean call() throws Exception {
  LOGGER.info(""String_Node_Str"");
  try {
    HostConfig hostConfig=new HostConfig();
    hostConfig.setNetworkMode(""String_Node_Str"");
    hostConfig.setPrivileged(true);
    hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
    Ports ports=new Ports();
    ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
    hostConfig.setPortBindings(ports);
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withHostConfig(hostConfig).withName(String.format(""String_Node_Str"",AMBARI_AGENT.getName(),id)).withEnv(String.format(""String_Node_Str"",node),String.format(""String_Node_Str"",cloudPlatform),""String_Node_Str"").withCmd(""String_Node_Str""));
    List<Bind> binds=new ArrayList<>();
    binds.add(new Bind(""String_Node_Str"",new Volume(""String_Node_Str"")));
    binds.add(new Bind(""String_Node_Str"",new Volume(""String_Node_Str"")));
    for (    String volume : dataVolumes) {
      binds.add(new Bind(volume,new Volume(volume)));
    }
    Bind[] array=new Bind[binds.size()];
    binds.toArray(array);
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))).withNetworkMode(""String_Node_Str"").withRestartPolicy(RestartPolicy.alwaysRestart()).withBinds(array));
    LOGGER.info(""String_Node_Str"");
    return true;
  }
 catch (  Exception ex) {
    LOGGER.error(""String_Node_Str"");
    throw ex;
  }
}","@Override public Boolean call() throws Exception {
  LOGGER.info(""String_Node_Str"");
  try {
    HostConfig hostConfig=new HostConfig();
    hostConfig.setNetworkMode(""String_Node_Str"");
    hostConfig.setPrivileged(true);
    hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
    Ports ports=new Ports();
    ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
    hostConfig.setPortBindings(ports);
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withHostConfig(hostConfig).withName(String.format(""String_Node_Str"",AMBARI_AGENT.getName(),id)).withEnv(String.format(""String_Node_Str"",node),String.format(""String_Node_Str"",cloudPlatform),""String_Node_Str"").withCmd(""String_Node_Str""));
    List<Bind> binds=new ArrayList<>();
    binds.add(new Bind(""String_Node_Str"",new Volume(""String_Node_Str"")));
    binds.add(new Bind(""String_Node_Str"",new Volume(""String_Node_Str"")));
    for (    String volume : dataVolumes) {
      binds.add(new Bind(volume,new Volume(volume)));
    }
    Bind[] array=new Bind[binds.size()];
    binds.toArray(array);
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))).withNetworkMode(""String_Node_Str"").withRestartPolicy(RestartPolicy.alwaysRestart()).withBinds(array));
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ConflictException ex) {
    LOGGER.warn(""String_Node_Str"",ex.getMessage());
  }
catch (  Exception ex) {
    LOGGER.error(""String_Node_Str"");
    throw ex;
  }
  return true;
}",0.9395173926668756
63942,"@Override public Boolean call() throws Exception {
  HostConfig hostConfig=new HostConfig();
  hostConfig.setNetworkMode(""String_Node_Str"");
  hostConfig.setPrivileged(true);
  hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
  Ports ports=new Ports();
  ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
  hostConfig.setPortBindings(ports);
  String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withHostConfig(hostConfig).withExposedPorts(new ExposedPort(PORT)).withEnv(String.format(""String_Node_Str"",node),String.format(""String_Node_Str""),String.format(""String_Node_Str"",cloudPlatform),String.format(""String_Node_Str"",""String_Node_Str"")).withName(AMBARI_SERVER.getName()).withCmd(""String_Node_Str""));
  DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))).withNetworkMode(""String_Node_Str"").withRestartPolicy(RestartPolicy.alwaysRestart()).withPrivileged(true));
  LOGGER.info(""String_Node_Str"");
  return true;
}","@Override public Boolean call() throws Exception {
  HostConfig hostConfig=new HostConfig();
  hostConfig.setNetworkMode(""String_Node_Str"");
  hostConfig.setPrivileged(true);
  hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
  Ports ports=new Ports();
  ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
  hostConfig.setPortBindings(ports);
  try {
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withHostConfig(hostConfig).withExposedPorts(new ExposedPort(PORT)).withEnv(String.format(""String_Node_Str"",node),String.format(""String_Node_Str""),String.format(""String_Node_Str"",cloudPlatform),String.format(""String_Node_Str"",""String_Node_Str"")).withName(AMBARI_SERVER.getName()).withCmd(""String_Node_Str""));
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))).withNetworkMode(""String_Node_Str"").withRestartPolicy(RestartPolicy.alwaysRestart()).withPrivileged(true));
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ConflictException ex) {
    LOGGER.warn(""String_Node_Str"",ex.getMessage());
  }
  return true;
}",0.9539641943734016
63943,"@Override public Boolean call() throws Exception {
  HostConfig hostConfig=new HostConfig();
  hostConfig.setPrivileged(true);
  hostConfig.setNetworkMode(""String_Node_Str"");
  hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
  String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withEnv(String.format(""String_Node_Str"",""String_Node_Str""),String.format(""String_Node_Str"",""String_Node_Str""),String.format(""String_Node_Str"",node)).withHostConfig(hostConfig).withName(AMBARI_DB.getName()));
  DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withRestartPolicy(RestartPolicy.alwaysRestart()).withNetworkMode(""String_Node_Str"").withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
  LOGGER.info(""String_Node_Str"");
  return true;
}","@Override public Boolean call() throws Exception {
  try {
    HostConfig hostConfig=new HostConfig();
    hostConfig.setPrivileged(true);
    hostConfig.setNetworkMode(""String_Node_Str"");
    hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withEnv(String.format(""String_Node_Str"",""String_Node_Str""),String.format(""String_Node_Str"",""String_Node_Str""),String.format(""String_Node_Str"",node)).withHostConfig(hostConfig).withName(AMBARI_DB.getName()));
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withRestartPolicy(RestartPolicy.alwaysRestart()).withNetworkMode(""String_Node_Str"").withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ConflictException ex) {
    LOGGER.warn(""String_Node_Str"",ex.getMessage());
  }
  return true;
}",0.9344632768361582
63944,"@Override public Boolean call() throws Exception {
  LOGGER.info(""String_Node_Str"");
  HostConfig hostConfig=new HostConfig();
  hostConfig.setPrivileged(true);
  hostConfig.setNetworkMode(""String_Node_Str"");
  hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
  Ports ports=new Ports();
  ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
  hostConfig.setPortBindings(ports);
  try {
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withHostConfig(hostConfig).withName(String.format(""String_Node_Str"",CONSUL_WATCH.getName(),id)).withCmd(""String_Node_Str""));
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))).withNetworkMode(""String_Node_Str"").withRestartPolicy(RestartPolicy.alwaysRestart()).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
    LOGGER.info(""String_Node_Str"");
    return true;
  }
 catch (  Exception ex) {
    LOGGER.info(""String_Node_Str"");
    throw ex;
  }
}","@Override public Boolean call() throws Exception {
  LOGGER.info(""String_Node_Str"");
  HostConfig hostConfig=new HostConfig();
  hostConfig.setPrivileged(true);
  hostConfig.setNetworkMode(""String_Node_Str"");
  hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
  Ports ports=new Ports();
  ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
  hostConfig.setPortBindings(ports);
  try {
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withHostConfig(hostConfig).withName(String.format(""String_Node_Str"",CONSUL_WATCH.getName(),id)).withCmd(""String_Node_Str""));
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))).withNetworkMode(""String_Node_Str"").withRestartPolicy(RestartPolicy.alwaysRestart()).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ConflictException ex) {
    LOGGER.warn(""String_Node_Str"",ex.getMessage());
  }
catch (  Exception ex) {
    LOGGER.info(""String_Node_Str"");
    throw ex;
  }
  return true;
}",0.9177787343951788
63945,"@Override public Boolean call() throws Exception {
  HostConfig hostConfig=new HostConfig();
  hostConfig.setPrivileged(true);
  String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(containerName).withName(MUNCHAUSEN.getName() + new Date().getTime()).withHostConfig(hostConfig).withCmd(cmd));
  DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
  LOGGER.info(""String_Node_Str"");
  return true;
}","@Override public Boolean call() throws Exception {
  try {
    HostConfig hostConfig=new HostConfig();
    hostConfig.setPrivileged(true);
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(containerName).withName(MUNCHAUSEN.getName() + new Date().getTime()).withHostConfig(hostConfig).withCmd(cmd));
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
    LOGGER.info(""String_Node_Str"");
  }
 catch (  ConflictException ex) {
    LOGGER.warn(""String_Node_Str"",ex.getMessage());
  }
  return true;
}",0.9036144578313252
63946,"@Override public Boolean call() throws Exception {
  LOGGER.info(String.format(""String_Node_Str"",nodeName,privateIp));
  HostConfig hostConfig=new HostConfig();
  hostConfig.setPrivileged(true);
  hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
  Ports ports=new Ports();
  ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
  hostConfig.setPortBindings(ports);
  String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withEnv(String.format(""String_Node_Str"",nodeName)).withHostConfig(hostConfig).withName(REGISTRATOR.getName()).withCmd(String.format(""String_Node_Str"",privateIp)));
  DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))).withRestartPolicy(RestartPolicy.alwaysRestart()).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))));
  LOGGER.info(String.format(""String_Node_Str"",nodeName));
  return true;
}","@Override public Boolean call() throws Exception {
  try {
    LOGGER.info(String.format(""String_Node_Str"",nodeName,privateIp));
    HostConfig hostConfig=new HostConfig();
    hostConfig.setPrivileged(true);
    hostConfig.setRestartPolicy(RestartPolicy.alwaysRestart());
    Ports ports=new Ports();
    ports.add(new PortBinding(new Ports.Binding(PORT),new ExposedPort(PORT)));
    hostConfig.setPortBindings(ports);
    String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(imageName).withEnv(String.format(""String_Node_Str"",nodeName)).withHostConfig(hostConfig).withName(REGISTRATOR.getName()).withCmd(String.format(""String_Node_Str"",privateIp)));
    DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))).withRestartPolicy(RestartPolicy.alwaysRestart()).withPortBindings(new PortBinding(new Ports.Binding(""String_Node_Str"",PORT),new ExposedPort(PORT))));
    LOGGER.info(String.format(""String_Node_Str"",nodeName));
  }
 catch (  ConflictException ex) {
    LOGGER.warn(""String_Node_Str"",ex.getMessage());
  }
  return true;
}",0.9441903019213176
63947,"private Operation executeOperations(GccRemoveReadyPollerObject gcpRemoveReadyPollerObject) throws Exception {
  Operation operation=null;
  try {
    if (gcpRemoveReadyPollerObject.getZoneOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getZoneOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getZoneOperations().get().execute();
    }
 else     if (gcpRemoveReadyPollerObject.getRegionOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getRegionOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getRegionOperations().get().execute();
    }
 else {
      LOGGER.error(""String_Node_Str"");
    }
  }
 catch (  GoogleJsonResponseException e) {
    LOGGER.debug(""String_Node_Str"",e);
    if (e.getDetails().get(""String_Node_Str"").equals(NOT_FOUND)) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getGlobalOperations().keySet());
      operation=gcpRemoveReadyPollerObject.getGlobalOperations().execute();
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      throw e;
    }
  }
  return operation;
}","private Operation executeOperations(GccRemoveReadyPollerObject gcpRemoveReadyPollerObject) throws Exception {
  Operation operation=null;
  try {
    if (gcpRemoveReadyPollerObject.getZoneOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getZoneOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getZoneOperations().get().execute();
    }
 else     if (gcpRemoveReadyPollerObject.getRegionOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getRegionOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getRegionOperations().get().execute();
    }
 else {
      LOGGER.error(""String_Node_Str"");
    }
  }
 catch (  GoogleJsonResponseException e) {
    LOGGER.debug(""String_Node_Str"",e.getStatusMessage());
    if (e.getDetails().get(""String_Node_Str"").equals(NOT_FOUND)) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getGlobalOperations().keySet());
      operation=gcpRemoveReadyPollerObject.getGlobalOperations().execute();
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      throw e;
    }
  }
  return operation;
}",0.9917066783064163
63948,"private Operation executeOperations(GccRemoveReadyPollerObject gcpRemoveReadyPollerObject) throws Exception {
  Operation operation=null;
  try {
    if (gcpRemoveReadyPollerObject.getZoneOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getZoneOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getZoneOperations().get().execute();
    }
 else     if (gcpRemoveReadyPollerObject.getRegionOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getRegionOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getRegionOperations().get().execute();
    }
 else {
      LOGGER.error(""String_Node_Str"");
    }
  }
 catch (  GoogleJsonResponseException e) {
    LOGGER.debug(""String_Node_Str"",e);
    if (e.getDetails().get(""String_Node_Str"").equals(NOT_FOUND)) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getGlobalOperations().keySet());
      operation=gcpRemoveReadyPollerObject.getGlobalOperations().execute();
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      throw e;
    }
  }
  return operation;
}","private Operation executeOperations(GccRemoveReadyPollerObject gcpRemoveReadyPollerObject) throws Exception {
  Operation operation=null;
  try {
    if (gcpRemoveReadyPollerObject.getZoneOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getZoneOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getZoneOperations().get().execute();
    }
 else     if (gcpRemoveReadyPollerObject.getRegionOperations().isPresent()) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getRegionOperations().asSet());
      operation=gcpRemoveReadyPollerObject.getRegionOperations().get().execute();
    }
 else {
      LOGGER.error(""String_Node_Str"");
    }
  }
 catch (  GoogleJsonResponseException e) {
    LOGGER.debug(""String_Node_Str"",e.getStatusMessage());
    if (e.getDetails().get(""String_Node_Str"").equals(NOT_FOUND)) {
      LOGGER.debug(""String_Node_Str"",gcpRemoveReadyPollerObject.getGlobalOperations().keySet());
      operation=gcpRemoveReadyPollerObject.getGlobalOperations().execute();
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      throw e;
    }
  }
  return operation;
}",0.9917066783064163
63949,"private Certificate getCertificate(AzureCredential azureCredential,String serviceFilesPathWithoutExtension) throws Exception {
  keyGeneratorService.generateKey(""String_Node_Str"",azureCredential,""String_Node_Str"",serviceFilesPathWithoutExtension + ""String_Node_Str"");
  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());
  char[] pass=azureCredential.getJks().toCharArray();
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(new File(serviceFilesPathWithoutExtension + ""String_Node_Str""));
    ks.load(fis,pass);
  }
  finally {
    if (fis != null) {
      fis.close();
    }
  }
  return ks.getCertificate(""String_Node_Str"");
}","private Certificate getCertificate(AzureCredential azureCredential,String serviceFilesPathWithoutExtension) throws Exception {
  String email=userDetailsService.getDetails(azureCredential.getOwner(),UserFilterField.USERID).getUsername();
  keyGeneratorService.generateKey(email,azureCredential,""String_Node_Str"",serviceFilesPathWithoutExtension + ""String_Node_Str"");
  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());
  char[] pass=azureCredential.getJks().toCharArray();
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(new File(serviceFilesPathWithoutExtension + ""String_Node_Str""));
    ks.load(fis,pass);
  }
  finally {
    if (fis != null) {
      fis.close();
    }
  }
  return ks.getCertificate(""String_Node_Str"");
}",0.3900355871886121
63950,"public void generateKey(String user,AzureCredential azureCredential,String alias,String path) throws Exception {
  String command=StringUtils.join(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",""String_Node_Str"" + user + azureCredential.getPostFix()+ ""String_Node_Str""},""String_Node_Str"");
  Process p=Runtime.getRuntime().exec(command);
  p.waitFor();
}","public void generateKey(String user,AzureCredential azureCredential,String alias,String path) throws Exception {
  String command=StringUtils.join(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",""String_Node_Str"" + user + ""String_Node_Str""},""String_Node_Str"");
  Process p=Runtime.getRuntime().exec(command);
  p.waitFor();
}",0.9740484429065744
63951,"@Override public boolean checkStatus(AzureResourcePollerObject t){
  List<HttpResponseDecorator> responses=t.getResponses();
  boolean result=true;
  Iterator<HttpResponseDecorator> iterator=responses.iterator();
  while (iterator.hasNext()) {
    HttpResponseDecorator response=iterator.next();
    String requestId=getRequestId(response);
    String requestStatus=String.valueOf(t.getAzureClient().getRequestStatus(requestId));
    JsonNode jsonFromString=jsonHelper.createJsonFromString(requestStatus);
    String status=jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").asText();
    if (""String_Node_Str"".equals(status)) {
      result=false;
      break;
    }
 else     if (""String_Node_Str"".equals(status)) {
      throw new AzureResourceException(jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"").asText());
    }
 else {
      iterator.remove();
    }
  }
  return result;
}","@Override public boolean checkStatus(AzureResourcePollerObject t){
  List<HttpResponseDecorator> responses=t.getResponses();
  boolean result=true;
  Iterator<HttpResponseDecorator> iterator=responses.iterator();
  while (iterator.hasNext()) {
    HttpResponseDecorator response=iterator.next();
    String requestId=getRequestId(response);
    String requestStatus=String.valueOf(t.getAzureClient().getRequestStatus(requestId));
    JsonNode jsonFromString=jsonHelper.createJsonFromString(requestStatus);
    String status=jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").asText();
    if (""String_Node_Str"".equals(status)) {
      result=false;
      break;
    }
 else     if (""String_Node_Str"".equals(status)) {
      String error=jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"").asText();
      throw new AzureResourceException(error);
    }
 else {
      iterator.remove();
    }
  }
  return result;
}",0.832271762208068
63952,"@Override public Boolean create(final CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureCloudServiceCreateRequest aCSCR=(AzureCloudServiceCreateRequest)createResourceRequest;
  HttpResponseDecorator cloudServiceResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createCloudService(aCSCR.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),cloudServiceResponse);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(final CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureCloudServiceCreateRequest aCSCR=(AzureCloudServiceCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator cloudServiceResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createCloudService(aCSCR.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),cloudServiceResponse);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.9287749287749288
63953,"@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureServiceCertificateCreateRequest aCSCR=(AzureServiceCertificateCreateRequest)createResourceRequest;
  HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)aCSCR.getAzureClient().createServiceCertificate(aCSCR.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),serviceCertificate);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureServiceCertificateCreateRequest aCSCR=(AzureServiceCertificateCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)aCSCR.getAzureClient().createServiceCertificate(aCSCR.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),serviceCertificate);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.9307479224376732
63954,"@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureVirtualMachineCreateRequest aCSCR=(AzureVirtualMachineCreateRequest)createResourceRequest;
  HttpResponseDecorator virtualMachineResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createVirtualMachine(aCSCR.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),virtualMachineResponse);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureVirtualMachineCreateRequest aCSCR=(AzureVirtualMachineCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator virtualMachineResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createVirtualMachine(aCSCR.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),virtualMachineResponse);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.9303621169916436
63955,"@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureNetworkCreateRequest request=(AzureNetworkCreateRequest)createResourceRequest;
  Stack stack=stackRepository.findById(request.getStackId());
  if (!request.getAzureClient().getVirtualNetworkConfiguration().toString().contains(request.getName())) {
    HttpResponseDecorator virtualNetworkResponse=(HttpResponseDecorator)request.getAzureClient().createVirtualNetwork(request.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(request.getAzureClient(),stack,virtualNetworkResponse);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
  return true;
}","@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureNetworkCreateRequest request=(AzureNetworkCreateRequest)createResourceRequest;
  try {
    Stack stack=stackRepository.findById(request.getStackId());
    if (!request.getAzureClient().getVirtualNetworkConfiguration().toString().contains(request.getName())) {
      HttpResponseDecorator virtualNetworkResponse=(HttpResponseDecorator)request.getAzureClient().createVirtualNetwork(request.getProps());
      AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(request.getAzureClient(),stack,virtualNetworkResponse);
      azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    }
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.939150401836969
63956,"@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureReservedIpCreateRequest azureReservedIpCreateRequest=(AzureReservedIpCreateRequest)createResourceRequest;
  HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)azureReservedIpCreateRequest.getAzureClient().createReservedIP(azureReservedIpCreateRequest.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(azureReservedIpCreateRequest.getAzureClient(),azureReservedIpCreateRequest.getStack(),serviceCertificate);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureReservedIpCreateRequest azureReservedIpCreateRequest=(AzureReservedIpCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)azureReservedIpCreateRequest.getAzureClient().createReservedIP(azureReservedIpCreateRequest.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(azureReservedIpCreateRequest.getAzureClient(),azureReservedIpCreateRequest.getStack(),serviceCertificate);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.937578027465668
63957,"private Certificate getCertificate(AzureCredential azureCredential,String serviceFilesPathWithoutExtension) throws Exception {
  keyGeneratorService.generateKey(""String_Node_Str"",azureCredential,""String_Node_Str"",serviceFilesPathWithoutExtension + ""String_Node_Str"");
  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());
  char[] pass=azureCredential.getJks().toCharArray();
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(new File(serviceFilesPathWithoutExtension + ""String_Node_Str""));
    ks.load(fis,pass);
  }
  finally {
    if (fis != null) {
      fis.close();
    }
  }
  return ks.getCertificate(""String_Node_Str"");
}","private Certificate getCertificate(AzureCredential azureCredential,String serviceFilesPathWithoutExtension) throws Exception {
  String email=userDetailsService.getDetails(azureCredential.getOwner(),UserFilterField.USERID).getUsername();
  keyGeneratorService.generateKey(email,azureCredential,""String_Node_Str"",serviceFilesPathWithoutExtension + ""String_Node_Str"");
  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());
  char[] pass=azureCredential.getJks().toCharArray();
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(new File(serviceFilesPathWithoutExtension + ""String_Node_Str""));
    ks.load(fis,pass);
  }
  finally {
    if (fis != null) {
      fis.close();
    }
  }
  return ks.getCertificate(""String_Node_Str"");
}",0.3900355871886121
63958,"public void generateKey(String user,AzureCredential azureCredential,String alias,String path) throws Exception {
  String command=StringUtils.join(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",""String_Node_Str"" + user + azureCredential.getPostFix()+ ""String_Node_Str""},""String_Node_Str"");
  Process p=Runtime.getRuntime().exec(command);
  p.waitFor();
}","public void generateKey(String user,AzureCredential azureCredential,String alias,String path) throws Exception {
  String command=StringUtils.join(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",path,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",AzureStackUtil.DEFAULT_JKS_PASS,""String_Node_Str"",""String_Node_Str"" + user + ""String_Node_Str""},""String_Node_Str"");
  Process p=Runtime.getRuntime().exec(command);
  p.waitFor();
}",0.9740484429065744
63959,"@Override public boolean checkStatus(AzureResourcePollerObject t){
  List<HttpResponseDecorator> responses=t.getResponses();
  boolean result=true;
  Iterator<HttpResponseDecorator> iterator=responses.iterator();
  while (iterator.hasNext()) {
    HttpResponseDecorator response=iterator.next();
    String requestId=getRequestId(response);
    String requestStatus=String.valueOf(t.getAzureClient().getRequestStatus(requestId));
    JsonNode jsonFromString=jsonHelper.createJsonFromString(requestStatus);
    String status=jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").asText();
    if (""String_Node_Str"".equals(status)) {
      result=false;
      break;
    }
 else     if (""String_Node_Str"".equals(status)) {
      throw new AzureResourceException(jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"").asText());
    }
 else {
      iterator.remove();
    }
  }
  return result;
}","@Override public boolean checkStatus(AzureResourcePollerObject t){
  List<HttpResponseDecorator> responses=t.getResponses();
  boolean result=true;
  Iterator<HttpResponseDecorator> iterator=responses.iterator();
  while (iterator.hasNext()) {
    HttpResponseDecorator response=iterator.next();
    String requestId=getRequestId(response);
    String requestStatus=String.valueOf(t.getAzureClient().getRequestStatus(requestId));
    JsonNode jsonFromString=jsonHelper.createJsonFromString(requestStatus);
    String status=jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").asText();
    if (""String_Node_Str"".equals(status)) {
      result=false;
      break;
    }
 else     if (""String_Node_Str"".equals(status)) {
      String error=jsonFromString.get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"").asText();
      throw new AzureResourceException(error);
    }
 else {
      iterator.remove();
    }
  }
  return result;
}",0.832271762208068
63960,"@Override public Boolean create(final CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureCloudServiceCreateRequest aCSCR=(AzureCloudServiceCreateRequest)createResourceRequest;
  HttpResponseDecorator cloudServiceResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createCloudService(aCSCR.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),cloudServiceResponse);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(final CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureCloudServiceCreateRequest aCSCR=(AzureCloudServiceCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator cloudServiceResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createCloudService(aCSCR.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),cloudServiceResponse);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.9287749287749288
63961,"@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureServiceCertificateCreateRequest aCSCR=(AzureServiceCertificateCreateRequest)createResourceRequest;
  HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)aCSCR.getAzureClient().createServiceCertificate(aCSCR.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),serviceCertificate);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureServiceCertificateCreateRequest aCSCR=(AzureServiceCertificateCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)aCSCR.getAzureClient().createServiceCertificate(aCSCR.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),serviceCertificate);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.9307479224376732
63962,"@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureVirtualMachineCreateRequest aCSCR=(AzureVirtualMachineCreateRequest)createResourceRequest;
  HttpResponseDecorator virtualMachineResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createVirtualMachine(aCSCR.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),virtualMachineResponse);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(final CreateResourceRequest createResourceRequest,final String region) throws Exception {
  AzureVirtualMachineCreateRequest aCSCR=(AzureVirtualMachineCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator virtualMachineResponse=(HttpResponseDecorator)aCSCR.getAzureClient().createVirtualMachine(aCSCR.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(aCSCR.getAzureClient(),aCSCR.getStack(),virtualMachineResponse);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.9303621169916436
63963,"@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureNetworkCreateRequest request=(AzureNetworkCreateRequest)createResourceRequest;
  Stack stack=stackRepository.findById(request.getStackId());
  if (!request.getAzureClient().getVirtualNetworkConfiguration().toString().contains(request.getName())) {
    HttpResponseDecorator virtualNetworkResponse=(HttpResponseDecorator)request.getAzureClient().createVirtualNetwork(request.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(request.getAzureClient(),stack,virtualNetworkResponse);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
  return true;
}","@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureNetworkCreateRequest request=(AzureNetworkCreateRequest)createResourceRequest;
  try {
    Stack stack=stackRepository.findById(request.getStackId());
    if (!request.getAzureClient().getVirtualNetworkConfiguration().toString().contains(request.getName())) {
      HttpResponseDecorator virtualNetworkResponse=(HttpResponseDecorator)request.getAzureClient().createVirtualNetwork(request.getProps());
      AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(request.getAzureClient(),stack,virtualNetworkResponse);
      azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    }
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.939150401836969
63964,"@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureReservedIpCreateRequest azureReservedIpCreateRequest=(AzureReservedIpCreateRequest)createResourceRequest;
  HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)azureReservedIpCreateRequest.getAzureClient().createReservedIP(azureReservedIpCreateRequest.getProps());
  AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(azureReservedIpCreateRequest.getAzureClient(),azureReservedIpCreateRequest.getStack(),serviceCertificate);
  azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  return true;
}","@Override public Boolean create(CreateResourceRequest createResourceRequest,String region) throws Exception {
  AzureReservedIpCreateRequest azureReservedIpCreateRequest=(AzureReservedIpCreateRequest)createResourceRequest;
  try {
    HttpResponseDecorator serviceCertificate=(HttpResponseDecorator)azureReservedIpCreateRequest.getAzureClient().createReservedIP(azureReservedIpCreateRequest.getProps());
    AzureResourcePollerObject azureResourcePollerObject=new AzureResourcePollerObject(azureReservedIpCreateRequest.getAzureClient(),azureReservedIpCreateRequest.getStack(),serviceCertificate);
    azureResourcePollerObjectPollingService.pollWithTimeout(azureCreateResourceStatusCheckerTask,azureResourcePollerObject,POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
  }
 catch (  Exception ex) {
    throw checkException(ex);
  }
  return true;
}",0.937578027465668
63965,"public FlowContext setup(ProvisioningContext provisioningContext) throws CloudbreakException {
  Stack stack=stackRepository.findOneWithLists(provisioningContext.getStackId());
  MDCBuilder.buildMdcContext(stack);
  ContainerOrchestrator containerOrchestrator=containerOrchestrators.get(containerOrchestratorTool);
  ContainerOrchestratorClient client=containerOrchestrator.bootstrap(provisioningContext.getStackId());
  containerOrchestrator.startRegistrator(client,provisioningContext.getStackId());
  containerOrchestrator.startAmbariServer(client,provisioningContext.getStackId());
  containerOrchestrator.startAmbariAgents(client,provisioningContext.getStackId());
  containerOrchestrator.startConsulWatches(client,provisioningContext.getStackId());
  return new ProvisioningContext.Builder().setAmbariIp(provisioningContext.getAmbariIp()).setDefaultParams(stack.getId(),stack.cloudPlatform()).build();
}","public FlowContext setup(ProvisioningContext provisioningContext) throws CloudbreakException {
  Stack stack=stackRepository.findOneWithLists(provisioningContext.getStackId());
  ContainerOrchestrator containerOrchestrator=containerOrchestrators.get(containerOrchestratorTool);
  ContainerOrchestratorClient client=containerOrchestrator.bootstrap(provisioningContext.getStackId());
  containerOrchestrator.startRegistrator(client,provisioningContext.getStackId());
  containerOrchestrator.startAmbariServer(client,provisioningContext.getStackId());
  containerOrchestrator.startAmbariAgents(client,provisioningContext.getStackId());
  containerOrchestrator.startConsulWatches(client,provisioningContext.getStackId());
  return new ProvisioningContext.Builder().setAmbariIp(provisioningContext.getAmbariIp()).setDefaultParams(stack.getId(),stack.cloudPlatform()).build();
}",0.979225154407636
63966,"public static String createContainer(DockerClient client,CreateContainerCmd createContainerCmd) throws Exception {
  int attempts=0;
  Exception cause=null;
  String response=null;
  while (attempts < MAX_RETRIES && response == null) {
    try {
      response=createContainerCmd.exec().getId();
    }
 catch (    ProcessingException e) {
      if (e.getCause() instanceof SocketTimeoutException) {
        LOGGER.info(""String_Node_Str"");
        InspectContainerResponse inspectResponse=inspectContainer(client.inspectContainerCmd(createContainerCmd.getName()));
        if (inspectResponse != null && inspectResponse.getId() != null) {
          response=inspectResponse.getId();
        }
 else {
          attempts++;
          cause=e;
        }
      }
 else {
        throw e;
      }
    }
  }
  if (response == null) {
    throw cause;
  }
  return response;
}","public static String createContainer(DockerClient client,CreateContainerCmd createContainerCmd) throws Exception {
  int attempts=0;
  Exception cause=null;
  String response=null;
  while (attempts < MAX_RETRIES && response == null) {
    try {
      response=createContainerCmd.exec().getId();
    }
 catch (    ProcessingException e) {
      if (e.getCause() instanceof SocketTimeoutException) {
        LOGGER.info(""String_Node_Str"");
        InspectContainerResponse inspectResponse=waitForContainer(client.inspectContainerCmd(createContainerCmd.getName()));
        if (inspectResponse != null && inspectResponse.getId() != null) {
          response=inspectResponse.getId();
        }
 else {
          attempts++;
          cause=e;
        }
      }
 else {
        throw e;
      }
    }
  }
  if (response == null) {
    throw cause;
  }
  return response;
}",0.9919447640966628
63967,"@Override public boolean checkStatus(SwarmContext swarmContext){
  LOGGER.info(""String_Node_Str"");
  try {
    List<Object> driverStatus=swarmContext.getDockerClient().infoCmd().exec().getDriverStatuses();
    LOGGER.debug(""String_Node_Str"");
    for (    Object element : driverStatus) {
      try {
        List objects=(ArrayList)element;
        if (objects.get(0).toString().endsWith(""String_Node_Str"") && Integer.valueOf(objects.get(1).toString()) == swarmContext.getNodeCount()) {
          return true;
        }
      }
 catch (      Exception e) {
        LOGGER.error(String.format(""String_Node_Str"",element),e);
      }
    }
  }
 catch (  Exception ex) {
    return false;
  }
  return false;
}","@Override public boolean checkStatus(SwarmContext swarmContext){
  LOGGER.info(""String_Node_Str"");
  try {
    List<Object> driverStatus=swarmContext.getDockerClient().infoCmd().exec().getDriverStatuses();
    LOGGER.debug(""String_Node_Str"");
    for (    Object element : driverStatus) {
      try {
        List objects=(ArrayList)element;
        if (objects.get(0).toString().endsWith(""String_Node_Str"") && Integer.valueOf(objects.get(1).toString()) == swarmContext.getNodeCount()) {
          return true;
        }
      }
 catch (      Exception e) {
        LOGGER.error(String.format(""String_Node_Str"",element),e);
      }
    }
  }
 catch (  Throwable t) {
    return false;
  }
  return false;
}",0.983722576079264
63968,"@Override public ContainerOrchestratorClient bootstrap(Long stackId) throws CloudbreakException {
  try {
    Stack stack=stackRepository.findOneWithLists(stackId);
    InstanceGroup gateway=stack.getGatewayInstanceGroup();
    InstanceMetaData gatewayInstance=gateway.getInstanceMetaData().iterator().next();
    String consulServers=getConsulServers(gateway,stack.getCoreInstanceGroups(),stack.getConsulServers());
    String dockerAddresses=getDockerAddressInventory(stack.getInstanceGroups());
    DockerClient dockerApiClient=DockerClientBuilder.getInstance(getDockerClientConfig(gatewayInstance.getPublicIp())).build();
    dockerInfoPollingService.pollWithTimeout(dockerCheckerTask,new DockerContext(stack,dockerApiClient,new ArrayList<String>()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    dockerInfoPollingService.pollWithTimeout(dockerImageCheckerTask,new DockerContext(stack,dockerApiClient,ImmutableList.<String>builder().add(ambariDockerImageName).add(munchausenDockerImageName).add(registratorDockerImageName).add(consulWatchPlugnDockerImageName).add(postgresDockerImageName).build()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    String[] cmd={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",consulServers,dockerAddresses};
    new MunchausenBootstrap(dockerApiClient,munchausenDockerImageName,cmd).call();
    DockerClient swarmManagerClient=DockerClientBuilder.getInstance(getSwarmClientConfig(gatewayInstance.getPublicIp())).build();
    swarmInfoPollingService.pollWithTimeout(swarmCheckerTask,new SwarmContext(stack,swarmManagerClient,stack.getFullNodeCount()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    return new SwarmContainerOrchestratorClient(swarmManagerClient);
  }
 catch (  Exception e) {
    throw new CloudbreakException(e);
  }
}","@Override public ContainerOrchestratorClient bootstrap(Long stackId) throws CloudbreakException {
  try {
    Stack stack=stackRepository.findOneWithLists(stackId);
    InstanceGroup gateway=stack.getGatewayInstanceGroup();
    LOGGER.info(stackId + ""String_Node_Str"" + gateway.getId());
    InstanceMetaData gatewayInstance=gateway.getInstanceMetaData().iterator().next();
    LOGGER.info(stackId + ""String_Node_Str"" + gatewayInstance.getPublicIp());
    String consulServers=getConsulServers(gateway,stack.getCoreInstanceGroups(),stack.getConsulServers());
    String dockerAddresses=getDockerAddressInventory(stack.getInstanceGroups());
    DockerClient dockerApiClient=DockerClientBuilder.getInstance(getDockerClientConfig(gatewayInstance.getPublicIp())).withDockerCmdExecFactory(new DockerCmdExecFactoryImpl()).build();
    dockerInfoPollingService.pollWithTimeout(dockerCheckerTask,new DockerContext(stack,dockerApiClient,new ArrayList<String>()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    dockerInfoPollingService.pollWithTimeout(dockerImageCheckerTask,new DockerContext(stack,dockerApiClient,ImmutableList.<String>builder().add(ambariDockerImageName).add(munchausenDockerImageName).add(registratorDockerImageName).add(consulWatchPlugnDockerImageName).add(postgresDockerImageName).build()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    String[] cmd={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",consulServers,dockerAddresses};
    new MunchausenBootstrap(dockerApiClient,munchausenDockerImageName,cmd).call();
    DockerClient swarmManagerClient=DockerClientBuilder.getInstance(getSwarmClientConfig(gatewayInstance.getPublicIp())).withDockerCmdExecFactory(new DockerCmdExecFactoryImpl()).build();
    swarmInfoPollingService.pollWithTimeout(swarmCheckerTask,new SwarmContext(stack,swarmManagerClient,stack.getFullNodeCount()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    return new SwarmContainerOrchestratorClient(swarmManagerClient);
  }
 catch (  Exception e) {
    throw new CloudbreakException(e);
  }
}",0.808870116156283
63969,"@Override public void newHostgroupNodesSetup(Long stackId,Set<String> instanceIds,String hostGroup) throws CloudbreakException {
  try {
    Set<InstanceMetaData> instanceMetaDatas=new HashSet<>();
    for (    String instanceId : instanceIds) {
      InstanceMetaData instanceMetaData=instanceMetaDataRepository.findHostInStackByInstanceId(stackId,instanceId);
      instanceMetaDatas.add(instanceMetaData);
    }
    Stack stack=stackRepository.findOneWithLists(stackId);
    HostGroup hostGroupObject=hostGroupRepository.findHostGroupsByInstanceGroupName(stack.getCluster().getId(),hostGroup);
    ExecutorService executorService=Executors.newFixedThreadPool(TEN);
    List<Future<Boolean>> futures=new ArrayList<>();
    DockerClient swarmManagerClient=DockerClientBuilder.getInstance(getSwarmClientConfig(stack.getAmbariIp())).build();
    swarmInfoPollingService.pollWithTimeout(swarmCheckerTask,new SwarmContext(stack,swarmManagerClient,stack.getFullNodeCount()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    for (    InstanceMetaData data : instanceMetaDatas) {
      futures.add(executorService.submit(new ConsulWatchBootstrap(swarmManagerClient,consulWatchPlugnDockerImageName,getLongNameTag(data.getLongName()),data.getPrivateIp(),data.getId())));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
    futures=new ArrayList<>();
    for (    InstanceMetaData data : instanceMetaDatas) {
      AmbariAgentBootstrap agentCreate=new AmbariAgentBootstrap(swarmManagerClient,data.getPrivateIp(),getLongNameTag(data.getLongName()),ambariDockerImageName,hostGroupObject.getInstanceGroup().getTemplate().getVolumeCount(),data.getId());
      futures.add(executorService.submit(agentCreate));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
  }
 catch (  Exception ex) {
    throw new CloudbreakException(ex);
  }
}","@Override public void newHostgroupNodesSetup(Long stackId,Set<String> instanceIds,String hostGroup) throws CloudbreakException {
  try {
    Set<InstanceMetaData> instanceMetaDatas=new HashSet<>();
    for (    String instanceId : instanceIds) {
      InstanceMetaData instanceMetaData=instanceMetaDataRepository.findHostInStackByInstanceId(stackId,instanceId);
      instanceMetaDatas.add(instanceMetaData);
    }
    Stack stack=stackRepository.findOneWithLists(stackId);
    HostGroup hostGroupObject=hostGroupRepository.findHostGroupsByInstanceGroupName(stack.getCluster().getId(),hostGroup);
    ExecutorService executorService=Executors.newFixedThreadPool(TEN);
    List<Future<Boolean>> futures=new ArrayList<>();
    DockerClient swarmManagerClient=DockerClientBuilder.getInstance(getSwarmClientConfig(stack.getAmbariIp())).withDockerCmdExecFactory(new DockerCmdExecFactoryImpl()).build();
    swarmInfoPollingService.pollWithTimeout(swarmCheckerTask,new SwarmContext(stack,swarmManagerClient,stack.getFullNodeCount()),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
    for (    InstanceMetaData data : instanceMetaDatas) {
      futures.add(executorService.submit(new ConsulWatchBootstrap(swarmManagerClient,consulWatchPlugnDockerImageName,getLongNameTag(data.getLongName()),data.getPrivateIp(),data.getId())));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
    futures=new ArrayList<>();
    for (    InstanceMetaData data : instanceMetaDatas) {
      AmbariAgentBootstrap agentCreate=new AmbariAgentBootstrap(swarmManagerClient,data.getPrivateIp(),getLongNameTag(data.getLongName()),ambariDockerImageName,hostGroupObject.getInstanceGroup().getTemplate().getVolumeCount(),data.getId());
      futures.add(executorService.submit(agentCreate));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
  }
 catch (  Exception ex) {
    throw new CloudbreakException(ex);
  }
}",0.9850589777195282
63970,"public Boolean call() throws Exception {
  HostConfig hostConfig=new HostConfig();
  hostConfig.setPrivileged(true);
  String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(containerName).withName(MUNCHAUSEN.getName() + new Date().getTime()).withHostConfig(hostConfig).withCmd(cmd));
  DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
  return true;
}","public Boolean call() throws Exception {
  HostConfig hostConfig=new HostConfig();
  hostConfig.setPrivileged(true);
  String containerId=DockerClientUtil.createContainer(docker,docker.createContainerCmd(containerName).withName(MUNCHAUSEN.getName() + new Date().getTime()).withHostConfig(hostConfig).withCmd(cmd));
  DockerClientUtil.startContainer(docker,docker.startContainerCmd(containerId).withBinds(new Bind(""String_Node_Str"",new Volume(""String_Node_Str""))));
  LOGGER.info(""String_Node_Str"");
  return true;
}",0.9658634538152612
63971,"public AmbariRoleAllocationComplete allocateRoles(Long stackId){
  AmbariRoleAllocationComplete allocationComplete=null;
  Stack stack=stackRepository.findById(stackId);
  MDCBuilder.buildMdcContext(stack);
  Set<InstanceMetaData> allInstanceMetaData=stack.getAllInstanceMetaData();
  PollingResult pollingResult=waitForConsulAgents(stack,allInstanceMetaData,Collections.<InstanceMetaData>emptySet());
  if (isSuccess(pollingResult)) {
    updateWithConsulData(allInstanceMetaData);
    instanceMetaDataRepository.save(allInstanceMetaData);
    allocationComplete=new AmbariRoleAllocationComplete(stack,stack.getAmbariIp());
  }
  return allocationComplete;
}","public AmbariRoleAllocationComplete allocateRoles(Long stackId){
  AmbariRoleAllocationComplete allocationComplete=null;
  Stack stack=stackRepository.findById(stackId);
  MDCBuilder.buildMdcContext(stack);
  Set<InstanceMetaData> allInstanceMetaData=stack.getAllInstanceMetaData();
  PollingResult pollingResult=waitForConsulAgents(stack,allInstanceMetaData,Collections.<InstanceMetaData>emptySet());
  if (!isSuccess(pollingResult)) {
    throw new WrongMetadataException(""String_Node_Str"");
  }
  updateWithConsulData(allInstanceMetaData);
  instanceMetaDataRepository.save(allInstanceMetaData);
  return new AmbariRoleAllocationComplete(stack,stack.getAmbariIp());
}",0.8984198645598194
63972,"@Test(expected=WrongMetadataException.class) public void testAllocateRolesWhenCannotConnectConsul(){
  stack.getInstanceGroupByInstanceGroupName(INSTANCE_GROUP_1).setInstanceMetaData(createInstanceMetaDataWithAmbariAddress(DUMMY_AMBARI_ADDRESS));
  stack.getInstanceGroupByInstanceGroupName(INSTANCE_GROUP_2).setInstanceMetaData(createInstanceMetaDataWithAmbariAddress(DUMMY_AMBARI_ADDRESS));
  given(stackRepository.findById(1L)).willReturn(stack);
  given(stackUpdater.updateStackMetaData(anyLong(),anySet(),anyString())).willReturn(stack);
  given(stackUpdater.updateMetadataReady(1L,true)).willReturn(stack);
  given(consulPollingService.pollWithTimeout(any(ConsulServiceCheckerTask.class),any(ConsulContext.class),anyInt(),anyInt())).willReturn(PollingResult.SUCCESS).willReturn(PollingResult.EXIT);
  doNothing().when(underTest).updateWithConsulData(anySet());
  underTest.allocateRoles(1L);
  verify(consulPollingService,times(2)).pollWithTimeout(any(ConsulServiceCheckerTask.class),any(ConsulContext.class),anyInt(),anyInt());
}","@Test(expected=WrongMetadataException.class) public void testAllocateRolesWhenCannotConnectConsul(){
  stack.getInstanceGroupByInstanceGroupName(INSTANCE_GROUP_1).setInstanceMetaData(createInstanceMetaDataWithAmbariAddress(DUMMY_AMBARI_ADDRESS));
  stack.getInstanceGroupByInstanceGroupName(INSTANCE_GROUP_2).setInstanceMetaData(createInstanceMetaDataWithAmbariAddress(DUMMY_AMBARI_ADDRESS));
  given(stackRepository.findById(1L)).willReturn(stack);
  given(consulPollingService.pollWithTimeout(any(ConsulServiceCheckerTask.class),any(ConsulContext.class),anyInt(),anyInt())).willReturn(PollingResult.TIMEOUT).willReturn(PollingResult.EXIT);
  doNothing().when(underTest).updateWithConsulData(anySet());
  underTest.allocateRoles(1L);
}",0.5485327313769752
63973,"@Before public void setUp(){
  underTest=new AmbariRoleAllocator();
  MockitoAnnotations.initMocks(this);
  coreInstanceMetaData=createCoreInstanceMetaData();
  stack=createStack();
}","@Before public void setUp(){
  underTest=new AmbariRoleAllocator();
  MockitoAnnotations.initMocks(this);
  stack=createStack();
}",0.8306709265175719
63974,"@Bean public MailSender mailSender(){
  MailSender mailSender=null;
  if (isMailSendingConfigured()) {
    mailSender=new JavaMailSenderImpl();
    ((JavaMailSenderImpl)mailSender).setHost(host);
    ((JavaMailSenderImpl)mailSender).setPort(port);
    if (!StringUtils.isEmpty(userName)) {
      ((JavaMailSenderImpl)mailSender).setUsername(userName);
    }
    if (!StringUtils.isEmpty(password)) {
      ((JavaMailSenderImpl)mailSender).setPassword(password);
    }
    ((JavaMailSenderImpl)mailSender).setJavaMailProperties(getJavaMailProperties());
  }
 else {
    mailSender=new DummyEmailSender();
  }
  return mailSender;
}","@Bean public JavaMailSender mailSender(){
  JavaMailSender mailSender=null;
  if (isMailSendingConfigured()) {
    mailSender=new JavaMailSenderImpl();
    ((JavaMailSenderImpl)mailSender).setHost(host);
    ((JavaMailSenderImpl)mailSender).setPort(port);
    if (!StringUtils.isEmpty(userName)) {
      ((JavaMailSenderImpl)mailSender).setUsername(userName);
    }
    if (!StringUtils.isEmpty(password)) {
      ((JavaMailSenderImpl)mailSender).setPassword(password);
    }
    ((JavaMailSenderImpl)mailSender).setJavaMailProperties(getJavaMailProperties());
  }
 else {
    mailSender=new DummyEmailSender();
  }
  return mailSender;
}",0.9936908517350158
63975,"private void sendEmail(CbUser user,String template,Map<String,Object> model){
  try {
    String emailBody=processTemplateIntoString(freemarkerConfiguration.getTemplate(template,""String_Node_Str""),model);
    LOGGER.debug(""String_Node_Str"",emailBody);
    ((JavaMailSender)mailSender).send(prepareMessage(user,""String_Node_Str"",emailBody));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"");
    throw new CloudbreakRuntimeException(""String_Node_Str"",e);
  }
}","private void sendEmail(CbUser user,String template,Map<String,Object> model){
  try {
    String emailBody=processTemplateIntoString(freemarkerConfiguration.getTemplate(template,""String_Node_Str""),model);
    LOGGER.debug(""String_Node_Str"",emailBody);
    mailSender.send(prepareMessage(user,""String_Node_Str"",emailBody));
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"");
    throw new CloudbreakRuntimeException(""String_Node_Str"",e);
  }
}",0.9592274678111588
63976,"private Set<InstanceGroup> convertInstanceGroups(List<InstanceGroupJson> instanceGroupJsons){
  return (Set<InstanceGroup>)getConversionService().convert(instanceGroupJsons,TypeDescriptor.forObject(instanceGroupJsons),TypeDescriptor.collection(Set.class,TypeDescriptor.valueOf(InstanceGroup.class)));
}","private Set<InstanceGroup> convertInstanceGroups(List<InstanceGroupJson> instanceGroupJsons,Stack stack){
  Set<InstanceGroup> convertedSet=(Set<InstanceGroup>)getConversionService().convert(instanceGroupJsons,TypeDescriptor.forObject(instanceGroupJsons),TypeDescriptor.collection(Set.class,TypeDescriptor.valueOf(InstanceGroup.class)));
  for (  InstanceGroup instanceGroup : convertedSet) {
    instanceGroup.setStack(stack);
  }
  return convertedSet;
}",0.7783641160949868
63977,"private Set<Subnet> convertSubnets(List<SubnetJson> source){
  return (Set<Subnet>)getConversionService().convert(source,TypeDescriptor.forObject(source),TypeDescriptor.collection(Set.class,TypeDescriptor.valueOf(Subnet.class)));
}","private Set<Subnet> convertSubnets(List<SubnetJson> source,Stack stack){
  Set<Subnet> convertedSet=(Set<Subnet>)getConversionService().convert(source,TypeDescriptor.forObject(source),TypeDescriptor.collection(Set.class,TypeDescriptor.valueOf(Subnet.class)));
  for (  Subnet subNet : convertedSet) {
    subNet.setStack(stack);
  }
  return convertedSet;
}",0.7619047619047619
63978,"@Override public Stack convert(StackJson source){
  Stack stack=new Stack();
  stack.setName(source.getName());
  stack.setUserName(source.getUserName());
  stack.setPassword(source.getPassword());
  stack.setPublicInAccount(source.isPublicInAccount());
  stack.setRegion(source.getRegion());
  stack.setOnFailureActionAction(source.getOnFailureAction());
  if (source.getAllowedSubnets() != null) {
    stack.setAllowedSubnets(convertSubnets(source.getAllowedSubnets()));
  }
  stack.addAllowedSubnets(securityService.getCloudbreakSubnets(stack));
  try {
    stack.setCredential(credentialRepository.findOne(source.getCredentialId()));
  }
 catch (  AccessDeniedException e) {
    throw new AccessDeniedException(String.format(""String_Node_Str"",source.getCredentialId()),e);
  }
  stack.setStatus(Status.REQUESTED);
  stack.setInstanceGroups(convertInstanceGroups(source.getInstanceGroups()));
  if (stack.getInstanceGroupsByType(GATEWAY).isEmpty()) {
    throw new BadRequestException(""String_Node_Str"");
  }
  int minNodeCount=ConsulUtils.ConsulServers.NODE_COUNT_LOW.getMin();
  int fullNodeCount=stack.getFullNodeCount();
  if (fullNodeCount < minNodeCount) {
    throw new BadRequestException(String.format(""String_Node_Str"",minNodeCount));
  }
  if (source.getImage() != null) {
    stack.setImage(source.getImage());
  }
 else {
    stack.setImage(prepareImage(stack));
  }
  int consulServers=getConsulServerCount(source,fullNodeCount);
  stack.setConsulServers(consulServers);
  if (source.getFailurePolicy() != null) {
    stack.setFailurePolicy(getConversionService().convert(source.getFailurePolicy(),FailurePolicy.class));
    FailurePolicy failurePolicy=stack.getFailurePolicy();
    validatFailurePolicy(stack,consulServers,failurePolicy);
  }
  stack.setParameters(source.getParameters());
  return stack;
}","@Override public Stack convert(StackJson source){
  Stack stack=new Stack();
  stack.setName(source.getName());
  stack.setUserName(source.getUserName());
  stack.setPassword(source.getPassword());
  stack.setPublicInAccount(source.isPublicInAccount());
  stack.setRegion(source.getRegion());
  stack.setOnFailureActionAction(source.getOnFailureAction());
  if (source.getAllowedSubnets() != null) {
    stack.setAllowedSubnets(convertSubnets(source.getAllowedSubnets(),stack));
  }
  stack.addAllowedSubnets(securityService.getCloudbreakSubnets(stack));
  try {
    stack.setCredential(credentialRepository.findOne(source.getCredentialId()));
  }
 catch (  AccessDeniedException e) {
    throw new AccessDeniedException(String.format(""String_Node_Str"",source.getCredentialId()),e);
  }
  stack.setStatus(Status.REQUESTED);
  stack.setInstanceGroups(convertInstanceGroups(source.getInstanceGroups(),stack));
  if (stack.getInstanceGroupsByType(GATEWAY).isEmpty()) {
    throw new BadRequestException(""String_Node_Str"");
  }
  int minNodeCount=ConsulUtils.ConsulServers.NODE_COUNT_LOW.getMin();
  int fullNodeCount=stack.getFullNodeCount();
  if (fullNodeCount < minNodeCount) {
    throw new BadRequestException(String.format(""String_Node_Str"",minNodeCount));
  }
  if (source.getImage() != null) {
    stack.setImage(source.getImage());
  }
 else {
    stack.setImage(prepareImage(stack));
  }
  int consulServers=getConsulServerCount(source,fullNodeCount);
  stack.setConsulServers(consulServers);
  if (source.getFailurePolicy() != null) {
    stack.setFailurePolicy(getConversionService().convert(source.getFailurePolicy(),FailurePolicy.class));
    FailurePolicy failurePolicy=stack.getFailurePolicy();
    validatFailurePolicy(stack,consulServers,failurePolicy);
  }
  stack.setParameters(source.getParameters());
  return stack;
}",0.9967231021299836
63979,"private Set<HostGroup> convertHostGroupsFromJson(Long stackId,Cluster cluster,Set<HostGroupJson> hostGroupsJsons){
  Set<HostGroup> hostGroups=new HashSet<>();
  for (  HostGroupJson json : hostGroupsJsons) {
    HostGroup hostGroup=conversionService.convert(json,HostGroup.class);
    hostGroup=hostGroupDecorator.decorate(hostGroup,stackId,json.getInstanceGroupName(),json.getRecipeIds());
    hostGroups.add(hostGroup);
  }
  return hostGroups;
}","private Set<HostGroup> convertHostGroupsFromJson(Long stackId,Cluster cluster,Set<HostGroupJson> hostGroupsJsons){
  Set<HostGroup> hostGroups=new HashSet<>();
  for (  HostGroupJson json : hostGroupsJsons) {
    HostGroup hostGroup=conversionService.convert(json,HostGroup.class);
    hostGroup.setCluster(cluster);
    hostGroup=hostGroupDecorator.decorate(hostGroup,stackId,json.getInstanceGroupName(),json.getRecipeIds());
    hostGroups.add(hostGroup);
  }
  return hostGroups;
}",0.962486602357985
63980,"private void registerProvisioningFlows(){
  transitionKeyService.registerTransition(ProvisioningSetupHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.PROVISIONING_SETUP.name(),FlowPhases.PROVISIONING.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(ProvisioningHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.PROVISIONING.name(),FlowPhases.METADATA_SETUP.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(MetadataSetupHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.METADATA_SETUP.name(),FlowPhases.AMBARI_ROLE_ALLOCATION.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(AmbariRoleAllocationHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.AMBARI_ROLE_ALLOCATION.name(),FlowPhases.AMBARI_START.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(AmbariStartHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.AMBARI_START.name(),FlowPhases.CLUSTER_CREATION.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(StackCreationFailureHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.STACK_CREATION_FAILED.name(),FlowPhases.NONE.name(),FlowPhases.NONE.name()));
  transitionKeyService.registerTransition(ClusterCreationHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.CLUSTER_CREATION.name(),FlowPhases.NONE.name(),FlowPhases.CLUSTER_STATUS_UPDATE_FAILED.name()));
  transitionKeyService.registerTransition(ClusterStatusUpdateFailureHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.CLUSTER_STATUS_UPDATE_FAILED.name(),FlowPhases.NONE.name(),FlowPhases.NONE.name()));
}","private void registerProvisioningFlows(){
  transitionKeyService.registerTransition(ProvisioningSetupHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.PROVISIONING_SETUP.name(),FlowPhases.PROVISIONING.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(ProvisioningHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.PROVISIONING.name(),FlowPhases.METADATA_SETUP.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(MetadataSetupHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.METADATA_SETUP.name(),FlowPhases.AMBARI_ROLE_ALLOCATION.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(AmbariRoleAllocationHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.AMBARI_ROLE_ALLOCATION.name(),FlowPhases.AMBARI_START.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(AmbariStartHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.AMBARI_START.name(),FlowPhases.CLUSTER_CREATION.name(),FlowPhases.STACK_CREATION_FAILED.name()));
  transitionKeyService.registerTransition(StackCreationFailureHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.STACK_CREATION_FAILED.name(),FlowPhases.NONE.name(),FlowPhases.NONE.name()));
  transitionKeyService.registerTransition(ClusterCreationHandler.class,SimpleTransitionKeyService.TransitionFactory.createTransition(FlowPhases.CLUSTER_CREATION.name(),FlowPhases.NONE.name(),FlowPhases.NONE.name()));
}",0.9282998370450842
63981,"@Override protected Object handleErrorFlow(Throwable throwable,ProvisioningContext data) throws Exception {
  LOGGER.info(""String_Node_Str"",getClass());
  return getFlowFacade().handleClusterCreationFailure((FlowContext)data);
}","@Override protected Object handleErrorFlow(Throwable throwable,ProvisioningContext data) throws Exception {
  LOGGER.info(""String_Node_Str"",getClass());
  data.setErrorReason(throwable.getMessage());
  return getFlowFacade().handleClusterCreationFailure((FlowContext)data);
}",0.9065606361829026
63982,"@Override public FlowContext handleClusterCreationFailure(FlowContext flowContext) throws CloudbreakException {
  LOGGER.debug(""String_Node_Str"",flowContext);
  ProvisioningContext context=(ProvisioningContext)flowContext;
  Cluster cluster=clusterService.updateClusterStatusByStackId(context.getStackId(),Status.CREATE_FAILED,context.getErrorReason());
  MDCBuilder.buildMdcContext(cluster);
  stackUpdater.updateStackStatus(context.getStackId(),Status.AVAILABLE,""String_Node_Str"" + context.getErrorReason());
  eventService.fireCloudbreakEvent(context.getStackId(),""String_Node_Str"",context.getErrorReason());
  if (cluster.getEmailNeeded()) {
    emailSenderService.sendFailureEmail(cluster.getOwner());
  }
  return context;
}","@Override public FlowContext handleClusterCreationFailure(FlowContext flowContext) throws CloudbreakException {
  LOGGER.debug(""String_Node_Str"",flowContext);
  ProvisioningContext context=(ProvisioningContext)flowContext;
  Cluster cluster=clusterService.updateClusterStatusByStackId(context.getStackId(),Status.CREATE_FAILED,context.getErrorReason());
  MDCBuilder.buildMdcContext(cluster);
  stackUpdater.updateStackStatus(context.getStackId(),Status.AVAILABLE,""String_Node_Str"" + context.getErrorReason());
  eventService.fireCloudbreakEvent(context.getStackId(),Status.CREATE_FAILED.name(),context.getErrorReason());
  if (cluster.getEmailNeeded()) {
    emailSenderService.sendFailureEmail(cluster.getOwner());
  }
  return context;
}",0.9714285714285714
63983,"public ResourceRequestResultBuilder withResources(List<Resource> resources){
  this.resources=resources;
  return this;
}","public ResourceRequestResultBuilder withResources(Resource... resources){
  this.resources=Arrays.asList(resources);
  return this;
}",0.905511811023622
63984,"@Override public void accept(Event<StackDeleteRequest> stackDeleteRequest){
  final StackDeleteRequest data=stackDeleteRequest.getData();
  retryingStackUpdater.updateStackStatus(data.getStackId(),Status.DELETE_IN_PROGRESS,""String_Node_Str"");
  final Stack stack=stackRepository.findOneWithLists(data.getStackId());
  MDCBuilder.buildMdcContext(stack);
  LOGGER.info(""String_Node_Str"",ReactorConfig.DELETE_REQUEST_EVENT);
  try {
    if (!data.getCloudPlatform().isWithTemplate()) {
      ResourceBuilderInit resourceBuilderInit=resourceBuilderInits.get(data.getCloudPlatform());
      final DeleteContextObject dCO=resourceBuilderInit.deleteInit(stack);
      List<Future<ResourceRequestResult>> futures=new ArrayList<>();
      for (int i=instanceResourceBuilders.get(data.getCloudPlatform()).size() - 1; i >= 0; i--) {
        final int index=i;
        List<Resource> resourceByType=stack.getResourcesByType(instanceResourceBuilders.get(data.getCloudPlatform()).get(i).resourceType());
        for (        final Resource resource : resourceByType) {
          Future<ResourceRequestResult> submit=resourceBuilderExecutor.submit(new Callable<ResourceRequestResult>(){
            @Override public ResourceRequestResult call() throws Exception {
              try {
                instanceResourceBuilders.get(data.getCloudPlatform()).get(index).delete(resource,dCO,stack.getRegion());
                retryingStackUpdater.removeStackResources(stack.getId(),Arrays.asList(resource));
                return ResourceRequestResult.ResourceRequestResultBuilder.builder().withFutureResult(FutureResult.SUCCESS).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
              }
 catch (              Exception ex) {
                return ResourceRequestResult.ResourceRequestResultBuilder.builder().withException(ex).withFutureResult(FutureResult.FAILED).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
              }
            }
          }
);
          futures.add(submit);
          if (provisionUtil.isRequestFull(stack,futures.size() + 1)) {
            Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
            provisionUtil.checkErrorOccurred(result);
            futures=new ArrayList<>();
          }
        }
      }
      Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
      provisionUtil.checkErrorOccurred(result);
      for (int i=networkResourceBuilders.get(data.getCloudPlatform()).size() - 1; i >= 0; i--) {
        for (        Resource resource : stack.getResourcesByType(networkResourceBuilders.get(data.getCloudPlatform()).get(i).resourceType())) {
          networkResourceBuilders.get(data.getCloudPlatform()).get(i).delete(resource,dCO,stack.getRegion());
        }
      }
      reactor.notify(ReactorConfig.DELETE_COMPLETE_EVENT,Event.wrap(new StackDeleteComplete(dCO.getStackId())));
    }
 else {
      cloudPlatformConnectors.get(data.getCloudPlatform()).deleteStack(stack,stack.getCredential());
    }
  }
 catch (  Exception ex) {
    LOGGER.error(String.format(""String_Node_Str"",stack.getId()),ex);
    retryingStackUpdater.updateStackStatus(data.getStackId(),Status.DELETE_FAILED,""String_Node_Str"" + ex.getMessage());
  }
}","@Override public void accept(Event<StackDeleteRequest> stackDeleteRequest){
  final StackDeleteRequest data=stackDeleteRequest.getData();
  retryingStackUpdater.updateStackStatus(data.getStackId(),Status.DELETE_IN_PROGRESS,""String_Node_Str"");
  final Stack stack=stackRepository.findOneWithLists(data.getStackId());
  MDCBuilder.buildMdcContext(stack);
  LOGGER.info(""String_Node_Str"",ReactorConfig.DELETE_REQUEST_EVENT);
  try {
    if (!data.getCloudPlatform().isWithTemplate()) {
      ResourceBuilderInit resourceBuilderInit=resourceBuilderInits.get(data.getCloudPlatform());
      final DeleteContextObject dCO=resourceBuilderInit.deleteInit(stack);
      List<Future<ResourceRequestResult>> futures=new ArrayList<>();
      for (int i=instanceResourceBuilders.get(data.getCloudPlatform()).size() - 1; i >= 0; i--) {
        final int index=i;
        List<Resource> resourceByType=stack.getResourcesByType(instanceResourceBuilders.get(data.getCloudPlatform()).get(i).resourceType());
        for (        final Resource resource : resourceByType) {
          Future<ResourceRequestResult> submit=resourceBuilderExecutor.submit(new Callable<ResourceRequestResult>(){
            @Override public ResourceRequestResult call() throws Exception {
              try {
                instanceResourceBuilders.get(data.getCloudPlatform()).get(index).delete(resource,dCO,stack.getRegion());
                retryingStackUpdater.removeStackResources(stack.getId(),Arrays.asList(resource));
                return ResourceRequestResult.ResourceRequestResultBuilder.builder().withFutureResult(FutureResult.SUCCESS).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
              }
 catch (              Exception ex) {
                return ResourceRequestResult.ResourceRequestResultBuilder.builder().withException(ex).withFutureResult(FutureResult.FAILED).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
              }
            }
          }
);
          futures.add(submit);
          if (provisionUtil.isRequestFull(stack,futures.size() + 1)) {
            Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
            checkErrorOccurred(result);
            futures=new ArrayList<>();
          }
        }
      }
      Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
      checkErrorOccurred(result);
      for (int i=networkResourceBuilders.get(data.getCloudPlatform()).size() - 1; i >= 0; i--) {
        for (        Resource resource : stack.getResourcesByType(networkResourceBuilders.get(data.getCloudPlatform()).get(i).resourceType())) {
          networkResourceBuilders.get(data.getCloudPlatform()).get(i).delete(resource,dCO,stack.getRegion());
        }
      }
      reactor.notify(ReactorConfig.DELETE_COMPLETE_EVENT,Event.wrap(new StackDeleteComplete(dCO.getStackId())));
    }
 else {
      cloudPlatformConnectors.get(data.getCloudPlatform()).deleteStack(stack,stack.getCredential());
    }
  }
 catch (  Exception ex) {
    LOGGER.error(String.format(""String_Node_Str"",stack.getId()),ex);
    retryingStackUpdater.updateStackStatus(data.getStackId(),Status.DELETE_FAILED,""String_Node_Str"" + ex.getMessage());
  }
}",0.9958592132505176
63985,"private void upScaleStack(UpdateInstancesRequest request,Stack stack) throws Exception {
  String userDataScript=userDataBuilder.build(stack.cloudPlatform(),stack.getHash(),stack.getConsulServers(),new HashMap<String,String>());
  if (stack.isCloudPlatformUsedWithTemplate()) {
    cloudPlatformConnectors.get(stack.cloudPlatform()).addInstances(stack,userDataScript,request.getScalingAdjustment(),request.getInstanceGroup());
  }
 else {
    ResourceBuilderInit resourceBuilderInit=resourceBuilderInits.get(stack.cloudPlatform());
    final ProvisionContextObject provisionContextObject=resourceBuilderInit.provisionInit(stack,userDataScript);
    for (    ResourceBuilder resourceBuilder : networkResourceBuilders.get(stack.cloudPlatform())) {
      provisionContextObject.getNetworkResources().addAll(stack.getResourcesByType(resourceBuilder.resourceType()));
    }
    List<Future<ResourceRequestResult>> futures=new ArrayList<>();
    final Set<ResourceRequestResult> resourceRequestResults=new HashSet<>();
    for (int i=stack.getFullNodeCount(); i < stack.getFullNodeCount() + request.getScalingAdjustment(); i++) {
      final int index=i;
      Future<ResourceRequestResult> submit=resourceBuilderExecutor.submit(UpScaleCallableBuilder.builder().withStack(stack).withStackUpdater(stackUpdater).withIndex(index).withProvisionContextObject(provisionContextObject).withInstanceResourceBuilders(instanceResourceBuilders).withInstanceGroup(request.getInstanceGroup()).build());
      futures.add(submit);
      if (provisionUtil.isRequestFullWithCloudPlatform(stack,futures.size() + 1)) {
        Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
        provisionUtil.checkErrorOccurred(result);
        resourceRequestResults.addAll(result.get(FutureResult.SUCCESS));
        futures=new ArrayList<>();
      }
    }
    Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
    provisionUtil.checkErrorOccurred(result);
    resourceRequestResults.addAll(result.get(FutureResult.SUCCESS));
    if (!stackRepository.findById(stack.getId()).isStackInDeletionPhase()) {
      LOGGER.info(""String_Node_Str"",ReactorConfig.ADD_INSTANCES_COMPLETE_EVENT);
      reactor.notify(ReactorConfig.ADD_INSTANCES_COMPLETE_EVENT,Event.wrap(new AddInstancesComplete(stack.cloudPlatform(),stack.getId(),collectResources(resourceRequestResults),request.getInstanceGroup())));
    }
  }
}","private void upScaleStack(UpdateInstancesRequest request,Stack stack) throws Exception {
  String userDataScript=userDataBuilder.build(stack.cloudPlatform(),stack.getHash(),stack.getConsulServers(),new HashMap<String,String>());
  if (stack.isCloudPlatformUsedWithTemplate()) {
    cloudPlatformConnectors.get(stack.cloudPlatform()).addInstances(stack,userDataScript,request.getScalingAdjustment(),request.getInstanceGroup());
  }
 else {
    ResourceBuilderInit resourceBuilderInit=resourceBuilderInits.get(stack.cloudPlatform());
    final ProvisionContextObject provisionContextObject=resourceBuilderInit.provisionInit(stack,userDataScript);
    for (    ResourceBuilder resourceBuilder : networkResourceBuilders.get(stack.cloudPlatform())) {
      provisionContextObject.getNetworkResources().addAll(stack.getResourcesByType(resourceBuilder.resourceType()));
    }
    List<Future<ResourceRequestResult>> futures=new ArrayList<>();
    final Set<ResourceRequestResult> successResourceRequestResults=new HashSet<>();
    final List<ResourceRequestResult> failedResourceRequestResults=new ArrayList<>();
    final Integer addNodeCount=request.getScalingAdjustment();
    for (int i=stack.getFullNodeCount(); i < stack.getFullNodeCount() + addNodeCount; i++) {
      final int index=i;
      Future<ResourceRequestResult> submit=resourceBuilderExecutor.submit(UpScaleCallableBuilder.builder().withStack(stack).withStackUpdater(stackUpdater).withIndex(index).withProvisionContextObject(provisionContextObject).withInstanceResourceBuilders(instanceResourceBuilders).withInstanceGroup(request.getInstanceGroup()).build());
      futures.add(submit);
      if (provisionUtil.isRequestFullWithCloudPlatform(stack,futures.size() + 1)) {
        Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
        successResourceRequestResults.addAll(result.get(FutureResult.SUCCESS));
        failedResourceRequestResults.addAll(result.get(FutureResult.FAILED));
        upscaleFailureHandlerService.handleFailure(stack,failedResourceRequestResults);
        futures=new ArrayList<>();
      }
    }
    Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
    successResourceRequestResults.addAll(result.get(FutureResult.SUCCESS));
    failedResourceRequestResults.addAll(result.get(FutureResult.FAILED));
    upscaleFailureHandlerService.handleFailure(stack,failedResourceRequestResults);
    if (!stackRepository.findById(stack.getId()).isStackInDeletionPhase()) {
      LOGGER.info(""String_Node_Str"",ReactorConfig.ADD_INSTANCES_COMPLETE_EVENT);
      reactor.notify(ReactorConfig.ADD_INSTANCES_COMPLETE_EVENT,Event.wrap(new AddInstancesComplete(stack.cloudPlatform(),stack.getId(),collectResources(successResourceRequestResults),request.getInstanceGroup())));
    }
  }
}",0.8764629388816645
63986,"private void downScaleStack(UpdateInstancesRequest request,Stack stack) throws Exception {
  Set<String> instanceIds=new HashSet<>();
  int i=0;
  for (  InstanceGroup instanceGroup : stack.getInstanceGroups()) {
    for (    InstanceMetaData metadataEntry : instanceGroup.getInstanceMetaData()) {
      if (metadataEntry.isDecommissioned() || metadataEntry.isUnRegistered()) {
        instanceIds.add(metadataEntry.getInstanceId());
        if (++i >= request.getScalingAdjustment() * -1) {
          break;
        }
      }
    }
  }
  if (stack.isCloudPlatformUsedWithTemplate()) {
    cloudPlatformConnectors.get(stack.cloudPlatform()).removeInstances(stack,instanceIds,request.getInstanceGroup());
  }
 else {
    ResourceBuilderInit resourceBuilderInit=resourceBuilderInits.get(stack.cloudPlatform());
    final DeleteContextObject deleteContextObject=resourceBuilderInit.decommissionInit(stack,instanceIds);
    for (int j=instanceResourceBuilders.get(stack.cloudPlatform()).size() - 1; j >= 0; j--) {
      List<Future<ResourceRequestResult>> futures=new ArrayList<>();
      final int index=j;
      final ResourceBuilder resourceBuilder=instanceResourceBuilders.get(stack.cloudPlatform()).get(index);
      for (      final Resource resource : getResourcesByType(resourceBuilder.resourceType(),deleteContextObject.getDecommissionResources())) {
        Future<ResourceRequestResult> submit=resourceBuilderExecutor.submit(DownScaleCallableBuilder.builder().withStack(stack).withDeleteContextObject(deleteContextObject).withResource(resource).withResourceBuilder(resourceBuilder).build());
        futures.add(submit);
        if (provisionUtil.isRequestFull(stack,futures.size() + 1)) {
          Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
          provisionUtil.checkErrorOccurred(result);
          futures=new ArrayList<>();
        }
      }
      Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
      provisionUtil.checkErrorOccurred(result);
    }
    if (!stackRepository.findById(stack.getId()).isStackInDeletionPhase()) {
      stackUpdater.removeStackResources(stack.getId(),deleteContextObject.getDecommissionResources());
      LOGGER.info(""String_Node_Str"",instanceIds);
      LOGGER.info(""String_Node_Str"",ReactorConfig.REMOVE_INSTANCES_COMPLETE_EVENT);
      reactor.notify(ReactorConfig.REMOVE_INSTANCES_COMPLETE_EVENT,Event.wrap(new StackUpdateSuccess(stack.getId(),true,instanceIds,request.getInstanceGroup())));
    }
  }
}","private void downScaleStack(UpdateInstancesRequest request,Stack stack) throws Exception {
  Set<String> instanceIds=new HashSet<>();
  int i=0;
  for (  InstanceGroup instanceGroup : stack.getInstanceGroups()) {
    for (    InstanceMetaData metadataEntry : instanceGroup.getInstanceMetaData()) {
      if (metadataEntry.isDecommissioned() || metadataEntry.isUnRegistered()) {
        instanceIds.add(metadataEntry.getInstanceId());
        if (++i >= request.getScalingAdjustment() * -1) {
          break;
        }
      }
    }
  }
  if (stack.isCloudPlatformUsedWithTemplate()) {
    cloudPlatformConnectors.get(stack.cloudPlatform()).removeInstances(stack,instanceIds,request.getInstanceGroup());
  }
 else {
    ResourceBuilderInit resourceBuilderInit=resourceBuilderInits.get(stack.cloudPlatform());
    final DeleteContextObject deleteContextObject=resourceBuilderInit.decommissionInit(stack,instanceIds);
    List<ResourceRequestResult> failedResourceList=new ArrayList<>();
    for (int j=instanceResourceBuilders.get(stack.cloudPlatform()).size() - 1; j >= 0; j--) {
      List<Future<ResourceRequestResult>> futures=new ArrayList<>();
      final int index=j;
      final ResourceBuilder resourceBuilder=instanceResourceBuilders.get(stack.cloudPlatform()).get(index);
      for (      final Resource resource : getResourcesByType(resourceBuilder.resourceType(),deleteContextObject.getDecommissionResources())) {
        Future<ResourceRequestResult> submit=resourceBuilderExecutor.submit(DownScaleCallableBuilder.builder().withStack(stack).withDeleteContextObject(deleteContextObject).withResource(resource).withResourceBuilder(resourceBuilder).build());
        futures.add(submit);
        if (provisionUtil.isRequestFull(stack,futures.size() + 1)) {
          Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
          failedResourceList.addAll(result.get(FutureResult.FAILED));
          futures=new ArrayList<>();
        }
      }
      Map<FutureResult,List<ResourceRequestResult>> result=provisionUtil.waitForRequestToFinish(stack.getId(),futures);
      failedResourceList.addAll(result.get(FutureResult.FAILED));
    }
    instanceIds.removeAll(filterFailedResources(failedResourceList,instanceIds));
    if (!stackRepository.findById(stack.getId()).isStackInDeletionPhase()) {
      stackUpdater.removeStackResources(stack.getId(),deleteContextObject.getDecommissionResources());
      LOGGER.info(""String_Node_Str"",instanceIds);
      LOGGER.info(""String_Node_Str"",ReactorConfig.REMOVE_INSTANCES_COMPLETE_EVENT);
      reactor.notify(ReactorConfig.REMOVE_INSTANCES_COMPLETE_EVENT,Event.wrap(new StackUpdateSuccess(stack.getId(),true,instanceIds,request.getInstanceGroup())));
    }
  }
}",0.9347988077496274
63987,"@Override public ResourceRequestResult call() throws Exception {
  try {
    resourceBuilder.delete(resource,dCO,stack.getRegion());
  }
 catch (  Exception ex) {
    return ResourceRequestResult.ResourceRequestResultBuilder.builder().withException(ex).withFutureResult(FutureResult.FAILED).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
  }
  return ResourceRequestResult.ResourceRequestResultBuilder.builder().withFutureResult(FutureResult.SUCCESS).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
}","@Override public ResourceRequestResult call() throws Exception {
  try {
    resourceBuilder.delete(resource,dCO,stack.getRegion());
  }
 catch (  Exception ex) {
    return ResourceRequestResult.ResourceRequestResultBuilder.builder().withException(ex).withFutureResult(FutureResult.FAILED).withResources(resource).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
  }
  return ResourceRequestResult.ResourceRequestResultBuilder.builder().withFutureResult(FutureResult.SUCCESS).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(resource.getInstanceGroup())).build();
}",0.9804878048780488
63988,"@Override public ResourceRequestResult call() throws Exception {
  List<Resource> resources=new ArrayList<>();
  try {
    for (    final ResourceBuilder resourceBuilder : instanceResourceBuilders.get(stack.cloudPlatform())) {
      CreateResourceRequest createResourceRequest=resourceBuilder.buildCreateRequest(provisionContextObject,resources,resourceBuilder.buildResources(provisionContextObject,index,resources,Optional.of(stack.getInstanceGroupByInstanceGroupName(instanceGroup))),index,Optional.of(stack.getInstanceGroupByInstanceGroupName(instanceGroup)));
      stackUpdater.addStackResources(stack.getId(),createResourceRequest.getBuildableResources());
      resources.addAll(createResourceRequest.getBuildableResources());
      resourceBuilder.create(createResourceRequest,stack.getRegion());
    }
  }
 catch (  Exception ex) {
    return ResourceRequestResult.ResourceRequestResultBuilder.builder().withException(ex).withFutureResult(FutureResult.FAILED).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(instanceGroup)).build();
  }
  return ResourceRequestResult.ResourceRequestResultBuilder.builder().withFutureResult(FutureResult.SUCCESS).withBuildedResources(resources).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(instanceGroup)).build();
}","@Override public ResourceRequestResult call() throws Exception {
  List<Resource> resources=new ArrayList<>();
  try {
    for (    final ResourceBuilder resourceBuilder : instanceResourceBuilders.get(stack.cloudPlatform())) {
      CreateResourceRequest createResourceRequest=resourceBuilder.buildCreateRequest(provisionContextObject,resources,resourceBuilder.buildResources(provisionContextObject,index,resources,Optional.of(stack.getInstanceGroupByInstanceGroupName(instanceGroup))),index,Optional.of(stack.getInstanceGroupByInstanceGroupName(instanceGroup)));
      stackUpdater.addStackResources(stack.getId(),createResourceRequest.getBuildableResources());
      resources.addAll(createResourceRequest.getBuildableResources());
      resourceBuilder.create(createResourceRequest,stack.getRegion());
    }
  }
 catch (  Exception ex) {
    return ResourceRequestResult.ResourceRequestResultBuilder.builder().withException(ex).withResources(resources).withFutureResult(FutureResult.FAILED).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(instanceGroup)).build();
  }
  return ResourceRequestResult.ResourceRequestResultBuilder.builder().withFutureResult(FutureResult.SUCCESS).withBuildedResources(resources).withInstanceGroup(stack.getInstanceGroupByInstanceGroupName(instanceGroup)).build();
}",0.9903660886319846
63989,"@Test public void buildStackWhenAllResourceBuilderWorksFine() throws Exception {
  prepareInstanceResourceBuilders();
  prepareNetWorkResourceBuilders();
  Map<FutureResult,List<ResourceRequestResult>> futureResultListHashMap=new HashMap<>();
  futureResultListHashMap.put(FutureResult.FAILED,new ArrayList<ResourceRequestResult>());
  futureResultListHashMap.put(FutureResult.SUCCESS,new ArrayList<ResourceRequestResult>());
  when(provisionUtil.waitForRequestToFinish(anyLong(),anyList())).thenReturn(futureResultListHashMap);
  when(stackRepository.findById(anyLong())).thenReturn(stack);
  doNothing().when(provisionUtil).checkErrorOccurred(anyMap());
  given(stackRepository.findOneWithLists(1L)).willReturn(stack);
  doNothing().when(stackFailureHandlerService).handleFailure(any(Stack.class),anyList());
  given(stackUpdater.updateStackStatus(anyLong(),any(Status.class),anyString())).willReturn(stack);
  given(stackUpdater.updateStackStatusReason(anyLong(),anyString())).willReturn(stack);
  given(stackUpdater.addStackResources(anyLong(),anyList())).willReturn(stack);
  given(reactor.notify(any(),any(Event.class))).willReturn(null);
  given(userDataBuilder.build(any(CloudPlatform.class),anyString(),anyInt(),anyMap())).willReturn(DUMMY_NAME);
  underTest.buildStack(cloudPlatform,1L,setupProperties,userDataParams);
  verify(reactor,times(1)).notify(eq(ReactorConfig.PROVISION_COMPLETE_EVENT),Event.wrap(anyObject()));
}","@Test public void buildStackWhenAllResourceBuilderWorksFine() throws Exception {
  prepareInstanceResourceBuilders();
  prepareNetWorkResourceBuilders();
  Map<FutureResult,List<ResourceRequestResult>> futureResultListHashMap=new HashMap<>();
  futureResultListHashMap.put(FutureResult.FAILED,new ArrayList<ResourceRequestResult>());
  futureResultListHashMap.put(FutureResult.SUCCESS,new ArrayList<ResourceRequestResult>());
  when(provisionUtil.waitForRequestToFinish(anyLong(),anyList())).thenReturn(futureResultListHashMap);
  when(stackRepository.findById(anyLong())).thenReturn(stack);
  given(stackRepository.findOneWithLists(1L)).willReturn(stack);
  doNothing().when(stackFailureHandlerService).handleFailure(any(Stack.class),anyList());
  given(stackUpdater.updateStackStatus(anyLong(),any(Status.class),anyString())).willReturn(stack);
  given(stackUpdater.updateStackStatusReason(anyLong(),anyString())).willReturn(stack);
  given(stackUpdater.addStackResources(anyLong(),anyList())).willReturn(stack);
  given(reactor.notify(any(),any(Event.class))).willReturn(null);
  given(userDataBuilder.build(any(CloudPlatform.class),anyString(),anyInt(),anyMap())).willReturn(DUMMY_NAME);
  underTest.buildStack(cloudPlatform,1L,setupProperties,userDataParams);
  verify(reactor,times(1)).notify(eq(ReactorConfig.PROVISION_COMPLETE_EVENT),Event.wrap(anyObject()));
}",0.9771591720199856
63990,"private void updateInstanceMetadata(Stack stack,AmazonEC2Client amazonEC2Client,Set<InstanceMetaData> instanceMetaData,Collection<String> instances){
  MDCBuilder.buildMdcContext(stack);
  DescribeInstancesResult describeResult=amazonEC2Client.describeInstances(new DescribeInstancesRequest().withInstanceIds(instances));
  for (  Reservation reservation : describeResult.getReservations()) {
    for (    Instance instance : reservation.getInstances()) {
      for (      InstanceMetaData metaData : instanceMetaData) {
        if (metaData.getInstanceId().equals(instance.getInstanceId())) {
          String publicDnsName=instance.getPublicDnsName();
          if (metaData.getAmbariServer()) {
            stack.setAmbariIp(publicDnsName);
            Cluster cluster=clusterRepository.findOneWithLists(stack.getCluster().getId());
            stack.setCluster(cluster);
            stackRepository.save(stack);
          }
          metaData.setPublicIp(publicDnsName);
          instanceMetaDataRepository.save(metaData);
          break;
        }
      }
    }
  }
}","private void updateInstanceMetadata(Stack stack,AmazonEC2Client amazonEC2Client,Set<InstanceMetaData> instanceMetaData,Collection<String> instances){
  MDCBuilder.buildMdcContext(stack);
  DescribeInstancesResult describeResult=amazonEC2Client.describeInstances(new DescribeInstancesRequest().withInstanceIds(instances));
  for (  Reservation reservation : describeResult.getReservations()) {
    for (    Instance instance : reservation.getInstances()) {
      for (      InstanceMetaData metaData : instanceMetaData) {
        if (metaData.getInstanceId().equals(instance.getInstanceId())) {
          String publicIp=instance.getPublicIpAddress();
          if (metaData.getAmbariServer()) {
            stack.setAmbariIp(publicIp);
            Cluster cluster=clusterRepository.findOneWithLists(stack.getCluster().getId());
            stack.setCluster(cluster);
            stackRepository.save(stack);
          }
          metaData.setPublicIp(publicIp);
          instanceMetaDataRepository.save(metaData);
          break;
        }
      }
    }
  }
}",0.9798594847775176
63991,"private void waitForConsulAgents(Stack stack,Set<InstanceMetaData> originalMetaData,Set<InstanceMetaData> instancesMetaData){
  Set<InstanceMetaData> copy=new HashSet<>(originalMetaData);
  copy.removeAll(instancesMetaData);
  List<ConsulClient> clients=createClients(copy);
  List<String> privateIps=new ArrayList<>(instancesMetaData.size());
  for (  InstanceMetaData instance : instancesMetaData) {
    privateIps.add(instance.getPrivateIp());
  }
  consulPollingService.pollWithTimeout(new ConsulHostCheckerTask(),new ConsulContext(stack,clients,privateIps),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
}","private void waitForConsulAgents(Stack stack,Set<InstanceMetaData> originalMetaData,Set<InstanceMetaData> instancesMetaData){
  Set<InstanceMetaData> copy=new HashSet<>(originalMetaData);
  copy.removeAll(instancesMetaData);
  List<ConsulClient> clients=createClients(copy);
  List<String> privateIps=new ArrayList<>();
  if (instancesMetaData.isEmpty()) {
    for (    InstanceMetaData instance : originalMetaData) {
      privateIps.add(instance.getPrivateIp());
    }
  }
 else {
    for (    InstanceMetaData instance : instancesMetaData) {
      privateIps.add(instance.getPrivateIp());
    }
  }
  consulPollingService.pollWithTimeout(new ConsulHostCheckerTask(),new ConsulContext(stack,clients,privateIps),POLLING_INTERVAL,MAX_POLLING_ATTEMPTS);
}",0.8621960206337509
63992,"@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testStackCreation(@Optional(""String_Node_Str"") String stackName,@Optional(""String_Node_Str"") String region,@Optional(""String_Node_Str"") String ambariUser,@Optional(""String_Node_Str"") String ambariPassword,@Optional(""String_Node_Str"") String onFailureAction,@Optional(""String_Node_Str"") Long threshold,@Optional(""String_Node_Str"") String adjustmentType){
  IntegrationTestContext itContext=getItContext();
  Map<String,Object> templateModel=new HashMap<>();
  templateModel.put(""String_Node_Str"",stackName);
  templateModel.put(""String_Node_Str"",region);
  templateModel.put(""String_Node_Str"",ambariUser);
  templateModel.put(""String_Node_Str"",ambariPassword);
  templateModel.put(""String_Node_Str"",onFailure);
  templateModel.put(""String_Node_Str"",threshold);
  templateModel.put(""String_Node_Str"",adjustmentType);
  templateModel.put(""String_Node_Str"",itContext.getContextParam(CloudbreakITContextConstants.TEMPLATE_ID,List.class));
  templateModel.put(""String_Node_Str"",itContext.getContextParam(CloudbreakITContextConstants.CREDENTIAL_ID));
  Response resourceCreationResponse=RestUtil.createEntityRequest(itContext.getContextParam(CloudbreakITContextConstants.CLOUDBREAK_SERVER),itContext.getContextParam(IntegrationTestContext.AUTH_TOKEN),FreeMarkerUtil.renderTemplate(stackCreationTemplate,templateModel)).log().all().post(""String_Node_Str"");
  checkResponse(resourceCreationResponse,HttpStatus.CREATED,ContentType.JSON);
  String stackId=resourceCreationResponse.jsonPath().getString(""String_Node_Str"");
  itContext.putCleanUpParam(CloudbreakITContextConstants.STACK_ID,stackId);
  CloudbreakUtil.waitForStackStatus(itContext,stackId,""String_Node_Str"");
  itContext.putContextParam(CloudbreakITContextConstants.STACK_ID,stackId);
}","@Test @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testStackCreation(@Optional(""String_Node_Str"") String stackName,@Optional(""String_Node_Str"") String region,@Optional(""String_Node_Str"") String ambariUser,@Optional(""String_Node_Str"") String ambariPassword,@Optional(""String_Node_Str"") String onFailureAction,@Optional(""String_Node_Str"") Long threshold,@Optional(""String_Node_Str"") String adjustmentType){
  IntegrationTestContext itContext=getItContext();
  Map<String,Object> templateModel=new HashMap<>();
  templateModel.put(""String_Node_Str"",stackName);
  templateModel.put(""String_Node_Str"",region);
  templateModel.put(""String_Node_Str"",ambariUser);
  templateModel.put(""String_Node_Str"",ambariPassword);
  templateModel.put(""String_Node_Str"",onFailureAction);
  templateModel.put(""String_Node_Str"",threshold);
  templateModel.put(""String_Node_Str"",adjustmentType);
  templateModel.put(""String_Node_Str"",itContext.getContextParam(CloudbreakITContextConstants.TEMPLATE_ID,List.class));
  templateModel.put(""String_Node_Str"",itContext.getContextParam(CloudbreakITContextConstants.CREDENTIAL_ID));
  Response resourceCreationResponse=RestUtil.createEntityRequest(itContext.getContextParam(CloudbreakITContextConstants.CLOUDBREAK_SERVER),itContext.getContextParam(IntegrationTestContext.AUTH_TOKEN),FreeMarkerUtil.renderTemplate(stackCreationTemplate,templateModel)).log().all().post(""String_Node_Str"");
  checkResponse(resourceCreationResponse,HttpStatus.CREATED,ContentType.JSON);
  String stackId=resourceCreationResponse.jsonPath().getString(""String_Node_Str"");
  itContext.putCleanUpParam(CloudbreakITContextConstants.STACK_ID,stackId);
  CloudbreakUtil.waitForStackStatus(itContext,stackId,""String_Node_Str"");
  itContext.putContextParam(CloudbreakITContextConstants.STACK_ID,stackId);
}",0.998421052631579
63993,"@Override public void accept(Event<StackStatusUpdateRequest> event){
  StackStatusUpdateRequest statusUpdateRequest=event.getData();
  final CloudPlatform cloudPlatform=statusUpdateRequest.getCloudPlatform();
  StatusRequest statusRequest=statusUpdateRequest.getStatusRequest();
  long stackId=statusUpdateRequest.getStackId();
  Stack stack=stackRepository.findOneWithLists(stackId);
  MDCBuilder.buildMdcContext(stack);
  if (StatusRequest.STOPPED.equals(statusRequest)) {
    cloudbreakEventService.fireCloudbreakEvent(stackId,Status.STOP_IN_PROGRESS.name(),""String_Node_Str"");
    boolean stopped;
    if (cloudPlatform.isWithTemplate()) {
      CloudPlatformConnector connector=cloudPlatformConnectors.get(cloudPlatform);
      stopped=connector.stopAll(stack);
    }
 else {
      stopped=startStopResources(cloudPlatform,stack,false);
    }
    if (stopped) {
      LOGGER.info(""String_Node_Str"",Status.STOPPED);
      stackUpdater.updateStackStatus(stackId,Status.STOPPED,""String_Node_Str"");
      cloudbreakEventService.fireCloudbreakEvent(stackId,BillingStatus.BILLING_STOPPED.name(),""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"",Status.STOP_FAILED);
      stackUpdater.updateStackStatus(stackId,Status.STOP_FAILED,""String_Node_Str"");
    }
  }
 else {
    boolean started;
    if (cloudPlatform.isWithTemplate()) {
      CloudPlatformConnector connector=cloudPlatformConnectors.get(cloudPlatform);
      started=connector.startAll(stack);
    }
 else {
      started=startStopResources(cloudPlatform,stack,true);
    }
    if (started) {
      waitForAmbariToStart(stack);
      Cluster cluster=clusterRepository.findOneWithLists(stack.getCluster().getId());
      LOGGER.info(""String_Node_Str"",Status.AVAILABLE);
      String statusReason=""String_Node_Str"" + stack.getAmbariIp();
      stackUpdater.updateStackStatus(stackId,Status.AVAILABLE,statusReason);
      if (cluster != null && Status.START_REQUESTED.equals(cluster.getStatus())) {
        boolean hostsJoined=waitForHostsToJoin(stack);
        if (hostsJoined) {
          cloudbreakEventService.fireCloudbreakEvent(stackId,Status.START_IN_PROGRESS.name(),""String_Node_Str"");
          reactor.notify(ReactorConfig.CLUSTER_STATUS_UPDATE_EVENT,Event.wrap(new ClusterStatusUpdateRequest(stack.getId(),statusRequest)));
        }
 else {
          cluster.setStatus(Status.START_FAILED);
          clusterRepository.save(cluster);
          stackUpdater.updateStackStatus(stackId,Status.AVAILABLE,""String_Node_Str"");
        }
      }
    }
 else {
      LOGGER.info(""String_Node_Str"",Status.START_FAILED);
      stackUpdater.updateStackStatus(stackId,Status.START_FAILED,""String_Node_Str"");
    }
  }
}","@Override public void accept(Event<StackStatusUpdateRequest> event){
  StackStatusUpdateRequest statusUpdateRequest=event.getData();
  final CloudPlatform cloudPlatform=statusUpdateRequest.getCloudPlatform();
  StatusRequest statusRequest=statusUpdateRequest.getStatusRequest();
  long stackId=statusUpdateRequest.getStackId();
  Stack stack=stackRepository.findOneWithLists(stackId);
  MDCBuilder.buildMdcContext(stack);
  if (StatusRequest.STOPPED.equals(statusRequest)) {
    cloudbreakEventService.fireCloudbreakEvent(stackId,Status.STOP_IN_PROGRESS.name(),""String_Node_Str"");
    boolean stopped;
    if (cloudPlatform.isWithTemplate()) {
      CloudPlatformConnector connector=cloudPlatformConnectors.get(cloudPlatform);
      stopped=connector.stopAll(stack);
    }
 else {
      stopped=startStopResources(cloudPlatform,stack,false);
    }
    if (stopped) {
      LOGGER.info(""String_Node_Str"",Status.STOPPED);
      stackUpdater.updateStackStatus(stackId,Status.STOPPED,""String_Node_Str"");
      cloudbreakEventService.fireCloudbreakEvent(stackId,BillingStatus.BILLING_STOPPED.name(),""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"",Status.STOP_FAILED);
      stackUpdater.updateStackStatus(stackId,Status.STOP_FAILED,""String_Node_Str"");
    }
  }
 else {
    boolean started;
    if (cloudPlatform.isWithTemplate()) {
      CloudPlatformConnector connector=cloudPlatformConnectors.get(cloudPlatform);
      started=connector.startAll(stack);
    }
 else {
      started=startStopResources(cloudPlatform,stack,true);
    }
    if (started) {
      waitForAmbariToStart(stack);
      Cluster cluster=clusterRepository.findOneWithLists(stack.getCluster().getId());
      boolean hostsJoined=waitForHostsToJoin(stack);
      if (hostsJoined) {
        String statusReason=""String_Node_Str"" + stack.getAmbariIp();
        LOGGER.info(""String_Node_Str"",Status.AVAILABLE);
        stackUpdater.updateStackStatus(stackId,Status.AVAILABLE,statusReason);
      }
      if (hostsJoined && cluster != null && Status.START_REQUESTED.equals(cluster.getStatus())) {
        cloudbreakEventService.fireCloudbreakEvent(stackId,Status.START_IN_PROGRESS.name(),""String_Node_Str"");
        reactor.notify(ReactorConfig.CLUSTER_STATUS_UPDATE_EVENT,Event.wrap(new ClusterStatusUpdateRequest(stack.getId(),statusRequest)));
      }
 else       if (!hostsJoined && cluster != null && Status.START_REQUESTED.equals(cluster.getStatus())) {
        cluster.setStatus(Status.START_FAILED);
        clusterRepository.save(cluster);
        stackUpdater.updateStackStatus(stackId,Status.AVAILABLE,""String_Node_Str"");
      }
    }
 else {
      LOGGER.info(""String_Node_Str"",Status.START_FAILED);
      stackUpdater.updateStackStatus(stackId,Status.START_FAILED,""String_Node_Str"");
    }
  }
}",0.9187613843351548
63994,"private void delete(Stack stack,CbUser user){
  MDCBuilder.buildMdcContext(stack);
  LOGGER.info(""String_Node_Str"");
  if (!user.getUserId().equals(stack.getOwner()) && !user.getRoles().contains(CbUserRole.ADMIN)) {
    throw new BadRequestException(""String_Node_Str"");
  }
 else {
    LOGGER.info(""String_Node_Str"",ReactorConfig.DELETE_REQUEST_EVENT);
    reactor.notify(ReactorConfig.DELETE_REQUEST_EVENT,Event.wrap(new StackDeleteRequest(stack.getTemplate().cloudPlatform(),stack.getId())));
  }
}","private void delete(Stack stack,CbUser user){
  MDCBuilder.buildMdcContext(stack);
  LOGGER.info(""String_Node_Str"");
  if (!user.getUserId().equals(stack.getOwner()) && !user.getRoles().contains(CbUserRole.ADMIN)) {
    throw new BadRequestException(""String_Node_Str"");
  }
 else {
    LOGGER.info(""String_Node_Str"",ReactorConfig.DELETE_REQUEST_EVENT);
    reactor.notify(ReactorConfig.DELETE_REQUEST_EVENT,Event.wrap(new StackDeleteRequest(stack.cloudPlatform(),stack.getId())));
  }
}",0.9614604462474644
63995,"@Override public void setupProvisioning(Stack stack){
  MDCBuilder.buildMdcContext(stack);
  Credential credential=stack.getCredential();
  AzureTemplate template=(AzureTemplate)stack.getTemplate();
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)credential);
  if (!azureClient.isImageAvailable(azureStackUtil.getOsImageName(credential,template.getLocation()))) {
    String affinityGroupName=((AzureCredential)credential).getCommonName(template.getLocation());
    createAffinityGroup(stack,azureClient,affinityGroupName);
    String storageName=String.format(""String_Node_Str"",VM_COMMON_NAME,stack.getId());
    createStorage(stack,azureClient,affinityGroupName);
    String targetBlobContainerUri=""String_Node_Str"" + affinityGroupName + ""String_Node_Str"";
    String targetImageUri=targetBlobContainerUri + '/' + storageName+ ""String_Node_Str"";
    Map<String,String> params=new HashMap<>();
    params.put(AzureStackUtil.NAME,affinityGroupName);
    String keyJson=(String)azureClient.getStorageAccountKeys(params);
    JsonNode actualObj=null;
    try {
      actualObj=MAPPER.readValue(keyJson,JsonNode.class);
    }
 catch (    IOException e) {
      LOGGER.info(""String_Node_Str"",e);
      throw new InternalServerException(""String_Node_Str"",e);
    }
    String storageAccountKey=actualObj.get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"").asText();
    createBlobContainer(targetBlobContainerUri,storageAccountKey);
    AzureClientUtil.copyOsImage(storageAccountKey,baseImageUri,targetImageUri);
    checkCopyStatus(stack,targetImageUri,storageAccountKey);
    createOsImageLink(credential,azureClient,targetImageUri,template.getLocation());
  }
  LOGGER.info(""String_Node_Str"",ReactorConfig.PROVISION_SETUP_COMPLETE_EVENT,stack.getId());
  reactor.notify(ReactorConfig.PROVISION_SETUP_COMPLETE_EVENT,Event.wrap(new ProvisionSetupComplete(getCloudPlatform(),stack.getId()).withSetupProperty(CREDENTIAL,stack.getCredential())));
}","@Override public void setupProvisioning(Stack stack){
  MDCBuilder.buildMdcContext(stack);
  Credential credential=stack.getCredential();
  AzureLocation azureLocation=AzureLocation.valueOf(stack.getRegion());
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)credential);
  if (!azureClient.isImageAvailable(azureStackUtil.getOsImageName(credential,azureLocation))) {
    String affinityGroupName=((AzureCredential)credential).getCommonName(azureLocation);
    createAffinityGroup(stack,azureClient,affinityGroupName);
    String storageName=String.format(""String_Node_Str"",VM_COMMON_NAME,stack.getId());
    createStorage(stack,azureClient,affinityGroupName);
    String targetBlobContainerUri=""String_Node_Str"" + affinityGroupName + ""String_Node_Str"";
    String targetImageUri=targetBlobContainerUri + '/' + storageName+ ""String_Node_Str"";
    Map<String,String> params=new HashMap<>();
    params.put(AzureStackUtil.NAME,affinityGroupName);
    String keyJson=(String)azureClient.getStorageAccountKeys(params);
    JsonNode actualObj=null;
    try {
      actualObj=MAPPER.readValue(keyJson,JsonNode.class);
    }
 catch (    IOException e) {
      LOGGER.info(""String_Node_Str"",e);
      throw new InternalServerException(""String_Node_Str"",e);
    }
    String storageAccountKey=actualObj.get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str"").asText();
    createBlobContainer(targetBlobContainerUri,storageAccountKey);
    AzureClientUtil.copyOsImage(storageAccountKey,baseImageUri,targetImageUri);
    checkCopyStatus(stack,targetImageUri,storageAccountKey);
    createOsImageLink(credential,azureClient,targetImageUri,azureLocation);
  }
  LOGGER.info(""String_Node_Str"",ReactorConfig.PROVISION_SETUP_COMPLETE_EVENT,stack.getId());
  reactor.notify(ReactorConfig.PROVISION_SETUP_COMPLETE_EVENT,Event.wrap(new ProvisionSetupComplete(getCloudPlatform(),stack.getId()).withSetupProperty(CREDENTIAL,stack.getCredential())));
}",0.9646286003031834
63996,"@Override public AzureDeleteContextObject deleteInit(Stack stack) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureTemplate template=(AzureTemplate)stack.getTemplate();
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  AzureDeleteContextObject azureDeleteContextObject=new AzureDeleteContextObject(stack.getId(),credential.getCommonName(template.getLocation()),azureClient);
  return azureDeleteContextObject;
}","@Override public AzureDeleteContextObject deleteInit(Stack stack) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureLocation azureLocation=AzureLocation.valueOf(stack.getRegion());
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  AzureDeleteContextObject azureDeleteContextObject=new AzureDeleteContextObject(stack.getId(),credential.getCommonName(azureLocation),azureClient);
  return azureDeleteContextObject;
}",0.8901960784313725
63997,"@Override public AzureProvisionContextObject provisionInit(Stack stack,String userData) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureTemplate template=(AzureTemplate)stack.getTemplate();
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  AzureProvisionContextObject azureProvisionContextObject=new AzureProvisionContextObject(stack.getId(),credential.getCommonName(template.getLocation()),azureClient,getOsImageName(credential,template.getLocation()),userData);
  return azureProvisionContextObject;
}","@Override public AzureProvisionContextObject provisionInit(Stack stack,String userData) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureLocation azureLocation=AzureLocation.valueOf(stack.getRegion());
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  AzureProvisionContextObject azureProvisionContextObject=new AzureProvisionContextObject(stack.getId(),credential.getCommonName(azureLocation),azureClient,getOsImageName(credential,azureLocation),userData);
  return azureProvisionContextObject;
}",0.8755221386800334
63998,"@Override public AzureDeleteContextObject decommissionInit(Stack stack,Set<String> decommissionSet) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureTemplate template=(AzureTemplate)stack.getTemplate();
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  List<Resource> resourceList=new ArrayList<>();
  for (  String res : decommissionSet) {
    List<TemplateGroup> templateGroups=Lists.newArrayList(stack.getTemplateGroups());
    resourceList.add(new Resource(ResourceType.AZURE_VIRTUAL_MACHINE,res,stack,templateGroups.get(0).getGroupName()));
    resourceList.add(new Resource(ResourceType.AZURE_SERVICE_CERTIFICATE,res,stack,templateGroups.get(0).getGroupName()));
    resourceList.add(new Resource(ResourceType.AZURE_CLOUD_SERVICE,res,stack,templateGroups.get(0).getGroupName()));
  }
  AzureDeleteContextObject azureDeleteContextObject=new AzureDeleteContextObject(stack.getId(),credential.getCommonName(template.getLocation()),azureClient,resourceList);
  return azureDeleteContextObject;
}","@Override public AzureDeleteContextObject decommissionInit(Stack stack,Set<String> decommissionSet) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureLocation azureLocation=AzureLocation.valueOf(stack.getRegion());
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  List<Resource> resourceList=new ArrayList<>();
  for (  String res : decommissionSet) {
    List<TemplateGroup> templateGroups=Lists.newArrayList(stack.getTemplateGroups());
    resourceList.add(new Resource(ResourceType.AZURE_VIRTUAL_MACHINE,res,stack,templateGroups.get(0).getGroupName()));
    resourceList.add(new Resource(ResourceType.AZURE_SERVICE_CERTIFICATE,res,stack,templateGroups.get(0).getGroupName()));
    resourceList.add(new Resource(ResourceType.AZURE_CLOUD_SERVICE,res,stack,templateGroups.get(0).getGroupName()));
  }
  AzureDeleteContextObject azureDeleteContextObject=new AzureDeleteContextObject(stack.getId(),credential.getCommonName(azureLocation),azureClient,resourceList);
  return azureDeleteContextObject;
}",0.9416058394160584
63999,"@Override public AzureDescribeContextObject describeInit(Stack stack) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureTemplate template=(AzureTemplate)stack.getTemplate();
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  AzureDescribeContextObject azureDescribeContextObject=new AzureDescribeContextObject(stack.getId(),credential.getCommonName(template.getLocation()),azureClient);
  return azureDescribeContextObject;
}","@Override public AzureDescribeContextObject describeInit(Stack stack) throws Exception {
  AzureCredential credential=(AzureCredential)stack.getCredential();
  AzureLocation azureLocation=AzureLocation.valueOf(stack.getRegion());
  AzureClient azureClient=azureStackUtil.createAzureClient((AzureCredential)stack.getCredential());
  AzureDescribeContextObject azureDescribeContextObject=new AzureDescribeContextObject(stack.getId(),credential.getCommonName(azureLocation),azureClient);
  return azureDescribeContextObject;
}",0.89272030651341
64000,"@Override public boolean checkStatus(GccResourceReadyPollerObject gccResourceReadyPollerObject){
  MDCBuilder.buildMdcContext(gccResourceReadyPollerObject.getStack());
  LOGGER.info(""String_Node_Str"",gccResourceReadyPollerObject.getName());
  Operation execute=null;
  try {
    execute=gccResourceReadyPollerObject.getZoneOperations().execute();
    if (execute.getHttpErrorStatusCode() != null) {
      throw new GccResourceCreationException(String.format(""String_Node_Str"",gccResourceReadyPollerObject.getName(),gccResourceReadyPollerObject.getOperationName(),gccResourceReadyPollerObject.getStack().getId()));
    }
 else {
      Integer progress=execute.getProgress();
      return (progress.intValue() != FINISHED) ? false : true;
    }
  }
 catch (  IOException e) {
    throw new GccResourceCreationException(String.format(""String_Node_Str"",gccResourceReadyPollerObject.getName(),gccResourceReadyPollerObject.getOperationName(),gccResourceReadyPollerObject.getStack().getId()));
  }
}","@Override public boolean checkStatus(GccResourceReadyPollerObject gccResourceReadyPollerObject){
  MDCBuilder.buildMdcContext(gccResourceReadyPollerObject.getStack());
  LOGGER.info(""String_Node_Str"",gccResourceReadyPollerObject.getName());
  Operation execute=null;
  try {
    execute=gccResourceReadyPollerObject.getZoneOperations().execute();
    if (execute.getHttpErrorStatusCode() != null) {
      throw new GccResourceCreationException(String.format(""String_Node_Str"",gccResourceReadyPollerObject.getName(),gccResourceReadyPollerObject.getOperationName(),gccResourceReadyPollerObject.getStack().getId(),execute.getHttpErrorMessage()));
    }
 else {
      Integer progress=execute.getProgress();
      return (progress.intValue() != FINISHED) ? false : true;
    }
  }
 catch (  IOException e) {
    throw new GccResourceCreationException(String.format(""String_Node_Str"",gccResourceReadyPollerObject.getName(),gccResourceReadyPollerObject.getOperationName(),gccResourceReadyPollerObject.getStack().getId(),execute.getHttpErrorMessage()));
  }
}",0.9706457925636008
